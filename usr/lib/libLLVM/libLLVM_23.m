_QWORD *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;

  v4 = a1[2];
  v9 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)(v4 + 40), *(_DWORD *)(v4 + 56), a2, &v9) & 1) == 0)
    return 0;
  v5 = *(_QWORD **)(v9 + 8);
  if (!v5 || v5 == a1)
    return 0;
  do
  {
    v8 = v5;
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a1, (_QWORD *)v5[1]))
      break;
    v5 = (_QWORD *)v8[1];
  }
  while (v5 != a1);
  if ((*v8 & 0xFFFFFFFFFFFFFFF8) == a2)
    return v8;
  else
    return 0;
}

{
  return __ZNK4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE16getSubRegionNodeEPNS_17MachineBasicBlockE(a1, a2);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNode(_QWORD *a1, unint64_t a2)
{
  uint64_t *result;

  result = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(a1, a2);
  if (!result)
    return llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getBBNode((uint64_t)a1, a2);
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::addSubRegion(_QWORD *a1, uint64_t **a2, int a3)
{
  uint64_t **v6;
  uint64_t ***v7;
  uint64_t *v8;
  void **v9;
  const void *v10;
  void *v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  const void *v15;
  void *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  unsigned int v79;
  _BYTE *v80;
  _BYTE v81[64];
  char *v82;
  char *v83;
  uint64_t v84;
  void **v85;
  void **v86;
  int v87;
  int v88;
  int v89;
  _BYTE v90[64];
  void *__p;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  int v97;
  void *v98;
  _BYTE *v99;
  void *v100;
  void *v101;
  unsigned int v102;
  unsigned int v103;
  void *v104;
  _BYTE *v105;
  unint64_t v106;

  a2[1] = a1;
  v6 = (uint64_t **)(a1 + 5);
  v94 = (char *)a2;
  v7 = (uint64_t ***)a1[6];
  if ((unint64_t)v7 >= a1[7])
  {
    v8 = sub_1C51A3860(v6, (uint64_t *)&v94);
  }
  else
  {
    v94 = 0;
    *v7 = a2;
    v8 = (uint64_t *)(v7 + 1);
  }
  a1[6] = v8;
  sub_1C51A37E8((uint64_t *)&v94, 0);
  if (!a3)
    return;
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::elements(a1, &v94);
  v9 = (void **)v90;
  v85 = (void **)v90;
  v10 = v95;
  if (v95 == v94)
  {
    v86 = (void **)v90;
    v11 = v95;
  }
  else
  {
    v78 = (int)v96;
    v9 = (void **)malloc_type_malloc(8 * v96, 0x4065EBACuLL);
    if (!v9)
    {
      if (v78)
        goto LABEL_145;
      v9 = (void **)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v9)
        goto LABEL_145;
    }
    v86 = v9;
    v11 = v94;
    v10 = v95;
  }
  v12 = HIDWORD(v96);
  v87 = (int)v96;
  if (v10 == v11)
    v13 = HIDWORD(v96);
  else
    v13 = v96;
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    v12 = HIDWORD(v96);
  }
  v88 = v12;
  v89 = v97;
  v92 = 0;
  v93 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v98, v99, (v99 - (_BYTE *)v98) >> 5);
  v14 = v81;
  v15 = v101;
  if (v101 != v100)
  {
    v79 = v102;
    v14 = malloc_type_malloc(8 * v102, 0x4065EBACuLL);
    if (v14 || !v79 && (v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v80 = v14;
      v16 = v100;
      v15 = v101;
      goto LABEL_14;
    }
LABEL_145:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v80 = v81;
  v16 = v101;
LABEL_14:
  if (v15 == v16)
    v17 = v103;
  else
    v17 = v102;
  if (v17)
    memmove(v14, v15, 8 * v17);
  v83 = 0;
  v84 = 0;
  v82 = 0;
  sub_1C4E19D7C(&v82, v104, v105, (v105 - (_BYTE *)v104) >> 5);
  while (1)
  {
    if (v92 - (_BYTE *)__p != v83 - v82)
      goto LABEL_37;
    if (__p == v92)
      break;
    v18 = v82 + 16;
    v19 = (char *)__p + 16;
    while (1)
    {
      v20 = v19 - 16;
      if (*((_QWORD *)v19 - 2) != *((_QWORD *)v18 - 2))
        break;
      v21 = v18[8];
      if (v19[8])
        v22 = v21 == 0;
      else
        v22 = 1;
      if (v22)
      {
        if ((v19[8] == 0) == (v21 != 0))
          break;
      }
      else
      {
        v23 = *((_QWORD *)v19 - 1);
        if ((v23 & 6) != 0)
        {
          if (((*((_DWORD *)v18 - 2) ^ v23) & 6) != 0)
            break;
        }
        else if (*(_QWORD *)v19 != *(_QWORD *)v18)
        {
          break;
        }
      }
      v18 += 32;
      v19 += 32;
      if (v20 + 32 == v92)
        goto LABEL_41;
    }
LABEL_37:
    v24 = **((_QWORD **)v92 - 4);
    if ((v24 & 4) == 0)
    {
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a2, v24 & 0xFFFFFFFFFFFFFFF8))
      {
        v26 = a1[2];
        v106 = v25;
        sub_1C6180A54(v26 + 40, (uint64_t *)&v106)[1] = a2;
      }
    }
    sub_1C61FAA08((char *)&v85);
  }
LABEL_41:
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v80 != v81)
    free(v80);
  if (__p)
  {
    v92 = (char *)__p;
    operator delete(__p);
  }
  if (v86 != v85)
    free(v86);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v101 != v100)
    free(v101);
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v95 != v94)
    free(v95);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v27 = (uint64_t *)a1[5];
  v28 = (uint64_t *)a1[6];
  if (v27 == v28)
  {
    v29 = 0;
LABEL_91:
    v45 = v27;
    goto LABEL_92;
  }
  v29 = 0;
  do
  {
    if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a2, (_QWORD *)*v27)
      || (uint64_t **)*v27 == a2)
    {
      if (v29 >= v96)
      {
        v35 = v94;
        v36 = (v29 - v94) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_138;
        v38 = v96 - v94;
        if ((v96 - v94) >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 >> 61)
            goto LABEL_139;
          v40 = (char *)operator new(8 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = (uint64_t *)&v40[8 * v36];
        v42 = *v27;
        *v27 = 0;
        *v41 = v42;
        v34 = (char *)(v41 + 1);
        if (v29 == v35)
        {
          v94 = (char *)v41;
          v95 = (char *)(v41 + 1);
          v96 = &v40[8 * v39];
        }
        else
        {
          do
          {
            v43 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *(_QWORD *)v29 = 0;
            *--v41 = v43;
          }
          while (v29 != v35);
          v29 = v94;
          v44 = (uint64_t *)v95;
          v94 = (char *)v41;
          v95 = v34;
          v96 = &v40[8 * v39];
          while (v44 != (uint64_t *)v29)
            sub_1C51A37E8(--v44, 0);
        }
        if (v29)
          operator delete(v29);
      }
      else
      {
        v33 = *v27;
        *v27 = 0;
        *(_QWORD *)v29 = v33;
        v34 = v29 + 8;
      }
      v95 = v34;
      v29 = v34;
    }
    else
    {
      *(_QWORD *)(*v27 + 8) = a2;
      v30 = a2[6];
      if (v30 >= a2[7])
      {
        v32 = sub_1C51A3860(a2 + 5, v27);
      }
      else
      {
        v31 = *v27;
        *v27 = 0;
        *v30 = v31;
        v32 = v30 + 1;
      }
      a2[6] = v32;
    }
    ++v27;
  }
  while (v27 != v28);
  v45 = (uint64_t *)a1[5];
  v27 = (uint64_t *)a1[6];
  if (v27 == v45)
    goto LABEL_91;
  do
    sub_1C51A37E8(--v27, 0);
  while (v27 != v45);
  v27 = *v6;
  v29 = v95;
LABEL_92:
  a1[6] = v45;
  v46 = (uint64_t *)v94;
  if (v29 - v94 >= 1)
  {
    v47 = (v29 - v94) >> 3;
    v48 = a1[7];
    if (v47 <= (v48 - (uint64_t)v45) >> 3)
    {
      v53 = v45 - v27;
      if (v53 >= v47)
      {
        v54 = &v94[8 * v47];
        v55 = v45;
      }
      else
      {
        v54 = &v94[8 * v53];
        v55 = v45;
        if (v54 != v29)
        {
          v56 = v54;
          v57 = v45;
          do
          {
            v58 = *(_QWORD *)v56;
            *(_QWORD *)v56 = 0;
            v56 += 8;
            *v57++ = v58;
            ++v55;
          }
          while (v56 != v29);
        }
        a1[6] = v55;
        if ((char *)v45 - (char *)v27 < 1)
          goto LABEL_133;
      }
      v59 = &v27[v47];
      v60 = &v55[-v47];
      v61 = v55;
      if (v60 < v45)
      {
        v61 = v55;
        do
        {
          v62 = *v60;
          *v60++ = 0;
          *v61++ = v62;
        }
        while (v60 < v45);
      }
      a1[6] = v61;
      if (v55 != v59)
      {
        v63 = v55 - 1;
        v64 = v55 - v59;
        v65 = v27 - 1;
        do
        {
          v66 = v65[v64];
          v65[v64] = 0;
          sub_1C51A37E8(v63--, v66);
          --v64;
        }
        while (v64 * 8);
      }
      for (; v46 != (uint64_t *)v54; ++v27)
      {
        v67 = *v46;
        *v46++ = 0;
        sub_1C51A37E8(v27, v67);
      }
      goto LABEL_133;
    }
    v49 = v47 + v45 - v27;
    if (v49 >> 61)
LABEL_138:
      abort();
    v50 = v48 - (_QWORD)v27;
    if (v50 >> 2 > v49)
      v49 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 61)
LABEL_139:
        sub_1C4764EE4();
      v52 = (char *)operator new(8 * v51);
    }
    else
    {
      v52 = 0;
    }
    v68 = 0;
    v69 = (uint64_t *)&v52[8 * v47];
    do
    {
      v70 = v46[v68];
      v46[v68] = 0;
      *(_QWORD *)&v52[v68 * 8] = v70;
      ++v68;
    }
    while (v47 != v68);
    v71 = *v6;
    v72 = v52;
    if (v27 != *v6)
    {
      v73 = v27;
      v72 = v52;
      do
      {
        v74 = *--v73;
        *v73 = 0;
        *((_QWORD *)v72 - 1) = v74;
        v72 -= 8;
      }
      while (v73 != v71);
    }
    v75 = (uint64_t *)a1[6];
    if (v27 != v75)
    {
      do
      {
        v76 = *v27;
        *v27++ = 0;
        *v69++ = v76;
      }
      while (v27 != v75);
      v27 = (uint64_t *)a1[6];
    }
    v77 = (uint64_t *)a1[5];
    a1[5] = v72;
    a1[6] = v69;
    a1[7] = &v52[8 * v51];
    while (v27 != v77)
      sub_1C51A37E8(--v27, 0);
    if (v77)
      operator delete(v77);
  }
LABEL_133:
  v85 = (void **)&v94;
  sub_1C51A35F8(&v85);
}

{
  __ZN4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE12addSubRegionEPNS_13MachineRegionEb(a1, a2, a3);
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::isSubRegion(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::setRegionFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_1C6180A54(a1 + 40, &v5);
  result[1] = a3;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::removeSubRegion(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(uint64_t **)(a1 + 40);
  v4 = *(uint64_t **)(a1 + 48);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = *(uint64_t **)(a1 + 48);
        break;
      }
    }
  }
  v6 = v5 + 1;
  if (v5 + 1 != v4)
  {
    do
    {
      v7 = v6 - 1;
      v8 = *v6;
      *v6++ = 0;
      sub_1C51A37E8(v7, v8);
      ++v5;
    }
    while (v6 != v4);
    v4 = *(uint64_t **)(a1 + 48);
  }
  while (v4 != v5)
    sub_1C51A37E8(--v4, 0);
  *(_QWORD *)(a1 + 48) = v5;
  return a2;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::transferChildrenTo(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = result;
  v3 = (uint64_t *)result[5];
  v4 = (uint64_t *)result[6];
  if (v3 != v4)
  {
    v6 = (uint64_t **)(a2 + 40);
    result = *(uint64_t **)(a2 + 48);
    do
    {
      *(_QWORD *)(*v3 + 8) = a2;
      if ((unint64_t)result >= *(_QWORD *)(a2 + 56))
      {
        result = sub_1C51A3860(v6, v3);
      }
      else
      {
        v7 = *v3;
        *v3 = 0;
        *result++ = v7;
      }
      *(_QWORD *)(a2 + 48) = result;
      ++v3;
    }
    while (v3 != v4);
    v8 = (uint64_t *)v2[5];
    v3 = (uint64_t *)v2[6];
    if (v3 != v8)
    {
      do
        result = sub_1C51A37E8(--v3, 0);
      while (v3 != v8);
      v3 = v8;
    }
  }
  v2[6] = (uint64_t)v3;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = (_QWORD *)(a1 + 72);
  sub_1C61FA9B0(*(_QWORD **)(a1 + 72));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v3 = (uint64_t *)*(v1 - 4);
  v2 = (uint64_t *)*(v1 - 3);
  while (v3 != v2)
  {
    v4 = *v3++;
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(v4);
  }
}

{
  __ZN4llvm10RegionBaseINS_12RegionTraitsINS_15MachineFunctionEEEE14clearNodeCacheEv(a1);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::block_begin@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C51A3960(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

{
  return sub_1C51A3B6C(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

double llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::block_end@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::blocks(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;

  sub_1C51A3960((uint64_t)&v9, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
  v3 = (void *)(a2 + 32);
  *(_QWORD *)a2 = a2 + 32;
  v5 = v9;
  v4 = v10;
  if (v10 == v9)
  {
    *(_QWORD *)(a2 + 8) = v3;
    v6 = HIDWORD(v11);
    if (HIDWORD(v11))
      memmove(v3, v4, 8 * HIDWORD(v11));
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v10;
    v10 = v5;
    v4 = v5;
    v6 = HIDWORD(v11);
  }
  v7 = v12;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = v7;
  v11 = 8;
  v12 = 0;
  *(_OWORD *)(a2 + 96) = v13;
  v8 = v14;
  v13 = 0uLL;
  v14 = 0;
  *(_QWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 120) = a2 + 152;
  *(_QWORD *)(a2 + 128) = a2 + 152;
  *(_QWORD *)(a2 + 136) = 8;
  *(_DWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  if (v4 != v5)
    free(v4);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::element_begin@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C51A2350(a2, a1);
}

{
  return sub_1C51A2350(a2, a1);
}

uint64_t sub_1C51A2350(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *SubRegionNode;

  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(a2, v4);
  if (!SubRegionNode)
    SubRegionNode = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getBBNode((uint64_t)a2, v4);
  return sub_1C61AF79C(a1, (uint64_t)SubRegionNode);
}

double llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::element_end@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double result;

  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(a1, v4))
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getBBNode((uint64_t)a1, v4);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a2 + 16) = 8;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

{
  unint64_t v4;
  double result;

  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(a1, v4))
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getBBNode((uint64_t)a1, v4);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a2 + 16) = 8;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionInfoBase(uint64_t result)
{
  *(_QWORD *)result = &unk_1E8145D68;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionInfoBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E8145D68;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1C61446F0((unsigned int *)(a2 + 40));
  return a1;
}

unsigned int *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::wipe(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return sub_1C61446F0((unsigned int *)(a1 + 40));
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v4 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  v5 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1C61446F0((unsigned int *)(a2 + 40));
  return a1;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyBBMap(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  const void *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  const void *v10;
  void *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE v25[64];
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _BYTE v34[64];
  void *__p;
  char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  void *v43;
  _BYTE *v44;
  void *v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;

  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::elements(a2, &v38);
  v4 = v34;
  v29 = v34;
  v5 = v39;
  if (v39 == v38)
  {
    v30 = v34;
    v6 = v39;
  }
  else
  {
    v22 = v40;
    v4 = malloc_type_malloc(8 * v40, 0x4065EBACuLL);
    if (!v4)
    {
      if (v22)
        goto LABEL_66;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_66;
    }
    v30 = v4;
    v6 = v38;
    v5 = v39;
  }
  v7 = v41;
  v31 = v40;
  if (v5 == v6)
    v8 = v41;
  else
    v8 = v40;
  if (v8)
  {
    memmove(v4, v5, 8 * v8);
    v7 = v41;
  }
  v32 = v7;
  v33 = v42;
  v36 = 0;
  v37 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v43, v44, (v44 - (_BYTE *)v43) >> 5);
  v9 = v25;
  v10 = v46;
  if (v46 != v45)
  {
    v23 = v47;
    v9 = malloc_type_malloc(8 * v47, 0x4065EBACuLL);
    if (v9 || !v23 && (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v24 = v9;
      v11 = v45;
      v10 = v46;
      goto LABEL_10;
    }
LABEL_66:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v24 = v25;
  v11 = v46;
LABEL_10:
  if (v10 == v11)
    v12 = v48;
  else
    v12 = v47;
  if (v12)
    memmove(v9, v10, 8 * v12);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  sub_1C4E19D7C(&v26, v49, v50, (v50 - (_BYTE *)v49) >> 5);
  while (1)
  {
    if (v36 - (_BYTE *)__p != v27 - v26)
      goto LABEL_33;
    if (__p == v36)
      break;
    v13 = v26 + 16;
    v14 = (char *)__p + 16;
    while (1)
    {
      v15 = v14 - 16;
      if (*((_QWORD *)v14 - 2) != *((_QWORD *)v13 - 2))
        break;
      v16 = v13[8];
      if (v14[8])
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
      {
        if ((v14[8] == 0) == (v16 != 0))
          break;
      }
      else
      {
        v18 = *((_QWORD *)v14 - 1);
        if ((v18 & 6) != 0)
        {
          if (((*((_DWORD *)v13 - 2) ^ v18) & 6) != 0)
            break;
        }
        else if (*(_QWORD *)v14 != *(_QWORD *)v13)
        {
          break;
        }
      }
      v13 += 32;
      v14 += 32;
      if (v15 + 32 == v36)
        goto LABEL_40;
    }
LABEL_33:
    v19 = **((_QWORD **)v36 - 4);
    if ((v19 & 4) != 0)
    {
      llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyBBMap(a1);
    }
    else
    {
      v51 = 0;
      v20 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v19 & 0xFFFFFFFFFFFFFFF8, &v51);
      v21 = 0;
      if (v20)
        v21 = *(_QWORD **)(v51 + 8);
      if (v21 != a2)
        llvm::report_fatal_error((llvm *)"BB map does not match region nesting", (const char *)1);
    }
    sub_1C61FAA08((char *)&v29);
  }
LABEL_40:
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24 != v25)
    free(v24);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
  if (v30 != v29)
    free(v30);
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v46 != v45)
    free(v46);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v39 != v38)
    free(v39);
}

{
  __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_15MachineFunctionEEEE11verifyBBMapEPKNS_13MachineRegionE(a1, a2);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::isRegion(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  _QWORD *v43;
  _QWORD *v44;

  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
  v7 = (_QWORD *)*v6;
  if (!*v6)
    goto LABEL_12;
  v8 = *(_QWORD *)(a1 + 24) + 256;
  do
  {
    v9 = v7[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = (uint64_t)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if ((_QWORD *)v8 == v6 || *(_QWORD *)(v8 + 32) > a2)
LABEL_12:
    v8 = *(_QWORD *)(a1 + 24) + 256;
  v12 = *(_QWORD *)(a1 + 8);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v12);
  if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v12 + 1320), a2, a3))
  {
    v40 = *(_QWORD **)(v8 + 40);
    if (v40 != (_QWORD *)(v8 + 48))
    {
      do
      {
        v41 = v40[4];
        v42 = v41 == a3 || v41 == a2;
        result = v42;
        if (!v42)
          break;
        v43 = (_QWORD *)v40[1];
        if (v43)
        {
          do
          {
            v44 = v43;
            v43 = (_QWORD *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (_QWORD *)v40[2];
            v23 = *v44 == (_QWORD)v40;
            v40 = v44;
          }
          while (!v23);
        }
        v40 = v44;
      }
      while (v44 != (_QWORD *)(v8 + 48));
      return result;
    }
    return 1;
  }
  v13 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
  v14 = (_QWORD *)*v13;
  if (!*v13)
    goto LABEL_25;
  v15 = *(_QWORD *)(a1 + 24) + 256;
  do
  {
    v16 = v14[4];
    v17 = v16 >= a3;
    if (v16 >= a3)
      v18 = v14;
    else
      v18 = v14 + 1;
    if (v17)
      v15 = (uint64_t)v14;
    v14 = (_QWORD *)*v18;
  }
  while (*v18);
  if ((_QWORD *)v15 == v13 || *(_QWORD *)(v15 + 32) > a3)
LABEL_25:
    v15 = *(_QWORD *)(a1 + 24) + 256;
  v19 = *(_QWORD **)(v8 + 40);
  v20 = (_QWORD *)(v8 + 48);
  if (v19 != v20)
  {
    v21 = (_QWORD *)(v15 + 48);
    do
    {
      v22 = v19[4];
      v23 = v22 == a3 || v22 == a2;
      if (!v23)
      {
        v24 = (_QWORD *)*v21;
        if (!*v21)
          return 0;
        v25 = (_QWORD *)(v15 + 48);
        do
        {
          v26 = v24[4];
          v27 = v26 >= v22;
          if (v26 >= v22)
            v28 = v24;
          else
            v28 = v24 + 1;
          if (v27)
            v25 = v24;
          v24 = (_QWORD *)*v28;
        }
        while (*v28);
        if (v25 == v21 || v22 < v25[4])
          return 0;
        result = llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::isCommonDomFrontier(a1, v22, a2, a3);
        if (!(_DWORD)result)
          return result;
      }
      v30 = (_QWORD *)v19[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v19[2];
          v23 = *v31 == (_QWORD)v19;
          v19 = v31;
        }
        while (!v23);
      }
      v19 = v31;
    }
    while (v31 != v20);
  }
  v32 = *(_QWORD **)(v15 + 40);
  v33 = (_QWORD *)(v15 + 48);
  if (v32 == (_QWORD *)(v15 + 48))
    return 1;
  do
  {
    v34 = v32[4];
    v35 = *(_QWORD *)(a1 + 8);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v35);
    v36 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v35 + 1320), a2, v34);
    v37 = v34 != a3 && v36;
    if (v37)
      break;
    v38 = (_QWORD *)v32[1];
    if (v38)
    {
      do
      {
        v39 = v38;
        v38 = (_QWORD *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        v39 = (_QWORD *)v32[2];
        v23 = *v39 == (_QWORD)v32;
        v32 = v39;
      }
      while (!v23);
    }
    v32 = v39;
  }
  while (v39 != v33);
  return !v37;
}

{
  return __ZNK4llvm14RegionInfoBaseINS_12RegionTraitsINS_15MachineFunctionEEEE8isRegionEPNS_17MachineBasicBlockES6_(a1, a2, a3);
}

BOOL llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::isTrivialRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a2 + 88);
  return ((*(_QWORD *)(a2 + 96) - (_QWORD)v3) & 0x7FFFFFFF0) == 0 && *v3 == a3;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::scanForRegions(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v5 = sub_1C49FA70C(a1[1], *(_QWORD *)(a2 + 328));
  sub_1C61AE614((uint64_t)&v19, v5);
  sub_1C61AF960((const void **)&v14, (llvm::SmallPtrSetImplBase *)&v19);
  sub_1C61AF960((const void **)&v9, (llvm::SmallPtrSetImplBase *)&v23);
  while (1)
  {
    if (v17 != v12)
      goto LABEL_12;
    if (!v17)
      break;
    v6 = v11;
    v7 = v16;
    while (*v7 == *v6 && v7[1] == v6[1])
    {
      v7 += 2;
      v6 += 2;
      if (v7 == (_QWORD *)((char *)v16 + 16 * v17))
        goto LABEL_14;
    }
LABEL_12:
    llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::findRegionsWithEntry(a1, **((_QWORD **)v16 + 2 * v17-- - 2), a3);
    if (v17)
      sub_1C4EB6F48(&v14);
  }
LABEL_14:
  if (v11 != &v13)
    free(v11);
  if (v10 != v9)
    free(v10);
  if (v16 != &v18)
    free(v16);
  if (v15 != v14)
    free(v15);
  if (v25 != v26)
    free(v25);
  if (v24 != v23)
    free(v24);
  if (v21 != &v22)
    free(v21);
  if (v20 != v19)
    free(v20);
}

{
  __ZN4llvm14RegionInfoBaseINS_12RegionTraitsINS_15MachineFunctionEEEE14scanForRegionsERS2_PNS_8DenseMapIPNS_17MachineBasicBlockES8_NS_12DenseMapInfoIS8_vEENS_6detail12DenseMapPairIS8_S8_EEEE(a1, a2, a3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getTopMostParent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    result = a2;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while (a2);
  return result;
}

double llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  void *v4;
  _OWORD *v5;
  double result;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0xCuLL)
  {
    qmemcpy(v4, "Region tree:\n", 13);
    *((_QWORD *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "Region tree:\n", 0xDuLL);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print(*(uint64_t **)(a1 + 32), this, 1, 0, llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::printStyle);
  v5 = (_OWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xFuLL)
  {
    result = *(double *)"End region tree\n";
    *v5 = *(_OWORD *)"End region tree\n";
    *((_QWORD *)this + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(this, "End region tree\n", 0x10uLL);
  }
  return result;
}

void llvm::MachineRegion::~MachineRegion(llvm::MachineRegion *this)
{
  _QWORD *v2;
  void **v3;

  v2 = (_QWORD *)((char *)this + 72);
  sub_1C61FA9B0(*((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 10) = 0;
  *v2 = 0;
  v3 = (void **)((char *)this + 40);
  sub_1C51A35F8(&v3);
}

{
  _QWORD *v2;
  void **v3;

  v2 = (_QWORD *)((char *)this + 72);
  sub_1C61FA9B0(*((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = v2;
  *((_QWORD *)this + 10) = 0;
  *v2 = 0;
  v3 = (void **)((char *)this + 40);
  sub_1C51A35F8(&v3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::operator[](uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v4);
  result = 0;
  if (v2)
    return *(_QWORD *)(v4 + 8);
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getMaxRegionExit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v19;

  v4 = 0;
  do
  {
    v19 = 0;
    v5 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v19);
    v6 = 0;
    if (v5)
      v6 = *(_QWORD **)(v19 + 8);
    while (1)
    {
      v7 = v6;
      if (!v6)
        break;
      v6 = (_QWORD *)v6[1];
      if (!v6 || a2 != (*v6 & 0xFFFFFFFFFFFFFFF8))
      {
        if (a2 == (*v7 & 0xFFFFFFFFFFFFFFF8))
        {
          v8 = v7 + 4;
          goto LABEL_9;
        }
        break;
      }
    }
    v8 = *(uint64_t **)(a2 + 88);
    if (v8 + 1 != *(uint64_t **)(a2 + 96))
      return v4;
LABEL_9:
    v4 = *v8;
    v19 = 0;
    v9 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v4, &v19);
    v10 = 0;
    if (v9)
      v10 = *(_QWORD **)(v19 + 8);
    do
    {
      v11 = v10;
      if (!v10)
        break;
      v10 = (_QWORD *)v10[1];
      if (!v10)
        break;
    }
    while (v4 == (*v10 & 0xFFFFFFFFFFFFFFF8));
    v12 = *(uint64_t **)(v4 + 64);
    v13 = *(uint64_t **)(v4 + 72);
    while (v12 != v13)
    {
      while (1)
      {
        v14 = *v12;
        if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v7, *v12) & 1) != 0)
          break;
        ++v12;
        if (llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v11, v14))
          v15 = v12 == v13;
        else
          v15 = 1;
        if (v15)
          goto LABEL_24;
      }
      ++v12;
    }
LABEL_24:
    v16 = *(_QWORD *)(a1 + 8);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v16);
    v17 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v16 + 1320), v4, a2);
    a2 = v4;
  }
  while (!v17);
  return v4;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = a3;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(a2, a3) & 1) != 0)
    return a2;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v3, a2) & 1) == 0)
  {
    do
      v3 = (_QWORD *)v3[1];
    while (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v3, a2));
  }
  return v3;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = 0;
  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v9))
    v5 = *(_QWORD **)(v9 + 8);
  v9 = 0;
  v6 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), a3, &v9);
  v7 = 0;
  if (v6)
    v7 = *(_QWORD **)(v9 + 8);
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v5, v7) & 1) != 0)
    return v5;
  if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v7, v5) & 1) == 0)
  {
    do
      v7 = (_QWORD *)v7[1];
    while (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v7, v5));
  }
  return v7;
}

_QWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;

  v2 = *(_QWORD ***)a2;
  v3 = *(unsigned int *)(a2 + 8);
  v4 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3 - 8);
  v5 = v3 - 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (!v5)
    return v4;
  v6 = &v2[v5];
  do
  {
    v7 = *v2;
    if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v4, *v2) & 1) != 0)
    {
      v7 = v4;
    }
    else if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v7, v4) & 1) == 0)
    {
      do
        v7 = (_QWORD *)v7[1];
      while (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v7, v4));
    }
    ++v2;
    v4 = v7;
  }
  while (v2 != v6);
  return v7;
}

{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
  v12 = 0;
  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v4, &v12))
    v5 = *(_QWORD **)(v12 + 8);
  v6 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v6;
  if (!v6)
    return v5;
  v7 = *(uint64_t **)a2;
  v8 = *(_QWORD *)a2 + 8 * v6;
  do
  {
    v9 = *v7;
    v12 = 0;
    v10 = 0;
    if (sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v9, &v12))
      v10 = *(_QWORD **)(v12 + 8);
    if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v5, v10) & 1) != 0)
    {
      v10 = v5;
    }
    else if ((llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v10, v5) & 1) == 0)
    {
      do
        v10 = (_QWORD *)v10[1];
      while (!llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(v10, v5));
    }
    ++v7;
    v5 = v10;
  }
  while (v7 != (uint64_t *)v8);
  return v10;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getTopLevelRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(v1);
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyAnalysis(uint64_t a1)
{
  if (llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::VerifyRegionInfo)
  {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyRegionNest(*(uint64_t **)(a1 + 32));
    llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyBBMap(a1, *(_QWORD **)(a1 + 32));
  }
}

uint64_t llvm::MachineRegionInfo::MachineRegionInfo(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = &off_1E8145D90;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = &off_1E8145D90;
  return this;
}

void llvm::MachineRegionInfoPass::~MachineRegionInfoPass(llvm::MachineRegionInfoPass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E8145DB8;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase((_QWORD *)this + 31);
  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E8145DB8;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase((_QWORD *)this + 31);
  sub_1C4926674(this);
}

{
  *(_QWORD *)this = &off_1E8145DB8;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase((_QWORD *)this + 31);
  sub_1C4926674(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51A3528(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineDominanceFrontierPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Detect single entry single exit regions";
  *(_QWORD *)(v4 + 8) = 39;
  *(_QWORD *)(v4 + 16) = "machine-region-info";
  *(_QWORD *)(v4 + 24) = 19;
  *(_QWORD *)(v4 + 32) = &llvm::MachineRegionInfoPass::ID;
  *(_WORD *)(v4 + 40) = 257;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::MachineRegionInfoPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

llvm::MachineRegionInfoPass *llvm::createMachineRegionInfoPass(llvm *this)
{
  llvm::MachineRegionInfoPass *v1;

  v1 = (llvm::MachineRegionInfoPass *)operator new();
  return llvm::MachineRegionInfoPass::MachineRegionInfoPass(v1);
}

void sub_1C51A35F8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          sub_1C61FA9B0(*(_QWORD **)(v6 + 72));
          *(_QWORD *)(v6 + 64) = v6 + 72;
          *(_QWORD *)(v6 + 80) = 0;
          *(_QWORD *)(v6 + 72) = 0;
          v8 = v6 + 40;
          sub_1C51A35F8(&v8);
          MEMORY[0x1CAA32FC0](v6, 0x1020C406A19994FLL);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C51A36C8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t *result;

  v2 = (uint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  if ((a1 & 6) == 0)
    v2 = a2;
  v3 = *v2;
  v4 = *(_QWORD **)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  result = llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode(v4, *v2);
  if (!result)
    return llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getBBNode((uint64_t)v4, v3);
  return result;
}

uint64_t **sub_1C51A371C(uint64_t **a1, unint64_t a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v10 = *a3;
    *((_QWORD *)a3 + 1) = 0;
    *((_OWORD *)v7 + 2) = v10;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1C51A37E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C61FA9B0(*(_QWORD **)(v2 + 72));
    *(_QWORD *)(v2 + 64) = v2 + 72;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    v3 = (void **)(v2 + 40);
    sub_1C51A35F8(&v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t *sub_1C51A3860(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t *)&v8[8 * v2];
  v10 = (uint64_t *)&v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *v9 = v11;
  v12 = v9 + 1;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *--v14;
      *v14 = 0;
      *--v9 = v15;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
      sub_1C51A37E8(--v16, 0);
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_1C51A3960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  void *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t *v20;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[64];
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v22 = v26;
  v23 = v26;
  v24 = 8;
  v25 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, a2);
  v6 = v28;
  if (v28 < v29)
  {
    *v28 = a2;
    *((_BYTE *)v6 + 8) = 0;
    v13 = v6 + 3;
    *((_BYTE *)v6 + 16) = 0;
  }
  else
  {
    v7 = v27;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v28 - v27);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * (v29 - v27) > v9)
      v9 = 0x5555555555555556 * (v29 - v27);
    if (0xAAAAAAAAAAAAAAABLL * (v29 - v27) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v8];
    *(_QWORD *)v12 = a2;
    v12[8] = 0;
    v12[16] = 0;
    v13 = (uint64_t *)(v12 + 24);
    if (v6 != v7)
    {
      do
      {
        v14 = *(_OWORD *)(v6 - 3);
        *((_QWORD *)v12 - 1) = *(v6 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        v12 -= 24;
        v6 -= 3;
      }
      while (v6 != v7);
      v6 = v27;
    }
    v27 = (uint64_t *)v12;
    v28 = v13;
    v29 = (uint64_t *)&v11[24 * v10];
    if (v6)
      operator delete(v6);
  }
  v28 = v13;
  v15 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v17 = v22;
  v16 = v23;
  if (v23 == v22)
  {
    *(_QWORD *)(a1 + 8) = v15;
    v18 = HIDWORD(v24);
    if (HIDWORD(v24))
      memmove(v15, v16, 8 * HIDWORD(v24));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v23;
    v23 = v17;
    v16 = v17;
    v18 = HIDWORD(v24);
  }
  v19 = v25;
  *(_DWORD *)(a1 + 16) = v24;
  *(_DWORD *)(a1 + 20) = v18;
  *(_DWORD *)(a1 + 24) = v19;
  v24 = 8;
  v25 = 0;
  v20 = v29;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v20;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  if (v16 != v17)
    free(v16);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a3);
  return a1;
}

uint64_t sub_1C51A3B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  sub_1C61D9E2C((uint64_t)&v11, a2);
  v5 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v7 = v11;
  v6 = v12;
  if (v12 == v11)
  {
    *(_QWORD *)(a1 + 8) = v5;
    v8 = HIDWORD(v13);
    if (HIDWORD(v13))
      memmove(v5, v6, 8 * HIDWORD(v13));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v12;
    v12 = v7;
    v6 = v7;
    v8 = HIDWORD(v13);
  }
  v9 = v14;
  *(_DWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 24) = v9;
  v13 = 8;
  v14 = 0;
  *(_OWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  v15 = 0uLL;
  v16 = 0;
  if (v6 != v7)
    free(v6);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a3);
  return a1;
}

llvm::MachineRegisterInfo *llvm::MachineRegisterInfo::MachineRegisterInfo(llvm::MachineRegisterInfo *this, llvm::MachineFunction *a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 400))(*((_QWORD *)a2 + 2));
  if (byte_1ED7FBC28)
    v4 = v3;
  else
    v4 = 0;
  *((_BYTE *)this + 16) = v4;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0x800000000;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 19) = (char *)this + 176;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 26) = (char *)this + 224;
  *((_OWORD *)this + 10) = xmmword_1C6612EE0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x400000000;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = (char *)this + 296;
  *((_QWORD *)this + 36) = 0x600000000;
  *((_DWORD *)this + 86) = 0;
  *((_QWORD *)this + 44) = (char *)this + 368;
  *((_QWORD *)this + 45) = 0x600000000;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = (char *)this + 440;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  v5 = *(unsigned int *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 176))(*(_QWORD *)(*(_QWORD *)this + 16))
                       + 16);
  if (*((_DWORD *)this + 9) <= 0xFFu)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 24, (uint64_t)this + 40, 0x100uLL, 16);
  if (*((_DWORD *)this + 55) <= 0xFFu)
    sub_1C51A618C((uint64_t)this + 208, 0x100uLL);
  v6 = *((unsigned int *)this + 72);
  if ((*((_DWORD *)this + 86) & 0x3F) != 0)
  {
    v17 = *((_QWORD *)this + 35) + 8 * v6;
    *(_QWORD *)(v17 - 8) &= ~(-1 << (*((_DWORD *)this + 86) & 0x3F));
  }
  v7 = v6;
  v8 = (_QWORD *)((char *)this + 280);
  *((_DWORD *)this + 86) = v5;
  v9 = v5 + 63;
  if ((_DWORD)v6 == (v5 + 63) >> 6)
    goto LABEL_23;
  v10 = v9 >> 6;
  if (v6 > v10)
  {
    *((_DWORD *)this + 72) = v10;
    v7 = v9 >> 6;
LABEL_23:
    LOBYTE(v12) = v5;
    goto LABEL_17;
  }
  v11 = v6;
  if (v10 > *((_DWORD *)this + 73))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 280, (uint64_t)this + 296, v10, 8);
    v11 = *((unsigned int *)this + 72);
    v7 = *((_DWORD *)this + 72);
  }
  if (v10 != v6)
    bzero((void *)(*v8 + 8 * v11), 8 * (v10 - v6));
  v7 += v10 - v6;
  *((_DWORD *)this + 72) = v7;
  v12 = *((_DWORD *)this + 86);
LABEL_17:
  v13 = v12 & 0x3F;
  if (v13)
    *(_QWORD *)(*v8 + 8 * v7 - 8) &= ~(-1 << v13);
  v14 = (void *)operator new[]();
  bzero(v14, 8 * v5);
  v15 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v14;
  if (v15)
    MEMORY[0x1CAA32F9C](v15, 0x20C8093837F09);
  return this;
}

uint64_t llvm::MachineRegisterInfo::setRegClass(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 24) + 16 * (a2 & 0x7FFFFFFF)) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

uint64_t llvm::MachineRegisterInfo::setRegBank(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 24) + 16 * (a2 & 0x7FFFFFFF)) = a3 | 4;
  return result;
}

uint64_t llvm::MachineRegisterInfo::constrainRegClass(_QWORD *a1, int a2, uint64_t a3, unsigned int a4)
{
  return sub_1C51A3F30(a1, a2, *(_QWORD *)(a1[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, a3, a4);
}

uint64_t sub_1C51A3F30(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t result;
  BOOL v12;

  if (a3 == a4)
    return a3;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  result = llvm::TargetRegisterInfo::getCommonSubClass(v10, a3, a4);
  if (result)
    v12 = result == a3;
  else
    v12 = 1;
  if (!v12)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)result + 20) >= a5)
      *(_QWORD *)(a1[3] + 16 * (a2 & 0x7FFFFFFF)) = result & 0xFFFFFFFFFFFFFFFBLL;
    else
      return 0;
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::constrainRegAttrs(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;

  if (a2 < 0 && (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a1 + 432))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (a2 & 0x7FFFFFFF));
    if ((a3 & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    if ((a3 & 0x80000000) == 0)
    {
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
  }
  if ((a3 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a1 + 432))
    goto LABEL_8;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * (a3 & 0x7FFFFFFF));
LABEL_9:
  v8 = v7 & 0xFFFFFFFFFFFFFFF9;
  if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && v8 && v6 != v7)
    return 0;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 16 * (a3 & 0x7FFFFFFF));
  if (v11 < 8)
  {
LABEL_16:
    if (!v8)
      return 1;
    v14 = (_QWORD *)(a1 + 424);
    v15 = a2 & 0x7FFFFFFF;
    v16 = *(unsigned int *)(a1 + 432);
    if (v15 < v16)
    {
LABEL_25:
      *(_QWORD *)(*v14 + 8 * v15) = v7;
      return 1;
    }
    v17 = *(_QWORD *)(a1 + 440);
    v18 = v15 + 1 - v16;
    if (v15 >= *(unsigned int *)(a1 + 436))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 424, a1 + 440, v15 + 1, 8);
      v19 = *(unsigned int *)(a1 + 432);
      v20 = *(_DWORD *)(a1 + 432);
      if (v18)
      {
LABEL_20:
        v21 = (_QWORD *)(*v14 + 8 * v19);
        v22 = ~v15 + v16;
        do
          *v21++ = v17;
        while (!__CFADD__(v22++, 1));
        v20 = *(_DWORD *)(a1 + 432);
      }
    }
    else
    {
      v19 = *(unsigned int *)(a1 + 432);
      v20 = *(_DWORD *)(a1 + 432);
      if (v18)
        goto LABEL_20;
    }
    *(_DWORD *)(a1 + 432) = v20 + v18;
    goto LABEL_25;
  }
  v12 = (unint64_t *)(v10 + 16 * (a2 & 0x7FFFFFFF));
  v13 = *v12;
  if (*v12 <= 7)
  {
    *v12 = v11;
    goto LABEL_16;
  }
  if (((v11 & 4) == 0) != ((*v12 & 4) == 0))
    return 0;
  if ((v13 & 4) != 0)
  {
    if (v13 == v11)
      goto LABEL_16;
    return 0;
  }
  result = sub_1C51A3F30((_QWORD *)a1, a2, v13 & 0xFFFFFFFFFFFFFFF8, v11 & 0xFFFFFFFFFFFFFFF8, a4);
  if (result)
    goto LABEL_16;
  return result;
}

_QWORD *llvm::MachineRegisterInfo::setType(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = result + 53;
  v5 = a2 & 0x7FFFFFFF;
  v6 = *((unsigned int *)result + 108);
  if (v5 >= v6)
  {
    v7 = result;
    v8 = result[55];
    v9 = v5 + 1 - v6;
    if (v5 >= *((unsigned int *)result + 109))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 53), (uint64_t)(result + 55), v5 + 1, 8);
      v10 = *((unsigned int *)v7 + 108);
      v11 = *((_DWORD *)v7 + 108);
      if (v9)
      {
LABEL_4:
        v12 = (_QWORD *)(*v4 + 8 * v10);
        v13 = ~v5 + v6;
        do
          *v12++ = v8;
        while (!__CFADD__(v13++, 1));
        v11 = *((_DWORD *)v7 + 108);
      }
    }
    else
    {
      v10 = *((unsigned int *)result + 108);
      v11 = *((_DWORD *)result + 108);
      if (v9)
        goto LABEL_4;
    }
    *((_DWORD *)v7 + 108) = v11 + v9;
  }
  *(_QWORD *)(*v4 + 8 * v5) = a3;
  return result;
}

uint64_t llvm::MachineRegisterInfo::recomputeRegClass(_QWORD *a1, unsigned int a2)
{
  llvm::TargetInstrInfo *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::MachineInstr *v13;
  uint64_t v14;
  llvm::TargetRegisterInfo *v15;
  uint64_t RegClassConstraintEffect;
  BOOL v17;

  v4 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 104))(*(_QWORD *)(*a1 + 16));
  v5 = 16 * (a2 & 0x7FFFFFFF);
  v6 = *(_QWORD *)(a1[3] + v5) & 0xFFFFFFFFFFFFFFF8;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  v8 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 256))(v7, v6, *a1);
  if (v8 != v6)
  {
    v9 = v8;
    if ((a2 & 0x80000000) != 0)
      v10 = (uint64_t *)(a1[3] + 16 * (a2 & 0x7FFFFFFF) + 8);
    else
      v10 = (uint64_t *)(a1[34] + 8 * a2);
    v11 = *v10;
    if (!*v10)
    {
LABEL_8:
      *(_QWORD *)(a1[3] + v5) = v9 & 0xFFFFFFFFFFFFFFFBLL;
      return 1;
    }
    while ((*(_DWORD *)v11 & 0x80000000) != 0)
    {
      v11 = *(_QWORD *)(v11 + 24);
      if (!v11)
        goto LABEL_8;
    }
LABEL_11:
    v13 = *(llvm::MachineInstr **)(v11 + 8);
    v14 = (unint64_t)(v11 - *((_QWORD *)v13 + 4)) >> 5;
    v15 = (llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
    RegClassConstraintEffect = llvm::MachineInstr::getRegClassConstraintEffect(v13, v14, v9, v4, v15);
    if (RegClassConstraintEffect)
      v17 = RegClassConstraintEffect == v6;
    else
      v17 = 1;
    if (!v17)
    {
      v9 = RegClassConstraintEffect;
      while (1)
      {
        v11 = *(_QWORD *)(v11 + 24);
        if (!v11)
          goto LABEL_8;
        if ((*(_DWORD *)v11 & 0x80000000) == 0)
          goto LABEL_11;
      }
    }
  }
  return 0;
}

uint64_t llvm::MachineRegisterInfo::createIncompleteVirtualRegister(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v6 = *(unsigned int *)(a1 + 32);
  v7 = v6 | 0x80000000;
  v8 = v6 & 0x7FFFFFFF;
  if (v8 < v6)
    goto LABEL_9;
  v9 = *(_OWORD *)(a1 + 40);
  v10 = (_QWORD *)(a1 + 24);
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 32);
  if (v8 >= *(unsigned int *)(a1 + 36))
  {
    v29 = *(_OWORD *)(a1 + 40);
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v8 + 1, 16);
    v9 = v29;
    v11 = *(unsigned int *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 32);
    if ((v6 & 0x7FFFFFFF) - v6 != -1)
    {
LABEL_4:
      v13 = (_OWORD *)(*v10 + 16 * v11);
      v14 = ~v8 + v6;
      do
      {
        *v13++ = v9;
        v15 = __CFADD__(v14++, 1);
      }
      while (!v15);
      v12 = *(_DWORD *)(a1 + 32);
    }
  }
  else if ((v6 & 0x7FFFFFFF) - v6 != -1)
  {
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 32) = v12 + (v6 & 0x7FFFFFFF) - v6 + 1;
LABEL_9:
  v16 = *(unsigned int *)(a1 + 216);
  v17 = v8 + 1;
  if (v8 >= v16 && v17 != v16)
  {
    v19 = v17 - v16;
    v20 = (_DWORD *)sub_1C51A62C8(a1 + 208, a1 + 224, v17 - v16);
    if (v19)
    {
      v22 = (uint64_t)(v20 + 2);
      v23 = *(_QWORD *)(a1 + 208) + 40 * *(unsigned int *)(a1 + 216) + 24;
      v24 = ~v8 + v16;
      v25 = 0x400000000;
      do
      {
        *(_DWORD *)(v23 - 24) = *v20;
        *(_QWORD *)(v23 - 16) = v23;
        *(_QWORD *)(v23 - 8) = v25;
        if (v20[4])
        {
          v26 = v20;
          v28 = v22;
          v27 = v25;
          sub_1C48623F0(v23 - 16, v22);
          v25 = v27;
          v22 = v28;
          v20 = v26;
        }
        v23 += 40;
        v15 = __CFADD__(v24++, 1);
      }
      while (!v15);
    }
    *(_DWORD *)(a1 + 216) += v19;
  }
  sub_1C51A4520(a1, a2, a3, v7);
  return v7;
}

double sub_1C51A4520(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4)
{
  _QWORD *v8;
  unint64_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 __dst;
  unint64_t v16;

  if (a3)
  {
    sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 112), a2, a3);
    v8 = (_QWORD *)(a1 + 64);
    v9 = a4 & 0x7FFFFFFF;
    if (v9 >= *(unsigned int *)(a1 + 72))
      sub_1C51A6068(a1 + 64, v9 + 1, a1 + 80);
    if (a2)
    {
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (a3 >= 0x17)
      {
        v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v11 = a3 | 7;
        v12 = v11 + 1;
        p_dst = (__int128 *)operator new(v11 + 1);
        *((_QWORD *)&__dst + 1) = a3;
        v16 = v12 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v16) = a3;
        p_dst = &__dst;
      }
      memmove(p_dst, a2, a3);
      *((_BYTE *)p_dst + a3) = 0;
    }
    else
    {
      __dst = 0uLL;
      v16 = 0;
    }
    v13 = *v8 + 24 * v9;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    result = *(double *)&__dst;
    *(_OWORD *)v13 = __dst;
    *(_QWORD *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::createVirtualRegister(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t IncompleteVirtualRegister;
  uint64_t v7;

  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, IncompleteVirtualRegister);
  return IncompleteVirtualRegister;
}

uint64_t llvm::MachineRegisterInfo::cloneVirtualRegister(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4)
{
  unsigned int IncompleteVirtualRegister;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v19;

  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  v7 = 0;
  v8 = a2 & 0x7FFFFFFF;
  v9 = IncompleteVirtualRegister;
  v10 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v10) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v8);
  v11 = *(unsigned int *)(a1 + 432);
  if (a2 < 0 && v8 < v11)
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v8);
  if (v10 >= v11)
  {
    v12 = *(_QWORD *)(a1 + 440);
    v13 = v10 + 1 - v11;
    if (v10 >= *(unsigned int *)(a1 + 436))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 424, a1 + 440, v10 + 1, 8);
      v14 = *(unsigned int *)(a1 + 432);
      v15 = *(_DWORD *)(a1 + 432);
      if (v13)
      {
LABEL_7:
        v16 = (_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v14);
        v17 = ~v10 + v11;
        do
          *v16++ = v12;
        while (!__CFADD__(v17++, 1));
        v15 = *(_DWORD *)(a1 + 432);
      }
    }
    else
    {
      v14 = *(unsigned int *)(a1 + 432);
      v15 = *(_DWORD *)(a1 + 432);
      if (v13)
        goto LABEL_7;
    }
    *(_DWORD *)(a1 + 432) = v15 + v13;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v10) = v7;
  v19 = *(_QWORD *)(a1 + 8);
  if (v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v9);
  return v9;
}

uint64_t llvm::MachineRegisterInfo::createGenericVirtualRegister(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t IncompleteVirtualRegister;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  v7 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v7) = 4;
  v8 = *(unsigned int *)(a1 + 432);
  if (v7 >= v8)
  {
    v9 = *(_QWORD *)(a1 + 440);
    v10 = v7 + 1 - v8;
    if (v7 >= *(unsigned int *)(a1 + 436))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 424, a1 + 440, v7 + 1, 8);
      v11 = *(unsigned int *)(a1 + 432);
      v12 = *(_DWORD *)(a1 + 432);
      if (v10)
      {
LABEL_4:
        v13 = (_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v11);
        v14 = ~v7 + v8;
        do
          *v13++ = v9;
        while (!__CFADD__(v14++, 1));
        v12 = *(_DWORD *)(a1 + 432);
      }
    }
    else
    {
      v11 = *(unsigned int *)(a1 + 432);
      v12 = *(_DWORD *)(a1 + 432);
      if (v10)
        goto LABEL_4;
    }
    *(_DWORD *)(a1 + 432) = v12 + v10;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v7) = a2;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, IncompleteVirtualRegister);
  return IncompleteVirtualRegister;
}

uint64_t llvm::MachineRegisterInfo::clearVirtRegTypes(uint64_t this)
{
  *(_DWORD *)(this + 432) = 0;
  return this;
}

uint64_t llvm::MachineRegisterInfo::clearVirtRegs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(this + 32) = 0;
  v1 = *(_QWORD *)(this + 456);
  v2 = *(_QWORD *)(this + 464);
  while (v1 != v2)
  {
    *(_DWORD *)(v1 + 4) = 0;
    v1 += 8;
  }
  return this;
}

uint64_t llvm::MachineRegisterInfo::addRegOperandToUseList(uint64_t this, llvm::MachineOperand *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)a2 + 1);
  if ((v2 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(this + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(this + 272) + 8 * v2);
  v4 = *v3;
  if (*v3)
  {
    v5 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = a2;
    *((_QWORD *)a2 + 2) = v5;
    if ((*((_BYTE *)a2 + 3) & 1) != 0)
    {
      *((_QWORD *)a2 + 3) = v4;
    }
    else
    {
      *((_QWORD *)a2 + 3) = 0;
      v3 = (uint64_t *)(v5 + 24);
    }
  }
  else
  {
    *((_QWORD *)a2 + 2) = a2;
    *((_QWORD *)a2 + 3) = 0;
  }
  *v3 = (uint64_t)a2;
  return this;
}

uint64_t llvm::MachineRegisterInfo::removeRegOperandFromUseList(uint64_t this, llvm::MachineOperand *a2)
{
  uint64_t v2;
  llvm::MachineOperand **v3;
  llvm::MachineOperand *v4;
  llvm::MachineOperand *v5;
  uint64_t v6;
  llvm::MachineOperand *v7;

  v2 = *((unsigned int *)a2 + 1);
  if ((v2 & 0x80000000) != 0)
    v3 = (llvm::MachineOperand **)(*(_QWORD *)(this + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  else
    v3 = (llvm::MachineOperand **)(*(_QWORD *)(this + 272) + 8 * v2);
  v4 = *v3;
  v6 = *((_QWORD *)a2 + 2);
  v5 = (llvm::MachineOperand *)*((_QWORD *)a2 + 3);
  if (*v3 != a2)
    v3 = (llvm::MachineOperand **)(v6 + 24);
  *v3 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = v4;
  *((_QWORD *)v7 + 2) = v6;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  return this;
}

uint64_t llvm::MachineRegisterInfo::moveOperands(uint64_t this, llvm::MachineOperand *a2, llvm::MachineOperand *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;

  v4 = -32;
  if (a2 >= a3 && (llvm::MachineOperand *)((char *)a3 + 32 * a4) > a2)
  {
    v5 = a4 - 1;
  }
  else
  {
    v4 = 32;
    v5 = 0;
  }
  v6 = 32 * v5;
  do
  {
    v7 = (char *)a2 + v6;
    v8 = (char *)a3 + v6;
    v9 = *(_OWORD *)((char *)a3 + v6 + 16);
    *(_OWORD *)v7 = *(_OWORD *)((char *)a3 + v6);
    *((_OWORD *)v7 + 1) = v9;
    if (!*((_BYTE *)a3 + v6))
    {
      v10 = *((unsigned int *)v8 + 1);
      if ((v10 & 0x80000000) != 0)
        v11 = (char **)(*(_QWORD *)(this + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
      else
        v11 = (char **)(*(_QWORD *)(this + 272) + 8 * v10);
      v12 = *(char **)((char *)a3 + v6 + 24);
      if (v8 == *v11)
      {
        *v11 = v7;
        v13 = (char *)a2 + v6;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)((char *)a3 + v6 + 16) + 24) = v7;
        v13 = *v11;
      }
      if (v12)
        v13 = v12;
      *((_QWORD *)v13 + 2) = v7;
    }
    v6 += v4;
    --a4;
  }
  while (a4);
  return this;
}

uint64_t llvm::MachineRegisterInfo::replaceRegWith(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  if ((a2 & 0x80000000) != 0)
    v7 = (uint64_t *)(a1[3] + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v7 = (uint64_t *)(a1[34] + 8 * a2);
  result = *v7;
  if (*v7)
  {
    do
    {
      v9 = *(_QWORD *)(result + 24);
      if (a3 - 1 <= 0x3FFFFFFE)
        llvm::MachineOperand::substPhysReg((unsigned int *)result, a3, v6);
      else
        llvm::MachineOperand::setReg(result, a3);
      result = v9;
    }
    while (v9);
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::getVRegDef(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (v3 && ((*(_BYTE *)(v3 + 3) & 1) != 0 || (v3 = *(_QWORD *)(v3 + 24)) != 0 && (*(_BYTE *)(v3 + 3) & 1) != 0))
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

uint64_t llvm::MachineRegisterInfo::getUniqueVRegDef(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a2;
  if (sub_1C50E3E8C(a1, a2))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v4);
  v6 = *v5;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 3) & 1) == 0)
    {
      v6 = *(_QWORD *)(v6 + 24);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 3) & 1) == 0)
          v6 = 0;
      }
    }
  }
  result = *(_QWORD *)(v6 + 8);
  while (1)
  {
    v6 = *(_QWORD *)(v6 + 24);
    if (!v6 || (*(_BYTE *)(v6 + 3) & 1) == 0)
      break;
    if (*(_QWORD *)(v6 + 8) != result)
      return 0;
  }
  return result;
}

BOOL llvm::MachineRegisterInfo::hasOneNonDBGUse(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL8 result;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 3) & 0x81) != 0)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 0;
      if ((*(_DWORD *)v3 & 0x81000000) == 0)
        goto LABEL_10;
    }
  }
  do
  {
LABEL_10:
    v3 = *(_QWORD *)(v3 + 24);
    result = v3 == 0;
  }
  while (v3 && (*(_DWORD *)v3 & 0x81000000) != 0);
  return result;
}

BOOL llvm::MachineRegisterInfo::hasOneNonDBGUser(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 3) & 0x81) != 0)
  {
    do
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 0;
    }
    while ((*(_DWORD *)v3 & 0x81000000) != 0);
  }
  v4 = *(_QWORD *)(v3 + 8);
  do
  {
    v3 = *(_QWORD *)(v3 + 24);
    result = v3 == 0;
  }
  while (v3 && ((*(_DWORD *)v3 & 0x81000000) != 0 || *(_QWORD *)(v3 + 8) == v4));
  return result;
}

uint64_t llvm::MachineRegisterInfo::hasAtMostUserInstrs(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v4 = *v3;
  if (!v4)
  {
LABEL_10:
    v7 = a3 == -1;
LABEL_19:
    v6 = v7;
    return v6 ^ 1u;
  }
  if ((*(_BYTE *)(v4 + 3) & 0x81) != 0)
  {
    do
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        goto LABEL_10;
    }
    while ((*(_DWORD *)v4 & 0x81000000) != 0);
  }
  v5 = a3 + 1;
  if (a3 == -1)
  {
    v6 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 8);
    while (2)
    {
      --v5;
      do
      {
        v4 = *(_QWORD *)(v4 + 24);
        if (!v4)
        {
          v7 = v5 == 0;
          goto LABEL_19;
        }
      }
      while ((*(_DWORD *)v4 & 0x81000000) != 0 || *(_QWORD *)(v4 + 8) == v8);
      v6 = 1;
      v8 = *(_QWORD *)(v4 + 8);
      if (v5)
        continue;
      break;
    }
  }
  return v6 ^ 1u;
}

uint64_t llvm::MachineRegisterInfo::clearKillFlags(uint64_t result, unsigned int a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;

  if ((a2 & 0x80000000) != 0)
    v2 = (unsigned int **)(*(_QWORD *)(result + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (unsigned int **)(*(_QWORD *)(result + 272) + 8 * a2);
  v3 = *v2;
  if (v3)
  {
    while (1)
    {
      v4 = *v3;
      if ((*v3 & 0x1000000) == 0)
        break;
      v3 = (unsigned int *)*((_QWORD *)v3 + 3);
      if (!v3)
        return result;
    }
LABEL_8:
    *v3 = v4 & 0xFBFFFFFF;
    while (1)
    {
      v3 = (unsigned int *)*((_QWORD *)v3 + 3);
      if (!v3)
        break;
      v4 = *v3;
      if ((*v3 & 0x1000000) == 0)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::isLiveIn(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a1 + 456);
  v3 = *(_DWORD **)(a1 + 464);
  if (v3 == v2)
    return 0;
  while (*v2 != a2 && v2[1] != a2)
  {
    v2 += 2;
    if (v2 == v3)
      return 0;
  }
  return 1;
}

uint64_t llvm::MachineRegisterInfo::getLiveInVirtReg(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 456);
  v3 = *(_QWORD *)(a1 + 464) - v2;
  if (!v3)
    return 0;
  v4 = (unsigned int *)(v2 + 4);
  v5 = 8 * (v3 >> 3);
  while (*(v4 - 1) != a2)
  {
    v4 += 2;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return *v4;
}

void llvm::MachineRegisterInfo::EmitLiveInCopies(llvm::MachineRegisterInfo *this, llvm::MachineBasicBlock *a2, const llvm::TargetRegisterInfo *a3, const llvm::TargetInstrInfo *a4)
{
  uint64_t v4;
  unsigned int i;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *j;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  int v24;
  llvm::MachineFunction *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = (*((_QWORD *)this + 58) - *((_QWORD *)this + 57)) >> 3;
  if ((_DWORD)v4)
  {
    for (i = 0; i != (_DWORD)v4; ++i)
    {
      v8 = *((_QWORD *)this + 57);
      v9 = *(_DWORD *)(v8 + 8 * i + 4);
      if (v9)
      {
        if (sub_1C4A91738((uint64_t)this, v9))
        {
          v10 = (_QWORD *)*((_QWORD *)this + 58);
          v11 = *((_QWORD *)this + 57) + 8 * i;
          for (j = (_QWORD *)(v11 + 8); j != v10; ++j)
          {
            *(j - 1) = *j;
            v11 += 8;
          }
          *((_QWORD *)this + 58) = v11;
          --i;
          LODWORD(v4) = v4 - 1;
          continue;
        }
        v22 = (unint64_t *)*((_QWORD *)a2 + 7);
        v49 = 0;
        v23 = *((_QWORD *)a4 + 1);
        v24 = *(_DWORD *)(*((_QWORD *)this + 57) + 8 * i + 4);
        v25 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v50 = 0;
        v26 = *((_QWORD *)v25 + 28);
        if (v26)
        {
          *((_QWORD *)v25 + 28) = *(_QWORD *)v26;
          v51 = 0;
        }
        else
        {
          v26 = sub_1C484358C((uint64_t)v25 + 128, 72, 3);
          v51 = v50;
          if (v50)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v50, v50, (uint64_t)&v51);
            v50 = 0;
          }
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v26, v25, v23 + 912, &v51, 0);
        if (v51)
          llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
        if (v50)
          llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
        v27 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v26 + 24) = v27;
        v28 = *(_QWORD *)(v27 + 32);
        v29 = *(unsigned int *)(v26 + 40);
        if ((_DWORD)v29)
        {
          v41 = *(_QWORD *)(v26 + 32);
          v42 = *(_QWORD *)(v28 + 40);
          v43 = 32 * v29;
          do
          {
            if (!*(_BYTE *)v41)
            {
              v44 = *(unsigned int *)(v41 + 4);
              if ((int)v44 >= 0)
                v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
              else
                v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
              v46 = *v45;
              if (*v45)
              {
                v47 = *(_QWORD *)(v46 + 16);
                *(_QWORD *)(v46 + 16) = v41;
                *(_QWORD *)(v41 + 16) = v47;
                if ((*(_BYTE *)(v41 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v41 + 24) = v46;
                }
                else
                {
                  *(_QWORD *)(v41 + 24) = 0;
                  v45 = (uint64_t *)(v47 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v41 + 16) = v41;
                *(_QWORD *)(v41 + 24) = 0;
              }
              *v45 = v41;
            }
            v41 += 32;
            v43 -= 32;
          }
          while (v43);
        }
        v30 = *(_QWORD *)(v28 + 728);
        if (v30)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
        v31 = *v22 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
        *(_QWORD *)(v26 + 8) = v22;
        *(_QWORD *)(v31 + 8) = v26;
        *v22 = *v22 & 7 | v26;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        LODWORD(v51) = 0x1000000;
        HIDWORD(v51) = v24;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v25, (const llvm::MachineOperand *)&v51);
        v32 = *(_DWORD *)(*((_QWORD *)this + 57) + 8 * i);
        v52 = 0;
        LODWORD(v51) = 0;
        HIDWORD(v51) = v32;
        v53 = 0;
        v54 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v25, (const llvm::MachineOperand *)&v51);
        if (v49)
          llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
        v13 = *(_DWORD *)(*((_QWORD *)this + 57) + 8 * i);
        v15 = (char *)*((_QWORD *)a2 + 20);
        v33 = *((_QWORD *)a2 + 21);
        if ((unint64_t)v15 >= v33)
        {
          v35 = (char *)*((_QWORD *)a2 + 19);
          v36 = (v15 - v35) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
LABEL_70:
            abort();
          v38 = v33 - (_QWORD)v35;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v37;
          if (v20)
          {
            if (v20 >> 60)
LABEL_71:
              sub_1C4764EE4();
            v21 = (char *)operator new(16 * v20);
          }
          else
          {
            v21 = 0;
          }
          v39 = &v21[16 * v36];
          *(_WORD *)v39 = v13;
          *((_QWORD *)v39 + 1) = -1;
          v40 = v39;
          if (v15 != v35)
          {
            do
            {
              *((_OWORD *)v40 - 1) = *((_OWORD *)v15 - 1);
              v40 -= 16;
              v15 -= 16;
            }
            while (v15 != v35);
            goto LABEL_50;
          }
          goto LABEL_51;
        }
      }
      else
      {
        v13 = *(_DWORD *)(v8 + 8 * i);
        v15 = (char *)*((_QWORD *)a2 + 20);
        v14 = *((_QWORD *)a2 + 21);
        if ((unint64_t)v15 >= v14)
        {
          v16 = (char *)*((_QWORD *)a2 + 19);
          v17 = (v15 - v16) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            goto LABEL_70;
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 60)
              goto LABEL_71;
            v21 = (char *)operator new(16 * v20);
          }
          else
          {
            v21 = 0;
          }
          v39 = &v21[16 * v17];
          *(_WORD *)v39 = v13;
          *((_QWORD *)v39 + 1) = -1;
          v40 = v39;
          if (v15 != v16)
          {
            do
            {
              *((_OWORD *)v40 - 1) = *((_OWORD *)v15 - 1);
              v40 -= 16;
              v15 -= 16;
            }
            while (v15 != v16);
LABEL_50:
            v15 = (char *)*((_QWORD *)a2 + 19);
          }
LABEL_51:
          v34 = v39 + 16;
          *((_QWORD *)a2 + 19) = v40;
          *((_QWORD *)a2 + 20) = v39 + 16;
          *((_QWORD *)a2 + 21) = &v21[16 * v20];
          if (v15)
            operator delete(v15);
          goto LABEL_53;
        }
      }
      *(_WORD *)v15 = v13;
      *((_QWORD *)v15 + 1) = -1;
      v34 = v15 + 16;
LABEL_53:
      *((_QWORD *)a2 + 20) = v34;
    }
  }
}

uint64_t llvm::MachineRegisterInfo::getMaxLaneMaskForVReg(uint64_t a1, int a2)
{
  return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
}

void llvm::MachineRegisterInfo::dumpUses(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  llvm::MachineInstr *v4;
  llvm::MachineInstr *v5;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (*v2)
  {
    while ((*(_BYTE *)(v3 + 3) & 1) != 0)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return;
    }
    v4 = *(llvm::MachineInstr **)(v3 + 8);
LABEL_9:
    llvm::MachineInstr::dump(v4);
    v5 = *(llvm::MachineInstr **)(v3 + 8);
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        break;
      if ((*(_BYTE *)(v3 + 3) & 1) == 0)
      {
        v4 = *(llvm::MachineInstr **)(v3 + 8);
        if (v4 != v5)
          goto LABEL_9;
      }
    }
  }
}

void llvm::MachineRegisterInfo::freezeReservedRegs(llvm::MachineRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v4;
  void **v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__src;
  uint64_t v13;
  _DWORD v14[14];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 176))(*(_QWORD *)(*(_QWORD *)this + 16));
  (*(void (**)(void **__return_ptr, uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v4 + 88))(&__src, v4, a2);
  v5 = (void **)((char *)this + 352);
  v6 = __src;
  if ((void **)((char *)this + 352) == &__src)
    goto LABEL_8;
  if (__src != v14)
  {
    v10 = (char *)*((_QWORD *)this + 44);
    if (v10 != (char *)this + 368)
    {
      free(v10);
      v6 = __src;
    }
    *((_QWORD *)this + 44) = v6;
    *((_QWORD *)this + 45) = v13;
    __src = v14;
    HIDWORD(v13) = 0;
    goto LABEL_7;
  }
  v7 = v13;
  v8 = *((unsigned int *)this + 90);
  if (v8 < v13)
  {
    if (*((_DWORD *)this + 91) < v13)
    {
      *((_DWORD *)this + 90) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 352, (uint64_t)this + 368, v7, 8);
      v5 = (void **)((char *)this + 352);
    }
    else if ((_DWORD)v8)
    {
      v11 = *((unsigned int *)this + 90);
      memmove(*v5, __src, 8 * v8);
      v9 = v11;
      v5 = (void **)((char *)this + 352);
LABEL_14:
      if (v9 != v13)
        memcpy((char *)*v5 + 8 * v9, (char *)__src + 8 * v9, 8 * v13 - 8 * v9);
      goto LABEL_6;
    }
    v9 = 0;
    goto LABEL_14;
  }
  if ((_DWORD)v13)
    memmove(*v5, __src, 8 * v13);
LABEL_6:
  *((_DWORD *)this + 90) = v7;
LABEL_7:
  LODWORD(v13) = 0;
  v6 = __src;
LABEL_8:
  *((_DWORD *)this + 104) = v14[12];
  if (v6 != v14)
    free(v6);
}

BOOL llvm::MachineRegisterInfo::isConstantPhysReg(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  __int16 v21;
  int v22;
  unsigned int v23;
  unsigned __int16 *v24;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  if (((*(uint64_t (**)(_QWORD *, _QWORD))(*v4 + 112))(v4, a2) & 1) != 0)
    return 1;
  v6 = v4[1];
  v7 = ((unint64_t)*(unsigned int *)(v6 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v8 = v4[6];
  v9 = v4[7];
  v10 = (_WORD *)(v9 + v7 + 2);
  v11 = *(unsigned __int16 *)(v9 + v7) + (*(_DWORD *)(v6 + 24 * a2 + 16) & 0xF) * a2;
  result = 1;
  while (1)
  {
    v12 = 4 * (unsigned __int16)v11;
    v13 = *(unsigned __int16 *)(v8 + v12);
    if (*(_WORD *)(v8 + v12) && v9 != 0)
      break;
    v15 = (unsigned __int16)*v10++;
    v11 += v15;
    if (!v15)
      return result;
  }
  v16 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v11 + 2);
  v17 = *(unsigned int *)(v6 + 24 * *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v11) + 8);
  result = sub_1C50E3E8C((uint64_t)a1, v13);
  if (result)
  {
    v18 = v16 << 16;
    v19 = v13;
    v20 = (unsigned __int16 *)(v9 + 2 * v17);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16))
                                            + 216)
                                + 16)
                    + v13)
        && ((*(_QWORD *)(a1[44] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        break;
      }
      v22 = *v20++;
      v21 = v22;
      if (v22)
      {
        v19 += v21;
      }
      else
      {
        v23 = HIWORD(v18);
        if (HIWORD(v18))
        {
          v18 >>= 16;
        }
        else
        {
          if (!*v10)
            return 1;
          v11 += (unsigned __int16)*v10++;
          v24 = (unsigned __int16 *)(v4[6] + 4 * (unsigned __int16)v11);
          v23 = *v24;
          v18 = v24[1] << 16;
        }
        v19 = v23;
        v20 = (unsigned __int16 *)(v4[7] + 2 * *(unsigned int *)(v4[1] + 24 * v23 + 8));
      }
      v13 = v19;
    }
    while (sub_1C50E3E8C((uint64_t)a1, v19));
    return 0;
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::markUsesInDebugValueAsUndef(uint64_t result, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(result + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(result + 272) + 8 * a2);
  v4 = *v3;
  if (*v3)
  {
    while ((*(_BYTE *)(v4 + 3) & 1) != 0)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return result;
    }
    do
    {
      while (1)
      {
        result = *(_QWORD *)(v4 + 8);
        do
          v4 = *(_QWORD *)(v4 + 24);
        while (v4 && ((*(_BYTE *)(v4 + 3) & 1) != 0 || *(_QWORD *)(v4 + 8) == result));
        v5 = **(unsigned __int16 **)(result + 16);
        if ((v5 - 13) <= 1)
        {
          v6 = *(_QWORD *)(result + 32);
          if (v5 != 14)
          {
            v8 = v6 + 32;
            goto LABEL_18;
          }
          v7 = *(unsigned int *)(result + 40);
          if ((_DWORD)v7 != 2)
            break;
        }
LABEL_21:
        if (!v4)
          return result;
      }
      v8 = v6 + 32 * v7;
      v6 += 64;
LABEL_18:
      while (*(_BYTE *)v6 || *(_DWORD *)(v6 + 4) != a2)
      {
        v6 += 32;
        if (v6 == v8)
          goto LABEL_21;
      }
      result = sub_1C61FACB0(result);
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::isPhysRegModified(_QWORD *a1, unsigned int a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _WORD *v15;
  int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int16 *v39;

  if (((*(_QWORD *)(a1[35] + 8 * (a2 >> 6)) >> a2) & 1) != 0)
    return 1;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  if (v7)
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = 0;
  v9 = *v8;
  v10 = *(_DWORD *)(*v8 + 24 * a2 + 16) & 0xF;
  v11 = ((unint64_t)*(unsigned int *)(*v8 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v14 = v8 + 5;
  v13 = v8[5];
  v12 = v14[1];
  v15 = (_WORD *)(v12 + v11);
  v16 = (unsigned __int16)*v15 + v10 * a2;
  result = 0;
  while (1)
  {
    ++v15;
    v17 = (unsigned __int16 *)(v13 + 4 * (unsigned __int16)v16);
    v18 = *v17;
    if (*v17)
      break;
LABEL_11:
    v16 += (unsigned __int16)*v15;
    if (!*v15)
      return result;
  }
  v19 = v17[1];
  v20 = v19;
  while (!v12)
  {
    v21 = v20;
    v20 = 0;
    if (!v21)
      goto LABEL_11;
  }
  v22 = v19 << 16;
  v23 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v9 + 24 * v18 + 8));
  do
  {
    v24 = *(_QWORD *)(a1[34] + 8 * (unsigned __int16)v18);
    if (v24)
    {
      if ((*(_BYTE *)(v24 + 3) & 1) != 0 || (v24 = *(_QWORD *)(v24 + 24)) != 0 && (*(_BYTE *)(v24 + 3) & 1) != 0)
      {
        if ((a3 & 1) != 0)
          return 1;
        do
        {
          v27 = *(_QWORD *)(v24 + 8);
          if ((*(_WORD *)(v27 + 44) & 0xC) != 0 && (*(_WORD *)(v27 + 44) & 4) == 0)
          {
            v36 = *(_QWORD *)(v24 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v27 + 16) + 8) & 0x80) == 0)
            {
              while ((*(_WORD *)(v36 + 44) & 8) != 0)
              {
                v36 = *(_QWORD *)(v36 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 8) & 0x80) != 0)
                  goto LABEL_28;
              }
              return 1;
            }
          }
          else if ((*(_BYTE *)(*(_QWORD *)(v27 + 16) + 8) & 0x80) == 0)
          {
            return 1;
          }
LABEL_28:
          v29 = *(_QWORD *)(v27 + 24);
          if (*(_QWORD *)(v29 + 88) != *(_QWORD *)(v29 + 96))
            return 1;
          v30 = *(_QWORD *)(**(_QWORD **)(v29 + 32) + 112);
          if (v30)
          {
            if (*(char *)(v30 + 21) < 0)
              return 1;
          }
          v31 = *(unsigned int *)(v27 + 40);
          if (!(_DWORD)v31)
            return 1;
          v32 = *(_QWORD *)(v27 + 32);
          v33 = 32 * v31;
          for (i = v32 + 16; *(_BYTE *)(i - 16) != 10 || !*(_QWORD *)i || *(_BYTE *)(*(_QWORD *)i + 16) != 0; i += 32)
          {
            v33 -= 32;
            if (!v33)
              return 1;
          }
          v37 = *(_QWORD *)(*(_QWORD *)i + 112);
          if (!v37 || (~*(unsigned __int8 *)(v37 + 16) & 0x21) != 0)
            return 1;
          v24 = *(_QWORD *)(v24 + 24);
        }
        while (v24 && (*(_BYTE *)(v24 + 3) & 1) != 0);
      }
    }
    v26 = *v23++;
    v25 = v26;
    if (v26)
    {
      LOWORD(v18) = v25 + v18;
    }
    else
    {
      v38 = HIWORD(v22);
      if (HIWORD(v22))
      {
        v22 >>= 16;
      }
      else
      {
        if (!*v15)
          return 0;
        v16 += (unsigned __int16)*v15++;
        v39 = (unsigned __int16 *)(v13 + 4 * (unsigned __int16)v16);
        v38 = *v39;
        v22 = v39[1] << 16;
      }
      LOWORD(v18) = v38;
      v23 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v9 + 24 * v38 + 8));
    }
    result = 0;
  }
  while (v15);
  return result;
}

uint64_t llvm::MachineRegisterInfo::isPhysRegUsed(_QWORD *a1, unsigned int a2, char a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int16 *v14;
  _WORD *v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  unsigned int v26;
  unsigned __int16 *v27;

  if ((a3 & 1) != 0 || ((*(_QWORD *)(a1[35] + 8 * (a2 >> 6)) >> a2) & 1) == 0)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
    if (v6)
      v7 = (uint64_t *)(v6 + 8);
    else
      v7 = 0;
    v8 = *v7;
    v9 = *(_DWORD *)(*v7 + 24 * a2 + 16) & 0xF;
    v10 = ((unint64_t)*(unsigned int *)(*v7 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
    v13 = v7 + 5;
    v12 = v7[5];
    v11 = v13[1];
    v14 = (unsigned __int16 *)(v11 + v10);
    v16 = *v14;
    v15 = v14 + 1;
    v17 = v16 + v9 * a2;
    while (1)
    {
      v18 = *(_WORD *)(v12 + 4 * (unsigned __int16)v17);
      if (v18 && v11 != 0)
        break;
      result = 0;
      v20 = (unsigned __int16)*v15++;
      v17 += v20;
      if (!v20)
        return result;
    }
    v21 = *(unsigned __int16 *)(v12 + 4 * (unsigned __int16)v17 + 2) << 16;
    v22 = (unsigned __int16 *)(v11
                             + 2
                             * *(unsigned int *)(v8 + 24 * *(unsigned __int16 *)(v12 + 4 * (unsigned __int16)v17) + 8));
    while (1)
    {
      v23 = *(_QWORD *)(a1[34] + 8 * v18);
      if (v23)
        break;
LABEL_18:
      v25 = *v22++;
      v24 = v25;
      if (v25)
      {
        v18 += v24;
        if (!v15)
          return 0;
      }
      else
      {
        v26 = HIWORD(v21);
        if (HIWORD(v21))
        {
          v21 >>= 16;
        }
        else
        {
          if (!*v15)
            return 0;
          v17 += (unsigned __int16)*v15++;
          v27 = (unsigned __int16 *)(v12 + 4 * (unsigned __int16)v17);
          v26 = *v27;
          v21 = v27[1] << 16;
        }
        v18 = v26;
        v22 = (unsigned __int16 *)(v11 + 2 * *(unsigned int *)(v8 + 24 * v26 + 8));
        if (!v15)
          return 0;
      }
    }
    while ((*(_DWORD *)v23 & 0x80000000) != 0)
    {
      v23 = *(_QWORD *)(v23 + 24);
      if (!v23)
        goto LABEL_18;
    }
  }
  return 1;
}

uint64_t llvm::MachineRegisterInfo::disableCalleeSavedRegister(_QWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int16 *v17;
  _WORD *v18;
  int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  _WORD *v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  int v36;
  unsigned __int16 *v37;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
  v5 = result;
  if (!*((_BYTE *)a1 + 144))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, *a1);
    v6 = *(_WORD *)result;
    if (*(_WORD *)result)
    {
      v7 = a1[20];
      v8 = (unsigned __int16 *)(result + 2);
      do
      {
        if ((unint64_t)(v7 + 1) > a1[21])
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(a1 + 19), a1 + 22, v7 + 1, 2);
          v7 = a1[20];
        }
        *(_WORD *)(a1[19] + 2 * v7) = v6;
        v7 = a1[20] + 1;
        a1[20] = v7;
        v9 = *v8++;
        v6 = v9;
      }
      while (v9);
    }
    else
    {
      v7 = a1[20];
    }
    if ((unint64_t)(v7 + 1) > a1[21])
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(a1 + 19), a1 + 22, v7 + 1, 2);
      v7 = a1[20];
    }
    *(_WORD *)(a1[19] + 2 * v7) = 0;
    ++a1[20];
    *((_BYTE *)a1 + 144) = 1;
  }
  if (v5)
    v10 = (uint64_t *)(v5 + 8);
  else
    v10 = 0;
  v11 = *v10;
  v12 = *(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF;
  v13 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v16 = v10 + 5;
  v15 = v10[5];
  v14 = v16[1];
  v17 = (unsigned __int16 *)(v14 + v13);
  v19 = *v17;
  v18 = v17 + 1;
  v20 = v19 + v12 * a2;
  do
  {
    LOWORD(v21) = *(_WORD *)(v15 + 4 * (unsigned __int16)v20);
    if ((_WORD)v21)
      v22 = v14 == 0;
    else
      v22 = 1;
    if (!v22)
    {
      v24 = *(unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20 + 2) << 16;
      v25 = (unsigned __int16 *)(v14
                               + 2
                               * *(unsigned int *)(v11
                                                 + 24 * *(unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20)
                                                 + 8));
      v26 = (_WORD *)a1[19];
      result = a1[20];
      while (1)
      {
        v27 = 2 * result;
        v28 = &v26[result];
        if (result)
        {
          v29 = 2 * result;
          v30 = v26;
          while ((unsigned __int16)*v30 != (unsigned __int16)v21)
          {
            ++v30;
            v29 -= 2;
            if (!v29)
            {
              v30 = &v26[result];
              break;
            }
          }
        }
        else
        {
          v30 = v26;
        }
        v31 = v30 - v26;
        if (v31 != result)
        {
          v32 = v30 + 1;
          if (v30 + 1 != v28)
          {
            v33 = v27 - 2 * v31 - 2;
            do
            {
              v34 = *v32;
              if (v34 != (unsigned __int16)v21)
                *v30++ = v34;
              ++v32;
              v33 -= 2;
            }
            while (v33);
          }
        }
        result = v30 - v26;
        v36 = *v25++;
        v35 = v36;
        if (v36)
        {
          LOWORD(v21) = v35 + v21;
        }
        else
        {
          v21 = HIWORD(v24);
          if (HIWORD(v24))
          {
            v24 >>= 16;
          }
          else
          {
            if (!*v18)
            {
LABEL_44:
              a1[20] = result;
              return result;
            }
            v20 += (unsigned __int16)*v18++;
            v37 = (unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20);
            v21 = *v37;
            v24 = v37[1] << 16;
          }
          v25 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(v11 + 24 * v21 + 8));
        }
        if (!v18)
          goto LABEL_44;
      }
    }
    v23 = (unsigned __int16)*v18++;
    v20 += v23;
  }
  while (v23);
  return result;
}

uint64_t llvm::MachineRegisterInfo::getCalleeSavedRegs(llvm::MachineRegisterInfo *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 144))
    return *((_QWORD *)this + 19);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 176))(*(_QWORD *)(*(_QWORD *)this + 16));
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, *(_QWORD *)this);
}

char *llvm::MachineRegisterInfo::setCalleeSavedRegs(char *result, void *__src, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  if (result[144])
  {
    v6 = 0;
    *((_QWORD *)result + 20) = 0;
  }
  else
  {
    v6 = *((_QWORD *)result + 20);
  }
  v7 = v6 + ((2 * a3) >> 1);
  if (*((_QWORD *)result + 21) < v7)
  {
    result = (char *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 152), result + 176, v7, 2);
    v6 = v5[20];
  }
  if (a3)
  {
    result = (char *)memcpy((void *)(v5[19] + 2 * v6), __src, 2 * a3);
    v6 = v5[20];
  }
  v8 = v6 + ((2 * a3) >> 1);
  v5[20] = v8;
  if ((unint64_t)(v8 + 1) > v5[21])
  {
    result = (char *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v5 + 19), v5 + 22, v8 + 1, 2);
    v8 = v5[20];
  }
  *(_WORD *)(v5[19] + 2 * v8) = 0;
  ++v5[20];
  *((_BYTE *)v5 + 144) = 1;
  return result;
}

uint64_t llvm::MachineRegisterInfo::isReservedRegUnit(llvm::MachineRegisterInfo *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 *v14;
  int v15;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 16) + 176))(*(_QWORD *)(*(_QWORD *)this + 16));
  if (v4)
    v5 = (uint64_t *)(v4 + 8);
  else
    v5 = 0;
  v6 = v5[5];
  v7 = 4 * a2;
  v8 = *(unsigned __int16 *)(v6 + v7);
  if (!*(_WORD *)(v6 + v7))
    return 0;
  v9 = v5[6];
  if (!v9)
    return 1;
  v10 = *v5;
  v11 = *(unsigned __int16 *)(v6 + 4 * a2 + 2);
  do
  {
    v12 = v8;
    v13 = (unsigned __int16)v8;
    v8 = v11;
    v14 = (unsigned __int16 *)(v9 + 2 * *(unsigned int *)(v10 + 24 * v13 + 8));
    while (((*(_QWORD *)(*((_QWORD *)this + 44) + ((v12 >> 3) & 0x1FF8)) >> v12) & 1) != 0)
    {
      v15 = *v14++;
      v12 += v15;
      if (!v15)
        return 1;
    }
    v11 = 0;
    result = 0;
  }
  while ((_WORD)v8);
  return result;
}

uint64_t llvm::MachineRegisterInfo::isArgumentRegister(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 152))(v5, a2, a3);
}

uint64_t llvm::MachineRegisterInfo::isFixedRegister(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 160))(v5, a2, a3);
}

uint64_t llvm::MachineRegisterInfo::isGeneralPurposeRegister(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, a2, a3);
}

void sub_1C51A6068(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6)
  {
    if (v5)
    {
      sub_1C51A60F4(a1, v6, a3);
    }
    else
    {
      v8 = 3 * v4;
      v9 = *(_QWORD *)a1 + 24 * v4 - 1;
      v10 = 24 * a2 - 8 * v8;
      v11 = (char *)v9;
      do
      {
        v12 = *v11;
        v11 -= 24;
        if (v12 < 0)
          operator delete(*(void **)(v9 - 23));
        v9 = (uint64_t)v11;
        v10 += 24;
      }
      while (v10);
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

unint64_t sub_1C51A60F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  result = sub_1C4E01890(a1, a3, a2);
  if (a2)
  {
    v6 = result;
    v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v8 = a2;
    do
    {
      if (*(char *)(v6 + 23) < 0)
      {
        result = (unint64_t)sub_1C47EBC30((_BYTE *)v7, *(void **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v9 = *(_OWORD *)v6;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v7 = v9;
      }
      v7 += 24;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) += a2;
  return result;
}

void sub_1C51A618C(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C51A61F8((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C51A61F8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 40 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 16) = 0x400000000;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_1C48621E4(a2 + v5 + 8, v9 + 8);
      v5 += 40;
    }
    while (v9 + 40 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 40 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 32);
        if ((void *)(v11 + v12 - 16) != v13)
          free(v13);
        v12 -= 40;
      }
      while (v12);
    }
  }
}

unint64_t sub_1C51A62C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C51A618C(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C51A618C(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C51A6330()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable subregister liveness tracking.";
  v1.n128_u64[1] = 37;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FBBA8, "enable-subreg-liveness", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FBBA8, &dword_1C475E000);
}

llvm::MachineSchedContext *llvm::MachineSchedContext::MachineSchedContext(llvm::MachineSchedContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8145EB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v2 = operator new();
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = v2 + 64;
  *(_OWORD *)(v2 + 48) = xmmword_1C6612EF0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 0x600000000;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = v2 + 160;
  *(_QWORD *)(v2 + 152) = 0x600000000;
  *(_DWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *((_QWORD *)this + 7) = v2;
  return this;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8145EB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v2 = operator new();
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = v2 + 64;
  *(_OWORD *)(v2 + 48) = xmmword_1C6612EF0;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 0x600000000;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = v2 + 160;
  *(_QWORD *)(v2 + 152) = 0x600000000;
  *(_DWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *((_QWORD *)this + 7) = v2;
  return this;
}

void llvm::MachineSchedContext::~MachineSchedContext(llvm::MachineSchedContext *this)
{
  uint64_t *v1;
  uint64_t *v2;

  *(_QWORD *)this = &off_1E8145EB0;
  v1 = (uint64_t *)*((_QWORD *)this + 7);
  if (v1)
  {
    v2 = sub_1C61D92E0(v1);
    MEMORY[0x1CAA32FC0](v2, 0x10F0C4030087745);
  }
}

{
  uint64_t *v1;
  uint64_t *v2;

  *(_QWORD *)this = &off_1E8145EB0;
  v1 = (uint64_t *)*((_QWORD *)this + 7);
  if (v1)
  {
    v2 = sub_1C61D92E0(v1);
    MEMORY[0x1CAA32FC0](v2, 0x10F0C4030087745);
  }
}

{
  uint64_t *v1;
  uint64_t *v2;

  *(_QWORD *)this = &off_1E8145EB0;
  v1 = (uint64_t *)*((_QWORD *)this + 7);
  if (v1)
  {
    v2 = sub_1C61D92E0(v1);
    MEMORY[0x1CAA32FC0](v2, 0x10F0C4030087745);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51A6550(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine Instruction Scheduler";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "machine-scheduler";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6F90;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C51ACF40;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C51A6604(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "PostRA Machine Instruction Scheduler";
  *(_QWORD *)(v3 + 8) = 36;
  *(_QWORD *)(v3 + 16) = "postmisched";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6F98;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C51ADDE8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C51A66A8()
{
  return 0;
}

void llvm::ScheduleDAGMI::~ScheduleDAGMI(llvm::ScheduleDAGMI *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E8145ED0;
  v3 = (void **)((char *)this + 2656);
  sub_1C50AF7B4(&v3);
  v2 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1C50AF658((uint64_t)this);
}

{
  llvm::ScheduleDAGMI::~ScheduleDAGMI(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::ScheduleDAGMI::releaseSuccessors(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(a2 + 112);
    v6 = 16 * v2;
    do
    {
      result = llvm::ScheduleDAGMI::releaseSucc(v4, a2, v5);
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::releasePred(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  int v6;
  BOOL v7;

  v4 = (_DWORD *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8);
  if ((~*(_DWORD *)a3 & 6) != 0 || *(_DWORD *)(a3 + 8) < 4u)
  {
    v5 = *(_DWORD *)(a3 + 12) + *(_DWORD *)(a2 + 252);
    if (v4[63] < v5)
      v4[63] = v5;
    v6 = v4[53] - 1;
    v4[53] = v6;
    if (v6)
      v7 = 1;
    else
      v7 = result + 72 == (_QWORD)v4;
    if (!v7)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 2648) + 128))(*(_QWORD *)(result + 2648));
  }
  else
  {
    --v4[55];
    if (*(_DWORD *)(a3 + 8) == 5)
      *(_QWORD *)(result + 2696) = v4;
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::releasePredecessors(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(a2 + 32);
    v6 = 16 * v2;
    do
    {
      result = llvm::ScheduleDAGMI::releasePred(v4, a2, v5);
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::startBlock(llvm::ScheduleDAGMI *this, llvm::MachineBasicBlock *a2)
{
  *((_QWORD *)this + 115) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 331) + 72))(*((_QWORD *)this + 331));
}

uint64_t llvm::ScheduleDAGMI::finishBlock(llvm::ScheduleDAGMI *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 331) + 80))(*((_QWORD *)this + 331));
  *((_QWORD *)this + 115) = 0;
  return result;
}

void llvm::ScheduleDAGMI::moveInstruction(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  llvm::LiveIntervals *v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 928) == a2)
  {
    if (!a2 || (v7 = a2, (*(_BYTE *)a2 & 4) == 0))
    {
      v7 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v7 = a2;
        do
          v7 = *(_QWORD *)(v7 + 8);
        while ((*(_WORD *)(v7 + 44) & 8) != 0);
      }
    }
    *(_QWORD *)(a1 + 928) = *(_QWORD *)(v7 + 8);
  }
  sub_1C48532D0(*(unint64_t **)(a1 + 920), a3, *(unint64_t **)(a1 + 920), (unint64_t *)a2);
  v6 = *(llvm::LiveIntervals **)(a1 + 2640);
  if (v6)
    llvm::LiveIntervals::handleMove(v6, (llvm::MachineInstr *)a2, 1);
  if (*(unint64_t **)(a1 + 928) == a3)
    *(_QWORD *)(a1 + 928) = a2;
}

uint64_t llvm::ScheduleDAGMI::checkSchedLimit(llvm::ScheduleDAGMI *this)
{
  return 1;
}

void llvm::ScheduleDAGMI::schedule(llvm::AAResults **this)
{
  llvm::AAResults *v2;
  llvm::AAResults *v3;
  uint64_t v4;
  llvm::AAResults *v5;
  llvm::AAResults *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned int v12;
  uint64_t v13;
  llvm::SUnit *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::AAResults *v17;
  unint64_t v18;
  llvm::AAResults *v19;
  llvm::AAResults *v20;
  llvm::AAResults *v21;
  unsigned int v22;
  uint64_t v23;
  llvm::SUnit *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  llvm::AAResults *v36;
  llvm::AAResults *v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x1E0C80C00];
  llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)this, this[329], 0, 0, 0, 0);
  v2 = this[332];
  v3 = this[333];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)v2;
    v2 = (llvm::AAResults *)((char *)v2 + 8);
    (*(void (**)(uint64_t, llvm::AAResults **))(*(_QWORD *)v4 + 24))(v4, this);
  }
  v50 = v52;
  v51 = 0x800000000;
  v47 = v49;
  v48 = 0x800000000;
  v5 = this[6];
  v6 = this[7];
  while (v5 != v6)
  {
    if (*((_DWORD *)v5 + 50) >= 2u)
    {
      v7 = (__int128 *)*((_QWORD *)v5 + 4);
      v8 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = v7;
      if ((*(_BYTE *)(v8 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8));
        v9 = (__int128 *)*((_QWORD *)v5 + 4);
      }
      v10 = &v9[*((unsigned int *)v5 + 10)];
      v11 = v7 + 1;
      if (v7 + 1 != v10)
      {
        v12 = *(_DWORD *)(v8 + 240);
        do
        {
          v13 = *(_QWORD *)v11;
          if ((*(_QWORD *)v11 & 6) == 0)
          {
            v14 = (llvm::SUnit *)(v13 & 0xFFFFFFFFFFFFFFF8);
            if ((*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(v14);
            if (*((_DWORD *)v14 + 60) > v12)
              v7 = v11;
          }
          ++v11;
        }
        while (v11 != v10);
        v9 = (__int128 *)*((_QWORD *)v5 + 4);
      }
      if (v7 != v9)
      {
        v46 = *v9;
        *v9 = *v7;
        *v7 = v46;
      }
    }
    if (!*((_DWORD *)v5 + 52))
    {
      v15 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
        v15 = v51;
      }
      *((_QWORD *)v50 + v15) = v5;
      LODWORD(v51) = v51 + 1;
    }
    if (!*((_DWORD *)v5 + 53))
    {
      v16 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 8);
        v16 = v48;
      }
      *((_QWORD *)v47 + v16) = v5;
      LODWORD(v48) = v48 + 1;
    }
    v5 = (llvm::AAResults *)((char *)v5 + 272);
  }
  if (*((_DWORD *)this + 136) >= 2u)
  {
    v17 = this[47];
    v18 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
    v19 = v17;
    if ((*(_BYTE *)(v18 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8));
      v19 = this[47];
    }
    v20 = (llvm::AAResults *)((char *)v19 + 16 * *((unsigned int *)this + 96));
    v21 = (llvm::AAResults *)((char *)v17 + 16);
    if ((llvm::AAResults *)((char *)v17 + 16) != v20)
    {
      v22 = *(_DWORD *)(v18 + 240);
      do
      {
        v23 = *(_QWORD *)v21;
        if ((*(_QWORD *)v21 & 6) == 0)
        {
          v24 = (llvm::SUnit *)(v23 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v24);
          if (*((_DWORD *)v24 + 60) > v22)
            v17 = v21;
        }
        v21 = (llvm::AAResults *)((char *)v21 + 16);
      }
      while (v21 != v20);
      v19 = this[47];
    }
    if (v17 != v19)
    {
      v46 = *(_OWORD *)v19;
      *(_OWORD *)v19 = *(_OWORD *)v17;
      *(_OWORD *)v17 = v46;
    }
  }
  (*(void (**)(llvm::AAResults *, llvm::AAResults **))(*(_QWORD *)this[331] + 64))(this[331], this);
  llvm::ScheduleDAGMI::initQueues((uint64_t)this, (uint64_t *)v50, v51, (uint64_t)v47, v48);
  LOBYTE(v46) = 0;
  v25 = (*(uint64_t (**)(llvm::AAResults *, __int128 *))(*(_QWORD *)this[331] + 96))(this[331], &v46);
  if (v25)
  {
    v26 = v25;
    do
    {
      v27 = *(_QWORD *)(v26 + 8);
      if ((_BYTE)v46)
      {
        v28 = (unint64_t *)this[335];
        if (v28 == (unint64_t *)v27)
        {
          if (!v27 || (*(_BYTE *)v27 & 4) == 0)
          {
            while ((*(_WORD *)(v27 + 44) & 8) != 0)
              v27 = *(_QWORD *)(v27 + 8);
          }
          v36 = *(llvm::AAResults **)(v27 + 8);
          this[335] = v36;
          v37 = this[336];
          if (v36 != v37)
          {
            while (1)
            {
              v38 = **((unsigned __int16 **)v36 + 2);
              if ((v38 - 13) >= 5 && v38 != 23)
                break;
              if ((*(_BYTE *)v36 & 4) == 0)
              {
                while ((*((_WORD *)v36 + 22) & 8) != 0)
                  v36 = (llvm::AAResults *)*((_QWORD *)v36 + 1);
              }
              v36 = (llvm::AAResults *)*((_QWORD *)v36 + 1);
              if (v36 == v37)
              {
                v36 = this[336];
                break;
              }
            }
          }
          this[335] = v36;
        }
        else
        {
          llvm::ScheduleDAGMI::moveInstruction((uint64_t)this, *(_QWORD *)(v26 + 8), v28);
        }
      }
      else
      {
        v29 = (unint64_t *)this[336];
        v30 = (uint64_t)this[335];
        v31 = sub_1C51A7290((unint64_t)v29, v30);
        if (v27 == v31)
        {
          this[336] = (llvm::AAResults *)v31;
        }
        else
        {
          if (v30 == v27)
          {
            if (!v27 || (v32 = v27, (*(_BYTE *)v27 & 4) == 0))
            {
              v32 = v27;
              if ((*(_WORD *)(v27 + 44) & 8) != 0)
              {
                v32 = v27;
                do
                  v32 = *(_QWORD *)(v32 + 8);
                while ((*(_WORD *)(v32 + 44) & 8) != 0);
              }
            }
            v33 = *(_QWORD *)(v32 + 8);
            this[335] = (llvm::AAResults *)v33;
            while (v33 != v31)
            {
              v34 = **(unsigned __int16 **)(v33 + 16);
              if ((v34 - 13) >= 5 && v34 != 23)
                goto LABEL_85;
              if ((*(_BYTE *)v33 & 4) == 0)
              {
                while ((*(_WORD *)(v33 + 44) & 8) != 0)
                  v33 = *(_QWORD *)(v33 + 8);
              }
              v33 = *(_QWORD *)(v33 + 8);
            }
            v33 = v31;
LABEL_85:
            this[335] = (llvm::AAResults *)v33;
          }
          llvm::ScheduleDAGMI::moveInstruction((uint64_t)this, v27, v29);
          this[336] = (llvm::AAResults *)v27;
        }
      }
      (*(void (**)(llvm::AAResults *, uint64_t, _QWORD))(*(_QWORD *)this[331] + 112))(this[331], v26, v46);
      if ((_BYTE)v46)
      {
        v43 = *(unsigned int *)(v26 + 120);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v26 + 112);
          v45 = 16 * v43;
          do
          {
            llvm::ScheduleDAGMI::releaseSucc((uint64_t)this, v26, v44);
            v44 += 16;
            v45 -= 16;
          }
          while (v45);
        }
      }
      else
      {
        v40 = *(unsigned int *)(v26 + 40);
        if ((_DWORD)v40)
        {
          v41 = *(_QWORD *)(v26 + 32);
          v42 = 16 * v40;
          do
          {
            llvm::ScheduleDAGMI::releasePred((uint64_t)this, v26, v41);
            v41 += 16;
            v42 -= 16;
          }
          while (v42);
        }
      }
      *(_WORD *)(v26 + 228) |= 0x400u;
      v26 = (*(uint64_t (**)(llvm::AAResults *, __int128 *))(*(_QWORD *)this[331] + 96))(this[331], &v46);
    }
    while (v26);
  }
  llvm::ScheduleDAGMI::placeDebugValues((unint64_t *)this);
  if (v47 != v49)
    free(v47);
  if (v50 != v52)
    free(v50);
}

uint64_t llvm::ScheduleDAGMI::postprocessDAG(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(this + 2656);
  v2 = *(uint64_t **)(this + 2664);
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

__n128 llvm::ScheduleDAGMI::findRootsAndBiasEdges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  __n128 *v8;
  unint64_t v9;
  __n128 *v10;
  __n128 result;
  __n128 *v12;
  __n128 *v13;
  unsigned int v14;
  unint64_t v15;
  llvm::SUnit *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 *v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  unsigned int v24;
  unint64_t v25;
  llvm::SUnit *v26;
  __n128 v27;
  __n128 v28;

  v4 = *(_QWORD *)(a1 + 48);
  for (i = *(_QWORD *)(a1 + 56); v4 != i; v4 += 272)
  {
    if (*(_DWORD *)(v4 + 200) >= 2u)
    {
      v8 = *(__n128 **)(v4 + 32);
      v9 = v8->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
      v10 = v8;
      if ((*(_BYTE *)(v9 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)(v8->n128_u64[0] & 0xFFFFFFFFFFFFFFF8));
        v10 = *(__n128 **)(v4 + 32);
      }
      v12 = &v10[*(unsigned int *)(v4 + 40)];
      v13 = v8 + 1;
      if (&v8[1] != v12)
      {
        v14 = *(_DWORD *)(v9 + 240);
        do
        {
          v15 = v13->n128_u64[0];
          if ((v13->n128_u64[0] & 6) == 0)
          {
            v16 = (llvm::SUnit *)(v15 & 0xFFFFFFFFFFFFFFF8);
            if ((*(_BYTE *)((v15 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(v16);
            if (*((_DWORD *)v16 + 60) > v14)
              v8 = v13;
          }
          ++v13;
        }
        while (v13 != v12);
        v10 = *(__n128 **)(v4 + 32);
      }
      if (v8 != v10)
      {
        v27 = *v10;
        *v10 = *v8;
        result = v27;
        *v8 = v27;
      }
    }
    if (!*(_DWORD *)(v4 + 208))
    {
      v17 = *(unsigned int *)(a2 + 8);
      if (v17 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 8);
        v17 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v4;
      ++*(_DWORD *)(a2 + 8);
    }
    if (!*(_DWORD *)(v4 + 212))
    {
      v18 = *(unsigned int *)(a3 + 8);
      if (v18 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
        v18 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  if (*(_DWORD *)(a1 + 544) >= 2u)
  {
    v19 = *(__n128 **)(a1 + 376);
    v20 = v19->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
    v21 = v19;
    if ((*(_BYTE *)(v20 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)(v19->n128_u64[0] & 0xFFFFFFFFFFFFFFF8));
      v21 = *(__n128 **)(a1 + 376);
    }
    v22 = &v21[*(unsigned int *)(a1 + 384)];
    v23 = v19 + 1;
    if (&v19[1] != v22)
    {
      v24 = *(_DWORD *)(v20 + 240);
      do
      {
        v25 = v23->n128_u64[0];
        if ((v23->n128_u64[0] & 6) == 0)
        {
          v26 = (llvm::SUnit *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)((v25 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v26);
          if (*((_DWORD *)v26 + 60) > v24)
            v19 = v23;
        }
        ++v23;
      }
      while (v23 != v22);
      v21 = *(__n128 **)(a1 + 376);
    }
    if (v19 != v21)
    {
      v28 = *v21;
      *v21 = *v19;
      result = v28;
      *v19 = v28;
    }
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::initQueues(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  uint64_t v25;

  *(_OWORD *)(a1 + 2696) = 0u;
  if (a3)
  {
    v9 = 8 * a3;
    do
    {
      v10 = *a2++;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2648) + 120))(*(_QWORD *)(a1 + 2648), v10);
      v9 -= 8;
    }
    while (v9);
  }
  if (a5)
  {
    v11 = 8 * a5;
    v12 = a4 - 8;
    do
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 2648) + 128))(*(_QWORD *)(a1 + 2648), *(_QWORD *)(v12 + v11));
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v13)
  {
    v24 = *(_QWORD *)(a1 + 184);
    v25 = 16 * v13;
    do
    {
      llvm::ScheduleDAGMI::releaseSucc(a1, a1 + 72, v24);
      v24 += 16;
      v25 -= 16;
    }
    while (v25);
  }
  v14 = *(unsigned int *)(a1 + 384);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)(a1 + 376);
    v16 = 16 * v14;
    do
    {
      llvm::ScheduleDAGMI::releasePred(a1, a1 + 344, v15);
      v15 += 16;
      v16 -= 16;
    }
    while (v16);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2648) + 88))(*(_QWORD *)(a1 + 2648));
  v18 = *(_QWORD *)(a1 + 928);
  v19 = *(_QWORD *)(a1 + 936);
  if (v18 != v19)
  {
    while (1)
    {
      v20 = **(unsigned __int16 **)(v18 + 16);
      v21 = v20 > 0x17;
      v22 = (1 << v20) & 0x83E000;
      if (v21 || v22 == 0)
        break;
      if ((*(_BYTE *)v18 & 4) == 0)
      {
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          v18 = *(_QWORD *)(v18 + 8);
      }
      v18 = *(_QWORD *)(v18 + 8);
      if (v18 == v19)
      {
        v18 = *(_QWORD *)(a1 + 936);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 2680) = v18;
  *(_QWORD *)(a1 + 2688) = v19;
  return result;
}

unint64_t sub_1C51A7290(unint64_t result, uint64_t a2)
{
  int v2;

  while (1)
  {
    result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
    if (!result || (*(_BYTE *)result & 4) == 0)
    {
      while ((*(_WORD *)(result + 44) & 4) != 0)
        result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
    }
    if (result == a2)
      break;
    v2 = **(unsigned __int16 **)(result + 16);
    if ((v2 - 13) >= 5 && v2 != 23)
      return result;
  }
  return a2;
}

uint64_t llvm::ScheduleDAGMI::updateQueues(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  if (a3)
  {
    v8 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)(a2 + 112);
      v10 = 16 * v8;
      do
      {
        result = llvm::ScheduleDAGMI::releaseSucc(v4, a2, v9);
        v9 += 16;
        v10 -= 16;
      }
      while (v10);
    }
  }
  else
  {
    v5 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(a2 + 32);
      v7 = 16 * v5;
      do
      {
        result = llvm::ScheduleDAGMI::releasePred(v4, a2, v6);
        v6 += 16;
        v7 -= 16;
      }
      while (v7);
    }
  }
  *(_WORD *)(a2 + 228) |= 0x400u;
  return result;
}

unint64_t *llvm::ScheduleDAGMI::placeDebugValues(unint64_t *this)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = this;
  v2 = (unint64_t *)this[320];
  if (v2)
  {
    this = sub_1C48532D0((unint64_t *)this[115], (unint64_t *)this[116], (unint64_t *)this[115], v2);
    v1[116] = v1[320];
  }
  v3 = v1[318];
  v4 = v1[317];
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 - 16);
    v6 = *(_QWORD *)(v3 - 8);
    v3 -= 16;
    if (v1[116] == v5)
    {
      if (!v5 || (v7 = v5, (*(_BYTE *)v5 & 4) == 0))
      {
        v7 = v5;
        if ((*(_WORD *)(v5 + 44) & 8) != 0)
        {
          v7 = v5;
          do
            v7 = *(_QWORD *)(v7 + 8);
          while ((*(_WORD *)(v7 + 44) & 8) != 0);
        }
      }
      v1[116] = *(_QWORD *)(v7 + 8);
      if (v6)
      {
LABEL_14:
        if ((*(_BYTE *)v6 & 4) != 0)
          goto LABEL_16;
      }
    }
    else if (v6)
    {
      goto LABEL_14;
    }
    if ((*(_WORD *)(v6 + 44) & 8) != 0)
    {
      v8 = v6;
      do
        v8 = *(_QWORD *)(v8 + 8);
      while ((*(_WORD *)(v8 + 44) & 8) != 0);
      goto LABEL_19;
    }
LABEL_16:
    v8 = v6;
LABEL_19:
    this = sub_1C48532D0((unint64_t *)v1[115], *(unint64_t **)(v8 + 8), (unint64_t *)v1[115], (unint64_t *)v5);
    v9 = v1[117];
    if (v9 != v1[115] + 48 && v6 == v9)
      v1[117] = v5;
  }
  return this;
}

void llvm::ScheduleDAGMILive::~ScheduleDAGMILive(llvm::ScheduleDAGMILive *this)
{
  _QWORD *v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;

  *(_QWORD *)this = &off_1E8146738;
  v2 = (_QWORD *)*((_QWORD *)this + 340);
  if (v2)
  {
    v27 = (void *)v2[25];
    if (v27)
    {
      v2[26] = v27;
      operator delete(v27);
    }
    v28 = v2[22];
    if (v28)
    {
      v29 = v2[23];
      v30 = (void *)v2[22];
      if (v29 != v28)
      {
        do
        {
          v32 = *(void **)(v29 - 48);
          v29 -= 48;
          v31 = v32;
          if ((void *)(v29 + 16) != v32)
            free(v31);
        }
        while (v29 != v28);
        v30 = (void *)v2[22];
      }
      v2[23] = v28;
      operator delete(v30);
    }
    v33 = (_QWORD *)v2[4];
    if (v33 != v2 + 6)
      free(v33);
    v34 = (void *)v2[1];
    if (v34)
    {
      v2[2] = v34;
      operator delete(v34);
    }
    MEMORY[0x1CAA32FC0](v2, 0x10B0C402270A63DLL);
  }
  v3 = (void *)*((_QWORD *)this + 646);
  if (v3)
  {
    *((_QWORD *)this + 647) = v3;
    operator delete(v3);
  }
  free(*((void **)this + 644));
  v4 = (char *)*((_QWORD *)this + 638);
  if (v4 != (char *)this + 5120)
    free(v4);
  free(*((void **)this + 635));
  v5 = (char *)*((_QWORD *)this + 617);
  if (v5 != (char *)this + 4952)
    free(v5);
  v6 = (void *)*((_QWORD *)this + 614);
  if (v6)
  {
    *((_QWORD *)this + 615) = v6;
    operator delete(v6);
  }
  v7 = (char *)*((_QWORD *)this + 585);
  if (v7 != (char *)this + 4696)
    free(v7);
  v8 = (char *)*((_QWORD *)this + 567);
  if (v8 != (char *)this + 4552)
    free(v8);
  v9 = (void *)*((_QWORD *)this + 564);
  if (v9)
  {
    *((_QWORD *)this + 565) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 561);
  if (v10)
  {
    *((_QWORD *)this + 562) = v10;
    operator delete(v10);
  }
  free(*((void **)this + 559));
  v11 = (char *)*((_QWORD *)this + 553);
  if (v11 != (char *)this + 4440)
    free(v11);
  free(*((void **)this + 550));
  v12 = (char *)*((_QWORD *)this + 532);
  if (v12 != (char *)this + 4272)
    free(v12);
  v13 = (void *)*((_QWORD *)this + 529);
  if (v13)
  {
    *((_QWORD *)this + 530) = v13;
    operator delete(v13);
  }
  v14 = (char *)*((_QWORD *)this + 500);
  if (v14 != (char *)this + 4016)
    free(v14);
  v15 = (char *)*((_QWORD *)this + 482);
  if (v15 != (char *)this + 3872)
    free(v15);
  v16 = (void *)*((_QWORD *)this + 479);
  if (v16)
  {
    *((_QWORD *)this + 480) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 476);
  if (v17)
  {
    *((_QWORD *)this + 477) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 473);
  if (v18)
  {
    *((_QWORD *)this + 474) = v18;
    operator delete(v18);
  }
  free(*((void **)this + 471));
  v19 = (char *)*((_QWORD *)this + 465);
  if (v19 != (char *)this + 3736)
    free(v19);
  free(*((void **)this + 462));
  v20 = (char *)*((_QWORD *)this + 444);
  if (v20 != (char *)this + 3568)
    free(v20);
  v21 = (void *)*((_QWORD *)this + 441);
  if (v21)
  {
    *((_QWORD *)this + 442) = v21;
    operator delete(v21);
  }
  v22 = (char *)*((_QWORD *)this + 412);
  if (v22 != (char *)this + 3312)
    free(v22);
  v23 = (char *)*((_QWORD *)this + 394);
  if (v23 != (char *)this + 3168)
    free(v23);
  v24 = (void *)*((_QWORD *)this + 391);
  if (v24)
  {
    *((_QWORD *)this + 392) = v24;
    operator delete(v24);
  }
  free(*((void **)this + 388));
  free(*((void **)this + 385));
  v25 = (char *)*((_QWORD *)this + 351);
  if (v25 != (char *)this + 2824)
    free(v25);
  v26 = (char *)*((_QWORD *)this + 341);
  if (v26 != (char *)this + 2744)
    free(v26);
  llvm::ScheduleDAGMI::~ScheduleDAGMI(this);
}

{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::ScheduleDAGMILive::collectVRegUses(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(unsigned int *)(v2 + 40);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = *(_DWORD **)(v2 + 32);
    v7 = &v6[8 * v3];
    v8 = (uint64_t *)(result + 2808);
    do
    {
      if ((*v6 & 0x300000FF) == 0 && (*v6 & 0x10FFF00) != 0x1000000)
      {
        if (*(_BYTE *)(v5 + 914))
        {
          if ((*v6 & 0x1000000) == 0)
          {
            v10 = v6[1];
            if (v10 < 0)
            {
              v11 = *(unsigned int *)(v2 + 40);
              if ((_DWORD)v11)
              {
                v12 = 32 * v11;
                v13 = (_DWORD *)(*(_QWORD *)(v2 + 32) + 4);
                do
                {
                  v14 = *(v13 - 1);
                  if ((v14 & 0x10000FF) == 0x1000000 && (~v14 & 0x5000000) != 0 && *v13 == v10)
                    goto LABEL_30;
                  v13 += 8;
                  v12 -= 32;
                }
                while (v12);
              }
LABEL_20:
              v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 3080) + (v10 & 0x7FFFFFFF));
              v17 = *(_DWORD *)(v5 + 2816);
              if (v17 <= v16)
              {
LABEL_29:
                LODWORD(v21) = v10;
                *((_QWORD *)&v21 + 1) = 0;
                v22 = a2;
                result = sub_1C51A7954((uint64_t)v8, &v21);
              }
              else
              {
                v18 = *v8;
                while (1)
                {
                  if ((*(_DWORD *)(v18 + 32 * v16) & 0x7FFFFFFF) == (v10 & 0x7FFFFFFF))
                  {
                    v19 = *(unsigned int *)(v18 + 32 * v16 + 24);
                    if ((_DWORD)v19 != -1 && *(_DWORD *)(v18 + 32 * v19 + 28) == -1)
                      break;
                  }
                  v16 += 256;
                  if (v16 >= v17)
                    goto LABEL_29;
                }
                while (1)
                {
                  v20 = v18 + 32 * v16;
                  if (*(_QWORD *)(v20 + 16) == a2)
                    break;
                  v16 = *(_DWORD *)(v20 + 28);
                  if (v16 == -1)
                    goto LABEL_29;
                }
              }
            }
          }
        }
        else
        {
          v10 = v6[1];
          if (v10 < 0)
            goto LABEL_20;
        }
      }
LABEL_30:
      v6 += 8;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_1C51A7954(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD *)a2 & 0x7FFFFFFF;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 272) + v3);
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= v4)
  {
LABEL_9:
    v4 = -1;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    while (1)
    {
      if ((*(_DWORD *)(v6 + 32 * v4) & 0x7FFFFFFF) == (_DWORD)v3)
      {
        v7 = *(unsigned int *)(v6 + 32 * v4 + 24);
        if ((_DWORD)v7 != -1 && *(_DWORD *)(v6 + 32 * v7 + 28) == -1)
          break;
      }
      v4 += 256;
      if (v4 >= v5)
        goto LABEL_9;
    }
  }
  v8 = v4;
  if (*(_DWORD *)(a1 + 292))
  {
    v11 = *(unsigned int *)(a1 + 288);
    v16 = *(_QWORD *)a1 + 32 * v11;
    v17 = *(_DWORD *)(v16 + 28);
    v18 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = *a2;
    *(_QWORD *)(v16 + 16) = v18;
    *(_QWORD *)(v16 + 24) = -1;
    *(_DWORD *)(a1 + 288) = v17;
    --*(_DWORD *)(a1 + 292);
  }
  else
  {
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 2);
    v21 = -1;
    v9 = (_OWORD *)sub_1C47C0F60(a1, (unint64_t)&v19, 1);
    v11 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8);
    v10 = v9[1];
    *(_OWORD *)v11 = *v9;
    *(_OWORD *)(v11 + 16) = v10;
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v11 + 1;
  }
  if ((_DWORD)v8 == -1)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 272) + v3) = v11;
    *(_DWORD *)(*(_QWORD *)a1 + 32 * v11 + 24) = v11;
  }
  else
  {
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)a1 + 32 * v8;
    v15 = *(unsigned int *)(v14 + 24);
    *(_DWORD *)(*(_QWORD *)a1 + 32 * v15 + 28) = v11;
    *(_DWORD *)(v14 + 24) = v11;
    *(_DWORD *)(v13 + 32 * v11 + 24) = v15;
  }
  return a1;
}

uint64_t llvm::ScheduleDAGMILive::enterRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  *(_QWORD *)(a1 + 928) = a3;
  *(_QWORD *)(a1 + 936) = a4;
  *(_DWORD *)(a1 + 944) = a5;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2648) + 24))(*(_QWORD *)(a1 + 2648), a3, a4, a5);
  v7 = a2 + 48;
  v8 = *(_QWORD *)(a1 + 936);
  if (v8 != a2 + 48)
  {
    if (!v8 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 8) != 0)
        v8 = *(_QWORD *)(v8 + 8);
    }
    v7 = *(_QWORD *)(v8 + 8);
  }
  *(_QWORD *)(a1 + 2800) = v7;
  *(_DWORD *)(a1 + 3112) = 0;
  *(_BYTE *)(a1 + 3120) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2648) + 40))(*(_QWORD *)(a1 + 2648));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2648) + 48))(*(_QWORD *)(a1 + 2648));
  *(_BYTE *)(a1 + 3121) = result;
  return result;
}

void llvm::ScheduleDAGMILive::initRegPressure(llvm::ScheduleDAGMILive *this)
{
  size_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t CurrSlot;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  _DWORD *v56;
  int v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[17];

  v60[16] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 704) = 0;
  *((_QWORD *)this + 387) = 0xFFFFFFFFLL;
  v2 = *(unsigned int *)(*((_QWORD *)this + 5) + 32);
  v3 = *((_DWORD *)this + 772);
  if (v3 < v2 || v3 >> 2 > v2)
  {
    free(*((void **)this + 385));
    v45 = malloc_type_calloc(v2, 1uLL, 0x6D9A4F0CuLL);
    if (!v45 && ((_DWORD)v2 || (v45 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)this + 385) = v45;
    *((_DWORD *)this + 772) = v2;
  }
  v5 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  while (v5 != v6)
  {
    llvm::ScheduleDAGMILive::collectVRegUses((uint64_t)this, v5);
    v5 += 272;
  }
  llvm::RegPressureTracker::init((uint64_t)this + 4160, *((_QWORD *)this + 4), *((_QWORD *)this + 339), *((_QWORD *)this + 330), *((_QWORD *)this + 115), *((_QWORD *)this + 116), *((_BYTE *)this + 3121), 0);
  llvm::RegPressureTracker::init((uint64_t)this + 4840, *((_QWORD *)this + 4), *((_QWORD *)this + 339), *((_QWORD *)this + 330), *((_QWORD *)this + 115), *((_QWORD *)this + 350), *((_BYTE *)this + 3121), 0);
  v7 = *((_QWORD *)this + 438);
  if (!*((_BYTE *)this + 3512))
  {
    v46 = *(_QWORD *)(v7 + 320);
    if (*(_QWORD *)(v7 + 312))
    {
      if (v46)
        goto LABEL_15;
      *(_QWORD *)(v7 + 312) = *((_QWORD *)this + 440);
      v7 = *((_QWORD *)this + 438);
      goto LABEL_12;
    }
    if (!v46)
      goto LABEL_15;
LABEL_76:
    llvm::RegPressureTracker::closeBottom((llvm::ScheduleDAGMILive *)((char *)this + 3456));
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(v7 + 320);
  if (*(_QWORD *)(v7 + 312) > 7uLL)
  {
    if (v8 > 7)
      goto LABEL_15;
    goto LABEL_76;
  }
  if (v8 <= 7)
    goto LABEL_15;
  *(_QWORD *)(v7 + 312) = llvm::RegPressureTracker::getCurrSlot((llvm::ScheduleDAGMILive *)((char *)this + 3456));
LABEL_12:
  v9 = *((unsigned int *)this + 890);
  if (*(_DWORD *)(v7 + 36) < v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 24, v7 + 40, v9, 16);
    v7 = *((_QWORD *)this + 438);
  }
  sub_1C5258650((unsigned int *)this + 888, v7 + 24);
LABEL_15:
  v10 = *((_QWORD *)this + 438);
  v11 = *(unsigned int *)(v10 + 32);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v10 + 24);
    v13 = v12 + 16 * v11;
    do
    {
      v14 = *(_DWORD *)v12;
      if ((*(_DWORD *)v12 & 0x80000000) != 0)
        v14 = *((_DWORD *)this + 1104) + (v14 & 0x7FFFFFFF);
      v15 = *(_QWORD *)(v12 + 8);
      LODWORD(v58) = v14;
      v59 = v15;
      v16 = sub_1C525D1D8((uint64_t)this + 4256, (unsigned int *)&v58);
      if ((v17 & 1) != 0)
      {
        v18 = 0;
      }
      else
      {
        v18 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = v18 | v15;
      }
      v19 = *(_QWORD *)(v12 + 8) | v18;
      v20 = *(_DWORD *)v12;
      v12 += 16;
      llvm::RegPressureTracker::increaseRegPressure((uint64_t)this + 4160, v20, v18, v19);
    }
    while (v12 != v13);
    v10 = *((_QWORD *)this + 438);
  }
  v21 = *(unsigned int *)(v10 + 176);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(v10 + 168);
    v23 = v22 + 16 * v21;
    do
    {
      v24 = *(_DWORD *)v22;
      if ((*(_DWORD *)v22 & 0x80000000) != 0)
        v24 = *((_DWORD *)this + 1274) + (v24 & 0x7FFFFFFF);
      v25 = *(_QWORD *)(v22 + 8);
      LODWORD(v58) = v24;
      v59 = v25;
      v26 = sub_1C525D1D8((uint64_t)this + 4936, (unsigned int *)&v58);
      if ((v27 & 1) != 0)
      {
        v28 = 0;
      }
      else
      {
        v28 = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v26 + 8) = v28 | v25;
      }
      v29 = *(_QWORD *)(v22 + 8) | v28;
      v30 = *(_DWORD *)v22;
      v22 += 16;
      llvm::RegPressureTracker::increaseRegPressure((uint64_t)this + 4840, v30, v28, v29);
    }
    while (v22 != v23);
  }
  if (*((_BYTE *)this + 4216))
  {
    CurrSlot = llvm::RegPressureTracker::getCurrSlot((llvm::ScheduleDAGMILive *)((char *)this + 4160));
    v32 = *((_QWORD *)this + 526);
    *(_QWORD *)(v32 + 312) = CurrSlot;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 526) + 312) = *((_QWORD *)this + 528);
    v32 = *((_QWORD *)this + 526);
  }
  v33 = *((unsigned int *)this + 1066);
  if (*(_DWORD *)(v32 + 36) < v33)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v32 + 24, v32 + 40, v33, 16);
    v32 = *((_QWORD *)this + 526);
  }
  sub_1C5258650((unsigned int *)this + 1064, v32 + 24);
  if (*((_BYTE *)this + 4896))
  {
    v34 = llvm::RegPressureTracker::getCurrSlot((llvm::ScheduleDAGMILive *)((char *)this + 4840));
    v35 = *((_QWORD *)this + 611);
    *(_QWORD *)(v35 + 320) = v34;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 611) + 320) = *((_QWORD *)this + 613);
    v35 = *((_QWORD *)this + 611);
  }
  v36 = *((unsigned int *)this + 1236);
  if (*(_DWORD *)(v35 + 180) < v36)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v35 + 168, v35 + 184, v36, 16);
    v35 = *((_QWORD *)this + 611);
  }
  sub_1C5258650((unsigned int *)this + 1234, v35 + 168);
  llvm::RegPressureTracker::initLiveThru((llvm::ScheduleDAGMILive *)((char *)this + 4840), (llvm::ScheduleDAGMILive *)((char *)this + 3456));
  v37 = (char *)*((_QWORD *)this + 646);
  v38 = (char *)*((_QWORD *)this + 647);
  if (v38 != v37)
    sub_1C4FCE520((_QWORD *)this + 561, v37, v38, (v38 - v37) >> 2);
  llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)this, *(unsigned int **)(*((_QWORD *)this + 438) + 168), *(unsigned int *)(*((_QWORD *)this + 438) + 176));
  if (*((_QWORD *)this + 350) != *((_QWORD *)this + 117))
  {
    v58 = v60;
    v59 = 0x800000000;
    llvm::RegPressureTracker::recede((uint64_t)this + 4840, (uint64_t)&v58);
    llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)this, (unsigned int *)v58, v59);
    if (v58 != v60)
      free(v58);
  }
  *((_QWORD *)this + 477) = *((_QWORD *)this + 476);
  v39 = (_QWORD *)*((_QWORD *)this + 438);
  v40 = v39[1] - *v39;
  if ((v40 & 0x3FFFFFFFCLL) != 0)
  {
    v41 = 0;
    v42 = (v40 >> 2);
    do
    {
      v43 = *((_QWORD *)this + 339);
      v44 = *(_DWORD *)(*(_QWORD *)(v43 + 216) + 4 * v41);
      if (!v44)
      {
        v44 = llvm::RegisterClassInfo::computePSetLimit(*((llvm::RegisterClassInfo **)this + 339), v41);
        *(_DWORD *)(*(_QWORD *)(v43 + 216) + 4 * v41) = v44;
      }
      if (*(_DWORD *)(*v39 + 4 * v41) > v44)
      {
        v47 = (_DWORD *)*((_QWORD *)this + 477);
        v48 = *((_QWORD *)this + 478);
        if ((unint64_t)v47 < v48)
        {
          *v47 = (unsigned __int16)(v41 + 1);
          v56 = v47 + 1;
        }
        else
        {
          v49 = (_DWORD *)*((_QWORD *)this + 476);
          v50 = v47 - v49;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            abort();
          v52 = v48 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 62)
              sub_1C4764EE4();
            v54 = (char *)operator new(4 * v53);
          }
          else
          {
            v54 = 0;
          }
          v55 = &v54[4 * v50];
          *(_DWORD *)v55 = (unsigned __int16)(v41 + 1);
          v56 = v55 + 4;
          if (v47 != v49)
          {
            do
            {
              v57 = *--v47;
              *((_DWORD *)v55 - 1) = v57;
              v55 -= 4;
            }
            while (v47 != v49);
            v47 = (_DWORD *)*((_QWORD *)this + 476);
          }
          *((_QWORD *)this + 476) = v55;
          *((_QWORD *)this + 477) = v56;
          *((_QWORD *)this + 478) = &v54[4 * v53];
          if (v47)
            operator delete(v47);
        }
        *((_QWORD *)this + 477) = v56;
      }
      ++v41;
    }
    while (v41 != v42);
  }
}

uint64_t *llvm::ScheduleDAGMILive::updatePressureDiffs(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::LiveInterval *v28;
  _QWORD v29[4];

  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = &a2[4 * a3];
    v6 = result + 351;
    v7 = result + 43;
    do
    {
      v8 = *v3;
      if ((v8 & 0x80000000) != 0)
      {
        if (*((_BYTE *)v4 + 3121))
        {
          v9 = *(unsigned __int8 *)(v4[385] + (v8 & 0x7FFFFFFF));
          v10 = *((_DWORD *)v4 + 704);
          if (v10 > v9)
          {
            v11 = *((_QWORD *)v3 + 1);
            v12 = *v6;
            while (1)
            {
              if ((*(_DWORD *)(v12 + 32 * v9) & 0x7FFFFFFF) == (v8 & 0x7FFFFFFF))
              {
                v13 = *(unsigned int *)(v12 + 32 * v9 + 24);
                if ((_DWORD)v13 != -1 && *(_DWORD *)(v12 + 32 * v13 + 28) == -1)
                  break;
              }
              v9 += 256;
              if (v9 >= v10)
                goto LABEL_16;
            }
            do
            {
              v14 = v9;
              v15 = *(_QWORD *)(v12 + 32 * v9 + 16);
              if ((*(_WORD *)(v15 + 228) & 0x400) == 0 && (_QWORD *)v15 != v7)
              {
                result = (uint64_t *)llvm::PressureDiff::addPressureChange(v4[388] + ((unint64_t)*(unsigned int *)(v15 + 192) << 6), v8, v11 != 0, (_QWORD *)v4[5]);
                v12 = v4[351];
              }
              v9 = *(_DWORD *)(v12 + 32 * v14 + 28);
            }
            while (v9 != -1);
          }
        }
        else
        {
          v28 = sub_1C5104FB8(v4[330], *v3);
          v16 = v4[613];
          v17 = v4[115];
          while (v16 != v17 + 48)
          {
            v18 = **(unsigned __int16 **)(v16 + 16);
            if ((v18 - 13) >= 5 && v18 != 23)
            {
              v26 = sub_1C4A07EAC(*(_QWORD *)(v4[330] + 288), v16, 0);
              sub_1C51A85BC((uint64_t)v28, v26, (uint64_t)v29);
              v27 = v29[0];
              goto LABEL_30;
            }
            if ((*(_BYTE *)v16 & 4) == 0)
            {
              while ((*(_WORD *)(v16 + 44) & 8) != 0)
                v16 = *(_QWORD *)(v16 + 8);
            }
            v16 = *(_QWORD *)(v16 + 8);
          }
          v27 = sub_1C51A84BC((uint64_t)v28, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4[330] + 288) + 392) + 16 * *(unsigned int *)(v17 + 24) + 8));
LABEL_30:
          result = sub_1C51AF110(v6, v8 & 0x7FFFFFFF);
          v21 = result;
          v22 = v20;
          if (v6 != result || v20 != 0xFFFFFFFFLL)
          {
            v23 = *result;
            do
            {
              v24 = *(_QWORD *)(v23 + 32 * v22 + 16);
              if ((*(_WORD *)(v24 + 228) & 0x400) == 0 && (_QWORD *)v24 != v7)
              {
                v25 = sub_1C4A07EAC(*(_QWORD *)(v4[330] + 288), *(_QWORD *)(v24 + 8), 0);
                result = (uint64_t *)sub_1C51A85BC((uint64_t)v28, v25, (uint64_t)v29);
                if (v29[0] == v27)
                  result = (uint64_t *)llvm::PressureDiff::addPressureChange(v4[388] + ((unint64_t)*(unsigned int *)(v24 + 192) << 6), v8, 1, (_QWORD *)v4[5]);
                v23 = *v21;
              }
              v22 = *(unsigned int *)(v23 + 32 * v22 + 28);
            }
            while (v6 != v21 || (_DWORD)v22 != -1);
          }
        }
      }
LABEL_16:
      v3 += 4;
    }
    while (v3 != v5);
  }
  return result;
}

_QWORD *llvm::ScheduleDAGMILive::updateScheduledPressure(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::RegisterClassInfo *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  int v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD *v27;

  v3 = 0;
  v4 = (_WORD *)(result[388] + ((unint64_t)*(unsigned int *)(a2 + 192) << 6));
  v5 = (result[477] - result[476]) >> 2;
  v6 = v4 + 32;
  do
  {
    v7 = (unsigned __int16)*v4;
    if (!*v4)
      break;
    v8 = (v7 - 1);
    v9 = v5;
    if ((_DWORD)v3 != (_DWORD)v5)
    {
      v11 = result[476];
      while (1)
      {
        v12 = *(unsigned __int16 *)(v11 + 4 * v3);
        if (v12 - 1 >= v8)
          break;
        v3 = (v3 + 1);
        if ((_DWORD)v5 == (_DWORD)v3)
        {
          v9 = v5;
          goto LABEL_4;
        }
      }
      if (v12 == v7)
      {
        v13 = *(_DWORD *)(*a3 + 4 * v8);
        v14 = v11 + 4 * v3;
        v17 = *(__int16 *)(v14 + 2);
        v15 = (_WORD *)(v14 + 2);
        v16 = v17;
        if (!(v13 >> 15) && (int)v13 > v16)
          *v15 = v13;
      }
      v9 = v3;
    }
LABEL_4:
    v10 = (llvm::RegisterClassInfo *)result[339];
    if (!*(_DWORD *)(*((_QWORD *)v10 + 27) + 4 * v8))
    {
      v27 = result;
      v26 = v9;
      v24 = v4;
      v25 = a3;
      v19 = result[339];
      v22 = v5;
      v23 = v6;
      v20 = llvm::RegisterClassInfo::computePSetLimit(v10, v8);
      v9 = v26;
      v5 = v22;
      v6 = v23;
      v4 = v24;
      a3 = v25;
      v21 = v20;
      result = v27;
      *(_DWORD *)(*(_QWORD *)(v19 + 216) + 4 * v8) = v21;
    }
    v4 += 2;
    v3 = v9;
  }
  while (v4 != v6);
  return result;
}

uint64_t sub_1C51A84BC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;

  v2 = (a2 >> 1) & 3;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
    v4 = v3 | (2 * (v2 - 1));
  else
    v4 = *(_QWORD *)v3 | 6;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD **)a1;
  if (!v5)
  {
    v5 = 0;
    goto LABEL_17;
  }
  v7 = v6[3 * v5 - 2];
  v8 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (v4 >> 1) & 3;
  if (v8 >= ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_17:
    v9 = &v6[3 * v5];
    goto LABEL_12;
  }
  v9 = *(_QWORD **)a1;
  v10 = *(unsigned int *)(a1 + 8);
  do
  {
    v11 = v10 >> 1;
    v12 = v9[3 * (v10 >> 1) + 1];
    LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
    v10 -= (v10 >> 1) + 1;
    v13 = v8 >= v12;
    if (v8 >= v12)
      v14 = v11 + 1;
    else
      v14 = 0;
    v9 += 3 * v14;
    if (!v13)
      v10 = v11;
  }
  while (v10);
LABEL_12:
  if (v9 == &v6[3 * v5]
    || ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (v4 >> 1) & 3))
  {
    return 0;
  }
  else
  {
    return v9[2];
  }
}

uint64_t sub_1C51A85BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_DWORD *)(result + 8);
  v5 = *(_QWORD **)result;
  if (!v4)
  {
    v4 = 0;
    goto LABEL_25;
  }
  v6 = v5[3 * v4 - 2];
  v7 = *(_DWORD *)(v3 + 24);
  if (v7 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_25:
    v8 = &v5[3 * v4];
    goto LABEL_10;
  }
  v8 = *(_QWORD **)result;
  v9 = *(unsigned int *)(result + 8);
  do
  {
    v10 = v9 >> 1;
    v11 = v8[3 * (v9 >> 1) + 1];
    LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    result = (v9 >> 1) + 1;
    v9 -= result;
    v12 = v7 >= v11;
    if (v7 >= v11)
      v13 = v10 + 1;
    else
      v13 = 0;
    v8 += 3 * v13;
    if (!v12)
      v9 = v10;
  }
  while (v9);
LABEL_10:
  v14 = &v5[3 * v4];
  if (v8 == v14)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v15 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
    v16 = *(_DWORD *)(v3 + 24);
    if (((*v8 >> 1) & 3 | v15) > v16)
    {
      v17 = 0;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v17 = v8[1];
      v18 = v8[2];
      v19 = v3 == (v17 & 0xFFFFFFFFFFFFFFF8);
      if (v3 == (v17 & 0xFFFFFFFFFFFFFFF8))
      {
        v8 += 3;
        if (v8 == v14)
        {
          *(_QWORD *)a3 = v18;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v17;
          *(_BYTE *)(a3 + 24) = 1;
          return result;
        }
        v15 = *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
      if (*(_QWORD *)(v18 + 8) == v3)
        v20 = 0;
      else
        v20 = v18;
    }
    if (v16 < v15)
    {
      v21 = 0;
    }
    else
    {
      v17 = v8[1];
      v21 = v8[2];
    }
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v21;
    *(_QWORD *)(a3 + 16) = v17;
    *(_BYTE *)(a3 + 24) = v19;
  }
  return result;
}

void llvm::ScheduleDAGMILive::schedule(llvm::ScheduleDAGMILive *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned int v12;
  uint64_t v13;
  llvm::SUnit *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  unsigned int v22;
  uint64_t v23;
  llvm::SUnit *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  void *v50;
  uint64_t v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x1E0C80C00];
  llvm::ScheduleDAGMILive::buildDAGWithRegPressure(this);
  v2 = (uint64_t *)*((_QWORD *)this + 332);
  v3 = (uint64_t *)*((_QWORD *)this + 333);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t, llvm::ScheduleDAGMILive *))(*(_QWORD *)v4 + 24))(v4, this);
  }
  v50 = v52;
  v51 = 0x800000000;
  v47 = v49;
  v48 = 0x800000000;
  v5 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  while (v5 != v6)
  {
    if (*(_DWORD *)(v5 + 200) >= 2u)
    {
      v7 = *(__int128 **)(v5 + 32);
      v8 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = v7;
      if ((*(_BYTE *)(v8 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8));
        v9 = *(__int128 **)(v5 + 32);
      }
      v10 = &v9[*(unsigned int *)(v5 + 40)];
      v11 = v7 + 1;
      if (v7 + 1 != v10)
      {
        v12 = *(_DWORD *)(v8 + 240);
        do
        {
          v13 = *(_QWORD *)v11;
          if ((*(_QWORD *)v11 & 6) == 0)
          {
            v14 = (llvm::SUnit *)(v13 & 0xFFFFFFFFFFFFFFF8);
            if ((*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(v14);
            if (*((_DWORD *)v14 + 60) > v12)
              v7 = v11;
          }
          ++v11;
        }
        while (v11 != v10);
        v9 = *(__int128 **)(v5 + 32);
      }
      if (v7 != v9)
      {
        v46 = *v9;
        *v9 = *v7;
        *v7 = v46;
      }
    }
    if (!*(_DWORD *)(v5 + 208))
    {
      v15 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
        v15 = v51;
      }
      *((_QWORD *)v50 + v15) = v5;
      LODWORD(v51) = v51 + 1;
    }
    if (!*(_DWORD *)(v5 + 212))
    {
      v16 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 8);
        v16 = v48;
      }
      *((_QWORD *)v47 + v16) = v5;
      LODWORD(v48) = v48 + 1;
    }
    v5 += 272;
  }
  if (*((_DWORD *)this + 136) >= 2u)
  {
    v17 = (__int128 *)*((_QWORD *)this + 47);
    v18 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
    v19 = v17;
    if ((*(_BYTE *)(v18 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8));
      v19 = (__int128 *)*((_QWORD *)this + 47);
    }
    v20 = &v19[*((unsigned int *)this + 96)];
    v21 = v17 + 1;
    if (v17 + 1 != v20)
    {
      v22 = *(_DWORD *)(v18 + 240);
      do
      {
        v23 = *(_QWORD *)v21;
        if ((*(_QWORD *)v21 & 6) == 0)
        {
          v24 = (llvm::SUnit *)(v23 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(v24);
          if (*((_DWORD *)v24 + 60) > v22)
            v17 = v21;
        }
        ++v21;
      }
      while (v21 != v20);
      v19 = (__int128 *)*((_QWORD *)this + 47);
    }
    if (v17 != v19)
    {
      v46 = *v19;
      *v19 = *v17;
      *v17 = v46;
    }
  }
  (*(void (**)(_QWORD, llvm::ScheduleDAGMILive *))(**((_QWORD **)this + 331) + 64))(*((_QWORD *)this + 331), this);
  llvm::ScheduleDAGMI::initQueues((uint64_t)this, (uint64_t *)v50, v51, (uint64_t)v47, v48);
  if (*((_BYTE *)this + 3120))
    *((_QWORD *)this + 528) = *((_QWORD *)this + 335);
  LOBYTE(v46) = 0;
  v25 = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 331) + 96))(*((_QWORD *)this + 331), &v46);
  if (v25)
  {
    v26 = v25;
    do
    {
      llvm::ScheduleDAGMILive::scheduleMI((uint64_t)this, v26, v46);
      v27 = (_QWORD *)*((_QWORD *)this + 340);
      if (v27)
      {
        v28 = v27[1];
        v29 = v28 == v27[2] ? 0 : *(_DWORD *)(v28 + 8 * *(unsigned int *)(v26 + 192) + 4);
        v30 = v29 >> 6;
        v31 = *((_QWORD *)this + 341);
        v32 = *(_QWORD *)(v31 + 8 * v30);
        if (((1 << v29) & v32) == 0)
        {
          *(_QWORD *)(v31 + 8 * v30) = (1 << v29) | v32;
          v33 = v27[22] + 48 * v29;
          v34 = *(unsigned int *)(v33 + 8);
          if ((_DWORD)v34)
          {
            v35 = *(unsigned int **)v33;
            v36 = &v35[2 * v34];
            v37 = v27[25];
            do
            {
              v38 = *v35;
              v39 = v35[1];
              v35 += 2;
              if (*(_DWORD *)(v37 + 4 * v38) > v39)
                v39 = *(_DWORD *)(v37 + 4 * v38);
              *(_DWORD *)(v37 + 4 * v38) = v39;
            }
            while (v35 != v36);
          }
          (*(void (**)(_QWORD))(**((_QWORD **)this + 331) + 104))(*((_QWORD *)this + 331));
        }
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 331) + 112))(*((_QWORD *)this + 331), v26, v46);
      if ((_BYTE)v46)
      {
        v43 = *(unsigned int *)(v26 + 120);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v26 + 112);
          v45 = 16 * v43;
          do
          {
            llvm::ScheduleDAGMI::releaseSucc((uint64_t)this, v26, v44);
            v44 += 16;
            v45 -= 16;
          }
          while (v45);
        }
      }
      else
      {
        v40 = *(unsigned int *)(v26 + 40);
        if ((_DWORD)v40)
        {
          v41 = *(_QWORD *)(v26 + 32);
          v42 = 16 * v40;
          do
          {
            llvm::ScheduleDAGMI::releasePred((uint64_t)this, v26, v41);
            v41 += 16;
            v42 -= 16;
          }
          while (v42);
        }
      }
      *(_WORD *)(v26 + 228) |= 0x400u;
      v26 = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 331) + 96))(*((_QWORD *)this + 331), &v46);
    }
    while (v26);
  }
  llvm::ScheduleDAGMI::placeDebugValues((unint64_t *)this);
  if (v47 != v49)
    free(v47);
  if (v50 != v52)
    free(v50);
}

void llvm::ScheduleDAGMILive::buildDAGWithRegPressure(llvm::ScheduleDAGMILive *this)
{
  llvm::RegPressureTracker *v2;

  v2 = (llvm::ScheduleDAGMILive *)((char *)this + 3456);
  if (*((_BYTE *)this + 3120))
  {
    llvm::RegPressureTracker::init((uint64_t)this + 3456, *((_QWORD *)this + 4), *((_QWORD *)this + 339), *((_QWORD *)this + 330), *((_QWORD *)this + 115), *((_QWORD *)this + 350), *((_BYTE *)this + 3121), 1);
    if (*((_QWORD *)this + 350) != *((_QWORD *)this + 117))
      llvm::RegPressureTracker::recede((uint64_t)v2, 0);
    llvm::ScheduleDAGInstrs::buildSchedGraph(this, *((llvm::AAResults **)this + 329), v2, (llvm::ScheduleDAGMILive *)((char *)this + 3104), *((llvm::LiveIntervals **)this + 330), *((unsigned __int8 *)this + 3121));
    llvm::ScheduleDAGMILive::initRegPressure(this);
  }
  else
  {
    llvm::RegPressureTracker::reset((uint64_t)this + 3456);
    *((_QWORD *)this + 477) = *((_QWORD *)this + 476);
    llvm::ScheduleDAGInstrs::buildSchedGraph(this, *((llvm::AAResults **)this + 329), 0, 0, 0, 0);
  }
}

uint64_t llvm::ScheduleDAGMILive::initQueues(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = llvm::ScheduleDAGMI::initQueues(a1, a2, a3, a4, a5);
  if (*(_BYTE *)(a1 + 3120))
    *(_QWORD *)(a1 + 4224) = *(_QWORD *)(a1 + 2680);
  return result;
}

void llvm::ScheduleDAGMILive::scheduleMI(uint64_t a1, uint64_t a2, int a3)
{
  const llvm::MachineInstr *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::LiveIntervals *v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  const llvm::MachineInstr *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _WORD *v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  llvm::RegisterClassInfo *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  int v40;
  BOOL v41;
  const llvm::MachineInstr *v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  const llvm::MachineInstr *v47;
  int v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _WORD *v57;
  _WORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  void *v65;
  uint64_t v66;
  _BYTE v67[128];
  void *v68;
  uint64_t v69;
  _BYTE v70[128];
  void *v71;
  uint64_t v72;
  _QWORD v73[17];

  v73[16] = *MEMORY[0x1E0C80C00];
  v5 = *(const llvm::MachineInstr **)(a2 + 8);
  if (a3)
  {
    v49 = *(unint64_t **)(a1 + 2680);
    if (v49 == (unint64_t *)v5)
    {
      if (!v5 || (v52 = *(_QWORD *)(a2 + 8), (*(_BYTE *)v5 & 4) == 0))
      {
        v52 = *(_QWORD *)(a2 + 8);
        if ((*((_WORD *)v5 + 22) & 8) != 0)
        {
          v52 = *(_QWORD *)(a2 + 8);
          do
            v52 = *(_QWORD *)(v52 + 8);
          while ((*(_WORD *)(v52 + 44) & 8) != 0);
        }
      }
      v53 = *(_QWORD *)(v52 + 8);
      *(_QWORD *)(a1 + 2680) = v53;
      v54 = *(_QWORD *)(a1 + 2688);
      if (v53 != v54)
      {
        while (1)
        {
          v55 = **(unsigned __int16 **)(v53 + 16);
          if ((v55 - 13) >= 5 && v55 != 23)
            break;
          if ((*(_BYTE *)v53 & 4) == 0)
          {
            while ((*(_WORD *)(v53 + 44) & 8) != 0)
              v53 = *(_QWORD *)(v53 + 8);
          }
          v53 = *(_QWORD *)(v53 + 8);
          if (v53 == v54)
          {
            v53 = *(_QWORD *)(a1 + 2688);
            break;
          }
        }
      }
      *(_QWORD *)(a1 + 2680) = v53;
    }
    else
    {
      llvm::ScheduleDAGMI::moveInstruction(a1, *(_QWORD *)(a2 + 8), v49);
      *(_QWORD *)(a1 + 4224) = v5;
    }
    if (*(_BYTE *)(a1 + 3120))
    {
      v65 = v67;
      v66 = 0x800000000;
      v68 = v70;
      v69 = 0x800000000;
      v71 = v73;
      v72 = 0x800000000;
      llvm::RegisterOperands::collect(&v65, v5, *(const llvm::TargetRegisterInfo **)(a1 + 24), *(const llvm::MachineRegisterInfo **)(a1 + 40), *(unsigned __int8 *)(a1 + 3121), 0);
      v50 = *(uint64_t **)(a1 + 2640);
      if (*(_BYTE *)(a1 + 3121))
      {
        v51 = sub_1C4A07EAC(v50[36], (unint64_t)v5, 0);
        llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v65, *(_QWORD *)(a1 + 2640), *(_QWORD *)(a1 + 40), v51 & 0xFFFFFFFFFFFFFFF8 | 4, (uint64_t)v5);
      }
      else
      {
        llvm::RegisterOperands::detectDeadDefs((uint64_t)&v65, v5, (const llvm::LiveIntervals *)v50);
      }
      llvm::RegPressureTracker::advance((llvm::RegPressureTracker *)(a1 + 4160), (unsigned int **)&v65);
      llvm::ScheduleDAGMILive::updateScheduledPressure((_QWORD *)a1, a2, *(_QWORD **)(a1 + 4208));
      sub_1C51AE6C8((uint64_t)&v65);
    }
  }
  else
  {
    v6 = *(unint64_t **)(a1 + 2688);
    v7 = *(_QWORD *)(a1 + 2680);
    v8 = sub_1C51A7290((unint64_t)v6, v7);
    if (v5 == (const llvm::MachineInstr *)v8)
    {
      *(_QWORD *)(a1 + 2688) = v8;
    }
    else
    {
      if ((const llvm::MachineInstr *)v7 == v5)
      {
        if (!v5 || (v42 = v5, (*(_BYTE *)v5 & 4) == 0))
        {
          v42 = v5;
          if ((*((_WORD *)v5 + 22) & 8) != 0)
          {
            v42 = v5;
            do
              v42 = (const llvm::MachineInstr *)*((_QWORD *)v42 + 1);
            while ((*((_WORD *)v42 + 22) & 8) != 0);
          }
        }
        v43 = *((_QWORD *)v42 + 1);
        *(_QWORD *)(a1 + 2680) = v43;
        if (v43 != v8)
        {
          while (1)
          {
            v44 = **(unsigned __int16 **)(v43 + 16);
            v41 = v44 > 0x17;
            v45 = (1 << v44) & 0x83E000;
            if (v41 || v45 == 0)
              break;
            if ((*(_BYTE *)v43 & 4) == 0)
            {
              while ((*(_WORD *)(v43 + 44) & 8) != 0)
                v43 = *(_QWORD *)(v43 + 8);
            }
            v43 = *(_QWORD *)(v43 + 8);
            if (v43 == v8)
              goto LABEL_66;
          }
          v8 = v43;
        }
LABEL_66:
        *(_QWORD *)(a1 + 2680) = v8;
        *(_QWORD *)(a1 + 4224) = v8;
      }
      if (*(const llvm::MachineInstr **)(a1 + 928) == v5)
      {
        if (!v5 || (v47 = v5, (*(_BYTE *)v5 & 4) == 0))
        {
          v47 = v5;
          if ((*((_WORD *)v5 + 22) & 8) != 0)
          {
            v47 = v5;
            do
              v47 = (const llvm::MachineInstr *)*((_QWORD *)v47 + 1);
            while ((*((_WORD *)v47 + 22) & 8) != 0);
          }
        }
        *(_QWORD *)(a1 + 928) = *((_QWORD *)v47 + 1);
      }
      sub_1C48532D0(*(unint64_t **)(a1 + 920), v6, *(unint64_t **)(a1 + 920), (unint64_t *)v5);
      v9 = *(llvm::LiveIntervals **)(a1 + 2640);
      if (v9)
        llvm::LiveIntervals::handleMove(v9, v5, 1);
      if (*(unint64_t **)(a1 + 928) == v6)
        *(_QWORD *)(a1 + 928) = v5;
      *(_QWORD *)(a1 + 2688) = v5;
      *(_QWORD *)(a1 + 4904) = v5;
    }
    if (*(_BYTE *)(a1 + 3120))
    {
      v65 = v67;
      v66 = 0x800000000;
      v68 = v70;
      v69 = 0x800000000;
      v71 = v73;
      v72 = 0x800000000;
      llvm::RegisterOperands::collect(&v65, v5, *(const llvm::TargetRegisterInfo **)(a1 + 24), *(const llvm::MachineRegisterInfo **)(a1 + 40), *(unsigned __int8 *)(a1 + 3121), 0);
      if (!*(_BYTE *)(a1 + 3121))
      {
        llvm::RegisterOperands::detectDeadDefs((uint64_t)&v65, v5, *(const llvm::LiveIntervals **)(a1 + 2640));
LABEL_22:
        if (*(_QWORD *)(a1 + 4904) != *(_QWORD *)(a1 + 2688))
          llvm::RegPressureTracker::recedeSkipDebugValues((unsigned int *)(a1 + 4840));
        v62 = v64;
        v63 = 0x800000000;
        llvm::RegPressureTracker::recede(a1 + 4840, (unsigned int **)&v65, (uint64_t)&v62);
        v23 = 0;
        v24 = *(_QWORD **)(a1 + 4888);
        v25 = (_WORD *)(*(_QWORD *)(a1 + 3104) + ((unint64_t)*(unsigned int *)(a2 + 192) << 6));
        v26 = (*(_QWORD *)(a1 + 3816) - *(_QWORD *)(a1 + 3808)) >> 2;
        v27 = v25 + 32;
        do
        {
          v28 = (unsigned __int16)*v25;
          if (!*v25)
            break;
          v29 = (v28 - 1);
          v30 = v26;
          if ((_DWORD)v23 != (_DWORD)v26)
          {
            v34 = *(_QWORD *)(a1 + 3808);
            while (1)
            {
              v35 = *(unsigned __int16 *)(v34 + 4 * v23);
              if (v35 - 1 >= v29)
                break;
              v23 = (v23 + 1);
              if ((_DWORD)v26 == (_DWORD)v23)
              {
                v30 = v26;
                goto LABEL_27;
              }
            }
            if (v35 == v28)
            {
              v36 = *(_DWORD *)(*v24 + 4 * v29);
              v37 = v34 + 4 * v23;
              v40 = *(__int16 *)(v37 + 2);
              v38 = (_WORD *)(v37 + 2);
              v39 = v40;
              v41 = v36 >> 15 || (int)v36 <= v39;
              if (!v41)
                *v38 = v36;
            }
            v30 = v23;
          }
LABEL_27:
          v31 = *(llvm::RegisterClassInfo **)(a1 + 2712);
          if (!*(_DWORD *)(*((_QWORD *)v31 + 27) + 4 * v29))
          {
            v61 = v30;
            v59 = v26;
            v60 = v24;
            v57 = v27;
            v58 = v25;
            v48 = llvm::RegisterClassInfo::computePSetLimit(v31, v29);
            v27 = v57;
            v25 = v58;
            v26 = v59;
            v24 = v60;
            *(_DWORD *)(*((_QWORD *)v31 + 27) + 4 * v29) = v48;
            v30 = v61;
          }
          v25 += 2;
          v23 = v30;
        }
        while (v25 != v27);
        llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)a1, (unsigned int *)v62, v63);
        if (v62 != v64)
          free(v62);
        if (v71 != v73)
          free(v71);
        if (v68 != v70)
          free(v68);
        if (v65 != v67)
          free(v65);
        return;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 2640) + 288);
      v11 = *((_WORD *)v5 + 22);
      v12 = (unint64_t)v5;
      v13 = v5;
      if ((v11 & 0xC) != 0)
      {
        v12 = (unint64_t)v5;
        if ((v11 & 4) != 0)
        {
          v12 = (unint64_t)v5;
          do
            v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v12 + 44) & 4) != 0);
        }
        v13 = v5;
        if ((v11 & 8) != 0)
        {
          do
            v13 = (const llvm::MachineInstr *)*((_QWORD *)v13 + 1);
          while ((*((_WORD *)v13 + 22) & 8) != 0);
        }
      }
      v14 = *((_QWORD *)v13 + 1);
      if (v12 != v14)
      {
        while (1)
        {
          v15 = **(unsigned __int16 **)(v12 + 16);
          v41 = v15 > 0x17;
          v16 = (1 << v15) & 0x83E000;
          if (v41 || v16 == 0)
            break;
          v12 = *(_QWORD *)(v12 + 8);
          if (v12 == v14)
          {
            v12 = *((_QWORD *)v13 + 1);
            break;
          }
        }
      }
      v18 = *(_QWORD *)(v10 + 368);
      v19 = *(unsigned int *)(v10 + 384);
      if ((_DWORD)v19)
      {
        LODWORD(v20) = ((v12 >> 4) ^ (v12 >> 9)) & (v19 - 1);
        v21 = (uint64_t *)(v18 + 16 * v20);
        v22 = *v21;
        if (v12 == *v21)
        {
LABEL_21:
          llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v65, *(_QWORD *)(a1 + 2640), *(_QWORD *)(a1 + 40), v21[1] & 0xFFFFFFFFFFFFFFF8 | 4, (uint64_t)v5);
          goto LABEL_22;
        }
        v32 = 1;
        while (v22 != -4096)
        {
          v33 = v20 + v32++;
          v20 = v33 & (v19 - 1);
          v22 = *(_QWORD *)(v18 + 16 * v20);
          if (v12 == v22)
          {
            v21 = (uint64_t *)(v18 + 16 * v20);
            goto LABEL_21;
          }
        }
      }
      v21 = (uint64_t *)(v18 + 16 * v19);
      goto LABEL_21;
    }
  }
}

void llvm::ScheduleDAGMILive::computeDFSResult(llvm::ScheduleDAGMILive *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v2 = *((_QWORD *)this + 340);
  if (v2)
  {
    v3 = *(char **)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 176);
  }
  else
  {
    v2 = operator new();
    v4 = 0;
    v3 = 0;
    *(_BYTE *)v2 = 1;
    *(_DWORD *)(v2 + 4) = 8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = v2 + 48;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 40) = 0x1000000000;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *((_QWORD *)this + 340) = v2;
  }
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 40) = 0;
  v5 = *(_QWORD *)(v2 + 184);
  v6 = (_QWORD *)v2;
  if (v5 != v4)
  {
    do
    {
      v8 = *(void **)(v5 - 48);
      v5 -= 48;
      v7 = v8;
      if ((void *)(v5 + 16) != v8)
        free(v7);
    }
    while (v5 != v4);
    v6 = (_QWORD *)*((_QWORD *)this + 340);
    v3 = (char *)v6[2];
  }
  *(_QWORD *)(v2 + 184) = v4;
  *(_QWORD *)(v2 + 208) = *(_QWORD *)(v2 + 200);
  *((_DWORD *)this + 698) = 0;
  *((_DWORD *)this + 684) = 0;
  v9 = *((_QWORD *)this + 6);
  v10 = 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 7) - v9) >> 4);
  v11 = -252645135 * ((*((_QWORD *)this + 7) - v9) >> 4);
  v12 = (_BYTE *)v6[1];
  v13 = (v3 - v12) >> 3;
  if (v11 <= v13)
  {
    if (v11 < v13)
      v6[2] = &v12[8 * v11];
  }
  else
  {
    v14 = v11 - v13;
    v15 = v6[3];
    if (v11 - v13 <= (v15 - (uint64_t)v3) >> 3)
    {
      memset_pattern16(v3, &unk_1C85FB4F0, 8 * v14);
      v6[2] = &v3[8 * v14];
    }
    else
    {
      v16 = v15 - (_QWORD)v12;
      v17 = v16 >> 2;
      if (v16 >> 2 <= v11)
        v17 = -252645135 * ((*((_QWORD *)this + 7) - v9) >> 4);
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18 >> 61)
        sub_1C4764EE4();
      v19 = (char *)operator new(8 * v18);
      v20 = &v19[8 * v13];
      memset_pattern16(v20, &unk_1C85FB4F0, 8 * v14);
      if (v3 != v12)
      {
        do
        {
          v21 = *((_QWORD *)v3 - 1);
          v3 -= 8;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        while (v3 != v12);
        v3 = (char *)v6[1];
      }
      v6[1] = v20;
      v6[2] = &v19[8 * v11];
      v6[3] = &v19[8 * v18];
      if (v3)
        operator delete(v3);
    }
    v6 = (_QWORD *)*((_QWORD *)this + 340);
    v9 = *((_QWORD *)this + 6);
    v10 = 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 7) - v9) >> 4);
  }
  llvm::SchedDFSResult::compute((uint64_t)v6, v9, v10);
  v22 = (*(_QWORD *)(*((_QWORD *)this + 340) + 208) - *(_QWORD *)(*((_QWORD *)this + 340) + 200)) >> 2;
  v23 = *((unsigned int *)this + 684);
  if ((*((_DWORD *)this + 698) & 0x3F) != 0)
  {
    v30 = *((_QWORD *)this + 341) + 8 * v23;
    *(_QWORD *)(v30 - 8) &= ~(-1 << (*((_DWORD *)this + 698) & 0x3F));
  }
  v24 = v23;
  v25 = (_QWORD *)((char *)this + 2728);
  *((_DWORD *)this + 698) = v22;
  v26 = v22 + 63;
  if ((_DWORD)v23 != (v22 + 63) >> 6)
  {
    v27 = v26 >> 6;
    if (v23 > v27)
    {
      *((_DWORD *)this + 684) = v27;
      v24 = v26 >> 6;
    }
    else
    {
      v28 = v23;
      if (v27 > *((_DWORD *)this + 685))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 2728, (uint64_t)this + 2744, v27, 8);
        v28 = *((unsigned int *)this + 684);
        v24 = *((_DWORD *)this + 684);
      }
      if (v27 != v23)
        bzero((void *)(*v25 + 8 * v28), 8 * (v27 - v23));
      v24 += v27 - v23;
      *((_DWORD *)this + 684) = v24;
      LODWORD(v22) = *((_DWORD *)this + 698);
    }
  }
  v29 = v22 & 0x3F;
  if (v29)
    *(_QWORD *)(*v25 + 8 * v24 - 8) &= ~(-1 << v29);
}

uint64_t llvm::ScheduleDAGMILive::computeCyclicCriticalPath(llvm::ScheduleDAGMILive *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;
  char *v10;
  int v11;
  uint64_t v12;
  llvm::LiveInterval *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  BOOL v72;
  char v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v84;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;

  v2 = *((_QWORD *)this + 115);
  v3 = *(_QWORD **)(v2 + 88);
  v4 = *(_QWORD **)(v2 + 96);
  if (v3 != v4)
  {
    while (*v3 != v2)
    {
      if (++v3 == v4)
      {
        v3 = *(_QWORD **)(v2 + 96);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    v5 = *((_QWORD *)this + 438);
    v6 = *(unsigned int *)(v5 + 176);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(int **)(v5 + 168);
      v9 = &v8[4 * v6];
      v89 = (uint64_t *)((char *)this + 952);
      v10 = (char *)this + 344;
      while (1)
      {
        v11 = *v8;
        if ((*v8 & 0x80000000) == 0)
          goto LABEL_27;
        v12 = *((_QWORD *)this + 330);
        if ((v11 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v12 + 416)
          || (v13 = *(llvm::LiveInterval **)(*(_QWORD *)(v12 + 408) + 8 * (v11 & 0x7FFFFFFF))) == 0)
        {
          v13 = (llvm::LiveInterval *)sub_1C4851220(*((_QWORD *)this + 330), *v8);
          v79 = *(_QWORD *)(v12 + 304);
          v80 = *(_QWORD *)(v12 + 248);
          *(_QWORD *)v79 = v80;
          *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 40);
          *(_OWORD *)(v79 + 16) = *(_OWORD *)(v12 + 288);
          *(_QWORD *)(v79 + 32) = v12 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v79);
          *(_DWORD *)(v79 + 184) = 0;
          v81 = *(_QWORD *)(v12 + 256);
          v47 = *(_BYTE *)(v81 + 16) == 0;
          v82 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v81 + 24) + 16 * (*((_DWORD *)v13 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v84 = !v47 && v82 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v12 + 304), v13, v84);
          llvm::LiveIntervals::computeDeadValues(v12, (uint64_t)v13, 0);
          v12 = *((_QWORD *)this + 330);
        }
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 288) + 392)
                        + 16 * *(unsigned int *)(*((_QWORD *)this + 115) + 24)
                        + 8);
        v15 = (v14 >> 1) & 3;
        v16 = v14 & 0xFFFFFFFFFFFFFFF8;
        v17 = v15 ? v16 | (2 * (v15 - 1)) : *(_QWORD *)v16 | 6;
        v18 = *((_DWORD *)v13 + 2);
        v19 = *(_QWORD **)v13;
        if (!v18)
          break;
        v20 = v19[3 * v18 - 2];
        v21 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24) | (v17 >> 1) & 3;
        v22 = (v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        v23 = *(_QWORD **)v13;
        v24 = *((unsigned int *)v13 + 2);
        if (v21 >= v22)
          goto LABEL_23;
        do
        {
          v25 = v24 >> 1;
          v26 = v23[3 * (v24 >> 1) + 1];
          LODWORD(v26) = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
          v24 -= (v24 >> 1) + 1;
          v27 = v21 >= v26;
          if (v21 >= v26)
            v28 = v25 + 1;
          else
            v28 = 0;
          v23 += 3 * v28;
          if (!v27)
            v24 = v25;
        }
        while (v24);
LABEL_24:
        if (v23 != &v19[3 * v18]
          && ((*v23 >> 1) & 3 | *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24) | (v17 >> 1) & 3))
        {
          v29 = v23[2];
          if (v29)
          {
            v30 = *(_QWORD *)(v29 + 8);
            v31 = v30 < 8 ? 0 : *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 16);
            v90 = 0;
            v91 = v31;
            if ((sub_1C61252B8(v89, &v91, &v90) & 1) != 0)
            {
              v32 = *(_QWORD *)(v90 + 8);
              if (v32)
              {
                v33 = *(_BYTE *)(v32 + 236);
                if ((v33 & 2) == 0)
                {
                  llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(v90 + 8));
                  v33 = *(_BYTE *)(v32 + 236);
                }
                v87 = *(_DWORD *)(v32 + 244);
                if ((v33 & 1) == 0)
                  llvm::SUnit::ComputeDepth((llvm::SUnit *)v32);
                v34 = *(unsigned __int8 *)(*((_QWORD *)this + 385) + (v11 & 0x7FFFFFFF));
                v35 = *((_DWORD *)this + 704);
                if (v35 > v34)
                {
                  v88 = *(_DWORD *)(v32 + 240) + *(unsigned __int16 *)(v32 + 226);
                  v36 = *((_QWORD *)this + 351);
                  while (1)
                  {
                    if ((*(_DWORD *)(v36 + 32 * v34) & 0x7FFFFFFF) == (v11 & 0x7FFFFFFF))
                    {
                      v37 = *(unsigned int *)(v36 + 32 * v34 + 24);
                      if ((_DWORD)v37 != -1 && *(_DWORD *)(v36 + 32 * v37 + 28) == -1)
                        break;
                    }
                    v34 += 256;
                    if (v34 >= v35)
                      goto LABEL_27;
                  }
                  v86 = v32;
                  while (2)
                  {
                    v38 = v34;
                    v39 = *(_QWORD *)(v36 + 32 * v34 + 16);
                    if ((char *)v39 == v10)
                      goto LABEL_100;
                    v40 = *(_QWORD *)(v39 + 8);
                    v41 = *(_WORD *)(v40 + 44);
                    v42 = v40;
                    if ((v41 & 4) != 0)
                    {
                      do
                        v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v42 + 44) & 4) != 0);
                    }
                    if ((v41 & 8) != 0)
                    {
                      do
                        v40 = *(_QWORD *)(v40 + 8);
                      while ((*(_WORD *)(v40 + 44) & 8) != 0);
                    }
                    v43 = *(_QWORD *)(v40 + 8);
                    if (v42 != v43)
                    {
                      while (1)
                      {
                        v44 = **(unsigned __int16 **)(v42 + 16);
                        v45 = v44 > 0x17;
                        v46 = (1 << v44) & 0x83E000;
                        v47 = v45 || v46 == 0;
                        if (v47)
                          break;
                        v42 = *(_QWORD *)(v42 + 8);
                        if (v42 == v43)
                        {
                          v42 = v43;
                          break;
                        }
                      }
                    }
                    v48 = *(_QWORD *)(*((_QWORD *)this + 330) + 288);
                    v49 = *(_QWORD *)(v48 + 368);
                    v50 = *(unsigned int *)(v48 + 384);
                    if ((_DWORD)v50)
                    {
                      LODWORD(v51) = ((v42 >> 4) ^ (v42 >> 9)) & (v50 - 1);
                      v52 = (uint64_t *)(v49 + 16 * v51);
                      v53 = *v52;
                      if (v42 != *v52)
                      {
                        v54 = 1;
                        while (v53 != -4096)
                        {
                          v55 = v51 + v54++;
                          v51 = v55 & (v50 - 1);
                          v53 = *(_QWORD *)(v49 + 16 * v51);
                          if (v42 == v53)
                          {
                            v52 = (uint64_t *)(v49 + 16 * v51);
                            goto LABEL_64;
                          }
                        }
                        goto LABEL_63;
                      }
                    }
                    else
                    {
LABEL_63:
                      v52 = (uint64_t *)(v49 + 16 * v50);
                    }
LABEL_64:
                    v56 = v52[1] & 0xFFFFFFFFFFFFFFF8;
                    v57 = *((_DWORD *)v13 + 2);
                    v58 = *(_QWORD **)v13;
                    if (v57)
                    {
                      v59 = v58[3 * v57 - 2];
                      v60 = *(_DWORD *)(v56 + 24);
                      v61 = (v59 >> 1) & 3 | *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v62 = *(_QWORD **)v13;
                      v63 = *((unsigned int *)v13 + 2);
                      if (v60 < v61)
                      {
                        do
                        {
                          v64 = v63 >> 1;
                          v65 = v62[3 * (v63 >> 1) + 1];
                          LODWORD(v65) = (v65 >> 1) & 3 | *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v63 -= (v63 >> 1) + 1;
                          v66 = v60 >= v65;
                          if (v60 >= v65)
                            v67 = v64 + 1;
                          else
                            v67 = 0;
                          v62 += 3 * v67;
                          if (!v66)
                            v63 = v64;
                        }
                        while (v63);
LABEL_75:
                        v68 = &v58[3 * v57];
                        v69 = v62[2];
                        v70 = v62[1] & 0xFFFFFFFFFFFFFFF8;
                        v71 = v62 + 3;
                        v72 = v56 == v70 && v71 == v68;
                        if (!v72 && *(_QWORD *)(v69 + 8) == v56)
                          v69 = 0;
                        if ((*(_BYTE *)(v69 + 8) & 6) == 0)
                        {
                          v73 = *(_BYTE *)(v39 + 236);
                          if ((v73 & 1) == 0)
                          {
                            llvm::SUnit::ComputeDepth((llvm::SUnit *)v39);
                            v73 = *(_BYTE *)(v39 + 236);
                          }
                          v74 = *(_DWORD *)(v39 + 240);
                          if (v88 <= v74)
                          {
                            v75 = 0;
                            if ((v73 & 2) != 0)
                              goto LABEL_91;
                          }
                          else
                          {
                            if ((v73 & 1) == 0)
                            {
                              llvm::SUnit::ComputeDepth((llvm::SUnit *)v39);
                              v74 = *(_DWORD *)(v39 + 240);
                              v73 = *(_BYTE *)(v39 + 236);
                            }
                            v75 = v88 - v74;
                            if ((v73 & 2) != 0)
                            {
LABEL_91:
                              v76 = *(_DWORD *)(v39 + 244) + *(unsigned __int16 *)(v86 + 226);
                              v77 = v76 - v87;
                              if (v76 - v87 >= v75)
                                v77 = v75;
                              if (v76 <= v87)
                                v78 = 0;
                              else
                                v78 = v77;
                              if (v78 <= v7)
                                v7 = v7;
                              else
                                v7 = v78;
                              v36 = *((_QWORD *)this + 351);
                              goto LABEL_100;
                            }
                          }
                          llvm::SUnit::ComputeHeight((llvm::SUnit *)v39);
                          goto LABEL_91;
                        }
LABEL_100:
                        v34 = *(_DWORD *)(v36 + 32 * v38 + 28);
                        if (v34 == -1)
                          goto LABEL_27;
                        continue;
                      }
                    }
                    else
                    {
                      v57 = 0;
                    }
                    break;
                  }
                  v62 = &v58[3 * v57];
                  goto LABEL_75;
                }
              }
            }
          }
        }
LABEL_27:
        v8 += 4;
        if (v8 == v9)
          return v7;
      }
      v18 = 0;
LABEL_23:
      v23 = &v19[3 * v18];
      goto LABEL_24;
    }
  }
  return 0;
}

uint64_t llvm::createLoadClusterDAGMutation@<X0>(llvm *this@<X0>, const llvm::TargetInstrInfo *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  if (byte_1ED7FBF30)
  {
    result = operator new();
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = a2;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)result = &off_1E8146608;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t llvm::createStoreClusterDAGMutation@<X0>(llvm *this@<X0>, const llvm::TargetInstrInfo *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  if (byte_1ED7FBF30)
  {
    result = operator new();
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = a2;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = &off_1E8146638;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

_QWORD *llvm::createCopyConstrainDAGMutation@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E8146668;
  *a1 = result;
  return result;
}

void llvm::SchedBoundary::~SchedBoundary(llvm::SchedBoundary *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C51AEE10((char **)this + 54);
  v3 = (char *)*((_QWORD *)this + 44);
  if (v3 != (char *)this + 368)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 34);
  if (v4 != (char *)this + 288)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 22);
  if (v5 != (char *)this + 192)
    free(v5);
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void llvm::SchedBoundary::reset(llvm::SchedBoundary *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_DWORD *)*((_QWORD *)this + 17);
  if (v2 && v2[2])
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  *((_BYTE *)this + 144) = 0;
  *(_OWORD *)((char *)this + 148) = xmmword_1C6429E90;
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 264) = 0;
  v3 = *((unsigned int *)this + 110);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 54);
    v5 = 16 * v3;
    do
    {
      if (*(_DWORD *)(v4 + v5 - 8) >= 0x41u)
      {
        v8 = *(_QWORD *)(v4 + v5 - 16);
        if (v8)
        {
          v9 = v5;
          MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
          v5 = v9;
        }
      }
      v5 -= 16;
    }
    while (v5);
  }
  *((_DWORD *)this + 110) = 0;
  v6 = *((_DWORD *)this + 46);
  if (v6)
  {
    if (v6 == 1)
      return;
    goto LABEL_14;
  }
  if (*((_DWORD *)this + 47))
  {
    v7 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 176, (uint64_t)this + 192, 1uLL, 4);
    v7 = *((_DWORD *)this + 46);
    if (v7 == 1)
      goto LABEL_14;
  }
  bzero((void *)(*((_QWORD *)this + 22) + 4 * v7), 4 - 4 * v7);
LABEL_14:
  *((_DWORD *)this + 46) = 1;
}

void llvm::SchedRemainder::init(llvm::SchedRemainder *this, llvm::ScheduleDAGMI *a2, const llvm::TargetSchedModel *a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *(_QWORD *)((char *)this + 5) = 0;
  if (byte_1ED8303C8 && *((_QWORD *)a3 + 5))
  {
    v6 = (uint64_t *)((char *)this + 16);
    v7 = *((unsigned int *)a3 + 12);
    if ((_DWORD)v7)
    {
      if (*((_DWORD *)this + 7) < v7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 16, (uint64_t)this + 32, *((unsigned int *)a3 + 12), 4);
        v8 = *((_DWORD *)this + 6);
      }
      else
      {
        v8 = 0;
      }
      if (v8 != (_DWORD)v7)
        bzero((void *)(*v6 + 4 * v8), 4 * (v7 - v8));
      *((_DWORD *)this + 6) = v7;
    }
    v9 = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    while (v9 != v10)
    {
      v11 = *(_QWORD *)(v9 + 24);
      if (!v11)
      {
        if (byte_1ED8303C8 && *((_QWORD *)a2 + 84))
        {
          v11 = llvm::TargetSchedModel::resolveSchedClass((llvm::ScheduleDAGMI *)((char *)a2 + 632), *(const llvm::MachineInstr **)(v9 + 8));
          *(_QWORD *)(v9 + 24) = v11;
        }
        else
        {
          v11 = 0;
        }
      }
      *((_DWORD *)this + 2) += *((_DWORD *)a3 + 68)
                             * llvm::TargetSchedModel::getNumMicroOps((uint64_t)a3, *(_QWORD *)(v9 + 8), v11);
      if (*(_WORD *)(v11 + 12))
      {
        v12 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a3 + 22) + 136) + 4 * *(unsigned __int16 *)(v11 + 10));
        v13 = &v12[2 * *(unsigned __int16 *)(v11 + 12)];
        v14 = *((_QWORD *)a3 + 24);
        v15 = *v6;
        do
        {
          *(_DWORD *)(v15 + 4 * *v12) += *(_DWORD *)(v14 + 4 * *v12) * v12[1];
          v12 += 2;
        }
        while (v12 != v13);
      }
      v9 += 272;
    }
  }
}

void llvm::SchedBoundary::init(llvm::SchedBoundary *this, llvm::ScheduleDAGMI *a2, const llvm::TargetSchedModel *a3, llvm::SchedRemainder *a4)
{
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  llvm::SchedBoundary::reset(this);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  if (byte_1ED8303C8 && *((_QWORD *)a3 + 5))
  {
    v8 = *((unsigned int *)a3 + 12);
    v9 = *((_DWORD *)this + 90);
    if (v9 != (_DWORD)v8)
    {
      if (v9 <= v8)
      {
        if (*((_DWORD *)this + 91) < v8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 352, (uint64_t)this + 368, v8, 4);
          v9 = *((_DWORD *)this + 90);
        }
        if (v9 != (_DWORD)v8)
          bzero((void *)(*((_QWORD *)this + 44) + 4 * v9), 4 * (v8 - v9));
      }
      *((_DWORD *)this + 90) = v8;
    }
    v10 = *((_DWORD *)this + 46);
    if (v10 != (_DWORD)v8)
    {
      if (v10 <= v8)
      {
        if (*((_DWORD *)this + 47) < v8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 176, (uint64_t)this + 192, v8, 4);
          v10 = *((_DWORD *)this + 46);
        }
        if (v10 != (_DWORD)v8)
          bzero((void *)(*((_QWORD *)this + 22) + 4 * v10), 4 * (v8 - v10));
      }
      *((_DWORD *)this + 46) = v8;
    }
    v33 = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
    else
      v32 = 0;
    v11 = (_QWORD *)((char *)this + 432);
    v12 = *((unsigned int *)this + 110);
    if ((_DWORD)v12 != (_DWORD)v8)
    {
      if (v12 > v8)
      {
        v27 = *v11 + 16 * v12 - 8;
        v28 = 16 * v8 - 16 * v12;
        v29 = (unsigned int *)v27;
        do
        {
          v30 = *v29;
          v29 -= 4;
          if (v30 >= 0x41)
          {
            v31 = *(_QWORD *)(v27 - 8);
            if (v31)
              MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
          }
          v27 = (uint64_t)v29;
          v28 += 16;
        }
        while (v28);
        *((_DWORD *)this + 110) = v8;
      }
      else
      {
        sub_1C51B2E88((uint64_t)this + 432, v8 - v12, (unint64_t)&v32);
      }
    }
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
    if ((_DWORD)v8)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        *(_DWORD *)(*((_QWORD *)this + 44) + 4 * v13) = v14;
        v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 32) + 32 * v13;
        v16 = *(_DWORD *)(v15 + 8);
        v17 = *(unsigned int **)(v15 + 24);
        if (v17)
        {
          if (!*(_DWORD *)(v15 + 16) && v16 != 0)
          {
            v19 = *(unsigned int *)(v15 + 8);
            do
            {
              v20 = *v11 + 16 * v13;
              v22 = *v17++;
              v21 = v22;
              if (*(_DWORD *)(v20 + 8) >= 0x41u)
                v20 = *(_QWORD *)v20 + ((v21 >> 3) & 0x1FFFFFF8);
              *(_QWORD *)v20 |= 1 << v21;
              --v19;
            }
            while (v19);
          }
        }
        v14 += v16;
        ++v13;
      }
      while (v13 != v8);
    }
    else
    {
      v14 = 0;
    }
    v23 = *((unsigned int *)this + 70);
    if ((_DWORD)v23 != v14)
    {
      if (v23 <= v14)
      {
        v24 = v14;
        v25 = v14 - v23;
        v26 = *((unsigned int *)this + 70);
        if (v14 > *((_DWORD *)this + 71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 272, (uint64_t)this + 288, v14, 4);
          v26 = *((unsigned int *)this + 70);
        }
        memset((void *)(*((_QWORD *)this + 34) + 4 * v26), 255, 4 * (v24 - v23));
        v14 = v25 + *((_DWORD *)this + 70);
      }
      *((_DWORD *)this + 70) = v14;
    }
  }
}

uint64_t llvm::SchedBoundary::getLatencyStallCycles(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  if ((*(_WORD *)(a2 + 228) & 0x4000) == 0)
    return 0;
  v3 = 252;
  if (*(_DWORD *)(a1 + 24) == 1)
    v3 = 248;
  v4 = *(_DWORD *)(a2 + v3);
  v5 = *(_DWORD *)(a1 + 148);
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (v6)
    return v7;
  else
    return 0;
}

uint64_t llvm::SchedBoundary::getNextResourceCycleByInstance(llvm::SchedBoundary *this, unsigned int a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * a2);
  if (v3 == -1)
    return 0;
  if (*((_DWORD *)this + 6) == 1)
    v4 = 0;
  else
    v4 = a3;
  return (v4 + v3);
}

uint64_t llvm::SchedBoundary::getNextResourceCycle(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t NextResourceCycle;

  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 352) + 4 * a3);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 32) + 32 * a3;
  v9 = *(unsigned int *)(v8 + 8);
  v10 = *(unsigned int **)(v8 + 24);
  if (!v10 || *(_DWORD *)(v8 + 16))
  {
    v11 = (v9 + v6);
    if (v6 < v11)
    {
      LODWORD(v12) = 0;
      LODWORD(v13) = -1;
      do
      {
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v6);
        if (v14 == -1)
        {
          v16 = 0;
        }
        else
        {
          if (*(_DWORD *)(a1 + 24) == 1)
            v15 = 0;
          else
            v15 = a4;
          v16 = v15 + v14;
        }
        if (v13 <= v16)
          v12 = v12;
        else
          v12 = v6;
        if (v13 >= v16)
          v13 = v16;
        else
          v13 = v13;
        ++v6;
      }
      while (v11 != v6);
      return v13 | (v12 << 32);
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_WORD *)(a2 + 12))
  {
LABEL_25:
    if ((_DWORD)v9)
    {
      LODWORD(v24) = 0;
      LODWORD(v25) = -1;
      do
      {
        v26 = *v10++;
        NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1, a2, v26, a4);
        if (v25 <= NextResourceCycle)
          v24 = v24;
        else
          v24 = HIDWORD(NextResourceCycle);
        if (v25 >= NextResourceCycle)
          v25 = NextResourceCycle;
        else
          v25 = v25;
        --v9;
      }
      while (v9);
      return v25 | (v24 << 32);
    }
    return 0xFFFFFFFFLL;
  }
  v19 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v7 + 176) + 136) + 4 * *(unsigned __int16 *)(a2 + 10));
  v20 = *(_QWORD *)(a1 + 432) + 16 * a3;
  v21 = 4 * *(unsigned __int16 *)(a2 + 12);
  while (1)
  {
    v22 = *v19;
    v23 = (_QWORD *)(*(_QWORD *)(a1 + 432) + 16 * a3);
    if (*(_DWORD *)(v20 + 8) >= 0x41u)
      v23 = (_QWORD *)(*(_QWORD *)v20 + ((v22 >> 3) & 0x1FF8));
    if (((*v23 >> v22) & 1) != 0)
      return v6 << 32;
    v19 += 2;
    v21 -= 4;
    if (!v21)
      goto LABEL_25;
  }
}

BOOL llvm::SchedBoundary::checkHazard(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int NumMicroOps;
  int v6;
  uint64_t v7;
  const llvm::MachineInstr *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _BOOL8 result;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int NextResourceCycle;
  unsigned int v23;
  BOOL v24;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v4 = *(_DWORD **)(a1 + 136);
  if (v4[2] && (*(unsigned int (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, a2, 0))
    return 1;
  NumMicroOps = llvm::TargetSchedModel::getNumMicroOps(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), 0);
  v6 = *(_DWORD *)(a1 + 152);
  if (!v6)
    goto LABEL_15;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v6 + NumMicroOps) > *(_DWORD *)v7)
    return 1;
  v8 = *(const llvm::MachineInstr **)(a2 + 8);
  if (*(_DWORD *)(a1 + 24) != 1)
  {
LABEL_35:
    if ((llvm::TargetSchedModel::mustEndGroup((llvm::TargetSchedModel *)v7, v8, 0) & 1) == 0)
      goto LABEL_15;
    return 1;
  }
  if (!byte_1ED8303C8)
    return 0;
  v9 = *(_QWORD *)(v7 + 40);
  if (v9)
  {
    v10 = v9 + 24 * *(unsigned __int16 *)(*((_QWORD *)v8 + 2) + 6);
    if ((*(_WORD *)(v10 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 176) + 200))(*(_QWORD *)(v7 + 176));
        v27 = *(_QWORD *)(v7 + 40);
      }
      while ((*(_WORD *)(v27 + 24 * v26 + 8) & 0x1FFF) == 0x1FFE);
      v10 = v27 + 24 * v26;
    }
    v11 = *(unsigned __int16 *)(v10 + 8);
    v12 = ~v11 & 0x1FFF;
    v13 = v11 & 0x2000;
    if (v12)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      return 1;
    if (*(_DWORD *)(a1 + 24) != 1)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(const llvm::MachineInstr **)(a2 + 8);
      goto LABEL_35;
    }
  }
LABEL_15:
  if (!byte_1ED8303C8)
    return 0;
  v15 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v15 + 40) || (*(__int16 *)(a2 + 228) & 0x80000000) == 0)
    return 0;
  v17 = *(_WORD **)(a2 + 24);
  if (!v17)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 672);
    if (v19)
    {
      v17 = (_WORD *)(v19 + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
      if ((v17[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 808) + 200))(*(_QWORD *)(v18 + 808));
          v29 = *(_QWORD *)(v18 + 672);
        }
        while ((*(_WORD *)(v29 + 24 * v28 + 8) & 0x1FFF) == 0x1FFE);
        v17 = (_WORD *)(v29 + 24 * v28);
        v15 = *(_QWORD *)(a1 + 8);
      }
      *(_QWORD *)(a2 + 24) = v17;
    }
    else
    {
      v17 = 0;
    }
  }
  if (!v17[6])
    return 0;
  v20 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v15 + 176) + 136) + 4 * (unsigned __int16)v17[5]);
  v21 = &v20[2 * (unsigned __int16)v17[6]];
  do
  {
    NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1, (uint64_t)v17, *v20, v20[1]);
    v23 = *(_DWORD *)(a1 + 148);
    v24 = v23 >= NextResourceCycle;
    result = v23 < NextResourceCycle;
    v20 += 2;
  }
  while (v24 && v20 != v21);
  return result;
}

uint64_t llvm::SchedBoundary::findMaxLatency(uint64_t a1, llvm::SUnit **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::SUnit *v7;
  unsigned int v8;

  if (!a3)
    return 0;
  LODWORD(v5) = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = sub_1C61FB26C(*(_DWORD *)(a1 + 24), v7);
    if (v8 <= v5)
      v5 = v5;
    else
      v5 = v8;
    v6 -= 8;
  }
  while (v6);
  return v5;
}

void llvm::SchedBoundary::releaseNode(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;

  if (*(_DWORD *)(a1 + 156) > a3)
    *(_DWORD *)(a1 + 156) = a3;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4) && *(_DWORD *)(a1 + 148) < a3
    || llvm::SchedBoundary::checkHazard(a1, a2)
    || (v10 = *(uint64_t **)(a1 + 56),
        v9 = *(uint64_t **)(a1 + 64),
        v11 = (char *)v9 - (char *)v10,
        dword_1ED82FAF8 <= ((unint64_t)((char *)v9 - (char *)v10) >> 3)))
  {
    if ((a4 & 1) != 0)
      return;
    v17 = *(uint64_t **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v17 >= v16)
    {
      v26 = *(_QWORD **)(a1 + 112);
      v27 = v17 - v26;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        goto LABEL_46;
      v29 = v16 - (_QWORD)v26;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 61)
          goto LABEL_47;
        v31 = (char *)operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (uint64_t *)&v31[8 * v27];
      *v32 = a2;
      v18 = v32 + 1;
      if (v17 != v26)
      {
        do
        {
          v33 = *--v17;
          *--v32 = v33;
        }
        while (v17 != v26);
        v17 = *(uint64_t **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 112) = v32;
      *(_QWORD *)(a1 + 120) = v18;
      *(_QWORD *)(a1 + 128) = &v31[8 * v30];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v17 = a2;
      v18 = v17 + 1;
    }
    *(_QWORD *)(a1 + 120) = v18;
    *(_DWORD *)(a2 + 196) |= *(_DWORD *)(a1 + 80);
    return;
  }
  v12 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v9 >= v12)
  {
    v19 = v11 >> 3;
    v20 = (v11 >> 3) + 1;
    if (!(v20 >> 61))
    {
      v21 = v12 - (_QWORD)v10;
      if (v21 >> 2 > v20)
        v20 = v21 >> 2;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (!v22)
      {
        v23 = 0;
        goto LABEL_25;
      }
      if (!(v22 >> 61))
      {
        v23 = (char *)operator new(8 * v22);
LABEL_25:
        v24 = (uint64_t *)&v23[8 * v19];
        *v24 = a2;
        v13 = v24 + 1;
        if (v9 != v10)
        {
          do
          {
            v25 = *--v9;
            *--v24 = v25;
          }
          while (v9 != v10);
          v9 = *(uint64_t **)(a1 + 56);
        }
        *(_QWORD *)(a1 + 56) = v24;
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = &v23[8 * v22];
        if (v9)
          operator delete(v9);
        goto LABEL_11;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_46:
    abort();
  }
  *v9 = a2;
  v13 = v9 + 1;
LABEL_11:
  *(_QWORD *)(a1 + 64) = v13;
  *(_DWORD *)(a2 + 196) |= *(_DWORD *)(a1 + 24);
  if (a4)
  {
    v14 = *(_QWORD *)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)(*(_QWORD *)(v14 + 8 * a5) + 196) &= ~*(_DWORD *)(a1 + 80);
    *(_QWORD *)(v14 + 8 * a5) = *(_QWORD *)(v15 - 8);
    *(_QWORD *)(a1 + 120) -= 8;
  }
}

uint64_t llvm::SchedBoundary::bumpCycle(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v2 = a2;
  v3 = this;
  v4 = *(_DWORD **)(this + 8);
  if (!v4[1])
  {
    if (*(_DWORD *)(this + 156) <= a2)
      v2 = a2;
    else
      v2 = *(_DWORD *)(this + 156);
  }
  v5 = *(_DWORD *)(this + 148);
  v6 = *(_DWORD *)(this + 152);
  v7 = v2 - v5;
  v8 = (v2 - v5) * *v4;
  v9 = v6 >= v8;
  v10 = v6 - v8;
  if (!v9)
    v10 = 0;
  *(_DWORD *)(this + 152) = v10;
  v11 = *(_DWORD *)(this + 164);
  v9 = v11 >= v7;
  v12 = v11 - v7;
  if (!v9)
    v12 = 0;
  *(_DWORD *)(this + 164) = v12;
  if (*(_DWORD *)(*(_QWORD *)(this + 136) + 8))
  {
    if (v2 != v5)
    {
      do
      {
        if (*(_DWORD *)(v3 + 24) == 1)
          v13 = 80;
        else
          v13 = 88;
        this = (*(uint64_t (**)(void))(**(_QWORD **)(v3 + 136) + v13))();
        v14 = *(_DWORD *)(v3 + 148) + 1;
        *(_DWORD *)(v3 + 148) = v14;
      }
      while (v14 != v2);
      v4 = *(_DWORD **)(v3 + 8);
    }
  }
  else
  {
    *(_DWORD *)(this + 148) = v2;
  }
  *(_BYTE *)(v3 + 144) = 1;
  v15 = v4[69];
  v16 = *(unsigned int *)(v3 + 260);
  if ((_DWORD)v16)
    v17 = *(_DWORD *)(*(_QWORD *)(v3 + 176) + 4 * v16);
  else
    v17 = v4[68] * *(_DWORD *)(v3 + 168);
  v18 = *(_DWORD *)(v3 + 160);
  if (v18 <= v2)
    v18 = v2;
  *(_BYTE *)(v3 + 264) = (int)(v17 - v18 * v15) >= v15;
  return this;
}

uint64_t llvm::SchedBoundary::incExecutedResources(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(this + 176);
  v4 = *(_DWORD *)(v3 + 4 * a2) + a3;
  *(_DWORD *)(v3 + 4 * a2) = v4;
  if (v4 > *(_DWORD *)(this + 256))
    *(_DWORD *)(this + 256) = v4;
  return this;
}

uint64_t llvm::SchedBoundary::countResource(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 192) + 4 * a3) * a4;
  v7 = *(_DWORD *)(v5 + 4 * a3) + v6;
  *(_DWORD *)(v5 + 4 * a3) = v7;
  if (v7 > *(_DWORD *)(a1 + 256))
    *(_DWORD *)(a1 + 256) = v7;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 4 * a3) -= v6;
  v8 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v8 != a3)
  {
    if ((_DWORD)v8)
      v9 = *(_DWORD *)(v5 + 4 * v8);
    else
      v9 = *(_DWORD *)(v4 + 272) * *(_DWORD *)(a1 + 168);
    if (*(_DWORD *)(v5 + 4 * a3) > v9)
      *(_DWORD *)(a1 + 260) = a3;
  }
  return llvm::SchedBoundary::getNextResourceCycle(a1, a2, a3, a4);
}

void llvm::SchedBoundary::bumpNode(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _WORD *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int NumMicroOps;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int NextResourceCycle;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int *v39;
  unsigned int *v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  v4 = *(_DWORD **)(a1 + 136);
  if (v4[2])
  {
    if (*(_DWORD *)(a1 + 24) != 1 && (*(_WORD *)(a2 + 228) & 2) != 0)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 32))(v4);
      v4 = *(_DWORD **)(a1 + 136);
    }
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
  v5 = *(_WORD **)(a2 + 24);
  v6 = &unk_1ED830000;
  if (!v5)
  {
    if (byte_1ED8303C8 && (v7 = *(_QWORD *)a1, (v8 = *(_QWORD *)(*(_QWORD *)a1 + 672)) != 0))
    {
      v5 = (_WORD *)(v8 + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6));
      if ((v5[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 808) + 200))(*(_QWORD *)(v7 + 808));
          v58 = *(_QWORD *)(v7 + 672);
        }
        while ((*(_WORD *)(v58 + 24 * v57 + 8) & 0x1FFF) == 0x1FFE);
        v5 = (_WORD *)(v58 + 24 * v57);
      }
      *(_QWORD *)(a2 + 24) = v5;
    }
    else
    {
      v5 = 0;
    }
  }
  NumMicroOps = llvm::TargetSchedModel::getNumMicroOps(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), 0);
  v10 = NumMicroOps;
  v11 = 252;
  if (*(_DWORD *)(a1 + 24) == 1)
    v11 = 248;
  v12 = *(_DWORD *)(a1 + 148);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(v13 + 4);
  if (v14)
  {
    v15 = *(_DWORD *)(a2 + v11);
    if (v14 == 1)
    {
      if (v15 > v12)
        v12 = v15;
    }
    else if (((v15 > v12) & (*(unsigned __int16 *)(a2 + 228) >> 14)) != 0)
    {
      v12 = v15;
    }
  }
  v16 = *(_DWORD *)(a1 + 168) + NumMicroOps;
  *(_DWORD *)(a1 + 168) = v16;
  if (byte_1ED8303C8 && *(_QWORD *)(v13 + 40))
  {
    v17 = *(_DWORD *)(v13 + 272);
    v18 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v18 + 8) -= v17 * NumMicroOps;
    v19 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v19 && v17 * v16 - *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v19) >= *(_DWORD *)(v13 + 276))
      *(_DWORD *)(a1 + 260) = 0;
    if (v5[6])
    {
      v62 = NumMicroOps;
      v59 = (unsigned __int16)v5[5];
      v60 = *(_QWORD *)(*(_QWORD *)(v13 + 176) + 136);
      v20 = (unsigned __int16 *)(v60 + 4 * v59);
      v61 = (unsigned __int16)v5[6];
      v21 = &v20[2 * v61];
      v22 = *(_QWORD *)(v13 + 192);
      v23 = *(_QWORD *)(a1 + 176);
      v24 = *(_QWORD *)(v18 + 16);
      do
      {
        v25 = *v20;
        v26 = v20[1];
        v27 = *(_DWORD *)(v22 + 4 * v25) * v26;
        v28 = *(_DWORD *)(v23 + 4 * v25) + v27;
        *(_DWORD *)(v23 + 4 * v25) = v28;
        if (v28 > *(_DWORD *)(a1 + 256))
          *(_DWORD *)(a1 + 256) = v28;
        *(_DWORD *)(v24 + 4 * v25) -= v27;
        v29 = *(unsigned int *)(a1 + 260);
        if ((_DWORD)v29 != (_DWORD)v25)
        {
          v30 = (_DWORD)v29 ? *(_DWORD *)(v23 + 4 * v29) : *(_DWORD *)(v13 + 272) * *(_DWORD *)(a1 + 168);
          if (*(_DWORD *)(v23 + 4 * v25) > v30)
            *(_DWORD *)(a1 + 260) = v25;
        }
        NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1, (uint64_t)v5, v25, v26);
        if (NextResourceCycle > v12)
          v12 = NextResourceCycle;
        v20 += 2;
      }
      while (v20 != v21);
      if (*(__int16 *)(a2 + 228) < 0)
      {
        v32 = *(_QWORD *)(v13 + 32);
        v33 = 4 * v61;
        v34 = (unsigned __int16 *)(v60 + 4 * v59 + 2);
        v6 = &unk_1ED830000;
        do
        {
          v35 = *(v34 - 1);
          if (!*(_DWORD *)(v32 + 32 * v35 + 16))
          {
            v36 = llvm::SchedBoundary::getNextResourceCycle(a1, (uint64_t)v5, v35, 0);
            v37 = v12;
            if (*(_DWORD *)(a1 + 24) == 1)
            {
              v37 = v12 + *v34;
              if (v36 > v37)
                v37 = v36;
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * HIDWORD(v36)) = v37;
          }
          v34 += 2;
          v33 -= 4;
        }
        while (v33);
      }
      else
      {
        v6 = (_BYTE *)&unk_1ED830000;
      }
      v10 = v62;
    }
  }
  v38 = *(_DWORD *)(a1 + 24);
  if (v38 == 1)
    v39 = (unsigned int *)(a1 + 160);
  else
    v39 = (unsigned int *)(a1 + 164);
  if (v38 == 1)
    v40 = (unsigned int *)(a1 + 164);
  else
    v40 = (unsigned int *)(a1 + 160);
  v41 = *(_BYTE *)(a2 + 236);
  if ((v41 & 1) == 0)
  {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
    v41 = *(_BYTE *)(a2 + 236);
  }
  v42 = *(_DWORD *)(a2 + 240);
  if (v42 > *v39)
  {
    if ((v41 & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
      v42 = *(_DWORD *)(a2 + 240);
    }
    *v39 = v42;
    v41 = *(_BYTE *)(a2 + 236);
  }
  if ((v41 & 2) == 0)
    llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
  v43 = *(_DWORD *)(a2 + 244);
  if (v43 > *v40)
  {
    if ((*(_BYTE *)(a2 + 236) & 2) == 0)
    {
      llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
      v43 = *(_DWORD *)(a2 + 244);
    }
    *v40 = v43;
  }
  v44 = *(_DWORD *)(a1 + 148);
  if (v12 <= v44)
  {
    v45 = *(_QWORD *)(a1 + 8);
    v46 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v46)
      v47 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 4 * v46);
    else
      v47 = *(_DWORD *)(v45 + 272) * *(_DWORD *)(a1 + 168);
    if (*(_DWORD *)(a1 + 160) > v44)
      v44 = *(_DWORD *)(a1 + 160);
    *(_BYTE *)(a1 + 264) = (int)(v47 - v44 * *(_DWORD *)(v45 + 276)) >= *(_DWORD *)(v45 + 276);
  }
  else
  {
    llvm::SchedBoundary::bumpCycle(a1, v12);
    v45 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 152) += v10;
  if (*(_DWORD *)(a1 + 24) != 1)
  {
LABEL_77:
    if (v6[968])
    {
      v48 = *(_QWORD *)(v45 + 40);
      if (v48)
      {
        v49 = v48 + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 6);
        if ((*(_WORD *)(v49 + 8) & 0x1FFF) == 0x1FFE)
        {
          do
          {
            v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v45 + 176) + 200))(*(_QWORD *)(v45 + 176));
            v56 = *(_QWORD *)(v45 + 40);
          }
          while ((*(_WORD *)(v56 + 24 * v55 + 8) & 0x1FFF) == 0x1FFE);
          v49 = v56 + 24 * v55;
        }
        v50 = *(unsigned __int16 *)(v49 + 8);
        v51 = ~v50 & 0x1FFF;
        v52 = v50 & 0x2000;
        if (v51 && v52 != 0)
          goto LABEL_84;
      }
    }
    goto LABEL_85;
  }
  if ((llvm::TargetSchedModel::mustEndGroup((llvm::TargetSchedModel *)v45, *(const llvm::MachineInstr **)(a2 + 8), 0) & 1) != 0)
  {
LABEL_84:
    llvm::SchedBoundary::bumpCycle(a1, ++v12);
    goto LABEL_85;
  }
  if (*(_DWORD *)(a1 + 24) != 1)
  {
    v45 = *(_QWORD *)(a1 + 8);
    goto LABEL_77;
  }
LABEL_85:
  if (*(_DWORD *)(a1 + 152) >= **(_DWORD **)(a1 + 8))
  {
    v54 = v12 + 1;
    do
      llvm::SchedBoundary::bumpCycle(a1, v54++);
    while (*(_DWORD *)(a1 + 152) >= **(_DWORD **)(a1 + 8));
  }
}

void llvm::SchedBoundary::releasePending(llvm::SchedBoundary *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;

  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
    *((_DWORD *)this + 39) = -1;
  v2 = *((_QWORD *)this + 14);
  v3 = (unint64_t)(*((_QWORD *)this + 15) - v2) >> 3;
  if ((_DWORD)v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (*((_DWORD *)this + 6) == 1)
        v6 = 248;
      else
        v6 = 252;
      v7 = *(_DWORD *)(v5 + v6);
      if (v7 < *((_DWORD *)this + 39))
        *((_DWORD *)this + 39) = v7;
      if (dword_1ED82FAF8 <= ((*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3))
        break;
      llvm::SchedBoundary::releaseNode((uint64_t)this, v5, v7, 1, v4);
      v2 = *((_QWORD *)this + 14);
      v8 = v3 != (unint64_t)(*((_QWORD *)this + 15) - v2) >> 3;
      LODWORD(v3) = v3 - v8;
      v4 = v4 - v8 + 1;
    }
    while (v4 < v3);
  }
  *((_BYTE *)this + 144) = 0;
}

_QWORD *llvm::SchedBoundary::removeReady(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & *(_DWORD *)(a2 + 196)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 64);
    result = (_QWORD *)(a1 + 64);
    v4 = v5;
    v6 = *(result - 1);
    if (v6 != v5)
    {
      while (*(_QWORD *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 120);
    v6 = *(_QWORD *)(a1 + 112);
    if (v6 != v4)
    {
      while (*(_QWORD *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          v6 = *(_QWORD *)(a1 + 120);
          break;
        }
      }
    }
    v2 = *(_DWORD *)(a1 + 80);
    result = (_QWORD *)(a1 + 120);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 196) &= ~v2;
  *(_QWORD *)v6 = *(_QWORD *)(v4 - 8);
  *result -= 8;
  return result;
}

uint64_t llvm::SchedBoundary::pickOnlyChoice(llvm::SchedBoundary *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;

  if (*((_BYTE *)this + 144))
  {
    if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
      *((_DWORD *)this + 39) = -1;
    v2 = *((_QWORD *)this + 14);
    v3 = (unint64_t)(*((_QWORD *)this + 15) - v2) >> 3;
    if ((_DWORD)v3)
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(v2 + 8 * v4);
        if (*((_DWORD *)this + 6) == 1)
          v6 = 248;
        else
          v6 = 252;
        v7 = *(_DWORD *)(v5 + v6);
        if (v7 < *((_DWORD *)this + 39))
          *((_DWORD *)this + 39) = v7;
        if (dword_1ED82FAF8 <= ((*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3))
          break;
        llvm::SchedBoundary::releaseNode((uint64_t)this, v5, v7, 1, v4);
        v2 = *((_QWORD *)this + 14);
        v8 = v3 != (unint64_t)(*((_QWORD *)this + 15) - v2) >> 3;
        LODWORD(v3) = v3 - v8;
        v4 = v4 - v8 + 1;
      }
      while (v4 < v3);
    }
    *((_BYTE *)this + 144) = 0;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  if (v9 == *((uint64_t **)this + 8))
    goto LABEL_43;
  do
  {
    if (llvm::SchedBoundary::checkHazard((uint64_t)this, *v9))
    {
      v12 = *v9;
      v14 = (uint64_t *)*((_QWORD *)this + 15);
      v13 = *((_QWORD *)this + 16);
      if ((unint64_t)v14 >= v13)
      {
        v17 = (_QWORD *)*((_QWORD *)this + 14);
        v18 = v14 - v17;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          abort();
        v20 = v13 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_1C4764EE4();
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = (uint64_t *)&v22[8 * v18];
        *v23 = v12;
        v15 = v23 + 1;
        if (v14 != v17)
        {
          do
          {
            v24 = *--v14;
            *--v23 = v24;
          }
          while (v14 != v17);
          v14 = (uint64_t *)*((_QWORD *)this + 14);
        }
        *((_QWORD *)this + 14) = v23;
        *((_QWORD *)this + 15) = v15;
        *((_QWORD *)this + 16) = &v22[8 * v21];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v14 = v12;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 15) = v15;
      *(_DWORD *)(v12 + 196) |= *((_DWORD *)this + 20);
      *(_DWORD *)(*v9 + 196) &= ~*((_DWORD *)this + 6);
      *v9 = *(_QWORD *)(*((_QWORD *)this + 8) - 8);
      v16 = *((_QWORD *)this + 7);
      v10 = *((_QWORD *)this + 8) - 8;
      *((_QWORD *)this + 8) = v10;
      v9 = (uint64_t *)(v16 + (((unint64_t)v9 - v16) & 0x7FFFFFFF8));
    }
    else
    {
      ++v9;
      v10 = *((_QWORD *)this + 8);
    }
  }
  while (v9 != (uint64_t *)v10);
  v11 = *((_QWORD *)this + 7);
  while (v11 == v10)
  {
LABEL_43:
    llvm::SchedBoundary::bumpCycle((uint64_t)this, *((_DWORD *)this + 37) + 1);
    v11 = *((_QWORD *)this + 7);
    v10 = *((_QWORD *)this + 8);
    if (v11 == v10)
      *((_DWORD *)this + 39) = -1;
    v26 = *((_QWORD *)this + 14);
    v27 = (unint64_t)(*((_QWORD *)this + 15) - v26) >> 3;
    if ((_DWORD)v27)
    {
      v28 = 0;
      while (1)
      {
        v29 = *(_QWORD *)(v26 + 8 * v28);
        if (*((_DWORD *)this + 6) == 1)
          v30 = 248;
        else
          v30 = 252;
        v31 = *(_DWORD *)(v29 + v30);
        if (v31 < *((_DWORD *)this + 39))
          *((_DWORD *)this + 39) = v31;
        v11 = *((_QWORD *)this + 7);
        v10 = *((_QWORD *)this + 8);
        if (dword_1ED82FAF8 <= ((unint64_t)(v10 - v11) >> 3))
          break;
        llvm::SchedBoundary::releaseNode((uint64_t)this, v29, v31, 1, v28);
        v26 = *((_QWORD *)this + 14);
        v32 = v27 != (unint64_t)(*((_QWORD *)this + 15) - v26) >> 3;
        LODWORD(v27) = v27 - v32;
        v28 = v28 - v32 + 1;
        if (v28 >= v27)
        {
          v11 = *((_QWORD *)this + 7);
          v10 = *((_QWORD *)this + 8);
          break;
        }
      }
    }
    *((_BYTE *)this + 144) = 0;
  }
  if (((v10 - v11) & 0x7FFFFFFF8) == 8)
    return *(_QWORD *)v11;
  else
    return 0;
}

llvm::raw_ostream *llvm::SchedBoundary::dumpScheduledState(llvm::SchedBoundary *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  llvm *v7;
  llvm *v8;
  char v9;
  char *v10;
  size_t v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  llvm *v16;
  llvm *v17;
  llvm *v18;
  void *v19;
  unsigned int v20;
  llvm *v21;
  _BYTE *v22;
  llvm *v23;
  llvm *v24;
  void *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  _WORD *v33;
  void *v34;
  const char *v35;
  size_t v36;
  llvm::raw_ostream *result;
  size_t v38;

  v2 = *((unsigned int *)this + 65);
  v3 = *((_QWORD *)this + 1);
  if ((_DWORD)v2)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 192) + 4 * v2);
    v5 = *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v2);
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 272);
    v5 = *((_DWORD *)this + 42) * v4;
  }
  v6 = *(_DWORD *)(v3 + 276);
  v7 = llvm::dbgs(this);
  v8 = v7;
  v9 = *((_BYTE *)this + 55);
  if (v9 >= 0)
    v10 = (char *)this + 32;
  else
    v10 = (char *)*((_QWORD *)this + 4);
  if (v9 >= 0)
    v11 = v9 & 0x7F;
  else
    v11 = *((_QWORD *)this + 5);
  v13 = *((_QWORD *)v7 + 3);
  v12 = (_WORD *)*((_QWORD *)v7 + 4);
  if (v11 <= v13 - (uint64_t)v12)
  {
    if (v11)
    {
      memcpy(v12, v10, v11);
      v12 = (_WORD *)(*((_QWORD *)v8 + 4) + v11);
      *((_QWORD *)v8 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, v10, v11);
    v12 = (_WORD *)*((_QWORD *)v8 + 4);
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v12 > 1uLL)
  {
    *v12 = 16416;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, " @", 2uLL);
  }
  sub_1C5E21910(v8, *((unsigned int *)this + 37), 0, 0, 0);
  v14 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 2659;
    v15 = *((_QWORD *)v8 + 4) + 2;
    *((_QWORD *)v8 + 4) = v15;
  }
  else
  {
    llvm::raw_ostream::write(v8, "c\n", 2uLL);
    v15 = *((_QWORD *)v8 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v15) > 0xA)
  {
    *(_DWORD *)(v15 + 7) = 540697701;
    *(_QWORD *)v15 = *(_QWORD *)"  Retired: ";
    *((_QWORD *)v8 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v8, "  Retired: ", 0xBuLL);
  }
  v16 = sub_1C5E21910(v8, *((unsigned int *)this + 42), 0, 0, 0);
  v17 = llvm::dbgs(v16);
  v18 = v17;
  v19 = (void *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 0xCuLL)
  {
    qmemcpy(v19, "\n  Executed: ", 13);
    *((_QWORD *)v17 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\n  Executed: ", 0xDuLL);
  }
  v20 = *(_DWORD *)(*((_QWORD *)this + 1) + 276) * *((_DWORD *)this + 37);
  if (v20 <= *((_DWORD *)this + 64))
    v20 = *((_DWORD *)this + 64);
  v21 = sub_1C5E21910(v18, v20 / v6, 0, 0, 0);
  v22 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v22)
  {
    v21 = llvm::raw_ostream::write(v18, "c", 1uLL);
  }
  else
  {
    *v22 = 99;
    ++*((_QWORD *)v18 + 4);
  }
  v23 = llvm::dbgs(v21);
  v24 = v23;
  v25 = (void *)*((_QWORD *)v23 + 4);
  if (*((_QWORD *)v23 + 3) - (_QWORD)v25 > 0xCuLL)
  {
    qmemcpy(v25, "\n  Critical: ", 13);
    *((_QWORD *)v23 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v23, "\n  Critical: ", 0xDuLL);
  }
  sub_1C5E21910(v24, v5 / v6, 0, 0, 0);
  v26 = *((_QWORD *)v24 + 4);
  if ((unint64_t)(*((_QWORD *)v24 + 3) - v26) > 2)
  {
    *(_BYTE *)(v26 + 2) = 32;
    *(_WORD *)v26 = 11363;
    *((_QWORD *)v24 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v24, "c, ", 3uLL);
  }
  sub_1C5E21910(v24, v5 / v4, 0, 0, 0);
  v27 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v27)
  {
    llvm::raw_ostream::write(v24, " ", 1uLL);
  }
  else
  {
    *v27 = 32;
    ++*((_QWORD *)v24 + 4);
  }
  v28 = *((unsigned int *)this + 65);
  if ((_DWORD)v28)
  {
    v29 = *(const char **)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 32 * v28);
    if (!v29)
      goto LABEL_38;
  }
  else
  {
    v29 = "MOps";
  }
  v30 = strlen(v29);
  v31 = (void *)*((_QWORD *)v24 + 4);
  if (v30 <= *((_QWORD *)v24 + 3) - (_QWORD)v31)
  {
    if (v30)
    {
      memcpy(v31, v29, v30);
      *((_QWORD *)v24 + 4) += v30;
    }
  }
  else
  {
    llvm::raw_ostream::write(v24, v29, v30);
  }
LABEL_38:
  v32 = *((_QWORD *)v24 + 4);
  if ((unint64_t)(*((_QWORD *)v24 + 3) - v32) > 0x13)
  {
    *(_DWORD *)(v32 + 16) = 540703075;
    *(_OWORD *)v32 = *(_OWORD *)"\n  ExpectedLatency: ";
    *((_QWORD *)v24 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v24, "\n  ExpectedLatency: ", 0x14uLL);
  }
  sub_1C5E21910(v24, *((unsigned int *)this + 40), 0, 0, 0);
  v33 = (_WORD *)*((_QWORD *)v24 + 4);
  if (*((_QWORD *)v24 + 3) - (_QWORD)v33 > 1uLL)
  {
    *v33 = 2659;
    v34 = (void *)(*((_QWORD *)v24 + 4) + 2);
    *((_QWORD *)v24 + 4) = v34;
  }
  else
  {
    llvm::raw_ostream::write(v24, "c\n", 2uLL);
    v34 = (void *)*((_QWORD *)v24 + 4);
  }
  if (*((_BYTE *)this + 264))
    v35 = "  - Resource";
  else
    v35 = "  - Latency";
  if (*((_BYTE *)this + 264))
    v36 = 12;
  else
    v36 = 11;
  if (v36 <= *((_QWORD *)v24 + 3) - (_QWORD)v34)
  {
    result = (llvm::raw_ostream *)memcpy(v34, v35, v36);
    v38 = *((_QWORD *)v24 + 4) + v36;
    *((_QWORD *)v24 + 4) = v38;
  }
  else
  {
    result = llvm::raw_ostream::write(v24, v35, v36);
    v38 = *((_QWORD *)v24 + 4);
  }
  if (*((_QWORD *)v24 + 3) - v38 <= 9)
    return llvm::raw_ostream::write(v24, " limited.\n", 0xAuLL);
  *(_WORD *)(v38 + 8) = 2606;
  *(_QWORD *)v38 = *(_QWORD *)" limited.\n";
  *((_QWORD *)v24 + 4) += 10;
  return result;
}

BOOL llvm::GenericSchedulerBase::shouldReduceLatency(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int *a5)
{
  unsigned int v5;
  unsigned int v6;
  int v11;

  v5 = *(_DWORD *)(a3 + 148);
  v6 = *(_DWORD *)(a1 + 32);
  if (v5 > v6)
    return 1;
  if (!v5)
    return 0;
  if ((a4 & 1) != 0)
  {
    v11 = sub_1C51ABBBC(a3);
    *a5 = v11;
    v5 = *(_DWORD *)(a3 + 148);
    v6 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v11 = *a5;
  }
  return v11 + v5 > v6;
}

uint64_t sub_1C51ABBBC(uint64_t a1)
{
  unsigned int v2;
  llvm::SUnit **v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  llvm::SUnit *v7;
  unsigned int v8;
  llvm::SUnit **v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::SUnit *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_DWORD *)(a1 + 164);
  v3 = *(llvm::SUnit ***)(a1 + 56);
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64) - (_QWORD)v3;
  if (v5)
  {
    v6 = 8 * (v5 >> 3);
    do
    {
      v7 = *v3++;
      v8 = sub_1C61FB26C(*(_DWORD *)(a1 + 24), v7);
      if (v8 > v4)
        v4 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  v9 = *(llvm::SUnit ***)(a1 + 112);
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 120) - (_QWORD)v9;
  if (v11)
  {
    v12 = 8 * (v11 >> 3);
    do
    {
      v13 = *v9++;
      v14 = sub_1C61FB26C(*(_DWORD *)(a1 + 24), v13);
      if (v14 > v10)
        v10 = v14;
      v12 -= 8;
    }
    while (v12);
  }
  if (v2 <= v4)
    v15 = v4;
  else
    v15 = v2;
  if (v15 <= v10)
    return v10;
  else
    return v15;
}

uint64_t llvm::tryLess(int a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _BYTE *v5;
  unsigned int v6;

  if (a1 < a2)
  {
    v5 = (_BYTE *)(a3 + 24);
    goto LABEL_5;
  }
  if (a1 > a2)
  {
    v6 = *(unsigned __int8 *)(a4 + 24);
    v5 = (_BYTE *)(a4 + 24);
    if (v6 <= a5)
      return 1;
LABEL_5:
    *v5 = a5;
    return 1;
  }
  return 0;
}

uint64_t llvm::tryGreater(int a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _BYTE *v5;
  unsigned int v6;

  if (a1 > a2)
  {
    v5 = (_BYTE *)(a3 + 24);
LABEL_6:
    *v5 = a5;
    return 1;
  }
  if (a1 >= a2)
    return 0;
  v6 = *(unsigned __int8 *)(a4 + 24);
  v5 = (_BYTE *)(a4 + 24);
  if (v6 > a5)
    goto LABEL_6;
  return 1;
}

uint64_t llvm::tryLatency(llvm *this, llvm::GenericSchedulerBase::SchedCandidate *a2, llvm::GenericSchedulerBase::SchedCandidate *a3, llvm::SchedBoundary *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;

  v7 = *((_QWORD *)this + 2);
  if (*((_DWORD *)a3 + 6) == 1)
  {
    if ((*(_BYTE *)(v7 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*((llvm::SUnit **)this + 2));
    v8 = *(_DWORD *)(v7 + 240);
    v9 = *((_QWORD *)a2 + 2);
    if ((*(_BYTE *)(v9 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*((llvm::SUnit **)a2 + 2));
    v10 = *(_DWORD *)(v9 + 240);
    if (v8 > v10)
      v10 = v8;
    v11 = *((_DWORD *)a3 + 40);
    if (v11 <= *((_DWORD *)a3 + 37))
      v11 = *((_DWORD *)a3 + 37);
    v12 = *((_QWORD *)this + 2);
    if (v10 > v11)
    {
      if ((*(_BYTE *)(v12 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*((llvm::SUnit **)this + 2));
      v13 = *(_DWORD *)(v12 + 240);
      v14 = *((_QWORD *)a2 + 2);
      if ((*(_BYTE *)(v14 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(*((llvm::SUnit **)a2 + 2));
      v15 = *(_DWORD *)(v14 + 240);
      if (v13 < v15)
      {
        v16 = 13;
LABEL_55:
        *((_BYTE *)this + 24) = v16;
        return 1;
      }
      if (v13 > v15)
      {
        if (*((unsigned __int8 *)a2 + 24) >= 0xEu)
        {
          v25 = 13;
          goto LABEL_60;
        }
        return 1;
      }
      v12 = *((_QWORD *)this + 2);
    }
    if ((*(_BYTE *)(v12 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v12);
    v26 = *(_DWORD *)(v12 + 244);
    v27 = *((_QWORD *)a2 + 2);
    if ((*(_BYTE *)(v27 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*((llvm::SUnit **)a2 + 2));
    v28 = *(_DWORD *)(v27 + 244);
    if (v26 > v28)
    {
      v16 = 14;
      goto LABEL_55;
    }
    if (v26 < v28)
    {
      if (*((unsigned __int8 *)a2 + 24) >= 0xFu)
      {
        v25 = 14;
        goto LABEL_60;
      }
      return 1;
    }
  }
  else
  {
    if ((*(_BYTE *)(v7 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*((llvm::SUnit **)this + 2));
    v17 = *(_DWORD *)(v7 + 244);
    v18 = *((_QWORD *)a2 + 2);
    if ((*(_BYTE *)(v18 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(*((llvm::SUnit **)a2 + 2));
    v19 = *(_DWORD *)(v18 + 244);
    if (v17 > v19)
      v19 = v17;
    v20 = *((_DWORD *)a3 + 40);
    if (v20 <= *((_DWORD *)a3 + 37))
      v20 = *((_DWORD *)a3 + 37);
    v21 = *((_QWORD *)this + 2);
    if (v19 > v20)
    {
      if ((*(_BYTE *)(v21 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight(*((llvm::SUnit **)this + 2));
      v22 = *(_DWORD *)(v21 + 244);
      v23 = *((_QWORD *)a2 + 2);
      if ((*(_BYTE *)(v23 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight(*((llvm::SUnit **)a2 + 2));
      v24 = *(_DWORD *)(v23 + 244);
      if (v22 < v24)
      {
        v16 = 11;
        goto LABEL_55;
      }
      if (v22 > v24)
      {
        if (*((unsigned __int8 *)a2 + 24) >= 0xCu)
        {
          v25 = 11;
          goto LABEL_60;
        }
        return 1;
      }
      v21 = *((_QWORD *)this + 2);
    }
    if ((*(_BYTE *)(v21 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v21);
    v29 = *(_DWORD *)(v21 + 240);
    v30 = *((_QWORD *)a2 + 2);
    if ((*(_BYTE *)(v30 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(*((llvm::SUnit **)a2 + 2));
    v31 = *(_DWORD *)(v30 + 240);
    if (v29 > v31)
    {
      v16 = 12;
      goto LABEL_55;
    }
    if (v29 < v31)
    {
      if (*((unsigned __int8 *)a2 + 24) < 0xDu)
        return 1;
      v25 = 12;
LABEL_60:
      *((_BYTE *)a2 + 24) = v25;
      return 1;
    }
  }
  return 0;
}

void llvm::GenericScheduler::initialize(llvm::GenericScheduler *this, llvm::ScheduleDAGMI *a2)
{
  const llvm::TargetSchedModel *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *((_QWORD *)this + 16) = a2;
  v3 = (llvm::ScheduleDAGMI *)((char *)a2 + 632);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = (char *)a2 + 632;
  *((_QWORD *)this + 3) = v4;
  if (*((_BYTE *)this + 141))
  {
    llvm::ScheduleDAGMILive::computeDFSResult(a2);
    a2 = (llvm::ScheduleDAGMI *)*((_QWORD *)this + 16);
    v3 = (const llvm::TargetSchedModel *)*((_QWORD *)this + 2);
  }
  llvm::SchedRemainder::init((llvm::GenericScheduler *)((char *)this + 32), a2, v3);
  llvm::SchedBoundary::init((llvm::GenericScheduler *)((char *)this + 144), *((llvm::ScheduleDAGMI **)this + 16), *((const llvm::TargetSchedModel **)this + 2), (llvm::GenericScheduler *)((char *)this + 32));
  llvm::SchedBoundary::init((llvm::GenericScheduler *)((char *)this + 848), *((llvm::ScheduleDAGMI **)this + 16), *((const llvm::TargetSchedModel **)this + 2), (llvm::GenericScheduler *)((char *)this + 32));
  if (byte_1ED830488)
  {
    v5 = *((_QWORD *)this + 2);
    if (*(_QWORD *)(v5 + 168))
      v6 = v5 + 72;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if (!*((_QWORD *)this + 35))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 32) + 16);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7);
    *((_QWORD *)this + 35) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 872))(v8, v6, *((_QWORD *)this + 16));
  }
  if (!*((_QWORD *)this + 123))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 32) + 16);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
    *((_QWORD *)this + 123) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 872))(v10, v6, *((_QWORD *)this + 16));
  }
  *((_QWORD *)this + 196) = 0;
  *((_QWORD *)this + 202) = 0;
}

uint64_t llvm::GenericScheduler::initPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 ***v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 120))(*(_QWORD *)(v6 + 16));
  *(_BYTE *)(a1 + 136) = 1;
  v8 = 17;
  do
  {
    if (*(_QWORD *)(v7 + 8 * v8))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      v10 = (unsigned __int16 ***)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 424))(v7, v8 - 12, 0);
      v11 = *((unsigned __int16 *)*v10 + 12);
      v12 = *(_QWORD *)v9;
      if (*(_DWORD *)(v9 + 8) != *(_DWORD *)(*(_QWORD *)v9 + 24 * *((unsigned __int16 *)*v10 + 12)))
        llvm::RegisterClassInfo::compute((uint64_t *)v9, v10);
      *(_BYTE *)(a1 + 136) = a4 > *(_DWORD *)(v12 + 24 * v11 + 4) >> 1;
    }
    v13 = v8 - 13;
    --v8;
  }
  while (v13 > 2);
  *(_BYTE *)(a1 + 139) = 1;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 296))(*(_QWORD *)(v6 + 16), a1 + 136, a4);
  if (!byte_1ED7FBDB0)
    *(_WORD *)(a1 + 136) = 0;
  if (word_1ED82F840)
  {
    v15 = byte_1ED82F8B8;
    *(_BYTE *)(a1 + 139) = byte_1ED82F8B8;
    if (v15)
      *(_BYTE *)(a1 + 138) = 0;
  }
  if (word_1ED82F780)
  {
    v16 = byte_1ED82F7F8;
    *(_BYTE *)(a1 + 138) = byte_1ED82F7F8;
    if (v16)
      *(_BYTE *)(a1 + 139) = 0;
  }
  return result;
}

uint64_t llvm::GenericScheduler::checkAcyclicLatency(uint64_t this)
{
  unsigned int v1;
  unsigned int v2;
  _DWORD *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_DWORD *)(this + 36);
  if (v1)
  {
    v2 = *(_DWORD *)(this + 32);
    if (v1 < v2)
    {
      v3 = *(_DWORD **)(this + 16);
      v4 = v3[69];
      v5 = v4 * v1;
      v6 = *(_DWORD *)(this + 40);
      if (v5 <= v6)
        v5 = *(_DWORD *)(this + 40);
      *(_BYTE *)(this + 44) = (v5 + v4 * v2 * v6 - 1) / v5 > v3[68] * v3[1];
    }
  }
  return this;
}

void llvm::GenericScheduler::registerRoots(llvm::GenericScheduler *this)
{
  uint64_t v2;
  unsigned int v3;
  llvm::SUnit **v4;
  llvm::SUnit **v5;
  llvm::SUnit *v6;
  unsigned int v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;

  v2 = *((_QWORD *)this + 16);
  if ((*(_BYTE *)(v2 + 580) & 1) == 0)
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  v3 = *(_DWORD *)(v2 + 584);
  *((_DWORD *)this + 8) = v3;
  v4 = (llvm::SUnit **)*((_QWORD *)this + 113);
  v5 = (llvm::SUnit **)*((_QWORD *)this + 114);
  while (v4 != v5)
  {
    v6 = *v4;
    if ((*((_BYTE *)*v4 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth(*v4);
      v3 = *((_DWORD *)this + 8);
    }
    v7 = *((_DWORD *)v6 + 60);
    if (v7 > v3)
    {
      if ((*((_BYTE *)v6 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v6);
        v7 = *((_DWORD *)v6 + 60);
      }
      *((_DWORD *)this + 8) = v7;
      v3 = v7;
    }
    ++v4;
  }
  if (byte_1ED82F978)
  {
    v8 = (llvm::raw_ostream *)llvm::errs(this);
    v9 = sub_1C4816AD8(v8, "Critical Path(GS-RR): ");
    sub_1C5E21910(v9, *((unsigned int *)this + 8), 0, 0, 0);
    sub_1C4816AD8(v9, " \n");
  }
  if (byte_1ED7FBE70 && *(_DWORD *)(*((_QWORD *)this + 2) + 4))
  {
    *((_DWORD *)this + 9) = llvm::ScheduleDAGMILive::computeCyclicCriticalPath(*((llvm::ScheduleDAGMILive **)this + 16));
    llvm::GenericScheduler::checkAcyclicLatency((uint64_t)this);
  }
}

uint64_t llvm::getWeakLeft(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 220;
  if (a2)
    v2 = 216;
  return *(unsigned int *)(a1 + v2);
}

uint64_t llvm::biasPhysReg(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (*(_WORD *)v3 != 19)
    goto LABEL_10;
  v4 = *(_QWORD *)(v2 + 32);
  if ((*(_DWORD *)(v4 + 32 * a2 + 4) - 1) < 0x3FFFFFFF)
    return 1;
  v6 = 208;
  if (a2)
    v6 = 212;
  v7 = *(_DWORD *)(v4 + 32 * (a2 ^ 1) + 4) - 0x40000000;
  result = *(_DWORD *)(a1 + v6) ? 1 : 0xFFFFFFFFLL;
  if (v7 <= 0xC0000000)
  {
LABEL_10:
    v8 = *(_QWORD *)(v3 + 8);
    if ((v8 & 0x2000) == 0)
      return 0;
    v9 = *(_QWORD *)(v2 + 32);
    v10 = *(unsigned __int8 *)(v3 + 4);
    if ((v8 & 2) == 0 || (v14 = *(_DWORD *)(v2 + 40), v14 == v10))
    {
      v11 = v10;
    }
    else
    {
      v15 = v14 - 1;
      v11 = v10;
      do
      {
        v16 = *(_DWORD *)(v9 + 32 * v10);
        if ((v16 & 0x10000FF) != 0x1000000)
          break;
        v11 += (v16 & 0x2000000) == 0;
        if (v15 == v10)
          break;
        ++v10;
      }
      while ((v16 & 0x2000000) == 0);
    }
    if (v11)
    {
      v12 = 32 * v11;
      v13 = (_DWORD *)(v9 + 4);
      while (*((_BYTE *)v13 - 4) || (*v13 - 1) <= 0x3FFFFFFE)
      {
        v13 += 8;
        v12 -= 32;
        if (!v12)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    if (a2)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  return result;
}

BOOL llvm::GenericScheduler::tryCandidate(llvm::GenericScheduler *this, llvm::GenericSchedulerBase::SchedCandidate *a2, llvm::GenericSchedulerBase::SchedCandidate *a3, llvm::SchedBoundary *a4)
{
  uint64_t v5;
  int v9;
  int v10;
  llvm::SchedBoundary *v11;
  char *v12;
  unsigned int v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  llvm::SchedBoundary *v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;

  v5 = *((_QWORD *)a2 + 2);
  if (!v5)
    goto LABEL_92;
  v9 = llvm::biasPhysReg(*((_QWORD *)a3 + 2), *((unsigned __int8 *)a3 + 25));
  v10 = llvm::biasPhysReg(v5, *((unsigned __int8 *)a2 + 25));
  if (v9 > v10)
  {
    v12 = (char *)a3 + 24;
LABEL_6:
    v14 = 2;
LABEL_7:
    *v12 = v14;
    return *((_BYTE *)a3 + 24) != 0;
  }
  if (v9 < v10)
  {
    v13 = *((unsigned __int8 *)a2 + 24);
    v12 = (char *)a2 + 24;
    if (v13 < 3)
      return *((_BYTE *)a3 + 24) != 0;
    goto LABEL_6;
  }
  v16 = *((_QWORD *)this + 16);
  if (*(_BYTE *)(v16 + 3120))
  {
    if (llvm::tryPressure((unsigned __int16 *)a3 + 13, (unsigned __int16 *)a2 + 13, (uint64_t)a3, (uint64_t)a2, 3u, *((_QWORD *)this + 3), *(_QWORD *)(v16 + 32)))return *((_BYTE *)a3 + 24) != 0;
    v42 = *((_QWORD *)this + 16);
    if (*(_BYTE *)(v42 + 3120))
    {
      if (llvm::tryPressure((unsigned __int16 *)a3 + 15, (unsigned __int16 *)a2 + 15, (uint64_t)a3, (uint64_t)a2, 4u, *((_QWORD *)this + 3), *(_QWORD *)(v42 + 32)))return *((_BYTE *)a3 + 24) != 0;
    }
  }
  if (a4)
  {
    if (*((_BYTE *)this + 44) && !*((_DWORD *)a4 + 38) && llvm::tryLatency(a3, a2, a4, v11))
      return *((_BYTE *)a3 + 24) != 0;
    v17 = *((_QWORD *)a3 + 2);
    if ((*(_WORD *)(v17 + 228) & 0x4000) != 0)
    {
      v20 = 252;
      if (*((_DWORD *)a4 + 6) == 1)
        v20 = 248;
      v21 = *(_DWORD *)(v17 + v20);
      v22 = *((_DWORD *)a4 + 37);
      v23 = v21 >= v22;
      v24 = v21 - v22;
      if (v23)
        v18 = v24;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    v19 = *((_QWORD *)a2 + 2);
    if ((*(_WORD *)(v19 + 228) & 0x4000) != 0)
    {
      v26 = 252;
      if (*((_DWORD *)a4 + 6) == 1)
        v26 = 248;
      v27 = *(_DWORD *)(v19 + v26);
      v28 = *((_DWORD *)a4 + 37);
      v23 = v27 >= v28;
      v25 = v27 - v28;
      if (!v23)
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    if (v18 < v25)
    {
      v12 = (char *)a3 + 24;
LABEL_30:
      v14 = 5;
      goto LABEL_7;
    }
    if (v18 > v25)
    {
      v29 = *((unsigned __int8 *)a2 + 24);
      v12 = (char *)a2 + 24;
      if (v29 < 6)
        return *((_BYTE *)a3 + 24) != 0;
      goto LABEL_30;
    }
  }
  else
  {
    v17 = *((_QWORD *)a3 + 2);
    v19 = *((_QWORD *)a2 + 2);
  }
  v30 = *((_QWORD *)this + 16);
  v31 = 2704;
  if (*((_BYTE *)a2 + 25))
    v32 = 2704;
  else
    v32 = 2696;
  v33 = *(_QWORD *)(v30 + v32);
  if (!*((_BYTE *)a3 + 25))
    v31 = 2696;
  v34 = *(_QWORD *)(v30 + v31);
  if (v17 == v34 && v19 != v33)
  {
    v12 = (char *)a3 + 24;
LABEL_57:
    v14 = 6;
    goto LABEL_7;
  }
  if (v17 != v34 && v19 == v33)
  {
    v41 = *((unsigned __int8 *)a2 + 24);
    v12 = (char *)a2 + 24;
    if (v41 < 7)
      return *((_BYTE *)a3 + 24) != 0;
    goto LABEL_57;
  }
  if (a4)
  {
    if (*((_BYTE *)a3 + 25))
      v37 = 216;
    else
      v37 = 220;
    v38 = *(_DWORD *)(v17 + v37);
    if (*((_BYTE *)a2 + 25))
      v39 = 216;
    else
      v39 = 220;
    v40 = *(_DWORD *)(v19 + v39);
    if (v38 < v40)
    {
      v12 = (char *)a3 + 24;
LABEL_66:
      v14 = 7;
      goto LABEL_7;
    }
    if (v38 > v40)
    {
      v43 = *((unsigned __int8 *)a2 + 24);
      v12 = (char *)a2 + 24;
      if (v43 < 8)
        return *((_BYTE *)a3 + 24) != 0;
      goto LABEL_66;
    }
  }
  if (*(_BYTE *)(v30 + 3120)
    && llvm::tryPressure((unsigned __int16 *)a3 + 17, (unsigned __int16 *)a2 + 17, (uint64_t)a3, (uint64_t)a2, 8u, *((_QWORD *)this + 3), *(_QWORD *)(v30 + 32)))
  {
    return *((_BYTE *)a3 + 24) != 0;
  }
  if (!a4)
    return 0;
  llvm::GenericSchedulerBase::SchedCandidate::initResourceDelta((uint64_t)a3, *((const llvm::ScheduleDAGMI **)this + 16), *((const llvm::TargetSchedModel **)this + 2));
  v45 = *((_DWORD *)a3 + 10);
  v46 = *((_DWORD *)a2 + 10);
  if (v45 < v46)
  {
    v12 = (char *)a3 + 24;
LABEL_74:
    v14 = 9;
    goto LABEL_7;
  }
  if (v45 > v46)
  {
    v47 = *((unsigned __int8 *)a2 + 24);
    v12 = (char *)a2 + 24;
    if (v47 < 0xA)
      return *((_BYTE *)a3 + 24) != 0;
    goto LABEL_74;
  }
  v48 = *((_DWORD *)a3 + 11);
  v49 = *((_DWORD *)a2 + 11);
  if (v48 > v49)
  {
    v12 = (char *)a3 + 24;
LABEL_80:
    v14 = 10;
    goto LABEL_7;
  }
  if (v48 < v49)
  {
    v50 = *((unsigned __int8 *)a2 + 24);
    v12 = (char *)a2 + 24;
    if (v50 < 0xB)
      return *((_BYTE *)a3 + 24) != 0;
    goto LABEL_80;
  }
  if (!*((_BYTE *)this + 140)
    && *(_BYTE *)a3
    && !*((_BYTE *)this + 44)
    && llvm::tryLatency(a3, a2, a4, v44))
  {
    return *((_BYTE *)a3 + 24) != 0;
  }
  v51 = *(_DWORD *)(*((_QWORD *)a3 + 2) + 192);
  v52 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 192);
  if (*((_DWORD *)a4 + 6) == 1)
  {
    if (v51 < v52)
      goto LABEL_92;
    return 0;
  }
  if (v51 <= v52)
    return 0;
LABEL_92:
  *((_BYTE *)a3 + 24) = 16;
  return 1;
}

uint64_t llvm::GenericScheduler::pickNodeBidirectional(llvm::GenericScheduler *this, BOOL *a2)
{
  llvm::SchedBoundary *v4;
  uint64_t result;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[4];
  uint64_t v16;
  _BYTE v17[4];
  uint64_t v18;

  v4 = (llvm::GenericScheduler *)((char *)this + 848);
  result = llvm::SchedBoundary::pickOnlyChoice((llvm::GenericScheduler *)((char *)this + 848));
  if (result)
  {
    *a2 = 0;
  }
  else
  {
    result = llvm::SchedBoundary::pickOnlyChoice((llvm::GenericScheduler *)((char *)this + 144));
    if (result)
    {
      v6 = 1;
    }
    else
    {
      v17[0] = 0;
      v18 = 0;
      llvm::GenericSchedulerBase::setPolicy((uint64_t)this, (uint64_t)v17, 0, (uint64_t)v4, (llvm::GenericScheduler *)((char *)this + 144));
      v15[0] = 0;
      v16 = 0;
      llvm::GenericSchedulerBase::setPolicy((uint64_t)this, (uint64_t)v15, 0, (uint64_t)this + 144, v4);
      v7 = (_QWORD *)((char *)this + 1600);
      v8 = *((_QWORD *)this + 202);
      if (!v8
        || (*(_WORD *)(v8 + 228) & 0x400) != 0
        || *(unsigned __int8 *)v7 != v17[0]
        || *(_QWORD *)((char *)this + 1604) != v18)
      {
        *((_QWORD *)this + 205) = 0;
        *((_QWORD *)this + 202) = 0;
        *((_QWORD *)this + 203) = 0;
        *(_QWORD *)((char *)this + 1630) = 0;
        *v7 = 0;
        *((_DWORD *)this + 402) = 0;
        llvm::GenericScheduler::pickNodeFromQueue((const llvm::TargetSchedModel **)this, (uint64_t)v4, (uint64_t *)v17, (llvm::RegPressureTracker *)(*((_QWORD *)this + 16) + 4840), (uint64_t)this + 1600);
      }
      v9 = (_QWORD *)((char *)this + 1552);
      v10 = *((_QWORD *)this + 196);
      if (!v10
        || (*(_WORD *)(v10 + 228) & 0x400) != 0
        || *(unsigned __int8 *)v9 != v15[0]
        || *(_QWORD *)((char *)this + 1556) != v16)
      {
        *((_QWORD *)this + 199) = 0;
        *((_QWORD *)this + 196) = 0;
        *((_QWORD *)this + 197) = 0;
        *(_QWORD *)((char *)this + 1582) = 0;
        *v9 = 0;
        *((_DWORD *)this + 390) = 0;
        llvm::GenericScheduler::pickNodeFromQueue((const llvm::TargetSchedModel **)this, (uint64_t)this + 144, (uint64_t *)v15, (llvm::RegPressureTracker *)(*((_QWORD *)this + 16) + 4160), (uint64_t)this + 1552);
      }
      v11 = *((_OWORD *)this + 101);
      v12 = *(_OWORD *)v7;
      v13 = v11;
      v14 = *((_OWORD *)this + 102);
      *((_BYTE *)this + 1576) = 0;
      if (((*(uint64_t (**)(llvm::GenericScheduler *, __int128 *, char *, _QWORD))(*(_QWORD *)this + 136))(this, &v12, (char *)this + 1552, 0) & 1) != 0)
      {
        result = *((_QWORD *)this + 196);
        v6 = *((_BYTE *)this + 1577);
      }
      else
      {
        v6 = BYTE9(v13);
        result = v13;
      }
    }
    *a2 = v6;
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> llvm::GenericScheduler::reschedulePhysReg(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 8);
  if ((a3 & 1) == 0)
  {
    if (!v3 || (*(_BYTE *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
        v3 = *(_QWORD *)(v3 + 8);
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  v4 = a2 + 32;
  v5 = 112;
  if (a3)
    v5 = 32;
  else
    v4 = a2 + 112;
  v6 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a2 + v5);
    v8 = 16 * v6;
    v9 = (_DWORD *)(v7 + 8);
    do
    {
      v10 = *((_QWORD *)v9 - 1);
      if ((v10 & 6) == 0 && (*v9 - 1) <= 0x3FFFFFFE)
      {
        v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        if (a3)
          v12 = *(_DWORD *)(v11 + 120);
        else
          v12 = *(_DWORD *)(v11 + 40);
        if (v12 <= 1)
        {
          v13 = *(_QWORD *)(v11 + 8);
          v14 = *(_QWORD *)(v13 + 16);
          if (*(_WORD *)v14 == 19 || (*(_BYTE *)(v14 + 9) & 0x20) != 0)
          {
            v17 = v9;
            v18 = v8;
            v16 = a3;
            v15 = v3;
            llvm::ScheduleDAGMI::moveInstruction(*(_QWORD *)(a1 + 128), v13, (unint64_t *)v3);
            v9 = v17;
            v8 = v18;
            v3 = v15;
            a3 = v16;
          }
        }
      }
      v9 += 4;
      v8 -= 16;
    }
    while (v8);
  }
}

void llvm::GenericScheduler::schedNode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  if (a3)
  {
    v6 = a1 + 144;
    v7 = *(_DWORD *)(a1 + 292);
    if (*(_DWORD *)(a2 + 248) > v7)
      v7 = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a2 + 248) = v7;
    llvm::SchedBoundary::bumpNode(v6, a2);
    if ((*(_WORD *)(a2 + 228) & 0x20) != 0)
LABEL_5:
      llvm::GenericScheduler::reschedulePhysReg(a1, a2, a3);
  }
  else
  {
    v8 = a1 + 848;
    v9 = *(_DWORD *)(a1 + 996);
    if (*(_DWORD *)(a2 + 252) > v9)
      v9 = *(_DWORD *)(a2 + 252);
    *(_DWORD *)(a2 + 252) = v9;
    llvm::SchedBoundary::bumpNode(v8, a2);
    if ((*(_WORD *)(a2 + 228) & 0x40) != 0)
      goto LABEL_5;
  }
}

uint64_t llvm::PostGenericScheduler::pickNode(llvm::PostGenericScheduler *this, BOOL *a2)
{
  llvm::SchedBoundary *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11[4];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if (*(_QWORD *)(*((_QWORD *)this + 16) + 2680) == *(_QWORD *)(*((_QWORD *)this + 16) + 2688))
    return 0;
  v4 = (llvm::PostGenericScheduler *)((char *)this + 136);
  do
  {
    result = llvm::SchedBoundary::pickOnlyChoice(v4);
    if (!result)
    {
      v13 = 0;
      v14[0] = 0;
      *(_QWORD *)((char *)v14 + 6) = 0;
      v12 = 0;
      v14[2] = 0;
      v11[0] = 1;
      if (*((_DWORD *)this + 99))
      {
        if (*((_BYTE *)this + 400))
          LODWORD(v12) = *((_DWORD *)this + 99);
      }
      llvm::PostGenericScheduler::pickNodeFromQueue((uint64_t)this, (llvm::GenericSchedulerBase::SchedCandidate *)v11);
      result = v13;
    }
  }
  while ((*(_WORD *)(result + 228) & 0x400) != 0);
  *a2 = 1;
  v6 = *((_DWORD *)this + 40);
  if ((v6 & *(_DWORD *)(result + 196)) != 0)
  {
    v9 = *((_QWORD *)this + 25);
    v8 = (char *)this + 200;
    v7 = v9;
    v10 = *((_QWORD *)v8 - 1);
    if (v10 != v9)
    {
      while (*(_QWORD *)v10 != result)
      {
        v10 += 8;
        if (v10 == v7)
        {
          v10 = v7;
          break;
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 31);
    v7 = *((_QWORD *)this + 32);
    if (v10 != v7)
    {
      while (*(_QWORD *)v10 != result)
      {
        v10 += 8;
        if (v10 == v7)
        {
          v10 = *((_QWORD *)this + 32);
          break;
        }
      }
    }
    v6 = *((_DWORD *)this + 54);
    v8 = (char *)this + 256;
  }
  *(_DWORD *)(*(_QWORD *)v10 + 196) &= ~v6;
  *(_QWORD *)v10 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)v8 -= 8;
  return result;
}

void llvm::PostGenericScheduler::schedNode(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 284);
  if (*(_DWORD *)(a2 + 248) > v2)
    v2 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = v2;
  llvm::SchedBoundary::bumpNode(a1 + 136, a2);
}

llvm::ScheduleDAGInstrs *sub_1C51ACD04(uint64_t a1)
{
  llvm::ScheduleDAGInstrs *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (llvm::ScheduleDAGInstrs *)operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E8146528;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 1;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  v7 = v3;
  v4 = sub_1C4838D9C(v2, a1, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 16))(v5, v4);
  return v2;
}

llvm::ScheduleDAGInstrs *sub_1C51ACDAC(uint64_t a1)
{
  llvm::ScheduleDAGInstrs *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v7;

  v2 = (llvm::ScheduleDAGInstrs *)operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E8146528;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  v7 = v3;
  v4 = sub_1C4838D9C(v2, a1, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 16))(v5, v4);
  return v2;
}

void llvm::ScheduleDAGMI::viewGraph(llvm::ScheduleDAGMI *this)
{
  std::string *v2;
  std::string::size_type v3;
  std::string v4;
  void *__p[2];
  std::string::size_type v6;
  void **v7;
  __int16 v8;
  void *v9[2];
  char v10;
  void **v11;
  __int16 v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 56))(v9);
  v12 = 260;
  v11 = v9;
  (*(void (**)(std::string *__return_ptr, llvm::ScheduleDAGMI *))(*(_QWORD *)this + 56))(&v4, this);
  v2 = std::string::insert(&v4, 0, "Scheduling-Units Graph for ");
  v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v8 = 260;
  v7 = __p;
  (*(void (**)(llvm::ScheduleDAGMI *, void ***, void ***))(*(_QWORD *)this + 16))(this, &v11, &v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

uint64_t sub_1C51ACF40()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  *(_QWORD *)sub_1C51AD020(v0, (uint64_t)&unk_1EF8F6F90) = &off_1E81460D0;
  *(_QWORD *)(v0 + 64) = &unk_1E8146108;
  v1 = v0 + 64;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82FB38);
  if (v3 != -1)
  {
    v7[0] = sub_1C51A6550;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82FB38, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v1;
}

uint64_t sub_1C51AD020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E8145EB0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v4 + 64;
  *(_OWORD *)(v4 + 48) = xmmword_1C6612EF0;
  *(_QWORD *)(v4 + 72) = v4 + 88;
  *(_QWORD *)(v4 + 80) = 0x600000000;
  *(_DWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = v4 + 160;
  *(_QWORD *)(v4 + 152) = 0x600000000;
  *(_DWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  sub_1C4776848(a1 + 64, a2);
  *(_QWORD *)a1 = off_1E81461C8;
  *(_QWORD *)(a1 + 64) = &unk_1E81461F0;
  return a1;
}

_QWORD *sub_1C51AD0F0(_QWORD *a1)
{
  llvm::Pass *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;

  a1[8] = &unk_1E8144BE8;
  v2 = (llvm::Pass *)(a1 + 8);
  v3 = (_QWORD *)*((_QWORD *)v2 + 22);
  if (v3 != (_QWORD *)((char *)v2 + 192))
  {
    v9 = v2;
    free(v3);
    v2 = v9;
  }
  v4 = (_QWORD *)a1[21];
  if (v4 != a1 + 23)
  {
    v10 = v2;
    free(v4);
    v2 = v10;
  }
  v5 = (_QWORD *)a1[12];
  if (v5 != a1 + 14)
  {
    v11 = v2;
    free(v5);
    v2 = v11;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &off_1E8145EB0;
  v6 = (uint64_t *)a1[7];
  if (v6)
  {
    v8 = sub_1C61D92E0(v6);
    MEMORY[0x1CAA32FC0](v8, 0x10F0C4030087745);
  }
  return a1;
}

void sub_1C51AD1C8(_QWORD *a1)
{
  llvm::Pass *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;

  a1[8] = &unk_1E8144BE8;
  v2 = (llvm::Pass *)(a1 + 8);
  v3 = (_QWORD *)*((_QWORD *)v2 + 22);
  if (v3 != (_QWORD *)((char *)v2 + 192))
  {
    v8 = v2;
    free(v3);
    v2 = v8;
  }
  v4 = (_QWORD *)a1[21];
  if (v4 != a1 + 23)
  {
    v9 = v2;
    free(v4);
    v2 = v9;
  }
  v5 = (_QWORD *)a1[12];
  if (v5 != a1 + 14)
  {
    v10 = v2;
    free(v5);
    v2 = v10;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &off_1E8145EB0;
  v6 = (uint64_t *)a1[7];
  if (v6)
  {
    v7 = sub_1C61D92E0(v6);
    MEMORY[0x1CAA32FC0](v7, 0x10F0C4030087745);
  }
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51AD2B4(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage((llvm::MachineFunctionPass *)(a1 + 64), this);
}

uint64_t sub_1C51AD390(uint64_t a1, uint64_t a2)
{
  llvm::Pass *v4;
  uint64_t result;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  uint64_t GenericSchedLive;
  llvm::ScheduleDAGInstrs *v17;
  llvm::MachineSchedContext *v18;

  v4 = (llvm::Pass *)(a1 + 64);
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)(a1 + 64), *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  if (word_1ED7FC0F8)
  {
    if (!byte_1ED7FC170)
      return 0;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 232))(*(_QWORD *)(a2 + 16));
    if (!(_DWORD)result)
      return result;
  }
  *(_QWORD *)(a1 + 8) = a2;
  v6 = **(void ****)(a1 + 72);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineLoopInfo::ID);
  v8 = **(void ****)(a1 + 72);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineDominatorTree::ID);
  v10 = **(void ****)(a1 + 72);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::TargetPassConfig::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::TargetPassConfig::ID);
  v12 = **(void ****)(a1 + 72);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v14 = **(void ****)(a1 + 72);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::LiveIntervals::ID);
  if (byte_1ED82FA38)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "Before machine scheduling.", 1);
  llvm::RegisterClassInfo::runOnMachineFunction(*(llvm::RegisterClassInfo **)(a1 + 56), *(const llvm::MachineFunction **)(a1 + 8));
  if ((char *)xmmword_1ED7FC2F0 == (char *)sub_1C51A66A8)
  {
    v17 = (llvm::ScheduleDAGInstrs *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32), a1);
    if (v17)
      goto LABEL_23;
    GenericSchedLive = llvm::createGenericSchedLive((llvm *)a1, v18);
  }
  else
  {
    GenericSchedLive = xmmword_1ED7FC2F0(a1);
  }
  v17 = (llvm::ScheduleDAGInstrs *)GenericSchedLive;
LABEL_23:
  sub_1C51AD784(a1, v17, 0);
  if (byte_1ED82FA38)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "After machine scheduling.", 1);
  (*(void (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)v17 + 8))(v17);
  return 1;
}

uint64_t *sub_1C51AD5F0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *result;
  uint64_t *v6;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  *((_QWORD *)this - 8) = &off_1E8145EB0;
  result = (uint64_t *)*((_QWORD *)this - 1);
  if (result)
  {
    v6 = sub_1C61D92E0(result);
    return (uint64_t *)MEMORY[0x1CAA32FC0](v6, 0x10F0C4030087745);
  }
  return result;
}

void sub_1C51AD69C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  *((_QWORD *)this - 8) = &off_1E8145EB0;
  v5 = (uint64_t *)*((_QWORD *)this - 1);
  if (v5)
  {
    v6 = sub_1C61D92E0(v5);
    MEMORY[0x1CAA32FC0](v6, 0x10F0C4030087745);
  }
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51AD764(uint64_t a1, llvm::AnalysisUsage *a2)
{
  return sub_1C51AD2B4(a1 - 64, a2);
}

uint64_t sub_1C51AD76C(uint64_t a1, uint64_t a2)
{
  return sub_1C51AD390(a1 - 64, a2);
}

uint64_t sub_1C51AD784(uint64_t a1, llvm::ScheduleDAGInstrs *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  llvm *v36;
  unint64_t v37;
  llvm::raw_ostream *v38;
  size_t v39;
  char *Name;
  size_t v41;
  void *v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  llvm *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::Value *v51;
  size_t v52;
  char *v53;
  size_t v54;
  _WORD *v55;
  uint64_t v57;
  char v59;
  _QWORD v60[2];
  int v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[50];

  v64[48] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 328);
  v57 = v4 + 320;
  if (v5 != v4 + 320)
  {
    while (1)
    {
      (*(void (**)(llvm::ScheduleDAGInstrs *, uint64_t))(*(_QWORD *)a2 + 80))(a2, v5);
      v62 = v64;
      v63 = 0x1000000000;
      v59 = (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 72))(a2);
      v7 = *(_QWORD *)(v5 + 32);
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 104))(*(_QWORD *)(v7 + 16));
      v9 = (_QWORD *)(v5 + 48);
      if (v5 + 48 != *(_QWORD *)(v5 + 56))
      {
        v10 = v8;
        v11 = v5 + 48;
        do
        {
          if ((_QWORD *)v11 != v9)
            goto LABEL_11;
          v12 = *v9 & 0xFFFFFFFFFFFFFFF8;
          if (!v12 || (*(_BYTE *)v12 & 4) == 0)
          {
            while ((*(_WORD *)(v12 + 44) & 4) != 0)
              v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
          }
          v13 = v5 + 48;
          if (sub_1C51ADD7C(v12, v5, v7, v10))
          {
LABEL_11:
            v13 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
            if (!v13 || (*(_BYTE *)v13 & 4) == 0)
            {
              while ((*(_WORD *)(v13 + 44) & 4) != 0)
                v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          if (v13 == *(_QWORD *)(v5 + 56))
          {
            v11 = v13;
          }
          else
          {
            v14 = 0;
            v11 = v13;
            do
            {
              v15 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
              if (!v15 || (*(_BYTE *)v15 & 4) == 0)
              {
                while ((*(_WORD *)(v15 + 44) & 4) != 0)
                  v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
              }
              if ((sub_1C51ADD7C(v15, v5, v7, v10) & 1) != 0)
                break;
              v16 = **(unsigned __int16 **)(v15 + 16);
              v17 = v16 == 23 || (v16 - 18) >= 0xFFFFFFFB;
              v18 = *(_QWORD *)v11;
              if (!v17)
                ++v14;
              v11 = v18 & 0xFFFFFFFFFFFFFFF8;
              if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v11 & 4) == 0)
              {
                while ((*(_WORD *)(v11 + 44) & 4) != 0)
                  v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            while (v11 != *(_QWORD *)(v5 + 56));
            if (v14)
            {
              v60[0] = v11;
              v60[1] = v13;
              v61 = v14;
              v19 = (char *)v62;
              if (v63 >= HIDWORD(v63))
              {
                v23 = v63 + 1;
                if (v62 <= v60 && (char *)v62 + 24 * v63 > (char *)v60)
                {
                  v24 = (char *)v60 - (_BYTE *)v62;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v23, 24);
                  v19 = (char *)v62;
                  v20 = (char *)v62 + v24;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v23, 24);
                  v20 = (char *)v60;
                  v19 = (char *)v62;
                }
              }
              else
              {
                v20 = (char *)v60;
              }
              v21 = &v19[24 * v63];
              v22 = *(_OWORD *)v20;
              *((_QWORD *)v21 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v21 = v22;
              LODWORD(v63) = v63 + 1;
            }
          }
        }
        while (v11 != *(_QWORD *)(v5 + 56));
      }
      v25 = (char *)v62;
      v26 = v63;
      if ((v59 & 1) != 0)
      {
        v27 = (_BYTE *)&unk_1ED82F000;
        if ((_DWORD)v63)
        {
          v28 = (char *)v62 + 24 * v63 - 24;
          if (v62 < v28)
          {
            v29 = (char *)v62 + 24;
            do
            {
              v30 = *(_OWORD *)(v29 - 24);
              v31 = *((_QWORD *)v29 - 1);
              v32 = *((_DWORD *)v28 + 4);
              *(_OWORD *)(v29 - 24) = *(_OWORD *)v28;
              *((_DWORD *)v29 - 2) = v32;
              *((_DWORD *)v28 + 4) = v31;
              *(_OWORD *)v28 = v30;
              v28 -= 24;
              v17 = v29 >= v28;
              v29 += 24;
            }
            while (!v17);
            v25 = (char *)v62;
            v26 = v63;
          }
        }
      }
      else
      {
        v27 = &unk_1ED82F000;
      }
      if (v26)
        break;
LABEL_89:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 88))(a2);
      if ((a3 & 1) != 0)
        llvm::ScheduleDAGInstrs::fixupKills(a2, (const llvm::MachineFunction **)v5);
      if (v62 != v64)
        free(v62);
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v57)
        return (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 120))(a2);
    }
    v33 = &v25[24 * v26];
    while (1)
    {
      v34 = *(_QWORD **)v25;
      v35 = (_QWORD *)*((_QWORD *)v25 + 1);
      v36 = (llvm *)(*(uint64_t (**)(llvm::ScheduleDAGInstrs *, uint64_t, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)a2 + 96))(a2, v5, *(_QWORD *)v25, v35, *((unsigned int *)v25 + 4));
      if (v34 == v35)
        goto LABEL_83;
      v37 = *v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v37 || (*(_BYTE *)v37 & 4) == 0)
      {
        while ((*(_WORD *)(v37 + 44) & 4) != 0)
          v37 = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v37 == v34)
        goto LABEL_83;
      if (v27[2424])
        break;
LABEL_82:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 112))(a2);
LABEL_83:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 104))(a2);
      v25 += 24;
      if (v25 == v33)
        goto LABEL_89;
    }
    v38 = (llvm::raw_ostream *)llvm::errs(v36);
    Name = llvm::Value::getName(**(llvm::Value ***)(a1 + 8));
    v41 = v39;
    v42 = (void *)*((_QWORD *)v38 + 4);
    if (v39 <= *((_QWORD *)v38 + 3) - (_QWORD)v42)
    {
      if (v39)
      {
        v42 = memcpy(v42, Name, v39);
        *((_QWORD *)v38 + 4) += v41;
      }
    }
    else
    {
      v42 = llvm::raw_ostream::write(v38, Name, v39);
    }
    v43 = (llvm::raw_ostream *)llvm::errs((llvm *)v42);
    v44 = *((_QWORD *)v43 + 4);
    if ((unint64_t)(*((_QWORD *)v43 + 3) - v44) > 5)
    {
      *(_WORD *)(v44 + 4) = 8238;
      *(_DWORD *)v44 = 1650599226;
      *((_QWORD *)v43 + 4) += 6;
    }
    else
    {
      v43 = llvm::raw_ostream::write(v43, ":%bb. ", 6uLL);
    }
    v45 = *(int *)(v5 + 24);
    if ((v45 & 0x80000000) != 0)
    {
      v45 = -(uint64_t)v45;
      v46 = 1;
    }
    else
    {
      v46 = 0;
    }
    v47 = sub_1C5E21910(v43, v45, 0, 0, v46);
    v48 = (llvm::raw_ostream *)llvm::errs(v47);
    v49 = v48;
    v50 = (_BYTE *)*((_QWORD *)v48 + 4);
    if (*((_BYTE **)v48 + 3) == v50)
    {
      llvm::raw_ostream::write(v48, " ", 1uLL);
    }
    else
    {
      *v50 = 32;
      ++*((_QWORD *)v48 + 4);
    }
    v51 = *(llvm::Value **)(v5 + 16);
    if (v51)
    {
      v53 = llvm::Value::getName(v51);
      v54 = v52;
      v55 = (_WORD *)*((_QWORD *)v49 + 4);
      if (v52 <= *((_QWORD *)v49 + 3) - (_QWORD)v55)
      {
        if (v52)
        {
          memcpy(v55, v53, v52);
          v55 = (_WORD *)(*((_QWORD *)v49 + 4) + v54);
          *((_QWORD *)v49 + 4) = v55;
        }
        goto LABEL_80;
      }
      llvm::raw_ostream::write(v49, v53, v52);
    }
    v55 = (_WORD *)*((_QWORD *)v49 + 4);
LABEL_80:
    if (*((_QWORD *)v49 + 3) - (_QWORD)v55 > 1uLL)
    {
      *v55 = 2592;
      *((_QWORD *)v49 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v49, " \n", 2uLL);
    }
    goto LABEL_82;
  }
  return (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)a2 + 120))(a2);
}

uint64_t sub_1C51ADD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v4 & 0x80) == 0)
    {
      v7 = a1;
      while ((*(_WORD *)(v7 + 44) & 8) != 0)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8) & 0x80) != 0)
          return 1;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 848))(a4, a1, a2, a3);
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 848))(a4, a1, a2, a3);
  }
  return 1;
}

uint64_t sub_1C51ADDE8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  *(_QWORD *)sub_1C51AD020(v0, (uint64_t)&unk_1EF8F6F98) = &off_1E81462B0;
  *(_QWORD *)(v0 + 64) = &unk_1E81462E8;
  v1 = v0 + 64;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FBC68);
  if (v3 != -1)
  {
    v7[0] = sub_1C51A6604;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FBC68, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v1;
}

_QWORD *sub_1C51ADEC8(_QWORD *a1)
{
  llvm::Pass *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;

  a1[8] = &unk_1E8144BE8;
  v2 = (llvm::Pass *)(a1 + 8);
  v3 = (_QWORD *)*((_QWORD *)v2 + 22);
  if (v3 != (_QWORD *)((char *)v2 + 192))
  {
    v9 = v2;
    free(v3);
    v2 = v9;
  }
  v4 = (_QWORD *)a1[21];
  if (v4 != a1 + 23)
  {
    v10 = v2;
    free(v4);
    v2 = v10;
  }
  v5 = (_QWORD *)a1[12];
  if (v5 != a1 + 14)
  {
    v11 = v2;
    free(v5);
    v2 = v11;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &off_1E8145EB0;
  v6 = (uint64_t *)a1[7];
  if (v6)
  {
    v8 = sub_1C61D92E0(v6);
    MEMORY[0x1CAA32FC0](v8, 0x10F0C4030087745);
  }
  return a1;
}

void sub_1C51ADFA0(_QWORD *a1)
{
  llvm::Pass *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;

  a1[8] = &unk_1E8144BE8;
  v2 = (llvm::Pass *)(a1 + 8);
  v3 = (_QWORD *)*((_QWORD *)v2 + 22);
  if (v3 != (_QWORD *)((char *)v2 + 192))
  {
    v8 = v2;
    free(v3);
    v2 = v8;
  }
  v4 = (_QWORD *)a1[21];
  if (v4 != a1 + 23)
  {
    v9 = v2;
    free(v4);
    v2 = v9;
  }
  v5 = (_QWORD *)a1[12];
  if (v5 != a1 + 14)
  {
    v10 = v2;
    free(v5);
    v2 = v10;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &off_1E8145EB0;
  v6 = (uint64_t *)a1[7];
  if (v6)
  {
    v7 = sub_1C61D92E0(v6);
    MEMORY[0x1CAA32FC0](v7, 0x10F0C4030087745);
  }
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51AE088(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::TargetPassConfig::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage((llvm::MachineFunctionPass *)(a1 + 64), this);
}

uint64_t sub_1C51AE108(uint64_t a1, uint64_t a2)
{
  llvm::Pass *v4;
  uint64_t result;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  llvm::MachineSchedContext *v12;
  llvm::ScheduleDAGInstrs *v13;
  llvm::ScheduleDAGInstrs *v14;

  v4 = (llvm::Pass *)(a1 + 64);
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)(a1 + 64), *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  if (word_1ED7FC1B8)
  {
    if (!byte_1ED7FC230)
      return 0;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 272))(*(_QWORD *)(a2 + 16));
    if (!(_DWORD)result)
      return result;
  }
  *(_QWORD *)(a1 + 8) = a2;
  v6 = **(void ****)(a1 + 72);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineLoopInfo::ID);
  v8 = **(void ****)(a1 + 72);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetPassConfig::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetPassConfig::ID);
  v10 = **(void ****)(a1 + 72);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  if (byte_1ED82FA38)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "Before post machine scheduling.", 1);
  v13 = (llvm::ScheduleDAGInstrs *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32), a1);
  if (!v13)
  {
    llvm::createGenericSchedPostRA((llvm *)a1, v12);
    v13 = v14;
  }
  sub_1C51AD784(a1, v13, 1);
  if (byte_1ED82FA38)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "After post machine scheduling.", 1);
  (*(void (**)(llvm::ScheduleDAGInstrs *))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

uint64_t *sub_1C51AE2C8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *result;
  uint64_t *v6;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  *((_QWORD *)this - 8) = &off_1E8145EB0;
  result = (uint64_t *)*((_QWORD *)this - 1);
  if (result)
  {
    v6 = sub_1C61D92E0(result);
    return (uint64_t *)MEMORY[0x1CAA32FC0](v6, 0x10F0C4030087745);
  }
  return result;
}

void sub_1C51AE374(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  *((_QWORD *)this - 8) = &off_1E8145EB0;
  v5 = (uint64_t *)*((_QWORD *)this - 1);
  if (v5)
  {
    v6 = sub_1C61D92E0(v5);
    MEMORY[0x1CAA32FC0](v6, 0x10F0C4030087745);
  }
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51AE438(uint64_t a1, llvm::AnalysisUsage *a2)
{
  return sub_1C51AE088(a1 - 64, a2);
}

uint64_t sub_1C51AE440(uint64_t a1, uint64_t a2)
{
  return sub_1C51AE108(a1 - 64, a2);
}

_QWORD *sub_1C51AE448(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81463A8;
  v2 = a1 + 81;
  v3 = (_QWORD *)a1[84];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  qword_1ED82FB50 = 0;
  a1[20] = off_1E8146410;
  a1[21] = &off_1E8146498;
  v5 = (_QWORD *)a1[23];
  if (v5 != a1 + 25)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C51AE4D4(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C51AE4F0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2);
}

void sub_1C51AE504(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  _QWORD v19[6];
  char v20;

  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a5;
  v19[3] = a6;
  v20 = 1;
  v19[4] = &off_1E81464E8;
  v19[5] = a4;
  v10 = (unint64_t *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = (char *)v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v9 + 56 * v11 > (unint64_t)v19;
    if (v9 <= (unint64_t)v19 && v17)
    {
      v18 = (char *)v19 - v9;
      sub_1C51AE610(a1 + 16, v16);
      v9 = *v10;
      v12 = &v18[*v10];
    }
    else
    {
      sub_1C51AE610(a1 + 16, v16);
      v9 = *v10;
      v12 = (char *)v19;
    }
  }
  v13 = v9 + 56 * *(unsigned int *)(a1 + 24);
  v14 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 32) = &off_1E8146508;
  v15 = *((_QWORD *)v12 + 5);
  *(_BYTE *)(v13 + 48) = v12[48];
  *(_QWORD *)(v13 + 32) = &off_1E81464E8;
  *(_QWORD *)(v13 + 40) = v15;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

_OWORD *sub_1C51AE610(uint64_t a1, unint64_t a2)
{
  _OWORD *result;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  unint64_t v12;

  v12 = 0;
  result = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v12);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = result;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &off_1E8146508;
      v9 = *((_QWORD *)v4 + 5);
      *((_BYTE *)v7 + 48) = v4[48];
      *((_QWORD *)v7 + 4) = &off_1E81464E8;
      *((_QWORD *)v7 + 5) = v9;
      v4 += 56;
      v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v12;
  if (v4 != (char *)(a1 + 16))
  {
    v11 = result;
    free(v4);
    result = v11;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 12) = v10;
  return result;
}

uint64_t sub_1C51AE6C8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 288);
  if (v2 != (void *)(a1 + 304))
    free(v2);
  v3 = *(void **)(a1 + 144);
  if (v3 != (void *)(a1 + 160))
    free(v3);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

_QWORD *sub_1C51AE730(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8146528;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C51AE76C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8146528;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C51AE7B8(_QWORD *a1, llvm::ScheduleDAGMILive *this)
{
  uint64_t v3;

  a1[1] = this;
  llvm::ScheduleDAGMILive::computeDFSResult(this);
  v3 = a1[1];
  a1[2] = *(_QWORD *)(v3 + 2720);
  a1[3] = v3 + 2728;
  a1[6] = a1[5];
}

uint64_t sub_1C51AE7F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  return sub_1C51AEAC0(v2, v1, (uint64_t)&v4);
}

uint64_t sub_1C51AE830(uint64_t a1, _BYTE *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(char **)(a1 + 40);
  v3 = *(char **)(a1 + 48);
  if (v2 == v3)
    return 0;
  v18 = *(_OWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v5 = v3 - v2;
  if (v3 - v2 >= 9)
  {
    v6 = 0;
    v7 = v5 >> 3;
    v16 = *(_QWORD *)v2;
    v17 = a2;
    v8 = (unint64_t)((v5 >> 3) - 2) >> 1;
    v9 = (uint64_t *)v2;
    do
    {
      v10 = &v9[v6 + 1];
      v11 = (2 * v6) | 1;
      v12 = 2 * v6 + 2;
      if (v12 < v7 && sub_1C51AEC24((uint64_t)&v18, *v10, v9[v6 + 2]))
      {
        ++v10;
        v11 = v12;
      }
      *v9 = *v10;
      v9 = v10;
      v6 = v11;
    }
    while (v11 <= v8);
    v13 = (uint64_t *)(v3 - 8);
    if (v10 == (uint64_t *)(v3 - 8))
    {
      *v10 = v16;
    }
    else
    {
      *v10 = *v13;
      *v13 = v16;
      sub_1C51AED74((uint64_t)v2, (uint64_t)(v10 + 1), (uint64_t)&v18, ((char *)(v10 + 1) - v2) >> 3);
    }
    a2 = v17;
  }
  v15 = *(_QWORD *)(a1 + 48);
  result = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(a1 + 48) = v15 - 8;
  *a2 = 0;
  return result;
}

uint64_t sub_1C51AE96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  return sub_1C51AEAC0(v2, v1, (uint64_t)&v4);
}

uint64_t sub_1C51AE9AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  v5 = *(_QWORD **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)(a1 + 40);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = *(_QWORD **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  *(_QWORD *)(a1 + 48) = v6;
  v17 = *(_OWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 32);
  return sub_1C51AED74(v15, v6, (uint64_t)&v17, (v6 - v15) >> 3);
}

uint64_t sub_1C51AEAC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2 - result;
  if (a2 - result >= 9)
  {
    v5 = result;
    v6 = v3 >> 3;
    v7 = (unint64_t)((v3 >> 3) - 2) >> 1;
    v8 = v7;
    do
    {
      if (v7 >= (8 * v8) >> 3)
      {
        v9 = (8 * v8) >> 2;
        v10 = v9 | 1;
        v11 = (uint64_t *)(v5 + 8 * (v9 | 1));
        v12 = v9 + 2;
        if (v9 + 2 < v6 && sub_1C51AEC24(a3, *v11, v11[1]))
        {
          ++v11;
          v10 = v12;
        }
        v13 = (uint64_t *)(v5 + 8 * v8);
        result = sub_1C51AEC24(a3, *v11, *v13);
        if ((result & 1) == 0)
        {
          v14 = *v13;
          do
          {
            v15 = v13;
            v13 = v11;
            *v15 = *v11;
            if (v7 < v10)
              break;
            v16 = (2 * v10) | 1;
            v11 = (uint64_t *)(v5 + 8 * v16);
            v17 = 2 * v10 + 2;
            if (v17 < v6)
            {
              if (sub_1C51AEC24(a3, *v11, v11[1]))
              {
                ++v11;
                v16 = v17;
              }
            }
            result = sub_1C51AEC24(a3, *v11, v14);
            v10 = v16;
          }
          while (!(_DWORD)result);
          *v13 = v14;
        }
      }
    }
    while (v8-- > 0);
  }
  return result;
}

uint64_t sub_1C51AEC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v7 = *(unsigned int *)(a2 + 192);
  if (v6 == *(_QWORD *)(*(_QWORD *)a1 + 16))
    goto LABEL_5;
  v8 = *(unsigned int *)(v6 + 8 * v7 + 4);
  v9 = *(unsigned int *)(v6 + 8 * *(unsigned int *)(a3 + 192) + 4);
  if ((_DWORD)v8 == (_DWORD)v9)
    goto LABEL_5;
  v10 = **(_QWORD **)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 8 * (v8 >> 6)) >> v8;
  v12 = *(_QWORD *)(v10 + 8 * (v9 >> 6)) >> v9;
  if (((v11 ^ v12) & 1) != 0)
    return v12 & 1;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 200);
  v14 = *(_DWORD *)(v13 + 4 * v8);
  LODWORD(v13) = *(_DWORD *)(v13 + 4 * v9);
  v15 = v14 >= v13;
  if (v14 == (_DWORD)v13)
  {
LABEL_5:
    v16 = *(_DWORD *)(v6 + 8 * v7);
    if (*(_BYTE *)(a1 + 16))
    {
      if ((*(_BYTE *)(a2 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      }
      v17 = *(_DWORD *)(a2 + 240) + 1;
      v18 = *(_DWORD *)(v6 + 8 * *(unsigned int *)(a3 + 192));
      if ((*(_BYTE *)(a3 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)a3);
      v15 = v16 * (unint64_t)(*(_DWORD *)(a3 + 240) + 1) >= v18 * (unint64_t)v17;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
        v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      }
      v19 = *(_DWORD *)(a2 + 240) + 1;
      v20 = *(_DWORD *)(v6 + 8 * *(unsigned int *)(a3 + 192));
      if ((*(_BYTE *)(a3 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)a3);
      v15 = v20 * (unint64_t)v19 >= v16 * (unint64_t)(*(_DWORD *)(a3 + 240) + 1);
    }
  }
  LOBYTE(v12) = !v15;
  return v12 & 1;
}

uint64_t sub_1C51AED74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = sub_1C51AEC24(a3, *v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = sub_1C51AEC24(a3, *v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

char **sub_1C51AEE10(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    do
    {
      if (*(_DWORD *)&v1[v3 - 8] >= 0x41u)
      {
        v4 = *(_QWORD *)&v1[v3 - 16];
        if (v4)
        {
          v7 = result;
          v5 = v3;
          v6 = v1;
          MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
          v3 = v5;
          v1 = v6;
          result = v7;
        }
      }
      v3 -= 16;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v8 = result;
    free(v1);
    return v8;
  }
  return result;
}

__n128 sub_1C51AEEA8(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FBEB0, "misched-cluster", 0xFuLL);
  word_1ED7FBEBA = (32 * (*a1 & 3)) | word_1ED7FBEBA & 0xFF9F;
  result = *a2;
  xmmword_1ED7FBED0 = (__int128)*a2;
  v7 = *a3;
  byte_1ED7FBF30 = **a3;
  byte_1ED7FBF41 = 1;
  byte_1ED7FBF40 = *v7;
  return result;
}

__n128 sub_1C51AEF2C(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FC270, "misched", 7uLL);
  v6 = *a1;
  xmmword_1ED7FC2F0 = (uint64_t (*)(_QWORD))**a1;
  byte_1ED7FC308 = 1;
  qword_1ED7FC300 = *v6;
  word_1ED7FC27A = (32 * (*a2 & 3)) | word_1ED7FC27A & 0xFF9F;
  result = *a3;
  xmmword_1ED7FC290 = (__int128)*a3;
  return result;
}

void sub_1C51AEFB0()
{
  uint64_t i;

  for (i = llvm::MachineSchedRegistry::Registry; i; i = *(_QWORD *)i)
    sub_1C51AE504((uint64_t)&unk_1ED7FC318, *(unsigned __int8 **)(i + 8), *(_QWORD *)(i + 16), *(_QWORD *)(i + 40), *(_QWORD *)(i + 24), *(_QWORD *)(i + 32));
  qword_1ED82FB50 = (uint64_t)&qword_1ED7FC310;
}

__n128 sub_1C51AF008(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FC0F0, "enable-misched", 0xEuLL);
  result = *a1;
  xmmword_1ED7FC110 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7FC170 = **a2;
  byte_1ED7FC181 = 1;
  byte_1ED7FC180 = *v7;
  word_1ED7FC0FA = (32 * (*a3 & 3)) | word_1ED7FC0FA & 0xFF9F;
  return result;
}

__n128 sub_1C51AF08C(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FC1B0, "enable-post-misched", 0x13uLL);
  result = *a1;
  xmmword_1ED7FC1D0 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7FC230 = **a2;
  byte_1ED7FC241 = 1;
  byte_1ED7FC240 = *v7;
  word_1ED7FC1BA = (32 * (*a3 & 3)) | word_1ED7FC1BA & 0xFF9F;
  return result;
}

uint64_t *sub_1C51AF110(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(result[34] + a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    do
    {
      if ((*(_DWORD *)(v4 + 32 * v2) & 0x7FFFFFFF) == a2)
      {
        v5 = *(unsigned int *)(v4 + 32 * v2 + 24);
        if ((_DWORD)v5 != -1 && *(_DWORD *)(v4 + 32 * v5 + 28) == -1)
          break;
      }
      v2 += 256;
    }
    while (v2 < v3);
  }
  return result;
}

void sub_1C51AF18C()
{
  JUMPOUT(0x1CAA32FC0);
}

char **sub_1C51AF1A0(uint64_t a1, _QWORD *a2)
{
  const llvm::SUnit *v2;
  const llvm::SUnit *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _BOOL4 v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v36;
  int *v37;
  int v38;
  int *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::ScheduleDAGTopologicalSort *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const llvm::SUnit **v77;
  const llvm::SUnit *v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  const llvm::SUnit *v98;
  llvm::SUnit *v99;
  uint64_t v100;
  llvm::SUnit *v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  llvm::SUnit *v106;
  _DWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  llvm::SUnit *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  char **v115;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  llvm::SUnit *v122;
  unsigned int *v123;
  llvm::SUnit *v124;
  uint64_t v125;
  uint64_t v126;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[2];
  int v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  _QWORD v143[5];
  int v144;
  const llvm::SUnit *v145;
  char *v146;
  uint64_t v147;
  _BYTE v148[32];
  uint64_t v149;
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v137 = (char *)&v139;
  v138 = 0x2000000000;
  v2 = (const llvm::SUnit *)a2[6];
  v3 = (const llvm::SUnit *)a2[7];
  if (v2 == v3)
    return sub_1C51AFDA0(&v137);
  do
  {
    v4 = *((_QWORD *)v2 + 1);
    v5 = *(unsigned __int16 **)(v4 + 16);
    v6 = *v5 - 1;
    if (*(_BYTE *)(a1 + 24))
    {
      if (v6 <= 1 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + 48) & 8) != 0)
        goto LABEL_16;
      v7 = *((_QWORD *)v5 + 1);
      if ((*(_WORD *)(v4 + 44) & 0xC) == 0 || (*(_WORD *)(v4 + 44) & 4) != 0)
      {
        if ((v7 & 0x80000) == 0)
          goto LABEL_28;
LABEL_16:
        v140 = &v142;
        v141 = (void *)0x400000000;
        v135[0] = 0;
        LOBYTE(v133) = 0;
        LODWORD(v130) = 0;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 680))(*(_QWORD *)(a1 + 8)))
        {
          v11 = v140;
          v12 = v141;
          v145 = v2;
          v146 = v148;
          v147 = 0x400000000;
          if (v141 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, (uint64_t)v148, v141, 8);
            v13 = v147;
            goto LABEL_21;
          }
          if ((_DWORD)v141)
          {
            v13 = 0;
LABEL_21:
            memcpy(&v146[8 * v13], v11, 8 * v12);
            v14 = v147;
          }
          else
          {
            v14 = 0;
          }
          LODWORD(v147) = v14 + v12;
          v149 = v135[0];
          v150 = v130;
          v15 = sub_1C51AFE14((uint64_t)&v137, (unint64_t)&v145);
          v16 = v137;
          v17 = v138;
          v18 = &v137[72 * v138];
          *(_QWORD *)v18 = *(_QWORD *)v15;
          *((_QWORD *)v18 + 2) = 0x400000000;
          *((_QWORD *)v18 + 1) = v18 + 24;
          v19 = (uint64_t)(v18 + 8);
          if (*(_DWORD *)(v15 + 16))
            sub_1C614D378(v19, v15 + 8);
          v20 = &v16[72 * v17];
          v21 = *(_QWORD *)(v15 + 56);
          *((_DWORD *)v20 + 16) = *(_DWORD *)(v15 + 64);
          *((_QWORD *)v20 + 7) = v21;
          LODWORD(v138) = v138 + 1;
          if (v146 != v148)
            free(v146);
        }
        if (v140 != &v142)
          free(v140);
        goto LABEL_28;
      }
      v22 = *((_QWORD *)v2 + 1);
      if ((v7 & 0x80000) != 0)
        goto LABEL_16;
      while ((*(_WORD *)(v22 + 44) & 8) != 0)
      {
        v22 = *(_QWORD *)(v22 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v22 + 16) + 10) & 8) != 0)
          goto LABEL_16;
      }
    }
    else
    {
      if (v6 <= 1 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + 48) & 0x10) != 0)
        goto LABEL_16;
      v9 = *((_QWORD *)v5 + 1);
      if ((*(_WORD *)(v4 + 44) & 0xC) == 0 || (*(_WORD *)(v4 + 44) & 4) != 0)
      {
        if ((v9 & 0x100000) == 0)
          goto LABEL_28;
        goto LABEL_16;
      }
      v23 = *((_QWORD *)v2 + 1);
      if ((v9 & 0x100000) != 0)
        goto LABEL_16;
      while ((*(_WORD *)(v23 + 44) & 8) != 0)
      {
        v23 = *(_QWORD *)(v23 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v23 + 16) + 10) & 0x10) != 0)
          goto LABEL_16;
      }
    }
LABEL_28:
    v2 = (const llvm::SUnit *)((char *)v2 + 272);
  }
  while (v2 != v3);
  if (v138 < 2)
    return sub_1C51AFDA0(&v137);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v24 = v137;
  if (byte_1ED7FBFF0)
    v25 = 1;
  else
    v25 = dword_1ED7FC0B0 < 0xF0F0F0F0F0F0F0F1
                                        * ((uint64_t)(a2[7] - a2[6]) >> 4)
                                        * v138
                                        / 0x3E8;
  v129 = v25;
  v26 = &v137[72 * v138];
  do
  {
    if (!v129)
    {
      v27 = 0;
      goto LABEL_73;
    }
    v27 = -252645135 * ((a2[7] - a2[6]) >> 4);
    v28 = *(unsigned int *)(*(_QWORD *)v24 + 40);
    if (!(_DWORD)v28)
      goto LABEL_73;
    v29 = *(uint64_t **)(*(_QWORD *)v24 + 32);
    v30 = &v29[2 * v28];
    while (1)
    {
      v31 = *v29;
      if ((*v29 & 6) == 0)
        goto LABEL_55;
      if (*(_BYTE *)(a1 + 24))
        goto LABEL_53;
      if ((v31 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_55;
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 8);
      v33 = *(unsigned __int16 **)(v32 + 16);
      if (*v33 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v32 + 32) + 48) & 0x10) != 0)
        goto LABEL_53;
      v34 = *((_QWORD *)v33 + 1);
      if ((*(_WORD *)(v32 + 44) & 0xC) != 0 && (*(_WORD *)(v32 + 44) & 4) == 0)
        break;
      if ((v34 & 0x100000) != 0)
        goto LABEL_53;
LABEL_55:
      v29 += 2;
      if (v29 == v30)
        goto LABEL_73;
    }
    if ((v34 & 0x100000) == 0)
    {
      while ((*(_WORD *)(v32 + 44) & 8) != 0)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 10) & 0x10) != 0)
          goto LABEL_53;
      }
      goto LABEL_55;
    }
LABEL_53:
    if ((*v29 & 6) == 6 && *((_DWORD *)v29 + 2) == 3)
      goto LABEL_55;
    v27 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 192);
LABEL_73:
    if (!v132)
    {
      v37 = 0;
      goto LABEL_85;
    }
    v36 = (v132 - 1) & (37 * v27);
    v37 = (int *)(v130 + 2328 * v36);
    v38 = *v37;
    if (v27 != *v37)
    {
      v39 = 0;
      v40 = 1;
      while (v38 != -1)
      {
        if (v39)
          v41 = 0;
        else
          v41 = v38 == -2;
        if (v41)
          v39 = v37;
        v42 = v36 + v40++;
        v36 = v42 & (v132 - 1);
        v37 = (int *)(v130 + 2328 * v36);
        v38 = *v37;
        if (v27 == *v37)
          goto LABEL_90;
      }
      if (v39)
        v37 = v39;
LABEL_85:
      if (4 * (int)v131 + 4 < 3 * v132)
      {
        if (v132 + ~(_DWORD)v131 - HIDWORD(v131) > v132 >> 3)
          goto LABEL_87;
        sub_1C51AFFA0(&v130, v132);
        if (v132)
        {
          v56 = (v132 - 1) & (37 * v27);
          v37 = (int *)(v130 + 2328 * v56);
          v57 = *v37;
          if (v27 != *v37)
          {
            v52 = 0;
            v58 = 1;
            while (v57 != -1)
            {
              if (v52)
                v59 = 0;
              else
                v59 = v57 == -2;
              if (v59)
                v52 = v37;
              v60 = v56 + v58++;
              v56 = v60 & (v132 - 1);
              v37 = (int *)(v130 + 2328 * v56);
              v57 = *v37;
              if (v27 == *v37)
                goto LABEL_87;
            }
            goto LABEL_120;
          }
          goto LABEL_87;
        }
LABEL_119:
        v37 = 0;
        goto LABEL_87;
      }
      sub_1C51AFFA0(&v130, 2 * v132);
      if (!v132)
        goto LABEL_119;
      v50 = (v132 - 1) & (37 * v27);
      v37 = (int *)(v130 + 2328 * v50);
      v51 = *v37;
      if (v27 != *v37)
      {
        v52 = 0;
        v53 = 1;
        while (v51 != -1)
        {
          if (v52)
            v54 = 0;
          else
            v54 = v51 == -2;
          if (v54)
            v52 = v37;
          v55 = v50 + v53++;
          v50 = v55 & (v132 - 1);
          v37 = (int *)(v130 + 2328 * v50);
          v51 = *v37;
          if (v27 == *v37)
            goto LABEL_87;
        }
LABEL_120:
        if (v52)
          v37 = v52;
      }
LABEL_87:
      LODWORD(v131) = v131 + 1;
      if (*v37 != -1)
        --HIDWORD(v131);
      *v37 = v27;
      *((_QWORD *)v37 + 1) = v37 + 6;
      *((_QWORD *)v37 + 2) = 0x2000000000;
    }
LABEL_90:
    v43 = sub_1C51AFE14((uint64_t)(v37 + 2), (unint64_t)v24);
    v44 = *((_QWORD *)v37 + 1);
    v45 = v37[4];
    v46 = (_QWORD *)(v44 + 72 * v45);
    *v46 = *(_QWORD *)v43;
    v46[2] = 0x400000000;
    v46[1] = v46 + 3;
    v47 = (uint64_t)(v46 + 1);
    if (*(_DWORD *)(v43 + 16))
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v47, v43 + 8);
    v48 = v44 + 72 * v45;
    v49 = *(_QWORD *)(v43 + 56);
    *(_DWORD *)(v48 + 64) = *(_DWORD *)(v43 + 64);
    *(_QWORD *)(v48 + 56) = v49;
    ++v37[4];
    v24 += 72;
  }
  while (v24 != v26);
  v61 = v132;
  v62 = (unsigned int *)(v130 + 2328 * v132);
  if ((_DWORD)v131)
  {
    if (v132)
    {
      v63 = 2328 * v132;
      v64 = v130;
      while (*(_DWORD *)v64 >= 0xFFFFFFFE)
      {
        v64 += 2328;
        v63 -= 2328;
        if (!v63)
        {
          v120 = 1;
          goto LABEL_130;
        }
      }
      v120 = 1;
    }
    else
    {
      v61 = 0;
      v120 = 0;
      v64 = v130;
    }
  }
  else
  {
    v120 = v132;
LABEL_130:
    v64 = v130 + 2328 * v132;
  }
  v121 = v130;
  v119 = v61;
  v125 = v130 + 2328 * v61;
  if (v64 == v125)
    goto LABEL_201;
  v65 = (llvm::ScheduleDAGTopologicalSort *)(a2 + 265);
  v123 = (unsigned int *)(v130 + 2328 * v132);
  while (2)
  {
    v66 = *(unsigned int *)(v64 + 16);
    v67 = 126 - 2 * __clz(v66);
    if ((_DWORD)v66)
      v68 = v67;
    else
      v68 = 0;
    sub_1C51B02B4(*(_QWORD *)(v64 + 8), (uint64_t *)(*(_QWORD *)(v64 + 8) + 72 * v66), v68, 1);
    v69 = *(_QWORD *)(v64 + 8);
    v70 = *(unsigned int *)(v64 + 16);
    v135[0] = 0;
    v135[1] = 0;
    v136 = 0;
    if ((_DWORD)v70 == 1)
    {
      v111 = 0;
      goto LABEL_195;
    }
    v126 = v64;
    v71 = 0;
    v72 = 1;
    while (2)
    {
      v73 = v69 + 72 * v71;
      v145 = *(const llvm::SUnit **)v73;
      v146 = v148;
      v147 = 0x400000000;
      if (*(_DWORD *)(v73 + 16))
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v146, v69 + 72 * v71 + 8);
      v74 = v69 + 72 * v71;
      v75 = *(_QWORD *)(v74 + 56);
      v150 = *(_DWORD *)(v74 + 64);
      v149 = v75;
      LODWORD(v76) = ++v71;
      if (v71 < v70)
      {
        v76 = v72;
        while (1)
        {
          v77 = (const llvm::SUnit **)(v69 + 72 * v76);
          v78 = *v77;
          if (v136)
          {
            v79 = *((_DWORD *)v78 + 48);
            v80 = (37 * v79) & (v136 - 1);
            v81 = *(_DWORD *)(v135[0] + 12 * v80);
            if (v79 == v81)
              goto LABEL_153;
            v82 = 1;
            while (v81 != -1)
            {
              v83 = v80 + v82++;
              v80 = v83 & (v136 - 1);
              v81 = *(_DWORD *)(v135[0] + 12 * v80);
              if (v79 == v81)
                goto LABEL_153;
            }
          }
          if (v129
            || !llvm::ScheduleDAGTopologicalSort::IsReachable(v65, v78, v145)
            && !llvm::ScheduleDAGTopologicalSort::IsReachable(v65, v145, *v77))
          {
            break;
          }
LABEL_153:
          if ((_DWORD)v70 == (_DWORD)++v76)
            goto LABEL_169;
        }
      }
      if ((_DWORD)v70 == (_DWORD)v76)
        goto LABEL_169;
      v84 = v69 + 72 * v76;
      v140 = *(void **)v84;
      v141 = v143;
      v142 = 0x400000000;
      if (*(_DWORD *)(v84 + 16))
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v141, v69 + 72 * v76 + 8);
      v85 = v69 + 72 * v76;
      v86 = *(_QWORD *)(v85 + 56);
      v144 = *(_DWORD *)(v85 + 64);
      v143[4] = v86;
      v87 = (v144 + v150);
      if (!v136)
      {
LABEL_165:
        v91 = 2;
        goto LABEL_166;
      }
      v88 = *((_DWORD *)v145 + 48);
      v89 = (37 * v88) & (v136 - 1);
      v90 = *(_DWORD *)(v135[0] + 12 * v89);
      if (v88 != v90)
      {
        v93 = 1;
        while (v90 != -1)
        {
          v94 = v89 + v93++;
          v89 = v94 & (v136 - 1);
          v90 = *(_DWORD *)(v135[0] + 12 * v89);
          if (v88 == v90)
            goto LABEL_160;
        }
        goto LABEL_165;
      }
LABEL_160:
      v91 = (sub_1C61FC95C(v135, (_DWORD *)v145 + 48)[1] + 1);
      v92 = sub_1C61FC95C(v135, (_DWORD *)v145 + 48);
      v87 = (v144 + v92[2]);
LABEL_166:
      if ((*(unsigned int (**)(_QWORD, char *, _QWORD, void *, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 720))(*(_QWORD *)(a1 + 8), v146, v147, v141, v142, v91, v87))
      {
        v95 = *((_DWORD *)v145 + 48);
        v96 = *((_DWORD *)v140 + 48);
        v97 = v95 > v96;
        v98 = v95 <= v96 ? v145 : (const llvm::SUnit *)v140;
        v99 = v97 ? v145 : (llvm::SUnit *)v140;
        v124 = v98;
        v133 = (unint64_t)v98 | 6;
        v134 = 5;
        v122 = v99;
        if (llvm::ScheduleDAGInstrs::addEdge((llvm::ScheduleDAGInstrs *)a2, v99, (const llvm::SDep *)&v133))
        {
          v117 = v91;
          v118 = v87;
          if (*(_BYTE *)(a1 + 24))
          {
            v105 = *((unsigned int *)v124 + 30);
            v106 = v122;
            if ((_DWORD)v105)
            {
              v108 = (_QWORD *)*((_QWORD *)v124 + 14);
              v109 = 16 * v105;
              do
              {
                v110 = (llvm::SUnit *)(*v108 & 0xFFFFFFFFFFFFFFF8);
                if (v106 != v110)
                {
                  v133 = (unint64_t)v122 | 6;
                  v134 = 3;
                  llvm::ScheduleDAGInstrs::addEdge((llvm::ScheduleDAGInstrs *)a2, v110, (const llvm::SDep *)&v133);
                  v106 = v122;
                }
                v108 += 2;
                v109 -= 16;
              }
              while (v109);
            }
          }
          else
          {
            v100 = *((unsigned int *)v122 + 10);
            v101 = v124;
            if ((_DWORD)v100)
            {
              v102 = (_QWORD *)*((_QWORD *)v122 + 4);
              v103 = 16 * v100;
              do
              {
                v104 = *v102 & 0xFFFFFFFFFFFFFFF8;
                if (v101 != (llvm::SUnit *)v104)
                {
                  v133 = v104 | 6;
                  v134 = 3;
                  llvm::ScheduleDAGInstrs::addEdge((llvm::ScheduleDAGInstrs *)a2, v124, (const llvm::SDep *)&v133);
                  v101 = v124;
                }
                v102 += 2;
                v103 -= 16;
              }
              while (v103);
            }
          }
          v107 = sub_1C61FC95C(v135, (_DWORD *)v140 + 48);
          v107[1] = v117;
          v107[2] = v118;
        }
      }
      if (v141 != v143)
        free(v141);
LABEL_169:
      if (v146 != v148)
        free(v146);
      ++v72;
      if (v71 != (_DWORD)v70 - 1)
        continue;
      break;
    }
    v111 = v135[0];
    v62 = v123;
    v64 = v126;
LABEL_195:
    MEMORY[0x1CAA32FB4](v111, 4);
    v112 = (unsigned int *)(v64 + 2328);
    while (v112 != v62)
    {
      v113 = *v112;
      v112 += 582;
      if (v113 <= 0xFFFFFFFD)
      {
        v64 = (uint64_t)(v112 - 582);
        goto LABEL_200;
      }
    }
    v64 = (uint64_t)v62;
LABEL_200:
    if (v64 != v125)
      continue;
    break;
  }
LABEL_201:
  if (v120)
  {
    v114 = 2328 * v119;
    v115 = (char **)(v121 + 8);
    do
    {
      if (*((_DWORD *)v115 - 2) <= 0xFFFFFFFD)
        v115 = sub_1C51AFDA0(v115);
      v115 += 291;
      v114 -= 2328;
    }
    while (v114);
  }
  MEMORY[0x1CAA32FB4](v121, 8);
  return sub_1C51AFDA0(&v137);
}

char **sub_1C51AFDA0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 64];
      if (&v2[v4 - 48] != v5)
        free(v5);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C51AFE14(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 72 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C51AFE7C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C51AFE7C(a1, v5);
    }
  }
  return a2;
}

void sub_1C51AFE7C(uint64_t a1, unint64_t a2)
{
  void *v3;
  void *v4;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 72, &v16);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[72 * v6];
    v8 = (uint64_t)(v5 + 8);
    v9 = v3;
    do
    {
      v10 = v8 - 8;
      *v9 = *(_QWORD *)(v8 - 8);
      v9[1] = v9 + 3;
      v9[2] = 0x400000000;
      if (*(_DWORD *)(v8 + 8))
        sub_1C614D378((uint64_t)(v9 + 1), v8);
      v11 = *(_QWORD *)(v8 + 48);
      *((_DWORD *)v9 + 16) = *(_DWORD *)(v8 + 56);
      v9[7] = v11;
      v9 += 9;
      v8 += 72;
    }
    while ((char *)(v10 + 72) != v7);
    v5 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 72 * v12;
      do
      {
        v14 = *(char **)&v5[v13 - 64];
        if (&v5[v13 - 48] != v14)
          free(v14);
        v13 -= 72;
      }
      while (v13);
      v5 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v15;
}

_DWORD *sub_1C51AFFA0(uint64_t *a1, int a2)
{
  unsigned int v3;
  char **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  char **v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int *v27;
  int v28;
  unsigned int v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  unsigned int v37;
  uint64_t v38;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (char **)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(2328 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      v11 = 2328 * v10;
      do
      {
        *result = -1;
        result += 582;
        v11 -= 2328;
      }
      while (v11);
    }
    if (!v3)
LABEL_55:
      JUMPOUT(0x1CAA32FB4);
    v12 = (int *)&v4[291 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        break;
LABEL_45:
      v13 += 291;
      if (v13 == (char **)v12)
        goto LABEL_55;
    }
    v15 = *((_DWORD *)a1 + 4);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = v16 & (37 * v14);
      v18 = *a1 + 2328 * v17;
      v19 = *(_DWORD *)v18;
      if (v14 != *(_DWORD *)v18)
      {
        v20 = 0;
        v21 = 1;
        while (v19 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == -2;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & v16;
          v18 = *a1 + 2328 * v17;
          v19 = *(_DWORD *)v18;
          if (v14 == *(_DWORD *)v18)
            goto LABEL_23;
        }
        if (v20)
          v18 = v20;
      }
    }
    else
    {
      v18 = 0;
    }
LABEL_23:
    v24 = v18 + 24;
    *(_QWORD *)(v18 + 8) = v18 + 24;
    *(_DWORD *)v18 = v14;
    *(_QWORD *)(v18 + 16) = 0x2000000000;
    v25 = *((_DWORD *)v13 + 4);
    if ((char **)v18 == v13 || v25 == 0)
    {
LABEL_44:
      ++*((_DWORD *)a1 + 2);
      sub_1C51AFDA0(v13 + 1);
      goto LABEL_45;
    }
    v27 = (int *)v13[1];
    if (v27 != (int *)(v13 + 3))
    {
      v28 = *((_DWORD *)v13 + 5);
      *(_QWORD *)(v18 + 8) = v27;
      *(_DWORD *)(v18 + 16) = v25;
      *(_DWORD *)(v18 + 20) = v28;
      v13[1] = (char *)(v13 + 3);
      *((_DWORD *)v13 + 5) = 0;
LABEL_43:
      *((_DWORD *)v13 + 4) = 0;
      goto LABEL_44;
    }
    if (v25 <= 0x20)
    {
      v30 = &v27[18 * v25];
    }
    else
    {
      sub_1C51AFE7C(v18 + 8, *((unsigned int *)v13 + 4));
      v27 = (int *)v13[1];
      v29 = *((_DWORD *)v13 + 4);
      if (!v29)
      {
LABEL_38:
        *(_DWORD *)(v18 + 16) = v25;
        v34 = *((unsigned int *)v13 + 4);
        if ((_DWORD)v34)
        {
          v35 = 18 * v34;
          do
          {
            v36 = *(int **)&v27[v35 - 16];
            if (&v27[v35 - 12] != v36)
              free(v36);
            v35 -= 18;
          }
          while (v35 * 4);
        }
        goto LABEL_43;
      }
      v24 = *(_QWORD *)(v18 + 8);
      v30 = &v27[18 * v29];
    }
    v31 = (uint64_t)(v27 + 2);
    do
    {
      v32 = v31 - 8;
      *(_QWORD *)v24 = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(v24 + 8) = v24 + 24;
      *(_QWORD *)(v24 + 16) = 0x400000000;
      if (*(_DWORD *)(v31 + 8))
        sub_1C614D378(v24 + 8, v31);
      v33 = *(_QWORD *)(v31 + 48);
      *(_DWORD *)(v24 + 64) = *(_DWORD *)(v31 + 56);
      *(_QWORD *)(v24 + 56) = v33;
      v24 += 72;
      v31 += 72;
    }
    while ((int *)(v32 + 72) != v30);
    v27 = (int *)v13[1];
    goto LABEL_38;
  }
  a1[1] = 0;
  v37 = *((_DWORD *)a1 + 4);
  if (v37)
  {
    v38 = 2328 * v37;
    do
    {
      *result = -1;
      result += 582;
      v38 -= 2328;
    }
    while (v38);
  }
  return result;
}

void sub_1C51B02B4(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int64_t v37;
  void **v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[32];
  uint64_t v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[32];
  uint64_t v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v97 = (uint64_t)(a2 - 9);
  v94 = (uint64_t)(a2 - 27);
  v95 = (uint64_t)(a2 - 18);
  v7 = a1;
  v99 = (uint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1C51B10B0(v97, a1))
        {
          v109 = *(_QWORD *)a1;
          v110 = v112;
          v111 = 0x400000000;
          if (*(_DWORD *)(a1 + 16))
            sub_1C614D378((uint64_t)&v110, a1 + 8);
          v76 = *(_QWORD *)(a1 + 56);
          v114 = *(_DWORD *)(a1 + 64);
          v113 = v76;
          *(_QWORD *)a1 = *(a2 - 9);
          sub_1C614D378(a1 + 8, (uint64_t)(a2 - 8));
          v77 = *(a2 - 2);
          *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 - 2);
          *(_QWORD *)(a1 + 56) = v77;
          *(a2 - 9) = v109;
          sub_1C614D378((uint64_t)(a2 - 8), (uint64_t)&v110);
          v78 = v113;
          *((_DWORD *)a2 - 2) = v114;
          *(a2 - 2) = v78;
          if (v110 != v112)
            free(v110);
        }
        return;
      case 3uLL:
        sub_1C51B1528(a1, a1 + 72, v97);
        return;
      case 4uLL:
        sub_1C51B1C88(a1, a1 + 72, a1 + 144, v97);
        return;
      case 5uLL:
        sub_1C51B11E4(a1, a1 + 72, a1 + 144, a1 + 216, v97);
        return;
      default:
        if (v8 > 1727)
        {
          if (!a3)
          {
            if ((uint64_t *)a1 != a2)
            {
              v37 = (v9 - 2) >> 1;
              v38 = &v110;
              v39 = v37;
              do
              {
                v40 = v39;
                if (v37 >= v39)
                {
                  v41 = (2 * v39) | 1;
                  v42 = a1 + 72 * v41;
                  if (2 * v39 + 2 < (uint64_t)v9 && sub_1C51B10B0(a1 + 72 * v41, v42 + 72))
                  {
                    v42 += 72;
                    v41 = 2 * v40 + 2;
                  }
                  v43 = a1 + 72 * v40;
                  if ((sub_1C51B10B0(v42, v43) & 1) == 0)
                  {
                    v102 = v9;
                    v109 = *(_QWORD *)v43;
                    v110 = v112;
                    v111 = 0x400000000;
                    if (*(_DWORD *)(a1 + 72 * v40 + 16))
                      sub_1C614D378((uint64_t)v38, a1 + 72 * v40 + 8);
                    v98 = (uint64_t)v38;
                    v44 = a1 + 72 * v40;
                    v45 = *(_QWORD *)(v44 + 56);
                    v114 = *(_DWORD *)(v44 + 64);
                    v113 = v45;
                    do
                    {
                      v46 = (_QWORD *)v42;
                      v47 = v42 + 8;
                      *(_QWORD *)v43 = *(_QWORD *)v42;
                      sub_1C614D378(v43 + 8, v42 + 8);
                      v48 = v42 + 56;
                      v49 = *(_DWORD *)(v42 + 64);
                      *(_QWORD *)(v43 + 56) = *(_QWORD *)(v42 + 56);
                      *(_DWORD *)(v43 + 64) = v49;
                      if (v37 < v41)
                        break;
                      v50 = v37;
                      v51 = (2 * v41) | 1;
                      v42 = a1 + 72 * v51;
                      v52 = 2 * v41 + 2;
                      if (v52 < v102 && sub_1C51B10B0(a1 + 72 * v51, v42 + 72))
                      {
                        v42 += 72;
                        v51 = v52;
                      }
                      v43 = (uint64_t)v46;
                      v41 = v51;
                      v37 = v50;
                    }
                    while (!sub_1C51B10B0(v42, (uint64_t)&v109));
                    *v46 = v109;
                    v38 = (void **)v98;
                    sub_1C614D378(v47, v98);
                    v53 = v114;
                    *(_QWORD *)v48 = v113;
                    *(_DWORD *)(v48 + 8) = v53;
                    if (v110 != v112)
                      free(v110);
                    a2 = (uint64_t *)v99;
                    v9 = v102;
                  }
                }
                v39 = v40 - 1;
              }
              while (v40);
              do
              {
                v54 = a2;
                v103 = *(_QWORD *)a1;
                v104 = v106;
                v105 = 0x400000000;
                if (*(_DWORD *)(a1 + 16))
                  sub_1C614D378((uint64_t)&v104, a1 + 8);
                v55 = 0;
                v56 = *(_QWORD *)(a1 + 56);
                v108 = *(_DWORD *)(a1 + 64);
                v107 = v56;
                v57 = a1;
                do
                {
                  v58 = v57 + 72 * v55 + 72;
                  v59 = (2 * v55) | 1;
                  v60 = 2 * v55 + 2;
                  if (v60 < (uint64_t)v9 && sub_1C51B10B0(v57 + 72 * v55 + 72, v57 + 72 * v55 + 144))
                  {
                    v58 += 72;
                    v59 = v60;
                  }
                  *(_QWORD *)v57 = *(_QWORD *)v58;
                  sub_1C614D378(v57 + 8, v58 + 8);
                  v61 = (uint64_t *)(v58 + 56);
                  v62 = *(_DWORD *)(v58 + 64);
                  *(_QWORD *)(v57 + 56) = *(_QWORD *)(v58 + 56);
                  *(_DWORD *)(v57 + 64) = v62;
                  v57 = v58;
                  v55 = v59;
                }
                while (v59 <= (uint64_t)((v9 - 2) >> 1));
                a2 = v54 - 9;
                if ((uint64_t *)v58 == v54 - 9)
                {
                  *(_QWORD *)v58 = v103;
                  sub_1C614D378(v58 + 8, (uint64_t)&v104);
                  v63 = v108;
                  *v61 = v107;
                  *(_DWORD *)(v58 + 64) = v63;
                }
                else
                {
                  *(_QWORD *)v58 = *(v54 - 9);
                  sub_1C614D378(v58 + 8, (uint64_t)(v54 - 8));
                  v64 = *(v54 - 2);
                  *(_DWORD *)(v58 + 64) = *((_DWORD *)v54 - 2);
                  *v61 = v64;
                  *(v54 - 9) = v103;
                  sub_1C614D378((uint64_t)(v54 - 8), (uint64_t)&v104);
                  v65 = v108;
                  *(v54 - 2) = v107;
                  *((_DWORD *)v54 - 2) = v65;
                  v66 = v58 - a1 + 72;
                  if (v66 >= 73)
                  {
                    v67 = (v66 / 0x48uLL - 2) >> 1;
                    v68 = a1 + 72 * v67;
                    if (sub_1C51B10B0(v68, v58))
                    {
                      v109 = *(_QWORD *)v58;
                      v110 = v112;
                      v111 = 0x400000000;
                      if (*(_DWORD *)(v58 + 16))
                        sub_1C614D378((uint64_t)&v110, v58 + 8);
                      v70 = *v61;
                      v114 = *(_DWORD *)(v58 + 64);
                      v113 = v70;
                      do
                      {
                        v71 = (_QWORD *)v68;
                        v72 = v68 + 8;
                        *(_QWORD *)v58 = *(_QWORD *)v68;
                        sub_1C614D378(v58 + 8, v68 + 8);
                        v73 = v68 + 56;
                        v74 = *(_DWORD *)(v68 + 64);
                        *(_QWORD *)(v58 + 56) = *(_QWORD *)(v68 + 56);
                        *(_DWORD *)(v58 + 64) = v74;
                        if (!v67)
                          break;
                        v67 = (v67 - 1) >> 1;
                        v68 = a1 + 72 * v67;
                        v58 = (uint64_t)v71;
                      }
                      while ((sub_1C51B10B0(v68, (uint64_t)&v109) & 1) != 0);
                      *v71 = v109;
                      sub_1C614D378(v72, (uint64_t)&v110);
                      v75 = v114;
                      *(_QWORD *)v73 = v113;
                      *(_DWORD *)(v73 + 8) = v75;
                      if (v110 != v112)
                        free(v110);
                    }
                  }
                }
                if (v104 != v106)
                  free(v104);
              }
              while ((uint64_t)v9-- > 2);
            }
            return;
          }
          v100 = a3;
          v10 = v9 >> 1;
          v11 = (_QWORD *)(a1 + 72 * (v9 >> 1));
          if ((unint64_t)v8 < 0x2401)
          {
            sub_1C51B1528(a1 + 72 * (v9 >> 1), a1, v97);
          }
          else
          {
            sub_1C51B1528(a1, a1 + 72 * (v9 >> 1), v97);
            sub_1C51B1528(a1 + 72, a1 + 72 * v10 - 72, v95);
            sub_1C51B1528(a1 + 144, a1 + 72 + 72 * v10, v94);
            sub_1C51B1528(a1 + 72 * v10 - 72, (uint64_t)v11, a1 + 72 + 72 * v10);
            v109 = *(_QWORD *)a1;
            v110 = v112;
            v111 = 0x400000000;
            if (*(_DWORD *)(a1 + 16))
              sub_1C614D378((uint64_t)&v110, a1 + 8);
            v12 = *(_QWORD *)(a1 + 56);
            v114 = *(_DWORD *)(a1 + 64);
            v113 = v12;
            *(_QWORD *)a1 = *v11;
            v13 = a1 + 72 * v10;
            sub_1C614D378(a1 + 8, v13 + 8);
            v14 = *(_DWORD *)(v13 + 64);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 56);
            *(_DWORD *)(a1 + 64) = v14;
            *v11 = v109;
            sub_1C614D378(v13 + 8, (uint64_t)&v110);
            v15 = v113;
            *(_DWORD *)(v13 + 64) = v114;
            *(_QWORD *)(v13 + 56) = v15;
            if (v110 != v112)
              free(v110);
          }
          a3 = v100 - 1;
          if ((a4 & 1) == 0 && (sub_1C51B10B0(a1 - 72, a1) & 1) == 0)
          {
            v103 = *(_QWORD *)a1;
            v104 = v106;
            v105 = 0x400000000;
            if (*(_DWORD *)(a1 + 16))
              sub_1C614D378((uint64_t)&v104, a1 + 8);
            v28 = *(_QWORD *)(a1 + 56);
            v108 = *(_DWORD *)(a1 + 64);
            v107 = v28;
            if ((sub_1C51B10B0((uint64_t)&v103, v97) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 72;
              while ((sub_1C51B10B0((uint64_t)&v103, v7) & 1) == 0);
            }
            else
            {
              v29 = a1 + 72;
              do
              {
                v7 = v29;
                if (v29 >= (unint64_t)a2)
                  break;
                v30 = sub_1C51B10B0((uint64_t)&v103, v29);
                v29 = v7 + 72;
              }
              while (!v30);
            }
            v31 = (unint64_t)a2;
            if (v7 < (unint64_t)a2)
            {
              v31 = (unint64_t)a2;
              do
                v31 -= 72;
              while ((sub_1C51B10B0((uint64_t)&v103, v31) & 1) != 0);
            }
            while (v7 < v31)
            {
              v109 = *(_QWORD *)v7;
              v110 = v112;
              v111 = 0x400000000;
              if (*(_DWORD *)(v7 + 16))
                sub_1C614D378((uint64_t)&v110, v7 + 8);
              v32 = *(_QWORD *)(v7 + 56);
              v114 = *(_DWORD *)(v7 + 64);
              v113 = v32;
              *(_QWORD *)v7 = *(_QWORD *)v31;
              sub_1C614D378(v7 + 8, v31 + 8);
              v33 = *(_QWORD *)(v31 + 56);
              *(_DWORD *)(v7 + 64) = *(_DWORD *)(v31 + 64);
              *(_QWORD *)(v7 + 56) = v33;
              *(_QWORD *)v31 = v109;
              sub_1C614D378(v31 + 8, (uint64_t)&v110);
              v34 = v114;
              *(_QWORD *)(v31 + 56) = v113;
              *(_DWORD *)(v31 + 64) = v34;
              if (v110 != v112)
                free(v110);
              do
                v7 += 72;
              while (!sub_1C51B10B0((uint64_t)&v103, v7));
              do
                v31 -= 72;
              while ((sub_1C51B10B0((uint64_t)&v103, v31) & 1) != 0);
            }
            if (v7 - 72 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v7 - 72);
              sub_1C614D378(a1 + 8, v7 - 64);
              v35 = *(_DWORD *)(v7 - 8);
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(v7 - 16);
              *(_DWORD *)(a1 + 64) = v35;
            }
            *(_QWORD *)(v7 - 72) = v103;
            sub_1C614D378(v7 - 64, (uint64_t)&v104);
            v36 = v107;
            *(_DWORD *)(v7 - 8) = v108;
            *(_QWORD *)(v7 - 16) = v36;
            if (v104 != v106)
              free(v104);
            goto LABEL_42;
          }
          v103 = *(_QWORD *)a1;
          v104 = v106;
          v105 = 0x400000000;
          if (*(_DWORD *)(a1 + 16))
            sub_1C614D378((uint64_t)&v104, a1 + 8);
          v101 = v100 - 1;
          v16 = 0;
          v17 = *(_QWORD *)(a1 + 56);
          v108 = *(_DWORD *)(a1 + 64);
          v107 = v17;
          do
            v16 += 72;
          while ((sub_1C51B10B0(v16 + a1, (uint64_t)&v103) & 1) != 0);
          v18 = a1 + v16;
          v19 = v99;
          if (v16 == 72)
          {
            v19 = v99;
            do
            {
              if (v18 >= v19)
                break;
              v19 -= 72;
            }
            while ((sub_1C51B10B0(v19, (uint64_t)&v103) & 1) == 0);
          }
          else
          {
            do
              v19 -= 72;
            while (!sub_1C51B10B0(v19, (uint64_t)&v103));
          }
          v7 = a1 + v16;
          if (v18 < v19)
          {
            v20 = v19;
            do
            {
              v109 = *(_QWORD *)v7;
              v110 = v112;
              v111 = 0x400000000;
              if (*(_DWORD *)(v7 + 16))
                sub_1C614D378((uint64_t)&v110, v7 + 8);
              v21 = *(_QWORD *)(v7 + 56);
              v114 = *(_DWORD *)(v7 + 64);
              v113 = v21;
              *(_QWORD *)v7 = *(_QWORD *)v20;
              sub_1C614D378(v7 + 8, v20 + 8);
              v22 = *(_QWORD *)(v20 + 56);
              *(_DWORD *)(v7 + 64) = *(_DWORD *)(v20 + 64);
              *(_QWORD *)(v7 + 56) = v22;
              *(_QWORD *)v20 = v109;
              sub_1C614D378(v20 + 8, (uint64_t)&v110);
              v23 = v114;
              *(_QWORD *)(v20 + 56) = v113;
              *(_DWORD *)(v20 + 64) = v23;
              if (v110 != v112)
                free(v110);
              do
                v7 += 72;
              while ((sub_1C51B10B0(v7, (uint64_t)&v103) & 1) != 0);
              do
                v20 -= 72;
              while (!sub_1C51B10B0(v20, (uint64_t)&v103));
            }
            while (v7 < v20);
          }
          if (v7 - 72 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v7 - 72);
            sub_1C614D378(a1 + 8, v7 - 64);
            v24 = *(_DWORD *)(v7 - 8);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v7 - 16);
            *(_DWORD *)(a1 + 64) = v24;
          }
          *(_QWORD *)(v7 - 72) = v103;
          sub_1C614D378(v7 - 64, (uint64_t)&v104);
          v25 = v107;
          *(_DWORD *)(v7 - 8) = v108;
          *(_QWORD *)(v7 - 16) = v25;
          if (v104 != v106)
            free(v104);
          v26 = v18 >= v19;
          a2 = (uint64_t *)v99;
          a3 = v101;
          if (!v26)
            goto LABEL_41;
          v27 = sub_1C51B18DC(a1, v7 - 72);
          if (!sub_1C51B18DC(v7, v99))
          {
            if (v27)
              continue;
LABEL_41:
            sub_1C51B02B4(a1, v7 - 72, v101, a4 & 1);
LABEL_42:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v7 - 72);
          if (v27)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)a1 != a2)
          {
            v79 = a1 + 72;
            if ((uint64_t *)(a1 + 72) != a2)
            {
              v80 = 0;
              v81 = a1;
              do
              {
                v82 = (uint64_t *)v79;
                if (sub_1C51B10B0(v79, v81))
                {
                  v109 = *v82;
                  v110 = v112;
                  v111 = 0x400000000;
                  if (*(_DWORD *)(v81 + 88))
                    sub_1C614D378((uint64_t)&v110, v81 + 80);
                  v113 = *(_QWORD *)(v81 + 128);
                  v114 = *(_DWORD *)(v81 + 136);
                  v83 = v80;
                  while (1)
                  {
                    v84 = a1 + v83;
                    *(_QWORD *)(a1 + v83 + 72) = *(_QWORD *)(a1 + v83);
                    v85 = a1 + v83 + 8;
                    sub_1C614D378(a1 + v83 + 80, v85);
                    *(_QWORD *)(v84 + 128) = *(_QWORD *)(v84 + 56);
                    *(_DWORD *)(v84 + 136) = *(_DWORD *)(v84 + 64);
                    if (!v83)
                      break;
                    v83 -= 72;
                    if ((sub_1C51B10B0((uint64_t)&v109, v83 + a1) & 1) == 0)
                    {
                      v86 = (_QWORD *)(a1 + v83 + 72);
                      goto LABEL_136;
                    }
                  }
                  v86 = (_QWORD *)a1;
LABEL_136:
                  *v86 = v109;
                  sub_1C614D378(v85, (uint64_t)&v110);
                  v87 = v113;
                  *(_DWORD *)(v84 + 64) = v114;
                  *(_QWORD *)(v84 + 56) = v87;
                  if (v110 != v112)
                    free(v110);
                  a2 = (uint64_t *)v99;
                }
                v79 = (uint64_t)(v82 + 9);
                v80 += 72;
                v81 = (uint64_t)v82;
              }
              while (v82 + 9 != a2);
            }
          }
        }
        else if ((uint64_t *)a1 != a2)
        {
          v88 = a1 + 72;
          if ((uint64_t *)(a1 + 72) != a2)
          {
            v89 = a1 - 72;
            do
            {
              v90 = (uint64_t *)v88;
              if (sub_1C51B10B0(v88, a1))
              {
                v109 = *v90;
                v110 = v112;
                v111 = 0x400000000;
                if (*(_DWORD *)(a1 + 88))
                  sub_1C614D378((uint64_t)&v110, a1 + 80);
                v113 = *(_QWORD *)(a1 + 128);
                v114 = *(_DWORD *)(a1 + 136);
                v91 = v89;
                do
                {
                  *(_QWORD *)(v91 + 144) = *(_QWORD *)(v91 + 72);
                  sub_1C614D378(v91 + 152, v91 + 80);
                  *(_QWORD *)(v91 + 200) = *(_QWORD *)(v91 + 128);
                  *(_DWORD *)(v91 + 208) = *(_DWORD *)(v91 + 136);
                  v92 = sub_1C51B10B0((uint64_t)&v109, v91);
                  v91 -= 72;
                }
                while ((v92 & 1) != 0);
                *(_QWORD *)(v91 + 144) = v109;
                sub_1C614D378(v91 + 152, (uint64_t)&v110);
                v93 = v113;
                *(_DWORD *)(v91 + 208) = v114;
                *(_QWORD *)(v91 + 200) = v93;
                if (v110 != v112)
                  free(v110);
              }
              v88 = (uint64_t)(v90 + 9);
              v89 += 72;
              a1 = (uint64_t)v90;
            }
            while (v90 + 9 != a2);
          }
        }
        return;
    }
  }
}

uint64_t sub_1C51B10B0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned __int8 ***)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(unsigned __int8 ***)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = 8 * v5;
    v9 = 8 * v7 - 8;
    do
    {
      if (!v8 || sub_1C51B1BEC(v4, v6))
        return 1;
      if (sub_1C51B1BEC(v6, v4))
        break;
      ++v4;
      ++v6;
      v8 -= 8;
      v10 = v9;
      v9 -= 8;
    }
    while (v10);
    v6 = *(unsigned __int8 ***)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 16);
    v4 = *(unsigned __int8 ***)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v5)
      goto LABEL_11;
    goto LABEL_16;
  }
  v11 = 0;
  if (!(_DWORD)v5)
  {
LABEL_16:
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a2 + 56);
    if (v16 == v17)
      return *(_DWORD *)(*(_QWORD *)a1 + 192) < *(_DWORD *)(*(_QWORD *)a2 + 192);
    else
      return v16 < v17;
  }
LABEL_11:
  v13 = 8 * v11;
  v14 = 8 * v5 - 8;
  while (v13 && !sub_1C51B1BEC(v6, v4))
  {
    if (!sub_1C51B1BEC(v4, v6))
    {
      ++v6;
      ++v4;
      v13 -= 8;
      v15 = v14;
      v14 -= 8;
      if (v15)
        continue;
    }
    goto LABEL_16;
  }
  return 0;
}

void sub_1C51B11E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  sub_1C51B1C88(a1, a2, a3, a4);
  if (sub_1C51B10B0(a5, a4))
  {
    v21 = *(_QWORD *)a4;
    v25 = v27;
    v26 = 0x400000000;
    if (*(_DWORD *)(a4 + 16))
      sub_1C614D378((uint64_t)&v25, a4 + 8);
    v10 = (uint64_t *)(a4 + 56);
    v28 = *(_QWORD *)(a4 + 56);
    v29 = *(_DWORD *)(a4 + 64);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    sub_1C614D378(a4 + 8, a5 + 8);
    v11 = *(_QWORD *)(a5 + 56);
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_QWORD *)(a4 + 56) = v11;
    *(_QWORD *)a5 = v21;
    sub_1C614D378(a5 + 8, (uint64_t)&v25);
    v12 = v25;
    *(_QWORD *)(a5 + 56) = v28;
    *(_DWORD *)(a5 + 64) = v29;
    if (v12 != v27)
      free(v12);
    if (sub_1C51B10B0(a4, a3))
    {
      v22 = *(_QWORD *)a3;
      v25 = v27;
      v26 = 0x400000000;
      if (*(_DWORD *)(a3 + 16))
        sub_1C614D378((uint64_t)&v25, a3 + 8);
      v13 = (uint64_t *)(a3 + 56);
      v28 = *(_QWORD *)(a3 + 56);
      v29 = *(_DWORD *)(a3 + 64);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      sub_1C614D378(a3 + 8, a4 + 8);
      v14 = *v10;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(_QWORD *)(a3 + 56) = v14;
      *(_QWORD *)a4 = v22;
      sub_1C614D378(a4 + 8, (uint64_t)&v25);
      v15 = v25;
      *v10 = v28;
      *(_DWORD *)(a4 + 64) = v29;
      if (v15 != v27)
        free(v15);
      if (sub_1C51B10B0(a3, a2))
      {
        v23 = *(_QWORD *)a2;
        v25 = v27;
        v26 = 0x400000000;
        if (*(_DWORD *)(a2 + 16))
          sub_1C614D378((uint64_t)&v25, a2 + 8);
        v16 = (uint64_t *)(a2 + 56);
        v28 = *(_QWORD *)(a2 + 56);
        v29 = *(_DWORD *)(a2 + 64);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        sub_1C614D378(a2 + 8, a3 + 8);
        v17 = *v13;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_QWORD *)(a2 + 56) = v17;
        *(_QWORD *)a3 = v23;
        sub_1C614D378(a3 + 8, (uint64_t)&v25);
        v18 = v25;
        *v13 = v28;
        *(_DWORD *)(a3 + 64) = v29;
        if (v18 != v27)
          free(v18);
        if (sub_1C51B10B0(a2, a1))
        {
          v24 = *(_QWORD *)a1;
          v25 = v27;
          v26 = 0x400000000;
          if (*(_DWORD *)(a1 + 16))
            sub_1C614D378((uint64_t)&v25, a1 + 8);
          v28 = *(_QWORD *)(a1 + 56);
          v29 = *(_DWORD *)(a1 + 64);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          sub_1C614D378(a1 + 8, a2 + 8);
          v19 = *v16;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(_QWORD *)(a1 + 56) = v19;
          *(_QWORD *)a2 = v24;
          sub_1C614D378(a2 + 8, (uint64_t)&v25);
          v20 = v25;
          *v16 = v28;
          *(_DWORD *)(a2 + 64) = v29;
          if (v20 != v27)
            free(v20);
        }
      }
    }
  }
}

void sub_1C51B1528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C51B10B0(a2, a1);
  v7 = sub_1C51B10B0(a3, a2);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      v19 = *(_QWORD *)a1;
      v24 = v26;
      v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16))
        sub_1C614D378((uint64_t)&v24, a1 + 8);
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(_DWORD *)(a1 + 64);
      *(_QWORD *)a1 = *(_QWORD *)a3;
      sub_1C614D378(a1 + 8, a3 + 8);
      v8 = *(_QWORD *)(a3 + 56);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 64);
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)a3 = v19;
      v9 = a3 + 8;
    }
    else
    {
      v22 = *(_QWORD *)a1;
      v24 = v26;
      v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16))
        sub_1C614D378((uint64_t)&v24, a1 + 8);
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(_DWORD *)(a1 + 64);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      sub_1C614D378(a1 + 8, a2 + 8);
      v16 = (uint64_t *)(a2 + 56);
      v15 = *(_QWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)a2 = v22;
      sub_1C614D378(a2 + 8, (uint64_t)&v24);
      v17 = v24;
      *(_QWORD *)(a2 + 56) = v27;
      *(_DWORD *)(a2 + 64) = v28;
      if (v17 != v26)
        free(v17);
      if (!sub_1C51B10B0(a3, a2))
        return;
      v23 = *(_QWORD *)a2;
      v24 = v26;
      v25 = 0x400000000;
      if (*(_DWORD *)(a2 + 16))
        sub_1C614D378((uint64_t)&v24, a2 + 8);
      v27 = *v16;
      v28 = *(_DWORD *)(a2 + 64);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      sub_1C614D378(a2 + 8, a3 + 8);
      v18 = *(_QWORD *)(a3 + 56);
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *v16 = v18;
      *(_QWORD *)a3 = v23;
      v9 = a3 + 8;
    }
    sub_1C614D378(v9, (uint64_t)&v24);
    v10 = v24;
    *(_QWORD *)(a3 + 56) = v27;
    *(_DWORD *)(a3 + 64) = v28;
LABEL_9:
    if (v10 != v26)
      free(v10);
    return;
  }
  if (v7)
  {
    v20 = *(_QWORD *)a2;
    v24 = v26;
    v25 = 0x400000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)&v24, a2 + 8);
    v11 = (uint64_t *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 56);
    v28 = *(_DWORD *)(a2 + 64);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    sub_1C614D378(a2 + 8, a3 + 8);
    v12 = *(_QWORD *)(a3 + 56);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    *(_QWORD *)(a2 + 56) = v12;
    *(_QWORD *)a3 = v20;
    sub_1C614D378(a3 + 8, (uint64_t)&v24);
    v13 = v24;
    *(_QWORD *)(a3 + 56) = v27;
    *(_DWORD *)(a3 + 64) = v28;
    if (v13 != v26)
      free(v13);
    if (sub_1C51B10B0(a2, a1))
    {
      v21 = *(_QWORD *)a1;
      v24 = v26;
      v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16))
        sub_1C614D378((uint64_t)&v24, a1 + 8);
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(_DWORD *)(a1 + 64);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      sub_1C614D378(a1 + 8, a2 + 8);
      v14 = *v11;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)a2 = v21;
      sub_1C614D378(a2 + 8, (uint64_t)&v24);
      v10 = v24;
      *v11 = v27;
      *(_DWORD *)(a2 + 64) = v28;
      goto LABEL_9;
    }
  }
}

BOOL sub_1C51B18DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_1C51B10B0(a2 - 72, a1))
      {
        v18 = *(_QWORD *)a1;
        v19 = v21;
        v20 = 0x400000000;
        if (*(_DWORD *)(a1 + 16))
          sub_1C614D378((uint64_t)&v19, a1 + 8);
        v22 = *(_QWORD *)(a1 + 56);
        v23 = *(_DWORD *)(a1 + 64);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 72);
        sub_1C614D378(a1 + 8, a2 - 64);
        v6 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        *(_QWORD *)(a1 + 56) = v6;
        *(_QWORD *)(a2 - 72) = v18;
        sub_1C614D378(a2 - 64, (uint64_t)&v19);
        v7 = v19;
        *(_QWORD *)(a2 - 16) = v22;
        *(_DWORD *)(a2 - 8) = v23;
        if (v7 != v21)
          free(v7);
      }
      return 1;
    case 3uLL:
      sub_1C51B1528(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_1C51B1C88(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_1C51B11E4(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      v8 = a1 + 144;
      sub_1C51B1528(a1, a1 + 72, a1 + 144);
      v9 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = &v19;
      break;
  }
  do
  {
    if (sub_1C51B10B0(v9, v8))
    {
      v18 = *(_QWORD *)v9;
      v19 = v21;
      v20 = 0x400000000;
      if (*(_DWORD *)(v9 + 16))
        sub_1C614D378((uint64_t)v12, v9 + 8);
      v13 = (uint64_t)v12;
      v22 = *(_QWORD *)(v9 + 56);
      v23 = *(_DWORD *)(v9 + 64);
      v14 = v10;
      while (1)
      {
        v15 = a1 + v14;
        *(_QWORD *)(a1 + v14 + 216) = *(_QWORD *)(a1 + v14 + 144);
        v16 = a1 + v14 + 152;
        sub_1C614D378(a1 + v14 + 224, v16);
        *(_QWORD *)(v15 + 272) = *(_QWORD *)(v15 + 200);
        *(_DWORD *)(v15 + 280) = *(_DWORD *)(v15 + 208);
        if (v14 == -144)
          break;
        v14 -= 72;
        if ((sub_1C51B10B0((uint64_t)&v18, v15 + 72) & 1) == 0)
        {
          v17 = (_QWORD *)(a1 + v14 + 216);
          goto LABEL_19;
        }
      }
      v17 = (_QWORD *)a1;
LABEL_19:
      *v17 = v18;
      v12 = (void **)v13;
      sub_1C614D378(v16, v13);
      *(_QWORD *)(v15 + 200) = v22;
      *(_DWORD *)(v15 + 208) = v23;
      if (v19 != v21)
        free(v19);
      if (++v11 == 8)
        return v9 + 72 == a2;
    }
    v8 = v9;
    v10 += 72;
    v9 += 72;
  }
  while (v9 != a2);
  return 1;
}

BOOL sub_1C51B1BEC(unsigned __int8 **a1, unsigned __int8 **a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = *a1;
  v3 = **a1;
  v4 = **a2;
  v5 = v3 >= v4;
  if (v3 == v4)
  {
    if (**a1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 24) + 32) + 16);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
      v10 = *((_DWORD *)*a1 + 4);
      v11 = *((_DWORD *)*a2 + 4);
      if (*(_DWORD *)(v9 + 8) == 1)
        return v10 > v11;
      else
        return v10 < v11;
    }
    v5 = v2[1] >= *((_DWORD *)*a2 + 1);
  }
  return !v5;
}

void sub_1C51B1C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  sub_1C51B1528(a1, a2, a3);
  if (sub_1C51B10B0(a4, a3))
  {
    v16 = *(_QWORD *)a3;
    v19 = v21;
    v20 = 0x400000000;
    if (*(_DWORD *)(a3 + 16))
      sub_1C614D378((uint64_t)&v19, a3 + 8);
    v8 = (uint64_t *)(a3 + 56);
    v22 = *(_QWORD *)(a3 + 56);
    v23 = *(_DWORD *)(a3 + 64);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    sub_1C614D378(a3 + 8, a4 + 8);
    v9 = *(_QWORD *)(a4 + 56);
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 56) = v9;
    *(_QWORD *)a4 = v16;
    sub_1C614D378(a4 + 8, (uint64_t)&v19);
    v10 = v19;
    *(_QWORD *)(a4 + 56) = v22;
    *(_DWORD *)(a4 + 64) = v23;
    if (v10 != v21)
      free(v10);
    if (sub_1C51B10B0(a3, a2))
    {
      v17 = *(_QWORD *)a2;
      v19 = v21;
      v20 = 0x400000000;
      if (*(_DWORD *)(a2 + 16))
        sub_1C614D378((uint64_t)&v19, a2 + 8);
      v11 = (uint64_t *)(a2 + 56);
      v22 = *(_QWORD *)(a2 + 56);
      v23 = *(_DWORD *)(a2 + 64);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      sub_1C614D378(a2 + 8, a3 + 8);
      v12 = *v8;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(_QWORD *)(a2 + 56) = v12;
      *(_QWORD *)a3 = v17;
      sub_1C614D378(a3 + 8, (uint64_t)&v19);
      v13 = v19;
      *v8 = v22;
      *(_DWORD *)(a3 + 64) = v23;
      if (v13 != v21)
        free(v13);
      if (sub_1C51B10B0(a2, a1))
      {
        v18 = *(_QWORD *)a1;
        v19 = v21;
        v20 = 0x400000000;
        if (*(_DWORD *)(a1 + 16))
          sub_1C614D378((uint64_t)&v19, a1 + 8);
        v22 = *(_QWORD *)(a1 + 56);
        v23 = *(_DWORD *)(a1 + 64);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        sub_1C614D378(a1 + 8, a2 + 8);
        v14 = *v11;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v14;
        *(_QWORD *)a2 = v18;
        sub_1C614D378(a2 + 8, (uint64_t)&v19);
        v15 = v19;
        *v11 = v22;
        *(_DWORD *)(a2 + 64) = v23;
        if (v15 != v21)
          free(v15);
      }
    }
  }
}

uint64_t sub_1C51B1F1C(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 12 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 12 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C51B1FBC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C51B206C(a1, v7);
  v9 = 0;
  sub_1C51B1F1C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C51B206C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C51B2130(a1, v4, v4 + 12 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 12 * v10;
    do
    {
      *result = -1;
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51B2130(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 12 * v6;
    do
    {
      *v7 = -1;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = sub_1C51B1F1C((uint64_t *)v5, (_DWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_DWORD *)a2;
      *(_QWORD *)(v9 + 1) = *(_QWORD *)(a2 + 4);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 12;
  }
  return result;
}

void sub_1C51B21E0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C51B21F8()
{
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C51B220C(unint64_t result, llvm::ScheduleDAGInstrs *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  int v6;
  BOOL v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  llvm::ScheduleDAGTopologicalSort *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v47;
  uint64_t v48;
  unint64_t v49;
  llvm::LiveInterval *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  llvm::LiveInterval *v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  _BOOL4 v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  llvm::ScheduleDAGTopologicalSort *v92;
  llvm::LiveInterval *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v99;
  int v100;
  llvm::ScheduleDAGTopologicalSort *v101;
  llvm::LiveInterval *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const llvm::SUnit *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  const llvm::SUnit *v124;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  const llvm::SUnit *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm::SUnit *v148;
  int v149;
  llvm::LiveInterval *v150;
  int v151;
  llvm::LiveInterval *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::ScheduleDAGTopologicalSort *v173;
  llvm::ScheduleDAGTopologicalSort *v174;
  llvm::ScheduleDAGTopologicalSort *v175;
  llvm::ScheduleDAGTopologicalSort *v176;
  const llvm::SUnit *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  _QWORD v186[10];

  v186[8] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 116);
  v3 = *((_QWORD *)a2 + 117);
  if (v2 == v3)
    return result;
  v5 = result;
  while (1)
  {
    v6 = **(unsigned __int16 **)(v2 + 16);
    v7 = (v6 - 13) < 5 || v6 == 23;
    if (!v7)
      break;
    if ((*(_BYTE *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 8) != 0)
        v2 = *(_QWORD *)(v2 + 8);
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == v3)
      return result;
  }
  v8 = *(_WORD *)(v2 + 44);
  v9 = v2;
  if ((v8 & 4) != 0)
  {
    v9 = v2;
    do
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v9 + 44) & 4) != 0);
  }
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 330) + 288);
  if ((v8 & 8) != 0)
  {
    do
      v2 = *(_QWORD *)(v2 + 8);
    while ((*(_WORD *)(v2 + 44) & 8) != 0);
  }
  v11 = *(_QWORD *)(v2 + 8);
  if (v9 != v11)
  {
    while (1)
    {
      v12 = **(unsigned __int16 **)(v9 + 16);
      v76 = v12 > 0x17;
      v13 = (1 << v12) & 0x83E000;
      if (v76 || v13 == 0)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v11)
      {
        v9 = v11;
        break;
      }
    }
  }
  v15 = *(_QWORD *)(v10 + 368);
  v16 = *(unsigned int *)(v10 + 384);
  if ((_DWORD)v16)
  {
    LODWORD(v17) = ((v9 >> 4) ^ (v9 >> 9)) & (v16 - 1);
    v18 = (uint64_t *)(v15 + 16 * v17);
    v19 = *v18;
    if (v9 == *v18)
      goto LABEL_29;
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v9 == v19)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_29;
      }
    }
  }
  v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_29:
  *(_QWORD *)(result + 8) = v18[1];
  result = sub_1C51A7290(*((_QWORD *)a2 + 117), *((_QWORD *)a2 + 116));
  v22 = *(_WORD *)(result + 44);
  v23 = result;
  if ((v22 & 4) != 0)
  {
    v23 = result;
    do
      v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v23 + 44) & 4) != 0);
  }
  if ((v22 & 8) != 0)
  {
    do
      result = *(_QWORD *)(result + 8);
    while ((*(_WORD *)(result + 44) & 8) != 0);
  }
  v24 = *(_QWORD *)(result + 8);
  if (v23 != v24)
  {
    while (1)
    {
      v25 = **(unsigned __int16 **)(v23 + 16);
      v76 = v25 > 0x17;
      v26 = (1 << v25) & 0x83E000;
      if (v76 || v26 == 0)
        break;
      v23 = *(_QWORD *)(v23 + 8);
      if (v23 == v24)
      {
        v23 = *(_QWORD *)(result + 8);
        break;
      }
    }
  }
  if ((_DWORD)v16)
  {
    LODWORD(v28) = ((v23 >> 4) ^ (v23 >> 9)) & (v16 - 1);
    v29 = (uint64_t *)(v15 + 16 * v28);
    v30 = *v29;
    if (v23 == *v29)
      goto LABEL_45;
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v16 - 1);
      v30 = *(_QWORD *)(v15 + 16 * v28);
      if (v23 == v30)
      {
        v29 = (uint64_t *)(v15 + 16 * v28);
        goto LABEL_45;
      }
    }
  }
  v29 = (uint64_t *)(v15 + 16 * v16);
LABEL_45:
  *(_QWORD *)(v5 + 16) = v29[1];
  v34 = *((_QWORD *)a2 + 6);
  v33 = *((_QWORD *)a2 + 7);
  if (v34 != v33)
  {
    result = (unint64_t)a2 + 952;
    v35 = v186;
    v36 = &v183;
    v177 = (llvm::ScheduleDAGInstrs *)((char *)a2 + 344);
    v37 = (llvm::ScheduleDAGInstrs *)((char *)a2 + 2120);
    v38 = 0x800000000;
    v39 = 4;
    while (1)
    {
      v40 = *(_QWORD *)(v34 + 8);
      if (**(_WORD **)(v40 + 16) != 19)
        goto LABEL_92;
      v41 = *(_DWORD **)(v40 + 32);
      v42 = v41[9];
      if ((v42 & 0x80000000) == 0)
        goto LABEL_92;
      v43 = v41[8];
      v44 = v43 & 0x30000000;
      v45 = v43 & 0x10FFF00;
      if (v44 || v45 == 0x1000000)
        goto LABEL_92;
      v47 = v41[1];
      if ((v47 & 0x80000000) == 0 || (~*v41 & 0x5000000) == 0)
        goto LABEL_92;
      v48 = *((_QWORD *)a2 + 330);
      v49 = v42 & 0x7FFFFFFF;
      if (v49 >= *(unsigned int *)(v48 + 416)
        || (v50 = *(llvm::LiveInterval **)(*(_QWORD *)(v48 + 408) + 8 * v49)) == 0)
      {
        v162 = v35;
        v166 = result;
        v174 = (llvm::ScheduleDAGTopologicalSort *)*((_QWORD *)a2 + 330);
        v158 = v36;
        v151 = v42;
        v154 = v38;
        v170 = v39;
        v92 = v37;
        v145 = v33;
        v93 = (llvm::LiveInterval *)sub_1C4851220(v48, v42);
        v94 = *((_QWORD *)v174 + 38);
        v95 = *((_QWORD *)v174 + 31);
        *(_QWORD *)v94 = v95;
        *(_QWORD *)(v94 + 8) = *(_QWORD *)(v95 + 40);
        *(_OWORD *)(v94 + 16) = *((_OWORD *)v174 + 18);
        *(_QWORD *)(v94 + 32) = (char *)v174 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v94);
        *(_DWORD *)(v94 + 184) = 0;
        v96 = *((_QWORD *)v174 + 32);
        v7 = *(_BYTE *)(v96 + 16) == 0;
        v97 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v96 + 24) + 16 * (*((_DWORD *)v93 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v99 = !v7 && v97 != 0;
        llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)v174 + 38), v93, v99);
        llvm::LiveIntervals::computeDeadValues((uint64_t)v174, (uint64_t)v93, 0);
        v37 = v92;
        v39 = v170;
        v38 = v154;
        v42 = v151;
        v48 = (uint64_t)v174;
        v50 = v93;
        v33 = v145;
        v36 = v158;
        v35 = v162;
        result = v166;
      }
      v51 = **(_QWORD **)v50;
      v52 = *(_DWORD *)((*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) + 24);
      if (((v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v52
        || (v53 = *(_QWORD *)(*(_QWORD *)v50 + 24 * *((unsigned int *)v50 + 2) - 16),
            ((v53 >> 1) & 3 | *(_DWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u)))
      {
        if ((v47 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v48 + 416)
          || (v50 = *(llvm::LiveInterval **)(*(_QWORD *)(v48 + 408) + 8 * (v47 & 0x7FFFFFFF))) == 0)
        {
          v163 = v35;
          v167 = result;
          v175 = (llvm::ScheduleDAGTopologicalSort *)v48;
          v159 = v36;
          v100 = v42;
          v155 = v38;
          v171 = v39;
          v101 = v37;
          v146 = v33;
          v102 = (llvm::LiveInterval *)sub_1C4851220(v48, v47);
          v103 = *((_QWORD *)v175 + 38);
          v104 = *((_QWORD *)v175 + 31);
          *(_QWORD *)v103 = v104;
          *(_QWORD *)(v103 + 8) = *(_QWORD *)(v104 + 40);
          *(_OWORD *)(v103 + 16) = *((_OWORD *)v175 + 18);
          *(_QWORD *)(v103 + 32) = (char *)v175 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v103);
          *(_DWORD *)(v103 + 184) = 0;
          v105 = *((_QWORD *)v175 + 32);
          v7 = *(_BYTE *)(v105 + 16) == 0;
          v106 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v105 + 24) + 16 * (*((_DWORD *)v102 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v108 = !v7 && v106 != 0;
          llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)v175 + 38), v102, v108);
          llvm::LiveIntervals::computeDeadValues((uint64_t)v175, (uint64_t)v102, 0);
          v37 = v101;
          v39 = v171;
          v38 = v155;
          v42 = v100;
          v48 = (uint64_t)v175;
          v50 = v102;
          v33 = v146;
          v36 = v159;
          v35 = v163;
          result = v167;
          v52 = *(_DWORD *)((*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        v51 = **(_QWORD **)v50;
        if (((v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v52)
          goto LABEL_92;
        v56 = *(_QWORD *)(*(_QWORD *)v50 + 24 * *((unsigned int *)v50 + 2) - 16);
        v54 = v42;
        v55 = v42;
        if (((v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u))
          goto LABEL_92;
      }
      else
      {
        v49 = v47 & 0x7FFFFFFF;
        v54 = v47;
        v55 = v47;
        v47 = v42;
      }
      if (v49 >= *(unsigned int *)(v48 + 416)
        || (v57 = *(llvm::LiveInterval **)(*(_QWORD *)(v48 + 408) + 8 * v49)) == 0)
      {
        v164 = v35;
        v168 = result;
        v149 = v55;
        v147 = v33;
        v109 = v48;
        v160 = v36;
        v152 = v50;
        v156 = v38;
        v172 = v39;
        v176 = v37;
        v57 = (llvm::LiveInterval *)sub_1C4851220(v48, v54);
        v110 = v34;
        v111 = *(_QWORD *)(v109 + 304);
        v112 = *(_QWORD *)(v109 + 248);
        *(_QWORD *)v111 = v112;
        *(_QWORD *)(v111 + 8) = *(_QWORD *)(v112 + 40);
        *(_OWORD *)(v111 + 16) = *(_OWORD *)(v109 + 288);
        *(_QWORD *)(v111 + 32) = v109 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v111);
        *(_DWORD *)(v111 + 184) = 0;
        v34 = v110;
        v113 = *(_QWORD *)(v109 + 256);
        v7 = *(_BYTE *)(v113 + 16) == 0;
        v114 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v113 + 24) + 16 * (*((_DWORD *)v57 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v116 = !v7 && v114 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v109 + 304), v57, v116);
        v117 = v109;
        v33 = v147;
        llvm::LiveIntervals::computeDeadValues(v117, (uint64_t)v57, 0);
        v55 = v149;
        v37 = v176;
        v39 = v172;
        v38 = v156;
        v50 = v152;
        v36 = v160;
        v35 = v164;
        result = v168;
        v51 = **(_QWORD **)v152;
      }
      v58 = *((_DWORD *)v57 + 2);
      v59 = *(unint64_t **)v57;
      if (!v58)
        break;
      v60 = v59[3 * v58 - 2];
      v61 = *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24) | (v51 >> 1) & 3;
      v62 = (v60 >> 1) & 3 | *(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
      v63 = *(unint64_t **)v57;
      v64 = *((unsigned int *)v57 + 2);
      if (v61 >= v62)
        goto LABEL_76;
      do
      {
        v65 = v64 >> 1;
        v66 = v63[3 * (v64 >> 1) + 1];
        LODWORD(v66) = (v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24);
        v64 -= (v64 >> 1) + 1;
        v67 = v61 >= v66;
        if (v61 >= v66)
          v68 = v65 + 1;
        else
          v68 = 0;
        v63 += 3 * v68;
        if (!v67)
          v64 = v65;
      }
      while (v64);
LABEL_77:
      v69 = &v59[3 * v58];
      if (v63 == v69)
        goto LABEL_92;
      v70 = v51 & 0xFFFFFFFFFFFFFFF8;
      v71 = *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24) | (v51 >> 1) & 3;
      v72 = ((*v63 >> 1) & 3 | *(_DWORD *)((*v63 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v71
         && v71 < ((v63[1] >> 1) & 3 | *(_DWORD *)((v63[1] & 0xFFFFFFFFFFFFFFF8) + 24));
      v73 = &v63[3 * v72];
      if (v73 == v69)
        goto LABEL_92;
      v74 = *v73;
      if (v73 == v59)
      {
        if (v74 < 8)
          goto LABEL_92;
        v75 = v74 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v75 = v74 & 0xFFFFFFFFFFFFFFF8;
        if ((*(v73 - 2) & 0xFFFFFFFFFFFFFFF8) == (v74 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_92;
        v76 = (*(v73 - 3) & 0xFFFFFFFFFFFFFFF8) != v70 && v74 > 7;
        if (!v76)
          goto LABEL_92;
      }
      if (*(_QWORD *)(v75 + 16))
      {
        v77 = v55;
        v173 = v37;
        v169 = v39;
        v153 = v38;
        v150 = v50;
        v157 = v36;
        v161 = v35;
        v184 = *(uint64_t **)(v75 + 16);
        v181 = 0;
        v165 = (uint64_t *)result;
        if ((sub_1C61252B8((uint64_t *)result, &v184, &v181) & 1) == 0)
        {
          v35 = v161;
          result = (unint64_t)v165;
          v36 = v157;
          v38 = v153;
          v39 = v169;
          goto LABEL_109;
        }
        v35 = v161;
        result = (unint64_t)v165;
        v36 = v157;
        v148 = (llvm::SUnit *)*((_QWORD *)v181 + 1);
        v38 = v153;
        v39 = v169;
        v37 = v173;
        if (v148)
        {
          v78 = v77;
          v144 = v33;
          v184 = v161;
          v185 = v153;
          v79 = *((unsigned int *)v150 + 2);
          v80 = *(_QWORD *)v150 + 24 * v79;
          v81 = *(_QWORD *)(v80 - 16);
          v82 = (v81 >> 1) & 3;
          v83 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (v82)
          {
            v84 = v83 | (2 * (v82 - 1));
            if ((_DWORD)v79)
              goto LABEL_98;
          }
          else
          {
            v84 = *(_QWORD *)v83 | 6;
            if ((_DWORD)v79)
            {
LABEL_98:
              v85 = *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24) | (v84 >> 1) & 3;
              if (v85 < (*(_DWORD *)(v83 + 24) | v82))
              {
                v80 = *(_QWORD *)v150;
                do
                {
                  v86 = v79 >> 1;
                  v87 = *(_QWORD *)(v80 + 24 * (v79 >> 1) + 8);
                  LODWORD(v87) = (v87 >> 1) & 3 | *(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v79 -= (v79 >> 1) + 1;
                  v88 = v85 >= v87;
                  if (v85 >= v87)
                    v89 = v86 + 1;
                  else
                    v89 = 0;
                  v80 += 24 * v89;
                  if (!v88)
                    v79 = v86;
                }
                while (v79);
              }
            }
          }
          v90 = *(_QWORD *)(*(_QWORD *)(v80 + 16) + 8);
          if (v90 < 8)
            v91 = 0;
          else
            v91 = *(void **)((v90 & 0xFFFFFFFFFFFFFFF8) + 16);
          v181 = v91;
          v178 = 0;
          sub_1C61252B8(v165, &v181, &v178);
          v118 = *(_QWORD *)(v178 + 8);
          v119 = *(unsigned int *)(v118 + 120);
          v120 = v148;
          if ((_DWORD)v119)
          {
            v121 = *(uint64_t **)(v118 + 112);
            v122 = 16 * v119;
            do
            {
              v123 = *v121;
              if ((*v121 & 6) == 0)
              {
                v124 = (const llvm::SUnit *)(v123 & 0xFFFFFFFFFFFFFFF8);
                if (*((_DWORD *)v121 + 2) == v47 && v120 != v124)
                {
                  if (v177 == v120)
                  {
                    v126 = v123 & 0xFFFFFFFFFFFFFFF8;
                  }
                  else
                  {
                    if (llvm::ScheduleDAGTopologicalSort::IsReachable(v173, v124, v120))
                      goto LABEL_174;
                    v126 = *v121 & 0xFFFFFFFFFFFFFFF8;
                  }
                  v127 = v185;
                  if (v185 >= (unint64_t)HIDWORD(v185))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v184, (uint64_t)v161, v185 + 1, 8);
                    v127 = v185;
                  }
                  v184[v127] = v126;
                  LODWORD(v185) = v185 + 1;
                  v120 = v148;
                }
              }
              v121 += 2;
              v122 -= 16;
            }
            while (v122);
          }
          v181 = v157;
          v182 = v153;
          v128 = **(_QWORD **)v150;
          if (v128 < 8)
            v129 = 0;
          else
            v129 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFFFF8) + 16);
          v178 = v129;
          v180 = 0;
          v130 = 0;
          if (sub_1C61252B8(v165, &v178, &v180))
            v130 = *(const llvm::SUnit **)(v180 + 8);
          v131 = *((unsigned int *)v148 + 10);
          if ((_DWORD)v131)
          {
            v132 = (uint64_t *)*((_QWORD *)v148 + 4);
            v133 = 16 * v131;
            do
            {
              v134 = *v132;
              if ((*v132 & 6) == 2)
              {
                v135 = v134 & 0xFFFFFFFFFFFFFFF8;
                if (*((_DWORD *)v132 + 2) == v78 && v130 != (const llvm::SUnit *)v135)
                {
                  if (v177 != v130)
                  {
                    if (llvm::ScheduleDAGTopologicalSort::IsReachable(v173, (const llvm::SUnit *)(v134 & 0xFFFFFFFFFFFFFFF8), v130))
                    {
                      goto LABEL_172;
                    }
                    v135 = *v132 & 0xFFFFFFFFFFFFFFF8;
                  }
                  v137 = v182;
                  if (v182 >= (unint64_t)HIDWORD(v182))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v181, (uint64_t)v157, v182 + 1, 8);
                    v137 = v182;
                  }
                  *((_QWORD *)v181 + v137) = v135;
                  LODWORD(v182) = v182 + 1;
                }
              }
              v132 += 2;
              v133 -= 16;
            }
            while (v133);
          }
          if ((_DWORD)v185)
          {
            v138 = v184;
            v139 = 8 * v185;
            do
            {
              v140 = *v138++;
              v178 = v140 | 6;
              v179 = v169;
              llvm::ScheduleDAGInstrs::addEdge(a2, v148, (const llvm::SDep *)&v178);
              v139 -= 8;
            }
            while (v139);
          }
          if ((_DWORD)v182)
          {
            v141 = (uint64_t *)v181;
            v142 = 8 * v182;
            do
            {
              v143 = *v141++;
              v178 = v143 | 6;
              v179 = v169;
              llvm::ScheduleDAGInstrs::addEdge(a2, v130, (const llvm::SDep *)&v178);
              v142 -= 8;
            }
            while (v142);
          }
LABEL_172:
          if (v181 != v157)
            free(v181);
LABEL_174:
          if (v184 != v161)
            free(v184);
          v35 = v161;
          result = (unint64_t)v165;
          v36 = v157;
          v33 = v144;
          v38 = v153;
          v39 = v169;
LABEL_109:
          v37 = v173;
        }
      }
LABEL_92:
      v34 += 272;
      if (v34 == v33)
        return result;
    }
    v58 = 0;
LABEL_76:
    v63 = &v59[3 * v58];
    goto LABEL_77;
  }
  return result;
}

void sub_1C51B2E88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;
  unint64_t v15;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    v13 = *(_QWORD *)a1 + 16 * v6;
    if (*(_QWORD *)a1 <= a3 && v13 > a3)
    {
      v15 = a3 - *(_QWORD *)a1;
      sub_1C4DF5FEC(a1, v7);
      v3 = *(_QWORD *)a1 + v15;
    }
    else
    {
      sub_1C4DF5FEC(a1, v7);
    }
  }
  v8 = *(unsigned int *)(a1 + 8);
  if (a2)
  {
    v9 = (unsigned int *)(*(_QWORD *)a1 + 16 * v8 + 8);
    v10 = a2;
    do
    {
      v11 = *(_DWORD *)(v3 + 8);
      *v9 = v11;
      if (v11 > 0x40)
      {
        v12 = (void *)operator new[]();
        *((_QWORD *)v9 - 1) = v12;
        memcpy(v12, *(const void **)v3, (((unint64_t)*v9 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *((_QWORD *)v9 - 1) = *(_QWORD *)v3;
      }
      v9 += 4;
      --v10;
    }
    while (v10);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

uint64_t sub_1C51B2F8C()
{
  int v1;
  uint64_t (*v2)();
  uint64_t (**v3)();
  __n128 v4;

  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force top-down list scheduling";
  v4.n128_u64[1] = 30;
  sub_1C61B2D38((uint64_t)&llvm::ForceTopDown, "misched-topdown", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ForceTopDown, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force bottom-up list scheduling";
  v4.n128_u64[1] = 31;
  sub_1C61B2D38((uint64_t)&llvm::ForceBottomUp, "misched-bottomup", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ForceBottomUp, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Print critical path length to stdout";
  v4.n128_u64[1] = 36;
  sub_1C61B2D38((uint64_t)&llvm::DumpCriticalPathLength, "misched-dcpl", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DumpCriticalPathLength, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Verify machine instrs before and after machine scheduling";
  v4.n128_u64[1] = 57;
  sub_1C61B2D38((uint64_t)&llvm::VerifyScheduling, "verify-misched", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::VerifyScheduling, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Limit ready list to N instructions";
  v4.n128_u64[1] = 34;
  v1 = 256;
  LODWORD(v2) = 1;
  v3 = (uint64_t (**)())&v1;
  sub_1C6147F28((uint64_t)&unk_1ED82FA78, "misched-limit", &v2, &v4, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82FA78, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable register pressure scheduling.";
  v4.n128_u64[1] = 36;
  LOBYTE(v1) = 1;
  v3 = (uint64_t (**)())&v1;
  sub_1C6148018((llvm::cl::Option *)&qword_1ED7FBC70[24], "misched-regpressure", &v2, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FBC70[24], &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable cyclic critical path analysis.";
  v4.n128_u64[1] = 37;
  LOBYTE(v1) = 1;
  v3 = (uint64_t (**)())&v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FBDF0, "misched-cyclicpath", &v2, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FBDF0, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable memop clustering.";
  v4.n128_u64[1] = 24;
  LOBYTE(v1) = 1;
  v3 = (uint64_t (**)())&v1;
  sub_1C61FC664(&v2, &v4, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FBEB0, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Switch to fast cluster algorithm with the lost of some fusion opportunities";
  v4.n128_u64[1] = 75;
  LOBYTE(v1) = 0;
  v3 = (uint64_t (**)())&v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FBF70, "force-fast-cluster", &v2, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FBF70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"The threshold for fast cluster";
  v4.n128_u64[1] = 30;
  v1 = 1000;
  LODWORD(v2) = 1;
  v3 = (uint64_t (**)())&v1;
  sub_1C6147F28((uint64_t)&unk_1ED7FC030, "fast-cluster-threshold", &v2, &v4, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FC030, &dword_1C475E000);
  v2 = sub_1C51A66A8;
  v3 = &v2;
  v1 = 1;
  v4.n128_u64[0] = (unint64_t)"Machine instruction scheduler to use";
  v4.n128_u64[1] = 36;
  sub_1C61FC708((uint64_t **)&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C61FAEA4, &qword_1ED7FC270, &dword_1C475E000);
  sub_1C4769074(qword_1ED7FBC70, "default", "Use the target's default scheduler choice.", (uint64_t)sub_1C51A66A8);
  __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7FBC70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable the machine instruction scheduling pass.";
  v4.n128_u64[1] = 47;
  LOBYTE(v1) = 1;
  v3 = (uint64_t (**)())&v1;
  LODWORD(v2) = 1;
  sub_1C61FC814(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FC0F0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable the post-ra machine instruction scheduling pass.";
  v4.n128_u64[1] = 55;
  LOBYTE(v1) = 1;
  v3 = (uint64_t (**)())&v1;
  LODWORD(v2) = 1;
  sub_1C61FC8B8(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FC1B0, &dword_1C475E000);
  sub_1C4769074(&qword_1ED7FBC70[6], "converge", "Standard converging scheduler.", (uint64_t)llvm::createGenericSchedLive);
  __cxa_atexit((void (*)(void *))sub_1C476900C, &qword_1ED7FBC70[6], &dword_1C475E000);
  sub_1C4769074(&qword_1ED7FBC70[12], "ilpmax", "Schedule bottom-up for max ILP", (uint64_t)sub_1C51ACD04);
  __cxa_atexit((void (*)(void *))sub_1C476900C, &qword_1ED7FBC70[12], &dword_1C475E000);
  sub_1C4769074(&qword_1ED7FBC70[18], "ilpmin", "Schedule bottom-up for min ILP", (uint64_t)sub_1C51ACDAC);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, &qword_1ED7FBC70[18], &dword_1C475E000);
}

uint64_t sub_1C51B3448(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineCycleInfoWrapperPassPass(a1, v3);
  llvm::initializeAAResultsWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Machine code sinking";
  *(_QWORD *)(v5 + 8) = 20;
  *(_QWORD *)(v5 + 16) = "machine-sink";
  *(_QWORD *)(v5 + 24) = 12;
  *(_QWORD *)(v5 + 32) = &unk_1EF8F6FA0;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C51B3580;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C51B34F4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "PostRA Machine Sink";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "postra-machine-sink";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FA1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51BB5FC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C51B3580()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v0 = (_QWORD *)operator new();
  v1 = sub_1C4776848((uint64_t)v0, (uint64_t)&unk_1EF8F6FA0);
  *(_QWORD *)v1 = &off_1E81467E8;
  *(_QWORD *)(v1 + 320) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_QWORD *)(v1 + 360) = v1 + 384;
  *(_OWORD *)(v1 + 368) = xmmword_1C6612EF0;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x600000000;
  *(_DWORD *)(v1 + 456) = 0;
  *(_QWORD *)(v1 + 464) = v1 + 480;
  *(_QWORD *)(v1 + 472) = 0x600000000;
  *(_DWORD *)(v1 + 528) = 0;
  *(_QWORD *)(v1 + 536) = 0;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_QWORD *)(v1 + 560) = v1 + 576;
  *(_QWORD *)(v1 + 568) = 0x800000000;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_QWORD *)(v1 + 704) = v1 + 712;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_OWORD *)(v1 + 780) = 0u;
  v2 = 101;
  *(_QWORD *)(v1 + 800) = 1;
  do
  {
    LODWORD(v0[v2]) = -1;
    v2 += 2;
  }
  while (v2 != 109);
  *(_QWORD *)(v1 + 872) = 0;
  *(_QWORD *)(v1 + 880) = 0;
  *(_DWORD *)(v1 + 888) = 0;
  v0[114] = 0;
  v0[113] = 0;
  v0[112] = v0 + 113;
  v0[117] = 0;
  v0[116] = 0;
  v0[115] = v0 + 116;
  v0[120] = 0;
  v0[119] = 0;
  v0[118] = v0 + 119;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7FC518);
  if (v4 != -1)
  {
    v8[0] = sub_1C51B3448;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7FC518, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51B3748(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E81467E8;
  sub_1C61CEBB4(*(_QWORD **)(a1 + 952));
  sub_1C51B6C10(*(_QWORD **)(a1 + 928));
  sub_1C6143384(*(_QWORD **)(a1 + 904));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 872), 8);
  sub_1C61FCB94((uint64_t *)(a1 + 800));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 776), 4);
  sub_1C6176BF8((_QWORD *)(a1 + 728));
  sub_1C6143384(*(_QWORD **)(a1 + 712));
  v2 = *(void **)(a1 + 560);
  if (v2 != (void *)(a1 + 576))
    free(v2);
  sub_1C61D92E0((uint64_t *)(a1 + 320));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C51B3830(uint64_t a1)
{
  sub_1C51B3748(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51B3854(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  void *result;

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineCycleInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineCycleInfoWrapperPass::ID);
  result = sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  if (byte_1ED7FC668)
    return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  return result;
}

void sub_1C51B3938(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 568) = 0;
  v2 = a1 + 712;
  sub_1C6143384(*(_QWORD **)(a1 + 712));
  *(_QWORD *)(a1 + 704) = v2;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
}

uint64_t sub_1C51B3970(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  char v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  unsigned __int16 *v60;
  __int16 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const llvm::TargetRegisterInfo *v71;
  llvm::TargetInstrInfo *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  _QWORD *v78;
  _BYTE *v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  unsigned __int16 *i;
  unsigned __int16 *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char mayAlias;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned __int16 *v133;
  __int16 v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  char *v141;
  unint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  unsigned int v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  __int32 v156;
  unsigned __int32 v157;
  _BYTE *v158;
  const void *v159;
  void *v160;
  int v161;
  unsigned int v162;
  char *v163;
  unint64_t *v164;
  uint64_t v165;
  char *v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  int v171;
  unsigned int v172;
  unsigned int *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int *v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t *v190;
  _QWORD *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t j;
  uint64_t v196;
  unsigned __int16 *v198;
  __int16 v199;
  uint64_t v200;
  uint64_t **v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t **v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  char v219;
  char *v220;
  char *v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  __int128 v227;
  char *v228;
  unsigned int *v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  uint64_t *v233;
  int v234;
  BOOL v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  const llvm::MachineBasicBlock *v240;
  const llvm::MachineBasicBlock *v241;
  char v242;
  int v243;
  const llvm::DILocation **v244;
  int v245;
  uint64_t v246;
  _DWORD *v247;
  _DWORD *v248;
  int v249;
  int v250;
  _QWORD *v251;
  int v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  int v265;
  int *v266;
  uint64_t *v267;
  uint64_t v268;
  char *v269;
  __int128 *v270;
  char *v271;
  void *v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  int64_t v279;
  uint64_t ***v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  int v284;
  unsigned int v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  int v289;
  BOOL v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  _DWORD *v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  unsigned int v302;
  _DWORD *v303;
  int v304;
  _DWORD *v305;
  int v306;
  BOOL v307;
  unsigned int v308;
  _DWORD *v309;
  _DWORD *v310;
  int8x16_t *v311;
  uint64_t v312;
  unint64_t *v313;
  uint64_t v314;
  _DWORD *v315;
  _DWORD *v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  void *v328;
  uint64_t **v329;
  uint64_t *v330;
  uint64_t *v331;
  uint64_t *v332;
  char *v333;
  uint64_t v334;
  unint64_t *v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t *v338;
  int *v339;
  unsigned int *v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  unint64_t *v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t *v353;
  __int32 v354;
  int v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t **v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  unsigned int v385;
  uint64_t v386;
  llvm::MachineBasicBlock **v387;
  llvm::MachineBasicBlock **v388;
  uint64_t v389;
  const llvm::MachineBasicBlock *v390;
  llvm::MachineBlockFrequencyInfo *v391;
  unsigned int v392;
  int v393;
  int v394;
  void *v395;
  size_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int *v405;
  uint64_t v406;
  unsigned int *v407;
  unsigned int *v408;
  unsigned int *v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  uint64_t *v417;
  uint64_t *v418;
  uint64_t *v419;
  unint64_t *v420;
  uint64_t v421;
  llvm::MachineBasicBlock *CyclePreheader;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  unsigned __int16 v426;
  __int16 v427;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  _DWORD *v431;
  BOOL v432;
  int *v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  _DWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  unint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t NearestCommonDominator;
  unsigned int v466;
  uint64_t v467;
  unint64_t *v468;
  unsigned __int8 **v469;
  unsigned __int8 *v470;
  const llvm::DILocation **v471;
  const llvm::DILocation **v472;
  uint64_t v473;
  void **v474;
  uint64_t **v475;
  _QWORD *v476;
  uint64_t **v477;
  uint64_t v478;
  char *v479;
  _QWORD *v480;
  int v481;
  uint64_t v482;
  int *v483;
  _QWORD *v484;
  char v485;
  _OWORD *v486;
  llvm::MachineFunction *v487;
  int v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  unint64_t v493;
  int v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  int v500;
  int v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t *v510;
  unsigned int *v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t *v517;
  BOOL v518;
  _QWORD **v519;
  _QWORD *v520[2];
  BOOL v521;
  char v522;
  uint64_t v523;
  __int128 v524;
  void *v525;
  int8x16_t v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t *v535;
  unint64_t *v536;
  unint64_t v537;
  _BYTE *v538;
  _BYTE *v539;
  uint64_t v540;
  int v541;
  _BYTE v542[64];
  _BYTE *v543;
  _BYTE *v544;
  uint64_t v545;
  unsigned int *v546;
  uint64_t v547;
  _DWORD v548[6];
  _DWORD *v549;
  uint64_t *v550;
  uint64_t v551;
  _DWORD v552[4];
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  BOOL v563[8];
  uint64_t v564;
  uint64_t v565;
  int v566;
  _BYTE v567[64];
  unint64_t *v568;
  unint64_t *v569;
  unint64_t v570;
  __int128 v571;
  unint64_t v572;
  int v573;
  uint64_t v574;
  unint64_t *v575;
  unsigned int *v576;
  uint64_t v577;
  _QWORD v578[3];
  _QWORD *v579;
  char *v580;
  uint64_t *v581;
  unint64_t v582;
  uint64_t v583;

  v3 = (uint64_t)a1;
  v583 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) != 0)
  {
    v4 = 0;
    return v4 & 1;
  }
  *(_QWORD *)(v3 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v487 = (llvm::MachineFunction *)a2;
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(v3 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v3 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineDominatorTree::ID);
  v7 = **(void ****)(v3 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachinePostDominatorTree::ID);
  *(_QWORD *)(v3 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachinePostDominatorTree::ID);
  v9 = **(void ****)(v3 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineCycleInfoWrapperPass::ID);
  *(_QWORD *)(v3 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineCycleInfoWrapperPass::ID)+ 256;
  if (byte_1ED7FC668)
  {
    v11 = **(void ****)(v3 + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
    }
    while (v12 != &llvm::MachineBlockFrequencyInfo::ID);
    v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(v3 + 296) = v13;
  v14 = **(void ****)(v3 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::MachineBranchProbabilityInfo::ID);
  *(_QWORD *)(v3 + 304) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  v16 = **(void ****)(v3 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v3 + 312) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v3 + 320), (const llvm::MachineFunction *)a2);
  v18 = 0;
  v486 = (_OWORD *)(v3 + 712);
  v473 = v3 + 728;
  v19 = (_QWORD *)(a2 + 320);
  v504 = (uint64_t *)(v3 + 872);
  v511 = (unsigned int *)(v3 + 800);
  v477 = (uint64_t **)(v3 + 896);
  v484 = (_QWORD *)(v3 + 904);
  v480 = (_QWORD *)(v3 + 928);
  v475 = (uint64_t **)(v3 + 920);
  v492 = (_QWORD *)(v3 + 808);
  v474 = (void **)(v3 + 776);
  v498 = v3 + 952;
  v499 = (_QWORD *)(a2 + 320);
  v503 = v3;
  do
  {
    v485 = v18;
    *(_DWORD *)(v3 + 568) = 0;
    sub_1C6143384(*(_QWORD **)(v3 + 712));
    *(_QWORD *)(v3 + 704) = v486;
    *v486 = 0u;
    v20 = *(_DWORD *)(v3 + 736);
    if (v20)
    {
      v392 = *(_DWORD *)(v3 + 744);
      if (v392 <= 4 * v20 || v392 < 0x41)
        goto LABEL_740;
      v393 = 1 << (33 - __clz(v20 - 1));
      if (v393 <= 64)
        v394 = 64;
      else
        v394 = v393;
    }
    else
    {
      if (!*(_DWORD *)(v3 + 740))
        goto LABEL_21;
      v392 = *(_DWORD *)(v3 + 744);
      if (v392 <= 0x40)
      {
        v3 = v503;
        v19 = v499;
LABEL_740:
        if (v392)
        {
          v400 = *(_QWORD **)v473;
          v401 = *(_QWORD *)v473 + 16 * v392;
          do
          {
            *v400 = -4096;
            v400[1] = -4096;
            v400 += 2;
          }
          while (v400 != (_QWORD *)v401);
        }
        *(_QWORD *)(v3 + 736) = 0;
        goto LABEL_21;
      }
      v394 = 0;
      v3 = v503;
      v19 = v499;
    }
    if (v394 == v392)
    {
      *(_QWORD *)(v3 + 736) = 0;
      v395 = *(void **)(v3 + 728);
      v396 = 16 * v392;
LABEL_735:
      memset_pattern16(v395, &unk_1C85F2160, v396);
      goto LABEL_21;
    }
    MEMORY[0x1CAA32FB4](*(_QWORD *)v473, 8);
    if (!v394)
    {
      *(_QWORD *)v473 = 0;
      *(_QWORD *)(v473 + 8) = 0;
      *(_DWORD *)(v473 + 16) = 0;
      goto LABEL_21;
    }
    v397 = (4 * v394 / 3u + 1) | ((unint64_t)(4 * v394 / 3u + 1) >> 1);
    v398 = v397 | (v397 >> 2) | ((v397 | (v397 >> 2)) >> 4);
    LODWORD(v398) = (((v398 | (v398 >> 8)) >> 16) | v398 | (v398 >> 8)) + 1;
    *(_DWORD *)(v3 + 744) = v398;
    v395 = operator new(16 * v398, (std::align_val_t)8uLL);
    *(_QWORD *)(v3 + 728) = v395;
    *(_QWORD *)(v3 + 736) = 0;
    v399 = *(unsigned int *)(v3 + 744);
    if ((_DWORD)v399)
    {
      v396 = 16 * v399;
      goto LABEL_735;
    }
LABEL_21:
    *(_QWORD *)(v3 + 760) = *(_QWORD *)(v3 + 752);
    v21 = (_QWORD *)*((_QWORD *)v487 + 41);
    if (v21 == v19)
      break;
    v22 = 0;
    do
    {
      if (((v21[12] - v21[11]) & 0x7FFFFFFF0) == 0
        || v21 + 6 == (_QWORD *)(v21[6] & 0xFFFFFFFFFFFFFFF8)
        || (v23 = *(_QWORD *)(v3 + 272),
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v23),
            !llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry(*(_QWORD *)(v23 + 1320), (uint64_t)v21)))
      {
        v377 = 0;
        goto LABEL_690;
      }
      v520[0] = 0;
      v520[1] = 0;
      v519 = v520;
      v24 = v21[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v24 || (*(_BYTE *)v24 & 4) == 0)
      {
        while ((*(_WORD *)(v24 + 44) & 4) != 0)
          v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      }
      v500 = v22;
      v501 = 0;
      v518 = 0;
      do
      {
        v25 = v24;
        v26 = v21[7];
        if (v24 != v26)
        {
          v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v24 & 4) == 0)
          {
            while ((*(_WORD *)(v24 + 44) & 4) != 0)
              v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v27 = **(unsigned __int16 **)(v25 + 16);
        if ((v27 - 13) < 5)
          goto LABEL_39;
        if (v27 != 19)
        {
          if (v27 != 23)
            goto LABEL_83;
LABEL_39:
          if ((v27 - 13) <= 1)
          {
            v59 = v27 == 14;
            v28 = v27 != 14;
            v29 = 96;
            if (v59)
              v29 = 32;
            v30 = *(_QWORD *)(v25 + 56);
            if (*(_DWORD *)(v30 + 8) == 2)
              v31 = *(_QWORD *)(v30 - 8);
            else
              v31 = 0;
            v32 = *(_QWORD *)(v25 + 32);
            v33 = *(_QWORD *)(v32 + v29 + 16);
            v525 = *(void **)(v32 + (v28 << 6) + 16);
            if (v33)
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v33 + 24), *(uint64_t **)(v33 + 32), &v526);
            }
            else
            {
              v526.i8[0] = 0;
              LOBYTE(v527) = 0;
            }
            v528 = v31;
            *(_QWORD *)&v571 = 0;
            v506 = v26;
            if (sub_1C51B6D1C(v504, (uint64_t *)&v525, (uint64_t *)&v571))
              v34 = v571;
            else
              v34 = *(_QWORD *)(v3 + 872) + 40 * *(unsigned int *)(v3 + 888);
            v513 = v25;
            v35 = *(unsigned int *)(v25 + 40);
            if (**(_WORD **)(v25 + 16) != 14)
              v35 = 1;
            if (2 * (**(_WORD **)(v25 + 16) == 14) != v35)
            {
              v36 = v34 != *(_QWORD *)(v503 + 872) + 40 * *(unsigned int *)(v503 + 888);
              v37 = v25 | (4 * v36);
              v38 = v25 & 0xFFFFFFFFFFFFFFFDLL | (4 * v36);
              v39 = 32 * v35 - ((unint64_t)(**(_WORD **)(v25 + 16) == 14) << 6);
              v40 = (_DWORD *)(*(_QWORD *)(v25 + 32) + ((unint64_t)(**(_WORD **)(v25 + 16) == 14) << 6) + 4);
              do
              {
                if (!*((_BYTE *)v40 - 4) && (*v40 & 0x80000000) != 0)
                {
                  v41 = v21;
                  LODWORD(v571) = *v40;
                  v42 = sub_1C51B6E34((uint64_t)v511, (int *)&v571);
                  v43 = v42;
                  v44 = *(_QWORD *)(v42 + 8);
                  if (v44 > 3)
                  {
                    if ((v44 & 2) == 0)
                    {
                      v45 = v38;
                      v46 = operator new();
                      *(_QWORD *)v46 = v46 + 16;
                      *(_QWORD *)(v46 + 8) = 0x400000000;
                      *(_QWORD *)(v43 + 8) = v46 | 2;
                      v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
                      v48 = *(unsigned int *)((v46 & 0xFFFFFFFFFFFFFFFCLL) + 8);
                      if (v48 >= *(unsigned int *)((v46 & 0xFFFFFFFFFFFFFFFCLL) + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v46 & 0xFFFFFFFFFFFFFFFCLL, v47 + 16, v48 + 1, 8);
                        v48 = *(unsigned int *)(v47 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v47 + 8 * v48) = v44 & 0xFFFFFFFFFFFFFFFCLL;
                      ++*(_DWORD *)(v47 + 8);
                      v44 = *(_QWORD *)(v43 + 8);
                      v38 = v45;
                    }
                    v49 = v44 & 0xFFFFFFFFFFFFFFFCLL;
                    v50 = *(unsigned int *)((v44 & 0xFFFFFFFFFFFFFFFCLL) + 8);
                    if (v50 >= *(unsigned int *)((v44 & 0xFFFFFFFFFFFFFFFCLL) + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v44 & 0xFFFFFFFFFFFFFFFCLL, v49 + 16, v50 + 1, 8);
                      v50 = *(unsigned int *)(v49 + 8);
                    }
                    v21 = v41;
                    *(_QWORD *)(*(_QWORD *)v49 + 8 * v50) = v37;
                    ++*(_DWORD *)(v49 + 8);
                  }
                  else
                  {
                    *(_QWORD *)(v42 + 8) = v38;
                    v21 = v41;
                  }
                }
                v40 += 8;
                v39 -= 32;
              }
              while (v39);
            }
            sub_1C51B72F4((uint64_t)v504, (uint64_t)&v525, (uint64_t)&v571);
            v3 = v503;
            v25 = v513;
            v26 = v506;
          }
          continue;
        }
        v51 = *(_QWORD *)(v25 + 32);
        v52 = *(_DWORD *)(v51 + 36);
        if ((v52 & 0x80000000) == 0)
          goto LABEL_83;
        v53 = *(_DWORD *)(v51 + 4);
        if ((v53 & 0x80000000) == 0)
          goto LABEL_83;
        v54 = *(_QWORD **)(v3 + 264);
        if (!llvm::MachineRegisterInfo::hasOneNonDBGUse((uint64_t)v54, *(_DWORD *)(v51 + 36)))
          goto LABEL_83;
        v55 = v54[3];
        v56 = v53 & 0x7FFFFFFF;
        if ((*(_QWORD *)(v55 + 16 * (v52 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v55 + 16 * v56) & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_83;
        v57 = *(_QWORD *)(v55 + 16 * (v52 & 0x7FFFFFFF) + 8);
        if ((*(_BYTE *)(v57 + 3) & 1) == 0)
          v57 = *(_QWORD *)(v57 + 24);
        v58 = **(unsigned __int16 **)(*(_QWORD *)(v57 + 8) + 16);
        v59 = v58 == 11 || v58 == 19;
        if (v59)
        {
LABEL_83:
          if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 248) + 160))(*(_QWORD *)(v3 + 248), v25))goto LABEL_403;
          if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v25, *(llvm::AAResults **)(v3 + 312), &v518))
            goto LABEL_403;
          v60 = *(unsigned __int16 **)(v25 + 16);
          if (*v60 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v25 + 32) + 48) & 0x20) != 0)
            goto LABEL_403;
          v61 = *(_WORD *)(v25 + 44);
          v62 = *((_QWORD *)v60 + 1);
          if ((v61 & 0xC) != 0 && (v61 & 4) == 0)
          {
            v371 = v25;
            if ((v62 & 0x1000000000) != 0)
              goto LABEL_403;
            while ((*(_WORD *)(v371 + 44) & 8) != 0)
            {
              v243 = 0;
              v371 = *(_QWORD *)(v371 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v371 + 16) + 12) & 0x10) != 0)
                goto LABEL_404;
            }
          }
          else if ((v62 & 0x1000000000) != 0)
          {
            goto LABEL_403;
          }
          v63 = *(uint64_t **)(*(_QWORD *)(v25 + 24) + 64);
          if (((*(_QWORD *)(*(_QWORD *)(v25 + 24) + 72) - (_QWORD)v63) & 0x7FFFFFFF8) == 8)
          {
            v64 = *v63;
            v65 = *(_QWORD *)(*v63 + 16);
            if (v65)
            {
              v66 = *(_QWORD *)(v65 + 40);
              if (v66 == v65 + 40)
              {
                v67 = 0;
              }
              else
              {
                v67 = (_BYTE *)(v66 - 24);
                if (!v66)
                  v67 = 0;
                if (v67[16] - 29 >= 0xB)
                  v67 = 0;
              }
              if ((v67[23] & 0x20) != 0)
              {
                v72 = *(llvm::TargetInstrInfo **)(v3 + 248);
                v71 = *(const llvm::TargetRegisterInfo **)(v3 + 256);
                v73 = ***(_QWORD ***)v67;
                v525 = v67;
                v74 = *(_DWORD *)(v73 + 2496);
                if (!v74)
                {
                  v327 = 0;
                  goto LABEL_544;
                }
                v75 = *(_QWORD *)(v73 + 2480);
                v76 = v74 - 1;
                v77 = v76 & ((v67 >> 4) ^ (v67 >> 9));
                v78 = (_QWORD *)(v75 + 40 * v77);
                v79 = (_BYTE *)*v78;
                if ((_BYTE *)*v78 != v67)
                {
                  v80 = 0;
                  v81 = 1;
                  while (v79 != (_BYTE *)-4096)
                  {
                    if (v80)
                      v82 = 0;
                    else
                      v82 = v79 == (_BYTE *)-8192;
                    if (v82)
                      v80 = v78;
                    v83 = v77 + v81++;
                    v77 = v83 & v76;
                    v78 = (_QWORD *)(v75 + 40 * v77);
                    v79 = (_BYTE *)*v78;
                    if ((_BYTE *)*v78 == v67)
                      goto LABEL_114;
                  }
                  if (v80)
                    v327 = v80;
                  else
                    v327 = v78;
LABEL_544:
                  v78 = sub_1C541AB24(v73 + 2480, (uint64_t)&v525, (uint64_t *)&v525, v327);
                  v328 = v525;
                  v78[4] = 0;
                  v78[3] = 0;
                  *v78 = v328;
                  v78[1] = v78 + 3;
                  v78[2] = 0x100000000;
                }
LABEL_114:
                v84 = *((unsigned int *)v78 + 4);
                if ((_DWORD)v84)
                {
                  v85 = (_QWORD *)(v78[1] + 8);
                  v86 = 16 * v84;
                  while (*((_DWORD *)v85 - 2) != 14)
                  {
                    v85 += 2;
                    v86 -= 16;
                    if (!v86)
                      goto LABEL_118;
                  }
                  if (*v85)
                  {
                    *(_QWORD *)&v571 = 0;
                    *(_QWORD *)v563 = 0;
                    LOBYTE(v553) = 0;
                    if (llvm::TargetInstrInfo::getMemOperandWithOffset(v72, (const llvm::MachineInstr *)v25, (const llvm::MachineOperand **)&v571, (uint64_t *)v563, (BOOL *)&v553, v71))
                    {
                      v132 = v571;
                      if (!*(_BYTE *)v571)
                      {
                        v133 = *(unsigned __int16 **)(v25 + 16);
                        if (*v133 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v25 + 32) + 48) & 8) != 0)
                        {
                          v134 = *(_WORD *)(v25 + 44);
                          v136 = v134 & 0xC;
                          goto LABEL_198;
                        }
                        v134 = *(_WORD *)(v25 + 44);
                        v135 = *((_QWORD *)v133 + 1);
                        v136 = v134 & 0xC;
                        if ((v134 & 0xC) != 0 && (v134 & 4) == 0)
                        {
                          v373 = v26;
                          v374 = v21;
                          v375 = v25;
                          v376 = v25;
                          if ((v135 & 0x80000) != 0)
                          {
LABEL_682:
                            v3 = v503;
                            v21 = v374;
                            v25 = v375;
                            v26 = v373;
                            goto LABEL_198;
                          }
                          while (1)
                          {
                            v3 = v503;
                            v21 = v374;
                            v25 = v375;
                            v26 = v373;
                            if ((*(_WORD *)(v376 + 44) & 8) == 0)
                              break;
                            v376 = *(_QWORD *)(v376 + 8);
                            if ((*(_BYTE *)(*(_QWORD *)(v376 + 16) + 10) & 8) != 0)
                              goto LABEL_682;
                          }
                        }
                        else if ((v135 & 0x80000) != 0)
                        {
LABEL_198:
                          if (v136 && (v134 & 4) == 0)
                          {
                            v137 = v25;
                            while ((v133[5] & 0x40) != 0 || *v133 == 20)
                            {
                              if ((*(_WORD *)(v137 + 44) & 8) == 0)
                                goto LABEL_118;
                              v137 = *(_QWORD *)(v137 + 8);
                              v133 = *(unsigned __int16 **)(v137 + 16);
                            }
                            goto LABEL_618;
                          }
                          if ((v133[5] & 0x40) == 0)
                          {
LABEL_618:
                            LODWORD(v525) = 2;
                            v526.i32[0] = v526.i32[0] & 0xFFF00000 | 1;
                            v526.i64[1] = 0;
                            v527 = 0;
                            v529 = v529 & 0xFFF00000 | 1;
                            v530 = 0;
                            v531 = 0;
                            v533 = 0;
                            v534 = 0;
                            v532 = 0;
                            LOBYTE(v535) = 0;
                            if (((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t, void **, _QWORD))(*(_QWORD *)v72 + 256))(v72, v64, &v525, 0) & 1) == 0&& !v526.i8[0]&& v529 == 1&& !v531&& v525 <= 1&& v526.i32[1] == *(_DWORD *)(v132 + 4))
                            {
                              goto LABEL_403;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_118:
          v522 = 0;
          v87 = *(_QWORD *)(v25 + 24);
          v88 = (_QWORD *)sub_1C51B75E0(v3, v25, v87, &v522, (uint64_t)&v519);
          if (!v88)
            goto LABEL_403;
          v89 = (unint64_t)v88;
          v90 = *(_QWORD *)(v25 + 32);
          v91 = *(unsigned int *)(v25 + 40);
          if ((_DWORD)v91)
          {
            v92 = (_DWORD *)(v90 + 32 * v91);
            v93 = *(_DWORD **)(v25 + 32);
            while (1)
            {
              if ((*v93 & 0x10000FF) == 0x1000000)
              {
                v94 = v93[1];
                if ((v94 - 1) <= 0x3FFFFFFE)
                {
                  for (i = (unsigned __int16 *)v88[19]; ; i += 8)
                  {
                    if (i == (unsigned __int16 *)v88[20])
                      goto LABEL_128;
                    if (*i == (unsigned __int16)v94)
                      break;
                  }
                  if (*((_QWORD *)i + 1))
                    break;
                }
              }
LABEL_128:
              v93 += 8;
              if (v93 == v92)
                goto LABEL_129;
            }
LABEL_403:
            v243 = 0;
LABEL_404:
            v501 |= v243;
            continue;
          }
LABEL_129:
          if (((v88[9] - v88[8]) & 0x7FFFFFFF0) == 0)
            goto LABEL_399;
          v521 = 0;
          v96 = *(unsigned __int16 **)(v25 + 16);
          if (*v96 - 1 > 1 || (*(_BYTE *)(v90 + 48) & 8) == 0)
          {
            v97 = *(_WORD *)(v25 + 44);
            v98 = *((_QWORD *)v96 + 1);
            if ((v97 & 0xC) != 0 && (v97 & 4) == 0)
            {
              v372 = v25;
              if ((v98 & 0x80000) == 0)
              {
                do
                {
                  if ((*(_WORD *)(v372 + 44) & 8) == 0)
                  {
                    mayAlias = 1;
                    v3 = v503;
                    goto LABEL_171;
                  }
                  v372 = *(_QWORD *)(v372 + 8);
                  v3 = v503;
                }
                while ((*(_BYTE *)(*(_QWORD *)(v372 + 16) + 10) & 8) == 0);
              }
            }
            else if ((v98 & 0x80000) == 0)
            {
              goto LABEL_170;
            }
          }
          v99 = *(_QWORD *)(v3 + 272);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v99);
          if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v99 + 1320), v87, v89)
            || !llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 248), v89, v87))
          {
LABEL_170:
            mayAlias = 1;
            goto LABEL_171;
          }
          *(_QWORD *)&v524 = v87;
          *((_QWORD *)&v524 + 1) = v89;
          v100 = (_QWORD *)*v484;
          v495 = v89;
          if (*v484)
          {
            v101 = v484;
            do
            {
              v102 = v100[4];
              if (v102 >= v87)
              {
                if (v87 >= v102)
                {
                  if (v100[5] < v89)
                    ++v100;
                  else
                    v101 = v100;
                }
                else
                {
                  v101 = v100;
                }
              }
              else
              {
                ++v100;
              }
              v100 = (_QWORD *)*v100;
            }
            while (v100);
            if (v101 != v484)
            {
              v103 = v101[4];
              if (v87 >= v103 && (v103 < v87 || v89 >= v101[5]))
              {
                mayAlias = *((_BYTE *)sub_1C51BB03C(v477, v87, v89, &v524) + 48) != 0;
                goto LABEL_393;
              }
            }
          }
          v104 = (_QWORD *)*v480;
          if (*v480)
          {
            v105 = v480;
            do
            {
              v106 = v104[4];
              if (v106 >= v87)
              {
                if (v87 >= v106)
                {
                  if (v104[5] < v89)
                    ++v104;
                  else
                    v105 = v104;
                }
                else
                {
                  v105 = v104;
                }
              }
              else
              {
                ++v104;
              }
              v104 = (_QWORD *)*v104;
            }
            while (v104);
            if (v105 != v480)
            {
              v107 = v105[4];
              if (v87 >= v107 && (v107 < v87 || v89 >= v105[5]))
              {
                v329 = sub_1C51BB120(v475, v87, v89, &v524);
                v330 = v329[6];
                v331 = v329[7];
                if (v330 == v331)
                {
                  mayAlias = 0;
                }
                else
                {
                  v332 = v330 + 1;
                  do
                  {
                    mayAlias = llvm::MachineInstr::mayAlias((llvm::MachineInstr *)*(v332 - 1), *(llvm::AAResults **)(v3 + 312), (const llvm::MachineInstr *)v25, 0);
                    if ((mayAlias & 1) != 0)
                      break;
                    v59 = v332++ == v331;
                  }
                  while (!v59);
                }
                goto LABEL_393;
              }
            }
          }
          v546 = 0;
          v547 = 0;
          v548[0] = 0;
          v550 = 0;
          v551 = 0;
          v552[0] = 0;
          *(_QWORD *)v563 = v567;
          v564 = (uint64_t)v567;
          v565 = 8;
          v566 = 0;
          v569 = 0;
          v570 = 0;
          v568 = 0;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v563, v87);
          v108 = v569;
          v493 = v87;
          if ((unint64_t)v569 < v570)
          {
            *v569 = v87;
            *((_BYTE *)v108 + 8) = 0;
            v142 = v108 + 3;
            *((_BYTE *)v108 + 16) = 0;
          }
          else
          {
            v109 = v568;
            v110 = 0xAAAAAAAAAAAAAAABLL * (v569 - v568) + 1;
            if (v110 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_888;
            if (0x5555555555555556 * ((uint64_t)(v570 - (_QWORD)v568) >> 3) > v110)
              v110 = 0x5555555555555556 * ((uint64_t)(v570 - (_QWORD)v568) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v570 - (_QWORD)v568) >> 3) >= 0x555555555555555)
              v111 = 0xAAAAAAAAAAAAAAALL;
            else
              v111 = v110;
            if (v111)
            {
              if (v111 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_889;
              v112 = (char *)operator new(24 * v111);
            }
            else
            {
              v112 = 0;
            }
            v138 = &v112[8 * (v108 - v109)];
            *(_QWORD *)v138 = v493;
            v138[8] = 0;
            v138[16] = 0;
            v139 = v138;
            if (v108 != v109)
            {
              do
              {
                v140 = *(_OWORD *)(v108 - 3);
                *((_QWORD *)v139 - 1) = *(v108 - 1);
                *(_OWORD *)(v139 - 24) = v140;
                v139 -= 24;
                v108 -= 3;
              }
              while (v108 != v109);
              v108 = v568;
            }
            v141 = &v112[24 * v111];
            v568 = (unint64_t *)v139;
            v142 = (unint64_t *)(v138 + 24);
            v569 = (unint64_t *)(v138 + 24);
            v570 = (unint64_t)v141;
            if (v108)
              operator delete(v108);
          }
          v507 = v26;
          v514 = v25;
          v569 = v142;
          v555 = 0u;
          v556 = 0u;
          v557 = 0u;
          v558 = 0u;
          v559 = 0;
          *(_QWORD *)&v553 = (char *)&v555 + 8;
          *((_QWORD *)&v553 + 1) = (char *)&v555 + 8;
          v554 = 8;
          v561 = 0;
          v562 = 0;
          v560 = 0;
          *(_QWORD *)&v571 = &v574;
          v144 = *(uint64_t **)v563;
          v143 = (uint64_t *)v564;
          v476 = v21;
          if (v564 == *(_QWORD *)v563)
          {
            *((_QWORD *)&v571 + 1) = &v574;
            v145 = HIDWORD(v565);
            if (HIDWORD(v565))
              memmove(&v574, (const void *)v564, 8 * HIDWORD(v565));
            else
              v145 = 0;
            v146 = v143;
            v143 = &v574;
          }
          else
          {
            *((_QWORD *)&v571 + 1) = v564;
            v564 = *(_QWORD *)v563;
            v146 = *(uint64_t **)v563;
            v145 = HIDWORD(v565);
          }
          v147 = v565;
          v572 = __PAIR64__(v145, v565);
          v148 = v566;
          v573 = v566;
          v565 = 8;
          v566 = 0;
          v149 = v568;
          v580 = (char *)v568;
          v581 = (uint64_t *)v142;
          v150 = v570;
          v582 = v570;
          v569 = 0;
          v570 = 0;
          v568 = 0;
          v554 = 8;
          LODWORD(v555) = 0;
          v561 = 0;
          v562 = 0;
          v560 = 0;
          v525 = &v528;
          if (v143 == &v574)
          {
            v526.i64[0] = (uint64_t)&v528;
            v143 = &v528;
            if (v145)
            {
              v151 = v146;
              memcpy(&v528, &v574, 8 * v145);
              v146 = v151;
              v143 = &v528;
            }
          }
          else
          {
            v526.i64[0] = (uint64_t)v143;
          }
          v526.i64[1] = __PAIR64__(v145, v147);
          LODWORD(v527) = v148;
          v535 = v149;
          v536 = v142;
          v537 = v150;
          v538 = v542;
          v539 = v542;
          v540 = 8;
          v541 = 0;
          v544 = 0;
          v545 = 0;
          v152 = &v528;
          v543 = 0;
          if (v146 != v144)
          {
            free(v146);
            v152 = (uint64_t *)v525;
            v143 = (uint64_t *)v526.i64[0];
          }
          *(_QWORD *)&v571 = &v574;
          v3 = v503;
          v21 = v476;
          v25 = v514;
          v26 = v507;
          v153 = v495;
          if (v143 == v152)
          {
            *((_QWORD *)&v571 + 1) = &v574;
            v154 = &v574;
            v155 = v152;
          }
          else
          {
            v354 = v526.i32[2];
            v154 = (uint64_t *)malloc_type_malloc(8 * v526.u32[2], 0x4065EBACuLL);
            if (!v154)
            {
              if (v354
                || (v154 = (uint64_t *)malloc_type_malloc(1uLL, 0x4065EBACuLL), v3 = v503, v25 = v514, v26 = v507, !v154))
              {
LABEL_890:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              }
            }
            *((_QWORD *)&v571 + 1) = v154;
            v155 = (uint64_t *)v525;
            v152 = (uint64_t *)v526.i64[0];
            v153 = v495;
          }
          v156 = v526.i32[3];
          LODWORD(v572) = v526.i32[2];
          if (v152 == v155)
            v157 = v526.u32[3];
          else
            v157 = v526.u32[2];
          if (v157)
          {
            memmove(v154, v152, 8 * v157);
            v156 = v526.i32[3];
          }
          HIDWORD(v572) = v156;
          v573 = v527;
          v581 = 0;
          v582 = 0;
          v580 = 0;
          sub_1C4D6CDA0(&v580, v535, v536, 0xAAAAAAAAAAAAAAABLL * (v536 - v535));
          v158 = v567;
          *(_QWORD *)v563 = v567;
          v159 = v539;
          if (v539 == v538)
          {
            v564 = (uint64_t)v567;
            v160 = v539;
          }
          else
          {
            v355 = v540;
            v158 = malloc_type_malloc(8 * v540, 0x4065EBACuLL);
            if (!v158)
            {
              if (v355)
                goto LABEL_890;
              v158 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
              v3 = v503;
              v25 = v514;
              v26 = v507;
              if (!v158)
                goto LABEL_890;
            }
            v564 = (uint64_t)v158;
            v160 = v538;
            v159 = v539;
            v153 = v495;
          }
          v161 = HIDWORD(v540);
          LODWORD(v565) = v540;
          if (v159 == v160)
            v162 = HIDWORD(v540);
          else
            v162 = v540;
          if (v162)
          {
            memmove(v158, v159, 8 * v162);
            v161 = HIDWORD(v540);
          }
          HIDWORD(v565) = v161;
          v566 = v541;
          v569 = 0;
          v570 = 0;
          v568 = 0;
          sub_1C4D6CDA0(&v568, v543, v544, 0xAAAAAAAAAAAAAAABLL * ((v544 - v543) >> 3));
          v488 = 0;
          v481 = 0;
          v163 = (char *)v581;
LABEL_236:
          while (2)
          {
            v164 = v568;
            if (v163 - v580 == (char *)v569 - (char *)v568)
            {
              if (v580 == v163)
              {
LABEL_373:
                v237 = 0;
                v87 = v493;
                if (!v568)
                  goto LABEL_375;
LABEL_374:
                v569 = v164;
                operator delete(v164);
                goto LABEL_375;
              }
              v165 = 0;
              while (1)
              {
                v166 = &v580[v165 * 8];
                if (*(_QWORD *)&v580[v165 * 8] != v568[v165])
                  break;
                v167 = LOBYTE(v568[v165 + 2]);
                if (v166[16])
                  v168 = v167 == 0;
                else
                  v168 = 1;
                if (v168)
                {
                  if ((v166[16] == 0) == (v167 != 0))
                    break;
                }
                else if (*(_QWORD *)&v580[v165 * 8 + 8] != v568[v165 + 1])
                {
                  break;
                }
                v165 += 3;
                if (v166 + 24 == v163)
                  goto LABEL_373;
              }
            }
            v523 = 0;
            v169 = *((_QWORD *)v163 - 3);
            v523 = v169;
            if (v169 == v153 || v169 == v493)
              goto LABEL_321;
            if (!v548[0])
            {
              v179 = 0;
              goto LABEL_261;
            }
            v171 = v548[0] - 1;
            v172 = (v548[0] - 1) & ((v169 >> 4) ^ (v169 >> 9));
            v173 = &v546[2 * v172];
            v174 = *(_QWORD *)v173;
            if (v169 == *(_QWORD *)v173)
              goto LABEL_321;
            v175 = 1;
            v176 = *(_QWORD *)v173;
            v177 = v171 & ((v169 >> 4) ^ (v169 >> 9));
            while (v176 != -4096)
            {
              v178 = v177 + v175++;
              v177 = v178 & v171;
              v176 = *(_QWORD *)&v546[2 * v177];
              if (v169 == v176)
                goto LABEL_321;
            }
            v229 = 0;
            v230 = 1;
            while (v174 != -4096)
            {
              if (v229)
                v231 = 0;
              else
                v231 = v174 == -8192;
              if (v231)
                v229 = v173;
              v232 = v172 + v230++;
              v172 = v232 & v171;
              v173 = &v546[2 * v172];
              v174 = *(_QWORD *)v173;
              if (v169 == *(_QWORD *)v173)
                goto LABEL_262;
            }
            v179 = v229 ? v229 : v173;
LABEL_261:
            v180 = sub_1C4A07FEC((uint64_t)&v546, (uint64_t)&v523, &v523, v179);
            *v180 = v523;
            v169 = v523;
LABEL_262:
            if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 248), v153, v169))
            {
LABEL_321:
              v163 = (char *)v581;
              while (2)
              {
                v216 = *((_QWORD *)v163 - 3);
                if (!*(v163 - 8))
                {
                  *((_QWORD *)v163 - 2) = *(_QWORD *)(v216 + 88);
                  *(v163 - 8) = 1;
                }
                while (1)
                {
                  v217 = (uint64_t *)*((_QWORD *)v163 - 2);
                  if (v217 == *(uint64_t **)(v216 + 96))
                    break;
                  *((_QWORD *)v163 - 2) = v217 + 1;
                  v218 = *v217;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v571, *v217);
                  if (v219)
                  {
                    v220 = (char *)v581;
                    if ((unint64_t)v581 < v582)
                    {
                      *v581 = v218;
                      v220[8] = 0;
                      v163 = v220 + 24;
                      v220[16] = 0;
                      v153 = v495;
                      goto LABEL_331;
                    }
                    v221 = v580;
                    v222 = 0xAAAAAAAAAAAAAAABLL * (((char *)v581 - v580) >> 3) + 1;
                    if (v222 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_888;
                    if (0x5555555555555556 * ((uint64_t)(v582 - (_QWORD)v580) >> 3) > v222)
                      v222 = 0x5555555555555556 * ((uint64_t)(v582 - (_QWORD)v580) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v582 - (_QWORD)v580) >> 3) >= 0x555555555555555)
                      v223 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v223 = v222;
                    if (v223)
                    {
                      if (v223 <= 0xAAAAAAAAAAAAAAALL)
                      {
                        v224 = (char *)operator new(24 * v223);
                        goto LABEL_342;
                      }
LABEL_889:
                      sub_1C4764EE4();
                    }
                    v224 = 0;
LABEL_342:
                    v225 = &v224[8 * ((v220 - v221) >> 3)];
                    *(_QWORD *)v225 = v218;
                    v225[8] = 0;
                    v225[16] = 0;
                    v226 = v225;
                    if (v220 == v221)
                    {
                      v25 = v514;
                      v26 = v507;
                    }
                    else
                    {
                      v25 = v514;
                      v26 = v507;
                      do
                      {
                        v227 = *(_OWORD *)(v220 - 24);
                        *((_QWORD *)v226 - 1) = *((_QWORD *)v220 - 1);
                        *(_OWORD *)(v226 - 24) = v227;
                        v226 -= 24;
                        v220 -= 24;
                      }
                      while (v220 != v221);
                      v220 = v580;
                    }
                    v228 = &v224[24 * v223];
                    v580 = v226;
                    v163 = v225 + 24;
                    v581 = (uint64_t *)(v225 + 24);
                    v582 = (unint64_t)v228;
                    v153 = v495;
                    if (v220)
                      operator delete(v220);
LABEL_331:
                    v581 = (uint64_t *)v163;
                    goto LABEL_236;
                  }
                }
                v163 = (char *)(v581 - 3);
                v581 = (uint64_t *)v163;
                if (v580 != v163)
                  continue;
                break;
              }
              v153 = v495;
              continue;
            }
            break;
          }
          if (!v552[0])
          {
            v190 = 0;
            goto LABEL_270;
          }
          v181 = v523;
          v182 = v552[0] - 1;
          v183 = ((v523 >> 4) ^ (v523 >> 9)) & (v552[0] - 1);
          v184 = &v550[v183];
          v185 = *v184;
          if (v523 != *v184)
          {
            v186 = 1;
            v187 = *v184;
            v188 = ((v523 >> 4) ^ (v523 >> 9)) & v182;
            while (v187 != -4096)
            {
              v189 = v188 + v186++;
              v188 = v189 & v182;
              v187 = v550[v188];
              if (v523 == v187)
                goto LABEL_271;
            }
            v233 = 0;
            v234 = 1;
            while (v185 != -4096)
            {
              if (v233)
                v235 = 0;
              else
                v235 = v185 == -8192;
              if (v235)
                v233 = v184;
              v236 = v183 + v234++;
              v183 = v236 & v182;
              v184 = &v550[v183];
              v185 = *v184;
              if (v523 == *v184)
                goto LABEL_271;
            }
            if (v233)
              v190 = v233;
            else
              v190 = v184;
LABEL_270:
            v191 = sub_1C4A07FEC((uint64_t)&v550, (uint64_t)&v523, &v523, v190);
            *v191 = v523;
            v181 = v523;
          }
LABEL_271:
          v192 = v181 + 48;
          v193 = -1;
          v194 = v181 + 48;
          do
          {
            v194 = *(_QWORD *)(v194 + 8);
            ++v193;
          }
          while (v194 != v192);
          if (dword_1ED7FC7E8 < v193)
          {
            v356 = v550;
            v357 = v552[0];
            if ((_DWORD)v551)
              goto LABEL_634;
            v358 = &v550[v552[0]];
            v359 = v358;
          }
          else
          {
            if (v551 <= dword_1ED7FC8A8)
            {
              for (j = *(_QWORD *)(v181 + 56); ; j = *(_QWORD *)(j + 8))
              {
                if (j == v192)
                  goto LABEL_321;
                v196 = *(_QWORD *)(*(_QWORD *)(j + 16) + 8);
                if ((*(_WORD *)(j + 44) & 0xC) != 0 && (*(_WORD *)(j + 44) & 4) == 0)
                {
                  v204 = j;
                  if ((v196 & 0x80) != 0)
                  {
LABEL_553:
                    v333 = (char *)&v550[v552[0]];
                    if ((_DWORD)v551)
                    {
                      v87 = v493;
                      if (v552[0])
                      {
                        v334 = 8 * v552[0];
                        v335 = (unint64_t *)v550;
                        while ((*v335 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          ++v335;
                          v334 -= 8;
                          if (!v334)
                          {
                            v335 = (unint64_t *)&v550[v552[0]];
                            break;
                          }
                        }
                      }
                      else
                      {
                        v335 = (unint64_t *)v550;
                      }
                    }
                    else
                    {
                      v335 = (unint64_t *)&v550[v552[0]];
                      v87 = v493;
                    }
                    v345 = (unint64_t *)&v550[v552[0]];
                    v479 = (char *)v345;
                    while (v335 != v345)
                    {
                      v346 = v523;
                      if (*v335 != v523)
                      {
                        v347 = *v335;
                        v348 = v87;
                        v349 = *(_QWORD *)(v3 + 272);
                        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v349);
                        if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v349 + 1320), v347, v346))
                        {
                          *(_QWORD *)&v553 = v347;
                          *((_QWORD *)&v553 + 1) = v495;
                          *((_BYTE *)sub_1C51BB208(v477, v347, v495, &v553) + 48) = 1;
                          v87 = v348;
                        }
                        else
                        {
                          v350 = v523;
                          v87 = v348;
                          if (v347 != v523)
                          {
                            v351 = *(_QWORD *)(v3 + 272);
                            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v351);
                            v352 = *(_QWORD *)(v351 + 1320);
                            v87 = v348;
                            if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(v352, v350, v347))
                            {
                              *(_QWORD *)&v553 = v348;
                              *((_QWORD *)&v553 + 1) = v347;
                              *((_BYTE *)sub_1C51BB208(v477, v348, v347, &v553) + 48) = 1;
                            }
                          }
                        }
                      }
                      v353 = v335 + 1;
                      v335 = (unint64_t *)v333;
                      if (v353 != (unint64_t *)v333)
                      {
                        v335 = v353;
                        while ((*v335 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          if (++v335 == (unint64_t *)v333)
                          {
                            v335 = (unint64_t *)v333;
                            break;
                          }
                        }
                      }
                      v345 = (unint64_t *)v479;
                    }
                    goto LABEL_656;
                  }
                  while ((*(_WORD *)(v204 + 44) & 8) != 0)
                  {
                    v204 = *(_QWORD *)(v204 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v204 + 16) + 8) & 0x80) != 0)
                      goto LABEL_553;
                  }
                }
                else if ((v196 & 0x80) != 0)
                {
                  goto LABEL_553;
                }
                if (llvm::MachineInstr::hasOrderedMemoryRef((llvm::MachineInstr *)j))
                  goto LABEL_553;
                v198 = *(unsigned __int16 **)(j + 16);
                if (*v198 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(j + 32) + 48) & 0x10) == 0)
                {
                  v199 = *(_WORD *)(j + 44);
                  v200 = *((_QWORD *)v198 + 1);
                  if ((v199 & 0xC) != 0 && (v199 & 4) == 0)
                  {
                    v215 = j;
                    if ((v200 & 0x100000) == 0)
                    {
                      while ((*(_WORD *)(v215 + 44) & 8) != 0)
                      {
                        v215 = *(_QWORD *)(v215 + 8);
                        v3 = v503;
                        v25 = v514;
                        v26 = v507;
                        if ((*(_BYTE *)(*(_QWORD *)(v215 + 16) + 10) & 0x10) != 0)
                          goto LABEL_287;
                      }
                      v3 = v503;
                      v25 = v514;
                      v26 = v507;
LABEL_309:
                      if ((*(_BYTE *)j & 4) != 0)
                        continue;
                      goto LABEL_312;
                    }
                  }
                  else if ((v200 & 0x100000) == 0)
                  {
                    goto LABEL_309;
                  }
                }
LABEL_287:
                v488 |= llvm::MachineInstr::mayAlias((llvm::MachineInstr *)j, *(llvm::AAResults **)(v3 + 312), (const llvm::MachineInstr *)v25, 0);
                v201 = sub_1C51BB120(v475, v524, *((unint64_t *)&v524 + 1), &v524);
                v203 = v201[7];
                v202 = v201[8];
                if (v203 < v202)
                {
                  *v203 = j;
                  v201[7] = v203 + 1;
                  v481 = 1;
                  goto LABEL_309;
                }
                v205 = v201[6];
                v206 = v203 - v205;
                v207 = v206 + 1;
                if ((unint64_t)(v206 + 1) >> 61)
                  goto LABEL_888;
                v208 = v201;
                v209 = (char *)v202 - (char *)v205;
                if (v209 >> 2 > v207)
                  v207 = v209 >> 2;
                if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8)
                  v210 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v210 = v207;
                if (v210)
                {
                  if (v210 >> 61)
                    goto LABEL_889;
                  v211 = (char *)operator new(8 * v210);
                }
                else
                {
                  v211 = 0;
                }
                v212 = (uint64_t *)&v211[8 * v206];
                *v212 = j;
                v213 = v212 + 1;
                if (v203 != v205)
                {
                  do
                  {
                    v214 = *--v203;
                    *--v212 = v214;
                  }
                  while (v203 != v205);
                  v203 = v208[6];
                }
                v208[6] = v212;
                v208[7] = v213;
                v208[8] = (uint64_t *)&v211[8 * v210];
                if (v203)
                  operator delete(v203);
                v208[7] = v213;
                v481 = 1;
                v3 = v503;
                v25 = v514;
                v26 = v507;
                if (j)
                  goto LABEL_309;
LABEL_312:
                while ((*(_WORD *)(j + 44) & 8) != 0)
                  j = *(_QWORD *)(j + 8);
              }
            }
            v356 = v550;
            v357 = v552[0];
LABEL_634:
            v359 = &v356[v357];
            if (v357)
            {
              v360 = 0;
              while ((v356[v360] | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (v357 == ++v360)
                {
                  v358 = &v356[v357];
                  goto LABEL_641;
                }
              }
              v358 = &v356[v360];
            }
            else
            {
              v358 = v356;
            }
          }
LABEL_641:
          v361 = &v356[v357];
LABEL_642:
          while (2)
          {
            if (v358 != v361)
            {
              v362 = *v358;
              v363 = v523;
              if (*v358 != v523)
              {
                v364 = *(_QWORD *)(v3 + 272);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v364);
                if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v364 + 1320), v362, v363))
                {
                  v365 = v495;
                  *(_QWORD *)&v553 = v362;
                  *((_QWORD *)&v553 + 1) = v495;
                  v366 = v477;
                  v367 = v362;
                  goto LABEL_649;
                }
                v368 = v523;
                if (v362 != v523)
                {
                  v369 = *(_QWORD *)(v3 + 272);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v369);
                  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v369 + 1320), v368, v362))
                  {
                    v367 = v493;
                    *(_QWORD *)&v553 = v493;
                    *((_QWORD *)&v553 + 1) = v362;
                    v366 = v477;
                    v365 = v362;
LABEL_649:
                    *((_BYTE *)sub_1C51BB208(v366, v367, v365, &v553) + 48) = 1;
                  }
                }
              }
              v370 = v358 + 1;
              v358 = v359;
              if (v370 != v359)
              {
                v358 = v370;
                while ((*v358 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  if (++v358 == v359)
                  {
                    v358 = v359;
                    goto LABEL_642;
                  }
                }
              }
              continue;
            }
            break;
          }
          v87 = v493;
LABEL_656:
          v237 = 1;
          *((_BYTE *)sub_1C51BB03C(v477, v524, *((unint64_t *)&v524 + 1), &v524) + 48) = 1;
          v164 = v568;
          v25 = v514;
          v26 = v507;
          if (v568)
            goto LABEL_374;
LABEL_375:
          if (v564 != *(_QWORD *)v563)
            free((void *)v564);
          if (v580)
          {
            v581 = (uint64_t *)v580;
            operator delete(v580);
          }
          if (*((_QWORD *)&v571 + 1) != (_QWORD)v571)
            free(*((void **)&v571 + 1));
          if (v543)
          {
            v544 = v543;
            operator delete(v543);
          }
          if (v539 != v538)
            free(v539);
          if (v535)
          {
            v536 = v535;
            operator delete(v535);
          }
          if ((void *)v526.i64[0] != v525)
            free((void *)v526.i64[0]);
          if (((v237 | v481) & 1) != 0)
            LOBYTE(v488) = v237 | v488;
          else
            *((_BYTE *)sub_1C51BB03C(v477, v524, *((unint64_t *)&v524 + 1), &v524) + 48) = 0;
          MEMORY[0x1CAA32FB4](v550, 8);
          MEMORY[0x1CAA32FB4](v546, 8);
          mayAlias = v488;
LABEL_393:
          v89 = v495;
LABEL_171:
          v521 = mayAlias & 1;
          if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v25, *(llvm::AAResults **)(v3 + 312), &v521))
          {
            v114 = *(_QWORD *)(v3 + 272);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v114);
            if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v114 + 1320), v87, v89))
            {
              v115 = *(_QWORD *)(v3 + 288);
              v116 = *(_QWORD *)(v115 + 16);
              v117 = *(unsigned int *)(v115 + 32);
              v118 = v89 >> 4;
              if (!(_DWORD)v117)
                goto LABEL_179;
              LODWORD(v119) = (v117 - 1) & (v118 ^ (v89 >> 9));
              v120 = (uint64_t *)(v116 + 16 * v119);
              v121 = *v120;
              if (*v120 != v89)
              {
                v122 = 1;
                while (v121 != -4096)
                {
                  v123 = v119 + v122++;
                  v119 = v123 & (v117 - 1);
                  v121 = *(_QWORD *)(v116 + 16 * v119);
                  if (v121 == v89)
                  {
                    v120 = (uint64_t *)(v116 + 16 * v119);
                    goto LABEL_180;
                  }
                }
LABEL_179:
                v120 = (uint64_t *)(v116 + 16 * v117);
              }
LABEL_180:
              if (v120 == (uint64_t *)(v116 + 16 * v117) || !v120[1])
                goto LABEL_399;
              if ((_DWORD)v117)
              {
                v124 = v118 ^ (v89 >> 9);
                v125 = v117 - 1;
                LODWORD(v117) = (v117 - 1) & v124;
                v126 = (_QWORD *)(v116 + 16 * v117);
                if (*v126 == v89)
                {
                  if (*(_DWORD *)(v126[1] + 16) == 1)
                    goto LABEL_398;
                }
                else
                {
                  v127 = 1;
                  LODWORD(v128) = v117;
                  do
                  {
                    v129 = v128 + v127++;
                    v128 = v129 & v125;
                  }
                  while (*(_QWORD *)(v116 + 16 * v128) != v89);
                  if (*(_DWORD *)(*(_QWORD *)(v116 + 16 * v128 + 8) + 16) == 1)
                  {
                    if (*v126 != v89)
                    {
                      v130 = 1;
                      do
                      {
                        v131 = v117 + v130++;
                        v117 = v131 & v125;
                      }
                      while (*(_QWORD *)(v116 + 16 * v117) != v89);
                      v126 = (_QWORD *)(v116 + 16 * v117);
                    }
LABEL_398:
                    if (**(_QWORD **)(v126[1] + 8) != v89)
                    {
LABEL_399:
                      if (v522)
                      {
                        v238 = v3;
                        v239 = v25;
                        v240 = (const llvm::MachineBasicBlock *)v87;
                        v241 = (const llvm::MachineBasicBlock *)v89;
                        v242 = 1;
                        goto LABEL_402;
                      }
                      v244 = (const llvm::DILocation **)llvm::MachineBasicBlock::SkipPHIsAndLabels(v89, *(_QWORD *)(v89 + 56));
                      v245 = sub_1C51B827C(v89, (uint64_t)v244, v25, *(_QWORD *)(v3 + 256), *(_QWORD *)(v3 + 248), *(_QWORD **)(v3 + 264));
                      if ((v245 & 1) == 0)
                      {
                        v494 = v245;
                        v525 = &v526.u64[1];
                        v526.i64[0] = 0x400000000;
                        v246 = *(unsigned int *)(v25 + 40);
                        if ((_DWORD)v246)
                        {
                          v247 = *(_DWORD **)(v25 + 32);
                          v248 = &v247[8 * v246];
                          do
                          {
                            if ((*v247 & 0x10000FF) != 0x1000000)
                              goto LABEL_412;
                            v249 = v247[1];
                            if ((v249 & 0x80000000) == 0)
                              goto LABEL_412;
                            if ((*(_BYTE *)v511 & 1) != 0)
                            {
                              v250 = 4;
                              v251 = v492;
                            }
                            else
                            {
                              v250 = *(_DWORD *)(v3 + 816);
                              if (!v250)
                                goto LABEL_412;
                              v251 = *(_QWORD **)(v3 + 808);
                            }
                            v252 = v250 - 1;
                            v253 = v252 & (37 * v249);
                            v254 = v251[2 * v253];
                            if (v249 != v254)
                            {
                              v255 = 1;
                              while (v254 != -1)
                              {
                                v256 = v253 + v255++;
                                v253 = v256 & v252;
                                v254 = v251[2 * v253];
                                if (v249 == v254)
                                  goto LABEL_420;
                              }
                              goto LABEL_412;
                            }
LABEL_420:
                            LODWORD(v571) = v247[1];
                            v257 = sub_1C51B6E34((uint64_t)v511, (int *)&v571);
                            v260 = *(_QWORD *)(v257 + 8);
                            v258 = (_QWORD *)(v257 + 8);
                            v259 = v260;
                            if ((v260 & 2) != 0)
                            {
                              v262 = v259 & 0xFFFFFFFFFFFFFFFCLL;
                              v258 = *(_QWORD **)v262;
                              v261 = *(_QWORD *)v262 + 8 * *(unsigned int *)(v262 + 8);
                            }
                            else
                            {
                              v261 = (uint64_t)&v258[v259 > 3];
                            }
                            if (v258 != (_QWORD *)v261)
                            {
                              v515 = v25;
                              v508 = v26;
                              v496 = v89;
                              v471 = v244;
                              v482 = v261;
                              while (1)
                              {
                                v489 = v258;
                                v263 = *v258 & 0xFFFFFFFFFFFFFFF8;
                                if ((*v258 & 4) != 0)
                                {
                                  if ((sub_1C51B8454(v25, v263, v247[1]) & 1) == 0)
                                    sub_1C61FACB0(v263);
                                  goto LABEL_451;
                                }
                                v264 = v247[1];
                                *(_QWORD *)v563 = &v565;
                                v564 = 0x200000000;
                                sub_1C4893E04((char *)v563, 1uLL, v264);
                                *(_QWORD *)&v571 = v263;
                                *((_QWORD *)&v571 + 1) = &v573;
                                v572 = 0x200000000;
                                v265 = v564;
                                if ((_DWORD)v564)
                                  break;
LABEL_435:
                                v269 = (char *)v525;
                                if (v526.i32[0] >= (unsigned __int32)v526.i32[1])
                                {
                                  v278 = v526.u32[0] + 1;
                                  if (v525 <= &v571 && (char *)v525 + 32 * v526.u32[0] > (char *)&v571)
                                  {
                                    v279 = (char *)&v571 - (_BYTE *)v525;
                                    sub_1C61FCBD0((uint64_t)&v525, v278);
                                    v269 = (char *)v525;
                                    v270 = (__int128 *)((char *)v525 + v279);
                                  }
                                  else
                                  {
                                    sub_1C61FCBD0((uint64_t)&v525, v278);
                                    v270 = &v571;
                                    v269 = (char *)v525;
                                  }
                                  v3 = v503;
                                }
                                else
                                {
                                  v270 = &v571;
                                }
                                v271 = &v269[32 * v526.u32[0]];
                                *(_QWORD *)v271 = *(_QWORD *)v270;
                                v272 = v271 + 24;
                                *((_QWORD *)v271 + 2) = 0x200000000;
                                *((_QWORD *)v271 + 1) = v271 + 24;
                                v273 = (uint64_t)(v271 + 8);
                                v274 = *((unsigned int *)v270 + 4);
                                if (!(_DWORD)v274 || (__int128 *)v273 == (__int128 *)((char *)v270 + 8))
                                  goto LABEL_445;
                                v275 = (char *)*((_QWORD *)v270 + 1);
                                if (v275 != (char *)v270 + 24)
                                {
                                  if (v272 != (void *)(v273 + 16))
                                  {
                                    free(v272);
                                    v275 = (char *)*((_QWORD *)v270 + 1);
                                    LODWORD(v274) = *((_DWORD *)v270 + 4);
                                  }
                                  *(_QWORD *)v273 = v275;
                                  *(_DWORD *)(v273 + 8) = v274;
                                  *(_DWORD *)(v273 + 12) = *((_DWORD *)v270 + 5);
                                  *((_QWORD *)v270 + 1) = (char *)v270 + 24;
                                  *((_DWORD *)v270 + 5) = 0;
                                  v3 = v503;
                                  goto LABEL_444;
                                }
                                if (v274 >= 3)
                                {
                                  *(_DWORD *)(v273 + 8) = 0;
                                  v276 = v274;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod(v273, v273 + 16, v274, 4);
                                  v277 = *((unsigned int *)v270 + 4);
                                  v3 = v503;
                                  if (!(_DWORD)v277)
                                    goto LABEL_443;
                                  v275 = (char *)*((_QWORD *)v270 + 1);
                                  v272 = *(void **)v273;
                                }
                                else
                                {
                                  v276 = *((_DWORD *)v270 + 4);
                                  v277 = v276;
                                  v3 = v503;
                                }
                                memcpy(v272, v275, 4 * v277);
LABEL_443:
                                *(_DWORD *)(v273 + 8) = v276;
LABEL_444:
                                *((_DWORD *)v270 + 4) = 0;
LABEL_445:
                                ++v526.i32[0];
                                if (*((int **)&v571 + 1) != &v573)
                                  free(*((void **)&v571 + 1));
                                v25 = v515;
                                v26 = v508;
                                v89 = v496;
                                if (*(uint64_t **)v563 != &v565)
                                  free(*(void **)v563);
LABEL_451:
                                v258 = v489 + 1;
                                v244 = v471;
                                if (v489 + 1 == (_QWORD *)v482)
                                  goto LABEL_412;
                              }
                              if (*(uint64_t **)v563 == &v565)
                              {
                                if (v564 < 3)
                                {
                                  v266 = &v573;
                                  v267 = &v565;
                                  v268 = v564;
                                  goto LABEL_432;
                                }
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v571 + 8, (uint64_t)&v573, v564, 4);
                                v268 = v564;
                                if ((_DWORD)v564)
                                {
                                  v267 = *(uint64_t **)v563;
                                  v266 = (int *)*((_QWORD *)&v571 + 1);
LABEL_432:
                                  memcpy(v266, v267, 4 * v268);
                                }
                                LODWORD(v572) = v265;
                              }
                              else
                              {
                                *((_QWORD *)&v571 + 1) = *(_QWORD *)v563;
                                v572 = v564;
                                *(_QWORD *)v563 = &v565;
                                HIDWORD(v564) = 0;
                              }
                              LODWORD(v564) = 0;
                              goto LABEL_435;
                            }
LABEL_412:
                            v247 += 8;
                          }
                          while (v247 != v248);
                        }
                        v280 = **(uint64_t *****)(*(_QWORD *)(v25 + 24) + 32);
                        if ((*((_BYTE *)v280 + 23) & 0x20) != 0)
                        {
                          v281 = ***v280;
                          *(_QWORD *)&v571 = **(_QWORD **)(*(_QWORD *)(v25 + 24) + 32);
                          v282 = *(_DWORD *)(v281 + 2496);
                          if (!v282)
                          {
                            v336 = 0;
                            goto LABEL_563;
                          }
                          v283 = *(_QWORD *)(v281 + 2480);
                          v284 = v282 - 1;
                          v285 = v284 & ((v280 >> 4) ^ (v280 >> 9));
                          v286 = (_QWORD *)(v283 + 40 * v285);
                          v287 = *v286;
                          if ((uint64_t ***)*v286 != v280)
                          {
                            v288 = 0;
                            v289 = 1;
                            while (v287 != -4096)
                            {
                              if (v288)
                                v290 = 0;
                              else
                                v290 = v287 == -8192;
                              if (v290)
                                v288 = v286;
                              v291 = v285 + v289++;
                              v285 = v291 & v284;
                              v286 = (_QWORD *)(v283 + 40 * v285);
                              v287 = *v286;
                              if ((uint64_t ***)*v286 == v280)
                                goto LABEL_477;
                            }
                            if (v288)
                              v336 = v288;
                            else
                              v336 = v286;
LABEL_563:
                            v286 = sub_1C541AB24(v281 + 2480, (uint64_t)&v571, (uint64_t *)&v571, v336);
                            v337 = v571;
                            v286[4] = 0;
                            v286[3] = 0;
                            *v286 = v337;
                            v286[1] = v286 + 3;
                            v286[2] = 0x100000000;
                          }
LABEL_477:
                          v292 = *((unsigned int *)v286 + 4);
                          if ((_DWORD)v292)
                          {
                            v293 = (_QWORD *)(v286[1] + 8);
                            v294 = 16 * v292;
                            while (*((_DWORD *)v293 - 2))
                            {
                              v293 += 2;
                              v294 -= 16;
                              if (!v294)
                                goto LABEL_481;
                            }
                            if (*v293 && **(_WORD **)(v25 + 16) == 19)
                            {
                              v472 = v244;
                              *(_QWORD *)v563 = &v565;
                              v564 = 0x400000000;
                              v550 = (uint64_t *)v552;
                              v551 = 0x400000000;
                              v314 = *(unsigned int *)(v25 + 40);
                              if ((_DWORD)v314)
                              {
                                v497 = v89;
                                v509 = v26;
                                v315 = *(_DWORD **)(v25 + 32);
                                v516 = v25;
                                v316 = &v315[8 * v314];
                                v317 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 32) + 40);
                                do
                                {
                                  if ((*v315 & 0x10000FF) == 0x1000000)
                                  {
                                    v318 = v315[1];
                                    if (v318 < 0)
                                    {
                                      v319 = v551;
                                      if (v551 >= (unint64_t)HIDWORD(v551))
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v552, v551 + 1, 4);
                                        v319 = v551;
                                      }
                                      *((_DWORD *)v550 + v319) = v318;
                                      LODWORD(v551) = v551 + 1;
                                      v320 = v315[1];
                                      v321 = (uint64_t *)((v320 & 0x80000000) != 0
                                                       ? *(_QWORD *)(v317 + 24) + 16 * (v320 & 0x7FFFFFFF) + 8
                                                       : *(_QWORD *)(v317 + 272) + 8 * v320);
                                      v322 = *v321;
                                      if (*v321)
                                      {
                                        while ((*(_BYTE *)(v322 + 3) & 1) != 0)
                                        {
                                          v322 = *(_QWORD *)(v322 + 24);
                                          if (!v322)
                                            goto LABEL_518;
                                        }
                                        v323 = *(_QWORD *)(v322 + 8);
LABEL_530:
                                        if (**(unsigned __int16 **)(v323 + 16) - 13 <= 1)
                                        {
                                          v324 = *(_QWORD *)(v3 + 272);
                                          v490 = *(_QWORD *)(v323 + 24);
                                          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v324);
                                          if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v324 + 1320), v497, v490)&& *(_QWORD *)(v323 + 24) != *(_QWORD *)(v516 + 24))
                                          {
                                            v325 = v564;
                                            if (v564 >= (unint64_t)HIDWORD(v564))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v563, (uint64_t)&v565, v564 + 1, 8);
                                              v325 = v564;
                                            }
                                            *(_QWORD *)(*(_QWORD *)v563 + 8 * v325) = v323;
                                            LODWORD(v564) = v564 + 1;
                                          }
                                        }
                                        v326 = *(_QWORD *)(v322 + 8);
                                        while (1)
                                        {
                                          v322 = *(_QWORD *)(v322 + 24);
                                          if (!v322)
                                            break;
                                          if ((*(_BYTE *)(v322 + 3) & 1) == 0)
                                          {
                                            v323 = *(_QWORD *)(v322 + 8);
                                            if (v323 != v326)
                                              goto LABEL_530;
                                          }
                                        }
                                      }
                                    }
                                  }
LABEL_518:
                                  v315 += 8;
                                }
                                while (v315 != v316);
                                v25 = v516;
                                v26 = v509;
                                v89 = v497;
                                if ((_DWORD)v564)
                                {
                                  v338 = *(uint64_t **)v563;
                                  v478 = *(_QWORD *)v563 + 8 * v564;
                                  while (!(_DWORD)v551)
                                  {
LABEL_597:
                                    if (++v338 == (uint64_t *)v478)
                                      goto LABEL_598;
                                  }
                                  v491 = *v338;
                                  v339 = (int *)v550;
                                  v483 = (int *)v550 + v551;
                                  while (2)
                                  {
                                    sub_1C61F1700(v491, *v339, &v571);
                                    v553 = v571;
                                    if (v575)
                                    {
                                      if (v575 == &v572)
                                      {
                                        *(_QWORD *)&v556 = &v554;
                                        (*(void (**)(unint64_t *))(v572 + 24))(&v572);
                                      }
                                      else
                                      {
                                        *(_QWORD *)&v556 = (*(uint64_t (**)(void))(*v575 + 16))();
                                      }
                                    }
                                    else
                                    {
                                      *(_QWORD *)&v556 = 0;
                                    }
                                    v546 = v576;
                                    v547 = v577;
                                    if (v579)
                                    {
                                      if (v579 == v578)
                                      {
                                        v549 = v548;
                                        (*(void (**)(_QWORD *))(v578[0] + 24))(v578);
                                      }
                                      else
                                      {
                                        v549 = (_DWORD *)(*(uint64_t (**)(void))(*v579 + 16))();
                                      }
                                    }
                                    else
                                    {
                                      v549 = 0;
                                    }
LABEL_579:
                                    v340 = (unsigned int *)v553;
LABEL_580:
                                    if (v340 != v546)
                                    {
                                      llvm::MachineOperand::setReg((uint64_t)v340, *(_DWORD *)(*(_QWORD *)(v516 + 32) + 36));
                                      *v340 = *v340 & 0xFFF000FF | (((*(_DWORD *)(*(_QWORD *)(v516 + 32) + 32) >> 8) & 0xFFF) << 8);
                                      while (1)
                                      {
                                        v340 = (unsigned int *)(v553 + 32);
                                        *(_QWORD *)&v553 = v340;
                                        if (v340 == *((unsigned int **)&v553 + 1))
                                          goto LABEL_580;
                                        if (!(_QWORD)v556)
                                          break;
                                        if ((*(unsigned int (**)(_QWORD, unsigned int *))(*(_QWORD *)v556 + 48))(v556, v340))
                                        {
                                          goto LABEL_579;
                                        }
                                      }
                                      sub_1C485C2F0();
LABEL_888:
                                      abort();
                                    }
                                    v341 = v549;
                                    if (v549 == v548)
                                    {
                                      v341 = v548;
                                      v342 = 4;
                                      goto LABEL_590;
                                    }
                                    if (v549)
                                    {
                                      v342 = 5;
LABEL_590:
                                      (*(void (**)(void))(*v341 + 8 * v342))();
                                    }
                                    v343 = (uint64_t *)v556;
                                    if ((uint64_t *)v556 == &v554)
                                    {
                                      v343 = &v554;
                                      v344 = 4;
                                      goto LABEL_595;
                                    }
                                    if ((_QWORD)v556)
                                    {
                                      v344 = 5;
LABEL_595:
                                      (*(void (**)(void))(*v343 + 8 * v344))();
                                    }
                                    sub_1C619047C(&v571);
                                    if (++v339 == v483)
                                      goto LABEL_597;
                                    continue;
                                  }
                                }
                              }
LABEL_598:
                              if (v550 != (uint64_t *)v552)
                                free(v550);
                              v244 = v472;
                              if (*(uint64_t **)v563 != &v565)
                                free(*(void **)v563);
                            }
                          }
                        }
LABEL_481:
                        sub_1C51B8908(v25, v89, v244, (uint64_t)v525, v526.u32[0]);
                        v295 = *(unsigned int *)(v25 + 40);
                        if ((_DWORD)v295)
                        {
                          v296 = *(_DWORD **)(v25 + 32);
                          v297 = &v296[8 * v295];
                          do
                          {
                            if ((*v296 & 0x10000FF) == 0)
                            {
                              v298 = v296[1];
                              LODWORD(v571) = v298;
                              v299 = *(_DWORD *)(v3 + 792);
                              if (!v299)
                              {
                                v309 = 0;
LABEL_500:
                                v310 = sub_1C4978C80((uint64_t)v474, (uint64_t)&v571, (int *)&v571, v309);
                                *v310 = v571;
                                goto LABEL_486;
                              }
                              v300 = *(_QWORD *)(v3 + 776);
                              v301 = v299 - 1;
                              v302 = v301 & (37 * v298);
                              v303 = (_DWORD *)(v300 + 4 * v302);
                              v304 = *v303;
                              if (v298 != *v303)
                              {
                                v305 = 0;
                                v306 = 1;
                                while (v304 != -1)
                                {
                                  if (v305)
                                    v307 = 0;
                                  else
                                    v307 = v304 == -2;
                                  if (v307)
                                    v305 = v303;
                                  v308 = v302 + v306++;
                                  v302 = v308 & v301;
                                  v303 = (_DWORD *)(v300 + 4 * v302);
                                  v304 = *v303;
                                  if (v298 == *v303)
                                    goto LABEL_486;
                                }
                                if (v305)
                                  v309 = v305;
                                else
                                  v309 = v303;
                                goto LABEL_500;
                              }
                            }
LABEL_486:
                            v296 += 8;
                          }
                          while (v296 != v297);
                        }
                        v311 = (int8x16_t *)v525;
                        if (v526.i32[0])
                        {
                          v312 = 2 * v526.u32[0];
                          do
                          {
                            v313 = (unint64_t *)*((_QWORD *)&v311[v312 - 1] - 1);
                            if (&v311[v312 - 1].u64[1] != v313)
                              free(v313);
                            v312 -= 2;
                          }
                          while (v312 * 16);
                          v311 = (int8x16_t *)v525;
                        }
                        if (v311 != (int8x16_t *)&v526.u64[1])
                          free(v311);
                        v245 = v494;
                      }
                      v243 = v245 ^ 1;
                      goto LABEL_404;
                    }
                  }
                }
              }
            }
          }
          v242 = v522;
          v238 = v3;
          v239 = v25;
          v240 = (const llvm::MachineBasicBlock *)v87;
          v241 = (const llvm::MachineBasicBlock *)v89;
LABEL_402:
          sub_1C51B7BD8(v238, v239, v240, v241, v242);
          goto LABEL_403;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(*v54 + 16) + 176))(*(_QWORD *)(*v54 + 16));
        v68 = *(_QWORD *)(v54[3] + 16 * v56 + 8);
        if (v68)
        {
          do
          {
            v69 = *(_QWORD *)(v68 + 24);
            llvm::MachineOperand::setReg(v68, v52);
            v68 = v69;
          }
          while (v69);
        }
        v70 = v25;
        if ((*(_BYTE *)v25 & 4) == 0)
        {
          v70 = v25;
          if ((*(_WORD *)(v25 + 44) & 8) != 0)
          {
            v70 = v25;
            do
              v70 = *(_QWORD *)(v70 + 8);
            while ((*(_WORD *)(v70 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v25 + 24) + 40, v25, *(_QWORD *)(v70 + 8));
        llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v3 + 264), v52);
        v501 = 1;
      }
      while (v25 != v26);
      v378 = *v511;
      v19 = v499;
      v22 = v500;
      if (*v511 <= 1 && !*(_DWORD *)(v3 + 804))
        goto LABEL_694;
      v383 = (uint64_t)v504;
      v384 = v492;
      if ((v378 & 1) != 0)
        goto LABEL_711;
      v385 = (2 * v378) & 0xFFFFFFFC;
      v386 = *(unsigned int *)(v3 + 816);
      if (v385 >= v386 || v386 < 0x41)
      {
        if ((_DWORD)v386)
        {
          v384 = (_QWORD *)*v492;
          v383 = *v492 + 16 * v386;
          do
          {
LABEL_711:
            if (*(_DWORD *)v384 != -1)
            {
              if (*(_DWORD *)v384 != -2)
                sub_1C51B6CBC(v384 + 1);
              *(_DWORD *)v384 = -1;
            }
            v384 += 2;
          }
          while (v384 != (_QWORD *)v383);
          LODWORD(v386) = *v511 & 1;
        }
        *(_DWORD *)(v3 + 800) = v386;
        *(_DWORD *)(v3 + 804) = 0;
        goto LABEL_694;
      }
      sub_1C61FCCF8(v511);
LABEL_694:
      v379 = *(_DWORD *)(v3 + 880);
      if (v379 || *(_DWORD *)(v3 + 884))
      {
        v380 = *(_DWORD *)(v3 + 888);
        if (v380 > 4 * v379 && v380 >= 0x41)
        {
          sub_1C51BB554((char *)v504);
        }
        else
        {
          if (v380)
          {
            v381 = *v504;
            v382 = *v504 + 40 * v380;
            do
            {
              *(_QWORD *)v381 = 0;
              *(_BYTE *)(v381 + 8) = 0;
              *(_BYTE *)(v381 + 24) = 0;
              *(_QWORD *)(v381 + 32) = 0;
              v381 += 40;
            }
            while (v381 != v382);
          }
          *(_QWORD *)(v3 + 880) = 0;
        }
      }
      sub_1C61CEBB4(*(_QWORD **)(v3 + 952));
      *(_QWORD *)(v3 + 944) = v498;
      *(_OWORD *)(v3 + 952) = 0u;
      sub_1C4DC0F58(v520[0]);
      v377 = v501;
LABEL_690:
      v22 |= v377;
      v21 = (_QWORD *)v21[1];
    }
    while (v21 != v19);
    v387 = *(llvm::MachineBasicBlock ***)(v3 + 752);
    v388 = *(llvm::MachineBasicBlock ***)(v3 + 760);
    while (v387 != v388)
    {
      v389 = llvm::MachineBasicBlock::SplitCriticalEdge(*v387, v387[1], v3, 0);
      if (v389)
      {
        v390 = (const llvm::MachineBasicBlock *)v389;
        v391 = *(llvm::MachineBlockFrequencyInfo **)(v3 + 296);
        if (v391)
          llvm::MachineBlockFrequencyInfo::onEdgeSplit(v391, *v387, v390, *(const llvm::MachineBranchProbabilityInfo **)(v3 + 304));
        LOBYTE(v22) = 1;
      }
      v387 += 2;
    }
    v18 = 1;
  }
  while ((v22 & 1) != 0);
  if (!byte_1ED7FC968)
    goto LABEL_745;
  v414 = *(_QWORD *)(v3 + 288);
  v415 = *(char **)(v414 + 64);
  v416 = *(char **)(v414 + 72);
  v417 = &v526.i64[1];
  v525 = &v526.u64[1];
  v526.i64[0] = 0x800000000;
  sub_1C6177054((unsigned int *)&v525, v415, v416);
  v418 = (uint64_t *)v525;
  if (v526.i32[0])
  {
    v419 = (uint64_t *)((char *)v525 + 8 * v526.u32[0]);
    v420 = &v572;
    while (1)
    {
      v421 = *v418;
      CyclePreheader = llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getCyclePreheader(*v418);
      if (!CyclePreheader)
        goto LABEL_880;
      *(_QWORD *)&v571 = v420;
      *((_QWORD *)&v571 + 1) = 0x800000000;
      v423 = (char *)CyclePreheader + 48;
      v424 = *((_QWORD *)CyclePreheader + 7);
      if ((llvm::MachineBasicBlock *)v424 == (llvm::MachineBasicBlock *)((char *)CyclePreheader + 48))
        goto LABEL_878;
      do
      {
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 248) + 160))(*(_QWORD *)(v3 + 248), v424))goto LABEL_806;
        if (!llvm::isCycleInvariant(v421, v424))
          goto LABEL_806;
        v563[0] = 1;
        if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v424, *(llvm::AAResults **)(v3 + 312), v563))
          goto LABEL_806;
        v425 = *(_QWORD *)(v424 + 16);
        v426 = *(_WORD *)v425 - 1;
        if (v426 > 1u || (*(_BYTE *)(*(_QWORD *)(v424 + 32) + 48) & 8) == 0)
        {
          v427 = *(_WORD *)(v424 + 44);
          v428 = *(_QWORD *)(v425 + 8);
          if ((v427 & 0xC) != 0 && (v427 & 4) == 0)
          {
            v449 = v424;
            if ((v428 & 0x80000) == 0)
            {
              while ((*(_WORD *)(v449 + 44) & 8) != 0)
              {
                v449 = *(_QWORD *)(v449 + 8);
                v3 = v503;
                if ((*(_BYTE *)(*(_QWORD *)(v449 + 16) + 10) & 8) != 0)
                  goto LABEL_778;
              }
              v3 = v503;
              goto LABEL_799;
            }
          }
          else if ((v428 & 0x80000) == 0)
          {
            goto LABEL_799;
          }
        }
LABEL_778:
        v429 = (unint64_t *)(v424 + 48);
        v430 = *(_QWORD *)(v424 + 48);
        if (v430 < 8)
          goto LABEL_799;
        if ((v430 & 7) != 0)
        {
          v431 = (_DWORD *)(v430 & 0xFFFFFFFFFFFFFFF8);
          v432 = (*(_QWORD *)(v424 + 48) & 7) != 3 || v431 == 0;
          if (v432 || !*v431)
            goto LABEL_799;
        }
        else
        {
          v430 &= 0xFFFFFFFFFFFFFFF8;
          *v429 = v430;
          if (!v430)
            goto LABEL_806;
        }
        if ((v430 & 7) == 0)
        {
          *(_QWORD *)(v424 + 48) = v430 & 0xFFFFFFFFFFFFFFF8;
          v436 = (unint64_t *)(v424 + 56);
          goto LABEL_793;
        }
        if ((v430 & 7) != 3)
          goto LABEL_806;
        v433 = (int *)(v430 & 0xFFFFFFFFFFFFFFF8);
        if ((v430 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_806;
        v435 = *v433;
        v429 = (unint64_t *)(v433 + 2);
        v434 = v435;
        if (!(_DWORD)v435)
          goto LABEL_806;
        v436 = &v429[v434];
LABEL_793:
        while (1)
        {
          v437 = *(_QWORD *)*v429;
          if ((v437 & 4) != 0)
          {
            v438 = v437 & 0xFFFFFFFFFFFFFFF8;
            if (v438)
            {
              if ((*(_DWORD *)(v438 + 8) | 2) == 3)
                break;
            }
          }
          if (++v429 == v436)
            goto LABEL_806;
        }
        v426 = *(_WORD *)v425 - 1;
LABEL_799:
        if (v426 > 1u || (*(_BYTE *)(*(_QWORD *)(v424 + 32) + 48) & 0x20) == 0)
        {
          v439 = *(_QWORD *)(v425 + 8);
          if ((*(_WORD *)(v424 + 44) & 0xC) != 0 && (*(_WORD *)(v424 + 44) & 4) == 0)
          {
            v448 = v424;
            if ((v439 & 0x1000000000) != 0)
              goto LABEL_806;
            while ((*(_WORD *)(v448 + 44) & 8) != 0)
            {
              v448 = *(_QWORD *)(v448 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v448 + 16) + 12) & 0x10) != 0)
                goto LABEL_806;
            }
          }
          else if ((v439 & 0x1000000000) != 0)
          {
            goto LABEL_806;
          }
          v441 = *(_DWORD **)(v424 + 32);
          if (!*v441 && (*v441 & 0x1000000) != 0)
          {
            v442 = v441[1];
            if ((_DWORD)v442)
            {
              v443 = *(_QWORD *)(v3 + 264);
              v444 = (uint64_t *)((v442 & 0x80000000) != 0
                               ? *(_QWORD *)(v443 + 24) + 16 * (v442 & 0x7FFFFFFF) + 8
                               : *(_QWORD *)(v443 + 272) + 8 * v442);
              v445 = *v444;
              if (v445)
              {
                if ((*(_BYTE *)(v445 + 3) & 1) != 0
                  || (v445 = *(_QWORD *)(v445 + 24)) != 0 && (*(_BYTE *)(v445 + 3) & 1) != 0)
                {
                  v446 = *(_QWORD *)(v445 + 24);
                  if (!v446 || (*(_BYTE *)(v446 + 3) & 1) == 0)
                  {
                    v447 = DWORD2(v571);
                    if (DWORD2(v571) >= (unint64_t)HIDWORD(v571))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v571, (uint64_t)v420, DWORD2(v571) + 1, 8);
                      v447 = DWORD2(v571);
                    }
                    *(_QWORD *)(v571 + 8 * v447) = v424;
                    ++DWORD2(v571);
                  }
                }
              }
            }
          }
        }
LABEL_806:
        if (!v424 || (*(_BYTE *)v424 & 4) == 0)
        {
          while ((*(_WORD *)(v424 + 44) & 8) != 0)
            v424 = *(_QWORD *)(v424 + 8);
        }
        v424 = *(_QWORD *)(v424 + 8);
      }
      while ((char *)v424 != v423);
      if (DWORD2(v571))
      {
        v450 = 0;
        v502 = v571;
        v451 = v571 + 8 * DWORD2(v571);
        v510 = v420;
        v512 = v419;
        while (v450 != dword_1ED7FCA28)
        {
          v452 = *(unint64_t **)(v451 - 8);
          v505 = v451 - 8;
          v517 = (unint64_t *)llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getCyclePreheader(v421);
          v453 = *(_QWORD *)(v3 + 264);
          v454 = *(unsigned int *)(v452[4] + 4);
          if ((v454 & 0x80000000) != 0)
            v455 = (uint64_t *)(*(_QWORD *)(v453 + 24) + 16 * (v454 & 0x7FFFFFFF) + 8);
          else
            v455 = (uint64_t *)(*(_QWORD *)(v453 + 272) + 8 * v454);
          v456 = *v455;
          if (!*v455)
            goto LABEL_877;
          while ((*(_BYTE *)(v456 + 3) & 1) != 0)
          {
            v456 = *(_QWORD *)(v456 + 24);
            if (!v456)
              goto LABEL_877;
          }
          v457 = 0;
          ++v450;
          v458 = *(_QWORD *)(v456 + 8);
LABEL_851:
          v459 = *(_QWORD *)(v458 + 24);
          v460 = *(_QWORD **)(v421 + 56);
          v461 = *(_QWORD **)(v421 + 64);
          if (v460 != v461)
          {
            while (*v460 != v459)
            {
              if (++v460 == v461)
              {
                v460 = *(_QWORD **)(v421 + 64);
                break;
              }
            }
          }
          if (v460 == v461 || **(_WORD **)(v458 + 16) != 19)
            goto LABEL_877;
          if (v457)
          {
            v462 = v417;
            v463 = *(_QWORD *)(v503 + 272);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v463);
            v464 = *(_QWORD *)(v463 + 1320);
            v417 = v462;
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(v464, v457, v459);
            if (NearestCommonDominator)
            {
              v457 = NearestCommonDominator;
              v458 = *(_QWORD *)(v456 + 8);
              goto LABEL_861;
            }
LABEL_877:
            v3 = v503;
            v420 = v510;
            v419 = v512;
            break;
          }
          v457 = *(_QWORD *)(v458 + 24);
LABEL_861:
          while (1)
          {
            v456 = *(_QWORD *)(v456 + 24);
            if (!v456)
              break;
            if ((*(_BYTE *)(v456 + 3) & 1) == 0 && *(_QWORD *)(v456 + 8) != v458)
            {
              v458 = *(_QWORD *)(v456 + 8);
              goto LABEL_851;
            }
          }
          if (!v457)
            goto LABEL_877;
          if ((unint64_t *)v457 == v517)
            goto LABEL_877;
          v466 = -1;
          v467 = v457 + 48;
          do
          {
            v467 = *(_QWORD *)(v467 + 8);
            ++v466;
          }
          while (v467 != v457 + 48);
          if (dword_1ED7FC7E8 < v466)
            goto LABEL_877;
          v468 = (unint64_t *)llvm::MachineBasicBlock::SkipPHIsAndLabels(v457, *(_QWORD *)(v457 + 56));
          sub_1C48532D0((unint64_t *)v457, v468, v517, v452);
          *(_QWORD *)v563 = 0;
          v469 = (unsigned __int8 **)(v452 + 7);
          v3 = v503;
          v420 = v510;
          v419 = v512;
          if (v563 != (BOOL *)v469)
          {
            if (*v469)
            {
              llvm::MetadataTracking::untrack((uint64_t)v469, *v469);
              v470 = *(unsigned __int8 **)v563;
              *v469 = *(unsigned __int8 **)v563;
              if (v470)
                llvm::MetadataTracking::retrack((uint64_t)v563, v470, (uint64_t)v469);
            }
            else
            {
              *v469 = 0;
            }
          }
          v485 = 1;
          v451 = v505;
          if (v505 == v502)
            break;
        }
      }
LABEL_878:
      if ((unint64_t *)v571 != v420)
        free((void *)v571);
LABEL_880:
      if (++v418 == v419)
      {
        v418 = (uint64_t *)v525;
        break;
      }
    }
  }
  if (v418 != v417)
    free(v418);
LABEL_745:
  sub_1C6143384(*(_QWORD **)(v3 + 904));
  *(_QWORD *)(v3 + 896) = v484;
  *(_OWORD *)(v3 + 904) = 0u;
  sub_1C51B6C10(*(_QWORD **)(v3 + 928));
  *(_QWORD *)(v3 + 920) = v480;
  *(_OWORD *)(v3 + 928) = 0u;
  v402 = *(_DWORD *)(v3 + 784);
  v403 = *(_QWORD *)(v3 + 776);
  v404 = *(unsigned int *)(v3 + 792);
  v405 = (unsigned int *)(v403 + 4 * v404);
  if (v402)
  {
    if ((_DWORD)v404)
    {
      v406 = 4 * v404;
      v407 = *(unsigned int **)(v3 + 776);
      while (*v407 >= 0xFFFFFFFE)
      {
        ++v407;
        v406 -= 4;
        if (!v406)
          goto LABEL_750;
      }
    }
    else
    {
      v407 = *(unsigned int **)(v3 + 776);
    }
  }
  else
  {
LABEL_750:
    v407 = (unsigned int *)(v403 + 4 * v404);
  }
  v408 = (unsigned int *)(v403 + 4 * v404);
  if (v407 != v408)
  {
    do
    {
      v410 = *v407;
      v409 = v407 + 1;
      llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v3 + 264), v410);
      while (v409 != v405)
      {
        v411 = *v409++;
        if (v411 <= 0xFFFFFFFD)
        {
          v407 = v409 - 1;
          goto LABEL_758;
        }
      }
      v407 = v405;
LABEL_758:
      ;
    }
    while (v407 != v408);
    v402 = *(_DWORD *)(v3 + 784);
  }
  if (v402 || *(_DWORD *)(v3 + 788))
  {
    v413 = *(unsigned int *)(v3 + 792);
    if (v413 <= 4 * v402 || v413 < 0x41)
    {
      if ((_DWORD)v413)
        memset(*v474, 255, 4 * v413);
      *(_QWORD *)(v3 + 784) = 0;
    }
    else
    {
      sub_1C4A068AC(v474);
    }
  }
  v4 = v485;
  return v4 & 1;
}

char *sub_1C51B6B70(char *result, int a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  char *v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    result = (char *)operator new(40 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = *((_DWORD *)v2 + 4);
    if (v5)
    {
      v6 = &result[40 * v5];
      do
      {
        *(_QWORD *)result = 0;
        result[8] = 0;
        result[24] = 0;
        *((_QWORD *)result + 4) = 0;
        result += 40;
      }
      while (result != v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1C51B6C10(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1C51B6C10(*a1);
    sub_1C51B6C10(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t *sub_1C51B6C58(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v1 = result + 1;
    v2 = 4;
  }
  else
  {
    v2 = *((unsigned int *)result + 4);
    if (!(_DWORD)v2)
      return result;
    v1 = (uint64_t *)result[1];
  }
  v3 = 16 * v2;
  result = v1 + 1;
  do
  {
    if (*((_DWORD *)result - 2) <= 0xFFFFFFFD)
      result = sub_1C51B6CBC(result);
    result += 2;
    v3 -= 16;
  }
  while (v3);
  return result;
}

uint64_t *sub_1C51B6CBC(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t sub_1C51B6D1C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v9 = 0;
    result = 0;
    goto LABEL_5;
  }
  v6 = *a1;
  v7 = v4 - 1;
  v8 = sub_1C50FD958(a2) & (v4 - 1);
  v9 = v6 + 40 * v8;
  if (sub_1C50FDDD0((uint64_t)a2, v9))
  {
    result = 1;
    goto LABEL_5;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_8;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
LABEL_9:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = v6 + 40 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a2, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_8;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_5:
  *a3 = v9;
  return result;
}

uint64_t sub_1C51B6E34(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;

  v5 = a1 + 8;
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      result = 0;
      v13 = 0;
      goto LABEL_10;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = v6 - 1;
  v8 = (37 * *a2) & v7;
  result = v5 + 16 * v8;
  v10 = *(_DWORD *)result;
  if (*a2 == *(_DWORD *)result)
    return result;
  v11 = 0;
  v12 = 1;
  while (v10 != -1)
  {
    if (v11)
      v15 = 0;
    else
      v15 = v10 == -2;
    if (v15)
      v11 = result;
    v16 = v8 + v12++;
    v8 = v16 & v7;
    result = v5 + 16 * v8;
    v10 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
  }
  if (v11)
    result = v11;
  if ((v4 & 1) != 0)
    v13 = 4;
  else
    v13 = *(_DWORD *)(a1 + 16);
LABEL_10:
  v14 = v4 >> 1;
  if (4 * v14 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_18;
  }
  if (v13 + ~v14 - *(_DWORD *)(a1 + 4) <= v13 >> 3)
  {
LABEL_18:
    sub_1C51B7028(a1, v13);
    v17 = 0;
    sub_1C51B6F90(a1, *a2, &v17);
    result = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 4);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1C51B6F90(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t *sub_1C51B7028(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v16[16];
  uint64_t v17;

  v2 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C51B71B4((uint64_t *)a1, v7, &v7[4 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v16;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *v10 = v12;
      v14 = *(_QWORD *)(v11 + 16);
      v13 = (uint64_t *)(v11 + 16);
      *((_QWORD *)v10 + 1) = v14;
      *v13 = 0;
      v10 += 4;
      sub_1C51B6CBC(v13);
    }
    v9 += 16;
  }
  while (v9 != 64);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C51B71B4((uint64_t *)a1, v16, v10);
}

uint64_t *sub_1C51B71B4(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v4 = a2;
  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = result + 1;
  if ((v6 & 1) != 0)
  {
    v10 = result + 9;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (uint64_t *)result[1];
    v10 = &v9[2 * v8];
  }
  do
  {
    *(_DWORD *)v9 = -1;
    v9 += 2;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      v11 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v5 & 1) != 0)
        {
          v12 = 4;
          v13 = v7;
        }
        else
        {
          v13 = (uint64_t *)v5[1];
          v12 = *((_DWORD *)v5 + 4);
        }
        v14 = v12 - 1;
        v15 = (v12 - 1) & (37 * v11);
        v16 = &v13[2 * v15];
        v17 = *(_DWORD *)v16;
        if (v11 != *(_DWORD *)v16)
        {
          v18 = 0;
          v19 = 1;
          while (v17 != -1)
          {
            if (v18)
              v20 = 0;
            else
              v20 = v17 == -2;
            if (v20)
              v18 = v16;
            v21 = v15 + v19++;
            v15 = v21 & v14;
            v16 = &v13[2 * (v21 & v14)];
            v17 = *(_DWORD *)v16;
            if (v11 == *(_DWORD *)v16)
              goto LABEL_14;
          }
          if (v18)
            v16 = v18;
        }
LABEL_14:
        *(_DWORD *)v16 = v11;
        v16[1] = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        *(_DWORD *)v5 += 2;
        result = sub_1C51B6CBC((uint64_t *)v4 + 1);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C51B72F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C51B6D1C((uint64_t *)a1, (uint64_t *)a2, &v12);
  v7 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C51B7384(a1, a2, (uint64_t *)a2, v12);
    v7 = result;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 32) = v8;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1C51B7384(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C51B7440(a1, v7);
    v9 = 0;
    sub_1C51B6D1C((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 || *(_BYTE *)(a4 + 24) || *(_QWORD *)(a4 + 32))
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *sub_1C51B7440(uint64_t a1, int a2)
{
  unsigned int v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(__int128 **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C51B7510(a1, v4, (__int128 *)((char *)v4 + 40 * v3));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[40 * v10];
    do
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      result[24] = 0;
      *((_QWORD *)result + 4) = 0;
      result += 40;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C51B7510(uint64_t result, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 40 * v6;
    do
    {
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v7 += 40;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 || *((_BYTE *)a2 + 24) && *(__int128 *)((char *)a2 + 8) != 0 || *((_QWORD *)a2 + 4))
    {
      v12 = 0;
      result = sub_1C51B6D1C((uint64_t *)v5, (uint64_t *)a2, &v12);
      v9 = (_OWORD *)v12;
      v10 = *a2;
      v11 = a2[1];
      *(_QWORD *)(v12 + 32) = *((_QWORD *)a2 + 4);
      *v9 = v10;
      v9[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 = (__int128 *)((char *)a2 + 40);
  }
  return result;
}

uint64_t sub_1C51B75E0(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t **v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  BOOL v20;
  uint64_t **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t *v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t **v48;
  unint64_t v49;
  char *v50;
  void *v51;
  void **v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _BOOL4 v61;
  char v62;
  uint64_t result;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t **v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[32];
  void *__src;
  uint64_t v76;
  _QWORD v77[6];

  v77[4] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v6)
  {
    v10 = 0;
    result = 0;
    if (a3)
      return v10;
    return result;
  }
  v7 = a5;
  v10 = 0;
  v11 = *(int **)(a2 + 32);
  v12 = &v11[8 * v6];
  v13 = (uint64_t **)(a5 + 8);
  v14 = v77;
  do
  {
    v15 = *v11;
    if (*v11)
      goto LABEL_4;
    v16 = v11[1];
    if (!v16)
      goto LABEL_4;
    if (!(v16 >> 30))
    {
      if ((v15 & 0x1000000) != 0)
      {
        if ((~v15 & 0x5000000) != 0)
          return 0;
      }
      else if (!llvm::MachineRegisterInfo::isConstantPhysReg(*(_QWORD **)(a1 + 264), v11[1])
             && ((*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248), v11) & 1) == 0)
      {
        return 0;
      }
      goto LABEL_4;
    }
    if ((v15 & 0x1000000) == 0)
      goto LABEL_4;
    if (!(*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 248) + 840))(*(_QWORD *)(a1 + 248), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v16 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))return 0;
    if (v10)
    {
      LOBYTE(v71) = 0;
      if (!sub_1C51B8C5C(a1, v16, v10, a3, a4, &v71))
        return 0;
      goto LABEL_4;
    }
    v17 = *v13;
    v66 = v14;
    v67 = v13;
    if (!*v13)
      goto LABEL_30;
    v18 = v13;
    do
    {
      v19 = v17[4];
      v20 = v19 >= a3;
      if (v19 >= a3)
        v21 = (uint64_t **)v17;
      else
        v21 = (uint64_t **)(v17 + 1);
      if (v20)
        v18 = (uint64_t **)v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 == v13 || (unint64_t)v18[4] > a3)
    {
LABEL_30:
      v65 = v7;
      v22 = *(char **)(a3 + 88);
      v23 = *(char **)(a3 + 96);
      __src = v14;
      v76 = 0x400000000;
      v24 = v23 - v22;
      if ((unint64_t)(v23 - v22) >= 0x21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v14, v24 >> 3, 8);
        v25 = v76;
        v26 = v76;
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      if (v22 != v23)
      {
        v27 = (char *)__src + 8 * v25;
        do
        {
          v28 = *(_QWORD *)v22;
          v22 += 8;
          *v27++ = v28;
        }
        while (v22 != v23);
      }
      LODWORD(v76) = v26 + ((unint64_t)v24 >> 3);
      v29 = sub_1C49FA70C(*(_QWORD *)(a1 + 272), a3);
      v30 = *(unsigned int *)(v29 + 32);
      if ((_DWORD)v30)
      {
        v31 = *(uint64_t ***)(v29 + 24);
        v32 = &v31[v30];
        do
        {
          if (*(_QWORD *)(*v31)[1] == *(_QWORD *)(a2 + 24))
          {
            v33 = **v31;
            v34 = *(_QWORD **)(a3 + 88);
            v35 = *(_QWORD **)(a3 + 96);
            if (v34 != v35)
            {
              while (*v34 != v33)
              {
                if (++v34 == v35)
                {
                  v34 = *(_QWORD **)(a3 + 96);
                  break;
                }
              }
            }
            if (v34 == v35)
            {
              v36 = v76;
              if (v76 >= (unint64_t)HIDWORD(v76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v14, v76 + 1, 8);
                v36 = v76;
              }
              *((_QWORD *)__src + v36) = v33;
              LODWORD(v76) = v76 + 1;
            }
          }
          ++v31;
        }
        while (v31 != v32);
      }
      v37 = (uint64_t *)__src;
      v38 = v76;
      v68 = (uint64_t *)((char *)__src + 8 * v76);
      v71 = a1;
      if (v76 < 0x81)
      {
LABEL_51:
        sub_1C51B9208(v37, v68, (uint64_t *)&v71, v38, 0, 0);
      }
      else
      {
        v39 = v76;
        while (1)
        {
          v40 = (uint64_t *)operator new(8 * v39, MEMORY[0x1E0DE4E10]);
          if (v40)
            break;
          v41 = v39 > 1;
          v39 >>= 1;
          if (!v41)
            goto LABEL_51;
        }
        v42 = v40;
        sub_1C51B9208(v37, v68, (uint64_t *)&v71, v38, v40, v39);
        operator delete(v42);
      }
      v71 = a3;
      v72 = v74;
      v73 = 0x400000000;
      v43 = a3;
      v69 = v76;
      if (!(_DWORD)v76)
      {
LABEL_57:
        v46 = v67;
        while (1)
        {
          v47 = *v46;
          v48 = v46;
          if (!*v46)
            break;
          while (1)
          {
            v46 = (uint64_t **)v47;
            v49 = v47[4];
            if (v49 > v43)
              break;
            if (v49 >= v43)
            {
              v18 = v46;
              v7 = v65;
              goto LABEL_74;
            }
            v47 = v46[1];
            if (!v47)
            {
              v48 = v46 + 1;
              goto LABEL_63;
            }
          }
        }
LABEL_63:
        v50 = (char *)operator new(0x58uLL);
        v18 = (uint64_t **)v50;
        *((_QWORD *)v50 + 4) = v43;
        v51 = v50 + 56;
        *((_QWORD *)v50 + 5) = v50 + 56;
        v52 = (void **)(v50 + 40);
        *((_QWORD *)v50 + 6) = 0x400000000;
        if (!(_DWORD)v69)
          goto LABEL_70;
        if (v72 != v74)
        {
          *((_QWORD *)v50 + 5) = v72;
          v64 = HIDWORD(v73);
          *((_DWORD *)v50 + 12) = v69;
          *((_DWORD *)v50 + 13) = v64;
          v72 = v74;
          HIDWORD(v73) = 0;
          goto LABEL_69;
        }
        if (v69 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v50 + 40), (uint64_t)v51, v69, 8);
          v54 = v73;
          if (!(_DWORD)v73)
            goto LABEL_68;
          v53 = v72;
          v51 = *v52;
        }
        else
        {
          v53 = v74;
          v54 = v69;
        }
        memcpy(v51, v53, 8 * v54);
LABEL_68:
        *((_DWORD *)v18 + 12) = v69;
LABEL_69:
        LODWORD(v73) = 0;
LABEL_70:
        *v18 = 0;
        v18[1] = 0;
        v18[2] = (uint64_t *)v46;
        *v48 = (uint64_t *)v18;
        v7 = v65;
        v55 = **(_QWORD **)v65;
        v56 = (uint64_t *)v18;
        if (v55)
        {
          *(_QWORD *)v65 = v55;
          v56 = *v48;
        }
        sub_1C4768E74(*(uint64_t **)(v65 + 8), v56);
        ++*(_QWORD *)(v65 + 16);
LABEL_74:
        if (v72 != v74)
          free(v72);
        if (__src != v66)
          free(__src);
        goto LABEL_78;
      }
      v44 = v74;
      v45 = v76;
      if (v76 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v76, 8);
        v45 = v76;
        if (!(_DWORD)v76)
          goto LABEL_56;
        v44 = v72;
      }
      memcpy(v44, __src, 8 * v45);
LABEL_56:
      LODWORD(v73) = v69;
      v43 = v71;
      goto LABEL_57;
    }
LABEL_78:
    v57 = *((unsigned int *)v18 + 12);
    if (!(_DWORD)v57)
      return 0;
    v58 = v7;
    v59 = v18[5];
    v60 = 8 * v57;
    while (1)
    {
      v10 = *v59;
      LOBYTE(v71) = 0;
      v61 = sub_1C51B8C5C(a1, v16, v10, a3, a4, &v71);
      if (v61 || (_BYTE)v71)
        break;
      ++v59;
      v60 -= 8;
      if (!v60)
        return 0;
    }
    if (v61)
    {
      v13 = v67;
      if (!v10)
        return 0;
      v7 = v58;
      v62 = sub_1C51B8E58(a1, v16, a2, a3, v10, v58);
      v14 = v66;
      if ((v62 & 1) == 0)
        return 0;
    }
    else
    {
      v10 = 0;
      result = 0;
      v7 = v58;
      v14 = v66;
      v13 = v67;
      if ((_BYTE)v71)
        return result;
    }
LABEL_4:
    v11 += 8;
  }
  while (v11 != v12);
  if (v10 == a3 || v10 && (*(_BYTE *)(v10 + 184) || *(_BYTE *)(v10 + 202)))
    return 0;
  return v10;
}

void sub_1C51B7BD8(uint64_t a1, uint64_t a2, const llvm::MachineBasicBlock *a3, const llvm::MachineBasicBlock *a4, char a5)
{
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t **v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::MachineBasicBlock **v19;
  uint64_t *v21;
  uint64_t v22;
  const llvm::MachineBasicBlock **v23;
  const llvm::MachineBasicBlock **v24;
  const llvm::MachineBasicBlock **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const llvm::MachineBasicBlock **v38;
  const llvm::MachineBasicBlock *v39;
  int v40;
  int v41;
  const llvm::MachineBasicBlock **v42;
  const llvm::MachineBasicBlock *v43;
  unsigned int v44;
  const llvm::MachineBasicBlock **v45;
  const llvm::MachineBasicBlock *v46;
  int v47;
  int v48;
  const llvm::MachineBasicBlock *v49;
  unsigned int v50;
  int v51;
  const llvm::MachineBasicBlock **v52;
  const llvm::MachineBasicBlock **v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  const llvm::MachineBasicBlock **v81;
  const llvm::MachineBasicBlock **v82;

  if (*(_QWORD *)(a1 + 720))
  {
    v10 = *(uint64_t **)(a1 + 712);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v10;
          v12 = v10[4];
          if (v12 <= (unint64_t)a3)
            break;
LABEL_4:
          v10 = *v11;
          v13 = v11;
          if (!*v11)
            goto LABEL_20;
        }
        if (v12 >= (unint64_t)a3)
        {
          v14 = (unint64_t)v11[5];
          if (v14 > (unint64_t)a4)
            goto LABEL_4;
          if (v14 >= (unint64_t)a4)
            goto LABEL_49;
        }
        v10 = v11[1];
        if (!v10)
          goto LABEL_10;
      }
    }
    v13 = (uint64_t **)(a1 + 712);
    v11 = (uint64_t **)(a1 + 712);
    goto LABEL_20;
  }
  v15 = (_QWORD *)(a1 + 560);
  v16 = *(_QWORD *)(a1 + 560);
  v17 = *(unsigned int *)(a1 + 568);
  if (!(_DWORD)v17)
    goto LABEL_25;
  v18 = 16 * v17;
  v19 = (const llvm::MachineBasicBlock **)(v16 + 8);
  while (*(v19 - 1) != a3 || *v19 != a4)
  {
    v19 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_24;
  }
  if (v18)
    goto LABEL_49;
LABEL_24:
  if (v17 <= 7)
  {
LABEL_25:
    if (v17 >= *(_DWORD *)(a1 + 572))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 560, a1 + 576, v17 + 1, 16);
      v16 = *(_QWORD *)(a1 + 560);
      v17 = *(unsigned int *)(a1 + 568);
    }
    v23 = (const llvm::MachineBasicBlock **)(v16 + 16 * v17);
    *v23 = a3;
    v23[1] = a4;
    ++*(_DWORD *)(a1 + 568);
    goto LABEL_28;
  }
  v13 = (uint64_t **)(a1 + 712);
  do
  {
    v60 = *v15 + 16 * v17;
    v63 = *(_QWORD *)(v60 - 16);
    v62 = v60 - 16;
    v61 = v63;
    v64 = *v13;
    v65 = (uint64_t *)(a1 + 712);
    v66 = (uint64_t *)(a1 + 712);
    if (*v13)
    {
      v67 = *(_QWORD *)(v62 + 8);
      while (1)
      {
        while (1)
        {
          v66 = v64;
          v68 = v64[4];
          if (v68 <= v61)
            break;
LABEL_91:
          v64 = (uint64_t *)*v66;
          v65 = v66;
          if (!*v66)
            goto LABEL_98;
        }
        if (v68 >= v61)
        {
          v69 = v66[5];
          if (v69 > v67)
            goto LABEL_91;
          if (v69 >= v67)
            goto LABEL_101;
        }
        v64 = (uint64_t *)v66[1];
        if (!v64)
        {
          v65 = v66 + 1;
          break;
        }
      }
    }
LABEL_98:
    v70 = operator new(0x30uLL);
    v70[2] = *(_OWORD *)v62;
    *(_QWORD *)v70 = 0;
    *((_QWORD *)v70 + 1) = 0;
    *((_QWORD *)v70 + 2) = v66;
    *v65 = (uint64_t)v70;
    v71 = **(_QWORD **)(a1 + 704);
    if (v71)
    {
      *(_QWORD *)(a1 + 704) = v71;
      v70 = (_OWORD *)*v65;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 712), (uint64_t *)v70);
    ++*(_QWORD *)(a1 + 720);
    LODWORD(v17) = *(_DWORD *)(a1 + 568);
LABEL_101:
    LODWORD(v17) = v17 - 1;
    *(_DWORD *)(a1 + 568) = v17;
  }
  while ((_DWORD)v17);
  v72 = *v13;
  v11 = (uint64_t **)(a1 + 712);
  if (*v13)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v72;
        v73 = v72[4];
        if (v73 <= (unint64_t)a3)
          break;
LABEL_104:
        v72 = *v11;
        v13 = v11;
        if (!*v11)
          goto LABEL_20;
      }
      if (v73 >= (unint64_t)a3)
      {
        v74 = (unint64_t)v11[5];
        if (v74 > (unint64_t)a4)
          goto LABEL_104;
        if (v74 >= (unint64_t)a4)
          goto LABEL_28;
      }
      v72 = v11[1];
      if (!v72)
      {
LABEL_10:
        v13 = v11 + 1;
        break;
      }
    }
  }
LABEL_20:
  v21 = (uint64_t *)operator new(0x30uLL);
  v21[4] = (uint64_t)a3;
  v21[5] = (uint64_t)a4;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = (uint64_t)v11;
  *v13 = v21;
  v22 = **(_QWORD **)(a1 + 704);
  if (v22)
  {
    *(_QWORD *)(a1 + 704) = v22;
    v21 = *v13;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 712), v21);
  ++*(_QWORD *)(a1 + 720);
LABEL_28:
  if (**(_WORD **)(a2 + 16) == 19
    || (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 152))(*(_QWORD *)(a1 + 248), a2))
  {
    v24 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 11);
    v25 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
    if (v24 != v25)
    {
      while (*v24 != a4)
      {
        if (++v24 == v25)
        {
          v24 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
          break;
        }
      }
    }
    if (v24 == v25
      || llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 304), a3, a4) > ((unint64_t)(((((unint64_t)dword_1ED7FC728 << 31) | 0x30)* (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6))
    {
      v26 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v26)
        return;
      v27 = *(_QWORD *)(a2 + 24);
      v28 = 32 * v26;
      for (i = (unsigned int *)(*(_QWORD *)(a2 + 32) + 4); ; i += 8)
      {
        if ((*(i - 1) & 0x10000FF) == 0)
        {
          v30 = *i;
          if (v30 >> 30)
          {
            v31 = *(_QWORD *)(a1 + 264);
            if (llvm::MachineRegisterInfo::hasOneNonDBGUse(v31, *i))
            {
              if ((v30 & 0x80000000) != 0)
                v32 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
              else
                v32 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v30);
              v33 = *v32;
              if ((*(_BYTE *)(v33 + 3) & 1) == 0)
                v33 = *(_QWORD *)(v33 + 24);
              if (*(_QWORD *)(*(_QWORD *)(v33 + 8) + 24) == v27)
                break;
            }
          }
        }
        v28 -= 32;
        if (!v28)
          return;
      }
    }
  }
LABEL_49:
  if (a3 == a4 || !byte_1ED7FC5A8)
    return;
  v34 = *(_QWORD *)(a1 + 288);
  v35 = *(_QWORD *)(v34 + 16);
  v36 = *(unsigned int *)(v34 + 32);
  if ((_DWORD)v36)
  {
    LODWORD(v37) = (v36 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v38 = (const llvm::MachineBasicBlock **)(v35 + 16 * v37);
    v39 = *v38;
    if (*v38 == a3)
      goto LABEL_58;
    v40 = 1;
    while (v39 != (const llvm::MachineBasicBlock *)-4096)
    {
      v41 = v37 + v40++;
      v37 = v41 & (v36 - 1);
      v39 = *(const llvm::MachineBasicBlock **)(v35 + 16 * v37);
      if (v39 == a3)
      {
        v38 = (const llvm::MachineBasicBlock **)(v35 + 16 * v37);
        goto LABEL_58;
      }
    }
  }
  v38 = (const llvm::MachineBasicBlock **)(v35 + 16 * v36);
LABEL_58:
  v42 = (const llvm::MachineBasicBlock **)(v35 + 16 * v36);
  if (v38 == v42)
  {
    v43 = 0;
    if (!(_DWORD)v36)
      goto LABEL_70;
  }
  else
  {
    v43 = v38[1];
    if (!(_DWORD)v36)
      goto LABEL_70;
  }
  v44 = v36 - 1;
  LODWORD(v36) = (v36 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v45 = (const llvm::MachineBasicBlock **)(v35 + 16 * v36);
  v46 = *v45;
  if (*v45 == a4)
  {
LABEL_67:
    if (v45 != v42)
    {
      v49 = v45[1];
      if (!v43)
        goto LABEL_74;
      goto LABEL_71;
    }
  }
  else
  {
    v47 = 1;
    while (v46 != (const llvm::MachineBasicBlock *)-4096)
    {
      v48 = v36 + v47++;
      v36 = v48 & v44;
      v46 = *(const llvm::MachineBasicBlock **)(v35 + 16 * v36);
      if (v46 == a4)
      {
        v45 = (const llvm::MachineBasicBlock **)(v35 + 16 * v36);
        goto LABEL_67;
      }
    }
  }
LABEL_70:
  v49 = 0;
  if (!v43)
    goto LABEL_74;
LABEL_71:
  if (v43 == v49 && (*((_DWORD *)v43 + 4) != 1 || **((const llvm::MachineBasicBlock ***)v43 + 1) == a4))
    return;
LABEL_74:
  if ((a5 & 1) == 0)
  {
    v56 = (uint64_t *)*((_QWORD *)a4 + 8);
    v57 = (uint64_t *)*((_QWORD *)a4 + 9);
    while (v56 != v57)
    {
      v58 = *v56;
      if ((const llvm::MachineBasicBlock *)*v56 != a3)
      {
        v59 = *(_QWORD *)(a1 + 272);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v59);
        if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v59 + 1320), (uint64_t)a4, v58))return;
      }
      ++v56;
    }
  }
  v82 = 0;
  if ((sub_1C51BB2F0(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), (uint64_t)a3, (uint64_t)a4, &v82) & 1) == 0)
  {
    v50 = *(_DWORD *)(a1 + 744);
    v51 = *(_DWORD *)(a1 + 736);
    if (4 * v51 + 4 >= 3 * v50)
    {
      v50 *= 2;
    }
    else if (v50 + ~v51 - *(_DWORD *)(a1 + 740) > v50 >> 3)
    {
      goto LABEL_78;
    }
    sub_1C51BB3D8(a1 + 728, v50);
    v82 = 0;
    sub_1C51BB2F0(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), (uint64_t)a3, (uint64_t)a4, &v82);
LABEL_78:
    v52 = v82;
    ++*(_DWORD *)(a1 + 736);
    if (*v52 != (const llvm::MachineBasicBlock *)-4096 || v52[1] != (const llvm::MachineBasicBlock *)-4096)
      --*(_DWORD *)(a1 + 740);
    *v52 = a3;
    v52[1] = a4;
    v53 = *(const llvm::MachineBasicBlock ***)(a1 + 760);
    v54 = *(_QWORD *)(a1 + 768);
    if ((unint64_t)v53 >= v54)
    {
      v75 = *(char **)(a1 + 752);
      v76 = ((char *)v53 - v75) >> 4;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 60)
        abort();
      v78 = v54 - (_QWORD)v75;
      if (v78 >> 3 > v77)
        v77 = v78 >> 3;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
        v79 = 0xFFFFFFFFFFFFFFFLL;
      else
        v79 = v77;
      if (v79)
      {
        if (v79 >> 60)
          sub_1C4764EE4();
        v80 = (char *)operator new(16 * v79);
      }
      else
      {
        v80 = 0;
      }
      v81 = (const llvm::MachineBasicBlock **)&v80[16 * v76];
      *v81 = a3;
      v81[1] = a4;
      v55 = v81 + 2;
      if (v53 != (const llvm::MachineBasicBlock **)v75)
      {
        do
        {
          *((_OWORD *)v81 - 1) = *((_OWORD *)v53 - 1);
          v81 -= 2;
          v53 -= 2;
        }
        while (v53 != (const llvm::MachineBasicBlock **)v75);
        v53 = *(const llvm::MachineBasicBlock ***)(a1 + 752);
      }
      *(_QWORD *)(a1 + 752) = v81;
      *(_QWORD *)(a1 + 760) = v55;
      *(_QWORD *)(a1 + 768) = &v80[16 * v79];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v53 = a3;
      v53[1] = a4;
      v55 = v53 + 2;
    }
    *(_QWORD *)(a1 + 760) = v55;
  }
}

uint64_t sub_1C51B827C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t i;
  unsigned int v16;
  unsigned int RegisterDefOperandIdx;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 56);
  if (v6 != a2)
  {
    if (v6 != a1 + 48)
    {
      while (!**(_WORD **)(v6 + 16) || **(_WORD **)(v6 + 16) == 69)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == a1 + 48)
        {
          v6 = a1 + 48;
          break;
        }
      }
    }
    if (v6 != a2)
    {
      v12 = 1;
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 1144))(a5, v6))
        {
          v13 = *(unsigned int *)(a3 + 40);
          if ((_DWORD)v13)
          {
            v14 = *(_DWORD **)(a3 + 32);
            for (i = 32 * v13; i; i -= 32)
            {
              if (!*v14)
              {
                v16 = v14[1];
                if (v16)
                {
                  if ((*v14 & 0x1000000) != 0)
                  {
                    if (llvm::MachineInstr::findRegisterUseOperandIdx(v6, v14[1], 0, a4) != -1)
                      return 1;
                    RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v6, v16, 0, 1, a4);
                    if (RegisterDefOperandIdx != -1)
                    {
                      v18 = *(_QWORD *)(v6 + 32);
                      if (v18)
                      {
                        if ((~*(_DWORD *)(v18 + 32 * RegisterDefOperandIdx) & 0x5000000) != 0)
                          return 1;
                      }
                    }
                  }
                  else if ((v16 >> 30
                          || ((*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a5 + 24))(a5, v14) & 1) == 0
                          && (!a6 || !llvm::MachineRegisterInfo::isConstantPhysReg(a6, v16)))
                         && llvm::MachineInstr::findRegisterDefOperandIdx(v6, v16, 0, 1, a4) != -1)
                  {
                    return v12;
                  }
                }
              }
              v14 += 8;
            }
          }
        }
        if (!v6 || (*(_BYTE *)v6 & 4) == 0)
        {
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            v6 = *(_QWORD *)(v6 + 8);
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != a2);
    }
  }
  return 0;
}

uint64_t sub_1C51B8454(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  char v33;
  unsigned int *v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  unsigned int *v38;
  unsigned int *v39;
  _BYTE v40[24];
  _BYTE *v41;
  unsigned int *v42;
  unsigned int *v43;
  _BYTE v44[24];
  _BYTE *v45;
  unsigned int *v46;
  uint64_t v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  if (**(_WORD **)(a1 + 16) == 19)
  {
    v9 = *(_DWORD **)(a1 + 32);
    v10 = v9 + 8;
    v31 = v9;
    v32 = v9 + 8;
    v33 = 1;
  }
  else
  {
    (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 416))(&v31, v8, a1);
    if (!v33)
      return 0;
    v9 = v31;
    v10 = v32;
  }
  result = 0;
  v12 = *(_DWORD *)(v7 + 32);
  if ((v10[1] ^ a3) < 0 || a3 < 0 == (v12 == 0))
    return result;
  if (!v12)
  {
    if (v9[1] != a3)
      return 0;
    v13 = a3;
LABEL_41:
    sub_1C61F1700(a2, v13, &v42);
    v38 = v42;
    v39 = v43;
    v24 = v40;
    if (v45)
    {
      if (v45 == v44)
      {
        v41 = v40;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v45 + 24))(v45, v40, v23);
      }
      else
      {
        v41 = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v22, v23);
      }
    }
    else
    {
      v41 = 0;
    }
    v34 = v46;
    v35 = v47;
    v25 = v36;
    if (v49)
    {
      if (v49 == v48)
      {
        v37 = v36;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v49 + 24))(v49, v36, v23);
      }
      else
      {
        v37 = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v22, v23);
      }
    }
    else
    {
      v37 = 0;
    }
LABEL_51:
    v26 = v38;
    while (v26 != v34)
    {
      llvm::MachineOperand::setReg((uint64_t)v26, v10[1]);
      *v26 = *v26 & 0xFFF000FF | (((*v10 >> 8) & 0xFFF) << 8);
      while (1)
      {
        v26 = v38 + 8;
        v38 = v26;
        if (v26 == v39)
          break;
        if (!v41)
          goto LABEL_80;
        if ((*(unsigned int (**)(_BYTE *, unsigned int *))(*(_QWORD *)v41 + 48))(v41, v26))
          goto LABEL_51;
      }
    }
    if (v37 == v36)
    {
      v27 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_63;
      v27 = 5;
      v25 = v37;
    }
    (*(void (**)(_QWORD *))(*v25 + 8 * v27))(v25);
LABEL_63:
    if (v41 == v40)
    {
      v28 = 4;
    }
    else
    {
      if (!v41)
      {
LABEL_68:
        sub_1C619047C(&v42);
        return 1;
      }
      v28 = 5;
      v24 = v41;
    }
    (*(void (**)(_QWORD *))(*v24 + 8 * v28))(v24);
    goto LABEL_68;
  }
  v13 = a3;
  sub_1C61F1700(a2, a3, &v42);
  v38 = v42;
  v39 = v43;
  v16 = v40;
  if (v45)
  {
    if (v45 == v44)
    {
      v41 = v40;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v45 + 24))(v45, v40, v15);
    }
    else
    {
      v41 = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v14, v15);
    }
  }
  else
  {
    v41 = 0;
  }
  v34 = v46;
  v35 = v47;
  v17 = v36;
  if (v49)
  {
    if (v49 == v48)
    {
      v37 = v36;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v49 + 24))(v49, v36, v15);
    }
    else
    {
      v37 = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v14, v15);
    }
  }
  else
  {
    v37 = 0;
  }
LABEL_22:
  v18 = v38;
  while (1)
  {
    if (v18 == v34)
    {
      if (v37 == v36)
      {
        v20 = 4;
      }
      else
      {
        if (!v37)
          goto LABEL_35;
        v20 = 5;
        v17 = v37;
      }
      (*(void (**)(_QWORD *))(*v17 + 8 * v20))(v17);
LABEL_35:
      if (v41 == v40)
      {
        v21 = 4;
      }
      else
      {
        if (!v41)
        {
LABEL_40:
          sub_1C619047C(&v42);
          goto LABEL_41;
        }
        v21 = 5;
        v16 = v41;
      }
      (*(void (**)(_QWORD *))(*v16 + 8 * v21))(v16);
      goto LABEL_40;
    }
    v19 = (*v18 >> 8) & 0xFFF;
    if (v19 != ((*v10 >> 8) & 0xFFF) || v19 != ((*v9 >> 8) & 0xFFF))
      break;
    while (1)
    {
      v18 = v38 + 8;
      v38 = v18;
      if (v18 == v39)
        break;
      if (!v41)
LABEL_80:
        sub_1C485C2F0();
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v41 + 48))(v41))
        goto LABEL_22;
    }
  }
  if (v37 == v36)
  {
    v29 = 4;
    goto LABEL_73;
  }
  if (v37)
  {
    v29 = 5;
    v17 = v37;
LABEL_73:
    (*(void (**)(_QWORD *))(*v17 + 8 * v29))(v17);
  }
  if (v41 == v40)
  {
    v30 = 4;
    goto LABEL_78;
  }
  if (v41)
  {
    v30 = 5;
    v16 = v41;
LABEL_78:
    (*(void (**)(_QWORD *))(*v16 + 8 * v30))(v16);
  }
  sub_1C619047C(&v42);
  return 0;
}

uint64_t sub_1C51B8908(uint64_t result, uint64_t a2, const llvm::DILocation **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;

  v9 = result;
  if (a2 + 48 == (*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8) || a2 + 48 == (_QWORD)a3)
  {
    v42 = 0;
    v11 = (unsigned __int8 **)(result + 56);
    if (&v42 != (unsigned __int8 **)(result + 56))
    {
      if (*v11)
      {
        result = llvm::MetadataTracking::untrack(result + 56, *v11);
        v14 = v42;
        *v11 = v42;
        if (v14)
        {
          result = llvm::MetadataTracking::retrack((uint64_t)&v42, v14, v9 + 56);
          v42 = 0;
        }
      }
      else
      {
        *v11 = 0;
      }
    }
  }
  else
  {
    v12 = (unsigned __int8 **)(result + 56);
    result = (uint64_t)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(result + 56), a3[7], (const llvm::DILocation *)a3);
    v43 = (unsigned __int8 *)result;
    if (result)
      result = llvm::MetadataTracking::track((uint64_t)&v43, (unsigned __int8 *)result, 2);
    if (&v43 == v12)
    {
      if (v43)
        result = llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
    }
    else
    {
      if (*v12)
        result = llvm::MetadataTracking::untrack(v9 + 56, *v12);
      v13 = v43;
      *v12 = v43;
      if (v13)
      {
        result = llvm::MetadataTracking::retrack((uint64_t)&v43, v13, v9 + 56);
        v43 = 0;
      }
    }
  }
  v15 = v9;
  if ((*(_BYTE *)v9 & 4) == 0)
  {
    v15 = v9;
    if ((*(_WORD *)(v9 + 44) & 8) != 0)
    {
      v15 = v9;
      do
        v15 = *(_QWORD *)(v15 + 8);
      while ((*(_WORD *)(v15 + 44) & 8) != 0);
    }
  }
  v16 = *(unint64_t **)(v15 + 8);
  if (v16 != (unint64_t *)v9 && v16 != (unint64_t *)a3)
  {
    if (*(_QWORD *)(v9 + 24) != a2)
    {
      v40 = *(_QWORD *)(a2 + 40);
      v41 = (unint64_t *)v9;
      do
      {
        v41[3] = v40;
        v41 = (unint64_t *)v41[1];
      }
      while (v41 != v16);
    }
    result = (uint64_t)sub_1C4785D30((unint64_t *)a3, (unint64_t *)v9, v16);
  }
  if (a5)
  {
    v18 = a4 + 32 * a5;
    do
    {
      v19 = *(_QWORD *)a4;
      v20 = *(llvm::MachineFunction **)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 32);
      v21 = *((_QWORD *)v20 + 28);
      if (v21)
        *((_QWORD *)v20 + 28) = *(_QWORD *)v21;
      else
        v21 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v20, (const llvm::MachineInstr *)v19);
      v22 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v21 + 24) = v22;
      v23 = *(_QWORD *)(v22 + 32);
      v24 = *(unsigned int *)(v21 + 40);
      if ((_DWORD)v24)
      {
        v33 = *(_QWORD *)(v21 + 32);
        v34 = *(_QWORD *)(v23 + 40);
        v35 = 32 * v24;
        do
        {
          if (!*(_BYTE *)v33)
          {
            v36 = *(unsigned int *)(v33 + 4);
            if ((int)v36 >= 0)
              v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
            else
              v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
            v38 = *v37;
            if (*v37)
            {
              v39 = *(_QWORD *)(v38 + 16);
              *(_QWORD *)(v38 + 16) = v33;
              *(_QWORD *)(v33 + 16) = v39;
              if ((*(_BYTE *)(v33 + 3) & 1) != 0)
              {
                *(_QWORD *)(v33 + 24) = v38;
              }
              else
              {
                *(_QWORD *)(v33 + 24) = 0;
                v37 = (uint64_t *)(v39 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v33 + 16) = v33;
              *(_QWORD *)(v33 + 24) = 0;
            }
            *v37 = v33;
          }
          v33 += 32;
          v35 -= 32;
        }
        while (v35);
      }
      result = *(_QWORD *)(v23 + 728);
      if (result)
        result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 24))(result, v21);
      v25 = (unint64_t)*a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v21 = v25 | *(_QWORD *)v21 & 7;
      *(_QWORD *)(v21 + 8) = a3;
      *(_QWORD *)(v25 + 8) = v21;
      *a3 = (const llvm::DILocation *)((unint64_t)*a3 & 7 | v21);
      v26 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v26)
      {
        v27 = *(int **)(a4 + 8);
        v28 = &v27[v26];
        while (1)
        {
          v29 = *v27;
          v30 = *(_QWORD *)(v19 + 32);
          if (**(_WORD **)(v19 + 16) != 14)
          {
            v32 = v30 + 32;
            goto LABEL_41;
          }
          v31 = *(unsigned int *)(v19 + 40);
          if ((_DWORD)v31 != 2)
          {
            v32 = v30 + 32 * v31;
            v30 += 64;
LABEL_41:
            while (*(_BYTE *)v30 || *(_DWORD *)(v30 + 4) != v29)
            {
              v30 += 32;
              if (v30 == v32)
                goto LABEL_46;
            }
            result = sub_1C51B8454(v9, v19, v29);
            if (!(_DWORD)result)
              break;
          }
LABEL_46:
          if (++v27 == v28)
            goto LABEL_47;
        }
        result = sub_1C61FACB0(v19);
      }
LABEL_47:
      a4 += 32;
    }
    while (a4 != v18);
  }
  return result;
}

BOOL sub_1C51B8C5C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;

  v12 = a2;
  if (sub_1C4A91738(*(_QWORD *)(a1 + 264), a2))
    return 1;
  v14 = *(_QWORD *)(a1 + 264);
  if ((a2 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v12);
  v16 = *v15;
  if (!v16)
    goto LABEL_24;
  if ((*(_BYTE *)(v16 + 3) & 0x81) != 0)
  {
    do
    {
      v16 = *(_QWORD *)(v16 + 24);
      if (!v16)
        goto LABEL_24;
    }
    while ((*(_DWORD *)v16 & 0x81000000) != 0);
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (*(_QWORD *)(v17 + 24) == a3)
  {
    v19 = *(_QWORD *)(v17 + 32);
    v20 = v16 - v19;
LABEL_14:
    v21 = **(unsigned __int16 **)(v17 + 16);
    v22 = v21 == 69 || v21 == 0;
    if (v22 && *(_QWORD *)(v19 + 32 * ((v20 >> 5) + 1) + 16) == a4)
    {
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 24);
        if (!v16)
          break;
        if ((*(_DWORD *)v16 & 0x81000000) == 0)
        {
          v17 = *(_QWORD *)(v16 + 8);
          v19 = *(_QWORD *)(v17 + 32);
          v20 = v16 - v19;
          if (*(_QWORD *)(v17 + 24) == a3)
            goto LABEL_14;
          goto LABEL_11;
        }
      }
LABEL_24:
      result = 1;
LABEL_25:
      *a5 = 1;
      return result;
    }
  }
LABEL_11:
  if ((a2 & 0x80000000) != 0)
    v18 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v18 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v12);
  v23 = *v18;
  if (!*v18)
    return 1;
  while ((*(_DWORD *)v23 & 0x81000000) != 0)
  {
    v23 = *(_QWORD *)(v23 + 24);
    if (!v23)
      return 1;
  }
LABEL_33:
  v24 = *(_QWORD *)(v23 + 8);
  v25 = **(unsigned __int16 **)(v24 + 16);
  if (v25 == 69 || v25 == 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 32)
                    + 32 * (((unint64_t)(v23 - *(_QWORD *)(v24 + 32)) >> 5) + 1)
                    + 16);
  }
  else
  {
    v27 = *(_QWORD *)(v24 + 24);
    if (v27 == a4)
    {
      result = 0;
      a5 = a6;
      goto LABEL_25;
    }
  }
  v28 = *(_QWORD *)(a1 + 272);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v28);
  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v28 + 1320), a3, v27);
  if (result)
  {
    while (1)
    {
      v23 = *(_QWORD *)(v23 + 24);
      if (!v23)
        return 1;
      if ((*(_DWORD *)v23 & 0x81000000) == 0)
        goto LABEL_33;
    }
  }
  return result;
}

uint64_t sub_1C51B8E58(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int CycleDepth;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  char v52;
  uint64_t v53[3];
  char v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a5;
  v56 = a4;
  if (a4 == a5)
    return 0;
  if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 248), a5, a4))return 1;
  CycleDepth = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(a1 + 288), a4);
  if (CycleDepth > llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(a1 + 288), a5))return 1;
  v13 = *(_QWORD *)(a1 + 264);
  v14 = (uint64_t *)((a2 & 0x80000000) != 0
                  ? *(_QWORD *)(v13 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v13 + 272) + 8 * a2);
  v15 = *v14;
  if (!v15)
    return 1;
  if ((*(_BYTE *)(v15 + 3) & 0x81) != 0)
  {
    do
    {
      v15 = *(_QWORD *)(v15 + 24);
      if (!v15)
        return 1;
    }
    while ((*(_DWORD *)v15 & 0x81000000) != 0);
  }
  v16 = 0;
  v17 = *(_QWORD *)(v15 + 8);
LABEL_12:
  if (*(_QWORD *)(v17 + 24) == a5)
  {
    if (**(_WORD **)(v17 + 16))
      v18 = **(unsigned __int16 **)(v17 + 16) == 69;
    else
      v18 = 1;
    v19 = !v18;
    v16 |= v19;
  }
  while (1)
  {
    v15 = *(_QWORD *)(v15 + 24);
    if (!v15)
      break;
    if ((*(_DWORD *)v15 & 0x81000000) == 0 && *(_QWORD *)(v15 + 8) != v17)
    {
      v17 = *(_QWORD *)(v15 + 8);
      goto LABEL_12;
    }
  }
  if ((v16 & 1) == 0)
    return 1;
  v20 = sub_1C51B75E0(a1, a3, a5, &v54, a6);
  if (v20)
    return sub_1C51B8E58(a1, a2, a3, a5, v20, a6);
  v22 = *(_QWORD *)(a1 + 288);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = *(unsigned int *)(v22 + 32);
  if (!(_DWORD)v24)
    goto LABEL_33;
  LODWORD(v25) = (v24 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v26 = (uint64_t *)(v23 + 16 * v25);
  v27 = *v26;
  if (*v26 != a4)
  {
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(_QWORD *)(v23 + 16 * v25);
      if (v27 == a4)
      {
        v26 = (uint64_t *)(v23 + 16 * v25);
        goto LABEL_34;
      }
    }
LABEL_33:
    v26 = (uint64_t *)(v23 + 16 * v24);
  }
LABEL_34:
  if (v26 == (uint64_t *)(v23 + 16 * v24))
    return 0;
  v30 = v26[1];
  if (!v30)
    return 0;
  v53[0] = a1;
  v53[1] = (uint64_t)&v55;
  v53[2] = (uint64_t)&v56;
  v31 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v31)
  {
    v32 = *(int **)(a3 + 32);
    v33 = &v32[8 * v31];
    do
    {
      v34 = *v32;
      if (*v32)
        goto LABEL_39;
      v35 = v32[1];
      if (!(_DWORD)v35)
        goto LABEL_39;
      if (!(v35 >> 30))
      {
        if ((v34 & 0x1000000) != 0
          || !llvm::MachineRegisterInfo::isConstantPhysReg(*(_QWORD **)(a1 + 264), v35)
          && ((*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248), v32) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_39;
      }
      if ((v34 & 0x1000000) != 0)
      {
        if (!sub_1C51B8C5C(a1, v35, v55, v56, &v54, &v52))
          return 0;
        goto LABEL_39;
      }
      v36 = *(_QWORD *)(a1 + 264);
      if ((v35 & 0x80000000) != 0)
        v37 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
      else
        v37 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v35);
      v38 = *v37;
      if ((*(_BYTE *)(v38 + 3) & 1) == 0)
        v38 = *(_QWORD *)(v38 + 24);
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *(_QWORD *)(a1 + 288);
      v41 = *(_QWORD *)(v39 + 24);
      v42 = *(_QWORD *)(v40 + 16);
      v43 = *(unsigned int *)(v40 + 32);
      if ((_DWORD)v43)
      {
        LODWORD(v44) = ((v41 >> 4) ^ (v41 >> 9)) & (v43 - 1);
        v45 = (uint64_t *)(v42 + 16 * v44);
        v46 = *v45;
        if (*v45 == v41)
          goto LABEL_62;
        v47 = 1;
        while (v46 != -4096)
        {
          v48 = v44 + v47++;
          v44 = v48 & (v43 - 1);
          v46 = *(_QWORD *)(v42 + 16 * v44);
          if (v46 == v41)
          {
            v45 = (uint64_t *)(v42 + 16 * v44);
            goto LABEL_62;
          }
        }
      }
      v45 = (uint64_t *)(v42 + 16 * v43);
LABEL_62:
      if (v45 == (uint64_t *)(v42 + 16 * v43))
        v49 = 0;
      else
        v49 = v45[1];
      if (v49 == v30)
      {
        v50 = **(unsigned __int16 **)(v39 + 16);
        v51 = v50 == 69 || v50 == 0;
        if ((!v51 || *(_DWORD *)(v30 + 16) != 1 || **(_QWORD **)(v30 + 8) != v41)
          && sub_1C51BAAA0(v53, *(_QWORD *)(*(_QWORD *)(v36 + 24) + 16 * (v35 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
        {
          return 0;
        }
      }
LABEL_39:
      v32 += 8;
    }
    while (v32 != v33);
  }
  return 1;
}

uint64_t *sub_1C51B9208(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int CycleDepth;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v110;

  if (a4 < 2)
    return result;
  v7 = a2;
  v8 = result;
  if (a4 == 2)
  {
    v9 = *(a2 - 1);
    v10 = *result;
    v11 = *a3;
    v12 = *(_QWORD *)(*a3 + 296);
    if (!v12)
      goto LABEL_115;
    v13 = *(_QWORD *)(v12 + 248);
    if (!v13)
      goto LABEL_115;
    v14 = *(_DWORD *)(v13 + 176);
    if (!v14)
      goto LABEL_115;
    v15 = *(_QWORD *)(v13 + 160);
    v16 = v14 - 1;
    v17 = v16 & ((v9 >> 4) ^ (v9 >> 9));
    v18 = *(_QWORD *)(v15 + 16 * v17);
    if (v18 == v9)
    {
LABEL_8:
      v19 = *(unsigned int *)(v15 + 16 * v17 + 8);
      if (v19 != 0xFFFFFFFFLL)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v19 + 16);
        goto LABEL_10;
      }
    }
    else
    {
      v102 = 1;
      while (v18 != -4096)
      {
        v103 = v17 + v102++;
        v17 = v103 & v16;
        v18 = *(_QWORD *)(v15 + 16 * v17);
        if (v18 == v9)
          goto LABEL_8;
      }
    }
    v20 = 0;
LABEL_10:
    v21 = v16 & ((v10 >> 4) ^ (v10 >> 9));
    v22 = *(_QWORD *)(v15 + 16 * v21);
    if (v22 == v10)
    {
LABEL_11:
      v23 = *(unsigned int *)(v15 + 16 * v21 + 8);
      if (v23 != 0xFFFFFFFFLL)
      {
        if (v20)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v23 + 16);
          if (v24)
          {
            if (v20 >= v24)
              return result;
            goto LABEL_117;
          }
        }
      }
    }
    else
    {
      v104 = 1;
      while (v22 != -4096)
      {
        v105 = v21 + v104++;
        v21 = v105 & v16;
        v22 = *(_QWORD *)(v15 + 16 * v21);
        if (v22 == v10)
          goto LABEL_11;
      }
    }
LABEL_115:
    CycleDepth = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v11 + 288), v9);
    result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v11 + 288), v10);
    if (CycleDepth >= result)
      return result;
    v10 = *v8;
    v9 = *(v7 - 1);
LABEL_117:
    *v8 = v9;
    *(v7 - 1) = v10;
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    v74 = a5;
    v75 = a4 >> 1;
    v76 = &result[a4 >> 1];
    v77 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1C51B9208(result, v76, a3, v77, a5, a6);
      sub_1C51B9208(&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v74, a6);
      return sub_1C51B9FFC(v8, &v8[a4 >> 1], v7, a3, a4 >> 1, a4 - (a4 >> 1), v74, a6);
    }
    sub_1C51B9930(result, v76, a3, v77, a5);
    v78 = &v74[v75];
    result = sub_1C51B9930(&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v78);
    v79 = v78;
    v80 = &v74[a4];
    while (1)
    {
      if (v79 == v80)
      {
        if (v74 != v78)
        {
          v107 = 0;
          do
          {
            v8[v107] = v74[v107];
            ++v107;
          }
          while (&v74[v107] != v78);
        }
        return result;
      }
      v81 = *v79;
      v82 = *v74;
      v83 = *a3;
      v84 = *(_QWORD *)(*a3 + 296);
      if (!v84)
        goto LABEL_99;
      v85 = *(_QWORD *)(v84 + 248);
      if (!v85)
        goto LABEL_99;
      v86 = *(_DWORD *)(v85 + 176);
      if (!v86)
        goto LABEL_99;
      v87 = *(_QWORD *)(v85 + 160);
      v88 = v86 - 1;
      v89 = v88 & ((v81 >> 4) ^ (v81 >> 9));
      v90 = *(_QWORD *)(v87 + 16 * v89);
      if (v90 == v81)
      {
LABEL_83:
        v91 = *(unsigned int *)(v87 + 16 * v89 + 8);
        if (v91 != 0xFFFFFFFFLL)
        {
          v92 = *(_QWORD *)(*(_QWORD *)(v85 + 8) + 24 * v91 + 16);
          goto LABEL_85;
        }
      }
      else
      {
        v97 = 1;
        while (v90 != -4096)
        {
          v98 = v89 + v97++;
          v89 = v98 & v88;
          v90 = *(_QWORD *)(v87 + 16 * v89);
          if (v90 == v81)
            goto LABEL_83;
        }
      }
      v92 = 0;
LABEL_85:
      v93 = v88 & ((v82 >> 4) ^ (v82 >> 9));
      v94 = *(_QWORD *)(v87 + 16 * v93);
      if (v94 == v82)
      {
LABEL_86:
        v95 = *(unsigned int *)(v87 + 16 * v93 + 8);
        if (v95 != 0xFFFFFFFFLL)
        {
          if (v92)
          {
            v96 = *(_QWORD *)(*(_QWORD *)(v85 + 8) + 24 * v95 + 16);
            if (v96)
            {
              if (v92 >= v96)
                goto LABEL_103;
              goto LABEL_101;
            }
          }
        }
      }
      else
      {
        v99 = 1;
        while (v94 != -4096)
        {
          v100 = v93 + v99++;
          v93 = v100 & v88;
          v94 = *(_QWORD *)(v87 + 16 * v93);
          if (v94 == v82)
            goto LABEL_86;
        }
      }
LABEL_99:
      v101 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v83 + 288), v81);
      result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v83 + 288), v82);
      if (v101 >= result)
      {
        v82 = *v74;
LABEL_103:
        *v8 = v82;
        ++v74;
        goto LABEL_104;
      }
      v81 = *v79;
LABEL_101:
      *v8 = v81;
      ++v79;
LABEL_104:
      ++v8;
      if (v74 == v78)
      {
        if (v79 != v80)
        {
          v108 = 0;
          do
          {
            v8[v108] = v79[v108];
            ++v108;
          }
          while (&v79[v108] != v80);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v26 = result + 1;
  if (result + 1 == a2)
    return result;
  v27 = result;
  do
  {
    v28 = v27;
    v110 = v26;
    v30 = *v27;
    v29 = v27[1];
    v31 = *a3;
    v32 = *(_QWORD *)(*a3 + 296);
    if (!v32)
      goto LABEL_40;
    v33 = *(_QWORD *)(v32 + 248);
    if (!v33)
      goto LABEL_40;
    v34 = *(_DWORD *)(v33 + 176);
    if (!v34)
      goto LABEL_40;
    v35 = *(_QWORD *)(v33 + 160);
    v36 = v34 - 1;
    v37 = v36 & ((v29 >> 4) ^ (v29 >> 9));
    v38 = *(_QWORD *)(v35 + 16 * v37);
    if (v38 == v29)
    {
LABEL_24:
      v39 = *(unsigned int *)(v35 + 16 * v37 + 8);
      if (v39 != 0xFFFFFFFFLL)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 24 * v39 + 16);
        goto LABEL_26;
      }
    }
    else
    {
      v45 = 1;
      while (v38 != -4096)
      {
        v46 = v37 + v45++;
        v37 = v46 & v36;
        v38 = *(_QWORD *)(v35 + 16 * v37);
        if (v38 == v29)
          goto LABEL_24;
      }
    }
    v40 = 0;
LABEL_26:
    v41 = v36 & ((v30 >> 4) ^ (v30 >> 9));
    v42 = *(_QWORD *)(v35 + 16 * v41);
    if (v42 == v30)
    {
LABEL_27:
      v43 = *(unsigned int *)(v35 + 16 * v41 + 8);
      if (v43 != 0xFFFFFFFFLL)
      {
        if (v40)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 24 * v43 + 16);
          if (v44)
          {
            v27 = v110;
            if (v40 >= v44)
              goto LABEL_72;
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      v47 = 1;
      while (v42 != -4096)
      {
        v48 = v41 + v47++;
        v41 = v48 & v36;
        v42 = *(_QWORD *)(v35 + 16 * v41);
        if (v42 == v30)
          goto LABEL_27;
      }
    }
LABEL_40:
    v49 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v31 + 288), v29);
    result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v31 + 288), v30);
    v27 = v110;
    if (v49 >= result)
      goto LABEL_72;
    v29 = *v110;
    v30 = *v28;
LABEL_42:
    v28[1] = v30;
    v50 = v8;
    if (v28 == v8)
      goto LABEL_71;
    v51 = v28;
    while (1)
    {
      v53 = *--v51;
      v52 = v53;
      v54 = *a3;
      v55 = *(_QWORD *)(*a3 + 296);
      if (!v55)
        break;
      v56 = *(_QWORD *)(v55 + 248);
      if (!v56)
        break;
      v57 = *(_DWORD *)(v56 + 176);
      if (!v57)
        break;
      v58 = *(_QWORD *)(v56 + 160);
      v59 = v57 - 1;
      v60 = v59 & ((v29 >> 4) ^ (v29 >> 9));
      v61 = *(_QWORD *)(v58 + 16 * v60);
      if (v61 == v29)
      {
LABEL_48:
        v62 = *(unsigned int *)(v58 + 16 * v60 + 8);
        if (v62 != 0xFFFFFFFFLL)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(v56 + 8) + 24 * v62 + 16);
          goto LABEL_50;
        }
      }
      else
      {
        v68 = 1;
        while (v61 != -4096)
        {
          v69 = v60 + v68++;
          v60 = v69 & v59;
          v61 = *(_QWORD *)(v58 + 16 * v60);
          if (v61 == v29)
            goto LABEL_48;
        }
      }
      v63 = 0;
LABEL_50:
      v64 = v59 & ((v52 >> 4) ^ (v52 >> 9));
      v65 = *(_QWORD *)(v58 + 16 * v64);
      if (v65 != v52)
      {
        v70 = 1;
        while (v65 != -4096)
        {
          v71 = v64 + v70++;
          v64 = v71 & v59;
          v65 = *(_QWORD *)(v58 + 16 * v64);
          if (v65 == v52)
            goto LABEL_51;
        }
        break;
      }
LABEL_51:
      v66 = *(unsigned int *)(v58 + 16 * v64 + 8);
      if (v66 == 0xFFFFFFFFLL)
        break;
      if (!v63)
        break;
      v67 = *(_QWORD *)(*(_QWORD *)(v56 + 8) + 24 * v66 + 16);
      if (!v67)
        break;
      if (v63 >= v67)
        goto LABEL_69;
LABEL_66:
      *v28 = v52;
      v28 = v51;
      if (v51 == v8)
      {
        v50 = v8;
        goto LABEL_70;
      }
    }
    v72 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v54 + 288), v29);
    result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v54 + 288), v52);
    if (v72 < result)
    {
      v52 = *v51;
      goto LABEL_66;
    }
LABEL_69:
    v50 = v28;
LABEL_70:
    v7 = a2;
    v27 = v110;
LABEL_71:
    *v50 = v29;
LABEL_72:
    v26 = v27 + 1;
  }
  while (v27 + 1 != v7);
  return result;
}

uint64_t *sub_1C51B9930(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int CycleDepth;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
LABEL_122:
    *v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    v11 = a2 - 1;
    v10 = *(a2 - 1);
    v12 = *result;
    v13 = *a3;
    v14 = *(_QWORD *)(*a3 + 296);
    if (!v14)
      goto LABEL_119;
    v15 = *(_QWORD *)(v14 + 248);
    if (!v15)
      goto LABEL_119;
    v16 = *(_DWORD *)(v15 + 176);
    if (!v16)
      goto LABEL_119;
    v17 = *(_QWORD *)(v15 + 160);
    v18 = v16 - 1;
    v19 = v18 & ((v10 >> 4) ^ (v10 >> 9));
    v20 = *(_QWORD *)(v17 + 16 * v19);
    if (v20 == v10)
    {
LABEL_8:
      v21 = *(unsigned int *)(v17 + 16 * v19 + 8);
      if (v21 != 0xFFFFFFFFLL)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24 * v21 + 16);
        goto LABEL_10;
      }
    }
    else
    {
      v103 = 1;
      while (v20 != -4096)
      {
        v104 = v19 + v103++;
        v19 = v104 & v18;
        v20 = *(_QWORD *)(v17 + 16 * v19);
        if (v20 == v10)
          goto LABEL_8;
      }
    }
    v22 = 0;
LABEL_10:
    v23 = v18 & ((v12 >> 4) ^ (v12 >> 9));
    v24 = *(_QWORD *)(v17 + 16 * v23);
    if (v24 == v12)
    {
LABEL_11:
      v25 = *(unsigned int *)(v17 + 16 * v23 + 8);
      if (v25 != 0xFFFFFFFFLL)
      {
        if (v22)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24 * v25 + 16);
          if (v26)
          {
            if (v22 >= v26)
            {
LABEL_15:
              v27 = v7;
LABEL_121:
              *v5++ = *v27;
              v7 = v11;
              goto LABEL_122;
            }
LABEL_120:
            v27 = v11;
            v11 = v7;
            goto LABEL_121;
          }
        }
      }
    }
    else
    {
      v105 = 1;
      while (v24 != -4096)
      {
        v106 = v23 + v105++;
        v23 = v106 & v18;
        v24 = *(_QWORD *)(v17 + 16 * v23);
        if (v24 == v12)
          goto LABEL_11;
      }
    }
LABEL_119:
    CycleDepth = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v13 + 288), v10);
    result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v13 + 288), v12);
    if (CycleDepth >= result)
      goto LABEL_15;
    goto LABEL_120;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (result == a2)
      return result;
    v28 = result + 1;
    *a5 = *result;
    if (result + 1 == a2)
      return result;
    v29 = a5;
    while (1)
    {
      v30 = v29;
      v32 = *v29++;
      v31 = v32;
      v33 = *v28;
      v34 = *a3;
      v35 = *(_QWORD *)(*a3 + 296);
      if (!v35)
        goto LABEL_40;
      v36 = *(_QWORD *)(v35 + 248);
      if (!v36)
        goto LABEL_40;
      v37 = *(_DWORD *)(v36 + 176);
      if (!v37)
        goto LABEL_40;
      v38 = *(_QWORD *)(v36 + 160);
      v39 = v37 - 1;
      v40 = v39 & ((v33 >> 4) ^ (v33 >> 9));
      v41 = *(_QWORD *)(v38 + 16 * v40);
      if (v41 == v33)
      {
LABEL_24:
        v42 = *(unsigned int *)(v38 + 16 * v40 + 8);
        if (v42 != 0xFFFFFFFFLL)
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 24 * v42 + 16);
          goto LABEL_26;
        }
      }
      else
      {
        v49 = 1;
        while (v41 != -4096)
        {
          v50 = v40 + v49++;
          v40 = v50 & v39;
          v41 = *(_QWORD *)(v38 + 16 * v40);
          if (v41 == v33)
            goto LABEL_24;
        }
      }
      v43 = 0;
LABEL_26:
      v44 = v39 & ((v31 >> 4) ^ (v31 >> 9));
      v45 = *(_QWORD *)(v38 + 16 * v44);
      if (v45 != v31)
      {
        v51 = 1;
        while (v45 != -4096)
        {
          v52 = v44 + v51++;
          v44 = v52 & v39;
          v45 = *(_QWORD *)(v38 + 16 * v44);
          if (v45 == v31)
            goto LABEL_27;
        }
LABEL_40:
        v53 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v34 + 288), v33);
        result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v34 + 288), v31);
        v48 = v29;
        if (v53 >= result)
          goto LABEL_70;
        v31 = *v30;
LABEL_42:
        v30[1] = v31;
        v48 = v5;
        if (v30 == v5)
          goto LABEL_70;
        v54 = v30;
        while (2)
        {
          v55 = *v28;
          v57 = *--v54;
          v56 = v57;
          v58 = *a3;
          v59 = *(_QWORD *)(*a3 + 296);
          if (v59)
          {
            v60 = *(_QWORD *)(v59 + 248);
            if (v60)
            {
              v61 = *(_DWORD *)(v60 + 176);
              if (v61)
              {
                v62 = *(_QWORD *)(v60 + 160);
                v63 = v61 - 1;
                v64 = v63 & ((v55 >> 4) ^ (v55 >> 9));
                v65 = *(_QWORD *)(v62 + 16 * v64);
                if (v65 == v55)
                {
LABEL_48:
                  v66 = *(unsigned int *)(v62 + 16 * v64 + 8);
                  if (v66 != 0xFFFFFFFFLL)
                  {
                    v67 = *(_QWORD *)(*(_QWORD *)(v60 + 8) + 24 * v66 + 16);
                    goto LABEL_50;
                  }
                }
                else
                {
                  v72 = 1;
                  while (v65 != -4096)
                  {
                    v73 = v64 + v72++;
                    v64 = v73 & v63;
                    v65 = *(_QWORD *)(v62 + 16 * v64);
                    if (v65 == v55)
                      goto LABEL_48;
                  }
                }
                v67 = 0;
LABEL_50:
                v68 = v63 & ((v56 >> 4) ^ (v56 >> 9));
                v69 = *(_QWORD *)(v62 + 16 * v68);
                if (v69 == v56)
                {
LABEL_51:
                  v70 = *(unsigned int *)(v62 + 16 * v68 + 8);
                  if (v70 != 0xFFFFFFFFLL)
                  {
                    if (v67)
                    {
                      v71 = *(_QWORD *)(*(_QWORD *)(v60 + 8) + 24 * v70 + 16);
                      if (v71)
                      {
                        if (v67 >= v71)
                          goto LABEL_69;
LABEL_66:
                        *v30 = v56;
                        v30 = v54;
                        if (v54 == v5)
                        {
                          v48 = v5;
                          goto LABEL_70;
                        }
                        continue;
                      }
                    }
                  }
                }
                else
                {
                  v74 = 1;
                  while (v69 != -4096)
                  {
                    v75 = v68 + v74++;
                    v68 = v75 & v63;
                    v69 = *(_QWORD *)(v62 + 16 * v68);
                    if (v69 == v56)
                      goto LABEL_51;
                  }
                }
              }
            }
          }
          break;
        }
        v76 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v58 + 288), v55);
        result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v58 + 288), v56);
        if (v76 >= result)
        {
LABEL_69:
          v48 = v30;
          goto LABEL_70;
        }
        v56 = *v54;
        goto LABEL_66;
      }
LABEL_27:
      v46 = *(unsigned int *)(v38 + 16 * v44 + 8);
      if (v46 == 0xFFFFFFFFLL)
        goto LABEL_40;
      if (!v43)
        goto LABEL_40;
      v47 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 24 * v46 + 16);
      if (!v47)
        goto LABEL_40;
      v48 = v29;
      if (v43 < v47)
        goto LABEL_42;
LABEL_70:
      v77 = *v28++;
      *v48 = v77;
      if (v28 == a2)
        return result;
    }
  }
  v78 = &result[a4 >> 1];
  sub_1C51B9208(result, v78, a3, a4 >> 1, a5, a4 >> 1);
  result = (uint64_t *)sub_1C51B9208(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
  v79 = &v7[a4 >> 1];
  while (v79 != a2)
  {
    v80 = *v79;
    v81 = *v7;
    v82 = *a3;
    v83 = *(_QWORD *)(*a3 + 296);
    if (!v83)
      goto LABEL_95;
    v84 = *(_QWORD *)(v83 + 248);
    if (!v84)
      goto LABEL_95;
    v85 = *(_DWORD *)(v84 + 176);
    if (!v85)
      goto LABEL_95;
    v86 = *(_QWORD *)(v84 + 160);
    v87 = v85 - 1;
    v88 = v87 & ((v80 >> 4) ^ (v80 >> 9));
    v89 = *(_QWORD *)(v86 + 16 * v88);
    if (v89 == v80)
    {
LABEL_79:
      v90 = *(unsigned int *)(v86 + 16 * v88 + 8);
      if (v90 != 0xFFFFFFFFLL)
      {
        v91 = *(_QWORD *)(*(_QWORD *)(v84 + 8) + 24 * v90 + 16);
        goto LABEL_81;
      }
    }
    else
    {
      v96 = 1;
      while (v89 != -4096)
      {
        v97 = v88 + v96++;
        v88 = v97 & v87;
        v89 = *(_QWORD *)(v86 + 16 * v88);
        if (v89 == v80)
          goto LABEL_79;
      }
    }
    v91 = 0;
LABEL_81:
    v92 = v87 & ((v81 >> 4) ^ (v81 >> 9));
    v93 = *(_QWORD *)(v86 + 16 * v92);
    if (v93 == v81)
    {
LABEL_82:
      v94 = *(unsigned int *)(v86 + 16 * v92 + 8);
      if (v94 != 0xFFFFFFFFLL)
      {
        if (v91)
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v84 + 8) + 24 * v94 + 16);
          if (v95)
          {
            if (v91 >= v95)
              goto LABEL_99;
            goto LABEL_97;
          }
        }
      }
    }
    else
    {
      v98 = 1;
      while (v93 != -4096)
      {
        v99 = v92 + v98++;
        v92 = v99 & v87;
        v93 = *(_QWORD *)(v86 + 16 * v92);
        if (v93 == v81)
          goto LABEL_82;
      }
    }
LABEL_95:
    v100 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v82 + 288), v80);
    result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v82 + 288), v81);
    if (v100 >= result)
    {
      v81 = *v7;
LABEL_99:
      *v5 = v81;
      ++v7;
      goto LABEL_100;
    }
    v80 = *v79;
LABEL_97:
    *v5 = v80;
    ++v79;
LABEL_100:
    ++v5;
    if (v7 == v78)
    {
      if (v79 != a2)
      {
        v102 = 0;
        do
        {
          v5[v102] = v79[v102];
          ++v102;
        }
        while (&v79[v102] != a2);
      }
      return result;
    }
  }
  if (v7 != v78)
  {
    v101 = 0;
    do
    {
      v5[v101] = v7[v101];
      ++v101;
    }
    while (&v7[v101] != v78);
  }
  return result;
}

uint64_t *sub_1C51B9FFC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int CycleDepth;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  BOOL v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;

  if (!a6)
    return result;
  v10 = a6;
  v13 = result;
  while (a5 > a8 && v10 > a8)
  {
    v157 = a2;
    if (!a5)
      return result;
    while (1)
    {
      v14 = *a2;
      v15 = *v13;
      v16 = *a4;
      v17 = *(_QWORD *)(*a4 + 296);
      if (!v17)
        goto LABEL_26;
      v18 = *(_QWORD *)(v17 + 248);
      if (!v18)
        goto LABEL_26;
      v19 = *(_DWORD *)(v18 + 176);
      if (!v19)
        goto LABEL_26;
      v20 = *(_QWORD *)(v18 + 160);
      v21 = v19 - 1;
      v22 = v21 & ((v14 >> 4) ^ (v14 >> 9));
      v23 = *(_QWORD *)(v20 + 16 * v22);
      if (v23 == v14)
      {
LABEL_10:
        v24 = *(unsigned int *)(v20 + 16 * v22 + 8);
        if (v24 != 0xFFFFFFFFLL)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 24 * v24 + 16);
          goto LABEL_12;
        }
      }
      else
      {
        v30 = 1;
        while (v23 != -4096)
        {
          v31 = v22 + v30++;
          v22 = v31 & v21;
          v23 = *(_QWORD *)(v20 + 16 * v22);
          if (v23 == v14)
            goto LABEL_10;
        }
      }
      v25 = 0;
LABEL_12:
      v26 = v21 & ((v15 >> 4) ^ (v15 >> 9));
      v27 = *(_QWORD *)(v20 + 16 * v26);
      if (v27 == v15)
      {
LABEL_13:
        v28 = *(unsigned int *)(v20 + 16 * v26 + 8);
        if (v28 != 0xFFFFFFFFLL)
        {
          if (v25)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 24 * v28 + 16);
            if (v29)
            {
              if (v25 < v29)
                break;
              goto LABEL_28;
            }
          }
        }
      }
      else
      {
        v32 = 1;
        while (v27 != -4096)
        {
          v33 = v26 + v32++;
          v26 = v33 & v21;
          v27 = *(_QWORD *)(v20 + 16 * v26);
          if (v27 == v15)
            goto LABEL_13;
        }
      }
LABEL_26:
      CycleDepth = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v16 + 288), v14);
      result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v16 + 288), v15);
      v56 = CycleDepth >= result;
      a2 = v157;
      if (!v56)
        break;
LABEL_28:
      ++v13;
      if (!--a5)
        return result;
    }
    v153 = v10;
    if (a5 < v10)
    {
      if (v10 >= 0)
        v35 = v10;
      else
        v35 = v10 + 1;
      v36 = v35 >> 1;
      v37 = a2;
      a2 += v35 >> 1;
      v38 = v37 - v13;
      if (v37 != v13)
      {
        v155 = v35 >> 1;
        v151 = a8;
        v152 = a7;
        v37 = v13;
        while (1)
        {
          v39 = &v37[v38 >> 1];
          v40 = *a2;
          v41 = *v39;
          v42 = *a4;
          v43 = *(_QWORD *)(*a4 + 296);
          if (!v43)
            goto LABEL_56;
          v44 = *(_QWORD *)(v43 + 248);
          if (!v44)
            goto LABEL_56;
          v45 = *(_DWORD *)(v44 + 176);
          if (!v45)
            goto LABEL_56;
          v46 = *(_QWORD *)(v44 + 160);
          v47 = v45 - 1;
          v48 = v47 & ((v40 >> 4) ^ (v40 >> 9));
          v49 = *(_QWORD *)(v46 + 16 * v48);
          if (v49 == v40)
          {
LABEL_41:
            v50 = *(unsigned int *)(v46 + 16 * v48 + 8);
            if (v50 != 0xFFFFFFFFLL)
            {
              v51 = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 24 * v50 + 16);
              goto LABEL_43;
            }
          }
          else
          {
            v57 = 1;
            while (v49 != -4096)
            {
              v58 = v48 + v57++;
              v48 = v58 & v47;
              v49 = *(_QWORD *)(v46 + 16 * v48);
              if (v49 == v40)
                goto LABEL_41;
            }
          }
          v51 = 0;
LABEL_43:
          v52 = v47 & ((v41 >> 4) ^ (v41 >> 9));
          v53 = *(_QWORD *)(v46 + 16 * v52);
          if (v53 != v41)
          {
            v59 = 1;
            while (v53 != -4096)
            {
              v60 = v52 + v59++;
              v52 = v60 & v47;
              v53 = *(_QWORD *)(v46 + 16 * v52);
              if (v53 == v41)
                goto LABEL_44;
            }
LABEL_56:
            v61 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v42 + 288), v40);
            v56 = v61 >= llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v42 + 288), v41);
            goto LABEL_57;
          }
LABEL_44:
          v54 = *(unsigned int *)(v46 + 16 * v52 + 8);
          if (v54 == 0xFFFFFFFFLL)
            goto LABEL_56;
          if (!v51)
            goto LABEL_56;
          v55 = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 24 * v54 + 16);
          if (!v55)
            goto LABEL_56;
          v56 = v51 >= v55;
LABEL_57:
          if (!v56)
          {
            v38 >>= 1;
          }
          else
          {
            v37 = v39 + 1;
            v38 += ~(v38 >> 1);
          }
          if (!v38)
          {
            v38 = v37 - v13;
            v36 = v155;
            v90 = v157;
            goto LABEL_104;
          }
        }
      }
      v13 = v37;
LABEL_111:
      v92 = a2;
      goto LABEL_118;
    }
    if (a5 == 1)
    {
      v148 = *v13;
      *v13 = *a2;
      *a2 = v148;
      return result;
    }
    v151 = a8;
    v152 = a7;
    v150 = a5;
    if (a5 >= 0)
      v63 = a5;
    else
      v63 = a5 + 1;
    v38 = v63 >> 1;
    v37 = &v13[v63 >> 1];
    v64 = a2;
    a2 = a3;
    if (a3 != v64)
    {
      v65 = a3 - v64;
      a2 = v157;
      v156 = *a4;
      do
      {
        v66 = &a2[v65 >> 1];
        v67 = *v66;
        v68 = *v37;
        v69 = *(_QWORD *)(v156 + 296);
        if (!v69)
          goto LABEL_91;
        v70 = *(_QWORD *)(v69 + 248);
        if (!v70)
          goto LABEL_91;
        v71 = *(_DWORD *)(v70 + 176);
        if (!v71)
          goto LABEL_91;
        v72 = *(_QWORD *)(v70 + 160);
        v73 = v71 - 1;
        v74 = v73 & ((v67 >> 4) ^ (v67 >> 9));
        v75 = *(_QWORD *)(v72 + 16 * v74);
        if (v75 == v67)
        {
LABEL_76:
          v76 = *(unsigned int *)(v72 + 16 * v74 + 8);
          if (v76 != 0xFFFFFFFFLL)
          {
            v77 = *(_QWORD *)(*(_QWORD *)(v70 + 8) + 24 * v76 + 16);
            goto LABEL_78;
          }
        }
        else
        {
          v83 = 1;
          while (v75 != -4096)
          {
            v84 = v74 + v83++;
            v74 = v84 & v73;
            v75 = *(_QWORD *)(v72 + 16 * v74);
            if (v75 == v67)
              goto LABEL_76;
          }
        }
        v77 = 0;
LABEL_78:
        v78 = v73 & ((v68 >> 4) ^ (v68 >> 9));
        v79 = *(_QWORD *)(v72 + 16 * v78);
        if (v79 != v68)
        {
          v85 = 1;
          while (v79 != -4096)
          {
            v86 = v78 + v85++;
            v78 = v86 & v73;
            v79 = *(_QWORD *)(v72 + 16 * v78);
            if (v79 == v68)
              goto LABEL_79;
          }
LABEL_91:
          v87 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v156 + 288), v67);
          v88 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v156 + 288), v68);
          v66 = &a2[v65 >> 1];
          v82 = v87 >= v88;
          goto LABEL_92;
        }
LABEL_79:
        v80 = *(unsigned int *)(v72 + 16 * v78 + 8);
        if (v80 == 0xFFFFFFFFLL)
          goto LABEL_91;
        if (!v77)
          goto LABEL_91;
        v81 = *(_QWORD *)(*(_QWORD *)(v70 + 8) + 24 * v80 + 16);
        if (!v81)
          goto LABEL_91;
        v82 = v77 >= v81;
LABEL_92:
        v89 = !v82;
        if (v89)
          v65 += ~(v65 >> 1);
        else
          v65 >>= 1;
        if (v89)
          a2 = v66 + 1;
      }
      while (v65);
    }
    v90 = v157;
    v36 = a2 - v157;
    a5 = v150;
LABEL_104:
    a8 = v151;
    a7 = v152;
    if (v37 == v90)
    {
      v37 = v90;
      goto LABEL_111;
    }
    if (v90 == a2)
    {
      a2 = v90;
      v92 = v37;
    }
    else if (v37 + 1 == v90)
    {
      v93 = *v37;
      v94 = (char *)a2 - (char *)v90;
      v95 = v36;
      memmove(v37, v90, (char *)a2 - (char *)v90);
      v36 = v95;
      v92 = (uint64_t *)((char *)v37 + v94);
      *(uint64_t *)((char *)v37 + v94) = v93;
      a7 = v152;
    }
    else
    {
      v91 = v36;
      if (v90 + 1 == a2)
      {
        v96 = *(a2 - 1);
        v92 = v37 + 1;
        if (a2 - 1 != v37)
          memmove(v37 + 1, v37, (char *)(a2 - 1) - (char *)v37);
        *v37 = v96;
      }
      else
      {
        v92 = sub_1C4E85DF0(v37, v90, a2);
      }
      v36 = v91;
    }
LABEL_118:
    a5 -= v38;
    v10 = v153 - v36;
    if ((uint64_t)(v36 + v38) >= v153 - v36 + a5)
    {
      v10 = v36;
      result = (uint64_t *)sub_1C51B9FFC(v92, a2, a3, a4, a5, v153 - v36, a7, a8);
      a2 = v37;
      a5 = v38;
      a3 = v92;
    }
    else
    {
      result = (uint64_t *)sub_1C51B9FFC(v13, v37, v92, a4, v38, v36, a7, a8);
      v13 = v92;
    }
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v13 == a2)
      return result;
    v124 = 0;
    do
    {
      a7[v124] = v13[v124];
      ++v124;
    }
    while (&v13[v124] != a2);
    if (!(v124 * 8))
      return result;
    v125 = a7;
    while (1)
    {
      if (a2 == a3)
        return (uint64_t *)memmove(v13, v125, (char *)a7 - (char *)v125 + v124 * 8);
      v126 = a2;
      v127 = *a2;
      v128 = *v125;
      v129 = *a4;
      v130 = *(_QWORD *)(*a4 + 296);
      if (!v130)
        goto LABEL_182;
      v131 = *(_QWORD *)(v130 + 248);
      if (!v131)
        goto LABEL_182;
      v132 = *(_DWORD *)(v131 + 176);
      if (!v132)
        goto LABEL_182;
      v133 = *(_QWORD *)(v131 + 160);
      v134 = v132 - 1;
      v135 = v134 & ((v127 >> 4) ^ (v127 >> 9));
      v136 = *(_QWORD *)(v133 + 16 * v135);
      if (v136 == v127)
      {
LABEL_166:
        v137 = *(unsigned int *)(v133 + 16 * v135 + 8);
        if (v137 != 0xFFFFFFFFLL)
        {
          v138 = *(_QWORD *)(*(_QWORD *)(v131 + 8) + 24 * v137 + 16);
          goto LABEL_168;
        }
      }
      else
      {
        v143 = 1;
        while (v136 != -4096)
        {
          v144 = v135 + v143++;
          v135 = v144 & v134;
          v136 = *(_QWORD *)(v133 + 16 * v135);
          if (v136 == v127)
            goto LABEL_166;
        }
      }
      v138 = 0;
LABEL_168:
      v139 = v134 & ((v128 >> 4) ^ (v128 >> 9));
      v140 = *(_QWORD *)(v133 + 16 * v139);
      if (v140 == v128)
      {
LABEL_169:
        v141 = *(unsigned int *)(v133 + 16 * v139 + 8);
        if (v141 != 0xFFFFFFFFLL)
        {
          if (v138)
          {
            v142 = *(_QWORD *)(*(_QWORD *)(v131 + 8) + 24 * v141 + 16);
            if (v142)
            {
              if (v138 >= v142)
                goto LABEL_186;
              goto LABEL_184;
            }
          }
        }
      }
      else
      {
        v145 = 1;
        while (v140 != -4096)
        {
          v146 = v139 + v145++;
          v139 = v146 & v134;
          v140 = *(_QWORD *)(v133 + 16 * v139);
          if (v140 == v128)
            goto LABEL_169;
        }
      }
LABEL_182:
      v147 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v129 + 288), v127);
      result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v129 + 288), v128);
      if (v147 >= result)
      {
        v128 = *v125;
LABEL_186:
        *v13 = v128;
        ++v125;
        a2 = v126;
        goto LABEL_187;
      }
      v127 = *v126;
LABEL_184:
      *v13 = v127;
      a2 = v126 + 1;
LABEL_187:
      ++v13;
      if (&a7[v124] == v125)
        return result;
    }
  }
  if (a2 == a3)
    return result;
  v97 = 0;
  do
  {
    a7[v97] = a2[v97];
    ++v97;
  }
  while (&a2[v97] != a3);
  if (!(v97 * 8))
    return result;
  v98 = &a7[v97];
  while (2)
  {
    if (a2 != v13)
    {
      v99 = a7;
      v101 = a2 - 1;
      v100 = *(a2 - 1);
      v102 = *(v98 - 1);
      v103 = *a4;
      v104 = *(_QWORD *)(*a4 + 296);
      if (v104)
      {
        v105 = *(_QWORD *)(v104 + 248);
        if (v105)
        {
          v106 = *(_DWORD *)(v105 + 176);
          if (v106)
          {
            v107 = *(_QWORD *)(v105 + 160);
            v108 = v106 - 1;
            v109 = v108 & ((v102 >> 4) ^ (v102 >> 9));
            v110 = *(_QWORD *)(v107 + 16 * v109);
            if (v110 == v102)
            {
LABEL_134:
              v111 = *(unsigned int *)(v107 + 16 * v109 + 8);
              if (v111 != 0xFFFFFFFFLL)
              {
                v112 = *(_QWORD *)(*(_QWORD *)(v105 + 8) + 24 * v111 + 16);
                goto LABEL_136;
              }
            }
            else
            {
              v118 = 1;
              while (v110 != -4096)
              {
                v119 = v109 + v118++;
                v109 = v119 & v108;
                v110 = *(_QWORD *)(v107 + 16 * v109);
                if (v110 == v102)
                  goto LABEL_134;
              }
            }
            v112 = 0;
LABEL_136:
            v113 = v108 & ((v100 >> 4) ^ (v100 >> 9));
            v114 = *(_QWORD *)(v107 + 16 * v113);
            if (v114 == v100)
            {
LABEL_137:
              v115 = *(unsigned int *)(v107 + 16 * v113 + 8);
              if (v115 != 0xFFFFFFFFLL)
              {
                if (v112)
                {
                  v116 = *(_QWORD *)(*(_QWORD *)(v105 + 8) + 24 * v115 + 16);
                  if (v116)
                  {
                    v117 = a2 - 1;
                    if (v112 < v116)
                      goto LABEL_153;
                    goto LABEL_152;
                  }
                }
              }
            }
            else
            {
              v120 = 1;
              while (v114 != -4096)
              {
                v121 = v113 + v120++;
                v113 = v121 & v108;
                v114 = *(_QWORD *)(v107 + 16 * v113);
                if (v114 == v100)
                  goto LABEL_137;
              }
            }
          }
        }
      }
      v122 = a2;
      v123 = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v103 + 288), v102);
      result = (uint64_t *)llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(*(_QWORD *)(v103 + 288), v100);
      v117 = v101;
      v56 = v123 >= result;
      a2 = v122;
      if (!v56)
      {
LABEL_153:
        *--a3 = *v101;
        a2 = v117;
        a7 = v99;
        if (v98 == v99)
          return result;
        continue;
      }
LABEL_152:
      v101 = v98 - 1;
      v117 = a2;
      --v98;
      goto LABEL_153;
    }
    break;
  }
  if (v98 != a7)
  {
    v149 = 0;
    do
    {
      a3[v149 - 1] = v98[v149 - 1];
      --v149;
    }
    while (&v98[v149] != a7);
  }
  return result;
}

BOOL sub_1C51BAAA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t **v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  int *v30;
  unsigned int v31;
  _BOOL8 v32;
  int v33;
  void *v35;
  int *v36;
  void *v37;
  void *__p[2];
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[81];
  void *v43;
  uint64_t v44;
  _BYTE v45[128];
  _QWORD v46[6];
  void **v47;
  __int16 v48;
  char v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  void *v55;
  int v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[32];
  void *v60;
  int v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[128];
  void *v71;
  uint64_t v72;
  _QWORD v73[20];

  v73[18] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 256) + 280))(*(_QWORD *)(*a1 + 256));
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 256) + 320))(*(_QWORD *)(v4 + 256), a2);
  v7 = (int *)v6;
  v8 = *(uint64_t **)a1[1];
  v9 = (uint64_t **)(v4 + 952);
  v10 = *(_QWORD **)(v4 + 952);
  if (v10)
  {
    v11 = (uint64_t **)(v4 + 952);
    do
    {
      v12 = v10[4];
      v13 = v12 >= (unint64_t)v8;
      if (v12 >= (unint64_t)v8)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = (uint64_t **)v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != v9 && v11[4] <= v8)
      goto LABEL_71;
  }
  v36 = (int *)v6;
  v66 = 0;
  v65 = 0;
  v67 = 0;
  v68 = v70;
  v69 = 0x800000000;
  v71 = v73;
  v72 = 0x800000000;
  v73[17] = 0;
  v73[16] = 0;
  memset(v46, 0, 24);
  v46[4] = 0;
  v46[5] = 0;
  v47 = &v65;
  v48 = 0;
  v49 = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = v54;
  v53 = 0x800000000;
  v55 = 0;
  v56 = 0;
  v57 = v59;
  v58 = 0x800000000;
  v60 = 0;
  v61 = 0;
  v63 = 0;
  v62 = 0;
  v64 = 0;
  v15 = v8 + 6;
  llvm::RegPressureTracker::init((uint64_t)v46, v8[4], v4 + 320, 0, (uint64_t)v8, (uint64_t)(v8 + 6), 0, 1);
  v16 = (uint64_t *)v8[7];
  if (v8 + 6 != v16)
  {
    while (1)
    {
      v17 = *v15 & 0xFFFFFFFFFFFFFFF8;
      if (!v17)
        break;
      v18 = *v15 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)v17 & 4) == 0)
        goto LABEL_18;
LABEL_19:
      v19 = **(unsigned __int16 **)(v18 + 16);
      if ((v19 - 13) < 5 || v19 == 23)
      {
        if (!v17)
          goto LABEL_36;
      }
      else
      {
        v37 = &__p[1];
        __p[0] = (void *)0x800000000;
        v40 = v42;
        v41 = 0x800000000;
        v43 = v45;
        v44 = 0x800000000;
        llvm::RegisterOperands::collect(&v37, (const llvm::MachineInstr *)v18, *(const llvm::TargetRegisterInfo **)(v4 + 256), *(const llvm::MachineRegisterInfo **)(v4 + 264), 0, 0);
        llvm::RegPressureTracker::recedeSkipDebugValues((unsigned int *)v46);
        llvm::RegPressureTracker::recede((uint64_t)v46, (unsigned int **)&v37, 0);
        if (v43 != v45)
          free(v43);
        if (v40 != v42)
          free(v40);
        if (v37 != &__p[1])
          free(v37);
        v17 = *v15 & 0xFFFFFFFFFFFFFFF8;
        if (!v17)
        {
LABEL_36:
          while ((*(_WORD *)(v17 + 44) & 4) != 0)
            v17 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_37;
        }
      }
      if ((*(_BYTE *)v17 & 4) == 0)
        goto LABEL_36;
LABEL_37:
      v15 = (_QWORD *)v17;
      if ((uint64_t *)v17 == v16)
        goto LABEL_38;
    }
    v18 = 0;
LABEL_18:
    while ((*(_WORD *)(v18 + 44) & 4) != 0)
      v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_19;
  }
LABEL_38:
  v21 = v47;
  if ((_BYTE)v48)
  {
    v22 = (unint64_t)v47[40];
    v7 = v36;
    if ((unint64_t)v47[39] <= 7)
    {
      if (v22 > 7)
      {
        v21[39] = (void *)llvm::RegPressureTracker::getCurrSlot((llvm::RegPressureTracker *)v46);
LABEL_42:
        if (*((_DWORD *)v21 + 9) < v53)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 3), (uint64_t)(v21 + 5), v53, 16);
          v21 = v47;
        }
        sub_1C5258650((unsigned int *)&v52, (uint64_t)(v21 + 3));
        goto LABEL_45;
      }
      goto LABEL_45;
    }
    if (v22 > 7)
      goto LABEL_45;
LABEL_86:
    llvm::RegPressureTracker::closeBottom((llvm::RegPressureTracker *)v46);
    goto LABEL_45;
  }
  v35 = v47[40];
  v7 = v36;
  if (!v47[39])
  {
    if (!v35)
      goto LABEL_45;
    goto LABEL_86;
  }
  if (!v35)
  {
    v47[39] = (void *)v50;
    goto LABEL_42;
  }
LABEL_45:
  v37 = v8;
  __p[0] = 0;
  __p[1] = 0;
  v39 = 0;
  sub_1C4979194(__p, *v47, (uint64_t)v47[1], ((_BYTE *)v47[1] - (_BYTE *)*v47) >> 2);
  v23 = (uint64_t *)v37;
  v24 = *v9;
  v11 = (uint64_t **)(v4 + 952);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v24;
        v25 = v24[4];
        if (v25 <= (unint64_t)v37)
          break;
        v24 = *v11;
        v9 = v11;
        if (!*v11)
          goto LABEL_52;
      }
      if (v25 >= (unint64_t)v37)
        break;
      v24 = v11[1];
      if (!v24)
      {
        v9 = v11 + 1;
        goto LABEL_52;
      }
    }
  }
  else
  {
LABEL_52:
    v26 = (char *)v11;
    v11 = (uint64_t **)operator new(0x40uLL);
    v11[4] = v23;
    *(_OWORD *)(v11 + 5) = *(_OWORD *)__p;
    v11[7] = v39;
    __p[1] = 0;
    v39 = 0;
    __p[0] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t *)v26;
    *v9 = (uint64_t *)v11;
    v27 = **(_QWORD **)(v4 + 944);
    v28 = (uint64_t *)v11;
    if (v27)
    {
      *(_QWORD *)(v4 + 944) = v27;
      v28 = *v9;
    }
    sub_1C4768E74(*(uint64_t **)(v4 + 952), v28);
    ++*(_QWORD *)(v4 + 960);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  free(v60);
  if (v57 != v59)
    free(v57);
  free(v55);
  if (v52 != v54)
    free(v52);
  if (*((_QWORD *)&v50 + 1))
  {
    *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
    operator delete(*((void **)&v50 + 1));
  }
  if (v71 != v73)
    free(v71);
  if (v68 != v70)
    free(v68);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
LABEL_71:
  v37 = 0;
  __p[0] = 0;
  __p[1] = 0;
  sub_1C4979194(&v37, v11[5], (uint64_t)v11[6], ((char *)v11[6] - (char *)v11[5]) >> 2);
  v29 = *v7;
  if (*v7 == -1)
  {
    v32 = 0;
  }
  else
  {
    v30 = v7 + 1;
    do
    {
      v31 = *((_DWORD *)v37 + v29) + v5;
      v13 = v31 >= (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 256) + 312))(*(_QWORD *)(v4 + 256), *(_QWORD *)(*(_QWORD *)a1[2] + 32));
      v32 = v13;
      if (v13)
        break;
      v33 = *v30++;
      v29 = v33;
    }
    while (v33 != -1);
  }
  if (v37)
  {
    __p[0] = v37;
    operator delete(v37);
  }
  return v32;
}

uint64_t **sub_1C51BB03C(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
    goto LABEL_12;
  }
  do
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = v6[4];
      if (v9 <= a2)
        break;
LABEL_3:
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v9 >= a2)
    {
      v10 = v8[5];
      if ((unint64_t)v10 > a3)
        goto LABEL_3;
      if ((unint64_t)v10 >= a3)
        return v8;
    }
    v6 = v8[1];
  }
  while (v6);
  v7 = v8 + 1;
LABEL_12:
  v11 = (uint64_t *)v8;
  v8 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v8 + 2) = *a4;
  *((_BYTE *)v8 + 48) = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *v7 = (uint64_t *)v8;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    v13 = *v7;
  }
  sub_1C4768E74(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t **sub_1C51BB120(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
    goto LABEL_12;
  }
  do
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = v6[4];
      if (v9 <= a2)
        break;
LABEL_3:
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v9 >= a2)
    {
      v10 = v8[5];
      if ((unint64_t)v10 > a3)
        goto LABEL_3;
      if ((unint64_t)v10 >= a3)
        return v8;
    }
    v6 = v8[1];
  }
  while (v6);
  v7 = v8 + 1;
LABEL_12:
  v11 = (uint64_t *)v8;
  v8 = (uint64_t **)operator new(0x48uLL);
  *((_OWORD *)v8 + 2) = *a4;
  v8[7] = 0;
  v8[8] = 0;
  v8[6] = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *v7 = (uint64_t *)v8;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    v13 = *v7;
  }
  sub_1C4768E74(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t **sub_1C51BB208(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
    goto LABEL_12;
  }
  do
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = v6[4];
      if (v9 <= a2)
        break;
LABEL_3:
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v9 >= a2)
    {
      v10 = v8[5];
      if ((unint64_t)v10 > a3)
        goto LABEL_3;
      if ((unint64_t)v10 >= a3)
        return v8;
    }
    v6 = v8[1];
  }
  while (v6);
  v7 = v8 + 1;
LABEL_12:
  v11 = (uint64_t *)v8;
  v8 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v8 + 2) = *a4;
  *((_BYTE *)v8 + 48) = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *v7 = (uint64_t *)v8;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    v13 = *v7;
  }
  sub_1C4768E74(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t sub_1C51BB2F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

void sub_1C51BB3D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C51BB498(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
}

void sub_1C51BB498(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_1C85F2160, 16 * v6);
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      v10 = 0;
      sub_1C51BB2F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v7, v8, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

char *sub_1C51BB554(char *result)
{
  char *v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *((_DWORD *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == v2)
  {
    *((_QWORD *)result + 1) = 0;
    if (v2)
    {
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + 40 * v2;
      do
      {
        *(_QWORD *)v6 = 0;
        *(_BYTE *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        v6 += 40;
      }
      while (v6 != v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C51B6B70(v1, v5);
  }
  return result;
}

double sub_1C51BB5FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FA1);
  *(_QWORD *)v1 = &off_1E81468A8;
  *(_QWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 256) = v1 + 272;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(v1 + 264) = 0x600000000;
  *(_DWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 336) = v1 + 352;
  *(_QWORD *)(v1 + 344) = 0x600000000;
  *(_DWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  return result;
}

void sub_1C51BB66C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  *a1 = (uint64_t)&off_1E81468A8;
  sub_1C61FCDC4(a1 + 51);
  v2 = (uint64_t *)a1[42];
  if (v2 != a1 + 44)
    free(v2);
  v3 = (uint64_t *)a1[32];
  if (v3 != a1 + 34)
    free(v3);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v4 = (uint64_t *)a1[22];
  if (v4 != a1 + 24)
    free(v4);
  v5 = (uint64_t *)a1[13];
  if (v5 != a1 + 15)
    free(v5);
  v6 = (uint64_t *)a1[4];
  if (v6 != a1 + 6)
    free(v6);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C51BB720(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  *a1 = (uint64_t)&off_1E81468A8;
  sub_1C61FCDC4(a1 + 51);
  v2 = (uint64_t *)a1[42];
  if (v2 != a1 + 44)
    free(v2);
  v3 = (uint64_t *)a1[32];
  if (v3 != a1 + 34)
    free(v3);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v4 = (uint64_t *)a1[22];
  if (v4 != a1 + 24)
    free(v4);
  v5 = (uint64_t *)a1[13];
  if (v5 != a1 + 15)
    free(v5);
  v6 = (uint64_t *)a1[4];
  if (v6 != a1 + 6)
    free(v6);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C51BB7E8()
{
  return "PostRA Machine Sink";
}

void *sub_1C51BB7F8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C51BB828(llvm::FunctionPass *a1, uint64_t a2)
{
  llvm::FunctionPass *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  llvm::LiveRegUnits *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  int v33;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  llvm::LiveRegUnits *v42;
  _QWORD *v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  _WORD *v50;
  unsigned __int16 *v51;
  __int16 v52;
  unsigned __int16 v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  int v58;
  char *v59;
  unsigned int *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unsigned int *v65;
  unsigned int *v66;
  _DWORD *v67;
  unsigned int v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  const llvm::MachineFunction **v77;
  const llvm::MachineFunction **v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const llvm::MachineFunction **v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  unint64_t v89;
  _WORD *v90;
  unsigned __int16 v91;
  uint64_t v92;
  int v93;
  int v94;
  void **v95;
  void **v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _DWORD *v120;
  unsigned int v121;
  _QWORD *v122;
  unint64_t v123;
  _WORD *v124;
  unsigned __int16 *v125;
  __int16 v126;
  unsigned __int16 v127;
  int v128;
  uint64_t j;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  unsigned __int16 *v135;
  int v136;
  llvm::MachineBasicBlock *v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t *v143;
  unsigned __int16 *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  llvm::MachineBasicBlock *v158;
  unsigned int v159;
  uint64_t v160;
  char **v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  char **v165;
  int v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _DWORD *v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v176;
  uint64_t **v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t *v184;
  char *v185;
  _DWORD *v186;
  _DWORD *v187;
  unint64_t v188;
  llvm::MachineBasicBlock *v189;
  uint64_t v190;
  _DWORD *v191;
  const llvm::DILocation **v192;
  char *v193;
  void **v194;
  void **v195;
  _QWORD *v196;
  llvm::FunctionPass *v197;
  int v198;
  _QWORD *v199;
  int v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  llvm::LiveRegUnits *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unsigned int v210;
  __int128 v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int v216;
  _BYTE v217[16];
  void **v218;
  __int128 v219;
  unsigned int v220[32];
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  _QWORD v226[3];

  v3 = a1;
  v226[1] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) == 0)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
    v181 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v207 = v4;
    *((_QWORD *)v3 + 31) = v4;
    v5 = *((_QWORD *)v3 + 32);
    v6 = *((unsigned int *)v3 + 66);
    if ((_DWORD)v6)
      bzero(*((void **)v3 + 32), 8 * v6);
    v7 = *(_DWORD *)(v207 + 44);
    if ((*((_DWORD *)v3 + 80) & 0x3F) != 0)
      *(_QWORD *)(v5 + 8 * v6 - 8) &= ~(-1 << (*((_DWORD *)v3 + 80) & 0x3F));
    v205 = (llvm::FunctionPass *)((char *)v3 + 248);
    v194 = (void **)((char *)v3 + 256);
    *((_DWORD *)v3 + 80) = v7;
    v8 = (v7 + 63) >> 6;
    if ((_DWORD)v8 != (_DWORD)v6)
    {
      if (v8 >= v6)
      {
        v9 = v6;
        v10 = v6;
        if (v8 > *((_DWORD *)v3 + 67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v194, (uint64_t)v3 + 272, (v7 + 63) >> 6, 8);
          v9 = *((unsigned int *)v3 + 66);
          v5 = *((_QWORD *)v3 + 32);
          v7 = *((_DWORD *)v3 + 80);
          v10 = *((_DWORD *)v3 + 66);
        }
        bzero((void *)(v5 + 8 * v9), 8 * (v8 - v6));
        LODWORD(v6) = v10 + v8 - v6;
      }
      else
      {
        LODWORD(v6) = (v7 + 63) >> 6;
      }
      *((_DWORD *)v3 + 66) = v6;
    }
    if ((v7 & 0x3F) != 0)
      *(_QWORD *)(v5 + 8 * v6 - 8) &= ~(-1 << (v7 & 0x3F));
    *((_QWORD *)v3 + 41) = v207;
    v11 = *((_QWORD *)v3 + 42);
    v12 = *((unsigned int *)v3 + 86);
    if ((_DWORD)v12)
      bzero(*((void **)v3 + 42), 8 * v12);
    v13 = *(_DWORD *)(v207 + 44);
    if ((*((_DWORD *)v3 + 100) & 0x3F) != 0)
      *(_QWORD *)(v11 + 8 * v12 - 8) &= ~(-1 << (*((_DWORD *)v3 + 100) & 0x3F));
    v195 = (void **)((char *)v3 + 336);
    *((_DWORD *)v3 + 100) = v13;
    v14 = (v13 + 63) >> 6;
    if ((_DWORD)v14 != (_DWORD)v12)
    {
      if (v14 >= v12)
      {
        v15 = v12;
        v16 = v12;
        if (v14 > *((_DWORD *)v3 + 87))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v195, (uint64_t)v3 + 352, (v13 + 63) >> 6, 8);
          v15 = *((unsigned int *)v3 + 86);
          v11 = *((_QWORD *)v3 + 42);
          v13 = *((_DWORD *)v3 + 100);
          v16 = *((_DWORD *)v3 + 86);
        }
        bzero((void *)(v11 + 8 * v15), 8 * (v14 - v12));
        LODWORD(v12) = v16 + v14 - v12;
      }
      else
      {
        LODWORD(v12) = (v13 + 63) >> 6;
      }
      *((_DWORD *)v3 + 86) = v12;
    }
    v17 = (llvm::FunctionPass *)((char *)v3 + 248);
    if ((v13 & 0x3F) != 0)
      *(_QWORD *)(v11 + 8 * v12 - 8) &= ~(-1 << (v13 & 0x3F));
    v18 = *(_QWORD **)(a2 + 328);
    if (v18 != (_QWORD *)(a2 + 320))
    {
      v19 = (_QWORD *)(a2 + 320);
      v20 = 0;
      v206 = (_QWORD *)((char *)v3 + 328);
      v203 = (uint64_t)v3 + 408;
      v196 = v19;
      v197 = v3;
      while (1)
      {
        v213 = v217;
        v214 = v217;
        v215 = 2;
        v216 = 0;
        v21 = (uint64_t *)v18[11];
        v22 = (uint64_t *)v18[12];
        v199 = v18;
        if (v21 == v22)
          goto LABEL_263;
        v23 = 0;
        do
        {
          v24 = *v21;
          if (*(_QWORD *)(*v21 + 152) != *(_QWORD *)(*v21 + 160)
            && ((*(_QWORD *)(v24 + 72) - *(_QWORD *)(v24 + 64)) & 0x7FFFFFFF8) == 8)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v213, v24);
            v23 = HIDWORD(v215);
          }
          ++v21;
        }
        while (v21 != v22);
        if (v23 == v216)
          goto LABEL_263;
        v25 = *((unsigned int *)v3 + 66);
        if ((_DWORD)v25)
          bzero(*v194, 8 * v25);
        v26 = *((unsigned int *)v3 + 86);
        if ((_DWORD)v26)
          bzero(*v195, 8 * v26);
        v27 = *((_DWORD *)v3 + 104);
        if (v27 || *((_DWORD *)v3 + 105))
        {
          v159 = *((_DWORD *)v3 + 106);
          v160 = *((_QWORD *)v3 + 51);
          if (v159 <= 4 * v27 || v159 < 0x41)
          {
            if (v159)
            {
              v161 = (char **)(v160 + 8);
              v162 = 88 * v159;
              do
              {
                v163 = *((_DWORD *)v161 - 2);
                if (v163 != -1)
                {
                  if (v163 != -2)
                    v161 = sub_1C51BCBA0(v161);
                  *((_DWORD *)v161 - 2) = -1;
                }
                v161 += 11;
                v162 -= 88;
              }
              while (v162);
            }
            v3 = v197;
            *((_QWORD *)v197 + 52) = 0;
            goto LABEL_279;
          }
          v164 = 88 * v159;
          v165 = (char **)(v160 + 8);
          do
          {
            if (*((_DWORD *)v165 - 2) <= 0xFFFFFFFD)
              v165 = sub_1C51BCBA0(v165);
            v165 += 11;
            v164 -= 88;
          }
          while (v164);
          v166 = 1 << (33 - __clz(v27 - 1));
          if (v166 <= 64)
            v166 = 64;
          if (v27)
            v167 = v166;
          else
            v167 = 0;
          if (v167 == *((_DWORD *)v197 + 106))
          {
            v19 = v196;
            v3 = v197;
            *((_QWORD *)v197 + 52) = 0;
            v17 = v205;
            if (v167)
            {
              v168 = (_DWORD *)*((_QWORD *)v197 + 51);
              v169 = 88 * v167;
              do
              {
                *v168 = -1;
                v168 += 22;
                v169 -= 88;
              }
              while (v169);
            }
          }
          else
          {
            MEMORY[0x1CAA32FB4](*(_QWORD *)v203, 8);
            if (!v167)
            {
              *(_QWORD *)v203 = 0;
              *(_QWORD *)(v203 + 8) = 0;
              *(_DWORD *)(v203 + 16) = 0;
              v3 = v197;
LABEL_279:
              v17 = v205;
              v19 = v196;
              goto LABEL_43;
            }
            v170 = (4 * v167 / 3 + 1) | ((unint64_t)(4 * v167 / 3 + 1) >> 1);
            v171 = v170 | (v170 >> 2) | ((v170 | (v170 >> 2)) >> 4);
            LODWORD(v171) = (((v171 | (v171 >> 8)) >> 16) | v171 | (v171 >> 8)) + 1;
            v3 = v197;
            *((_DWORD *)v197 + 106) = v171;
            v172 = operator new(88 * v171, (std::align_val_t)8uLL);
            *((_QWORD *)v197 + 51) = v172;
            *((_QWORD *)v197 + 52) = 0;
            v173 = *((_DWORD *)v197 + 106);
            v17 = v205;
            v19 = v196;
            if (v173)
            {
              v174 = 88 * v173;
              do
              {
                *v172 = -1;
                v172 += 22;
                v174 -= 88;
              }
              while (v174);
            }
          }
        }
LABEL_43:
        v204 = v18 + 6;
        v28 = v18[6] & 0xFFFFFFFFFFFFFFF8;
        if (!v28 || (*(_BYTE *)v28 & 4) == 0)
        {
          while ((*(_WORD *)(v28 + 44) & 4) != 0)
            v28 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v28 != v204)
        {
          v200 = 0;
          v198 = v20;
          while (1)
          {
            v29 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
            if (!v29 || (*(_BYTE *)v29 & 4) == 0)
            {
              while ((*(_WORD *)(v29 + 44) & 4) != 0)
                v29 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
            }
            v224 = (char *)v226;
            v225 = 0x200000000;
            v221 = (char *)&v223;
            v222 = 0x200000000;
            v30 = *(unsigned __int16 **)(v28 + 16);
            v31 = *v30;
            if (v31 - 13 <= 1)
            {
              *(_QWORD *)&v219 = 1;
              for (i = 2; i != 34; i += 8)
                v220[i - 4] = -1;
              v45 = *(_QWORD *)(v28 + 32);
              if (*v30 != 14)
              {
                v47 = v45 + 32;
                goto LABEL_90;
              }
              v46 = *(unsigned int *)(v28 + 40);
              if ((_DWORD)v46 != 2)
              {
                v47 = v45 + 32 * v46;
                v45 += 64;
                do
                {
LABEL_90:
                  if (!*(_BYTE *)v45 && (*(_DWORD *)(v45 + 4) - 1) <= 0x3FFFFFFE)
                  {
                    if ((sub_1C51BCC28(v28, (uint64_t)&v224, (uint64_t)&v221, v205, v206) & 1) != 0)
                      goto LABEL_109;
                    v48 = *(_DWORD *)(v45 + 4);
                    v49 = *(unsigned int *)(*(_QWORD *)(v207 + 8) + 24 * v48 + 16);
                    v50 = (_WORD *)(*(_QWORD *)(v207 + 56) + ((v49 >> 3) & 0x1FFFFFFE));
                    v52 = *v50;
                    v51 = v50 + 1;
                    v53 = v52 + (v49 & 0xF) * v48;
                    do
                    {
                      LODWORD(v208) = v53;
                      v54 = sub_1C61FD038(&v219, (int *)&v208);
                      v55 = v54;
                      v56 = *(_DWORD *)(v45 + 4);
                      v57 = v54[4];
                      if (v57 >= v54[5])
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v54 + 2), (uint64_t)(v54 + 6), v57 + 1, 4);
                        v57 = v55[4];
                      }
                      *(_DWORD *)(*((_QWORD *)v55 + 1) + 4 * v57) = v56;
                      ++v55[4];
                      v58 = *v51++;
                      v53 += v58;
                    }
                    while (v58);
                  }
                  v45 += 32;
                }
                while (v45 != v47);
              }
              v59 = (char *)sub_1C61FCE3C(&v219);
              v61 = (char *)&v219 + 8;
              if ((v219 & 1) != 0)
              {
                v62 = 4;
              }
              else
              {
                v61 = (char *)*((_QWORD *)&v219 + 1);
                v62 = v220[0];
              }
              v63 = &v61[32 * v62];
              if (v63 != v59)
              {
                v64 = v59;
                v65 = v60;
                do
                {
                  v66 = (unsigned int *)(v64 + 32);
                  LODWORD(v218) = *(_DWORD *)v64;
                  v67 = sub_1C61FD30C(v203, (int *)&v218);
                  v208 = (_QWORD *)v28;
                  sub_1C61FCEB0((uint64_t)(v67 + 2), &v208, (uint64_t)(v64 + 8));
                  while (v66 != v65)
                  {
                    v68 = *v66;
                    v66 += 8;
                    if (v68 <= 0xFFFFFFFD)
                    {
                      v64 = (char *)(v66 - 8);
                      goto LABEL_108;
                    }
                  }
                  v64 = (char *)v65;
LABEL_108:
                  ;
                }
                while (v64 != v63);
              }
LABEL_109:
              sub_1C61FD65C((uint64_t)&v219);
              v33 = 5;
              v19 = v196;
              v3 = v197;
              v17 = v205;
              v20 = v198;
            }
            else
            {
              if (v31 <= 0x17 && ((1 << v31) & 0x838000) != 0)
                goto LABEL_60;
              v34 = *(_WORD *)(v28 + 44);
              v35 = *((_QWORD *)v30 + 1);
              if ((v34 & 0xC) == 0 || (v34 & 4) != 0)
              {
                if ((v35 & 0x80) != 0)
                {
LABEL_88:
                  v33 = 1;
                  goto LABEL_61;
                }
              }
              else
              {
                v36 = v28;
                if ((v35 & 0x80) != 0)
                  goto LABEL_88;
                while ((*(_WORD *)(v36 + 44) & 8) != 0)
                {
                  v36 = *(_QWORD *)(v36 + 8);
                  v33 = 1;
                  if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 8) & 0x80) != 0)
                    goto LABEL_61;
                }
              }
              if (v31 != 19 || (v37 = *(int **)(v28 + 32), v38 = *v37, (*v37 & 0x8000000) == 0))
              {
LABEL_191:
                v41 = v28;
                v42 = v17;
                v43 = v206;
                goto LABEL_192;
              }
              v39 = *((_QWORD *)v37 + 1);
              if (v39)
              {
                v40 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8);
                if ((v38 & 0x1000000) != 0)
                {
                  if ((v40 & 0x100000000) != 0)
                    goto LABEL_191;
                }
                else if ((v40 & 0x80000000) != 0)
                {
                  goto LABEL_191;
                }
              }
              if (sub_1C51BCC28(v28, (uint64_t)&v224, (uint64_t)&v221, v17, v206))
              {
                v41 = v28;
                v42 = v17;
                v43 = v206;
LABEL_192:
                sub_1C4A9692C(v41, v42, v43, v207);
LABEL_60:
                v33 = 5;
                goto LABEL_61;
              }
              if ((_DWORD)v222)
              {
                v69 = 0;
                v70 = v221;
                v182 = &v221[4 * v222];
                do
                {
                  v190 = v69;
                  v186 = v70;
                  v71 = *v70;
                  if (v214 == v213)
                    v72 = (uint64_t *)((char *)&v215 + 4);
                  else
                    v72 = &v215;
                  v73 = *(unsigned int *)v72;
                  if ((_DWORD)v73)
                  {
                    v74 = 8 * v73;
                    v75 = v214;
                    while (*(_QWORD *)v75 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      v75 += 8;
                      v74 -= 8;
                      if (!v74)
                        goto LABEL_189;
                    }
                  }
                  else
                  {
                    v75 = v214;
                  }
                  v76 = &v214[8 * v73];
                  if (v75 == v76)
                    goto LABEL_189;
                  v77 = 0;
                  v78 = *(const llvm::MachineFunction ***)v75;
LABEL_123:
                  if (sub_1C51BD7B8(v78, v71, v207))
                  {
                    if (v77)
                      goto LABEL_189;
                  }
                  else
                  {
                    v78 = v77;
                  }
                  v77 = v78;
                  v79 = (unint64_t *)(v75 + 8);
                  while (v79 != (unint64_t *)v76)
                  {
                    v80 = *v79++;
                    v78 = (const llvm::MachineFunction **)v80;
                    if (v80 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v75 = (char *)(v79 - 1);
                      goto LABEL_123;
                    }
                  }
                  v189 = (llvm::MachineBasicBlock *)v77;
                  if (!v77)
                    goto LABEL_189;
                  v81 = (uint64_t *)v199[11];
                  v82 = (uint64_t *)v199[12];
                  while (v81 != v82)
                  {
                    v83 = (const llvm::MachineFunction **)*v81;
                    v84 = (char *)sub_1C477672C((uint64_t)&v213, *v81);
                    if (v214 == v213)
                      v85 = (uint64_t *)((char *)&v215 + 4);
                    else
                      v85 = &v215;
                    if (v84 == &v214[8 * *(unsigned int *)v85] && sub_1C51BD7B8(v83, v71, v207))
                      goto LABEL_189;
                    ++v81;
                  }
                  if (v190 && (const llvm::MachineFunction **)v190 != v77)
                    goto LABEL_189;
                  v70 = v186 + 1;
                  v69 = (uint64_t)v77;
                }
                while (v186 + 1 != (_DWORD *)v182);
                v208 = 0;
                v209 = 0;
                v210 = 0;
                v212 = 0;
                v211 = 0uLL;
                v86 = *(unsigned int *)(v28 + 40);
                if ((_DWORD)v86)
                {
                  v87 = *(_DWORD **)(v28 + 32);
                  v187 = &v87[8 * v86];
                  v19 = v196;
                  v3 = v197;
                  while (1)
                  {
                    v191 = v87;
                    if ((*v87 & 0x10000FF) != 0x1000000)
                      goto LABEL_187;
                    v88 = v87[1];
                    v89 = *(unsigned int *)(*(_QWORD *)(v207 + 8) + 24 * v88 + 16);
                    v90 = (_WORD *)(*(_QWORD *)(v207 + 56) + ((v89 >> 3) & 0x1FFFFFFE));
                    v91 = *v90 + (v89 & 0xF) * v88;
                    do
                    {
                      v92 = *((_QWORD *)v3 + 51);
                      v93 = *((_DWORD *)v3 + 106);
                      v218 = 0;
                      if (!sub_1C51BD0CC(v92, v93, v91, &v218))
                        goto LABEL_148;
                      v95 = v218;
                      *(_QWORD *)&v219 = v220;
                      *((_QWORD *)&v219 + 1) = 0x200000000;
                      v176 = *((unsigned int *)v218 + 4);
                      v96 = v218 + 1;
                      if ((_DWORD)v176)
                        v97 = &v219 == (__int128 *)v96;
                      else
                        v97 = 1;
                      if (v97)
                      {
                        v19 = v196;
                        v3 = v197;
                        goto LABEL_148;
                      }
                      if (v176 > 2)
                      {
                        sub_1C61FCBD0((uint64_t)&v219, v176);
                        v114 = *((unsigned int *)v95 + 4);
                        v180 = (uint64_t *)v219;
                        if (!(_DWORD)v114)
                          goto LABEL_170;
                        v183 = (char *)v95[1];
                        v178 = (uint64_t)&v183[32 * v114];
                      }
                      else
                      {
                        v183 = (char *)*v96;
                        v178 = (uint64_t)*v96 + 32 * v176;
                        v180 = (uint64_t *)v220;
                      }
                      v98 = 0;
                      do
                      {
                        v99 = &v180[v98];
                        v100 = &v183[v98 * 8];
                        *v99 = *(_QWORD *)&v183[v98 * 8];
                        v101 = &v180[v98 + 3];
                        v99[1] = (uint64_t)(v99 + 3);
                        v177 = (uint64_t **)&v180[v98 + 1];
                        v99[2] = 0x200000000;
                        v102 = *(unsigned int *)&v183[v98 * 8 + 16];
                        if ((_DWORD)v102)
                          v103 = v100 == (char *)v99;
                        else
                          v103 = 1;
                        if (!v103)
                        {
                          v104 = *((_DWORD *)v100 + 4);
                          if (v102 < 3)
                            goto LABEL_164;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v177, (uint64_t)(v99 + 3), *((unsigned int *)v100 + 4), 4);
                          v102 = *((unsigned int *)v100 + 4);
                          if ((_DWORD)v102)
                          {
                            v101 = *v177;
LABEL_164:
                            memcpy(v101, *((const void **)v100 + 1), 4 * v102);
                          }
                          *((_DWORD *)v99 + 4) = v104;
                        }
                        v98 += 4;
                      }
                      while (&v183[v98 * 8] != (char *)v178);
                      v180 = (uint64_t *)v219;
LABEL_170:
                      DWORD2(v219) = v176;
                      v184 = &v180[4 * v176];
                      do
                      {
                        v105 = sub_1C61FCF28((uint64_t)&v208, v180);
                        v106 = *((unsigned int *)v180 + 4);
                        if ((_DWORD)v106)
                        {
                          v107 = v105;
                          v108 = (int *)v180[1];
                          v179 = v105 + 16;
                          v109 = *(_DWORD *)(v105 + 8);
                          v110 = 4 * v106;
                          do
                          {
                            v111 = *v108;
                            if (v109 >= *(_DWORD *)(v107 + 12))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod(v107, v179, v109 + 1, 4);
                              v109 = *(_DWORD *)(v107 + 8);
                            }
                            *(_DWORD *)(*(_QWORD *)v107 + 4 * v109) = v111;
                            v109 = *(_DWORD *)(v107 + 8) + 1;
                            *(_DWORD *)(v107 + 8) = v109;
                            ++v108;
                            v110 -= 4;
                          }
                          while (v110);
                        }
                        v180 += 4;
                      }
                      while (v180 != v184);
                      v185 = (char *)v219;
                      if (DWORD2(v219))
                      {
                        v112 = 32 * DWORD2(v219);
                        do
                        {
                          v113 = *(char **)&v185[v112 - 24];
                          if (&v185[v112 - 8] != v113)
                            free(v113);
                          v112 -= 32;
                        }
                        while (v112);
                        v185 = (char *)v219;
                      }
                      v19 = v196;
                      v3 = v197;
                      if (v185 != (char *)v220)
                        free(v185);
LABEL_148:
                      v94 = (unsigned __int16)v90[1];
                      ++v90;
                      v91 += v94;
                    }
                    while (v94);
LABEL_187:
                    v87 = v191 + 8;
                    if (v191 + 8 == v187)
                    {
                      LODWORD(v86) = v209;
                      v115 = HIDWORD(v209);
                      v69 = (uint64_t)v189;
                      goto LABEL_194;
                    }
                  }
                }
                v115 = 0;
                v19 = v196;
                v3 = v197;
LABEL_194:
                v17 = v205;
                v20 = v198;
                if (v86 | v115)
                {
                  if (v210 <= 4 * (int)v86 || v210 < 0x41)
                  {
                    if (v210)
                    {
                      v116 = v208;
                      v117 = 16 * v210;
                      do
                      {
                        *v116 = -4096;
                        v116 += 2;
                        v117 -= 16;
                      }
                      while (v117);
                    }
                    v209 = 0;
                  }
                  else
                  {
                    sub_1C476B2A4(&v208);
                    v69 = (uint64_t)v189;
                  }
                }
                v219 = v211;
                *(_QWORD *)v220 = v212;
                v212 = 0;
                v211 = 0uLL;
                v192 = (const llvm::DILocation **)llvm::MachineBasicBlock::SkipPHIsAndLabels(v69, *(_QWORD *)(v69 + 56));
                if ((sub_1C51B827C(v69, (uint64_t)v192, v28, v207, v181, 0) & 1) != 0)
                {
                  v33 = 5;
                }
                else
                {
                  if ((_DWORD)v225)
                  {
                    v118 = v224;
                    v119 = &v224[4 * v225];
                    do
                    {
                      v120 = (_DWORD *)(*(_QWORD *)(v28 + 32) + 32 * *(unsigned int *)v118);
                      v121 = v120[1];
                      if (*v206)
                        v122 = (_QWORD *)(*v206 + 8);
                      else
                        v122 = 0;
                      v123 = *(unsigned int *)(*v122 + 24 * (unsigned __int16)v120[1] + 16);
                      v124 = (_WORD *)(v122[6] + ((v123 >> 3) & 0x1FFFFFFE));
                      v126 = *v124;
                      v125 = v124 + 1;
                      v127 = v126 + (v123 & 0xF) * v121;
                      while (((*((_QWORD *)*v195 + (v127 >> 6)) >> v127) & 1) == 0)
                      {
                        v128 = *v125++;
                        v127 += v128;
                        if (!v128)
                          goto LABEL_223;
                      }
                      for (j = *(_QWORD *)(v28 + 8); (_QWORD *)j != v204; j = *(_QWORD *)(j + 8))
                      {
                        if (llvm::MachineInstr::findRegisterUseOperandIdx(j, v121, 1, v207) != -1)
                        {
                          llvm::MachineInstr::clearRegisterKills(j, v121, v207);
                          *v120 |= 0x4000000u;
                          break;
                        }
                        if (!j || (*(_BYTE *)j & 4) == 0)
                        {
                          while ((*(_WORD *)(j + 44) & 8) != 0)
                            j = *(_QWORD *)(j + 8);
                        }
                      }
LABEL_223:
                      v118 += 4;
                    }
                    while (v118 != v119);
                  }
                  sub_1C51B8908(v28, (uint64_t)v189, v192, v219, (uint64_t)(*((_QWORD *)&v219 + 1) - v219) >> 5);
                  v201 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v189 + 4) + 16) + 176))(*(_QWORD *)(*((_QWORD *)v189 + 4) + 16));
                  if ((_DWORD)v222)
                  {
                    v130 = v221;
                    v131 = &v221[4 * v222];
                    if (v201)
                      v132 = (_QWORD *)(v201 + 8);
                    else
                      v132 = 0;
                    do
                    {
                      v133 = v132[6];
                      if (v133)
                      {
                        v134 = *(_DWORD *)v130;
                        v135 = (unsigned __int16 *)(v133
                                                  + 2 * *(unsigned int *)(*v132 + 24 * *(unsigned int *)v130 + 4));
                        do
                        {
                          llvm::MachineBasicBlock::removeLiveIn(v189, (unsigned __int16)v134, -1);
                          v136 = *v135++;
                          v134 += v136;
                        }
                        while (v136);
                      }
                      v130 += 4;
                    }
                    while (v130 != v131);
                  }
                  v19 = v196;
                  v3 = v197;
                  v137 = v189;
                  if ((_DWORD)v225)
                  {
                    v138 = v224;
                    v193 = &v224[4 * v225];
                    v139 = (_QWORD *)(v201 + 8);
                    if (!v201)
                      v139 = 0;
                    v202 = v139;
                    do
                    {
                      v140 = 0;
                      v141 = *(_DWORD *)(*(_QWORD *)(v28 + 32) + 32 * *(unsigned int *)v138 + 4);
                      v142 = *v202 + 24 * v141;
                      v143 = (uint64_t *)(v202[7] + 8 * *(unsigned __int16 *)(v142 + 20));
                      v144 = (unsigned __int16 *)(v202[6]
                                                + (((unint64_t)*(unsigned int *)(v142 + 16) >> 3) & 0x1FFFFFFE)
                                                + 2);
                      do
                      {
                        v145 = *v143++;
                        v140 |= v145;
                        LODWORD(v145) = *v144++;
                      }
                      while ((_DWORD)v145);
                      if (v140)
                        v146 = v140;
                      else
                        v146 = -1;
                      v148 = (char *)*((_QWORD *)v137 + 20);
                      v147 = *((_QWORD *)v137 + 21);
                      if ((unint64_t)v148 >= v147)
                      {
                        v150 = (char *)*((_QWORD *)v137 + 19);
                        v151 = (v148 - v150) >> 4;
                        v152 = v151 + 1;
                        if ((unint64_t)(v151 + 1) >> 60)
                          abort();
                        v153 = v147 - (_QWORD)v150;
                        if (v153 >> 3 > v152)
                          v152 = v153 >> 3;
                        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0)
                          v152 = 0xFFFFFFFFFFFFFFFLL;
                        v188 = v152;
                        if (v152)
                        {
                          if (v152 >> 60)
                            sub_1C4764EE4();
                          v154 = (char *)operator new(16 * v152);
                        }
                        else
                        {
                          v154 = 0;
                        }
                        v155 = &v154[16 * v151];
                        *(_WORD *)v155 = v141;
                        *((_QWORD *)v155 + 1) = v146;
                        v156 = v155;
                        if (v148 == v150)
                        {
                          v3 = v197;
                          v157 = v188;
                          v158 = v189;
                        }
                        else
                        {
                          v3 = v197;
                          v157 = v188;
                          do
                          {
                            *((_OWORD *)v156 - 1) = *((_OWORD *)v148 - 1);
                            v156 -= 16;
                            v148 -= 16;
                          }
                          while (v148 != v150);
                          v158 = v189;
                          v148 = (char *)*((_QWORD *)v189 + 19);
                        }
                        v149 = v155 + 16;
                        *((_QWORD *)v158 + 19) = v156;
                        *((_QWORD *)v158 + 20) = v155 + 16;
                        *((_QWORD *)v158 + 21) = &v154[16 * v157];
                        v19 = v196;
                        if (v148)
                        {
                          operator delete(v148);
                          v137 = v189;
                        }
                        else
                        {
                          v137 = v158;
                        }
                      }
                      else
                      {
                        *(_WORD *)v148 = v141;
                        *((_QWORD *)v148 + 1) = v146;
                        v149 = v148 + 16;
                      }
                      *((_QWORD *)v137 + 20) = v149;
                      v138 += 4;
                    }
                    while (v138 != v193);
                  }
                  llvm::MachineBasicBlock::sortUniqueLiveIns(v137);
                  v33 = 0;
                  v200 = 1;
                  v17 = v205;
                  v20 = v198;
                }
                v218 = (void **)&v219;
                sub_1C51BDBD0(&v218);
                *(_QWORD *)&v219 = &v211;
                sub_1C51BDBD0((void ***)&v219);
                MEMORY[0x1CAA32FB4](v208, 8);
              }
              else
              {
LABEL_189:
                v17 = v205;
                sub_1C4A9692C(v28, v205, v206, v207);
                v33 = 5;
                v20 = v198;
                v19 = v196;
                v3 = v197;
              }
            }
LABEL_61:
            if (v221 != (char *)&v223)
              free(v221);
            if (v224 != (char *)v226)
              free(v224);
            if (v33 != 5 && v33)
              break;
            v28 = v29;
            if ((_QWORD *)v29 == v204)
              goto LABEL_264;
          }
        }
LABEL_263:
        v200 = 0;
LABEL_264:
        if (v214 != v213)
          free(v214);
        v20 |= v200;
        v18 = (_QWORD *)v199[1];
        if (v18 == v19)
          return v20 & 1;
      }
    }
  }
  LOBYTE(v20) = 0;
  return v20 & 1;
}

void sub_1C51BCA74(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

char **sub_1C51BCBA0(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 32 * v2;
    do
    {
      v4 = *(char **)&v1[v3 - 24];
      if (&v1[v3 - 8] != v4)
      {
        v8 = result;
        v5 = v3;
        v6 = v1;
        free(v4);
        v3 = v5;
        v1 = v6;
        result = v8;
      }
      v3 -= 32;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_1C51BCC28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  unsigned __int16 *v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  __int16 v29;
  _WORD *v30;
  unsigned __int16 *v31;
  __int16 v32;
  unsigned __int16 v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = (_DWORD *)(a3 + 8);
  v8 = a3 + 16;
  v9 = (_DWORD *)(a2 + 8);
  v10 = a2 + 16;
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_DWORD *)(v11 + 32 * v6);
    if (!(_BYTE)v12)
    {
      v13 = *(_DWORD *)(v11 + 32 * v6 + 4);
      if (v13)
        break;
    }
LABEL_4:
    if (++v6 == v5)
      return 0;
  }
  v14 = a4[1];
  v15 = (_QWORD *)(*a4 + 8);
  if (!*a4)
    v15 = 0;
  v16 = *(unsigned int *)(*v15 + 24 * (unsigned __int16)v13 + 16);
  v17 = v16 >> 4;
  v18 = v16 & 0xF;
  v19 = v15[6];
  v20 = *(_WORD *)(v19 + 2 * v17) + v18 * v13;
  if ((v12 & 0x1000000) != 0)
  {
    v25 = (unsigned __int16 *)(v19 + 2 * v17 + 2);
    while (((*(_QWORD *)(v14 + 8 * (v20 >> 6)) >> v20) & 1) == 0)
    {
      v26 = *v25++;
      v20 += v26;
      if (!v26)
      {
        if (*a5)
          v27 = (_QWORD *)(*a5 + 8);
        else
          v27 = 0;
        v28 = *(unsigned int *)(*v27 + 24 * (unsigned __int16)v13 + 16);
        v29 = v28 & 0xF;
        v30 = (_WORD *)(v27[6] + ((v28 >> 3) & 0x1FFFFFFE));
        v32 = *v30;
        v31 = v30 + 1;
        v33 = v32 + v29 * v13;
        while (((*(_QWORD *)(a5[1] + 8 * (v33 >> 6)) >> v33) & 1) == 0)
        {
          v34 = *v31++;
          v33 += v34;
          if (!v34)
          {
            v35 = *(unsigned int *)(a3 + 8);
            if (v35 >= *(unsigned int *)(a3 + 12))
            {
              v57 = v6;
              v59 = v5;
              v53 = v9;
              v55 = v7;
              v49 = a2;
              v51 = a1;
              v45 = a4;
              v47 = a3;
              v41 = a5;
              v43 = v10;
              v37 = v8;
              v39 = v13;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v8, v35 + 1, 4);
              v13 = v39;
              a5 = v41;
              v9 = v53;
              v7 = v55;
              v6 = v57;
              v5 = v59;
              v10 = v43;
              a4 = v45;
              v8 = v37;
              a2 = v49;
              a1 = v51;
              a3 = v47;
              v35 = *(unsigned int *)(v47 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v35) = v13;
            v24 = v7;
LABEL_28:
            ++*v24;
            goto LABEL_4;
          }
        }
        return 1;
      }
    }
  }
  else
  {
    v21 = (unsigned __int16 *)(v19 + 2 * v17 + 2);
    while (((*(_QWORD *)(v14 + 8 * (v20 >> 6)) >> v20) & 1) == 0)
    {
      v22 = *v21++;
      v20 += v22;
      if (!v22)
      {
        v23 = *(unsigned int *)(a2 + 8);
        if (v23 >= *(unsigned int *)(a2 + 12))
        {
          v56 = v6;
          v58 = v5;
          v52 = v9;
          v54 = v7;
          v48 = a2;
          v50 = a1;
          v44 = a4;
          v46 = a3;
          v40 = a5;
          v42 = v10;
          v36 = v8;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v10, v23 + 1, 4);
          v9 = v52;
          v7 = v54;
          v6 = v56;
          v5 = v58;
          v10 = v42;
          a4 = v44;
          v8 = v36;
          a2 = v48;
          a1 = v50;
          a3 = v46;
          a5 = v40;
          v23 = *(unsigned int *)(v48 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v23) = v6;
        v24 = v9;
        goto LABEL_28;
      }
    }
  }
  return 1;
}

void sub_1C51BCE70(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[128];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61FD20C(a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 > 0xFFFFFFFD)
      goto LABEL_22;
    v13 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    *(_DWORD *)v10 = v12;
    *((_QWORD *)v10 + 2) = 0x200000000;
    v14 = *(_DWORD *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if (v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        *((_QWORD *)v10 + 1) = v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), *(unsigned int *)(v11 + 24), 4);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 4 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 32;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C61FD20C(a1, (uint64_t)v20, (uint64_t)v10);
}

uint64_t sub_1C51BD0CC(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  _DWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = (37 * a3) & (a2 - 1);
    v4 = (_DWORD *)(a1 + 88 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -2;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_DWORD *)(a1 + 88 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_DWORD *sub_1C51BD168(uint64_t a1, int a2)
{
  int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61FD438((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -1;
      result += 22;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51BD22C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void **v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void **v51;
  unsigned int v52;
  BOOL v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v61;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = a1;
  if (a1 != a2)
  {
    v3 = (_QWORD *)a2;
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      v66 = v5;
      if (v6 < v5)
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if ((_DWORD)v6)
          {
            v39 = *(char **)a1;
            v40 = 32 * v6;
            do
            {
              v41 = *(char **)&v39[v40 - 24];
              if (&v39[v40 - 8] != v41)
                free(v41);
              v40 -= 32;
            }
            while (v40);
          }
          *(_DWORD *)(v2 + 8) = 0;
          sub_1C61FCBD0(v2, v66);
        }
        else if ((_DWORD)v6)
        {
          v7 = 0;
          v8 = *(char **)a1;
          v61 = *(unsigned int *)(a1 + 8);
          v67 = 32 * v6;
          v9 = *(char **)a2;
          while (1)
          {
            v10 = &v4[v7];
            *(_QWORD *)&v8[v7] = *(_QWORD *)&v4[v7];
            v11 = (void **)&v8[v7 + 8];
            if (v4 != v8)
              break;
LABEL_17:
            v9 += 32;
            v7 += 32;
            if (v67 == v7)
            {
              v3 = (_QWORD *)a2;
              v2 = a1;
              v30 = v61;
              goto LABEL_67;
            }
          }
          v12 = (char *)*((_QWORD *)v10 + 1);
          if (v10 + 24 != v12)
          {
            if (&v8[v7 + 24] != *v11)
            {
              free(*v11);
              v12 = (char *)*((_QWORD *)v10 + 1);
            }
            *v11 = v12;
            v13 = v9 + 16;
            *(_QWORD *)&v8[v7 + 16] = *(_QWORD *)&v4[v7 + 16];
            *((_QWORD *)v10 + 1) = v10 + 24;
            *(_DWORD *)&v4[v7 + 20] = 0;
            goto LABEL_16;
          }
          v13 = &v4[v7 + 16];
          v14 = *(unsigned int *)v13;
          v15 = &v8[v7];
          v16 = *(unsigned int *)&v8[v7 + 16];
          if (v16 >= v14)
          {
            if ((_DWORD)v14)
              memmove(*v11, v12, 4 * v14);
            goto LABEL_15;
          }
          if (*((_DWORD *)v15 + 5) < v14)
          {
            *((_DWORD *)v15 + 4) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8[v7 + 8], (uint64_t)&v8[v7 + 24], v14, 4);
          }
          else if ((_DWORD)v16)
          {
            memmove(*v11, v12, 4 * v16);
LABEL_13:
            v17 = *(unsigned int *)v13;
            if (v16 != v17)
              memcpy((char *)*v11 + 4 * v16, (const void *)(*((_QWORD *)v10 + 1) + 4 * v16), 4 * v17 - 4 * v16);
LABEL_15:
            *((_DWORD *)v15 + 4) = v14;
LABEL_16:
            *(_DWORD *)v13 = 0;
            goto LABEL_17;
          }
          v16 = 0;
          goto LABEL_13;
        }
        v30 = 0;
LABEL_67:
        v42 = *v3;
        v43 = *((unsigned int *)v3 + 2);
        if (v30 != v43)
        {
          v44 = v3;
          v45 = *(_QWORD *)v2;
          v46 = 32 * v30;
          v47 = 32 * v43;
          while (1)
          {
            v48 = v45 + v46;
            v49 = v42 + v46;
            *(_QWORD *)v48 = *(_QWORD *)(v42 + v46);
            v50 = (void *)(v45 + v46 + 24);
            *(_QWORD *)(v45 + v46 + 8) = v50;
            v51 = (void **)(v45 + v46 + 8);
            *(_QWORD *)(v48 + 16) = 0x200000000;
            v52 = *(_DWORD *)(v42 + v46 + 16);
            if (v52)
              v53 = v49 == v48;
            else
              v53 = 1;
            if (v53)
              goto LABEL_79;
            v54 = *(void **)(v49 + 8);
            if ((void *)(v49 + 24) != v54)
            {
              *v51 = v54;
              v56 = *(_DWORD *)(v42 + v46 + 20);
              *(_DWORD *)(v48 + 16) = v52;
              *(_DWORD *)(v48 + 20) = v56;
              *(_QWORD *)(v49 + 8) = v49 + 24;
              *(_DWORD *)(v42 + v46 + 20) = 0;
              goto LABEL_78;
            }
            if (v52 >= 3)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v45 + v46 + 8, v45 + v46 + 24, *(unsigned int *)(v42 + v46 + 16), 4);
              v55 = *(unsigned int *)(v49 + 16);
              if (!(_DWORD)v55)
                goto LABEL_77;
              v54 = *(void **)(v49 + 8);
              v50 = *v51;
            }
            else
            {
              v55 = *(unsigned int *)(v42 + v46 + 16);
            }
            memcpy(v50, v54, 4 * v55);
LABEL_77:
            *(_DWORD *)(v48 + 16) = v52;
LABEL_78:
            *(_DWORD *)(v49 + 16) = 0;
LABEL_79:
            v45 += 32;
            v42 += 32;
            v47 -= 32;
            if (v46 == v47)
            {
              v3 = v44;
              v42 = *v44;
              break;
            }
          }
        }
        *(_DWORD *)(v2 + 8) = v66;
        v57 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v57)
        {
          v58 = 32 * v57;
          do
          {
            v59 = *(void **)(v42 + v58 - 24);
            if ((void *)(v42 + v58 - 8) != v59)
              free(v59);
            v58 -= 32;
          }
          while (v58);
        }
        goto LABEL_89;
      }
      v18 = *(char **)a1;
      if (!(_DWORD)v5)
      {
        v29 = *(char **)a1;
LABEL_48:
        v31 = &v18[32 * v6];
        if (v31 != v29)
        {
          v32 = v31 - 8;
          do
          {
            v33 = (char *)*((_QWORD *)v32 - 2);
            if (v32 != v33)
              free(v33);
            v34 = v32 - 24;
            v32 -= 32;
          }
          while (v34 != v29);
        }
        *(_DWORD *)(v2 + 8) = v66;
        v35 = *((unsigned int *)v3 + 2);
        if ((_DWORD)v35)
        {
          v36 = *v3;
          v37 = 32 * v35;
          do
          {
            v38 = *(void **)(v36 + v37 - 24);
            if ((void *)(v36 + v37 - 8) != v38)
              free(v38);
            v37 -= 32;
          }
          while (v37);
        }
LABEL_89:
        *((_DWORD *)v3 + 2) = 0;
        return v2;
      }
      v19 = 0;
      v68 = 32 * v5;
      v20 = *(char **)a2;
      while (1)
      {
        v21 = &v4[v19];
        *(_QWORD *)&v18[v19] = *(_QWORD *)&v4[v19];
        v22 = (void **)&v18[v19 + 8];
        if (v4 != v18)
          break;
LABEL_38:
        v20 += 32;
        v19 += 32;
        if (v68 == v19)
        {
          v3 = (_QWORD *)a2;
          v6 = *(unsigned int *)(a1 + 8);
          v29 = &v18[v19];
          v2 = a1;
          v18 = *(char **)a1;
          goto LABEL_48;
        }
      }
      v23 = (char *)*((_QWORD *)v21 + 1);
      if (v21 + 24 != v23)
      {
        if (&v18[v19 + 24] != *v22)
        {
          free(*v22);
          v23 = (char *)*((_QWORD *)v21 + 1);
        }
        *v22 = v23;
        v25 = v20 + 16;
        *(_QWORD *)&v18[v19 + 16] = *(_QWORD *)&v4[v19 + 16];
        *((_QWORD *)v21 + 1) = v21 + 24;
        *(_DWORD *)&v4[v19 + 20] = 0;
        goto LABEL_37;
      }
      v25 = &v4[v19 + 16];
      v24 = *(unsigned int *)v25;
      v26 = &v18[v19];
      v27 = *(unsigned int *)&v18[v19 + 16];
      if (v27 >= v24)
      {
        if ((_DWORD)v24)
          memmove(*v22, v23, 4 * v24);
        goto LABEL_36;
      }
      if (*((_DWORD *)v26 + 5) < v24)
      {
        *((_DWORD *)v26 + 4) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18[v19 + 8], (uint64_t)&v18[v19 + 24], v24, 4);
      }
      else if ((_DWORD)v27)
      {
        memmove(*v22, v23, 4 * v27);
LABEL_34:
        v28 = *(unsigned int *)v25;
        if (v27 != v28)
          memcpy((char *)*v22 + 4 * v27, (const void *)(*((_QWORD *)v21 + 1) + 4 * v27), 4 * v28 - 4 * v27);
LABEL_36:
        *((_DWORD *)v26 + 4) = v24;
LABEL_37:
        *(_DWORD *)v25 = 0;
        goto LABEL_38;
      }
      v27 = 0;
      goto LABEL_34;
    }
    sub_1C61FD518((char **)a1, (char **)a2);
  }
  return v2;
}

void sub_1C51BD740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 4;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 32 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    if (*((_DWORD *)v4 - 6) <= 0xFFFFFFFD)
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
      {
        v6 = v4;
        v7 = v3;
        free(v5);
        v4 = v6;
        v3 = v7;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

BOOL sub_1C51BD7B8(const llvm::MachineFunction **a1, unsigned __int16 a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[48];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 0x600000000;
  v21 = a3;
  v22 = v24;
  v5 = *(_DWORD *)(a3 + 44);
  v25 = v5;
  v6 = v5 + 63;
  if ((v5 + 63) < 0x40)
  {
    v11 = 0;
    v10 = v24;
  }
  else
  {
    v7 = v6 >> 6;
    if (v6 >= 0x1C0)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v6 >> 6, 8);
      v10 = v22;
      v8 = v23;
      LOBYTE(v5) = v25;
      v9 = v23;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = v24;
    }
    bzero(&v10[8 * v8], 8 * v7);
    v11 = (v9 + v7);
    LODWORD(v23) = v9 + v7;
  }
  if ((v5 & 0x3F) != 0)
    *(_QWORD *)&v10[8 * v11 - 8] &= ~(-1 << (v5 & 0x3F));
  llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)&v21, a1);
  if (v21)
    v12 = (_QWORD *)(v21 + 8);
  else
    v12 = 0;
  v13 = *(unsigned int *)(*v12 + 24 * a2 + 16);
  v14 = (_WORD *)(v12[6] + ((v13 >> 3) & 0x1FFFFFFE));
  v16 = *v14;
  v15 = v14 + 1;
  v17 = v16 + (v13 & 0xF) * a2;
  do
  {
    v18 = (1 << v17) & v22[v17 >> 6];
    if (v18)
      break;
    v19 = *v15++;
    v17 += v19;
  }
  while (v19);
  if (v22 != (_QWORD *)v24)
    free(v22);
  return v18 != 0;
}

void sub_1C51BD954(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void **v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t *v33;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x200000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, *(unsigned int *)(a2 + 16), 4);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 4 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    v12 = v5 + 32;
    goto LABEL_13;
  }
  v13 = (uint64_t)(v5 - *a1) >> 5;
  if ((unint64_t)(v13 + 1) >> 59)
    abort();
  v14 = v4 - *a1;
  v15 = v14 >> 4;
  if (v14 >> 4 <= (unint64_t)(v13 + 1))
    v15 = v13 + 1;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
    v16 = 0x7FFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  v33 = a1 + 2;
  if (v16 >> 59)
    sub_1C4764EE4();
  v17 = (char *)operator new(32 * v16);
  v18 = &v17[32 * v13];
  __p = v17;
  v30 = v18;
  v32 = &v17[32 * v16];
  *(_QWORD *)v18 = *(_QWORD *)a2;
  v19 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  v20 = (void **)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0x200000000;
  v21 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v21 && v20 != (void **)(a2 + 8))
  {
    v22 = *(void **)(a2 + 8);
    if (v22 != (void *)(a2 + 24))
    {
      *v20 = v22;
      v28 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v18 + 4) = v21;
      *((_DWORD *)v18 + 5) = v28;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_28;
    }
    if (v21 >= 3)
    {
      *((_DWORD *)v18 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)(v18 + 24), v21, 4);
      v23 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v23)
        goto LABEL_27;
      v22 = *(void **)(a2 + 8);
      v19 = *v20;
    }
    else
    {
      v23 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v19, v22, 4 * v23);
LABEL_27:
    *((_DWORD *)v18 + 4) = v21;
LABEL_28:
    *(_DWORD *)(a2 + 16) = 0;
  }
  v31 = v18 + 32;
  sub_1C61FD730(a1, &__p);
  v12 = a1[1];
  v24 = v30;
  if (v31 != v30)
  {
    v25 = v31 - 8;
    do
    {
      v26 = (char *)*((_QWORD *)v25 - 2);
      if (v25 != v26)
        free(v26);
      v27 = v25 - 24;
      v25 -= 32;
    }
    while (v27 != v24);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

void sub_1C51BDBD0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 8;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 24;
        v6 -= 32;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C51BDC50()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Split critical edges during machine sinking";
  v4.n128_u64[1] = 43;
  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FC528, "machine-sink-split", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FC528, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Use block frequency info to find successors to sink";
  v4.n128_u64[1] = 51;
  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FC5E8, "machine-sink-bfi", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FC5E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Percentage threshold for splitting single-instruction critical edge. If the branch "
                                     "threshold is higher than this threshold, we allow speculative execution of up to 1 "
                                     "instruction to avoid branching to splitted critical edge";
  v4.n128_u64[1] = 222;
  v1 = 1;
  v2 = 40;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FC6A8, "machine-sink-split-probability-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FC6A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Do not try to find alias store for a load if there is a in-path block whose instruc"
                                     "tion number is higher than this threshold.";
  v4.n128_u64[1] = 125;
  v1 = 1;
  v2 = 2000;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FC768, "machine-sink-load-instrs-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FC768, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Do not try to find alias store for a load if the block number in the straight line "
                                     "is higher than this threshold.";
  v4.n128_u64[1] = 113;
  v1 = 1;
  v2 = 20;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FC828, "machine-sink-load-blocks-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FC828, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Sink instructions into cycles to avoid register spills";
  v4.n128_u64[1] = 54;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1ED7FC8E8, "sink-insts-to-avoid-spills", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FC8E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"The maximum number of instructions considered for cycle sinking.";
  v4.n128_u64[1] = 64;
  v1 = 1;
  v2 = 50;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FC9A8, "machine-sink-cycle-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FC9A8, &dword_1C475E000);
}

uint64_t llvm::shouldOptimizeForSize(uint64_t a1, uint64_t a2, llvm::MachineBlockFrequencyInfo *a3)
{
  uint64_t result;
  int *v7;
  int v8;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  const llvm::MachineBasicBlock *v15;
  const llvm::MachineBasicBlock *v16;
  uint64_t *BlockProfileCount;
  char v18;
  uint64_t *v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  const llvm::MachineBasicBlock *v26;
  const llvm::MachineBasicBlock *v27;
  uint64_t *v28;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  char v32;
  int v33;
  const llvm::MachineBasicBlock *v34;
  const llvm::MachineBasicBlock *v35;
  uint64_t *v36;
  char v37;
  _QWORD v38[2];
  char v39;

  result = 0;
  if (a2 && a3)
  {
    v7 = *(int **)(a2 + 8);
    if (!v7)
      return 0;
    if (byte_1ED838258)
      return 1;
    if (!byte_1ED837DD8)
      return 0;
    if (byte_1ED837F58)
      goto LABEL_42;
    v8 = *v7;
    if (!*v7 && byte_1ED838018 != 0)
      goto LABEL_42;
    if (v8 == 2)
    {
      if (byte_1ED82E960)
      {
        v10 = 1;
      }
      else
      {
        v33 = *((unsigned __int8 *)v7 + 72);
        v10 = *((_BYTE *)v7 + 72) != 0;
        if (!v33 && byte_1ED8380D8)
          goto LABEL_42;
      }
      if (v10 && byte_1ED838198)
        goto LABEL_42;
    }
    if (!byte_1ED837E98 || *(_BYTE *)(a2 + 51) && *(_BYTE *)(a2 + 50))
    {
      if (v8 == 2)
      {
        v11 = dword_1ED8383D8;
        llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
        if (!v39
          || (v12 = v38[0], v13 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v11), v14)
          && v13 >= v12)
        {
          v15 = (const llvm::MachineBasicBlock *)(a1 + 320);
          v16 = *(const llvm::MachineBasicBlock **)(a1 + 328);
          if (v16 == v15)
            return 1;
          while (1)
          {
            BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v16);
            if (!v18)
              break;
            v19 = BlockProfileCount;
            v20 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v11);
            result = 0;
            if (v21)
            {
              if (v20 >= (unint64_t)v19)
              {
                v16 = (const llvm::MachineBasicBlock *)*((_QWORD *)v16 + 1);
                result = 1;
                if (v16 != v15)
                  continue;
              }
            }
            return result;
          }
        }
      }
      else
      {
        v22 = dword_1ED838318;
        llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
        if (!v39
          || (v23 = v38[0], v24 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v22), !v25)
          || v24 > v23)
        {
          v26 = (const llvm::MachineBasicBlock *)(a1 + 320);
          v27 = *(const llvm::MachineBasicBlock **)(a1 + 328);
          if (v27 == v26)
            return 1;
          while (1)
          {
            v28 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v27);
            if (v29)
            {
              v30 = v28;
              v31 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v22);
              if (v32)
              {
                if (v31 <= (unint64_t)v30)
                  break;
              }
            }
            v27 = (const llvm::MachineBasicBlock *)*((_QWORD *)v27 + 1);
            result = 1;
            if (v27 == v26)
              return result;
          }
        }
      }
      return 0;
    }
LABEL_42:
    llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
    if (!v39 || *(_BYTE *)(a2 + 40) && *(_QWORD *)(a2 + 32) >= v38[0])
    {
      v34 = (const llvm::MachineBasicBlock *)(a1 + 320);
      v35 = *(const llvm::MachineBasicBlock **)(a1 + 328);
      if (v35 == v34)
        return 1;
      while (1)
      {
        v36 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v35);
        if (!v37 || !*(_BYTE *)(a2 + 40) || *(_QWORD *)(a2 + 32) < (unint64_t)v36)
          break;
        v35 = (const llvm::MachineBasicBlock *)*((_QWORD *)v35 + 1);
        result = 1;
        if (v35 == v34)
          return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::shouldOptimizeForSize(const llvm::MachineBasicBlock *a1, uint64_t a2, llvm::MachineBlockFrequencyInfo *a3)
{
  uint64_t result;
  int *v6;
  int v7;
  BOOL v8;
  int v9;
  _BOOL4 v10;
  int v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t *BlockProfileCount;
  char v19;
  int v20;
  uint64_t *v21;
  char v22;
  uint64_t *v23;
  unint64_t v24;
  char v25;

  result = 0;
  if (a2 && a3)
  {
    v6 = *(int **)(a2 + 8);
    if (!v6)
      return 0;
    if (byte_1ED838258)
      return 1;
    if (!byte_1ED837DD8)
      return 0;
    if (byte_1ED837F58 || ((v7 = *v6) == 0 ? (v8 = byte_1ED838018 == 0) : (v8 = 1), !v8))
    {
LABEL_31:
      BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, a1);
      if (v19 && *(_BYTE *)(a2 + 40))
        return *(_QWORD *)(a2 + 32) >= (unint64_t)BlockProfileCount;
      return 0;
    }
    if (v7 == 2)
    {
      if (byte_1ED82E960)
      {
        v10 = 1;
      }
      else
      {
        v9 = *((unsigned __int8 *)v6 + 72);
        v10 = *((_BYTE *)v6 + 72) != 0;
        if (!v9 && byte_1ED8380D8)
          goto LABEL_31;
      }
      if (v10 && byte_1ED838198)
        goto LABEL_31;
    }
    if (byte_1ED837E98 && (!*(_BYTE *)(a2 + 51) || !*(_BYTE *)(a2 + 50)))
      goto LABEL_31;
    if (v7 == 2)
    {
      v11 = dword_1ED8383D8;
      v12 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, a1);
      if (v13)
      {
        v14 = v12;
        v15 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v11);
        return v16 && v15 >= (unint64_t)v14;
      }
      return 0;
    }
    v20 = dword_1ED838318;
    v21 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, a1);
    if (!v22)
      return 1;
    v23 = v21;
    v24 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v20);
    return !v25 || v24 > (unint64_t)v23;
  }
  return result;
}

uint64_t llvm::shouldOptimizeForSize(llvm::MachineBasicBlock *a1, uint64_t a2, llvm::MBFIWrapper *this)
{
  uint64_t result;
  uint64_t BlockFreq;
  int *v8;
  int v9;
  uint64_t *****ProfileCountFromFreq;
  char v11;
  int v13;
  _BOOL4 v14;
  int v15;
  uint64_t *****v16;
  char v17;
  uint64_t *****v18;
  unint64_t v19;
  char v20;
  int v21;
  uint64_t *****v22;
  char v23;
  uint64_t *****v24;
  unint64_t v25;
  char v26;

  result = 0;
  if (a2)
  {
    if (this)
    {
      BlockFreq = llvm::MBFIWrapper::getBlockFreq(this, a1);
      result = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v8 = *(int **)(a2 + 8);
        if (!v8)
          return 0;
        if (byte_1ED838258)
          return 1;
        if (!byte_1ED837DD8)
          return 0;
        if (byte_1ED837F58 || (v9 = *v8) == 0 && byte_1ED838018)
        {
LABEL_13:
          ProfileCountFromFreq = llvm::MachineBlockFrequencyInfo::getProfileCountFromFreq((llvm::MachineBlockFrequencyInfo *)result, BlockFreq);
          if (v11 && *(_BYTE *)(a2 + 40))
            return *(_QWORD *)(a2 + 32) >= (unint64_t)ProfileCountFromFreq;
          return 0;
        }
        if (v9 == 2)
        {
          if (byte_1ED82E960)
          {
            v14 = 1;
          }
          else
          {
            v13 = *((unsigned __int8 *)v8 + 72);
            v14 = *((_BYTE *)v8 + 72) != 0;
            if (!v13 && byte_1ED8380D8)
              goto LABEL_13;
          }
          if (v14 && byte_1ED838198)
            goto LABEL_13;
        }
        if (byte_1ED837E98 && (!*(_BYTE *)(a2 + 51) || !*(_BYTE *)(a2 + 50)))
          goto LABEL_13;
        if (v9 == 2)
        {
          v15 = dword_1ED8383D8;
          v16 = llvm::MachineBlockFrequencyInfo::getProfileCountFromFreq((llvm::MachineBlockFrequencyInfo *)result, BlockFreq);
          if (v17)
          {
            v18 = v16;
            v19 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v15);
            return v20 && v19 >= (unint64_t)v18;
          }
          return 0;
        }
        v21 = dword_1ED838318;
        v22 = llvm::MachineBlockFrequencyInfo::getProfileCountFromFreq((llvm::MachineBlockFrequencyInfo *)result, BlockFreq);
        if (!v23)
          return 1;
        v24 = v22;
        v25 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v21);
        return !v26 || v25 > (unint64_t)v24;
      }
    }
  }
  return result;
}

uint64_t llvm::GenericSSAContext<llvm::MachineFunction>::getEntryBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 328);
}

_QWORD *llvm::GenericSSAContext<llvm::MachineFunction>::setFunction(_QWORD *result, uint64_t a2)
{
  *result = *(_QWORD *)(a2 + 40);
  result[1] = a2;
  return result;
}

void llvm::GenericSSAContext<llvm::MachineFunction>::print(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = a2;
  *a2 = &off_1E8146970;
  a2[1] = a1;
}

{
  a2[3] = a2;
  *a2 = &off_1E81469B8;
  a2[1] = a1;
}

uint64_t *llvm::GenericSSAContext<llvm::MachineFunction>::print@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *result;
  *a3 = &off_1E8146A00;
  a3[1] = v3;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

void sub_1C51BE560()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51BE574(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8146970;
  result[1] = v3;
  return result;
}

uint64_t sub_1C51BE5A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8146970;
  a2[1] = v2;
  return result;
}

void sub_1C51BE5C4(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::MachineBasicBlock::printName(*(llvm::MachineBasicBlock **)(a1 + 8), a2, 1, 0);
}

void sub_1C51BE5D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51BE5EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81469B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C51BE620(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81469B8;
  a2[1] = v2;
  return result;
}

void sub_1C51BE63C(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::MachineInstr::print(*(llvm::MachineInstr **)(a1 + 8), a2, 1, 0, 0, 1, 0);
}

void sub_1C51BE65C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C51BE670(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8146A00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C51BE6A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8146A00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C51BE6C8(uint64_t a1, llvm::raw_ostream *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t UniqueVRegDef;
  llvm::MachineInstr *v11;
  _WORD *v12;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = operator new(0x28uLL);
  *(_QWORD *)v8 = &off_1E814D010;
  v8[2] = v4;
  *((_QWORD *)v8 + 2) = v6;
  v8[6] = 0;
  *((_QWORD *)v8 + 4) = v7;
  sub_1C52C9630((llvm::raw_ostream *)v8, a2);
  operator delete(v8);
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 8), v9);
    if (UniqueVRegDef)
    {
      v11 = (llvm::MachineInstr *)UniqueVRegDef;
      v12 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 8250;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ": ", 2uLL);
      }
      llvm::MachineInstr::print(v11, a2, 1, 0, 0, 1, 0);
    }
  }
}

_QWORD *llvm::MachineSSAUpdater::MachineSSAUpdater(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[2] = a3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 40);
  a1[3] = v5;
  a1[4] = v6;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[2] = a3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 40);
  a1[3] = v5;
  a1[4] = v6;
  return a1;
}

uint64_t llvm::MachineSSAUpdater::HasValueForBlock(uint64_t **this, llvm::MachineBasicBlock *a2)
{
  uint64_t *v2;
  uint64_t v4;
  llvm::MachineBasicBlock *v5;

  v2 = *this;
  v4 = 0;
  v5 = a2;
  return sub_1C61252B8(v2, &v5, &v4);
}

uint64_t llvm::MachineSSAUpdater::GetValueAtEndOfBlock(llvm::MachineSSAUpdater *this, llvm::MachineBasicBlock *a2)
{
  return llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(this, a2, 0);
}

uint64_t llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(llvm::MachineSSAUpdater *this, llvm::MachineBasicBlock *a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[5];
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[6];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)this;
  v10 = 0;
  v11[0] = (uint64_t)a2;
  if (sub_1C61252B8(v6, v11, &v10))
  {
    v7 = *(unsigned int *)(v10 + 8);
    if ((_DWORD)v7)
      return v7;
  }
  else
  {
    v7 = 0;
  }
  if ((a3 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 2);
    v11[0] = (uint64_t)this;
    v11[1] = (uint64_t)v6;
    v11[3] = 0;
    v11[4] = 0;
    v11[2] = v9;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v17;
    v16 = 0x400000000;
    v17[4] = v18;
    v17[5] = 0;
    v18[0] = 0;
    v18[1] = 1;
    v7 = sub_1C61FD93C(v11, (uint64_t)a2);
    sub_1C61FDA78((uint64_t)v11);
  }
  return v7;
}

uint64_t llvm::MachineSSAUpdater::GetValueInMiddleOfBlock(llvm::MachineSSAUpdater *this, llvm::MachineBasicBlock *a2, char a3)
{
  uint64_t *v6;
  llvm::MachineBasicBlock **v7;
  llvm::MachineBasicBlock **v8;
  uint64_t v9;
  char v10;
  llvm::MachineBasicBlock *v11;
  unsigned int ValueAtEndOfBlockInternal;
  uint64_t v13;
  llvm::MachineBasicBlock **v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unint64_t *FirstTerminator;
  uint64_t v31;
  llvm::MachineFunction *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::MachineFunction *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t isConstantValuePHI;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[18];

  v52[16] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)this;
  v50 = a2;
  v46 = 0;
  if ((sub_1C61252B8(v6, &v50, &v46) & 1) == 0)
    return llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(this, a2, a3);
  v7 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 8);
  v8 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 9);
  if (v7 == v8)
  {
    if ((a3 & 1) != 0)
      return 0;
    FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
    sub_1C51BED80(0xAu, (uint64_t)a2, FirstTerminator, *((_QWORD *)this + 1), *((_QWORD *)this + 4), *((_QWORD *)this + 3));
    return *(unsigned int *)(*(_QWORD *)(v31 + 32) + 4);
  }
  LODWORD(v9) = 0;
  v50 = v52;
  v51 = 0x800000000;
  v10 = 1;
  do
  {
    v11 = *v7;
    ValueAtEndOfBlockInternal = llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(this, *v7, a3);
    v13 = v51;
    if (v51 >= (unint64_t)HIDWORD(v51))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 16);
      v13 = v51;
    }
    v14 = (llvm::MachineBasicBlock **)((char *)v50 + 16 * v13);
    *v14 = v11;
    v14[1] = (llvm::MachineBasicBlock *)ValueAtEndOfBlockInternal;
    v15 = v51 + 1;
    LODWORD(v51) = v51 + 1;
    if (ValueAtEndOfBlockInternal == (_DWORD)v9)
      v16 = v9;
    else
      v16 = 0;
    if ((v10 & 1) != 0)
      v9 = ValueAtEndOfBlockInternal;
    else
      v9 = v16;
    ++v7;
    v10 = 0;
  }
  while (v7 != v8);
  if (!(_DWORD)v9)
  {
    v17 = (unint64_t *)((char *)a2 + 48);
    if ((llvm::MachineBasicBlock *)((char *)a2 + 48) != (llvm::MachineBasicBlock *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF8)
      && ((v18 = *((_QWORD *)a2 + 7), v19 = **(unsigned __int16 **)(v18 + 16), v19 != 69) ? (v20 = v19 == 0) : (v20 = 1),
          v20))
    {
      v46 = 0;
      v47 = 0;
      LODWORD(v48) = 0;
      if (v15)
      {
        v21 = 0;
        v22 = 16 * v15;
        do
        {
          v23 = (char *)v50 + v21;
          *((_DWORD *)sub_1C6144C70((uint64_t)&v46, (uint64_t *)((char *)v50 + v21)) + 2) = *((_DWORD *)v23 + 2);
          v21 += 16;
        }
        while (v22 != v21);
      }
      if ((unint64_t *)v18 != v17)
      {
        while (1)
        {
          v24 = **(unsigned __int16 **)(v18 + 16);
          if (v24 != 69 && v24 != 0)
            break;
          v26 = *(_DWORD *)(v18 + 40);
          if (v26 == 1)
          {
LABEL_45:
            v9 = *(unsigned int *)(*(_QWORD *)(v18 + 32) + 4);
            goto LABEL_47;
          }
          v27 = 1;
          while (1)
          {
            v28 = *(_QWORD *)(v18 + 32);
            v29 = *(_DWORD *)(v28 + 32 * v27 + 4);
            v45 = 0;
            v45 = *(_QWORD *)(v28 + 32 * (v27 + 1) + 16);
            if (*((_DWORD *)sub_1C6144C70((uint64_t)&v46, &v45) + 2) != v29)
              break;
            v27 += 2;
            if (v26 == v27)
              goto LABEL_45;
          }
          if ((*(_BYTE *)v18 & 4) == 0)
          {
            while ((*(_WORD *)(v18 + 44) & 8) != 0)
              v18 = *(_QWORD *)(v18 + 8);
          }
          v9 = 0;
          v18 = *(_QWORD *)(v18 + 8);
          if ((unint64_t *)v18 == v17)
            goto LABEL_47;
        }
      }
      v9 = 0;
LABEL_47:
      MEMORY[0x1CAA32FB4](v46, 8);
      if ((_DWORD)v9)
        goto LABEL_49;
    }
    else
    {
      v9 = 0;
    }
    if ((a3 & 1) == 0)
    {
      if (v17 != (unint64_t *)(*v17 & 0xFFFFFFFFFFFFFFF8))
        v17 = (unint64_t *)*((_QWORD *)a2 + 7);
      v33 = sub_1C51BED80(0, (uint64_t)a2, v17, *((_QWORD *)this + 1), *((_QWORD *)this + 4), *((_QWORD *)this + 3));
      v35 = v34;
      if ((_DWORD)v51)
      {
        v36 = v33;
        v37 = 0;
        v38 = 16 * v51;
        do
        {
          v39 = *(_DWORD *)((char *)v50 + v37 + 8);
          v47 = 0;
          LODWORD(v46) = 0;
          HIDWORD(v46) = v39;
          v48 = 0;
          v49 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v36, (const llvm::MachineOperand *)&v46);
          v40 = *(_QWORD *)((char *)v50 + v37);
          v47 = 0;
          v48 = v40;
          LODWORD(v46) = 4;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v36, (const llvm::MachineOperand *)&v46);
          v37 += 16;
        }
        while (v38 != v37);
      }
      isConstantValuePHI = llvm::MachineInstr::isConstantValuePHI((llvm::MachineInstr *)v35);
      if ((_DWORD)isConstantValuePHI)
      {
        v9 = isConstantValuePHI;
        if ((*(_BYTE *)v35 & 4) != 0)
        {
          v42 = v35;
        }
        else
        {
          v42 = v35;
          if ((*(_WORD *)(v35 + 44) & 8) != 0)
          {
            v42 = v35;
            do
              v42 = *(_QWORD *)(v42 + 8);
            while ((*(_WORD *)(v42 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v35 + 24) + 40, v35, *(_QWORD *)(v42 + 8));
      }
      else
      {
        v43 = *((_QWORD *)this + 2);
        if (v43)
        {
          v44 = *(unsigned int *)(v43 + 8);
          if (v44 >= *(_DWORD *)(v43 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v43, v43 + 16, v44 + 1, 8);
            LODWORD(v44) = *(_DWORD *)(v43 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v43 + 8 * v44) = v35;
          ++*(_DWORD *)(v43 + 8);
        }
        v9 = *(unsigned int *)(*(_QWORD *)(v35 + 32) + 4);
      }
    }
  }
LABEL_49:
  if (v50 != v52)
    free(v50);
  return v9;
}

llvm::MachineFunction *sub_1C51BED80(unsigned int a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int IncompleteVirtualRegister;
  uint64_t v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31[4];

  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a5, "", 0);
  *(_QWORD *)(*(_QWORD *)(a5 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a4 & 0xFFFFFFFFFFFFFFFBLL;
  v13 = *(_QWORD *)(a5 + 8);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v14 = *(_QWORD *)(a6 + 8) + 48 * a1;
  v15 = *(llvm::MachineFunction **)(a2 + 32);
  v30 = 0;
  v16 = *((_QWORD *)v15 + 28);
  if (v16)
    *((_QWORD *)v15 + 28) = *(_QWORD *)v16;
  else
    v16 = sub_1C484358C((uint64_t)v15 + 128, 72, 3);
  v31[0] = 0;
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v15, v14, v31, 0);
  if (v31[0])
    llvm::MetadataTracking::untrack((uint64_t)v31, v31[0]);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v17 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(unsigned int *)(v16 + 40);
  if ((_DWORD)v19)
  {
    v23 = *(_QWORD *)(v16 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = 32 * v19;
    do
    {
      if (!*(_BYTE *)v23)
      {
        v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0)
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v26);
        else
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        v28 = *v27;
        if (*v27)
        {
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = v23;
          *(_QWORD *)(v23 + 16) = v29;
          if ((*(_BYTE *)(v23 + 3) & 1) != 0)
          {
            *(_QWORD *)(v23 + 24) = v28;
          }
          else
          {
            *(_QWORD *)(v23 + 24) = 0;
            v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v23 + 16) = v23;
          *(_QWORD *)(v23 + 24) = 0;
        }
        *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  v20 = *(_QWORD *)(v18 + 728);
  if (v20)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 24))(v20, v16);
  v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = v21 | *(_QWORD *)v16 & 7;
  *(_QWORD *)(v16 + 8) = a3;
  *(_QWORD *)(v21 + 8) = v16;
  *a3 = *a3 & 7 | v16;
  memset(&v31[1], 0, 24);
  LODWORD(v31[0]) = 0x1000000;
  HIDWORD(v31[0]) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v15, (const llvm::MachineOperand *)v31);
  return v15;
}

uint64_t llvm::MachineSSAUpdater::RewriteUse(llvm::MachineSSAUpdater *this, llvm::MachineOperand *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  llvm::MachineOperand *v8;
  unsigned int ValueAtEndOfBlockInternal;

  v3 = *((_QWORD *)a2 + 1);
  v4 = **(unsigned __int16 **)(v3 + 16);
  if (v4 == 69 || v4 == 0)
  {
    v6 = *(_QWORD *)(v3 + 32);
    v7 = 1;
    do
    {
      v8 = (llvm::MachineOperand *)(v6 + 32 * v7);
      v7 += 2;
    }
    while (v8 != a2);
    ValueAtEndOfBlockInternal = llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(this, *(llvm::MachineBasicBlock **)(v6 + 32 * (v7 - 1) + 16), 0);
  }
  else
  {
    ValueAtEndOfBlockInternal = llvm::MachineSSAUpdater::GetValueInMiddleOfBlock(this, *(llvm::MachineBasicBlock **)(v3 + 24), 0);
  }
  return llvm::MachineOperand::setReg((uint64_t)a2, ValueAtEndOfBlockInternal);
}

uint64_t *sub_1C51BF010(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t *v17;
  uint64_t i;
  uint64_t v19;

  v5 = result;
  do
  {
    v6 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v6)
      return result;
    v7 = 0;
    v8 = *a2;
    v9 = *a2 + 8 * v6;
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v10 = v11;
      if (!*(_DWORD *)(v11 + 40))
        continue;
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v12);
        if (*(_DWORD *)(v14 + 24))
        {
          if (!v13)
            goto LABEL_25;
        }
        else
        {
          v17 = (unint64_t *)(*(_QWORD *)v14 + 48);
          for (i = *(_QWORD *)(*(_QWORD *)v14 + 56); (unint64_t *)i != v17; i = *(_QWORD *)(i + 8))
          {
            if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
            {
              v17 = (unint64_t *)i;
              break;
            }
          }
          sub_1C51BED80(0xAu, *(_QWORD *)v14, v17, *(_QWORD *)(*v5 + 8), *(_QWORD *)(*v5 + 32), *(_QWORD *)(*v5 + 24));
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
          result = sub_1C6144C70(v5[1], (uint64_t *)v14);
          *((_DWORD *)result + 2) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 16) = v14;
          *(_DWORD *)(v14 + 24) = (*(_DWORD *)(a3 + 24))++;
          if (!v13)
          {
LABEL_25:
            v13 = v14;
            goto LABEL_26;
          }
        }
        if (v13 != v14)
        {
          v15 = *(_DWORD *)(v14 + 24);
          do
          {
            while (1)
            {
              v16 = *(_DWORD *)(v13 + 24);
              if (v16 >= v15)
                break;
              v13 = *(_QWORD *)(v13 + 32);
              if (!v13)
                goto LABEL_25;
            }
            while (1)
            {
              v15 = *(_DWORD *)(v14 + 24);
              if (v15 >= v16)
                break;
              v14 = *(_QWORD *)(v14 + 32);
              if (!v14)
                goto LABEL_26;
            }
          }
          while (v13 != v14);
        }
LABEL_26:
        ++v12;
      }
      while (v12 != *(_DWORD *)(v10 + 40));
      if (v13)
      {
        if (v13 != *(_QWORD *)(v10 + 32))
        {
          *(_QWORD *)(v10 + 32) = v13;
          v7 = 1;
        }
      }
    }
    while (v9 != v8);
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t sub_1C51BF194(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BOOL4 v13;
  char v14;

  if (a2)
  {
    v2 = 0;
    v3 = result + 8 * a2;
    v4 = v3;
    do
    {
      while (1)
      {
        v6 = *(_QWORD *)(v4 - 8);
        v4 -= 8;
        v5 = v6;
        v7 = *(_QWORD *)(v6 + 16);
        if (v7 == v6)
          break;
        v8 = *(_QWORD *)(v5 + 32);
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(unsigned int *)(v5 + 40);
        if ((_DWORD)v10)
        {
          v11 = 0;
          while (2)
          {
            for (i = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11); i != v8; i = *(_QWORD *)(i + 32))
            {
              if (*(_QWORD *)(i + 16) == i)
              {
                v9 = v5;
                goto LABEL_13;
              }
            }
            if (++v11 != v10)
              continue;
            break;
          }
        }
LABEL_13:
        if (v9 == v7)
          break;
        *(_QWORD *)(v5 + 16) = v9;
        v2 = v4 != result;
        if (v4 == result)
          v4 = v3;
      }
      v13 = v4 != result;
      v14 = v13 | v2;
      v2 &= v13;
      if (v4 == result)
        v4 = v3;
    }
    while ((v14 & 1) != 0);
  }
  return result;
}

void sub_1C51BF238(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MachineInstr *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(uint64_t **)a2;
    v6 = 8 * v2;
    do
    {
      v7 = *v5;
      if (*(_QWORD *)(*v5 + 16) == *v5)
      {
        sub_1C61FDFB0(a1, *(_QWORD *)v7, a2);
        if (!*(_DWORD *)(v7 + 8))
        {
          v8 = *(_QWORD *)v7;
          v9 = (unint64_t *)(*(_QWORD *)v7 + 48);
          if (v9 != (unint64_t *)(*v9 & 0xFFFFFFFFFFFFFFF8))
            v9 = *(unint64_t **)(v8 + 56);
          sub_1C51BED80(0, v8, v9, *(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 32), *(_QWORD *)(*a1 + 24));
          v11 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4);
          *(_DWORD *)(v7 + 8) = v11;
          *((_DWORD *)sub_1C6144C70(a1[1], (uint64_t *)v7) + 2) = v11;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)a2;
      v14 = *(_QWORD *)a2 + 8 * v12;
      do
      {
        v16 = *(_QWORD *)(v14 - 8);
        v14 -= 8;
        v15 = v16;
        v17 = *(_QWORD *)(v16 + 16);
        if (v17 == v16)
        {
          v18 = sub_1C61FE088(*(_DWORD *)(v15 + 8), *(_QWORD *)(*a1 + 32));
          if (v18)
          {
            v19 = (llvm::MachineInstr *)v18;
            if (*(_DWORD *)(v15 + 40))
            {
              v20 = 0;
              do
              {
                v21 = *(uint64_t **)(*(_QWORD *)(v15 + 48) + 8 * v20);
                sub_1C61FE0D0(v19, *(_DWORD *)(v21[2] + 8), *v21);
                ++v20;
              }
              while (v20 != *(_DWORD *)(v15 + 40));
            }
            v22 = a1[2];
            if (v22)
            {
              v23 = *(unsigned int *)(v22 + 8);
              if (v23 >= *(unsigned int *)(v22 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], v22 + 16, v23 + 1, 8);
                v23 = *(unsigned int *)(v22 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v19;
              ++*(_DWORD *)(v22 + 8);
            }
          }
        }
        else
        {
          *((_DWORD *)sub_1C6144C70(a1[1], (uint64_t *)v15) + 2) = *(_DWORD *)(v17 + 8);
        }
      }
      while ((uint64_t *)v14 != v13);
    }
  }
}

uint64_t sub_1C51BF3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[21];

  v26[20] = *MEMORY[0x1E0C80C00];
  v26[0] = a2;
  v25 = 0x1400000001;
  v3 = a1 + 24;
  v23 = *(_QWORD *)(a2 + 24);
  v24 = v26;
  *(_QWORD *)(sub_1C6180A54(a1 + 24, &v23)[1] + 56) = a2;
  v4 = v25;
  if (!(_DWORD)v25)
  {
LABEL_29:
    v21 = 1;
    goto LABEL_31;
  }
  while (1)
  {
    v5 = *((_QWORD *)v24 + --v4);
    LODWORD(v25) = v4;
    v6 = *(_DWORD *)(v5 + 40);
    if (v6 != 1)
      break;
LABEL_28:
    if (!v4)
      goto LABEL_29;
  }
  v7 = 1;
  while (1)
  {
    v8 = *(_QWORD *)(v5 + 32);
    v9 = *(unsigned int *)(v8 + 32 * v7 + 4);
    v23 = *(_QWORD *)(v8 + 32 * (v7 + 1) + 16);
    v10 = *(_QWORD *)(sub_1C6180A54(v3, &v23)[1] + 16);
    v11 = *(_DWORD *)(v10 + 8);
    if (v11)
    {
      if ((_DWORD)v9 != v11)
        break;
      goto LABEL_6;
    }
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v14 = (uint64_t *)((v9 & 0x80000000) != 0
                    ? *(_QWORD *)(v13 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v13 + 272) + 8 * v9);
    v15 = *v14;
    if (!v15)
      break;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    {
      v15 = *(_QWORD *)(v15 + 24);
      if (!v15 || (*(_BYTE *)(v15 + 3) & 1) == 0)
        break;
    }
    v16 = *(_QWORD *)(v15 + 8);
    if (!v16)
      break;
    v17 = **(unsigned __int16 **)(v16 + 16);
    v18 = v17 == 69 || v17 == 0;
    if (!v18 || *(_QWORD *)(v16 + 24) != *(_QWORD *)v10)
      break;
    v19 = *(_QWORD *)(v10 + 56);
    if (v19)
    {
      if (v16 != v19)
        break;
    }
    else
    {
      *(_QWORD *)(v10 + 56) = v16;
      v20 = v25;
      if (v25 >= (unint64_t)HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
        v20 = v25;
      }
      *((_QWORD *)v24 + v20) = v16;
      LODWORD(v25) = v25 + 1;
    }
LABEL_6:
    v12 = v7 + 2;
    v7 = (v7 + 2);
    if (v6 == v12)
    {
      v4 = v25;
      goto LABEL_28;
    }
  }
  v21 = 0;
LABEL_31:
  if (v24 != v26)
    free(v24);
  return v21;
}

uint64_t sub_1C51BF5F0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Strip Debug Module";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "mir-strip-debug";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FA2;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51BF680;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C51BF680()
{
  uint64_t result;
  char v1;

  result = operator new();
  v1 = byte_1ED7FCAE8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F6FA2;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8146A48;
  *(_BYTE *)(result + 28) = v1;
  return result;
}

void sub_1C51BF6D8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C51BF6FC(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C51BF740(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  const Function *v10;
  uint64_t MachineFunction;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  char v20;
  llvm::MachineModuleInfo *v22;
  unsigned __int8 *v23;
  const char *v24;
  __int16 v25;

  if (*(_BYTE *)(a1 + 28) && (v24 = "llvm.debugify", v25 = 259, !llvm::Module::getNamedMetadata(a2, (uint64_t)&v24)))
  {
    v20 = 0;
  }
  else
  {
    v4 = **(void ****)(a1 + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != &llvm::MachineModuleInfoWrapperPass::ID);
    v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 == a2 + 24)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v22 = (llvm::MachineModuleInfo *)(v6 + 32);
      do
      {
        if (v8)
          v10 = (const Function *)(v8 - 56);
        else
          v10 = 0;
        MachineFunction = llvm::MachineModuleInfo::getMachineFunction(v22, v10);
        if (MachineFunction)
        {
          v12 = MachineFunction + 320;
          for (i = *(_QWORD *)(MachineFunction + 328); i != v12; i = *(_QWORD *)(i + 8))
          {
            v14 = *(_QWORD *)(i + 56);
            if (v14 != i + 48)
            {
              while (1)
              {
                if (!v14 || (v15 = v14, (*(_BYTE *)v14 & 4) == 0))
                {
                  v15 = v14;
                  if ((*(_WORD *)(v14 + 44) & 8) != 0)
                  {
                    v15 = v14;
                    do
                      v15 = *(_QWORD *)(v15 + 8);
                    while ((*(_WORD *)(v15 + 44) & 8) != 0);
                  }
                }
                v16 = *(_QWORD *)(v15 + 8);
                if (**(unsigned __int16 **)(v14 + 16) - 13 <= 4 && *(_DWORD *)(v14 + 40) >= 2u)
                  break;
                v19 = *(unsigned __int8 **)(v14 + 56);
                v18 = (unsigned __int8 **)(v14 + 56);
                v7 = v19;
                if (v19)
                {
                  v23 = 0;
                  if (&v23 != v18)
                  {
                    llvm::MetadataTracking::untrack((uint64_t)v18, v7);
                    v7 = v23;
                    *v18 = v23;
                    if (v7)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v23, v7, (uint64_t)v18);
                      v23 = 0;
                    }
                  }
                  goto LABEL_28;
                }
LABEL_29:
                v14 = v16;
                if (v16 == i + 48)
                  goto LABEL_34;
              }
              v17 = v14;
              if ((*(_BYTE *)v14 & 4) == 0)
              {
                v17 = v14;
                if ((*(_WORD *)(v14 + 44) & 8) != 0)
                {
                  v17 = v14;
                  do
                    v17 = *(_QWORD *)(v17 + 8);
                  while ((*(_WORD *)(v17 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(i + 40, v14, *(_QWORD *)(v17 + 8));
LABEL_28:
              v9 = 1;
              goto LABEL_29;
            }
LABEL_34:
            ;
          }
        }
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8 != a2 + 24);
    }
    v20 = v9 | llvm::stripDebugifyMetadata((uint64_t **)a2, (llvm::Module *)v7);
  }
  return v20 & 1;
}

uint64_t sub_1C51BF958()
{
  char v1;
  char *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Should mir-strip-debug only strip debug info from debugified modules by default";
  *((_QWORD *)&v3 + 1) = 79;
  v1 = 1;
  v2 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED7FCA68, "mir-strip-debugify-only", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FCA68, &dword_1C475E000);
}

uint64_t sub_1C51BF9D0(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine Trace Metrics";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "machine-trace-metrics";
  *(_QWORD *)(v3 + 24) = 21;
  *(_QWORD *)(v3 + 32) = &llvm::MachineTraceMetrics::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MachineTraceMetrics>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::MachineTraceMetrics::getProcResourceCycles(llvm::MachineTraceMetrics *this, int a2)
{
  return *((_QWORD *)this + 77) + 4 * (*((_DWORD *)this + 84) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getLoopFor(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  const llvm::MachineBasicBlock *v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 54) + 280);
  v3 = *(_DWORD *)(v2 + 264);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 248);
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
    if (v7 == a2)
      return *(_QWORD *)(v4 + 16 * v6 + 8);
    v8 = 1;
    while (v7 != (const llvm::MachineBasicBlock *)-4096)
    {
      v9 = v6 + v8++;
      v6 = v9 & v5;
      v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
      if (v7 == a2)
        return *(_QWORD *)(v4 + 16 * v6 + 8);
    }
  }
  return 0;
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getProcResourceDepths(llvm::MachineTraceMetrics::Ensemble *this, int a2)
{
  return *((_QWORD *)this + 50) + 4 * (*(_DWORD *)(*((_QWORD *)this + 54) + 336) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getProcResourceHeights(llvm::MachineTraceMetrics::Ensemble *this, int a2)
{
  return *((_QWORD *)this + 52) + 4 * (*(_DWORD *)(*((_QWORD *)this + 54) + 336) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getDepthResources(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 88 * *((int *)a2 + 6) + 24) == -1)
    return 0;
  else
    return *((_QWORD *)this + 1) + 88 * *((int *)a2 + 6);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getHeightResources(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 88 * *((int *)a2 + 6) + 28) == -1)
    return 0;
  else
    return *((_QWORD *)this + 1) + 88 * *((int *)a2 + 6);
}

void llvm::MachineTraceMetrics::Ensemble::invalidate(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t i;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[18];

  v40[16] = *MEMORY[0x1E0C80C00];
  v38 = v40;
  v39 = 0x1000000000;
  v4 = *((_DWORD *)a2 + 6);
  v5 = *((_QWORD *)this + 1);
  v6 = v5 + 88 * v4;
  v8 = *(_DWORD *)(v6 + 28);
  v7 = (_DWORD *)(v6 + 28);
  if (v8 != -1)
  {
    *v7 = -1;
    *(_BYTE *)(v5 + 88 * v4 + 33) = 0;
    v40[0] = a2;
    v9 = 1;
    do
    {
      v10 = *((_QWORD *)v38 + --v9);
      LODWORD(v39) = v9;
      v11 = *(uint64_t **)(v10 + 64);
      v12 = *(uint64_t **)(v10 + 72);
      while (v11 != v12)
      {
        v13 = *v11;
        v14 = *(_DWORD *)(*v11 + 24);
        v15 = *((_QWORD *)this + 1);
        v16 = v15 + 88 * v14;
        v18 = *(_DWORD *)(v16 + 28);
        v17 = (_DWORD *)(v16 + 28);
        if (v18 != -1 && *(_QWORD *)(v17 - 5) == v10)
        {
          *v17 = -1;
          *(_BYTE *)(v15 + 88 * v14 + 33) = 0;
          if (v9 >= HIDWORD(v39))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v9 + 1, 8);
            v9 = v39;
          }
          *((_QWORD *)v38 + v9) = v13;
          v9 = v39 + 1;
          LODWORD(v39) = v39 + 1;
        }
        ++v11;
      }
    }
    while (v9);
  }
  v20 = v5 + 88 * v4;
  v22 = *(_DWORD *)(v20 + 24);
  v21 = (_DWORD *)(v20 + 24);
  if (v22 != -1)
  {
    *v21 = -1;
    *(_BYTE *)(v5 + 88 * v4 + 32) = 0;
    if (HIDWORD(v39))
    {
      v23 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, 1uLL, 8);
      v23 = v39;
    }
    *((_QWORD *)v38 + v23) = a2;
    v24 = v39 + 1;
    do
    {
      v25 = *((_QWORD *)v38 + --v24);
      LODWORD(v39) = v24;
      v26 = *(uint64_t **)(v25 + 88);
      v27 = *(uint64_t **)(v25 + 96);
      while (v26 != v27)
      {
        v28 = *v26;
        v29 = *(_DWORD *)(*v26 + 24);
        v30 = *((_QWORD *)this + 1);
        v31 = v30 + 88 * v29;
        v33 = *(_DWORD *)(v31 + 24);
        v32 = (_DWORD *)(v31 + 24);
        if (v33 != -1 && *(_QWORD *)(v30 + 88 * v29) == v25)
        {
          *v32 = -1;
          *(_BYTE *)(v30 + 88 * v29 + 32) = 0;
          if (v24 >= HIDWORD(v39))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v24 + 1, 8);
            v24 = v39;
          }
          *((_QWORD *)v38 + v24) = v28;
          v24 = v39 + 1;
          LODWORD(v39) = v39 + 1;
        }
        ++v26;
      }
    }
    while (v24);
  }
  for (i = *((_QWORD *)a2 + 7);
        (const llvm::MachineBasicBlock *)i != (const llvm::MachineBasicBlock *)((char *)a2 + 48);
        i = *(_QWORD *)(i + 8))
  {
    v36 = i;
    v37 = 0;
    if (sub_1C61252B8((uint64_t *)this + 47, &v36, &v37))
    {
      *v37 = -8192;
      *((int32x2_t *)this + 48) = vadd_s32(*(int32x2_t *)((char *)this + 384), (int32x2_t)0x1FFFFFFFFLL);
    }
    if (!i || (*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  if (v38 != v40)
    free(v38);
}

void llvm::MachineTraceMetrics::Ensemble::computeTrace(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const llvm::MachineBasicBlock *v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v30[2];
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _QWORD v35[9];
  char v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[128];
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[128];
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  uint64_t *v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[18];

  v60[16] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 4);
  v30[0] = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(*((_QWORD *)this + 54) + 280);
  v30[1] = v3;
  v31 = v35;
  v32 = v35;
  v35[8] = v4;
  v36 = 0;
  v33 = 8;
  v34 = 0;
  v37 = v30;
  v38 = v40;
  v39 = 0x800000000;
  if (sub_1C51C340C(v30, 0, 0, (uint64_t)a2))
  {
    v5 = *((_QWORD *)a2 + 8);
    v6 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 16);
      v6 = v39;
    }
    v7 = (char *)v38 + 16 * v6;
    *v7 = a2;
    v7[1] = v5;
    LODWORD(v39) = v39 + 1;
    sub_1C51C355C(&v37);
  }
  v49 = v37;
  v50 = v52;
  v51 = 0x800000000;
  if ((_DWORD)v39)
    sub_1C486F660((uint64_t)&v50, (uint64_t)&v38);
  if (v38 != v40)
    free(v38);
  v45 = v30;
  v46 = v48;
  v47 = 0x800000000;
  v57 = v49;
  v58 = v60;
  v59 = 0x800000000;
  if ((_DWORD)v51)
  {
    sub_1C486F510((uint64_t)&v58, (uint64_t)&v50);
    v53 = v45;
    v54 = v56;
    v55 = 0x800000000;
    if ((_DWORD)v47)
      sub_1C486F510((uint64_t)&v54, (uint64_t)&v46);
  }
  else
  {
    v53 = v30;
    v54 = v56;
    v55 = 0x800000000;
  }
  v37 = v57;
  v38 = v40;
  v39 = 0x800000000;
  if ((_DWORD)v59)
    sub_1C486F510((uint64_t)&v38, (uint64_t)&v58);
  v41 = v53;
  v42 = v44;
  v43 = 0x800000000;
  if ((_DWORD)v55)
    sub_1C486F510((uint64_t)&v42, (uint64_t)&v54);
  if (v54 != v56)
    free(v54);
  if (v58 != v60)
    free(v58);
  if (v46 != v48)
    free(v46);
  if (v50 != v52)
    free(v50);
  v57 = v37;
  v58 = v60;
  v59 = 0x800000000;
  if ((_DWORD)v39)
    sub_1C486F660((uint64_t)&v58, (uint64_t)&v38);
  v53 = v41;
  v54 = v56;
  v55 = 0x800000000;
  if ((_DWORD)v43)
    sub_1C486F660((uint64_t)&v54, (uint64_t)&v42);
  while (1)
  {
    v8 = v58;
    if ((_DWORD)v59 != (_DWORD)v55)
      goto LABEL_39;
    if (!(_DWORD)v59)
      break;
    v9 = v54;
    v10 = v58;
    while (*v10 == *v9 && v10[1] == v9[1])
    {
      v10 += 2;
      v9 += 2;
      if (v10 == (_QWORD *)((char *)v58 + 16 * v59))
        goto LABEL_41;
    }
LABEL_39:
    v12 = (int *)*((_QWORD *)v58 + 2 * v59 - 2);
    v13 = 88 * v12[6];
    v14 = *((_QWORD *)this + 1);
    *(_QWORD *)(v14 + v13) = (**(uint64_t (***)(llvm::MachineTraceMetrics::Ensemble *, int *))this)(this, v12);
    llvm::MachineTraceMetrics::Ensemble::computeDepthResources(this, (const llvm::MachineBasicBlock *)v12);
    LODWORD(v59) = v59 - 1;
    if ((_DWORD)v59)
      sub_1C51C355C(&v57);
  }
LABEL_41:
  if (v54 != v56)
  {
    free(v54);
    v8 = v58;
  }
  if (v8 != v60)
    free(v8);
  if (v42 != v44)
    free(v42);
  if (v38 != v40)
    free(v38);
  v36 = 1;
  if (v32 == v31)
  {
LABEL_50:
    HIDWORD(v33) = 0;
    v34 = 0;
  }
  else
  {
    if (v33 < 0x21 || 4 * (HIDWORD(v33) - v34) >= v33)
    {
      memset(v32, 255, 8 * v33);
      goto LABEL_50;
    }
    free(v32);
    v25 = 1 << (33 - __clz(HIDWORD(v33) - v34 - 1));
    v26 = (HIDWORD(v33) - v34) > 0x10;
    HIDWORD(v33) = 0;
    v34 = 0;
    if (v26)
      v27 = v25;
    else
      v27 = 32;
    LODWORD(v33) = v27;
    v28 = malloc_type_malloc(8 * v27, 0x4065EBACuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v32 = v28;
    memset(v28, 255, 8 * v33);
  }
  v37 = v30;
  v38 = v40;
  v39 = 0x800000000;
  if (sub_1C51C340C(v30, 0, 0, (uint64_t)a2))
  {
    v15 = *((_QWORD *)a2 + 11);
    v16 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 16);
      v16 = v39;
    }
    v17 = (char *)v38 + 16 * v16;
    *v17 = a2;
    v17[1] = v15;
    LODWORD(v39) = v39 + 1;
    sub_1C51C3638(&v37);
  }
  v49 = v37;
  v50 = v52;
  v51 = 0x800000000;
  if ((_DWORD)v39)
    sub_1C486F660((uint64_t)&v50, (uint64_t)&v38);
  if (v38 != v40)
    free(v38);
  v45 = v30;
  v46 = v48;
  v47 = 0x800000000;
  v57 = v49;
  v58 = v60;
  v59 = 0x800000000;
  if ((_DWORD)v51)
  {
    sub_1C486F510((uint64_t)&v58, (uint64_t)&v50);
    v53 = v45;
    v54 = v56;
    v55 = 0x800000000;
    if ((_DWORD)v47)
      sub_1C486F510((uint64_t)&v54, (uint64_t)&v46);
  }
  else
  {
    v53 = v30;
    v54 = v56;
    v55 = 0x800000000;
  }
  v37 = v57;
  v38 = v40;
  v39 = 0x800000000;
  if ((_DWORD)v59)
    sub_1C486F510((uint64_t)&v38, (uint64_t)&v58);
  v41 = v53;
  v42 = v44;
  v43 = 0x800000000;
  if ((_DWORD)v55)
    sub_1C486F510((uint64_t)&v42, (uint64_t)&v54);
  if (v54 != v56)
    free(v54);
  if (v58 != v60)
    free(v58);
  if (v46 != v48)
    free(v46);
  if (v50 != v52)
    free(v50);
  v57 = v37;
  v58 = v60;
  v59 = 0x800000000;
  if ((_DWORD)v39)
    sub_1C486F660((uint64_t)&v58, (uint64_t)&v38);
  v53 = v41;
  v54 = v56;
  v55 = 0x800000000;
  if ((_DWORD)v43)
    sub_1C486F660((uint64_t)&v54, (uint64_t)&v42);
  while (2)
  {
    v18 = v58;
    if ((_DWORD)v59 != (_DWORD)v55)
    {
LABEL_89:
      v22 = (const llvm::MachineBasicBlock *)*((_QWORD *)v58 + 2 * v59 - 2);
      v23 = *((_DWORD *)v22 + 6);
      v24 = *((_QWORD *)this + 1);
      *(_QWORD *)(v24 + 88 * v23 + 8) = (*(uint64_t (**)(llvm::MachineTraceMetrics::Ensemble *, const llvm::MachineBasicBlock *))(*(_QWORD *)this + 8))(this, v22);
      llvm::MachineTraceMetrics::Ensemble::computeHeightResources(this, v22);
      LODWORD(v59) = v59 - 1;
      if ((_DWORD)v59)
        sub_1C51C3638(&v57);
      continue;
    }
    break;
  }
  if ((_DWORD)v59)
  {
    v19 = v54;
    v20 = v58;
    while (*v20 == *v19 && v20[1] == v19[1])
    {
      v20 += 2;
      v19 += 2;
      if (v20 == (_QWORD *)((char *)v58 + 16 * v59))
        goto LABEL_91;
    }
    goto LABEL_89;
  }
LABEL_91:
  if (v54 != v56)
  {
    free(v54);
    v18 = v58;
  }
  if (v18 != v60)
    free(v18);
  if (v42 != v44)
    free(v42);
  if (v38 != v40)
    free(v38);
  if (v32 != v31)
    free(v32);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v18;
  unsigned int v19;
  uint64_t v21;

  v2 = *(unsigned int *)(a2 + 48);
  if (!(_DWORD)v2)
    return 0;
  v5 = 0;
  v6 = a1 + 47;
  v7 = 8 * v2;
  v8 = (int *)(*(_QWORD *)(a2 + 40) + 4);
  do
  {
    v9 = *(v8 - 1);
    if (v9 < 0)
    {
      v10 = 0;
      v21 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[54] + 272) + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 3) & 1) != 0 || (v11 = *(_QWORD *)(v11 + 24)) != 0 && (*(_BYTE *)(v11 + 3) & 1) != 0)
          v10 = *(_QWORD *)(v11 + 8);
        else
          v10 = 0;
      }
      v21 = v10;
      v12 = *(_DWORD *)(*(_QWORD *)(v10 + 24) + 24);
      v13 = a1[1];
      v14 = *(_DWORD *)(v13 + 88 * v12 + 24);
      if (v14 != -1)
      {
        v15 = *(_DWORD *)(a2 + 24);
        if (v15 != -1 && *(_DWORD *)(v13 + 88 * v12 + 16) == *(_DWORD *)(a2 + 16))
        {
          v16 = *(unsigned __int8 *)(v13 + 88 * v12 + 32);
          if (v14 <= v15 && v16 != 0)
          {
            v18 = *v8;
            v19 = *((_DWORD *)sub_1C61DF1DC(v6, &v21) + 2) + v18;
            if (v5 <= v19)
              v5 = v19;
            else
              v5 = v5;
          }
        }
      }
    }
    v8 += 2;
    v7 -= 8;
  }
  while (v7);
  return v5;
}

void llvm::MachineTraceMetrics::Ensemble::updateDepth(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v8;
  const llvm::MachineInstr *v9;
  _QWORD *v10;
  unsigned int v11;
  const llvm::MachineInstr **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  BOOL v25;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int *v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int16 v44;
  _WORD *v45;
  unsigned __int16 v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  unsigned int v64;
  unint64_t v65;
  __int16 v66;
  _WORD *v67;
  unsigned __int16 v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  _DWORD *v74;
  _DWORD *v75;
  __int128 v76;
  int v77;
  unsigned int *v78;
  unsigned int *v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned __int16 *v83;
  unsigned __int16 *v84;
  int v85;
  int v86;
  _DWORD *v87;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _BYTE v105[128];
  unsigned int *v106;
  uint64_t v107;
  _BYTE v108[32];
  const llvm::MachineInstr *v109;
  uint64_t v110;
  _QWORD v111[6];

  v111[4] = *MEMORY[0x1E0C80C00];
  v103 = v105;
  v104 = 0x800000000;
  v6 = **(unsigned __int16 **)(a3 + 16);
  if (v6 == 69 || v6 == 0)
  {
    sub_1C51C0E4C((_DWORD *)a3, (uint64_t)&v103, *(_QWORD *)a2, *(_QWORD *)(a1[54] + 272));
    goto LABEL_7;
  }
  if (sub_1C51C0F50(a3, (uint64_t)&v103, *(_QWORD *)(a1[54] + 272)))
  {
    v28 = *(_QWORD *)(a1[54] + 264);
    v109 = (const llvm::MachineInstr *)v111;
    v110 = 0x800000000;
    v29 = (unsigned int *)v108;
    v106 = (unsigned int *)v108;
    v107 = 0x800000000;
    v30 = a3;
    v31 = *(unsigned int *)(a3 + 40);
    if (!(_DWORD)v31)
      goto LABEL_87;
    v32 = &v110;
    v33 = &v107;
    v34 = *(unsigned int **)(a3 + 32);
    v35 = &v34[8 * v31];
    if (v28)
      v36 = (_QWORD *)(v28 + 8);
    else
      v36 = 0;
    while (1)
    {
      v37 = *v34;
      if (!*v34)
      {
        v38 = v34[1];
        if (v38 - 1 <= 0x3FFFFFFE)
          break;
      }
LABEL_72:
      v34 += 8;
      if (v34 == v35)
      {
        if ((_DWORD)v110)
        {
          v62 = (char *)v109;
          v63 = (char *)v109 + 4 * v110;
          v64 = *(_DWORD *)(a4 + 8);
          do
          {
            v65 = *(unsigned int *)(*v36 + 24 * *(unsigned int *)v62 + 16);
            v66 = v65 & 0xF;
            v67 = (_WORD *)(v36[6] + ((v65 >> 3) & 0x1FFFFFFE));
            v68 = *v67 + v66 * *(_DWORD *)v62;
            do
            {
              v69 = v68;
              v70 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 208) + v68);
              v71 = *(_QWORD *)a4;
              if (v64 <= v70)
              {
LABEL_79:
                v73 = v64;
                v72 = (_DWORD *)(v71 + 24 * v64);
              }
              else
              {
                while (1)
                {
                  v72 = (_DWORD *)(v71 + 24 * v70);
                  if (*v72 == v69)
                    break;
                  v70 += 256;
                  if (v70 >= v64)
                    goto LABEL_79;
                }
                v73 = v64;
              }
              v74 = (_DWORD *)(v71 + 24 * v73);
              if (v72 != v74)
              {
                v75 = v74 - 6;
                if (v75 != v72)
                {
                  v76 = *(_OWORD *)v75;
                  v72[4] = v75[4];
                  *(_OWORD *)v72 = v76;
                  *(_BYTE *)(*(_QWORD *)(a4 + 208)
                           + *(unsigned int *)(*(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8) - 24)) = -85 * ((v72 - *(_QWORD *)a4) >> 3);
                  v64 = *(_DWORD *)(a4 + 8);
                }
                *(_DWORD *)(a4 + 8) = --v64;
              }
              v77 = (unsigned __int16)v67[1];
              ++v67;
              v68 = v77 + v69;
            }
            while (v77);
            v62 += 4;
          }
          while (v62 != v63);
        }
LABEL_87:
        v78 = v106;
        if ((_DWORD)v107)
        {
          v98 = v29;
          v79 = &v106[v107];
          if (v28)
            v80 = (_QWORD *)(v28 + 8);
          else
            v80 = 0;
          do
          {
            v81 = *v78;
            v82 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 32 * v81 + 4);
            v83 = (unsigned __int16 *)(v80[6]
                                     + (((unint64_t)*(unsigned int *)(*v80 + 24 * v82 + 16) >> 3) & 0x1FFFFFFE));
            v85 = *v83;
            v84 = v83 + 1;
            v86 = v85 + (*(_DWORD *)(*v80 + 24 * v82 + 16) & 0xF) * v82;
            do
            {
              v100 = (unsigned __int16)v86;
              v101 = 0;
              v102 = 0;
              v87 = sub_1C61FF21C(a4, &v100);
              v30 = a3;
              *((_QWORD *)v87 + 1) = a3;
              v87[4] = v81;
              v88 = *v84++;
              v86 += v88;
            }
            while (v88);
            ++v78;
          }
          while (v78 != v79);
          v78 = v106;
          v29 = v98;
        }
        if (v78 != v29)
          free(v78);
        if (v109 != (const llvm::MachineInstr *)v111)
          free(v109);
        goto LABEL_7;
      }
    }
    if ((v37 & 0x1000000) != 0)
    {
      if ((~v37 & 0x5000000) != 0)
      {
        v41 = *(_QWORD *)(v30 + 32);
        v42 = v107;
        if (v107 >= (unint64_t)HIDWORD(v107))
        {
          v93 = v28;
          v96 = v29;
          v61 = v32;
          v90 = v33;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v29, v107 + 1, 4);
          v33 = v90;
          v28 = v93;
          v32 = v61;
          v29 = v96;
          v30 = a3;
          v42 = v107;
        }
        v106[v42] = ((unint64_t)v34 - v41) >> 5;
        v40 = v33;
        goto LABEL_58;
      }
    }
    else if (((v37 >> 26) & ~HIBYTE(v37) & 1) == 0)
    {
      goto LABEL_59;
    }
    v39 = v110;
    if (v110 >= (unint64_t)HIDWORD(v110))
    {
      v92 = v28;
      v95 = v29;
      v59 = v32;
      v60 = v33;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 4);
      v33 = v60;
      v32 = v59;
      v28 = v92;
      v29 = v95;
      v30 = a3;
      v39 = v110;
    }
    *((_DWORD *)v109 + v39) = v38;
    v40 = v32;
LABEL_58:
    ++*(_DWORD *)v40;
    v37 = *v34;
LABEL_59:
    if ((v37 & 0x30000000) == 0 && (v37 & 0x10FFF00) != 0x1000000)
    {
      v43 = *(unsigned int *)(*v36 + 24 * v38 + 16);
      v44 = v43 & 0xF;
      v45 = (_WORD *)(v36[6] + ((v43 >> 3) & 0x1FFFFFFE));
      v46 = *v45 + v44 * v38;
      v47 = *(_DWORD *)(a4 + 8);
      v48 = *(_QWORD *)a4;
      while (1)
      {
        v49 = v46;
        v50 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 208) + v46);
        if (v47 > v50)
        {
          while (1)
          {
            v51 = v50;
            if (*(_DWORD *)(v48 + 24 * v50) == v49)
              break;
            v50 += 256;
            if (v51 + 256 >= v47)
              goto LABEL_67;
          }
          if (v47 != v50)
            break;
        }
LABEL_67:
        v52 = (unsigned __int16)v45[1];
        ++v45;
        v46 = v52 + v49;
        if (!v52)
          goto LABEL_72;
      }
      v53 = v48 + 24 * v50;
      v54 = *(_QWORD *)(v53 + 8);
      v55 = *(unsigned int *)(v53 + 16);
      v56 = *(_QWORD *)(v30 + 32);
      v57 = v104;
      if (v104 >= (unint64_t)HIDWORD(v104))
      {
        v94 = v28;
        v97 = v29;
        v89 = v32;
        v91 = v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v104 + 1, 16);
        v32 = v89;
        v33 = v91;
        v28 = v94;
        v29 = v97;
        v30 = a3;
        v57 = v104;
      }
      v58 = (char *)v103 + 16 * v57;
      *v58 = v54;
      v58[1] = v55 | (((_QWORD)v34 - v56) << 27);
      LODWORD(v104) = v104 + 1;
    }
    goto LABEL_72;
  }
LABEL_7:
  if ((_DWORD)v104)
  {
    v8 = 0;
    v12 = (const llvm::MachineInstr **)v103;
    v13 = 16 * v104;
    v9 = (const llvm::MachineInstr *)a3;
    do
    {
      v14 = *(_DWORD *)(*((_QWORD *)*v12 + 3) + 24);
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 88 * v14 + 24);
      if (v16 != -1)
      {
        v17 = *(_DWORD *)(a2 + 24);
        if (v17 != -1 && *(_DWORD *)(v15 + 88 * v14 + 16) == *(_DWORD *)(a2 + 16))
        {
          v18 = *(unsigned __int8 *)(v15 + 88 * v14 + 32);
          if (v16 <= v17 && v18 != 0)
          {
            v109 = *v12;
            v106 = 0;
            v20 = sub_1C61252B8(a1 + 47, &v109, &v106);
            LODWORD(v21) = 0;
            if (v20)
              v21 = *((_QWORD *)v106 + 1);
            v22 = (unsigned __int16 *)*((_QWORD *)*v12 + 2);
            v23 = *v22;
            v25 = (v23 - 9) <= 0x3C && ((1 << (v23 - 9)) & 0x1000000000000605) != 0
               || v23 == 0;
            if (v25 || (v22[4] & 0x10) != 0)
            {
              v9 = (const llvm::MachineInstr *)a3;
            }
            else
            {
              v9 = (const llvm::MachineInstr *)a3;
              LODWORD(v21) = llvm::TargetSchedModel::computeOperandLatency((llvm::TargetSchedModel *)(a1[54] + 288), *v12, *((unsigned int *)v12 + 2), (const llvm::MachineInstr *)a3, *((unsigned int *)v12 + 3))+ v21;
            }
            if (v8 <= v21)
              v8 = v21;
          }
        }
      }
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  else
  {
    v8 = 0;
    v9 = (const llvm::MachineInstr *)a3;
  }
  v109 = v9;
  v10 = sub_1C61DF1DC(a1 + 47, &v109);
  *((_DWORD *)v10 + 2) = v8;
  if (*(_BYTE *)(a2 + 33))
  {
    v11 = *((_DWORD *)v10 + 3) + v8;
    if (*(_DWORD *)(a2 + 36) > v11)
      v11 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = v11;
  }
  if (v103 != v105)
    free(v103);
}

{
  llvm::MachineTraceMetrics::Ensemble::updateDepth(a1, a1[1] + 88 * *(int *)(a2 + 24), a3, a4);
}

_DWORD *sub_1C51C0E4C(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3)
  {
    v4 = result[10];
    if (v4 != 1)
    {
      v5 = *((_QWORD *)result + 4);
      v6 = 1;
      while (*(_QWORD *)(v5 + 32 * (v6 + 1) + 16) != a3)
      {
        v6 += 2;
        if (v4 == v6)
          return result;
      }
      v7 = v6;
      v8 = *(unsigned int *)(v5 + 32 * v6 + 4);
      if ((v8 & 0x80000000) != 0)
        v9 = *(_QWORD *)(a4 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8;
      else
        v9 = *(_QWORD *)(a4 + 272) + 8 * v8;
      v10 = *(_QWORD *)v9;
      if ((*(_BYTE *)(*(_QWORD *)v9 + 3) & 1) == 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 24) + 3) & 1) != 0)
          v10 = *(_QWORD *)(v10 + 24);
        else
          v10 = 0;
      }
      v11 = *(_QWORD *)(v10 + 8);
      v12 = (v7 << 32) | ((unint64_t)(v10 - *(_QWORD *)(v11 + 32)) >> 5);
      v13 = *(unsigned int *)(a2 + 8);
      if (v13 >= *(_DWORD *)(a2 + 12))
      {
        v17 = v12;
        v15 = v11;
        v16 = a2;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
        v12 = v17;
        v11 = v15;
        a2 = v16;
        LODWORD(v13) = *(_DWORD *)(v16 + 8);
      }
      v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
      *v14 = v11;
      v14[1] = v12;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sub_1C51C0F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (**(unsigned __int16 **)(a1 + 16) - 13 >= 5 && (v4 = *(unsigned int *)(a1 + 40), (_DWORD)v4))
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = a2 + 16;
    v9 = 32 * v4;
    v10 = v7 << 27;
    v11 = (unsigned int *)(v7 + 4);
    do
    {
      v12 = *(v11 - 1);
      if (!(_BYTE)v12)
      {
        v13 = *v11;
        if ((_DWORD)v13)
        {
          if (v13 >> 30)
          {
            v14 = v12 & 0x30000000;
            v15 = v12 & 0x10FFF00;
            if (v14)
              v16 = 1;
            else
              v16 = v15 == 0x1000000;
            if (!v16)
            {
              if ((v13 & 0x80000000) != 0)
                v17 = *(_QWORD *)(a3 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8;
              else
                v17 = *(_QWORD *)(a3 + 272) + 8 * v13;
              v18 = *(_QWORD *)v17;
              if ((*(_BYTE *)(*(_QWORD *)v17 + 3) & 1) == 0)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v18 + 24) + 3) & 1) != 0)
                  v18 = *(_QWORD *)(v18 + 24);
                else
                  v18 = 0;
              }
              v19 = *(_QWORD *)(a1 + 32);
              v20 = *(_QWORD *)(v18 + 8);
              v21 = *(_QWORD *)(v20 + 32);
              v22 = *(unsigned int *)(a2 + 8);
              if (v22 >= *(unsigned int *)(a2 + 12))
              {
                v26 = a3;
                v27 = v8;
                v25 = v6;
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v22 + 1, 16);
                a3 = v26;
                v8 = v27;
                v6 = v25;
                v22 = *(unsigned int *)(a2 + 8);
              }
              v23 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
              *v23 = v20;
              v23[1] = ((unint64_t)(v18 - v21) >> 5) | (unint64_t)(v10 - (v19 << 27));
              ++*(_DWORD *)(a2 + 8);
            }
          }
          else
          {
            v6 = 1;
          }
        }
      }
      v10 += 0x100000000;
      v11 += 8;
      v9 -= 32;
    }
    while (v9);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  return v6 & 1;
}

void llvm::MachineTraceMetrics::Ensemble::updateDepths(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      llvm::MachineTraceMetrics::Ensemble::updateDepth(a1, a1[1] + 88 * *(int *)(*(_QWORD *)(v6 + 24) + 24), v6, a4);
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          v6 = *(_QWORD *)(v6 + 8);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != a3);
  }
}

void llvm::MachineTraceMetrics::Ensemble::computeInstrDepths(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13[2];
  _BYTE v14[192];
  void *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[9];

  v4 = 0;
  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  do
  {
    v5 = *((_QWORD *)this + 1) + 88 * *((int *)a2 + 6);
    if (*(_BYTE *)(v5 + 32))
      break;
    if (v4 >= HIDWORD(v18))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v4 + 1, 8);
      v4 = v18;
    }
    v17[v4] = a2;
    v4 = v18 + 1;
    LODWORD(v18) = v18 + 1;
    a2 = *(const llvm::MachineBasicBlock **)v5;
  }
  while (*(_QWORD *)v5);
  v13[0] = v14;
  v13[1] = (void *)0x800000000;
  v15 = 0;
  v16 = 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 54) + 264);
  v7 = *(_DWORD *)(v6 + 44);
  if (!v7)
  {
    v8 = 0;
    if (!v4)
      goto LABEL_21;
    goto LABEL_11;
  }
  v8 = malloc_type_calloc(*(unsigned int *)(v6 + 44), 1uLL, 0x6D9A4F0CuLL);
  if (!v8)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v15 = v8;
  v16 = v7;
  v4 = v18;
  if ((_DWORD)v18)
  {
    do
    {
LABEL_11:
      v9 = v17[v4 - 1];
      LODWORD(v18) = v4 - 1;
      v10 = *((_QWORD *)this + 1) + 88 * *(int *)(v9 + 24);
      *(_BYTE *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 36) = 0;
      if (*(_BYTE *)(v10 + 33))
        *(_DWORD *)(v10 + 36) = llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(this, v10);
      v11 = v9 + 48;
      for (i = *(_QWORD *)(v9 + 56); i != v11; i = *(_QWORD *)(i + 8))
      {
        llvm::MachineTraceMetrics::Ensemble::updateDepth(this, v10, i, (uint64_t)v13);
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v4 = v18;
    }
    while ((_DWORD)v18);
    v8 = v15;
  }
LABEL_21:
  free(v8);
  if (v13[0] != v14)
    free(v13[0]);
  if (v17 != v19)
    free(v17);
}

void llvm::MachineTraceMetrics::Ensemble::computeInstrHeights(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  int v36;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int *v63;
  _QWORD *v64;
  int v65;
  unsigned int v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _WORD *v71;
  unsigned __int16 v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  void *v76;
  unsigned int v77;
  _DWORD *v78;
  unsigned int v79;
  unsigned __int16 *v80;
  int v81;
  BOOL v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  _WORD *v91;
  unsigned __int16 *v92;
  __int16 v93;
  unsigned __int16 v94;
  _DWORD *v95;
  int v96;
  _QWORD *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  llvm::MachineTraceMetrics::Ensemble *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t *v129;
  unsigned int *v130;
  uint64_t v131;
  int v132;
  llvm::TargetSchedModel *v133;
  uint64_t v134;
  int32x2_t v135;
  int v136;
  _QWORD v137[3];
  uint64_t v138[18];
  void *v139;
  uint64_t v140;
  _BYTE v141[192];
  void *v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  _BYTE v146[64];
  _DWORD *v147;
  uint64_t v148;
  _QWORD v149[6];

  v149[4] = *MEMORY[0x1E0C80C00];
  v144 = v146;
  v145 = 0x800000000;
  do
  {
    v4 = *((_DWORD *)a2 + 6);
    v5 = *((_QWORD *)this + 1);
    v6 = v5 + 88 * v4;
    v7 = *(unsigned __int8 *)(v6 + 33);
    if (*(_BYTE *)(v6 + 33))
      break;
    v8 = v145;
    if (v145 >= (unint64_t)HIDWORD(v145))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
      v8 = v145;
    }
    v144[v8] = a2;
    LODWORD(v145) = v145 + 1;
    v9 = v5 + 88 * v4;
    *(_DWORD *)(v9 + 48) = 0;
    a2 = *(const llvm::MachineBasicBlock **)(v9 + 8);
  }
  while (a2);
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v139 = v141;
  v140 = 0x800000000;
  v142 = 0;
  v143 = 0;
  v10 = *(_QWORD *)(*((_QWORD *)this + 54) + 264);
  v11 = *(_DWORD *)(v10 + 44);
  if (v11)
  {
    v12 = malloc_type_calloc(*(unsigned int *)(v10 + 44), 1uLL, 0x6D9A4F0CuLL);
    if (!v12)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v142 = v12;
    v143 = v11;
  }
  v126 = this;
  if (v7)
  {
    v13 = *((_QWORD *)this + 1) + 88 * *((int *)a2 + 6);
    v14 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v14)
    {
      v15 = *(_DWORD **)(v13 + 40);
      v16 = &v15[2 * v14];
      while ((*v15 & 0x80000000) == 0)
      {
        v27 = v15[1];
        LODWORD(v138[0]) = *v15;
        *(_OWORD *)((char *)v138 + 4) = 0uLL;
        sub_1C61FF21C((uint64_t)&v139, (unsigned int *)v138)[1] = v27;
LABEL_31:
        v15 += 2;
        if (v15 == v16)
          goto LABEL_41;
      }
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 54) + 272) + 24) + 16 * (*v15 & 0x7FFFFFFF) + 8);
      if (!v17)
      {
LABEL_14:
        v138[0] = v17;
        if (v136)
        {
          v18 = ((v17 >> 4) ^ (v17 >> 9)) & (v136 - 1);
          v19 = (_QWORD *)(v134 + 16 * v18);
          v20 = *v19;
          if (v17 == *v19)
            goto LABEL_29;
          v21 = 0;
          v22 = 1;
          while (v20 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v20 == -8192;
            if (v23)
              v21 = v19;
            v24 = v18 + v22++;
            v18 = v24 & (v136 - 1);
            v19 = (_QWORD *)(v134 + 16 * v18);
            v20 = *v19;
            if (v17 == *v19)
              goto LABEL_29;
          }
          if (v21)
            v25 = v21;
          else
            v25 = v19;
        }
        else
        {
          v25 = 0;
        }
        v19 = sub_1C49D7988((uint64_t)&v134, (uint64_t)v138, v138, v25);
        *v19 = v138[0];
        *((_DWORD *)v19 + 2) = 0;
LABEL_29:
        v26 = v15[1];
        if (*((_DWORD *)v19 + 2) < v26)
          *((_DWORD *)v19 + 2) = v26;
        goto LABEL_31;
      }
      if ((*(_BYTE *)(v17 + 3) & 1) == 0)
      {
        v17 = *(_QWORD *)(v17 + 24);
        if (!v17)
        {
LABEL_40:
          this = v126;
          goto LABEL_14;
        }
        if ((*(_BYTE *)(v17 + 3) & 1) == 0)
        {
          v17 = 0;
          goto LABEL_40;
        }
      }
      v17 = *(_QWORD *)(v17 + 8);
      goto LABEL_40;
    }
  }
LABEL_41:
  v138[0] = (uint64_t)&v138[2];
  v138[1] = 0x800000000;
  v28 = v145;
  if (!(_DWORD)v145)
    goto LABEL_187;
  v129 = (uint64_t *)((char *)this + 376);
  do
  {
    v29 = v144[v28 - 1];
    v131 = *((_QWORD *)this + 1);
    v132 = *(_DWORD *)(v29 + 24);
    v30 = v131 + 88 * v132;
    *(_BYTE *)(v30 + 33) = 1;
    *(_DWORD *)(v30 + 36) = 0;
    v130 = (unsigned int *)(v30 + 36);
    v33 = *(_QWORD *)(v30 + 8);
    v32 = (_QWORD *)(v30 + 8);
    v31 = v33;
    if (v33)
    {
LABEL_44:
      v34 = v31 + 48;
      for (i = *(_QWORD *)(v31 + 56); i != v34; i = *(_QWORD *)(i + 8))
      {
        v36 = **(unsigned __int16 **)(i + 16);
        if (v36 != 69 && v36 != 0)
          break;
        LODWORD(v138[1]) = 0;
        sub_1C51C0E4C((_DWORD *)i, (uint64_t)v138, v29, *(_QWORD *)(*((_QWORD *)this + 54) + 272));
        if (LODWORD(v138[1]))
        {
          if (*v32)
          {
            v147 = (_DWORD *)i;
            v137[0] = 0;
            v39 = sub_1C61252B8(v129, &v147, v137);
            v40 = 0;
            if (v39)
              v40 = *(_QWORD *)(v137[0] + 8);
            v38 = HIDWORD(v40);
          }
          else
          {
            LODWORD(v38) = 0;
          }
          if (sub_1C51C1EE0((unsigned int *)v138[0], (llvm::MachineInstr *)i, v38, (uint64_t)&v134, (llvm::TargetSchedModel *)(*((_QWORD *)this + 54) + 288)))
          {
            llvm::MachineTraceMetrics::Ensemble::addLiveIns(this, *(_QWORD *)v138[0], *(_DWORD *)(v138[0] + 8), (uint64_t)v144, v145);
          }
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      goto LABEL_75;
    }
    v41 = *(_QWORD *)(*((_QWORD *)this + 54) + 280);
    v42 = *(_DWORD *)(v41 + 264);
    if (!v42)
      goto LABEL_75;
    v43 = *(_QWORD *)(v41 + 248);
    v44 = v42 - 1;
    v45 = (v42 - 1) & ((v29 >> 4) ^ (v29 >> 9));
    v46 = *(_QWORD *)(v43 + 16 * v45);
    if (v29 == v46)
    {
LABEL_68:
      v49 = *(_QWORD *)(v43 + 16 * v45 + 8);
      if (v49)
      {
        v31 = **(_QWORD **)(v49 + 32);
        v50 = *(_QWORD **)(v29 + 88);
        v51 = *(_QWORD **)(v29 + 96);
        if (v50 != v51)
        {
          while (*v50 != v31)
          {
            if (++v50 == v51)
            {
              v50 = *(_QWORD **)(v29 + 96);
              break;
            }
          }
        }
        if (v50 != v51 && v31)
          goto LABEL_44;
      }
    }
    else
    {
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v45 + v47++;
        v45 = v48 & v44;
        v46 = *(_QWORD *)(v43 + 16 * v45);
        if (v29 == v46)
          goto LABEL_68;
      }
    }
LABEL_75:
    v52 = v29 + 48;
    v53 = *(_QWORD *)(v29 + 56);
    if (v29 + 48 != v53)
    {
      v54 = (_BYTE *)(v131 + 88 * v132 + 32);
      while (1)
      {
        v52 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8;
        if (!v52 || (*(_BYTE *)v52 & 4) == 0)
        {
          while ((*(_WORD *)(v52 + 44) & 4) != 0)
            v52 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8;
        }
        if (!v136)
          goto LABEL_85;
        LODWORD(v55) = ((v52 >> 4) ^ (v52 >> 9)) & (v136 - 1);
        v56 = (uint64_t *)(v134 + 16 * v55);
        v57 = *v56;
        if (v52 != *v56)
          break;
LABEL_84:
        if ((_DWORD)v55 == v136)
          goto LABEL_85;
        v58 = *((_DWORD *)v56 + 2);
        *v56 = -8192;
        v135 = vadd_s32(v135, (int32x2_t)0x1FFFFFFFFLL);
LABEL_87:
        LODWORD(v138[1]) = 0;
        if (**(_WORD **)(v52 + 16) && **(_WORD **)(v52 + 16) != 69)
        {
          if (sub_1C51C0F50(v52, (uint64_t)v138, *(_QWORD *)(*((_QWORD *)this + 54) + 272)))
          {
            v59 = *((_QWORD *)this + 54);
            v60 = *(_QWORD *)(v59 + 264);
            v147 = v149;
            v148 = 0x800000000;
            v61 = *(unsigned int *)(v52 + 40);
            if ((_DWORD)v61)
            {
              v127 = v54;
              v128 = v53;
              v133 = (llvm::TargetSchedModel *)(v59 + 288);
              v62 = *(int **)(v52 + 32);
              v63 = &v62[8 * v61];
              if (v60)
                v64 = (_QWORD *)(v60 + 8);
              else
                v64 = 0;
              do
              {
                v65 = *v62;
                if (!*v62)
                {
                  v66 = v62[1];
                  if (v66 - 1 <= 0x3FFFFFFE)
                  {
                    if ((v65 & 0x30000000) == 0 && (v65 & 0x10FFF00) != 0x1000000)
                    {
                      v68 = *(_QWORD *)(v52 + 32);
                      v69 = v148;
                      if (v148 >= (unint64_t)HIDWORD(v148))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 4);
                        v69 = v148;
                      }
                      v147[v69] = ((unint64_t)v62 - v68) >> 5;
                      LODWORD(v148) = v148 + 1;
                      v65 = *v62;
                    }
                    if ((v65 & 0x1000000) != 0)
                    {
                      v70 = *(unsigned int *)(*v64 + 24 * v66 + 16);
                      v71 = (_WORD *)(v64[6] + ((v70 >> 3) & 0x1FFFFFFE));
                      v72 = *v71 + (v70 & 0xF) * v66;
                      v73 = v140;
                      do
                      {
                        v74 = v72;
                        v75 = *((unsigned __int8 *)v142 + v72);
                        if (v73 > v75)
                        {
                          v76 = v139;
                          while (1)
                          {
                            v77 = v75;
                            v78 = (char *)v139 + 24 * v75;
                            if (*v78 == v74)
                              break;
                            v75 += 256;
                            if (v77 + 256 >= v73)
                              goto LABEL_124;
                          }
                          v79 = *((_DWORD *)v139 + 6 * v75 + 1);
                          v80 = *(unsigned __int16 **)(v52 + 16);
                          v81 = *v80;
                          v83 = (v81 - 9) <= 0x3C
                             && ((1 << (v81 - 9)) & 0x1000000000000605) != 0
                             || v81 == 0;
                          if (!v83 && (v80[4] & 0x10) == 0)
                          {
                            v79 += llvm::TargetSchedModel::computeOperandLatency(v133, (const llvm::MachineInstr *)v52, ((unint64_t)v62 - *(_QWORD *)(v52 + 32)) >> 5, *((const llvm::MachineInstr **)v139 + 3 * v77 + 1), *((unsigned int *)v139 + 6 * v77 + 4));
                            v76 = v139;
                            v73 = v140;
                          }
                          if (v58 <= v79)
                            v58 = v79;
                          v84 = (uint64_t)v76 + 24 * v73 - 24;
                          if ((_DWORD *)v84 != v78)
                          {
                            v85 = *(_OWORD *)v84;
                            v78[4] = *(_DWORD *)(v84 + 16);
                            *(_OWORD *)v78 = v85;
                            *((_BYTE *)v142 + *((unsigned int *)v139 + 6 * v140 - 6)) = -85 * (((_DWORD)v78 - (_DWORD)v139) >> 3);
                            v73 = v140;
                          }
                          LODWORD(v140) = --v73;
                        }
LABEL_124:
                        v86 = (unsigned __int16)v71[1];
                        ++v71;
                        v72 = v86 + v74;
                      }
                      while (v86);
                    }
                  }
                }
                v62 += 8;
              }
              while (v62 != v63);
              v87 = v148;
              if ((_DWORD)v148)
              {
                v88 = 0;
                this = v126;
                do
                {
                  v89 = *(_DWORD *)(*(_QWORD *)(v52 + 32) + 32 * v147[v88] + 4);
                  v90 = *(unsigned int *)(*v64 + 24 * v89 + 16);
                  v91 = (_WORD *)(v64[6] + ((v90 >> 3) & 0x1FFFFFFE));
                  v93 = *v91;
                  v92 = v91 + 1;
                  v94 = v93 + (v90 & 0xF) * v89;
                  do
                  {
                    LODWORD(v137[0]) = v94;
                    *(_QWORD *)((char *)v137 + 4) = 0;
                    *(_QWORD *)((char *)&v137[1] + 4) = 0;
                    v95 = sub_1C61FF21C((uint64_t)&v139, (unsigned int *)v137);
                    if (v95[1] <= v58 && *((_QWORD *)v95 + 1) != v52)
                    {
                      v95[1] = v58;
                      *((_QWORD *)v95 + 1) = v52;
                      v95[4] = v147[v88];
                    }
                    v96 = *v92++;
                    v94 += v96;
                  }
                  while (v96);
                  ++v88;
                }
                while (v88 != v87);
              }
              else
              {
                this = v126;
              }
              v54 = v127;
              v53 = v128;
            }
            if (v147 != (_DWORD *)v149)
              free(v147);
          }
          if (LODWORD(v138[1]))
          {
            v99 = v138[0];
            v100 = 16 * LODWORD(v138[1]);
            do
            {
              if (sub_1C51C1EE0((unsigned int *)v99, (llvm::MachineInstr *)v52, v58, (uint64_t)&v134, (llvm::TargetSchedModel *)(*((_QWORD *)this + 54) + 288)))
              {
                llvm::MachineTraceMetrics::Ensemble::addLiveIns(this, *(_QWORD *)v99, *(_DWORD *)(v99 + 8), (uint64_t)v144, v145);
              }
              v99 += 16;
              v100 -= 16;
            }
            while (v100);
          }
        }
        v147 = (_DWORD *)v52;
        v97 = sub_1C61DF1DC(v129, &v147);
        *((_DWORD *)v97 + 3) = v58;
        if (*v54)
        {
          v98 = *((_DWORD *)v97 + 2) + v58;
          if (*v130 > v98)
            v98 = *v130;
          *v130 = v98;
        }
        if (v52 == v53)
          goto LABEL_154;
      }
      v101 = 1;
      while (v57 != -4096)
      {
        v102 = v55 + v101++;
        v55 = v102 & (v136 - 1);
        v57 = *(_QWORD *)(v134 + 16 * v55);
        if (v52 == v57)
        {
          v56 = (uint64_t *)(v134 + 16 * v55);
          goto LABEL_84;
        }
      }
LABEL_85:
      v58 = 0;
      goto LABEL_87;
    }
LABEL_154:
    v103 = v131 + 88 * v132;
    v106 = *(unsigned int **)(v103 + 40);
    v105 = v103 + 40;
    v104 = v106;
    v107 = *(unsigned int *)(v105 + 8);
    if ((_DWORD)v107)
    {
      v108 = &v104[2 * v107];
      v109 = *(_QWORD *)(*((_QWORD *)this + 54) + 272);
      v110 = v134;
      v111 = v136;
      v112 = v136 - 1;
      do
      {
        v113 = *v104;
        if ((v113 & 0x80000000) != 0)
          v114 = (uint64_t *)(*(_QWORD *)(v109 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
        else
          v114 = (uint64_t *)(*(_QWORD *)(v109 + 272) + 8 * v113);
        v115 = *v114;
        if (!v115)
        {
          if (!v111)
            goto LABEL_173;
          goto LABEL_161;
        }
        if ((*(_BYTE *)(v115 + 3) & 1) != 0)
          goto LABEL_171;
        v115 = *(_QWORD *)(v115 + 24);
        if (!v115)
          goto LABEL_172;
        if ((*(_BYTE *)(v115 + 3) & 1) != 0)
LABEL_171:
          v115 = *(_QWORD *)(v115 + 8);
        else
          v115 = 0;
LABEL_172:
        this = v126;
        if (!v111)
          goto LABEL_173;
LABEL_161:
        v116 = ((v115 >> 4) ^ (v115 >> 9)) & v112;
        v117 = *(_QWORD *)(v110 + 16 * v116);
        if (v115 != v117)
        {
          v119 = 1;
          while (v117 != -4096)
          {
            v120 = v116 + v119++;
            v116 = v120 & v112;
            v117 = *(_QWORD *)(v110 + 16 * v116);
            if (v115 == v117)
              goto LABEL_162;
          }
LABEL_173:
          v118 = 0;
          goto LABEL_174;
        }
LABEL_162:
        v118 = *(_DWORD *)(v110 + 16 * v116 + 8);
LABEL_174:
        v104[1] = v118;
        v104 += 2;
      }
      while (v104 != v108);
    }
    if ((_DWORD)v140)
    {
      v121 = (uint64_t *)v139;
      v122 = 24 * v140;
      do
      {
        v123 = *v121;
        if (v107 >= *(_DWORD *)(v105 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v105, v105 + 16, v107 + 1, 8);
          LODWORD(v107) = *(_DWORD *)(v105 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v105 + 8 * v107) = v123;
        LODWORD(v107) = *(_DWORD *)(v105 + 8) + 1;
        *(_DWORD *)(v105 + 8) = v107;
        v121 += 3;
        v122 -= 24;
      }
      while (v122);
    }
    if (*(_BYTE *)(v131 + 88 * v132 + 32))
    {
      v124 = llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(this, v131 + 88 * v132);
      v125 = *v130;
      if (*v130 <= v124)
        v125 = v124;
      *v130 = v125;
    }
    v28 = v145 - 1;
    LODWORD(v145) = v28;
  }
  while (v28);
  if ((uint64_t *)v138[0] != &v138[2])
    free((void *)v138[0]);
LABEL_187:
  free(v142);
  if (v139 != v141)
    free(v139);
  MEMORY[0x1CAA32FB4](v134, 8);
  if (v144 != (_QWORD *)v146)
    free(v144);
}

BOOL sub_1C51C1EE0(unsigned int *a1, llvm::MachineInstr *a2, unsigned int a3, uint64_t a4, llvm::TargetSchedModel *this)
{
  unsigned int v6;
  const llvm::MachineInstr *v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v12;
  int v14;
  const llvm::MachineInstr *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v6 = a3;
  v8 = *(const llvm::MachineInstr **)a1;
  v9 = *(unsigned __int16 **)(*(_QWORD *)a1 + 16);
  v10 = *v9;
  v12 = (v10 - 9) <= 0x3C && ((1 << (v10 - 9)) & 0x1000000000000605) != 0 || v10 == 0;
  if (!v12 && (v9[4] & 0x10) == 0)
  {
    v6 = llvm::TargetSchedModel::computeOperandLatency(this, v8, a1[2], a2, a1[3]) + a3;
    v8 = *(const llvm::MachineInstr **)a1;
  }
  v16 = v8;
  v17 = v6;
  sub_1C61FEDFC((uint64_t)&v18, a4, (uint64_t *)&v16, &v17);
  v14 = v19;
  if (!v19 && *(_DWORD *)(v18 + 8) < v6)
    *(_DWORD *)(v18 + 8) = v6;
  return v14 != 0;
}

uint64_t llvm::MachineTraceMetrics::Trace::getResourceDepth(llvm::MachineTraceMetrics::Trace *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v2 = *((_QWORD *)this + 1);
  v3 = 0x2E8BA2E8BA2E8BA3 * ((v2 - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3);
  v4 = *(_QWORD *)(*(_QWORD *)this + 432);
  v5 = *(unsigned int *)(v4 + 336);
  v6 = (v5 * v3);
  v7 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 400) + 4 * v6);
  v8 = 0;
  if (a2)
  {
    if (!(_DWORD)v5)
    {
      v17 = *(_DWORD *)(v4 + 564);
      v18 = *(_DWORD *)(v2 + 24);
      goto LABEL_16;
    }
    v9 = (int *)(*(_QWORD *)(v4 + 616) + 4 * v6);
    do
    {
      v11 = *v7++;
      v10 = v11;
      v12 = *v9++;
      v13 = v12 + v10;
      if (v8 <= v13)
        v8 = v13;
      --v5;
    }
    while (v5);
  }
  else
  {
    if (!(_DWORD)v5)
    {
      v17 = *(_DWORD *)(v4 + 564);
      v18 = *(_DWORD *)(v2 + 24);
      goto LABEL_18;
    }
    v14 = 4 * v5;
    do
    {
      v16 = *v7++;
      v15 = v16;
      if (v8 <= v16)
        v8 = v15;
      v14 -= 4;
    }
    while (v14);
  }
  v17 = *(_DWORD *)(v4 + 564);
  v18 = *(_DWORD *)(v2 + 24);
  if (a2)
LABEL_16:
    v18 += *(_DWORD *)(*(_QWORD *)(v4 + 568) + 8 * v3);
LABEL_18:
  v19 = v18 / *(_DWORD *)(v4 + 288);
  v20 = (v17 + v8 - 1) / v17;
  if (v19 <= v20)
    return v20;
  else
    return v19;
}

uint64_t llvm::MachineTraceMetrics::Trace::getResourceLength(_QWORD *a1, const llvm::MachineBasicBlock **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  const llvm::MachineBasicBlock **v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  const llvm::MachineBasicBlock *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  v12 = (_QWORD *)*a1;
  v11 = a1[1];
  v13 = *(_QWORD *)(*a1 + 432);
  v14 = *(unsigned int *)(v13 + 336);
  v15 = 8 * a3;
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = 0;
    v18 = -1171354717 * ((unint64_t)(v11 - v12[1]) >> 3) * v14;
    v19 = v12[50] + 4 * v18;
    v20 = v12[52] + 4 * v18;
    v21 = &a4[a5];
    v22 = &a6[a7];
    do
    {
      v23 = *(_DWORD *)(v20 + 4 * v16) + *(_DWORD *)(v19 + 4 * v16);
      if (a3)
      {
        v24 = 8 * a3;
        v25 = a2;
        do
        {
          v26 = (uint64_t)*v25++;
          v23 += *(_DWORD *)(*(_QWORD *)(v13 + 616) + 4 * v16 + 4 * (*(_DWORD *)(v26 + 24) * v14));
          v24 -= 8;
        }
        while (v24);
      }
      v27 = 0;
      if (a5)
      {
        v28 = a4;
        do
        {
          v29 = *v28;
          if ((~*(unsigned __int16 *)(*v28 + 8) & 0x1FFF) != 0 && *(_WORD *)(v29 + 12))
          {
            v30 = *(unsigned __int16 *)(v29 + 10);
            v31 = 4 * *(unsigned __int16 *)(v29 + 12);
            v32 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v13 + 464) + 136) + 4 * v30 + 2);
            do
            {
              if (v16 == *(v32 - 1))
                v27 += *(_DWORD *)(*(_QWORD *)(v13 + 480) + 4 * v16) * *v32;
              v32 += 2;
              v31 -= 4;
            }
            while (v31);
          }
          ++v28;
        }
        while (v28 != v21);
      }
      v33 = 0;
      if (a7)
      {
        v34 = a6;
        do
        {
          v35 = *v34;
          if ((~*(unsigned __int16 *)(*v34 + 8) & 0x1FFF) != 0 && *(_WORD *)(v35 + 12))
          {
            v36 = *(unsigned __int16 *)(v35 + 10);
            v37 = 4 * *(unsigned __int16 *)(v35 + 12);
            v38 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v13 + 464) + 136) + 4 * v36 + 2);
            do
            {
              if (v16 == *(v38 - 1))
                v33 += *(_DWORD *)(*(_QWORD *)(v13 + 480) + 4 * v16) * *v38;
              v38 += 2;
              v37 -= 4;
            }
            while (v37);
          }
          ++v34;
        }
        while (v34 != v22);
      }
      v39 = v27 + v23 - v33;
      if (v17 <= v39)
        v17 = v39;
      ++v16;
    }
    while (v16 != v14);
    v40 = v17 - 1;
  }
  else
  {
    v40 = -1;
  }
  v41 = *(_DWORD *)(v13 + 564);
  v42 = *(_DWORD *)(v11 + 28) + *(_DWORD *)(v11 + 24);
  if (a3)
  {
    do
    {
      v43 = *a2++;
      v42 += *llvm::MachineTraceMetrics::getResources(*(llvm::MachineTraceMetrics **)(*a1 + 432), v43);
      v15 -= 8;
    }
    while (v15);
    v13 = *(_QWORD *)(*a1 + 432);
  }
  v44 = v42 + a5 - a7;
  v45 = *(_DWORD *)(v13 + 288);
  if (v45)
    v44 /= v45;
  v46 = (v41 + v40) / v41;
  if (v44 <= v46)
    return v46;
  else
    return v44;
}

BOOL llvm::MachineTraceMetrics::Trace::isDepInTrace(llvm::MachineTraceMetrics::Trace *this, const llvm::MachineInstr *a2, const llvm::MachineInstr *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a3 + 3);
  if (v3 == v4)
    return 1;
  v5 = *(_DWORD *)(v3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)this + 8);
  v7 = *(_DWORD *)(v6 + 88 * v5 + 24);
  if (v7 == -1)
    return 0;
  v8 = *(_DWORD *)(v4 + 24);
  v9 = *(_DWORD *)(v6 + 88 * v8 + 24);
  if (v9 == -1 || *(_DWORD *)(v6 + 88 * v5 + 16) != *(_DWORD *)(v6 + 88 * v8 + 16))
    return 0;
  v10 = *(unsigned __int8 *)(v6 + 88 * v5 + 32);
  return v7 <= v9 && v10 != 0;
}

llvm::raw_ostream *llvm::MachineTraceMetrics::Ensemble::print(llvm::MachineTraceMetrics::Ensemble *this, void **a2)
{
  const char *v4;
  llvm::raw_ostream *result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  _BYTE *v14;

  v4 = (const char *)(*(uint64_t (**)(llvm::MachineTraceMetrics::Ensemble *))(*(_QWORD *)this + 32))(this);
  result = (llvm::raw_ostream *)a2;
  if (v4)
  {
    v6 = strlen(v4);
    if (v6 <= (_BYTE *)a2[3] - (_BYTE *)a2[4])
    {
      result = (llvm::raw_ostream *)a2;
      if (v6)
      {
        memcpy(a2[4], v4, v6);
        a2[4] = (char *)a2[4] + v6;
        result = (llvm::raw_ostream *)a2;
      }
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, v4, v6);
    }
  }
  v7 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 171599212;
    *(_QWORD *)v7 = *(_QWORD *)" ensemble:\n";
    *((_QWORD *)result + 4) += 11;
  }
  else
  {
    result = llvm::raw_ostream::write(result, " ensemble:\n", 0xBuLL);
  }
  v8 = *((unsigned int *)this + 4);
  if ((_DWORD)v8)
  {
    v9 = 0;
    for (i = 0; i != v8; ++i)
    {
      v11 = a2[4];
      if ((unint64_t)((_BYTE *)a2[3] - (_BYTE *)v11) > 5)
      {
        v11[2] = 11874;
        *(_DWORD *)v11 = 1646600224;
        a2[4] = (char *)a2[4] + 6;
        v12 = (llvm::raw_ostream *)a2;
      }
      else
      {
        v12 = llvm::raw_ostream::write((llvm::raw_ostream *)a2, "  %bb.", 6uLL);
      }
      sub_1C5E21910(v12, i, 0, 0, 0);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 9);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 9;
      }
      result = llvm::MachineTraceMetrics::TraceBlockInfo::print((llvm::raw_ostream *)(*((_QWORD *)this + 1) + v9), (llvm::raw_ostream *)a2);
      v14 = a2[4];
      if (v14 >= a2[3])
      {
        result = llvm::raw_ostream::write((llvm::raw_ostream *)a2, 10);
      }
      else
      {
        a2[4] = v14 + 1;
        *v14 = 10;
      }
      v9 += 88;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::MachineTraceMetrics::TraceBlockInfo::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  _WORD *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  void (**v11)(void);
  const char *v12;
  llvm::raw_ostream *v13;
  size_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _QWORD *v17;
  _WORD *v18;
  _DWORD *v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  void (**v26)(void);
  const char *v27;
  llvm::raw_ostream *v28;
  size_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _QWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t v39;

  v2 = a2;
  v3 = (uint64_t)this;
  v39 = *MEMORY[0x1E0C80C00];
  v4 = (_WORD *)*((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 3) - (_QWORD)v4;
  if (*((_DWORD *)this + 6) == -1)
  {
    if (v5 <= 0xC)
    {
      v12 = "depth invalid";
      v13 = v2;
      v14 = 13;
LABEL_21:
      this = llvm::raw_ostream::write(v13, v12, v14);
      goto LABEL_22;
    }
    qmemcpy(v4, "depth invalid", 13);
    v34 = *((_QWORD *)a2 + 4) + 13;
    goto LABEL_62;
  }
  if (v5 > 5)
  {
    v4[2] = 15720;
    *(_DWORD *)v4 = 1953523044;
    *((_QWORD *)a2 + 4) += 6;
    v6 = a2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(a2, "depth=", 6uLL);
  }
  sub_1C5E21910(v6, *(unsigned int *)(v3 + 24), 0, 0, 0);
  v7 = *((_QWORD *)v2 + 4);
  v8 = *((_QWORD *)v2 + 3) - v7;
  if (!*(_QWORD *)v3)
  {
    if (v8 > 9)
    {
      *(_WORD *)(v7 + 8) = 27756;
      *(_QWORD *)v7 = *(_QWORD *)" pred=null";
      *((_QWORD *)v2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v2, " pred=null", 0xAuLL);
    }
    goto LABEL_16;
  }
  if (v8 > 5)
  {
    *(_WORD *)(v7 + 4) = 15716;
    *(_DWORD *)v7 = 1701998624;
    *((_QWORD *)v2 + 4) += 6;
    v9 = v2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v2, " pred=", 6uLL);
  }
  v10 = *(_QWORD *)v3;
  v38 = &v36;
  v36 = &off_1E8143F38;
  v37 = v10;
  sub_1C512E114((uint64_t)&v36, v9);
  if (v38 == &v36)
  {
    v11 = (void (**)(void))(v36 + 4);
  }
  else
  {
    if (!v38)
      goto LABEL_16;
    v11 = (void (**)(void))(*v38 + 5);
  }
  (*v11)();
LABEL_16:
  v15 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v15) > 9)
  {
    *(_WORD *)(v15 + 8) = 11874;
    *(_QWORD *)v15 = *(_QWORD *)" head=%bb.";
    *((_QWORD *)v2 + 4) += 10;
    v16 = v2;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v2, " head=%bb.", 0xAuLL);
  }
  this = sub_1C5E21910(v16, *(unsigned int *)(v3 + 16), 0, 0, 0);
  if (*(_BYTE *)(v3 + 32))
  {
    v17 = (_QWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v17 <= 7uLL)
    {
      v12 = " +instrs";
      v13 = v2;
      v14 = 8;
      goto LABEL_21;
    }
    *v17 = 0x737274736E692B20;
    v34 = *((_QWORD *)v2 + 4) + 8;
LABEL_62:
    *((_QWORD *)v2 + 4) = v34;
  }
LABEL_22:
  v18 = (_WORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 8236;
    v19 = (_DWORD *)(*((_QWORD *)v2 + 4) + 2);
    *((_QWORD *)v2 + 4) = v19;
  }
  else
  {
    this = llvm::raw_ostream::write(v2, ", ", 2uLL);
    v19 = (_DWORD *)*((_QWORD *)v2 + 4);
  }
  v20 = *((_QWORD *)v2 + 3) - (_QWORD)v19;
  if (*(_DWORD *)(v3 + 28) == -1)
  {
    if (v20 <= 0xD)
    {
      v27 = "height invalid";
      v28 = v2;
      v29 = 14;
LABEL_44:
      this = llvm::raw_ostream::write(v28, v27, v29);
      goto LABEL_45;
    }
    qmemcpy(v19, "height invalid", 14);
    v35 = *((_QWORD *)v2 + 4) + 14;
LABEL_64:
    *((_QWORD *)v2 + 4) = v35;
    goto LABEL_45;
  }
  if (v20 > 6)
  {
    *(_DWORD *)((char *)v19 + 3) = 1031039079;
    *v19 = 1734960488;
    *((_QWORD *)v2 + 4) += 7;
    v21 = v2;
  }
  else
  {
    v21 = llvm::raw_ostream::write(v2, "height=", 7uLL);
  }
  sub_1C5E21910(v21, *(unsigned int *)(v3 + 28), 0, 0, 0);
  v22 = *((_QWORD *)v2 + 4);
  v23 = *((_QWORD *)v2 + 3) - v22;
  if (!*(_QWORD *)(v3 + 8))
  {
    if (v23 > 9)
    {
      *(_WORD *)(v22 + 8) = 27756;
      *(_QWORD *)v22 = *(_QWORD *)" succ=null";
      *((_QWORD *)v2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v2, " succ=null", 0xAuLL);
    }
    goto LABEL_39;
  }
  if (v23 > 5)
  {
    *(_WORD *)(v22 + 4) = 15715;
    *(_DWORD *)v22 = 1668641568;
    *((_QWORD *)v2 + 4) += 6;
    v24 = v2;
  }
  else
  {
    v24 = llvm::raw_ostream::write(v2, " succ=", 6uLL);
  }
  v25 = *(_QWORD *)(v3 + 8);
  v38 = &v36;
  v36 = &off_1E8143F38;
  v37 = v25;
  sub_1C512E114((uint64_t)&v36, v24);
  if (v38 == &v36)
  {
    v26 = (void (**)(void))(v36 + 4);
  }
  else
  {
    if (!v38)
      goto LABEL_39;
    v26 = (void (**)(void))(*v38 + 5);
  }
  (*v26)();
LABEL_39:
  v30 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v30) > 9)
  {
    *(_WORD *)(v30 + 8) = 11874;
    *(_QWORD *)v30 = *(_QWORD *)" tail=%bb.";
    *((_QWORD *)v2 + 4) += 10;
    v31 = v2;
  }
  else
  {
    v31 = llvm::raw_ostream::write(v2, " tail=%bb.", 0xAuLL);
  }
  this = sub_1C5E21910(v31, *(unsigned int *)(v3 + 20), 0, 0, 0);
  if (*(_BYTE *)(v3 + 33))
  {
    v32 = (_QWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v32 <= 7uLL)
    {
      v27 = " +instrs";
      v28 = v2;
      v29 = 8;
      goto LABEL_44;
    }
    *v32 = 0x737274736E692B20;
    v35 = *((_QWORD *)v2 + 4) + 8;
    goto LABEL_64;
  }
LABEL_45:
  if (*(_BYTE *)(v3 + 32) && *(_BYTE *)(v3 + 33))
  {
    v33 = (_DWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v33 > 6uLL)
    {
      *(_DWORD *)((char *)v33 + 3) = 1031039346;
      *v33 = 1919098924;
      *((_QWORD *)v2 + 4) += 7;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v2, ", crit=", 7uLL);
    }
    return sub_1C5E21910(v2, *(unsigned int *)(v3 + 36), 0, 0, 0);
  }
  return this;
}

llvm::raw_ostream *llvm::MachineTraceMetrics::Trace::print(llvm::MachineTraceMetrics::Trace *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  uint64_t v6;
  const char *v7;
  llvm::raw_ostream *v8;
  const char *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *result;
  unsigned int v27;
  _DWORD *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t (**v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  uint64_t (**v39)(void);
  _BYTE *v40;
  uint64_t (**v41)();
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)this;
  v6 = *((_QWORD *)this + 1) - v4[1];
  v7 = (const char *)(*(uint64_t (**)(_QWORD *))(*v4 + 32))(v4);
  v8 = a2;
  if (v7)
  {
    v9 = v7;
    v10 = strlen(v7);
    v11 = (void *)*((_QWORD *)a2 + 4);
    if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v11)
    {
      v8 = a2;
      if (v10)
      {
        memcpy(v11, v9, v10);
        *((_QWORD *)a2 + 4) += v10;
        v8 = a2;
      }
    }
    else
    {
      v8 = llvm::raw_ostream::write(a2, v9, v10);
    }
  }
  v12 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v12) > 0xA)
  {
    *(_DWORD *)(v12 + 7) = 778199589;
    *(_QWORD *)v12 = *(_QWORD *)" trace %bb.";
    *((_QWORD *)v8 + 4) += 11;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, " trace %bb.", 0xBuLL);
  }
  sub_1C5E21910(v8, *(unsigned int *)(*((_QWORD *)this + 1) + 16), 0, 0, 0);
  v13 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v13) > 8)
  {
    *(_BYTE *)(v13 + 8) = 46;
    *(_QWORD *)v13 = *(_QWORD *)" --> %bb.";
    *((_QWORD *)v8 + 4) += 9;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, " --> %bb.", 9uLL);
  }
  v14 = -1171354717 * (v6 >> 3);
  sub_1C5E21910(v8, v14, 0, 0, 0);
  v15 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v15) > 8)
  {
    *(_BYTE *)(v15 + 8) = 46;
    *(_QWORD *)v15 = *(_QWORD *)" --> %bb.";
    *((_QWORD *)v8 + 4) += 9;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, " --> %bb.", 9uLL);
  }
  sub_1C5E21910(v8, *(unsigned int *)(*((_QWORD *)this + 1) + 20), 0, 0, 0);
  v16 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 58);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v16 + 1;
    *v16 = 58;
  }
  v17 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v17 + 28) != -1 && *(_DWORD *)(v17 + 24) != -1)
  {
    v18 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v18 + 1;
      *v18 = 32;
    }
    sub_1C5E21910(a2, (*(_DWORD *)(*((_QWORD *)this + 1) + 28) + *(_DWORD *)(*((_QWORD *)this + 1) + 24)), 0, 0, 0);
    v19 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 7uLL)
    {
      *v19 = 0x2E737274736E6920;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " instrs.", 8uLL);
    }
  }
  v20 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v20 + 32) && *(_BYTE *)(v20 + 33))
  {
    v21 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v21 + 1;
      *v21 = 32;
    }
    sub_1C5E21910(a2, *(unsigned int *)(*((_QWORD *)this + 1) + 36), 0, 0, 0);
    v22 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v22 > 7uLL)
    {
      *v22 = 0x2E73656C63796320;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " cycles.", 8uLL);
    }
  }
  v23 = (_DWORD *)*((_QWORD *)this + 1);
  v24 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v24) > 4)
  {
    *(_BYTE *)(v24 + 4) = 46;
    *(_DWORD *)v24 = 1650599178;
    *((_QWORD *)a2 + 4) += 5;
    v25 = a2;
  }
  else
  {
    v25 = llvm::raw_ostream::write(a2, "\n%bb.", 5uLL);
  }
  result = sub_1C5E21910(v25, v14, 0, 0, 0);
  if (v23[6] != -1)
  {
    while (1)
    {
      if (!*(_QWORD *)v23)
        goto LABEL_41;
      v27 = *(_DWORD *)(*(_QWORD *)v23 + 24);
      v28 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v28 > 3uLL)
      {
        *v28 = 539835424;
        *((_QWORD *)a2 + 4) += 4;
        v29 = a2;
      }
      else
      {
        v29 = llvm::raw_ostream::write(a2, " <- ", 4uLL);
      }
      v30 = *(_QWORD *)v23;
      v43 = &v41;
      v41 = &off_1E8143F38;
      v42 = v30;
      sub_1C512E114((uint64_t)&v41, v29);
      result = (llvm::raw_ostream *)v43;
      if (v43 == &v41)
        break;
      if (v43)
      {
        v31 = *v43 + 5;
LABEL_37:
        result = (llvm::raw_ostream *)(*v31)();
      }
      v23 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 88 * v27);
      if (v23[6] == -1)
        goto LABEL_41;
    }
    v31 = v41 + 4;
    goto LABEL_37;
  }
LABEL_41:
  v32 = *((_QWORD *)this + 1);
  v33 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v33) > 4)
  {
    *(_BYTE *)(v33 + 4) = 32;
    *(_DWORD *)v33 = 538976266;
    *((_QWORD *)a2 + 4) += 5;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, "\n    ", 5uLL);
  }
  if (*(_DWORD *)(v32 + 28) != -1)
  {
    while (1)
    {
      v34 = *(_QWORD *)(v32 + 8);
      if (!v34)
        goto LABEL_55;
      v35 = *(_DWORD *)(v34 + 24);
      v36 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 3uLL)
      {
        *v36 = 540945696;
        *((_QWORD *)a2 + 4) += 4;
        v37 = a2;
      }
      else
      {
        v37 = llvm::raw_ostream::write(a2, " -> ", 4uLL);
      }
      v38 = *(_QWORD *)(v32 + 8);
      v43 = &v41;
      v41 = &off_1E8143F38;
      v42 = v38;
      sub_1C512E114((uint64_t)&v41, v37);
      result = (llvm::raw_ostream *)v43;
      if (v43 == &v41)
        break;
      if (v43)
      {
        v39 = *v43 + 5;
LABEL_51:
        result = (llvm::raw_ostream *)(*v39)();
      }
      v32 = *(_QWORD *)(*(_QWORD *)this + 8) + 88 * v35;
      if (*(_DWORD *)(v32 + 28) == -1)
        goto LABEL_55;
    }
    v39 = v41 + 4;
    goto LABEL_51;
  }
LABEL_55:
  v40 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v40 + 1;
  *v40 = 10;
  return result;
}

uint64_t sub_1C51C314C(uint64_t a1, const llvm::MachineBasicBlock *a2)
{
  llvm::MachineTraceMetrics *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const llvm::MachineBasicBlock *v10;
  int v11;
  int v12;
  uint64_t v13;
  int *Resources;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  unsigned int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  BOOL v24;

  if (*((_QWORD *)a2 + 8) == *((_QWORD *)a2 + 9))
    return 0;
  v4 = *(llvm::MachineTraceMetrics **)(a1 + 432);
  v5 = *((_QWORD *)v4 + 35);
  v6 = *(_DWORD *)(v5 + 264);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 248);
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(const llvm::MachineBasicBlock **)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_7:
      v13 = *(_QWORD *)(v7 + 16 * v9 + 8);
      if (v13 && **(const llvm::MachineBasicBlock ***)(v13 + 32) == a2)
        return 0;
    }
    else
    {
      v11 = 1;
      while (v10 != (const llvm::MachineBasicBlock *)-4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(const llvm::MachineBasicBlock **)(v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_7;
      }
    }
  }
  Resources = llvm::MachineTraceMetrics::getResources(v4, a2);
  v15 = (uint64_t *)*((_QWORD *)a2 + 8);
  v16 = (uint64_t *)*((_QWORD *)a2 + 9);
  if (v15 == v16)
    return 0;
  v17 = Resources;
  v18 = 0;
  result = 0;
  v20 = *v17;
  v21 = *(_QWORD *)(a1 + 8);
  do
  {
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 88 * *(int *)(*v15 + 24) + 24);
      if (v22 != -1)
      {
        v23 = v22 + v20;
        if (result)
          v24 = v23 >= v18;
        else
          v24 = 0;
        if (!v24)
        {
          result = *v15;
          v18 = v23;
        }
      }
    }
    ++v15;
  }
  while (v15 != v16);
  return result;
}

uint64_t sub_1C51C3268(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;

  if (a2[8] == a2[9])
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 280);
  v3 = *(_QWORD *)(v2 + 248);
  v4 = *(_DWORD *)(v2 + 264);
  if (v4)
  {
    v5 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD **)(v3 + 16 * v5);
    if (v6 == a2)
    {
LABEL_7:
      v9 = *(_QWORD *)(v3 + 16 * v5 + 8);
      goto LABEL_9;
    }
    v7 = 1;
    while (v6 != (_QWORD *)-4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & (v4 - 1);
      v6 = *(_QWORD **)(v3 + 16 * v5);
      if (v6 == a2)
        goto LABEL_7;
    }
  }
  v9 = 0;
LABEL_9:
  v10 = (uint64_t *)a2[11];
  v11 = (uint64_t *)a2[12];
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = v4 - 1;
    while (1)
    {
      v15 = *v10;
      if (!v9 || v15 != **(_QWORD **)(v9 + 32))
        break;
LABEL_34:
      if (++v10 == v11)
        return v13;
    }
    if (v4)
    {
      v16 = ((v15 >> 4) ^ (v15 >> 9)) & v14;
      v17 = *(_QWORD *)(v3 + 16 * v16);
      if (v15 == v17)
      {
LABEL_18:
        v20 = *(_QWORD **)(v3 + 16 * v16 + 8);
        if (v9)
          goto LABEL_21;
LABEL_24:
        v21 = *(_QWORD *)(a1 + 8);
        if (v21)
        {
          v22 = *(_DWORD *)(v21 + 88 * *(int *)(v15 + 24) + 28);
          if (v22 != -1)
          {
            if (v13)
              v23 = v22 >= v12;
            else
              v23 = 0;
            if (!v23)
            {
              v13 = *v10;
              v12 = v22;
            }
          }
        }
        goto LABEL_34;
      }
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v16 + v18++;
        v16 = v19 & v14;
        v17 = *(_QWORD *)(v3 + 16 * v16);
        if (v15 == v17)
          goto LABEL_18;
      }
    }
    v20 = 0;
    if (v9)
    {
LABEL_21:
      while (v20 != (_QWORD *)v9)
      {
        if (!v20)
          goto LABEL_34;
        v20 = (_QWORD *)*v20;
      }
    }
    goto LABEL_24;
  }
  return 0;
}

void sub_1C51C33DC(llvm::MachineTraceMetrics::Ensemble *a1)
{
  llvm::MachineTraceMetrics::Ensemble::~Ensemble(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C51C3400()
{
  return "MinInstr";
}

BOOL sub_1C51C340C(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  char v23;

  v4 = *(_DWORD *)(a4 + 24);
  v5 = *a1;
  if (*((_BYTE *)a1 + 120))
    v6 = *(_DWORD *)(v5 + 88 * v4 + 28);
  else
    v6 = *(_DWORD *)(v5 + 88 * v4 + 24);
  if (v6 != -1)
    return 0;
  if (a3)
  {
    v8 = a1[14];
    v9 = *(_DWORD *)(v8 + 264);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 248);
      v11 = v9 - 1;
      v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
      v13 = *(_QWORD *)(v10 + 16 * v12);
      if (v13 == a2)
      {
LABEL_12:
        v16 = *(_QWORD *)(v10 + 16 * v12 + 8);
        if (v16)
        {
          if (*((_BYTE *)a1 + 120))
            v17 = a4;
          else
            v17 = a2;
          if (v17 == **(_QWORD **)(v16 + 32))
            return 0;
          v18 = v11 & ((a4 >> 4) ^ (a4 >> 9));
          v19 = *(_QWORD *)(v10 + 16 * v18);
          if (v19 == a4)
          {
LABEL_21:
            v22 = *(_QWORD **)(v10 + 16 * v18 + 8);
            goto LABEL_24;
          }
          v20 = 1;
          while (v19 != -4096)
          {
            v21 = v18 + v20++;
            v18 = v21 & v11;
            v19 = *(_QWORD *)(v10 + 16 * v18);
            if (v19 == a4)
              goto LABEL_21;
          }
          v22 = 0;
LABEL_24:
          while (v22 != (_QWORD *)v16)
          {
            if (!v22)
              return 0;
            v22 = (_QWORD *)*v22;
          }
        }
      }
      else
      {
        v14 = 1;
        while (v13 != -4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(_QWORD *)(v10 + 16 * v12);
          if (v13 == a2)
            goto LABEL_12;
        }
      }
    }
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 2), a4);
  return v23 != 0;
}

void *sub_1C51C355C(void *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = (char *)result + 8;
  v2 = *((_QWORD *)result + 1) + 16 * *((unsigned int *)result + 4);
  v5 = *(uint64_t **)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  v6 = *(v3 - 1);
  if (v5 != *(uint64_t **)(v6 + 72))
  {
    v7 = (uint64_t **)result;
    v8 = (uint64_t)result + 24;
    do
    {
      *v3 = v4 + 1;
      v9 = *v4;
      result = (void *)sub_1C51C340C(*v7, v6, 1, *v4);
      v10 = *((unsigned int *)v7 + 4);
      if ((_DWORD)result)
      {
        v11 = *(_QWORD *)(v9 + 64);
        if (v10 >= *((_DWORD *)v7 + 5))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v8, v10 + 1, 16);
          LODWORD(v10) = *((_DWORD *)v7 + 4);
        }
        v10 = (uint64_t)&v7[1][2 * v10];
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = v11;
        LODWORD(v10) = *((_DWORD *)v7 + 4) + 1;
        *((_DWORD *)v7 + 4) = v10;
      }
      v12 = *v1 + 16 * v10;
      v13 = *(uint64_t **)(v12 - 8);
      v3 = (_QWORD *)(v12 - 8);
      v4 = v13;
      v6 = *(v3 - 1);
    }
    while (v13 != *(uint64_t **)(v6 + 72));
  }
  return result;
}

void *sub_1C51C3638(void *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = (char *)result + 8;
  v2 = *((_QWORD *)result + 1) + 16 * *((unsigned int *)result + 4);
  v5 = *(uint64_t **)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  v6 = *(v3 - 1);
  if (v5 != *(uint64_t **)(v6 + 96))
  {
    v7 = (uint64_t **)result;
    v8 = (uint64_t)result + 24;
    do
    {
      *v3 = v4 + 1;
      v9 = *v4;
      result = (void *)sub_1C51C340C(*v7, v6, 1, *v4);
      v10 = *((unsigned int *)v7 + 4);
      if ((_DWORD)result)
      {
        v11 = *(_QWORD *)(v9 + 88);
        if (v10 >= *((_DWORD *)v7 + 5))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v8, v10 + 1, 16);
          LODWORD(v10) = *((_DWORD *)v7 + 4);
        }
        v10 = (uint64_t)&v7[1][2 * v10];
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = v11;
        LODWORD(v10) = *((_DWORD *)v7 + 4) + 1;
        *((_DWORD *)v7 + 4) = v10;
      }
      v12 = *v1 + 16 * v10;
      v13 = *(uint64_t **)(v12 - 8);
      v3 = (_QWORD *)(v12 - 8);
      v4 = v13;
      v6 = *(v3 - 1);
    }
    while (v13 != *(uint64_t **)(v6 + 96));
  }
  return result;
}

uint64_t sub_1C51C3714(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Verify generated machine code";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "machineverifier";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51CBE3C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createMachineVerifierPass(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v5;

  v2 = operator new();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v5 = *(_QWORD *)(a1 + 16);
  }
  sub_1C51C382C(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return v2;
}

uint64_t sub_1C51C382C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v4 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F6FB0);
  *(_QWORD *)v4 = off_1E8146C20;
  v5 = *a2;
  *(_QWORD *)(v4 + 264) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 248) = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED82FB60);
  if (v7 != -1)
  {
    v11[0] = sub_1C51C3714;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED82FB60, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::verifyMachineFunction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t result;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12[4];
  _QWORD v13[13];
  int v14;
  _QWORD v15[10];
  _DWORD v16[14];
  __int128 v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[10];
  _QWORD v22[10];
  _QWORD v23[10];
  _OWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v13[0] = 0;
  v13[1] = v3;
  v13[10] = v15;
  v13[11] = v15;
  v13[12] = 8;
  v14 = 0;
  v15[8] = v16;
  v15[9] = 0x600000000;
  v16[12] = 0;
  v17 = 0u;
  v18 = 0;
  v19 = v21;
  v20 = 0x1000000000;
  v21[8] = v22;
  v21[9] = 0x1000000000;
  v22[8] = v23;
  v22[9] = 0x1000000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v26 = 0;
  v25 = 0;
  v24[2] = 0u;
  v4 = sub_1C51C3A7C((uint64_t)v13, a3);
  result = sub_1C51CBCF8((uint64_t)v13);
  if (v4)
  {
    v10 = "Found ";
    v11 = 259;
    v9 = 264;
    LODWORD(v8[0]) = v4;
    sub_1C6131AAC((uint64_t *)&v10, v8, (uint64_t)v12);
    v6 = " machine code errors.";
    v7 = 259;
    sub_1C6131AAC(v12, (uint64_t *)&v6, (uint64_t)v13);
    llvm::report_fatal_error((uint64_t)v13, 1);
  }
  return result;
}

uint64_t sub_1C51C3A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::PMDataManager *v7;
  uint64_t AnalysisPass;
  uint64_t v9;
  uint64_t v10;
  llvm::PMDataManager *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const llvm::Value *v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t m;
  void *v35;
  const llvm::MachineFunction *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int *v68;
  llvm *v69;
  llvm::raw_ostream *v70;
  llvm::raw_ostream *v71;
  void *v72;
  _WORD *v73;
  void (**v74)(void);
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int *v82;
  llvm *v83;
  llvm::raw_ostream *v84;
  llvm::raw_ostream *v85;
  void *v86;
  _WORD *v87;
  void (**v88)(void);
  unint64_t v89;
  uint64_t v90;
  llvm *v91;
  int v92;
  llvm::raw_ostream *v93;
  llvm::raw_ostream *v94;
  void *v95;
  uint64_t v96;
  _DWORD *v97;
  _BYTE *v98;
  void (**v99)(void);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  int v106;
  llvm::Value **v107;
  unsigned int v108;
  unsigned __int16 *v110;
  unsigned __int16 *j;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int16 *v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  _DWORD *v121;
  int v122;
  int v123;
  _DWORD *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  _DWORD *v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  const char *v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int16 *v147;
  unsigned __int16 v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  _DWORD *v154;
  int v155;
  int v156;
  _DWORD *v157;
  int v158;
  BOOL v159;
  unsigned int v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  __int16 v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  __int16 v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  int v182;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  int v187;
  int v188;
  llvm *v189;
  llvm::raw_ostream *v190;
  llvm::raw_ostream *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int16 *v197;
  llvm *v198;
  llvm::raw_ostream *v199;
  void *v200;
  _QWORD *v201;
  int v202;
  unint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int k;
  uint64_t v209;
  unint64_t *v210;
  _DWORD *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int16 *v215;
  unint64_t v216;
  int *v217;
  int *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  llvm *v222;
  llvm::raw_ostream *v223;
  llvm::raw_ostream *v224;
  void *v225;
  llvm *v226;
  llvm::raw_ostream *v227;
  llvm::raw_ostream *v228;
  void *v229;
  _BYTE *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  __int16 v234;
  unsigned __int16 *v235;
  uint64_t v236;
  unsigned __int16 *v238;
  uint64_t v239;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  int v250;
  const char *v252;
  unsigned __int16 *v253;
  int v254;
  _DWORD *v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int RegSizeInBits;
  unsigned int v268;
  uint64_t v269;
  llvm *v270;
  llvm::raw_ostream *v271;
  llvm::raw_ostream *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  unint64_t *v288;
  unint64_t v289;
  unsigned __int16 *v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  const char *v294;
  unint64_t v295;
  uint64_t v297;
  int v298;
  uint64_t v299;
  unsigned __int8 *v300;
  int v301;
  int v303;
  __int16 v304;
  int v305;
  int v306;
  int v307;
  int v308;
  BOOL v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  unint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  uint64_t v330;
  int v331;
  unsigned int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  __int16 v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unsigned int v343;
  int v344;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  unint64_t v354;
  _DWORD *v355;
  unsigned int v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  llvm::LiveInterval *v364;
  uint64_t v366;
  const char *v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  _QWORD *v371;
  unint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  llvm::LiveInterval *v376;
  uint64_t v377;
  unsigned __int16 *v378;
  unsigned int v379;
  unint64_t v380;
  int v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t **v385;
  unint64_t v386;
  int *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t **v390;
  uint64_t v391;
  unint64_t v392;
  int v393;
  BOOL v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  __int16 v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unsigned int v410;
  int v411;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  int v416;
  int v417;
  uint64_t v418;
  _QWORD *v419;
  unint64_t v420;
  _WORD *v421;
  unsigned __int16 *v422;
  __int16 v423;
  unsigned __int16 v424;
  llvm *v425;
  int v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  int v430;
  int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _WORD *v436;
  unint64_t v437;
  unsigned __int16 v438;
  int v439;
  unsigned int v440;
  int v441;
  int v442;
  unsigned int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  uint64_t v448;
  unsigned int v449;
  _DWORD *v450;
  _DWORD *v451;
  char v452;
  unsigned int v453;
  uint64_t v454;
  unsigned __int16 v455;
  unsigned __int16 *v456;
  int v457;
  uint64_t v458;
  const char *v459;
  unsigned int *v460;
  uint64_t *v461;
  unint64_t v462;
  _QWORD *v463;
  _QWORD *v464;
  int v465;
  uint64_t v466;
  int v467;
  unsigned int v468;
  int v469;
  unint64_t v470;
  unsigned int *v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unsigned int v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  __int16 v484;
  unint64_t v485;
  uint64_t v486;
  unsigned int v487;
  int v488;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  int v493;
  int v494;
  uint64_t v495;
  llvm *v496;
  llvm *v497;
  uint64_t *v498;
  uint64_t v499;
  llvm *v500;
  int v501;
  uint64_t TiedOperandIdx;
  uint64_t v503;
  int v504;
  const char *v505;
  uint64_t v506;
  int v507;
  int v508;
  int v509;
  unsigned int v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  llvm *v519;
  llvm::raw_ostream *v520;
  llvm::raw_ostream *v521;
  void *v522;
  void *v523;
  uint64_t v524;
  const char *v525;
  size_t v526;
  size_t v527;
  unint64_t v528;
  llvm::raw_ostream *v529;
  uint64_t v530;
  uint64_t v531;
  llvm *v532;
  llvm::raw_ostream *v533;
  uint64_t v534;
  _DWORD *v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  const char *v539;
  size_t v540;
  size_t v541;
  void (**v542)(void);
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  llvm *v546;
  llvm::raw_ostream *v547;
  uint64_t v548;
  void *v549;
  uint64_t v550;
  const char *v551;
  size_t v552;
  size_t v553;
  _WORD *v554;
  uint64_t v555;
  const char *v556;
  size_t v557;
  size_t v558;
  llvm::raw_ostream *v559;
  const char *v560;
  size_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  const char *v566;
  unint64_t v567;
  llvm *v568;
  llvm::raw_ostream *v569;
  void *v570;
  _QWORD *v571;
  const void *v572;
  size_t v573;
  size_t v574;
  uint64_t v575;
  unint64_t v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  llvm *v580;
  llvm::raw_ostream *v581;
  void *v582;
  void *v583;
  uint64_t v584;
  const char *v585;
  size_t v586;
  size_t v587;
  _BYTE *v588;
  uint64_t v589;
  llvm *v590;
  llvm::raw_ostream *v591;
  void *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  _BYTE *v596;
  const char *v597;
  size_t v598;
  size_t v599;
  unint64_t v600;
  unint64_t v601;
  unsigned int v602;
  _QWORD *v603;
  uint64_t v604;
  unsigned int v605;
  unsigned int v606;
  _QWORD *v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t v610;
  BOOL v611;
  unint64_t v612;
  _QWORD *v613;
  uint64_t v614;
  unint64_t v615;
  _QWORD *v616;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  int v624;
  int v625;
  unsigned int v626;
  uint64_t *v627;
  uint64_t v628;
  unsigned int v629;
  unsigned int v630;
  _DWORD *v631;
  int v632;
  _DWORD *v633;
  int v634;
  BOOL v635;
  unsigned int v636;
  _DWORD *v637;
  int v638;
  int v639;
  int v640;
  _QWORD *v641;
  uint64_t v642;
  _QWORD *v643;
  int v644;
  unsigned int v645;
  int v646;
  _DWORD *v647;
  int v648;
  BOOL v649;
  unsigned int v650;
  int v651;
  _QWORD *v652;
  uint64_t v653;
  int v654;
  unsigned int v655;
  int v656;
  uint64_t v657;
  int v658;
  BOOL v659;
  unsigned int v660;
  unint64_t v661;
  unsigned int v662;
  unint64_t v663;
  unint64_t v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  unsigned int v668;
  unsigned int v669;
  _QWORD *v670;
  unint64_t v671;
  unint64_t v672;
  uint64_t v673;
  BOOL v674;
  unint64_t v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  unsigned int v680;
  _QWORD *v681;
  unint64_t v682;
  unint64_t v683;
  uint64_t v684;
  BOOL v685;
  unint64_t v686;
  llvm::LiveInterval *v687;
  llvm *v688;
  llvm::raw_ostream *v689;
  llvm::raw_ostream *v690;
  uint64_t v691;
  _BYTE *v692;
  llvm::LiveInterval *v693;
  llvm *v694;
  llvm::raw_ostream *v695;
  llvm::raw_ostream *v696;
  uint64_t v697;
  _BYTE *v698;
  llvm *v699;
  llvm::raw_ostream *v700;
  uint64_t v701;
  void *v702;
  _BYTE *v703;
  int v704;
  int v705;
  int v706;
  uint64_t MinimalPhysRegClassLLT;
  unsigned int v708;
  uint64_t v709;
  unsigned int v710;
  const char *v711;
  const char *v712;
  unsigned int v713;
  const char *v714;
  uint64_t v715;
  unsigned int NumGCPtrIdx;
  const char *v717;
  uint64_t v718;
  unsigned int NumAllocaIdx;
  const char *v720;
  uint64_t v721;
  unsigned int NumGcMapEntriesIdx;
  const char *v723;
  uint64_t v724;
  unsigned int v725;
  unsigned int v726;
  unint64_t v727;
  unsigned int v728;
  uint64_t v729;
  unsigned int v730;
  int v731;
  uint64_t v732;
  unsigned int v733;
  int v734;
  int v735;
  int v736;
  unsigned int v738;
  int v739;
  int v740;
  int v741;
  unint64_t v742;
  void **v743;
  int v744;
  uint64_t v745;
  unint64_t v746;
  unint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  const char *v752;
  unint64_t v753;
  unint64_t v754;
  __int16 v755;
  int v756;
  int v757;
  uint64_t v758;
  BOOL v759;
  unint64_t v760;
  llvm *v761;
  llvm::raw_ostream *v762;
  llvm::raw_ostream *v763;
  void *v764;
  void *v765;
  _BYTE *v766;
  unint64_t v767;
  __int16 v768;
  int v769;
  int v770;
  uint64_t v771;
  BOOL v772;
  __int16 v773;
  int v774;
  int v775;
  uint64_t v776;
  BOOL v777;
  __int16 v778;
  int v779;
  int v780;
  uint64_t v781;
  BOOL v782;
  __int16 v783;
  int v784;
  int v785;
  uint64_t v786;
  BOOL v787;
  unint64_t v788;
  __int16 v789;
  int v790;
  int v791;
  uint64_t v792;
  BOOL v793;
  __int16 v794;
  int v795;
  int v796;
  uint64_t v797;
  BOOL v798;
  uint64_t (***v799)();
  uint64_t (***v800)();
  uint64_t (**v801)();
  uint64_t (***v802)();
  uint64_t (***v803)();
  int v804;
  BOOL v805;
  const llvm::MachineFunction *v806;
  const char *v807;
  const llvm::MachineFunction **v808;
  const llvm::MachineFunction **v809;
  uint64_t (***v810)();
  uint64_t (***v811)();
  uint64_t (**v812)();
  uint64_t (**v814)();
  const llvm::MachineFunction *v815;
  uint64_t *v816;
  _QWORD *v817;
  _QWORD *v818;
  unint64_t v819;
  int v820;
  uint64_t v822;
  int v823;
  uint64_t *v824;
  uint64_t *v825;
  uint64_t *v826;
  _QWORD *v827;
  unsigned int *v828;
  llvm *v829;
  llvm::raw_ostream *v830;
  void *v831;
  void (**v832)(void);
  unsigned int v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  const char *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t *v841;
  _QWORD *v842;
  _QWORD *v843;
  _QWORD *v844;
  int v845;
  int v846;
  uint64_t v847;
  int v848;
  unsigned int v849;
  int v850;
  int v851;
  unsigned int v852;
  int v853;
  uint64_t v854;
  int v855;
  unsigned int v856;
  int v857;
  int v858;
  unsigned int v859;
  int v861;
  unsigned int v862;
  void *v863;
  uint64_t v864;
  _QWORD *v865;
  void **v866;
  _QWORD *v867;
  _QWORD *v868;
  uint64_t v869;
  uint64_t v870;
  int *v871;
  uint64_t v872;
  int *v873;
  int *v874;
  int v875;
  unsigned int *v876;
  int v877;
  unsigned int v878;
  uint64_t v879;
  uint64_t *v880;
  int v881;
  unsigned int v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  int v886;
  int v887;
  BOOL v888;
  int v889;
  uint64_t *v890;
  _QWORD *v891;
  uint64_t v892;
  uint64_t **v893;
  uint64_t v894;
  uint64_t **v895;
  _QWORD *v896;
  unsigned int *v897;
  _QWORD *v898;
  uint64_t *v899;
  uint64_t *v900;
  _QWORD *v901;
  uint64_t v902;
  _QWORD *v903;
  uint64_t v904;
  uint64_t v905;
  int *v906;
  uint64_t v907;
  int *v908;
  int *v909;
  int v910;
  unsigned int *v911;
  int v912;
  unsigned int v913;
  const llvm::MachineFunction *v914;
  _QWORD *v915;
  _QWORD *v916;
  _QWORD *v917;
  uint64_t v918;
  uint64_t v919;
  unsigned int *v920;
  uint64_t v921;
  unsigned int *v922;
  unsigned int *v923;
  int v924;
  unsigned int v925;
  uint64_t v926;
  int v927;
  unsigned int v928;
  int v929;
  llvm *v930;
  llvm::raw_ostream *v931;
  llvm::raw_ostream *v932;
  uint64_t v933;
  _DWORD *v934;
  void *v935;
  void (**v936)(void);
  unsigned int *v937;
  unsigned int v938;
  int v939;
  unsigned int v940;
  _QWORD *v941;
  uint64_t v942;
  uint64_t v943;
  int *v944;
  uint64_t v945;
  int *v946;
  int *v947;
  unsigned int *v948;
  int v949;
  unsigned int v950;
  int v951;
  _QWORD *v952;
  uint64_t v953;
  uint64_t v954;
  unint64_t v955;
  unsigned int v956;
  uint64_t *v957;
  unsigned int v958;
  _QWORD *v959;
  int v960;
  llvm *v961;
  llvm::raw_ostream *v962;
  llvm::raw_ostream *v963;
  uint64_t v964;
  _DWORD *v965;
  void *v966;
  llvm::raw_ostream *v967;
  const char *v968;
  size_t v969;
  uint64_t v970;
  int v971;
  unsigned int v972;
  int v973;
  llvm *v974;
  llvm::raw_ostream *v975;
  uint64_t v976;
  _DWORD *v977;
  void *v978;
  void (**v979)(void);
  uint64_t v980;
  int v981;
  unsigned int v982;
  uint64_t v983;
  int v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unsigned int v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  unsigned int v997;
  uint64_t *v998;
  uint64_t v999;
  uint64_t v1000;
  _QWORD *v1001;
  uint64_t v1002;
  uint64_t *v1003;
  uint64_t v1004;
  uint64_t v1005;
  llvm *v1006;
  llvm::raw_ostream *v1007;
  uint64_t v1008;
  _DWORD *v1009;
  void *v1010;
  void (**v1011)(void);
  unsigned int v1012;
  unsigned int v1013;
  llvm *v1014;
  unint64_t v1015;
  uint64_t v1016;
  llvm::raw_ostream *v1017;
  llvm *v1018;
  _QWORD *v1019;
  uint64_t v1020;
  unsigned int **v1021;
  uint64_t v1022;
  unsigned int *v1023;
  llvm::raw_ostream *v1024;
  _BYTE *v1025;
  _BYTE *v1026;
  uint64_t v1027;
  uint64_t n;
  uint64_t v1029;
  uint64_t v1030;
  const llvm::MachineFunction *v1031;
  _QWORD *v1032;
  _QWORD *v1033;
  unsigned __int16 *v1034;
  unsigned __int16 *v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t *v1038;
  uint64_t v1039;
  unint64_t v1040;
  __int16 v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  _QWORD *v1045;
  _WORD *v1046;
  unsigned __int16 v1047;
  unsigned __int16 v1048;
  unsigned __int16 v1049;
  unsigned __int16 *v1050;
  int v1051;
  int v1052;
  _QWORD *v1053;
  int v1054;
  uint64_t v1055;
  int v1056;
  unsigned int v1057;
  int v1058;
  int v1059;
  unsigned int v1060;
  llvm *v1061;
  uint64_t v1062;
  uint64_t v1063;
  const char *v1064;
  size_t v1065;
  void *v1066;
  void *v1067;
  _BYTE *v1068;
  void (**v1069)(void);
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1079;
  uint64_t ***v1080;
  uint64_t v1081;
  int v1082;
  uint64_t v1083;
  int v1084;
  unsigned int v1085;
  uint64_t ****v1086;
  uint64_t ***v1087;
  uint64_t ****v1088;
  int v1089;
  BOOL v1090;
  unsigned int v1091;
  uint64_t v1092;
  _QWORD *v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  unint64_t ii;
  uint64_t *v1098;
  uint64_t v1099;
  uint64_t *v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t v1103;
  _QWORD *v1104;
  uint64_t (***v1105)();
  uint64_t (***v1106)();
  _QWORD *v1107;
  _QWORD *v1108;
  _DWORD *v1109;
  _DWORD *v1110;
  int v1111;
  uint64_t v1112;
  int v1113;
  unsigned int v1114;
  _DWORD *v1115;
  int v1116;
  _DWORD *v1117;
  int v1118;
  BOOL v1119;
  unsigned int v1120;
  _DWORD *v1121;
  unint64_t v1122;
  unint64_t v1123;
  unint64_t v1124;
  __int128 *v1125;
  unsigned int v1126;
  int v1127;
  int v1128;
  unsigned int v1129;
  _QWORD *v1130;
  _QWORD *v1131;
  uint64_t v1132;
  void **v1133;
  void *v1134;
  void *v1135;
  int v1136;
  unsigned int v1137;
  _QWORD *v1138;
  uint64_t v1139;
  uint64_t v1140;
  void *v1141;
  void *v1142;
  unint64_t v1144;
  unint64_t v1145;
  _QWORD *v1146;
  unsigned int v1147;
  uint64_t v1148;
  void **v1149;
  uint64_t v1150;
  uint64_t ****v1151;
  unint64_t v1152;
  _BYTE *v1153;
  _BYTE *v1154;
  unint64_t v1155;
  int v1156;
  unint64_t v1157;
  char *v1158;
  int v1159;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  int v1163;
  char *v1164;
  uint64_t *v1165;
  uint64_t *v1166;
  uint64_t *v1167;
  uint64_t *v1168;
  unint64_t v1169;
  int v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  llvm *v1176;
  llvm::raw_ostream *v1177;
  llvm::raw_ostream *v1178;
  void *v1179;
  unint64_t v1180;
  llvm::raw_ostream *v1181;
  int v1182;
  void *v1183;
  uint64_t v1184;
  uint64_t v1185;
  char *v1186;
  uint64_t *v1187;
  int v1188;
  llvm *v1189;
  llvm::raw_ostream *v1190;
  llvm::raw_ostream *v1191;
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  llvm::raw_ostream *v1195;
  int v1196;
  _WORD *v1197;
  uint64_t v1198;
  uint64_t v1199;
  unint64_t v1200;
  int v1201;
  _WORD *v1202;
  uint64_t v1203;
  void (**v1204)(void);
  void (**v1205)(void);
  uint64_t v1206;
  char *v1207;
  uint64_t *v1208;
  int v1209;
  llvm *v1210;
  llvm::raw_ostream *v1211;
  llvm::raw_ostream *v1212;
  uint64_t v1213;
  uint64_t v1214;
  unint64_t v1215;
  llvm::raw_ostream *v1216;
  int v1217;
  _WORD *v1218;
  uint64_t v1219;
  uint64_t v1220;
  unint64_t v1221;
  int v1222;
  _WORD *v1223;
  uint64_t v1224;
  void (**v1225)(void);
  void (**v1226)(void);
  __int16 v1227;
  int v1228;
  int v1229;
  uint64_t v1230;
  BOOL v1231;
  unsigned int v1232;
  int v1233;
  unsigned int v1234;
  void *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  void **v1239;
  uint64_t v1240;
  unsigned int *v1241;
  unsigned int *v1242;
  unsigned int *v1243;
  uint64_t v1244;
  uint64_t v1245;
  llvm::SmallPtrSetImplBase *v1246;
  uint64_t v1247;
  uint64_t v1248;
  llvm::LiveInterval *v1249;
  llvm::LiveInterval *v1250;
  void **v1251;
  unint64_t v1252;
  unint64_t v1253;
  uint64_t v1254;
  _QWORD *v1255;
  uint64_t v1256;
  unint64_t *v1257;
  uint64_t v1258;
  unint64_t v1259;
  unsigned int v1260;
  int v1261;
  unint64_t v1262;
  _QWORD *v1263;
  uint64_t *v1264;
  void **v1265;
  const llvm::MachineFunction **v1266;
  _DWORD *v1267;
  uint64_t *v1268;
  void *v1269;
  uint64_t *v1270;
  _QWORD *v1271;
  unint64_t v1272;
  llvm::raw_ostream *v1273;
  llvm::raw_ostream *v1274;
  int v1275;
  llvm::raw_ostream *v1276;
  int v1277;
  uint64_t v1278;
  _QWORD *v1279;
  void *v1280;
  uint64_t *v1281;
  uint64_t v1282;
  int v1283;
  void **v1284;
  unint64_t v1285;
  int v1287;
  uint64_t v1288;
  _BYTE *v1289;
  uint64_t v1290;
  int v1291;
  _BYTE v1292[32];
  uint64_t (**v1293)();
  unint64_t v1294;
  uint64_t (***v1295)();
  uint64_t (**v1296)();
  uint64_t v1297;
  uint64_t *v1298;
  uint64_t *v1299;
  uint64_t *v1300;
  uint64_t v1301;
  void **v1302;
  _BYTE v1303[32];
  int v1304;
  unint64_t v1305;
  uint64_t v1306;
  __int128 v1307;
  _DWORD v1308[8];
  int v1309;
  uint64_t v1310;
  uint64_t v1311;
  int v1312;
  _QWORD *v1313;
  uint64_t v1314;
  _QWORD v1315[6];

  v2 = a2;
  v1315[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = a2;
  v3 = a1 + 16;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 176))(*(_QWORD *)(v2 + 16));
  v4 = *(_QWORD *)(v2 + 40);
  v1266 = (const llvm::MachineFunction **)v3;
  *(_QWORD *)(v3 + 32) = v4;
  v5 = **(_QWORD **)(v2 + 360);
  if ((v5 & 0x10) != 0)
    return *(unsigned int *)(a1 + 56);
  *(_BYTE *)(a1 + 60) = (v5 & 0x40) != 0;
  *(_BYTE *)(a1 + 61) = (v5 & 0x80) != 0;
  *(_BYTE *)(a1 + 62) = (v5 & 0x400) != 0;
  v1247 = a1 + 592;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v13 = a1;
    goto LABEL_16;
  }
  v7 = *(llvm::PMDataManager **)(*(_QWORD *)(v6 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v7, &llvm::LiveIntervals::ID, 1);
  if (!AnalysisPass)
    goto LABEL_6;
  v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 600) = v9;
  v6 = *(_QWORD *)a1;
  if (!v9)
  {
    v7 = *(llvm::PMDataManager **)(*(_QWORD *)(v6 + 8) + 24);
LABEL_6:
    v10 = llvm::PMDataManager::findAnalysisPass(v7, &llvm::LiveVariables::ID, 1);
    if (v10)
    {
      v10 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v10 + 96))(v10, &llvm::LiveVariables::ID);
      v6 = *(_QWORD *)a1;
    }
    *(_QWORD *)v1247 = v10;
  }
  v11 = *(llvm::PMDataManager **)(*(_QWORD *)(v6 + 8) + 24);
  v12 = llvm::PMDataManager::findAnalysisPass(v11, &llvm::LiveStacks::ID, 1);
  if (v12)
  {
    v12 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v12 + 96))(v12, &llvm::LiveStacks::ID);
    v13 = a1;
    v11 = *(llvm::PMDataManager **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  }
  else
  {
    v13 = a1;
  }
  *(_QWORD *)(v13 + 608) = v12;
  v14 = llvm::PMDataManager::findAnalysisPass(v11, &llvm::SlotIndexes::ID, 1);
  if (v14)
    v14 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v14 + 96))(v14, &llvm::SlotIndexes::ID);
  *(_QWORD *)(v13 + 616) = v14;
  v4 = *(_QWORD *)(v13 + 48);
LABEL_16:
  if ((**(_BYTE **)(v2 + 360) & 8) != 0 && *(_DWORD *)(v4 + 32))
  {
    sub_1C51CCA6C(v13, "Function has NoVRegs property but there are VReg operands", (llvm::Value **)v2);
    v4 = *(_QWORD *)(v13 + 48);
  }
  *(_QWORD *)(v13 + 560) = 0;
  v15 = *(_DWORD *)(v4 + 416);
  if (!v15)
  {
    (*(void (**)(unint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v13 + 40) + 88))(&v1305, *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 16));
    goto LABEL_30;
  }
  v16 = &v1307;
  v1305 = (unint64_t)&v1307;
  v1306 = 0x600000000;
  v17 = *(_DWORD *)(v4 + 360);
  if (v17 && &v1305 != (unint64_t *)(v4 + 352))
  {
    if (v17 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1305, (uint64_t)&v1307, *(unsigned int *)(v4 + 360), 8);
      v18 = *(unsigned int *)(v4 + 360);
      if (!(_DWORD)v18)
      {
LABEL_28:
        LODWORD(v1306) = v17;
        v15 = *(_DWORD *)(v4 + 416);
        goto LABEL_29;
      }
      v16 = (__int128 *)v1305;
    }
    else
    {
      v18 = *(unsigned int *)(v4 + 360);
    }
    memcpy(v16, *(const void **)(v4 + 352), 8 * v18);
    goto LABEL_28;
  }
LABEL_29:
  v1309 = v15;
  v13 = a1;
LABEL_30:
  v19 = (void **)(v13 + 176);
  if ((unint64_t *)(v13 + 176) == &v1305)
    goto LABEL_42;
  v20 = v1306;
  v21 = v13;
  v22 = *(unsigned int *)(v13 + 184);
  if (v22 >= v1306)
  {
    if ((_DWORD)v1306)
      memmove(*v19, (const void *)v1305, 8 * v1306);
    goto LABEL_41;
  }
  if (*(_DWORD *)(v21 + 188) < v1306)
  {
    *(_DWORD *)(a1 + 184) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v19, a1 + 192, v20, 8);
  }
  else if ((_DWORD)v22)
  {
    memmove(*v19, (const void *)v1305, 8 * v22);
    goto LABEL_39;
  }
  v22 = 0;
LABEL_39:
  if (v22 != v1306)
    memcpy((char *)*v19 + 8 * v22, (const void *)(v1305 + 8 * v22), 8 * v1306 - 8 * v22);
LABEL_41:
  v13 = a1;
  *(_DWORD *)(a1 + 184) = v20;
LABEL_42:
  *(_DWORD *)(v13 + 240) = v1309;
  if ((__int128 *)v1305 != &v1307)
    free((void *)v1305);
  v23 = sub_1C476B7EC((uint64_t)v19);
  for (i = a1; (v23 & 0x80000000) == 0; v23 = sub_1C476BA0C(v19, v23 + 1, *(_DWORD *)(a1 + 240), 1u))
  {
    v26 = *(_QWORD *)(i + 40);
    if (v26)
      v27 = (_QWORD *)(v26 + 8);
    else
      v27 = 0;
    v28 = v27[6];
    v29 = *(unsigned int *)(*v27 + 24 * v23 + 4);
    if (*(_WORD *)(v28 + 2 * v29))
    {
      v30 = *(unsigned __int16 *)(v28 + 2 * v29) + v23;
      v31 = *v19;
      v32 = (unsigned __int16 *)(v28 + 2 * v29 + 2);
      do
      {
        v31[(unsigned __int16)v30 >> 6] |= 1 << v30;
        v33 = *v32++;
        v30 += v33;
      }
      while (v33);
    }
    i = a1;
  }
  m = i;
  if (*((const llvm::MachineFunction **)*v1266 + 40) != (const llvm::MachineFunction *)((char *)*v1266 + 320))
    sub_1C51CCE40(i, *((_QWORD *)*v1266 + 41));
  v1246 = (llvm::SmallPtrSetImplBase *)(i + 80);
  v35 = *(void **)(i + 88);
  if (v35 == *(void **)(i + 80))
    goto LABEL_55;
  v1099 = *(unsigned int *)(i + 96);
  if (v1099 < 0x21 || 4 * (*(_DWORD *)(i + 100) - *(_DWORD *)(i + 104)) >= v1099)
  {
    memset(v35, 255, 8 * v1099);
LABEL_55:
    *(_DWORD *)(i + 100) = 0;
    *(_DWORD *)(i + 104) = 0;
    goto LABEL_56;
  }
  free(v35);
  v1232 = *(_DWORD *)(i + 100) - *(_DWORD *)(i + 104);
  v1233 = 1 << (33 - __clz(v1232 - 1));
  *(_DWORD *)(i + 100) = 0;
  *(_DWORD *)(i + 104) = 0;
  if (v1232 <= 0x10)
    v1234 = 32;
  else
    v1234 = v1233;
  *(_DWORD *)(i + 96) = v1234;
  v1235 = malloc_type_malloc(8 * v1234, 0x4065EBACuLL);
  if (!v1235)
LABEL_2139:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(i + 88) = v1235;
  memset(v1235, 255, 8 * *(unsigned int *)(i + 96));
LABEL_56:
  v36 = *v1266;
  v37 = (uint64_t)*v1266 + 320;
  v38 = (_QWORD *)*((_QWORD *)*v1266 + 41);
  v1251 = v19;
  if (v38 != (_QWORD *)v37)
  {
    v1256 = v2;
    v39 = m + 568;
    do
    {
      sub_1C4774094(v1246, (uint64_t)v38);
      v1305 = (unint64_t)v38;
      v40 = sub_1C51CCEAC(v39, (uint64_t *)&v1305);
      v41 = (uint64_t *)v38[8];
      v42 = (uint64_t *)v38[9];
      if (v41 == v42)
      {
        v44 = v38[8];
      }
      else
      {
        do
        {
          v43 = *v41++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v40 + 32), v43);
        }
        while (v41 != v42);
        v41 = (uint64_t *)v38[8];
        v44 = v38[9];
        v19 = v1251;
      }
      if (v40[37] - v40[38] != ((unint64_t)(v44 - (_QWORD)v41) >> 3))
        sub_1C51CC164(a1, "MBB has duplicate entries in its predecessor list.", (unint64_t)v38);
      v45 = (uint64_t *)v38[11];
      v46 = (uint64_t *)v38[12];
      if (v45 == v46)
      {
        v48 = v38[11];
      }
      else
      {
        do
        {
          v47 = *v45++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v40 + 56), v47);
        }
        while (v45 != v46);
        v45 = (uint64_t *)v38[11];
        v48 = v38[12];
        v19 = v1251;
      }
      v49 = (unint64_t)(v48 - (_QWORD)v45) >> 3;
      m = a1;
      if (v40[61] - v40[62] != (_DWORD)v49)
        sub_1C51CC164(a1, "MBB has duplicate entries in its successor list.", (unint64_t)v38);
      v38 = (_QWORD *)v38[1];
    }
    while (v38 != (_QWORD *)v37);
    v36 = *v1266;
    v2 = v1256;
  }
  if (*((const llvm::MachineFunction **)v36 + 40) != (const llvm::MachineFunction *)((char *)v36 + 320))
  {
    v50 = *(_QWORD *)(m + 32);
    v52 = *(_DWORD *)(v50 + 64);
    v51 = *(_DWORD *)(v50 + 68);
    v53 = v52 == -1 && v51 == -1;
    if (!v53)
    {
      v1305 = (unint64_t)&v1307;
      v1306 = 0x800000000;
      v1122 = *((_QWORD *)v36 + 14) - *((_QWORD *)v36 + 13);
      v1123 = (v1122 >> 3);
      v1277 = v51;
      if ((v1122 >> 3))
      {
        v1124 = v1122 >> 3;
        if (v1123 < 9)
        {
          v1126 = 0;
          v1125 = &v1307;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1305, (uint64_t)&v1307, (v1122 >> 3), 12);
          v1125 = (__int128 *)v1305;
          v1126 = v1306;
        }
        if (v1123 != v1126)
          bzero((char *)v1125 + 12 * v1126, 12 * ((-12 * v1126 + 12 * (unint64_t)v1123 - 12) / 0xC) + 12);
        LODWORD(v1306) = v1124;
        m = a1;
      }
      v1299 = (uint64_t *)v1303;
      v1300 = (uint64_t *)v1303;
      v1301 = 8;
      LODWORD(v1302) = 0;
      sub_1C61FF4A8((llvm::SmallPtrSetImplBase *)&v1299, (uint64_t)v1266, &v1288);
      v1154 = v1289;
      v1153 = (_BYTE *)v1290;
      if ((_BYTE *)v1290 == v1289)
        goto LABEL_2127;
      v1261 = v52;
      v1258 = v2;
      while (1)
      {
        v1155 = 0xAAAAAAAAAAAAAAABLL * ((v1153 - v1154) >> 3);
        if ((v1155 & 0xFFFFFFFE) != 0)
        {
          v1158 = (char *)(v1305 + 12 * *(int *)(*(_QWORD *)&v1154[24 * (v1155 - 2)] + 24));
          v1156 = *((_DWORD *)v1158 + 1);
          v1157 = v1158[9];
        }
        else
        {
          v1156 = 0;
          v1157 = 0;
        }
        v1159 = v1277;
        v1160 = *((_QWORD *)v1153 - 3);
        v1161 = v1160 + 48;
        v1162 = *(_QWORD *)(v1160 + 56);
        v1163 = v1156;
        v1285 = v1157;
        v1271 = (_QWORD *)(v1160 + 48);
        if (v1162 != v1160 + 48)
          break;
LABEL_1980:
        v1164 = (char *)(v1305 + 12 * *(int *)(v1160 + 24));
        *(_DWORD *)v1164 = v1156;
        *((_DWORD *)v1164 + 1) = v1163;
        v1164[8] = v1285;
        v1164[9] = v1157;
        v1166 = *(uint64_t **)(v1160 + 64);
        v1165 = *(uint64_t **)(v1160 + 72);
        while (v1166 != v1165)
        {
          v1185 = *v1166;
          v1186 = (char *)sub_1C477672C((uint64_t)&v1299, *v1166);
          if (v1300 == v1299)
            v1187 = (uint64_t *)((char *)&v1301 + 4);
          else
            v1187 = &v1301;
          if (v1186 == (char *)&v1300[*(unsigned int *)v1187])
            goto LABEL_2054;
          v1188 = *(_DWORD *)(v1185 + 24);
          if (*(_DWORD *)(v1305 + 12 * v1188 + 4) == v1156 && *(unsigned __int8 *)(v1305 + 12 * v1188 + 9) == v1285)
            goto LABEL_2054;
          v1189 = sub_1C51CC164(m, "The exit stack state of a predecessor is inconsistent.", v1160);
          v1190 = (llvm::raw_ostream *)llvm::errs(v1189);
          v1191 = v1190;
          v1192 = *((_QWORD *)v1190 + 4);
          if ((unint64_t)(*((_QWORD *)v1190 + 3) - v1192) > 0xB)
          {
            *(_DWORD *)(v1192 + 8) = 544370547;
            *(_QWORD *)v1192 = *(_QWORD *)"Predecessor ";
            *((_QWORD *)v1190 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v1190, "Predecessor ", 0xCuLL);
          }
          v1298 = (uint64_t *)&v1296;
          v1296 = &off_1E8143F38;
          v1297 = v1185;
          sub_1C512E114((uint64_t)&v1296, v1191);
          v1193 = *((_QWORD *)v1191 + 4);
          if ((unint64_t)(*((_QWORD *)v1191 + 3) - v1193) > 0x10)
          {
            *(_BYTE *)(v1193 + 16) = 40;
            *(_OWORD *)v1193 = *(_OWORD *)" has exit state (";
            *((_QWORD *)v1191 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v1191, " has exit state (", 0x11uLL);
          }
          v1194 = *(int *)(v1305 + 12 * *(int *)(v1185 + 24) + 4);
          if ((v1194 & 0x80000000) != 0)
          {
            v1194 = -(uint64_t)v1194;
            v1195 = v1191;
            v1196 = 1;
          }
          else
          {
            v1195 = v1191;
            v1196 = 0;
          }
          sub_1C5E21910(v1195, v1194, 0, 0, v1196);
          v1197 = (_WORD *)*((_QWORD *)v1191 + 4);
          if (*((_QWORD *)v1191 + 3) - (_QWORD)v1197 > 1uLL)
          {
            *v1197 = 8236;
            *((_QWORD *)v1191 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1191, ", ", 2uLL);
          }
          sub_1C5E21910(v1191, *(unsigned __int8 *)(v1305 + 12 * *(int *)(v1185 + 24) + 9), 0, 0, 0);
          v1198 = *((_QWORD *)v1191 + 4);
          if ((unint64_t)(*((_QWORD *)v1191 + 3) - v1198) > 8)
          {
            *(_BYTE *)(v1198 + 8) = 32;
            *(_QWORD *)v1198 = *(_QWORD *)"), while ";
            *((_QWORD *)v1191 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v1191, "), while ", 9uLL);
          }
          v1295 = &v1293;
          v1293 = &off_1E8143F38;
          v1294 = v1160;
          sub_1C512E114((uint64_t)&v1293, v1191);
          v1199 = *((_QWORD *)v1191 + 4);
          if ((unint64_t)(*((_QWORD *)v1191 + 3) - v1199) > 0x11)
          {
            *(_WORD *)(v1199 + 16) = 10272;
            *(_OWORD *)v1199 = *(_OWORD *)" has entry state (";
            *((_QWORD *)v1191 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v1191, " has entry state (", 0x12uLL);
          }
          if (v1156 < 0)
          {
            v1200 = -(uint64_t)v1156;
            v1201 = 1;
          }
          else
          {
            v1200 = v1156;
            v1201 = 0;
          }
          sub_1C5E21910(v1191, v1200, 0, 0, v1201);
          v1202 = (_WORD *)*((_QWORD *)v1191 + 4);
          if (*((_QWORD *)v1191 + 3) - (_QWORD)v1202 > 1uLL)
          {
            *v1202 = 8236;
            *((_QWORD *)v1191 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1191, ", ", 2uLL);
          }
          sub_1C5E21910(v1191, v1285, 0, 0, 0);
          v1203 = *((_QWORD *)v1191 + 4);
          if ((unint64_t)(*((_QWORD *)v1191 + 3) - v1203) > 2)
          {
            *(_BYTE *)(v1203 + 2) = 10;
            *(_WORD *)v1203 = 11817;
            *((_QWORD *)v1191 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v1191, ").\n", 3uLL);
          }
          if (v1295 == &v1293)
          {
            v1204 = (void (**)(void))(v1293 + 4);
          }
          else
          {
            if (!v1295)
              goto LABEL_2049;
            v1204 = (void (**)(void))(*v1295 + 5);
          }
          (*v1204)();
LABEL_2049:
          if (v1298 == (uint64_t *)&v1296)
          {
            v1205 = (void (**)(void))(v1296 + 4);
            goto LABEL_2053;
          }
          if (v1298)
          {
            v1205 = (void (**)(void))(*v1298 + 40);
LABEL_2053:
            (*v1205)();
          }
LABEL_2054:
          ++v1166;
        }
        v1167 = *(uint64_t **)(v1160 + 88);
        v1168 = *(uint64_t **)(v1160 + 96);
        while (v1167 != v1168)
        {
          v1206 = *v1167;
          v1207 = (char *)sub_1C477672C((uint64_t)&v1299, *v1167);
          if (v1300 == v1299)
            v1208 = (uint64_t *)((char *)&v1301 + 4);
          else
            v1208 = &v1301;
          if (v1207 == (char *)&v1300[*(unsigned int *)v1208])
            goto LABEL_2099;
          v1209 = *(_DWORD *)(v1206 + 24);
          if (*(_DWORD *)(v1305 + 12 * v1209) == v1163 && *(unsigned __int8 *)(v1305 + 12 * v1209 + 8) == v1157)
            goto LABEL_2099;
          v1210 = sub_1C51CC164(m, "The entry stack state of a successor is inconsistent.", v1160);
          v1211 = (llvm::raw_ostream *)llvm::errs(v1210);
          v1212 = v1211;
          v1213 = *((_QWORD *)v1211 + 4);
          if ((unint64_t)(*((_QWORD *)v1211 + 3) - v1213) > 9)
          {
            *(_WORD *)(v1213 + 8) = 8306;
            *(_QWORD *)v1213 = *(_QWORD *)"Successor ";
            *((_QWORD *)v1211 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v1211, "Successor ", 0xAuLL);
          }
          v1298 = (uint64_t *)&v1296;
          v1296 = &off_1E8143F38;
          v1297 = v1206;
          sub_1C512E114((uint64_t)&v1296, v1212);
          v1214 = *((_QWORD *)v1212 + 4);
          if ((unint64_t)(*((_QWORD *)v1212 + 3) - v1214) > 0x11)
          {
            *(_WORD *)(v1214 + 16) = 10272;
            *(_OWORD *)v1214 = *(_OWORD *)" has entry state (";
            *((_QWORD *)v1212 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v1212, " has entry state (", 0x12uLL);
          }
          v1215 = *(int *)(v1305 + 12 * *(int *)(v1206 + 24));
          if ((v1215 & 0x80000000) != 0)
          {
            v1215 = -(uint64_t)v1215;
            v1216 = v1212;
            v1217 = 1;
          }
          else
          {
            v1216 = v1212;
            v1217 = 0;
          }
          sub_1C5E21910(v1216, v1215, 0, 0, v1217);
          v1218 = (_WORD *)*((_QWORD *)v1212 + 4);
          if (*((_QWORD *)v1212 + 3) - (_QWORD)v1218 > 1uLL)
          {
            *v1218 = 8236;
            *((_QWORD *)v1212 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1212, ", ", 2uLL);
          }
          sub_1C5E21910(v1212, *(unsigned __int8 *)(v1305 + 12 * *(int *)(v1206 + 24) + 8), 0, 0, 0);
          v1219 = *((_QWORD *)v1212 + 4);
          if ((unint64_t)(*((_QWORD *)v1212 + 3) - v1219) > 8)
          {
            *(_BYTE *)(v1219 + 8) = 32;
            *(_QWORD *)v1219 = *(_QWORD *)"), while ";
            *((_QWORD *)v1212 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v1212, "), while ", 9uLL);
          }
          v1295 = &v1293;
          v1293 = &off_1E8143F38;
          v1294 = v1160;
          sub_1C512E114((uint64_t)&v1293, v1212);
          v1220 = *((_QWORD *)v1212 + 4);
          if ((unint64_t)(*((_QWORD *)v1212 + 3) - v1220) > 0x10)
          {
            *(_BYTE *)(v1220 + 16) = 40;
            *(_OWORD *)v1220 = *(_OWORD *)" has exit state (";
            *((_QWORD *)v1212 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v1212, " has exit state (", 0x11uLL);
          }
          if (v1163 < 0)
          {
            v1221 = -(uint64_t)v1163;
            v1222 = 1;
          }
          else
          {
            v1221 = v1163;
            v1222 = 0;
          }
          sub_1C5E21910(v1212, v1221, 0, 0, v1222);
          v1223 = (_WORD *)*((_QWORD *)v1212 + 4);
          if (*((_QWORD *)v1212 + 3) - (_QWORD)v1223 > 1uLL)
          {
            *v1223 = 8236;
            *((_QWORD *)v1212 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1212, ", ", 2uLL);
          }
          sub_1C5E21910(v1212, v1157, 0, 0, 0);
          v1224 = *((_QWORD *)v1212 + 4);
          if ((unint64_t)(*((_QWORD *)v1212 + 3) - v1224) > 2)
          {
            *(_BYTE *)(v1224 + 2) = 10;
            *(_WORD *)v1224 = 11817;
            *((_QWORD *)v1212 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v1212, ").\n", 3uLL);
          }
          if (v1295 == &v1293)
          {
            v1225 = (void (**)(void))(v1293 + 4);
          }
          else
          {
            if (!v1295)
              goto LABEL_2094;
            v1225 = (void (**)(void))(*v1295 + 5);
          }
          (*v1225)();
LABEL_2094:
          if (v1298 == (uint64_t *)&v1296)
          {
            v1226 = (void (**)(void))(v1296 + 4);
            goto LABEL_2098;
          }
          if (v1298)
          {
            v1226 = (void (**)(void))(*v1298 + 40);
LABEL_2098:
            (*v1226)();
          }
LABEL_2099:
          ++v1167;
        }
        v1169 = *v1271 & 0xFFFFFFFFFFFFFFF8;
        if (v1271 != (_QWORD *)v1169)
        {
          if (v1169 && (*(_BYTE *)v1169 & 4) != 0)
          {
            v1227 = *(_WORD *)(v1169 + 44);
          }
          else
          {
            while (1)
            {
              v1227 = *(_WORD *)(v1169 + 44);
              if ((v1227 & 4) == 0)
                break;
              v1169 = *(_QWORD *)v1169 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v1228 = v1227 & 0xC;
          v1229 = v1227 & 4;
          v1230 = *(_QWORD *)(*(_QWORD *)(v1169 + 16) + 8);
          if (v1228)
            v1231 = v1229 == 0;
          else
            v1231 = 0;
          if (v1231)
          {
            while ((v1230 & 0x20) == 0)
            {
              if ((*(_WORD *)(v1169 + 44) & 8) == 0)
                goto LABEL_1983;
              v1169 = *(_QWORD *)(v1169 + 8);
              LOBYTE(v1230) = *(_BYTE *)(*(_QWORD *)(v1169 + 16) + 8);
            }
          }
          else if ((v1230 & 0x20) == 0)
          {
            goto LABEL_1983;
          }
          if (v1157)
            sub_1C51CC164(m, "A return block ends with a FrameSetup.", v1160);
          if (v1163)
            sub_1C51CC164(m, "A return block ends with a nonzero stack adjustment.", v1160);
        }
LABEL_1983:
        sub_1C61E6020((char *)&v1288);
        v1154 = v1289;
        v1153 = (_BYTE *)v1290;
        v19 = v1251;
        v2 = v1258;
        v52 = v1261;
        if ((_BYTE *)v1290 == v1289)
        {
LABEL_2127:
          if (v1153)
            operator delete(v1153);
          if (v1300 != v1299)
            free(v1300);
          if ((__int128 *)v1305 != &v1307)
            free((void *)v1305);
          goto LABEL_78;
        }
      }
      while (1)
      {
        v1170 = **(unsigned __int16 **)(v1162 + 16);
        if (v52 == v1170)
        {
          v1170 = v52;
          if (v1157)
          {
            sub_1C51CC4F8(m, "FrameSetup is after another FrameSetup", v1162);
            v1159 = v1277;
            v1170 = **(unsigned __int16 **)(v1162 + 16);
          }
          v1171 = *(_QWORD *)(v1162 + 32);
          v1172 = *(_QWORD *)(v1171 + 16);
          if (*(_DWORD *)(*(_QWORD *)(m + 32) + 64) == v1170)
            v1172 += *(_QWORD *)(v1171 + 48);
          v1163 -= v1172;
          v1157 = 1;
        }
        if (v1159 != v1170)
          goto LABEL_2011;
        v1173 = *(_QWORD *)(v1162 + 32);
        v1174 = *(_QWORD *)(v1173 + 16);
        if (*(_DWORD *)(*(_QWORD *)(m + 32) + 64) == v1159)
          v1174 += *(_QWORD *)(v1173 + 48);
        if (v1157)
        {
          if (v1163 >= 0)
            v1175 = v1163;
          else
            v1175 = -v1163;
          if ((_DWORD)v1175 == (_DWORD)v1174)
            goto LABEL_2010;
          sub_1C51CC4F8(m, "FrameDestroy <n> is after FrameSetup <m>", v1162);
          v1177 = (llvm::raw_ostream *)llvm::errs(v1176);
          v1178 = v1177;
          v1179 = (void *)*((_QWORD *)v1177 + 4);
          if (*((_QWORD *)v1177 + 3) - (_QWORD)v1179 > 0xDuLL)
          {
            qmemcpy(v1179, "FrameDestroy <", 14);
            *((_QWORD *)v1177 + 4) += 14;
          }
          else
          {
            llvm::raw_ostream::write(v1177, "FrameDestroy <", 0xEuLL);
          }
          v1180 = (int)v1174;
          if (v1174 << 32 < (uint64_t)0xFFFFFFFF00000001)
          {
            v1180 = -(uint64_t)(int)v1174;
            v1181 = v1178;
            v1182 = 1;
          }
          else
          {
            v1181 = v1178;
            v1182 = 0;
          }
          sub_1C5E21910(v1181, v1180, 0, 0, v1182);
          v1183 = (void *)*((_QWORD *)v1178 + 4);
          if (*((_QWORD *)v1178 + 3) - (_QWORD)v1183 > 0x16uLL)
          {
            qmemcpy(v1183, "> is after FrameSetup <", 23);
            *((_QWORD *)v1178 + 4) += 23;
          }
          else
          {
            llvm::raw_ostream::write(v1178, "> is after FrameSetup <", 0x17uLL);
          }
          sub_1C5E21910(v1178, v1175, 0, 0, 0);
          v1184 = *((_QWORD *)v1178 + 4);
          if ((unint64_t)(*((_QWORD *)v1178 + 3) - v1184) > 2)
          {
            *(_BYTE *)(v1184 + 2) = 10;
            *(_WORD *)v1184 = 11838;
            *((_QWORD *)v1178 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v1178, ">.\n", 3uLL);
          }
          v52 = v1261;
        }
        else
        {
          sub_1C51CC4F8(m, "FrameDestroy is not after a FrameSetup", v1162);
        }
        v1159 = v1277;
LABEL_2010:
        v1157 = 0;
        v1163 += v1174;
        v1161 = v1160 + 48;
LABEL_2011:
        if ((*(_BYTE *)v1162 & 4) == 0)
        {
          while ((*(_WORD *)(v1162 + 44) & 8) != 0)
            v1162 = *(_QWORD *)(v1162 + 8);
        }
        v1162 = *(_QWORD *)(v1162 + 8);
        if (v1162 == v1161)
          goto LABEL_1980;
      }
    }
  }
LABEL_78:
  v54 = *(_QWORD *)(v2 + 328);
  v1238 = v2 + 320;
  if (v54 != v2 + 320)
  {
    v1257 = (unint64_t *)(m + 64);
    v1239 = (void **)(m + 248);
    v1240 = m + 568;
    v1236 = m + 528;
    v1237 = m + 512;
    v1243 = (unsigned int *)(m + 352);
    v1241 = (unsigned int *)(m + 432);
    v1242 = (unsigned int *)(m + 272);
    while (1)
    {
      *v1257 = 0;
      v1257[1] = 0;
      if ((**((_BYTE **)*v1266 + 45) & 2) == 0 && (**(_BYTE **)(**(_QWORD **)(m + 48) + 360) & 4) != 0)
      {
        v55 = *(unsigned __int16 **)(v54 + 152);
        v56 = *(unsigned __int16 **)(v54 + 160);
        if (v56 != v55)
          break;
      }
LABEL_83:
      v1288 = (uint64_t)v1292;
      v1289 = v1292;
      v1290 = 4;
      v1291 = 0;
      v57 = *(void ***)(v54 + 88);
      v58 = *(void ***)(v54 + 96);
      if (v57 != v58)
      {
        while (1)
        {
          v1299 = (uint64_t *)*v57;
          v75 = v1299;
          if (*((_BYTE *)v1299 + 184))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1288, (uint64_t)v1299);
          v76 = sub_1C477672C((uint64_t)v1246, (uint64_t)v75);
          v77 = *(_QWORD *)(m + 88);
          v78 = 96;
          if (v77 == *(_QWORD *)(m + 80))
            v78 = 100;
          if (v76 == (_QWORD *)(v77 + 8 * *(unsigned int *)(m + v78)))
            sub_1C51CC164(m, "MBB has successor that isn't part of the function.", v54);
          v79 = sub_1C51CCEAC(v1240, (uint64_t *)&v1299);
          v80 = sub_1C477672C((uint64_t)(v79 + 16), v54);
          v81 = v79[17];
          if (v81 == v79[16])
            v82 = (unsigned int *)v79 + 37;
          else
            v82 = (unsigned int *)(v79 + 18);
          if (v80 != (_QWORD *)(v81 + 8 * *v82))
            goto LABEL_125;
          v83 = sub_1C51CC164(m, "Inconsistent CFG", v54);
          v84 = (llvm::raw_ostream *)llvm::errs(v83);
          v85 = v84;
          v86 = (void *)*((_QWORD *)v84 + 4);
          if (*((_QWORD *)v84 + 3) - (_QWORD)v86 > 0x33uLL)
          {
            qmemcpy(v86, "MBB is not in the predecessor list of the successor ", 52);
            *((_QWORD *)v84 + 4) += 52;
          }
          else
          {
            llvm::raw_ostream::write(v84, "MBB is not in the predecessor list of the successor ", 0x34uLL);
          }
          *((_QWORD *)&v1307 + 1) = &v1305;
          v1305 = (unint64_t)&off_1E8143F38;
          v1306 = (uint64_t)v75;
          sub_1C512E114((uint64_t)&v1305, v85);
          v87 = (_WORD *)*((_QWORD *)v85 + 4);
          if (*((_QWORD *)v85 + 3) - (_QWORD)v87 > 1uLL)
          {
            *v87 = 2606;
            *((_QWORD *)v85 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v85, ".\n", 2uLL);
          }
          if (*((unint64_t **)&v1307 + 1) == &v1305)
            break;
          if (*((_QWORD *)&v1307 + 1))
          {
            v88 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_124:
            (*v88)();
          }
LABEL_125:
          if (++v57 == v58)
            goto LABEL_84;
        }
        v88 = (void (**)(void))(v1305 + 32);
        goto LABEL_124;
      }
LABEL_84:
      v59 = *(void ***)(v54 + 64);
      v60 = *(void ***)(v54 + 72);
      while (v59 != v60)
      {
        v1299 = (uint64_t *)*v59;
        v61 = v1299;
        v62 = sub_1C477672C((uint64_t)v1246, (uint64_t)v1299);
        v63 = *(_QWORD *)(m + 88);
        v64 = 96;
        if (v63 == *(_QWORD *)(m + 80))
          v64 = 100;
        if (v62 == (_QWORD *)(v63 + 8 * *(unsigned int *)(m + v64)))
          sub_1C51CC164(m, "MBB has predecessor that isn't part of the function.", v54);
        v65 = sub_1C51CCEAC(v1240, (uint64_t *)&v1299);
        v66 = sub_1C477672C((uint64_t)(v65 + 28), v54);
        v67 = v65[29];
        if (v67 == v65[28])
          v68 = (unsigned int *)v65 + 61;
        else
          v68 = (unsigned int *)(v65 + 30);
        if (v66 == (_QWORD *)(v67 + 8 * *v68))
        {
          v69 = sub_1C51CC164(m, "Inconsistent CFG", v54);
          v70 = (llvm::raw_ostream *)llvm::errs(v69);
          v71 = v70;
          v72 = (void *)*((_QWORD *)v70 + 4);
          if (*((_QWORD *)v70 + 3) - (_QWORD)v72 > 0x33uLL)
          {
            qmemcpy(v72, "MBB is not in the successor list of the predecessor ", 52);
            *((_QWORD *)v70 + 4) += 52;
          }
          else
          {
            llvm::raw_ostream::write(v70, "MBB is not in the successor list of the predecessor ", 0x34uLL);
          }
          *((_QWORD *)&v1307 + 1) = &v1305;
          v1305 = (unint64_t)&off_1E8143F38;
          v1306 = (uint64_t)v61;
          sub_1C512E114((uint64_t)&v1305, v71);
          v73 = (_WORD *)*((_QWORD *)v71 + 4);
          if (*((_QWORD *)v71 + 3) - (_QWORD)v73 > 1uLL)
          {
            *v73 = 2606;
            *((_QWORD *)v71 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v71, ".\n", 2uLL);
          }
          if (*((unint64_t **)&v1307 + 1) == &v1305)
          {
            v74 = (void (**)(void))(v1305 + 32);
          }
          else
          {
            if (!*((_QWORD *)&v1307 + 1))
              goto LABEL_103;
            v74 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
          }
          (*v74)();
        }
LABEL_103:
        ++v59;
      }
      if ((HIDWORD(v1290) - v1291) > 1)
      {
        v100 = *(_QWORD *)(*(_QWORD *)(m + 24) + 560);
        v101 = **(_QWORD **)(m + 16);
        if (!v100)
          goto LABEL_159;
        v102 = *(_QWORD *)(v54 + 16);
        if (*(_DWORD *)(v100 + 412) != 2 || v102 == 0)
          goto LABEL_159;
        v104 = *(_QWORD *)(v102 + 40);
        if (v104)
          v105 = v104 - 24;
        else
          v105 = 0;
        if (*(unsigned __int8 *)(v105 + 16) - 29 >= 0xB)
          v105 = 0;
        if (*(_BYTE *)(v105 + 16) != 31)
        {
LABEL_159:
          v106 = *(_DWORD *)(v101 + 20);
          if ((v106 & 0x40000000) != 0)
            v107 = *(llvm::Value ***)(v101 - 8);
          else
            v107 = (llvm::Value **)(v101 - 32 * (v106 & 0x7FFFFFF));
          v108 = llvm::classifyEHPersonality(*v107, v24);
          if (v108 - 7 >= 4 && v108 != 12)
            sub_1C51CC164(m, "MBB has more than one landing pad successor", v54);
        }
      }
      v1296 = 0;
      v1293 = 0;
      v1305 = (unint64_t)&v1307;
      v1306 = 0x400000000;
      if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t (***)(), uint64_t (***)(), unint64_t *, _QWORD))(**(_QWORD **)(m + 32) + 248))(*(_QWORD *)(m + 32), v54, &v1296, &v1293, &v1305, 0) & 1) == 0)
      {
        if ((unint64_t)v1296 | (unint64_t)v1293)
        {
          if (v1296)
            v137 = v1293 == 0;
          else
            v137 = 0;
          v138 = !v137;
          v139 = a1;
          if (v137 && !(_DWORD)v1306)
          {
            v140 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (v54 + 48 == v140)
            {
              v141 = a1;
              v142 = "MBB exits via unconditional branch but doesn't contain any instructions!";
              goto LABEL_1384;
            }
            if (v140)
            {
              v760 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)v140 & 4) != 0)
              {
                v768 = *(_WORD *)(v140 + 44);
                v760 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1302:
                v769 = v768 & 0xC;
                v770 = v768 & 4;
                v771 = *(_QWORD *)(*(_QWORD *)(v760 + 16) + 8);
                if (v769)
                  v772 = v770 == 0;
                else
                  v772 = 0;
                if (v772)
                {
                  if ((v771 & 0x100) == 0)
                  {
                    while ((*(_WORD *)(v760 + 44) & 8) != 0)
                    {
                      v760 = *(_QWORD *)(v760 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v760 + 16) + 9) & 1) != 0)
                        goto LABEL_1311;
                    }
                    goto LABEL_1307;
                  }
                }
                else if ((v771 & 0x100) == 0)
                {
LABEL_1307:
                  v141 = a1;
                  v142 = "MBB exits via unconditional branch but doesn't end with a barrier instruction!";
                  goto LABEL_1384;
                }
LABEL_1311:
                if (v140 && (*(_BYTE *)v140 & 4) != 0)
                {
                  v773 = *(_WORD *)(v140 + 44);
                }
                else
                {
                  while (1)
                  {
                    v773 = *(_WORD *)(v140 + 44);
                    if ((v773 & 4) == 0)
                      break;
                    v140 = *(_QWORD *)v140 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v774 = v773 & 0xC;
                v775 = v773 & 4;
                v776 = *(_QWORD *)(*(_QWORD *)(v140 + 16) + 8);
                if (v774)
                  v777 = v775 == 0;
                else
                  v777 = 0;
                if (v777)
                {
                  if ((v776 & 0x200) != 0)
                    goto LABEL_1385;
                  while ((*(_WORD *)(v140 + 44) & 8) != 0)
                  {
                    v140 = *(_QWORD *)(v140 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v140 + 16) + 9) & 2) != 0)
                      goto LABEL_1385;
                  }
                }
                else if ((v776 & 0x200) != 0)
                {
                  goto LABEL_1385;
                }
                v141 = a1;
                v142 = "MBB exits via unconditional branch but the branch isn't a terminator instruction!";
                goto LABEL_1384;
              }
            }
            else
            {
              v760 = 0;
            }
            while (1)
            {
              v768 = *(_WORD *)(v760 + 44);
              if ((v768 & 4) == 0)
                break;
              v760 = *(_QWORD *)v760 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_1302;
          }
          if (!(_DWORD)v1306)
            v138 = 1;
          if ((v138 & 1) != 0)
          {
            if (!v1296 || !v1293)
            {
              v141 = a1;
              v142 = "analyzeBranch returned invalid data!";
              goto LABEL_1384;
            }
            v750 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (v54 + 48 == v750)
            {
              v751 = a1;
              v752 = "MBB exits via conditional branch/branch but doesn't contain any instructions!";
              goto LABEL_1381;
            }
            if (v750)
            {
              v788 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_BYTE *)v750 & 4) != 0)
              {
                v789 = *(_WORD *)(v750 + 44);
                v788 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1361:
                v790 = v789 & 0xC;
                v791 = v789 & 4;
                v792 = *(_QWORD *)(*(_QWORD *)(v788 + 16) + 8);
                if (v790)
                  v793 = v791 == 0;
                else
                  v793 = 0;
                if (v793)
                {
                  if ((v792 & 0x100) == 0)
                  {
                    while ((*(_WORD *)(v788 + 44) & 8) != 0)
                    {
                      v788 = *(_QWORD *)(v788 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v788 + 16) + 9) & 1) != 0)
                        goto LABEL_1370;
                    }
                    goto LABEL_1366;
                  }
                }
                else if ((v792 & 0x100) == 0)
                {
LABEL_1366:
                  v751 = a1;
                  v752 = "MBB exits via conditional branch/branch but doesn't end with a barrier instruction!";
                  goto LABEL_1381;
                }
LABEL_1370:
                if (v750 && (*(_BYTE *)v750 & 4) != 0)
                {
                  v794 = *(_WORD *)(v750 + 44);
                }
                else
                {
                  while (1)
                  {
                    v794 = *(_WORD *)(v750 + 44);
                    if ((v794 & 4) == 0)
                      break;
                    v750 = *(_QWORD *)v750 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v795 = v794 & 0xC;
                v796 = v794 & 4;
                v797 = *(_QWORD *)(*(_QWORD *)(v750 + 16) + 8);
                if (v795)
                  v798 = v796 == 0;
                else
                  v798 = 0;
                if (v798)
                {
                  if ((v797 & 0x200) != 0)
                    goto LABEL_1382;
                  while ((*(_WORD *)(v750 + 44) & 8) != 0)
                  {
                    v750 = *(_QWORD *)(v750 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v750 + 16) + 9) & 2) != 0)
                      goto LABEL_1382;
                  }
                }
                else if ((v797 & 0x200) != 0)
                {
LABEL_1382:
                  if ((_DWORD)v1306)
                    goto LABEL_1385;
                  v141 = a1;
                  v142 = "MBB exits via conditional branch/branch but there's no condition!";
LABEL_1384:
                  sub_1C51CC164(v141, v142, v54);
LABEL_1385:
                  if (v1296)
                  {
                    v799 = *(uint64_t (****)())(v54 + 88);
                    v800 = *(uint64_t (****)())(v54 + 96);
                    if (v799 != v800)
                    {
                      while (*v799 != v1296)
                      {
                        if (++v799 == v800)
                        {
                          v799 = *(uint64_t (****)())(v54 + 96);
                          break;
                        }
                      }
                    }
                    if (v799 == v800)
                      sub_1C51CC164(v139, "MBB exits via jump or conditional branch, but its target isn't a CFG successor!", v54);
                  }
                  v801 = v1293;
                  if (v1293)
                  {
                    v802 = *(uint64_t (****)())(v54 + 88);
                    v803 = *(uint64_t (****)())(v54 + 96);
                    if (v802 != v803)
                    {
                      while (*v802 != v1293)
                      {
                        if (++v802 == v803)
                        {
                          v802 = *(uint64_t (****)())(v54 + 96);
                          break;
                        }
                      }
                    }
                    if (v802 == v803)
                    {
                      sub_1C51CC164(v139, "MBB exits via conditional branch, but its target isn't a CFG successor!", v54);
                      v801 = v1293;
                    }
                  }
                  if (v1296)
                  {
                    if ((_DWORD)v1306)
                      v805 = v801 == 0;
                    else
                      v805 = 0;
                    v804 = v805;
                    if (!(_DWORD)v1306)
                    {
LABEL_1417:
                      v810 = *(uint64_t (****)())(v54 + 88);
                      v811 = *(uint64_t (****)())(v54 + 96);
                      while (v810 != v811)
                      {
                        v812 = *v810;
                        if (*v810 != v1296 && v812 != v1293)
                        {
                          if (!v804
                            || (*(_QWORD *)(v54 + 8) != *(_QWORD *)(v54 + 32) + 320
                              ? (v814 = *(uint64_t (***)())(v54 + 8))
                              : (v814 = 0),
                                v812 != v814))
                          {
                            if (!*((_BYTE *)v812 + 184) && !*((_BYTE *)v812 + 202))
                              sub_1C51CC164(a1, "MBB has unexpected successors which are not branch targets, fallthrough, EHPads, or inlineasm_br targets.", v54);
                          }
                        }
                        ++v810;
                      }
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    v804 = 1;
                    if (!(_DWORD)v1306)
                      goto LABEL_1417;
                  }
                  if (!v801)
                  {
                    v806 = *(const llvm::MachineFunction **)(v54 + 8);
                    v807 = "MBB conditionally falls through out of function!";
                    if (v806 == (const llvm::MachineFunction *)((char *)*v1266 + 320))
                      goto LABEL_1416;
                    v808 = *(const llvm::MachineFunction ***)(v54 + 88);
                    v809 = *(const llvm::MachineFunction ***)(v54 + 96);
                    if (v808 != v809)
                    {
                      while (*v808 != v806)
                      {
                        if (++v808 == v809)
                        {
                          v808 = *(const llvm::MachineFunction ***)(v54 + 96);
                          break;
                        }
                      }
                    }
                    v807 = "MBB exits via conditional branch/fall-through but the CFG successors don't match the actual successors!";
                    if (v808 == v809)
LABEL_1416:
                      sub_1C51CC164(v139, v807, v54);
                  }
                  goto LABEL_1417;
                }
                v751 = a1;
                v752 = "MBB exits via conditional branch/branch but the branch isn't a terminator instruction!";
LABEL_1381:
                sub_1C51CC164(v751, v752, v54);
                goto LABEL_1382;
              }
            }
            else
            {
              v788 = 0;
            }
            while (1)
            {
              v789 = *(_WORD *)(v788 + 44);
              if ((v789 & 4) == 0)
                break;
              v788 = *(_QWORD *)v788 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_1361;
          }
          v754 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
          if (v54 + 48 == v754)
          {
            v141 = a1;
            v142 = "MBB exits via conditional branch/fall-through but doesn't contain any instructions!";
            goto LABEL_1384;
          }
          if (v754)
          {
            v767 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_BYTE *)v754 & 4) != 0)
            {
              v778 = *(_WORD *)(v754 + 44);
              v767 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1327:
              v779 = v778 & 0xC;
              v780 = v778 & 4;
              v781 = *(_QWORD *)(*(_QWORD *)(v767 + 16) + 8);
              if (v779)
                v782 = v780 == 0;
              else
                v782 = 0;
              if (v782)
              {
                if ((v781 & 0x100) == 0)
                {
                  while ((*(_WORD *)(v767 + 44) & 8) != 0)
                  {
                    v767 = *(_QWORD *)(v767 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v767 + 16) + 9) & 1) != 0)
                      goto LABEL_1346;
                  }
                  goto LABEL_1332;
                }
              }
              else if ((v781 & 0x100) == 0)
              {
LABEL_1332:
                if (v754 && (*(_BYTE *)v754 & 4) != 0)
                {
                  v783 = *(_WORD *)(v754 + 44);
                }
                else
                {
                  while (1)
                  {
                    v783 = *(_WORD *)(v754 + 44);
                    if ((v783 & 4) == 0)
                      break;
                    v754 = *(_QWORD *)v754 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v784 = v783 & 0xC;
                v785 = v783 & 4;
                v786 = *(_QWORD *)(*(_QWORD *)(v754 + 16) + 8);
                if (v784)
                  v787 = v785 == 0;
                else
                  v787 = 0;
                if (v787)
                {
                  if ((v786 & 0x200) != 0)
                    goto LABEL_1385;
                  while ((*(_WORD *)(v754 + 44) & 8) != 0)
                  {
                    v754 = *(_QWORD *)(v754 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v754 + 16) + 9) & 2) != 0)
                      goto LABEL_1385;
                  }
                }
                else if ((v786 & 0x200) != 0)
                {
                  goto LABEL_1385;
                }
                v141 = a1;
                v142 = "MBB exits via conditional branch/fall-through but the branch isn't a terminator instruction!";
                goto LABEL_1384;
              }
LABEL_1346:
              v141 = a1;
              v142 = "MBB exits via conditional branch/fall-through but ends with a barrier instruction!";
              goto LABEL_1384;
            }
          }
          else
          {
            v767 = 0;
          }
          while (1)
          {
            v778 = *(_WORD *)(v767 + 44);
            if ((v778 & 4) == 0)
              break;
            v767 = *(_QWORD *)v767 & 0xFFFFFFFFFFFFFFF8;
          }
          goto LABEL_1327;
        }
        v747 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
        v139 = a1;
        if (v54 + 48 == v747)
        {
LABEL_1242:
          if (!(_DWORD)v1306)
            goto LABEL_1385;
          v141 = a1;
          v142 = "MBB exits via unconditional fall-through but has a condition!";
          goto LABEL_1384;
        }
        if (v747)
        {
          v753 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)v747 & 4) != 0)
          {
            v755 = *(_WORD *)(v747 + 44);
            v753 = *(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1265:
            v756 = v755 & 0xC;
            v757 = v755 & 4;
            v758 = *(_QWORD *)(*(_QWORD *)(v753 + 16) + 8);
            if (v756)
              v759 = v757 == 0;
            else
              v759 = 0;
            if (v759)
            {
              if ((v758 & 0x100) == 0)
              {
                while ((*(_WORD *)(v753 + 44) & 8) != 0)
                {
                  v753 = *(_QWORD *)(v753 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v753 + 16) + 9) & 1) != 0)
                    goto LABEL_1270;
                }
                goto LABEL_1242;
              }
            }
            else if ((v758 & 0x100) == 0)
            {
              goto LABEL_1242;
            }
LABEL_1270:
            if (!v747 || (*(_BYTE *)v747 & 4) == 0)
            {
              while ((*(_WORD *)(v747 + 44) & 4) != 0)
                v747 = *(_QWORD *)v747 & 0xFFFFFFFFFFFFFFF8;
            }
            if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32)) & 1) == 0)
              sub_1C51CC164(a1, "MBB exits via unconditional fall-through but ends with a barrier instruction!", v54);
            goto LABEL_1242;
          }
        }
        else
        {
          v753 = 0;
        }
        while (1)
        {
          v755 = *(_WORD *)(v753 + 44);
          if ((v755 & 4) == 0)
            break;
          v753 = *(_QWORD *)v753 & 0xFFFFFFFFFFFFFFF8;
        }
        goto LABEL_1265;
      }
LABEL_168:
      m = a1;
      if (*(_QWORD *)(a1 + 256))
      {
        v748 = *(unsigned int *)(a1 + 264);
        if (v748 <= 4 * *(_DWORD *)(a1 + 256) || v748 < 0x41)
        {
          if ((_DWORD)v748)
            memset(*v1239, 255, 4 * v748);
          *(_QWORD *)(a1 + 256) = 0;
        }
        else
        {
          sub_1C4A068AC(v1239);
        }
      }
      if ((**(_BYTE **)(**(_QWORD **)(a1 + 48) + 360) & 4) != 0)
      {
        v110 = *(unsigned __int16 **)(v54 + 152);
        for (j = *(unsigned __int16 **)(v54 + 160); v110 != j; v110 += 8)
        {
          v112 = *v110;
          if ((v112 - 1) >= 0x3FFFFFFF)
          {
            sub_1C51CC164(a1, "MBB live-in list contains non-physical register", v54);
          }
          else
          {
            v113 = *(_QWORD *)(a1 + 40);
            v114 = *(_QWORD *)(v113 + 56);
            if (v114)
            {
              v115 = (unsigned __int16 *)(v114 + 2 * *(unsigned int *)(*(_QWORD *)(v113 + 8) + 24 * *v110 + 4));
              while (1)
              {
                v116 = (unsigned __int16)v112;
                LODWORD(v1299) = (unsigned __int16)v112;
                v117 = *(_DWORD *)(a1 + 264);
                if (!v117)
                  break;
                v118 = *(_QWORD *)(a1 + 248);
                v119 = v117 - 1;
                v120 = v119 & (37 * v116);
                v121 = (_DWORD *)(v118 + 4 * v120);
                v122 = *v121;
                if (*v121 != v116)
                {
                  v124 = 0;
                  v125 = 1;
                  while (v122 != -1)
                  {
                    if (v124)
                      v126 = 0;
                    else
                      v126 = v122 == -2;
                    if (v126)
                      v124 = v121;
                    v127 = v120 + v125++;
                    v120 = v127 & v119;
                    v121 = (_DWORD *)(v118 + 4 * v120);
                    v122 = *v121;
                    if (*v121 == v116)
                      goto LABEL_176;
                  }
                  if (v124)
                    v128 = v124;
                  else
                    v128 = v121;
                  goto LABEL_190;
                }
LABEL_176:
                v123 = *v115++;
                LOWORD(v112) = v123 + v116;
                if (!v123)
                  goto LABEL_193;
              }
              v128 = 0;
LABEL_190:
              v129 = sub_1C4978C80((uint64_t)v1239, (uint64_t)&v1299, (int *)&v1299, v128);
              *v129 = (_DWORD)v1299;
              goto LABEL_176;
            }
          }
LABEL_193:
          ;
        }
      }
      llvm::MachineFrameInfo::getPristineRegs(*((llvm::MachineFrameInfo **)*v1266 + 7), *v1266, (char *)&v1299);
      if (v1304)
      {
        v130 = 0;
        v131 = v1299;
        v132 = (v1304 - 1) & 0xFFFFFFC0;
        while (1)
        {
          v134 = *v131++;
          v133 = v134;
          v135 = v132 + v130 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v1304;
          v136 = v135 & v133;
          if (v136)
            break;
          v130 -= 64;
          if (v132 + v130 == -64)
            goto LABEL_237;
        }
        v143 = __clz(__rbit64(v136));
        if (v143 + 1 != (_DWORD)v130)
        {
          v144 = v143 - v130;
          while (1)
          {
            v145 = *(_QWORD *)(a1 + 40);
            v146 = *(_QWORD *)(v145 + 56);
            if (v146)
              break;
LABEL_236:
            v144 = sub_1C476BA0C(&v1299, v144 + 1, v1304, 1u);
            if (v144 == -1)
              goto LABEL_237;
          }
          v147 = (unsigned __int16 *)(v146 + 2 * *(unsigned int *)(*(_QWORD *)(v145 + 8) + 24 * v144 + 4));
          v148 = v144;
          while (1)
          {
            v149 = v148;
            v1287 = v148;
            v150 = *(_DWORD *)(a1 + 264);
            if (!v150)
              break;
            v151 = *(_QWORD *)(a1 + 248);
            v152 = v150 - 1;
            v153 = v152 & (37 * v149);
            v154 = (_DWORD *)(v151 + 4 * v153);
            v155 = *v154;
            if (*v154 != v149)
            {
              v157 = 0;
              v158 = 1;
              while (v155 != -1)
              {
                if (v157)
                  v159 = 0;
                else
                  v159 = v155 == -2;
                if (v159)
                  v157 = v154;
                v160 = v153 + v158++;
                v153 = v160 & v152;
                v154 = (_DWORD *)(v151 + 4 * v153);
                v155 = *v154;
                if (*v154 == v149)
                  goto LABEL_220;
              }
              if (v157)
                v161 = v157;
              else
                v161 = v154;
              goto LABEL_234;
            }
LABEL_220:
            v156 = *v147++;
            v148 = v156 + v149;
            if (!v156)
              goto LABEL_236;
          }
          v161 = 0;
LABEL_234:
          v162 = sub_1C4978C80((uint64_t)v1239, (uint64_t)&v1287, &v1287, v161);
          *v162 = v1287;
          goto LABEL_220;
        }
      }
LABEL_237:
      *(_DWORD *)(a1 + 440) = 0;
      *(_DWORD *)(a1 + 280) = 0;
      v163 = *(_QWORD *)(a1 + 616);
      if (v163)
        *(_QWORD *)(a1 + 560) = *(_QWORD *)(*(_QWORD *)(v163 + 392) + 16 * *(unsigned int *)(v54 + 24));
      if (v1299 != &v1301)
        free(v1299);
      if ((__int128 *)v1305 != &v1307)
        free((void *)v1305);
      if (v1289 != (_BYTE *)v1288)
        free(v1289);
      v164 = *(_QWORD *)(v54 + 56);
      v1255 = (_QWORD *)(v54 + 48);
      if (v164 != v54 + 48)
      {
        v1262 = 0;
        LOBYTE(v165) = 0;
        v1252 = v54;
        while (*(_QWORD *)(v164 + 24) != v54)
        {
          v189 = sub_1C51CC164(m, "Bad instruction parent pointer", v54);
          v190 = (llvm::raw_ostream *)llvm::errs(v189);
          v191 = v190;
          v192 = (void *)*((_QWORD *)v190 + 4);
          if (*((_QWORD *)v190 + 3) - (_QWORD)v192 > 0xCuLL)
          {
            qmemcpy(v192, "Instruction: ", 13);
            *((_QWORD *)v190 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(v190, "Instruction: ", 0xDuLL);
          }
          llvm::MachineInstr::print((llvm::MachineInstr *)v164, v191, 1, 0, 0, 1, 0);
LABEL_1133:
          v164 = *(_QWORD *)(v164 + 8);
          if ((_QWORD *)v164 == v1255)
          {
            if (v1262)
              sub_1C51CC728((int32x2_t *)m, *(_QWORD *)(v1262 + 24));
            if ((v165 & 1) != 0)
            {
              v742 = *v1255 & 0xFFFFFFFFFFFFFFF8;
              if (!v742 || (*(_BYTE *)v742 & 4) == 0)
              {
                while ((*(_WORD *)(v742 + 44) & 4) != 0)
                  v742 = *(_QWORD *)v742 & 0xFFFFFFFFFFFFFFF8;
              }
              sub_1C51CC4F8(m, "BundledSucc flag set on last instruction in block", v742);
            }
            goto LABEL_1232;
          }
        }
        v166 = *(_WORD *)(v164 + 44);
        if ((v165 & 1) != 0)
        {
          v167 = "Missing BundledPred flag, BundledSucc was set on predecessor";
          if ((v166 & 4) != 0)
          {
LABEL_253:
            v168 = v1262;
            if ((v166 & 4) != 0)
            {
              if (!v1262)
              {
                sub_1C51CC4F8(m, "No bundle header", v164);
                v168 = 0;
              }
LABEL_290:
              v1262 = v168;
              v197 = *(unsigned __int16 **)(v164 + 16);
              if (*(_DWORD *)(v164 + 40) < v197[1])
              {
                sub_1C51CC4F8(m, "Too few operands", v164);
                v199 = (llvm::raw_ostream *)llvm::errs(v198);
                sub_1C5E21910(v199, v197[1], 0, 0, 0);
                v200 = (void *)*((_QWORD *)v199 + 4);
                if (*((_QWORD *)v199 + 3) - (_QWORD)v200 > 0x17uLL)
                {
                  qmemcpy(v200, " operands expected, but ", 24);
                  *((_QWORD *)v199 + 4) += 24;
                }
                else
                {
                  llvm::raw_ostream::write(v199, " operands expected, but ", 0x18uLL);
                }
                sub_1C5E21910(v199, *(unsigned int *)(v164 + 40), 0, 0, 0);
                v201 = (_QWORD *)*((_QWORD *)v199 + 4);
                if (*((_QWORD *)v199 + 3) - (_QWORD)v201 > 7uLL)
                {
                  *v201 = 0xA2E6E6576696720;
                  *((_QWORD *)v199 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v199, " given.\n", 8uLL);
                }
              }
              v202 = **(unsigned __int16 **)(v164 + 16);
              if (v202 == 69 || v202 == 0)
              {
                if ((**((_BYTE **)*v1266 + 45) & 2) != 0)
                  sub_1C51CC4F8(m, "Found PHI instruction with NoPHIs property set", v164);
                if (*v1257)
                  sub_1C51CC4F8(m, "Found PHI instruction after non-PHI", v164);
              }
              else if (!*v1257)
              {
                *v1257 = v164;
              }
              if (**(unsigned __int16 **)(v164 + 16) - 1 <= 1)
              {
                if (*(_DWORD *)(v164 + 40) > 1u)
                {
                  v205 = *(_QWORD *)(v164 + 32);
                  if (*(_BYTE *)v205 != 9)
                  {
                    sub_1C51CC4F8(a1, "Asm string must be an external symbol", v164);
                    v205 = *(_QWORD *)(v164 + 32);
                  }
                  if (*(_BYTE *)(v205 + 32) != 1)
                  {
                    sub_1C51CC4F8(a1, "Asm flags must be an immediate", v164);
                    v205 = *(_QWORD *)(v164 + 32);
                  }
                  if (*(_QWORD *)(v205 + 48) >= 0x40uLL)
                    sub_1C51CFD64(a1, "Unknown asm flags", (unint64_t *)(v205 + 32), 1u, 0);
                  v206 = *(_DWORD *)(v164 + 40);
                  if (v206 < 3)
                  {
                    k = 2;
                  }
                  else
                  {
                    v207 = *(_QWORD *)(v164 + 32);
                    for (k = 2; k < v206; k += ((unsigned __int16)*(_DWORD *)(v207 + 32 * k + 16) >> 3) + 1)
                    {
                      if (*(_BYTE *)(v207 + 32 * k) != 1)
                        break;
                    }
                  }
                  if (k > v206)
                  {
                    sub_1C51CC4F8(a1, "Missing operands in last group", v164);
                    v206 = *(_DWORD *)(v164 + 40);
                  }
                  if (k < v206 && *(_BYTE *)(*(_QWORD *)(v164 + 32) + 32 * k) == 14)
                    ++k;
                  if (k < v206)
                  {
                    v209 = 32 * k;
                    do
                    {
                      v210 = (unint64_t *)(*(_QWORD *)(v164 + 32) + v209);
                      if ((*(_DWORD *)v210 & 0x20000FF) != 0x2000000)
                        sub_1C51CFD64(a1, "Expected implicit register after groups", v210, k, 0);
                      ++k;
                      v209 += 32;
                    }
                    while (v206 != k);
                  }
                }
                else
                {
                  sub_1C51CC4F8(a1, "Too few operands on inline asm", v164);
                }
              }
              m = a1;
              if (sub_1C5079C7C(*(_QWORD *)(a1 + 32), v164))
              {
                v211 = *(_DWORD **)(v164 + 32);
                if ((*v211 & 0x10000FF) != 0x1000000)
                {
                  sub_1C51CC4F8(a1, "Unspillable Terminator does not define a reg", v164);
                  v211 = *(_DWORD **)(v164 + 32);
                }
                v212 = v211[1];
                if (v212 < 0 && (**((_BYTE **)*v1266 + 45) & 2) == 0)
                {
                  v213 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
                  if (v213)
                  {
                    while ((*(_DWORD *)v213 & 0x81000000) != 0)
                    {
                      v213 = *(_QWORD *)(v213 + 24);
                      if (!v213)
                        goto LABEL_351;
                    }
                    v214 = 0;
                    while (1)
                    {
                      v213 = *(_QWORD *)(v213 + 24);
                      if (!v213)
                        break;
                      if ((*(_DWORD *)v213 & 0x81000000) == 0)
                        ++v214;
                    }
                    if (v214)
                      sub_1C51CC4F8(a1, "Unspillable Terminator expected to have at most one use!", v164);
                  }
                }
              }
LABEL_351:
              v215 = *(unsigned __int16 **)(v164 + 16);
              if (*v215 - 13 <= 1 && *(_DWORD *)(v164 + 40) == 4 && !*(_QWORD *)(v164 + 56))
              {
                sub_1C51CC4F8(a1, "Missing DebugLoc for debug instruction", v164);
                v215 = *(unsigned __int16 **)(v164 + 16);
              }
              if ((v215[4] & 0x10) != 0 && *(_DWORD *)(v164 + 64))
                sub_1C51CC4F8(a1, "Metadata instruction should not have a value tracking number", v164);
              v217 = (int *)(v164 + 48);
              v216 = *(_QWORD *)(v164 + 48);
              if (v216 >= 8)
              {
                if ((v216 & 7) == 0)
                {
                  *(_QWORD *)(v164 + 48) = v216 & 0xFFFFFFFFFFFFFFF8;
                  v221 = v164 + 56;
                  goto LABEL_397;
                }
                if ((*(_QWORD *)(v164 + 48) & 7) == 3)
                {
                  v218 = (int *)(v216 & 0xFFFFFFFFFFFFFFF8);
                  if ((v216 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v220 = *v218;
                    v217 = v218 + 2;
                    v219 = v220;
                    if ((_DWORD)v220)
                    {
                      v221 = (unint64_t)&v217[2 * v219];
                      do
                      {
LABEL_397:
                        v233 = *(_QWORD *)v217;
                        v234 = *(_WORD *)(*(_QWORD *)v217 + 32);
                        if ((v234 & 1) != 0)
                        {
                          v235 = *(unsigned __int16 **)(v164 + 16);
                          if (*v235 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v164 + 32) + 48) & 8) == 0)
                          {
                            v236 = *((_QWORD *)v235 + 1);
                            if ((*(_WORD *)(v164 + 44) & 0xC) != 0 && (*(_WORD *)(v164 + 44) & 4) == 0)
                            {
                              v231 = v164;
                              if ((v236 & 0x80000) != 0)
                                goto LABEL_405;
                              while ((*(_WORD *)(v231 + 44) & 8) != 0)
                              {
                                v231 = *(_QWORD *)(v231 + 8);
                                if ((*(_BYTE *)(*(_QWORD *)(v231 + 16) + 10) & 8) != 0)
                                  goto LABEL_405;
                              }
LABEL_404:
                              sub_1C51CC4F8(a1, "Missing mayLoad flag", v164);
                              v234 = *(_WORD *)(v233 + 32);
                              goto LABEL_405;
                            }
                            if ((v236 & 0x80000) == 0)
                              goto LABEL_404;
                          }
                        }
LABEL_405:
                        m = a1;
                        if ((v234 & 2) == 0)
                          goto LABEL_413;
                        v238 = *(unsigned __int16 **)(v164 + 16);
                        if (*v238 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v164 + 32) + 48) & 0x10) != 0)
                          goto LABEL_413;
                        v239 = *((_QWORD *)v238 + 1);
                        if ((*(_WORD *)(v164 + 44) & 0xC) != 0 && (*(_WORD *)(v164 + 44) & 4) == 0)
                        {
                          v232 = v164;
                          if ((v239 & 0x100000) == 0)
                          {
                            while ((*(_WORD *)(v232 + 44) & 8) != 0)
                            {
                              v232 = *(_QWORD *)(v232 + 8);
                              if ((*(_BYTE *)(*(_QWORD *)(v232 + 16) + 10) & 0x10) != 0)
                                goto LABEL_413;
                            }
LABEL_412:
                            sub_1C51CC4F8(a1, "Missing mayStore flag", v164);
                          }
                        }
                        else if ((v239 & 0x100000) == 0)
                        {
                          goto LABEL_412;
                        }
LABEL_413:
                        v217 += 2;
                      }
                      while (v217 != (int *)v221);
                    }
                  }
                }
              }
              v241 = *(_QWORD *)(m + 600);
              if (v241)
              {
                v242 = *(_QWORD *)(v241 + 288);
                v243 = *(_DWORD *)(v242 + 384);
                if (v243)
                {
                  v244 = *(_QWORD *)(v242 + 368);
                  v245 = v243 - 1;
                  v246 = (v243 - 1) & ((v164 >> 4) ^ (v164 >> 9));
                  v247 = *(_QWORD *)(v244 + 16 * v246);
                  if (v164 == v247)
                  {
                    LOBYTE(v243) = 1;
                  }
                  else
                  {
                    v248 = 1;
                    do
                    {
                      LOBYTE(v243) = v247 != -4096;
                      if (v247 == -4096)
                        break;
                      v249 = v246 + v248++;
                      v246 = v249 & v245;
                      v247 = *(_QWORD *)(v244 + 16 * v246);
                    }
                    while (v164 != v247);
                  }
                }
                v250 = **(unsigned __int16 **)(v164 + 16);
                if ((v250 - 13) < 5 || v250 == 23)
                {
                  v252 = "Debug instruction has a slot index";
                  if ((v243 & 1) == 0)
                    goto LABEL_428;
                  goto LABEL_427;
                }
                if ((*(_WORD *)(v164 + 44) & 4) == 0)
                {
                  v252 = "Missing slot index";
                  if ((v243 & 1) != 0)
                    goto LABEL_428;
LABEL_427:
                  sub_1C51CC4F8(m, v252, v164);
                  goto LABEL_428;
                }
                v252 = "Instruction inside bundle has a slot index";
                if ((v243 & 1) != 0)
                  goto LABEL_427;
              }
LABEL_428:
              if (*v197 - 42 <= 0xD5)
              {
                sub_1C51CD43C(m, v164);
LABEL_478:
                v1278 = *(unsigned int *)(v164 + 40);
                if (!(_DWORD)v1278)
                  goto LABEL_1132;
                v285 = 0;
                while (1)
                {
                  v286 = *(_QWORD *)(v164 + 32);
                  v287 = (unsigned int *)(v286 + 32 * v285);
                  v288 = (unint64_t *)(v287 + 2);
                  v289 = v164;
                  if (*((_QWORD *)v287 + 1) != v164)
                  {
                    sub_1C51CC4F8(m, "Instruction has operand with wrong parent set", v164);
                    v289 = *v288;
                  }
                  v290 = *(unsigned __int16 **)(v289 + 16);
                  v291 = *((unsigned __int8 *)v290 + 4);
                  if (*v290 == 27)
                  {
                    if (v285)
                      goto LABEL_489;
                    if (*(_BYTE *)v287)
                      v291 = 0;
                  }
                  if (v285 < v291)
                  {
                    v292 = *v287;
                    if (*v287)
                    {
                      v293 = m;
                      v294 = "Explicit definition must be a register";
                      goto LABEL_533;
                    }
                    if ((v292 & 0x1000000) == 0 && (*(_BYTE *)(*((_QWORD *)v290 + 5) + 6 * v285 + 2) & 4) == 0)
                    {
                      v293 = m;
                      v294 = "Explicit definition marked as use";
                      goto LABEL_533;
                    }
                    if ((v292 & 0x2000000) != 0)
                    {
                      v293 = m;
                      v294 = "Explicit definition marked as implicit";
                      goto LABEL_533;
                    }
                    goto LABEL_535;
                  }
LABEL_489:
                  v295 = v290[1];
                  if (v285 < v295)
                  {
                    if ((_DWORD)v295 - 1 != v285 || (*((_QWORD *)v290 + 1) & 2) == 0)
                    {
                      v297 = *((_QWORD *)v290 + 5);
                      v298 = *v287;
                      if (!*v287)
                      {
                        if ((v298 & 0x1000000) != 0
                          && (*((_QWORD *)v290 + 1) & 0x8000000000) == 0
                          && (*(_BYTE *)(v297 + 6 * v285 + 2) & 4) == 0)
                        {
                          sub_1C51CFD64(a1, "Explicit operand marked as def", (unint64_t *)(v286 + 32 * v285), v285, 0);
                          v298 = *v287;
                        }
                        if ((v298 & 0x2000000) != 0)
                        {
                          sub_1C51CFD64(a1, "Explicit operand marked as implicit", (unint64_t *)(v286 + 32 * v285), v285, 0);
                          LOBYTE(v298) = *(_BYTE *)v287;
                        }
                      }
                      v299 = v297 + 6 * v285;
                      v301 = *(unsigned __int8 *)(v299 + 3);
                      v300 = (unsigned __int8 *)(v299 + 3);
                      if (v301 == 2 && (v298 > 7u || ((1 << v298) & 0xA1) == 0))
                      {
                        sub_1C51CFD64(a1, "Expected a register operand.", (unint64_t *)(v286 + 32 * v285), v285, 0);
                        LOBYTE(v298) = *(_BYTE *)v287;
                      }
                      if (!(_BYTE)v298)
                      {
                        v303 = *v300;
                        if (v303 == 1
                          || v303 == 4
                          && ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 32) + 408))(*(_QWORD *)(a1 + 32), v286 + 32 * v285) & 1) == 0)
                        {
                          sub_1C51CFD64(a1, "Expected a non-register operand.", (unint64_t *)(v286 + 32 * v285), v285, 0);
                        }
                      }
                    }
                    if (v285 >= v290[1])
                    {
                      v305 = *v287;
                    }
                    else
                    {
                      v304 = *(_WORD *)(*((_QWORD *)v290 + 5) + 6 * v285 + 4);
                      v305 = *v287;
                      if ((v304 & 1) != 0)
                      {
                        m = a1;
                        if (*v287)
                        {
                          v293 = a1;
                          v294 = "Tied use must be a register";
                          goto LABEL_533;
                        }
                        if ((v305 & 0xF00000) != 0)
                        {
                          v368 = v304 >> 4;
                          if ((_DWORD)v368 == llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v289, v285))
                          {
                            v369 = *(_DWORD *)(v286 + 32 * v285 + 4);
                            if ((v369 - 1) > 0x3FFFFFFE)
                              goto LABEL_535;
                            v310 = *(_QWORD *)(v289 + 32) + 32 * v368;
                            if (*(_BYTE *)v310)
                            {
                              v293 = a1;
                              v294 = "Tied counterpart must be a register";
                            }
                            else
                            {
                              v393 = *(_DWORD *)(v310 + 4);
                              v394 = v369 == v393 || (v393 - 1) > 0x3FFFFFFE;
                              if (v394)
                                goto LABEL_535;
                              v293 = a1;
                              v294 = "Tied physical registers must match.";
                            }
                            v311 = v368;
                            goto LABEL_534;
                          }
                          v293 = a1;
                          v294 = "Tied def doesn't match MCInstrDesc";
                        }
                        else
                        {
                          v293 = a1;
                          v294 = "Operand should be tied";
                        }
LABEL_533:
                        v310 = v286 + 32 * v285;
                        v311 = v285;
LABEL_534:
                        sub_1C51CFD64(v293, v294, (unint64_t *)v310, v311, 0);
                        goto LABEL_535;
                      }
                    }
                    v307 = v305;
                    v308 = v305 & 0xF00000;
                    if (v307)
                      v309 = 1;
                    else
                      v309 = v308 == 0;
                    m = a1;
                    if (v309)
                      goto LABEL_535;
                    v293 = a1;
                    v294 = "Explicit operand should not be tied";
                    goto LABEL_533;
                  }
                  v306 = *v287;
                  if ((*v287 & 0x20000FF) != 0)
                    goto LABEL_536;
                  if ((v290[4] & 2) == 0 && *(_DWORD *)(v286 + 32 * v285 + 4))
                  {
                    v293 = m;
                    v294 = "Extra explicit operand on non-variadic instruction";
                    goto LABEL_533;
                  }
LABEL_535:
                  v306 = *v287;
LABEL_536:
                  if (v306 > 4u)
                  {
                    if (v306 != 5)
                    {
                      if (v306 == 12)
                      {
                        v317 = *(_QWORD *)(v286 + 32 * v285 + 16);
                        v318 = *(unsigned int *)(a1 + 520);
                        if (v318 >= *(unsigned int *)(a1 + 524))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v1237, v1236, v318 + 1, 8);
                          v318 = *(unsigned int *)(a1 + 520);
                        }
                        *(_QWORD *)(*(_QWORD *)(a1 + 512) + 8 * v318) = v317;
                        ++*(_DWORD *)(a1 + 520);
                      }
                      goto LABEL_1116;
                    }
                    v320 = *(_QWORD *)(m + 608);
                    if (!v320)
                      goto LABEL_1116;
                    v321 = v286 + 32 * v285;
                    v323 = *(_DWORD *)(v321 + 16);
                    v322 = (int *)(v321 + 16);
                    LODWORD(v1305) = v323;
                    if (!sub_1C51D0CE8((_QWORD *)(v320 + 352), (int *)&v1305))
                      goto LABEL_1116;
                    v324 = *(_QWORD *)(a1 + 600);
                    if (!v324)
                      goto LABEL_1116;
                    v325 = *(_QWORD *)(v324 + 288);
                    v326 = *(_DWORD *)(v325 + 384);
                    if (!v326)
                      goto LABEL_1116;
                    v327 = *(_QWORD *)(v325 + 368);
                    v328 = v326 - 1;
                    v329 = v328 & ((v289 >> 4) ^ (v289 >> 9));
                    v330 = *(_QWORD *)(v327 + 16 * v329);
                    if (v289 != v330)
                    {
                      v331 = 1;
                      do
                      {
                        if (v330 == -4096)
                          goto LABEL_1116;
                        v332 = v329 + v331++;
                        v329 = v332 & v328;
                        v330 = *(_QWORD *)(v327 + 16 * v329);
                      }
                      while (v289 != v330);
                    }
                    v333 = *v322;
                    v334 = a1;
                    v335 = *(_QWORD *)(a1 + 608);
                    LODWORD(v1305) = v333;
                    v336 = sub_1C50E36C4((_QWORD *)(v335 + 352), (int *)&v1305);
                    v337 = v336;
                    v338 = *(_WORD *)(v289 + 44);
                    v339 = v289;
                    if ((v338 & 4) != 0)
                    {
                      do
                        v339 = *(_QWORD *)v339 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v339 + 44) & 4) != 0);
                    }
                    v340 = *(_QWORD *)(*(_QWORD *)(a1 + 600) + 288);
                    v341 = v289;
                    if ((v338 & 8) != 0)
                    {
                      do
                        v341 = *(_QWORD *)(v341 + 8);
                      while ((*(_WORD *)(v341 + 44) & 8) != 0);
                    }
                    v342 = *(_QWORD *)(v341 + 8);
                    if (v339 != v342)
                    {
                      do
                      {
                        v343 = **(unsigned __int16 **)(v339 + 16);
                        v394 = v343 > 0x17;
                        v344 = (1 << v343) & 0x83E000;
                        if (v394 || v344 == 0)
                          goto LABEL_573;
                        v339 = *(_QWORD *)(v339 + 8);
                      }
                      while (v339 != v342);
                      v339 = v342;
                    }
LABEL_573:
                    v346 = *(_QWORD *)(v340 + 368);
                    v347 = *(unsigned int *)(v340 + 384);
                    if ((_DWORD)v347)
                    {
                      LODWORD(v348) = ((v339 >> 4) ^ (v339 >> 9)) & (v347 - 1);
                      v349 = (uint64_t *)(v346 + 16 * v348);
                      v350 = *v349;
                      if (v339 != *v349)
                      {
                        v351 = 1;
                        do
                        {
                          if (v350 == -4096)
                            goto LABEL_627;
                          v352 = v348 + v351++;
                          v348 = v352 & (v347 - 1);
                          v350 = *(_QWORD *)(v346 + 16 * v348);
                        }
                        while (v339 != v350);
                        v349 = (uint64_t *)(v346 + 16 * v348);
                      }
                    }
                    else
                    {
LABEL_627:
                      v349 = (uint64_t *)(v346 + 16 * v347);
                    }
                    v376 = (llvm::LiveInterval *)(v336 + 3);
                    v377 = v349[1];
                    v378 = *(unsigned __int16 **)(v289 + 16);
                    v379 = *v378 - 1;
                    if (v379 <= 1)
                    {
                      v657 = *(_QWORD *)(*(_QWORD *)(v289 + 32) + 48);
                      if ((v657 & 0x10) != 0)
                      {
                        LODWORD(v382) = 1;
                        goto LABEL_1059;
                      }
                    }
                    v380 = *((_QWORD *)v378 + 1);
                    v381 = v338 & 0xC;
                    if ((v338 & 0xC) != 0 && (v338 & 4) == 0)
                    {
                      v661 = v289;
                      if ((v380 & 0x100000) != 0)
                      {
                        LODWORD(v382) = 1;
                      }
                      else
                      {
                        while (1)
                        {
                          v662 = *(unsigned __int16 *)(v661 + 44);
                          LODWORD(v382) = (v662 >> 3) & 1;
                          if ((v662 & 8) == 0)
                            break;
                          v661 = *(_QWORD *)(v661 + 8);
                          v334 = a1;
                          if ((*(_BYTE *)(*(_QWORD *)(v661 + 16) + 10) & 0x10) != 0)
                            goto LABEL_632;
                        }
                        v334 = a1;
                      }
                    }
                    else
                    {
                      v382 = (v380 >> 20) & 1;
                    }
LABEL_632:
                    if (v379 <= 1)
                    {
                      v657 = *(_QWORD *)(*(_QWORD *)(v289 + 32) + 48);
LABEL_1059:
                      if ((v657 & 8) == 0)
                      {
                        v381 = v338 & 0xC;
                        v334 = a1;
                        goto LABEL_633;
                      }
                    }
                    else
                    {
LABEL_633:
                      v383 = *((_QWORD *)v378 + 1);
                      if (!v381 || (v338 & 4) != 0)
                      {
                        v384 = (v383 >> 19) & 1;
                        if ((_DWORD)v382)
                          goto LABEL_636;
LABEL_1083:
                        if ((_DWORD)v384)
                          goto LABEL_1084;
LABEL_1097:
                        if (!(_DWORD)v382)
                          goto LABEL_1116;
LABEL_1098:
                        v664 = v377 & 0xFFFFFFFFFFFFFFF8;
LABEL_1099:
                        v676 = *((_DWORD *)v337 + 8);
                        v677 = v337[3];
                        if (v676)
                        {
                          v678 = *(_QWORD *)(v677 + 24 * v676 - 16);
                          v679 = *(_DWORD *)(v664 + 24) | 2;
                          v680 = (v678 >> 1) & 3 | *(_DWORD *)((v678 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v681 = (_QWORD *)v337[3];
                          v682 = *((unsigned int *)v337 + 8);
                          if (v679 < v680)
                          {
                            do
                            {
                              v683 = v682 >> 1;
                              v684 = v681[3 * (v682 >> 1) + 1];
                              LODWORD(v684) = (v684 >> 1) & 3 | *(_DWORD *)((v684 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                              v682 -= (v682 >> 1) + 1;
                              v685 = v679 >= v684;
                              if (v679 >= v684)
                                v686 = v683 + 1;
                              else
                                v686 = 0;
                              v681 += 3 * v686;
                              if (!v685)
                                v682 = v683;
                            }
                            while (v682);
                            goto LABEL_1114;
                          }
                        }
                        else
                        {
                          v676 = 0;
                        }
                        v681 = (_QWORD *)(v677 + 24 * v676);
LABEL_1114:
                        if (v681 == (_QWORD *)(v677 + 24 * v676)
                          || ((*v681 >> 1) & 3 | *(_DWORD *)((*v681 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v664 + 24) | 2u))
                        {
                          v693 = v376;
                          v694 = sub_1C51CFD64(a1, "Instruction stores to dead spill slot", (unint64_t *)v287, v285, 0);
                          v695 = (llvm::raw_ostream *)llvm::errs(v694);
                          v696 = v695;
                          v697 = *((_QWORD *)v695 + 4);
                          if ((unint64_t)(*((_QWORD *)v695 + 3) - v697) > 0xB)
                          {
                            *(_DWORD *)(v697 + 8) = 540699491;
                            *(_QWORD *)v697 = *(_QWORD *)"Live stack: ";
                            *((_QWORD *)v695 + 4) += 12;
                          }
                          else
                          {
                            llvm::raw_ostream::write(v695, "Live stack: ", 0xCuLL);
                          }
                          llvm::LiveInterval::print(v693, v696);
                          v698 = (_BYTE *)*((_QWORD *)v696 + 4);
                          if ((unint64_t)v698 >= *((_QWORD *)v696 + 3))
                          {
                            llvm::raw_ostream::write(v696, 10);
                          }
                          else
                          {
                            *((_QWORD *)v696 + 4) = v698 + 1;
                            *v698 = 10;
                          }
                        }
                        goto LABEL_1116;
                      }
                      v663 = v289;
                      if ((v383 & 0x80000) == 0)
                      {
                        while ((*(_WORD *)(v663 + 44) & 8) != 0)
                        {
                          v663 = *(_QWORD *)(v663 + 8);
                          LODWORD(v384) = 1;
                          if ((*(_BYTE *)(*(_QWORD *)(v663 + 16) + 10) & 8) != 0)
                            goto LABEL_1082;
                        }
                        if ((v382 & 1) == 0)
                          goto LABEL_1116;
                        goto LABEL_1098;
                      }
                    }
                    LODWORD(v384) = 1;
LABEL_1082:
                    v334 = a1;
                    if (!(_DWORD)v382)
                      goto LABEL_1083;
LABEL_636:
                    if (!(_DWORD)v384)
                      goto LABEL_1083;
                    v385 = (uint64_t **)(v289 + 48);
                    v386 = *(_QWORD *)(v289 + 48);
                    if (v386 >= 8)
                    {
                      if ((v386 & 7) == 0)
                      {
                        *(_QWORD *)(v289 + 48) = v386 & 0xFFFFFFFFFFFFFFF8;
                        v390 = (uint64_t **)(v289 + 56);
                        goto LABEL_644;
                      }
                      if ((*(_QWORD *)(v289 + 48) & 7) == 3)
                      {
                        v387 = (int *)(v386 & 0xFFFFFFFFFFFFFFF8);
                        if ((v386 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          v389 = *v387;
                          v385 = (uint64_t **)(v387 + 2);
                          v388 = v389;
                          if ((_DWORD)v389)
                          {
                            v390 = &v385[v388];
LABEL_644:
                            while (1)
                            {
                              v391 = **v385;
                              if ((v391 & 4) != 0)
                              {
                                v392 = v391 & 0xFFFFFFFFFFFFFFF8;
                                if (v392)
                                {
                                  if (*(_DWORD *)(v392 + 8) == 4 && *(_DWORD *)(v392 + 16) == v333)
                                    break;
                                }
                              }
                              if (++v385 == v390)
                                goto LABEL_658;
                            }
                            v395 = *((unsigned __int16 *)*v385 + 16);
                            LODWORD(v382) = v382 & (v395 >> 1);
                            if ((v395 & 2) != 0)
                              LODWORD(v384) = 0;
                          }
                        }
                      }
                    }
LABEL_658:
                    if ((_DWORD)v384 != (_DWORD)v382)
                      goto LABEL_1083;
                    sub_1C51CC4F8(v334, "Missing fixed stack memoperand.", v289);
                    v376 = (llvm::LiveInterval *)(v337 + 3);
                    if ((v384 & 1) == 0)
                      goto LABEL_1097;
LABEL_1084:
                    v664 = v377 & 0xFFFFFFFFFFFFFFF8;
                    v665 = *((_DWORD *)v337 + 8);
                    v666 = v337[3];
                    if (v665)
                    {
                      v667 = *(_QWORD *)(v666 + 24 * v665 - 16);
                      v668 = *(_DWORD *)(v664 + 24) | 1;
                      v669 = (v667 >> 1) & 3 | *(_DWORD *)((v667 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v670 = (_QWORD *)v337[3];
                      v671 = *((unsigned int *)v337 + 8);
                      if (v668 < v669)
                      {
                        do
                        {
                          v672 = v671 >> 1;
                          v673 = v670[3 * (v671 >> 1) + 1];
                          LODWORD(v673) = (v673 >> 1) & 3 | *(_DWORD *)((v673 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v671 -= (v671 >> 1) + 1;
                          v674 = v668 >= v673;
                          if (v668 >= v673)
                            v675 = v672 + 1;
                          else
                            v675 = 0;
                          v670 += 3 * v675;
                          if (!v674)
                            v671 = v672;
                        }
                        while (v671);
                        goto LABEL_1095;
                      }
                    }
                    else
                    {
                      v665 = 0;
                    }
                    v670 = (_QWORD *)(v666 + 24 * v665);
LABEL_1095:
                    if (v670 != (_QWORD *)(v666 + 24 * v665)
                      && ((*v670 >> 1) & 3 | *(_DWORD *)((*v670 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v664 + 24) | 1u))
                    {
                      goto LABEL_1097;
                    }
                    v687 = v376;
                    v688 = sub_1C51CFD64(v334, "Instruction loads from dead spill slot", (unint64_t *)v287, v285, 0);
                    v689 = (llvm::raw_ostream *)llvm::errs(v688);
                    v690 = v689;
                    v691 = *((_QWORD *)v689 + 4);
                    if ((unint64_t)(*((_QWORD *)v689 + 3) - v691) > 0xB)
                    {
                      *(_DWORD *)(v691 + 8) = 540699491;
                      *(_QWORD *)v691 = *(_QWORD *)"Live stack: ";
                      *((_QWORD *)v689 + 4) += 12;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v689, "Live stack: ", 0xCuLL);
                    }
                    llvm::LiveInterval::print(v687, v690);
                    v692 = (_BYTE *)*((_QWORD *)v690 + 4);
                    if ((unint64_t)v692 >= *((_QWORD *)v690 + 3))
                    {
                      llvm::raw_ostream::write(v690, 10);
                    }
                    else
                    {
                      *((_QWORD *)v690 + 4) = v692 + 1;
                      *v692 = 10;
                    }
                    v376 = v687;
                    if ((v382 & 1) == 0)
                      goto LABEL_1116;
                    goto LABEL_1099;
                  }
                  if ((_BYTE)v306)
                  {
                    if (v306 == 4 && (**(_WORD **)(v289 + 16) == 69 || !**(_WORD **)(v289 + 16)))
                    {
                      v312 = *(_QWORD *)(v286 + 32 * v285 + 16);
                      v313 = *(_QWORD **)(v312 + 88);
                      v314 = *(_QWORD **)(v312 + 96);
                      if (v313 != v314)
                      {
                        while (*v313 != *(_QWORD *)(v289 + 24))
                        {
                          if (++v313 == v314)
                          {
                            v313 = v314;
                            break;
                          }
                        }
                      }
                      if (v313 == v314)
                      {
                        v315 = a1;
                        v316 = "PHI operand is not in the CFG";
                        goto LABEL_892;
                      }
                    }
                    goto LABEL_1116;
                  }
                  if ((v306 & 0x1000000) != 0 || **(unsigned __int16 **)(v289 + 16) - 13 > 4)
                  {
                    if ((v306 & 0x80000000) == 0)
                      goto LABEL_582;
                    v319 = "Register operand must not be marked debug";
LABEL_581:
                    sub_1C51CFD64(m, v319, (unint64_t *)(v286 + 32 * v285), v285, 0);
                    goto LABEL_582;
                  }
                  v319 = "Register operand must be marked debug";
                  if ((v306 & 0x80000000) == 0)
                    goto LABEL_581;
LABEL_582:
                  v353 = v286 + 32 * v285;
                  v356 = *(_DWORD *)(v353 + 4);
                  v355 = (_DWORD *)(v353 + 4);
                  v354 = v356;
                  if (!v356)
                    goto LABEL_1116;
                  v1272 = v354;
                  if ((**(_BYTE **)(**(_QWORD **)(a1 + 48) + 360) & 4) == 0
                    || **(unsigned __int16 **)(v289 + 16) - 13 < 5)
                  {
                    goto LABEL_785;
                  }
                  v1259 = *v288;
                  v357 = *v287;
                  v358 = (v357 >> 8) & 0xFFF;
                  v1267 = v355;
                  v1248 = v358;
                  if ((v354 & 0x80000000) != 0)
                  {
                    v359 = a1;
                    v360 = *(_QWORD *)(a1 + 600);
                    if (v360)
                    {
                      v361 = v354 & 0x7FFFFFFF;
                      v362 = *(unsigned int *)(v360 + 416);
                      if ((v354 & 0x7FFFFFFF) < v362
                        && (v363 = *(_QWORD *)(v360 + 408), *(_QWORD *)(v363 + 8 * v361)))
                      {
                        if ((v354 & 0x7FFFFFFF) >= v362
                          || (v364 = *(llvm::LiveInterval **)(v363 + 8 * (v354 & 0x7FFFFFFF))) == 0)
                        {
                          v1250 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 600), v354);
                          v1254 = *(_QWORD *)(v360 + 304);
                          v620 = *(_QWORD *)(v360 + 248);
                          *(_QWORD *)v1254 = v620;
                          *(_QWORD *)(v1254 + 8) = *(_QWORD *)(v620 + 40);
                          *(_OWORD *)(v1254 + 16) = *(_OWORD *)(v360 + 288);
                          *(_QWORD *)(v1254 + 32) = v360 + 312;
                          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1254);
                          *(_DWORD *)(v1254 + 184) = 0;
                          v621 = *(_QWORD *)(v360 + 256);
                          v53 = *(_BYTE *)(v621 + 16) == 0;
                          v622 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v621 + 24)
                                                                 + 16 * (*((_DWORD *)v1250 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                    + 34);
                          v624 = !v53 && v622 != 0;
                          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v360 + 304), v1250, v624);
                          llvm::LiveIntervals::computeDeadValues(v360, (uint64_t)v1250, 0);
                          v364 = v1250;
                          LODWORD(v358) = v1248;
                          v354 = v1272;
                          LODWORD(v357) = *v287;
                        }
                        v1249 = v364;
                        if (!(_DWORD)v358 || (v357 & 0x11000000) == 0x10000000)
                          goto LABEL_612;
                        if (!*((_DWORD *)v364 + 2) || *((_QWORD *)v364 + 13) != 0)
                          goto LABEL_612;
                        v366 = *(_QWORD *)(a1 + 48);
                        if (!*(_BYTE *)(v366 + 16))
                          goto LABEL_612;
                        v367 = "Live interval for subreg operand has no subranges";
                        if (!*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v366 + 24) + 16 * v361) & 0xFFFFFFFFFFFFFFF8) + 34))
                          goto LABEL_612;
                      }
                      else
                      {
                        v1249 = 0;
                        v367 = "Virtual register has no live interval";
                      }
                      sub_1C51CFD64(a1, v367, (unint64_t *)v287, v285, 0);
                      v354 = v1272;
                      LODWORD(v357) = *v287;
                    }
                    else
                    {
                      v1249 = 0;
                    }
                  }
                  else
                  {
                    v1249 = 0;
                    v359 = a1;
                  }
LABEL_612:
                  if ((v357 & 0x30000000) != 0 || (v357 & 0x10FFF00) == 0x1000000)
                    goto LABEL_741;
                  if (((v357 >> 26) & ~BYTE3(v357) & 1) != 0)
                  {
                    sub_1C51D0000((unsigned int *)v359, v1241, v354);
                    v354 = v1272;
                  }
                  if ((v354 & 0x80000000) != 0)
                  {
                    v370 = *(_QWORD *)v1247;
                    if (*(_QWORD *)v1247)
                    {
                      if (((*v287 >> 26) & ~HIBYTE(*v287) & 1) != 0 && (*(_WORD *)(v1259 + 44) & 4) == 0)
                      {
                        v371 = (_QWORD *)(v370 + 248);
                        v372 = v354 & 0x7FFFFFFF;
                        if ((v354 & 0x7FFFFFFF) >= *(_DWORD *)(v370 + 256))
                        {
                          sub_1C61E5C60((uint64_t *)(v370 + 248), v372 + 1, v370 + 264);
                          v354 = v1272;
                        }
                        v373 = *v371 + 56 * v372;
                        v374 = *(_QWORD **)(v373 + 32);
                        v375 = *(_QWORD **)(v373 + 40);
                        if (v374 == v375)
                        {
                          v359 = a1;
                        }
                        else
                        {
                          v359 = a1;
                          do
                          {
                            if (*v374 == v1259)
                              goto LABEL_662;
                            ++v374;
                          }
                          while (v374 != v375);
                          v374 = v375;
                        }
LABEL_662:
                        if (v374 == v375)
                        {
                          sub_1C51CFD64(v359, "Kill missing from LiveVariables", (unint64_t *)v287, v285, 0);
                          v354 = v1272;
                        }
                      }
                    }
                  }
                  v396 = *(_QWORD *)(v359 + 600);
                  if (!v396)
                    goto LABEL_697;
                  v397 = *(_QWORD *)(v396 + 288);
                  v398 = *(unsigned int *)(v397 + 384);
                  if (!(_DWORD)v398)
                    goto LABEL_697;
                  v399 = *(_QWORD *)(v397 + 368);
                  v400 = v1259;
                  v401 = v398 - 1;
                  v402 = (v398 - 1) & ((v1259 >> 4) ^ (v1259 >> 9));
                  v403 = *(_QWORD *)(v399 + 16 * v402);
                  if (v1259 != v403)
                  {
                    v404 = 1;
                    do
                    {
                      if (v403 == -4096)
                        goto LABEL_697;
                      v405 = v402 + v404++;
                      v402 = v405 & v401;
                      v403 = *(_QWORD *)(v399 + 16 * v402);
                      v400 = v1259;
                    }
                    while (v1259 != v403);
                  }
                  v406 = *(_WORD *)(v400 + 44);
                  v407 = v400;
                  if ((v406 & 4) != 0)
                  {
                    do
                      v407 = *(_QWORD *)v407 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v407 + 44) & 4) != 0);
                  }
                  v408 = v400;
                  if ((v406 & 8) != 0)
                  {
                    do
                      v408 = *(_QWORD *)(v408 + 8);
                    while ((*(_WORD *)(v408 + 44) & 8) != 0);
                  }
                  v409 = *(_QWORD *)(v408 + 8);
                  if (v407 != v409)
                  {
                    do
                    {
                      v410 = **(unsigned __int16 **)(v407 + 16);
                      v394 = v410 > 0x17;
                      v411 = (1 << v410) & 0x83E000;
                      if (v394 || v411 == 0)
                        goto LABEL_679;
                      v407 = *(_QWORD *)(v407 + 8);
                    }
                    while (v407 != v409);
                    v407 = v409;
                  }
LABEL_679:
                  LODWORD(v413) = ((v407 >> 4) ^ (v407 >> 9)) & v401;
                  v414 = (uint64_t *)(v399 + 16 * v413);
                  v415 = *v414;
                  if (v407 == *v414)
                    goto LABEL_685;
                  v416 = 1;
                  while (v415 != -4096)
                  {
                    v417 = v413 + v416++;
                    v413 = v417 & v401;
                    v415 = *(_QWORD *)(v399 + 16 * v413);
                    if (v407 == v415)
                    {
                      v414 = (uint64_t *)(v399 + 16 * v413);
                      goto LABEL_685;
                    }
                  }
                  v414 = (uint64_t *)(v399 + 16 * v398);
LABEL_685:
                  v1253 = v414[1];
                  if ((v354 - 1) <= 0x3FFFFFFE)
                  {
                    v359 = a1;
                    v354 = v1272;
                    if (*(_DWORD *)(a1 + 240) > v1272
                      && ((*(_QWORD *)((char *)*v1251 + ((v1272 >> 3) & 0x1FFFFFF8)) >> v1272) & 1) != 0)
                    {
                      goto LABEL_697;
                    }
                    v418 = *(_QWORD *)(a1 + 40);
                    if (v418)
                      v419 = (_QWORD *)(v418 + 8);
                    else
                      v419 = 0;
                    v420 = *(unsigned int *)(*v419 + 24 * v1272 + 16);
                    v421 = (_WORD *)(v419[6] + ((v420 >> 3) & 0x1FFFFFFE));
                    v423 = *v421;
                    v422 = v421 + 1;
                    v424 = v423 + (v420 & 0xF) * v1272;
                    do
                    {
                      if ((llvm::MachineRegisterInfo::isReservedRegUnit(*(llvm::MachineRegisterInfo **)(a1 + 48), v424) & 1) == 0)
                      {
                        v425 = *(llvm **)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 680) + 8 * v424);
                        if (v425)
                          sub_1C51D00D8((llvm::raw_ostream *)a1, (unint64_t *)v287, v285, (llvm *)v1253, v425, v424, 0);
                      }
                      v426 = *v422++;
                      v424 += v426;
                    }
                    while (v426);
                  }
                  v359 = a1;
                  v354 = v1272;
                  if ((v1272 & 0x80000000) == 0)
                    goto LABEL_697;
                  sub_1C51D00D8((llvm::raw_ostream *)a1, (unint64_t *)v287, v285, (llvm *)v1253, v1249, v1272, 0);
                  v354 = v1272;
                  v460 = (unsigned int *)*((_QWORD *)v1249 + 13);
                  if (!v460 || (*((_BYTE *)v287 + 3) & 1) != 0)
                    goto LABEL_697;
                  if ((_DWORD)v1248)
                    v461 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 232) + 8 * v1248);
                  else
                    v461 = (uint64_t *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v1272 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                     + 24);
                  v1244 = 0;
                  v1245 = *v461;
                  v600 = v1253 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v601 = *((_QWORD *)v460 + 14);
                    if ((v601 & v1245) == 0)
                      goto LABEL_953;
                    sub_1C51D00D8((llvm::raw_ostream *)a1, (unint64_t *)v287, v285, (llvm *)v1253, (llvm *)v460, v354, (llvm *)v601);
                    v602 = v460[2];
                    v603 = *(_QWORD **)v460;
                    if (!v602)
                    {
                      v602 = 0;
LABEL_944:
                      v354 = v1272;
                      v607 = &v603[3 * v602];
                      goto LABEL_945;
                    }
                    v604 = v603[3 * v602 - 2];
                    v605 = *(_DWORD *)(v600 + 24);
                    v606 = (v604 >> 1) & 3 | *(_DWORD *)((v604 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v607 = *(_QWORD **)v460;
                    v608 = v460[2];
                    if (v605 >= v606)
                      goto LABEL_944;
                    do
                    {
                      v609 = v608 >> 1;
                      v610 = v607[3 * (v608 >> 1) + 1];
                      LODWORD(v610) = (v610 >> 1) & 3 | *(_DWORD *)((v610 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v608 -= (v608 >> 1) + 1;
                      v611 = v605 >= v610;
                      if (v605 >= v610)
                        v612 = v609 + 1;
                      else
                        v612 = 0;
                      v607 += 3 * v612;
                      if (!v611)
                        v608 = v609;
                    }
                    while (v608);
                    v354 = v1272;
LABEL_945:
                    v613 = &v603[3 * v602];
                    if (v607 != v613
                      && ((*v607 >> 1) & 3 | *(_DWORD *)((*v607 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v600 + 24))
                    {
                      v614 = v607[2];
                      v615 = v607[1] & 0xFFFFFFFFFFFFFFF8;
                      v616 = v607 + 3;
                      if (v600 != v615 || v616 != v613)
                      {
                        if (*(_QWORD *)(v614 + 8) == v600)
                          goto LABEL_953;
LABEL_952:
                        v1244 |= *((_QWORD *)v460 + 14);
                        goto LABEL_953;
                      }
                      if (v614)
                        goto LABEL_952;
                    }
LABEL_953:
                    v460 = (unsigned int *)*((_QWORD *)v460 + 13);
                  }
                  while (v460);
                  if ((v1244 & v1245) == 0)
                  {
                    sub_1C51CFD64(a1, "No live subrange at use", (unint64_t *)v287, v285, 0);
                    sub_1C51D02E0(v1249);
                    sub_1C51D038C((llvm *)v1253);
                    v354 = v1272;
                  }
LABEL_697:
                  v427 = *(_QWORD *)(v359 + 248);
                  v428 = *(_DWORD *)(v359 + 264);
                  if (!v428)
                  {
LABEL_703:
                    if ((v354 - 1) <= 0x3FFFFFFE)
                    {
                      if (*(_DWORD *)(v359 + 240) > v354
                        && ((*(_QWORD *)((char *)*v1251 + ((v354 >> 3) & 0x1FFFFFF8)) >> v354) & 1) != 0)
                      {
                        goto LABEL_741;
                      }
                      v433 = *(_QWORD *)(v359 + 40);
                      v434 = *(_QWORD *)(v433 + 56);
                      v435 = *(_QWORD *)(v433 + 8);
                      v436 = (_WORD *)(v434 + 2 * *(unsigned int *)(v435 + 24 * v354 + 4));
                      v437 = v1259;
                      if (*v436)
                      {
                        v438 = *v436 + v354;
                        v439 = v428 - 1;
                        do
                        {
                          if (v428)
                          {
                            v440 = (37 * v438) & v439;
                            v441 = *(_DWORD *)(v427 + 4 * v440);
                            if (v441 == v438)
                              goto LABEL_741;
                            v442 = 1;
                            while (1)
                            {
                              v437 = v1259;
                              if (v441 == -1)
                                break;
                              v443 = v440 + v442++;
                              v440 = v443 & v439;
                              v441 = *(_DWORD *)(v427 + 4 * v440);
                              if (v441 == v438)
                                goto LABEL_741;
                            }
                          }
                          v444 = (unsigned __int16)v436[1];
                          ++v436;
                          v438 += v444;
                        }
                        while (v444);
                      }
                      v445 = *(_QWORD *)(v437 + 32);
                      v446 = *(_QWORD *)(v437 + 16);
                      v447 = *(unsigned __int8 *)(v446 + 4);
                      v448 = *(unsigned int *)(v437 + 40);
                      if ((*(_BYTE *)(v446 + 8) & 2) == 0)
                      {
                        v449 = *(unsigned __int8 *)(v446 + 4);
                        goto LABEL_717;
                      }
                      if ((_DWORD)v448 != v447)
                      {
                        v449 = *(unsigned __int8 *)(v446 + 4);
                        do
                        {
                          v619 = *(_DWORD *)(v445 + 32 * v447);
                          if ((v619 & 0x10000FF) != 0x1000000)
                            break;
                          v449 += (v619 & 0x2000000) == 0;
                          if ((_DWORD)v448 - 1 == v447)
                            break;
                          ++v447;
                        }
                        while ((v619 & 0x2000000) == 0);
LABEL_717:
                        if (v449 != (_DWORD)v448)
                        {
                          v450 = (_DWORD *)(v445 + 32 * v448);
                          v451 = (_DWORD *)(v445 + 32 * v449);
                          v452 = 1;
                          do
                          {
                            while ((*v451 & 0x20000FF) == 0x2000000)
                            {
                              v453 = v451[1];
                              if (v453 - 1 > 0x3FFFFFFE)
                                break;
                              v454 = *(unsigned int *)(v435 + 24 * v453 + 4);
                              if (!*(_WORD *)(v434 + 2 * v454))
                                break;
                              v455 = *(_WORD *)(v434 + 2 * v454) + v453;
                              v456 = (unsigned __int16 *)(v434 + 2 + 2 * v454);
                              while ((_DWORD)v354 != v455)
                              {
                                v457 = *v456++;
                                v455 += v457;
                                if (!v457)
                                  goto LABEL_725;
                              }
                              v452 = 0;
                              v451 += 8;
                              if (v451 == v450)
                                goto LABEL_741;
                            }
LABEL_725:
                            v451 += 8;
                          }
                          while (v451 != v450);
                          if ((v452 & 1) == 0)
                            goto LABEL_741;
                        }
                      }
                      v458 = v359;
                      v459 = "Using an undefined physical register";
LABEL_740:
                      sub_1C51CFD64(v458, v459, (unint64_t *)v287, v285, 0);
                      v354 = v1272;
                      goto LABEL_741;
                    }
                    if (sub_1C50E3E8C(*(_QWORD *)(v359 + 48), v354))
                    {
                      v458 = v359;
                      v459 = "Reading virtual register without a def";
                      goto LABEL_740;
                    }
                    v462 = v1259;
                    v1305 = *(_QWORD *)(v1259 + 24);
                    v463 = sub_1C51CCEAC(v1240, (uint64_t *)&v1305);
                    v464 = v463;
                    v465 = *((_DWORD *)v463 + 12);
                    v354 = v1272;
                    if (v465)
                    {
                      v466 = v463[4];
                      v467 = v465 - 1;
                      v468 = v467 & (37 * v1272);
                      v469 = *(_DWORD *)(v466 + 4 * v468);
                      if ((_DWORD)v1272 == v469)
                      {
LABEL_737:
                        v458 = v359;
                        v459 = "Using a killed virtual register";
                        goto LABEL_740;
                      }
                      v625 = 1;
                      while (1)
                      {
                        v462 = v1259;
                        if (v469 == -1)
                          break;
                        v626 = v468 + v625++;
                        v468 = v626 & v467;
                        v469 = *(_DWORD *)(v466 + 4 * v468);
                        if ((_DWORD)v1272 == v469)
                          goto LABEL_737;
                      }
                    }
                    if (!**(_WORD **)(v462 + 16) || **(_WORD **)(v462 + 16) == 69)
                      goto LABEL_741;
                    v627 = v463 + 1;
                    v628 = v464[1];
                    v629 = *((_DWORD *)v464 + 6);
                    if (v629)
                    {
                      v630 = (v629 - 1) & (37 * v1272);
                      v631 = (_DWORD *)(v628 + 16 * v630);
                      v632 = *v631;
                      if ((_DWORD)v1272 == *v631)
                        goto LABEL_741;
                      v633 = 0;
                      v634 = 1;
                      while (v632 != -1)
                      {
                        if (v633)
                          v635 = 0;
                        else
                          v635 = v632 == -2;
                        if (v635)
                          v633 = v631;
                        v636 = v630 + v634++;
                        v630 = v636 & (v629 - 1);
                        v631 = (_DWORD *)(v628 + 16 * v630);
                        v632 = *v631;
                        v354 = v1272;
                        if ((_DWORD)v1272 == *v631)
                          goto LABEL_741;
                      }
                      if (v633)
                        v637 = v633;
                      else
                        v637 = v631;
                      v354 = v1272;
                    }
                    else
                    {
                      v637 = 0;
                    }
                    v638 = *((_DWORD *)v464 + 4);
                    if (4 * v638 + 4 >= 3 * v629)
                    {
                      v640 = v354;
                      v641 = v464;
                      sub_1C49F41C0(v627, 2 * v629);
                      v642 = v641[1];
                      v643 = v641;
                      v644 = *((_DWORD *)v641 + 6) - 1;
                      v645 = v644 & (37 * v640);
                      v637 = (_DWORD *)(v642 + 16 * v645);
                      v646 = *v637;
                      if (v640 == *v637)
                        goto LABEL_1055;
                      v647 = 0;
                      v648 = 1;
                      while (v646 != -1)
                      {
                        if (v647)
                          v649 = 0;
                        else
                          v649 = v646 == -2;
                        if (v649)
                          v647 = v637;
                        v650 = v645 + v648++;
                        v645 = v650 & v644;
                        v637 = (_DWORD *)(v642 + 16 * (v650 & v644));
                        v646 = *v637;
                        if ((_DWORD)v1272 == *v637)
                          goto LABEL_1055;
                      }
                    }
                    else
                    {
                      if (v629 + ~v638 - *((_DWORD *)v464 + 5) > v629 >> 3)
                        goto LABEL_1036;
                      v651 = v354;
                      v652 = v464;
                      sub_1C49F41C0(v627, v629);
                      v653 = v652[1];
                      v643 = v652;
                      v654 = *((_DWORD *)v652 + 6) - 1;
                      v655 = v654 & (37 * v651);
                      v637 = (_DWORD *)(v653 + 16 * v655);
                      v656 = *v637;
                      if (v651 == *v637)
                      {
LABEL_1055:
                        v354 = v1272;
                        v639 = v1272;
                        v464 = v643;
                        goto LABEL_1037;
                      }
                      v647 = 0;
                      v658 = 1;
                      while (v656 != -1)
                      {
                        if (v647)
                          v659 = 0;
                        else
                          v659 = v656 == -2;
                        if (v659)
                          v647 = v637;
                        v660 = v655 + v658++;
                        v655 = v660 & v654;
                        v637 = (_DWORD *)(v653 + 16 * (v660 & v654));
                        v656 = *v637;
                        if ((_DWORD)v1272 == *v637)
                          goto LABEL_1055;
                      }
                    }
                    if (v647)
                      v637 = v647;
                    v354 = v1272;
                    v464 = v643;
LABEL_1036:
                    v639 = *v637;
LABEL_1037:
                    ++*((_DWORD *)v464 + 4);
                    if (v639 != -1)
                      --*((_DWORD *)v464 + 5);
                    *v637 = v354;
                    *((_QWORD *)v637 + 1) = v1259;
                    goto LABEL_741;
                  }
                  v429 = (v428 - 1) & (37 * v354);
                  v430 = *(_DWORD *)(v427 + 4 * v429);
                  if ((_DWORD)v354 != v430)
                  {
                    v431 = 1;
                    while (v430 != -1)
                    {
                      v432 = v429 + v431++;
                      v429 = v432 & (v428 - 1);
                      v430 = *(_DWORD *)(v427 + 4 * v429);
                      if ((_DWORD)v354 == v430)
                        goto LABEL_741;
                    }
                    goto LABEL_703;
                  }
LABEL_741:
                  v355 = v1267;
                  v470 = v1259;
                  if ((*v287 & 0x1000000) != 0)
                  {
                    if ((~*v287 & 0x5000000) != 0)
                      v471 = v1242;
                    else
                      v471 = v1243;
                    sub_1C51D0000((unsigned int *)a1, v471, v354);
                    v354 = v1272;
                    if ((v1272 & 0x80000000) != 0)
                    {
                      v472 = *(_QWORD **)(a1 + 48);
                      if ((**(_QWORD **)(*v472 + 360) & 1) != 0)
                      {
                        v473 = *(_QWORD *)(v472[3] + 16 * (v1272 & 0x7FFFFFFF) + 8);
                        if ((*(_BYTE *)(v473 + 3) & 1) == 0)
                        {
                          v473 = *(_QWORD *)(v473 + 24);
                          if ((*(_BYTE *)(v473 + 3) & 1) == 0)
                            v473 = 0;
                        }
                        v474 = *(_QWORD *)(v473 + 24);
                        if (v474 && (*(_BYTE *)(v474 + 3) & 1) != 0)
                        {
                          sub_1C51CFD64(a1, "Multiple virtual register defs in SSA form", (unint64_t *)v287, v285, 0);
                          v354 = v1272;
                        }
                      }
                    }
                    v475 = *(_QWORD *)(a1 + 600);
                    v355 = v1267;
                    if (v475)
                    {
                      v476 = *(_QWORD *)(v475 + 288);
                      v477 = *(unsigned int *)(v476 + 384);
                      if ((_DWORD)v477)
                      {
                        v478 = *(_QWORD *)(v476 + 368);
                        v479 = v477 - 1;
                        v480 = (v477 - 1) & ((v1259 >> 4) ^ (v1259 >> 9));
                        v481 = *(_QWORD *)(v478 + 16 * v480);
                        if (v1259 == v481)
                        {
LABEL_759:
                          v484 = *(_WORD *)(v1259 + 44);
                          v485 = v1259;
                          if ((v484 & 4) != 0)
                          {
                            do
                              v485 = *(_QWORD *)v485 & 0xFFFFFFFFFFFFFFF8;
                            while ((*(_WORD *)(v485 + 44) & 4) != 0);
                          }
                          if ((v484 & 8) != 0)
                          {
                            do
                              v470 = *(_QWORD *)(v470 + 8);
                            while ((*(_WORD *)(v470 + 44) & 8) != 0);
                          }
                          v486 = *(_QWORD *)(v470 + 8);
                          if (v485 != v486)
                          {
                            while (1)
                            {
                              v487 = **(unsigned __int16 **)(v485 + 16);
                              v394 = v487 > 0x17;
                              v488 = (1 << v487) & 0x83E000;
                              if (v394 || v488 == 0)
                                break;
                              v485 = *(_QWORD *)(v485 + 8);
                              if (v485 == v486)
                              {
                                v485 = *(_QWORD *)(v470 + 8);
                                break;
                              }
                            }
                          }
                          LODWORD(v490) = ((v485 >> 4) ^ (v485 >> 9)) & v479;
                          v491 = (uint64_t *)(v478 + 16 * v490);
                          v492 = *v491;
                          if (v485 != *v491)
                          {
                            v493 = 1;
                            while (v492 != -4096)
                            {
                              v494 = v490 + v493++;
                              v490 = v494 & v479;
                              v492 = *(_QWORD *)(v478 + 16 * v490);
                              if (v485 == v492)
                              {
                                v491 = (uint64_t *)(v478 + 16 * v490);
                                goto LABEL_774;
                              }
                            }
                            v491 = (uint64_t *)(v478 + 16 * v477);
                          }
LABEL_774:
                          v495 = 2;
                          if ((*((_BYTE *)v287 + 3) & 0x40) == 0)
                            v495 = 4;
                          if ((v354 & 0x80000000) != 0)
                          {
                            v496 = (llvm *)(v495 | v491[1] & 0xFFFFFFFFFFFFFFF8);
                            sub_1C51D0448(a1, (unint64_t *)v287, v285, v496, v1249, v1272, 0, 0);
                            v355 = v1267;
                            v354 = v1272;
                            v497 = (llvm *)*((_QWORD *)v1249 + 13);
                            if (v497)
                            {
                              if ((_DWORD)v1248)
                                v498 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 232) + 8 * v1248);
                              else
                                v498 = (uint64_t *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24)
                                                              + 16 * (v1272 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                 + 24);
                              v499 = *v498;
                              do
                              {
                                v500 = (llvm *)*((_QWORD *)v497 + 14);
                                if (((unint64_t)v500 & v499) != 0)
                                {
                                  sub_1C51D0448(a1, (unint64_t *)v287, v285, v496, v497, v1272, 1, v500);
                                  v355 = v1267;
                                  v354 = v1272;
                                }
                                v497 = (llvm *)*((_QWORD *)v497 + 13);
                              }
                              while (v497);
                            }
                          }
                        }
                        else
                        {
                          v482 = 1;
                          while (v481 != -4096)
                          {
                            v483 = v480 + v482++;
                            v480 = v483 & v479;
                            v481 = *(_QWORD *)(v478 + 16 * v480);
                            if (v1259 == v481)
                              goto LABEL_759;
                          }
                        }
                      }
                    }
                  }
LABEL_785:
                  v501 = *v287;
                  if ((*v287 & 0x110FFF00) == 0x11000000 && (*v355 & 0x80000000) != 0)
                  {
                    sub_1C51CFD64(a1, "Undef virtual register def operands require a subregister", (unint64_t *)v287, v285, 0);
                    v354 = v1272;
                    v501 = *v287;
                  }
                  if ((v501 & 0xF00000) != 0)
                  {
                    TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v289, v285);
                    v503 = *(_QWORD *)(v289 + 32) + 32 * TiedOperandIdx;
                    v504 = *(_DWORD *)v503;
                    if (*(_DWORD *)v503)
                    {
                      sub_1C51CFD64(a1, "Must be tied to a register", (unint64_t *)v287, v285, 0);
                      v504 = *(_DWORD *)v503;
                    }
                    if ((v504 & 0xF00000) == 0)
                      sub_1C51CFD64(a1, "Missing tie flags on tied operand", (unint64_t *)v287, v285, 0);
                    if (v285 != llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v289, TiedOperandIdx))sub_1C51CFD64(a1, "Inconsistent tie links", (unint64_t *)v287, v285, 0);
                    v354 = v1272;
                    if (v285 < *((unsigned __int8 *)v290 + 4))
                    {
                      if (TiedOperandIdx >= v290[1])
                      {
                        v505 = "Explicit def should be tied to implicit use";
                        if ((*(_BYTE *)(v503 + 3) & 2) != 0)
                          goto LABEL_801;
                      }
                      else
                      {
                        v505 = "Explicit def tied to explicit use without tie constraint";
                        if ((*(_WORD *)(*((_QWORD *)v290 + 5) + 6 * TiedOperandIdx + 4) & 1) != 0)
                          goto LABEL_801;
                      }
                      sub_1C51CFD64(a1, v505, (unint64_t *)v287, v285, 0);
                      v354 = v1272;
                    }
                  }
LABEL_801:
                  v506 = a1;
                  if ((*(_BYTE *)(*((_QWORD *)*v1266 + 45) + 1) & 1) != 0 && (*((_BYTE *)v287 + 3) & 1) == 0)
                  {
                    v507 = *(_DWORD *)(*(_QWORD *)(v289 + 32) + 32 * v285);
                    v508 = v507 & 0x10000FF;
                    v509 = v507 & 0xF00000;
                    if (!v508 && v509 != 0)
                    {
                      v511 = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v289, v285);
                      v354 = v1272;
                      if ((_DWORD)v1272 != *(_DWORD *)(*(_QWORD *)(v289 + 32) + 32 * v511 + 4))
                      {
                        sub_1C51CFD64(a1, "Two-address instruction operands must be identical", (unint64_t *)v287, v285, 0);
                        v354 = v1272;
                      }
                    }
                  }
                  v512 = *v287;
                  v513 = (v512 >> 8) & 0xFFF;
                  if (!(v354 >> 30))
                  {
                    if ((_DWORD)v513)
                    {
                      v315 = a1;
                      v316 = "Illegal subregister index for physical register";
                      goto LABEL_892;
                    }
                    if (v285 < v290[1])
                    {
                      v530 = (*(uint64_t (**)(_QWORD, unsigned __int16 *, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v290, v285, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16));
                      v354 = v1272;
                      if (v530)
                      {
                        v531 = v530;
                        if ((v1272 >> 3) >= *(unsigned __int16 *)(*(_QWORD *)v530 + 22)
                          || ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v530 + 8) + (v1272 >> 3)) >> (v1272 & 7)) & 1) == 0)
                        {
                          v532 = sub_1C51CFD64(a1, "Illegal physical register for instruction", (unint64_t *)v287, v285, 0);
                          v533 = (llvm::raw_ostream *)llvm::errs(v532);
                          v534 = *(_QWORD *)(a1 + 40);
                          v535 = operator new(0x28uLL);
                          *(_QWORD *)v535 = &off_1E814D010;
                          v535[2] = v1272;
                          *((_QWORD *)v535 + 2) = v534;
                          v535[6] = 0;
                          *((_QWORD *)v535 + 4) = 0;
                          *((_QWORD *)&v1307 + 1) = v535;
                          sub_1C52C9630((llvm::raw_ostream *)v535, v533);
                          v536 = *((_QWORD *)v533 + 4);
                          if ((unint64_t)(*((_QWORD *)v533 + 3) - v536) > 9)
                          {
                            *(_WORD *)(v536 + 8) = 8289;
                            *(_QWORD *)v536 = *(_QWORD *)" is not a ";
                            v537 = (_QWORD *)(*((_QWORD *)v533 + 4) + 10);
                            *((_QWORD *)v533 + 4) = v537;
                          }
                          else
                          {
                            llvm::raw_ostream::write(v533, " is not a ", 0xAuLL);
                            v537 = (_QWORD *)*((_QWORD *)v533 + 4);
                          }
                          v538 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
                          if (v538)
                          {
                            v539 = (const char *)(v538 + *(unsigned int *)(*(_QWORD *)v531 + 16));
                            v540 = strlen(v539);
                            v541 = v540;
                            if (v540 <= *((_QWORD *)v533 + 3) - (_QWORD)v537)
                            {
                              if (v540)
                              {
                                memcpy(v537, v539, v540);
                                v537 = (_QWORD *)(*((_QWORD *)v533 + 4) + v541);
                                *((_QWORD *)v533 + 4) = v537;
                              }
                            }
                            else
                            {
                              llvm::raw_ostream::write(v533, v539, v540);
                              v537 = (_QWORD *)*((_QWORD *)v533 + 4);
                            }
                          }
                          if (*((_QWORD *)v533 + 3) - (_QWORD)v537 > 0xAuLL)
                          {
                            *(_DWORD *)((char *)v537 + 7) = 170816101;
                            *v537 = *(_QWORD *)" register.\n";
                            *((_QWORD *)v533 + 4) += 11;
                          }
                          else
                          {
                            llvm::raw_ostream::write(v533, " register.\n", 0xBuLL);
                          }
                          if (*((unint64_t **)&v1307 + 1) == &v1305)
                          {
                            v542 = (void (**)(void))(v1305 + 32);
LABEL_907:
                            (*v542)();
                          }
                          else if (*((_QWORD *)&v1307 + 1))
                          {
                            v542 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
                            goto LABEL_907;
                          }
                          v354 = v1272;
                        }
                      }
                    }
                    if ((*v287 & 0x8000000) != 0)
                    {
                      if (*v288)
                      {
                        v589 = *(_QWORD *)(*(_QWORD *)(*v288 + 16) + 8);
                        if ((*v287 & 0x1000000) != 0)
                        {
                          if ((v589 & 0x100000000) != 0)
                            goto LABEL_1116;
                        }
                        else if ((v589 & 0x80000000) != 0)
                        {
                          goto LABEL_1116;
                        }
                      }
                      if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 352) + ((v354 >> 3) & 0x1FFFFFF8)) >> v354) & 1) == 0)
                        goto LABEL_1116;
                      v315 = a1;
                      v316 = "isRenamable set on reserved register";
LABEL_892:
                      sub_1C51CFD64(v315, v316, (unint64_t *)v287, v285, 0);
                      goto LABEL_1116;
                    }
                    goto LABEL_1116;
                  }
                  v514 = *(_QWORD *)(a1 + 48);
                  v515 = v354 & 0x7FFFFFFF;
                  v516 = *(_QWORD *)(*(_QWORD *)(v514 + 24) + 16 * v515);
                  if ((v516 & 4) == 0)
                  {
                    v517 = v516 & 0xFFFFFFFFFFFFFFF8;
                    if ((v516 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      if (!(_DWORD)v513)
                        goto LABEL_845;
                      v518 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 40)
                                                                                          + 200))(*(_QWORD *)(a1 + 40), v516 & 0xFFFFFFFFFFFFFFF8, v513);
                      if (v518)
                      {
                        if (v518 != v517)
                        {
                          v519 = sub_1C51CFD64(a1, "Invalid register class for subregister index", (unint64_t *)v287, v285, 0);
                          v520 = (llvm::raw_ostream *)llvm::errs(v519);
                          v521 = v520;
                          v522 = (void *)*((_QWORD *)v520 + 4);
                          if (*((_QWORD *)v520 + 3) - (_QWORD)v522 > 0xEuLL)
                          {
                            qmemcpy(v522, "Register class ", 15);
                            v523 = (void *)(*((_QWORD *)v520 + 4) + 15);
                            *((_QWORD *)v520 + 4) = v523;
                          }
                          else
                          {
                            llvm::raw_ostream::write(v520, "Register class ", 0xFuLL);
                            v523 = (void *)*((_QWORD *)v521 + 4);
                          }
                          v524 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
                          if (v524)
                          {
                            v525 = (const char *)(v524 + *(unsigned int *)(*(_QWORD *)v517 + 16));
                            v526 = strlen(v525);
                            v527 = v526;
                            if (v526 <= *((_QWORD *)v521 + 3) - (_QWORD)v523)
                            {
                              if (v526)
                              {
                                memcpy(v523, v525, v526);
                                v523 = (void *)(*((_QWORD *)v521 + 4) + v527);
                                *((_QWORD *)v521 + 4) = v523;
                              }
                            }
                            else
                            {
                              llvm::raw_ostream::write(v521, v525, v526);
                              v523 = (void *)*((_QWORD *)v521 + 4);
                            }
                          }
                          if (*((_QWORD *)v521 + 3) - (_QWORD)v523 > 0x24uLL)
                          {
                            qmemcpy(v523, " does not fully support subreg index ", 37);
                            *((_QWORD *)v521 + 4) += 37;
                          }
                          else
                          {
                            llvm::raw_ostream::write(v521, " does not fully support subreg index ", 0x25uLL);
                          }
                          v528 = v513;
                          v529 = v521;
                          goto LABEL_901;
                        }
LABEL_845:
                        if (v285 >= v290[1])
                          goto LABEL_1116;
                        v543 = (*(uint64_t (**)(_QWORD, unsigned __int16 *, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v290, v285, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16));
                        if (!v543)
                          goto LABEL_1116;
                        v544 = (_QWORD *)v543;
                        if ((_DWORD)v513)
                        {
                          v545 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 40)
                                                                                             + 256))(*(_QWORD *)(a1 + 40), v517, *(_QWORD *)(a1 + 16));
                          if (!v545)
                          {
                            v315 = a1;
                            v316 = "No largest legal super class exists.";
                            goto LABEL_892;
                          }
                          v544 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 40) + 184))(*(_QWORD *)(a1 + 40), v545, v544, v513);
                          if (!v544)
                          {
                            v315 = a1;
                            v316 = "No matching super-reg register class.";
                            goto LABEL_892;
                          }
                        }
                        if (((*(_DWORD *)(v544[1] + ((*(unsigned __int16 *)(*(_QWORD *)v517 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(*(_QWORD *)v517 + 24)) & 1) != 0)
                          goto LABEL_1116;
                        v546 = sub_1C51CFD64(a1, "Illegal virtual register for instruction", (unint64_t *)v287, v285, 0);
                        v547 = (llvm::raw_ostream *)llvm::errs(v546);
                        v521 = v547;
                        v548 = *((_QWORD *)v547 + 4);
                        if ((unint64_t)(*((_QWORD *)v547 + 3) - v548) > 0xA)
                        {
                          *(_DWORD *)(v548 + 7) = 543236196;
                          *(_QWORD *)v548 = *(_QWORD *)"Expected a ";
                          v549 = (void *)(*((_QWORD *)v547 + 4) + 11);
                          *((_QWORD *)v547 + 4) = v549;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v547, "Expected a ", 0xBuLL);
                          v549 = (void *)*((_QWORD *)v521 + 4);
                        }
                        v550 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
                        if (v550)
                        {
                          v551 = (const char *)(v550 + *(unsigned int *)(*v544 + 16));
                          v552 = strlen(v551);
                          v553 = v552;
                          if (v552 <= *((_QWORD *)v521 + 3) - (_QWORD)v549)
                          {
                            if (v552)
                            {
                              memcpy(v549, v551, v552);
                              v549 = (void *)(*((_QWORD *)v521 + 4) + v553);
                              *((_QWORD *)v521 + 4) = v549;
                            }
                          }
                          else
                          {
                            llvm::raw_ostream::write(v521, v551, v552);
                            v549 = (void *)*((_QWORD *)v521 + 4);
                          }
                        }
                        if (*((_QWORD *)v521 + 3) - (_QWORD)v549 > 0x14uLL)
                        {
                          qmemcpy(v549, " register, but got a ", 21);
                          v554 = (_WORD *)(*((_QWORD *)v521 + 4) + 21);
                          *((_QWORD *)v521 + 4) = v554;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v521, " register, but got a ", 0x15uLL);
                          v554 = (_WORD *)*((_QWORD *)v521 + 4);
                        }
                        v555 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
                        if (v555)
                        {
                          v556 = (const char *)(v555 + *(unsigned int *)(*(_QWORD *)v517 + 16));
                          v557 = strlen(v556);
                          v558 = v557;
                          if (v557 <= *((_QWORD *)v521 + 3) - (_QWORD)v554)
                          {
                            if (v557)
                            {
                              memcpy(v554, v556, v557);
                              v554 = (_WORD *)(*((_QWORD *)v521 + 4) + v558);
                              *((_QWORD *)v521 + 4) = v554;
                            }
                          }
                          else
                          {
                            llvm::raw_ostream::write(v521, v556, v557);
                            v554 = (_WORD *)*((_QWORD *)v521 + 4);
                          }
                        }
                        if (*((_QWORD *)v521 + 3) - (_QWORD)v554 <= 9uLL)
                        {
                          v559 = v521;
                          v560 = " register\n";
                          v561 = 10;
LABEL_903:
                          llvm::raw_ostream::write(v559, v560, v561);
                          goto LABEL_1116;
                        }
                        v554[4] = 2674;
                        *(_QWORD *)v554 = *(_QWORD *)" register\n";
                        v618 = *((_QWORD *)v521 + 4) + 10;
                      }
                      else
                      {
                        v580 = sub_1C51CFD64(a1, "Invalid subregister index for virtual register", (unint64_t *)v287, v285, 0);
                        v581 = (llvm::raw_ostream *)llvm::errs(v580);
                        v521 = v581;
                        v582 = (void *)*((_QWORD *)v581 + 4);
                        if (*((_QWORD *)v581 + 3) - (_QWORD)v582 > 0xEuLL)
                        {
                          qmemcpy(v582, "Register class ", 15);
                          v583 = (void *)(*((_QWORD *)v581 + 4) + 15);
                          *((_QWORD *)v581 + 4) = v583;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v581, "Register class ", 0xFuLL);
                          v583 = (void *)*((_QWORD *)v521 + 4);
                        }
                        v584 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
                        if (v584)
                        {
                          v585 = (const char *)(v584 + *(unsigned int *)(*(_QWORD *)v517 + 16));
                          v586 = strlen(v585);
                          v587 = v586;
                          if (v586 <= *((_QWORD *)v521 + 3) - (_QWORD)v583)
                          {
                            if (v586)
                            {
                              memcpy(v583, v585, v586);
                              v583 = (void *)(*((_QWORD *)v521 + 4) + v587);
                              *((_QWORD *)v521 + 4) = v583;
                            }
                          }
                          else
                          {
                            llvm::raw_ostream::write(v521, v585, v586);
                            v583 = (void *)*((_QWORD *)v521 + 4);
                          }
                        }
                        if (*((_QWORD *)v521 + 3) - (_QWORD)v583 > 0x1EuLL)
                        {
                          qmemcpy(v583, " does not support subreg index ", 31);
                          *((_QWORD *)v521 + 4) += 31;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v521, " does not support subreg index ", 0x1FuLL);
                        }
                        v529 = v521;
                        v528 = v513;
LABEL_901:
                        sub_1C5E21910(v529, v528, 0, 0, 0);
                        v588 = (_BYTE *)*((_QWORD *)v521 + 4);
                        if (*((_BYTE **)v521 + 3) == v588)
                        {
                          v559 = v521;
                          v560 = "\n";
                          v561 = 1;
                          goto LABEL_903;
                        }
                        *v588 = 10;
                        v618 = *((_QWORD *)v521 + 4) + 1;
                      }
                      goto LABEL_960;
                    }
                  }
                  if (*(_BYTE *)(a1 + 62)
                    || (v512 & 0x1000000) != 0
                    || **(unsigned __int16 **)(v289 + 16) - 13 > 1)
                  {
                    if ((v512 & 0x10000000) == 0)
                      goto LABEL_865;
LABEL_864:
                    sub_1C51CFD64(a1, "Generic virtual register use cannot be undef", (unint64_t *)v287, v285, 0);
                    LODWORD(v354) = v1272;
                    goto LABEL_865;
                  }
                  if (sub_1C50E3E8C(v514, v354))
                    goto LABEL_829;
                  LODWORD(v354) = v1272;
                  if ((*v287 & 0x10000000) != 0)
                    goto LABEL_864;
LABEL_865:
                  if (*(_BYTE *)(a1 + 61))
                  {
                    v315 = a1;
                    v316 = "Generic virtual register invalid in a Selected function";
                    goto LABEL_892;
                  }
                  if ((v354 & 0x80000000) == 0 || (v562 = *(_QWORD *)(a1 + 48), v515 >= *(unsigned int *)(v562 + 432)))
                  {
                    v1305 = 0;
LABEL_891:
                    v315 = a1;
                    v316 = "Generic virtual register must have a valid type";
                    goto LABEL_892;
                  }
                  v1305 = *(_QWORD *)(*(_QWORD *)(v562 + 424) + 8 * v515);
                  if ((v1305 & 0xFFFFFFFFFFFFFFF9) == 0)
                    goto LABEL_891;
                  v563 = *(_QWORD *)(*(_QWORD *)(v562 + 24) + 16 * v515);
                  if ((v563 & 4) != 0 && (v564 = v563 & 0xFFFFFFFFFFFFFFF8, (v563 & 0xFFFFFFFFFFFFFFF8) != 0))
                  {
                    v565 = *(unsigned int *)(v564 + 16);
                    v567 = sub_1C4825F50(&v1305);
                    if ((_DWORD)v566 == 1)
                    v394 = v567 > v565;
                    v506 = a1;
                    if (v394)
                    {
                      v568 = sub_1C51CFD64(a1, "Register bank is too small for virtual register", (unint64_t *)v287, v285, 0);
                      v569 = (llvm::raw_ostream *)llvm::errs(v568);
                      v521 = v569;
                      v570 = (void *)*((_QWORD *)v569 + 4);
                      if (*((_QWORD *)v569 + 3) - (_QWORD)v570 > 0xDuLL)
                      {
                        qmemcpy(v570, "Register bank ", 14);
                        v571 = (_QWORD *)(*((_QWORD *)v569 + 4) + 14);
                        *((_QWORD *)v569 + 4) = v571;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v569, "Register bank ", 0xEuLL);
                        v571 = (_QWORD *)*((_QWORD *)v521 + 4);
                      }
                      v572 = *(const void **)(v564 + 8);
                      if (v572)
                      {
                        v573 = strlen(*(const char **)(v564 + 8));
                        v574 = v573;
                        if (v573 <= *((_QWORD *)v521 + 3) - (_QWORD)v571)
                        {
                          if (v573)
                          {
                            memcpy(v571, v572, v573);
                            v571 = (_QWORD *)(*((_QWORD *)v521 + 4) + v574);
                            *((_QWORD *)v521 + 4) = v571;
                          }
                        }
                        else
                        {
                          llvm::raw_ostream::write(v521, (const char *)v572, v573);
                          v571 = (_QWORD *)*((_QWORD *)v521 + 4);
                        }
                      }
                      if (*((_QWORD *)v521 + 3) - (_QWORD)v571 > 0xAuLL)
                      {
                        *(_DWORD *)((char *)v571 + 7) = 678194273;
                        *v571 = *(_QWORD *)" too small(";
                        *((_QWORD *)v521 + 4) += 11;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v521, " too small(", 0xBuLL);
                      }
                      sub_1C5E21910(v521, *(unsigned int *)(v564 + 16), 0, 0, 0);
                      v575 = *((_QWORD *)v521 + 4);
                      if ((unint64_t)(*((_QWORD *)v521 + 3) - v575) > 8)
                      {
                        *(_BYTE *)(v575 + 8) = 32;
                        *(_QWORD *)v575 = *(_QWORD *)") to fit ";
                        *((_QWORD *)v521 + 4) += 9;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v521, ") to fit ", 9uLL);
                      }
                      v576 = sub_1C4825F50(&v1305);
                      if (v577 == 1)
                      {
                        v578 = *((_QWORD *)v521 + 4);
                        if ((unint64_t)(*((_QWORD *)v521 + 3) - v578) > 8)
                        {
                          *(_BYTE *)(v578 + 8) = 32;
                          *(_QWORD *)v578 = *(_QWORD *)"vscale x ";
                          *((_QWORD *)v521 + 4) += 9;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v521, "vscale x ", 9uLL);
                        }
                      }
                      sub_1C5E21910(v521, v576, 0, 0, 0);
                      v579 = *((_QWORD *)v521 + 4);
                      if ((unint64_t)(*((_QWORD *)v521 + 3) - v579) <= 5)
                      {
                        v559 = v521;
                        v560 = "-bits\n";
                        v561 = 6;
                        goto LABEL_903;
                      }
                      *(_WORD *)(v579 + 4) = 2675;
                      *(_DWORD *)v579 = 1953063469;
                      v618 = *((_QWORD *)v521 + 4) + 6;
LABEL_960:
                      *((_QWORD *)v521 + 4) = v618;
                      goto LABEL_1116;
                    }
                  }
                  else if (*(_BYTE *)(a1 + 60))
                  {
                    v315 = a1;
                    v316 = "Generic virtual register must have a bank in a RegBankSelected function";
                    goto LABEL_892;
                  }
LABEL_829:
                  if ((_DWORD)v513)
                  {
                    v315 = v506;
                    v316 = "Generic virtual register does not allow subregister index";
                    goto LABEL_892;
                  }
                  if (*v290 - 45 >= 0xD3
                    && v285 < v290[1]
                    && (*(uint64_t (**)(_QWORD, unsigned __int16 *, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v290, v285, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16)))
                  {
                    v590 = sub_1C51CFD64(a1, "Virtual register does not match instruction constraint", (unint64_t *)v287, v285, 0);
                    v591 = (llvm::raw_ostream *)llvm::errs(v590);
                    v521 = v591;
                    v592 = (void *)*((_QWORD *)v591 + 4);
                    if (*((_QWORD *)v591 + 3) - (_QWORD)v592 > 0x15uLL)
                    {
                      qmemcpy(v592, "Expect register class ", 22);
                      *((_QWORD *)v591 + 4) += 22;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v591, "Expect register class ", 0x16uLL);
                    }
                    v593 = *(_QWORD *)(a1 + 40);
                    v594 = (*(uint64_t (**)(_QWORD, unsigned __int16 *, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v290, v285, v593, *(_QWORD *)(a1 + 16));
                    v595 = *(_QWORD *)(v593 + 80);
                    v596 = (_BYTE *)*((_QWORD *)v521 + 4);
                    if (v595)
                    {
                      v597 = (const char *)(v595 + *(unsigned int *)(*(_QWORD *)v594 + 16));
                      v598 = strlen(v597);
                      v599 = v598;
                      if (v598 <= *((_QWORD *)v521 + 3) - (_QWORD)v596)
                      {
                        if (v598)
                        {
                          memcpy(v596, v597, v598);
                          v596 = (_BYTE *)(*((_QWORD *)v521 + 4) + v599);
                          *((_QWORD *)v521 + 4) = v596;
                        }
                      }
                      else
                      {
                        llvm::raw_ostream::write(v521, v597, v598);
                        v596 = (_BYTE *)*((_QWORD *)v521 + 4);
                      }
                    }
                    if (*((_QWORD *)v521 + 3) - (_QWORD)v596 <= 0x10uLL)
                    {
                      v559 = v521;
                      v560 = " but got nothing\n";
                      v561 = 17;
                      goto LABEL_903;
                    }
                    v596[16] = 10;
                    *(_OWORD *)v596 = *(_OWORD *)" but got nothing\n";
                    v618 = *((_QWORD *)v521 + 4) + 17;
                    goto LABEL_960;
                  }
LABEL_1116:
                  ++v285;
                  m = a1;
                  if (v285 == v1278)
                  {
LABEL_1132:
                    v165 = (*(unsigned __int16 *)(v164 + 44) >> 3) & 1;
                    v54 = v1252;
                    goto LABEL_1133;
                  }
                }
              }
              v1305 = 0;
              v1306 = 0;
              if (((*(uint64_t (**)(_QWORD, unint64_t, unint64_t *))(**(_QWORD **)(m + 32)
                                                                                            + 1008))(*(_QWORD *)(m + 32), v164, &v1305) & 1) == 0)sub_1C51CC4F8(m, (const char *)v1305, v164);
              v253 = *(unsigned __int16 **)(v164 + 16);
              v254 = *v253;
              switch(v254)
              {
                case 9:
                  v263 = *(unsigned int **)(v164 + 32);
                  v264 = ((unint64_t)v263[16] >> 8) & 0xFFF;
                  v265 = *(_QWORD *)(m + 40);
                  if ((_DWORD)v264)
                  {
                    v266 = *(_QWORD *)(v265 + 96);
                    RegSizeInBits = *(unsigned __int16 *)(v266 + 4 * v264 + 2);
                  }
                  else
                  {
                    RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v265, v263[17], *(_QWORD *)(m + 48));
                    v263 = *(unsigned int **)(v164 + 32);
                    v266 = *(_QWORD *)(*(_QWORD *)(m + 40) + 96);
                  }
                  if (RegSizeInBits <= *(unsigned __int16 *)(v266 + 4 * v263[28] + 2))
                    goto LABEL_478;
                  v284 = m;
                  v282 = "INSERT_SUBREG expected inserted value to have equal or lesser size than the subreg it was inserted into";
                  break;
                case 31:
                  v1299 = (uint64_t *)v164;
                  v259 = *((unsigned __int8 *)v253 + 4);
                  if ((v253[4] & 2) == 0 || (v704 = *(_DWORD *)(v164 + 40), v704 == v259))
                  {
                    v260 = *((unsigned __int8 *)v253 + 4);
                  }
                  else
                  {
                    v705 = v704 - 1;
                    v260 = *((unsigned __int8 *)v253 + 4);
                    do
                    {
                      v706 = *(_DWORD *)(*(_QWORD *)(v164 + 32) + 32 * v259);
                      if ((v706 & 0x10000FF) != 0x1000000)
                        break;
                      v260 += (v706 & 0x2000000) == 0;
                      if (v705 == v259)
                        break;
                      ++v259;
                    }
                    while ((v706 & 0x2000000) == 0);
                  }
                  v261 = *((_QWORD *)v253 + 4);
                  if (v261)
                  {
                    v262 = -1;
                    do
                      ++v262;
                    while (*(_WORD *)(v261 + 2 * v262));
                  }
                  else
                  {
                    v262 = 0;
                  }
                  v280 = v262 + v260;
                  LODWORD(v1300) = v280;
                  v281 = *(_QWORD *)(v164 + 32);
                  v282 = "meta operands to STATEPOINT not constant!";
                  if (*(_BYTE *)(v281 + 32 * v280) == 1 && *(_BYTE *)(v281 + 32 * (v280 + 1)) == 1)
                  {
                    v283 = v280 + 2;
                    if (*(_BYTE *)(v281 + 32 * v283) == 1)
                    {
                      v708 = v280 + 4;
                      v709 = v280 + 4 + *(_DWORD *)(v281 + 32 * v283 + 16);
                      v710 = *(_DWORD *)(v164 + 40);
                      v711 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= (int)v709 + 1
                        || (v711 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v281 + 32 * v709) != 1)
                        || *(_QWORD *)(v281 + 32 * v709 + 16) != 2
                        || *(_BYTE *)(v281 + 32 * (v709 + 1)) != 1)
                      {
                        sub_1C51CC4F8(m, v711, v164);
                        v281 = *(_QWORD *)(v164 + 32);
                        v710 = *(_DWORD *)(v164 + 40);
                        LODWORD(v709) = v708 + *(_DWORD *)(v281 + 32 * v283 + 16);
                      }
                      v712 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= (int)v709 + 3
                        || (v712 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v281 + 32 * (v709 + 2)) != 1)
                        || *(_QWORD *)(v281 + 32 * (v709 + 2) + 16) != 2
                        || *(_BYTE *)(v281 + 32 * (v709 + 3)) != 1)
                      {
                        sub_1C51CC4F8(m, v712, v164);
                        v281 = *(_QWORD *)(v164 + 32);
                        v710 = *(_DWORD *)(v164 + 40);
                        LODWORD(v709) = v708 + *(_DWORD *)(v281 + 32 * v283 + 16);
                      }
                      v713 = v709 + 5;
                      v714 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= (int)v709 + 5
                        || (v715 = (v709 + 4),
                            v714 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v281 + 32 * v715) != 1)
                        || *(_QWORD *)(v281 + 32 * v715 + 16) != 2
                        || *(_BYTE *)(v281 + 32 * v713) != 1)
                      {
                        sub_1C51CC4F8(m, v714, v164);
                        v710 = *(_DWORD *)(v164 + 40);
                      }
                      NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v1299);
                      v717 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= NumGCPtrIdx
                        || (v718 = *(_QWORD *)(v164 + 32),
                            v717 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v718 + 32 * (NumGCPtrIdx - 1)) != 1)
                        || *(_QWORD *)(v718 + 32 * (NumGCPtrIdx - 1) + 16) != 2
                        || *(_BYTE *)(v718 + 32 * NumGCPtrIdx) != 1)
                      {
                        sub_1C51CC4F8(m, v717, v164);
                        v710 = *(_DWORD *)(v164 + 40);
                      }
                      NumAllocaIdx = llvm::StatepointOpers::getNumAllocaIdx((llvm::StatepointOpers *)&v1299);
                      v720 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= NumAllocaIdx
                        || (v721 = *(_QWORD *)(v164 + 32),
                            v720 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v721 + 32 * (NumAllocaIdx - 1)) != 1)
                        || *(_QWORD *)(v721 + 32 * (NumAllocaIdx - 1) + 16) != 2
                        || *(_BYTE *)(v721 + 32 * NumAllocaIdx) != 1)
                      {
                        sub_1C51CC4F8(m, v720, v164);
                        v710 = *(_DWORD *)(v164 + 40);
                      }
                      NumGcMapEntriesIdx = llvm::StatepointOpers::getNumGcMapEntriesIdx((llvm::StatepointOpers *)&v1299);
                      v723 = "stack map constant to STATEPOINT is out of range!";
                      if (v710 <= NumGcMapEntriesIdx
                        || (v724 = *(_QWORD *)(v164 + 32),
                            v723 = "stack map constant to STATEPOINT not well formed!",
                            *(_BYTE *)(v724 + 32 * (NumGcMapEntriesIdx - 1)) != 1)
                        || *(_QWORD *)(v724 + 32 * (NumGcMapEntriesIdx - 1) + 16) != 2
                        || *(_BYTE *)(v724 + 32 * NumGcMapEntriesIdx) != 1)
                      {
                        sub_1C51CC4F8(a1, v723, v164);
                        v724 = *(_QWORD *)(v164 + 32);
                      }
                      v725 = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v1299);
                      if (*(_DWORD *)(v724 + 32 * v725 + 16))
                        v726 = v725 + 1;
                      else
                        v726 = -1;
                      v727 = 0;
                      v728 = llvm::StatepointOpers::getNumAllocaIdx((llvm::StatepointOpers *)&v1299) - 2;
                      m = a1;
                      while (1)
                      {
                        v729 = *(_QWORD *)(v164 + 16);
                        v730 = *(unsigned __int8 *)(v729 + 4);
                        if ((*(_BYTE *)(v729 + 8) & 2) == 0 || (v739 = *(_DWORD *)(v164 + 40), v739 == v730))
                        {
                          v731 = *(unsigned __int8 *)(v729 + 4);
                        }
                        else
                        {
                          v740 = v739 - 1;
                          v731 = *(unsigned __int8 *)(v729 + 4);
                          do
                          {
                            v741 = *(_DWORD *)(*(_QWORD *)(v164 + 32) + 32 * v730);
                            if ((v741 & 0x10000FF) != 0x1000000)
                              break;
                            v731 += (v741 & 0x2000000) == 0;
                            if (v740 == v730)
                              break;
                            ++v730;
                          }
                          while ((v741 & 0x2000000) == 0);
                        }
                        v732 = *(_QWORD *)(v729 + 32);
                        if (v732)
                        {
                          v733 = -1;
                          do
                            ++v733;
                          while (*(_WORD *)(v732 + 2 * v733));
                        }
                        else
                        {
                          v733 = 0;
                        }
                        if (v727 >= v733 + v731)
                          goto LABEL_478;
                        v734 = *(_DWORD *)(*(_QWORD *)(v164 + 32) + 32 * v727);
                        v735 = v734 & 0x10000FF;
                        v736 = v734 & 0xF00000;
                        if (v735 != 0x1000000 || v736 == 0)
                        {
                          v282 = "STATEPOINT defs expected to be tied";
                          goto LABEL_473;
                        }
                        v738 = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v164, v727);
                        if (v738 < v726)
                          break;
                        ++v727;
                        v282 = "STATEPOINT def tied to non-gc operand";
                        if (v738 > v728)
                          goto LABEL_473;
                      }
                      v282 = "STATEPOINT def tied to non-gc operand";
                    }
                  }
LABEL_473:
                  v284 = m;
                  break;
                case 19:
                  v255 = *(_DWORD **)(v164 + 32);
                  v256 = v255[1];
                  v257 = *(_QWORD *)(m + 48);
                  if ((v256 & 0x80000000) != 0 && (v256 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v257 + 432))
                    v258 = *(_QWORD *)(*(_QWORD *)(v257 + 424) + 8 * (v256 & 0x7FFFFFFF));
                  else
                    v258 = 0;
                  v268 = v255[9];
                  v1299 = (uint64_t *)v258;
                  if ((v268 & 0x80000000) != 0 && (v268 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v257 + 432))
                  {
                    v269 = *(_QWORD *)(*(_QWORD *)(v257 + 424) + 8 * (v268 & 0x7FFFFFFF));
                    v1288 = v269;
                    if ((v269 & 0xFFFFFFFFFFFFFFF9) != 0)
                    {
                      if ((v258 & 0xFFFFFFFFFFFFFFF9) != 0)
                      {
                        if (v269 == v258)
                          goto LABEL_478;
                        sub_1C51CC4F8(m, "Copy Instruction is illegal with mismatching types", v164);
                        v271 = (llvm::raw_ostream *)llvm::errs(v270);
                        v272 = v271;
                        v273 = *((_QWORD *)v271 + 4);
                        if ((unint64_t)(*((_QWORD *)v271 + 3) - v273) > 5)
                        {
                          *(_WORD *)(v273 + 4) = 8253;
                          *(_DWORD *)v273 = 543581508;
                          *((_QWORD *)v271 + 4) += 6;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v271, "Def = ", 6uLL);
                        }
                        llvm::LLT::print((llvm::raw_ostream *)&v1299, v272);
                        v274 = (_QWORD *)*((_QWORD *)v272 + 4);
                        if (*((_QWORD *)v272 + 3) - (_QWORD)v274 > 7uLL)
                        {
                          *v274 = 0x203D20637253202CLL;
                          *((_QWORD *)v272 + 4) += 8;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v272, ", Src = ", 8uLL);
                        }
                        llvm::LLT::print((llvm::raw_ostream *)&v1288, v272);
LABEL_1149:
                        v703 = (_BYTE *)*((_QWORD *)v272 + 4);
                        if (*((_BYTE **)v272 + 3) == v703)
                        {
                          llvm::raw_ostream::write(v272, "\n", 1uLL);
                        }
                        else
                        {
                          *v703 = 10;
                          ++*((_QWORD *)v272 + 4);
                        }
                        goto LABEL_478;
                      }
                      v275 = *(_QWORD *)(m + 40);
                      goto LABEL_460;
                    }
                  }
                  else
                  {
                    v1288 = 0;
                  }
                  if ((v258 & 0xFFFFFFFFFFFFFFF9) == 0)
                    goto LABEL_478;
                  v275 = *(_QWORD *)(m + 40);
                  if (v268 - 0x40000000 >= 0xC0000001)
                  {
                    MinimalPhysRegClassLLT = llvm::TargetRegisterInfo::getMinimalPhysRegClassLLT(v275, v268, v258);
                    v275 = *(_QWORD *)(m + 40);
                    if (MinimalPhysRegClassLLT)
                    {
                      v276 = *(_DWORD *)(*(_QWORD *)(v275 + 264)
                                       + 24
                                       * (*(unsigned __int16 *)(*(_QWORD *)MinimalPhysRegClassLLT + 24)
                                        + *(_DWORD *)(v275 + 272)
                                        * ((*(_QWORD *)(v275 + 248) - *(_QWORD *)(v275 + 240)) >> 3)));
                      if (v276)
                      {
LABEL_461:
                        if (v256 - 1 >= 0x3FFFFFFF)
                        {
                          v277 = *(_QWORD *)(m + 40);
                        }
                        else
                        {
                          v277 = *(_QWORD *)(m + 40);
                          if ((v1288 & 0xFFFFFFFFFFFFFFF9) != 0)
                          {
                            v278 = llvm::TargetRegisterInfo::getMinimalPhysRegClassLLT(v277, v256, v1288);
                            v277 = *(_QWORD *)(m + 40);
                            if (v278)
                            {
                              v279 = *(_DWORD *)(*(_QWORD *)(v277 + 264)
                                               + 24
                                               * (*(unsigned __int16 *)(*(_QWORD *)v278 + 24)
                                                + *(_DWORD *)(v277 + 272)
                                                * ((*(_QWORD *)(v277 + 248) - *(_QWORD *)(v277 + 240)) >> 3)));
                              if (v279)
                                goto LABEL_1139;
                            }
                          }
                        }
                        v279 = llvm::TargetRegisterInfo::getRegSizeInBits(v277, v256, *(_QWORD *)(m + 48));
LABEL_1139:
                        if (!v276 || !v279 || v276 == v279 || (*v255 & 0xFFF00) != 0 || (v255[8] & 0xFFF00) != 0)
                          goto LABEL_478;
                        sub_1C51CC4F8(m, "Copy Instruction is illegal with mismatching sizes", v164);
                        v700 = (llvm::raw_ostream *)llvm::errs(v699);
                        v272 = v700;
                        v701 = *((_QWORD *)v700 + 4);
                        if ((unint64_t)(*((_QWORD *)v700 + 3) - v701) > 0xA)
                        {
                          *(_DWORD *)(v701 + 7) = 540876901;
                          *(_QWORD *)v701 = *(_QWORD *)"Def Size = ";
                          *((_QWORD *)v700 + 4) += 11;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v700, "Def Size = ", 0xBuLL);
                        }
                        sub_1C5E21910(v272, v279, 0, 0, 0);
                        v702 = (void *)*((_QWORD *)v272 + 4);
                        if (*((_QWORD *)v272 + 3) - (_QWORD)v702 > 0xCuLL)
                        {
                          qmemcpy(v702, ", Src Size = ", 13);
                          *((_QWORD *)v272 + 4) += 13;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v272, ", Src Size = ", 0xDuLL);
                        }
                        sub_1C5E21910(v272, v276, 0, 0, 0);
                        goto LABEL_1149;
                      }
                    }
                  }
LABEL_460:
                  v276 = llvm::TargetRegisterInfo::getRegSizeInBits(v275, v268, *(_QWORD *)(m + 48));
                  goto LABEL_461;
                default:
                  goto LABEL_478;
              }
              sub_1C51CC4F8(v284, v282, v164);
              goto LABEL_478;
            }
            if (v1262)
              sub_1C51CC728((int32x2_t *)m, *(_QWORD *)(v1262 + 24));
            v169 = *(_QWORD *)(m + 616);
            if (v169)
            {
              v170 = *(unsigned int *)(v169 + 384);
              if ((_DWORD)v170)
              {
                v171 = *(_QWORD *)(v169 + 368);
                v172 = v170 - 1;
                v173 = (v170 - 1) & ((v164 >> 4) ^ (v164 >> 9));
                v174 = *(_QWORD *)(v171 + 16 * v173);
                if (v164 == v174)
                {
LABEL_262:
                  v177 = *(_WORD *)(v164 + 44);
                  v178 = v164;
                  if ((v177 & 4) != 0)
                  {
                    do
                      v178 = *(_QWORD *)v178 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v178 + 44) & 4) != 0);
                  }
                  v179 = v164;
                  if ((v177 & 8) != 0)
                  {
                    do
                      v179 = *(_QWORD *)(v179 + 8);
                    while ((*(_WORD *)(v179 + 44) & 8) != 0);
                  }
                  v180 = *(_QWORD *)(v179 + 8);
                  if (v178 != v180)
                  {
                    do
                    {
                      v181 = **(unsigned __int16 **)(v178 + 16);
                      v394 = v181 > 0x17;
                      v182 = (1 << v181) & 0x83E000;
                      if (v394 || v182 == 0)
                        goto LABEL_271;
                      v178 = *(_QWORD *)(v178 + 8);
                    }
                    while (v178 != v180);
                    v178 = v180;
                  }
LABEL_271:
                  LODWORD(v184) = ((v178 >> 4) ^ (v178 >> 9)) & v172;
                  v185 = (uint64_t *)(v171 + 16 * v184);
                  v186 = *v185;
                  if (v178 == *v185)
                    goto LABEL_282;
                  v187 = 1;
                  while (v186 != -4096)
                  {
                    v188 = v184 + v187++;
                    v184 = v188 & v172;
                    v186 = *(_QWORD *)(v171 + 16 * v184);
                    if (v178 == v186)
                    {
                      v185 = (uint64_t *)(v171 + 16 * v184);
                      goto LABEL_282;
                    }
                  }
                  v185 = (uint64_t *)(v171 + 16 * v170);
LABEL_282:
                  v193 = v185[1];
                  v194 = a1;
                  if (((v193 >> 1) & 3 | *(_DWORD *)((v193 & 0xFFFFFFFFFFFFFFF8) + 24)) <= ((*(_QWORD *)(a1 + 560) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(a1 + 560) & 0xFFFFFFFFFFFFFFF8) + 24)))
                  {
                    sub_1C51CC4F8(a1, "Instruction index out of order", v164);
                    v227 = (llvm::raw_ostream *)llvm::errs(v226);
                    v228 = v227;
                    v229 = (void *)*((_QWORD *)v227 + 4);
                    if (*((_QWORD *)v227 + 3) - (_QWORD)v229 > 0x17uLL)
                    {
                      qmemcpy(v229, "Last instruction was at ", 24);
                      *((_QWORD *)v227 + 4) += 24;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v227, "Last instruction was at ", 0x18uLL);
                    }
                    v1305 = *(_QWORD *)(a1 + 560);
                    llvm::SlotIndex::print((llvm::SlotIndex *)&v1305, v228);
                    v230 = (_BYTE *)*((_QWORD *)v228 + 4);
                    if ((unint64_t)v230 >= *((_QWORD *)v228 + 3))
                    {
                      llvm::raw_ostream::write(v228, 10);
                    }
                    else
                    {
                      *((_QWORD *)v228 + 4) = v230 + 1;
                      *v230 = 10;
                    }
                    v194 = a1;
                  }
                  *(_QWORD *)(v194 + 560) = v193;
                  m = v194;
                }
                else
                {
                  v175 = 1;
                  while (v174 != -4096)
                  {
                    v176 = v173 + v175++;
                    v173 = v176 & v172;
                    v174 = *(_QWORD *)(v171 + 16 * v173);
                    if (v164 == v174)
                      goto LABEL_262;
                  }
                }
              }
            }
            v195 = *(_QWORD *)(*(_QWORD *)(v164 + 16) + 8);
            if ((*(_WORD *)(v164 + 44) & 0xC) != 0 && (*(_WORD *)(v164 + 44) & 4) == 0)
            {
              v204 = v164;
              if ((v195 & 0x200) == 0)
              {
                while ((*(_WORD *)(v204 + 44) & 8) != 0)
                {
                  v204 = *(_QWORD *)(v204 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v204 + 16) + 9) & 2) != 0)
                    goto LABEL_312;
                }
                goto LABEL_289;
              }
            }
            else if ((v195 & 0x200) == 0)
            {
LABEL_289:
              v168 = v164;
              if (!*(_QWORD *)(m + 72))
                goto LABEL_290;
              sub_1C51CC4F8(m, "Non-terminator instruction after the first terminator", v164);
              v223 = (llvm::raw_ostream *)llvm::errs(v222);
              v224 = v223;
              v225 = (void *)*((_QWORD *)v223 + 4);
              if (*((_QWORD *)v223 + 3) - (_QWORD)v225 > 0x15uLL)
              {
                qmemcpy(v225, "First terminator was:\t", 22);
                *((_QWORD *)v223 + 4) += 22;
              }
              else
              {
                llvm::raw_ostream::write(v223, "First terminator was:\t", 0x16uLL);
              }
              llvm::MachineInstr::print(*(llvm::MachineInstr **)(m + 72), v224, 1, 0, 0, 1, 0);
LABEL_368:
              v168 = v164;
              goto LABEL_290;
            }
LABEL_312:
            v168 = v164;
            if (*(_QWORD *)(m + 72))
              goto LABEL_290;
            *(_QWORD *)(m + 72) = v164;
            goto LABEL_368;
          }
        }
        else
        {
          v167 = "BundledPred flag is set, but BundledSucc not set on predecessor";
          if ((v166 & 4) == 0)
            goto LABEL_253;
        }
        sub_1C51CC4F8(m, v167, v164);
        v166 = *(_WORD *)(v164 + 44);
        goto LABEL_253;
      }
LABEL_1232:
      v1299 = (uint64_t *)v54;
      v743 = (void **)(sub_1C51CCEAC(v1240, (uint64_t *)&v1299) + 7);
      v24 = (const llvm::Value *)v1239;
      if (v1239 != v743)
        sub_1C4979128((uint64_t)v743, (uint64_t)v1239);
      v744 = *(_DWORD *)(m + 256);
      v19 = v1251;
      if (v744 || *(_DWORD *)(m + 260))
      {
        v749 = *(unsigned int *)(m + 264);
        if (v749 <= 4 * v744 || v749 < 0x41)
        {
          if ((_DWORD)v749)
            memset(*v1239, 255, 4 * v749);
          *(_QWORD *)(m + 256) = 0;
        }
        else
        {
          sub_1C4A068AC(v1239);
        }
      }
      v745 = *(_QWORD *)(m + 616);
      if (v745)
      {
        v746 = *(_QWORD *)(*(_QWORD *)(v745 + 392) + 16 * *(unsigned int *)(v54 + 24) + 8);
        if (((v746 >> 1) & 3 | *(_DWORD *)((v746 & 0xFFFFFFFFFFFFFFF8) + 24)) <= ((*(_QWORD *)(m + 560) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(m + 560) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v761 = sub_1C51CC164(m, "Block ends before last instruction index", v54);
          v762 = (llvm::raw_ostream *)llvm::errs(v761);
          v763 = v762;
          v764 = (void *)*((_QWORD *)v762 + 4);
          if (*((_QWORD *)v762 + 3) - (_QWORD)v764 > 0xDuLL)
          {
            qmemcpy(v764, "Block ends at ", 14);
            *((_QWORD *)v762 + 4) += 14;
          }
          else
          {
            llvm::raw_ostream::write(v762, "Block ends at ", 0xEuLL);
          }
          v1305 = v746;
          llvm::SlotIndex::print((llvm::SlotIndex *)&v1305, v763);
          v765 = (void *)*((_QWORD *)v763 + 4);
          if (*((_QWORD *)v763 + 3) - (_QWORD)v765 > 0x18uLL)
          {
            qmemcpy(v765, " last instruction was at ", 25);
            *((_QWORD *)v763 + 4) += 25;
          }
          else
          {
            llvm::raw_ostream::write(v763, " last instruction was at ", 0x19uLL);
          }
          v1305 = *(_QWORD *)(m + 560);
          llvm::SlotIndex::print((llvm::SlotIndex *)&v1305, v763);
          v766 = (_BYTE *)*((_QWORD *)v763 + 4);
          if ((unint64_t)v766 >= *((_QWORD *)v763 + 3))
          {
            llvm::raw_ostream::write(v763, 10);
          }
          else
          {
            *((_QWORD *)v763 + 4) = v766 + 1;
            *v766 = 10;
          }
        }
        *(_QWORD *)(m + 560) = v746;
      }
      v54 = *(_QWORD *)(v54 + 8);
      if (v54 == v1238)
        goto LABEL_1438;
    }
    while (1)
    {
      v89 = *v55;
      v90 = *(_QWORD *)(m + 40);
      if (*(_DWORD *)(v90 + 16) <= v89
        || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v90 + 216) + 16) + v89)
        || ((*(_QWORD *)((char *)*v19 + ((v89 >> 3) & 0x1FF8)) >> v89) & 1) != 0
        || *(_BYTE *)(v54 + 184)
        || *(_QWORD *)(*(_QWORD *)(v54 + 32) + 328) == v54)
      {
        goto LABEL_144;
      }
      v91 = sub_1C51CC164(m, "MBB has allocatable live-in, but isn't entry or landing-pad.", v54);
      v92 = *v55;
      v93 = (llvm::raw_ostream *)llvm::errs(v91);
      v94 = v93;
      v95 = (void *)*((_QWORD *)v93 + 4);
      if (*((_QWORD *)v93 + 3) - (_QWORD)v95 > 0xEuLL)
      {
        qmemcpy(v95, "- p. register: ", 15);
        *((_QWORD *)v93 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v93, "- p. register: ", 0xFuLL);
      }
      v96 = *(_QWORD *)(a1 + 40);
      v97 = operator new(0x28uLL);
      *(_QWORD *)v97 = &off_1E814D010;
      v97[2] = v92;
      *((_QWORD *)v97 + 2) = v96;
      v97[6] = 0;
      *((_QWORD *)v97 + 4) = 0;
      *((_QWORD *)&v1307 + 1) = v97;
      sub_1C52C9630((llvm::raw_ostream *)v97, v94);
      v98 = (_BYTE *)*((_QWORD *)v94 + 4);
      if ((unint64_t)v98 >= *((_QWORD *)v94 + 3))
      {
        llvm::raw_ostream::write(v94, 10);
      }
      else
      {
        *((_QWORD *)v94 + 4) = v98 + 1;
        *v98 = 10;
      }
      m = a1;
      if (*((unint64_t **)&v1307 + 1) == &v1305)
        break;
      if (*((_QWORD *)&v1307 + 1))
      {
        v99 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_143:
        (*v99)();
      }
LABEL_144:
      v55 += 8;
      if (v55 == v56)
        goto LABEL_83;
    }
    v99 = (void (**)(void))(v1305 + 32);
    goto LABEL_143;
  }
LABEL_1438:
  v815 = *v1266;
  if (*((const llvm::MachineFunction **)*v1266 + 40) == (const llvm::MachineFunction *)((char *)*v1266 + 320))
    goto LABEL_1439;
  v1299 = 0;
  v1300 = 0;
  v1301 = 0;
  sub_1C61FF5F4((uint64_t)&v1299, *((_QWORD *)v815 + 41));
  v1101 = v1299;
  v1100 = v1300;
  if (v1300 == v1299)
    goto LABEL_1909;
  v1102 = m + 568;
  v1270 = v1299;
  do
  {
    v1103 = *--v1100;
    v1288 = v1103;
    v1305 = (unint64_t)&v1307;
    v1306 = 0x600000000;
    v1310 = 0;
    v1311 = 0;
    v1312 = 0;
    v1313 = v1315;
    v1314 = 0;
    v1309 = 0;
    v1104 = sub_1C51CCEAC(v1102, &v1288);
    sub_1C51D0DA8(&v1305, (uint64_t)(v1104 + 4));
    sub_1C51D0DA8(&v1305, (uint64_t)(v1104 + 7));
    v1105 = *(uint64_t (****)())(v1103 + 64);
    v1106 = *(uint64_t (****)())(v1103 + 72);
    while (v1105 != v1106)
    {
      v1296 = *v1105;
      v1107 = sub_1C51CCEAC(v1102, (uint64_t *)&v1296);
      if (*(_BYTE *)v1107)
      {
        v1108 = v1107;
        sub_1C51D2328(&v1305, (uint64_t)(v1107 + 7), (uint64_t)&v1313);
        sub_1C51D2328(&v1305, (uint64_t)(v1108 + 10), (uint64_t)&v1313);
      }
      ++v1105;
    }
    sub_1C61FF704((_DWORD *)v1104 + 20, v1314);
    v1109 = v1313;
    if ((_DWORD)v1314)
    {
      v1110 = (_DWORD *)v1313 + v1314;
      m = a1;
      while (1)
      {
        v1111 = *((_DWORD *)v1104 + 24);
        if (!v1111)
          break;
        v1112 = v1104[10];
        v1113 = v1111 - 1;
        v1114 = (37 * *v1109) & v1113;
        v1115 = (_DWORD *)(v1112 + 4 * v1114);
        v1116 = *v1115;
        if (*v1109 != *v1115)
        {
          v1117 = 0;
          v1118 = 1;
          while (v1116 != -1)
          {
            if (v1117)
              v1119 = 0;
            else
              v1119 = v1116 == -2;
            if (v1119)
              v1117 = v1115;
            v1120 = v1114 + v1118++;
            v1114 = v1120 & v1113;
            v1115 = (_DWORD *)(v1112 + 4 * v1114);
            v1116 = *v1115;
            if (*v1109 == *v1115)
              goto LABEL_1900;
          }
          if (v1117)
            v1121 = v1117;
          else
            v1121 = v1115;
          goto LABEL_1899;
        }
LABEL_1900:
        if (++v1109 == v1110)
        {
          v1109 = v1313;
          v1101 = v1270;
          goto LABEL_1903;
        }
      }
      v1121 = 0;
LABEL_1899:
      *sub_1C4978C80((uint64_t)(v1104 + 10), (uint64_t)v1109, v1109, v1121) = *v1109;
      goto LABEL_1900;
    }
    m = a1;
LABEL_1903:
    if (v1109 != (_DWORD *)v1315)
      free(v1109);
    MEMORY[0x1CAA32FB4](v1310, 4);
    if ((__int128 *)v1305 != &v1307)
      free((void *)v1305);
  }
  while (v1100 != v1101);
  v1100 = v1299;
LABEL_1909:
  if (v1100)
  {
    v1300 = v1100;
    operator delete(v1100);
  }
  v815 = *v1266;
LABEL_1439:
  v816 = (uint64_t *)((char *)v815 + 320);
  v817 = (_QWORD *)*((_QWORD *)v815 + 41);
  if (v817 != (_QWORD *)((char *)v815 + 320))
  {
    v1263 = (_QWORD *)((char *)v815 + 320);
    v1273 = (llvm::raw_ostream *)(m + 568);
    while (1)
    {
      v1305 = (unint64_t)v817;
      v1279 = sub_1C51CCEAC((uint64_t)v1273, (uint64_t *)&v1305);
      v1305 = (unint64_t)v1308;
      v1306 = (uint64_t)v1308;
      *(_QWORD *)&v1307 = 8;
      DWORD2(v1307) = 0;
      v818 = v817 + 6;
      v819 = v817[7];
      if ((_QWORD *)v819 != v817 + 6)
        break;
LABEL_1525:
      v817 = (_QWORD *)v817[1];
      if (v817 == v1263)
      {
        v815 = *v1266;
        v816 = (uint64_t *)*((_QWORD *)*v1266 + 41);
        goto LABEL_1527;
      }
    }
    while (1)
    {
      v820 = **(unsigned __int16 **)(v819 + 16);
      if (v820 != 69 && v820 != 0)
      {
LABEL_1523:
        if (v1306 != v1305)
          free((void *)v1306);
        goto LABEL_1525;
      }
      if (v1306 == v1305)
        goto LABEL_1448;
      if (v1307 < 0x21 || 4 * (DWORD1(v1307) - DWORD2(v1307)) >= v1307)
        break;
      free((void *)v1306);
      v861 = 1 << (33 - __clz(DWORD1(v1307) - DWORD2(v1307) - 1));
      v394 = (DWORD1(v1307) - DWORD2(v1307)) > 0x10;
      *(_QWORD *)((char *)&v1307 + 4) = 0;
      if (v394)
        v862 = v861;
      else
        v862 = 32;
      LODWORD(v1307) = v862;
      v863 = malloc_type_malloc(8 * v862, 0x4065EBACuLL);
      if (!v863)
        goto LABEL_2139;
      v1306 = (uint64_t)v863;
      memset(v863, 255, 8 * v1307);
LABEL_1449:
      v822 = *(_QWORD *)(v819 + 32);
      if ((*(_DWORD *)v822 & 0x10000FF) != 0x1000000)
      {
        sub_1C51CFD64(m, "Expected first PHI operand to be a register def", *(unint64_t **)(v819 + 32), 0, 0);
        goto LABEL_1473;
      }
      if ((*(_DWORD *)v822 & 0xE2F00000) != 0)
        sub_1C51CFD64(m, "Unexpected flag on PHI operand", *(unint64_t **)(v819 + 32), 0, 0);
      if ((*(_DWORD *)(v822 + 4) & 0x80000000) == 0)
        sub_1C51CFD64(m, "Expected first PHI operand to be a virtual register", (unint64_t *)v822, 0, 0);
      v823 = *(_DWORD *)(v819 + 40);
      if (v823 != 1)
      {
        v833 = 1;
        while (1)
        {
          v834 = *(_QWORD *)(v819 + 32);
          v835 = v833;
          v836 = v834 + 32 * v833;
          if (*(_DWORD *)v836)
          {
            v837 = m;
            v838 = "Expected PHI operand to be a register";
            goto LABEL_1482;
          }
          if ((*(_DWORD *)v836 & 0xE2F00000) != 0)
            sub_1C51CFD64(m, "Unexpected flag on PHI operand", (unint64_t *)v836, v833, 0);
          v840 = (v835 + 1);
          v839 = *(_QWORD *)(v819 + 32) + 32 * v840;
          if (*(_BYTE *)v839 != 4)
            break;
          v841 = *(uint64_t **)(v839 + 16);
          v842 = (_QWORD *)v841[11];
          v843 = (_QWORD *)v841[12];
          if (v842 != v843)
          {
            while ((_QWORD *)*v842 != v817)
            {
              if (++v842 == v843)
              {
                v842 = (_QWORD *)v841[12];
                break;
              }
            }
          }
          if (v842 == v843)
          {
            v837 = m;
            v838 = "PHI input is not a predecessor block";
            goto LABEL_1502;
          }
          if (!*(_BYTE *)v1279)
            goto LABEL_1503;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1305, *(_QWORD *)(v839 + 16));
          v1299 = v841;
          v844 = sub_1C51CCEAC((uint64_t)v1273, (uint64_t *)&v1299);
          if ((*(_BYTE *)(v836 + 3) & 0x10) != 0 || !*(_BYTE *)v844)
            goto LABEL_1503;
          v845 = *(_DWORD *)(v834 + 32 * v835 + 4);
          v846 = *((_DWORD *)v844 + 18);
          if (!v846)
            goto LABEL_1505;
          v847 = v844[7];
          v848 = v846 - 1;
          v849 = v848 & (37 * v845);
          v850 = *(_DWORD *)(v847 + 4 * v849);
          if (v850 != v845)
          {
            v851 = 1;
            while (v850 != -1)
            {
              v852 = v849 + v851++;
              v849 = v852 & v848;
              v850 = *(_DWORD *)(v847 + 4 * v849);
              if (v850 == v845)
                goto LABEL_1503;
            }
LABEL_1505:
            v853 = *((_DWORD *)v844 + 24);
            if (v853)
            {
              v854 = v844[10];
              v855 = v853 - 1;
              v856 = v855 & (37 * v845);
              v857 = *(_DWORD *)(v854 + 4 * v856);
              if (v857 == v845)
                goto LABEL_1503;
              v858 = 1;
              while (v857 != -1)
              {
                v859 = v856 + v858++;
                v856 = v859 & v855;
                v857 = *(_DWORD *)(v854 + 4 * v856);
                if (v857 == v845)
                  goto LABEL_1503;
              }
            }
            v837 = m;
            v838 = "PHI operand is not live-out from predecessor";
LABEL_1482:
            v839 = v836;
            LODWORD(v840) = v835;
LABEL_1502:
            sub_1C51CFD64(v837, v838, (unint64_t *)v839, v840, 0);
          }
LABEL_1503:
          v833 = v835 + 2;
          if ((_DWORD)v835 + 2 == v823)
            goto LABEL_1455;
        }
        v837 = m;
        v838 = "Expected PHI operand to be a basic block";
        goto LABEL_1502;
      }
LABEL_1455:
      if (*(_BYTE *)v1279)
      {
        v824 = (uint64_t *)v817[8];
        v825 = (uint64_t *)v817[9];
        while (v824 != v825)
        {
          v826 = (uint64_t *)*v824;
          v827 = sub_1C477672C((uint64_t)&v1305, *v824);
          if (v1306 == v1305)
            v828 = (unsigned int *)&v1307 + 1;
          else
            v828 = (unsigned int *)&v1307;
          if (v827 == (_QWORD *)(v1306 + 8 * *v828))
          {
            sub_1C51CC4F8(m, "Missing PHI operand", v819);
            v830 = (llvm::raw_ostream *)llvm::errs(v829);
            v1302 = (void **)&v1299;
            v1299 = (uint64_t *)&off_1E8143F38;
            v1300 = v826;
            sub_1C512E114((uint64_t)&v1299, v830);
            v831 = (void *)*((_QWORD *)v830 + 4);
            if (*((_QWORD *)v830 + 3) - (_QWORD)v831 > 0x27uLL)
            {
              qmemcpy(v831, " is a predecessor according to the CFG.\n", 40);
              *((_QWORD *)v830 + 4) += 40;
            }
            else
            {
              llvm::raw_ostream::write(v830, " is a predecessor according to the CFG.\n", 0x28uLL);
            }
            if (v1302 == (void **)&v1299)
            {
              v832 = (void (**)(void))(v1299 + 4);
            }
            else
            {
              if (!v1302)
                goto LABEL_1469;
              v832 = (void (**)(void))((char *)*v1302 + 40);
            }
            (*v832)();
          }
LABEL_1469:
          ++v824;
        }
      }
      v818 = v817 + 6;
      if (!v819)
      {
LABEL_1476:
        while ((*(_WORD *)(v819 + 44) & 8) != 0)
          v819 = *(_QWORD *)(v819 + 8);
        goto LABEL_1477;
      }
LABEL_1473:
      if ((*(_BYTE *)v819 & 4) == 0)
        goto LABEL_1476;
LABEL_1477:
      v819 = *(_QWORD *)(v819 + 8);
      if ((_QWORD *)v819 == v818)
        goto LABEL_1523;
    }
    memset((void *)v1306, 255, 8 * v1307);
LABEL_1448:
    *(_QWORD *)((char *)&v1307 + 4) = 0;
    goto LABEL_1449;
  }
LABEL_1527:
  v1305 = (unint64_t)v1308;
  v1306 = (uint64_t)v1308;
  *(_QWORD *)&v1307 = 8;
  DWORD2(v1307) = 0;
  v1268 = (uint64_t *)((char *)v815 + 320);
  if (v816 != (uint64_t *)((char *)v815 + 320))
  {
    v864 = m + 568;
    do
    {
      v1299 = v816;
      v865 = sub_1C51CCEAC(v864, (uint64_t *)&v1299);
      v866 = (void **)v816[8];
      v1264 = v816;
      v1274 = (llvm::raw_ostream *)v816[9];
      if (v866 != (void **)v1274)
      {
        v867 = v865;
        do
        {
          v1280 = *v866;
          v1299 = (uint64_t *)*v866;
          v868 = sub_1C51CCEAC(v864, (uint64_t *)&v1299);
          v869 = v867[1];
          v870 = *((unsigned int *)v867 + 6);
          v871 = (int *)(v869 + 16 * v870);
          if (*((_DWORD *)v867 + 4))
          {
            if (*((_DWORD *)v867 + 6))
            {
              v872 = 16 * v870;
              v873 = (int *)v867[1];
              while (*v873 >= 0xFFFFFFFE)
              {
                v873 += 4;
                v872 -= 16;
                if (!v872)
                  goto LABEL_1536;
              }
            }
            else
            {
              v873 = (int *)v867[1];
            }
          }
          else
          {
LABEL_1536:
            v873 = (int *)(v869 + 16 * v870);
          }
          v874 = (int *)(v869 + 16 * v870);
          if (v873 != v874)
          {
            v875 = 0;
            do
            {
              v877 = *v873;
              v876 = (unsigned int *)(v873 + 4);
              v875 |= sub_1C51D26A4((uint64_t)v868, v877);
              while (v876 != (unsigned int *)v871)
              {
                v878 = *v876;
                v876 += 4;
                if (v878 <= 0xFFFFFFFD)
                {
                  v873 = (int *)(v876 - 4);
                  goto LABEL_1545;
                }
              }
              v873 = v871;
LABEL_1545:
              ;
            }
            while (v873 != v874);
            if ((v875 & 1) != 0)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1305, (uint64_t)v1280);
          }
          ++v866;
        }
        while (v866 != (void **)v1274);
      }
      v879 = v1264[7];
      m = a1;
      if ((uint64_t *)v879 != v1264 + 6)
      {
        v880 = (uint64_t *)v1264[7];
        while (!*(_WORD *)v880[2] || *(_WORD *)v880[2] == 69)
        {
          v880 = (uint64_t *)v880[1];
          if (v880 == v1264 + 6)
          {
            v880 = v1264 + 6;
            break;
          }
        }
        while ((uint64_t *)v879 != v880)
        {
          v881 = *(_DWORD *)(v879 + 40);
          if (v881 != 1)
          {
            v882 = 1;
            do
            {
              v883 = *(_QWORD *)(v879 + 32);
              v884 = v882;
              v885 = *(_DWORD *)(v883 + 32 * v882);
              v886 = v885 & 0x300000FF;
              v887 = v885 & 0x10FFF00;
              if (v886)
                v888 = 1;
              else
                v888 = v887 == 0x1000000;
              if (!v888)
              {
                v889 = *(_DWORD *)(v883 + 32 * v884 + 4);
                v890 = *(uint64_t **)(v883 + 32 * (v884 + 1) + 16);
                v1299 = v890;
                v891 = sub_1C51CCEAC(v864, (uint64_t *)&v1299);
                if (sub_1C51D26A4((uint64_t)v891, v889))
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1305, (uint64_t)v890);
              }
              v882 = v884 + 2;
            }
            while (v881 != (_DWORD)v884 + 2);
          }
          if ((*(_BYTE *)v879 & 4) != 0)
          {
            m = a1;
          }
          else
          {
            for (m = a1; (*(_WORD *)(v879 + 44) & 8) != 0; v879 = *(_QWORD *)(v879 + 8))
              ;
          }
          v879 = *(_QWORD *)(v879 + 8);
        }
      }
      v816 = (uint64_t *)v1264[1];
    }
    while (v816 != v1268);
    for (LODWORD(v892) = DWORD1(v1307); DWORD1(v1307) != DWORD2(v1307); m = a1)
    {
      v1299 = 0;
      v893 = (uint64_t **)v1306;
      if (v1306 == v1305)
        v892 = v892;
      else
        v892 = v1307;
      if ((_DWORD)v892)
      {
        v894 = 8 * v892;
        v895 = (uint64_t **)(v1306 + 8 * v892);
        while ((unint64_t)*v893 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v893;
          v894 -= 8;
          if (!v894)
          {
            v893 = v895;
            break;
          }
        }
      }
      v1299 = *v893;
      v1281 = v1299;
      v896 = sub_1C477672C((uint64_t)&v1305, (uint64_t)v1299);
      if (v1306 == v1305)
        v897 = (unsigned int *)&v1307 + 1;
      else
        v897 = (unsigned int *)&v1307;
      if (v896 != (_QWORD *)(v1306 + 8 * *v897))
      {
        *v896 = -2;
        ++DWORD2(v1307);
      }
      v898 = sub_1C51CCEAC(v864, (uint64_t *)&v1299);
      v899 = (uint64_t *)v1281[8];
      v900 = (uint64_t *)v1281[9];
      if (v899 != v900)
      {
        v901 = v898;
        do
        {
          v902 = *v899;
          v1288 = v902;
          if ((uint64_t *)v902 != v1281)
          {
            v903 = sub_1C51CCEAC(v864, &v1288);
            v904 = v901[13];
            v905 = *((unsigned int *)v901 + 30);
            v906 = (int *)(v904 + 4 * v905);
            if (*((_DWORD *)v901 + 28))
            {
              if (*((_DWORD *)v901 + 30))
              {
                v907 = 4 * v905;
                v908 = (int *)v901[13];
                while (*v908 >= 0xFFFFFFFE)
                {
                  ++v908;
                  v907 -= 4;
                  if (!v907)
                    goto LABEL_1595;
                }
              }
              else
              {
                v908 = (int *)v901[13];
              }
            }
            else
            {
LABEL_1595:
              v908 = (int *)(v904 + 4 * v905);
            }
            v909 = (int *)(v904 + 4 * v905);
            if (v908 != v909)
            {
              v910 = 0;
              do
              {
                v912 = *v908;
                v911 = (unsigned int *)(v908 + 1);
                v910 |= sub_1C51D26A4((uint64_t)v903, v912);
                while (v911 != (unsigned int *)v906)
                {
                  v913 = *v911++;
                  if (v913 <= 0xFFFFFFFD)
                  {
                    v908 = (int *)(v911 - 1);
                    goto LABEL_1604;
                  }
                }
                v908 = v906;
LABEL_1604:
                ;
              }
              while (v908 != v909);
              if ((v910 & 1) != 0)
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1305, v902);
            }
          }
          ++v899;
        }
        while (v899 != v900);
      }
      LODWORD(v892) = DWORD1(v1307);
    }
  }
  if (v1306 != v1305)
    free((void *)v1306);
  v914 = *v1266;
  v915 = (_QWORD *)*((_QWORD *)*v1266 + 41);
  v1282 = (uint64_t)*v1266 + 320;
  if (v915 != (_QWORD *)v1282)
  {
LABEL_1612:
    v1305 = (unint64_t)v915;
    v916 = sub_1C51CCEAC(m + 568, (uint64_t *)&v1305);
    v917 = v916;
    v918 = v916[13];
    v919 = *((unsigned int *)v916 + 30);
    v920 = (unsigned int *)(v918 + 4 * v919);
    if (*((_DWORD *)v916 + 28))
    {
      if (*((_DWORD *)v916 + 30))
      {
        v921 = 4 * v919;
        v922 = (unsigned int *)v916[13];
        while (*v922 >= 0xFFFFFFFE)
        {
          ++v922;
          v921 -= 4;
          if (!v921)
            goto LABEL_1617;
        }
      }
      else
      {
        v922 = (unsigned int *)v916[13];
      }
    }
    else
    {
LABEL_1617:
      v922 = (unsigned int *)(v918 + 4 * v919);
    }
    v923 = (unsigned int *)(v918 + 4 * v919);
    while (1)
    {
LABEL_1620:
      if (v922 == v923)
      {
        v915 = (_QWORD *)v915[1];
        if (v915 == (_QWORD *)v1282)
        {
          v914 = *v1266;
          break;
        }
        goto LABEL_1612;
      }
      v924 = *((_DWORD *)v917 + 12);
      if (v924)
      {
        v925 = *v922;
        v926 = v917[4];
        v927 = v924 - 1;
        v928 = v927 & (37 * *v922);
        v929 = *(_DWORD *)(v926 + 4 * v928);
        if (*v922 == v929)
        {
LABEL_1623:
          v930 = sub_1C51CC164(m, "Virtual register killed in block, but needed live out.", (unint64_t)v915);
          v931 = (llvm::raw_ostream *)llvm::errs(v930);
          v932 = v931;
          v933 = *((_QWORD *)v931 + 4);
          if ((unint64_t)(*((_QWORD *)v931 + 3) - v933) > 0x10)
          {
            *(_BYTE *)(v933 + 16) = 32;
            *(_OWORD *)v933 = *(_OWORD *)"Virtual register ";
            *((_QWORD *)v931 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v931, "Virtual register ", 0x11uLL);
          }
          v934 = operator new(0x28uLL);
          *(_QWORD *)v934 = &off_1E814D010;
          v934[2] = v925;
          *((_QWORD *)v934 + 2) = 0;
          v934[6] = 0;
          *((_QWORD *)v934 + 4) = 0;
          *((_QWORD *)&v1307 + 1) = v934;
          sub_1C52C9630((llvm::raw_ostream *)v934, v932);
          v935 = (void *)*((_QWORD *)v932 + 4);
          if (*((_QWORD *)v932 + 3) - (_QWORD)v935 > 0x19uLL)
          {
            qmemcpy(v935, " is used after the block.\n", 26);
            *((_QWORD *)v932 + 4) += 26;
          }
          else
          {
            llvm::raw_ostream::write(v932, " is used after the block.\n", 0x1AuLL);
          }
          if (*((unint64_t **)&v1307 + 1) == &v1305)
          {
            v936 = (void (**)(void))(v1305 + 32);
            goto LABEL_1631;
          }
          if (*((_QWORD *)&v1307 + 1))
          {
            v936 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_1631:
            (*v936)();
          }
        }
        else
        {
          v939 = 1;
          while (v929 != -1)
          {
            v940 = v928 + v939++;
            v928 = v940 & v927;
            v929 = *(_DWORD *)(v926 + 4 * v928);
            if (v925 == v929)
              goto LABEL_1623;
          }
        }
      }
      v937 = v922 + 1;
      while (v937 != v920)
      {
        v938 = *v937++;
        if (v938 <= 0xFFFFFFFD)
        {
          v922 = v937 - 1;
          goto LABEL_1620;
        }
      }
      v922 = v920;
    }
  }
  if (*((const llvm::MachineFunction **)v914 + 40) != (const llvm::MachineFunction *)((char *)v914 + 320))
  {
    v1305 = *((_QWORD *)v914 + 41);
    v941 = sub_1C51CCEAC(a1 + 568, (uint64_t *)&v1305);
    v942 = v941[13];
    v943 = *((unsigned int *)v941 + 30);
    v944 = (int *)(v942 + 4 * v943);
    if (*((_DWORD *)v941 + 28))
    {
      if ((_DWORD)v943)
      {
        v945 = 4 * v943;
        v946 = (int *)v941[13];
        while (*v946 >= 0xFFFFFFFE)
        {
          ++v946;
          v945 -= 4;
          if (!v945)
            goto LABEL_1651;
        }
      }
      else
      {
        v946 = (int *)v941[13];
      }
    }
    else
    {
LABEL_1651:
      v946 = (int *)(v942 + 4 * v943);
    }
    v947 = (int *)(v942 + 4 * v943);
    while (v946 != v947)
    {
      v949 = *v946;
      v948 = (unsigned int *)(v946 + 1);
      sub_1C51CCA6C(a1, "Virtual register defs don't dominate all uses.", *(llvm::Value ***)(a1 + 16));
      sub_1C51D0AD0((llvm *)a1, v949);
      while (v948 != (unsigned int *)v944)
      {
        v950 = *v948++;
        if (v950 <= 0xFFFFFFFD)
        {
          v946 = (int *)(v948 - 1);
          goto LABEL_1659;
        }
      }
      v946 = v944;
LABEL_1659:
      ;
    }
  }
  if (*(_QWORD *)v1247)
  {
    v1283 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 32);
    if (v1283)
    {
      v951 = 0;
      while (1)
      {
        v952 = (_QWORD *)(*(_QWORD *)v1247 + 248);
        v953 = v951 & 0x7FFFFFFF;
        if (v953 >= *(_DWORD *)(*(_QWORD *)v1247 + 256))
          sub_1C61E5C60((uint64_t *)(*(_QWORD *)v1247 + 248), v953 + 1, *(_QWORD *)v1247 + 264);
        v954 = (uint64_t)*v1266 + 320;
        v955 = *((_QWORD *)*v1266 + 41);
        if (v955 != v954)
          break;
LABEL_1696:
        if (++v951 == v1283)
          goto LABEL_1697;
      }
      v956 = v951 | 0x80000000;
      v957 = (uint64_t *)(*v952 + 56 * v953);
      v958 = 37 * (v951 | 0x80000000);
      while (1)
      {
        v1305 = v955;
        v959 = sub_1C51CCEAC(a1 + 568, (uint64_t *)&v1305);
        v960 = *((_DWORD *)v959 + 30);
        if (!v960)
          goto LABEL_1668;
        v970 = v959[13];
        v971 = v960 - 1;
        v972 = v971 & v958;
        v973 = *(_DWORD *)(v970 + 4 * (v971 & v958));
        if (v956 != v973)
          break;
LABEL_1674:
        if ((sub_1C617C970(v957, *(_DWORD *)(v955 + 24)) & 1) != 0)
          goto LABEL_1685;
        v974 = sub_1C51CC164(a1, "LiveVariables: Block missing from AliveBlocks", v955);
        v975 = (llvm::raw_ostream *)llvm::errs(v974);
        v963 = v975;
        v976 = *((_QWORD *)v975 + 4);
        if ((unint64_t)(*((_QWORD *)v975 + 3) - v976) > 0x10)
        {
          *(_BYTE *)(v976 + 16) = 32;
          *(_OWORD *)v976 = *(_OWORD *)"Virtual register ";
          *((_QWORD *)v975 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(v975, "Virtual register ", 0x11uLL);
        }
        v977 = operator new(0x28uLL);
        *(_QWORD *)v977 = &off_1E814D010;
        v977[2] = v956;
        *((_QWORD *)v977 + 2) = 0;
        v977[6] = 0;
        *((_QWORD *)v977 + 4) = 0;
        *((_QWORD *)&v1307 + 1) = v977;
        sub_1C52C9630((llvm::raw_ostream *)v977, v963);
        v978 = (void *)*((_QWORD *)v963 + 4);
        if (*((_QWORD *)v963 + 3) - (_QWORD)v978 > 0x20uLL)
        {
          qmemcpy(v978, " must be live through the block.\n", 33);
          v980 = *((_QWORD *)v963 + 4) + 33;
          goto LABEL_1691;
        }
        v967 = v963;
        v968 = " must be live through the block.\n";
        v969 = 33;
LABEL_1679:
        llvm::raw_ostream::write(v967, v968, v969);
LABEL_1680:
        if (*((unint64_t **)&v1307 + 1) == &v1305)
        {
          v979 = (void (**)(void))(v1305 + 32);
          goto LABEL_1684;
        }
        if (*((_QWORD *)&v1307 + 1))
        {
          v979 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_1684:
          (*v979)();
        }
LABEL_1685:
        v955 = *(_QWORD *)(v955 + 8);
        if (v955 == v954)
          goto LABEL_1696;
      }
      v981 = 1;
      while (v973 != -1)
      {
        v982 = v972 + v981++;
        v972 = v982 & v971;
        v973 = *(_DWORD *)(v970 + 4 * v972);
        if (v956 == v973)
          goto LABEL_1674;
      }
LABEL_1668:
      if (!sub_1C617C970(v957, *(_DWORD *)(v955 + 24)))
        goto LABEL_1685;
      v961 = sub_1C51CC164(a1, "LiveVariables: Block should not be in AliveBlocks", v955);
      v962 = (llvm::raw_ostream *)llvm::errs(v961);
      v963 = v962;
      v964 = *((_QWORD *)v962 + 4);
      if ((unint64_t)(*((_QWORD *)v962 + 3) - v964) > 0x10)
      {
        *(_BYTE *)(v964 + 16) = 32;
        *(_OWORD *)v964 = *(_OWORD *)"Virtual register ";
        *((_QWORD *)v962 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v962, "Virtual register ", 0x11uLL);
      }
      v965 = operator new(0x28uLL);
      *(_QWORD *)v965 = &off_1E814D010;
      v965[2] = v956;
      *((_QWORD *)v965 + 2) = 0;
      v965[6] = 0;
      *((_QWORD *)v965 + 4) = 0;
      *((_QWORD *)&v1307 + 1) = v965;
      sub_1C52C9630((llvm::raw_ostream *)v965, v963);
      v966 = (void *)*((_QWORD *)v963 + 4);
      if (*((_QWORD *)v963 + 3) - (_QWORD)v966 > 0x26uLL)
      {
        qmemcpy(v966, " is not needed live through the block.\n", 39);
        v980 = *((_QWORD *)v963 + 4) + 39;
LABEL_1691:
        *((_QWORD *)v963 + 4) = v980;
        goto LABEL_1680;
      }
      v967 = v963;
      v968 = " is not needed live through the block.\n";
      v969 = 39;
      goto LABEL_1679;
    }
  }
LABEL_1697:
  if (*(_QWORD *)(a1 + 600))
  {
    v983 = a1;
    v984 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 32);
    if (v984)
    {
      v985 = 0;
      v1275 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 32);
      do
      {
        v986 = v985 & 0x7FFFFFFF;
        v987 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v983 + 48) + 24) + 16 * v986 + 8);
        if (v987)
        {
          while ((*(_DWORD *)v987 & 0x80000000) != 0)
          {
            v987 = *(_QWORD *)(v987 + 24);
            if (!v987)
              goto LABEL_1757;
          }
          v988 = *(_QWORD *)(v983 + 600);
          if (v986 < *(_DWORD *)(v988 + 416)
            && (v989 = *(_QWORD *)(v988 + 408), (v990 = *(_QWORD *)(v989 + 8 * v986)) != 0))
          {
            v991 = *(_DWORD *)(v990 + 112);
            sub_1C51D27BC(v983, *(_QWORD *)(v989 + 8 * v986), v991, 0);
            v992 = *(_QWORD *)(v990 + 104);
            if (v992)
            {
              v993 = 0;
              v994 = ~*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v983 + 48) + 24) + 16 * (v991 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 24);
              do
              {
                v995 = *(_QWORD *)(v992 + 112);
                if ((v995 & v993) != 0)
                {
                  sub_1C51CCA6C(v983, "Lane masks of sub ranges overlap in live interval", *(llvm::Value ***)(v983 + 16));
                  sub_1C51D02E0((llvm *)v990);
                  v995 = *(_QWORD *)(v992 + 112);
                }
                if ((v995 & v994) != 0)
                {
                  sub_1C51CCA6C(v983, "Subrange lanemask is invalid", *(llvm::Value ***)(v983 + 16));
                  sub_1C51D02E0((llvm *)v990);
                }
                if (!*(_DWORD *)(v992 + 8))
                {
                  sub_1C51CCA6C(v983, "Subrange must not be empty", *(llvm::Value ***)(v983 + 16));
                  sub_1C51D3CD0((llvm *)v983, (llvm *)v992, *(_DWORD *)(v990 + 112), *(llvm **)(v992 + 112));
                }
                v996 = *(_QWORD *)(v992 + 112);
                sub_1C51D27BC(v983, v992, *(_DWORD *)(v990 + 112), v996);
                if (*(_DWORD *)(v990 + 8))
                {
                  v997 = *(_DWORD *)(v992 + 8);
                  if (v997)
                  {
                    v998 = *(uint64_t **)v992;
                    v999 = *(_QWORD *)v992 + 24 * v997;
                    v1000 = *(_QWORD *)v990;
                    while (1)
                    {
                      v1001 = (_QWORD *)sub_1C50E5A80(v990, v1000, *v998);
                      v1002 = *(_QWORD *)v990 + 24 * *(unsigned int *)(v990 + 8);
                      if (v1001 == (_QWORD *)v1002
                        || ((*v1001 >> 1) & 3 | *(_DWORD *)((*v1001 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*v998 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v998 >> 1) & 3))
                      {
                        break;
                      }
                      v1003 = v1001 + 3;
                      while (1)
                      {
                        v1004 = *(v1003 - 2);
                        if (((v1004 >> 1) & 3 | *(_DWORD *)((v1004 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v998[1] >> 1) & 3 | *(_DWORD *)((v998[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
                          break;
                        if (v1003 != (uint64_t *)v1002)
                        {
                          v1005 = *v1003;
                          v1003 += 3;
                          if (v1004 == v1005)
                            continue;
                        }
                        goto LABEL_1728;
                      }
                      v998 += 3;
                      v1000 = (uint64_t)(v1003 - 3);
                      if (v998 == (uint64_t *)v999)
                        goto LABEL_1725;
                    }
LABEL_1728:
                    sub_1C51CCA6C(v983, "A Subrange is not covered by the main range", *(llvm::Value ***)(v983 + 16));
                    sub_1C51D02E0((llvm *)v990);
                  }
                }
                else if (*(_DWORD *)(v992 + 8))
                {
                  goto LABEL_1728;
                }
LABEL_1725:
                v993 |= v996;
                v992 = *(_QWORD *)(v992 + 104);
              }
              while (v992);
            }
            v1305 = *(_QWORD *)(v983 + 600);
            v1306 = (uint64_t)&v1307 + 8;
            *(_QWORD *)&v1307 = 0x800000000;
            v1308[6] = 0;
            v1012 = llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)&v1305, (const llvm::LiveRange *)v990);
            if (v1012 > 1)
            {
              v1013 = v1012;
              sub_1C51CCA6C(v983, "Multiple connected components in live interval", *(llvm::Value ***)(v983 + 16));
              v1014 = sub_1C51D02E0((llvm *)v990);
              v1015 = 0;
              v1016 = v1013;
              do
              {
                v1017 = (llvm::raw_ostream *)llvm::errs(v1014);
                v1018 = sub_1C5E21910(v1017, v1015, 0, 0, 0);
                v1019 = (_QWORD *)*((_QWORD *)v1017 + 4);
                if (*((_QWORD *)v1017 + 3) - (_QWORD)v1019 > 7uLL)
                {
                  *v1019 = 0x736F6E6C6176203ALL;
                  *((_QWORD *)v1017 + 4) += 8;
                }
                else
                {
                  v1018 = llvm::raw_ostream::write(v1017, ": valnos", 8uLL);
                }
                v1020 = *(unsigned int *)(v990 + 72);
                if ((_DWORD)v1020)
                {
                  v1021 = *(unsigned int ***)(v990 + 64);
                  v1022 = 8 * v1020;
                  do
                  {
                    v1023 = *v1021;
                    if (v1015 == *(_DWORD *)(v1306 + 4 * **v1021))
                    {
                      v1024 = (llvm::raw_ostream *)llvm::errs(v1018);
                      v1025 = (_BYTE *)*((_QWORD *)v1024 + 4);
                      if ((unint64_t)v1025 >= *((_QWORD *)v1024 + 3))
                      {
                        v1024 = llvm::raw_ostream::write(v1024, 32);
                      }
                      else
                      {
                        *((_QWORD *)v1024 + 4) = v1025 + 1;
                        *v1025 = 32;
                      }
                      v1018 = sub_1C5E21910(v1024, *v1023, 0, 0, 0);
                    }
                    ++v1021;
                    v1022 -= 8;
                  }
                  while (v1022);
                }
                v1014 = (llvm *)llvm::errs(v1018);
                v1026 = (_BYTE *)*((_QWORD *)v1014 + 4);
                if ((unint64_t)v1026 >= *((_QWORD *)v1014 + 3))
                {
                  v1014 = llvm::raw_ostream::write(v1014, 10);
                }
                else
                {
                  *((_QWORD *)v1014 + 4) = v1026 + 1;
                  *v1026 = 10;
                }
                v983 = a1;
                ++v1015;
              }
              while (v1015 != v1016);
            }
            if ((__int128 *)v1306 != (__int128 *)((char *)&v1307 + 8))
              free((void *)v1306);
            v984 = v1275;
          }
          else
          {
            v1006 = sub_1C51CCA6C(v983, "Missing live interval for virtual register", *(llvm::Value ***)(v983 + 16));
            v1007 = (llvm::raw_ostream *)llvm::errs(v1006);
            v1008 = *(_QWORD *)(v983 + 40);
            v1009 = operator new(0x28uLL);
            *(_QWORD *)v1009 = &off_1E814D010;
            v1009[2] = v985 | 0x80000000;
            *((_QWORD *)v1009 + 2) = v1008;
            v1009[6] = 0;
            *((_QWORD *)v1009 + 4) = 0;
            *((_QWORD *)&v1307 + 1) = v1009;
            sub_1C52C9630((llvm::raw_ostream *)v1009, v1007);
            v1010 = (void *)*((_QWORD *)v1007 + 4);
            if (*((_QWORD *)v1007 + 3) - (_QWORD)v1010 > 0x17uLL)
            {
              qmemcpy(v1010, " still has defs or uses\n", 24);
              *((_QWORD *)v1007 + 4) += 24;
            }
            else
            {
              llvm::raw_ostream::write(v1007, " still has defs or uses\n", 0x18uLL);
            }
            v983 = a1;
            if (*((unint64_t **)&v1307 + 1) == &v1305)
            {
              v1011 = (void (**)(void))(v1305 + 32);
              goto LABEL_1756;
            }
            if (*((_QWORD *)&v1307 + 1))
            {
              v1011 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_1756:
              (*v1011)();
            }
          }
        }
LABEL_1757:
        ++v985;
      }
      while (v985 != v984);
    }
    v1027 = *(unsigned int *)(*(_QWORD *)(v983 + 40) + 44);
    if ((_DWORD)v1027)
    {
      for (n = 0; n != v1027; ++n)
      {
        v1029 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 680) + 8 * n);
        if (v1029)
          sub_1C51D27BC(a1, v1029, n, 0);
      }
    }
  }
  v1030 = a1;
  v1031 = *(const llvm::MachineFunction **)(a1 + 16);
  if ((**(_BYTE **)(**(_QWORD **)(a1 + 48) + 360) & 4) != 0)
  {
    v1032 = (_QWORD *)((char *)v1031 + 320);
    v1033 = (_QWORD *)*((_QWORD *)v1031 + 41);
    if (v1033 != (_QWORD *)((char *)v1031 + 320))
    {
      while (1)
      {
        v1034 = (unsigned __int16 *)v1033[19];
        v1035 = (unsigned __int16 *)v1033[20];
        if (v1035 != v1034)
          break;
LABEL_1813:
        v1033 = (_QWORD *)v1033[1];
        if (v1033 == v1032)
        {
          v1031 = *v1266;
          goto LABEL_1815;
        }
      }
      while (1)
      {
        v1036 = *v1034;
        v1037 = *(_QWORD *)(v1030 + 40);
        v1038 = v1037 ? (uint64_t *)(v1037 + 8) : 0;
        v1039 = *v1038;
        v1040 = *(unsigned int *)(*v1038 + 24 * *v1034 + 16);
        v1041 = v1040 & 0xF;
        v1042 = (v1040 >> 3) & 0x1FFFFFFE;
        v1045 = v1038 + 5;
        v1044 = v1038[5];
        v1043 = v1045[1];
        v1046 = (_WORD *)(v1043 + v1042);
        v1047 = *v1046 + v1041 * v1036;
        do
        {
          v1048 = *(_WORD *)(v1044 + 4 * v1047);
          if (v1048)
          {
            v1049 = *(_WORD *)(v1044 + 4 * v1047 + 2);
            while (!v1043)
            {
LABEL_1778:
              v1048 = v1049;
              v53 = v1049 == 0;
              v1049 = 0;
              if (v53)
                goto LABEL_1780;
            }
            v1050 = (unsigned __int16 *)(v1043 + 2 * *(unsigned int *)(v1039 + 24 * v1048 + 8));
            while ((_DWORD)v1036 == v1048)
            {
              v1051 = *v1050++;
              v1048 = v1051 + v1036;
              if (!v1051)
                goto LABEL_1778;
            }
            goto LABEL_1812;
          }
LABEL_1780:
          v1052 = (unsigned __int16)v1046[1];
          ++v1046;
          v1047 += v1052;
        }
        while (v1052);
        if ((*(_DWORD *)(v1037 + 16) <= v1036
           || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1037 + 216) + 16) + v1036)
           || ((*(_QWORD *)((char *)*v1251 + ((v1036 >> 3) & 0x1FF8)) >> v1036) & 1) != 0)
          && (*(_DWORD *)(v1030 + 240) <= v1036
           || ((*(_QWORD *)((char *)*v1251 + ((v1036 >> 3) & 0x1FF8)) >> v1036) & 1) == 0))
        {
          v1284 = (void **)v1033[8];
          v1265 = (void **)v1033[9];
          if (v1284 != v1265)
            break;
        }
LABEL_1812:
        v1034 += 8;
        if (v1034 == v1035)
          goto LABEL_1813;
      }
      v1260 = 37 * v1036;
      while (1)
      {
        v1269 = *v1284;
        v1299 = (uint64_t *)*v1284;
        v1053 = sub_1C51CCEAC(a1 + 568, (uint64_t *)&v1299);
        v1054 = *((_DWORD *)v1053 + 18);
        if (v1054)
        {
          v1055 = v1053[7];
          v1056 = v1054 - 1;
          v1057 = v1056 & v1260;
          v1058 = *(_DWORD *)(v1055 + 4 * (v1056 & v1260));
          if (v1058 == (_DWORD)v1036)
            goto LABEL_1806;
          v1059 = 1;
          while (v1058 != -1)
          {
            v1060 = v1057 + v1059++;
            v1057 = v1060 & v1056;
            v1058 = *(_DWORD *)(v1055 + 4 * v1057);
            if (v1058 == (_DWORD)v1036)
              goto LABEL_1806;
          }
        }
        v1061 = sub_1C51CC164(a1, "Live in register not found to be live out from predecessor.", (unint64_t)v1033);
        v1276 = (llvm::raw_ostream *)llvm::errs(v1061);
        v1062 = *(_QWORD *)(a1 + 40);
        v1063 = *(_QWORD *)(v1062 + 72);
        if (v1063)
        {
          v1064 = (const char *)(v1063 + *(unsigned int *)(*(_QWORD *)(v1062 + 8) + 24 * v1036));
          v1065 = strlen(v1064);
          v1066 = (void *)*((_QWORD *)v1276 + 4);
          if (v1065 <= *((_QWORD *)v1276 + 3) - (_QWORD)v1066)
          {
            if (v1065)
            {
              memcpy(v1066, v1064, v1065);
              *((_QWORD *)v1276 + 4) += v1065;
            }
          }
          else
          {
            llvm::raw_ostream::write(v1276, v1064, v1065);
          }
        }
        v1067 = (void *)*((_QWORD *)v1276 + 4);
        if (*((_QWORD *)v1276 + 3) - (_QWORD)v1067 > 0x1EuLL)
        {
          qmemcpy(v1067, " not found to be live out from ", 31);
          *((_QWORD *)v1276 + 4) += 31;
        }
        else
        {
          llvm::raw_ostream::write(v1276, " not found to be live out from ", 0x1FuLL);
        }
        *((_QWORD *)&v1307 + 1) = &v1305;
        v1305 = (unint64_t)&off_1E8143F38;
        v1306 = (uint64_t)v1269;
        sub_1C512E114((uint64_t)&v1305, v1276);
        v1068 = (_BYTE *)*((_QWORD *)v1276 + 4);
        if (*((_BYTE **)v1276 + 3) == v1068)
        {
          llvm::raw_ostream::write(v1276, "\n", 1uLL);
        }
        else
        {
          *v1068 = 10;
          ++*((_QWORD *)v1276 + 4);
        }
        if (*((unint64_t **)&v1307 + 1) == &v1305)
        {
          v1069 = (void (**)(void))(v1305 + 32);
          goto LABEL_1805;
        }
        if (*((_QWORD *)&v1307 + 1))
        {
          v1069 = (void (**)(void))(**((_QWORD **)&v1307 + 1) + 40);
LABEL_1805:
          (*v1069)();
        }
LABEL_1806:
        v1030 = a1;
        if (++v1284 == v1265)
          goto LABEL_1812;
      }
    }
  }
LABEL_1815:
  v1070 = *((_QWORD *)v1031 + 93);
  v1071 = *((unsigned int *)v1031 + 190);
  v1072 = v1070 + 32 * v1071;
  if (*((_DWORD *)v1031 + 188))
  {
    if ((_DWORD)v1071)
    {
      v1073 = 32 * v1071;
      v1074 = *((_QWORD *)v1031 + 93);
      while ((*(_QWORD *)v1074 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1074 += 32;
        v1073 -= 32;
        if (!v1073)
          goto LABEL_1820;
      }
    }
    else
    {
      v1074 = *((_QWORD *)v1031 + 93);
    }
  }
  else
  {
LABEL_1820:
    v1074 = v1070 + 32 * v1071;
  }
  v1075 = v1070 + 32 * v1071;
  if (v1074 != v1075)
  {
    do
    {
      v1076 = *(_QWORD *)v1074;
      v1305 = *(_QWORD *)v1074;
      v1306 = (uint64_t)&v1307 + 8;
      *(_QWORD *)&v1307 = 0x100000000;
      if (*(_DWORD *)(v1074 + 16))
      {
        sub_1C61EF4B8((uint64_t)&v1306, v1074 + 8);
        v1076 = v1305;
      }
      v1077 = *(_QWORD *)(*(_QWORD *)(v1076 + 16) + 8);
      if ((*(_WORD *)(v1076 + 44) & 0xC) != 0 && (*(_WORD *)(v1076 + 44) & 4) == 0)
      {
        while ((v1077 & 0x80) == 0)
        {
          if ((*(_WORD *)(v1076 + 44) & 8) == 0)
            goto LABEL_1830;
          v1076 = *(_QWORD *)(v1076 + 8);
          LOBYTE(v1077) = *(_BYTE *)(*(_QWORD *)(v1076 + 16) + 8);
        }
      }
      else if ((v1077 & 0x80) == 0)
      {
LABEL_1830:
        sub_1C51CCA6C(v1030, "Call site info referencing instruction that is not call", *(llvm::Value ***)(v1030 + 16));
      }
      if ((__int128 *)v1306 != (__int128 *)((char *)&v1307 + 8))
        free((void *)v1306);
      v1079 = v1074 + 32;
      v1074 = v1072;
      if (v1079 != v1072)
      {
        v1074 = v1079;
        while ((*(_QWORD *)v1074 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v1074 += 32;
          if (v1074 == v1072)
          {
            v1074 = v1072;
            break;
          }
        }
      }
    }
    while (v1074 != v1075);
    v1031 = *v1266;
  }
  v1080 = *(uint64_t ****)v1031;
  if ((*(_BYTE *)(*(_QWORD *)v1031 + 23) & 0x20) != 0)
  {
    v1081 = ***v1080;
    v1305 = (unint64_t)v1080;
    v1082 = *(_DWORD *)(v1081 + 2496);
    if (v1082)
    {
      v1083 = *(_QWORD *)(v1081 + 2480);
      v1084 = v1082 - 1;
      v1085 = v1084 & ((v1080 >> 4) ^ (v1080 >> 9));
      v1086 = (uint64_t ****)(v1083 + 40 * v1085);
      v1087 = *v1086;
      if (*v1086 == v1080)
        goto LABEL_1854;
      v1088 = 0;
      v1089 = 1;
      while (v1087 != (uint64_t ***)-4096)
      {
        if (v1088)
          v1090 = 0;
        else
          v1090 = v1087 == (uint64_t ***)-8192;
        if (v1090)
          v1088 = v1086;
        v1091 = v1085 + v1089++;
        v1085 = v1091 & v1084;
        v1086 = (uint64_t ****)(v1083 + 40 * v1085);
        v1087 = *v1086;
        if (*v1086 == v1080)
          goto LABEL_1854;
      }
      if (v1088)
        v1151 = v1088;
      else
        v1151 = v1086;
    }
    else
    {
      v1151 = 0;
    }
    v1086 = (uint64_t ****)sub_1C541AB24(v1081 + 2480, (uint64_t)&v1305, (uint64_t *)&v1305, v1151);
    v1152 = v1305;
    v1086[3] = 0;
    v1086[4] = 0;
    *v1086 = (uint64_t ***)v1152;
    v1086[1] = (uint64_t ***)(v1086 + 3);
    v1086[2] = (uint64_t ***)0x100000000;
LABEL_1854:
    v1092 = *((unsigned int *)v1086 + 4);
    if ((_DWORD)v1092)
    {
      v1093 = v1086[1] + 1;
      v1094 = 16 * v1092;
      while (*((_DWORD *)v1093 - 2))
      {
        v1093 += 2;
        v1094 -= 16;
        if (!v1094)
          goto LABEL_1917;
      }
      if (*v1093)
      {
        v1299 = 0;
        v1300 = 0;
        LODWORD(v1301) = 0;
        v1095 = (uint64_t)*v1266 + 320;
        v1096 = *((_QWORD *)*v1266 + 41);
        if (v1096 == v1095)
        {
          v1098 = 0;
        }
        else
        {
          do
          {
            for (ii = *(_QWORD *)(v1096 + 56); ii != v1096 + 48; ii = *(_QWORD *)(ii + 8))
            {
              if (*(_DWORD *)(ii + 64))
              {
                LODWORD(v1288) = *(_DWORD *)(ii + 64);
                sub_1C61E6104((uint64_t)&v1299, &v1288, (uint64_t)&v1305);
                if (!(_BYTE)v1307)
                  sub_1C51CC4F8(a1, "Instruction has a duplicated value tracking number", ii);
              }
              if ((*(_BYTE *)ii & 4) == 0)
              {
                while ((*(_WORD *)(ii + 44) & 8) != 0)
                  ii = *(_QWORD *)(ii + 8);
              }
            }
            v1096 = *(_QWORD *)(v1096 + 8);
          }
          while (v1096 != v1095);
          v1098 = v1299;
          v1030 = a1;
        }
        MEMORY[0x1CAA32FB4](v1098, 4);
      }
    }
  }
LABEL_1917:
  v1127 = *(_DWORD *)(v1030 + 256);
  if (v1127 || *(_DWORD *)(v1030 + 260))
  {
    v1149 = (void **)(v1030 + 248);
    v1150 = *(unsigned int *)(v1030 + 264);
    if (v1150 <= 4 * v1127 || v1150 < 0x41)
    {
      if ((_DWORD)v1150)
        memset(*v1149, 255, 4 * v1150);
      *(_QWORD *)(v1030 + 256) = 0;
    }
    else
    {
      sub_1C4A068AC(v1149);
    }
  }
  *(_DWORD *)(v1030 + 280) = 0;
  *(_DWORD *)(v1030 + 360) = 0;
  *(_DWORD *)(v1030 + 440) = 0;
  *(_DWORD *)(v1030 + 520) = 0;
  v1128 = *(_DWORD *)(v1030 + 576);
  if (v1128 || *(_DWORD *)(a1 + 580))
  {
    v1129 = *(_DWORD *)(a1 + 584);
    v1130 = *(_QWORD **)(a1 + 568);
    if (v1129 > 4 * v1128 && v1129 >= 0x41)
    {
      v1131 = (_QWORD *)(a1 + 568);
      v1132 = 328 * v1129;
      v1133 = (void **)(v1130 + 17);
      do
      {
        if (((unint64_t)*(v1133 - 17) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v1134 = v1133[13];
          if (v1134 != v1133[12])
            free(v1134);
          v1135 = v1133[1];
          if (v1135 != *v1133)
            free(v1135);
          MEMORY[0x1CAA32FB4](*(v1133 - 3), 4);
          MEMORY[0x1CAA32FB4](*(v1133 - 6), 4);
          MEMORY[0x1CAA32FB4](*(v1133 - 9), 4);
          MEMORY[0x1CAA32FB4](*(v1133 - 12), 4);
          MEMORY[0x1CAA32FB4](*(v1133 - 15), 8);
        }
        v1133 += 41;
        v1132 -= 328;
      }
      while (v1132);
      v1136 = 1 << (33 - __clz(v1128 - 1));
      if (v1136 <= 64)
        v1136 = 64;
      if (v1128)
        v1137 = v1136;
      else
        v1137 = 0;
      if (v1137 == *(_DWORD *)(a1 + 584))
      {
        *(_QWORD *)(a1 + 576) = 0;
        if (v1137)
        {
          v1138 = *(_QWORD **)(a1 + 568);
          v1139 = 328 * v1137;
          do
          {
            *v1138 = -4096;
            v1138 += 41;
            v1139 -= 328;
          }
          while (v1139);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v1131, 8);
        if (v1137)
        {
          v1144 = (4 * v1137 / 3 + 1) | ((unint64_t)(4 * v1137 / 3 + 1) >> 1);
          v1145 = v1144 | (v1144 >> 2) | ((v1144 | (v1144 >> 2)) >> 4);
          LODWORD(v1145) = (((v1145 | (v1145 >> 8)) >> 16) | v1145 | (v1145 >> 8)) + 1;
          *(_DWORD *)(a1 + 584) = v1145;
          v1146 = operator new(328 * v1145, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 568) = v1146;
          *(_QWORD *)(a1 + 576) = 0;
          v1147 = *(_DWORD *)(a1 + 584);
          if (v1147)
          {
            v1148 = 328 * v1147;
            do
            {
              *v1146 = -4096;
              v1146 += 41;
              v1148 -= 328;
            }
            while (v1148);
          }
        }
        else
        {
          *v1131 = 0;
          *(_QWORD *)(a1 + 576) = 0;
          *(_DWORD *)(a1 + 584) = 0;
        }
      }
      return *(unsigned int *)(a1 + 56);
    }
    if (!v1129)
    {
LABEL_1952:
      *(_QWORD *)(a1 + 576) = 0;
      return *(unsigned int *)(a1 + 56);
    }
    v1140 = 328 * v1129;
    while (1)
    {
      if (*v1130 == -8192)
        goto LABEL_1950;
      if (*v1130 != -4096)
        break;
LABEL_1951:
      v1130 += 41;
      v1140 -= 328;
      if (!v1140)
        goto LABEL_1952;
    }
    v1141 = (void *)v1130[30];
    if (v1141 != (void *)v1130[29])
      free(v1141);
    v1142 = (void *)v1130[18];
    if (v1142 != (void *)v1130[17])
      free(v1142);
    MEMORY[0x1CAA32FB4](v1130[14], 4);
    MEMORY[0x1CAA32FB4](v1130[11], 4);
    MEMORY[0x1CAA32FB4](v1130[8], 4);
    MEMORY[0x1CAA32FB4](v1130[5], 4);
    MEMORY[0x1CAA32FB4](v1130[2], 8);
LABEL_1950:
    *v1130 = -4096;
    goto LABEL_1951;
  }
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1C51CBCF8(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(_DWORD *)(a1 + 584);
  v3 = *(_QWORD *)(a1 + 568);
  if (v2)
  {
    v4 = 328 * v2;
    v5 = (void **)(v3 + 136);
    do
    {
      if (((unint64_t)*(v5 - 17) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = v5[13];
        if (v6 != v5[12])
          free(v6);
        v7 = v5[1];
        if (v7 != *v5)
          free(v7);
        MEMORY[0x1CAA32FB4](*(v5 - 3), 4);
        MEMORY[0x1CAA32FB4](*(v5 - 6), 4);
        MEMORY[0x1CAA32FB4](*(v5 - 9), 4);
        MEMORY[0x1CAA32FB4](*(v5 - 12), 4);
        MEMORY[0x1CAA32FB4](*(v5 - 15), 8);
      }
      v5 += 41;
      v4 -= 328;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 568);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  v8 = *(void **)(a1 + 512);
  if (v8 != (void *)(a1 + 528))
    free(v8);
  v9 = *(void **)(a1 + 432);
  if (v9 != (void *)(a1 + 448))
    free(v9);
  v10 = *(void **)(a1 + 352);
  if (v10 != (void *)(a1 + 368))
    free(v10);
  v11 = *(void **)(a1 + 272);
  if (v11 != (void *)(a1 + 288))
    free(v11);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 248), 4);
  v12 = *(void **)(a1 + 176);
  if (v12 != (void *)(a1 + 192))
    free(v12);
  v13 = *(void **)(a1 + 88);
  if (v13 != *(void **)(a1 + 80))
    free(v13);
  return a1;
}

uint64_t sub_1C51CBE3C()
{
  uint64_t v0;
  void *__p[2];
  uint64_t v3;

  v0 = operator new();
  __p[1] = 0;
  v3 = 0;
  __p[0] = 0;
  sub_1C51C382C(v0, __p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
  return v0;
}

void sub_1C51CBE9C(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E8146C20;
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C51CBF30(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E8146C20;
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51CBFD8(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t sub_1C51CBFE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  const char *v5;
  __int16 v6;
  uint64_t v7[4];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11[4];
  _QWORD v12[13];
  int v13;
  _QWORD v14[10];
  _DWORD v15[14];
  __int128 v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[10];
  _QWORD v21[10];
  _QWORD v22[10];
  _OWORD v23[3];
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 360) + 1) & 2) == 0)
  {
    v2 = (_QWORD *)(a1 + 248);
    if (*(char *)(a1 + 271) < 0)
      v2 = (_QWORD *)*v2;
    v12[0] = a1;
    v12[1] = v2;
    v12[10] = v14;
    v12[11] = v14;
    v12[12] = 8;
    v13 = 0;
    v14[8] = v15;
    v14[9] = 0x600000000;
    v15[12] = 0;
    v16 = 0u;
    v17 = 0;
    v18 = v20;
    v19 = 0x1000000000;
    v20[8] = v21;
    v20[9] = 0x1000000000;
    v21[8] = v22;
    v21[9] = 0x1000000000;
    v22[8] = v23;
    v22[9] = 0x400000000;
    v25 = 0;
    v24 = 0;
    v23[2] = 0u;
    v3 = sub_1C51C3A7C((uint64_t)v12, a2);
    sub_1C51CBCF8((uint64_t)v12);
    if (v3)
    {
      v9 = "Found ";
      v10 = 259;
      v8 = 264;
      LODWORD(v7[0]) = v3;
      sub_1C6131AAC((uint64_t *)&v9, v7, (uint64_t)v11);
      v5 = " machine code errors.";
      v6 = 259;
      sub_1C6131AAC(v11, (uint64_t *)&v5, (uint64_t)v12);
      llvm::report_fatal_error((uint64_t)v12, 1);
    }
  }
  return 0;
}

llvm::raw_ostream *sub_1C51CC164(uint64_t a1, const char *a2, unint64_t a3)
{
  llvm *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void *v8;
  _BYTE *v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  const char *v20;
  size_t v21;
  size_t v22;
  _WORD *v23;
  _BYTE *v24;
  llvm *v25;
  uint64_t (**v26)(void);
  llvm::raw_ostream *result;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  _BYTE *v32;
  _BYTE *v33;
  _QWORD v34[3];
  llvm *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = sub_1C51CCA6C(a1, a2, *(llvm::Value ***)(a3 + 32));
  v6 = (llvm::raw_ostream *)llvm::errs(v5);
  v7 = v6;
  v8 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 0xEuLL)
  {
    qmemcpy(v8, "- basic block: ", 15);
    *((_QWORD *)v6 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v6, "- basic block: ", 0xFuLL);
  }
  v35 = (llvm *)v34;
  v34[0] = &off_1E8143F38;
  v34[1] = a3;
  sub_1C512E114((uint64_t)v34, v7);
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v9 + 1;
    *v9 = 32;
  }
  v10 = *(uint64_t ****)(a3 + 16);
  if (!v10 || (*((_BYTE *)v10 + 23) & 0x10) == 0)
    goto LABEL_17;
  v11 = ***v10;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  if ((_DWORD)v13)
  {
    LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v15 = (uint64_t ****)(v12 + 16 * v14);
    v16 = *v15;
    if (*v15 == v10)
      goto LABEL_15;
    v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(uint64_t ****)(v12 + 16 * v14);
      if (v16 == v10)
      {
        v15 = (uint64_t ****)(v12 + 16 * v14);
        goto LABEL_15;
      }
    }
  }
  v15 = (uint64_t ****)(v12 + 16 * v13);
LABEL_15:
  v19 = v15[1];
  v22 = (size_t)*v19;
  v20 = (const char *)(v19 + 2);
  v21 = v22;
  v23 = (_WORD *)*((_QWORD *)v7 + 4);
  if (v22 > *((_QWORD *)v7 + 3) - (_QWORD)v23)
  {
    llvm::raw_ostream::write(v7, v20, v21);
LABEL_17:
    v23 = (_WORD *)*((_QWORD *)v7 + 4);
    goto LABEL_20;
  }
  if (v21)
  {
    memcpy(v23, v20, v21);
    v23 = (_WORD *)(*((_QWORD *)v7 + 4) + v21);
    *((_QWORD *)v7 + 4) = v23;
  }
LABEL_20:
  if (*((_QWORD *)v7 + 3) - (_QWORD)v23 > 1uLL)
  {
    *v23 = 10272;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, " (", 2uLL);
  }
  llvm::write_hex(v7, a3, 3, 0, 0);
  v24 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v24 + 1;
    *v24 = 41;
  }
  v25 = v35;
  if (v35 == (llvm *)v34)
  {
    v26 = (uint64_t (**)(void))(v34[0] + 32);
  }
  else
  {
    if (!v35)
      goto LABEL_30;
    v26 = (uint64_t (**)(void))(*(_QWORD *)v35 + 40);
  }
  v25 = (llvm *)(*v26)();
LABEL_30:
  if (*(_QWORD *)(a1 + 616))
  {
    v29 = (llvm::raw_ostream *)llvm::errs(v25);
    v30 = v29;
    v31 = (_WORD *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v31 > 1uLL)
    {
      *v31 = 23328;
      *((_QWORD *)v29 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v29, " [", 2uLL);
    }
    v34[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 392) + 16 * *(unsigned int *)(a3 + 24));
    llvm::SlotIndex::print((llvm::SlotIndex *)v34, v30);
    v32 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v32 >= *((_QWORD *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 59);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v32 + 1;
      *v32 = 59;
    }
    v34[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 392) + 16 * *(unsigned int *)(a3 + 24) + 8);
    v25 = llvm::SlotIndex::print((llvm::SlotIndex *)v34, v30);
    v33 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)v30 + 3))
    {
      v25 = llvm::raw_ostream::write(v30, 41);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v33 + 1;
      *v33 = 41;
    }
  }
  result = (llvm::raw_ostream *)llvm::errs(v25);
  v28 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v28 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v28 + 1;
  *v28 = 10;
  return result;
}

void sub_1C51CC4F8(uint64_t a1, const char *a2, unint64_t a3)
{
  llvm *v5;
  llvm::raw_ostream *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;

  v5 = sub_1C51CC164(a1, a2, *(_QWORD *)(a3 + 24));
  v6 = (llvm::raw_ostream *)llvm::errs(v5);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xEuLL)
  {
    qmemcpy(v7, "- instruction: ", 15);
    *((_QWORD *)v6 + 4) += 15;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, "- instruction: ", 0xFuLL);
  }
  v8 = *(_QWORD *)(a1 + 616);
  if (!v8)
    goto LABEL_28;
  v9 = *(_DWORD *)(v8 + 384);
  if (!v9)
    goto LABEL_28;
  v10 = *(_QWORD *)(v8 + 368);
  v11 = v9 - 1;
  v12 = v11 & ((a3 >> 4) ^ (a3 >> 9));
  v13 = *(_QWORD *)(v10 + 16 * v12);
  if (v13 == a3)
  {
LABEL_9:
    v16 = (llvm::raw_ostream *)llvm::errs(v6);
    v17 = *(_WORD *)(a3 + 44);
    v18 = a3;
    if ((v17 & 4) != 0)
    {
      v18 = a3;
      do
        v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v18 + 44) & 4) != 0);
    }
    v19 = *(_QWORD *)(a1 + 616);
    v20 = a3;
    if ((v17 & 8) != 0)
    {
      v20 = a3;
      do
        v20 = *(_QWORD *)(v20 + 8);
      while ((*(_WORD *)(v20 + 44) & 8) != 0);
    }
    v21 = *(_QWORD *)(v20 + 8);
    if (v18 != v21)
    {
      while (1)
      {
        v22 = **(unsigned __int16 **)(v18 + 16);
        v23 = v22 > 0x17;
        v24 = (1 << v22) & 0x83E000;
        if (v23 || v24 == 0)
          break;
        v18 = *(_QWORD *)(v18 + 8);
        if (v18 == v21)
        {
          v18 = *(_QWORD *)(v20 + 8);
          break;
        }
      }
    }
    v26 = *(_QWORD *)(v19 + 368);
    v27 = *(unsigned int *)(v19 + 384);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = ((v18 >> 4) ^ (v18 >> 9)) & (v27 - 1);
      v29 = (uint64_t *)(v26 + 16 * v28);
      v30 = *v29;
      if (v18 == *v29)
        goto LABEL_25;
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(_QWORD *)(v26 + 16 * v28);
        if (v18 == v30)
        {
          v29 = (uint64_t *)(v26 + 16 * v28);
          goto LABEL_25;
        }
      }
    }
    v29 = (uint64_t *)(v26 + 16 * v27);
LABEL_25:
    v35 = v29[1];
    v6 = llvm::SlotIndex::print((llvm::SlotIndex *)&v35, v16);
    v33 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)v16 + 3))
    {
      v6 = llvm::raw_ostream::write(v16, 9);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v33 + 1;
      *v33 = 9;
    }
    goto LABEL_28;
  }
  v14 = 1;
  while (v13 != -4096)
  {
    v15 = v12 + v14++;
    v12 = v15 & v11;
    v13 = *(_QWORD *)(v10 + 16 * v12);
    if (v13 == a3)
      goto LABEL_9;
  }
LABEL_28:
  v34 = (llvm::raw_ostream *)llvm::errs(v6);
  llvm::MachineInstr::print((llvm::MachineInstr *)a3, v34, 1, 0, 0, 1, 0);
}

_DWORD *sub_1C51CC728(int32x2_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  int32x2_t *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned __int32 i;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  __int32 v42;
  int32x2_t v43;
  __int32 v44;
  unsigned int v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;

  v53 = a2;
  result = sub_1C51CCEAC((uint64_t)&a1[71], &v53);
  v4 = a1[55].u32[0];
  if (!(_DWORD)v4)
  {
    v21 = a1 + 31;
    goto LABEL_25;
  }
  v5 = result;
  v6 = (uint64_t)(result + 8);
  v7 = (int *)a1[54];
  v8 = &v7[v4];
  do
  {
    v9 = v5[12];
    if (v9)
    {
      v10 = *((_QWORD *)v5 + 4);
      v11 = v9 - 1;
      v12 = (37 * *v7) & v11;
      v13 = (_DWORD *)(v10 + 4 * v12);
      v14 = *v13;
      if (*v7 == *v13)
        goto LABEL_19;
      v15 = 0;
      v16 = 1;
      while (v14 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -2;
        if (v17)
          v15 = v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (_DWORD *)(v10 + 4 * v12);
        v14 = *v13;
        if (*v7 == *v13)
          goto LABEL_19;
      }
      if (v15)
        v19 = v15;
      else
        v19 = v13;
    }
    else
    {
      v19 = 0;
    }
    result = sub_1C4978C80(v6, (uint64_t)v7, v7, v19);
    *result = *v7;
LABEL_19:
    ++v7;
  }
  while (v7 != v8);
  v20 = a1[55].u32[0];
  v21 = a1 + 31;
  if ((_DWORD)v20)
  {
    v22 = (_DWORD *)a1[54];
    v23 = 4 * v20;
    do
    {
      result = (_DWORD *)sub_1C4979748(a1 + 31, v22++);
      v23 -= 4;
    }
    while (v23);
  }
LABEL_25:
  a1[55].i32[0] = 0;
  for (i = a1[65].u32[0]; i; i = a1[65].u32[0])
  {
    while (1)
    {
      v25 = *(_QWORD *)(*(_QWORD *)&a1[64] + 8 * i-- - 8);
      a1[65].i32[0] = i;
      v26 = a1[31];
      v27 = a1[33].u32[0];
      v28 = (unsigned int *)(*(_QWORD *)&v26 + 4 * v27);
      if (a1[32].i32[0])
      {
        if (a1[33].i32[0])
        {
          v29 = 4 * v27;
          v30 = (unsigned int *)a1[31];
          while (*v30 >= 0xFFFFFFFE)
          {
            ++v30;
            v29 -= 4;
            if (!v29)
              goto LABEL_31;
          }
        }
        else
        {
          v30 = (unsigned int *)a1[31];
        }
      }
      else
      {
LABEL_31:
        v30 = (unsigned int *)(*(_QWORD *)&v26 + 4 * v27);
      }
      v31 = (unsigned int *)(*(_QWORD *)&v26 + 4 * v27);
      if (v30 != v31)
        break;
      if (!i)
        goto LABEL_48;
    }
    do
    {
      v32 = *v30;
      if ((v32 - 1) <= 0x3FFFFFFE && ((*(_DWORD *)(v25 + ((v32 >> 3) & 0x1FFFFFFC)) >> v32) & 1) == 0)
      {
        v33 = a1[45].u32[0];
        if (v33 >= a1[45].u32[1])
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[44], (uint64_t)&a1[46], v33 + 1, 4);
          v33 = a1[45].u32[0];
        }
        *(_DWORD *)(*(_QWORD *)&a1[44] + 4 * v33) = v32;
        ++a1[45].i32[0];
      }
      v34 = v30 + 1;
      while (v34 != v28)
      {
        v35 = *v34++;
        if (v35 <= 0xFFFFFFFD)
        {
          v30 = v34 - 1;
          goto LABEL_46;
        }
      }
      v30 = v28;
LABEL_46:
      ;
    }
    while (v30 != v31);
  }
LABEL_48:
  v36 = a1[45].u32[0];
  if ((_DWORD)v36)
  {
    v37 = (_DWORD *)a1[44];
    v38 = 4 * v36;
    do
    {
      result = (_DWORD *)sub_1C4979748(v21, v37++);
      v38 -= 4;
    }
    while (v38);
  }
  a1[45].i32[0] = 0;
  v39 = a1[35].u32[0];
  if ((_DWORD)v39)
  {
    v40 = (int *)a1[34];
    v41 = &v40[v39];
    while (1)
    {
      v42 = a1[33].i32[0];
      if (!v42)
        break;
      v43 = a1[31];
      v44 = v42 - 1;
      v45 = (37 * *v40) & v44;
      v46 = (_DWORD *)(*(_QWORD *)&v43 + 4 * v45);
      v47 = *v46;
      if (*v40 != *v46)
      {
        v48 = 0;
        v49 = 1;
        while (v47 != -1)
        {
          if (v48)
            v50 = 0;
          else
            v50 = v47 == -2;
          if (v50)
            v48 = v46;
          v51 = v45 + v49++;
          v45 = v51 & v44;
          v46 = (_DWORD *)(*(_QWORD *)&v43 + 4 * v45);
          v47 = *v46;
          if (*v40 == *v46)
            goto LABEL_69;
        }
        if (v48)
          v52 = v48;
        else
          v52 = v46;
        goto LABEL_68;
      }
LABEL_69:
      if (++v40 == v41)
        goto LABEL_70;
    }
    v52 = 0;
LABEL_68:
    result = sub_1C4978C80((uint64_t)v21, (uint64_t)v40, v40, v52);
    *result = *v40;
    goto LABEL_69;
  }
LABEL_70:
  a1[35].i32[0] = 0;
  return result;
}

llvm::raw_ostream *sub_1C51CCA6C(uint64_t a1, const char *a2, llvm::Value **a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  int v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  _BYTE *v11;
  const void *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  void *v18;
  _BYTE *v19;
  size_t v20;
  size_t v21;
  void *v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Value *v29;
  int v30;
  int v31;
  llvm::Value *v32;
  const char *v33;
  size_t v34;
  size_t v35;
  llvm::raw_ostream *result;

  v6 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    v6 = llvm::raw_ostream::write(v6, 10);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 10;
  }
  v8 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v8 + 1;
  if (!v8)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v6 = (llvm::raw_ostream *)llvm::errs(v6);
      v9 = v6;
      v10 = (_WORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8227;
        v11 = (_BYTE *)(*((_QWORD *)v6 + 4) + 2);
        *((_QWORD *)v6 + 4) = v11;
      }
      else
      {
        v6 = llvm::raw_ostream::write(v6, "# ", 2uLL);
        v11 = (_BYTE *)*((_QWORD *)v9 + 4);
      }
      v12 = *(const void **)(a1 + 8);
      if (v12)
      {
        v6 = (llvm::raw_ostream *)strlen(*(const char **)(a1 + 8));
        v13 = v6;
        if ((unint64_t)v6 <= *((_QWORD *)v9 + 3) - (_QWORD)v11)
        {
          if (v6)
          {
            v6 = (llvm::raw_ostream *)memcpy(v11, v12, (size_t)v6);
            v11 = (char *)v13 + *((_QWORD *)v9 + 4);
            *((_QWORD *)v9 + 4) = v11;
          }
        }
        else
        {
          v6 = llvm::raw_ostream::write(v9, (const char *)v12, (size_t)v6);
          v11 = (_BYTE *)*((_QWORD *)v9 + 4);
        }
      }
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        v6 = llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = 10;
      }
    }
    v14 = *(_QWORD *)(a1 + 600);
    v15 = (llvm::raw_ostream *)llvm::errs(v6);
    if (v14)
      v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, llvm::raw_ostream *, _QWORD))(*(_QWORD *)v14 + 40))(v14, v15, 0);
    else
      llvm::MachineFunction::print(a3, v15, *(const llvm::SlotIndexes **)(a1 + 616));
  }
  v16 = (llvm::raw_ostream *)llvm::errs(v6);
  v17 = v16;
  v18 = (void *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 > 0x15uLL)
  {
    qmemcpy(v18, "*** Bad machine code: ", 22);
    v19 = (_BYTE *)(*((_QWORD *)v16 + 4) + 22);
    *((_QWORD *)v16 + 4) = v19;
    if (!a2)
      goto LABEL_21;
  }
  else
  {
    llvm::raw_ostream::write(v16, "*** Bad machine code: ", 0x16uLL);
    v19 = (_BYTE *)*((_QWORD *)v17 + 4);
    if (!a2)
      goto LABEL_21;
  }
  v20 = strlen(a2);
  v21 = v20;
  if (v20 <= *((_QWORD *)v17 + 3) - (_QWORD)v19)
  {
    if (v20)
    {
      memcpy(v19, a2, v20);
      v19 = (_BYTE *)(*((_QWORD *)v17 + 4) + v21);
      *((_QWORD *)v17 + 4) = v19;
    }
  }
  else
  {
    llvm::raw_ostream::write(v17, a2, v20);
    v19 = (_BYTE *)*((_QWORD *)v17 + 4);
  }
LABEL_21:
  if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 4uLL)
  {
    v19[4] = 10;
    *(_DWORD *)v19 = 707406368;
    v22 = (void *)(*((_QWORD *)v17 + 4) + 5);
    *((_QWORD *)v17 + 4) = v22;
  }
  else
  {
    llvm::raw_ostream::write(v17, " ***\n", 5uLL);
    v22 = (void *)*((_QWORD *)v17 + 4);
  }
  if (*((_QWORD *)v17 + 3) - (_QWORD)v22 > 0xEuLL)
  {
    qmemcpy(v22, "- function:    ", 15);
    *((_QWORD *)v17 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v17, "- function:    ", 0xFuLL);
  }
  v23 = *a3;
  if ((*((_BYTE *)*a3 + 23) & 0x10) == 0)
    goto LABEL_35;
  v24 = ***(_QWORD ***)v23;
  v25 = *(_QWORD *)(v24 + 152);
  v26 = *(unsigned int *)(v24 + 168);
  if ((_DWORD)v26)
  {
    LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
    v28 = (llvm::Value **)(v25 + 16 * v27);
    v29 = *v28;
    if (*v28 == v23)
      goto LABEL_33;
    v30 = 1;
    while (v29 != (llvm::Value *)-4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v26 - 1);
      v29 = *(llvm::Value **)(v25 + 16 * v27);
      if (v29 == v23)
      {
        v28 = (llvm::Value **)(v25 + 16 * v27);
        goto LABEL_33;
      }
    }
  }
  v28 = (llvm::Value **)(v25 + 16 * v26);
LABEL_33:
  v32 = v28[1];
  v35 = *(_QWORD *)v32;
  v33 = (char *)v32 + 16;
  v34 = v35;
  result = (llvm::raw_ostream *)*((_QWORD *)v17 + 4);
  if (v35 > *((_QWORD *)v17 + 3) - (_QWORD)result)
  {
    llvm::raw_ostream::write(v17, v33, v34);
LABEL_35:
    result = (llvm::raw_ostream *)*((_QWORD *)v17 + 4);
    goto LABEL_38;
  }
  if (v34)
  {
    memcpy(result, v33, v34);
    result = (llvm::raw_ostream *)(*((_QWORD *)v17 + 4) + v34);
    *((_QWORD *)v17 + 4) = result;
  }
LABEL_38:
  if (*((llvm::raw_ostream **)v17 + 3) == result)
    return llvm::raw_ostream::write(v17, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)v17 + 4);
  return result;
}

_QWORD *sub_1C51CCE40(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  result = sub_1C51CCEAC(a1 + 568, &v8);
  if (!*(_BYTE *)result)
  {
    *(_BYTE *)result = 1;
    v6 = *(uint64_t **)(a2 + 88);
    v5 = *(uint64_t **)(a2 + 96);
    while (v6 != v5)
    {
      v7 = *v6++;
      result = (_QWORD *)sub_1C51CCE40(a1, v7);
    }
  }
  return result;
}

_QWORD *sub_1C51CCEAC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C51CCF78(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C51CD010(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    v5[17] = v5 + 21;
    v5[18] = v5 + 21;
    *((_DWORD *)v5 + 38) = 8;
    v5[29] = v5 + 33;
    v5[30] = v5 + 33;
    *((_DWORD *)v5 + 62) = 8;
  }
  return v5 + 1;
}

uint64_t sub_1C51CCF78(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 328 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 328 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C51CD010(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;

  v42 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(328 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = 328 * v15;
      do
      {
        *v14 = -4096;
        v14 += 41;
        v16 -= 328;
      }
      while (v16);
    }
    if (v6)
    {
      v17 = v9 + 128;
      v18 = 328 * v6;
      do
      {
        v19 = *(_QWORD *)(v17 - 128);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v43 = 0;
          sub_1C51CCF78(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v43);
          v20 = v43;
          *v43 = v19;
          *((_BYTE *)v20 + 8) = *(_BYTE *)(v17 - 120);
          *((_DWORD *)v20 + 8) = 0;
          v20[2] = 0;
          v20[3] = 0;
          v20[2] = *(_QWORD *)(v17 - 112);
          *(_QWORD *)(v17 - 112) = 0;
          *((_DWORD *)v20 + 6) = *(_DWORD *)(v17 - 104);
          *(_DWORD *)(v17 - 104) = 0;
          v21 = *((_DWORD *)v20 + 7);
          *((_DWORD *)v20 + 7) = *(_DWORD *)(v17 - 100);
          *(_DWORD *)(v17 - 100) = v21;
          v22 = *((_DWORD *)v20 + 8);
          *((_DWORD *)v20 + 8) = *(_DWORD *)(v17 - 96);
          *(_DWORD *)(v17 - 96) = v22;
          v20[5] = 0;
          v20[6] = 0;
          *((_DWORD *)v20 + 14) = 0;
          v20[5] = *(_QWORD *)(v17 - 88);
          *(_QWORD *)(v17 - 88) = 0;
          *((_DWORD *)v20 + 12) = *(_DWORD *)(v17 - 80);
          *(_DWORD *)(v17 - 80) = 0;
          v23 = *((_DWORD *)v20 + 13);
          *((_DWORD *)v20 + 13) = *(_DWORD *)(v17 - 76);
          *(_DWORD *)(v17 - 76) = v23;
          v24 = *((_DWORD *)v20 + 14);
          *((_DWORD *)v20 + 14) = *(_DWORD *)(v17 - 72);
          *(_DWORD *)(v17 - 72) = v24;
          v20[8] = 0;
          v20[9] = 0;
          *((_DWORD *)v20 + 20) = 0;
          v20[8] = *(_QWORD *)(v17 - 64);
          *(_QWORD *)(v17 - 64) = 0;
          *((_DWORD *)v20 + 18) = *(_DWORD *)(v17 - 56);
          *(_DWORD *)(v17 - 56) = 0;
          v25 = *((_DWORD *)v20 + 19);
          *((_DWORD *)v20 + 19) = *(_DWORD *)(v17 - 52);
          *(_DWORD *)(v17 - 52) = v25;
          v26 = *((_DWORD *)v20 + 20);
          *((_DWORD *)v20 + 20) = *(_DWORD *)(v17 - 48);
          *(_DWORD *)(v17 - 48) = v26;
          v20[11] = 0;
          v20[12] = 0;
          *((_DWORD *)v20 + 26) = 0;
          v20[11] = *(_QWORD *)(v17 - 40);
          *(_QWORD *)(v17 - 40) = 0;
          *((_DWORD *)v20 + 24) = *(_DWORD *)(v17 - 32);
          *(_DWORD *)(v17 - 32) = 0;
          v27 = *((_DWORD *)v20 + 25);
          *((_DWORD *)v20 + 25) = *(_DWORD *)(v17 - 28);
          *(_DWORD *)(v17 - 28) = v27;
          v28 = *((_DWORD *)v20 + 26);
          *((_DWORD *)v20 + 26) = *(_DWORD *)(v17 - 24);
          *(_DWORD *)(v17 - 24) = v28;
          v20[14] = 0;
          v20[15] = 0;
          *((_DWORD *)v20 + 32) = 0;
          v20[14] = *(_QWORD *)(v17 - 16);
          *(_QWORD *)(v17 - 16) = 0;
          *((_DWORD *)v20 + 30) = *(_DWORD *)(v17 - 8);
          *(_DWORD *)(v17 - 8) = 0;
          v29 = *((_DWORD *)v20 + 31);
          *((_DWORD *)v20 + 31) = *(_DWORD *)(v17 - 4);
          *(_DWORD *)(v17 - 4) = v29;
          v30 = *((_DWORD *)v20 + 32);
          *((_DWORD *)v20 + 32) = *(_DWORD *)v17;
          *(_DWORD *)v17 = v30;
          v31 = v20 + 21;
          v20[17] = (uint64_t)(v20 + 21);
          v33 = *(_QWORD *)(v17 + 8);
          v32 = *(_QWORD *)(v17 + 16);
          if (v32 == v33)
          {
            v20[18] = (uint64_t)v31;
            v34 = *(unsigned int *)(v17 + 28);
            if ((_DWORD)v34)
              memmove(v31, *(const void **)(v17 + 16), 8 * v34);
          }
          else
          {
            v20[18] = v32;
            *(_QWORD *)(v17 + 16) = v33;
          }
          v20[19] = *(_QWORD *)(v17 + 24);
          *((_DWORD *)v20 + 40) = *(_DWORD *)(v17 + 32);
          *(_QWORD *)(v17 + 24) = 8;
          *(_DWORD *)(v17 + 32) = 0;
          v35 = v20 + 33;
          v20[29] = (uint64_t)(v20 + 33);
          v36 = *(void **)(v17 + 104);
          v37 = *(void **)(v17 + 112);
          if (v37 == v36)
          {
            v20[30] = (uint64_t)v35;
            v38 = *(unsigned int *)(v17 + 124);
            v36 = *(void **)(v17 + 112);
            if ((_DWORD)v38)
            {
              memmove(v35, v36, 8 * v38);
              v37 = *(void **)(v17 + 104);
              v36 = *(void **)(v17 + 112);
            }
          }
          else
          {
            v20[30] = (uint64_t)v37;
            *(_QWORD *)(v17 + 112) = v36;
            v37 = v36;
          }
          v20[31] = *(_QWORD *)(v17 + 120);
          *((_DWORD *)v20 + 64) = *(_DWORD *)(v17 + 128);
          *(_QWORD *)(v17 + 120) = 8;
          *(_DWORD *)(v17 + 128) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (v36 != v37)
            free(v36);
          v39 = *(void **)(v17 + 16);
          if (v39 != *(void **)(v17 + 8))
            free(v39);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 - 16), 4);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 - 40), 4);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 - 64), 4);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 - 88), 4);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v17 - 112), 8);
        }
        v17 += 328;
        v18 -= 328;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    v40 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v40 = *(_DWORD *)(a1 + 16);
    if (v40)
    {
      v41 = 0;
      do
      {
        v14[v41] = -4096;
        v41 += 41;
      }
      while (41 * v40 != v41);
    }
  }
  sub_1C51CCF78((uint64_t)v14, v40, *a2, &v42);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v42;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C51CD43C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  const char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  const char *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  const char *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int NumExplicitOperands;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  _DWORD *v136;
  BOOL v137;
  _DWORD *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  llvm::LLVMContext *v159;
  uint64_t Attributes;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v185;
  _DWORD *v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v206;
  _DWORD *v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  unint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v255;
  _DWORD *v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  const char *v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char v283;
  unint64_t v284;
  int v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  unsigned int j;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _DWORD *v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  unint64_t v329;
  char v330;
  unint64_t v331;
  const char *v332;
  unint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  int v345;
  int v346;
  int v347;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  int v368;
  uint64_t v369;
  unint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unint64_t v375;
  char v376;
  unint64_t v377;
  int v378;
  unint64_t v379;
  char v380;
  unint64_t v381;
  uint64_t v382;
  signed int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  const char *v387;
  uint64_t v388;
  unint64_t v389;
  const char *v390;
  unint64_t v391;
  BOOL v392;
  const char *v393;
  const char *v394;
  unint64_t v395;
  const char *v396;
  size_t v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  BOOL v403;
  const char *v404;
  uint64_t v405;
  const char *v406;
  const char *p_dst;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  char *v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  int v419;
  uint64_t v420;
  uint64_t v421;
  const char *v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  const char *v426;
  int v427;
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  signed int *v437;
  uint64_t v438;
  uint64_t v439;
  char v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  _DWORD *v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  unint64_t v454;
  const char *v455;
  unint64_t v456;
  BOOL v457;
  const char *v458;
  unint64_t v459;
  char v460;
  unint64_t v461;
  char v462;
  unint64_t v463;
  const char *v464;
  unsigned int v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  const char *v469;
  const char *v470;
  unsigned int v471;
  const char *v472;
  unsigned int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  const char *v477;
  const char *v478;
  unsigned int v479;
  unint64_t v480;
  char v481;
  int v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  char v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  int v491;
  int v492;
  int v493;
  uint64_t v494;
  char v495;
  char v496;
  unint64_t v497;
  __int128 __p;
  const char *v499;
  __int16 v500;
  const char *__dst;
  uint64_t v502;
  char v503;
  unint64_t v504;
  uint64_t v505;
  const char *p_p;
  __int16 v507;
  const char *v508[2];
  void *v509;
  uint64_t v510;
  _QWORD v511[6];

  v3 = a1;
  v511[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 61))
    sub_1C51CC4F8(a1, "Unexpected generic instruction in a Selected function", a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 40);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0;
  if (v7)
  {
    if ((v6 & 0x400) == 0)
    {
      v31 = a2;
      while ((*(_WORD *)(v31 + 44) & 8) != 0)
      {
        v31 = *(_QWORD *)(v31 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v31 + 16) + 9) & 4) != 0)
          goto LABEL_46;
      }
      goto LABEL_13;
    }
LABEL_46:
    if ((v6 & 0x800) == 0)
    {
      v32 = a2;
      while ((*(_WORD *)(v32 + 44) & 8) != 0)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 9) & 8) != 0)
          goto LABEL_13;
      }
      goto LABEL_8;
    }
  }
  else if ((*(_QWORD *)(v4 + 8) & 0xC00) == 0x400)
  {
LABEL_8:
    if ((_DWORD)v5)
    {
      v8 = *(_BYTE **)(a2 + 32);
      v9 = 32 * v5;
      while (*v8 != 4)
      {
        v8 += 32;
        v9 -= 32;
        if (!v9)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      sub_1C51CC4F8(v3, "Branch instruction is missing a basic block operand or isIndirectBranch property", a2);
    }
  }
LABEL_13:
  v509 = v511;
  v510 = 0x400000000;
  if (v5 >= *(unsigned __int16 *)(v4 + 2))
    v10 = *(unsigned __int16 *)(v4 + 2);
  else
    v10 = v5;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 3;
    do
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + v13);
      if ((v14 - 6) <= 5)
      {
        v15 = v3;
        v16 = (v14 - 6);
        if (v16 + 1 > (unint64_t)v510)
          v17 = v16 + 1;
        else
          v17 = v510;
        sub_1C6154790((uint64_t)&v509, v17);
        v18 = *(_QWORD *)(a2 + 32) + v11;
        if (*(_BYTE *)v18)
        {
          v3 = v15;
          sub_1C51CC4F8(v15, "generic instruction must use register operands", a2);
        }
        else
        {
          v19 = *(_DWORD *)(v18 + 4);
          if ((v19 & 0x80000000) == 0
            || (v20 = *(_QWORD *)(v15 + 48), v21 = v19 & 0x7FFFFFFF, v21 >= *(_DWORD *)(v20 + 432))
            || (v22 = *(_QWORD *)(*(_QWORD *)(v20 + 424) + 8 * v21), (v22 & 0xFFFFFFFFFFFFFFF9) == 0))
          {
            v3 = v15;
            v24 = v15;
            v25 = "Generic instruction is missing a virtual register type";
            v26 = v12;
            v22 = 0;
            goto LABEL_33;
          }
          v23 = *((_QWORD *)v509 + v16);
          if ((v23 & 0xFFFFFFFFFFFFFFF9) == 0)
          {
            *((_QWORD *)v509 + v16) = v22;
            v3 = v15;
            goto LABEL_19;
          }
          v3 = v15;
          if (v23 != v22)
          {
            v24 = v15;
            v25 = "Type mismatch in generic instruction";
            v26 = v12;
LABEL_33:
            sub_1C51CFD64(v24, v25, (unint64_t *)v18, v26, v22);
          }
        }
      }
LABEL_19:
      ++v12;
      v11 += 32;
      v13 += 6;
    }
    while (v10 != v12);
  }
  v27 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v27)
  {
    v28 = 0;
    for (i = 0; i < v27; ++i)
    {
      v30 = *(_QWORD *)(a2 + 32) + v28;
      if (!*(_BYTE *)v30 && (*(_DWORD *)(v30 + 4) - 1) <= 0x3FFFFFFE)
      {
        sub_1C51CFD64(v3, "Generic instruction cannot have physical register", (unint64_t *)v30, i, 0);
        v27 = *(unsigned int *)(a2 + 40);
      }
      v28 += 32;
    }
  }
  else
  {
    v27 = 0;
  }
  if (v27 < *(unsigned __int16 *)(v4 + 2))
    goto LABEL_746;
  v508[0] = 0;
  v508[1] = 0;
  if (((*(uint64_t (**)(_QWORD, unint64_t, const char **))(**(_QWORD **)(v3 + 32) + 1008))(*(_QWORD *)(v3 + 32), a2, v508) & 1) == 0)sub_1C51CC4F8(v3, v508[0], a2);
  v34 = *(unsigned __int16 **)(a2 + 16);
  v35 = *v34;
  v36 = v3;
  switch(*v34)
  {
    case 0xB2u:
    case 0xB3u:
LABEL_66:
      v47 = *(_QWORD *)(v3 + 48);
      v48 = *(_QWORD *)(a2 + 32);
      v49 = *(_DWORD *)(v48 + 4);
      if (v49 < 0 && (v50 = v49 & 0x7FFFFFFF, v50 < *(_DWORD *)(v47 + 432)))
        v51 = *(_QWORD *)(*(_QWORD *)(v47 + 424) + 8 * v50);
      else
        v51 = 0;
      v52 = *(_DWORD *)(v48 + 36);
      if ((v52 & 0x80000000) == 0)
        goto LABEL_746;
      v53 = v52 & 0x7FFFFFFF;
      if (v53 >= *(_DWORD *)(v47 + 432))
        goto LABEL_746;
      if ((v51 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      v54 = *(_QWORD *)(*(_QWORD *)(v47 + 424) + 8 * v53);
      if ((v54 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      v55 = v51;
      if ((v51 & 4) != 0)
      {
        v56 = 3;
        if ((v51 & 1) == 0)
          v56 = 19;
        v57 = v51 >> v56;
        if ((v51 & 2) != 0)
          v55 = (v51 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v57) | 2;
        else
          v55 = v51 & 0x8000000000000000 | (8 * v57) | 1;
      }
      v504 = v55;
      v58 = v54;
      if ((v54 & 4) != 0)
      {
        v59 = 3;
        if ((v54 & 1) == 0)
          v59 = 19;
        v60 = v54 >> v59;
        v61 = v54 & 0x8000000000000000 | (8 * v60) | 1;
        v58 = (v54 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v60) | 2;
        if ((v54 & 2) == 0)
          v58 = v61;
      }
      *(_QWORD *)&__p = v58;
      if ((v55 & 0xFFFFFFFFFFFFFFF9) != 0 && (v55 & 6) == 2 || (v58 & 0xFFFFFFFFFFFFFFF9) != 0 && (v58 & 6) == 2)
        sub_1C51CC4F8(v3, "Generic extend/truncate can not operate on pointers", a2);
      sub_1C51CFF1C(v3, (const char *)v51, v54, a2);
      v63 = sub_1C4825F50(&v504);
      if ((_DWORD)v62 == 1)
      v65 = sub_1C4825F50((unint64_t *)&__p);
      if ((_DWORD)v64 == 1)
      v66 = **(unsigned __int16 **)(a2 + 16);
      if (v66 == 119 || v66 == 179)
      {
        if (v63 < v65)
          goto LABEL_746;
        v45 = "Generic truncate has destination type no smaller than source";
      }
      else
      {
        if (v63 > v65)
          goto LABEL_746;
        v45 = "Generic extend has destination type no larger than source";
      }
      goto LABEL_65;
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xCAu:
    case 0xCCu:
    case 0xCDu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDEu:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
      goto LABEL_746;
    case 0xC1u:
      v206 = *(_QWORD *)(v3 + 48);
      v207 = *(_DWORD **)(a2 + 32);
      v208 = v207[1];
      if (v208 < 0 && (v209 = v208 & 0x7FFFFFFF, v209 < *(_DWORD *)(v206 + 432)))
        v210 = *(_QWORD *)(*(_QWORD *)(v206 + 424) + 8 * v209) & 0xFFFFFFFFFFFFFFF9;
      else
        v210 = 0;
      v285 = v207[9];
      if (v285 < 0 && (v286 = v285 & 0x7FFFFFFF, v286 < *(_DWORD *)(v206 + 432)))
        v287 = *(_QWORD *)(*(_QWORD *)(v206 + 424) + 8 * v286);
      else
        v287 = 0;
      v288 = v207[17];
      if (v288 < 0 && (v289 = v288 & 0x7FFFFFFF, v289 < *(_DWORD *)(v206 + 432)))
        v290 = *(_QWORD *)(*(_QWORD *)(v206 + 424) + 8 * v289);
      else
        v290 = 0;
      if (!v210 || (v287 & 0xFFFFFFFFFFFFFFF9) == 0 || (v290 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      if ((v287 & 4) != 0)
      {
        v460 = 3;
        if ((v287 & 1) == 0)
          v460 = 19;
        v461 = v287 >> v460;
        v291 = v3;
        v287 = (v287 & 2) != 0
             ? (v287 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v461) | 2
             : v287 & 0x8000000000000000 | (8 * v461) | 1;
      }
      else
      {
        v291 = v3;
      }
      if ((v287 & 0xFFFFFFFFFFFFFFF9) == 0 || (v287 & 6) != 2)
        sub_1C51CC4F8(v291, "gep first operand must be a pointer", a2);
      if ((v290 & 4) != 0)
      {
        v462 = 3;
        if ((v290 & 1) == 0)
          v462 = 19;
        v463 = v290 >> v462;
        if ((v290 & 2) != 0)
          v290 = (v290 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v463) | 2;
        else
          v290 = v290 & 0x8000000000000000 | (8 * v463) | 1;
      }
      if ((v290 & 0xFFFFFFFFFFFFFFF9) == 0 || (v290 & 6) != 2)
        goto LABEL_746;
      v45 = "gep offset operand must not be a pointer";
      goto LABEL_65;
    case 0xC2u:
      v185 = *(_QWORD *)(v3 + 48);
      v186 = *(_DWORD **)(a2 + 32);
      v187 = v186[1];
      if (v187 < 0 && (v188 = v187 & 0x7FFFFFFF, v188 < *(_DWORD *)(v185 + 432)))
        v189 = *(_QWORD *)(*(_QWORD *)(v185 + 424) + 8 * v188);
      else
        v189 = 0;
      v276 = v186[9];
      if (v276 < 0 && (v277 = v276 & 0x7FFFFFFF, v277 < *(_DWORD *)(v185 + 432)))
        v278 = *(_QWORD *)(*(_QWORD *)(v185 + 424) + 8 * v277) & 0xFFFFFFFFFFFFFFF9;
      else
        v278 = 0;
      v279 = v186[17];
      if (v279 < 0 && (v280 = v279 & 0x7FFFFFFF, v280 < *(_DWORD *)(v185 + 432)))
        v281 = *(_QWORD *)(*(_QWORD *)(v185 + 424) + 8 * v280);
      else
        v281 = 0;
      if ((v189 & 0xFFFFFFFFFFFFFFF9) == 0 || !v278 || (v281 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      v282 = v189;
      if ((v189 & 4) != 0)
      {
        v283 = 3;
        if ((v189 & 1) == 0)
          v283 = 19;
        v284 = v189 >> v283;
        if ((v189 & 2) != 0)
          v282 = (v189 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v284) | 2;
        else
          v282 = v189 & 0x8000000000000000 | (8 * v284) | 1;
      }
      if ((v282 & 0xFFFFFFFFFFFFFFF9) == 0 || (v282 & 6) != 2)
        sub_1C51CC4F8(v3, "ptrmask result type must be a pointer", a2);
      if ((v281 & 4) == 0)
      {
        if ((v281 & 1) != 0)
          goto LABEL_665;
        goto LABEL_377;
      }
      if ((v281 & 2) != 0)
LABEL_377:
        sub_1C51CC4F8(v3, "ptrmask mask type must be an integer", a2);
LABEL_665:
      v295 = v3;
      v220 = v189;
      v294 = v281;
LABEL_666:
      sub_1C51CFF1C(v295, (const char *)v220, v294, a2);
      goto LABEL_746;
    case 0xC8u:
    case 0xC9u:
      v126 = *(_QWORD *)(a2 + 32);
      NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
      if (!NumExplicitOperands)
        goto LABEL_746;
      v128 = *(_QWORD *)(v36 + 48);
      v129 = *(_DWORD *)(v128 + 432);
      v130 = *(_QWORD *)(v128 + 424);
      v131 = 32 * NumExplicitOperands;
      v132 = (_DWORD *)(v126 + 4);
      while (1)
      {
        if (!*((_BYTE *)v132 - 4))
        {
          v133 = *v132;
          if ((*v132 - 1) >= 0x3FFFFFFF)
          {
            if ((v133 & 0x80000000) == 0)
              break;
            v134 = v133 & 0x7FFFFFFF;
            if (v134 >= v129 || (*(_QWORD *)(v130 + 8 * v134) & 1) == 0)
              break;
          }
        }
        v132 += 8;
        v131 -= 32;
        if (!v131)
          goto LABEL_746;
      }
      v45 = "All register operands must have scalar types";
      goto LABEL_65;
    case 0xCBu:
      v190 = *(_QWORD *)(a2 + 32);
      v191 = *(_DWORD *)(v190 + 4);
      if ((v191 & 0x80000000) == 0
        || (v192 = *(_QWORD *)(v3 + 48), v193 = v191 & 0x7FFFFFFF, v193 >= *(_DWORD *)(v192 + 432))
        || ((v194 = *(_QWORD *)(*(_QWORD *)(v192 + 424) + 8 * v193),
             v195 = v194 & 0xFFFFFFFFFFFFFFF9,
             v196 = v194 & 6,
             v195)
          ? (v197 = v196 == 2)
          : (v197 = 0),
            !v197))
      {
        sub_1C51CC4F8(v3, "G_BRJT src operand 0 must be a pointer type", a2);
        v190 = *(_QWORD *)(a2 + 32);
      }
      if (*(_BYTE *)(v190 + 32) != 8)
      {
        sub_1C51CC4F8(v3, "G_BRJT src operand 1 must be a jump table index", a2);
        v190 = *(_QWORD *)(a2 + 32);
      }
      if (!*(_BYTE *)(v190 + 64))
      {
        v412 = *(_DWORD *)(v190 + 68);
        if ((v412 & 0x80000000) == 0)
          goto LABEL_746;
        v413 = *(_QWORD *)(v3 + 48);
        v414 = v412 & 0x7FFFFFFF;
        if (v414 >= *(_DWORD *)(v413 + 432))
          goto LABEL_746;
        v415 = *(_QWORD *)(*(_QWORD *)(v413 + 424) + 8 * v414);
        v416 = v415 & 0xFFFFFFFFFFFFFFF9;
        v417 = v415 & 6;
        if (!v416 || v417 != 2)
          goto LABEL_746;
      }
      v45 = "G_BRJT src operand 2 must be a scalar reg type";
      goto LABEL_65;
    case 0xCEu:
      v211 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v211 + 96) != 19)
      {
        v45 = "Incorrect mask operand type for G_SHUFFLE_VECTOR";
        goto LABEL_65;
      }
      v212 = *(_QWORD *)(v3 + 48);
      v213 = *(_DWORD *)(v211 + 4);
      if (v213 < 0 && (v214 = v213 & 0x7FFFFFFF, v214 < *(_DWORD *)(v212 + 432)))
        v215 = *(_QWORD *)(*(_QWORD *)(v212 + 424) + 8 * v214);
      else
        v215 = 0;
      v368 = *(_DWORD *)(v211 + 36);
      if (v368 < 0 && (v369 = v368 & 0x7FFFFFFF, v369 < *(_DWORD *)(v212 + 432)))
        v370 = *(_QWORD *)(*(_QWORD *)(v212 + 424) + 8 * v369);
      else
        v370 = 0;
      v371 = *(_DWORD *)(v211 + 68);
      if (v371 < 0 && (v372 = v371 & 0x7FFFFFFF, v372 < *(_DWORD *)(v212 + 432)))
        v373 = *(_QWORD *)(*(_QWORD *)(v212 + 424) + 8 * v372);
      else
        v373 = 0;
      if (v370 != v373)
        sub_1C51CC4F8(v3, "Source operands must be the same type", a2);
      if ((v370 & 0xFFFFFFFFFFFFFFF9) != 0)
        v374 = (v370 >> 2) & 1;
      else
        v374 = 0;
      v375 = v370;
      if (v374 == 1)
      {
        v376 = 3;
        if ((v370 & 1) == 0)
          v376 = 19;
        v377 = v370 >> v376;
        if ((v370 & 2) != 0)
          v375 = (v370 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v377) | 2;
        else
          v375 = v370 & 0x8000000000000000 | (8 * v377) | 1;
      }
      if ((v215 & 0xFFFFFFFFFFFFFFF9) != 0)
        v378 = (v215 >> 2) & 1;
      else
        v378 = 0;
      v379 = v215;
      if (v378 == 1)
      {
        v380 = 3;
        if ((v215 & 1) == 0)
          v380 = 19;
        v381 = v215 >> v380;
        if ((v215 & 2) != 0)
          v379 = (v215 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v381) | 2;
        else
          v379 = v215 & 0x8000000000000000 | (8 * v381) | 1;
      }
      if (v375 != v379)
        sub_1C51CC4F8(v3, "G_SHUFFLE_VECTOR cannot change element type", a2);
      if (v374)
      {
        v382 = 0x800000000000000;
        if ((v370 & 2) == 0)
          v382 = 0x8000000000000;
        if ((v382 & v370) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
        v383 = (v370 >> 2) & 0x1FFFE;
      }
      else
      {
        v383 = 2;
      }
      if (v378)
      {
        v435 = 0x800000000000000;
        if ((v215 & 2) == 0)
          v435 = 0x8000000000000;
        if ((v435 & v215) != 0)
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
        v436 = (unsigned __int16)(v215 >> 3);
      }
      else
      {
        v436 = 1;
      }
      v437 = *(signed int **)(v211 + 112);
      v438 = *(_QWORD *)(v211 + 120);
      if (v436 != (_DWORD)v438)
        sub_1C51CC4F8(v36, "Wrong result type for shufflemask", a2);
      if (v438)
      {
        v439 = 4 * v438;
        do
        {
          if (*v437 >= v383)
            sub_1C51CC4F8(v36, "Out of bounds shuffle index", a2);
          ++v437;
          v439 -= 4;
        }
        while (v439);
      }
      goto LABEL_746;
    case 0xDDu:
LABEL_144:
      v101 = *(_QWORD *)(v3 + 48);
      v102 = *(_QWORD *)(a2 + 32);
      v103 = *(_DWORD *)(v102 + 4);
      if (v103 < 0 && (v104 = v103 & 0x7FFFFFFF, v104 < *(_DWORD *)(v101 + 432)))
        v105 = *(_QWORD *)(*(_QWORD *)(v101 + 424) + 8 * v104);
      else
        v105 = 0;
      v111 = *(_DWORD *)(v102 + 36);
      if ((v111 & 0x80000000) == 0)
        goto LABEL_746;
      v112 = v111 & 0x7FFFFFFF;
      if (v112 >= *(_DWORD *)(v101 + 432))
        goto LABEL_746;
      if ((v105 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      v113 = *(_QWORD *)(*(_QWORD *)(v101 + 424) + 8 * v112);
      if ((v113 & 0xFFFFFFFFFFFFFFF9) == 0)
        goto LABEL_746;
      sub_1C51CFF1C(v3, (const char *)v105, v113, a2);
      if ((v105 & 4) != 0)
      {
        v114 = 3;
        if ((v105 & 1) == 0)
          v114 = 19;
        v115 = v105 >> v114;
        if ((v105 & 2) != 0)
          v105 = (v105 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v115) | 2;
        else
          v105 = v105 & 0x8000000000000000 | (8 * v115) | 1;
      }
      v116 = 3;
      if ((v113 & 1) == 0)
        v116 = 19;
      v117 = v113 >> v116;
      v118 = v113 & 0x8000000000000000 | (8 * v117) | 1;
      v119 = (v113 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v117) | 2;
      if ((v113 & 2) == 0)
        v119 = v118;
      if ((v113 & 4) != 0)
        v113 = v119;
      v120 = **(unsigned __int16 **)(a2 + 16);
      if (v120 == 80)
      {
        if ((v113 & 0xFFFFFFFFFFFFFFF9) == 0 || (v113 & 2) == 0 || (v113 & 4) != 0)
          sub_1C51CC4F8(v3, "ptrtoint source type must be a pointer", a2);
        if ((v105 & 0xFFFFFFFFFFFFFFF9) != 0 && (v105 & 6) == 2)
        {
          v45 = "ptrtoint result type must not be a pointer";
          goto LABEL_65;
        }
      }
      else if (v120 == 81)
      {
        if ((v105 & 0xFFFFFFFFFFFFFFF9) == 0 || (v105 & 6) != 2)
          sub_1C51CC4F8(v3, "inttoptr result type must be a pointer", a2);
        if ((v113 & 0xFFFFFFFFFFFFFFF9) != 0 && (v113 & 6) == 2)
        {
          v45 = "inttoptr source type must not be a pointer";
          goto LABEL_65;
        }
      }
      else
      {
        if ((v113 & 0xFFFFFFFFFFFFFFF9) == 0
          || (v113 & 2) == 0
          || (v113 & 4) != 0
          || (v105 & 0xFFFFFFFFFFFFFFF9) == 0
          || (v105 & 6) != 2)
        {
          v45 = "addrspacecast types must be pointers";
          goto LABEL_65;
        }
        v481 = 35;
        if ((v105 & 4) == 0)
          v481 = 19;
        if ((((v113 >> 19) ^ (v105 >> v481)) & 0xFFFFFF) == 0)
        {
          v45 = "addrspacecast must convert different address spaces";
          goto LABEL_65;
        }
      }
      goto LABEL_746;
    case 0xDFu:
      v198 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v198 + 32) != 8)
      {
        sub_1C51CC4F8(v3, "G_JUMP_TABLE source operand must be a jump table index", a2);
        v198 = *(_QWORD *)(a2 + 32);
      }
      v199 = *(_DWORD *)(v198 + 4);
      if (v199 < 0)
      {
        v200 = *(_QWORD *)(v3 + 48);
        v201 = v199 & 0x7FFFFFFF;
        if (v201 < *(_DWORD *)(v200 + 432))
        {
          v202 = *(_QWORD *)(*(_QWORD *)(v200 + 424) + 8 * v201);
          v203 = v202 & 0xFFFFFFFFFFFFFFF9;
          v204 = v202 & 6;
          if (v203 && v204 == 2)
            goto LABEL_746;
        }
      }
      v45 = "G_JUMP_TABLE dest operand must have a pointer type";
      goto LABEL_65;
    case 0xE0u:
      v175 = *(_QWORD *)(a2 + 32);
      v46 = v3;
      if (*(_BYTE *)v175)
        goto LABEL_258;
      v176 = *(_DWORD *)(v175 + 4);
      if ((v176 & 0x80000000) == 0)
        goto LABEL_258;
      v177 = *(_QWORD *)(v3 + 48);
      v178 = v176 & 0x7FFFFFFF;
      v179 = *(_DWORD *)(v177 + 432);
      if (v178 >= v179)
        goto LABEL_258;
      v180 = *(_QWORD *)(v177 + 424);
      v181 = *(_QWORD *)(v180 + 8 * v178);
      v182 = v181 & 0xFFFFFFFFFFFFFFF9;
      v183 = v181 & 6;
      if (!v182 || v183 != 2)
      {
LABEL_258:
        v45 = "dst operand 0 must be a pointer type";
        goto LABEL_745;
      }
      if (*(_BYTE *)(v175 + 32)
        || (v493 = *(_DWORD *)(v175 + 36), (v493 & 0x80000000) == 0)
        || (v494 = v493 & 0x7FFFFFFF, v494 >= v179)
        || (*(_QWORD *)(v180 + 8 * v494) & 1) == 0)
      {
        v45 = "src operand 1 must be a scalar reg type";
        goto LABEL_745;
      }
      if (*(_BYTE *)(v175 + 64) == 1)
        goto LABEL_746;
      v45 = "src operand 2 must be an immediate type";
      goto LABEL_65;
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
      v84 = *(_QWORD *)(a2 + 48);
      if (v84 < 8)
        goto LABEL_538;
      if ((v84 & 7) != 0)
      {
        if ((*(_QWORD *)(a2 + 48) & 7) == 3)
        {
          v85 = v84 & 0xFFFFFFFFFFFFFFF8;
          if ((v84 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_DWORD *)v85 == 2)
          {
            v86 = *(_QWORD *)(v85 + 8);
            if ((*(_WORD *)(v86 + 32) & 3) == 2)
            {
              v87 = *(_QWORD *)(v85 + 16);
              if ((*(_WORD *)(v87 + 32) & 3) == 1)
              {
                v89 = *(_QWORD *)(v86 + 24);
                v88 = (unint64_t *)(v86 + 24);
                if ((v89 & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  v91 = (unint64_t)(sub_1C4825F50(v88) + 7) >> 3;
                  if ((_DWORD)v90 == 1)
                  v87 = *(_QWORD *)(v85 + 16);
                }
                else
                {
                  v91 = -1;
                }
                v93 = *(_QWORD *)(v87 + 24);
                v92 = (unint64_t *)(v87 + 24);
                if ((v93 & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  v95 = (unint64_t)(sub_1C4825F50(v92) + 7) >> 3;
                  if ((_DWORD)v94 == 1)
                }
                else
                {
                  v95 = -1;
                }
                if (v91 != v95)
                  sub_1C51CC4F8(v36, "inconsistent memory operand sizes", a2);
                v96 = *(_QWORD *)(v36 + 48);
                v97 = *(_QWORD *)(a2 + 32);
                v98 = *(_DWORD *)(v97 + 4);
                if (v98 < 0 && (v99 = v98 & 0x7FFFFFFF, v99 < *(_DWORD *)(v96 + 432)))
                  v100 = *(_QWORD *)(*(_QWORD *)(v96 + 424) + 8 * v99);
                else
                  v100 = 0;
                v482 = *(_DWORD *)(v97 + 36);
                if (v482 < 0 && (v483 = v482 & 0x7FFFFFFF, v483 < *(_DWORD *)(v96 + 432)))
                  v484 = *(_QWORD *)(*(_QWORD *)(v96 + 424) + 8 * v483);
                else
                  v484 = 0;
                if ((v100 & 0xFFFFFFFFFFFFFFF9) == 0
                  || (v100 & 2) == 0
                  || (v100 & 4) != 0
                  || (v484 & 0xFFFFFFFFFFFFFFF9) == 0
                  || (v484 & 2) == 0
                  || (v484 & 4) != 0)
                {
                  v45 = "memory instruction operand must be a pointer";
                  goto LABEL_65;
                }
                if (((v100 >> 19) & 0xFFFFFF) != *(_DWORD *)(*(_QWORD *)(v85 + 8) + 16))
                  sub_1C51CC4F8(v36, "inconsistent store address space", a2);
                if (((v484 >> 19) & 0xFFFFFF) != *(_DWORD *)(*(_QWORD *)(v85 + 16) + 16))
                  sub_1C51CC4F8(v36, "inconsistent load address space", a2);
                if (v35 != 235)
                {
                  v485 = *(_QWORD *)(a2 + 32);
                  if (*(_BYTE *)(v485 + 96) != 1 || *(_QWORD *)(v485 + 112) >= 2uLL)
                  {
                    v45 = "'tail' flag (operand 3) must be an immediate 0 or 1";
                    goto LABEL_65;
                  }
                }
                goto LABEL_746;
              }
            }
            v45 = "wrong memory operand types";
LABEL_539:
            v46 = v3;
            goto LABEL_745;
          }
        }
      }
      else
      {
        *(_QWORD *)(a2 + 48) = v84 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_538:
      v45 = "memcpy/memmove must have 2 memory operands";
      goto LABEL_539;
    case 0xEDu:
    case 0xEEu:
      v136 = (_DWORD *)(a2 + 48);
      v135 = *(_QWORD *)(a2 + 48);
      if (v135 < 8)
      {
        v136 = 0;
        v137 = 0;
      }
      else if ((v135 & 7) != 0)
      {
        v137 = 0;
        v136 = 0;
        if ((*(_QWORD *)(a2 + 48) & 7) == 3)
        {
          v138 = (_DWORD *)(v135 & 0xFFFFFFFFFFFFFFF8);
          if (v138)
          {
            v137 = *v138 == 1;
            v136 = v138 + 2;
          }
        }
      }
      else
      {
        *(_QWORD *)v136 = v135 & 0xFFFFFFFFFFFFFFF8;
        v137 = 1;
      }
      if (v35 == 237)
        v396 = "memset";
      else
        v396 = "bzero";
      if (v35 == 237)
        v397 = 6;
      else
        v397 = 5;
      v503 = v397;
      memcpy(&__dst, v396, v397);
      *(_BYTE *)((unint64_t)&__dst | v397) = 0;
      if (!v137)
      {
        p_dst = __dst;
        if (v503 >= 0)
          p_dst = (const char *)&__dst;
        v408 = v503 & 0x7F;
        if (v503 < 0)
          v408 = v502;
        v507 = 773;
        v504 = (unint64_t)p_dst;
        v505 = v408;
        v406 = " must have 1 memory operand";
        goto LABEL_630;
      }
      if ((*(_WORD *)(*(_QWORD *)v136 + 32) & 3) != 2)
      {
        v409 = (const char *)&__dst;
        if (v503 < 0)
          v409 = __dst;
        v410 = v503 & 0x7F;
        if (v503 < 0)
          v410 = v502;
        v507 = 773;
        v504 = (unint64_t)v409;
        v505 = v410;
        v406 = " memory operand must be a store";
        goto LABEL_630;
      }
      v398 = *(_QWORD *)(a2 + 32);
      v399 = *(_DWORD *)(v398 + 4);
      if ((v399 & 0x80000000) == 0
        || (v400 = *(_QWORD *)(v36 + 48), v401 = v399 & 0x7FFFFFFF, v401 >= *(_DWORD *)(v400 + 432))
        || ((v402 = *(_QWORD *)(*(_QWORD *)(v400 + 424) + 8 * v401), (v402 & 0xFFFFFFFFFFFFFFF9) != 0)
          ? (v403 = (v402 & 6) == 2)
          : (v403 = 0),
            !v403))
      {
        v404 = (const char *)&__dst;
        if (v503 < 0)
          v404 = __dst;
        v405 = v503 & 0x7F;
        if (v503 < 0)
          v405 = v502;
        v507 = 773;
        v504 = (unint64_t)v404;
        v505 = v405;
        v406 = " operand must be a pointer";
LABEL_630:
        p_p = v406;
        sub_1C51CFEB0(v36, (llvm::Twine *)&v504, a2);
        goto LABEL_631;
      }
      v486 = 35;
      if ((v402 & 4) == 0)
        v486 = 19;
      if (((v402 >> v486) & 0xFFFFFF) != *(_DWORD *)(*(_QWORD *)v136 + 16))
      {
        v487 = &__dst;
        if (v503 < 0)
          v487 = __dst;
        v488 = v503 & 0x7F;
        if (v503 < 0)
          v488 = v502;
        v500 = 773;
        *(_QWORD *)&__p = v487;
        *((_QWORD *)&__p + 1) = v488;
        v499 = " address space";
        v504 = (unint64_t)"inconsistent ";
        p_p = (const char *)&__p;
        v507 = 515;
        sub_1C51CFEB0(v36, (llvm::Twine *)&v504, a2);
        v398 = *(_QWORD *)(a2 + 32);
      }
      if (*(_BYTE *)(v398 + 32 * (*(_DWORD *)(a2 + 40) - 1)) != 1
        || *(_QWORD *)(v398 + 32 * (*(_DWORD *)(a2 + 40) - 1) + 16) >= 2uLL)
      {
        sub_1C51CC4F8(v36, "'tail' flag (last operand) must be an immediate 0 or 1", a2);
      }
LABEL_631:
      if ((v503 & 0x80000000) == 0)
        goto LABEL_746;
      v411 = (char *)__dst;
      goto LABEL_663;
    case 0xEFu:
    case 0xF0u:
      v121 = *(_QWORD *)(v3 + 48);
      v122 = *(_DWORD **)(a2 + 32);
      v123 = v122[1];
      if (v123 < 0 && (v124 = v123 & 0x7FFFFFFF, v124 < *(_DWORD *)(v121 + 432)))
        v125 = *(_QWORD *)(*(_QWORD *)(v121 + 424) + 8 * v124) & 1;
      else
        v125 = 0;
      v162 = v122[9];
      if (v162 < 0 && (v163 = v162 & 0x7FFFFFFF, v163 < *(_DWORD *)(v121 + 432)))
        v164 = *(_QWORD *)(*(_QWORD *)(v121 + 424) + 8 * v163) & 1;
      else
        v164 = 0;
      v165 = v122[17];
      if (v165 < 0 && (v166 = v165 & 0x7FFFFFFF, v166 < *(_DWORD *)(v121 + 432)))
        v167 = *(_QWORD *)(*(_QWORD *)(v121 + 424) + 8 * v166);
      else
        v167 = 0;
      if (!v125)
        sub_1C51CC4F8(v36, "Vector reduction requires a scalar destination type", a2);
      if (!v164)
        sub_1C51CC4F8(v36, "Sequential FADD/FMUL vector reduction requires a scalar 1st operand", a2);
      if ((v167 & 0xFFFFFFFFFFFFFFF9) != 0 && (v167 & 4) != 0)
        goto LABEL_746;
      v45 = "Sequential FADD/FMUL vector reduction must have a vector 2nd operand";
      goto LABEL_65;
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
      v42 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v42 < 0)
      {
        v43 = *(_QWORD *)(v3 + 48);
        v44 = v42 & 0x7FFFFFFF;
        if (v44 < *(_DWORD *)(v43 + 432) && (*(_QWORD *)(*(_QWORD *)(v43 + 424) + 8 * v44) & 1) != 0)
          goto LABEL_746;
      }
      v45 = "Vector reduction requires a scalar destination type";
      goto LABEL_65;
    case 0xFEu:
    case 0xFFu:
      v139 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v139 & 0x80000000) == 0)
        goto LABEL_746;
      v140 = *(_QWORD *)(v3 + 48);
      v141 = v139 & 0x7FFFFFFF;
      if (v141 >= *(_DWORD *)(v140 + 432))
        goto LABEL_746;
      v142 = *(_QWORD *)(*(_QWORD *)(v140 + 424) + 8 * v141);
      v143 = v142 & 0xFFFFFFFFFFFFFFF9;
      v144 = v142 & 4;
      if (!v143 || v144 == 0)
        goto LABEL_746;
      v45 = "Bitfield extraction is not supported on vectors";
      goto LABEL_65;
    default:
      switch(*v34)
      {
        case 0x45u:
          v242 = *(_QWORD *)(a2 + 32);
          v243 = *(_DWORD *)(v242 + 4);
          if ((v243 & 0x80000000) == 0)
            goto LABEL_353;
          v244 = *(_QWORD *)(v3 + 48);
          v245 = v243 & 0x7FFFFFFF;
          v246 = *(_DWORD *)(v244 + 432);
          if (v245 >= v246)
            goto LABEL_353;
          v247 = *(_QWORD *)(v244 + 424);
          v248 = *(_QWORD *)(v247 + 8 * v245);
          if ((v248 & 0xFFFFFFFFFFFFFFF9) == 0)
            goto LABEL_353;
          v249 = *(unsigned int *)(a2 + 40);
          if ((_DWORD)v249 == 1)
            goto LABEL_746;
          v250 = 32 * v249 - 32;
          v251 = (_DWORD *)(v242 + 36);
          while (1)
          {
            if (!*((_BYTE *)v251 - 4))
            {
              if ((*v251 & 0x80000000) == 0)
                break;
              v252 = *v251 & 0x7FFFFFFF;
              if (v252 >= v246)
                break;
              v253 = *(_QWORD *)(v247 + 8 * v252);
              if (v253 != v248 || (v253 & 0xFFFFFFFFFFFFFFF9) == 0)
                break;
            }
            v251 += 8;
            v250 -= 32;
            if (!v250)
              goto LABEL_746;
          }
LABEL_353:
          v45 = "Generic Instruction G_PHI has operands with incompatible/missing types";
          goto LABEL_65;
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x53u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
        case 0x61u:
        case 0x62u:
        case 0x63u:
        case 0x64u:
        case 0x65u:
        case 0x66u:
        case 0x67u:
        case 0x68u:
        case 0x69u:
        case 0x6Au:
        case 0x6Bu:
        case 0x6Cu:
        case 0x6Du:
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
        case 0x71u:
        case 0x72u:
        case 0x73u:
        case 0x7Au:
        case 0x7Bu:
        case 0x82u:
        case 0x83u:
          goto LABEL_746;
        case 0x49u:
          v240 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(v240 + 32))
          {
            v45 = "extract source must be a register";
            goto LABEL_65;
          }
          if (*(_BYTE *)(v240 + 64) != 1)
          {
            v45 = "extract offset must be a constant";
            goto LABEL_744;
          }
          v419 = *(_DWORD *)(v240 + 4);
          if (v419 < 0
            && (v420 = *(_QWORD *)(v3 + 48), v421 = v419 & 0x7FFFFFFF, v421 < *(_DWORD *)(v420 + 432)))
          {
            v422 = *(const char **)(*(_QWORD *)(v420 + 424) + 8 * v421);
          }
          else
          {
            v422 = 0;
          }
          v504 = (unint64_t)v422;
          v465 = sub_1C4825F50(&v504);
          if ((_DWORD)v464 == 1)
          v466 = *(_DWORD *)(v240 + 36);
          if (v466 < 0
            && (v467 = *(_QWORD *)(v3 + 48), v468 = v466 & 0x7FFFFFFF, v468 < *(_DWORD *)(v467 + 432)))
          {
            v469 = *(const char **)(*(_QWORD *)(v467 + 424) + 8 * v468);
          }
          else
          {
            v469 = 0;
          }
          v504 = (unint64_t)v469;
          v471 = sub_1C4825F50(&v504);
          if ((_DWORD)v470 == 1)
          if (v471 == v465)
            sub_1C51CC4F8(v3, "extract source must be larger than result", a2);
          if (*(_QWORD *)(v240 + 80) + v465 <= (uint64_t)v471)
            goto LABEL_746;
          v45 = "extract reads past end of register";
          goto LABEL_65;
        case 0x4Au:
          v260 = *(_QWORD *)(v3 + 48);
          v261 = *(_QWORD *)(a2 + 32);
          v262 = *(_DWORD *)(v261 + 4);
          if (v262 < 0 && (v263 = v262 & 0x7FFFFFFF, v263 < *(_DWORD *)(v260 + 432)))
            v264 = *(const char **)(*(_QWORD *)(v260 + 424) + 8 * v263);
          else
            v264 = 0;
          v504 = (unint64_t)v264;
          v334 = *(_DWORD *)(a2 + 40);
          v335 = *(_DWORD *)(v261 + 32 * (v334 - 1) + 4);
          if (v335 < 0 && (v336 = v335 & 0x7FFFFFFF, v336 < *(_DWORD *)(v260 + 432)))
            v337 = *(_QWORD *)(*(_QWORD *)(v260 + 424) + 8 * v336);
          else
            v337 = 0;
          *(_QWORD *)&__p = v337;
          if (v334 != 1)
          {
            v338 = 0;
            v339 = 4;
            do
            {
              v340 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v339);
              if (v340 < 0
                && (v341 = *(_QWORD *)(v3 + 48), v342 = v340 & 0x7FFFFFFF, v342 < *(_DWORD *)(v341 + 432)))
              {
                v343 = *(const char **)(*(_QWORD *)(v341 + 424) + 8 * v342);
              }
              else
              {
                v343 = 0;
              }
              if (v343 != v264)
              {
                sub_1C51CC4F8(v3, "G_UNMERGE_VALUES destination types do not match", a2);
                v334 = *(_DWORD *)(a2 + 40);
              }
              ++v338;
              v339 += 32;
            }
            while (v338 < (v334 - 1));
          }
          v344 = sub_1C4825F50((unint64_t *)&__p);
          v346 = v345;
          if (v344 == sub_1C4825F50(&v504) * (*(_DWORD *)(a2 + 40) - 1) && v346 == v347)
            goto LABEL_746;
          v45 = "G_UNMERGE_VALUES source operand does not cover dest operands";
          goto LABEL_65;
        case 0x4Bu:
          v241 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(v241 + 64))
          {
            v45 = "insert source must be a register";
            goto LABEL_65;
          }
          if (*(_BYTE *)(v241 + 96) != 1)
          {
            v45 = "insert offset must be a constant";
            goto LABEL_744;
          }
          v423 = *(_DWORD *)(v241 + 4);
          if (v423 < 0
            && (v424 = *(_QWORD *)(v3 + 48), v425 = v423 & 0x7FFFFFFF, v425 < *(_DWORD *)(v424 + 432)))
          {
            v426 = *(const char **)(*(_QWORD *)(v424 + 424) + 8 * v425);
          }
          else
          {
            v426 = 0;
          }
          v504 = (unint64_t)v426;
          v473 = sub_1C4825F50(&v504);
          if ((_DWORD)v472 == 1)
          v474 = *(_DWORD *)(v241 + 68);
          if (v474 < 0
            && (v475 = *(_QWORD *)(v3 + 48), v476 = v474 & 0x7FFFFFFF, v476 < *(_DWORD *)(v475 + 432)))
          {
            v477 = *(const char **)(*(_QWORD *)(v475 + 424) + 8 * v476);
          }
          else
          {
            v477 = 0;
          }
          v504 = (unint64_t)v477;
          v479 = sub_1C4825F50(&v504);
          if ((_DWORD)v478 == 1)
          if (v473 <= v479)
            sub_1C51CC4F8(v3, "inserted size must be smaller than total register", a2);
          if (*(_QWORD *)(v241 + 112) + v479 <= (uint64_t)v473)
            goto LABEL_746;
          v45 = "insert writes past end of register";
          goto LABEL_65;
        case 0x4Cu:
          v230 = *(_QWORD *)(v3 + 48);
          v231 = *(_QWORD *)(a2 + 32);
          v232 = *(_DWORD *)(v231 + 4);
          if (v232 < 0 && (v233 = v232 & 0x7FFFFFFF, v233 < *(_DWORD *)(v230 + 432)))
            v234 = *(_QWORD *)(*(_QWORD *)(v230 + 424) + 8 * v233);
          else
            v234 = 0;
          v504 = v234;
          v299 = *(_DWORD *)(v231 + 36);
          if (v299 < 0 && (v300 = v299 & 0x7FFFFFFF, v300 < *(_DWORD *)(v230 + 432)))
            v301 = *(_QWORD *)(*(_QWORD *)(v230 + 424) + 8 * v300);
          else
            v301 = 0;
          *(_QWORD *)&__p = v301;
          if ((v234 & 0xFFFFFFFFFFFFFFF9) != 0 && (v234 & 4) != 0
            || (v301 & 0xFFFFFFFFFFFFFFF9) != 0 && (v301 & 4) != 0)
          {
            sub_1C51CC4F8(v3, "G_MERGE_VALUES cannot operate on vectors", a2);
          }
          v302 = *(_DWORD *)(a2 + 40);
          v303 = sub_1C4825F50(&v504);
          v305 = v304;
          if (v303 != sub_1C4825F50((unint64_t *)&__p) * (v302 - 1) || v305 != v306)
            sub_1C51CC4F8(v3, "G_MERGE_VALUES result size is inconsistent", a2);
          if (v302 != 2)
          {
            for (j = 2; j != v302; ++j)
            {
              v308 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * j + 4);
              if (v308 < 0
                && (v309 = *(_QWORD *)(v3 + 48), v310 = v308 & 0x7FFFFFFF, v310 < *(_DWORD *)(v309 + 432)))
              {
                v311 = *(_QWORD *)(*(_QWORD *)(v309 + 424) + 8 * v310);
              }
              else
              {
                v311 = 0;
              }
              if (v311 != (_QWORD)__p)
                sub_1C51CC4F8(v3, "G_MERGE_VALUES source types do not match", a2);
            }
          }
          goto LABEL_746;
        case 0x4Du:
          v223 = *(_QWORD *)(v3 + 48);
          v224 = *(_QWORD *)(a2 + 32);
          v225 = *(_DWORD *)(v224 + 4);
          if (v225 < 0 && (v226 = v225 & 0x7FFFFFFF, v226 < *(_DWORD *)(v223 + 432)))
            v227 = *(_QWORD *)(*(_QWORD *)(v223 + 424) + 8 * v226);
          else
            v227 = 0;
          v296 = *(_DWORD *)(v224 + 36);
          if (v296 < 0 && (v297 = v296 & 0x7FFFFFFF, v297 < *(_DWORD *)(v223 + 432)))
            v298 = *(_QWORD *)(*(_QWORD *)(v223 + 424) + 8 * v297);
          else
            v298 = 0;
          if ((v227 & 0xFFFFFFFFFFFFFFF9) == 0
            || (v227 & 4) == 0
            || (v298 & 0xFFFFFFFFFFFFFFF9) != 0 && (v298 & 4) != 0)
          {
            v45 = "G_BUILD_VECTOR must produce a vector from scalar operands";
            goto LABEL_744;
          }
          v440 = 3;
          if ((v227 & 1) == 0)
            v440 = 19;
          v441 = v227 >> v440;
          if ((v227 & 2) != 0)
            v442 = (v227 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v441) | 2;
          else
            v442 = v227 & 0x8000000000000000 | (8 * v441) | 1;
          if (v442 != v298)
            sub_1C51CC4F8(v3, "G_BUILD_VECTOR result element type must match source type", a2);
          v443 = 0x800000000000000;
          if ((v227 & 2) == 0)
            v443 = 0x8000000000000;
          if ((v443 & v227) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
          v444 = *(_DWORD *)(a2 + 40);
          if (v444 - 1 != (unsigned __int16)(v227 >> 3))
          {
            sub_1C51CC4F8(v3, "G_BUILD_VECTOR must have an operand for each elemement", a2);
            v444 = *(_DWORD *)(a2 + 40);
          }
          if (v444 != 2)
          {
            v445 = 32 * v444 - 64;
            v446 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
            do
            {
              v447 = *(_QWORD *)(v3 + 48);
              v448 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
              if (v448 < 0 && (v449 = v448 & 0x7FFFFFFF, v449 < *(_DWORD *)(v447 + 432)))
                v450 = *(_QWORD *)(*(_QWORD *)(v447 + 424) + 8 * v449);
              else
                v450 = 0;
              if ((*v446 & 0x80000000) != 0
                && (v451 = *v446 & 0x7FFFFFFF, v451 < *(_DWORD *)(v447 + 432)))
              {
                v452 = *(_QWORD *)(*(_QWORD *)(v447 + 424) + 8 * v451);
              }
              else
              {
                v452 = 0;
              }
              if (v450 != v452)
                sub_1C51CC4F8(v3, "G_BUILD_VECTOR source operand types are not homogeneous", a2);
              v446 += 8;
              v445 -= 32;
            }
            while (v445);
          }
          goto LABEL_746;
        case 0x4Eu:
          v255 = *(_QWORD *)(v3 + 48);
          v256 = *(_DWORD **)(a2 + 32);
          v257 = v256[1];
          if (v257 < 0 && (v258 = v257 & 0x7FFFFFFF, v258 < *(_DWORD *)(v255 + 432)))
            v259 = *(_QWORD *)(*(_QWORD *)(v255 + 424) + 8 * v258);
          else
            v259 = 0;
          v316 = v256[9];
          if (v316 < 0 && (v317 = v316 & 0x7FFFFFFF, v317 < *(_DWORD *)(v255 + 432)))
            v318 = *(_QWORD *)(*(_QWORD *)(v255 + 424) + 8 * v317);
          else
            v318 = 0;
          v504 = v318;
          if ((v259 & 0xFFFFFFFFFFFFFFF9) == 0
            || (v259 & 4) == 0
            || (v318 & 0xFFFFFFFFFFFFFFF9) != 0 && (v318 & 4) != 0)
          {
            sub_1C51CC4F8(v3, "G_BUILD_VECTOR_TRUNC must produce a vector from scalar operands", a2);
            v256 = *(_DWORD **)(a2 + 32);
          }
          v319 = *(unsigned int *)(a2 + 40);
          if ((_DWORD)v319 != 2)
          {
            v320 = 32 * v319 - 64;
            v321 = v256 + 17;
            do
            {
              v322 = *(_QWORD *)(v3 + 48);
              v323 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
              if (v323 < 0 && (v324 = v323 & 0x7FFFFFFF, v324 < *(_DWORD *)(v322 + 432)))
                v325 = *(_QWORD *)(*(_QWORD *)(v322 + 424) + 8 * v324);
              else
                v325 = 0;
              if ((*v321 & 0x80000000) != 0
                && (v326 = *v321 & 0x7FFFFFFF, v326 < *(_DWORD *)(v322 + 432)))
              {
                v327 = *(_QWORD *)(*(_QWORD *)(v322 + 424) + 8 * v326);
              }
              else
              {
                v327 = 0;
              }
              if (v325 != v327)
                sub_1C51CC4F8(v3, "G_BUILD_VECTOR_TRUNC source operand types are not homogeneous", a2);
              v321 += 8;
              v320 -= 32;
            }
            while (v320);
          }
          v329 = sub_1C4825F50(&v504);
          if ((_DWORD)v328 == 1)
          {
            if ((v259 & 2) == 0)
              goto LABEL_467;
          }
          else if ((v259 & 2) == 0)
          {
LABEL_467:
            v330 = 3;
            if ((v259 & 1) == 0)
              v330 = 19;
            v331 = v259 & 0x8000000000000000 | (8 * (v259 >> v330)) | 1;
            goto LABEL_470;
          }
          v495 = 35;
          v496 = 19;
          if ((v259 & 4) == 0)
            v495 = 19;
          v497 = v259 >> v495;
          if ((v259 & 4) == 0)
            v496 = 3;
          if ((v259 & 1) != 0)
            v496 = 3;
          v331 = (8 * (unsigned __int16)(v259 >> v496)) & 0xFFFFF8000007FFFFLL | ((v497 & 0xFFFFFF) << 19) | 2;
LABEL_470:
          *(_QWORD *)&__p = v331;
          v333 = sub_1C4825F50((unint64_t *)&__p);
          if ((_DWORD)v332 == 1)
          if (v329 <= v333)
          {
            v45 = "G_BUILD_VECTOR_TRUNC source operand types are not larger than dest elt type";
LABEL_65:
            v46 = v36;
LABEL_745:
            sub_1C51CC4F8(v46, v45, a2);
          }
LABEL_746:
          if (v509 != v511)
            free(v509);
          return;
        case 0x4Fu:
          v265 = *(_QWORD *)(v3 + 48);
          v266 = *(_QWORD *)(a2 + 32);
          v267 = *(_DWORD *)(v266 + 4);
          if (v267 < 0 && (v268 = v267 & 0x7FFFFFFF, v268 < *(_DWORD *)(v265 + 432)))
            v269 = *(_QWORD *)(*(_QWORD *)(v265 + 424) + 8 * v268);
          else
            v269 = 0;
          v349 = *(_DWORD *)(v266 + 36);
          if (v349 < 0 && (v350 = v349 & 0x7FFFFFFF, v350 < *(_DWORD *)(v265 + 432)))
            v351 = *(_QWORD *)(*(_QWORD *)(v265 + 424) + 8 * v350);
          else
            v351 = 0;
          if ((v269 & 0xFFFFFFFFFFFFFFF9) == 0
            || (v269 & 4) == 0
            || (v351 & 0xFFFFFFFFFFFFFFF9) == 0
            || (v351 & 4) == 0)
          {
            sub_1C51CC4F8(v3, "G_CONCAT_VECTOR requires vector source and destination operands", a2);
          }
          v352 = *(unsigned int *)(a2 + 40);
          if (v352 >= 3
            || (sub_1C51CC4F8(v3, "G_CONCAT_VECTOR requires at least 2 source operands", a2),
                v352 = *(unsigned int *)(a2 + 40),
                (_DWORD)v352 != 2))
          {
            v353 = *(_QWORD *)(a2 + 32);
            v354 = v353 + 32 * v352;
            v355 = v353 + 64;
            do
            {
              v356 = *(_QWORD *)(v3 + 48);
              v357 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
              if (v357 < 0 && (v358 = v357 & 0x7FFFFFFF, v358 < *(_DWORD *)(v356 + 432)))
                v359 = *(_QWORD *)(*(_QWORD *)(v356 + 424) + 8 * v358);
              else
                v359 = 0;
              v360 = *(_DWORD *)(v355 + 4);
              if (v360 < 0 && (v361 = v360 & 0x7FFFFFFF, v361 < *(_DWORD *)(v356 + 432)))
                v362 = *(_QWORD *)(*(_QWORD *)(v356 + 424) + 8 * v361);
              else
                v362 = 0;
              if (v359 != v362)
                sub_1C51CC4F8(v3, "G_CONCAT_VECTOR source operand types are not homogeneous", a2);
              v355 += 32;
            }
            while (v355 != v354);
          }
          if ((v269 & 2) != 0)
            v363 = 0x800000000000000;
          else
            v363 = 0x8000000000000;
          if ((v363 & v269) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
          if ((v351 & 2) != 0)
            v364 = 0x800000000000000;
          else
            v364 = 0x8000000000000;
          if ((v364 & v351) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
          if ((*(_DWORD *)(a2 + 40) - 1) * (unsigned __int16)(v351 >> 3) == (unsigned __int16)(v269 >> 3))
            goto LABEL_746;
          v45 = "G_CONCAT_VECTOR num dest and source elements should match";
          goto LABEL_65;
        case 0x50u:
        case 0x51u:
          goto LABEL_144;
        case 0x52u:
          v235 = *(_QWORD *)(v3 + 48);
          v236 = *(_QWORD *)(a2 + 32);
          v237 = *(_DWORD *)(v236 + 4);
          if (v237 < 0 && (v238 = v237 & 0x7FFFFFFF, v238 < *(_DWORD *)(v235 + 432)))
            v239 = *(_QWORD *)(*(_QWORD *)(v235 + 424) + 8 * v238);
          else
            v239 = 0;
          v504 = v239;
          v312 = *(_DWORD *)(v236 + 36);
          if ((v312 & 0x80000000) == 0)
            goto LABEL_746;
          v313 = v312 & 0x7FFFFFFF;
          if (v313 >= *(_DWORD *)(v235 + 432))
            goto LABEL_746;
          v314 = *(_QWORD *)(*(_QWORD *)(v235 + 424) + 8 * v313);
          *(_QWORD *)&__p = v314;
          if ((v239 & 0xFFFFFFFFFFFFFFF9) == 0 || (v314 & 0xFFFFFFFFFFFFFFF9) == 0)
            goto LABEL_746;
          v315 = v314 & 6;
          if ((v239 & 2) != 0)
          {
            if (((v239 & 4) == 0) == (v315 == 2))
              goto LABEL_852;
          }
          else if (v315 != 2)
          {
            goto LABEL_852;
          }
          sub_1C51CC4F8(v3, "bitcast cannot convert between pointers and other types", a2);
LABEL_852:
          v489 = sub_1C4825F50((unint64_t *)&__p);
          v491 = v490;
          if (v489 != sub_1C4825F50(&v504) || v491 != v492)
            sub_1C51CC4F8(v3, "bitcast sizes must match", a2);
          if ((_QWORD)__p != v504)
            goto LABEL_746;
          v45 = "bitcast must change the type";
          goto LABEL_65;
        case 0x5Au:
        case 0x5Bu:
        case 0x5Cu:
        case 0x60u:
          v72 = *(_QWORD *)(v3 + 48);
          v73 = *(_QWORD *)(a2 + 32);
          v74 = *(_DWORD *)(v73 + 4);
          if (v74 < 0 && (v75 = v74 & 0x7FFFFFFF, v75 < *(_DWORD *)(v72 + 432)))
            v76 = *(const char **)(*(_QWORD *)(v72 + 424) + 8 * v75);
          else
            v76 = 0;
          v504 = (unint64_t)v76;
          v77 = *(_DWORD *)(v73 + 36);
          if ((v77 & 0x80000000) == 0
            || (v78 = v77 & 0x7FFFFFFF, v78 >= *(_DWORD *)(v72 + 432))
            || ((v79 = *(_QWORD *)(*(_QWORD *)(v72 + 424) + 8 * v78),
                 v80 = v79 & 0xFFFFFFFFFFFFFFF9,
                 v81 = v79 & 6,
                 v80)
              ? (v82 = v81 == 2)
              : (v82 = 0),
                !v82))
          {
            sub_1C51CC4F8(v3, "Generic memory instruction must access a pointer", a2);
          }
          v83 = *(_QWORD *)(a2 + 48);
          if (v83 < 8)
          {
            v45 = "Generic instruction accessing memory must have one mem operand";
            goto LABEL_744;
          }
          if ((v83 & 7) != 0)
          {
            v45 = "Generic instruction accessing memory must have one mem operand";
            if ((*(_QWORD *)(a2 + 48) & 7) != 3
              || (v83 & 0xFFFFFFFFFFFFFFF8) == 0
              || *(_DWORD *)(v83 & 0xFFFFFFFFFFFFFFF8) != 1)
            {
              goto LABEL_744;
            }
          }
          else
          {
            v83 &= 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(a2 + 48) = v83;
          }
          if ((v83 & 7) != 0)
          {
            v365 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v365 = v83 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(a2 + 48) = v83 & 0xFFFFFFFFFFFFFFF8;
          }
          v386 = **(unsigned __int16 **)(a2 + 16);
          if ((v386 - 91) < 2)
          {
            if ((*(_QWORD *)(v365 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v395 = sub_1C4825F50((unint64_t *)(v365 + 24));
              if ((_DWORD)v394 == 1)
            }
            else
            {
              v395 = -1;
            }
            v459 = sub_1C4825F50(&v504);
            if ((_DWORD)v458 == 1)
            if (v395 >= v459)
            {
              v393 = "Generic extload must have a narrower memory type";
              goto LABEL_738;
            }
          }
          else if (v386 == 90)
          {
            if ((*(_QWORD *)(v365 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v454 = (unint64_t)(sub_1C4825F50((unint64_t *)(v365 + 24)) + 7) >> 3;
              if ((_DWORD)v453 == 1)
            }
            else
            {
              v454 = -1;
            }
            v456 = (unint64_t)(sub_1C4825F50(&v504) + 7) >> 3;
            if ((_DWORD)v455 == 1)
            v457 = v454 > v456;
            v3 = v36;
            if (v457)
            {
              v393 = "load memory size cannot exceed result size";
              goto LABEL_738;
            }
          }
          else
          {
            if (v386 != 96)
              goto LABEL_739;
            v388 = sub_1C4825F50(&v504);
            if ((_DWORD)v387 == 1)
            if ((*(_QWORD *)(v365 + 24) & 0xFFFFFFFFFFFFFFF9) == 0)
            {
              v393 = "store memory size cannot exceed value size";
              goto LABEL_738;
            }
            v389 = (unint64_t)(v388 + 7) >> 3;
            v391 = (unint64_t)(sub_1C4825F50((unint64_t *)(v365 + 24)) + 7) >> 3;
            if ((_DWORD)v390 == 1)
            v392 = v389 >= v391;
            v3 = v36;
            if (!v392)
            {
              v393 = "store memory size cannot exceed value size";
LABEL_738:
              sub_1C51CC4F8(v3, v393, a2);
            }
          }
LABEL_739:
          if (v35 == 96)
          {
            if ((*(_BYTE *)(v365 + 37) & 0xD) != 4)
              goto LABEL_746;
            v45 = "atomic store cannot use acquire ordering";
          }
          else
          {
            if ((*(_BYTE *)(v365 + 37) & 0xFu) - 5 > 1)
              goto LABEL_746;
            v45 = "atomic load cannot use release ordering";
          }
LABEL_744:
          v46 = v3;
          goto LABEL_745;
        case 0x74u:
        case 0x75u:
          v156 = *((unsigned __int8 *)v34 + 4);
          if ((v34[4] & 2) != 0)
          {
            v427 = *(_DWORD *)(a2 + 40);
            v46 = v3;
            if (v427 == v156)
            {
              v157 = v156;
            }
            else
            {
              v428 = v427 - 1;
              v157 = v156;
              do
              {
                v429 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v156);
                if ((v429 & 0x10000FF) != 0x1000000)
                  break;
                v157 += (v429 & 0x2000000) == 0;
                if (v428 == v156)
                  break;
                ++v156;
              }
              while ((v429 & 0x2000000) == 0);
            }
          }
          else
          {
            v157 = *((unsigned __int8 *)v34 + 4);
            v46 = v3;
          }
          v158 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(v158 + 32 * v157) != 17)
          {
            v45 = "G_INTRINSIC first src operand must be an intrinsic ID";
            goto LABEL_745;
          }
          v159 = (llvm::LLVMContext *)*(unsigned int *)(v158 + 32 * v157 + 16);
          if (((_DWORD)v159 - 1) >> 2 > 0xC3A)
            goto LABEL_746;
          Attributes = llvm::Intrinsic::getAttributes(****(llvm::Intrinsic *****)(v3 + 16), v159);
          if (Attributes)
            v161 = (*(unsigned __int8 *)(Attributes + 17) >> 4) & 1;
          else
            v161 = 0;
          if (v35 == 116 && !v161)
          {
            v45 = "G_INTRINSIC used with intrinsic that accesses memory";
            goto LABEL_744;
          }
          if (v35 == 116)
            v161 = 0;
          if (v161 != 1)
            goto LABEL_746;
          v45 = "G_INTRINSIC_W_SIDE_EFFECTS used with readnone intrinsic";
          goto LABEL_298;
        case 0x76u:
        case 0x77u:
        case 0x7Cu:
        case 0x7Eu:
          goto LABEL_66;
        case 0x78u:
        case 0x79u:
          v146 = *(_QWORD *)(a2 + 32);
          v147 = *(_DWORD *)(v146 + 4);
          if (v147 < 0
            && (v148 = *(_QWORD *)(v3 + 48), v149 = v147 & 0x7FFFFFFF, v149 < *(_DWORD *)(v148 + 432)))
          {
            v504 = *(_QWORD *)(*(_QWORD *)(v148 + 424) + 8 * v149);
            if ((v504 & 0xFFFFFFFFFFFFFFF9) != 0 && (v504 & 4) != 0)
            {
              sub_1C51CC4F8(v3, "Instruction cannot use a vector result type", a2);
              v35 = **(unsigned __int16 **)(a2 + 16);
              v146 = *(_QWORD *)(a2 + 32);
            }
          }
          else
          {
            v504 = 0;
          }
          v168 = *(unsigned __int8 *)(v146 + 32);
          if (v35 == 120)
          {
            if (v168 != 2)
            {
              v45 = "G_CONSTANT operand must be cimm";
              goto LABEL_744;
            }
            v169 = *(unsigned int *)(*(_QWORD *)(v146 + 48) + 32);
          }
          else
          {
            if (v168 != 3)
            {
              v45 = "G_FCONSTANT operand must be fpimm";
              goto LABEL_744;
            }
            v169 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v146 + 48) + 32) + 12);
          }
          v222 = sub_1C4825F50(&v504);
          if ((_DWORD)v221 == 1)
          if (v222 == v169)
            goto LABEL_746;
          v45 = "inconsistent constant size";
LABEL_298:
          v3 = v36;
          goto LABEL_744;
        case 0x7Du:
          v270 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(v270 + 64) != 1)
          {
            v45 = "G_SEXT_INREG expects an immediate operand #2";
            goto LABEL_65;
          }
          v271 = *(_DWORD *)(v270 + 36);
          if (v271 < 0
            && (v272 = *(_QWORD *)(v3 + 48), v273 = v271 & 0x7FFFFFFF, v273 < *(_DWORD *)(v272 + 432)))
          {
            v274 = *(_QWORD *)(*(_QWORD *)(v272 + 424) + 8 * v273);
          }
          else
          {
            v274 = 0;
          }
          v384 = *(_QWORD *)(v270 + 80);
          if (v384 <= 0)
            sub_1C51CC4F8(v36, "G_SEXT_INREG size must be >= 1", a2);
          if ((v274 & 1) != 0)
          {
            v385 = (v274 >> 3);
          }
          else if ((v274 & 4) != 0)
          {
            if ((v274 & 2) != 0)
              v385 = (unsigned __int16)(v274 >> 19);
            else
              v385 = (v274 >> 19);
          }
          else
          {
            v385 = (unsigned __int16)(v274 >> 3);
          }
          if (v384 < v385)
            goto LABEL_746;
          v45 = "G_SEXT_INREG size must be less than source bit width";
          goto LABEL_65;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x84u:
        case 0x85u:
          v37 = *(_QWORD *)(v3 + 48);
          v38 = *(_QWORD *)(a2 + 32);
          v39 = *(_DWORD *)(v38 + 36);
          if (v39 < 0 && (v40 = v39 & 0x7FFFFFFF, v40 < *(_DWORD *)(v37 + 432)))
            v41 = *(_QWORD *)(*(_QWORD *)(v37 + 424) + 8 * v40);
          else
            v41 = 0;
          v67 = *(_DWORD *)(v38 + 68);
          if (v67 < 0 && (v68 = v67 & 0x7FFFFFFF, v68 < *(_DWORD *)(v37 + 432)))
            v69 = *(_QWORD *)(*(_QWORD *)(v37 + 424) + 8 * v68);
          else
            v69 = 0;
          v7 = (v41 & 0xFFFFFFFFFFFFFFF9) == 0;
          v70 = (v41 >> 2) & 1;
          if (v7)
            LODWORD(v70) = 0;
          v7 = (v69 & 0xFFFFFFFFFFFFFFF9) == 0;
          v71 = (v69 >> 2) & 1;
          if (v7)
            LODWORD(v71) = 0;
          if ((_DWORD)v70 == (_DWORD)v71)
            goto LABEL_746;
          v45 = "Shifts and rotates require operands to be either all scalars or all vectors";
          goto LABEL_65;
        case 0x86u:
        case 0x87u:
          v151 = *(_QWORD *)(v3 + 48);
          v152 = *(_QWORD *)(a2 + 32);
          v153 = *(_DWORD *)(v152 + 4);
          if (v153 < 0 && (v154 = v153 & 0x7FFFFFFF, v154 < *(_DWORD *)(v151 + 432)))
            v155 = *(_QWORD *)(*(_QWORD *)(v151 + 424) + 8 * v154);
          else
            v155 = 0;
          v170 = *(_DWORD *)(v152 + 68);
          if (v170 < 0 && (v171 = v170 & 0x7FFFFFFF, v171 < *(_DWORD *)(v151 + 432)))
            v172 = *(_QWORD *)(*(_QWORD *)(v151 + 424) + 8 * v171);
          else
            v172 = 0;
          v173 = (v155 >> 2) & 1;
          if ((v155 & 0xFFFFFFFFFFFFFFF9) == 0)
            LODWORD(v173) = 0;
          v174 = (v172 >> 2) & 1;
          if ((v172 & 0xFFFFFFFFFFFFFFF9) == 0)
            LODWORD(v174) = 0;
          if ((_DWORD)v173 == (_DWORD)v174)
          {
            if (!(_DWORD)v173)
              goto LABEL_746;
            if ((v155 & 2) != 0)
              v228 = 0x800000000000000;
            else
              v228 = 0x8000000000000;
            if ((v228 & v155) != 0)
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
            if ((v172 & 2) != 0)
              v229 = 0x800000000000000;
            else
              v229 = 0x8000000000000;
            if ((v229 & v172) != 0)
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v33);
            if ((unsigned __int16)(v155 >> 3) == (unsigned __int16)(v172 >> 3))
              goto LABEL_746;
          }
          v45 = "Generic vector icmp/fcmp must preserve number of lanes";
          goto LABEL_65;
        case 0x88u:
          v216 = *(_QWORD *)(v3 + 48);
          v217 = *(_QWORD *)(a2 + 32);
          v218 = *(_DWORD *)(v217 + 4);
          if (v218 < 0 && (v219 = v218 & 0x7FFFFFFF, v219 < *(_DWORD *)(v216 + 432)))
            v220 = *(_QWORD *)(*(_QWORD *)(v216 + 424) + 8 * v219);
          else
            v220 = 0;
          v292 = *(_DWORD *)(v217 + 36);
          if (v292 < 0 && (v293 = v292 & 0x7FFFFFFF, v293 < *(_DWORD *)(v216 + 432)))
            v294 = *(_QWORD *)(*(_QWORD *)(v216 + 424) + 8 * v293);
          else
            v294 = 0;
          if ((v220 & 0xFFFFFFFFFFFFFFF9) == 0 || (v294 & 0xFFFFFFFFFFFFFFF9) == 0 || (v294 & 4) == 0)
            goto LABEL_746;
          v295 = v3;
          goto LABEL_666;
        default:
          if ((v35 - 42) >= 2)
            goto LABEL_746;
          v106 = "G_ASSERT_SEXT";
          if (v35 == 43)
            v106 = "G_ASSERT_ZEXT";
          HIBYTE(v499) = 13;
          *(_QWORD *)&__p = *(_QWORD *)v106;
          *(_QWORD *)((char *)&__p + 5) = *(_QWORD *)(v106 + 5);
          BYTE13(__p) = 0;
          v107 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(v107 + 64) == 1)
          {
            v108 = *(_DWORD *)(v107 + 36);
            v109 = *(_QWORD *)(v3 + 48);
            if (v108 < 0 && (v108 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v109 + 432))
              v110 = *(_QWORD *)(*(_QWORD *)(v109 + 424) + 8 * (v108 & 0x7FFFFFFF));
            else
              v110 = 0;
            v366 = *(_QWORD *)(v107 + 80);
            if (v366 <= 0)
            {
              v507 = 773;
              v504 = (unint64_t)&__p;
              v505 = 13;
              v275 = " size must be >= 1";
            }
            else
            {
              if ((v110 & 1) != 0)
              {
                v367 = (v110 >> 3);
              }
              else if ((v110 & 4) != 0)
              {
                if ((v110 & 2) != 0)
                  v367 = (unsigned __int16)(v110 >> 19);
                else
                  v367 = (v110 >> 19);
              }
              else
              {
                v367 = (unsigned __int16)(v110 >> 3);
              }
              if (v366 >= v367)
              {
                v507 = 773;
                v504 = (unint64_t)&__p;
                v505 = 13;
                v275 = " size must be less than source bit width";
              }
              else
              {
                v430 = *(_QWORD *)(v109 + 24);
                v431 = *(_QWORD *)(v430 + 16 * (v108 & 0x7FFFFFFF));
                v432 = *(_DWORD *)(v107 + 4);
                v433 = v431 & 0xFFFFFFFFFFFFFFF8;
                v434 = *(_QWORD *)(v430 + 16 * (v432 & 0x7FFFFFFF));
                if ((v431 & 0xFFFFFFFFFFFFFFF8 & (v431 << 61 >> 63)) == (v434 & 0xFFFFFFFFFFFFFFF8 & (v434 << 61 >> 63)))
                {
                  if ((v431 & 4) != 0)
                    v433 = 0;
                  if ((v434 & 4) != 0)
                    v480 = 0;
                  else
                    v480 = v434 & 0xFFFFFFFFFFFFFFF8;
                  if (v433 == v480)
                  {
LABEL_661:
                    if ((SHIBYTE(v499) & 0x80000000) == 0)
                      goto LABEL_746;
                    v411 = (char *)__p;
LABEL_663:
                    operator delete(v411);
                    goto LABEL_746;
                  }
                  v507 = 773;
                  v504 = (unint64_t)&__p;
                  v505 = 13;
                  v275 = " source and destination register classes must match";
                }
                else
                {
                  v507 = 773;
                  v504 = (unint64_t)&__p;
                  v505 = 13;
                  v275 = " source and destination register banks must match";
                }
              }
            }
          }
          else
          {
            v507 = 773;
            v504 = (unint64_t)&__p;
            v505 = 13;
            v275 = " expects an immediate operand #2";
          }
          p_p = v275;
          sub_1C51CFEB0(v3, (llvm::Twine *)&v504, a2);
          goto LABEL_661;
      }
  }
}

llvm::raw_ostream *sub_1C51CFD64(uint64_t a1, const char *a2, unint64_t *a3, unsigned int a4, uint64_t a5)
{
  llvm *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm *v13;
  _DWORD *v14;
  llvm::MachineOperand *v15;
  llvm *v16;
  llvm::raw_ostream *result;
  _BYTE *v18;

  sub_1C51CC4F8(a1, a2, a3[1]);
  v10 = (llvm::raw_ostream *)llvm::errs(v9);
  v11 = v10;
  v12 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 8292;
    *(_QWORD *)v12 = *(_QWORD *)"- operand ";
    *((_QWORD *)v10 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v10, "- operand ", 0xAuLL);
  }
  v13 = sub_1C5E21910(v11, a4, 0, 0, 0);
  v14 = (_DWORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v14 > 3uLL)
  {
    *v14 = 538976314;
    *((_QWORD *)v11 + 4) += 4;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v11, ":   ", 4uLL);
  }
  v15 = (llvm::MachineOperand *)llvm::errs(v13);
  llvm::MachineOperand::print((llvm::raw_ostream *)a3, v15, a5, *(_QWORD *)(a1 + 40), 0);
  result = (llvm::raw_ostream *)llvm::errs(v16);
  v18 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v18)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v18 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

void sub_1C51CFEB0(uint64_t a1, llvm::Twine *a2, unint64_t a3)
{
  void **v5;
  void *__p[2];
  char v7;

  llvm::Twine::str(a2, __p);
  if (v7 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  sub_1C51CC4F8(a1, (const char *)v5, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1C51CFF1C(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = ((unint64_t)a2 >> 2) & 1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v6) = 0;
  v7 = (a3 >> 2) & 1;
  if ((a3 & 0xFFFFFFFFFFFFFFF9) == 0)
    LODWORD(v7) = 0;
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v8 = "operand types must be all-vector or all-scalar";
LABEL_21:
    sub_1C51CC4F8(a1, v8, a4);
    return;
  }
  if ((_DWORD)v6)
  {
    v10 = a2;
    if ((a2 & 2) != 0)
      v11 = 0x800000000000000;
    else
      v11 = 0x8000000000000;
    if ((v11 & (unint64_t)a2) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    v12 = (a3 & 2) != 0 ? 0x800000000000000 : 0x8000000000000;
    if ((v12 & a3) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    if ((unsigned __int16)(v10 >> 3) != (unsigned __int16)(a3 >> 3))
    {
      v8 = "operand types must preserve number of vector elements";
      goto LABEL_21;
    }
  }
}

unsigned int *sub_1C51D0000(unsigned int *result, unsigned int *a2, unsigned int a3)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  unsigned __int16 v10;
  __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;

  v5 = result;
  v6 = a2[2];
  if (v6 >= a2[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v6 + 1, 4);
    LODWORD(v6) = a2[2];
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = a3;
  ++a2[2];
  if (a3 - 1 <= 0x3FFFFFFE)
  {
    v7 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 56)
                            + 2 * *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 24 * a3 + 4));
    v9 = *v7;
    v8 = v7 + 1;
    v10 = v9 + a3;
    if (!v9)
      v8 = 0;
    v13 = v10;
    v14 = v8;
    v15 = v10;
    v11 = 0;
    v12 = 0;
    return sub_1C61FF520(a2, &v13, (uint64_t)&v11);
  }
  return result;
}

llvm::raw_ostream *sub_1C51D00D8(llvm::raw_ostream *result, unint64_t *a2, unsigned int a3, llvm *a4, llvm *a5, unsigned int a6, llvm *a7)
{
  llvm *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  _QWORD *v29;

  v13 = result;
  v14 = (unint64_t)a4 & 0xFFFFFFFFFFFFFFF8;
  v15 = *((_DWORD *)a5 + 2);
  v16 = *(_QWORD **)a5;
  if (!v15)
  {
    v15 = 0;
    goto LABEL_12;
  }
  v17 = v16[3 * v15 - 2];
  v18 = *(_DWORD *)(v14 + 24);
  if (v18 >= ((v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    v19 = &v16[3 * v15];
    goto LABEL_13;
  }
  v19 = *(_QWORD **)a5;
  v20 = *((unsigned int *)a5 + 2);
  do
  {
    v21 = v20 >> 1;
    v22 = v19[3 * (v20 >> 1) + 1];
    LODWORD(v22) = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
    v20 -= (v20 >> 1) + 1;
    v23 = v18 >= v22;
    if (v18 >= v22)
      v24 = v21 + 1;
    else
      v24 = 0;
    v19 += 3 * v24;
    if (!v23)
      v20 = v21;
  }
  while (v20);
LABEL_13:
  v25 = &v16[3 * v15];
  if (v19 == v25)
  {
    v28 = 0;
    goto LABEL_27;
  }
  if (((*v19 >> 1) & 3 | *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v14 + 24))
  {
    v28 = 0;
    goto LABEL_27;
  }
  v26 = v19[2];
  v27 = v19[1] & 0xFFFFFFFFFFFFFFF8;
  v28 = v14 == v27;
  v29 = v19 + 3;
  if (v14 == v27 && v29 == v25)
  {
    v28 = 1;
    if (v26)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (*(_QWORD *)(v26 + 8) == v14)
    v26 = 0;
  if (!v26)
  {
LABEL_27:
    if (!a7)
    {
      sub_1C51CFD64((uint64_t)result, "No live segment at use", a2, a3, 0);
      sub_1C51D0784(a5);
      sub_1C51D0830(v13, a6);
      result = sub_1C51D038C(a4);
    }
  }
LABEL_29:
  if (!v28 && ((*(_DWORD *)a2 >> 26) & ~HIBYTE(*(_DWORD *)a2) & 1) != 0)
  {
    sub_1C51CFD64((uint64_t)v13, "Live range continues after kill flag", a2, a3, 0);
    sub_1C51D0784(a5);
    sub_1C51D0830(v13, a6);
    if (a7)
      sub_1C51D09A0(a7);
    return sub_1C51D038C(a4);
  }
  return result;
}

llvm::raw_ostream *sub_1C51D02E0(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- interval:    ", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- interval:    ", 0xFuLL);
  }
  result = llvm::LiveInterval::print(a1, v3);
  v6 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v3 + 3))
    return llvm::raw_ostream::write(v3, 10);
  *((_QWORD *)v3 + 4) = v6 + 1;
  *v6 = 10;
  return result;
}

llvm::raw_ostream *sub_1C51D038C(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  _QWORD *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;
  llvm *v7;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = v2;
  v4 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    *(_QWORD *)((char *)v4 + 7) = 0x2020202020202020;
    *v4 = *(_QWORD *)"- at:          ";
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- at:          ", 0xFuLL);
  }
  v7 = a1;
  result = llvm::SlotIndex::print((llvm::SlotIndex *)&v7, v3);
  v6 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v3 + 3))
    return llvm::raw_ostream::write(v3, 10);
  *((_QWORD *)v3 + 4) = v6 + 1;
  *v6 = 10;
  return result;
}

uint64_t sub_1C51D0448(uint64_t result, unint64_t *a2, unsigned int a3, llvm *a4, llvm *a5, unsigned int a6, int a7, llvm *a8)
{
  llvm *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  llvm *v26;
  unint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v15 = (llvm *)result;
  v16 = *((_DWORD *)a5 + 2);
  v17 = *(_QWORD **)a5;
  if (!v16)
  {
    v16 = 0;
    goto LABEL_12;
  }
  v18 = v17[3 * v16 - 2];
  v19 = *(_DWORD *)(((unint64_t)a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  if (v19 >= ((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    v20 = &v17[3 * v16];
    goto LABEL_13;
  }
  v20 = *(_QWORD **)a5;
  v21 = *((unsigned int *)a5 + 2);
  do
  {
    v22 = v21 >> 1;
    v23 = v20[3 * (v21 >> 1) + 1];
    LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
    v21 -= (v21 >> 1) + 1;
    v24 = v19 >= v23;
    if (v19 >= v23)
      v25 = v22 + 1;
    else
      v25 = 0;
    v20 += 3 * v25;
    if (!v24)
      v21 = v22;
  }
  while (v21);
LABEL_13:
  if (v20 == &v17[3 * v16]
    || ((*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(((unint64_t)a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3)
    || (v26 = (llvm *)v20[2]) == 0)
  {
    sub_1C51CFD64(result, "No live segment at def", a2, a3, 0);
    sub_1C51D0784(a5);
    sub_1C51D0830(v15, a6);
    if (a8)
      sub_1C51D09A0(a8);
  }
  else
  {
    if (*((llvm **)v26 + 1) == a4)
      goto LABEL_23;
    sub_1C51CFD64(result, "Inconsistent valno->def", a2, a3, 0);
    sub_1C51D0784(a5);
    sub_1C51D0830(v15, a6);
    if (a8)
      sub_1C51D09A0(a8);
    sub_1C51D0BB8(v26);
  }
  result = (uint64_t)sub_1C51D038C(a4);
LABEL_23:
  if ((~*(_DWORD *)a2 & 0x5000000) != 0)
    return result;
  v27 = (unint64_t)a4 & 0xFFFFFFFFFFFFFFF8;
  v28 = *((_DWORD *)a5 + 2);
  v29 = *(_QWORD **)a5;
  if (!v28)
  {
    v28 = 0;
    goto LABEL_35;
  }
  v30 = v29[3 * v28 - 2];
  v31 = *(_DWORD *)(v27 + 24);
  if (v31 >= ((v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_35:
    v32 = &v29[3 * v28];
    goto LABEL_36;
  }
  v32 = *(_QWORD **)a5;
  v33 = *((unsigned int *)a5 + 2);
  do
  {
    v34 = v33 >> 1;
    v35 = v32[3 * (v33 >> 1) + 1];
    LODWORD(v35) = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
    result = (v33 >> 1) + 1;
    v33 -= result;
    v36 = v31 >= v35;
    if (v31 >= v35)
      v37 = v34 + 1;
    else
      v37 = 0;
    v32 += 3 * v37;
    if (!v36)
      v33 = v34;
  }
  while (v33);
LABEL_36:
  v38 = &v29[3 * v28];
  if (v32 != v38)
  {
    v39 = *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24);
    v40 = *(_DWORD *)(v27 + 24);
    if (((*v32 >> 1) & 3 | v39) > v40)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      v41 = v32[1];
      if (v27 == (v41 & 0xFFFFFFFFFFFFFFF8))
      {
        v32 += 3;
        if (v32 == v38)
          goto LABEL_44;
        v39 = *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
    }
    if (v40 >= v39)
      v41 = v32[1];
LABEL_44:
    if ((~(_BYTE)v41 & 6) == 0)
      return result;
  }
  if ((*(_DWORD *)a2 & 0xFFF00) == 0 || a7)
  {
    sub_1C51CFD64((uint64_t)v15, "Live range continues after dead def flag", a2, a3, 0);
    sub_1C51D0784(a5);
    result = sub_1C51D0830(v15, a6);
    if (a8)
      return sub_1C51D09A0(a8);
  }
  return result;
}

llvm::raw_ostream *sub_1C51D0784(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- liverange:   ", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- liverange:   ", 0xFuLL);
  }
  result = llvm::LiveRange::print((uint64_t **)a1, v3);
  v6 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v3 + 3))
    return llvm::raw_ostream::write(v3, 10);
  *((_QWORD *)v3 + 4) = v6 + 1;
  *v6 = 10;
  return result;
}

uint64_t sub_1C51D0830(llvm *a1, unsigned int a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t (**v10)(void);
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
    return sub_1C51D0AD0(a1, a2);
  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  v5 = v4;
  v6 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 0xEuLL)
  {
    qmemcpy(v6, "- regunit:     ", 15);
    *((_QWORD *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, "- regunit:     ", 0xFuLL);
  }
  v7 = *((_QWORD *)a1 + 5);
  v11[0] = &off_1E814D058;
  v11[1] = a2;
  v11[2] = v7;
  v12 = v11;
  sub_1C52C9AC8((llvm::raw_ostream *)v11, v5);
  v8 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 10);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v8 + 1;
    *v8 = 10;
  }
  result = (uint64_t)v12;
  if (v12 == v11)
  {
    v10 = (uint64_t (**)(void))(v11[0] + 32);
  }
  else
  {
    if (!v12)
      return result;
    v10 = (uint64_t (**)(void))(*v12 + 40);
  }
  return (*v10)();
}

uint64_t sub_1C51D09A0(llvm *a1)
{
  llvm::raw_ostream *v2;
  void *v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t (**v7)(void);
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0xEuLL)
  {
    qmemcpy(v3, "- lanemask:    ", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "- lanemask:    ", 0xFuLL);
  }
  v10 = v9;
  v9[0] = &off_1E81433A0;
  v9[1] = a1;
  v8[0] = &unk_1E8133270;
  v8[1] = "%016llX";
  v8[2] = a1;
  v4 = llvm::raw_ostream::operator<<(v2, (uint64_t)v8);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 10;
  }
  result = (uint64_t)v10;
  if (v10 == v9)
  {
    v7 = (uint64_t (**)(void))(v9[0] + 32);
  }
  else
  {
    if (!v10)
      return result;
    v7 = (uint64_t (**)(void))(*v10 + 40);
  }
  return (*v7)();
}

uint64_t sub_1C51D0AD0(llvm *a1, int a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE *v9;

  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  v5 = v4;
  v6 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 0xEuLL)
  {
    qmemcpy(v6, "- v. register: ", 15);
    *((_QWORD *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, "- v. register: ", 0xFuLL);
  }
  v7 = *((_QWORD *)a1 + 5);
  v8 = operator new(0x28uLL);
  *(_QWORD *)v8 = &off_1E814D010;
  v8[2] = a2;
  *((_QWORD *)v8 + 2) = v7;
  v8[6] = 0;
  *((_QWORD *)v8 + 4) = 0;
  sub_1C52C9630((llvm::raw_ostream *)v8, v5);
  v9 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 10);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v9 + 1;
    *v9 = 10;
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8);
}

llvm::raw_ostream *sub_1C51D0BB8(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  _WORD *v7;
  uint64_t v8;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- ValNo:       ", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- ValNo:       ", 0xFuLL);
  }
  sub_1C5E21910(v3, *(unsigned int *)a1, 0, 0, 0);
  v5 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 8294;
    *(_DWORD *)v5 = 1701062688;
    *((_QWORD *)v3 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v3, " (def ", 6uLL);
  }
  v8 = *((_QWORD *)a1 + 1);
  result = llvm::SlotIndex::print((llvm::SlotIndex *)&v8, v3);
  v7 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v7 <= 1uLL)
    return llvm::raw_ostream::write(v3, ")\n", 2uLL);
  *v7 = 2601;
  *((_QWORD *)v3 + 4) += 2;
  return result;
}

uint64_t *sub_1C51D0CE8(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *result;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = *a2;
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] <= 1uLL)
    {
      v5 = (*(_QWORD *)&v2 - 1) & v3;
    }
    else
    {
      v5 = *a2;
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        while (1)
        {
          v8 = v7[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
              return v7;
          }
          else
          {
            if (v4.u32[0] <= 1uLL)
            {
              v8 &= *(_QWORD *)&v2 - 1;
            }
            else if (v8 >= *(_QWORD *)&v2)
            {
              v8 %= *(_QWORD *)&v2;
            }
            if (v8 != v5)
              return 0;
          }
          result = 0;
          v7 = (uint64_t *)*v7;
          if (!v7)
            return result;
        }
      }
    }
  }
  return 0;
}

void sub_1C51D0DA8(_DWORD *a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  v2[0] = &v3;
  v2[1] = 0;
  sub_1C51D2328(a1, a2, (uint64_t)v2);
  if (v2[0] != &v3)
    free(v2[0]);
}

void sub_1C51D0DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _BYTE *v17;
  const void *v18;
  const void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  void *v27;
  void *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned int v76;
  unsigned int v77;
  char **v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[128];
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  _BYTE v97[64];
  void *v98;
  uint64_t v99;
  _BYTE v100[128];
  _BYTE *v101;
  void *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  _BYTE v106[64];
  void *v107;
  uint64_t v108;
  _QWORD v109[17];
  _BYTE *v110;
  void *v111;
  unint64_t v112;
  int v113;
  _BYTE v114[64];
  void *v115;
  uint64_t v116;
  _BYTE v117[128];
  _BYTE *v118;
  void *__src;
  unint64_t v120;
  int v121;
  _BYTE v122[64];
  void *v123;
  uint64_t v124;
  _BYTE v125[128];
  _BYTE *v126;
  void *v127;
  unint64_t v128;
  int v129;
  _BYTE v130[64];
  void *v131;
  uint64_t v132;
  _BYTE v133[128];
  _BYTE *v134;
  void *v135;
  unint64_t v136;
  int v137;
  _BYTE v138[64];
  void *v139;
  uint64_t v140;
  _BYTE v141[128];
  _BYTE *v142;
  void *v143;
  unint64_t v144;
  int v145;
  _BYTE v146[64];
  void *v147;
  uint64_t v148;
  _BYTE v149[128];
  _BYTE *v150;
  void *v151;
  unint64_t v152;
  int v153;
  _BYTE v154[64];
  void *v155;
  uint64_t v156;
  _BYTE v157[128];
  _BYTE *v158;
  void *v159;
  unint64_t v160;
  int v161;
  _BYTE v162[64];
  void *v163;
  uint64_t v164;
  _BYTE v165[128];
  _BYTE *v166;
  void *v167;
  int v168;
  int v169;
  int v170;
  _BYTE v171[64];
  void *v172;
  uint64_t v173;
  _BYTE v174[128];
  _BYTE *v175;
  void *v176;
  unint64_t v177;
  int v178;
  _BYTE v179[64];
  void *v180;
  uint64_t v181;
  _BYTE v182[128];
  _BYTE *v183;
  void *v184;
  unint64_t v185;
  int v186;
  _BYTE v187[64];
  void *v188;
  uint64_t v189;
  _BYTE v190[128];
  char **v191;
  _BYTE *v192;
  void *v193;
  unint64_t v194;
  int v195;
  _BYTE v196[64];
  void *v197;
  uint64_t v198;
  _BYTE v199[128];
  _BYTE *v200;
  void *v201;
  uint64_t v202;
  int v203;
  _BYTE v204[64];
  void *v205;
  uint64_t v206;
  _BYTE v207[128];
  _BYTE *v208;
  void *v209;
  unint64_t v210;
  int v211;
  _BYTE v212[64];
  void *v213;
  uint64_t v214;
  _BYTE v215[128];
  _BYTE *v216;
  void *v217;
  unint64_t v218;
  int v219;
  _BYTE v220[64];
  void *v221;
  uint64_t v222;
  _BYTE v223[128];
  _BYTE *v224;
  void *v225;
  unint64_t v226;
  int v227;
  _BYTE v228[64];
  void *v229;
  uint64_t v230;
  _BYTE v231[128];
  _BYTE *v232;
  void *v233;
  unint64_t v234;
  int v235;
  _BYTE v236[64];
  void *v237;
  uint64_t v238;
  _BYTE v239[128];
  _BYTE *v240;
  void *v241;
  unint64_t v242;
  int v243;
  _BYTE v244[64];
  void *v245;
  uint64_t v246;
  _QWORD v247[18];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v247[16] = *MEMORY[0x1E0C80C00];
  v10 = v97;
  v93 = v97;
  v11 = *(const void **)(v9 + 8);
  if (v11 == *(const void **)v9)
  {
    v94 = v97;
    v12 = v11;
  }
  else
  {
    v80 = *(unsigned int *)(v9 + 16);
    v10 = malloc_type_malloc(8 * v80, 0x4065EBACuLL);
    if (!v10)
    {
      if ((_DWORD)v80)
        goto LABEL_345;
      v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10)
        goto LABEL_345;
    }
    v94 = v10;
    v12 = *(const void **)v9;
    v11 = *(const void **)(v9 + 8);
  }
  v14 = *(_DWORD *)(v9 + 16);
  v13 = *(_DWORD *)(v9 + 20);
  LODWORD(v95) = v14;
  if (v11 == v12)
    v15 = v13;
  else
    v15 = v14;
  if (v15)
  {
    memmove(v10, v11, 8 * v15);
    v13 = *(_DWORD *)(v9 + 20);
  }
  v16 = *(_DWORD *)(v9 + 24);
  HIDWORD(v95) = v13;
  v96 = v16;
  v98 = v100;
  v99 = 0x800000000;
  if (*(_DWORD *)(v9 + 104))
    sub_1C486F660((uint64_t)&v98, v9 + 96);
  v17 = v89;
  v18 = *(const void **)(v8 + 8);
  if (v18 == *(const void **)v8)
  {
    v85 = v89;
    v19 = *(const void **)(v8 + 8);
  }
  else
  {
    v81 = *(unsigned int *)(v8 + 16);
    v17 = malloc_type_malloc(8 * v81, 0x4065EBACuLL);
    if (!v17)
    {
      if ((_DWORD)v81)
        goto LABEL_345;
      v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v17)
        goto LABEL_345;
    }
    v85 = v17;
    v19 = *(const void **)v8;
    v18 = *(const void **)(v8 + 8);
  }
  v20 = *(_DWORD *)(v8 + 20);
  v86 = *(_DWORD *)(v8 + 16);
  if (v18 == v19)
    v21 = *(_DWORD *)(v8 + 20);
  else
    v21 = *(_DWORD *)(v8 + 16);
  if (v21)
  {
    memmove(v17, v18, 8 * v21);
    v20 = *(_DWORD *)(v8 + 20);
  }
  v87 = v20;
  v88 = *(_DWORD *)(v8 + 24);
  v90 = v92;
  v91 = 0x800000000;
  if (*(_DWORD *)(v8 + 104))
    sub_1C486F660((uint64_t)&v90, v8 + 96);
  v118 = v122;
  if (v94 == v93)
  {
    __src = v122;
    v22 = HIDWORD(v95);
    if (HIDWORD(v95))
      memmove(v122, v94, 8 * HIDWORD(v95));
  }
  else
  {
    __src = v94;
    v94 = v93;
    v22 = HIDWORD(v95);
  }
  v120 = __PAIR64__(v22, v95);
  v121 = v96;
  v95 = 8;
  v96 = 0;
  v123 = v125;
  v124 = 0x800000000;
  if ((_DWORD)v99)
    sub_1C486F510((uint64_t)&v123, (uint64_t)&v98);
  v110 = v114;
  if (v85 == v89)
  {
    v111 = v114;
    v23 = v87;
    if (v87)
      memmove(v114, v85, 8 * v87);
  }
  else
  {
    v111 = v85;
    v85 = v89;
    v23 = v87;
  }
  v112 = __PAIR64__(v23, v86);
  v113 = v88;
  v115 = v117;
  v116 = 0x800000000;
  if ((_DWORD)v91)
    sub_1C486F510((uint64_t)&v115, (uint64_t)&v90);
  v134 = v138;
  if (__src == v118)
  {
    v135 = v138;
    v24 = HIDWORD(v120);
    if (HIDWORD(v120))
      memmove(v138, __src, 8 * HIDWORD(v120));
  }
  else
  {
    v135 = __src;
    __src = v118;
    v24 = HIDWORD(v120);
  }
  v136 = __PAIR64__(v24, v120);
  v137 = v121;
  v120 = 8;
  v121 = 0;
  v139 = v141;
  v140 = 0x800000000;
  if ((_DWORD)v124)
    sub_1C486F510((uint64_t)&v139, (uint64_t)&v123);
  v126 = v130;
  if (v111 == v110)
  {
    v127 = v130;
    v25 = HIDWORD(v112);
    if (HIDWORD(v112))
      memmove(v130, v111, 8 * HIDWORD(v112));
  }
  else
  {
    v127 = v111;
    v111 = v110;
    v25 = HIDWORD(v112);
  }
  v128 = __PAIR64__(v25, v112);
  v129 = v113;
  v112 = 8;
  v113 = 0;
  v131 = v133;
  v132 = 0x800000000;
  if ((_DWORD)v116)
    sub_1C486F510((uint64_t)&v131, (uint64_t)&v115);
  v26 = v204;
  v200 = v204;
  v27 = v135;
  if (v135 == v134)
  {
    v201 = v204;
    v28 = v135;
  }
  else
  {
    v82 = v136;
    v26 = malloc_type_malloc(8 * v136, 0x4065EBACuLL);
    if (!v26)
    {
      if (v82)
        goto LABEL_345;
      v26 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v26)
        goto LABEL_345;
    }
    v201 = v26;
    v28 = v134;
    v27 = v135;
  }
  v29 = HIDWORD(v136);
  LODWORD(v202) = v136;
  if (v27 == v28)
    v30 = HIDWORD(v136);
  else
    v30 = v136;
  if (v30)
  {
    memmove(v26, v27, 8 * v30);
    v29 = HIDWORD(v136);
  }
  HIDWORD(v202) = v29;
  v203 = v137;
  v205 = v207;
  v206 = 0x800000000;
  if ((_DWORD)v140)
    sub_1C486F660((uint64_t)&v205, (uint64_t)&v139);
  v192 = v196;
  if (v127 == v126)
  {
    v193 = v196;
    v31 = HIDWORD(v128);
    if (HIDWORD(v128))
      memmove(v196, v127, 8 * HIDWORD(v128));
  }
  else
  {
    v193 = v127;
    v127 = v126;
    v31 = HIDWORD(v128);
  }
  v194 = __PAIR64__(v31, v128);
  v195 = v129;
  v128 = 8;
  v129 = 0;
  v197 = v199;
  v198 = 0x800000000;
  if ((_DWORD)v132)
    sub_1C486F510((uint64_t)&v197, (uint64_t)&v131);
  v32 = v106;
  v101 = v106;
  v33 = v201;
  if (v201 == v200)
  {
    v102 = v106;
    v34 = HIDWORD(v202);
    if (HIDWORD(v202))
      memmove(v106, v201, 8 * HIDWORD(v202));
    v33 = v106;
  }
  else
  {
    v102 = v201;
    v201 = v200;
    v34 = HIDWORD(v202);
  }
  v103 = v202;
  v104 = v34;
  v105 = v203;
  v202 = 8;
  v203 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v206)
  {
    sub_1C486F510((uint64_t)&v107, (uint64_t)&v205);
    v33 = v102;
    v32 = v101;
  }
  v35 = v212;
  v208 = v212;
  if (v33 == v32)
  {
    v209 = v212;
    v36 = v32;
  }
  else
  {
    v83 = v103;
    v35 = malloc_type_malloc(8 * v103, 0x4065EBACuLL);
    if (!v35)
    {
      if (v83)
        goto LABEL_345;
      v35 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v35)
        goto LABEL_345;
    }
    v209 = v35;
    v36 = v101;
    v32 = v102;
  }
  v37 = v104;
  LODWORD(v210) = v103;
  if (v32 == v36)
    v38 = v104;
  else
    v38 = v103;
  if (v38)
  {
    memmove(v35, v32, 8 * v38);
    v37 = v104;
  }
  HIDWORD(v210) = v37;
  v211 = v105;
  v213 = v215;
  v214 = 0x800000000;
  if ((_DWORD)v108)
    sub_1C486F660((uint64_t)&v213, (uint64_t)&v107);
  v183 = v187;
  if (v209 == v208)
  {
    v184 = v187;
    v39 = HIDWORD(v210);
    if (HIDWORD(v210))
      memmove(v187, v209, 8 * HIDWORD(v210));
  }
  else
  {
    v184 = v209;
    v209 = v208;
    v39 = HIDWORD(v210);
  }
  v185 = __PAIR64__(v39, v210);
  v186 = v211;
  v210 = 8;
  v211 = 0;
  v188 = v190;
  v189 = 0x800000000;
  if ((_DWORD)v214)
    sub_1C486F510((uint64_t)&v188, (uint64_t)&v213);
  if (v213 != v215)
    free(v213);
  if (v209 != v208)
    free(v209);
  v40 = v236;
  v232 = v236;
  v41 = v193;
  if (v193 == v192)
  {
    v233 = v236;
    v42 = HIDWORD(v194);
    if (HIDWORD(v194))
      memmove(v236, v193, 8 * HIDWORD(v194));
    v41 = v236;
  }
  else
  {
    v233 = v193;
    v193 = v192;
    v42 = HIDWORD(v194);
  }
  v234 = __PAIR64__(v42, v194);
  v235 = v195;
  v194 = 8;
  v195 = 0;
  v237 = v239;
  v238 = 0x800000000;
  if ((_DWORD)v198)
  {
    sub_1C486F510((uint64_t)&v237, (uint64_t)&v197);
    v41 = v233;
    v40 = v232;
  }
  v43 = v212;
  v208 = v212;
  if (v41 != v40)
  {
    v84 = v234;
    v43 = malloc_type_malloc(8 * v234, 0x4065EBACuLL);
    if (v43 || !v84 && (v43 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v209 = v43;
      v44 = v232;
      v40 = v233;
      goto LABEL_85;
    }
LABEL_345:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v209 = v212;
  v44 = v40;
LABEL_85:
  v45 = HIDWORD(v234);
  LODWORD(v210) = v234;
  if (v40 == v44)
    v46 = HIDWORD(v234);
  else
    v46 = v234;
  if (v46)
  {
    memmove(v43, v40, 8 * v46);
    v45 = HIDWORD(v234);
  }
  HIDWORD(v210) = v45;
  v211 = v235;
  v213 = v215;
  v214 = 0x800000000;
  if ((_DWORD)v238)
    sub_1C486F660((uint64_t)&v213, (uint64_t)&v237);
  v240 = v244;
  if (v209 == v208)
  {
    v241 = v244;
    v47 = HIDWORD(v210);
    if (HIDWORD(v210))
      memmove(v244, v209, 8 * HIDWORD(v210));
  }
  else
  {
    v241 = v209;
    v209 = v208;
    v47 = HIDWORD(v210);
  }
  v242 = __PAIR64__(v47, v210);
  v243 = v211;
  v210 = 8;
  v211 = 0;
  v245 = v247;
  v246 = 0x800000000;
  if ((_DWORD)v214)
    sub_1C486F510((uint64_t)&v245, (uint64_t)&v213);
  if (v213 != v215)
    free(v213);
  if (v209 != v208)
    free(v209);
  v208 = v212;
  if (v184 == v183)
  {
    v209 = v212;
    v48 = HIDWORD(v185);
    if (HIDWORD(v185))
      memmove(v212, v184, 8 * HIDWORD(v185));
  }
  else
  {
    v209 = v184;
    v184 = v183;
    v48 = HIDWORD(v185);
  }
  v210 = __PAIR64__(v48, v185);
  v211 = v186;
  v185 = 8;
  v186 = 0;
  v213 = v215;
  v214 = 0x800000000;
  if ((_DWORD)v189)
    sub_1C486F510((uint64_t)&v213, (uint64_t)&v188);
  v216 = v220;
  if (v241 == v240)
  {
    v217 = v220;
    v49 = HIDWORD(v242);
    if (HIDWORD(v242))
      memmove(v220, v241, 8 * HIDWORD(v242));
  }
  else
  {
    v217 = v241;
    v241 = v240;
    v49 = HIDWORD(v242);
  }
  v218 = __PAIR64__(v49, v242);
  v219 = v243;
  v242 = 8;
  v243 = 0;
  v221 = v223;
  v222 = 0x800000000;
  if ((_DWORD)v246)
    sub_1C486F510((uint64_t)&v221, (uint64_t)&v245);
  if (v245 != v247)
    free(v245);
  if (v241 != v240)
    free(v241);
  if (v237 != v239)
    free(v237);
  if (v233 != v232)
    free(v233);
  if (v188 != v190)
    free(v188);
  if (v184 != v183)
    free(v184);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v197 != v199)
    free(v197);
  if (v193 != v192)
    free(v193);
  if (v205 != v207)
    free(v205);
  if (v201 != v200)
    free(v201);
  v175 = v179;
  if (v209 == v208)
  {
    v176 = v179;
    v50 = HIDWORD(v210);
    if (HIDWORD(v210))
      memmove(v179, v209, 8 * HIDWORD(v210));
  }
  else
  {
    v176 = v209;
    v209 = v208;
    v50 = HIDWORD(v210);
  }
  v177 = __PAIR64__(v50, v210);
  v178 = v211;
  v210 = 8;
  v211 = 0;
  v180 = v182;
  v181 = 0x800000000;
  if ((_DWORD)v214)
    sub_1C486F510((uint64_t)&v180, (uint64_t)&v213);
  v166 = v171;
  if (v217 == v216)
  {
    v167 = v171;
    v51 = HIDWORD(v218);
    if (HIDWORD(v218))
      memmove(v171, v217, 8 * HIDWORD(v218));
  }
  else
  {
    v167 = v217;
    v217 = v216;
    v51 = HIDWORD(v218);
  }
  v168 = v218;
  v169 = v51;
  v170 = v219;
  v218 = 8;
  v219 = 0;
  v172 = v174;
  v173 = 0x800000000;
  if ((_DWORD)v222)
    sub_1C486F510((uint64_t)&v172, (uint64_t)&v221);
  while (1)
  {
    v52 = v181;
    if ((_DWORD)v181 != (_DWORD)v173)
      goto LABEL_155;
    if (!(_DWORD)v181)
      break;
    v53 = v172;
    v54 = v180;
    while (*v54 == *v53 && v54[1] == v53[1])
    {
      v54 += 2;
      v53 += 2;
      if (v54 == (_QWORD *)((char *)v180 + 16 * v181))
        goto LABEL_174;
    }
LABEL_155:
    v56 = (char *)v180 + 16 * v181;
    v58 = v6[1];
    v57 = (unint64_t)v6[2];
    if ((unint64_t)v58 >= v57)
    {
      v60 = *v6;
      v61 = (v58 - *v6) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        abort();
      v63 = v57 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        if (v64 >> 61)
          sub_1C4764EE4();
        v65 = (char *)operator new(8 * v64);
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[8 * v61];
      *(_QWORD *)v66 = *((_QWORD *)v56 - 2);
      v59 = v66 + 8;
      if (v58 != v60)
      {
        do
        {
          v67 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v66 - 1) = v67;
          v66 -= 8;
        }
        while (v58 != v60);
        v58 = *v6;
      }
      *v6 = v66;
      v6[1] = v59;
      v6[2] = &v65[8 * v64];
      if (v58)
      {
        operator delete(v58);
        v52 = v181;
      }
    }
    else
    {
      *(_QWORD *)v58 = *((_QWORD *)v56 - 2);
      v59 = v58 + 8;
    }
    v6[1] = v59;
    LODWORD(v181) = v52 - 1;
    if (v52 != 1)
      sub_1C486F1F8(&v175);
  }
LABEL_174:
  v183 = v187;
  if (v176 == v175)
  {
    v184 = v187;
    v68 = HIDWORD(v177);
    if (HIDWORD(v177))
      memmove(v187, v176, 8 * HIDWORD(v177));
  }
  else
  {
    v184 = v176;
    v176 = v175;
    v68 = HIDWORD(v177);
  }
  v185 = __PAIR64__(v68, v177);
  v186 = v178;
  v177 = 8;
  v178 = 0;
  v188 = v190;
  v189 = 0x800000000;
  if (v52)
    sub_1C486F510((uint64_t)&v188, (uint64_t)&v180);
  v191 = v6;
  if (v172 != v174)
    free(v172);
  if (v167 != v166)
    free(v167);
  if (v180 != v182)
    free(v180);
  if (v176 != v175)
    free(v176);
  v150 = v154;
  if (v135 == v134)
  {
    v151 = v154;
    v69 = HIDWORD(v136);
    if (HIDWORD(v136))
      memmove(v154, v135, 8 * HIDWORD(v136));
  }
  else
  {
    v151 = v135;
    v135 = v134;
    v69 = HIDWORD(v136);
  }
  v152 = __PAIR64__(v69, v136);
  v153 = v137;
  v136 = 8;
  v137 = 0;
  v155 = v157;
  v156 = 0x800000000;
  if ((_DWORD)v140)
    sub_1C486F510((uint64_t)&v155, (uint64_t)&v139);
  v142 = v146;
  if (v184 == v183)
  {
    v143 = v146;
    v70 = HIDWORD(v185);
    if (HIDWORD(v185))
      memmove(v146, v184, 8 * HIDWORD(v185));
  }
  else
  {
    v143 = v184;
    v184 = v183;
    v70 = HIDWORD(v185);
  }
  v144 = __PAIR64__(v70, v185);
  v145 = v186;
  v185 = 8;
  v186 = 0;
  v147 = v149;
  v148 = 0x800000000;
  if ((_DWORD)v189)
    sub_1C486F510((uint64_t)&v147, (uint64_t)&v188);
  v232 = v236;
  if (v151 == v150)
  {
    v233 = v236;
    v71 = HIDWORD(v152);
    if (HIDWORD(v152))
      memmove(v236, v151, 8 * HIDWORD(v152));
  }
  else
  {
    v233 = v151;
    v151 = v150;
    v71 = HIDWORD(v152);
  }
  v234 = __PAIR64__(v71, v152);
  v235 = v153;
  v152 = 8;
  v153 = 0;
  v237 = v239;
  v238 = 0x800000000;
  if ((_DWORD)v156)
    sub_1C486F510((uint64_t)&v237, (uint64_t)&v155);
  v224 = v228;
  if (v143 == v142)
  {
    v225 = v228;
    v72 = HIDWORD(v144);
    if (HIDWORD(v144))
      memmove(v228, v143, 8 * HIDWORD(v144));
  }
  else
  {
    v225 = v143;
    v143 = v142;
    v72 = HIDWORD(v144);
  }
  v226 = __PAIR64__(v72, v144);
  v227 = v145;
  v144 = 8;
  v145 = 0;
  v229 = v231;
  v230 = 0x800000000;
  if ((_DWORD)v148)
    sub_1C486F510((uint64_t)&v229, (uint64_t)&v147);
  v101 = v106;
  if (v233 == v232)
  {
    v102 = v106;
    v73 = HIDWORD(v234);
    if (HIDWORD(v234))
      memmove(v106, v233, 8 * HIDWORD(v234));
  }
  else
  {
    v102 = v233;
    v233 = v232;
    v73 = HIDWORD(v234);
  }
  v103 = v234;
  v104 = v73;
  v105 = v235;
  v234 = 8;
  v235 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v238)
    sub_1C486F510((uint64_t)&v107, (uint64_t)&v237);
  v74 = v244;
  v240 = v244;
  v75 = v225;
  if (v225 == v224)
  {
    v241 = v244;
    v76 = HIDWORD(v226);
    if (HIDWORD(v226))
      memmove(v244, v225, 8 * HIDWORD(v226));
    v75 = v244;
  }
  else
  {
    v241 = v225;
    v225 = v224;
    v76 = HIDWORD(v226);
  }
  v242 = __PAIR64__(v76, v226);
  v243 = v227;
  v226 = 8;
  v227 = 0;
  v245 = v247;
  v246 = 0x800000000;
  if ((_DWORD)v230)
  {
    sub_1C486F510((uint64_t)&v245, (uint64_t)&v229);
    v75 = v241;
    v74 = v240;
  }
  v158 = v162;
  if (v75 == v74)
  {
    v159 = v162;
    v77 = HIDWORD(v242);
    if (HIDWORD(v242))
      memmove(v162, v74, 8 * HIDWORD(v242));
  }
  else
  {
    v159 = v75;
    v241 = v74;
    v77 = HIDWORD(v242);
  }
  v160 = __PAIR64__(v77, v242);
  v161 = v243;
  v242 = 8;
  v243 = 0;
  v163 = v165;
  v164 = 0x800000000;
  if ((_DWORD)v246)
    sub_1C486F510((uint64_t)&v163, (uint64_t)&v245);
  if (v245 != v247)
    free(v245);
  if (v241 != v240)
    free(v241);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v229 != v231)
    free(v229);
  if (v225 != v224)
    free(v225);
  if (v237 != v239)
    free(v237);
  if (v233 != v232)
    free(v233);
  v78 = v191;
  v101 = v106;
  if (v159 == v158)
  {
    v102 = v106;
    v79 = HIDWORD(v160);
    if (HIDWORD(v160))
      memmove(v106, v159, 8 * HIDWORD(v160));
  }
  else
  {
    v102 = v159;
    v159 = v158;
    v79 = HIDWORD(v160);
  }
  v103 = v160;
  v104 = v79;
  v105 = v161;
  v160 = 8;
  v161 = 0;
  v107 = v109;
  v108 = 0x800000000;
  if ((_DWORD)v164)
    sub_1C486F510((uint64_t)&v107, (uint64_t)&v163);
  v109[16] = v78;
  if (v163 != v165)
    free(v163);
  if (v159 != v158)
    free(v159);
  if (v147 != v149)
    free(v147);
  if (v143 != v142)
    free(v143);
  if (v155 != v157)
    free(v155);
  if (v151 != v150)
    free(v151);
  if (v188 != v190)
    free(v188);
  if (v184 != v183)
    free(v184);
  if (v221 != v223)
    free(v221);
  if (v217 != v216)
    free(v217);
  if (v213 != v215)
    free(v213);
  if (v209 != v208)
    free(v209);
  if (v131 != v133)
    free(v131);
  if (v127 != v126)
    free(v127);
  if (v139 != v141)
    free(v139);
  if (v135 != v134)
    free(v135);
  if (v115 != v117)
    free(v115);
  if (v111 != v110)
    free(v111);
  if (v123 != v125)
    free(v123);
  if (__src != v118)
    free(__src);
  if (v107 != v109)
    free(v107);
  if (v102 != v101)
    free(v102);
  if (v90 != v92)
    free(v90);
  if (v85 != v89)
    free(v85);
  if (v98 != v100)
    free(v98);
  if (v94 != v93)
    free(v94);
}

_DWORD *sub_1C51D2328(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  int v51;
  char v52[31];

  v4 = (uint64_t)result;
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)a2 + 4 * v5;
  if (*(_DWORD *)(a2 + 8))
  {
    if ((_DWORD)v5)
    {
      v7 = 4 * v5;
      v8 = *(unsigned int **)a2;
      while (*v8 >= 0xFFFFFFFE)
      {
        ++v8;
        v7 -= 4;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(unsigned int **)a2;
    }
  }
  else
  {
LABEL_6:
    v8 = (unsigned int *)(*(_QWORD *)a2 + 4 * v5);
  }
  v9 = *(_QWORD *)a2 + 4 * v5;
  if (v8 == (unsigned int *)v9)
    return result;
  v10 = *(unsigned int *)(a3 + 8);
  v11 = result[16];
  v12 = result + 18;
  v13 = result[20];
  v14 = a3 + 16;
  v15 = *(_DWORD *)(a3 + 8);
  v16 = v11;
  do
  {
    v17 = *v8;
    if ((*v8 & 0x80000000) != 0)
    {
      v18 = v17 & 0x7FFFFFFF;
      if ((v17 & 0x7FFFFFFF) >= 0x14000)
      {
        v19 = *(_DWORD *)(v4 + 88);
        if (!v19)
          goto LABEL_22;
        v20 = *(_QWORD *)(v4 + 72);
        v21 = v19 - 1;
        v22 = v21 & (37 * v17);
        v23 = *(_DWORD *)(v20 + 4 * v22);
        if (v17 != v23)
        {
          v24 = 1;
          while (v23 != -1)
          {
            v25 = v22 + v24++;
            v22 = v25 & v21;
            v23 = *(_DWORD *)(v20 + 4 * v22);
            if (v17 == v23)
              goto LABEL_26;
          }
LABEL_22:
          ++v13;
LABEL_23:
          if (v15 >= *(_DWORD *)(a3 + 12))
          {
            v28 = v15 + 1;
            v50 = v12;
            v49 = v13;
            v48 = v10;
            v29 = v14;
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v14, v28, 4);
            v14 = v29;
            v13 = v49;
            v10 = v48;
            v12 = v50;
            v15 = *(_DWORD *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v15) = v17;
          v15 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v15;
        }
      }
      else if (v18 >= v11 || ((*(_QWORD *)(*(_QWORD *)v4 + ((v18 >> 3) & 0xFFFFFF8)) >> v17) & 1) == 0)
      {
        if (v16 <= (int)v18 + 1)
          v16 = v18 + 1;
        goto LABEL_23;
      }
    }
LABEL_26:
    v26 = v8 + 1;
    while (v26 != (unsigned int *)v6)
    {
      v27 = *v26++;
      if (v27 <= 0xFFFFFFFD)
      {
        v8 = v26 - 1;
        goto LABEL_31;
      }
    }
    v8 = (unsigned int *)v6;
LABEL_31:
    ;
  }
  while (v8 != (unsigned int *)v9);
  if ((_DWORD)v10 != v15)
  {
    v30 = *(unsigned int *)(v4 + 8);
    if ((*(_DWORD *)(v4 + 64) & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v30 - 8) &= ~(-1 << (*(_DWORD *)(v4 + 64) & 0x3F));
    v31 = v30;
    *(_DWORD *)(v4 + 64) = v16;
    v32 = v16 + 63;
    if ((_DWORD)v30 != (v16 + 63) >> 6)
    {
      v33 = v32 >> 6;
      if (v30 > v33)
      {
        *(_DWORD *)(v4 + 8) = v33;
        v31 = v32 >> 6;
      }
      else
      {
        v34 = v30;
        if (v33 > *(_DWORD *)(v4 + 12))
        {
          v45 = v12;
          v46 = v13;
          v47 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v33, 8);
          v13 = v46;
          v10 = v47;
          v12 = v45;
          v34 = *(unsigned int *)(v4 + 8);
          v31 = *(_DWORD *)(v4 + 8);
        }
        if (v33 != v30)
        {
          v35 = v12;
          v36 = v13;
          v37 = v10;
          bzero((void *)(*(_QWORD *)v4 + 8 * v34), 8 * (v33 - v30));
          v13 = v36;
          v10 = v37;
          v12 = v35;
        }
        v31 += v33 - v30;
        *(_DWORD *)(v4 + 8) = v31;
        v16 = *(_DWORD *)(v4 + 64);
      }
    }
    v38 = v10;
    if ((v16 & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v31 - 8) &= ~(-1 << (v16 & 0x3F));
    v39 = (uint64_t)v12;
    result = sub_1C617BEE8(v12, v13);
    v40 = v38;
    v41 = v15 >= v38;
    v42 = v15 - v38;
    if (v42 != 0 && v41)
    {
      v43 = 4 * v40;
      do
      {
        v44 = *(_DWORD *)(*(_QWORD *)a3 + v43);
        if ((v44 & 0x7FFFFFFFu) >= 0x14000)
        {
          v51 = *(_DWORD *)(*(_QWORD *)a3 + v43);
          result = sub_1C61E6104(v39, &v51, (uint64_t)v52);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v4 + (((unint64_t)(v44 & 0x7FFFFFFF) >> 3) & 0xFFFFFF8)) |= 1 << v44;
        }
        v43 += 4;
        --v42;
      }
      while (v42);
    }
  }
  return result;
}

uint64_t sub_1C51D26A4(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;

  v25 = a2;
  if ((a2 & 0x80000000) == 0)
    return 0;
  v2 = *(_DWORD *)(a1 + 72);
  if (!v2)
  {
LABEL_10:
    v13 = *(_QWORD *)(a1 + 104);
    v11 = a1 + 104;
    v12 = v13;
    v14 = *(_DWORD *)(v11 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = (v14 - 1) & (37 * a2);
      v17 = (_DWORD *)(v12 + 4 * v16);
      v18 = *v17;
      if (*v17 == a2)
        return 0;
      v19 = 0;
      v20 = 1;
      while (v18 != -1)
      {
        v7 = 0;
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -2;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = (_DWORD *)(v12 + 4 * v16);
        v18 = *v17;
        if (*v17 == a2)
          return v7;
      }
      if (v19)
        v23 = v19;
      else
        v23 = v17;
    }
    else
    {
      v23 = 0;
    }
    v24 = sub_1C4978C80(v11, (uint64_t)&v25, &v25, v23);
    *v24 = v25;
    return 1;
  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v2 - 1;
  v5 = (v2 - 1) & (37 * a2);
  v6 = *(_DWORD *)(v3 + 4 * v5);
  if (v6 != a2)
  {
    v9 = 1;
    while (v6 != -1)
    {
      v7 = 0;
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v6 = *(_DWORD *)(v3 + 4 * v5);
      if (v6 == a2)
        return v7;
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_1C51D27BC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  llvm **v7;
  llvm **v8;
  llvm *v9;
  unint64_t v10;
  unsigned int v11;
  llvm *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  llvm *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  llvm *v22;
  llvm::Value **v23;
  uint64_t v24;
  const char *v25;
  llvm *v26;
  llvm *v27;
  llvm *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  char v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  _WORD *v45;
  unsigned __int16 v46;
  unsigned __int16 *v47;
  int v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  llvm *v61;
  unsigned int v62;
  llvm *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  llvm::Value **v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int *v87;
  char v88;
  int v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  llvm *v104;
  uint64_t v105;
  BOOL v106;
  BOOL v107;
  unint64_t v108;
  llvm *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  llvm::LiveInterval *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int16 v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  BOOL v130;
  int v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  unsigned int v143;
  llvm *v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  llvm *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  BOOL v152;
  unint64_t v153;
  llvm *v154;
  char v155;
  char v156;
  unsigned int v157;
  llvm *v158;
  llvm *v159;
  llvm::raw_ostream *v160;
  llvm::raw_ostream *v161;
  _DWORD *v162;
  void *v163;
  _BYTE *v164;
  char isJointlyDominated;
  llvm *v166;
  llvm::raw_ostream *v167;
  llvm::raw_ostream *v168;
  uint64_t v169;
  _BYTE *v170;
  _QWORD *v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t (***v177)();
  void (**v178)(uint64_t (***)());
  void (**v179)(void);
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v188;
  unint64_t v189;
  uint64_t v190;
  llvm *v191;
  uint64_t v192;
  unint64_t v194;
  BOOL v196;
  llvm *v197;
  unint64_t v198;
  uint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t (**v203)();
  unint64_t v204;
  uint64_t (***v205)();
  _QWORD *v206;
  uint64_t v207;
  _QWORD v208[6];

  v4 = a2;
  v208[4] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v6)
    goto LABEL_90;
  v7 = *(llvm ***)(a2 + 64);
  v8 = &v7[v6];
  do
  {
    v9 = *v7;
    v10 = *((_QWORD *)*v7 + 1);
    if (v10 < 8)
      goto LABEL_25;
    v11 = *(_DWORD *)(v4 + 8);
    v12 = *(llvm **)v4;
    if (v11)
    {
      v13 = *((_QWORD *)v12 + 3 * v11 - 2);
      v14 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3;
      v15 = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
      v16 = *(llvm **)v4;
      v17 = *(unsigned int *)(v4 + 8);
      if (v14 < v15)
      {
        do
        {
          v18 = v17 >> 1;
          v19 = *((_QWORD *)v16 + 3 * (v17 >> 1) + 1);
          LODWORD(v19) = (v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
          v17 -= (v17 >> 1) + 1;
          v20 = v14 >= v19;
          if (v14 >= v19)
            v21 = v18 + 1;
          else
            v21 = 0;
          v16 = (llvm *)((char *)v16 + 24 * v21);
          if (!v20)
            v17 = v18;
        }
        while (v17);
        goto LABEL_15;
      }
    }
    else
    {
      v11 = 0;
    }
    v16 = (llvm *)((char *)v12 + 24 * v11);
LABEL_15:
    if (v16 == (llvm *)((char *)v12 + 24 * v11)
      || ((*(_QWORD *)v16 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3)
      || (v22 = (llvm *)*((_QWORD *)v16 + 2)) == 0)
    {
      v28 = (llvm *)v4;
      sub_1C51CCA6C(a1, "Value not live at VNInfo def and not marked unused", *(llvm::Value ***)(a1 + 16));
      goto LABEL_23;
    }
    if (v22 != v9)
    {
      v23 = *(llvm::Value ***)(a1 + 16);
      v24 = a1;
      v25 = "Live segment at def has different VNInfo";
LABEL_20:
      sub_1C51CCA6C(v24, v25, v23);
LABEL_21:
      v26 = (llvm *)a1;
      v27 = (llvm *)a2;
      goto LABEL_24;
    }
    v29 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288), v10);
    if (!v29)
    {
      v23 = *(llvm::Value ***)(a1 + 16);
      v24 = a1;
      v25 = "Invalid VNInfo definition index";
      goto LABEL_20;
    }
    v30 = v29;
    v31 = *((_QWORD *)v9 + 1);
    v32 = v31 & 6;
    if ((v31 & 6) == 0)
    {
      v4 = a2;
      if (v31 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288) + 392)
                            + 16 * *(unsigned int *)(v29 + 24)))
      {
        v53 = a1;
        v54 = "PHIDef VNInfo is not defined at MBB start";
        goto LABEL_70;
      }
      goto LABEL_25;
    }
    if (v31 < 8 || (v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 16)) == 0)
    {
      sub_1C51CC164(a1, "No instruction at VNInfo def index", v29);
      goto LABEL_21;
    }
    v4 = a2;
    if (!a3)
      goto LABEL_25;
    v34 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((*(_WORD *)(v33 + 44) & 4) != 0)
    {
      v34 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 16);
      do
        v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v34 + 44) & 4) != 0);
    }
    v35 = *(_QWORD *)(v33 + 24) + 48;
    v36 = *(unsigned int **)(v34 + 32);
    v37 = *(unsigned int *)(v34 + 40);
    v38 = &v36[8 * v37];
    if (!(_DWORD)v37)
    {
      v55 = *(_QWORD *)(v34 + 8);
      if (v55 == v35)
      {
        v34 = *(_QWORD *)(v33 + 24) + 48;
      }
      else
      {
        v34 = *(_QWORD *)(v33 + 24) + 48;
        if ((*(_WORD *)(v55 + 44) & 4) != 0)
        {
          while (1)
          {
            v56 = v55;
            v57 = *(unsigned int *)(v55 + 40);
            if ((_DWORD)v57)
              break;
            v55 = *(_QWORD *)(v55 + 8);
            if (v55 == v35 || (*(_WORD *)(v55 + 44) & 4) == 0)
            {
              v34 = *(_QWORD *)(v33 + 24) + 48;
              goto LABEL_89;
            }
          }
          v34 = v55;
LABEL_89:
          v36 = *(unsigned int **)(v56 + 32);
          v38 = &v36[8 * v57];
          v4 = a2;
        }
      }
    }
    if (v36 == v38)
    {
      sub_1C51CC4F8(a1, "Defining instruction does not modify register", v33);
      sub_1C51D3CD0((llvm *)a1, (llvm *)a2, a3, (llvm *)a4);
      sub_1C51D0BB8(v9);
      v4 = a2;
      v31 = *((_QWORD *)v9 + 1);
      goto LABEL_76;
    }
    v39 = 0;
    v40 = 0;
    while (1)
    {
      v41 = *v36;
      if ((v41 & 0x10000FF) != 0x1000000)
        goto LABEL_54;
      v42 = v36[1];
      if ((a3 & 0x80000000) != 0)
      {
        if (v42 != a3)
          goto LABEL_54;
LABEL_51:
        if (!a4 || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 232) + 8 * ((v41 >> 8) & 0xFFF)) & a4) != 0)
        {
          v40 |= (v41 & 0x40000000) >> 30;
          v39 = 1;
        }
        goto LABEL_54;
      }
      if (v42 - 1 <= 0x3FFFFFFE)
      {
        v43 = *(_QWORD *)(a1 + 40);
        v44 = *(unsigned int *)(*(_QWORD *)(v43 + 8) + 24 * v42 + 16);
        v45 = (_WORD *)(*(_QWORD *)(v43 + 56) + ((v44 >> 3) & 0x1FFFFFFE));
        v46 = *v45 + (v44 & 0xF) * v42;
        if (a3 == v46)
          goto LABEL_51;
        v47 = v45 + 1;
        do
        {
          v49 = *v47++;
          v48 = v49;
          v46 += v49;
          if (!v49)
            v47 = 0;
          if (v48)
            v50 = v46 == a3;
          else
            v50 = 1;
        }
        while (!v50);
        if (v48)
          goto LABEL_51;
      }
LABEL_54:
      v36 += 8;
      if (v36 == v38)
        break;
LABEL_62:
      if (v36 == v38)
        goto LABEL_63;
    }
    v34 = *(_QWORD *)(v34 + 8);
    if (v34 != v35 && (*(_WORD *)(v34 + 44) & 4) != 0)
    {
      while (1)
      {
        v51 = v34;
        v52 = *(unsigned int *)(v34 + 40);
        if ((_DWORD)v52)
          break;
        v34 = *(_QWORD *)(v34 + 8);
        if (v34 == v35 || (*(_WORD *)(v34 + 44) & 4) == 0)
        {
          v34 = *(_QWORD *)(v33 + 24) + 48;
          break;
        }
      }
      v36 = *(unsigned int **)(v51 + 32);
      v38 = &v36[8 * v52];
      goto LABEL_62;
    }
LABEL_63:
    if ((v39 & 1) == 0)
    {
      sub_1C51CC4F8(a1, "Defining instruction does not modify register", v33);
      sub_1C51D3CD0((llvm *)a1, (llvm *)a2, a3, (llvm *)a4);
      sub_1C51D0BB8(v9);
      v4 = a2;
      v31 = *((_QWORD *)v9 + 1);
      if ((v40 & 1) == 0)
        goto LABEL_76;
      v32 = *((_QWORD *)v9 + 1) & 6;
LABEL_74:
      if (v32 != 2)
      {
        v53 = a1;
        v54 = "Early clobber def must be at an early-clobber slot";
        goto LABEL_70;
      }
      goto LABEL_25;
    }
    if ((v40 & 1) != 0)
      goto LABEL_74;
LABEL_76:
    if ((v31 & 6) != 4)
    {
      v53 = a1;
      v54 = "Non-PHI, non-early clobber def must be at a register slot";
LABEL_70:
      v28 = (llvm *)v4;
      sub_1C51CC164(v53, v54, v30);
LABEL_23:
      v26 = (llvm *)a1;
      v27 = v28;
LABEL_24:
      sub_1C51D3CD0(v26, v27, a3, (llvm *)a4);
      sub_1C51D0BB8(v9);
      v4 = a2;
    }
LABEL_25:
    ++v7;
  }
  while (v7 != v8);
LABEL_90:
  v58 = *(_DWORD *)(v4 + 8);
  v59 = a4;
  v60 = a3;
  if (v58)
  {
    v61 = *(llvm **)v4;
    v192 = *(_QWORD *)v4 + 24 * v58;
    v62 = a3;
    v189 = a3 & 0x7FFFFFFF;
    v190 = a1;
    while (1)
    {
      v63 = (llvm *)*((_QWORD *)v61 + 2);
      v64 = *(unsigned int *)v63;
      if (v64 >= *(_DWORD *)(v4 + 72) || v63 != *(llvm **)(*(_QWORD *)(v4 + 64) + 8 * v64))
      {
        sub_1C51CCA6C(a1, "Foreign valno in live segment", *(llvm::Value ***)(a1 + 16));
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        sub_1C51D0BB8(v63);
      }
      if (*((_QWORD *)v63 + 1) <= 7uLL)
      {
        sub_1C51CCA6C(a1, "Live segment valno is marked unused", *(llvm::Value ***)(a1 + 16));
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
      }
      v65 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288), *(_QWORD *)v61);
      if (!v65)
      {
        v72 = *(llvm::Value ***)(a1 + 16);
        v73 = a1;
        v74 = "Bad start of live segment, no basic block";
LABEL_114:
        sub_1C51CCA6C(v73, v74, v72);
LABEL_115:
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        v4 = a2;
        goto LABEL_116;
      }
      v66 = *(_QWORD *)(a1 + 600);
      v67 = v65;
      if (*(_QWORD *)v61 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 288) + 392) + 16
                                                                                     * *(unsigned int *)(v65 + 24))
        && *(_QWORD *)v61 != *((_QWORD *)v63 + 1))
      {
        sub_1C51CC164(a1, "Live segment must begin at MBB entry or valno def", v65);
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        v66 = *(_QWORD *)(a1 + 600);
      }
      v68 = *((_QWORD *)v61 + 1);
      v69 = (v68 >> 1) & 3;
      v70 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (v69)
        v71 = v70 | (2 * (v69 - 1));
      else
        v71 = *(_QWORD *)v70 | 6;
      v75 = sub_1C499C548(*(_QWORD *)(v66 + 288), v71);
      if (!v75)
      {
        v72 = *(llvm::Value ***)(a1 + 16);
        v73 = a1;
        v74 = "Bad end of live segment, no basic block";
        goto LABEL_114;
      }
      v76 = *((_QWORD *)v61 + 1);
      v4 = a2;
      if (v76 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288) + 392)
                            + 16 * *(unsigned int *)(v75 + 24)
                            + 8))
        goto LABEL_116;
      if ((v60 & 0x80000000) == 0)
      {
        v77 = *((_QWORD *)v63 + 1);
        if ((v77 & 6) == 0 && *(_QWORD *)v61 == v77 && v76 == (v77 & 0xFFFFFFFFFFFFFFF8 | 6))
          goto LABEL_116;
      }
      v78 = (v76 >> 1) & 3;
      v79 = v76 & 0xFFFFFFFFFFFFFFF8;
      v194 = v75;
      if (v78)
        v80 = v79 | (2 * (v78 - 1));
      else
        v80 = *(_QWORD *)v79 | 6;
      v81 = v67;
      if (v80 < 8 || (v82 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 16)) == 0)
      {
        sub_1C51CC164(a1, "Live segment doesn't end at a valid instruction", v75);
        goto LABEL_115;
      }
      if ((v76 & 6) == 0)
      {
        sub_1C51CC164(a1, "Live segment ends at B slot of an instruction", v75);
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        v81 = v67;
        v76 = *((_QWORD *)v61 + 1);
      }
      if ((~(_BYTE)v76 & 6) == 0 && (*(_QWORD *)v61 & 0xFFFFFFFFFFFFFFF8) != (v76 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_1C51CC164(a1, "Live segment ending at dead slot spans instructions", v194);
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        v81 = v67;
      }
      v4 = a2;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 360) + 1) & 1) != 0
        && (*((_QWORD *)v61 + 1) & 6) == 2
        && ((llvm *)((char *)v61 + 24) == (llvm *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8))
         || *((_QWORD *)v61 + 3) != *((_QWORD *)v61 + 1)))
      {
        sub_1C51CC164(a1, "Live segment ending at early clobber slot must be redefined by an EC def in the same instruction", v194);
        sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)v59);
        sub_1C51D3D28(v61);
        v81 = v67;
        v4 = a2;
      }
      v191 = v61;
      v197 = v63;
      if ((v60 & 0x80000000) == 0)
        goto LABEL_182;
      v83 = v82;
      if ((*(_WORD *)(v82 + 44) & 4) != 0)
      {
        v83 = v82;
        do
          v83 = *(_QWORD *)v83 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v83 + 44) & 4) != 0);
      }
      v84 = *(_QWORD *)(v82 + 24) + 48;
      v85 = *(unsigned int **)(v83 + 32);
      v86 = *(unsigned int *)(v83 + 40);
      v87 = &v85[8 * v86];
      if (!(_DWORD)v86)
      {
        v180 = *(_QWORD *)(v83 + 8);
        if (v180 == v84)
        {
          v83 = *(_QWORD *)(v82 + 24) + 48;
        }
        else
        {
          v83 = *(_QWORD *)(v82 + 24) + 48;
          if ((*(_WORD *)(v180 + 44) & 4) != 0)
          {
            while (1)
            {
              v181 = v180;
              v182 = *(unsigned int *)(v180 + 40);
              if ((_DWORD)v182)
                break;
              v180 = *(_QWORD *)(v180 + 8);
              if (v180 == v84 || (*(_WORD *)(v180 + 44) & 4) == 0)
              {
                v83 = *(_QWORD *)(v82 + 24) + 48;
                goto LABEL_344;
              }
            }
            v83 = v180;
LABEL_344:
            v85 = *(unsigned int **)(v181 + 32);
            v87 = &v85[8 * v182];
            v59 = a4;
            v60 = a3;
            v62 = a3;
            v4 = a2;
            v81 = v67;
          }
        }
      }
      if (v85 == v87)
      {
        v90 = 0;
        LOBYTE(v89) = 0;
        if ((~*((_DWORD *)v61 + 2) & 6) != 0)
          goto LABEL_171;
LABEL_168:
        if (!v59 && (v90 & 1) == 0)
        {
          v103 = v82;
          v104 = (llvm *)v4;
          sub_1C51CC4F8(a1, "Instruction ending live segment on dead slot has no dead flag", v103);
          sub_1C51D0784(v104);
          sub_1C51D0830((llvm *)a1, v62);
LABEL_181:
          sub_1C51D3D28(v61);
          v4 = a2;
          v81 = v67;
          goto LABEL_182;
        }
        goto LABEL_182;
      }
      v88 = 0;
      v89 = 0;
      v90 = 0;
      while (1)
      {
        v91 = *v85;
        if (!*v85 && v85[1] == v60)
        {
          v92 = (v91 >> 8) & 0xFFF;
          if ((_DWORD)v92)
            v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 232) + 8 * v92);
          else
            v93 = -1;
          v50 = (_DWORD)v92 == 0;
          v94 = v92 != 0;
          if (v50)
            v95 = v93;
          else
            v95 = ~v93;
          v96 = v94 | v89;
          if ((v91 & 0x1000000) != 0)
            v97 = v95;
          else
            v97 = v93;
          if ((v91 & 0x1000000) != 0)
          {
            v90 |= (~(_DWORD)v91 & 0x5000000) == 0;
            v89 = v96;
          }
          if (!v59 || (v97 & v59) != 0)
          {
            v98 = (v91 & 0x30000000) == 0;
            v99 = v91 & 0x31000000;
            v100 = (v91 & 0xFFF00) != 0;
            if (v99 != 0x1000000)
              v100 = v98;
            v88 |= v100;
          }
        }
        v85 += 8;
        if (v85 == v87)
          break;
LABEL_162:
        if (v85 == v87)
          goto LABEL_163;
      }
      v83 = *(_QWORD *)(v83 + 8);
      if (v83 != v84 && (*(_WORD *)(v83 + 44) & 4) != 0)
        break;
LABEL_163:
      if ((~*((_DWORD *)v61 + 2) & 6) == 0)
        goto LABEL_168;
      if ((v88 & 1) != 0)
        goto LABEL_182;
LABEL_171:
      v105 = *(_QWORD *)(a1 + 48);
      if (*(_BYTE *)(v105 + 16))
        v106 = *(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v105 + 24) + 16 * v189) & 0xFFFFFFFFFFFFFFF8) + 34) == 0;
      else
        v106 = 1;
      v107 = !v106 && v59 == 0;
      if (!v107 || (v89 & 1) == 0)
      {
        v108 = v82;
        v109 = (llvm *)v4;
        sub_1C51CC4F8(a1, "Instruction ending live segment doesn't read the register", v108);
        sub_1C51D3CD0((llvm *)a1, v109, v62, (llvm *)v59);
        goto LABEL_181;
      }
LABEL_182:
      v110 = *((_QWORD *)v63 + 1);
      if (*(_QWORD *)v61 != v110)
      {
        v111 = v194;
LABEL_187:
        v206 = v208;
        v207 = 0x400000000;
        if (v59)
        {
          v112 = v81;
          v113 = *(_QWORD *)(a1 + 600);
          if (v189 >= *(unsigned int *)(v113 + 416)
            || (v114 = *(llvm::LiveInterval **)(*(_QWORD *)(v113 + 408) + 8 * v189)) == 0)
          {
            v114 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 600), a3);
            v183 = *(_QWORD *)(v113 + 304);
            v184 = *(_QWORD *)(v113 + 248);
            *(_QWORD *)v183 = v184;
            *(_QWORD *)(v183 + 8) = *(_QWORD *)(v184 + 40);
            *(_OWORD *)(v183 + 16) = *(_OWORD *)(v113 + 288);
            *(_QWORD *)(v183 + 32) = v113 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v183);
            *(_DWORD *)(v183 + 184) = 0;
            v185 = *(_QWORD *)(v113 + 256);
            v50 = *(_BYTE *)(v185 + 16) == 0;
            v186 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v185 + 24)
                                                   + 16 * (*((_DWORD *)v114 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v188 = !v50 && v186 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v113 + 304), v114, v188);
            llvm::LiveIntervals::computeDeadValues(v113, (uint64_t)v114, 0);
          }
          llvm::LiveInterval::computeSubRangeUndefs((uint64_t)v114, (uint64_t)&v206, a4, *(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 616));
          v4 = a2;
          v62 = a3;
          v111 = v194;
          v81 = v112;
        }
        if ((v60 & 0x80000000) != 0)
          goto LABEL_195;
LABEL_192:
        if (*(_BYTE *)(v81 + 184))
        {
          if (v81 != v111)
            goto LABEL_321;
LABEL_323:
          if (v206 != v208)
          {
            free(v206);
            v4 = a2;
          }
          v59 = a4;
          goto LABEL_116;
        }
LABEL_195:
        while (1)
        {
          v115 = *((_QWORD *)v63 + 1);
          v196 = (v115 & 6) == 0
              && v115 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288) + 392)
                                   + 16 * *(unsigned int *)(v81 + 24));
          v117 = *(unint64_t **)(v81 + 64);
          v116 = *(unint64_t **)(v81 + 72);
          if (v117 != v116)
            break;
LABEL_320:
          v111 = v194;
          v60 = a3;
          v61 = v191;
          v63 = v197;
          if (v81 == v194)
            goto LABEL_323;
LABEL_321:
          v81 = *(_QWORD *)(v81 + 8);
          if ((v60 & 0x80000000) == 0)
            goto LABEL_192;
        }
        if (a4)
          v118 = v196;
        else
          v118 = 0;
        v198 = v81;
        while (2)
        {
          v119 = *v117;
          v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288) + 392)
                           + 16 * *(unsigned int *)(*v117 + 24)
                           + 8);
          if (*(_BYTE *)(v81 + 184))
          {
            v121 = *(_QWORD *)(v119 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v121 || (*(_BYTE *)v121 & 4) == 0)
            {
              while ((*(_WORD *)(v121 + 44) & 4) != 0)
                v121 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFF8;
            }
            while (v121 != v119 + 48)
            {
              v122 = *(_WORD *)(v121 + 44);
              v123 = *(_QWORD *)(*(_QWORD *)(v121 + 16) + 8);
              if ((v122 & 0xC) != 0 && (v122 & 4) == 0)
              {
                v125 = v121;
                if ((v123 & 0x80) != 0)
                {
LABEL_224:
                  v126 = *(_QWORD *)(a1 + 616);
                  goto LABEL_226;
                }
                while ((*(_WORD *)(v125 + 44) & 8) != 0)
                {
                  v125 = *(_QWORD *)(v125 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v125 + 16) + 8) & 0x80) != 0)
                    goto LABEL_224;
                }
              }
              else if ((v123 & 0x80) != 0)
              {
                v126 = *(_QWORD *)(a1 + 616);
                v127 = v121;
                if ((v122 & 4) != 0)
                {
                  do
                    v127 = *(_QWORD *)v127 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v127 + 44) & 4) != 0);
                }
                else
                {
LABEL_226:
                  v127 = v121;
                }
                if ((v122 & 8) != 0)
                {
                  do
                    v121 = *(_QWORD *)(v121 + 8);
                  while ((*(_WORD *)(v121 + 44) & 8) != 0);
                }
                v128 = *(_QWORD *)(v121 + 8);
                if (v127 != v128)
                {
                  while (1)
                  {
                    v129 = **(unsigned __int16 **)(v127 + 16);
                    v130 = v129 > 0x17;
                    v131 = (1 << v129) & 0x83E000;
                    if (v130 || v131 == 0)
                      break;
                    v127 = *(_QWORD *)(v127 + 8);
                    if (v127 == v128)
                    {
                      v127 = v128;
                      break;
                    }
                  }
                }
                v133 = *(_QWORD *)(v126 + 368);
                v134 = *(unsigned int *)(v126 + 384);
                if ((_DWORD)v134)
                {
                  LODWORD(v135) = ((v127 >> 4) ^ (v127 >> 9)) & (v134 - 1);
                  v136 = (uint64_t *)(v133 + 16 * v135);
                  v137 = *v136;
                  if (v127 != *v136)
                  {
                    v138 = 1;
                    while (v137 != -4096)
                    {
                      v139 = v135 + v138++;
                      v135 = v139 & (v134 - 1);
                      v137 = *(_QWORD *)(v133 + 16 * v135);
                      if (v127 == v137)
                      {
                        v136 = (uint64_t *)(v133 + 16 * v135);
                        goto LABEL_242;
                      }
                    }
                    goto LABEL_241;
                  }
                }
                else
                {
LABEL_241:
                  v136 = (uint64_t *)(v133 + 16 * v134);
                }
LABEL_242:
                v120 = v136[1] & 0xFFFFFFFFFFFFFFF8 | 6;
                break;
              }
              v121 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFF8;
              if (!v121 || (*(_BYTE *)v121 & 4) == 0)
              {
                while ((*(_WORD *)(v121 + 44) & 4) != 0)
                  v121 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFF8;
              }
            }
          }
          v140 = (v120 >> 1) & 3;
          v141 = v120 & 0xFFFFFFFFFFFFFFF8;
          if (v140)
            v142 = v141 | (2 * (v140 - 1));
          else
            v142 = *(_QWORD *)v141 | 6;
          v143 = *(_DWORD *)(v4 + 8);
          v144 = *(llvm **)v4;
          if (v143)
          {
            v145 = *((_QWORD *)v144 + 3 * v143 - 2);
            v146 = *(_DWORD *)((v142 & 0xFFFFFFFFFFFFFFF8) + 24) | (v142 >> 1) & 3;
            v147 = (v145 >> 1) & 3 | *(_DWORD *)((v145 & 0xFFFFFFFFFFFFFFF8) + 24);
            v148 = *(llvm **)v4;
            v149 = *(unsigned int *)(v4 + 8);
            if (v146 < v147)
            {
              do
              {
                v150 = v149 >> 1;
                v151 = *((_QWORD *)v148 + 3 * (v149 >> 1) + 1);
                LODWORD(v151) = (v151 >> 1) & 3 | *(_DWORD *)((v151 & 0xFFFFFFFFFFFFFFF8) + 24);
                v149 -= (v149 >> 1) + 1;
                v152 = v146 >= v151;
                if (v146 >= v151)
                  v153 = v150 + 1;
                else
                  v153 = 0;
                v148 = (llvm *)((char *)v148 + 24 * v153);
                if (!v152)
                  v149 = v150;
              }
              while (v149);
LABEL_256:
              if (v148 == (llvm *)((char *)v144 + 24 * v143)
                || ((*(_QWORD *)v148 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v148 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v142 & 0xFFFFFFFFFFFFFFF8) + 24) | (v142 >> 1) & 3))
              {
                v154 = 0;
              }
              else
              {
                v154 = (llvm *)*((_QWORD *)v148 + 2);
              }
              if (v154)
                v155 = 1;
              else
                v155 = v118;
              if ((v155 & 1) != 0)
              {
                v156 = v196;
                if (v154 == v197)
                  v156 = 1;
                if ((v156 & 1) != 0)
                  goto LABEL_274;
                v157 = v62;
                v158 = (llvm *)v4;
                sub_1C51CC164(a1, "Different value live out of predecessor", *v117);
                v159 = (llvm *)sub_1C51D3CD0((llvm *)a1, v158, v157, (llvm *)a4);
                v160 = (llvm::raw_ostream *)llvm::errs(v159);
                v161 = v160;
                v162 = (_DWORD *)*((_QWORD *)v160 + 4);
                if (*((_QWORD *)v160 + 3) - (_QWORD)v162 > 6uLL)
                {
                  *(_DWORD *)((char *)v162 + 3) = 589328238;
                  *v162 = 1852596566;
                  *((_QWORD *)v160 + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(v160, "Valno #", 7uLL);
                }
                sub_1C5E21910(v161, *(unsigned int *)v154, 0, 0, 0);
                v163 = (void *)*((_QWORD *)v161 + 4);
                a1 = v190;
                if (*((_QWORD *)v161 + 3) - (_QWORD)v163 > 0xCuLL)
                {
                  qmemcpy(v163, " live out of ", 13);
                  *((_QWORD *)v161 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v161, " live out of ", 0xDuLL);
                }
                v205 = &v203;
                v203 = &off_1E8143F38;
                v204 = v119;
                sub_1C512E114((uint64_t)&v203, v161);
                v164 = (_BYTE *)*((_QWORD *)v161 + 4);
                if ((unint64_t)v164 >= *((_QWORD *)v161 + 3))
                {
                  llvm::raw_ostream::write(v161, 64);
                }
                else
                {
                  *((_QWORD *)v161 + 4) = v164 + 1;
                  *v164 = 64;
                }
                v201[0] = v120;
                llvm::SlotIndex::print((llvm::SlotIndex *)v201, v161);
                v171 = (_QWORD *)*((_QWORD *)v161 + 4);
                if (*((_QWORD *)v161 + 3) - (_QWORD)v171 > 7uLL)
                {
                  *v171 = 0x23206F6E6C61560ALL;
                  *((_QWORD *)v161 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v161, "\nValno #", 8uLL);
                }
                sub_1C5E21910(v161, *(unsigned int *)v197, 0, 0, 0);
                v172 = *((_QWORD *)v161 + 4);
                if ((unint64_t)(*((_QWORD *)v161 + 3) - v172) > 0xA)
                {
                  *(_DWORD *)(v172 + 7) = 544175214;
                  *(_QWORD *)v172 = *(_QWORD *)" live into ";
                  *((_QWORD *)v161 + 4) += 11;
                }
                else
                {
                  llvm::raw_ostream::write(v161, " live into ", 0xBuLL);
                }
                v202 = v201;
                v201[0] = &off_1E8143F38;
                v201[1] = v198;
                sub_1C512E114((uint64_t)v201, v161);
                v173 = (_BYTE *)*((_QWORD *)v161 + 4);
                if ((unint64_t)v173 >= *((_QWORD *)v161 + 3))
                {
                  llvm::raw_ostream::write(v161, 64);
                }
                else
                {
                  *((_QWORD *)v161 + 4) = v173 + 1;
                  *v173 = 64;
                }
                v200 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v190 + 600) + 288) + 392)
                                 + 16 * *(unsigned int *)(v198 + 24));
                llvm::SlotIndex::print((llvm::SlotIndex *)&v200, v161);
                v176 = (_BYTE *)*((_QWORD *)v161 + 4);
                if ((unint64_t)v176 >= *((_QWORD *)v161 + 3))
                {
                  llvm::raw_ostream::write(v161, 10);
                }
                else
                {
                  *((_QWORD *)v161 + 4) = v176 + 1;
                  *v176 = 10;
                }
                v62 = a3;
                if (v202 == v201)
                {
                  v179 = (void (**)(void))(v201[0] + 32);
LABEL_304:
                  (*v179)();
                }
                else if (v202)
                {
                  v179 = (void (**)(void))(*v202 + 40);
                  goto LABEL_304;
                }
                v177 = v205;
                if (v205 != &v203)
                {
LABEL_306:
                  if (v177)
                  {
                    v178 = (void (**)(uint64_t (***)()))(*v177 + 5);
LABEL_308:
                    (*v178)(v177);
                  }
                  v81 = v198;
                  v4 = a2;
LABEL_274:
                  if (++v117 == v116)
                    goto LABEL_320;
                  continue;
                }
              }
              else
              {
                isJointlyDominated = llvm::LiveRangeCalc::isJointlyDominated(*v117, v206, v207, *(_QWORD *)(a1 + 616));
                v81 = v198;
                v4 = a2;
                if ((isJointlyDominated & 1) != 0)
                  goto LABEL_274;
                sub_1C51CC164(a1, "Register not marked live out of predecessor", v119);
                sub_1C51D3CD0((llvm *)a1, (llvm *)a2, v62, (llvm *)a4);
                v166 = sub_1C51D0BB8(v197);
                v167 = (llvm::raw_ostream *)llvm::errs(v166);
                v168 = v167;
                v169 = *((_QWORD *)v167 + 4);
                if ((unint64_t)(*((_QWORD *)v167 + 3) - v169) > 0xA)
                {
                  *(_DWORD *)(v169 + 7) = 544175214;
                  *(_QWORD *)v169 = *(_QWORD *)" live into ";
                  *((_QWORD *)v167 + 4) += 11;
                }
                else
                {
                  llvm::raw_ostream::write(v167, " live into ", 0xBuLL);
                }
                v205 = &v203;
                v203 = &off_1E8143F38;
                v204 = v198;
                sub_1C512E114((uint64_t)&v203, v168);
                v170 = (_BYTE *)*((_QWORD *)v168 + 4);
                if ((unint64_t)v170 >= *((_QWORD *)v168 + 3))
                {
                  llvm::raw_ostream::write(v168, 64);
                }
                else
                {
                  *((_QWORD *)v168 + 4) = v170 + 1;
                  *v170 = 64;
                }
                v201[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 288) + 392)
                                    + 16 * *(unsigned int *)(v198 + 24));
                llvm::SlotIndex::print((llvm::SlotIndex *)v201, v168);
                v174 = *((_QWORD *)v168 + 4);
                if ((unint64_t)(*((_QWORD *)v168 + 3) - v174) > 0x11)
                {
                  *(_WORD *)(v174 + 16) = 8293;
                  *(_OWORD *)v174 = *(_OWORD *)", not live before ";
                  *((_QWORD *)v168 + 4) += 18;
                }
                else
                {
                  llvm::raw_ostream::write(v168, ", not live before ", 0x12uLL);
                }
                v201[0] = v120;
                llvm::SlotIndex::print((llvm::SlotIndex *)v201, v168);
                v175 = (_BYTE *)*((_QWORD *)v168 + 4);
                if ((unint64_t)v175 >= *((_QWORD *)v168 + 3))
                {
                  llvm::raw_ostream::write(v168, 10);
                }
                else
                {
                  *((_QWORD *)v168 + 4) = v175 + 1;
                  *v175 = 10;
                }
                v177 = v205;
                v62 = a3;
                if (v205 != &v203)
                  goto LABEL_306;
              }
              v178 = (void (**)(uint64_t (***)()))(v203 + 4);
              v177 = &v203;
              goto LABEL_308;
            }
          }
          else
          {
            v143 = 0;
          }
          break;
        }
        v148 = (llvm *)((char *)v144 + 24 * v143);
        goto LABEL_256;
      }
      v111 = v194;
      if ((v110 & 6) == 0)
        goto LABEL_187;
      if (v81 != v194)
      {
        v81 = *(_QWORD *)(v67 + 8);
        goto LABEL_187;
      }
LABEL_116:
      v61 = (llvm *)((char *)v61 + 24);
      if (v61 == (llvm *)v192)
        return;
    }
    do
    {
      v101 = v83;
      v102 = *(unsigned int *)(v83 + 40);
      if ((_DWORD)v102)
        goto LABEL_161;
      v83 = *(_QWORD *)(v83 + 8);
    }
    while (v83 != v84 && (*(_WORD *)(v83 + 44) & 4) != 0);
    v83 = *(_QWORD *)(v82 + 24) + 48;
LABEL_161:
    v85 = *(unsigned int **)(v101 + 32);
    v87 = &v85[8 * v102];
    goto LABEL_162;
  }
}

uint64_t sub_1C51D3CD0(llvm *a1, llvm *a2, unsigned int a3, llvm *a4)
{
  uint64_t result;

  sub_1C51D0784(a2);
  result = sub_1C51D0830(a1, a3);
  if (a4)
    return sub_1C51D09A0(a4);
  return result;
}

llvm::raw_ostream *sub_1C51D3D28(llvm *a1)
{
  llvm::raw_ostream *v2;
  void *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0xEuLL)
  {
    qmemcpy(v3, "- segment:     ", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "- segment:     ", 0xFuLL);
  }
  result = llvm::operator<<(v2, (uint64_t *)a1);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

uint64_t sub_1C51D3DC4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Add MIR Flow Sensitive Discriminators";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "mirfs-discriminators";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &llvm::MIRAddFSDiscriminators::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MIRAddFSDiscriminators>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MIRAddFSDiscriminators::runOnMachineFunction(llvm::MIRAddFSDiscriminators *this, llvm::MachineFunction *a2)
{
  llvm::Module *v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t i;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  const char *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  size_t size;
  int *v28;
  int v29;
  llvm::Value *v30;
  int *Name;
  size_t v32;
  int data;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  int v39;
  uint64_t v40;
  size_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t k;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  llvm::MDNode *Impl;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  int v61;
  char v62;
  int v63;
  llvm::MIRAddFSDiscriminators *v64;
  int v65;
  unsigned __int8 *v66;
  _QWORD v67[2];
  int v68;
  unsigned int v69;
  _QWORD v70[2];
  int v71;
  uint64_t v72[2];
  unsigned int v73;
  std::string v74;
  int v75[4];
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (byte_1ED830650 && llvm::Function::isDebugInfoForProfiling(*(llvm::Function **)a2))
  {
    v5 = 0;
    v72[0] = 0;
    v72[1] = 0;
    v73 = 0;
    v70[0] = 0;
    v70[1] = 0;
    v71 = 0;
    v7 = *((_DWORD *)this + 64);
    if (v7 == 31)
      v8 = -1;
    else
      v8 = ~(-1 << (v7 + 1));
    v9 = *((_DWORD *)this + 65);
    if (v9 == 31)
      v10 = -1;
    else
      v10 = ~(-1 << (v9 + 1));
    v11 = (char *)a2 + 320;
    v12 = (char *)*((_QWORD *)a2 + 41);
    if (v12 == (char *)a2 + 320)
    {
LABEL_109:
      MEMORY[0x1CAA32FB4](v70[0], 8);
      v59 = v72[0];
      sub_1C61FF8A4(v72[0], v73);
      MEMORY[0x1CAA32FB4](v59, 8);
      return v5;
    }
    v60 = a2;
    v62 = 0;
    v63 = v10 ^ v8;
    v64 = this;
LABEL_13:
    for (i = *((_QWORD *)v12 + 7); ; i = *(_QWORD *)(i + 8))
    {
      if ((char *)i == v12 + 48)
      {
        v12 = (char *)*((_QWORD *)v12 + 1);
        if (v12 == v11)
        {
          if ((v62 & 1) != 0)
          {
            llvm::sampleprofutil::createFSDiscriminatorVariable(*(uint64_t ***)(*(_QWORD *)v60 + 40), v4);
            v5 = 1;
          }
          else
          {
            v5 = 0;
          }
          goto LABEL_109;
        }
        goto LABEL_13;
      }
      v14 = (unsigned __int8 **)(i + 56);
      v15 = *(_QWORD *)(i + 56);
      if (!v15)
        goto LABEL_17;
      v16 = *(_DWORD *)(v15 + 4);
      if (!v16)
        goto LABEL_17;
      v17 = *(unsigned __int8 **)(v15 - 8 * *(unsigned int *)(v15 + 8));
      v18 = *v17;
      if (v18 == 19)
      {
        v19 = *((_DWORD *)v17 + 6);
      }
      else
      {
        v19 = 0;
        if (v18 == 15)
          goto LABEL_24;
      }
      v17 = *(unsigned __int8 **)&v17[-8 * *((unsigned int *)v17 + 2)];
      if (!v17)
      {
        v20 = "";
        goto LABEL_27;
      }
LABEL_24:
      v17 = *(unsigned __int8 **)&v17[-8 * *((unsigned int *)v17 + 2)];
      if (v17)
      {
        v21 = (_QWORD *)*((_QWORD *)v17 + 1);
        v22 = (unsigned __int8 *)*v21;
        v20 = (const char *)(v21 + 3);
        v17 = v22;
      }
      else
      {
        v20 = 0;
      }
LABEL_27:
      v67[0] = v20;
      v67[1] = v17;
      v68 = v16;
      v69 = v19;
      v23 = sub_1C61FF9C0((uint64_t)v72, (uint64_t)v67);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      sub_1C614F72C(v23 + 24, &v74, (uint64_t)&v76);
      if (*(_DWORD *)(v23 + 32) == 1)
        goto LABEL_17;
      v24 = v77;
      v25 = sub_1C61FFE7C((uint64_t)v70, (uint64_t)v67);
      v26 = *(_DWORD *)(v25 + 24);
      if (v24)
        *(_DWORD *)(v25 + 24) = ++v26;
      v65 = *((_DWORD *)this + 64);
      std::to_string(&v74, *(_DWORD *)(v15 + 4));
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v74.__r_.__value_.__l.__size_;
      if (size)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = (int *)&v74;
        else
          v28 = (int *)v74.__r_.__value_.__r.__words[0];
        v76 = xmmword_1C85F4BB0;
        v77 = 0;
        llvm::MD5::update((int *)&v76, v28, size);
        llvm::MD5::final((int *)&v76, v75);
        v29 = v75[0];
        if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_39;
      }
      else
      {
        v29 = 0;
        if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_39;
      }
      operator delete(v74.__r_.__value_.__l.__data_);
LABEL_39:
      v30 = (llvm::Value *)*((_QWORD *)v12 + 2);
      if (v30 && (Name = (int *)llvm::Value::getName(v30), v32))
      {
        v76 = xmmword_1C85F4BB0;
        v77 = 0;
        llvm::MD5::update((int *)&v76, Name, v32);
        llvm::MD5::final((int *)&v76, (int *)&v74);
        data = (int)v74.__r_.__value_.__l.__data_;
      }
      else
      {
        data = 0;
      }
      v34 = *(unsigned int *)(v15 + 8);
      for (j = *(_QWORD *)(v15 - 8 * v34);
            (*(_BYTE *)j & 0xFE) == 0x12;
      v36 = *(_QWORD *)(j - 8 * *(unsigned int *)(j + 8) + 24);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        v38 = *(_QWORD *)v37;
        if (*(_QWORD *)v37)
        {
          v76 = xmmword_1C85F4BB0;
          v77 = 0;
          llvm::MD5::update((int *)&v76, (int *)(v37 + 24), v38);
          llvm::MD5::final((int *)&v76, (int *)&v74);
          LODWORD(v36) = v74.__r_.__value_.__l.__data_;
          v34 = *(unsigned int *)(v15 + 8);
        }
        else
        {
          LODWORD(v36) = 0;
        }
      }
      v39 = data ^ v29 ^ v36;
      if (v34 == 2)
      {
        v40 = *(_QWORD *)(v15 - 8);
        if (v40)
        {
          v61 = v26;
          while (1)
          {
            std::to_string(&v74, *(_DWORD *)(v40 + 4));
            v41 = (v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? *((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x7F
                : v74.__r_.__value_.__l.__size_;
            if (v41)
              break;
            v43 = 0;
            if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_63;
LABEL_64:
            v44 = *(unsigned int *)(v40 + 8);
            for (k = *(_QWORD *)(v40 - 8 * v44);
                  (*(_BYTE *)k & 0xFE) == 0x12;
            v46 = *(_QWORD *)(k - 8 * *(unsigned int *)(k + 8) + 24);
            if (v46)
            {
              v47 = *(_QWORD *)(v46 + 8);
              v48 = *(_QWORD *)v47;
              if (*(_QWORD *)v47)
              {
                v76 = xmmword_1C85F4BB0;
                v77 = 0;
                llvm::MD5::update((int *)&v76, (int *)(v47 + 24), v48);
                llvm::MD5::final((int *)&v76, (int *)&v74);
                LODWORD(v46) = v74.__r_.__value_.__l.__data_;
                LODWORD(v44) = *(_DWORD *)(v40 + 8);
              }
              else
              {
                LODWORD(v46) = 0;
              }
            }
            v39 ^= v43 ^ v46;
            if ((_DWORD)v44 == 2)
            {
              v40 = *(_QWORD *)(v40 - 8);
              if (v40)
                continue;
            }
            v34 = *(unsigned int *)(v15 + 8);
            v26 = v61;
            goto LABEL_77;
          }
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = (int *)&v74;
          else
            v42 = (int *)v74.__r_.__value_.__r.__words[0];
          v76 = xmmword_1C85F4BB0;
          v77 = 0;
          llvm::MD5::update((int *)&v76, v42, v41);
          llvm::MD5::final((int *)&v76, v75);
          v43 = v75[0];
          if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_64;
LABEL_63:
          operator delete(v74.__r_.__value_.__l.__data_);
          goto LABEL_64;
        }
        v34 = 2;
      }
LABEL_77:
      v49 = *(unsigned __int8 **)(v15 - 8 * v34);
      v50 = *v49;
      v51 = (uint64_t)v49;
      if (v50 == 19)
      {
        v51 = (uint64_t)v49;
        do
        {
          if (!*(_DWORD *)(v51 + 24))
            break;
          v51 = *(_QWORD *)(v51 - 8 * *(unsigned int *)(v51 + 8) + 8);
        }
        while (*(_BYTE *)v51 == 19);
      }
      v52 = *(_QWORD *)(v15 + 16);
      v53 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
      if ((v52 & 4) != 0)
        v53 = (_QWORD *)*v53;
      if (v50 != 15)
        v49 = *(unsigned __int8 **)&v49[-8 * *((unsigned int *)v49 + 2)];
      Impl = llvm::DILexicalBlockFile::getImpl(v53, v51, (uint64_t)v49, ((v26 << v65) + v39) & v63 | v19, 0, 1);
      v55 = *(_QWORD *)(v15 + 16);
      v56 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFF8);
      if ((v55 & 4) != 0)
        v56 = (uint64_t *)*v56;
      this = v64;
      if (*(_DWORD *)(v15 + 8) == 2)
        v57 = *(_QWORD *)(v15 - 8);
      else
        v57 = 0;
      v58 = (unsigned __int8 *)llvm::DILocation::getImpl(v56, *(_DWORD *)(v15 + 4), *(unsigned __int16 *)(v15 + 2), (uint64_t)Impl, v57, 0, 0, 1);
      if (v58)
      {
        v66 = v58;
        llvm::MetadataTracking::track((uint64_t)&v66, v58, 2);
        if (&v66 != v14)
        {
          if (*v14)
            llvm::MetadataTracking::untrack(i + 56, *v14);
          v4 = (llvm::Module *)v66;
          *v14 = v66;
          if (v4)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v66, (unsigned __int8 *)v4, i + 56);
            v66 = 0;
          }
          v62 = 1;
LABEL_17:
          if ((*(_BYTE *)i & 4) != 0)
            continue;
          goto LABEL_103;
        }
        v4 = (llvm::Module *)v66;
        if (v66)
          llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
        v62 = 1;
        this = v64;
      }
      if (i)
        goto LABEL_17;
LABEL_103:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return 0;
}

char *sub_1C51D449C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61FFD2C(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[48 * v10];
    do
    {
      *(_OWORD *)result = xmmword_1C85F6FF0;
      *((_QWORD *)result + 2) = -1;
      result += 48;
    }
    while (result != v11);
  }
  return result;
}

char *sub_1C51D4570(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62000F0(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = &result[32 * v10];
    do
    {
      *(_OWORD *)result = xmmword_1C85F6FF0;
      *((_QWORD *)result + 2) = -1;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C51D4638(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v3);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Load MIR Sample Profile";
  *(_QWORD *)(v5 + 8) = 23;
  *(_QWORD *)(v5 + 16) = "fs-profile-loader";
  *(_QWORD *)(v5 + 24) = 17;
  *(_QWORD *)(v5 + 32) = &llvm::MIRProfileLoaderPass::ID;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = llvm::callDefaultCtor<llvm::MIRProfileLoaderPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t llvm::createMIRProfileLoaderPass(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;

  v8 = operator new();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v21 = *(_QWORD *)(a1 + 16);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
  }
  v9 = *a4;
  v17 = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  llvm::MIRProfileLoaderPass::MIRProfileLoaderPass(v8, (__int128 *)__dst, (const void **)__p, a3, &v17);
  v12 = v17;
  if (v17)
  {
    v13 = (unsigned int *)(v17 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  return v8;
}

uint64_t llvm::MIRProfileLoader::doInitialization(llvm::MIRProfileLoader *this, const llvm::MemoryBuffer **a2)
{
  const llvm::MemoryBuffer *v4;
  __int128 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  BOOL v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v24;
  void **v25;
  __int16 v26;
  std::string v27;
  uint64_t v28;
  int v29;
  void ***v30;
  void *v31[2];
  std::string::size_type v32;
  std::error_code v33;
  __int128 __p;
  uint64_t v35;
  __int128 __dst;
  uint64_t v37;
  std::error_code v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (__int128 *)((char *)this + 1072);
  if (*((char *)this + 1095) < 0)
  {
    sub_1C47EBC30(&__dst, *((void **)this + 134), *((_QWORD *)this + 135));
  }
  else
  {
    __dst = *v5;
    v37 = *((_QWORD *)this + 136);
  }
  v6 = *((_QWORD *)this + 140);
  v7 = *((_DWORD *)this + 288);
  if (*((char *)this + 1119) < 0)
  {
    sub_1C47EBC30(&__p, *((void **)this + 137), *((_QWORD *)this + 138));
  }
  else
  {
    __p = *(_OWORD *)((char *)this + 1096);
    v35 = *((_QWORD *)this + 139);
  }
  llvm::sampleprof::SampleProfileReader::create((uint64_t)&__dst, v4, v6, v7, (uint64_t)&__p, (uint64_t)&v38);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)__dst);
  v8 = v39;
  if ((v39 & 1) == 0)
  {
    std::system_category();
    v9 = *(_QWORD *)&v38.__val_;
LABEL_27:
    *(_QWORD *)&v38.__val_ = 0;
    v18 = *((_QWORD *)this + 132);
    *((_QWORD *)this + 132) = v9;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v9 = *((_QWORD *)this + 132);
    }
    *(_QWORD *)(v9 + 136) = a2;
    v19 = sub_1C6200418(*((llvm::LLVMContext ***)this + 132));
    v21 = v20;
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v24 = qword_1EF8F7270[0] == v21 && v19 == 0;
    *((_BYTE *)this + 1164) = v24;
    v16 = 1;
    if ((v39 & 1) == 0)
      goto LABEL_23;
    return v16;
  }
  v9 = *(_QWORD *)&v38.__val_;
  v33 = v38;
  if (!v38.__val_)
    goto LABEL_27;
  std::error_code::message(&v27, &v33);
  v10 = std::string::insert(&v27, 0, "Could not open profile: ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)v31 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v32 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v12 = *((_BYTE *)this + 1095);
  v13 = v12 < 0;
  if (v12 >= 0)
    v14 = (std::string::size_type)v5;
  else
    v14 = *((_QWORD *)this + 134);
  v15 = v12 & 0x7F;
  if (v13)
    v15 = *((_QWORD *)this + 135);
  v26 = 260;
  v25 = v31;
  LODWORD(v27.__r_.__value_.__r.__words[1]) = 8;
  v27.__r_.__value_.__s.__data_[12] = 0;
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E700;
  v27.__r_.__value_.__r.__words[2] = v14;
  v28 = v15;
  v29 = 0;
  v30 = &v25;
  llvm::LLVMContext::diagnose((uint64_t)v4, (const llvm::DiagnosticInfo *)&v27);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  v16 = 0;
  if ((v8 & 1) == 0)
  {
LABEL_23:
    if (*(_QWORD *)&v38.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v38.__val_ + 8))(*(_QWORD *)&v38.__val_);
  }
  return v16;
}

uint64_t llvm::MIRProfileLoaderPass::MIRProfileLoaderPass(uint64_t a1, __int128 *a2, const void **a3, int a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  const void *v22;
  size_t v23;
  size_t v24;
  char v25;
  BOOL v26;
  const void *v27;
  size_t v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  __int128 *p_dst;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  void *__p[2];
  unint64_t v58;
  __int128 __dst;
  unint64_t v60;

  v10 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&llvm::MIRProfileLoaderPass::ID);
  *v10 = &off_1E8146DB0;
  v11 = v10 + 32;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(v11, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    v11[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_DWORD *)(a1 + 280) = a4;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v13 = 6 * a4 + 2;
  if (!a4)
    v13 = 0;
  *(_DWORD *)(a1 + 284) = v13;
  *(_DWORD *)(a1 + 288) = 6 * a4 + 7;
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
    v56 = *(unsigned int **)(a1 + 312);
    v15 = v56;
    *(_QWORD *)(a1 + 312) = v14;
    if (!v15)
      goto LABEL_13;
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = --v17 == 0;
    }
    while (__stlxr(v17, v16));
  }
  else
  {
    llvm::vfs::getRealFileSystem(&v56);
    v53 = v56;
    v56 = *(unsigned int **)(a1 + 312);
    v15 = v56;
    *(_QWORD *)(a1 + 312) = v53;
    if (!v15)
      goto LABEL_13;
    v54 = v15 + 2;
    do
    {
      v55 = __ldaxr(v54);
      v18 = --v55 == 0;
    }
    while (__stlxr(v55, v54));
  }
  if (v18)
    (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
LABEL_13:
  v19 = operator new();
  v20 = *((_BYTE *)a2 + 23);
  v21 = v20 < 0;
  if (v20 >= 0)
    v22 = a2;
  else
    v22 = *(const void **)a2;
  v23 = v20 & 0x7F;
  if (v21)
    v24 = *((_QWORD *)a2 + 1);
  else
    v24 = v23;
  v25 = *((_BYTE *)a3 + 23);
  v26 = v25 < 0;
  if (v25 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  v28 = v25 & 0x7F;
  if (v26)
    v29 = (size_t)a3[1];
  else
    v29 = v28;
  v30 = *(unsigned int **)(a1 + 312);
  if (v30)
  {
    v31 = v30 + 2;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (v24 > 0x7FFFFFFFFFFFFFF7)
LABEL_77:
    abort();
  if (v24 >= 0x17)
  {
    v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v34 = v24 | 7;
    v35 = v34 + 1;
    p_dst = (__int128 *)operator new(v34 + 1);
    *((_QWORD *)&__dst + 1) = v24;
    v60 = v35 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v60) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_35:
    memmove(p_dst, v22, v24);
  *((_BYTE *)p_dst + v24) = 0;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_77;
  if (v29 >= 0x17)
  {
    v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v37 = v29 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __p[1] = (void *)v29;
    v58 = v38 | 0x8000000000000000;
    __p[0] = v36;
    goto LABEL_43;
  }
  HIBYTE(v58) = v29;
  v36 = __p;
  if (v29)
LABEL_43:
    memmove(v36, v27, v29);
  *((_BYTE *)v36 + v29) = 0;
  if (v30)
  {
    v39 = v30 + 2;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)v19 = off_1E8146E88;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_DWORD *)(v19 + 24) = 0;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_DWORD *)(v19 + 48) = 0;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_DWORD *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 80) = v19 + 112;
  *(_QWORD *)(v19 + 88) = v19 + 112;
  *(_QWORD *)(v19 + 96) = 32;
  *(_DWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 368) = v19 + 384;
  *(_OWORD *)(v19 + 904) = 0u;
  *(_QWORD *)(v19 + 376) = 0x2000000000;
  *(_QWORD *)(v19 + 896) = v19 + 904;
  *(_QWORD *)(v19 + 1040) = 0;
  *(_BYTE *)(v19 + 1048) = 0;
  v41 = (_BYTE *)(v19 + 1072);
  *(_DWORD *)(v19 + 936) = 0;
  *(_OWORD *)(v19 + 920) = 0u;
  *(_DWORD *)(v19 + 984) = 0;
  *(_OWORD *)(v19 + 968) = 0u;
  *(_DWORD *)(v19 + 1008) = 0;
  *(_OWORD *)(v19 + 992) = 0u;
  *(_DWORD *)(v19 + 1032) = 0;
  *(_OWORD *)(v19 + 1016) = 0u;
  *(_OWORD *)(v19 + 1056) = 0u;
  if (SHIBYTE(v60) < 0)
  {
    sub_1C47EBC30(v41, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)v41 = __dst;
    *(_QWORD *)(v19 + 1088) = v60;
  }
  v42 = (_BYTE *)(v19 + 1096);
  if (SHIBYTE(v58) < 0)
  {
    sub_1C47EBC30(v42, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)__p;
    *(_QWORD *)(v19 + 1112) = v58;
  }
  *(_QWORD *)(v19 + 1120) = v30;
  if (v30)
  {
    v43 = v30 + 2;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    *(_OWORD *)(v19 + 1128) = 0u;
    do
    {
      v45 = __ldaxr(v43);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v43));
    if (!v46)
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
  }
  else
  {
    *(_OWORD *)(v19 + 1128) = 0u;
  }
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete((void *)__dst);
  *(_QWORD *)v19 = off_1E8146EA8;
  *(_BYTE *)(v19 + 1164) = 1;
  if (v30)
  {
    v47 = v30 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
  }
  v50 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v19;
  if (v50)
  {
    v51 = sub_1C51D7418(v50);
    MEMORY[0x1CAA32FC0](v51, 0x10F3C40C8B5CBB6);
  }
  return a1;
}

uint64_t llvm::callDefaultCtor<llvm::MIRProfileLoaderPass>()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  void *__p;
  char v8;
  __int128 v9;
  char v10;

  v0 = operator new();
  v10 = 0;
  LOBYTE(v9) = 0;
  v8 = 0;
  LOBYTE(__p) = 0;
  v6 = 0;
  llvm::MIRProfileLoaderPass::MIRProfileLoaderPass(v0, &v9, (const void **)&__p, 1, &v6);
  v1 = v6;
  if (v6)
  {
    v2 = (unsigned int *)(v6 + 8);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete((void *)v9);
  return v0;
}

uint64_t sub_1C51D4FD4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char *v13;
  size_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  char v22;

  *(_QWORD *)&v20 = a1;
  *((_QWORD *)&v20 + 1) = a2;
  switch(a4)
  {
    case 0:
      goto LABEL_7;
    case 3:
      if (*(_WORD *)a3 != 27745 || *(_BYTE *)(a3 + 2) != 108)
        return v20;
LABEL_7:
      v22 = 46;
      v7 = llvm::StringRef::find((uint64_t *)&v20, &v22, 1uLL, 0);
      if (a2 >= v7)
        v8 = v7;
      else
        v8 = a2;
      if (v7 == -1)
        v8 = a2;
      *(_QWORD *)&v21 = a1;
      *((_QWORD *)&v21 + 1) = v8;
      return v21;
    case 8:
      if (*(_QWORD *)a3 != 0x64657463656C6573)
        return v20;
      v10 = 0;
      v21 = v20;
      v11 = *((_QWORD *)&v20 + 1);
      v12 = llvm::sampleprof::FunctionSamples::HasUniqSuffix;
      break;
    default:
      return v20;
  }
  do
  {
    v13 = off_1E8146E60[v10];
    if (v13)
    {
      v14 = strlen(off_1E8146E60[v10]);
      if (v14 == 8)
      {
        if (*(_QWORD *)v13 == 0x2E71696E755F5F2ELL && v12 != 0)
          goto LABEL_36;
        v14 = 8;
      }
    }
    else
    {
      v14 = 0;
    }
    v16 = llvm::StringRef::rfind((uint64_t *)&v21, v13, v14);
    if (v16 != -1)
    {
      v17 = v11;
      while (v17)
      {
        v18 = v17 - 1;
        v19 = *(unsigned __int8 *)(v21 - 1 + v17--);
        if (v19 == 46)
          goto LABEL_32;
      }
      v18 = -1;
LABEL_32:
      if (v18 == v14 + v16 - 1)
      {
        if (v11 >= v16)
          v11 = v16;
        *((_QWORD *)&v21 + 1) = v11;
      }
    }
LABEL_36:
    ++v10;
  }
  while (v10 != 3);
  return v21;
}

void sub_1C51D51A0(llvm::Pass *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;

  *(_QWORD *)this = &off_1E8146DB0;
  v2 = (unsigned int *)*((_QWORD *)this + 39);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
  {
    v7 = sub_1C51D7418(v6);
    MEMORY[0x1CAA32FC0](v7, 0x10F3C40C8B5CBB6);
  }
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  *(_QWORD *)this = &unk_1E8144BE8;
  v8 = (char *)*((_QWORD *)this + 22);
  if (v8 != (char *)this + 192)
    free(v8);
  v9 = (char *)*((_QWORD *)this + 13);
  if (v9 != (char *)this + 120)
    free(v9);
  v10 = (char *)*((_QWORD *)this + 4);
  if (v10 != (char *)this + 48)
    free(v10);
  llvm::Pass::~Pass(this);
}

_OWORD *sub_1C51D5284(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6200F88(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C51D534C(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C620115C(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 88 * v4;
      do
      {
        *v5 = -4096;
        v5 += 11;
        v6 -= 88;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v4)
    {
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(88 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(_DWORD *)(a1 + 16);
      if (v10)
      {
        v11 = 88 * v10;
        do
        {
          *v9 = -4096;
          v9 += 11;
          v11 -= 88;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C51D5458(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = *(_QWORD *)a1 + 8;
    do
    {
      if ((*(_QWORD *)(v5 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C47655E8(v5, *(_QWORD **)(v5 + 8));
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  if (!v3)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v7 = 0;
    v8 = *(_QWORD **)a1;
LABEL_16:
    MEMORY[0x1CAA32FB4](v8, 8);
    sub_1C4EA5E04(a1, v7);
    return;
  }
  v6 = 1 << (33 - __clz(v3 - 1));
  if (v6 <= 64)
    v7 = 64;
  else
    v7 = v6;
  v8 = *(_QWORD **)a1;
  if (v7 != a1[4])
    goto LABEL_16;
  *((_QWORD *)a1 + 1) = 0;
  v9 = 32 * v7;
  do
  {
    *v8 = -4096;
    v8 += 4;
    v9 -= 32;
  }
  while (v9);
}

uint64_t sub_1C51D554C(_QWORD *(***a1)(unint64_t *__return_ptr, _QWORD, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t *v6;
  llvm::SmallPtrSetImplBase *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 320;
  v3 = *(_QWORD *)(a2 + 328);
  if (v3 == a2 + 320)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)(a1 + 4);
    v7 = (llvm::SmallPtrSetImplBase *)(a1 + 10);
    do
    {
      sub_1C51D6394((uint64_t)&v11, a1, v3);
      if ((v12 & 1) == 0)
      {
        v8 = v11;
        v10 = v3;
        sub_1C61BEB98(v6, &v10)[1] = v8;
        sub_1C4774094(v7, v3);
        v5 = 1;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

void sub_1C51D5624(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  uint64_t i;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t j;
  void **v20;
  void **v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  void *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  void **v36;
  void *v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  _QWORD *v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  _QWORD *k;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  char **v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  _QWORD *v83;
  char *v84;
  char **v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  char *v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  char *v114;
  int v115;
  BOOL v116;
  char *v117;
  uint64_t *v118;
  _QWORD *v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t *v122;
  void **v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[2];
  unsigned int v146;
  __int128 v147;
  __int128 v148;
  __int128 *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void *__p[2];
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t *v158;
  void **v159;
  char *v160;
  __int128 *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  _QWORD v167[8];
  uint64_t v168;
  void *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  int v173;
  _QWORD v174[11];

  v174[8] = *MEMORY[0x1E0C80C00];
  if (!byte_1ED837B98)
  {
    v4 = a2 + 320;
    v5 = (char *)*((_QWORD *)a2 + 41);
    if (v5 != a2 + 320)
    {
      do
      {
        v170 = v5;
        v98 = *(_QWORD *)(a1 + 960);
        v99 = *(_DWORD *)(v98 + 264);
        if (v99)
        {
          v100 = *(_QWORD *)(v98 + 248);
          v101 = v99 - 1;
          v102 = (v99 - 1) & ((v5 >> 4) ^ (v5 >> 9));
          v103 = *(char **)(v100 + 16 * v102);
          if (v5 == v103)
          {
LABEL_123:
            v106 = *(_QWORD *)(v100 + 16 * v102 + 8);
            if (v106)
            {
              *(_QWORD *)&v165 = 0;
              *(_QWORD *)&v165 = **(_QWORD **)(v106 + 32);
              if ((_QWORD)v165)
              {
                v107 = sub_1C61BEB98((uint64_t *)(a1 + 32), &v170)[1];
                if (v107 > sub_1C61BEB98((uint64_t *)(a1 + 32), &v165)[1])
                {
                  v108 = sub_1C61BEB98((uint64_t *)(a1 + 32), &v170)[1];
                  sub_1C61BEB98((uint64_t *)(a1 + 32), &v165)[1] = v108;
                }
              }
            }
          }
          else
          {
            v104 = 1;
            while (v103 != (char *)-4096)
            {
              v105 = v102 + v104++;
              v102 = v105 & v101;
              v103 = *(char **)(v100 + 16 * v102);
              if (v5 == v103)
                goto LABEL_123;
            }
          }
        }
        v5 = (char *)*((_QWORD *)v5 + 1);
      }
      while (v5 != v4);
    }
    v6 = 3;
    do
    {
      v7 = v6;
      if (v6 - 3 >= dword_1ED837898)
        break;
      v8 = sub_1C51D68D8(a1, (uint64_t)a2, 0);
      v6 = v7 + 1;
    }
    while ((v8 & 1) != 0);
    *(_DWORD *)(a1 + 376) = 0;
    sub_1C6143384(*(_QWORD **)(a1 + 904));
    *(_QWORD *)(a1 + 896) = a1 + 904;
    *(_QWORD *)(a1 + 912) = 0;
    *(_QWORD *)(a1 + 904) = 0;
    while (1)
    {
      v9 = v7;
      v10 = dword_1ED837898;
      if (v7 - 2 >= dword_1ED837898)
        break;
      ++v7;
      if ((sub_1C51D68D8(a1, (uint64_t)a2, 0) & 1) == 0)
      {
        v10 = dword_1ED837898;
        break;
      }
    }
    if (v9 - 1 < v10)
    {
      do
      {
        if (!sub_1C51D68D8(a1, (uint64_t)a2, 1))
          break;
      }
      while (v9++ < dword_1ED837898);
    }
    return;
  }
  v12 = a2 + 320;
  v145[0] = 0;
  v145[1] = 0;
  v146 = 0;
  for (i = *((_QWORD *)a2 + 41); (_QWORD *)i != v12; i = *(_QWORD *)(i + 8))
  {
    sub_1C51D6394((uint64_t)&v170, (_QWORD *(***)(unint64_t *__return_ptr, _QWORD, uint64_t))a1, i);
    if ((v172 & 1) == 0)
    {
      v14 = v170;
      *(_QWORD *)&v165 = i;
      sub_1C61BEB98(v145, &v165)[1] = v14;
    }
  }
  v170 = (char *)v174;
  v171 = (char *)v174;
  v172 = 8;
  v173 = 0;
  __p[0] = a2;
  sub_1C61FF4A8((llvm::SmallPtrSetImplBase *)&v170, (uint64_t)__p, &v147);
  v15 = (_BYTE *)*((_QWORD *)&v147 + 1);
  v166 = v148;
  v16 = (_BYTE *)v148;
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *((_QWORD *)&v147 + 1)) >> 3);
  v165 = v147;
  v167[0] = &v170;
  memset(&v167[1], 0, 24);
  v147 = (unint64_t)v147;
  v148 = 0uLL;
  sub_1C4D6CDA0((_QWORD *)&v147 + 1, v15, v16, v17);
  while ((_QWORD)v148 != *((_QWORD *)&v147 + 1))
    sub_1C61E6020((char *)&v147);
  if ((_QWORD)v148)
    operator delete((void *)v148);
  sub_1C618F0A8(&v165);
  *(_QWORD *)&v165 = v167;
  *((_QWORD *)&v165 + 1) = v167;
  *(_QWORD *)&v166 = 8;
  DWORD2(v166) = 0;
  v18 = (_QWORD *)*((_QWORD *)a2 + 41);
  if (v18 == v12)
    goto LABEL_26;
  do
  {
    if (v18[11] != v18[12])
      goto LABEL_130;
    sub_1C61E5F20(__p, (uint64_t)v18, (llvm::SmallPtrSetImplBase *)&v165);
    v109 = __p[1];
    v147 = *(_OWORD *)__p;
    v148 = v155;
    v149 = &v165;
    *(_QWORD *)&v151 = 0;
    v150 = 0uLL;
    v110 = (_BYTE *)v155;
    v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - (unint64_t)__p[1]) >> 3);
    v155 = 0uLL;
    __p[1] = 0;
    sub_1C4D6CDA0(&__p[1], v109, v110, v111);
    v161 = v149;
    v163 = 0;
    v164 = 0;
    v162 = 0;
    sub_1C4D6CDA0(&v162, (_BYTE *)v150, *((_BYTE **)&v150 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 3));
    while (1)
    {
      v112 = __p[1];
      if ((_QWORD)v155 - (unint64_t)__p[1] != v163 - v162)
        goto LABEL_147;
      if (__p[1] == (void *)v155)
        break;
      v113 = 0;
      while (1)
      {
        v114 = (char *)__p[1] + v113;
        if (*(_QWORD *)((char *)__p[1] + v113) != *(_QWORD *)&v162[v113])
          break;
        v115 = v162[v113 + 16];
        if (v114[16])
          v116 = v115 == 0;
        else
          v116 = 1;
        if (v116)
        {
          if ((v114[16] == 0) == (v115 != 0))
            break;
        }
        else if (*(_QWORD *)((char *)__p[1] + v113 + 8) != *(_QWORD *)&v162[v113 + 8])
        {
          break;
        }
        v113 += 24;
        if (v114 + 24 == (char *)v155)
          goto LABEL_149;
      }
LABEL_147:
      sub_1C6201778((char *)__p);
    }
    v112 = (void *)v155;
LABEL_149:
    if (v162)
    {
      v163 = v162;
      operator delete(v162);
      v112 = __p[1];
    }
    if (v112)
    {
      *(_QWORD *)&v155 = v112;
      operator delete(v112);
    }
    sub_1C618F0A8(&v147);
LABEL_130:
    v18 = (_QWORD *)v18[1];
  }
  while (v18 != v12);
LABEL_26:
  v161 = 0;
  v162 = 0;
  LODWORD(v163) = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  sub_1C61EAECC(&v161, HIDWORD(v172) - v173);
  sub_1C4DB1D18((uint64_t)&v158, (HIDWORD(v172) - v173));
  for (j = *((_QWORD *)a2 + 41); (_QWORD *)j != v12; j = *(_QWORD *)(j + 8))
  {
    v117 = (char *)sub_1C477672C((uint64_t)&v170, j);
    if (v171 == v170)
      v118 = (uint64_t *)((char *)&v172 + 4);
    else
      v118 = &v172;
    if (v117 != &v171[8 * *(unsigned int *)v118])
    {
      v119 = sub_1C477672C((uint64_t)&v165, j);
      v120 = *((_QWORD *)&v165 + 1) == (_QWORD)v165 ? (unsigned int *)((char *)&v166 + 4) : (unsigned int *)&v166;
      if (v119 != (_QWORD *)(*((_QWORD *)&v165 + 1) + 8 * *v120))
      {
        v121 = ((char *)v159 - (char *)v158) >> 3;
        *(_QWORD *)&v147 = j;
        sub_1C61BEB98((uint64_t *)&v161, &v147)[1] = v121;
        v122 = (uint64_t *)v159;
        if (v159 >= (void **)v160)
        {
          v124 = v158;
          v125 = ((char *)v159 - (char *)v158) >> 3;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61)
LABEL_199:
            abort();
          v127 = v160 - (char *)v158;
          if ((v160 - (char *)v158) >> 2 > v126)
            v126 = v127 >> 2;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
            v128 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            if (v128 >> 61)
LABEL_200:
              sub_1C4764EE4();
            v129 = (char *)operator new(8 * v128);
          }
          else
          {
            v129 = 0;
          }
          v130 = (uint64_t *)&v129[8 * v125];
          *v130 = j;
          v123 = (void **)(v130 + 1);
          if (v122 != v124)
          {
            do
            {
              v131 = *--v122;
              *--v130 = v131;
            }
            while (v122 != v124);
            v122 = v158;
          }
          v158 = v130;
          v159 = v123;
          v160 = &v129[8 * v128];
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v159 = (void *)j;
          v123 = (void **)(v122 + 1);
        }
        v159 = v123;
      }
    }
  }
  sub_1C61446F0((unsigned int *)(a1 + 32));
  sub_1C6201058((unsigned int *)(a1 + 56));
  v21 = (void **)v158;
  v20 = v159;
  if (v158 != (uint64_t *)v159)
  {
    v22 = 0;
    v144 = a1 + 992;
    do
    {
      v169 = 0;
      v169 = *v21;
      __p[0] = v169;
      *(_QWORD *)&v147 = 0;
      if (sub_1C61252B8(v145, __p, &v147))
      {
        if ((_QWORD)v147 != v145[0] + 16 * v146)
        {
          v23 = *(_QWORD *)(v147 + 8);
          if (v23)
          {
            sub_1C61BEB98((uint64_t *)(a1 + 32), &v169)[1] = v23;
            v22 = 1;
          }
        }
      }
      ++v21;
    }
    while (v21 != v20);
    v21 = (void **)v158;
    if ((((unint64_t)((char *)v159 - (char *)v158) > 0xF) & v22) != 0)
    {
      v142 = (uint64_t *)(a1 + 32);
      v143 = a1 + 56;
      v155 = 0u;
      v156 = 0u;
      *(_OWORD *)__p = 0u;
      sub_1C51D6ED4((uint64_t *)__p, ((char *)v159 - (char *)v158) >> 3);
      v24 = v158;
      v25 = (uint64_t *)v159;
      if (v158 != (uint64_t *)v159)
      {
        do
        {
          v153 = 0;
          v153 = *v24;
          *((_QWORD *)&v147 + 1) = 0;
          LOBYTE(v148) = 0;
          *((_QWORD *)&v148 + 1) = 0;
          LOBYTE(v149) = 0;
          v150 = 0u;
          v151 = 0u;
          v152 = 0u;
          v168 = v153;
          v169 = 0;
          if (!sub_1C61252B8(v145, &v168, &v169) || v169 == (void *)(v145[0] + 16 * v146))
          {
            v26 = 0;
            LOBYTE(v148) = 1;
          }
          else
          {
            LOBYTE(v148) = 0;
            v26 = sub_1C61BEB98(v145, &v153)[1];
          }
          v27 = (char *)__p[1];
          *(_QWORD *)&v147 = 0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 3);
          *((_QWORD *)&v147 + 1) = v26;
          if (__p[1] >= (void *)v155)
          {
            v31 = (void *)sub_1C51D7054((uint64_t *)__p, (uint64_t)&v147);
          }
          else
          {
            v28 = v147;
            v29 = v148;
            *((_BYTE *)__p[1] + 32) = (_BYTE)v149;
            *(_OWORD *)v27 = v28;
            *((_OWORD *)v27 + 1) = v29;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_QWORD *)v27 + 5) = 0;
            sub_1C4DFE394((_QWORD *)v27 + 5, (const void *)v150, *((uint64_t *)&v150 + 1), (uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 3);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            v30 = v27 + 64;
            v30[2] = 0;
            sub_1C4DFE394(v30, *((const void **)&v151 + 1), v152, (uint64_t)(v152 - *((_QWORD *)&v151 + 1)) >> 3);
            v31 = v30 + 3;
          }
          __p[1] = v31;
          sub_1C620185C(&v147);
          ++v24;
        }
        while (v24 != v25);
        v32 = v158;
        v141 = (uint64_t *)v159;
        if (v158 != (uint64_t *)v159)
        {
          do
          {
            *(_QWORD *)&v147 = *v32;
            v33 = sub_1C6201558(v144, (uint64_t *)&v147);
            v34 = *((unsigned int *)v33 + 4);
            if ((_DWORD)v34)
            {
              v35 = (void **)v33[1];
              v36 = &v35[v34];
              do
              {
                v169 = 0;
                v37 = *v35;
                v169 = *v35;
                if ((_DWORD)v163)
                {
                  v38 = ((v37 >> 4) ^ (v37 >> 9)) & ((_DWORD)v163 - 1);
                  v39 = *(void **)&v161[v38];
                  if (v37 == v39)
                  {
LABEL_49:
                    v40 = sub_1C61BEB98((uint64_t *)&v161, &v147)[1];
                    v41 = sub_1C61BEB98((uint64_t *)&v161, &v169)[1];
                    v42 = v156;
                    if ((unint64_t)v156 >= *((_QWORD *)&v156 + 1))
                    {
                      v44 = *((_QWORD *)&v155 + 1);
                      v45 = (uint64_t)(v156 - *((_QWORD *)&v155 + 1)) >> 5;
                      v46 = v45 + 1;
                      if ((unint64_t)(v45 + 1) >> 59)
                        goto LABEL_199;
                      v47 = *((_QWORD *)&v156 + 1) - *((_QWORD *)&v155 + 1);
                      if ((uint64_t)(*((_QWORD *)&v156 + 1) - *((_QWORD *)&v155 + 1)) >> 4 > v46)
                        v46 = v47 >> 4;
                      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
                        v48 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v48 = v46;
                      if (v48)
                      {
                        if (v48 >> 59)
                          goto LABEL_200;
                        v49 = (char *)operator new(32 * v48);
                      }
                      else
                      {
                        v49 = 0;
                      }
                      v50 = &v49[32 * v45];
                      *(_QWORD *)v50 = v40;
                      *((_QWORD *)v50 + 1) = v41;
                      *((_QWORD *)v50 + 2) = 0;
                      v50[24] = 0;
                      v51 = v50;
                      if (v42 != v44)
                      {
                        do
                        {
                          v52 = *(_OWORD *)(v42 - 32);
                          *(_OWORD *)(v51 - 23) = *(_OWORD *)(v42 - 23);
                          *((_OWORD *)v51 - 2) = v52;
                          v51 -= 32;
                          v42 -= 32;
                        }
                        while (v42 != v44);
                        v42 = *((_QWORD *)&v155 + 1);
                      }
                      v43 = v50 + 32;
                      *((_QWORD *)&v155 + 1) = v51;
                      *(_QWORD *)&v156 = v50 + 32;
                      *((_QWORD *)&v156 + 1) = &v49[32 * v48];
                      if (v42)
                        operator delete((void *)v42);
                    }
                    else
                    {
                      *(_QWORD *)v156 = v40;
                      *(_QWORD *)(v42 + 8) = v41;
                      *(_QWORD *)(v42 + 16) = 0;
                      v43 = (char *)(v42 + 32);
                      *(_BYTE *)(v42 + 24) = 0;
                    }
                    *(_QWORD *)&v156 = v43;
                    if ((void *)v147 == v169)
                    {
                      v53 = sub_1C61BEB98((uint64_t *)&v161, &v147);
                      *((_BYTE *)__p[0] + 88 * v53[1] + 32) = 1;
                    }
                  }
                  else
                  {
                    v54 = 1;
                    while (v39 != (void *)-4096)
                    {
                      v55 = v38 + v54++;
                      v38 = v55 & ((_DWORD)v163 - 1);
                      v39 = *(void **)&v161[v38];
                      if (v37 == v39)
                        goto LABEL_49;
                    }
                  }
                }
                ++v35;
              }
              while (v35 != v36);
            }
            ++v32;
          }
          while (v32 != v141);
        }
      }
      v56 = (_QWORD *)*((_QWORD *)&v155 + 1);
      for (k = (_QWORD *)v156; v56 != k; v56 += 4)
      {
        v58 = (char *)__p[0] + 88 * *v56;
        v61 = *((_QWORD *)v58 + 7);
        v60 = v58 + 56;
        v59 = v61;
        v63 = v60 - 1;
        v62 = (char *)*(v60 - 1);
        if ((unint64_t)v62 >= v61)
        {
          v65 = (char *)__p[0] + 88 * *v56;
          v68 = (char *)*((_QWORD *)v65 + 5);
          v66 = (char **)(v65 + 40);
          v67 = v68;
          v69 = (v62 - v68) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
            goto LABEL_199;
          v71 = v59 - (_QWORD)v67;
          if (v71 >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            if (v72 >> 61)
              goto LABEL_200;
            v73 = (char *)operator new(8 * v72);
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[8 * v69];
          *(_QWORD *)v74 = v56;
          v64 = v74 + 8;
          if (v62 != v67)
          {
            do
            {
              v75 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *((_QWORD *)v74 - 1) = v75;
              v74 -= 8;
            }
            while (v62 != v67);
            v62 = *v66;
          }
          *v66 = v74;
          *v63 = v64;
          *v60 = &v73[8 * v72];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)v62 = v56;
          v64 = v62 + 8;
        }
        *v63 = v64;
        v76 = v56[1];
        v77 = (char *)__p[0] + 88 * v76;
        v80 = *((_QWORD *)v77 + 10);
        v79 = v77 + 80;
        v78 = v80;
        v82 = v79 - 1;
        v81 = (char *)*(v79 - 1);
        if ((unint64_t)v81 >= v80)
        {
          v84 = (char *)__p[0] + 88 * v76;
          v87 = (char *)*((_QWORD *)v84 + 8);
          v85 = (char **)(v84 + 64);
          v86 = v87;
          v88 = (v81 - v87) >> 3;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61)
            goto LABEL_199;
          v90 = v78 - (_QWORD)v86;
          if (v90 >> 2 > v89)
            v89 = v90 >> 2;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            if (v91 >> 61)
              goto LABEL_200;
            v92 = (char *)operator new(8 * v91);
          }
          else
          {
            v92 = 0;
          }
          v93 = &v92[8 * v88];
          *(_QWORD *)v93 = v56;
          v83 = v93 + 8;
          if (v81 != v86)
          {
            do
            {
              v94 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *((_QWORD *)v93 - 1) = v94;
              v93 -= 8;
            }
            while (v81 != v86);
            v81 = *v85;
          }
          *v85 = v93;
          *v82 = v83;
          *v79 = &v92[8 * v91];
          if (v81)
            operator delete(v81);
        }
        else
        {
          *(_QWORD *)v81 = v56;
          v83 = v81 + 8;
        }
        *v82 = v83;
      }
      if (__p[1] != __p[0])
      {
        v95 = 0;
        v96 = ((char *)__p[1] - (char *)__p[0]) / 88;
        if (v96 <= 1)
          v96 = 1;
        v97 = (char *)__p[0] + 72;
        while (*(v97 - 1) != *v97)
        {
          ++v95;
          v97 += 11;
          if (v96 == v95)
            goto LABEL_183;
        }
        v157 = v95;
      }
LABEL_183:
      llvm::applyFlowInference((uint64_t *)__p);
      v132 = v158;
      v133 = (uint64_t *)v159;
      if (v158 != (uint64_t *)v159)
      {
        do
        {
          v134 = *v132++;
          *(_QWORD *)&v147 = v134;
          v135 = sub_1C61BEB98((uint64_t *)&v161, &v147);
          v136 = *((_QWORD *)__p[0] + 11 * v135[1] + 3);
          sub_1C61BEB98(v142, &v147)[1] = v136;
        }
        while (v132 != v133);
      }
      v138 = (_QWORD *)*((_QWORD *)&v155 + 1);
      v137 = (_QWORD *)v156;
      if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
      {
        do
        {
          v139 = v158[v138[1]];
          *(_QWORD *)&v147 = v158[*v138];
          *((_QWORD *)&v147 + 1) = v139;
          v140 = v138[2];
          sub_1C6200D70(v143, (uint64_t *)&v147)[2] = v140;
          v138 += 4;
        }
        while (v138 != v137);
        v138 = (_QWORD *)*((_QWORD *)&v155 + 1);
      }
      if (v138)
      {
        *(_QWORD *)&v156 = v138;
        operator delete(v138);
      }
      *(_QWORD *)&v147 = __p;
      sub_1C51D71C4((void ***)&v147);
      v21 = (void **)v158;
    }
  }
  if (v21)
  {
    v159 = v21;
    operator delete(v21);
  }
  MEMORY[0x1CAA32FB4](v161, 8);
  if (*((_QWORD *)&v165 + 1) != (_QWORD)v165)
    free(*((void **)&v165 + 1));
  if (v171 != v170)
    free(v171);
  MEMORY[0x1CAA32FB4](v145[0], 8);
}

const std::error_category *sub_1C51D6394(uint64_t a1, _QWORD *(***a2)(unint64_t *__return_ptr, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  unint64_t v8;
  const std::error_category *result;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3 + 48;
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == a3 + 48)
    goto LABEL_15;
  v7 = 0;
  v8 = 0;
  do
  {
    result = (const std::error_category *)(**a2)(&v11, a2, v5);
    v10 = v11;
    if (v8 > v11)
      v10 = v8;
    if ((v12 & 1) == 0)
      v8 = v10;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 8) != 0)
        v5 = *(_QWORD *)(v5 + 8);
    }
    v7 |= (v12 & 1) == 0;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4);
  if ((v7 & 1) == 0)
  {
LABEL_15:
    result = std::system_category();
    v8 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
  }
  *(_QWORD *)a1 = v8;
  return result;
}

void sub_1C51D64A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t i;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  llvm::SmallPtrSetImplBase *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[10];

  v47[8] = *MEMORY[0x1E0C80C00];
  v2 = v47;
  v45 = v47;
  v46 = 0x800000000;
  v3 = a2 + 320;
  v4 = *(_QWORD *)(a2 + 328);
  if (v4 != a2 + 320)
  {
    v7 = a1 + 920;
    v39 = (uint64_t *)(a1 + 32);
    v40 = (llvm::SmallPtrSetImplBase *)(a1 + 80);
    do
    {
      v41 = v4;
      if ((sub_1C6144BDC(*(_QWORD *)(a1 + 920), *(_DWORD *)(a1 + 936), v4, &v44) & 1) == 0)
      {
        v37 = v2;
        sub_1C6180A54(v7, &v41)[1] = v4;
        LODWORD(v46) = 0;
        v8 = *(_QWORD *)(a1 + 944);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v8);
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::getDescendants(*(_QWORD *)(v8 + 1320), v4, (uint64_t)&v45);
        v9 = (uint64_t *)v45;
        v10 = v46;
        v11 = *(_QWORD *)(a1 + 952);
        v44 = v4;
        v38 = v7;
        v43 = sub_1C6180A54(v7, &v44)[1];
        v12 = sub_1C61BEB98(v39, &v43)[1];
        if ((_DWORD)v10)
        {
          v13 = &v9[v10];
          do
          {
            v42 = *v9;
            v14 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(v11 + 248), v42, v4);
            v15 = *(_QWORD *)(a1 + 960);
            v16 = *(_DWORD *)(v15 + 264);
            if (v16)
            {
              v17 = *(_QWORD *)(v15 + 248);
              v18 = v16 - 1;
              v19 = v18 & ((v4 >> 4) ^ (v4 >> 9));
              v20 = *(_QWORD *)(v17 + 16 * v19);
              if (v20 == v4)
              {
LABEL_16:
                v23 = *(_QWORD *)(v17 + 16 * v19 + 8);
              }
              else
              {
                v21 = 1;
                while (v20 != -4096)
                {
                  v22 = v19 + v21++;
                  v19 = v22 & v18;
                  v20 = *(_QWORD *)(v17 + 16 * v19);
                  if (v20 == v4)
                    goto LABEL_16;
                }
                v23 = 0;
              }
              v24 = v42;
              v25 = ((v42 >> 4) ^ (v42 >> 9)) & v18;
              v26 = *(_QWORD *)(v17 + 16 * v25);
              if (v42 == v26)
              {
LABEL_22:
                v29 = *(_QWORD *)(v17 + 16 * v25 + 8);
              }
              else
              {
                v27 = 1;
                while (v26 != -4096)
                {
                  v28 = v25 + v27++;
                  v25 = v28 & v18;
                  v26 = *(_QWORD *)(v17 + 16 * v25);
                  if (v42 == v26)
                    goto LABEL_22;
                }
                v29 = 0;
              }
            }
            else
            {
              v23 = 0;
              v29 = 0;
              v24 = v42;
            }
            if (v24 != v4 && v14 && v23 == v29)
            {
              v30 = v43;
              sub_1C6180A54(v38, &v42)[1] = v30;
              v31 = sub_1C477672C((uint64_t)v40, v42);
              v32 = *(_QWORD *)(a1 + 88);
              v33 = 96;
              if (v32 == *(_QWORD *)(a1 + 80))
                v33 = 100;
              if (v31 != (_QWORD *)(v32 + 8 * *(unsigned int *)(a1 + v33)))
                sub_1C4774094(v40, v43);
              v34 = sub_1C61BEB98(v39, &v42);
              if (v12 <= v34[1])
                v12 = v34[1];
            }
            ++v9;
          }
          while (v9 != v13);
        }
        if (v43 == *(_QWORD *)(*(_QWORD *)(v43 + 32) + 328))
          v12 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 64) + 1;
        sub_1C61BEB98(v39, &v43)[1] = v12;
        v2 = v37;
        v7 = v38;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    for (i = *(_QWORD *)(a2 + 328); i != v3; i = *(_QWORD *)(i + 8))
    {
      v43 = 0;
      v44 = i;
      v43 = sub_1C6180A54(v7, &v44)[1];
      if (v44 != v43)
      {
        v36 = sub_1C61BEB98(v39, &v43)[1];
        sub_1C61BEB98(v39, &v44)[1] = v36;
      }
    }
  }
  if (v45 != v2)
    free(v45);
}

_QWORD *sub_1C51D6814(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6201680(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51D68D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned int v28;
  llvm::SmallPtrSetImplBase *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  int64x2_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95[2];

  v3 = *(_QWORD *)(a2 + 328);
  v81 = a2 + 320;
  if (v3 != a2 + 320)
  {
    v79 = 0;
    v80 = a1 + 920;
    v6 = a1 + 992;
    v7 = a1 + 968;
    v76 = (uint64_t *)(a1 + 32);
    v77 = a1 + 968;
    v83 = a1 + 56;
    v84 = a1 + 80;
    v75 = (_QWORD *)(a1 + 368);
    v78 = a1 + 992;
    while (1)
    {
      v94 = 0;
      v95[0] = v3;
      v94 = sub_1C6180A54(v80, v95)[1];
      v8 = 1;
      do
      {
        v93 = 0;
        v91 = 0;
        v92 = 0;
        v89 = 0;
        v90 = 0;
        v87 = 0;
        v88 = 0;
        v85 = v8;
        if ((v8 & 1) == 0)
        {
          v9 = *((_DWORD *)sub_1C6201558(v6, v95) + 4);
          v21 = sub_1C6201558(v6, v95);
          v22 = *((unsigned int *)v21 + 4);
          if ((_DWORD)v22)
          {
            v15 = 0;
            v23 = (unint64_t *)v21[1];
            v24 = 8 * v22;
            do
            {
              v25 = *v23++;
              v15 += sub_1C51D7234(a1, v95[0], v25, &v93, (unint64_t *)&v91);
              v24 -= 8;
            }
            while (v24);
          }
          else
          {
            v15 = 0;
          }
          if (v9 != 1)
          {
            v14 = 0;
            goto LABEL_21;
          }
          v27 = v95;
          v14 = 0;
          v26 = (uint64_t *)sub_1C6201558(v6, v95)[1];
          goto LABEL_59;
        }
        v9 = *((_DWORD *)sub_1C6201558(v7, v95) + 4);
        v10 = sub_1C6201558(v7, v95);
        v11 = *((unsigned int *)v10 + 4);
        if ((_DWORD)v11)
        {
          v82 = v3;
          v12 = a3;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = (unint64_t *)v10[1];
          v17 = 8 * v11;
          do
          {
            v19 = *v16++;
            v18 = v19;
            v20 = v95[0];
            v15 += sub_1C51D7234(a1, v19, v95[0], &v93, (unint64_t *)&v91);
            if (v19 == v20)
            {
              v13 = v18;
              v14 = v18;
            }
            v17 -= 8;
          }
          while (v17);
          v89 = v14;
          v90 = v13;
          a3 = v12;
          v3 = v82;
          v7 = v77;
          v6 = v78;
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
        if (v9 == 1)
        {
          v26 = v95;
          v27 = (uint64_t *)sub_1C6201558(v7, v95)[1];
LABEL_59:
          v54 = *v26;
          v87 = *v27;
          v88 = v54;
          v9 = 1;
        }
LABEL_21:
        v28 = v93;
        if (v93 <= 1)
        {
          v40 = sub_1C61BEB98(v76, &v94);
          if (v28 == 1)
          {
            v29 = (llvm::SmallPtrSetImplBase *)v84;
            v55 = sub_1C477672C(v84, v94);
            v56 = *(_QWORD *)(a1 + 88);
            v57 = 100;
            if (v56 != *(_QWORD *)(a1 + 80))
              v57 = 96;
            if (v55 != (_QWORD *)(v56 + 8 * *(unsigned int *)(a1 + v57)))
            {
              v58 = v40[1];
              v50 = v58 >= v15;
              v59 = v58 - v15;
              if (v50)
                v60 = v59;
              else
                v60 = 0;
              sub_1C6200D70(v83, &v91)[2] = v60;
              v86.i64[0] = 0;
              if ((v85 & 1) != 0)
                v61 = &v91;
              else
                v61 = &v92;
              v86.i64[0] = sub_1C6180A54(v80, v61)[1];
              v62 = sub_1C477672C(v84, v86.i64[0]);
              v63 = *(_QWORD *)(a1 + 88);
              v64 = 100;
              if (v63 != *(_QWORD *)(a1 + 80))
                v64 = 96;
              if (v62 != (_QWORD *)(v63 + 8 * *(unsigned int *)(a1 + v64)))
              {
                v72 = sub_1C6200D70(v83, &v91)[2];
                if (v72 > sub_1C61BEB98(v76, &v86)[1])
                {
                  v73 = sub_1C61BEB98(v76, &v86)[1];
                  sub_1C6200D70(v83, &v91)[2] = v73;
                }
              }
              v53 = (int64x2_t *)&v91;
LABEL_56:
              sub_1C51D72F0(v75, v53);
LABEL_57:
              v79 = 1;
            }
          }
          else
          {
            if (v28)
              goto LABEL_78;
            v41 = sub_1C477672C(v84, v94);
            v42 = *(_QWORD *)(a1 + 88);
            v43 = 100;
            if (v42 != *(_QWORD *)(a1 + 80))
              v43 = 96;
            if (v41 == (_QWORD *)(v42 + 8 * *(unsigned int *)(a1 + v43)))
            {
              v29 = (llvm::SmallPtrSetImplBase *)v84;
              if (v15 > v40[1])
              {
                v40[1] = v15;
                goto LABEL_57;
              }
            }
            else
            {
              if (v9 != 1)
              {
                v29 = (llvm::SmallPtrSetImplBase *)v84;
                goto LABEL_29;
              }
              v70 = sub_1C6200D70(v83, &v87)[2];
              v29 = (llvm::SmallPtrSetImplBase *)v84;
              if (v70 < sub_1C61BEB98(v76, &v94)[1])
              {
                v71 = sub_1C61BEB98(v76, &v94)[1];
                sub_1C6200D70(v83, &v87)[2] = v71;
                goto LABEL_57;
              }
            }
          }
        }
        else
        {
          v29 = (llvm::SmallPtrSetImplBase *)v84;
          v30 = sub_1C477672C(v84, v94);
          v31 = *(_QWORD *)(a1 + 88);
          v32 = 100;
          if (v31 != *(_QWORD *)(a1 + 80))
            v32 = 96;
          if (v30 != (_QWORD *)(v31 + 8 * *(unsigned int *)(a1 + v32)) && !sub_1C61BEB98(v76, &v94)[1])
          {
            if ((v85 & 1) != 0)
            {
              v44 = sub_1C6201558(v7, v95);
              v45 = *((unsigned int *)v44 + 4);
              if (!(_DWORD)v45)
                goto LABEL_29;
              v46 = (uint64_t *)v44[1];
              v47 = 8 * v45;
              do
              {
                v48 = *v46++;
                v86.i64[0] = v48;
                v86.i64[1] = v95[0];
                sub_1C6200D70(v83, v86.i64)[2] = 0;
                sub_1C51D72F0(v75, &v86);
                v47 -= 8;
              }
              while (v47);
            }
            else
            {
              v65 = sub_1C6201558(v6, v95);
              v66 = *((unsigned int *)v65 + 4);
              if (!(_DWORD)v66)
                goto LABEL_29;
              v67 = (uint64_t *)v65[1];
              v68 = 8 * v66;
              do
              {
                v69 = *v67++;
                v86.i64[0] = v95[0];
                v86.i64[1] = v69;
                sub_1C6200D70(v83, v86.i64)[2] = 0;
                sub_1C51D72F0(v75, &v86);
                v68 -= 8;
              }
              while (v68);
            }
LABEL_78:
            v29 = (llvm::SmallPtrSetImplBase *)v84;
            goto LABEL_29;
          }
          if (v14)
          {
            v33 = sub_1C477672C(v84, v94);
            v34 = *(_QWORD *)(a1 + 88);
            v35 = 100;
            if (v34 != *(_QWORD *)(a1 + 80))
              v35 = 96;
            if (v33 != (_QWORD *)(v34 + 8 * *(unsigned int *)(a1 + v35)))
            {
              v49 = sub_1C61BEB98(v76, v95)[1];
              v50 = v49 >= v15;
              v51 = v49 - v15;
              if (v50)
                v52 = v51;
              else
                v52 = 0;
              sub_1C6200D70(v83, &v89)[2] = v52;
              v53 = (int64x2_t *)&v89;
              goto LABEL_56;
            }
          }
        }
LABEL_29:
        if ((_DWORD)a3)
        {
          v36 = sub_1C477672C((uint64_t)v29, v94);
          v37 = *(_QWORD *)(a1 + 88);
          v38 = 100;
          if (v37 != *(_QWORD *)(a1 + 80))
            v38 = 96;
          if (v36 == (_QWORD *)(v37 + 8 * *(unsigned int *)(a1 + v38)) && v15 != 0)
          {
            sub_1C61BEB98(v76, &v94)[1] = v15;
            sub_1C4774094(v29, v94);
            v79 = 1;
          }
        }
        v8 = 0;
      }
      while ((v85 & 1) != 0);
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v81)
        return v79 & 1;
    }
  }
  v79 = 0;
  return v79 & 1;
}

void sub_1C51D6ED4(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      abort();
    v5 = a1[1];
    v6 = 88 * a2;
    v7 = (char *)operator new(88 * a2);
    v8 = (uint64_t)&v7[v5 - v3];
    v9 = &v7[v6];
    sub_1C51D6FC8(v2, v5, v5, v3, v3, v8, v8);
    v11 = (_QWORD *)*a1;
    v10 = (_QWORD *)a1[1];
    *a1 = v12;
    a1[1] = v8;
    a1[2] = (uint64_t)v9;
    while (v10 != v11)
      v10 = sub_1C620185C(v10 - 11);
    if (v11)
      operator delete(v11);
  }
}

__n128 sub_1C51D6FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 88);
      v11 = *(_OWORD *)(a3 + v7 - 72);
      *(_BYTE *)(v8 - 56) = *(_BYTE *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v11;
      *(_OWORD *)(v8 - 88) = v10;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_1C51D7054(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v7 = 0x2E8BA2E8BA2E8BALL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 > 0x2E8BA2E8BA2E8BALL)
      sub_1C4764EE4();
    v8 = (char *)operator new(88 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t)&v8[88 * v2];
  v10 = &v8[88 * v7];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  sub_1C4DFE394((_QWORD *)(v9 + 40), *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  sub_1C4DFE394((_QWORD *)(v9 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  sub_1C51D6FC8(v6, a1[1], a1[1], *a1, *a1, v9, v9);
  v13 = (_QWORD *)*a1;
  v12 = (_QWORD *)a1[1];
  *a1 = v14;
  a1[1] = v9 + 88;
  a1[2] = (uint64_t)v10;
  while (v12 != v13)
    v12 = sub_1C620185C(v12 - 11);
  if (v13)
    operator delete(v13);
  return v9 + 88;
}

void sub_1C51D71C4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1C620185C(v4 - 11);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C51D7234(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v13[2];

  v13[0] = a2;
  v13[1] = a3;
  if (*(_QWORD *)(a1 + 912))
  {
    v5 = *(_QWORD **)(a1 + 904);
    if (v5)
    {
      while (1)
      {
        v6 = v5[4];
        if (v6 <= a2)
        {
          if (v6 < a2)
            goto LABEL_7;
          v7 = v5[5];
          if (v7 <= a3)
            break;
        }
LABEL_8:
        v5 = (_QWORD *)*v5;
        if (!v5)
          goto LABEL_19;
      }
      if (v7 >= a3)
        return sub_1C6200D70(a1 + 56, v13)[2];
LABEL_7:
      ++v5;
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  v8 = *(unsigned int *)(a1 + 376);
  if (!(_DWORD)v8)
    goto LABEL_19;
  v9 = 16 * v8;
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 368) + 8);
  while (*(v10 - 1) != a2 || *v10 != a3)
  {
    v10 += 2;
    v9 -= 16;
    if (!v9)
      goto LABEL_19;
  }
  if (!v9)
  {
LABEL_19:
    result = 0;
    ++*a4;
    *a5 = a2;
    a5[1] = a3;
    return result;
  }
  return sub_1C6200D70(a1 + 56, v13)[2];
}

_QWORD *sub_1C51D72F0(_QWORD *result, int64x2_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  int64x2_t *v8;
  int32x2_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;

  v3 = result;
  if (result[68])
  {
    v10 = (uint64_t)(result + 66);
    v11 = a2->i64[0];
    v12 = a2->u64[1];
    return (_QWORD *)sub_1C61DB2E8(v10, v11, v12, a2);
  }
  v4 = *result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5)
  {
    v6 = *a2;
    v7 = 16 * v5;
    v8 = (int64x2_t *)*result;
    while (1)
    {
      v9 = vmovn_s64(vceqq_s64(*v8, v6));
      if ((v9.i32[0] & v9.i32[1] & 1) != 0)
        break;
      ++v8;
      v7 -= 16;
      if (!v7)
        goto LABEL_9;
    }
    if (v7)
      return result;
LABEL_9:
    if (v5 <= 0x1F)
      goto LABEL_10;
    do
    {
      sub_1C61DB2E8((uint64_t)(v3 + 66), *(_QWORD *)(*v3 + 16 * v5 - 16), *(_QWORD *)(*v3 + 16 * v5 - 8), (_OWORD *)(*v3 + 16 * v5 - 16));
      LODWORD(v5) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v5;
    }
    while ((_DWORD)v5);
    v11 = a2->i64[0];
    v12 = a2->u64[1];
    v10 = (uint64_t)(v3 + 66);
    return (_QWORD *)sub_1C61DB2E8(v10, v11, v12, a2);
  }
  v6 = *a2;
LABEL_10:
  if (v5 >= *((_DWORD *)result + 3))
  {
    v13 = v6;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v5 + 1, 16);
    v6 = v13;
    v4 = *v3;
    v5 = *((unsigned int *)v3 + 2);
  }
  *(int64x2_t *)(v4 + 16 * v5) = v6;
  ++*((_DWORD *)v3 + 2);
  return result;
}

uint64_t sub_1C51D7418(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E8146E88;
  v2 = *(unsigned int **)(a1 + 1120);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*(void **)(a1 + 1072));
  v6 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1C51D7534((uint64_t *)(a1 + 1016));
  sub_1C620115C(a1 + 992);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 992), 8);
  sub_1C620115C(a1 + 968);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 968), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 920), 8);
  sub_1C6143384(*(_QWORD **)(a1 + 904));
  v7 = *(void **)(a1 + 368);
  if (v7 != (void *)(a1 + 384))
    free(v7);
  v8 = *(void **)(a1 + 88);
  if (v8 != *(void **)(a1 + 80))
    free(v8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t *sub_1C51D7534(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = v3 + 8;
    do
    {
      if ((*(_QWORD *)(v5 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C47655E8(v5, *(_QWORD **)(v5 + 8));
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C51D75AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const std::error_category *v8;
  const std::error_category *v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t ****v17;
  _QWORD v18[4];
  unsigned int v19;
  unsigned int v20;

  v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 8))(a2, a3);
  if (!v6 || (v7 = *(_QWORD *)(a3 + 56)) == 0)
  {
    v8 = std::system_category();
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v8;
    return;
  }
  v9 = (const std::error_category *)v6;
  v10 = *(_DWORD *)(v7 + 4);
  v11 = (unsigned __int16)(v10
                         - *(_DWORD *)(llvm::DILocalScope::getSubprogram(*(_QWORD *)(v7 - 8
                                                                                        * *(unsigned int *)(v7 + 8)))
                                     + 24));
  v20 = v11;
  v12 = *(unsigned __int8 **)(v7 - 8 * *(unsigned int *)(v7 + 8));
  v13 = *v12;
  if (byte_1ED830650)
  {
    if (v13 == 19)
    {
      v15 = *((_DWORD *)v12 + 6);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 != 19)
  {
    LOBYTE(v16) = 0;
LABEL_14:
    v15 = v16 & 0x1F;
    goto LABEL_15;
  }
  v14 = *((_DWORD *)v12 + 6);
  if ((v14 & 1) != 0)
  {
LABEL_13:
    v15 = 0;
    goto LABEL_15;
  }
  if ((v14 & 0x40) == 0)
  {
    v16 = v14 >> 1;
    goto LABEL_14;
  }
  v15 = (v14 >> 2) & 0xFE0 | (v14 >> 1) & 0x1F;
LABEL_15:
  v19 = v15;
  sub_1C620192C(v9, v11, v15, a1);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0
    && llvm::sampleprofutil::SampleCoverageTracker::markSamplesUsed((llvm::sampleprofutil::SampleCoverageTracker *)(a2 + 127), (const llvm::sampleprof::FunctionSamples *)v9, v11, v15, *(_QWORD *)a1))
  {
    v17 = (uint64_t ****)a2[142];
    v18[0] = a3;
    v18[1] = a1;
    v18[2] = &v20;
    v18[3] = &v19;
    sub_1C62019E4(v17, (uint64_t)v18);
  }
}

void sub_1C51D7704(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void **v11;
  std::string v12;
  void *v13;
  char v14;
  std::string v15;
  void *v16;
  char v17;
  std::string v18;
  void *__p;
  char v20;
  const char *v21;
  uint64_t v22;
  uint64_t (**v23)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  char v33;
  char v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[260];
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    if (*(_BYTE *)v5 != 15)
      v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v6 = *(_DWORD *)(v4 + 4);
    LODWORD(v4) = *(unsigned __int16 *)(v4 + 2);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v8 = **(_QWORD **)(v7 + 32);
  v24 = 17;
  v25 = 2;
  v26 = v8;
  v27 = v5;
  v28 = v6;
  v29 = v4;
  v30 = "sample-profile-impl";
  v31 = "AppliedSamples";
  v32 = 14;
  v33 = 0;
  v34 = 0;
  v35 = v37;
  v36 = 0x400000000;
  v37[256] = 0;
  v38 = -1;
  v39 = v7;
  v23 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E8144BB0;
  v21 = "Applied ";
  v22 = 8;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v18, "NumSamples", 0xAuLL, **(_QWORD **)(a2 + 8));
  sub_1C47E3888((uint64_t)&v23, (uint64_t)&v18);
  if (v20 < 0)
    operator delete(__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21 = " samples from profile (offset: ";
  v22 = 31;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v15, "LineOffset", 0xAuLL, **(_DWORD **)(a2 + 16));
  sub_1C47E3888((uint64_t)&v23, (uint64_t)&v15);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (**(_DWORD **)(a2 + 24))
  {
    v21 = ".";
    v22 = 1;
    sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v12, "Discriminator", 0xDuLL, **(_DWORD **)(a2 + 24));
    sub_1C47E3888((uint64_t)&v23, (uint64_t)&v12);
    if (v14 < 0)
      operator delete(v13);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  v21 = ")";
  v22 = 1;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  sub_1C6201AE8((uint64_t)a1, (uint64_t)&v23);
  *a1 = &unk_1E8144BB0;
  v23 = &off_1E814E790;
  v9 = (char *)v35;
  if ((_DWORD)v36)
  {
    v10 = (unint64_t)v36 << 6;
    do
    {
      v11 = (void **)&v9[v10];
      if (v9[v10 - 17] < 0)
        operator delete(*(v11 - 5));
      if (*((char *)v11 - 41) < 0)
        operator delete(*(v11 - 8));
      v10 -= 64;
    }
    while (v10);
    v9 = (char *)v35;
  }
  if (v9 != v37)
    free(v9);
}

uint64_t sub_1C51D79F8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  void **v17;
  __int128 v18;
  char *v19;
  char *i;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v12 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v13 = 0;
          do
          {
            v14 = &v12[v13];
            if (v12[v13 + 23] < 0)
              operator delete(*(void **)v14);
            v15 = &v4[v13];
            v16 = *(_OWORD *)&v4[v13];
            *((_QWORD *)v14 + 2) = *(_QWORD *)&v4[v13 + 16];
            *(_OWORD *)v14 = v16;
            v15[23] = 0;
            *v15 = 0;
            v17 = (void **)(v14 + 24);
            if (v14[47] < 0)
              operator delete(*v17);
            v18 = *(_OWORD *)(v15 + 24);
            *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
            *(_OWORD *)v17 = v18;
            v15[47] = 0;
            v15[24] = 0;
            *(_OWORD *)&v12[v13 + 48] = *((_OWORD *)v15 + 3);
            v13 += 64;
          }
          while (v15 + 64 != &v4[64 * v5]);
          v6 = *(unsigned int *)(a1 + 8);
          v19 = &v12[v13];
          v12 = *(char **)a1;
        }
        else
        {
          v19 = *(char **)a1;
        }
        for (i = &v12[64 * v6]; i != v19; i -= 64)
        {
          if (*(i - 17) < 0)
            operator delete(*((void **)i - 5));
          if (*(i - 41) < 0)
            operator delete(*((void **)i - 8));
        }
        *(_DWORD *)(a1 + 8) = v5;
        v21 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v21)
        {
          v22 = *(char **)a2;
          v23 = v21 << 6;
          do
          {
            v24 = &v22[v23];
            if (v22[v23 - 17] < 0)
              operator delete(*((void **)v24 - 5));
            if (*(v24 - 41) < 0)
              operator delete(*((void **)v24 - 8));
            v23 -= 64;
          }
          while (v23);
        }
        goto LABEL_58;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v25 = *(char **)a1;
          v26 = v6 << 6;
          do
          {
            v27 = &v25[v26];
            if (v25[v26 - 17] < 0)
              operator delete(*((void **)v27 - 5));
            if (*(v27 - 41) < 0)
              operator delete(*((void **)v27 - 8));
            v26 -= 64;
          }
          while (v26);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C61999BC(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[64 * v6];
        v8 = *(_QWORD *)a1 + 24;
        do
        {
          v9 = (void **)(v8 - 24);
          if (*(char *)(v8 - 1) < 0)
            operator delete(*v9);
          v10 = *(_OWORD *)v4;
          *(_QWORD *)(v8 - 8) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v9 = v10;
          v4[23] = 0;
          *v4 = 0;
          if (*(char *)(v8 + 23) < 0)
            operator delete(*(void **)v8);
          v11 = *(_OWORD *)(v4 + 24);
          *(_QWORD *)(v8 + 16) = *((_QWORD *)v4 + 5);
          *(_OWORD *)v8 = v11;
          v4[47] = 0;
          v4[24] = 0;
          *(_OWORD *)(v8 + 24) = *((_OWORD *)v4 + 3);
          v8 += 64;
          v4 += 64;
        }
        while (v4 != v7);
        goto LABEL_47;
      }
      v6 = 0;
LABEL_47:
      v28 = *(char **)a2;
      v29 = *(unsigned int *)(a2 + 8);
      if (v6 != v29)
      {
        v30 = &v28[64 * v29];
        v31 = *(_QWORD *)a1 + (v6 << 6);
        v32 = &v28[64 * v6];
        do
        {
          v33 = *(_OWORD *)v32;
          *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
          *(_OWORD *)v31 = v33;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          *(_QWORD *)v32 = 0;
          v34 = *(_OWORD *)(v32 + 24);
          *(_QWORD *)(v31 + 40) = *((_QWORD *)v32 + 5);
          *(_OWORD *)(v31 + 24) = v34;
          *((_QWORD *)v32 + 4) = 0;
          *((_QWORD *)v32 + 5) = 0;
          *((_QWORD *)v32 + 3) = 0;
          *(_OWORD *)(v31 + 48) = *((_OWORD *)v32 + 3);
          v32 += 64;
          v31 += 64;
        }
        while (v32 != v30);
        v28 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v35 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v35)
      {
        v36 = v35 << 6;
        do
        {
          v37 = &v28[v36];
          if (v28[v36 - 17] < 0)
            operator delete(*((void **)v37 - 5));
          if (*(v37 - 41) < 0)
            operator delete(*((void **)v37 - 8));
          v36 -= 64;
        }
        while (v36);
      }
LABEL_58:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C6201BB8((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C51D7D0C()
{
  __n128 v1;
  char v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"Print setting flow sensitive branch probabilities";
  v1.n128_u64[1] = 49;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FCB40, "show-fs-branchprob", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FCB40, &dword_1C475E000);
  v4 = 10;
  v3 = &v4;
  v1.n128_u64[0] = (unint64_t)"Only show debug message if the branch probility is greater than this value (in percentage).";
  v1.n128_u64[1] = 91;
  sub_1C6200BF0(&v3, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FCC00, &dword_1C475E000);
  v4 = 10000;
  v3 = &v4;
  v1.n128_u64[0] = (unint64_t)"Only show debug message if the source branch weight is greater  than this value.";
  v1.n128_u64[1] = 80;
  sub_1C6200CB0(&v3, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FCCC0, &dword_1C475E000);
  v4 = 1;
  v2 = 0;
  v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"View BFI before MIR loader";
  v1.n128_u64[1] = 26;
  sub_1C4E5DE0C((llvm::cl::Option *)algn_1ED7FCD80, "fs-viewbfi-before", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1ED7FCD80, &dword_1C475E000);
  v4 = 1;
  v2 = 0;
  v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"View BFI after MIR loader";
  v1.n128_u64[1] = 25;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FCE40, "fs-viewbfi-after", &v4, (_BYTE **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FCE40, &dword_1C475E000);
}

uint64_t llvm::yaml::FrameIndex::FrameIndex(uint64_t this, int a2, const llvm::MachineFrameInfo *a3)
{
  BOOL v3;
  int v4;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  v3 = a2 >= 0 || -*((_DWORD *)a3 + 8) > a2;
  *(_BYTE *)(this + 4) = a2 < 0 && -*((_DWORD *)a3 + 8) <= a2;
  v4 = *((_DWORD *)a3 + 8);
  if (v3)
    v4 = 0;
  *(_DWORD *)this = v4 + a2;
  return this;
}

{
  BOOL v3;
  int v4;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  v3 = a2 >= 0 || -*((_DWORD *)a3 + 8) > a2;
  *(_BYTE *)(this + 4) = a2 < 0 && -*((_DWORD *)a3 + 8) <= a2;
  v4 = *((_DWORD *)a3 + 8);
  if (v3)
    v4 = 0;
  *(_DWORD *)this = v4 + a2;
  return this;
}

void llvm::yaml::FrameIndex::getFI(llvm::yaml::FrameIndex *this@<X0>, const llvm::MachineFrameInfo *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];
  _QWORD *v14;
  void *__p[2];
  char v16;
  unsigned int v17;
  void **v18;
  __int16 v19;

  v4 = *(_DWORD *)this;
  v17 = *(_DWORD *)this;
  v5 = *((_DWORD *)a2 + 8);
  if (*((_BYTE *)this + 4))
  {
    v6 = v4 >= v5;
    v4 -= v5;
    if (v6)
    {
      v7 = "invalid fixed frame index {0}";
      v8 = 29;
      goto LABEL_8;
    }
    v17 = v4;
  }
  if (v4 + v5 < -858993459 * ((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3))
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = v4;
    return;
  }
  v7 = "invalid frame index {0}";
  v8 = 23;
LABEL_8:
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = &v14;
  v12[3] = 1;
  v13[0] = &off_1E8146EC8;
  v13[1] = &v17;
  v14 = v13;
  sub_1C4DCAF2C((uint64_t)v12, __p);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v10 = qword_1ED836B58[0];
  v11 = operator new();
  v19 = 260;
  v18 = __p;
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v18, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = v10;
  *(_BYTE *)(v11 + 48) = 1;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v11;
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1C51D80C8()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C51D80DC(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C51D80E4(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C51D80E4(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;

  v28 = a3;
  v29 = a4;
  v27 = 0;
  if (!sub_1C617F438(&v28, &v27))
  {
    v14 = v29;
    if (!v29)
    {
      v15 = 0;
      goto LABEL_16;
    }
    v15 = 0;
    v17 = *v28;
    if (v17 > 0x63)
    {
      if (v17 != 100)
      {
        if (v17 != 110)
        {
LABEL_26:
          v18 = 0;
          v19 = v28;
          v20 = &v28[v14];
          v21 = v14;
          while (1)
          {
            v22 = *v19;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 97) >= 0x1A)
              {
                if ((v22 - 65) > 0x19)
                {
LABEL_45:
                  v16 = v18;
                  v20 = v19;
LABEL_46:
                  if (v14 != v21)
                  {
                    v28 = v20;
                    v29 = v21;
                    return llvm::write_integer(a2, *a1, v16, v15);
                  }
LABEL_16:
                  v16 = 0;
                  return llvm::write_integer(a2, *a1, v16, v15);
                }
                v23 = -55;
              }
              else
              {
                v23 = -87;
              }
            }
            else
            {
              v23 = -48;
            }
            v24 = v23 + v22;
            if (v24 > 9)
              goto LABEL_45;
            v16 = 10 * v18 + v24;
            if (v18 > v16 / 0xA)
              goto LABEL_16;
            ++v19;
            v18 = 10 * v18 + v24;
            if (!--v21)
              goto LABEL_46;
          }
        }
        goto LABEL_23;
      }
    }
    else if (v17 != 68)
    {
      if (v17 != 78)
        goto LABEL_26;
LABEL_23:
      ++v28;
      v15 = 1;
      goto LABEL_25;
    }
    v15 = 0;
    ++v28;
LABEL_25:
    v14 = v29 - 1;
    v29 = v14;
    if (!v14)
      goto LABEL_16;
    goto LABEL_26;
  }
  if (!v29)
    goto LABEL_44;
  v6 = 0;
  v7 = v28;
  v8 = &v28[v29];
  v9 = v29;
  while (1)
  {
    v10 = *v7;
    if ((v10 - 48) < 0xA)
    {
      v11 = -48;
      goto LABEL_6;
    }
    if ((v10 - 97) < 0x1A)
    {
      v11 = -87;
      goto LABEL_6;
    }
    if ((v10 - 65) > 0x19)
      break;
    v11 = -55;
LABEL_6:
    v12 = v11 + v10;
    if (v12 > 9)
      break;
    v13 = 10 * v6 + v12;
    if (v6 > v13 / 0xA)
      goto LABEL_44;
    ++v7;
    v6 = v13;
    if (!--v9)
      goto LABEL_38;
  }
  v13 = v6;
  v8 = v7;
LABEL_38:
  if (v29 != v9)
  {
    v28 = v8;
    v29 = v9;
    goto LABEL_40;
  }
LABEL_44:
  v13 = 0;
LABEL_40:
  if ((v27 & 0xFFFFFFFE) == 2)
    v25 = v13 + 2;
  else
    v25 = v13;
  return llvm::write_hex(a2, (int)*a1, v27, v25, 1);
}

void llvm::initializeRegAllocScoringPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7FCF00);
  if (v1 != -1)
  {
    v4[0] = sub_1C51D837C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7FCF00, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C51D837C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Register Allocation Scoring Pass";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "regallocscoringpass";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::RegAllocScoring::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::RegAllocScoring>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C51D840C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C51D843C(uint64_t a1)
{
  uint64_t v2;

  v2 = 504;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0)
      operator delete(*(void **)(a1 + v2 - 24));
    v2 -= 24;
  }
  while (v2);
  return a1;
}

double llvm::createReleaseModeAdvisor(llvm *this)
{
  _QWORD *v1;
  double result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = &llvm::RegAllocEvictionAdvisorAnalysis::ID;
  *(_QWORD *)&result = 0x100000004;
  v1[3] = 0x100000004;
  *v1 = &off_1E8146FB8;
  v1[4] = 0;
  return result;
}

uint64_t llvm::RegAllocScoring::runOnMachineFunction(llvm::RegAllocScoring *this, llvm::MachineFunction *a2)
{
  return 0;
}

const char *sub_1C51D84D4()
{
  return "Register Allocation Pass Scoring";
}

void sub_1C51D84E4(llvm::Pass *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = sub_1C51D8818(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10B1C40729BBE6BLL);
  }
  llvm::Pass::~Pass(this);
}

void sub_1C51D8528(llvm::Pass *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = sub_1C51D8818(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10B1C40729BBE6BLL);
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51D8580(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

void *sub_1C51D85C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  void **v9;
  void *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  void *result;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string v28;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v9 = **(void ****)(a1 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != &llvm::MachineBlockFrequencyInfo::ID);
    v11 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineBlockFrequencyInfo::ID);
    v12 = **(void ****)(a1 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
    }
    while (v13 != &llvm::MachineLoopInfo::ID);
    v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::MachineLoopInfo::ID);
    v15 = operator new();
    v16 = llvm::RegAllocEvictionAdvisor::RegAllocEvictionAdvisor((int8x16_t *)v15, a2, a3);
    v16->i64[0] = (uint64_t)&off_1E8147098;
    result = llvm::RegAllocEvictionAdvisor::RegAllocEvictionAdvisor(v16 + 6, a2, a3);
    *(_QWORD *)(v15 + 96) = &off_1E8149108;
    *(_QWORD *)(v15 + 192) = v5;
    *(_QWORD *)(v15 + 200) = v11;
    *(_QWORD *)(v15 + 208) = v14;
    *(_QWORD *)(v15 + 216) = 0;
    v18 = *(_QWORD *)(a2 + 40);
    v19 = *(_DWORD *)(v18 + 32);
    if (v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(v18 + 24);
      v22 = 0.0;
      do
      {
        v23 = *(_QWORD *)(v21 + 16 * (v20 & 0x7FFFFFFF) + 8);
        if (v23)
        {
          while ((*(_DWORD *)v23 & 0x80000000) != 0)
          {
            v23 = *(_QWORD *)(v23 + 24);
            if (!v23)
              goto LABEL_13;
          }
          v22 = v22 + 1.0;
        }
LABEL_13:
        ++v20;
      }
      while (v20 != v19);
    }
    else
    {
      v22 = 0.0;
    }
    *(float *)(v15 + 224) = v22;
    *(_QWORD *)(v15 + 232) = 0;
    *(_QWORD *)(v15 + 240) = 0;
    *(_DWORD *)(v15 + 248) = 0;
    *(_QWORD *)(v15 + 216) = 1835059;
    *a4 = v15;
  }
  else
  {
    v24 = ***(_QWORD ***)a2;
    v25 = operator new();
    *(_DWORD *)(v25 + 16) = 1;
    *(_QWORD *)v25 = &off_1E8147068;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 40) = 0;
    *(_QWORD *)(v25 + 24) = 0;
    *(_DWORD *)(v25 + 48) = -1;
    *(_QWORD *)(v25 + 56) = operator new();
    sub_1C4D63CD0((char **)(v25 + 24), 0x15uLL);
    *((_BYTE *)&v28.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v28, "feed_");
    if (byte_1ED7FCF37 >= 0)
      v26 = (const std::string::value_type *)&qword_1ED7FCF20;
    else
      v26 = (const std::string::value_type *)qword_1ED7FCF20;
    if (byte_1ED7FCF37 >= 0)
      v27 = byte_1ED7FCF37 & 0x7F;
    else
      v27 = unk_1ED7FCF28;
    result = std::string::append(&v28, v26, v27);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1C51D8818(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0xC400A2AC0F1);
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C51D8864(_QWORD *a1)
{
  sub_1C51D8818(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51D8890(_QWORD *a1)
{
  *a1 = &off_1E8147098;
  MEMORY[0x1CAA32FB4](a1[29], 8);
  return a1;
}

void sub_1C51D88C8(_QWORD *a1)
{
  *a1 = &off_1E8147098;
  MEMORY[0x1CAA32FB4](a1[29], 8);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51D8910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int16 **v6;
  uint64_t OrderLimit;
  BOOL v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  size_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  size_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  size_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  size_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  size_t v51;
  uint64_t v52;
  void *v53;
  uint64_t *v54;
  size_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  size_t v59;
  uint64_t v60;
  void *v61;
  uint64_t *v62;
  size_t v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  size_t v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  size_t v71;
  uint64_t v72;
  void *v73;
  uint64_t *v74;
  size_t v75;
  uint64_t v76;
  void *v77;
  uint64_t *v78;
  size_t v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  size_t v83;
  uint64_t v84;
  void *v85;
  uint64_t *v86;
  size_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v90;
  size_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  __n128 v99;
  unsigned __int16 *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unsigned __int16 *v105;
  int i;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unint64_t v110;
  unsigned __int16 *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  _WORD *v124;
  unsigned __int16 v125;
  float v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t *j;
  unsigned int v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int16 ***v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned __int16 ***v156;
  unsigned int v157;
  _BOOL4 v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  unsigned int *v166;
  int v167;
  int v168;
  unsigned __int16 *v169;
  int v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  uint64_t k;
  uint64_t v179;
  float v180;
  uint64_t v181;
  float v182;
  uint64_t v183;
  BOOL v185;
  uint64_t v186;
  int v187;
  unsigned __int16 **v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  unsigned int v198;
  _OWORD v200[5];
  int v201;
  unsigned int v202[66];
  void *v203;
  uint64_t v204;
  _QWORD v205[34];

  v5 = a4;
  v6 = (unsigned __int16 **)a3;
  v205[32] = *MEMORY[0x1E0C80C00];
  OrderLimit = llvm::RegAllocEvictionAdvisor::getOrderLimit((_QWORD *)a1, a2, a3, a4);
  if ((OrderLimit & 0xFF00000000) == 0)
    return 0;
  v186 = OrderLimit;
  v195 = a2;
  v11 = *(float *)(a2 + 116) != INFINITY || (_DWORD)v5 != 255;
  v185 = v11;
  v12 = *(_QWORD *)(a1 + 192);
  v13 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
  v14 = (uint64_t *)qword_1ED7FCF08;
  v15 = 8;
  while (v14 != (uint64_t *)qword_1ED7FCF10)
  {
    v16 = *v14++;
    v15 *= v16;
  }
  bzero(v13, v15);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
  v18 = (uint64_t *)qword_1ED7FCF08;
  v19 = 8;
  while (v18 != (uint64_t *)qword_1ED7FCF10)
  {
    v20 = *v18++;
    v19 *= v20;
  }
  bzero(v17, v19);
  v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 2);
  v22 = (uint64_t *)qword_1ED7FCF08;
  v23 = 4;
  while (v22 != (uint64_t *)qword_1ED7FCF10)
  {
    v24 = *v22++;
    v23 *= v24;
  }
  bzero(v21, v23);
  v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 3);
  v26 = (uint64_t *)qword_1ED7FCF08;
  v27 = 4;
  while (v26 != (uint64_t *)qword_1ED7FCF10)
  {
    v28 = *v26++;
    v27 *= v28;
  }
  bzero(v25, v27);
  v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 4);
  v30 = (uint64_t *)qword_1ED7FCF08;
  v31 = 8;
  while (v30 != (uint64_t *)qword_1ED7FCF10)
  {
    v32 = *v30++;
    v31 *= v32;
  }
  bzero(v29, v31);
  v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 5);
  v34 = (uint64_t *)qword_1ED7FCF08;
  v35 = 8;
  while (v34 != (uint64_t *)qword_1ED7FCF10)
  {
    v36 = *v34++;
    v35 *= v36;
  }
  bzero(v33, v35);
  v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 6);
  v38 = (uint64_t *)qword_1ED7FCF08;
  v39 = 4;
  while (v38 != (uint64_t *)qword_1ED7FCF10)
  {
    v40 = *v38++;
    v39 *= v40;
  }
  bzero(v37, v39);
  v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 7);
  v42 = (uint64_t *)qword_1ED7FCF08;
  v43 = 4;
  while (v42 != (uint64_t *)qword_1ED7FCF10)
  {
    v44 = *v42++;
    v43 *= v44;
  }
  bzero(v41, v43);
  v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 8);
  v46 = (uint64_t *)qword_1ED7FCF08;
  v47 = 4;
  while (v46 != (uint64_t *)qword_1ED7FCF10)
  {
    v48 = *v46++;
    v47 *= v48;
  }
  bzero(v45, v47);
  v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 9);
  v50 = (uint64_t *)qword_1ED7FCF08;
  v51 = 4;
  while (v50 != (uint64_t *)qword_1ED7FCF10)
  {
    v52 = *v50++;
    v51 *= v52;
  }
  bzero(v49, v51);
  v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 10);
  v54 = (uint64_t *)qword_1ED7FCF08;
  v55 = 4;
  while (v54 != (uint64_t *)qword_1ED7FCF10)
  {
    v56 = *v54++;
    v55 *= v56;
  }
  bzero(v53, v55);
  v57 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 11);
  v58 = (uint64_t *)qword_1ED7FCF08;
  v59 = 4;
  while (v58 != (uint64_t *)qword_1ED7FCF10)
  {
    v60 = *v58++;
    v59 *= v60;
  }
  bzero(v57, v59);
  v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 12);
  v62 = (uint64_t *)qword_1ED7FCF08;
  v63 = 4;
  while (v62 != (uint64_t *)qword_1ED7FCF10)
  {
    v64 = *v62++;
    v63 *= v64;
  }
  bzero(v61, v63);
  v65 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 13);
  v66 = (uint64_t *)qword_1ED7FCF08;
  v67 = 4;
  while (v66 != (uint64_t *)qword_1ED7FCF10)
  {
    v68 = *v66++;
    v67 *= v68;
  }
  bzero(v65, v67);
  v69 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 14);
  v70 = (uint64_t *)qword_1ED7FCF08;
  v71 = 4;
  while (v70 != (uint64_t *)qword_1ED7FCF10)
  {
    v72 = *v70++;
    v71 *= v72;
  }
  bzero(v69, v71);
  v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 15);
  v74 = (uint64_t *)qword_1ED7FCF08;
  v75 = 4;
  while (v74 != (uint64_t *)qword_1ED7FCF10)
  {
    v76 = *v74++;
    v75 *= v76;
  }
  bzero(v73, v75);
  v77 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 16);
  v78 = (uint64_t *)qword_1ED7FCF08;
  v79 = 4;
  while (v78 != (uint64_t *)qword_1ED7FCF10)
  {
    v80 = *v78++;
    v79 *= v80;
  }
  bzero(v77, v79);
  v81 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 17);
  v82 = (uint64_t *)qword_1ED7FCF08;
  v83 = 4;
  while (v82 != (uint64_t *)qword_1ED7FCF10)
  {
    v84 = *v82++;
    v83 *= v84;
  }
  bzero(v81, v83);
  v85 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 18);
  v86 = (uint64_t *)qword_1ED7FCF08;
  v87 = 8;
  while (v86 != (uint64_t *)qword_1ED7FCF10)
  {
    v88 = *v86++;
    v87 *= v88;
  }
  bzero(v85, v87);
  v89 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 19);
  v90 = (uint64_t *)qword_1ED7FCF08;
  v91 = 8;
  while (v90 != (uint64_t *)qword_1ED7FCF10)
  {
    v92 = *v90++;
    v91 *= v92;
  }
  bzero(v89, v91);
  v93 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 20);
  v94 = 0;
  *v93 = 0;
  do
  {
    v95 = &v202[v94];
    *v95 = 0;
    *((_BYTE *)v95 + 4) = 0;
    v94 += 2;
  }
  while (v94 != 66);
  v96 = 0;
  v97 = a2;
  do
  {
    v98 = &v202[v96];
    *v98 = 0;
    *((_BYTE *)v98 + 4) = 0;
    v96 += 2;
  }
  while (v96 != 66);
  v201 = 0;
  v99.n128_u32[1] = 0;
  v99.n128_u64[1] = 0;
  memset(v200, 0, sizeof(v200));
  v100 = v6[1];
  v101 = -(uint64_t)v100;
  if ((_DWORD)v186)
  {
    v102 = v186 - 1;
    v103 = *((_DWORD *)v6 + 18);
    if (v103 < (int)v186 - 1)
      v102 = *((_DWORD *)v6 + 18);
    if (v103 < (int)v186)
      v104 = v102;
    else
      v104 = v102 + 1;
    if ((v104 & 0x80000000) == 0 && v104 < v103)
    {
      v105 = v6[7];
      for (i = v105[v104]; (i - 1) <= 0x3FFFFFFE; i = v105[++v104])
      {
        if (v100)
        {
          v107 = 2 * (_QWORD)v100;
          v108 = *v6;
          while (*v108 != i)
          {
            ++v108;
            v107 -= 2;
            if (!v107)
            {
              v108 = &(*v6)[(_QWORD)v100];
              break;
            }
          }
        }
        else
        {
          v108 = *v6;
        }
        if (v100 == (unsigned __int16 *)(v108 - *v6))
          break;
        if (v104 == v103 - 1)
        {
          v104 = *((_DWORD *)v6 + 18);
          break;
        }
      }
    }
  }
  else
  {
    v104 = *((_DWORD *)v6 + 18);
  }
  if (v104 == (_DWORD)v101)
    return 0;
  v190 = 0;
  v109 = 0;
  v110 = -*((_DWORD *)v6 + 2);
  v189 = v5;
  v188 = v6;
  v187 = v104;
  do
  {
    v111 = &(*v6)[(_QWORD)v6[1] + (int)v110];
    if ((int)v101 >= 0)
      v111 = &v6[7][v110];
    v112 = *v111;
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + v112) >= v5)
      goto LABEL_174;
    if ((_DWORD)v5 == 1)
    {
      v175 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(v175 + 48) > v112
        && *(_WORD *)(*(_QWORD *)(v175 + 40) + 2 * v112)
        && !llvm::LiveRegMatrix::isPhysRegUsed(*(_QWORD *)(a1 + 24), v112))
      {
        goto LABEL_174;
      }
    }
    if ((int)llvm::LiveRegMatrix::checkInterference(*(_QWORD *)(a1 + 24), v97, v112) > 1)
      goto LABEL_174;
    v193 = v110;
    v191 = v109;
    v192 = v101;
    v113 = **(_QWORD **)v97;
    if ((v113 & 6) != 0
      && (v114 = *(_QWORD *)(*(_QWORD *)v97 + 24 * *(unsigned int *)(v97 + 8) - 16), (v114 & 6) != 0))
    {
      v115 = *(_QWORD *)(a1 + 32);
      v116 = v112;
      v117 = sub_1C499C548(*(_QWORD *)(v115 + 288), v113);
      if (v117 == sub_1C499C548(*(_QWORD *)(v115 + 288), v114))
        v118 = v117;
      else
        v118 = 0;
      v197 = v118;
      LODWORD(v112) = v116;
    }
    else
    {
      v197 = 0;
    }
    v119 = *(_QWORD *)(a1 + 16);
    v198 = *(_DWORD *)(*(_QWORD *)(v119 + 1248) + 8 * (*(_DWORD *)(v97 + 112) & 0x7FFFFFFF) + 4);
    if (!v198)
      v198 = *(_DWORD *)(v119 + 1280);
    v120 = 0;
    v203 = v205;
    v204 = 0x2000000000;
    v121 = *(_QWORD *)(a1 + 56);
    if (v121)
      v122 = (_QWORD *)(v121 + 8);
    else
      v122 = 0;
    v123 = *(unsigned int *)(*v122 + 24 * v112 + 16);
    v124 = (_WORD *)(v122[6] + ((v123 >> 3) & 0x1FFFFFFE));
    v194 = v112;
    v125 = *v124 + (v123 & 0xF) * v112;
    v126 = 0.0;
    while (1)
    {
      v127 = *(_QWORD *)(a1 + 24);
      v128 = v125;
      v129 = *(_QWORD *)(v127 + 400);
      v130 = v129 + 176 * v125;
      v131 = *(_DWORD *)(v127 + 272);
      v132 = (_DWORD *)(*(_QWORD *)(v127 + 392) + 216 * v128);
      if (*(_DWORD *)(v130 + 168) != v131
        || *(_QWORD *)(v129 + 176 * v128 + 8) != v97
        || *(_DWORD **)v130 != v132
        || *v132 != *(_DWORD *)(v129 + 176 * v128 + 164))
      {
        *(_QWORD *)v130 = v132;
        v133 = v129 + 176 * v128;
        *(_QWORD *)(v133 + 8) = v97;
        *(_DWORD *)(v133 + 120) = 0;
        *(_WORD *)(v133 + 160) = 0;
        *(_DWORD *)(v133 + 164) = *v132;
        *(_DWORD *)(v130 + 168) = v131;
        v134 = dword_1ED82FCA8;
LABEL_113:
        llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v130, v134);
        v135 = *(_DWORD *)(v130 + 120);
        goto LABEL_114;
      }
      v135 = *(_DWORD *)(v130 + 120);
      v134 = dword_1ED82FCA8;
      if (*(_BYTE *)(v130 + 161))
        v165 = v135 > dword_1ED82FCA8;
      else
        v165 = 1;
      if (v165)
        goto LABEL_113;
LABEL_114:
      if (!(v135 | v204))
        goto LABEL_159;
      if (v135 >= dword_1ED82FCA8)
        break;
      sub_1C486AF08((unsigned int *)&v203, *(_BYTE **)(v130 + 112), (_BYTE *)(*(_QWORD *)(v130 + 112) + 8 * v135));
      v136 = *(unsigned int *)(v130 + 120);
      if ((_DWORD)v136)
      {
        v196 = *(_QWORD *)(v130 + 112);
        v137 = v196 + 8 * v136;
        do
        {
          v139 = *(_QWORD *)(v137 - 8);
          v137 -= 8;
          v138 = v139;
          v140 = *(_DWORD *)(v139 + 112);
          if (*(_QWORD *)(a5 + 96))
          {
            for (j = *(uint64_t **)(a5 + 88); j; j = (uint64_t *)*j)
            {
              v142 = *((_DWORD *)j + 7);
              if (v140 >= v142)
              {
                if (v142 >= v140)
                  goto LABEL_169;
                ++j;
              }
            }
          }
          else
          {
            v143 = *(unsigned int *)(a5 + 8);
            if ((_DWORD)v143)
            {
              v144 = *(_DWORD **)a5;
              v145 = 4 * v143;
              while (*v144 != v140)
              {
                ++v144;
                v145 -= 4;
                if (!v145)
                  goto LABEL_131;
              }
              if (v145)
                goto LABEL_169;
            }
          }
LABEL_131:
          v146 = v140 & 0x7FFFFFFF;
          v147 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248);
          if (*(_DWORD *)(v147 + 8 * v146) == 6)
            goto LABEL_169;
          if (*(float *)(v97 + 116) != INFINITY)
          {
            if (v198 <= *(_DWORD *)(v147 + 8 * v146 + 4))
              goto LABEL_169;
            goto LABEL_146;
          }
          if (*(float *)(v138 + 116) == INFINITY)
          {
            v148 = *(_QWORD *)(a1 + 64);
            v149 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
            v150 = (unsigned __int16 ***)(*(_QWORD *)(v149 + 16 * (*(_DWORD *)(v97 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            v151 = *((unsigned __int16 *)*v150 + 12);
            v152 = *(_QWORD *)v148;
            v153 = *(_DWORD *)(v148 + 8);
            if (v153 == *(_DWORD *)(*(_QWORD *)v148 + 24 * *((unsigned __int16 *)*v150 + 12)))
            {
              v154 = *(_QWORD *)v148;
            }
            else
            {
              llvm::RegisterClassInfo::compute((uint64_t *)v148, v150);
              v148 = *(_QWORD *)(a1 + 64);
              v149 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
              v154 = *(_QWORD *)v148;
              v153 = *(_DWORD *)(v148 + 8);
              v146 = *(_DWORD *)(v138 + 112) & 0x7FFFFFFF;
            }
            v155 = *(_DWORD *)(v152 + 24 * v151 + 4);
            v156 = (unsigned __int16 ***)(*(_QWORD *)(v149 + 16 * v146) & 0xFFFFFFFFFFFFFFF8);
            v157 = *((unsigned __int16 *)*v156 + 12);
            if (v153 != *(_DWORD *)(v154 + 24 * *((unsigned __int16 *)*v156 + 12)))
            {
              llvm::RegisterClassInfo::compute((uint64_t *)v148, v156);
              v146 = *(_DWORD *)(v138 + 112) & 0x7FFFFFFF;
            }
            if (v198 > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248) + 8 * v146 + 4))
              goto LABEL_146;
            if (v155 >= *(_DWORD *)(v154 + 24 * v157 + 4))
              goto LABEL_169;
          }
          else if (v198 > *(_DWORD *)(v147 + 8 * v146 + 4))
          {
            goto LABEL_146;
          }
          v126 = v126 + 1.0;
LABEL_146:
          v158 = v197;
          if (v197)
          {
            v159 = **(_QWORD **)v138;
            if ((v159 & 6) != 0)
            {
              v160 = *(_QWORD *)(*(_QWORD *)v138 + 24 * *(unsigned int *)(v138 + 8) - 16);
              if ((v160 & 6) != 0)
              {
                v161 = *(_QWORD *)(a1 + 32);
                v162 = sub_1C499C548(*(_QWORD *)(v161 + 288), v159);
                v163 = sub_1C499C548(*(_QWORD *)(v161 + 288), v160);
                v158 = 0;
                if (v162)
                {
                  v97 = v195;
                  if (v162 == v163)
                  {
                    if (*(_BYTE *)(a1 + 88))
                      v158 = llvm::RegAllocEvictionAdvisor::canReassign((uint64_t *)a1, v138, v194) == 0;
                    else
                      v158 = 1;
                  }
                }
                else
                {
                  v97 = v195;
                }
              }
              else
              {
                v158 = 0;
              }
            }
            else
            {
              v158 = 0;
            }
          }
          v120 += v158;
        }
        while (v137 != v196);
      }
LABEL_159:
      v164 = (unsigned __int16)v124[1];
      ++v124;
      v125 = v164 + v128;
      if (!v164)
      {
        v109 = v191;
        sub_1C51D9738(a1, (uint64_t)&v203, (float *)v200, v191, (v193 >> 31) & 1, v120, v126);
        v174 = 1;
        goto LABEL_170;
      }
    }
LABEL_169:
    v174 = 0;
    v109 = v191;
LABEL_170:
    LODWORD(v101) = v192;
    v5 = v189;
    v6 = v188;
    v104 = v187;
    if (v203 != v205)
      free(v203);
    v110 = v193;
    if (v174)
    {
      ++v190;
      v166 = &v202[2 * v109];
      *v166 = v194;
      *((_BYTE *)v166 + 4) = 1;
    }
LABEL_174:
    v167 = *((_DWORD *)v6 + 18);
    if (v167 <= (int)v101)
    {
      v168 = v101;
    }
    else
    {
      v110 = (v101 + 1);
      v168 = v101 + 1;
    }
    if ((v168 & 0x80000000) == 0 && v168 < v167)
    {
      v169 = v6[7];
      v170 = v169[v168];
      if ((v170 - 1) <= 0x3FFFFFFE)
      {
        v171 = v6[1];
        do
        {
          if (v171)
          {
            v172 = 2 * (_QWORD)v171;
            v173 = *v6;
            while (*v173 != (unsigned __int16)v170)
            {
              ++v173;
              v172 -= 2;
              if (!v172)
              {
                v173 = &(*v6)[(_QWORD)v171];
                break;
              }
            }
          }
          else
          {
            v173 = *v6;
          }
          if (v171 == (unsigned __int16 *)(v173 - *v6))
            break;
          v110 = (v168 + 1);
          if ((_DWORD)v110 == v167)
            break;
          v170 = v169[v110];
          ++v168;
        }
        while ((v170 - 1) <= 0x3FFFFFFE);
      }
    }
    ++v109;
    LODWORD(v101) = v110;
  }
  while (v104 != (_DWORD)v110);
  if (!v190)
    return 0;
  if (v185)
  {
    v203 = v205;
    v205[0] = v97;
    v204 = 0x100000001;
    sub_1C51D9738(a1, (uint64_t)&v203, (float *)v200, 32, 0, 0, 0.0);
    if (v203 != v205)
      free(v203);
  }
  v176 = 0;
  v99.n128_u32[0] = 1.0;
  do
  {
    v177 = *(float *)((char *)v200 + v176);
    if (v177 == 0.0)
      v177 = 1.0;
    *(float *)((char *)v200 + v176) = v177;
    v176 += 4;
  }
  while (v176 != 84);
  for (k = 0; k != 21; ++k)
  {
    if (((*(_QWORD *)(a1 + 216) >> k) & 1) == 0)
    {
      v179 = 0;
      v180 = *((float *)v200 + k);
      do
      {
        v181 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), k, v99);
        v99.n128_f32[0] = *(float *)(v181 + v179) / v180;
        *(_DWORD *)(v181 + v179) = v99.n128_u32[0];
        v179 += 4;
      }
      while (v179 != 132);
    }
  }
  v182 = (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1216)
                                           - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1208)) >> 3)
       / *(float *)(a1 + 224);
  *(float *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 20) = v182;
  v183 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v195, v6, v186, v5, a5);
  if (v183 != 32)
    return v202[2 * v183];
  else
    return 0;
}

uint64_t sub_1C51D9704(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 96) + 24))(a1 + 96, a2, a3);
}

uint64_t sub_1C51D9714(uint64_t a1)
{
  return *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 24))(*(_QWORD *)(a1 + 192));
}

uint64_t sub_1C51D9738(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  double *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::AAResults **v47;
  const llvm::LiveIntervals *v48;
  const llvm::VirtRegMap *v49;
  const llvm::TargetInstrInfo *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  char v56;
  int v57;
  _DWORD *v58;
  __int16 v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float v70;
  int v71;
  float v72;
  float v73;
  _BOOL4 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  unint64_t v105;
  int v106;
  _DWORD *v107;
  unsigned int SubReg;
  _DWORD *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  BOOL v115;
  uint64_t v116;
  int *v117;
  int v118;
  BOOL v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  int *v128;
  int v129;
  BOOL v130;
  int v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  int v137;
  BOOL v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  float v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  float v172;
  unint64_t v173;
  float v174;
  _BOOL8 v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  uint64_t result;
  float v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t *v205;
  uint64_t *v212;
  uint64_t v213;
  float **v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  _BYTE *v229;
  _BYTE *v230;
  uint64_t v231;
  int v232;
  _BYTE v233[72];

  v7 = a7;
  v8 = a6;
  v9 = a4;
  v10 = a3;
  v12 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v12)
  {
    v13 = 0;
    v221 = 0;
    v223 = 0;
    v16 = 0;
    v22 = 0;
    v173 = 0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    v228 = 0.0;
    v225 = 0.0;
    goto LABEL_182;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = *(float ***)a2;
  v18 = *(_QWORD *)a2 + 8 * v12;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
  v20 = *(_QWORD *)(v19 + 344) & 0xFFFFFFFFFFFFFFF9;
  v21 = *(_QWORD *)(v19 + 352) & 0xFFFFFFFFFFFFFFF9;
  v205 = (uint64_t *)(a1 + 232);
  v22 = 0x7FFFFFFFFFFFFFFFLL;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  v29 = 0.0;
  v224 = a1;
  v213 = v18;
  do
  {
    v30 = *v17;
    v31 = *((_DWORD *)*v17 + 28);
    v32 = v31 & 0x7FFFFFFF;
    v33 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248) + 8 * v32);
    if (v16 <= v33)
      v16 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248) + 8 * (v31 & 0x7FFFFFFF));
    if (v22 >= v33)
      v22 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248) + 8 * (v31 & 0x7FFFFFFF));
    if (v29 < v30[29])
      v29 = v30[29];
    if (((**(_QWORD **)v30 >> 1) & 3 | *(_DWORD *)((**(_QWORD **)v30 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) | (v20 >> 1) & 3))
      v20 = **(_QWORD **)v30;
    v34 = *(_QWORD *)(*(_QWORD *)v30 + 24 * *((unsigned int *)v30 + 2) - 16);
    if (((v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24) | (v21 >> 1) & 3))
      v21 = *(_QWORD *)(*(_QWORD *)v30 + 24 * *((unsigned int *)v30 + 2) - 16);
    v35 = *(_DWORD *)(a1 + 248);
    if (v35)
    {
      v36 = *(_QWORD *)(a1 + 232);
      v37 = (v35 - 1) & (37 * v31);
      v38 = (int *)(v36 + (v37 << 6));
      v39 = *v38;
      if (v31 == *v38)
      {
LABEL_15:
        v40 = (double *)(v38 + 2);
        goto LABEL_30;
      }
      v117 = 0;
      v118 = 1;
      while (v39 != -1)
      {
        if (v117)
          v119 = 0;
        else
          v119 = v39 == -2;
        if (v119)
          v117 = v38;
        v120 = v37 + v118++;
        v37 = v120 & (v35 - 1);
        v38 = (int *)(v36 + (v37 << 6));
        v39 = *v38;
        if (v31 == *v38)
          goto LABEL_15;
      }
      if (v117)
        v38 = v117;
    }
    else
    {
      v38 = 0;
    }
    v214 = v17;
    v41 = *(_DWORD *)(a1 + 240);
    v217 = v13;
    v222 = v15;
    v220 = v14;
    if (4 * v41 + 4 >= 3 * v35)
    {
      v121 = v21;
      v122 = v16;
      sub_1C51DA814(v205, 2 * v35);
      v123 = *(_DWORD *)(a1 + 248);
      if (v123)
      {
        v124 = *(_QWORD *)(a1 + 232);
        v125 = v123 - 1;
        v126 = v125 & (37 * v31);
        v38 = (int *)(v124 + (v126 << 6));
        v127 = *v38;
        if (v31 != *v38)
        {
          v128 = 0;
          v129 = 1;
          while (v127 != -1)
          {
            if (v128)
              v130 = 0;
            else
              v130 = v127 == -2;
            if (v130)
              v128 = v38;
            v131 = v126 + v129++;
            v126 = v131 & v125;
            v38 = (int *)(v124 + (v126 << 6));
            v127 = *v38;
            a1 = v224;
            v16 = v122;
            v21 = v121;
            if (v31 == *v38)
              goto LABEL_19;
          }
          goto LABEL_157;
        }
LABEL_156:
        v16 = v122;
        v21 = v121;
        goto LABEL_19;
      }
LABEL_155:
      v38 = 0;
      goto LABEL_156;
    }
    if (v35 + ~v41 - *(_DWORD *)(a1 + 244) <= v35 >> 3)
    {
      v121 = v21;
      v122 = v16;
      sub_1C51DA814(v205, v35);
      v132 = *(_DWORD *)(a1 + 248);
      if (v132)
      {
        v133 = *(_QWORD *)(a1 + 232);
        v134 = v132 - 1;
        v135 = v134 & (37 * v31);
        v38 = (int *)(v133 + (v135 << 6));
        v136 = *v38;
        if (v31 != *v38)
        {
          v128 = 0;
          v137 = 1;
          while (v136 != -1)
          {
            if (v128)
              v138 = 0;
            else
              v138 = v136 == -2;
            if (v138)
              v128 = v38;
            v139 = v135 + v137++;
            v135 = v139 & v134;
            v38 = (int *)(v133 + (v135 << 6));
            v136 = *v38;
            a1 = v224;
            v16 = v122;
            v21 = v121;
            if (v31 == *v38)
              goto LABEL_19;
          }
LABEL_157:
          if (v128)
            v38 = v128;
          a1 = v224;
          goto LABEL_156;
        }
        goto LABEL_156;
      }
      goto LABEL_155;
    }
LABEL_19:
    v215 = v21;
    v218 = v16;
    ++*(_DWORD *)(a1 + 240);
    if (*v38 != -1)
      --*(_DWORD *)(a1 + 244);
    *(_OWORD *)(v38 + 2) = 0u;
    *v38 = v31;
    *(_OWORD *)(v38 + 6) = 0u;
    *(_OWORD *)(v38 + 10) = 0u;
    *(_QWORD *)((char *)v38 + 53) = 0;
    v229 = v233;
    v230 = v233;
    v231 = 8;
    v232 = 0;
    v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
    v43 = *(_QWORD *)(a1 + 48);
    v44 = *((unsigned int *)v30 + 28);
    if ((v44 & 0x80000000) != 0)
      v45 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
    else
      v45 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v44);
    v216 = v20;
    v219 = v22;
    v46 = *v45;
    if (*v45)
    {
      while ((*(_DWORD *)v46 & 0x80000000) != 0)
      {
        v46 = *(_QWORD *)(v46 + 24);
        if (!v46)
          goto LABEL_27;
      }
      v212 = (uint64_t *)(v42 + 8);
      while (2)
      {
        v55 = *(_QWORD *)(v46 + 8);
        do
          v46 = *(_QWORD *)(v46 + 24);
        while (v46 && ((*(_DWORD *)v46 & 0x80000000) != 0 || *(_QWORD *)(v46 + 8) == v55));
        ++*((_QWORD *)v38 + 6);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v229, v55);
        if (v56)
        {
          v57 = **(unsigned __int16 **)(v55 + 16);
          if (v57 != 10)
          {
            if (v57 != 19 || (v58 = *(_DWORD **)(v55 + 32), v58[1] != v58[9]) || ((v58[8] ^ *v58) & 0xFFF00) != 0)
            {
              v59 = llvm::MachineInstr::readsWritesVirtualRegister(v55, *((_DWORD *)v30 + 28), 0);
              v60 = *(_QWORD *)(v55 + 24);
              v61 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 248);
              v62 = v60 >> 4;
              if (v61)
              {
                v63 = *(_DWORD *)(v61 + 176);
                if (v63)
                {
                  v64 = *(_QWORD *)(v61 + 160);
                  v65 = v63 - 1;
                  v66 = (v63 - 1) & (v62 ^ (v60 >> 9));
                  v67 = *(_QWORD *)(v64 + 16 * v66);
                  if (v67 == v60)
                  {
LABEL_49:
                    v68 = *(unsigned int *)(v64 + 16 * v66 + 8);
                    if (v68 != 0xFFFFFFFFLL)
                    {
                      v69 = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 24 * v68 + 16);
                      goto LABEL_51;
                    }
                  }
                  else
                  {
                    v89 = 1;
                    while (v67 != -4096)
                    {
                      v90 = v66 + v89++;
                      v66 = v90 & v65;
                      v67 = *(_QWORD *)(v64 + 16 * v66);
                      if (v67 == v60)
                        goto LABEL_49;
                    }
                  }
                  v70 = 0.0;
                }
                else
                {
                  v69 = 0;
LABEL_51:
                  v70 = (float)v69;
                }
                v61 = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 16);
              }
              else
              {
                v70 = 0.0;
              }
              v71 = HIBYTE(v59);
              v72 = v70 * (float)(1.0 / (float)v61);
              v73 = *((float *)v38 + 14);
              if (v72 >= v73)
                v73 = v72;
              *((float *)v38 + 14) = v73;
              if (HIBYTE(v59))
                v74 = 0;
              else
                v74 = v59 != 0;
              *((double *)v38 + 1) = *((double *)v38 + 1) + (float)(v72 * (float)v74);
              v226 = v72;
              *((float64x2_t *)v38 + 1) = vaddq_f64(*((float64x2_t *)v38 + 1), vcvtq_f64_f32(vmul_n_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v59 != 0, v59 == 0), (int8x8_t)vdup_n_s32(HIBYTE(v59) != 0))), v72)));
              v75 = *(_QWORD *)(a1 + 208);
              v76 = *(_DWORD *)(v75 + 264);
              if (v76)
              {
                v77 = *(_QWORD *)(v75 + 248);
                v78 = v76 - 1;
                v79 = v78 & (v62 ^ (v60 >> 9));
                v80 = *(_QWORD *)(v77 + 16 * v79);
                if (v60 != v80)
                {
                  v81 = 1;
                  while (v80 != -4096)
                  {
                    v82 = v79 + v81++;
                    v79 = v82 & v78;
                    v80 = *(_QWORD *)(v77 + 16 * v79);
                    if (v60 == v80)
                      goto LABEL_63;
                  }
                  goto LABEL_92;
                }
LABEL_63:
                v83 = *(_QWORD *)(v77 + 16 * v79 + 8);
                if (!v83)
                  goto LABEL_92;
                v85 = *(uint64_t **)(v60 + 88);
                v84 = *(uint64_t **)(v60 + 96);
                if (v85 == v84)
                  goto LABEL_92;
                while (1)
                {
                  v86 = sub_1C477672C(v83 + 56, *v85);
                  v87 = *(_QWORD *)(v83 + 64);
                  v88 = 72;
                  if (v87 == *(_QWORD *)(v83 + 56))
                    v88 = 76;
                  if (v86 == (_QWORD *)(v87 + 8 * *(unsigned int *)(v83 + v88)))
                    break;
                  if (++v85 == v84)
                    goto LABEL_92;
                }
                if (!v71)
                  goto LABEL_92;
                v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 32) + 288) + 392)
                                + 16 * *(unsigned int *)(v60 + 24)
                                + 8);
                v92 = (v91 >> 1) & 3;
                v93 = v91 & 0xFFFFFFFFFFFFFFF8;
                if (v92)
                  v94 = v93 | (2 * (v92 - 1));
                else
                  v94 = *(_QWORD *)v93 | 6;
                v95 = *((_DWORD *)v30 + 2);
                v96 = *(unint64_t **)v30;
                if (v95)
                {
                  v97 = v96[3 * v95 - 2];
                  v98 = *(_DWORD *)((v94 & 0xFFFFFFFFFFFFFFF8) + 24) | (v94 >> 1) & 3;
                  v99 = (v97 >> 1) & 3 | *(_DWORD *)((v97 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v100 = *(unint64_t **)v30;
                  v101 = *((unsigned int *)v30 + 2);
                  if (v98 < v99)
                  {
                    do
                    {
                      v102 = v101 >> 1;
                      v103 = v100[3 * (v101 >> 1) + 1];
                      LODWORD(v103) = (v103 >> 1) & 3 | *(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v101 -= (v101 >> 1) + 1;
                      v104 = v98 >= v103;
                      if (v98 >= v103)
                        v105 = v102 + 1;
                      else
                        v105 = 0;
                      v100 += 3 * v105;
                      if (!v104)
                        v101 = v102;
                    }
                    while (v101);
                    goto LABEL_89;
                  }
                }
                else
                {
                  v95 = 0;
                }
                v100 = &v96[3 * v95];
LABEL_89:
                if (v100 != &v96[3 * v95]
                  && ((*v100 >> 1) & 3 | *(_DWORD *)((*v100 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v94 & 0xFFFFFFFFFFFFFFF8) + 24) | (v94 >> 1) & 3))
                {
                  *((double *)v38 + 4) = *((double *)v38 + 4) + v226;
                }
              }
LABEL_92:
              a1 = v224;
              if (**(_WORD **)(v55 + 16) == 19)
              {
                v106 = *((_DWORD *)v30 + 28);
                v107 = *(_DWORD **)(v55 + 32);
                SubReg = v107[1];
                if (SubReg == v106)
                {
                  SubReg = v107[9];
                  v109 = v107 + 8;
                  if (!SubReg)
                    goto LABEL_100;
                }
                else
                {
                  v109 = *(_DWORD **)(v55 + 32);
                  v107 += 8;
                  if (!SubReg)
                    goto LABEL_100;
                }
                v110 = (*v107 >> 8) & 0xFFF;
                v111 = (*v109 >> 8) & 0xFFF;
                if ((SubReg & 0x80000000) != 0)
                {
                  if (v110 != v111)
                    goto LABEL_100;
                  goto LABEL_99;
                }
                v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 48) + 24) + 16 * (v106 & 0x7FFFFFFF));
                if (v111)
                  SubReg = llvm::MCRegisterInfo::getSubReg(v212, SubReg, v111);
                v113 = (uint64_t *)(v112 & 0xFFFFFFFFFFFFFFF8);
                if (SubReg - 1 <= 0x3FFFFFFE
                  && SubReg >> 3 < *(unsigned __int16 *)(*v113 + 22)
                  && ((*(unsigned __int8 *)(*(_QWORD *)(*v113 + 8) + ((unint64_t)SubReg >> 3)) >> (SubReg & 7)) & 1) != 0
                  || v110 && llvm::MCRegisterInfo::getMatchingSuperReg(v212, SubReg, v110, *v113))
                {
LABEL_99:
                  *((double *)v38 + 5) = *((double *)v38 + 5) + v226;
                }
              }
            }
          }
        }
LABEL_100:
        if (!v46)
          break;
        continue;
      }
    }
LABEL_27:
    v47 = *(llvm::AAResults ***)(a1 + 32);
    v48 = *(const llvm::LiveIntervals **)(a1 + 40);
    v49 = (const llvm::VirtRegMap *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
    *((_BYTE *)v38 + 60) = llvm::VirtRegAuxInfo::isRematerializable((llvm::VirtRegAuxInfo *)v30, v47, v48, v49, v50);
    if (v230 != v229)
      free(v230);
    v32 = (_DWORD)v30[28] & 0x7FFFFFFF;
    v16 = v218;
    v22 = v219;
    v20 = v216;
    v13 = v217;
    v15 = v222;
    v14 = v220;
    v17 = v214;
    v21 = v215;
    v18 = v213;
    v40 = (double *)(v38 + 2);
LABEL_30:
    v51 = *(_QWORD *)(a1 + 40);
    v52 = *(_QWORD *)(*(_QWORD *)(v51 + 248) + 208);
    v53 = v52 + 40 * v32;
    if (!*(_DWORD *)(v53 + 16)
      || ((v114 = **(_DWORD **)(v53 + 8), !*(_DWORD *)(v52 + 40 * v32))
        ? (v115 = v114 == 0)
        : (v115 = 1),
          v115))
    {
      v54 = 0;
    }
    else
    {
      v116 = *(_QWORD *)(v51 + 280);
      if (v114 < 0)
        v114 = *(_DWORD *)(v116 + 4 * (v114 & 0x7FFFFFFF));
      v54 = *(_DWORD *)(v116 + 4 * v32) == v114;
    }
    if (v23 < *((float *)v38 + 14))
      v23 = *((float *)v38 + 14);
    v24 = v24 + *v40;
    v25 = v25 + *((double *)v38 + 2);
    v26 = v26 + *((double *)v38 + 3);
    v27 = v27 + *((double *)v38 + 4);
    v14 += v54;
    v13 += *((_QWORD *)v38 + 6);
    v28 = v28 + *((double *)v38 + 5);
    v15 += *((unsigned __int8 *)v38 + 60);
    ++v17;
  }
  while (v17 != (float **)v18);
  v221 = v14;
  v223 = v15;
  if (*(_DWORD *)(a2 + 8))
  {
    v140 = v21;
    v141 = *(_QWORD *)(a1 + 200);
    v142 = v20;
    v143 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288), v20);
    v144 = *(_QWORD *)(v141 + 248);
    v9 = a4;
    v10 = a3;
    if (v144)
    {
      v145 = *(_DWORD *)(v144 + 176);
      if (v145)
      {
        v146 = *(_QWORD *)(v144 + 160);
        v147 = v145 - 1;
        v148 = (v145 - 1) & ((v143 >> 4) ^ (v143 >> 9));
        v149 = *(_QWORD *)(v146 + 16 * v148);
        if (v149 == v143)
        {
          v150 = v140;
LABEL_165:
          v151 = *(unsigned int *)(v146 + 16 * v148 + 8);
          if (v151 != 0xFFFFFFFFLL)
          {
            v152 = *(_QWORD *)(*(_QWORD *)(v144 + 8) + 24 * v151 + 16);
            goto LABEL_167;
          }
        }
        else
        {
          v201 = 1;
          v150 = v140;
          while (v149 != -4096)
          {
            v202 = v148 + v201++;
            v148 = v202 & v147;
            v149 = *(_QWORD *)(v146 + 16 * v148);
            if (v149 == v143)
              goto LABEL_165;
          }
        }
        v153 = 0.0;
      }
      else
      {
        v152 = 0;
        v150 = v140;
LABEL_167:
        v153 = (float)v152;
      }
      v227 = v153;
      v154 = v22;
      v144 = *(_QWORD *)(*(_QWORD *)(v144 + 8) + 16);
    }
    else
    {
      v154 = v22;
      v227 = 0.0;
      v150 = v140;
    }
    v155 = (float)v144;
    v156 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
    v157 = v150 & 0xFFFFFFFFFFFFFFF8;
    v158 = (v150 >> 1) & 3;
    v159 = *(_QWORD *)(v156 + 344) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)((v150 & 0xFFFFFFFFFFFFFFF8) + 24) | v158) >= *(_DWORD *)(v159 + 24))
    {
      v158 = 0;
      v160 = *(_QWORD *)v159;
      v150 = v160 & 0xFFFFFFFFFFFFFFF9;
      v157 = v160 & 0xFFFFFFFFFFFFFFF8;
    }
    v161 = *(_QWORD *)(a1 + 200);
    v162 = 1.0 / v155;
    v163 = sub_1C499C548(v156, v150);
    v164 = *(_QWORD *)(v161 + 248);
    if (v164)
    {
      v165 = *(_DWORD *)(v164 + 176);
      if (v165)
      {
        v166 = *(_QWORD *)(v164 + 160);
        v167 = v165 - 1;
        v168 = (v165 - 1) & ((v163 >> 4) ^ (v163 >> 9));
        v169 = *(_QWORD *)(v166 + 16 * v168);
        if (v169 == v163)
        {
LABEL_174:
          v170 = *(unsigned int *)(v166 + 16 * v168 + 8);
          if (v170 != 0xFFFFFFFFLL)
          {
            v171 = *(_QWORD *)(*(_QWORD *)(v164 + 8) + 24 * v170 + 16);
            goto LABEL_176;
          }
        }
        else
        {
          v203 = 1;
          while (v169 != -4096)
          {
            v204 = v168 + v203++;
            v168 = v204 & v167;
            v169 = *(_QWORD *)(v166 + 16 * v168);
            if (v169 == v163)
              goto LABEL_174;
          }
        }
        v172 = 0.0;
      }
      else
      {
        v171 = 0;
LABEL_176:
        v172 = (float)v171;
      }
      v164 = *(_QWORD *)(*(_QWORD *)(v164 + 8) + 16);
    }
    else
    {
      v172 = 0.0;
    }
    v225 = v227 * v162;
    v228 = v172 * (float)(1.0 / (float)v164);
    v173 = (int)((*(_DWORD *)(v157 + 24) | v158)
               - (*(_DWORD *)((v142 & 0xFFFFFFFFFFFFFFF8) + 24) | (v142 >> 1) & 3));
    v22 = v154;
  }
  else
  {
    v173 = 0;
    v228 = 0.0;
    v225 = 0.0;
    v9 = a4;
    v10 = a3;
  }
  v8 = a6;
  v7 = a7;
LABEL_182:
  *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 0)
            + 8 * v9) = 1;
  if ((*(_BYTE *)(a1 + 216) & 1) == 0)
  {
    v174 = *v10;
    if (*v10 < 1.0)
      v174 = 1.0;
    *v10 = v174;
  }
  v175 = *(_DWORD *)(a2 + 8) == 0;
  *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 1)
            + 8 * v9) = v175;
  if ((*(_BYTE *)(a1 + 216) & 2) == 0)
  {
    v176 = 0.0;
    if (!*(_DWORD *)(a2 + 8))
      v176 = 1.0;
    if (v10[1] >= v176)
      v176 = v10[1];
    v10[1] = v176;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 2)
           + 4 * v9) = v7;
  if ((*(_BYTE *)(a1 + 216) & 4) == 0)
  {
    v177 = v10[2];
    if (v177 < v7)
      v177 = v7;
    v10[2] = v177;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 3)
           + 4 * v9) = (float)v221;
  if ((*(_BYTE *)(a1 + 216) & 8) == 0)
  {
    v178 = v10[3];
    if (v178 < (float)v221)
      v178 = (float)v221;
    v10[3] = v178;
  }
  *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 4)
            + 8 * v9) = a5;
  if ((*(_BYTE *)(a1 + 216) & 0x10) == 0)
  {
    v179 = (float)a5;
    if (v10[4] >= (float)a5)
      v179 = v10[4];
    v10[4] = v179;
  }
  *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 5)
            + 8 * v9) = v8;
  if ((*(_BYTE *)(a1 + 216) & 0x20) == 0)
  {
    v180 = (float)v8;
    if (v10[5] >= (float)v8)
      v180 = v10[5];
    v10[5] = v180;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 6)
           + 4 * v9) = (float)v223;
  if ((*(_BYTE *)(a1 + 216) & 0x40) == 0)
  {
    v181 = v10[6];
    if (v181 < (float)v223)
      v181 = (float)v223;
    v10[6] = v181;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 7)
           + 4 * v9) = (float)v13;
  if ((*(_BYTE *)(a1 + 216) & 0x80) == 0)
  {
    v182 = v10[7];
    if (v182 < (float)v13)
      v182 = (float)v13;
    v10[7] = v182;
  }
  v183 = v24;
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 8)
           + 4 * v9) = v183;
  if ((*(_BYTE *)(a1 + 217) & 1) == 0)
  {
    v184 = v10[8];
    if (v184 < v183)
      v184 = v24;
    v10[8] = v184;
  }
  v185 = v25;
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 9)
           + 4 * v9) = v185;
  if ((*(_BYTE *)(a1 + 217) & 2) == 0)
  {
    v186 = v10[9];
    if (v186 < v185)
      v186 = v25;
    v10[9] = v186;
  }
  v187 = v26;
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 10)
           + 4 * v9) = v187;
  if ((*(_BYTE *)(a1 + 217) & 4) == 0)
  {
    v188 = v10[10];
    if (v188 < v187)
      v188 = v26;
    v10[10] = v188;
  }
  v189 = v27;
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 11)
           + 4 * v9) = v189;
  if ((*(_BYTE *)(a1 + 217) & 8) == 0)
  {
    v190 = v10[11];
    if (v190 < v189)
      v190 = v27;
    v10[11] = v190;
  }
  v191 = v28;
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 12)
           + 4 * v9) = v191;
  if ((*(_BYTE *)(a1 + 217) & 0x10) == 0)
  {
    v192 = v10[12];
    if (v192 < v191)
      v192 = v28;
    v10[12] = v192;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 13)
           + 4 * v9) = v225;
  if ((*(_BYTE *)(a1 + 217) & 0x20) == 0)
  {
    v193 = v10[13];
    if (v193 < v225)
      v193 = v225;
    v10[13] = v193;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 14)
           + 4 * v9) = v228;
  if ((*(_BYTE *)(a1 + 217) & 0x40) == 0)
  {
    v194 = v10[14];
    if (v194 < v228)
      v194 = v228;
    v10[14] = v194;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 15)
           + 4 * v9) = v23;
  if ((*(_BYTE *)(a1 + 217) & 0x80) == 0)
  {
    v195 = v10[15];
    if (v195 < v23)
      v195 = v23;
    v10[15] = v195;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 16)
           + 4 * v9) = (float)v173;
  if ((*(_BYTE *)(a1 + 218) & 1) == 0)
  {
    v196 = v10[16];
    if (v196 < (float)v173)
      v196 = (float)v173;
    v10[16] = v196;
  }
  *(float *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 17)
           + 4 * v9) = v29;
  if ((*(_BYTE *)(a1 + 218) & 2) == 0)
  {
    v197 = v10[17];
    if (v197 < v29)
      v197 = v29;
    v10[17] = v197;
  }
  *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 18)
            + 8 * v9) = v16;
  if ((*(_BYTE *)(a1 + 218) & 4) == 0)
  {
    v198 = (float)v16;
    if (v10[18] >= (float)v16)
      v198 = v10[18];
    v10[18] = v198;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), 19);
  *(_QWORD *)(result + 8 * v9) = v22;
  if ((*(_BYTE *)(a1 + 218) & 8) == 0)
  {
    v200 = (float)v22;
    if (v10[19] >= (float)v22)
      v200 = v10[19];
    v10[19] = v200;
  }
  return result;
}

_DWORD *sub_1C51DA814(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  BOOL v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -1;
        result += 16;
        v11 -= 64;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & (37 * v13);
            v17 = (int *)(*a1 + (v16 << 6));
            v18 = *v17;
            if (v13 != *v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18 != -1)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -2;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = (int *)(*a1 + (v16 << 6));
                v18 = *v17;
                if (v13 == *v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *v17 = v13;
          v23 = *(_OWORD *)(v12 + 2);
          v24 = *(_OWORD *)(v12 + 6);
          v25 = *(_OWORD *)(v12 + 10);
          *((_QWORD *)v17 + 7) = *((_QWORD *)v12 + 7);
          *(_OWORD *)(v17 + 10) = v25;
          *(_OWORD *)(v17 + 6) = v24;
          *(_OWORD *)(v17 + 2) = v23;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 16;
      }
      while (v12 != &v4[16 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v26 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v26)
  {
    v27 = v26 << 6;
    do
    {
      *result = -1;
      result += 16;
      v27 -= 64;
    }
    while (v27);
  }
  return result;
}

uint64_t sub_1C51DA9B0()
{
  _OWORD *v0;

  v0 = operator new(0x10uLL);
  qword_1ED7FCF08 = (uint64_t)v0;
  *v0 = xmmword_1C85FB690;
  qword_1ED7FCF10 = (uint64_t)(v0 + 1);
  unk_1ED7FCF18 = v0 + 1;
  __cxa_atexit((void (*)(void *))sub_1C51D840C, &qword_1ED7FCF08, &dword_1C475E000);
  strcpy((char *)&qword_1ED7FCF20, "mask");
  byte_1ED7FCF37 = 4;
  byte_1ED7FCF4F = 7;
  strcpy((char *)&dword_1ED7FCF38, "is_free");
  strcpy(&byte_1ED7FCF67, "\tnr_broken_hints");
  strcpy((char *)&qword_1ED7FCF50, "nr_urgent");
  byte_1ED7FCF7F = 15;
  byte_1ED7FCF97 = 7;
  strcpy((char *)&dword_1ED7FCF80, "is_hint");
  byte_1ED7FCFAF = 8;
  strcpy((char *)&qword_1ED7FCF98, "is_local");
  byte_1ED7FCFC7 = 19;
  strcpy((char *)&xmmword_1ED7FCFB0, "nr_rematerializable");
  byte_1ED7FCFDF = 16;
  strcpy(byte_1ED7FCFC8, "nr_defs_and_uses");
  byte_1ED7FCFF7 = 20;
  strcpy((char *)&xmmword_1ED7FCFE0, "weighed_reads_by_max");
  byte_1ED7FD00F = 21;
  strcpy(byte_1ED7FCFF8, "weighed_writes_by_max");
  qword_1ED7FD010 = (uint64_t)operator new(0x20uLL);
  unk_1ED7FD018 = xmmword_1C64638E0;
  strcpy((char *)qword_1ED7FD010, "weighed_read_writes_by_max");
  strcpy((char *)&xmmword_1ED7FD028, "weighed_indvars_by_max");
  HIBYTE(word_1ED7FD03E) = 22;
  byte_1ED7FD057 = 19;
  strcpy((char *)&xmmword_1ED7FD040, "hint_weights_by_max");
  byte_1ED7FD06F = 20;
  strcpy((char *)&xmmword_1ED7FD058, "start_bb_freq_by_max");
  byte_1ED7FD087 = 18;
  strcpy((char *)&xmmword_1ED7FD070, "end_bb_freq_by_max");
  strcpy((char *)&xmmword_1ED7FD088, "hottest_bb_freq_by_max");
  HIBYTE(word_1ED7FD09E) = 22;
  byte_1ED7FD0B7 = 14;
  strcpy((char *)&qword_1ED7FD0A0, "liverange_size");
  byte_1ED7FD0CF = 15;
  strcpy((char *)&qword_1ED7FD0B8, "use_def_density");
  byte_1ED7FD0E7 = 9;
  strcpy((char *)&qword_1ED7FD0D0, "max_stage");
  byte_1ED7FD0FF = 9;
  strcpy((char *)&qword_1ED7FD0E8, "min_stage");
  byte_1ED7FD117 = 8;
  strcpy((char *)&qword_1ED7FD100, "progress");
  return __cxa_atexit((void (*)(void *))sub_1C51D843C, &qword_1ED7FCF20, &dword_1C475E000);
}

void llvm::ModuloSchedule::print(llvm::ModuloSchedule *this, llvm::raw_ostream *a2)
{
  llvm::MachineInstr **v2;
  llvm::MachineInstr **v3;
  uint64_t *v6;
  uint64_t *v7;
  llvm::MachineInstr *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  int v13;
  _WORD *v14;
  int v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  int v18;
  uint64_t v19;
  llvm::MachineInstr *v20;
  uint64_t v21;

  v2 = (llvm::MachineInstr **)*((_QWORD *)this + 1);
  v3 = (llvm::MachineInstr **)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v6 = (uint64_t *)((char *)this + 56);
    v7 = (uint64_t *)((char *)this + 32);
    do
    {
      v8 = *v2;
      v9 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 6uLL)
      {
        *(_DWORD *)((char *)v9 + 3) = 543516513;
        *v9 = 1635021659;
        *((_QWORD *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, "[stage ", 7uLL);
      }
      v20 = v8;
      v21 = 0;
      v10 = sub_1C61252B8(v6, &v20, &v21);
      v11 = -1;
      if (!v10
        || v21 == *((_QWORD *)this + 7) + 16 * *((unsigned int *)this + 18)
        || (v11 = *(int *)(v21 + 8), (v11 & 0x80000000) != 0))
      {
        v11 = -(uint64_t)v11;
        v12 = a2;
        v13 = 1;
      }
      else
      {
        v12 = a2;
        v13 = 0;
      }
      sub_1C5E21910(v12, v11, 0, 0, v13);
      v14 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 > 1uLL)
      {
        *v14 = 16416;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, " @", 2uLL);
      }
      v20 = v8;
      v21 = 0;
      v15 = sub_1C61252B8(v7, &v20, &v21);
      v16 = -1;
      if (!v15
        || v21 == *((_QWORD *)this + 4) + 16 * *((unsigned int *)this + 12)
        || (v16 = *(int *)(v21 + 8), (v16 & 0x80000000) != 0))
      {
        v16 = -(uint64_t)v16;
        v17 = a2;
        v18 = 1;
      }
      else
      {
        v17 = a2;
        v18 = 0;
      }
      sub_1C5E21910(v17, v16, 0, 0, v18);
      v19 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v19) > 2)
      {
        *(_BYTE *)(v19 + 2) = 32;
        *(_WORD *)v19 = 23907;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, "c] ", 3uLL);
      }
      llvm::MachineInstr::print(v8, a2, 1, 0, 0, 1, 0);
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t llvm::ModuloScheduleExpander::expand(llvm::ModuloScheduleExpander *this)
{
  uint64_t *TopBlock;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::MachineLoop **v7;
  uint64_t *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t **v20;
  llvm::MachineLoop **v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  unsigned int v26;
  int v27;
  int isLoopCarried;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  TopBlock = llvm::MachineLoop::getTopBlock(**(llvm::MachineLoop ***)this);
  *((_QWORD *)this + 6) = TopBlock;
  v3 = (uint64_t **)TopBlock[8];
  v4 = *v3;
  *((_QWORD *)this + 7) = *v3;
  if (v4 == TopBlock)
    *((_QWORD *)this + 7) = v3[1];
  v5 = *(_QWORD **)(*(_QWORD *)this + 8);
  v31 = *(_QWORD **)(*(_QWORD *)this + 16);
  if (v31 != v5)
  {
    do
    {
      v6 = *v5;
      v7 = *(llvm::MachineLoop ***)this;
      v8 = (uint64_t *)(*(_QWORD *)this + 56);
      v34 = *v5;
      v35 = 0;
      if (sub_1C61252B8(v8, &v34, &v35))
        v9 = v35 == (_QWORD)v7[7] + 16 * *((unsigned int *)v7 + 18);
      else
        v9 = 1;
      v32 = v5;
      if (v9)
        v10 = -1;
      else
        v10 = *(_DWORD *)(v35 + 8);
      v33 = v10;
      v11 = *(unsigned int *)(v6 + 40);
      if ((_DWORD)v11)
      {
        v12 = *(_DWORD **)(v6 + 32);
        v13 = &v12[8 * v11];
        do
        {
          if ((*v12 & 0x10000FF) == 0x1000000)
          {
            v14 = v12[1];
            v15 = *((_QWORD *)this + 3);
            if ((v14 & 0x80000000) != 0)
              v16 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
            else
              v16 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v14);
            v17 = *v16;
            if (*v16)
            {
              while ((*(_BYTE *)(v17 + 3) & 1) != 0)
              {
                v17 = *(_QWORD *)(v17 + 24);
                if (!v17)
                  goto LABEL_19;
              }
              v19 = 0;
              v18 = 0;
LABEL_24:
              v21 = *(llvm::MachineLoop ***)this;
              v22 = (uint64_t *)(*(_QWORD *)this + 56);
              v34 = *(_QWORD *)(v17 + 8);
              v35 = 0;
              if (sub_1C61252B8(v22, &v34, &v35))
                v23 = v35 == (_QWORD)v21[7] + 16 * *((unsigned int *)v21 + 18);
              else
                v23 = 1;
              if (v23)
                v24 = -1;
              else
                v24 = *(_DWORD *)(v35 + 8);
              if (v24 < v33 || v24 == -1)
                v26 = 0;
              else
                v26 = v24 - v33;
              v27 = **(unsigned __int16 **)(v6 + 16);
              if (v27 == 69 || v27 == 0)
              {
                isLoopCarried = llvm::ModuloScheduleExpander::isLoopCarried(this, (llvm::MachineInstr *)v6);
                v26 += isLoopCarried;
                if (!isLoopCarried)
                  v18 = 1;
              }
              if (v26 > v19)
                v19 = v26;
              while (1)
              {
                v17 = *(_QWORD *)(v17 + 24);
                if (!v17)
                  break;
                if ((*(_BYTE *)(v17 + 3) & 1) == 0)
                  goto LABEL_24;
              }
            }
            else
            {
LABEL_19:
              v18 = 0;
              v19 = 0;
            }
            LODWORD(v35) = v14;
            v20 = sub_1C51E3D00((uint64_t **)this + 10, v14, &v35);
            *((_DWORD *)v20 + 8) = v19;
            *((_BYTE *)v20 + 36) = v18;
          }
          v12 += 8;
        }
        while (v12 != v13);
      }
      v5 = v32 + 1;
    }
    while (v32 + 1 != v31);
  }
  return llvm::ModuloScheduleExpander::generatePipelinedLoop(this);
}

BOOL llvm::ModuloScheduleExpander::isLoopCarried(llvm::ModuloScheduleExpander *this, llvm::MachineInstr *a2)
{
  int v2;
  _BOOL8 result;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  llvm::MachineInstr *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  llvm::MachineInstr *v33;
  uint64_t v34;

  v2 = **((unsigned __int16 **)a2 + 2);
  if (v2 != 69 && v2 != 0)
    return 0;
  v7 = *(_QWORD *)this;
  v8 = (uint64_t *)(*(_QWORD *)this + 32);
  v33 = a2;
  v34 = 0;
  if (sub_1C61252B8(v8, &v33, &v34))
    v9 = v34 == *(_QWORD *)(v7 + 32) + 16 * *(unsigned int *)(v7 + 48);
  else
    v9 = 1;
  if (v9)
    v10 = -1;
  else
    v10 = *(_DWORD *)(v34 + 8);
  v11 = *(_QWORD *)this;
  v12 = (uint64_t *)(*(_QWORD *)this + 56);
  v33 = a2;
  v34 = 0;
  v13 = sub_1C61252B8(v12, &v33, &v34);
  v14 = -1;
  if (v13 && v34 != *(_QWORD *)(v11 + 56) + 16 * *(unsigned int *)(v11 + 72))
    v14 = *(_DWORD *)(v34 + 8);
  v15 = *((_DWORD *)a2 + 10);
  v16 = 0;
  v17 = v15 - 1;
  if (v15 == 1)
  {
    v18 = *((_QWORD *)this + 3);
LABEL_18:
    v19 = (uint64_t *)(*(_QWORD *)(v18 + 272) + 8 * v16);
    goto LABEL_25;
  }
  v20 = 0;
  v21 = *((_QWORD *)a2 + 4);
  v22 = (unsigned int *)(v21 + 36);
  do
  {
    if (*(_QWORD *)(v21 + 32 * (v16 + 2) + 16) == *((_QWORD *)a2 + 3))
      v20 = *v22;
    LODWORD(v16) = v16 + 2;
    v22 += 16;
  }
  while (v17 != (_DWORD)v16);
  v18 = *((_QWORD *)this + 3);
  v16 = v20;
  if ((v20 & 0x80000000) == 0)
    goto LABEL_18;
  v19 = (uint64_t *)(*(_QWORD *)(v18 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
LABEL_25:
  v23 = *v19;
  if (!v23)
    return 1;
  v24 = v14;
  if ((*(_BYTE *)(v23 + 3) & 1) == 0)
  {
    v23 = *(_QWORD *)(v23 + 24);
    if (!v23 || (*(_BYTE *)(v23 + 3) & 1) == 0)
      return 1;
  }
  v25 = *(llvm::MachineInstr **)(v23 + 8);
  if (!v25)
    return 1;
  result = 1;
  if (**((_WORD **)v25 + 2) && **((_WORD **)v25 + 2) != 69)
  {
    v26 = *(_QWORD *)this;
    v27 = (uint64_t *)(*(_QWORD *)this + 32);
    v33 = *(llvm::MachineInstr **)(v23 + 8);
    v34 = 0;
    v28 = -1;
    if (sub_1C61252B8(v27, &v33, &v34)
      && v34 != *(_QWORD *)(v26 + 32) + 16 * *(unsigned int *)(v26 + 48))
    {
      v28 = *(_DWORD *)(v34 + 8);
    }
    v29 = *(_QWORD *)this;
    v33 = v25;
    v34 = 0;
    v30 = sub_1C61252B8((uint64_t *)(v29 + 56), &v33, &v34);
    v31 = -1;
    if (v30 && v34 != *(_QWORD *)(v29 + 56) + 16 * *(unsigned int *)(v29 + 72))
      v31 = *(_DWORD *)(v34 + 8);
    return v28 > v10 || v31 <= v24;
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::generatePipelinedLoop(llvm::ModuloScheduleExpander *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  llvm::MachineInstr **v20;
  llvm::MachineInstr **i;
  llvm::MachineBasicBlock *v22;
  unint64_t FirstTerminator;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::MachineInstr *v29;
  _QWORD *v30;
  uint64_t *v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  llvm::MachineFunction *v48;
  llvm::MachineInstr *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  int v64;
  llvm::MachineInstr *v65;
  void *v66[2];
  _BYTE v67[32];
  void *v68;
  uint64_t v69;
  _QWORD v70[6];

  v70[4] = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 280))(&v68, *((_QWORD *)this + 4), *((_QWORD *)this + 6));
  v2 = v68;
  v68 = 0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v68;
    v68 = 0;
    if (v4)
      (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(llvm::BasicBlock **)(*((_QWORD *)this + 6) + 16);
  v7 = *(_QWORD *)(v5 + 312);
  if (v7)
    *(_QWORD *)(v5 + 312) = *(_QWORD *)v7;
  else
    v7 = sub_1C484358C(v5 + 128, 232, 3);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  *(_DWORD *)(v7 + 24) = -1;
  v8 = (unint64_t *)(v7 + 48);
  *(_QWORD *)(v7 + 48) = (v7 + 48) | 4;
  *(_QWORD *)(v7 + 56) = v7 + 48;
  *(_BYTE *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 121) = 0u;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_BYTE *)(v7 + 176) = 0;
  *(_DWORD *)(v7 + 187) = 0;
  *(_QWORD *)(v7 + 180) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 199) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v7;
  if (v6)
  {
    *(_QWORD *)(v7 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v6);
    *(_QWORD *)(v7 + 144) = v9;
  }
  v10 = *(_DWORD *)(*(_QWORD *)this + 80);
  v11 = (v10 - 1);
  v12 = (2 * v10);
  v13 = (_QWORD *)operator new[]();
  v14 = v13;
  *v13 = 24;
  v13[1] = v12;
  v15 = (uint64_t)(v13 + 2);
  if ((_DWORD)v12)
  {
    v16 = 24 * v12;
    v17 = v13 + 2;
    do
    {
      *v17 = 0;
      v17[1] = 0;
      *((_DWORD *)v17 + 4) = 0;
      v17 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v68 = v70;
  v69 = 0x400000000;
  llvm::ModuloScheduleExpander::generateProlog((uint64_t)this, v11, (llvm::MachineBasicBlock *)v7, v15, (uint64_t)&v68);
  v18 = (unint64_t *)*((_QWORD *)this + 6);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*((_QWORD *)this + 1) + 320, v7);
  v19 = *v18;
  *(_QWORD *)v7 = *v18;
  *(_QWORD *)(v7 + 8) = v18;
  *(_QWORD *)(v19 + 8) = v7;
  *v18 = v7;
  v20 = *(llvm::MachineInstr ***)(*(_QWORD *)this + 8);
  for (i = *(llvm::MachineInstr ***)(*(_QWORD *)this + 16); v20 != i; ++v20)
  {
    v29 = *v20;
    if (**((_WORD **)*v20 + 2) && **((_WORD **)*v20 + 2) != 69)
    {
      v30 = *(_QWORD **)this;
      v31 = (uint64_t *)(*(_QWORD *)this + 56);
      v65 = *v20;
      v66[0] = 0;
      if (sub_1C61252B8(v31, &v65, v66))
        v32 = v66[0] == (void *)(v30[7] + 16 * *((unsigned int *)v30 + 18));
      else
        v32 = 1;
      if (v32)
        v33 = -1;
      else
        v33 = *((_DWORD *)v66[0] + 2);
      v66[0] = 0;
      v66[0] = llvm::ModuloScheduleExpander::cloneInstr((llvm::MachineFunction **)this, v29, v11, v33);
      llvm::ModuloScheduleExpander::updateInstruction((uint64_t)this, (uint64_t)v66[0], 0, v11, v33, v15);
      v34 = (unint64_t)v66[0];
      v35 = *(_QWORD *)(v7 + 40);
      *((_QWORD *)v66[0] + 3) = v35;
      v36 = *(_QWORD *)(v35 + 32);
      v37 = *(unsigned int *)(v34 + 40);
      if ((_DWORD)v37)
      {
        v40 = *(_QWORD *)(v34 + 32);
        v41 = *(_QWORD *)(v36 + 40);
        v42 = 32 * v37;
        do
        {
          if (!*(_BYTE *)v40)
          {
            v43 = *(unsigned int *)(v40 + 4);
            if ((int)v43 >= 0)
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 272) + 8 * v43);
            else
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
            v45 = *v44;
            if (*v44)
            {
              v46 = *(_QWORD *)(v45 + 16);
              *(_QWORD *)(v45 + 16) = v40;
              *(_QWORD *)(v40 + 16) = v46;
              if ((*(_BYTE *)(v40 + 3) & 1) != 0)
              {
                *(_QWORD *)(v40 + 24) = v45;
              }
              else
              {
                *(_QWORD *)(v40 + 24) = 0;
                v44 = (uint64_t *)(v46 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v40 + 16) = v40;
              *(_QWORD *)(v40 + 24) = 0;
            }
            *v44 = v40;
          }
          v40 += 32;
          v42 -= 32;
        }
        while (v42);
      }
      v38 = *(_QWORD *)(v36 + 728);
      if (v38)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
      v39 = *v8 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
      *(_QWORD *)(v34 + 8) = v8;
      *(_QWORD *)(v39 + 8) = v34;
      *v8 = *v8 & 7 | v34;
      sub_1C61B6040(v63, v66)[1] = v29;
    }
  }
  v22 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 6);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v22);
  v24 = (char *)v22 + 48;
  if ((llvm::MachineBasicBlock *)((char *)v22 + 48) != (llvm::MachineBasicBlock *)FirstTerminator)
  {
    v47 = FirstTerminator;
    do
    {
      v66[0] = 0;
      v48 = (llvm::MachineFunction *)*((_QWORD *)this + 1);
      v49 = (llvm::MachineInstr *)*((_QWORD *)v48 + 28);
      if (v49)
        *((_QWORD *)v48 + 28) = *(_QWORD *)v49;
      else
        v49 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v48 + 128, 72, 3);
      llvm::MachineInstr::MachineInstr(v49, v48, (const llvm::MachineInstr *)v47);
      v66[0] = v49;
      llvm::ModuloScheduleExpander::updateInstruction((uint64_t)this, (uint64_t)v49, 0, v11, 0, v15);
      v50 = (unint64_t)v66[0];
      v51 = *(_QWORD *)(v7 + 40);
      *((_QWORD *)v66[0] + 3) = v51;
      v52 = *(_QWORD *)(v51 + 32);
      v53 = *(unsigned int *)(v50 + 40);
      if ((_DWORD)v53)
      {
        v56 = *(_QWORD *)(v50 + 32);
        v57 = *(_QWORD *)(v52 + 40);
        v58 = 32 * v53;
        do
        {
          if (!*(_BYTE *)v56)
          {
            v59 = *(unsigned int *)(v56 + 4);
            if ((int)v59 >= 0)
              v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
            else
              v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
            v61 = *v60;
            if (*v60)
            {
              v62 = *(_QWORD *)(v61 + 16);
              *(_QWORD *)(v61 + 16) = v56;
              *(_QWORD *)(v56 + 16) = v62;
              if ((*(_BYTE *)(v56 + 3) & 1) != 0)
              {
                *(_QWORD *)(v56 + 24) = v61;
              }
              else
              {
                *(_QWORD *)(v56 + 24) = 0;
                v60 = (uint64_t *)(v62 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v56 + 16) = v56;
              *(_QWORD *)(v56 + 24) = 0;
            }
            *v60 = v56;
          }
          v56 += 32;
          v58 -= 32;
        }
        while (v58);
      }
      v54 = *(_QWORD *)(v52 + 728);
      if (v54)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v50);
      v55 = *v8 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v50 = v55 | *(_QWORD *)v50 & 7;
      *(_QWORD *)(v50 + 8) = v8;
      *(_QWORD *)(v55 + 8) = v50;
      *v8 = *v8 & 7 | v50;
      sub_1C61B6040(v63, v66)[1] = v47;
      if ((*(_BYTE *)v47 & 4) == 0)
      {
        while ((*(_WORD *)(v47 + 44) & 8) != 0)
          v47 = *(_QWORD *)(v47 + 8);
      }
      v47 = *(_QWORD *)(v47 + 8);
    }
    while ((char *)v47 != v24);
  }
  *((_QWORD *)this + 8) = v7;
  llvm::MachineBasicBlock::transferSuccessors((char *)v7, *((llvm::MachineBasicBlock **)this + 6));
  llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v7, *((llvm::MachineBasicBlock **)this + 6), (llvm::MachineBasicBlock *)v7);
  llvm::ModuloScheduleExpander::generateExistingPhis((uint64_t)this, (_QWORD *)v7, *((_QWORD *)v68 + v69 - 1), v7, v7, v15, v63, v11, v11, 0);
  llvm::ModuloScheduleExpander::generatePhis((uint64_t)this, (_QWORD *)v7, *((_QWORD *)v68 + v69 - 1), v7, v7, v15, v63, v11, v11, 0);
  v66[0] = v67;
  v66[1] = (void *)0x400000000;
  llvm::ModuloScheduleExpander::generateEpilog((uint64_t)this, v11, (llvm::MachineBasicBlock *)v7, v15, (uint64_t)v66, &v68);
  llvm::ModuloScheduleExpander::splitLifetimes(this, v7, (uint64_t *)v66);
  llvm::ModuloScheduleExpander::removeDeadInstructions((uint64_t)this, v7, (uint64_t *)v66);
  llvm::ModuloScheduleExpander::addBranches((uint64_t)this, v25, (uint64_t)&v68, (uint64_t *)v7, v66, v15);
  v26 = v14[1];
  if (v26)
  {
    v27 = 3 * v26;
    do
    {
      MEMORY[0x1CAA32FB4](v14[v27 - 1], 4);
      v27 -= 3;
    }
    while (v27 * 8);
  }
  MEMORY[0x1CAA32F9C](v14, 0x1020C805AF6BDC9);
  if (v66[0] != v67)
    free(v66[0]);
  if (v68 != v70)
    free(v68);
  return MEMORY[0x1CAA32FB4](v63[0], 8);
}

uint64_t llvm::ModuloScheduleExpander::generateProlog(uint64_t a1, int a2, llvm::MachineBasicBlock *a3, uint64_t a4, uint64_t a5)
{
  llvm::MachineBasicBlock *v7;
  unsigned int v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  llvm::MachineBasicBlock *v19;
  uint64_t v20;
  unint64_t FirstTerminator;
  uint64_t v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  void *v47[2];
  uint64_t v48[2];
  int v49;
  unsigned __int8 *v50;

  v7 = *(llvm::MachineBasicBlock **)(a1 + 56);
  v48[0] = 0;
  v48[1] = 0;
  v49 = 0;
  if (a2)
  {
    v9 = 0;
    v44 = a5 + 16;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(llvm::BasicBlock **)(*(_QWORD *)(a1 + 48) + 16);
      v12 = *(_QWORD *)(v10 + 312);
      if (v12)
        *(_QWORD *)(v10 + 312) = *(_QWORD *)v12;
      else
        v12 = sub_1C484358C(v10 + 128, 232, 3);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = v11;
      *(_DWORD *)(v12 + 24) = -1;
      v13 = (unint64_t *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = (v12 + 48) | 4;
      *(_QWORD *)(v12 + 56) = v12 + 48;
      *(_BYTE *)(v12 + 144) = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 121) = 0u;
      *(_QWORD *)(v12 + 160) = 0;
      *(_QWORD *)(v12 + 168) = 0;
      *(_QWORD *)(v12 + 152) = 0;
      *(_BYTE *)(v12 + 176) = 0;
      *(_DWORD *)(v12 + 187) = 0;
      *(_QWORD *)(v12 + 180) = 0;
      *(_QWORD *)(v12 + 192) = 0;
      *(_DWORD *)(v12 + 199) = 0;
      *(_QWORD *)(v12 + 216) = 0;
      *(_QWORD *)(v12 + 224) = 0;
      *(_QWORD *)(v12 + 208) = 0;
      *(_QWORD *)(v12 + 32) = v10;
      *(_QWORD *)(v12 + 40) = v12;
      if (v11)
      {
        *(_QWORD *)(v12 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v11);
        *(_QWORD *)(v12 + 144) = v14;
      }
      v15 = *(unsigned int *)(a5 + 8);
      if (v15 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v44, v15 + 1, 8);
        v15 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v15) = v12;
      ++*(_DWORD *)(a5 + 8);
      v16 = *(unint64_t **)(a1 + 48);
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(a1 + 8) + 320, v12);
      v17 = *v16;
      *(_QWORD *)v12 = *v16;
      *(_QWORD *)(v12 + 8) = v16;
      *(_QWORD *)(v17 + 8) = v12;
      *v16 = v12;
      llvm::MachineBasicBlock::transferSuccessors((char *)v12, v7);
      llvm::MachineBasicBlock::addSuccessor(v7, (_QWORD *)v12, -1);
      v18 = v9;
      if ((v9 & 0x80000000) == 0)
        break;
LABEL_46:
      llvm::ModuloScheduleExpander::rewritePhiValues(a1, v12, v9++, a4, (uint64_t)v48);
      v7 = (llvm::MachineBasicBlock *)v12;
      if (v9 == a2)
        goto LABEL_50;
    }
    while (1)
    {
      v19 = *(llvm::MachineBasicBlock **)(a1 + 48);
      v20 = *((_QWORD *)v19 + 7);
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v19);
      if (v20 != FirstTerminator)
        break;
LABEL_44:
      if (v18-- <= 0)
        goto LABEL_46;
    }
    while (1)
    {
      v22 = *(_QWORD *)a1;
      v23 = (uint64_t *)(*(_QWORD *)a1 + 56);
      v50 = (unsigned __int8 *)v20;
      v47[0] = 0;
      if (sub_1C61252B8(v23, &v50, v47))
        v24 = v47[0] == (void *)(*(_QWORD *)(v22 + 56) + 16 * *(unsigned int *)(v22 + 72));
      else
        v24 = 1;
      if (v24)
        v25 = -1;
      else
        v25 = *((_DWORD *)v47[0] + 2);
      if (v25 == v18)
      {
        if (**(_WORD **)(v20 + 16) && **(_WORD **)(v20 + 16) != 69)
        {
          v47[0] = 0;
          v47[0] = llvm::ModuloScheduleExpander::cloneAndChangeInstr((llvm::ModuloScheduleExpander *)a1, (llvm::MachineInstr *)v20, v9, v18);
          llvm::ModuloScheduleExpander::updateInstruction(a1, (uint64_t)v47[0], 0, v9, v18, a4);
          v26 = (unint64_t)v47[0];
          v27 = *(_QWORD *)(v12 + 40);
          *((_QWORD *)v47[0] + 3) = v27;
          v28 = *(_QWORD *)(v27 + 32);
          v29 = *(unsigned int *)(v26 + 40);
          if ((_DWORD)v29)
          {
            v32 = *(_QWORD *)(v26 + 32);
            v33 = *(_QWORD *)(v28 + 40);
            v34 = 32 * v29;
            do
            {
              if (!*(_BYTE *)v32)
              {
                v35 = *(unsigned int *)(v32 + 4);
                if ((int)v35 >= 0)
                  v36 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
                else
                  v36 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                v37 = *v36;
                if (*v36)
                {
                  v38 = *(_QWORD *)(v37 + 16);
                  *(_QWORD *)(v37 + 16) = v32;
                  *(_QWORD *)(v32 + 16) = v38;
                  if ((*(_BYTE *)(v32 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v32 + 24) = v37;
                  }
                  else
                  {
                    *(_QWORD *)(v32 + 24) = 0;
                    v36 = (uint64_t *)(v38 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v32 + 16) = v32;
                  *(_QWORD *)(v32 + 24) = 0;
                }
                *v36 = v32;
              }
              v32 += 32;
              v34 -= 32;
            }
            while (v34);
          }
          v30 = *(_QWORD *)(v28 + 728);
          if (v30)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
          v31 = *v13 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
          *(_QWORD *)(v26 + 8) = v13;
          *(_QWORD *)(v31 + 8) = v26;
          *v13 = *v13 & 7 | v26;
          sub_1C61B6040(v48, v47)[1] = v20;
        }
      }
      else if (!v20)
      {
        goto LABEL_28;
      }
      if ((*(_BYTE *)v20 & 4) == 0)
      {
LABEL_28:
        while ((*(_WORD *)(v20 + 44) & 8) != 0)
          v20 = *(_QWORD *)(v20 + 8);
      }
      v20 = *(_QWORD *)(v20 + 8);
      if (v20 == FirstTerminator)
        goto LABEL_44;
    }
  }
  v12 = (unint64_t)v7;
LABEL_50:
  llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v12, *(llvm::MachineBasicBlock **)(a1 + 48), a3);
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), 0))
  {
    v47[0] = v48;
    v47[1] = 0;
    v40 = *(_QWORD *)(a1 + 32);
    v41 = *(_QWORD *)(a1 + 56);
    v42 = **(_QWORD **)a5;
    v50 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v40 + 272))(v40, v41, v42, 0, v48, 0, &v50, 0);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
    if (v47[0] != v48)
      free(v47[0]);
  }
  return MEMORY[0x1CAA32FB4](v48[0], 8);
}

uint64_t llvm::ModuloScheduleExpander::updateInstruction(uint64_t result, uint64_t a2, int a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int IncompleteVirtualRegister;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v34;
  uint64_t v35;

  v6 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v6)
  {
    v8 = (_QWORD *)result;
    v9 = *(_DWORD **)(a2 + 32);
    v10 = &v9[8 * v6];
    do
    {
      if (!*v9)
      {
        v11 = v9[1];
        if ((v11 & 0x80000000) != 0)
        {
          v12 = v8[3];
          v13 = v11 & 0x7FFFFFFF;
          if ((*v9 & 0x1000000) == 0)
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16 * v13 + 8);
            if (!v17)
            {
LABEL_13:
              v18 = *v8;
              v19 = (uint64_t *)(*v8 + 56);
              v34 = v17;
              v35 = 0;
              v20 = sub_1C61252B8(v19, &v34, &v35);
              v21 = -1;
              if (v20 && v35 != *(_QWORD *)(v18 + 56) + 16 * *(unsigned int *)(v18 + 72))
                v21 = *(_DWORD *)(v35 + 8);
              if (v21 >= a5 || v21 == -1)
                v23 = 0;
              else
                v23 = v21 - a5;
              result = a6 + 24 * (v23 + a4);
              v24 = *(_DWORD *)(result + 16);
              if (v24)
              {
                v25 = v24 - 1;
                v26 = v25 & (37 * v11);
                v27 = *(_DWORD *)(*(_QWORD *)result + 8 * v26);
                if ((_DWORD)v11 == v27)
                {
LABEL_24:
                  LODWORD(v35) = v11;
                  v28 = sub_1C48C3740(result, &v35);
                  result = llvm::MachineOperand::setReg((uint64_t)v9, v28[1]);
                }
                else
                {
                  v29 = 1;
                  while (v27 != -1)
                  {
                    v30 = v26 + v29++;
                    v26 = v30 & v25;
                    v27 = *(_DWORD *)(*(_QWORD *)result + 8 * v26);
                    if ((_DWORD)v11 == v27)
                      goto LABEL_24;
                  }
                }
              }
              goto LABEL_10;
            }
            if ((*(_BYTE *)(v17 + 3) & 1) == 0)
            {
              v17 = *(_QWORD *)(v17 + 24);
              if (!v17)
                goto LABEL_13;
              if ((*(_BYTE *)(v17 + 3) & 1) == 0)
              {
                v17 = 0;
                goto LABEL_13;
              }
            }
            v17 = *(_QWORD *)(v17 + 8);
            goto LABEL_13;
          }
          v14 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16 * v13) & 0xFFFFFFFFFFFFFFF8;
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v8[3], "", 0);
          *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v14;
          v16 = *(_QWORD *)(v12 + 8);
          if (v16)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 24))(v16, IncompleteVirtualRegister);
          llvm::MachineOperand::setReg((uint64_t)v9, IncompleteVirtualRegister);
          LODWORD(v35) = v11;
          result = (uint64_t)sub_1C48C3740(a6 + 24 * a4, &v35);
          *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
          if (a3)
            result = sub_1C51DF440(v11, IncompleteVirtualRegister, v8[6], *(_QWORD *)(v8[3] + 24), *(_QWORD *)(v8[3] + 272), v8[5]);
        }
      }
LABEL_10:
      v9 += 8;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::generateExistingPhis(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int a8, unsigned int a9, char a10)
{
  signed int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  llvm::ModuloScheduleExpander *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  _DWORD *v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  int v56;
  _BOOL4 v59;
  unint64_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  int v64;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned __int16 **v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  _DWORD *v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t *v105;
  BOOL v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  unsigned int v119;
  BOOL v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  _DWORD *v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  char v143;
  int v144;
  uint64_t **v145;
  int v146;
  int v147;
  unsigned int v148;
  int v149;
  _BOOL4 isLoopCarried;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int IncompleteVirtualRegister;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  unint64_t *v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  int v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  uint64_t v179;
  llvm::MachineFunction *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  _DWORD *v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  int v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  BOOL v221;
  llvm::MachineInstr *v222;
  int v223;
  unsigned int v224;
  int v225;
  _DWORD *v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  int v234;
  uint64_t v236;
  unsigned int v237;
  _DWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned int v241;
  _QWORD *v242;
  _QWORD *v243;
  unsigned int v244;
  _DWORD *v245;
  _DWORD *v246;
  unsigned int v247;
  int v248;
  int v249;
  uint64_t **v250;
  unsigned int v251;
  _BOOL4 v252;
  int v253;
  int v254;
  uint64_t v255;
  unsigned int v256;
  llvm::ModuloScheduleExpander *v257;
  unint64_t *v259;
  int v262;
  unint64_t v263;
  unsigned int v264;
  llvm::MachineInstr *v266;
  uint64_t v268;
  unsigned __int8 *v270;
  unsigned int v271;
  unsigned int v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;

  v10 = a9;
  if (a8 == a9)
    v11 = -1;
  else
    v11 = a8 - a9;
  v12 = *(_QWORD *)(result + 48);
  v13 = *(_QWORD *)(v12 + 56);
  if (v13 != v12 + 48)
  {
    v14 = a8;
    v15 = (llvm::ModuloScheduleExpander *)result;
    v264 = a9 - (a8 != a9);
    v16 = v11 + a8;
    v17 = *(_QWORD *)(v12 + 56);
    while (!**(_WORD **)(v17 + 16) || **(_WORD **)(v17 + 16) == 69)
    {
      v17 = *(_QWORD *)(v17 + 8);
      if (v17 == v12 + 48)
      {
        v17 = v12 + 48;
        break;
      }
    }
    if (v13 != v17)
    {
      v18 = (_QWORD *)(a6 + 24 * a8);
      v238 = v18 + 2;
      v250 = (uint64_t **)(result + 80);
      v236 = a6 + 24 * v264;
      v19 = (_QWORD *)(a6 + 24 * a9);
      v246 = v19 + 2;
      v237 = v16 + 2;
      v251 = v16 + 1;
      v259 = a2 + 6;
      v263 = v16;
      v239 = v18;
      v240 = v17;
      v257 = (llvm::ModuloScheduleExpander *)result;
      v243 = v19;
      while (1)
      {
        v20 = 0;
        v21 = 0;
        v22 = *(_QWORD *)(v13 + 32);
        v268 = *(unsigned int *)(v22 + 4);
        v23 = *((_QWORD *)v15 + 6);
        v272 = 0;
        v24 = *(_DWORD *)(v13 + 40) - 1;
        if (*(_DWORD *)(v13 + 40) != 1)
        {
          v25 = 0;
          v20 = 0;
          v21 = 0;
          v26 = (unsigned int *)(v22 + 36);
          do
          {
            v28 = *v26;
            v26 += 16;
            v27 = v28;
            if (*(_QWORD *)(v22 + 32 * (v25 + 2) + 16) == v23)
            {
              v272 = v27;
              v20 = v27;
            }
            else
            {
              v21 = v27;
            }
            v25 += 2;
          }
          while (v24 != v25);
        }
        v271 = 0;
        if (*v238)
        {
          v29 = *v238 - 1;
          v30 = v29 & (37 * v20);
          v31 = *(_DWORD *)(*v18 + 8 * v30);
          if (v20 == v31)
          {
LABEL_20:
            v20 = sub_1C476BFEC((uint64_t)v18, &v272)[1];
          }
          else
          {
            v228 = 1;
            while (v31 != -1)
            {
              v229 = v30 + v228++;
              v30 = v229 & v29;
              v31 = *(_DWORD *)(*v18 + 8 * (v229 & v29));
              if (v20 == v31)
                goto LABEL_20;
            }
          }
        }
        v32 = *(_QWORD *)v15;
        v33 = (uint64_t *)(*(_QWORD *)v15 + 56);
        v273 = (unsigned __int8 *)v13;
        v274 = 0;
        v34 = !sub_1C61252B8(v33, &v273, &v274)
           || v274 == (unsigned __int8 *)(*(_QWORD *)(v32 + 56) + 16 * *(unsigned int *)(v32 + 72));
        v35 = v34 ? -1 : *((_DWORD *)v274 + 2);
        v262 = v35;
        v36 = *(_QWORD *)v15;
        v37 = *((_QWORD *)v15 + 3);
        v38 = (uint64_t *)((v272 & 0x80000000) != 0
                        ? *(_QWORD *)(v37 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v37 + 272) + 8 * v272);
        v39 = *v38;
        if (v39)
          break;
LABEL_31:
        v273 = (unsigned __int8 *)v39;
        v274 = 0;
        v254 = -1;
        if (sub_1C61252B8((uint64_t *)(v36 + 56), &v273, &v274))
        {
          v40 = (unsigned __int8 *)(*(_QWORD *)(v36 + 56) + 16 * *(unsigned int *)(v36 + 72));
          v41 = (uint64_t)a2;
          if (v274 != v40)
            v254 = *((_DWORD *)v274 + 2);
        }
        else
        {
          v41 = (uint64_t)a2;
        }
        LODWORD(v274) = v268;
        result = (uint64_t)sub_1C51E3D00(v250, v268, &v274);
        v42 = *(_DWORD *)(result + 32);
        if ((*(_BYTE *)(result + 36) & 1) != 0 && v42 == 0 && *(_DWORD *)(*(_QWORD *)v15 + 80) <= v10)
          v42 = 1;
        v244 = v42;
        if (!v42)
        {
          v45 = sub_1C476BFEC(v236, &v272);
          result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v15, v41, (uint64_t)a7, v10, 0, (llvm::MachineInstr *)v13, v268, v21, v45[1]);
          if (*v246)
          {
            v46 = *v246 - 1;
            v47 = (37 * v272) & v46;
            v48 = *(_DWORD *)(*v19 + 8 * v47);
            if (v272 == v48)
            {
LABEL_47:
              v49 = sub_1C476BFEC((uint64_t)v19, &v272)[1];
              LODWORD(v274) = v268;
              result = (uint64_t)sub_1C48C3740((uint64_t)v19, &v274);
              *(_DWORD *)(result + 4) = v49;
            }
            else
            {
              v232 = 1;
              while (v48 != -1)
              {
                v233 = v47 + v232++;
                v47 = v233 & v46;
                v48 = *(_DWORD *)(*v19 + 8 * v47);
                if (v272 == v48)
                  goto LABEL_47;
              }
            }
          }
        }
        v266 = (llvm::MachineInstr *)v13;
        v50 = v237 - v254;
        if ((int)(v237 - v254) <= 1)
          v50 = 1;
        if ((int)v16 > v254 || v14 == v10)
          v52 = v237;
        else
          v52 = v50;
        if (v52 >= v244)
          v53 = v244;
        else
          v53 = v52;
        v54 = v254 != -1;
        v55 = v262;
        if (v254 == -1)
          v56 = v262;
        else
          v56 = v254;
        v59 = v262 >= v254 && v56 == 0 && (_DWORD)v53 == 1;
        if (v14 == v10)
          v59 = 0;
        else
          v54 = 0;
        v241 = v52;
        if ((_DWORD)v53)
        {
          v60 = 0;
          v61 = 0;
          v62 = v262 > v254;
          if (v54 && v62)
            v63 = v262 - v254;
          else
            v63 = v59;
          v249 = v16 - v63;
          if (v254 != -1 && v62)
            v64 = v262 - v254;
          else
            v64 = 0;
          v255 = (v53 - 1);
          v253 = v63 + v56;
          v247 = v264 - v64;
          v242 = (_QWORD *)(a6 + 24 * (v264 - v64));
          v245 = v242 + 2;
          v256 = 37 * v268;
          v66 = v14 == v10 && v63 > 0;
          v252 = v66;
          v248 = v10 - v63;
          while (1)
          {
            if (v60 > v263 || v55 >= v14 || v263 < v253 + (int)v60)
            {
              v271 = v21;
              v67 = v21;
              goto LABEL_92;
            }
            v87 = v61 + v249;
            v88 = a6 + 24 * (v61 + v249);
            v89 = *(_DWORD *)(v88 + 16);
            v67 = v272;
            if (v89)
            {
              v90 = v89 - 1;
              v91 = (37 * v272) & v90;
              v92 = *(_DWORD *)(*(_QWORD *)v88 + 8 * v91);
              if (v272 == v92)
              {
LABEL_118:
                v93 = v61;
                v94 = sub_1C476BFEC(v88, &v272);
                v61 = v93;
                v67 = v94[1];
                v271 = v67;
                goto LABEL_92;
              }
              v95 = 1;
              while (v92 != -1)
              {
                v96 = v91 + v95++;
                v91 = v96 & v90;
                v92 = *(_DWORD *)(*(_QWORD *)v88 + 8 * v91);
                if (v272 == v92)
                  goto LABEL_118;
              }
            }
            v271 = v272;
            v97 = *((_QWORD *)v15 + 3);
            if ((v272 & 0x80000000) != 0)
              v98 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8);
            else
              v98 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v272);
            v99 = *v98;
            if (v99)
            {
              v234 = v61;
              if ((*(_BYTE *)(v99 + 3) & 1) != 0
                || (v99 = *(_QWORD *)(v99 + 24)) != 0 && (*(_BYTE *)(v99 + 3) & 1) != 0)
              {
                v100 = *(_QWORD *)(v99 + 8);
                v14 = a8;
                v15 = v257;
                v55 = v262;
                if (v100)
                {
                  v101 = 1;
                  while (1)
                  {
                    v102 = **(unsigned __int16 **)(v100 + 16);
                    v103 = v102 == 69 || v102 == 0;
                    if (!v103 || *(_QWORD *)(v100 + 24) != *((_QWORD *)v257 + 6))
                    {
LABEL_331:
                      v67 = v271;
                      goto LABEL_332;
                    }
                    v104 = *(_QWORD *)v257;
                    v105 = (uint64_t *)(*(_QWORD *)v257 + 56);
                    v273 = (unsigned __int8 *)v100;
                    v274 = 0;
                    if (sub_1C61252B8(v105, &v273, &v274))
                      v106 = v274 == (unsigned __int8 *)(*(_QWORD *)(v104 + 56) + 16 * *(unsigned int *)(v104 + 72));
                    else
                      v106 = 1;
                    if (v106)
                      v107 = -1;
                    else
                      v107 = *((_DWORD *)v274 + 2);
                    v108 = *((_QWORD *)v257 + 6);
                    v109 = *(_DWORD *)(v100 + 40);
                    if (v87 >= v107 + v101)
                    {
                      if (v109 == 1)
                      {
LABEL_154:
                        v112 = 0;
                        v271 = 0;
                        v113 = *((_QWORD *)v257 + 3);
                        goto LABEL_155;
                      }
                      v110 = *(_QWORD *)(v100 + 32);
                      v111 = 1;
                      while (*(_QWORD *)(v110 + 32 * (v111 + 1) + 16) != v108)
                      {
                        v111 += 2;
                        if (v109 == v111)
                          goto LABEL_154;
                      }
                    }
                    else
                    {
                      if (v109 == 1)
                        goto LABEL_154;
                      v110 = *(_QWORD *)(v100 + 32);
                      v111 = 1;
                      while (*(_QWORD *)(v110 + 32 * (v111 + 1) + 16) == v108)
                      {
                        v111 += 2;
                        if (v109 == v111)
                          goto LABEL_154;
                      }
                    }
                    v112 = *(unsigned int *)(v110 + 32 * v111 + 4);
                    v271 = v112;
                    v113 = *((_QWORD *)v257 + 3);
                    if ((v112 & 0x80000000) != 0)
                    {
                      v114 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
                      goto LABEL_158;
                    }
LABEL_155:
                    v114 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v112);
LABEL_158:
                    v115 = *v114;
                    if (v115
                      && ((*(_BYTE *)(v115 + 3) & 1) != 0
                       || (v115 = *(_QWORD *)(v115 + 24)) != 0 && (*(_BYTE *)(v115 + 3) & 1) != 0))
                    {
                      v100 = *(_QWORD *)(v115 + 8);
                    }
                    else
                    {
                      v100 = 0;
                    }
                    v116 = *(_QWORD *)v257;
                    v117 = (uint64_t *)(*(_QWORD *)v257 + 56);
                    v273 = (unsigned __int8 *)v100;
                    v274 = 0;
                    if (sub_1C61252B8(v117, &v273, &v274))
                    {
                      if (v274 != (unsigned __int8 *)(*(_QWORD *)(v116 + 56) + 16 * *(unsigned int *)(v116 + 72)))
                      {
                        v118 = *((_DWORD *)v274 + 2);
                        if (v118 != -1)
                        {
                          v119 = v118 - v107 + v263;
                          v120 = v119 >= v101 + (int)v60;
                          v121 = v119 - (v101 + v60);
                          if (v120)
                          {
                            v122 = a6 + 24 * v121;
                            v123 = *(_DWORD *)(v122 + 16);
                            if (v123)
                            {
                              v124 = v123 - 1;
                              v125 = (37 * v271) & v124;
                              v126 = *(_DWORD *)(*(_QWORD *)v122 + 8 * v125);
                              if (v271 == v126)
                              {
LABEL_335:
                                v67 = sub_1C476BFEC(v122, &v271)[1];
                                v271 = v67;
                                goto LABEL_332;
                              }
                              v127 = 1;
                              while (v126 != -1)
                              {
                                v128 = v125 + v127++;
                                v125 = v128 & v124;
                                v126 = *(_DWORD *)(*(_QWORD *)v122 + 8 * v125);
                                if (v271 == v126)
                                  goto LABEL_335;
                              }
                            }
                          }
                        }
                      }
                    }
                    ++v101;
                    if (!v100)
                      goto LABEL_331;
                  }
                }
              }
              else
              {
LABEL_332:
                v14 = a8;
                v15 = v257;
                v55 = v262;
                v61 = v234;
              }
            }
LABEL_92:
            v68 = *((_QWORD *)v15 + 3);
            if ((v67 & 0x80000000) != 0)
              v69 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
            else
              v69 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v67);
            v70 = *v69;
            if (v70)
            {
              if ((*(_BYTE *)(v70 + 3) & 1) != 0)
              {
                v14 = a8;
                v15 = v257;
                v55 = v262;
              }
              else
              {
                v70 = *(_QWORD *)(v70 + 24);
                v14 = a8;
                v15 = v257;
                v55 = v262;
                if (!v70 || (*(_BYTE *)(v70 + 3) & 1) == 0)
                  goto LABEL_96;
              }
              v214 = *(_QWORD *)(v70 + 8);
              if (v214)
              {
                v215 = **(unsigned __int16 **)(v214 + 16);
                v216 = v215 == 69 || v215 == 0;
                if (v216 && *(_QWORD *)(v214 + 24) == a5)
                {
                  v217 = *(_DWORD *)(v214 + 40);
                  if (v217 == 1)
                  {
LABEL_321:
                    v220 = 0;
                  }
                  else
                  {
                    v218 = *(_QWORD *)(v214 + 32);
                    v219 = 1;
                    while (*(_QWORD *)(v218 + 32 * (v219 + 1) + 16) == a5)
                    {
                      v219 += 2;
                      if (v217 == v219)
                        goto LABEL_321;
                    }
                    v220 = *(_DWORD *)(v218 + 32 * v219 + 4);
                  }
                  v271 = v220;
                  v14 = a8;
                  v15 = v257;
                  v55 = v262;
                }
              }
            }
LABEL_96:
            v10 = a9;
            if ((v272 & 0x80000000) != 0)
              v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8);
            else
              v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v272);
            v72 = *v71;
            if (!v72)
            {
              v73 = 0;
              v74 = 0;
              goto LABEL_101;
            }
            if ((*(_BYTE *)(v72 + 3) & 1) != 0 || (v72 = *(_QWORD *)(v72 + 24)) != 0 && (*(_BYTE *)(v72 + 3) & 1) != 0)
            {
              v73 = *(unsigned __int16 ***)(v72 + 8);
              if (v73)
              {
                if (*v73[2])
                  v221 = *v73[2] == 69;
                else
                  v221 = 1;
                v74 = v221;
                goto LABEL_330;
              }
            }
            else
            {
              v73 = 0;
            }
            v74 = 0;
LABEL_330:
            v14 = a8;
            v10 = a9;
            v15 = v257;
            v55 = v262;
LABEL_101:
            if (v14 == v10)
              goto LABEL_198;
            if (v264 == v14 && !v60)
            {
              if (!(v262 | v254) || !*v245)
                goto LABEL_181;
              v75 = (uint64_t)v242;
              v76 = *v245 - 1;
              v77 = v76 & (37 * v272);
              v78 = *(_DWORD *)(*v242 + 8 * v77);
              if (v272 == v78)
                goto LABEL_184;
              v79 = 1;
              while (v78 != -1)
              {
                v80 = v77 + v79++;
                v77 = v80 & v76;
                v78 = *(_DWORD *)(*v242 + 8 * v77);
                v75 = (uint64_t)v242;
                if (v272 == v78)
                  goto LABEL_184;
              }
            }
            if (v264 == v14)
            {
              if (v60)
              {
                v81 = a6 + 24 * (v264 + 1 + v61);
                v82 = *(_DWORD *)(v81 + 16);
                if (v82)
                {
                  v83 = v82 - 1;
                  v84 = v83 & v256;
                  v85 = *(_DWORD *)(*(_QWORD *)v81 + 8 * (v83 & v256));
                  v86 = v268;
                  if ((_DWORD)v268 == v85)
                  {
LABEL_115:
                    LODWORD(v274) = v86;
                    goto LABEL_196;
                  }
                  v129 = 1;
                  while (v85 != -1)
                  {
                    v130 = v84 + v129++;
                    v84 = v130 & v83;
                    v85 = *(_DWORD *)(*(_QWORD *)v81 + 8 * v84);
                    v86 = v268;
                    if ((_DWORD)v268 == v85)
                      goto LABEL_115;
                  }
                }
              }
            }
LABEL_181:
            if (v254 > v251)
            {
              v75 = a6 + 24 * (v61 + v247);
              v131 = *(_DWORD *)(v75 + 16);
              if (v131)
              {
                v132 = v131 - 1;
                v133 = v132 & (37 * v272);
                v134 = *(_DWORD *)(*(_QWORD *)v75 + 8 * v133);
                if (v272 == v134)
                {
LABEL_184:
                  v135 = v61;
                  v136 = sub_1C476BFEC(v75, &v272);
                  goto LABEL_197;
                }
                v137 = 1;
                while (v134 != -1)
                {
                  v138 = v133 + v137++;
                  v133 = v138 & v132;
                  v134 = *(_DWORD *)(*(_QWORD *)v75 + 8 * v133);
                  if (v272 == v134)
                    goto LABEL_184;
                }
              }
            }
            v81 = a6 + 24 * (v264 - v60);
            v139 = *(_DWORD *)(v81 + 16);
            if (!v139)
              goto LABEL_198;
            v140 = v139 - 1;
            v141 = v140 & v256;
            v142 = *(_DWORD *)(*(_QWORD *)v81 + 8 * (v140 & v256));
            if ((_DWORD)v268 == v142)
            {
LABEL_191:
              v143 = v74 ^ 1;
              if (v264 != v14)
                v143 = 1;
              if ((v143 & 1) != 0 || v254 == v55)
              {
                LODWORD(v274) = v268;
LABEL_196:
                v135 = v61;
                v136 = sub_1C48C3740(v81, &v274);
LABEL_197:
                v61 = v135;
                v20 = v136[1];
              }
            }
            else
            {
              v164 = 1;
              while (v142 != -1)
              {
                v165 = v141 + v164++;
                v141 = v165 & v140;
                v142 = *(_DWORD *)(*(_QWORD *)v81 + 8 * (v165 & v140));
                if ((_DWORD)v268 == v142)
                  goto LABEL_191;
              }
            }
LABEL_198:
            if (!v74)
            {
              v163 = v259;
              goto LABEL_231;
            }
            if ((int)v263 - (int)v60 < v55)
              goto LABEL_227;
            LODWORD(v274) = v272;
            v144 = v61;
            v145 = sub_1C51E3D00(v250, v272, &v274);
            v61 = v144;
            v146 = (*((_BYTE *)v145 + 36) & 1) + v254 - v262 + *((_DWORD *)v145 + 8) - 1;
            if (v146 <= (int)v60 || !*v246)
              goto LABEL_227;
            v147 = *v246 - 1;
            v148 = (37 * v272) & v147;
            v149 = *(_DWORD *)(*v243 + 8 * v148);
            if (v272 != v149)
            {
              v166 = 1;
              while (v149 != -1)
              {
                v167 = v148 + v166++;
                v148 = v167 & v147;
                v149 = *(_DWORD *)(*v243 + 8 * v148);
                if (v272 == v149)
                  goto LABEL_203;
              }
LABEL_227:
              v163 = v259;
              if (v252)
              {
                v170 = a6 + 24 * (v248 + v61);
                v171 = *(_DWORD *)(v170 + 16);
                if (v171)
                {
                  v172 = v171 - 1;
                  v173 = (37 * v272) & v172;
                  v174 = *(_DWORD *)(*(_QWORD *)v170 + 8 * v173);
                  if (v272 == v174)
                  {
LABEL_230:
                    v20 = sub_1C476BFEC(v170, &v272)[1];
                  }
                  else
                  {
                    v210 = 1;
                    while (v174 != -1)
                    {
                      v211 = v173 + v210++;
                      v173 = v211 & v172;
                      v174 = *(_DWORD *)(*(_QWORD *)v170 + 8 * (v211 & v172));
                      if (v272 == v174)
                        goto LABEL_230;
                    }
                  }
                }
              }
LABEL_231:
              v175 = *((_QWORD *)v15 + 3);
              v176 = *(_QWORD *)(*(_QWORD *)(v175 + 24) + 16 * (v268 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v175, "", 0);
              *(_QWORD *)(*(_QWORD *)(v175 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v176;
              v177 = *(_QWORD *)(v175 + 8);
              if (v177)
                (*(void (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177);
              v178 = v163;
              if ((unint64_t *)a2[7] != v163)
              {
                v178 = (unint64_t *)a2[7];
                while (!*(_WORD *)v178[2] || *(_WORD *)v178[2] == 69)
                {
                  v178 = (unint64_t *)v178[1];
                  if (v178 == v163)
                  {
                    v178 = v163;
                    break;
                  }
                }
              }
              v270 = 0;
              v179 = *(_QWORD *)(*((_QWORD *)v15 + 4) + 8);
              v180 = (llvm::MachineFunction *)a2[4];
              v273 = 0;
              v181 = *((_QWORD *)v180 + 28);
              if (v181)
              {
                *((_QWORD *)v180 + 28) = *(_QWORD *)v181;
                v274 = 0;
              }
              else
              {
                v181 = sub_1C484358C((uint64_t)v180 + 128, 72, 3);
                v274 = v273;
                if (v273)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v273, v273, (uint64_t)&v274);
                  v273 = 0;
                }
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v181, v180, v179, &v274, 0);
              if (v274)
                llvm::MetadataTracking::untrack((uint64_t)&v274, v274);
              if (v273)
                llvm::MetadataTracking::untrack((uint64_t)&v273, v273);
              v182 = a2[5];
              *(_QWORD *)(v181 + 24) = v182;
              v183 = *(_QWORD *)(v182 + 32);
              v184 = *(unsigned int *)(v181 + 40);
              if ((_DWORD)v184)
              {
                v193 = *(_QWORD *)(v181 + 32);
                v194 = *(_QWORD *)(v183 + 40);
                v195 = 32 * v184;
                do
                {
                  if (!*(_BYTE *)v193)
                  {
                    v196 = *(unsigned int *)(v193 + 4);
                    if ((int)v196 >= 0)
                      v197 = (uint64_t *)(*(_QWORD *)(v194 + 272) + 8 * v196);
                    else
                      v197 = (uint64_t *)(*(_QWORD *)(v194 + 24) + 16 * (v196 & 0x7FFFFFFF) + 8);
                    v198 = *v197;
                    if (*v197)
                    {
                      v199 = *(_QWORD *)(v198 + 16);
                      *(_QWORD *)(v198 + 16) = v193;
                      *(_QWORD *)(v193 + 16) = v199;
                      if ((*(_BYTE *)(v193 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v193 + 24) = v198;
                      }
                      else
                      {
                        *(_QWORD *)(v193 + 24) = 0;
                        v197 = (uint64_t *)(v199 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v193 + 16) = v193;
                      *(_QWORD *)(v193 + 24) = 0;
                    }
                    *v197 = v193;
                  }
                  v193 += 32;
                  v195 -= 32;
                }
                while (v195);
              }
              v185 = *(_QWORD *)(v183 + 728);
              if (v185)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v185 + 24))(v185, v181);
              v186 = *v178 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v181 = v186 | *(_QWORD *)v181 & 7;
              *(_QWORD *)(v181 + 8) = v178;
              *(_QWORD *)(v186 + 8) = v181;
              *v178 = *v178 & 7 | v181;
              v275 = 0;
              v276 = 0;
              v277 = 0;
              LODWORD(v274) = 0x1000000;
              HIDWORD(v274) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v274);
              if (v270)
                llvm::MetadataTracking::untrack((uint64_t)&v270, v270);
              v275 = 0;
              LODWORD(v274) = 0;
              HIDWORD(v274) = v271;
              v276 = 0;
              v277 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v274);
              v275 = 0;
              v276 = a3;
              LODWORD(v274) = 4;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v274);
              v275 = 0;
              LODWORD(v274) = 0;
              HIDWORD(v274) = v20;
              v276 = 0;
              v277 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v274);
              v275 = 0;
              v276 = a4;
              LODWORD(v274) = 4;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v180, (const llvm::MachineOperand *)&v274);
              v10 = a9;
              if (!v60)
              {
                v274 = (unsigned __int8 *)v181;
                sub_1C61B6040(a7, &v274)[1] = v266;
              }
              v14 = a8;
              v15 = v257;
              if (a8 == a9)
              {
                v187 = a6 + 24 * (v264 - v60);
                v188 = *(_DWORD *)(v187 + 16);
                if (v188)
                {
                  v189 = v188 - 1;
                  v190 = (37 * v272) & v189;
                  v191 = *(_DWORD *)(*(_QWORD *)v187 + 8 * v190);
                  if (v272 == v191)
                  {
LABEL_257:
                    v192 = sub_1C476BFEC(v187, &v272)[1];
LABEL_276:
                    llvm::ModuloScheduleExpander::rewriteScheduledInstr(v257, (uint64_t)a2, (uint64_t)a7, a9, v60, v266, v268, IncompleteVirtualRegister, v192);
                    v202 = a6 + 24 * (a9 - v60);
                    v203 = *(_DWORD *)(v202 + 16);
                    if (v203)
                    {
                      v204 = v203 - 1;
                      v205 = v204 & v256;
                      v206 = *(_DWORD *)(*(_QWORD *)v202 + 8 * (v204 & v256));
                      if ((_DWORD)v268 == v206)
                      {
LABEL_278:
                        LODWORD(v274) = v268;
                        v207 = sub_1C48C3740(a6 + 24 * (a9 - v60), &v274);
                        llvm::ModuloScheduleExpander::rewriteScheduledInstr(v257, (uint64_t)a2, (uint64_t)a7, a9, v60, v266, v207[1], IncompleteVirtualRegister, 0);
                      }
                      else
                      {
                        v208 = 1;
                        while (v206 != -1)
                        {
                          v209 = v205 + v208++;
                          v205 = v209 & v204;
                          v206 = *(_DWORD *)(*(_QWORD *)v202 + 8 * v205);
                          if ((_DWORD)v268 == v206)
                            goto LABEL_278;
                        }
                      }
                    }
                    if (a10 && v60 == v255)
                      sub_1C51DF440(v268, IncompleteVirtualRegister, *((_QWORD *)v257 + 6), *(_QWORD *)(*((_QWORD *)v257 + 3) + 24), *(_QWORD *)(*((_QWORD *)v257 + 3) + 272), *((_QWORD *)v257 + 5));
                    if (a8 == a9)
                      v20 = IncompleteVirtualRegister;
                    LODWORD(v274) = v268;
                    result = (uint64_t)sub_1C48C3740(v202, &v274);
                    *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
                    v61 = ~(_DWORD)v60;
                    goto LABEL_285;
                  }
                  v200 = 1;
                  while (v191 != -1)
                  {
                    v201 = v190 + v200++;
                    v190 = v201 & v189;
                    v191 = *(_DWORD *)(*(_QWORD *)v187 + 8 * (v201 & v189));
                    if (v272 == v191)
                      goto LABEL_257;
                  }
                }
              }
              v192 = 0;
              goto LABEL_276;
            }
LABEL_203:
            isLoopCarried = llvm::ModuloScheduleExpander::isLoopCarried(v15, (llvm::MachineInstr *)v73);
            v61 = v144;
            if (isLoopCarried)
              v151 = v146;
            else
              v151 = 0;
            v152 = a6 + 24 * (v144 + v10 - v151);
            v153 = *(_DWORD *)(v152 + 16);
            if (!v153)
              goto LABEL_227;
            v154 = v153 - 1;
            v155 = (37 * v272) & v154;
            v156 = *(_DWORD *)(*(_QWORD *)v152 + 8 * v155);
            if (v272 != v156)
            {
              v168 = 1;
              while (v156 != -1)
              {
                v169 = v155 + v168++;
                v155 = v169 & v154;
                v156 = *(_DWORD *)(*(_QWORD *)v152 + 8 * v155);
                if (v272 == v156)
                  goto LABEL_208;
              }
              goto LABEL_227;
            }
LABEL_208:
            IncompleteVirtualRegister = sub_1C476BFEC(v152, &v272)[1];
            llvm::ModuloScheduleExpander::rewriteScheduledInstr(v15, (uint64_t)a2, (uint64_t)a7, v10, v60, v266, v268, IncompleteVirtualRegister, 0);
            LODWORD(v274) = v268;
            sub_1C48C3740(a6 + 24 * (v10 - v60), &v274)[1] = IncompleteVirtualRegister;
            v61 = ~(_DWORD)v60;
            result = a6 + 24 * (~(_DWORD)v60 + v14);
            v158 = *(_DWORD *)(result + 16);
            v20 = IncompleteVirtualRegister;
            if (v158)
            {
              v159 = v158 - 1;
              v160 = (37 * v272) & v159;
              v161 = *(_DWORD *)(*(_QWORD *)result + 8 * v160);
              if (v272 == v161)
              {
LABEL_210:
                result = (uint64_t)sub_1C476BFEC(result, &v272);
                v61 = ~(_DWORD)v60;
                v20 = *(_DWORD *)(result + 4);
              }
              else
              {
                v212 = 1;
                while (v161 != -1)
                {
                  v213 = v160 + v212++;
                  v160 = v213 & v159;
                  v161 = *(_DWORD *)(*(_QWORD *)result + 8 * (v213 & v159));
                  if (v272 == v161)
                    goto LABEL_210;
                }
                v20 = IncompleteVirtualRegister;
              }
            }
            if (a10)
            {
              v55 = v262;
              if (v60 == v255)
              {
                v162 = v61;
                result = sub_1C51DF440(v268, IncompleteVirtualRegister, *((_QWORD *)v15 + 6), *(_QWORD *)(*((_QWORD *)v15 + 3) + 24), *(_QWORD *)(*((_QWORD *)v15 + 3) + 272), *((_QWORD *)v15 + 5));
                v61 = v162;
              }
              goto LABEL_286;
            }
LABEL_285:
            v55 = v262;
LABEL_286:
            if (++v60 == v53)
              goto LABEL_337;
          }
        }
        IncompleteVirtualRegister = 0;
LABEL_337:
        v222 = v266;
        if (v244 > v241)
        {
          do
          {
            LODWORD(v53) = v53 + 1;
            result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v15, (uint64_t)a2, (uint64_t)a7, v10, v53, v266, v268, IncompleteVirtualRegister, 0);
          }
          while (v244 != (_DWORD)v53);
        }
        LODWORD(v16) = v263;
        v18 = v239;
        v19 = v243;
        if (!v244 && a10 && *v246)
        {
          v223 = *v246 - 1;
          v224 = (37 * v272) & v223;
          v225 = *(_DWORD *)(*v243 + 8 * v224);
          if (v272 == v225)
          {
LABEL_343:
            v226 = sub_1C476BFEC((uint64_t)v243, &v272);
            result = sub_1C51DF440(v268, v226[1], *((_QWORD *)v15 + 6), *(_QWORD *)(*((_QWORD *)v15 + 3) + 24), *(_QWORD *)(*((_QWORD *)v15 + 3) + 272), *((_QWORD *)v15 + 5));
          }
          else
          {
            v230 = 1;
            while (v225 != -1)
            {
              v231 = v224 + v230++;
              v224 = v231 & v223;
              v225 = *(_DWORD *)(*v243 + 8 * v224);
              if (v272 == v225)
                goto LABEL_343;
            }
          }
        }
        if (v266 && (*(_BYTE *)v266 & 4) != 0)
        {
          v227 = v240;
        }
        else
        {
          v227 = v240;
          if ((*((_WORD *)v266 + 22) & 8) != 0)
          {
            do
              v222 = (llvm::MachineInstr *)*((_QWORD *)v222 + 1);
            while ((*((_WORD *)v222 + 22) & 8) != 0);
          }
        }
        v13 = *((_QWORD *)v222 + 1);
        if (v13 == v227)
          return result;
      }
      if ((*(_BYTE *)(v39 + 3) & 1) == 0)
      {
        v39 = *(_QWORD *)(v39 + 24);
        if (!v39)
        {
LABEL_369:
          v14 = a8;
          v10 = a9;
          LODWORD(v16) = v263;
          v15 = v257;
          goto LABEL_31;
        }
        if ((*(_BYTE *)(v39 + 3) & 1) == 0)
        {
          v39 = 0;
          goto LABEL_369;
        }
      }
      v39 = *(_QWORD *)(v39 + 8);
      goto LABEL_369;
    }
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::generatePhis(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, signed int a9, char a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ModuloScheduleExpander *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  signed int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int IncompleteVirtualRegister;
  uint64_t v47;
  unint64_t *v48;
  llvm::ModuloScheduleExpander *v49;
  uint64_t v50;
  llvm::MachineFunction *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  llvm::ModuloScheduleExpander *v67;
  int v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  llvm::ModuloScheduleExpander *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  int v87;
  uint64_t v88;
  uint64_t **v89;
  uint64_t v90;
  unint64_t *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v10 = a8 - a9;
  if ((_DWORD)a8 == a9)
    v10 = -1;
  v11 = *(_QWORD *)(result + 48);
  v12 = v11 + 48;
  v13 = *(_QWORD *)(v11 + 56);
  if (v13 != v11 + 48)
  {
    v14 = a8;
    v15 = a6;
    v16 = (llvm::ModuloScheduleExpander *)result;
    v98 = a9 - ((_DWORD)a8 != a9);
    v100 = (v10 + a8);
    while (!**(_WORD **)(v13 + 16) || **(_WORD **)(v13 + 16) == 69)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v12)
        return result;
    }
    if (v12 != v13)
    {
      v88 = a6 + 24 * v98;
      v89 = (uint64_t **)(result + 80);
      v87 = v100 + 1;
      v93 = a6 + 24 * v100;
      v92 = a2 + 6;
      v94 = a8;
      v90 = v11 + 48;
LABEL_11:
      v17 = *(unsigned int *)(v13 + 40);
      if (!(_DWORD)v17)
        goto LABEL_160;
      v18 = 0;
      v101 = *(unsigned int *)(v13 + 40);
      while (1)
      {
        v19 = *(_QWORD *)(v13 + 32);
        if ((*(_DWORD *)(v19 + 32 * v18) & 0x10000FF) != 0x1000000)
          goto LABEL_15;
        v20 = v19 + 32 * v18;
        v22 = *(_DWORD *)(v20 + 4);
        v21 = (_DWORD *)(v20 + 4);
        if ((v22 & 0x80000000) == 0)
          goto LABEL_15;
        v23 = *(_QWORD *)v16;
        v24 = (uint64_t *)(*(_QWORD *)v16 + 56);
        v107 = (unsigned __int8 *)v13;
        v108 = 0;
        v25 = -1;
        if (sub_1C61252B8(v24, &v107, &v108)
          && v108 != (unsigned __int8 *)(*(_QWORD *)(v23 + 56) + 16 * *(unsigned int *)(v23 + 72)))
        {
          v25 = *((_DWORD *)v108 + 2);
        }
        LODWORD(v108) = *v21;
        v104 = v108;
        result = (uint64_t)sub_1C51E3D00(v89, v108, &v108);
        v26 = (*(_BYTE *)(result + 36) & 1) != 0 && *(_DWORD *)(result + 32) == 0;
        v27 = a9;
        v28 = v26 && *(_DWORD *)(*(_QWORD *)v16 + 80) <= a9;
        v29 = v28 ? 1 : *(_DWORD *)(result + 32);
        if ((_DWORD)v14 != a9 && !v29 && v25 == 0)
          break;
LABEL_47:
        if ((_DWORD)v14 != v27 && v25 > v100)
          goto LABEL_15;
        LODWORD(v108) = v104;
        result = (uint64_t)sub_1C48C3740(v88, &v108);
        v34 = *(unsigned int *)(result + 4);
        v35 = *((_QWORD *)v16 + 3);
        v103 = v34;
        if ((v34 & 0x80000000) != 0)
          v36 = (uint64_t *)(*(_QWORD *)(v35 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        else
          v36 = (uint64_t *)(*(_QWORD *)(v35 + 272) + 8 * v34);
        v37 = *v36;
        if (!v37)
          goto LABEL_53;
        v78 = v16;
        v79 = v14;
        if ((*(_BYTE *)(v37 + 3) & 1) == 0 && ((v37 = *(_QWORD *)(v37 + 24)) == 0 || (*(_BYTE *)(v37 + 3) & 1) == 0)
          || (v80 = *(_QWORD *)(v37 + 8)) == 0
          || ((v81 = **(unsigned __int16 **)(v80 + 16), v81 != 69) ? (v82 = v81 == 0) : (v82 = 1), !v82))
        {
          v15 = a6;
LABEL_153:
          v17 = v101;
          goto LABEL_53;
        }
        v15 = a6;
        v17 = v101;
        if (*(_QWORD **)(v80 + 24) == a2)
        {
          v83 = *(_DWORD *)(v80 + 40);
          if (v83 == 1)
          {
            v103 = 0;
            v15 = a6;
          }
          else
          {
            v84 = *(_QWORD *)(v80 + 32);
            v85 = 1;
            while (*(_QWORD *)(v84 + 32 * (v85 + 1) + 16) != a4)
            {
              v103 = 0;
              v85 += 2;
              v14 = v79;
              v15 = a6;
              v16 = v78;
              v17 = v101;
              if (v83 == v85)
                goto LABEL_53;
            }
            v103 = *(_DWORD *)(v84 + 32 * v85 + 4);
            v14 = v79;
            v15 = a6;
            v16 = v78;
          }
          goto LABEL_153;
        }
LABEL_53:
        LODWORD(v38) = v87 - v25;
        if (v29 >= v87 - v25)
          v38 = v38;
        else
          v38 = v29;
        v99 = v38;
        if ((_DWORD)v38)
        {
          v39 = 0;
          v102 = (v38 - 1);
          while (1)
          {
            LODWORD(v108) = v104;
            v40 = sub_1C48C3740(v93, &v108);
            if (v39 <= v100)
            {
              LODWORD(v108) = v104;
              v40 = sub_1C48C3740(v15 + 24 * (v100 - v39), &v108);
            }
            v41 = v40[1];
            v42 = (_QWORD *)*((_QWORD *)v16 + 3);
            if ((v41 & 0x80000000) != 0)
              v43 = (uint64_t *)(v42[3] + 16 * (v41 & 0x7FFFFFFF) + 8);
            else
              v43 = (uint64_t *)(v42[34] + 8 * v41);
            v44 = *v43;
            if (!v44)
              goto LABEL_64;
            v67 = v16;
            v68 = v14;
            if ((*(_BYTE *)(v44 + 3) & 1) == 0)
            {
              v44 = *(_QWORD *)(v44 + 24);
              if (!v44 || (*(_BYTE *)(v44 + 3) & 1) == 0)
                goto LABEL_138;
            }
            v69 = *(_QWORD *)(v44 + 8);
            if (!v69)
              goto LABEL_138;
            v70 = **(unsigned __int16 **)(v69 + 16);
            v71 = v70 == 69 || v70 == 0;
            if (v71 && *(_QWORD *)(v69 + 24) == a5)
            {
              v72 = *(_DWORD *)(v69 + 40);
              if (v72 == 1)
              {
LABEL_126:
                v41 = 0;
              }
              else
              {
                v73 = *(_QWORD *)(v69 + 32);
                v74 = 1;
                while (*(_QWORD *)(v73 + 32 * (v74 + 1) + 16) == a5)
                {
                  v74 += 2;
                  if (v72 == v74)
                    goto LABEL_126;
                }
                v41 = *(_DWORD *)(v73 + 32 * v74 + 4);
              }
            }
            if (v70 != 69 && **(_WORD **)(v69 + 16))
              goto LABEL_138;
            v15 = a6;
            if (*(_QWORD **)(v69 + 24) == a2)
              break;
LABEL_64:
            if ((_DWORD)v14 != a9)
            {
              LODWORD(v108) = v104;
              v103 = sub_1C48C3740(v15 + 24 * (v98 - v39), &v108)[1];
              v42 = (_QWORD *)*((_QWORD *)v16 + 3);
            }
            v45 = *(_QWORD *)(v42[3] + 16 * (v104 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v42, "", 0);
            *(_QWORD *)(v42[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v45;
            v47 = v42[1];
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
            v48 = a2 + 6;
            if ((unint64_t *)a2[7] != v92)
            {
              v48 = (unint64_t *)a2[7];
              while (!*(_WORD *)v48[2] || *(_WORD *)v48[2] == 69)
              {
                v48 = (unint64_t *)v48[1];
                if (v48 == v92)
                {
                  v48 = a2 + 6;
                  break;
                }
              }
            }
            v106 = 0;
            v107 = 0;
            v49 = v16;
            v50 = *(_QWORD *)(*((_QWORD *)v16 + 4) + 8);
            v51 = (llvm::MachineFunction *)a2[4];
            v52 = *((_QWORD *)v51 + 28);
            if (v52)
            {
              *((_QWORD *)v51 + 28) = *(_QWORD *)v52;
              v108 = 0;
            }
            else
            {
              v52 = sub_1C484358C((uint64_t)v51 + 128, 72, 3);
              v108 = v107;
              if (v107)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v107, v107, (uint64_t)&v108);
                v107 = 0;
              }
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v51, v50, &v108, 0);
            if (v108)
              llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
            v16 = v49;
            if (v107)
              llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
            v53 = a2[5];
            *(_QWORD *)(v52 + 24) = v53;
            v54 = *(_QWORD *)(v53 + 32);
            v55 = *(unsigned int *)(v52 + 40);
            if ((_DWORD)v55)
            {
              v60 = *(_QWORD *)(v52 + 32);
              v61 = *(_QWORD *)(v54 + 40);
              v62 = 32 * v55;
              do
              {
                if (!*(_BYTE *)v60)
                {
                  v63 = *(unsigned int *)(v60 + 4);
                  if ((int)v63 >= 0)
                    v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
                  else
                    v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
                  v65 = *v64;
                  if (*v64)
                  {
                    v66 = *(_QWORD *)(v65 + 16);
                    *(_QWORD *)(v65 + 16) = v60;
                    *(_QWORD *)(v60 + 16) = v66;
                    if ((*(_BYTE *)(v60 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v60 + 24) = v65;
                    }
                    else
                    {
                      *(_QWORD *)(v60 + 24) = 0;
                      v64 = (uint64_t *)(v66 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v60 + 16) = v60;
                    *(_QWORD *)(v60 + 24) = 0;
                  }
                  *v64 = v60;
                }
                v60 += 32;
                v62 -= 32;
              }
              while (v62);
            }
            v56 = *(_QWORD *)(v54 + 728);
            if (v56)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v56 + 24))(v56, v52);
            v57 = *v48 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v52 = v57 | *(_QWORD *)v52 & 7;
            *(_QWORD *)(v52 + 8) = v48;
            *(_QWORD *)(v57 + 8) = v52;
            *v48 = *v48 & 7 | v52;
            v109 = 0;
            v110 = 0;
            v111 = 0;
            LODWORD(v108) = 0x1000000;
            HIDWORD(v108) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v108);
            if (v106)
              llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
            v109 = 0;
            LODWORD(v108) = 0;
            HIDWORD(v108) = v41;
            v110 = 0;
            v111 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v108);
            v109 = 0;
            v110 = a3;
            LODWORD(v108) = 4;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v108);
            v109 = 0;
            LODWORD(v108) = 0;
            HIDWORD(v108) = v103;
            v110 = 0;
            v111 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v108);
            v109 = 0;
            v110 = a4;
            LODWORD(v108) = 4;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v108);
            v14 = v94;
            if (!v39)
            {
              v108 = (unsigned __int8 *)v52;
              sub_1C61B6040(a7, &v108)[1] = v13;
            }
            v17 = v101;
            if (v94 == a9)
            {
              llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, (uint64_t)a2, (uint64_t)a7, a9, v39, (llvm::MachineInstr *)v13, v41, IncompleteVirtualRegister, 0);
              llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, (uint64_t)a2, (uint64_t)a7, a9, v39, (llvm::MachineInstr *)v13, v103, IncompleteVirtualRegister, 0);
              v15 = a6;
              v58 = v104;
              LODWORD(v108) = v104;
              result = (uint64_t)sub_1C48C3740(a6 + 24 * (v98 + ~(_DWORD)v39), &v108);
              *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
              v103 = IncompleteVirtualRegister;
              v59 = v102;
            }
            else
            {
              v15 = a6;
              v58 = v104;
              LODWORD(v108) = v104;
              result = (uint64_t)sub_1C48C3740(a6 + 24 * (a9 - v39), &v108);
              *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
              v59 = v102;
              if (v39 == v102)
              {
                result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, (uint64_t)a2, (uint64_t)a7, a9, v102, (llvm::MachineInstr *)v13, v104, IncompleteVirtualRegister, 0);
                v59 = v102;
              }
            }
            if (v39 == v59 && a10)
              result = sub_1C51DF440(v58, IncompleteVirtualRegister, *((_QWORD *)v16 + 6), *(_QWORD *)(*((_QWORD *)v16 + 3) + 24), *(_QWORD *)(*((_QWORD *)v16 + 3) + 272), *((_QWORD *)v16 + 5));
            if (++v39 == v99)
              goto LABEL_15;
          }
          v75 = *(_DWORD *)(v69 + 40);
          if (v75 == 1)
          {
            v41 = 0;
          }
          else
          {
            v76 = *(_QWORD *)(v69 + 32);
            v77 = 1;
            while (*(_QWORD **)(v76 + 32 * (v77 + 1) + 16) == a2)
            {
              v41 = 0;
              v77 += 2;
              LODWORD(v14) = v68;
              v15 = a6;
              v16 = v67;
              if (v75 == v77)
                goto LABEL_64;
            }
            v41 = *(_DWORD *)(v76 + 32 * v77 + 4);
          }
LABEL_138:
          LODWORD(v14) = v68;
          v15 = a6;
          v16 = v67;
          goto LABEL_64;
        }
LABEL_15:
        if (++v18 == v17)
        {
          v12 = v90;
          if (!v13)
            goto LABEL_163;
LABEL_160:
          if ((*(_BYTE *)v13 & 4) == 0)
          {
LABEL_163:
            while ((*(_WORD *)(v13 + 44) & 8) != 0)
              v13 = *(_QWORD *)(v13 + 8);
          }
          v13 = *(_QWORD *)(v13 + 8);
          if (v13 == v12)
            return result;
          goto LABEL_11;
        }
      }
      v31 = *((_QWORD *)v16 + 3);
      if ((v104 & 0x80000000) != 0)
        v32 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
      else
        v32 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v104);
      v33 = *v32;
      if (v33)
      {
        while ((*(_BYTE *)(v33 + 3) & 1) != 0)
        {
          v33 = *(_QWORD *)(v33 + 24);
          if (!v33)
            goto LABEL_41;
        }
LABEL_44:
        if (*(_QWORD *)(*(_QWORD *)(v33 + 8) + 24) != *((_QWORD *)v16 + 6))
        {
          v29 = 1;
          goto LABEL_46;
        }
        while (1)
        {
          v33 = *(_QWORD *)(v33 + 24);
          if (!v33)
            break;
          if ((*(_BYTE *)(v33 + 3) & 1) == 0)
            goto LABEL_44;
        }
      }
LABEL_41:
      v29 = 0;
LABEL_46:
      v27 = a9;
      goto LABEL_47;
    }
  }
  return result;
}

void llvm::ModuloScheduleExpander::generateEpilog(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  llvm::MachineBasicBlock *v7;
  llvm::MachineBasicBlock *v10;
  unint64_t v11;
  llvm::MachineBasicBlock *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  llvm::MachineFunction *v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::MachineBasicBlock *v46;
  llvm::MachineBasicBlock *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51[2];
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  void *v56[2];
  _BYTE v57[128];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[18];

  v7 = a3;
  v60[16] = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v54 = 0;
  v58 = v60;
  v59 = 0x400000000;
  if (((*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, _QWORD **, _QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), a3, &v54, &v53, &v58, 0) & 1) == 0)
  {
    v10 = *(llvm::MachineBasicBlock **)(*((_QWORD *)v7 + 11) + 8 * (**((_QWORD **)v7 + 11) == (_QWORD)v7));
    v51[0] = 0;
    v51[1] = 0;
    v52 = 0;
    v46 = v10;
    v11 = (unint64_t)v7;
    if ((_DWORD)a2)
    {
      v42 = a5 + 16;
      v43 = (uint64_t)v7;
      v49 = a2;
      v50 = a2;
      v12 = v7;
      v44 = a5;
      do
      {
        v13 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(v13 + 312);
        if (v11)
          *(_QWORD *)(v13 + 312) = *(_QWORD *)v11;
        else
          v11 = sub_1C484358C(v13 + 128, 232, 3);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = -1;
        v14 = (unint64_t *)(v11 + 48);
        *(_QWORD *)(v11 + 48) = (v11 + 48) | 4;
        *(_QWORD *)(v11 + 56) = v11 + 48;
        *(_BYTE *)(v11 + 144) = 0;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 112) = 0u;
        *(_OWORD *)(v11 + 121) = 0u;
        *(_QWORD *)(v11 + 160) = 0;
        *(_QWORD *)(v11 + 168) = 0;
        *(_QWORD *)(v11 + 152) = 0;
        *(_BYTE *)(v11 + 176) = 0;
        *(_DWORD *)(v11 + 187) = 0;
        *(_QWORD *)(v11 + 180) = 0;
        *(_QWORD *)(v11 + 192) = 0;
        *(_DWORD *)(v11 + 199) = 0;
        *(_QWORD *)(v11 + 216) = 0;
        *(_QWORD *)(v11 + 224) = 0;
        *(_QWORD *)(v11 + 208) = 0;
        *(_QWORD *)(v11 + 32) = v13;
        *(_QWORD *)(v11 + 40) = v11;
        v15 = *(unsigned int *)(a5 + 8);
        if (v15 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v42, v15 + 1, 8);
          v15 = *(unsigned int *)(a5 + 8);
        }
        ++v50;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v15) = v11;
        ++*(_DWORD *)(a5 + 8);
        v16 = *(unint64_t **)(a1 + 48);
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(a1 + 8) + 320, v11);
        v17 = *v16;
        *(_QWORD *)v11 = *v16;
        *(_QWORD *)(v11 + 8) = v16;
        *(_QWORD *)(v17 + 8) = v11;
        *v16 = v11;
        llvm::MachineBasicBlock::replaceSuccessor(v12, v46, (llvm::MachineBasicBlock *)v11);
        llvm::MachineBasicBlock::addSuccessor((_QWORD *)v11, v46, -1);
        if (v10 == v46)
          v10 = (llvm::MachineBasicBlock *)v11;
        v48 = v10;
        if (v49 <= a2)
        {
          v18 = v49;
          do
          {
            v19 = *(_QWORD *)(a1 + 48);
            v20 = v19 + 48;
            for (i = *(_QWORD *)(v19 + 56); i != v20; i = *(_QWORD *)(i + 8))
            {
              if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
              {
                v22 = *(llvm::MachineFunction **)a1;
                v23 = (uint64_t *)(*(_QWORD *)a1 + 56);
                v55 = (unsigned __int8 *)i;
                v56[0] = 0;
                v24 = !sub_1C61252B8(v23, &v55, v56)
                   || v56[0] == (void *)(*((_QWORD *)v22 + 7) + 16 * *((unsigned int *)v22 + 18));
                v25 = v24 ? -1 : *((_DWORD *)v56[0] + 2);
                if (v25 == v18)
                {
                  v56[0] = 0;
                  v56[0] = llvm::ModuloScheduleExpander::cloneInstr((llvm::MachineFunction **)a1, (llvm::MachineInstr *)i, -1, 0);
                  llvm::ModuloScheduleExpander::updateInstruction(a1, (uint64_t)v56[0], v49 == 1, v50, 0, a4);
                  v26 = (unint64_t)v56[0];
                  v27 = *(_QWORD *)(v11 + 40);
                  *((_QWORD *)v56[0] + 3) = v27;
                  v28 = *(_QWORD *)(v27 + 32);
                  v29 = *(unsigned int *)(v26 + 40);
                  if ((_DWORD)v29)
                  {
                    v32 = *(_QWORD *)(v26 + 32);
                    v33 = *(_QWORD *)(v28 + 40);
                    v34 = 32 * v29;
                    do
                    {
                      if (!*(_BYTE *)v32)
                      {
                        v35 = *(unsigned int *)(v32 + 4);
                        if ((int)v35 >= 0)
                          v36 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
                        else
                          v36 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                        v37 = *v36;
                        if (*v36)
                        {
                          v38 = *(_QWORD *)(v37 + 16);
                          *(_QWORD *)(v37 + 16) = v32;
                          *(_QWORD *)(v32 + 16) = v38;
                          if ((*(_BYTE *)(v32 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v32 + 24) = v37;
                          }
                          else
                          {
                            *(_QWORD *)(v32 + 24) = 0;
                            v36 = (uint64_t *)(v38 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v32 + 16) = v32;
                          *(_QWORD *)(v32 + 24) = 0;
                        }
                        *v36 = v32;
                      }
                      v32 += 32;
                      v34 -= 32;
                    }
                    while (v34);
                  }
                  v30 = *(_QWORD *)(v28 + 728);
                  if (v30)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
                  v31 = *v14 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
                  *(_QWORD *)(v26 + 8) = v14;
                  *(_QWORD *)(v31 + 8) = v26;
                  *v14 = *v14 & 7 | v26;
                  sub_1C61B6040(v51, v56)[1] = i;
                }
              }
              if ((*(_BYTE *)i & 4) == 0)
              {
                while ((*(_WORD *)(i + 44) & 8) != 0)
                  i = *(_QWORD *)(i + 8);
              }
            }
            ++v18;
          }
          while (v18 <= a2);
        }
        v7 = (llvm::MachineBasicBlock *)v43;
        llvm::ModuloScheduleExpander::generateExistingPhis(a1, (_QWORD *)v11, *(_QWORD *)(*a6 + 8 * (v49 - 1)), (uint64_t)v12, v43, a4, v51, a2, v50, v49 == 1);
        --v49;
        llvm::ModuloScheduleExpander::generatePhis(a1, (_QWORD *)v11, *(_QWORD *)(*a6 + 8 * v49), (uint64_t)v12, v43, a4, v51, a2, v50, v49 == 0);
        v12 = (llvm::MachineBasicBlock *)v11;
        a5 = v44;
        v10 = v48;
      }
      while ((_DWORD)v49);
    }
    llvm::MachineBasicBlock::replacePhiUsesWith((uint64_t)v46, *(llvm::MachineBasicBlock **)(a1 + 48), (llvm::MachineBasicBlock *)v11);
    (*(void (**)(_QWORD, llvm::MachineBasicBlock *, _QWORD))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32), v7, 0);
    v39 = *(_QWORD *)(a1 + 32);
    v56[0] = 0;
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, _QWORD *, _QWORD, void **, _QWORD))(*(_QWORD *)v39 + 272))(v39, v7, v7, v10, v58, v59, v56, 0);
    if (v56[0])
      llvm::MetadataTracking::untrack((uint64_t)v56, (unsigned __int8 *)v56[0]);
    v40 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v40 - 8);
      v55 = 0;
      v56[0] = v57;
      v56[1] = (void *)0x400000000;
      (*(void (**)(_QWORD, uint64_t, llvm::MachineBasicBlock *, _QWORD, _BYTE *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 32) + 272))(*(_QWORD *)(a1 + 32), v41, v46, 0, v57, 0, &v55, 0);
      if (v55)
        llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      if (v56[0] != v57)
        free(v56[0]);
    }
    MEMORY[0x1CAA32FB4](v51[0], 8);
  }
  if (v58 != v60)
    free(v58);
}

uint64_t llvm::ModuloScheduleExpander::removeDeadInstructions(uint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v21;
  int32x2_t *v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t *v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  BOOL v52;

  v3 = (_QWORD *)result;
  v4 = *((unsigned int *)a3 + 2);
  if (!(_DWORD)v4)
    goto LABEL_48;
  v51 = *a3;
  v5 = *a3 + 8 * v4;
  do
  {
    v6 = *(_QWORD *)(v5 - 8);
    v5 -= 8;
    v7 = v6 + 48;
    for (i = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF8; v7 != i; i = v21 & 0xFFFFFFFFFFFFFFF8)
    {
      if (**(unsigned __int16 **)(i + 16) - 1 <= 1)
        goto LABEL_30;
      v52 = 0;
      result = llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)i, 0, &v52);
      if ((result & 1) == 0 && **(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
        goto LABEL_30;
      v9 = *(unsigned int *)(i + 40);
      if (!(_DWORD)v9)
        goto LABEL_30;
      v10 = *(_DWORD **)(i + 32);
      v11 = &v10[8 * v9];
      v12 = 1;
      do
      {
        if ((*v10 & 0x10000FF) == 0x1000000)
        {
          v13 = v10[1];
          if ((v13 - 1) > 0x3FFFFFFE)
          {
            v14 = v3[3];
            if ((v13 & 0x80000000) != 0)
              v15 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
            else
              v15 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v13);
            v16 = *v15;
            if (v16)
            {
              while ((*(_BYTE *)(v16 + 3) & 1) != 0)
              {
                v16 = *(_QWORD *)(v16 + 24);
                if (!v16)
                  goto LABEL_27;
              }
              v17 = v3[6];
              if (*(_QWORD *)(*(_QWORD *)(v16 + 8) + 24) != v17)
                goto LABEL_30;
              while (1)
              {
                v16 = *(_QWORD *)(v16 + 24);
                if (!v16)
                  break;
                if ((*(_BYTE *)(v16 + 3) & 1) == 0)
                {
                  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 24);
                  v19 = v18 == v17;
                  v20 = v18 != v17;
                  if (!v19)
                  {
                    if (v20)
                      goto LABEL_30;
                    break;
                  }
                }
              }
            }
          }
          else if ((~*v10 & 0x5000000) != 0)
          {
            goto LABEL_30;
          }
LABEL_27:
          v12 = 0;
        }
        v10 += 8;
      }
      while (v10 != v11);
      if ((v12 & 1) != 0)
      {
LABEL_30:
        v21 = *(_QWORD *)i;
        continue;
      }
      v22 = *(int32x2_t **)(v3[5] + 288);
      v23 = v22[46];
      v24 = v22[48].u32[0];
      if (!(_DWORD)v24)
        goto LABEL_38;
      LODWORD(v25) = (v24 - 1) & ((i >> 4) ^ (i >> 9));
      v26 = (uint64_t *)(*(_QWORD *)&v23 + 16 * v25);
      v27 = *v26;
      if (*v26 != i)
      {
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(_QWORD *)(*(_QWORD *)&v23 + 16 * v25);
          if (v27 == i)
          {
            v26 = (uint64_t *)(*(_QWORD *)&v23 + 16 * v25);
            goto LABEL_39;
          }
        }
LABEL_38:
        v26 = (uint64_t *)(*(_QWORD *)&v23 + 16 * v24);
      }
LABEL_39:
      if (v26 != (uint64_t *)(*(_QWORD *)&v23 + 16 * v24))
      {
        v30 = v26[1] & 0xFFFFFFFFFFFFFFF8;
        *v26 = -8192;
        v22[47] = vadd_s32(v22[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v30 + 16) = 0;
      }
      v21 = *(_QWORD *)i;
      v31 = i;
      if ((*(_QWORD *)i & 4) == 0)
      {
        v31 = i;
        if ((*(_WORD *)(i + 44) & 8) != 0)
        {
          v31 = i;
          do
            v31 = *(_QWORD *)(v31 + 8);
          while ((*(_WORD *)(v31 + 44) & 8) != 0);
        }
      }
      result = sub_1C487FE80(*(_QWORD *)(i + 24) + 40, i, *(_QWORD *)(v31 + 8));
    }
  }
  while (v5 != v51);
LABEL_48:
  v32 = *(_QWORD *)(a2 + 56);
  if (v32 != a2 + 48)
  {
    v33 = *(_QWORD *)(a2 + 56);
    while (!**(_WORD **)(v33 + 16) || **(_WORD **)(v33 + 16) == 69)
    {
      v33 = *(_QWORD *)(v33 + 8);
      if (v33 == a2 + 48)
      {
        v33 = a2 + 48;
        break;
      }
    }
    if (v32 != v33)
    {
      while (2)
      {
        if (!v32 || (v34 = v32, (*(_BYTE *)v32 & 4) == 0))
        {
          v34 = v32;
          if ((*(_WORD *)(v32 + 44) & 8) != 0)
          {
            v34 = v32;
            do
              v34 = *(_QWORD *)(v34 + 8);
            while ((*(_WORD *)(v34 + 44) & 8) != 0);
          }
        }
        v35 = *(unsigned int *)(*(_QWORD *)(v32 + 32) + 4);
        v36 = v3[3];
        if ((v35 & 0x80000000) != 0)
          v37 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
        else
          v37 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v35);
        v38 = *(_QWORD *)(v34 + 8);
        v39 = *v37;
        if (*v37)
        {
          while ((*(_BYTE *)(v39 + 3) & 1) != 0)
          {
            v39 = *(_QWORD *)(v39 + 24);
            if (!v39)
              goto LABEL_66;
          }
LABEL_78:
          v32 = v38;
          if (v38 == v33)
            return result;
          continue;
        }
        break;
      }
LABEL_66:
      v40 = *(int32x2_t **)(v3[5] + 288);
      v41 = v40[46];
      v42 = v40[48].u32[0];
      if ((_DWORD)v42)
      {
        LODWORD(v43) = (v42 - 1) & ((v32 >> 4) ^ (v32 >> 9));
        v44 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v43);
        v45 = *v44;
        if (*v44 != v32)
        {
          v46 = 1;
          while (v45 != -4096)
          {
            v47 = v43 + v46++;
            v43 = v47 & (v42 - 1);
            v45 = *(_QWORD *)(*(_QWORD *)&v41 + 16 * v43);
            if (v45 == v32)
            {
              v44 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v43);
              goto LABEL_73;
            }
          }
          goto LABEL_72;
        }
      }
      else
      {
LABEL_72:
        v44 = (uint64_t *)(*(_QWORD *)&v41 + 16 * v42);
      }
LABEL_73:
      if (v44 != (uint64_t *)(*(_QWORD *)&v41 + 16 * v42))
      {
        v48 = v44[1] & 0xFFFFFFFFFFFFFFF8;
        *v44 = -8192;
        v40[47] = vadd_s32(v40[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v48 + 16) = 0;
      }
      v49 = v32;
      if ((*(_BYTE *)v32 & 4) == 0)
      {
        v49 = v32;
        if ((*(_WORD *)(v32 + 44) & 8) != 0)
        {
          v49 = v32;
          do
            v49 = *(_QWORD *)(v49 + 8);
          while ((*(_WORD *)(v49 + 44) & 8) != 0);
        }
      }
      result = sub_1C487FE80(*(_QWORD *)(v32 + 24) + 40, v32, *(_QWORD *)(v49 + 8));
      goto LABEL_78;
    }
  }
  return result;
}

void llvm::ModuloScheduleExpander::cleanup(llvm::ModuloScheduleExpander *this)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t *v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *((_QWORD *)this + 6);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3 != v2 + 48)
  {
    while (1)
    {
      v4 = *(int32x2_t **)(*((_QWORD *)this + 5) + 288);
      v5 = v4[46];
      v6 = v4[48].u32[0];
      if (!(_DWORD)v6)
        goto LABEL_8;
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
      v9 = *v8;
      if (*v8 != v3)
        break;
LABEL_9:
      if (v8 != (uint64_t *)(*(_QWORD *)&v5 + 16 * v6))
      {
        v12 = v8[1] & 0xFFFFFFFFFFFFFFF8;
        *v8 = -8192;
        v4[47] = vadd_s32(v4[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v12 + 16) = 0;
      }
      if ((*(_BYTE *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          v3 = *(_QWORD *)(v3 + 8);
      }
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2 + 48)
      {
        v2 = *((_QWORD *)this + 6);
        v3 = *(_QWORD *)(v2 + 56);
        goto LABEL_16;
      }
    }
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
      if (v9 == v3)
      {
        v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
        goto LABEL_9;
      }
    }
LABEL_8:
    v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v6);
    goto LABEL_9;
  }
LABEL_16:
  sub_1C487FE80(v2 + 40, v3, v2 + 48);
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = v13[4];
  v15 = v14 + 320;
  *(_QWORD *)(*(_QWORD *)(v14 + 104) + 8 * *((unsigned int *)v13 + 6)) = 0;
  *((_DWORD *)v13 + 6) = -1;
  v16 = *v13;
  v17 = (_QWORD *)v13[1];
  *v17 = *v13;
  *(_QWORD *)(v16 + 8) = v17;
  *v13 = 0;
  v13[1] = 0;
  llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v15, (llvm::MachineBasicBlock *)v13);
}

llvm::MachineInstr *llvm::ModuloScheduleExpander::cloneAndChangeInstr(llvm::ModuloScheduleExpander *this, llvm::MachineInstr *a2, int a3, int a4)
{
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t DefInLoop;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = (llvm::MachineFunction *)*((_QWORD *)this + 1);
  v9 = (llvm::MachineInstr *)*((_QWORD *)v8 + 28);
  if (v9)
    *((_QWORD *)v8 + 28) = *(_QWORD *)v9;
  else
    v9 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v8 + 128, 72, 3);
  llvm::MachineInstr::MachineInstr(v9, v8, a2);
  v24 = 0;
  if (sub_1C617A1AC(*((_QWORD *)this + 13), *((_DWORD *)this + 30), (uint64_t)a2, &v24))
    v10 = v24 == *((_QWORD *)this + 13) + 24 * *((unsigned int *)this + 30);
  else
    v10 = 1;
  if (v10)
  {
    LODWORD(v14) = a3 - a4;
LABEL_18:
    llvm::ModuloScheduleExpander::updateMemOperands(this, v9, a2, v14);
    return v9;
  }
  v11 = *(_DWORD *)(v24 + 8);
  v12 = *(_QWORD *)(v24 + 16);
  v22 = 0;
  if ((*(unsigned int (**)(_QWORD, llvm::MachineInstr *, char *, uint64_t *))(**((_QWORD **)this + 4) + 688))(*((_QWORD *)this + 4), a2, (char *)&v22 + 4, &v22))
  {
    v15 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 32 * v22 + 16);
    DefInLoop = llvm::ModuloScheduleExpander::findDefInLoop(this, v11);
    v17 = *(_QWORD *)this;
    v18 = (uint64_t *)(*(_QWORD *)this + 56);
    v23 = DefInLoop;
    v24 = 0;
    v19 = sub_1C61252B8(v18, &v23, &v24);
    v20 = -1;
    if (v19 && v24 != *(_QWORD *)(v17 + 56) + 16 * *(unsigned int *)(v17 + 72))
      v20 = *(_DWORD *)(v24 + 8);
    v14 = (a3 - a4);
    if (v20 <= a4)
      v21 = 0;
    else
      v21 = v12 * v14;
    *(_QWORD *)(*((_QWORD *)v9 + 4) + 32 * v22 + 16) = v21 + v15;
    goto LABEL_18;
  }
  return 0;
}

uint64_t llvm::ModuloScheduleExpander::rewritePhiValues(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t **v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int PrevMapVal;
  unsigned int v39;
  uint64_t i;
  uint64_t **v41;
  uint64_t v42;
  _QWORD *v44;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 56);
  if (v6 != v5 + 48)
  {
    v8 = (_QWORD *)result;
    v9 = *(_QWORD *)(v5 + 56);
    while (!**(_WORD **)(v9 + 16) || **(_WORD **)(v9 + 16) == 69)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v5 + 48)
      {
        v9 = v5 + 48;
        break;
      }
    }
    if (v6 != v9)
    {
      v41 = (uint64_t **)(result + 80);
      v42 = v9;
      v44 = (_QWORD *)result;
      v11 = (uint64_t *)result;
      while (1)
      {
        v12 = *(_QWORD *)(v6 + 32);
        if (*(_DWORD *)(v6 + 40) == 1)
        {
          v13 = 0;
          v14 = 0;
        }
        else
        {
          v15 = 0;
          v14 = 0;
          LODWORD(v13) = 0;
          v16 = v8[6];
          v17 = (unsigned int *)(v12 + 36);
          do
          {
            v15 += 2;
            v18 = *(_QWORD *)(v12 + 32 * v15 + 16);
            v20 = *v17;
            v17 += 16;
            v19 = v20;
            if (v18 == v16)
              v13 = v19;
            else
              v13 = v13;
            if (v18 != v16)
              v14 = v19;
          }
          while (*(_DWORD *)(v6 + 40) - 1 != v15);
        }
        v21 = *(unsigned int *)(v12 + 4);
        v22 = v8[3];
        if ((v21 & 0x80000000) != 0)
          v23 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        else
          v23 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v21);
        v24 = *v23;
        if (!v24)
          goto LABEL_22;
        if ((*(_BYTE *)(v24 + 3) & 1) != 0)
          break;
        v24 = *(_QWORD *)(v24 + 24);
        if (v24)
        {
          if ((*(_BYTE *)(v24 + 3) & 1) != 0)
            break;
          v24 = 0;
        }
LABEL_56:
        v8 = v44;
LABEL_22:
        v25 = *v8;
        v26 = (uint64_t *)(*v8 + 56);
        v48 = v24;
        v49 = 0;
        v27 = -1;
        if (sub_1C61252B8(v26, &v48, &v49)
          && v49 != *(_QWORD *)(v25 + 56) + 16 * *(unsigned int *)(v25 + 72))
        {
          v27 = *(_DWORD *)(v49 + 8);
        }
        v28 = *v8;
        v29 = v8[3];
        if ((v13 & 0x80000000) != 0)
          v30 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        else
          v30 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v13);
        v31 = *v30;
        if (!v31)
          goto LABEL_29;
        if ((*(_BYTE *)(v31 + 3) & 1) != 0)
          goto LABEL_57;
        v31 = *(_QWORD *)(v31 + 24);
        if (!v31)
          goto LABEL_29;
        if ((*(_BYTE *)(v31 + 3) & 1) != 0)
LABEL_57:
          v31 = *(_QWORD *)(v31 + 8);
        else
          v31 = 0;
LABEL_29:
        v48 = v31;
        v49 = 0;
        v32 = sub_1C61252B8((uint64_t *)(v28 + 56), &v48, &v49);
        v33 = -1;
        if (v32 && v49 != *(_QWORD *)(v28 + 56) + 16 * *(unsigned int *)(v28 + 72))
          v33 = *(_DWORD *)(v49 + 8);
        v47 = v33;
        LODWORD(v49) = v21;
        v34 = sub_1C51E3D00(v41, v21, &v49);
        v35 = 0;
        v36 = (*((_BYTE *)v34 + 36) & 1) + *((_DWORD *)v34 + 8) - 1;
        v37 = a3;
        if (v36 >= a3)
          v36 = a3;
        v46 = v36;
        do
        {
          PrevMapVal = llvm::ModuloScheduleExpander::getPrevMapVal((uint64_t)v11, v37, v27, v13, v47, a4, v11[6]);
          if (PrevMapVal)
            v39 = PrevMapVal;
          else
            v39 = v14;
          result = llvm::ModuloScheduleExpander::rewriteScheduledInstr((llvm::ModuloScheduleExpander *)v11, a2, a5, v37--, v35++, (llvm::MachineInstr *)v6, v21, v39, 0);
        }
        while (v35 <= v46);
        if (v6 && (*(_BYTE *)v6 & 4) != 0)
        {
          v8 = v44;
          i = v42;
        }
        else
        {
          v8 = v44;
          for (i = v42; (*(_WORD *)(v6 + 44) & 8) != 0; v6 = *(_QWORD *)(v6 + 8))
            ;
        }
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == i)
          return result;
      }
      v24 = *(_QWORD *)(v24 + 8);
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::rewriteScheduledInstr(llvm::ModuloScheduleExpander *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, llvm::MachineInstr *a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  _DWORD *v16;
  int v17;
  uint64_t *v18;
  uint64_t result;
  BOOL v20;
  int v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  llvm::MachineInstr *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v49;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  llvm::MachineInstr *v64;
  uint64_t v65;

  v16 = *(_DWORD **)a1;
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 80);
  v18 = (uint64_t *)(*(_QWORD *)a1 + 56);
  v64 = a6;
  v65 = 0;
  result = sub_1C61252B8(v18, &v64, &v65);
  if ((_DWORD)result)
    v20 = v65 == *((_QWORD *)v16 + 7) + 16 * v16[18];
  else
    v20 = 1;
  if (v20)
    v21 = -1;
  else
    v21 = *(_DWORD *)(v65 + 8);
  v22 = (_QWORD *)*((_QWORD *)a1 + 3);
  if ((a7 & 0x80000000) != 0)
    v23 = (uint64_t *)(v22[3] + 16 * (a7 & 0x7FFFFFFF) + 8);
  else
    v23 = (uint64_t *)(v22[34] + 8 * a7);
  v24 = *v23;
  if (*v23)
  {
    while ((*(_BYTE *)(v24 + 3) & 1) != 0)
    {
      v24 = *(_QWORD *)(v24 + 24);
      if (!v24)
        return result;
    }
    v25 = v17 - 1;
    v26 = v21 + a5;
    if (a9)
      v27 = v25 > a4;
    else
      v27 = 0;
    v28 = !v27;
    v58 = v28;
    v62 = v26;
    v59 = v26 + 1;
    do
    {
      v29 = v24;
      do
        v24 = *(_QWORD *)(v24 + 24);
      while (v24 && (*(_BYTE *)(v24 + 3) & 1) != 0);
      v30 = *(_QWORD *)(v29 + 8);
      if (*(_QWORD *)(v30 + 24) == a2)
      {
        v31 = **(unsigned __int16 **)(v30 + 16);
        if (v31 != 69 && v31 != 0)
          goto LABEL_42;
        if (!**((_WORD **)a6 + 2) || **((_WORD **)a6 + 2) == 69 || *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4) != a8)
        {
          v33 = *(_DWORD *)(v30 + 40);
          if (v33 == 1)
          {
LABEL_37:
            v36 = 0;
          }
          else
          {
            v34 = *(_QWORD *)(v30 + 32);
            v35 = 1;
            while (*(_QWORD *)(v34 + 32 * (v35 + 1) + 16) != a2)
            {
              v35 += 2;
              if (v33 == v35)
                goto LABEL_37;
            }
            v36 = *(_DWORD *)(v34 + 32 * v35 + 4);
          }
          if (v36 == a7)
          {
LABEL_42:
            v60 = v25;
            v65 = 0;
            v37 = sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v30, &v65);
            v38 = v65;
            v61 = a3;
            if (!v37)
              v38 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
            v39 = *(llvm::MachineInstr **)(v38 + 8);
            v40 = *(_QWORD *)a1;
            v41 = (uint64_t *)(*(_QWORD *)a1 + 56);
            v64 = v39;
            v65 = 0;
            v42 = -1;
            if (sub_1C61252B8(v41, &v64, &v65)
              && v65 != *(_QWORD *)(v40 + 56) + 16 * *(unsigned int *)(v40 + 72))
            {
              v42 = *(_DWORD *)(v65 + 8);
            }
            v43 = *(_QWORD *)a1;
            v44 = (uint64_t *)(*(_QWORD *)a1 + 32);
            v64 = v39;
            v65 = 0;
            result = sub_1C61252B8(v44, &v64, &v65);
            v45 = -1;
            if ((_DWORD)result && v65 != *(_QWORD *)(v43 + 32) + 16 * *(unsigned int *)(v43 + 48))
              v45 = *(_DWORD *)(v65 + 8);
            if (v62 == v42 && (**((_WORD **)a6 + 2) == 69 || !**((_WORD **)a6 + 2)))
            {
              v57 = v45;
              v52 = *(_QWORD *)a1;
              v53 = (uint64_t *)(*(_QWORD *)a1 + 32);
              v64 = a6;
              v65 = 0;
              result = sub_1C61252B8(v53, &v64, &v65);
              v54 = -1;
              if ((_DWORD)result && v65 != *(_QWORD *)(v52 + 32) + 16 * *(unsigned int *)(v52 + 48))
                v54 = *(_DWORD *)(v65 + 8);
              v46 = a9;
              if (v58)
              {
                if (!a9
                  || (v55 = v54, result = llvm::ModuloScheduleExpander::isLoopCarried(a1, a6), (result & 1) != 0)
                  || (v56 = v55, v46 = a9, v56 > v57)
                  && (v46 = a9, **((_WORD **)v39 + 2))
                  && (v46 = a9, **((_WORD **)v39 + 2) != 69))
                {
                  v46 = a8;
                }
              }
            }
            else
            {
              v46 = 0;
            }
            v25 = v60;
            if (v60 <= a4 && v59 == v42)
            {
              result = llvm::ModuloScheduleExpander::isLoopCarried(a1, a6);
              if (!(_DWORD)result)
                v46 = a8;
            }
            if (v62 > v42)
            {
              v47 = **((unsigned __int16 **)a6 + 2);
              if (v47 == 69 || v47 == 0)
                v46 = a8;
            }
            if (v60 <= a4)
            {
              v49 = **((unsigned __int16 **)a6 + 2);
              if (v62 < v42 && v49 != 69 && v49 != 0)
                v46 = a8;
            }
            a3 = v61;
            if (v46)
            {
              sub_1C51A3F30(*((_QWORD **)a1 + 3), v46, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 24) + 16 * (v46 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 24) + 16 * (a7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
              a3 = v61;
              result = llvm::MachineOperand::setReg(v29, v46);
            }
          }
        }
      }
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C51DF440(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned int v10;

  v7 = (uint64_t *)(a4 + 16 * (result & 0x7FFFFFFF) + 8);
  if ((int)result >= 0)
    v7 = (uint64_t *)(a5 + 8 * result);
  v8 = *v7;
  if (*v7)
  {
    while ((*(_BYTE *)(v8 + 3) & 1) != 0)
    {
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        goto LABEL_6;
    }
    v10 = a2;
    do
    {
      result = v8;
      do
        v8 = *(_QWORD *)(v8 + 24);
      while (v8 && (*(_BYTE *)(v8 + 3) & 1) != 0);
      if (*(_QWORD *)(*(_QWORD *)(result + 8) + 24) != a3)
        result = llvm::MachineOperand::setReg(result, v10);
    }
    while (v8);
  }
  else
  {
LABEL_6:
    v10 = a2;
  }
  if ((v10 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a6 + 416)
    || !*(_QWORD *)(*(_QWORD *)(a6 + 408) + 8 * (v10 & 0x7FFFFFFF)))
  {
    return sub_1C4851220(a6, v10);
  }
  return result;
}

uint64_t sub_1C51DF50C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v2 = result + 48;
  v3 = *(_QWORD *)(result + 56);
  if (v3 != result + 48)
  {
    do
    {
      v5 = **(unsigned __int16 **)(v3 + 16);
      if (v5 != 69 && v5 != 0)
        break;
      v7 = *(_DWORD *)(v3 + 40);
      if (v7 != 1)
      {
        v8 = 1;
        while (1)
        {
          v9 = v8 + 1;
          if (*(_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * v9 + 16) == a2)
            break;
          v8 += 2;
          if (v7 == v8)
            goto LABEL_13;
        }
        llvm::MachineInstr::removeOperand(v3, v9);
        result = llvm::MachineInstr::removeOperand(v3, v8);
      }
LABEL_13:
      if ((*(_BYTE *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          v3 = *(_QWORD *)(v3 + 8);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::computeDelta(llvm::ModuloScheduleExpander *this, llvm::MachineInstr *a2, unsigned int *a3)
{
  const llvm::TargetRegisterInfo *v6;
  int MemOperandWithOffset;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  llvm::MachineOperand *v25;

  v6 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 16)
                                                                           + 176))(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                               + 16));
  v24 = 0;
  v25 = 0;
  v23 = 0;
  MemOperandWithOffset = llvm::TargetInstrInfo::getMemOperandWithOffset(*((llvm::TargetInstrInfo **)this + 4), a2, &v25, &v24, &v23, v6);
  result = 0;
  if (MemOperandWithOffset)
    v9 = !v23;
  else
    v9 = 0;
  if (v9)
  {
    if (*(_BYTE *)v25)
      return 0;
    v10 = *((unsigned int *)v25 + 1);
    v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v12 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(_QWORD *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v11 + 272) + 8 * v10);
    v13 = *v12;
    if (!v13)
      return 0;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
        return 0;
    }
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14)
      return 0;
    v15 = **(unsigned __int16 **)(v14 + 16);
    if (v15 != 69 && v15 != 0)
      goto LABEL_35;
    v17 = *(_DWORD *)(v14 + 40);
    if (v17 == 1)
    {
LABEL_26:
      v20 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 32);
      v19 = 1;
      while (*(_QWORD *)(v18 + 32 * (v19 + 1) + 16) != *((_QWORD *)a2 + 3))
      {
        v19 += 2;
        if (v17 == v19)
          goto LABEL_26;
      }
      v20 = *(unsigned int *)(v18 + 32 * v19 + 4);
      if ((v20 & 0x80000000) != 0)
      {
        v21 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
LABEL_30:
        v22 = *v21;
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 3) & 1) != 0 || (v22 = *(_QWORD *)(v22 + 24)) != 0 && (*(_BYTE *)(v22 + 3) & 1) != 0)
          {
            if (*(_QWORD *)(v22 + 8))
            {
LABEL_35:
              result = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 712))(*((_QWORD *)this + 4));
              if ((_DWORD)result == 1)
                *a3 = 0;
              return result;
            }
          }
        }
        return 0;
      }
    }
    v21 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v20);
    goto LABEL_30;
  }
  return result;
}

void sub_1C51DF784(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *i;
  char *v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v30 = *(char **)(a1 + 24);
      v31 = (uint64_t)&v30[-*(_QWORD *)a1];
      if (v6 < v31)
      {
        if (v30 != v5)
        {
          *(_QWORD *)&v57 = operator new(0x1000uLL);
          sub_1C61351F0(a1, &v57);
          goto LABEL_25;
        }
        *(_QWORD *)&v57 = operator new(0x1000uLL);
        sub_1C6135314((void **)a1, &v57);
        v32 = *(_QWORD **)(a1 + 8);
        v33 = *(char **)(a1 + 16);
        v36 = *v32;
        v34 = (char *)(v32 + 1);
        v35 = v36;
        *(_QWORD *)(a1 + 8) = v34;
        if (v33 == *(char **)(a1 + 24))
        {
          v37 = *(char **)a1;
          if ((unint64_t)v34 <= *(_QWORD *)a1)
          {
            if (v33 == v37)
              v49 = 1;
            else
              v49 = (v33 - v37) >> 2;
            if (v49 >> 61)
              goto LABEL_57;
            v50 = (char *)operator new(8 * v49);
            v51 = &v50[8 * (v49 >> 2)];
            v52 = v33 - v34;
            v25 = v33 == v34;
            v33 = v51;
            if (!v25)
            {
              v33 = &v51[v52 & 0xFFFFFFFFFFFFFFF8];
              v53 = 8 * (v52 >> 3);
              v54 = &v50[8 * (v49 >> 2)];
              do
              {
                v55 = *(_QWORD *)v34;
                v34 += 8;
                *(_QWORD *)v54 = v55;
                v54 += 8;
                v53 -= 8;
              }
              while (v53);
            }
            *(_QWORD *)a1 = v50;
            *(_QWORD *)(a1 + 8) = v51;
            *(_QWORD *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 24) = &v50[8 * v49];
            if (v37)
            {
              operator delete(v37);
              v33 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v38 = (uint64_t)&v34[-*(_QWORD *)a1] >> 3;
            if (v38 >= -1)
              v39 = v38 + 1;
            else
              v39 = v38 + 2;
            v40 = -(v39 >> 1);
            v41 = v39 >> 1;
            v42 = &v34[-8 * v41];
            v43 = v33 - v34;
            if (v43)
            {
              memmove(&v34[-8 * v41], v34, v43);
              v34 = *(char **)(a1 + 8);
            }
            v33 = &v42[v43];
            *(_QWORD *)(a1 + 8) = &v34[8 * v40];
            *(_QWORD *)(a1 + 16) = v33;
          }
        }
        *(_QWORD *)v33 = v35;
        goto LABEL_24;
      }
      v44 = v31 >> 2;
      if (v30 == *(char **)a1)
        v45 = 1;
      else
        v45 = v44;
      v59 = a1 + 24;
      if (!(v45 >> 61))
      {
        *(_QWORD *)&v57 = operator new(8 * v45);
        *((_QWORD *)&v57 + 1) = v57 + v6;
        *(_QWORD *)&v58 = v57 + v6;
        *((_QWORD *)&v58 + 1) = v57 + 8 * v45;
        v56 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v57, &v56);
        for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_1C6135314((void **)&v57, i))
          --i;
        v47 = *(char **)a1;
        v48 = v58;
        *(_OWORD *)a1 = v57;
        *(_OWORD *)(a1 + 16) = v48;
        if (v47)
          operator delete(v47);
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_23:
        *(_QWORD *)v5 = v12;
LABEL_24:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_25:
        v4 = *(char **)(a1 + 8);
        v8 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 32) + v8;
        goto LABEL_26;
      }
      v14 = *(char **)a1;
      if ((unint64_t)v11 > *(_QWORD *)a1)
      {
        v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
        if (v15 >= -1)
          v16 = v15 + 1;
        else
          v16 = v15 + 2;
        v17 = -(v16 >> 1);
        v18 = v16 >> 1;
        v19 = &v11[-8 * v18];
        v20 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v18], v11, v5 - v11);
          v5 = *(char **)(a1 + 8);
        }
        v21 = &v5[8 * v17];
        v5 = &v19[v20];
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = &v19[v20];
        goto LABEL_23;
      }
      if (v5 == v14)
        v22 = 1;
      else
        v22 = (v5 - v14) >> 2;
      if (!(v22 >> 61))
      {
        v23 = (char *)operator new(8 * v22);
        v24 = &v23[8 * (v22 >> 2)];
        v26 = v5 - v11;
        v25 = v5 == v11;
        v5 = v24;
        if (!v25)
        {
          v5 = &v24[v26 & 0xFFFFFFFFFFFFFFF8];
          v27 = 8 * (v26 >> 3);
          v28 = &v23[8 * (v22 >> 2)];
          do
          {
            v29 = *(_QWORD *)v11;
            v11 += 8;
            *(_QWORD *)v28 = v29;
            v28 += 8;
            v27 -= 8;
          }
          while (v27);
        }
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v23[8 * v22];
        if (v14)
        {
          operator delete(v14);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_23;
      }
    }
LABEL_57:
    sub_1C4764EE4();
  }
LABEL_26:
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  *(_QWORD *)(a1 + 40) = v8 + 1;
}

_QWORD *llvm::PeelingModuloScheduleExpander::filterInstructions(llvm::PeelingModuloScheduleExpander *this, llvm::MachineBasicBlock *a2, int a3)
{
  llvm::MachineBasicBlock *v3;
  _QWORD *result;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int EquivalentRegisterIn;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int32x2_t *v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  llvm::MachineBasicBlock *v44;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[9];

  v3 = a2;
  v49[8] = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)llvm::MachineBasicBlock::getFirstInstrTerminator(a2);
  v6 = result;
  v7 = (char *)v3 + 48;
  v43 = (char *)v3 + 48;
  v44 = v3;
  while (1)
  {
    v8 = (uint64_t)v6;
    v9 = v7;
    if (*((char **)v3 + 7) != v7)
    {
      v9 = (char *)*((_QWORD *)v3 + 7);
      while (!**((_WORD **)v9 + 2) || **((_WORD **)v9 + 2) == 69)
      {
        v9 = (char *)*((_QWORD *)v9 + 1);
        if (v9 == v7)
        {
          v9 = v7;
          break;
        }
      }
    }
    if (v6 == (_QWORD *)(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
      return result;
    v6 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFF8);
    result = (_QWORD *)sub_1C51DFE64((uint64_t *)this, v8);
    if ((_DWORD)result != -1 && (int)result < a3)
    {
      v10 = *(_QWORD *)(v8 + 32);
      v11 = *(_QWORD *)(v8 + 16);
      v12 = *(unsigned __int8 *)(v11 + 4);
      if ((*(_BYTE *)(v11 + 8) & 2) == 0 || (v38 = *(_DWORD *)(v8 + 40), v38 == v12))
      {
        v13 = v12;
      }
      else
      {
        v39 = v38 - 1;
        v13 = v12;
        do
        {
          v40 = *(_DWORD *)(v10 + 32 * v12);
          if ((v40 & 0x10000FF) != 0x1000000)
            break;
          v13 += (v40 & 0x2000000) == 0;
          if (v39 == v12)
            break;
          ++v12;
        }
        while ((v40 & 0x2000000) == 0);
      }
      v46 = v6;
      if (v13)
      {
        v14 = v10 + 32 * v13;
        do
        {
          v47 = v49;
          v48 = 0x400000000;
          v15 = *((_QWORD *)this + 3);
          v16 = *(unsigned int *)(v10 + 4);
          if ((v16 & 0x80000000) != 0)
            v17 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
          else
            v17 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v16);
          v18 = *v17;
          if (*v17)
          {
            while ((*(_BYTE *)(v18 + 3) & 1) != 0)
            {
              v18 = *(_QWORD *)(v18 + 24);
              if (!v18)
                goto LABEL_33;
            }
            v19 = *(_QWORD *)(v18 + 8);
LABEL_23:
            EquivalentRegisterIn = llvm::PeelingModuloScheduleExpander::getEquivalentRegisterIn((uint64_t)this, *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4), *(_QWORD *)(v8 + 24));
            sub_1C6202DAC((uint64_t)&v47, v19, EquivalentRegisterIn);
            v21 = *(_QWORD *)(v18 + 8);
            while (1)
            {
              v18 = *(_QWORD *)(v18 + 24);
              if (!v18)
                break;
              if ((*(_BYTE *)(v18 + 3) & 1) == 0)
              {
                v19 = *(_QWORD *)(v18 + 8);
                if (v19 != v21)
                  goto LABEL_23;
              }
            }
            v22 = (char *)v47;
            v23 = (char *)v47 + 16 * v48;
            if ((_DWORD)v48)
            {
              do
              {
                v24 = *(_QWORD *)v22;
                v25 = *(_DWORD *)(v10 + 4);
                v26 = *((_DWORD *)v22 + 2);
                v27 = *(_QWORD *)(**((_QWORD **)this + 3) + 16);
                v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 176))(v27);
                llvm::MachineInstr::substituteRegister(v24, v25, v26, 0, v28);
                v22 += 16;
              }
              while (v22 != v23);
              v22 = (char *)v47;
            }
            if (v22 != (char *)v49)
              free(v22);
          }
LABEL_33:
          v10 += 32;
        }
        while (v10 != v14);
      }
      v29 = *((_QWORD *)this + 5);
      v7 = v43;
      v3 = v44;
      v6 = v46;
      if (v29)
      {
        v30 = *(int32x2_t **)(v29 + 288);
        v31 = v30[46];
        v32 = v30[48].u32[0];
        if (!(_DWORD)v32)
          goto LABEL_47;
        LODWORD(v33) = (v32 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        v34 = (uint64_t *)(*(_QWORD *)&v31 + 16 * v33);
        v35 = *v34;
        if (*v34 != v8)
        {
          v36 = 1;
          while (v35 != -4096)
          {
            v37 = v33 + v36++;
            v33 = v37 & (v32 - 1);
            v35 = *(_QWORD *)(*(_QWORD *)&v31 + 16 * v33);
            if (v35 == v8)
            {
              v34 = (uint64_t *)(*(_QWORD *)&v31 + 16 * v33);
              goto LABEL_48;
            }
          }
LABEL_47:
          v34 = (uint64_t *)(*(_QWORD *)&v31 + 16 * v32);
        }
LABEL_48:
        if (v34 != (uint64_t *)(*(_QWORD *)&v31 + 16 * v32))
        {
          v41 = v34[1] & 0xFFFFFFFFFFFFFFF8;
          *v34 = -8192;
          v30[47] = vadd_s32(v30[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v41 + 16) = 0;
        }
      }
      if ((*(_BYTE *)v8 & 4) != 0)
      {
        v42 = v8;
      }
      else
      {
        v42 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          v42 = v8;
          do
            v42 = *(_QWORD *)(v42 + 8);
          while ((*(_WORD *)(v42 + 44) & 8) != 0);
        }
      }
      result = (_QWORD *)sub_1C487FE80(*(_QWORD *)(v8 + 24) + 40, v8, *(_QWORD *)(v42 + 8));
    }
  }
}

uint64_t sub_1C51DFE64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v8 = a2;
  v4 = a1 + 29;
  if (sub_1C6144BDC(a1[29], *((_DWORD *)a1 + 62), a2, &v10))
  {
    v2 = sub_1C61B6040(v4, &v8)[1];
    v8 = v2;
  }
  v5 = *a1;
  v9 = v2;
  v10 = 0;
  if (sub_1C61252B8((uint64_t *)(v5 + 56), &v9, &v10))
    v6 = v10 == *(_QWORD *)(v5 + 56) + 16 * *(unsigned int *)(v5 + 72);
  else
    v6 = 1;
  if (v6)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v10 + 8);
}

unint64_t llvm::PeelingModuloScheduleExpander::CreateLCSSAExitingBlock(llvm::PeelingModuloScheduleExpander *this)
{
  llvm::MachineBasicBlock *v2;
  uint64_t v3;
  llvm::MachineBasicBlock **v4;
  llvm::MachineBasicBlock *v5;
  llvm::BasicBlock *v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  llvm::MachineBasicBlock *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  llvm::MachineBasicBlock *v52;
  unsigned int IncompleteVirtualRegister;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 6);
  v3 = *((_QWORD *)v2 + 4);
  v4 = (llvm::MachineBasicBlock **)*((_QWORD *)v2 + 11);
  v5 = *v4;
  if (*v4 == v2)
    v5 = v4[1];
  v6 = (llvm::BasicBlock *)*((_QWORD *)v2 + 2);
  v7 = *(_QWORD *)(v3 + 312);
  v52 = v5;
  if (v7)
    *(_QWORD *)(v3 + 312) = *(_QWORD *)v7;
  else
    v7 = sub_1C484358C(v3 + 128, 232, 3);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  *(_DWORD *)(v7 + 24) = -1;
  v8 = (unint64_t *)(v7 + 48);
  *(_QWORD *)(v7 + 48) = (v7 + 48) | 4;
  *(_QWORD *)(v7 + 56) = v7 + 48;
  *(_BYTE *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 121) = 0u;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_BYTE *)(v7 + 176) = 0;
  *(_DWORD *)(v7 + 187) = 0;
  *(_QWORD *)(v7 + 180) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 199) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v7;
  if (v6)
  {
    *(_QWORD *)(v7 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v6);
    *(_QWORD *)(v7 + 144) = v9;
  }
  v10 = *(unint64_t **)(*((_QWORD *)this + 6) + 8);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v3 + 320, v7);
  v11 = *v10;
  *(_QWORD *)v7 = *v10;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v11 + 8) = v7;
  *v10 = v7;
  v12 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 6);
  v13 = *((_QWORD *)v12 + 7);
  if ((llvm::MachineBasicBlock *)v13 != (llvm::MachineBasicBlock *)((char *)v12 + 48))
  {
    v14 = (_QWORD *)*((_QWORD *)v12 + 7);
    while (!*(_WORD *)v14[2] || *(_WORD *)v14[2] == 69)
    {
      v14 = (_QWORD *)v14[1];
      if (v14 == (_QWORD *)((char *)v12 + 48))
      {
        v14 = (_QWORD *)((char *)v12 + 48);
        break;
      }
    }
    if ((_QWORD *)v13 != v14)
    {
      do
      {
        v15 = *((_QWORD *)this + 3);
        v16 = *(_QWORD *)(v13 + 32);
        v17 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (*(_DWORD *)(v16 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        v18 = *(unsigned int *)(v16 + 100);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v15, "", 0);
        *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v17;
        v19 = *(_QWORD *)(v15 + 8);
        if (v19)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 24))(v19, IncompleteVirtualRegister);
        v61 = v63;
        v62 = 0x400000000;
        v20 = *((_QWORD *)this + 3);
        if ((v18 & 0x80000000) != 0)
          v21 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
        else
          v21 = (uint64_t *)(*(_QWORD *)(v20 + 272) + 8 * v18);
        v22 = *v21;
        if (*v21)
        {
          while ((*(_BYTE *)(v22 + 3) & 1) != 0)
          {
            v22 = *(_QWORD *)(v22 + 24);
            if (!v22)
              goto LABEL_35;
          }
          v23 = 0;
          v24 = *(_QWORD *)(v22 + 8);
LABEL_24:
          if (*(_QWORD *)(v24 + 24) != *((_QWORD *)this + 6))
          {
            if (v23 >= HIDWORD(v62))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v23 + 1, 8);
              v23 = v62;
            }
            *((_QWORD *)v61 + v23) = v24;
            v23 = v62 + 1;
            LODWORD(v62) = v62 + 1;
            v24 = *(_QWORD *)(v22 + 8);
          }
          while (1)
          {
            v22 = *(_QWORD *)(v22 + 24);
            if (!v22)
              break;
            if ((*(_BYTE *)(v22 + 3) & 1) == 0 && *(_QWORD *)(v22 + 8) != v24)
            {
              v24 = *(_QWORD *)(v22 + 8);
              goto LABEL_24;
            }
          }
          if (v23)
          {
            v25 = (uint64_t *)v61;
            v26 = 8 * v23;
            do
            {
              v27 = *v25++;
              v28 = *(_QWORD *)(**((_QWORD **)this + 3) + 16);
              v29 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 176))(v28);
              llvm::MachineInstr::substituteRegister(v27, v18, IncompleteVirtualRegister, 0, v29);
              v26 -= 8;
            }
            while (v26);
          }
        }
LABEL_35:
        v54 = 0;
        v55 = 0;
        v30 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v31 = *(llvm::MachineFunction **)(v7 + 32);
        v56 = 0;
        v32 = *((_QWORD *)v31 + 28);
        if (v32)
        {
          *((_QWORD *)v31 + 28) = *(_QWORD *)v32;
          v57 = 0;
        }
        else
        {
          v32 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
          v57 = v56;
          if (v56)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v56, v56, (uint64_t)&v57);
            v56 = 0;
          }
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v31, v30, &v57, 0);
        if (v57)
          llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
        if (v56)
          llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
        v33 = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v32 + 24) = v33;
        v34 = *(_QWORD *)(v33 + 32);
        v35 = *(unsigned int *)(v32 + 40);
        if ((_DWORD)v35)
        {
          v39 = *(_QWORD *)(v32 + 32);
          v40 = *(_QWORD *)(v34 + 40);
          v41 = 32 * v35;
          do
          {
            if (!*(_BYTE *)v39)
            {
              v42 = *(unsigned int *)(v39 + 4);
              if ((int)v42 >= 0)
                v43 = (uint64_t *)(*(_QWORD *)(v40 + 272) + 8 * v42);
              else
                v43 = (uint64_t *)(*(_QWORD *)(v40 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
              v44 = *v43;
              if (*v43)
              {
                v45 = *(_QWORD *)(v44 + 16);
                *(_QWORD *)(v44 + 16) = v39;
                *(_QWORD *)(v39 + 16) = v45;
                if ((*(_BYTE *)(v39 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v39 + 24) = v44;
                }
                else
                {
                  *(_QWORD *)(v39 + 24) = 0;
                  v43 = (uint64_t *)(v45 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v39 + 16) = v39;
                *(_QWORD *)(v39 + 24) = 0;
              }
              *v43 = v39;
            }
            v39 += 32;
            v41 -= 32;
          }
          while (v41);
        }
        v36 = *(_QWORD *)(v34 + 728);
        if (v36)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 24))(v36, v32);
        v37 = *v8 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v32 = v37 | *(_QWORD *)v32 & 7;
        *(_QWORD *)(v32 + 8) = v8;
        *(_QWORD *)(v37 + 8) = v32;
        *v8 = *v8 & 7 | v32;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        LODWORD(v57) = 0x1000000;
        HIDWORD(v57) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v31, (const llvm::MachineOperand *)&v57);
        v58 = 0;
        LODWORD(v57) = 0;
        HIDWORD(v57) = v18;
        v59 = 0;
        v60 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v31, (const llvm::MachineOperand *)&v57);
        v38 = *((_QWORD *)this + 6);
        v58 = 0;
        v59 = v38;
        LODWORD(v57) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v31, (const llvm::MachineOperand *)&v57);
        if (v54)
          llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
        v55 = (unsigned __int8 *)v32;
        v57 = (unsigned __int8 *)v7;
        v58 = v13;
        sub_1C62047D8((uint64_t)this + 256, (uint64_t *)&v57)[2] = v32;
        sub_1C61B6040((uint64_t *)this + 29, &v55)[1] = v13;
        if (v61 != v63)
          free(v61);
        if (!v13 || (*(_BYTE *)v13 & 4) == 0)
        {
          while ((*(_WORD *)(v13 + 44) & 8) != 0)
            v13 = *(_QWORD *)(v13 + 8);
        }
        v13 = *(_QWORD *)(v13 + 8);
      }
      while ((_QWORD *)v13 != v14);
      v12 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 6);
    }
  }
  llvm::MachineBasicBlock::replaceSuccessor(v12, v52, (llvm::MachineBasicBlock *)v7);
  llvm::MachineBasicBlock::replacePhiUsesWith((uint64_t)v52, *((llvm::MachineBasicBlock **)this + 6), (llvm::MachineBasicBlock *)v7);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v7, v52, -1);
  v56 = 0;
  v57 = 0;
  v61 = v63;
  v62 = 0x400000000;
  (*(void (**)(_QWORD, _QWORD, unsigned __int8 **, unsigned __int8 **, void **, _QWORD))(**((_QWORD **)this + 4)
                                                                                                  + 248))(*((_QWORD *)this + 4), *((_QWORD *)this + 6), &v57, &v56, &v61, 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 264))(*((_QWORD *)this + 4), *((_QWORD *)this + 6), 0);
  v46 = *((_QWORD *)this + 4);
  v47 = *((_QWORD *)this + 6);
  if (v57 == (unsigned __int8 *)v52)
    v48 = (unsigned __int8 *)v7;
  else
    v48 = v57;
  if (v56 == (unsigned __int8 *)v52)
    v49 = (unsigned __int8 *)v7;
  else
    v49 = v56;
  v55 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v46 + 272))(v46, v47, v48, v49, v61, v62, &v55, 0);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  v50 = *((_QWORD *)this + 4);
  v55 = 0;
  (*(void (**)(uint64_t, unint64_t, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v50 + 272))(v50, v7, v52, 0, 0, 0, &v55, 0);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  if (v61 != v63)
    free(v61);
  return v7;
}

uint64_t sub_1C51E05D0(uint64_t result, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = result;
  v7 = result + 48;
  v30 = result + 48;
  do
  {
    v8 = *(_QWORD *)(v31 + 56);
    v9 = v7;
    if (v8 != v7)
    {
      v9 = *(_QWORD *)(v31 + 56);
      while (!**(_WORD **)(v9 + 16) || **(_WORD **)(v9 + 16) == 69)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9 == v7)
        {
          v9 = v7;
          break;
        }
      }
    }
    if (v8 == v9)
      return result;
    v10 = 0;
    do
    {
      if (!v8 || (v11 = v8, (*(_BYTE *)v8 & 4) == 0))
      {
        v11 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          v11 = v8;
          do
            v11 = *(_QWORD *)(v11 + 8);
          while ((*(_WORD *)(v11 + 44) & 8) != 0);
        }
      }
      v12 = *(_QWORD *)(v11 + 8);
      result = sub_1C4778650((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4));
      if ((_DWORD)result)
      {
        if (a3)
          goto LABEL_17;
      }
      else
      {
        if ((a4 & 1) != 0)
          goto LABEL_41;
        result = llvm::MachineInstr::getNumExplicitOperands(v8);
        if ((_DWORD)result != 3)
          goto LABEL_41;
        sub_1C51A3F30(a2, *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36), *(_QWORD *)(a2[3] + 16 * (*(_DWORD *)(*(_QWORD *)(v8 + 32) + 36) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a2[3] + 16 * (*(_DWORD *)(*(_QWORD *)(v8 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
        v21 = *(_QWORD *)(v8 + 32);
        v22 = *(unsigned int *)(v21 + 4);
        v23 = *(_DWORD *)(v21 + 36);
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 16) + 176))(*(_QWORD *)(*a2 + 16));
        if ((v22 & 0x80000000) != 0)
          v25 = (uint64_t *)(a2[3] + 16 * (v22 & 0x7FFFFFFF) + 8);
        else
          v25 = (uint64_t *)(a2[34] + 8 * v22);
        v26 = *v25;
        if (*v25)
        {
          do
          {
            v27 = *(_QWORD *)(v26 + 24);
            if (v23 - 1 <= 0x3FFFFFFE)
              llvm::MachineOperand::substPhysReg((unsigned int *)v26, v23, v24);
            else
              llvm::MachineOperand::setReg(v26, v23);
            v26 = v27;
          }
          while (v27);
        }
        if (a3)
        {
LABEL_17:
          v13 = *(int32x2_t **)(a3 + 288);
          v14 = v13[46];
          v15 = v13[48].u32[0];
          if (!(_DWORD)v15)
            goto LABEL_35;
          LODWORD(v16) = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          v17 = (uint64_t *)(*(_QWORD *)&v14 + 16 * v16);
          v18 = *v17;
          if (*v17 != v8)
          {
            v19 = 1;
            while (v18 != -4096)
            {
              v20 = v16 + v19++;
              v16 = v20 & (v15 - 1);
              v18 = *(_QWORD *)(*(_QWORD *)&v14 + 16 * v16);
              if (v18 == v8)
              {
                v17 = (uint64_t *)(*(_QWORD *)&v14 + 16 * v16);
                goto LABEL_36;
              }
            }
LABEL_35:
            v17 = (uint64_t *)(*(_QWORD *)&v14 + 16 * v15);
          }
LABEL_36:
          if (v17 != (uint64_t *)(*(_QWORD *)&v14 + 16 * v15))
          {
            v28 = v17[1] & 0xFFFFFFFFFFFFFFF8;
            *v17 = -8192;
            v13[47] = vadd_s32(v13[47], (int32x2_t)0x1FFFFFFFFLL);
            *(_QWORD *)(v28 + 16) = 0;
          }
        }
      }
      v29 = v8;
      if ((*(_BYTE *)v8 & 4) == 0)
      {
        v29 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          v29 = v8;
          do
            v29 = *(_QWORD *)(v29 + 8);
          while ((*(_WORD *)(v29 + 44) & 8) != 0);
        }
      }
      result = sub_1C487FE80(*(_QWORD *)(v8 + 24) + 40, v8, *(_QWORD *)(v29 + 8));
      v10 = 1;
LABEL_41:
      v8 = v12;
    }
    while (v12 != v9);
    v7 = v30;
  }
  while ((v10 & 1) != 0);
  return result;
}

uint64_t llvm::PeelingModuloScheduleExpander::rewriteUsesOf(llvm::PeelingModuloScheduleExpander *this, llvm::MachineInstr *a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t UniqueVRegDef;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int EquivalentRegisterIn;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int32x2_t *v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::MachineInstr *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  llvm::MachineInstr *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x1E0C80C00];
  v4 = **((unsigned __int16 **)a2 + 2);
  if (v4 != 69 && v4 != 0)
  {
    result = sub_1C51DFE64((uint64_t *)this, (uint64_t)a2);
    if ((_DWORD)result == -1)
      return result;
    v18 = result;
    result = sub_1C61B57BC(*((_QWORD *)this + 20), *((_DWORD *)this + 44), *((_QWORD *)a2 + 3), &v53);
    if (!(_DWORD)result)
      return result;
    v52 = *((_QWORD *)a2 + 3);
    result = (uint64_t)sub_1C62049DC((uint64_t)this + 160, &v52);
    if (((*(_QWORD *)(*(_QWORD *)(result + 8) + 8 * (v18 >> 6)) >> v18) & 1) != 0)
      return result;
    v19 = *((_QWORD *)a2 + 4);
    v20 = *((_QWORD *)a2 + 2);
    v21 = *(unsigned __int8 *)(v20 + 4);
    if ((*(_BYTE *)(v20 + 8) & 2) == 0 || (v47 = *((_DWORD *)a2 + 10), v47 == v21))
    {
      v22 = v21;
    }
    else
    {
      v48 = v47 - 1;
      v22 = v21;
      do
      {
        v49 = *(_DWORD *)(v19 + 32 * v21);
        if ((v49 & 0x10000FF) != 0x1000000)
          break;
        v22 += (v49 & 0x2000000) == 0;
        if (v48 == v21)
          break;
        ++v21;
      }
      while ((v49 & 0x2000000) == 0);
    }
    if (v22)
    {
      v23 = v19 + 32 * v22;
      do
      {
        v53 = v55;
        v54 = 0x400000000;
        v24 = *((_QWORD *)this + 3);
        v25 = *(unsigned int *)(v19 + 4);
        if ((v25 & 0x80000000) != 0)
          v26 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        else
          v26 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v25);
        v27 = *v26;
        if (*v26)
        {
          while ((*(_BYTE *)(v27 + 3) & 1) != 0)
          {
            v27 = *(_QWORD *)(v27 + 24);
            if (!v27)
              goto LABEL_46;
          }
          v28 = *(_QWORD *)(v27 + 8);
LABEL_36:
          EquivalentRegisterIn = llvm::PeelingModuloScheduleExpander::getEquivalentRegisterIn((uint64_t)this, *(_DWORD *)(*(_QWORD *)(v28 + 32) + 4), *((_QWORD *)a2 + 3));
          sub_1C6202DAC((uint64_t)&v53, v28, EquivalentRegisterIn);
          v30 = *(_QWORD *)(v27 + 8);
          while (1)
          {
            v27 = *(_QWORD *)(v27 + 24);
            if (!v27)
              break;
            if ((*(_BYTE *)(v27 + 3) & 1) == 0)
            {
              v28 = *(_QWORD *)(v27 + 8);
              if (v28 != v30)
                goto LABEL_36;
            }
          }
          v31 = (char *)v53;
          v32 = (char *)v53 + 16 * v54;
          if ((_DWORD)v54)
          {
            do
            {
              v33 = *(_QWORD *)v31;
              v34 = *(_DWORD *)(v19 + 4);
              v35 = *((_DWORD *)v31 + 2);
              v36 = *(_QWORD *)(**((_QWORD **)this + 3) + 16);
              v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 176))(v36);
              llvm::MachineInstr::substituteRegister(v33, v34, v35, 0, v37);
              v31 += 16;
            }
            while (v31 != v32);
            v31 = (char *)v53;
          }
          if (v31 != (char *)v55)
            free(v31);
        }
LABEL_46:
        v19 += 32;
      }
      while (v19 != v23);
    }
    v38 = *((_QWORD *)this + 5);
    if (!v38)
      goto LABEL_63;
    v39 = *(int32x2_t **)(v38 + 288);
    v40 = v39[46];
    v41 = v39[48].u32[0];
    if ((_DWORD)v41)
    {
      LODWORD(v42) = (v41 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v43 = *(_QWORD *)&v40 + 16 * v42;
      v44 = *(llvm::MachineInstr **)v43;
      if (*(llvm::MachineInstr **)v43 == a2)
        goto LABEL_61;
      v45 = 1;
      while (v44 != (llvm::MachineInstr *)-4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v41 - 1);
        v44 = *(llvm::MachineInstr **)(*(_QWORD *)&v40 + 16 * v42);
        if (v44 == a2)
        {
          v43 = *(_QWORD *)&v40 + 16 * v42;
          goto LABEL_61;
        }
      }
    }
    v43 = *(_QWORD *)&v40 + 16 * v41;
LABEL_61:
    if (v43 != *(_QWORD *)&v40 + 16 * v41)
    {
      v50 = *(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v43 = -8192;
      v39[47] = vadd_s32(v39[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v50 + 16) = 0;
    }
LABEL_63:
    v51 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v51 = a2;
      if ((*((_WORD *)a2 + 22) & 8) != 0)
      {
        v51 = a2;
        do
          v51 = (llvm::MachineInstr *)*((_QWORD *)v51 + 1);
        while ((*((_WORD *)v51 + 22) & 8) != 0);
      }
    }
    return sub_1C487FE80(*((_QWORD *)a2 + 3) + 40, (uint64_t)a2, *((_QWORD *)v51 + 1));
  }
  v6 = *((_QWORD *)a2 + 4);
  v7 = *(unsigned int *)(v6 + 4);
  v8 = *(_DWORD *)(v6 + 100);
  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*((_QWORD *)this + 3), v8);
  v10 = sub_1C51DFE64((uint64_t *)this, UniqueVRegDef);
  if (v10 != -1)
  {
    v53 = (void *)*((_QWORD *)a2 + 3);
    if (((*(_QWORD *)(sub_1C62049DC((uint64_t)this + 184, (uint64_t *)&v53)[1] + 8 * (v10 >> 6)) >> v10) & 1) == 0)
      v8 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 36);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 3);
  *(_QWORD *)(v11[3] + 16 * (v8 & 0x7FFFFFFF)) = *(_QWORD *)(v11[3] + 16 * (v7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v11 + 16) + 176))(*(_QWORD *)(*v11 + 16));
  if ((v7 & 0x80000000) != 0)
    v13 = (uint64_t *)(v11[3] + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(v11[34] + 8 * v7);
  v14 = *v13;
  if (*v13)
  {
    do
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v8 - 1 <= 0x3FFFFFFE)
        llvm::MachineOperand::substPhysReg((unsigned int *)v14, v8, v12);
      else
        llvm::MachineOperand::setReg(v14, v8);
      v14 = v15;
    }
    while (v15);
  }
  result = llvm::MachineOperand::setReg(*((_QWORD *)a2 + 4), v7);
  v16 = *((unsigned int *)this + 96);
  if (v16 >= *((_DWORD *)this + 97))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 376, (uint64_t)this + 392, v16 + 1, 8);
    LODWORD(v16) = *((_DWORD *)this + 96);
  }
  *(_QWORD *)(*((_QWORD *)this + 47) + 8 * v16) = a2;
  ++*((_DWORD *)this + 96);
  return result;
}

uint64_t llvm::PeelingModuloScheduleExpander::rewriteKernel(llvm::PeelingModuloScheduleExpander *this)
{
  _QWORD v2[16];

  sub_1C51E0DA4((uint64_t)v2, **(_QWORD ***)this, *(_QWORD *)this, *((_QWORD *)this + 6));
  sub_1C51E0E40((uint64_t)v2);
  MEMORY[0x1CAA32FB4](v2[13], 4);
  MEMORY[0x1CAA32FB4](v2[10], 4);
  return MEMORY[0x1CAA32FB4](v2[7], 8);
}

uint64_t sub_1C51E0DA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ExitBlock;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader((uint64_t)a2);
  ExitBlock = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlock(a2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 40);
  *(_QWORD *)(a1 + 24) = ExitBlock;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 16));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v9 + 64);
  v11 = *v10;
  *(_QWORD *)(a1 + 16) = *v10;
  if (v11 == v9)
    *(_QWORD *)(a1 + 16) = v10[1];
  return a1;
}

uint64_t sub_1C51E0E40(uint64_t a1)
{
  unint64_t FirstTerminator;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  int32x2_t *v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  _DWORD *v61;
  unsigned int IncompleteVirtualRegister;
  uint64_t UniqueVRegDef;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::MachineFunction *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  llvm::MachineInstr *v118;
  uint64_t v119;
  int v120;
  uint64_t result;
  uint64_t v122;
  uint64_t v123;
  uint64_t j;
  unsigned __int16 *v125;
  int v126;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  llvm::MachineInstr *v143;
  llvm::MachineInstr *v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  llvm::MachineFunction *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  void *__dst;
  uint64_t v157;
  _QWORD v158[6];

  v158[4] = *MEMORY[0x1E0C80C00];
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 8));
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  if (v4 == v3)
  {
    v6 = 0;
  }
  else
  {
    v5 = (_QWORD *)FirstTerminator;
    v6 = 0;
    do
    {
      v7 = *v3;
      if (**(_WORD **)(*v3 + 16) && **(_WORD **)(*v3 + 16) != 69)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 32);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 728);
            if (v10)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *v3);
            v11 = *(unsigned int *)(v7 + 40);
            if ((_DWORD)v11)
            {
              v12 = *(_QWORD *)(v7 + 32);
              v13 = *(_QWORD *)(v9 + 40);
              v14 = 32 * v11;
              do
              {
                if (!*(_BYTE *)v12)
                {
                  v15 = *(unsigned int *)(v12 + 4);
                  if ((v15 & 0x80000000) != 0)
                    v16 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
                  else
                    v16 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v15);
                  v17 = *v16;
                  v19 = *(_QWORD *)(v12 + 16);
                  v18 = *(_QWORD *)(v12 + 24);
                  if (v12 != *v16)
                    v16 = (uint64_t *)(v19 + 24);
                  *v16 = v18;
                  if (v18)
                    v20 = v18;
                  else
                    v20 = v17;
                  *(_QWORD *)(v20 + 16) = v19;
                  *(_QWORD *)(v12 + 16) = 0;
                  *(_QWORD *)(v12 + 24) = 0;
                }
                v12 += 32;
                v14 -= 32;
              }
              while (v14);
            }
          }
          v21 = *(unint64_t **)(v7 + 8);
          v22 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
          *v21 = v22 | *v21 & 7;
          *(_QWORD *)(v22 + 8) = v21;
          *(_QWORD *)v7 &= 7uLL;
          *(_QWORD *)(v7 + 8) = 0;
        }
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
        *(_QWORD *)(v7 + 24) = v23;
        v24 = *(_QWORD *)(v23 + 32);
        v25 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v25)
        {
          v28 = *(_QWORD *)(v7 + 32);
          v29 = *(_QWORD *)(v24 + 40);
          v30 = 32 * v25;
          do
          {
            if (!*(_BYTE *)v28)
            {
              v31 = *(unsigned int *)(v28 + 4);
              if ((int)v31 >= 0)
                v32 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v31);
              else
                v32 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
              v33 = *v32;
              if (*v32)
              {
                v34 = *(_QWORD *)(v33 + 16);
                *(_QWORD *)(v33 + 16) = v28;
                *(_QWORD *)(v28 + 16) = v34;
                if ((*(_BYTE *)(v28 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v28 + 24) = v33;
                }
                else
                {
                  *(_QWORD *)(v28 + 24) = 0;
                  v32 = (uint64_t *)(v34 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v28 + 16) = v28;
                *(_QWORD *)(v28 + 24) = 0;
              }
              *v32 = v28;
            }
            v28 += 32;
            v30 -= 32;
          }
          while (v30);
        }
        v26 = *(_QWORD *)(v24 + 728);
        if (v26)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v7);
        v27 = *v5 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = v27 | *(_QWORD *)v7 & 7;
        *(_QWORD *)(v7 + 8) = v5;
        *(_QWORD *)(v27 + 8) = v7;
        *v5 = *v5 & 7 | v7;
        if (!v6)
          v6 = v7;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v35 = *(_QWORD *)(a1 + 8);
  v36 = v35 + 48;
  for (i = *(_QWORD *)(v35 + 56); i != v36; i = *(_QWORD *)(i + 8))
  {
    if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
    {
      v36 = i;
      break;
    }
  }
  if (v6 == v36)
    goto LABEL_74;
  do
  {
    v38 = *(_QWORD *)(a1 + 48);
    if (!v38)
      goto LABEL_62;
    v39 = *(int32x2_t **)(v38 + 288);
    v40 = v39[46];
    v41 = v39[48].u32[0];
    if ((_DWORD)v41)
    {
      LODWORD(v42) = (v41 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      v43 = (uint64_t *)(*(_QWORD *)&v40 + 16 * v42);
      v44 = *v43;
      if (*v43 == v36)
        goto LABEL_60;
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v41 - 1);
        v44 = *(_QWORD *)(*(_QWORD *)&v40 + 16 * v42);
        if (v44 == v36)
        {
          v43 = (uint64_t *)(*(_QWORD *)&v40 + 16 * v42);
          goto LABEL_60;
        }
      }
    }
    v43 = (uint64_t *)(*(_QWORD *)&v40 + 16 * v41);
LABEL_60:
    if (v43 != (uint64_t *)(*(_QWORD *)&v40 + 16 * v41))
    {
      v47 = v43[1] & 0xFFFFFFFFFFFFFFF8;
      *v43 = -8192;
      v39[47] = vadd_s32(v39[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v47 + 16) = 0;
    }
LABEL_62:
    if (!v36 || (v48 = v36, (*(_BYTE *)v36 & 4) == 0))
    {
      v48 = v36;
      if ((*(_WORD *)(v36 + 44) & 8) != 0)
      {
        v48 = v36;
        do
          v48 = *(_QWORD *)(v48 + 8);
        while ((*(_WORD *)(v48 + 44) & 8) != 0);
      }
    }
    v49 = *(_QWORD *)(v48 + 8);
    v50 = v36;
    if ((*(_BYTE *)v36 & 4) == 0)
    {
      v50 = v36;
      if ((*(_WORD *)(v36 + 44) & 8) != 0)
      {
        v50 = v36;
        do
          v50 = *(_QWORD *)(v50 + 8);
        while ((*(_WORD *)(v50 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v36 + 24) + 40, v36, *(_QWORD *)(v50 + 8));
    v36 = v49;
  }
  while (v49 != v6);
  v35 = *(_QWORD *)(a1 + 8);
LABEL_74:
  v51 = v35 + 48;
  v52 = *(_QWORD *)(v35 + 56);
  if (v52 != v35 + 48)
  {
    while (2)
    {
      v53 = *(_QWORD *)(v52 + 16);
      if (!*(_WORD *)v53 || *(_WORD *)v53 == 69)
      {
LABEL_192:
        if ((*(_BYTE *)v52 & 4) == 0)
          goto LABEL_195;
        goto LABEL_196;
      }
      v54 = *(_QWORD *)(v53 + 8);
      if ((*(_WORD *)(v52 + 44) & 0xC) != 0 && (*(_WORD *)(v52 + 44) & 4) == 0)
      {
        v119 = v52;
        if ((v54 & 0x200) != 0)
          goto LABEL_192;
        while ((*(_WORD *)(v119 + 44) & 8) != 0)
        {
          v119 = *(_QWORD *)(v119 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v119 + 16) + 9) & 2) != 0)
            goto LABEL_192;
        }
      }
      else if ((v54 & 0x200) != 0)
      {
        goto LABEL_192;
      }
      v56 = *(_QWORD *)(v52 + 32);
      v57 = *(unsigned __int8 *)(v53 + 4);
      v58 = *(unsigned int *)(v52 + 40);
      if ((v54 & 2) != 0)
      {
        if ((_DWORD)v58 == v57)
          goto LABEL_192;
        v59 = v57;
        do
        {
          v120 = *(_DWORD *)(v56 + 32 * v57);
          if ((v120 & 0x10000FF) != 0x1000000)
            break;
          v59 += (v120 & 0x2000000) == 0;
          if ((_DWORD)v58 - 1 == v57)
            break;
          ++v57;
        }
        while ((v120 & 0x2000000) == 0);
      }
      else
      {
        v59 = v57;
      }
      if (v59 == (_DWORD)v58)
        goto LABEL_192;
      v60 = (_DWORD *)(v56 + 32 * v58);
      v61 = (_DWORD *)(v56 + 32 * v59);
LABEL_86:
      if (*v61)
        goto LABEL_91;
      if ((*v61 & 0x2000000) != 0)
        goto LABEL_91;
      IncompleteVirtualRegister = v61[1];
      if (IncompleteVirtualRegister - 1 < 0x3FFFFFFF)
        goto LABEL_91;
      UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 32), v61[1]);
      if (!UniqueVRegDef)
      {
LABEL_90:
        llvm::MachineOperand::setReg((uint64_t)v61, IncompleteVirtualRegister);
LABEL_91:
        v61 += 8;
        if (v61 == v60)
        {
          if (v52)
            goto LABEL_192;
LABEL_195:
          while ((*(_WORD *)(v52 + 44) & 8) != 0)
            v52 = *(_QWORD *)(v52 + 8);
LABEL_196:
          v52 = *(_QWORD *)(v52 + 8);
          if (v52 == v51)
          {
            v35 = *(_QWORD *)(a1 + 8);
            goto LABEL_204;
          }
          continue;
        }
        goto LABEL_86;
      }
      break;
    }
    v64 = UniqueVRegDef;
    v65 = *(_QWORD *)a1;
    v66 = (uint64_t *)(*(_QWORD *)a1 + 56);
    *(_QWORD *)&v153 = v52;
    __dst = 0;
    v67 = sub_1C61252B8(v66, &v153, &__dst);
    v68 = -1;
    if (v67)
    {
      v148 = -1;
      if (__dst != (void *)(*(_QWORD *)(v65 + 56) + 16 * *(unsigned int *)(v65 + 72)))
      {
        v68 = *((_DWORD *)__dst + 2);
        goto LABEL_96;
      }
    }
    else
    {
LABEL_96:
      v148 = v68;
    }
    v69 = **(unsigned __int16 **)(v64 + 16);
    if (**(_WORD **)(v64 + 16) && v69 != 69)
    {
      if (*(_QWORD *)(v64 + 24) == *(_QWORD *)(a1 + 8))
      {
        v70 = *(_QWORD *)a1;
        v71 = (uint64_t *)(*(_QWORD *)a1 + 56);
        *(_QWORD *)&v153 = v64;
        __dst = 0;
        v72 = sub_1C61252B8(v71, &v153, &__dst);
        v73 = -1;
        if (v72 && __dst != (void *)(*(_QWORD *)(v70 + 56) + 16 * *(unsigned int *)(v70 + 72)))
          v73 = *((_DWORD *)__dst + 2);
        v74 = v148 - v73;
        if (v148 != v73)
        {
          do
          {
            IncompleteVirtualRegister = sub_1C51E2B58(a1, IncompleteVirtualRegister, 0, 0);
            --v74;
          }
          while (v74);
        }
      }
      goto LABEL_90;
    }
    __dst = v158;
    v157 = 0x400000000;
    v75 = IncompleteVirtualRegister;
    while ((unsigned __int16)v69 == 69 || (unsigned __int16)v69 == 0)
    {
      v77 = *(_QWORD *)(v64 + 24);
      if (v77 != *(_QWORD *)(a1 + 8))
        break;
      v78 = *(_DWORD *)(v64 + 40);
      if (v78 == 1)
      {
        v75 = 0;
LABEL_123:
        v82 = 0;
      }
      else
      {
        v79 = *(_QWORD *)(v64 + 32);
        v80 = 1;
        while (*(_QWORD *)(v79 + 32 * (v80 + 1) + 16) != v77)
        {
          v80 += 2;
          if (v78 == v80)
          {
            v75 = 0;
            goto LABEL_120;
          }
        }
        v75 = *(_DWORD *)(v79 + 32 * v80 + 4);
LABEL_120:
        v81 = 1;
        while (*(_QWORD *)(v79 + 32 * (v81 + 1) + 16) == v77)
        {
          v81 += 2;
          if (v78 == v81)
            goto LABEL_123;
        }
        v82 = *(_DWORD *)(v79 + 32 * v81 + 4);
      }
      if (v157 >= HIDWORD(v157))
      {
        sub_1C6204320(&__dst, v82);
      }
      else
      {
        v83 = (char *)__dst + 8 * v157;
        *(_DWORD *)v83 = v82;
        v83[4] = 1;
        LODWORD(v157) = v157 + 1;
      }
      v64 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 32), v75);
      LOWORD(v69) = **(_WORD **)(v64 + 16);
    }
    v84 = *(_QWORD *)a1;
    v85 = (uint64_t *)(*(_QWORD *)a1 + 56);
    v152 = (unsigned __int8 *)v64;
    *(_QWORD *)&v153 = 0;
    if (sub_1C61252B8(v85, &v152, &v153))
      v86 = (_QWORD)v153 == *(_QWORD *)(v84 + 56) + 16 * *(unsigned int *)(v84 + 72);
    else
      v86 = 1;
    if (v86)
    {
      v87 = -1;
    }
    else
    {
      v87 = *(_DWORD *)(v153 + 8);
      if (v87 != -1)
      {
        v88 = (v148 - v87);
        v147 = *(_DWORD *)(v153 + 8);
        if (v148 < v87)
        {
          v149 = *((unsigned __int8 *)__dst + 4);
          v89 = *(_DWORD *)__dst;
          v90 = v157;
          if ((_DWORD)v157 != 1)
          {
            memmove(__dst, (char *)__dst + 8, 8 * v157 - 8);
            v90 = v157;
          }
          v91 = v90 - 1;
          LODWORD(v157) = v91;
          v145 = v89;
          v146 = v89 & 0xFFFFFF00;
          goto LABEL_142;
        }
        if ((int)v88 >= 1)
        {
          if ((_DWORD)v157)
            v94 = *((_QWORD *)__dst + v157 - 1);
          else
            v94 = 0;
          sub_1C6204384((unsigned int *)&__dst, v88, v94);
        }
LABEL_141:
        v149 = 0;
        v145 = 0;
        v146 = 0;
        v91 = v157;
LABEL_142:
        if (v91)
        {
          v92 = (char *)__dst + 8 * v91;
          do
          {
            v93 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            v75 = sub_1C51E2B58(a1, v75, v93, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)+ 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          }
          while (v92 != __dst);
        }
        if (v149)
        {
          v95 = *(_QWORD *)(a1 + 32);
          v96 = *(_QWORD *)(*(_QWORD *)(v95 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v95, "", 0);
          v97 = IncompleteVirtualRegister;
          *(_QWORD *)(*(_QWORD *)(v95 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v96;
          v98 = *(_QWORD *)(v95 + 8);
          if (v98)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 24))(v98, IncompleteVirtualRegister);
            v97 = IncompleteVirtualRegister;
          }
          v99 = *(_QWORD *)(a1 + 8);
          v151 = 0;
          v100 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if ((*(_WORD *)(v52 + 44) & 4) != 0)
          {
            v150 = sub_1C612596C(v99, v52, &v151, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v97);
            v144 = v118;
          }
          else
          {
            v143 = (llvm::MachineInstr *)v99;
            v101 = *(llvm::MachineFunction **)(v99 + 32);
            v152 = 0;
            v102 = *((_QWORD *)v101 + 28);
            v150 = v101;
            if (v102)
            {
              *((_QWORD *)v101 + 28) = *(_QWORD *)v102;
              *(_QWORD *)&v153 = 0;
            }
            else
            {
              v142 = v100;
              v102 = sub_1C484358C((uint64_t)v101 + 128, 72, 3);
              *(_QWORD *)&v153 = v152;
              if (v152)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v152, v152, (uint64_t)&v153);
                v152 = 0;
              }
              v101 = v150;
              v100 = v142;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v102, v101, v100, (unsigned __int8 **)&v153, 0);
            if ((_QWORD)v153)
              llvm::MetadataTracking::untrack((uint64_t)&v153, (unsigned __int8 *)v153);
            if (v152)
              llvm::MetadataTracking::untrack((uint64_t)&v152, v152);
            v103 = *((_QWORD *)v143 + 5);
            *(_QWORD *)(v102 + 24) = v103;
            v104 = *(_QWORD *)(v103 + 32);
            v105 = *(unsigned int *)(v102 + 40);
            if ((_DWORD)v105)
            {
              v111 = *(_QWORD *)(v102 + 32);
              v112 = *(_QWORD *)(v104 + 40);
              v113 = 32 * v105;
              do
              {
                if (!*(_BYTE *)v111)
                {
                  v114 = *(unsigned int *)(v111 + 4);
                  if ((int)v114 >= 0)
                    v115 = (uint64_t *)(*(_QWORD *)(v112 + 272) + 8 * v114);
                  else
                    v115 = (uint64_t *)(*(_QWORD *)(v112 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
                  v116 = *v115;
                  if (*v115)
                  {
                    v117 = *(_QWORD *)(v116 + 16);
                    *(_QWORD *)(v116 + 16) = v111;
                    *(_QWORD *)(v111 + 16) = v117;
                    if ((*(_BYTE *)(v111 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v111 + 24) = v116;
                    }
                    else
                    {
                      *(_QWORD *)(v111 + 24) = 0;
                      v115 = (uint64_t *)(v117 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v111 + 16) = v111;
                    *(_QWORD *)(v111 + 24) = 0;
                  }
                  *v115 = v111;
                }
                v111 += 32;
                v113 -= 32;
              }
              while (v113);
            }
            v106 = *(_QWORD *)(v104 + 728);
            if (v106)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 24))(v106, v102);
            v107 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v102 = v107 | *(_QWORD *)v102 & 7;
            *(_QWORD *)(v102 + 8) = v52;
            *(_QWORD *)(v107 + 8) = v102;
            *(_QWORD *)v52 = *(_QWORD *)v52 & 7 | v102;
            *((_QWORD *)&v153 + 1) = 0;
            v154 = 0;
            v155 = 0;
            LODWORD(v153) = 0x1000000;
            DWORD1(v153) = IncompleteVirtualRegister;
            v144 = (llvm::MachineInstr *)v102;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v150, (const llvm::MachineOperand *)&v153);
          }
          HIDWORD(v153) = 0;
          LODWORD(v153) = 0;
          *(_QWORD *)((char *)&v153 + 4) = v146 | v145;
          v154 = 0;
          v155 = 0;
          llvm::MachineInstr::addOperand(v144, v150, (const llvm::MachineOperand *)&v153);
          v108 = *(_QWORD *)(a1 + 16);
          *((_QWORD *)&v153 + 1) = 0;
          v154 = v108;
          LODWORD(v153) = 4;
          llvm::MachineInstr::addOperand(v144, v150, (const llvm::MachineOperand *)&v153);
          *((_QWORD *)&v153 + 1) = 0;
          LODWORD(v153) = 0;
          DWORD1(v153) = v75;
          v154 = 0;
          v155 = 0;
          llvm::MachineInstr::addOperand(v144, v150, (const llvm::MachineOperand *)&v153);
          v109 = *(_QWORD *)(a1 + 8);
          *((_QWORD *)&v153 + 1) = 0;
          v154 = v109;
          LODWORD(v153) = 4;
          llvm::MachineInstr::addOperand(v144, v150, (const llvm::MachineOperand *)&v153);
          if (v151)
            llvm::MetadataTracking::untrack((uint64_t)&v151, v151);
          v110 = *(_QWORD *)a1;
          *(_QWORD *)&v153 = v144;
          *((_DWORD *)sub_1C6128C08((uint64_t *)(v110 + 56), &v153) + 2) = v147;
        }
        else
        {
          IncompleteVirtualRegister = v75;
        }
        if (__dst != v158)
          free(__dst);
        goto LABEL_90;
      }
    }
    v147 = v87;
    goto LABEL_141;
  }
LABEL_204:
  result = sub_1C51E05D0(v35, *(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 48), 0);
  v122 = *(_QWORD *)(a1 + 8);
  v123 = v122 + 48;
  for (j = *(_QWORD *)(v122 + 56); ; j = *(_QWORD *)(j + 8))
  {
    if (j == v123)
      return result;
    if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
      break;
  }
  if (v123 != j)
  {
    while (2)
    {
      v125 = *(unsigned __int16 **)(j + 16);
      v126 = *v125;
      if (v126 == 69 || v126 == 0)
      {
        result = sub_1C51E2B58(a1, *(_DWORD *)(*(_QWORD *)(j + 32) + 4), 0, 0);
      }
      else
      {
        v128 = *(_QWORD *)(j + 32);
        v129 = *((unsigned __int8 *)v125 + 4);
        if ((v125[4] & 2) == 0 || (v139 = *(_DWORD *)(j + 40), v139 == v129))
        {
          v130 = v129;
        }
        else
        {
          v140 = v139 - 1;
          v130 = v129;
          do
          {
            v141 = *(_DWORD *)(v128 + 32 * v129);
            if ((v141 & 0x10000FF) != 0x1000000)
              break;
            v130 += (v141 & 0x2000000) == 0;
            if (v140 == v129)
              break;
            ++v129;
          }
          while ((v141 & 0x2000000) == 0);
        }
        if (v130)
        {
          v131 = v128 + 32 * v130;
          do
          {
            v132 = *(_QWORD *)(a1 + 32);
            v133 = *(unsigned int *)(v128 + 4);
            if ((v133 & 0x80000000) != 0)
              v134 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
            else
              v134 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v133);
            v135 = *v134;
            if (v135)
            {
              while ((*(_BYTE *)(v135 + 3) & 1) != 0)
              {
                v135 = *(_QWORD *)(v135 + 24);
                if (!v135)
                  goto LABEL_231;
              }
              v136 = *(_QWORD *)(a1 + 8);
              v137 = *(_QWORD *)(v135 + 8);
              if (*(_QWORD *)(v137 + 24) == v136)
              {
                while (1)
                {
                  v135 = *(_QWORD *)(v135 + 24);
                  if (!v135)
                    break;
                  if ((*(_BYTE *)(v135 + 3) & 1) == 0)
                  {
                    v138 = *(_QWORD *)(v135 + 8);
                    if (v138 != v137)
                    {
                      v137 = *(_QWORD *)(v135 + 8);
                      if (*(_QWORD *)(v138 + 24) != v136)
                        goto LABEL_230;
                    }
                  }
                }
              }
              else
              {
LABEL_230:
                result = sub_1C51E2B58(a1, v133, 0, 0);
              }
            }
LABEL_231:
            v128 += 32;
          }
          while (v128 != v131);
          if (!j)
          {
LABEL_241:
            while ((*(_WORD *)(j + 44) & 8) != 0)
              j = *(_QWORD *)(j + 8);
            goto LABEL_242;
          }
        }
      }
      if ((*(_BYTE *)j & 4) == 0)
        goto LABEL_241;
LABEL_242:
      j = *(_QWORD *)(j + 8);
      if (j == *(_QWORD *)(a1 + 8) + 48)
        return result;
      continue;
    }
  }
  return result;
}

_QWORD *sub_1C51E1B90(_QWORD *a1)
{
  MEMORY[0x1CAA32FB4](a1[13], 4);
  MEMORY[0x1CAA32FB4](a1[10], 4);
  MEMORY[0x1CAA32FB4](a1[7], 8);
  return a1;
}

void llvm::PeelingModuloScheduleExpander::validateAgainstModuloScheduleExpander(llvm::PeelingModuloScheduleExpander *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MachineBasicBlock *v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  char v42;
  unint64_t v43;
  char *v44;
  llvm::raw_ostream *v45;
  void *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  llvm::raw_ostream *v49;
  llvm *v50;
  llvm::raw_ostream *v51;
  void *v52;
  llvm::raw_ostream *v53;
  llvm *v54;
  _WORD *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  llvm::raw_ostream *v61;
  llvm *v62;
  llvm::raw_ostream *v63;
  llvm *v64;
  llvm::raw_ostream *v65;
  llvm *v66;
  llvm::MachineBasicBlock *v67;
  llvm::raw_ostream *v68;
  llvm *v69;
  llvm::raw_ostream *v70;
  llvm::MachineBasicBlock *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  int v79;
  _BYTE v80[32];
  _BYTE v81[56];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[8];
  llvm::MachineBasicBlock *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD v89[4];
  int v90;
  void (**v91)(llvm::raw_ostream *__hidden);
  int v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  int v98;
  void **v99;
  void *__p[2];
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106[2];
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  _QWORD v111[130];

  v111[128] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 6) = llvm::MachineLoop::getTopBlock(**(llvm::MachineLoop ***)this);
  *((_QWORD *)this + 7) = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(**(_QWORD **)this);
  __p[0] = 0;
  __p[1] = 0;
  v101 = 0;
  v92 = 0;
  v96 = 0;
  v97 = 0;
  v91 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v99 = __p;
  v98 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  llvm::ModuloSchedule::print(*(llvm::ModuloSchedule **)this, (llvm::raw_ostream *)&v91);
  v2 = v93;
  v3 = v95 - v93;
  if (v95 != v93)
  {
    v95 = v93;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v91, v93, v3);
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 5);
  v85[0] = *(_QWORD *)this;
  v85[1] = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 40);
  v85[2] = v6;
  v85[3] = v7;
  v85[4] = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v6 + 104))(v6, v2, v3);
  v85[5] = v5;
  v86 = 0;
  v87 = 0;
  v88 = v89;
  memset(v89, 0, sizeof(v89));
  v90 = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  llvm::ModuloScheduleExpander::expand((llvm::ModuloScheduleExpander *)v85);
  v8 = v86;
  if (!v86)
  {
    llvm::ModuloScheduleExpander::cleanup((llvm::ModuloScheduleExpander *)v85);
    goto LABEL_130;
  }
  llvm::MachineBasicBlock::addSuccessor(*((_QWORD **)this + 7), *((_QWORD **)this + 6), -1);
  sub_1C51E0DA4((uint64_t)v81, **(_QWORD ***)this, *(_QWORD *)this, *((_QWORD *)this + 6));
  sub_1C51E0E40((uint64_t)v81);
  llvm::PeelingModuloScheduleExpander::peelPrologAndEpilogs(this);
  v76 = v80;
  v77 = v80;
  v78 = 4;
  v79 = 0;
  v10 = *((_QWORD *)this + 6);
  v11 = v10 + 48;
  for (i = *(_QWORD *)(v10 + 56); i != v11; i = *(_QWORD *)(i + 8))
  {
    if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
    {
      if (v11 != i)
      {
        do
        {
          v13 = **(unsigned __int16 **)(i + 16);
          if (v13 == 69 || v13 == 0)
            v9 = (llvm *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v76, i);
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
          i = *(_QWORD *)(i + 8);
          v10 = *((_QWORD *)this + 6);
        }
        while (i != v10 + 48);
      }
      break;
    }
  }
  v109 = v111;
  v110 = 0x800000000;
  v71 = v8;
  v15 = *((_QWORD *)v8 + 7);
  v16 = (uint64_t *)(v10 + 56);
LABEL_22:
  v17 = *v16;
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8);
  if ((*(_WORD *)(v15 + 44) & 0xC) != 0 && (*(_WORD *)(v15 + 44) & 4) == 0)
  {
    v25 = v15;
    if ((v18 & 0x200) != 0)
      goto LABEL_98;
    while ((*(_WORD *)(v25 + 44) & 8) != 0)
    {
      v25 = *(_QWORD *)(v25 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v25 + 16) + 9) & 2) != 0)
        goto LABEL_98;
    }
  }
  else if ((v18 & 0x200) != 0)
  {
    goto LABEL_98;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8);
  if ((*(_WORD *)(v17 + 44) & 0xC) != 0 && (*(_WORD *)(v17 + 44) & 4) == 0)
  {
    v26 = v17;
    if ((v20 & 0x200) != 0)
      goto LABEL_98;
    while ((*(_WORD *)(v26 + 44) & 8) != 0)
    {
      v26 = *(_QWORD *)(v26 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 9) & 2) != 0)
        goto LABEL_98;
    }
    while (1)
    {
LABEL_32:
      v22 = **(unsigned __int16 **)(v15 + 16);
      if (**(_WORD **)(v15 + 16))
      {
        if (v22 == 19)
        {
          v23 = *(_DWORD **)(v15 + 32);
          if ((*v23 & 0xFFF00) != 0 || (v23[8] & 0xFFF00) != 0)
          {
            while (1)
            {
LABEL_46:
              v24 = **(unsigned __int16 **)(v17 + 16);
              if (!**(_WORD **)(v17 + 16))
                goto LABEL_42;
              if (v24 != 19)
                break;
              v27 = *(_DWORD **)(v17 + 32);
              if ((*v27 & 0xFFF00) != 0 || (v27[8] & 0xFFF00) != 0)
                goto LABEL_61;
LABEL_42:
              if ((*(_BYTE *)v17 & 4) == 0)
              {
                while ((*(_WORD *)(v17 + 44) & 8) != 0)
                  v17 = *(_QWORD *)(v17 + 8);
              }
              v17 = *(_QWORD *)(v17 + 8);
            }
            if (v24 == 69)
              goto LABEL_42;
            v27 = *(_DWORD **)(v17 + 32);
LABEL_61:
            if (*(_DWORD *)(v15 + 40))
            {
              v28 = *(_QWORD *)(v15 + 32);
              do
              {
                sub_1C51E24B8(v106, v28, *((_QWORD *)this + 3), &v76);
                sub_1C51E24B8((uint64_t *)&v103, (uint64_t)v27, *((_QWORD *)this + 3), &v76);
                if (v110 >= HIDWORD(v110))
                {
                  v102 = 0;
                  v30 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v109, 0, 128, &v102);
                  sub_1C51E40FC((uint64_t)&v30[128 * (unint64_t)v110], (uint64_t)v106, &v103);
                  v31 = (char *)v109;
                  if ((_DWORD)v110)
                  {
                    v32 = 0;
                    v72 = (char *)v109 + 128 * (unint64_t)v110;
                    v73 = v30;
                    v74 = (char *)v109;
                    do
                    {
                      v33 = &v31[v32];
                      v34 = &v30[v32];
                      *(_OWORD *)v34 = *(_OWORD *)&v31[v32];
                      *((_QWORD *)v34 + 2) = v34 + 32;
                      *((_QWORD *)v34 + 3) = 0x400000000;
                      if (*(_DWORD *)&v31[v32 + 24])
                      {
                        sub_1C48621E4((uint64_t)(v34 + 16), (uint64_t)(v33 + 16));
                        v31 = v74;
                      }
                      *((_OWORD *)v34 + 3) = *((_OWORD *)v33 + 3);
                      v35 = *((_OWORD *)v33 + 4);
                      *((_QWORD *)v34 + 10) = v34 + 96;
                      v36 = (uint64_t)(v34 + 80);
                      *(_OWORD *)(v36 - 16) = v35;
                      *(_QWORD *)(v36 + 8) = 0x400000000;
                      if (*((_DWORD *)v33 + 22))
                      {
                        sub_1C48621E4(v36, (uint64_t)&v31[v32 + 80]);
                        v31 = v74;
                      }
                      v30 = v73;
                      *(_OWORD *)&v73[v32 + 112] = *((_OWORD *)v33 + 7);
                      v32 += 128;
                    }
                    while (v33 + 128 != v72);
                    v31 = (char *)v109;
                    if ((_DWORD)v110)
                    {
                      v37 = (unint64_t)v110 << 7;
                      v75 = (char *)v109;
                      do
                      {
                        v38 = &v31[v37];
                        v39 = *(char **)&v31[v37 - 48];
                        if (&v31[v37 - 32] != v39)
                        {
                          free(v39);
                          v31 = v75;
                        }
                        v40 = (char *)*((_QWORD *)v38 - 14);
                        if (v38 - 96 != v40)
                        {
                          free(v40);
                          v31 = v75;
                        }
                        v37 -= 128;
                      }
                      while (v37);
                      v31 = (char *)v109;
                    }
                  }
                  v41 = v102;
                  if (v31 != (char *)v111)
                    free(v31);
                  v109 = v30;
                  v29 = v110 + 1;
                  HIDWORD(v110) = v41;
                }
                else
                {
                  sub_1C51E40FC((uint64_t)v109 + 128 * (unint64_t)v110, (uint64_t)v106, &v103);
                  v29 = v110 + 1;
                }
                LODWORD(v110) = v29;
                if (v104 != &v105)
                  free(v104);
                v9 = (llvm *)v107;
                if (v107 != &v108)
                  free(v107);
                v28 += 32;
                v27 += 8;
              }
              while (v28 != *(_QWORD *)(v15 + 32) + 32 * *(unsigned int *)(v15 + 40));
            }
            if ((*(_BYTE *)v15 & 4) == 0)
            {
              while ((*(_WORD *)(v15 + 44) & 8) != 0)
                v15 = *(_QWORD *)(v15 + 8);
            }
            v15 = *(_QWORD *)(v15 + 8);
            if (!v17 || (*(_BYTE *)v17 & 4) == 0)
            {
              while ((*(_WORD *)(v17 + 44) & 8) != 0)
                v17 = *(_QWORD *)(v17 + 8);
            }
            v16 = (uint64_t *)(v17 + 8);
            goto LABEL_22;
          }
        }
        else if (v22 != 69)
        {
          goto LABEL_46;
        }
      }
      if ((*(_BYTE *)v15 & 4) == 0)
      {
        while ((*(_WORD *)(v15 + 44) & 8) != 0)
          v15 = *(_QWORD *)(v15 + 8);
      }
      v15 = *(_QWORD *)(v15 + 8);
    }
  }
  if ((v20 & 0x200) == 0)
    goto LABEL_32;
LABEL_98:
  if ((_DWORD)v110)
  {
    v42 = 0;
    v43 = (unint64_t)v110 << 7;
    v44 = (char *)v109 + 64;
    do
    {
      if (*((_DWORD *)v44 - 10) != *((_DWORD *)v44 + 6))
      {
        v45 = (llvm::raw_ostream *)llvm::errs(v9);
        v46 = (void *)*((_QWORD *)v45 + 4);
        if (*((_QWORD *)v45 + 3) - (_QWORD)v46 > 0x21uLL)
        {
          qmemcpy(v46, "Modulo kernel validation error: [\n", 34);
          *((_QWORD *)v45 + 4) += 34;
        }
        else
        {
          v45 = llvm::raw_ostream::write(v45, "Modulo kernel validation error: [\n", 0x22uLL);
        }
        v47 = (llvm::raw_ostream *)llvm::errs(v45);
        v48 = *((_QWORD *)v47 + 4);
        if ((unint64_t)(*((_QWORD *)v47 + 3) - v48) > 9)
        {
          *(_WORD *)(v48 + 8) = 8285;
          *(_QWORD *)v48 = *(_QWORD *)" [golden] ";
          *((_QWORD *)v47 + 4) += 10;
        }
        else
        {
          v47 = llvm::raw_ostream::write(v47, " [golden] ", 0xAuLL);
        }
        v49 = (llvm::raw_ostream *)llvm::errs(v47);
        sub_1C51E26B8((uint64_t)(v44 - 64), v49);
        v51 = (llvm::raw_ostream *)llvm::errs(v50);
        v52 = (void *)*((_QWORD *)v51 + 4);
        if (*((_QWORD *)v51 + 3) - (_QWORD)v52 > 9uLL)
        {
          memset(v52, 32, 10);
          *((_QWORD *)v51 + 4) += 10;
        }
        else
        {
          v51 = llvm::raw_ostream::write(v51, "          ", 0xAuLL);
        }
        v53 = (llvm::raw_ostream *)llvm::errs(v51);
        sub_1C51E26B8((uint64_t)v44, v53);
        v9 = (llvm *)llvm::errs(v54);
        v55 = (_WORD *)*((_QWORD *)v9 + 4);
        if (*((_QWORD *)v9 + 3) - (_QWORD)v55 > 1uLL)
        {
          *v55 = 2653;
          *((_QWORD *)v9 + 4) += 2;
        }
        else
        {
          v9 = llvm::raw_ostream::write(v9, "]\n", 2uLL);
        }
        v42 = 1;
      }
      v44 += 128;
      v43 -= 128;
    }
    while (v43);
    if ((v42 & 1) != 0)
    {
      v61 = (llvm::raw_ostream *)llvm::errs(v9);
      v62 = sub_1C4816AD8(v61, "Golden reference kernel:\n");
      v63 = (llvm::raw_ostream *)llvm::errs(v62);
      llvm::MachineBasicBlock::print(v71, v63, 0, 1);
      v65 = (llvm::raw_ostream *)llvm::errs(v64);
      v66 = sub_1C4816AD8(v65, "New kernel:\n");
      v67 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 6);
      v68 = (llvm::raw_ostream *)llvm::errs(v66);
      llvm::MachineBasicBlock::print(v67, v68, 0, 1);
      v70 = (llvm::raw_ostream *)llvm::errs(v69);
      sub_1C620429C(v70, (uint64_t *)__p);
      llvm::report_fatal_error((llvm *)"Modulo kernel validation (-pipeliner-experimental-cg) failed", (const char *)1);
    }
  }
  llvm::MachineBasicBlock::removeSuccessor(*((llvm::MachineBasicBlock **)this + 7), *((llvm::MachineBasicBlock **)this + 6), 0);
  llvm::ModuloScheduleExpander::cleanup((llvm::ModuloScheduleExpander *)v85);
  v56 = (char *)v109;
  if ((_DWORD)v110)
  {
    v57 = (unint64_t)v110 << 7;
    do
    {
      v58 = &v56[v57];
      v59 = *(char **)&v56[v57 - 48];
      if (&v56[v57 - 32] != v59)
        free(v59);
      v60 = (char *)*((_QWORD *)v58 - 14);
      if (v58 - 96 != v60)
        free(v60);
      v57 -= 128;
    }
    while (v57);
    v56 = (char *)v109;
  }
  if (v56 != (char *)v111)
    free(v56);
  if (v77 != v76)
    free(v77);
  MEMORY[0x1CAA32FB4](v84, 4);
  MEMORY[0x1CAA32FB4](v83, 4);
  MEMORY[0x1CAA32FB4](v82, 8);
LABEL_130:
  sub_1C61F7BE8((uint64_t)v85);
  v91 = off_1E81A6E70;
  if (v98 == 1 && v93)
    MEMORY[0x1CAA32F9C](v93, 0x1000C8077774924);
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
}

uint64_t *sub_1C51E24B8(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  a1[1] = a3;
  v5 = (uint64_t)(a1 + 4);
  a1[2] = (uint64_t)(a1 + 4);
  v6 = (uint64_t)(a1 + 2);
  a1[3] = 0x400000000;
  a1[6] = a2;
  *a1 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
  while (!*(_BYTE *)a2)
  {
    v10 = *(_DWORD *)(a2 + 4);
    if ((v10 & 0x80000000) == 0)
      break;
    v11 = v10 & 0x7FFFFFFF;
    v12 = *(_QWORD *)(*(_QWORD *)(a1[1] + 24) + 16 * v11 + 8);
    if ((*(_BYTE *)(v12 + 3) & 1) == 0)
      v12 = *(_QWORD *)(v12 + 24);
    if (*(_QWORD *)(*(_QWORD *)(v12 + 8) + 24) != *a1)
      break;
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v11 + 8);
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
      v13 = *(_QWORD *)(v13 + 24);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = **(unsigned __int16 **)(v14 + 16);
    if (!**(_WORD **)(v14 + 16) || v15 == 69)
    {
      v19 = sub_1C477672C((uint64_t)a4, v14);
      v20 = a4[1];
      if (v20 == *a4)
        v21 = (unsigned int *)a4 + 5;
      else
        v21 = (unsigned int *)(a4 + 2);
      if (v19 == (_QWORD *)(v20 + 8 * *v21))
      {
        v22 = *a1;
        v23 = *(_DWORD *)(v14 + 40);
        v24 = *(_QWORD *)(v14 + 32);
        if (v23 == 1)
        {
LABEL_24:
          v26 = 0;
        }
        else
        {
          v25 = 1;
          while (*(_QWORD *)(v24 + 32 * (v25 + 1) + 16) == v22)
          {
            v25 += 2;
            if (v23 == v25)
              goto LABEL_24;
          }
          v26 = *(_DWORD *)(v24 + 32 * v25 + 4);
        }
        if (*(_QWORD *)(v24 + 80) == v22)
          v27 = 32;
        else
          v27 = 96;
        v28 = *((unsigned int *)a1 + 6);
        if (v28 >= *((unsigned int *)a1 + 7))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v5, v28 + 1, 4);
          v28 = *((unsigned int *)a1 + 6);
        }
        a2 = v24 + v27;
        *(_DWORD *)(a1[2] + 4 * v28) = v26;
        ++*((_DWORD *)a1 + 6);
      }
      else
      {
        a2 = *(_QWORD *)(v14 + 32) + 96;
      }
    }
    else
    {
      if (v15 != 19)
        break;
      v16 = *(_DWORD **)(v14 + 32);
      if ((*v16 & 0xFFF00) != 0)
        break;
      v18 = v16[8];
      v17 = v16 + 8;
      if ((v18 & 0xFFF00) != 0)
        break;
      a2 = (uint64_t)v17;
    }
  }
  a1[7] = a2;
  return a1;
}

void sub_1C51E26B8(uint64_t a1, llvm::raw_ostream *this)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 543584032;
    *v4 = 543519605;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "use of ", 7uLL);
  }
  llvm::MachineOperand::print(*(llvm::raw_ostream **)(a1 + 48), this, 0, 0, 0);
  v5 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 677733230;
    *(_QWORD *)v5 = *(_QWORD *)": distance(";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, ": distance(", 0xBuLL);
  }
  sub_1C5E21910(this, *(unsigned int *)(a1 + 24), 0, 0, 0);
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 4)
  {
    *(_BYTE *)(v6 + 4) = 32;
    *(_DWORD *)v6 = 1852383273;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, ") in ", 5uLL);
  }
  llvm::MachineInstr::print(*(llvm::MachineInstr **)(*(_QWORD *)(a1 + 48) + 8), this, 1, 0, 0, 1, 0);
}

uint64_t sub_1C51E280C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Modulo Schedule test pass";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "modulo-schedule-test";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FD118;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51E3364;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::ModuloScheduleTestAnnotater::annotate(llvm::ModuloScheduleTestAnnotater *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  llvm::MCSymbol *Symbol;
  _QWORD v20[4];
  __int16 v21;
  uint64_t (**v22)();
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  int v29;
  void **v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  _QWORD v34[4];

  v34[2] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  v2 = *(uint64_t **)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16) - (_QWORD)v2;
  if (v3)
  {
    v5 = 8 * (v3 >> 3);
    do
    {
      v6 = *v2;
      v32 = v34;
      v33 = xmmword_1C6612EE0;
      v23 = 0;
      v27 = 0;
      v28 = 0;
      v22 = &off_1E81A7280;
      v30 = &v32;
      v29 = 0;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v22, "Stage-", 6uLL);
      v7 = *((_QWORD *)this + 1);
      v31 = v6;
      v20[0] = 0;
      v8 = sub_1C61252B8((uint64_t *)(v7 + 56), &v31, v20);
      v9 = -1;
      if (!v8
        || v20[0] == *(_QWORD *)(v7 + 56) + 16 * *(unsigned int *)(v7 + 72)
        || (v9 = *(int *)(v20[0] + 8), (v9 & 0x80000000) != 0))
      {
        v9 = -(uint64_t)v9;
        v10 = 1;
      }
      else
      {
        v10 = 0;
      }
      sub_1C5E21910((llvm::raw_ostream *)&v22, v9, 0, 0, v10);
      v11 = v26;
      if ((unint64_t)(v25 - (_QWORD)v26) > 6)
      {
        *(_DWORD *)((char *)v26 + 3) = 761621603;
        *v11 = 1668891487;
        v26 = (_DWORD *)((char *)v26 + 7);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v22, "_Cycle-", 7uLL);
      }
      v12 = *((_QWORD *)this + 1);
      v31 = v6;
      v20[0] = 0;
      v13 = sub_1C61252B8((uint64_t *)(v12 + 32), &v31, v20);
      v14 = -1;
      if (!v13
        || v20[0] == *(_QWORD *)(v12 + 32) + 16 * *(unsigned int *)(v12 + 48)
        || (v14 = *(int *)(v20[0] + 8), (v14 & 0x80000000) != 0))
      {
        v14 = -(uint64_t)v14;
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
      sub_1C5E21910((llvm::raw_ostream *)&v22, v14, 0, 0, v15);
      v16 = *(_QWORD *)(*(_QWORD *)this + 24);
      v18 = *v30;
      v17 = v30[1];
      v21 = 261;
      v20[0] = v18;
      v20[1] = v17;
      Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v16, (uint64_t)v20);
      llvm::MachineInstr::setPostInstrSymbol(v6, *(llvm::MachineFunction **)this, Symbol);
      v22 = (uint64_t (**)())off_1E81A6E70;
      if (v29 == 1 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
      if (v32 != v34)
        free(v32);
      ++v2;
      v5 -= 8;
    }
    while (v5);
  }
}

uint64_t sub_1C51E2B58(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  BOOL v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t IncompleteVirtualRegister;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  uint64_t i;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  llvm::MachineBasicBlock *v43;
  uint64_t v44;
  llvm::MachineFunction *v45;
  unint64_t v46;
  llvm::MachineFunction *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *FirstTerminator;
  uint64_t v72;
  int v73;
  unint64_t v74;
  _QWORD *v75;
  llvm::MachineFunction *v76;
  unsigned __int8 *v77;
  int v78;
  unsigned int v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a2;
  v8 = a1 + 80;
  v9 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0)
  {
    v81 = 0;
    if (sub_1C6204454(*(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 96), a2, a3, &v81))
      v16 = v81 == (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 12 * *(unsigned int *)(a1 + 96));
    else
      v16 = 1;
    if (!v16)
      return *((unsigned int *)v81 + 2);
LABEL_22:
    v17 = sub_1C49781B4((uint64_t *)(a1 + 104), &v79);
    if ((int *)(*(_QWORD *)(a1 + 104) + 8 * *(unsigned int *)(a1 + 120)) != v17)
    {
      v18 = v17;
      IncompleteVirtualRegister = v17[1];
      if (v9)
      {
        v19 = *(_QWORD *)(a1 + 32);
        if ((IncompleteVirtualRegister & 0x80000000) != 0)
          v20 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF) + 8);
        else
          v20 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * IncompleteVirtualRegister);
        v31 = *v20;
        if ((*(_BYTE *)(v31 + 3) & 1) == 0)
          v31 = *(_QWORD *)(v31 + 24);
        llvm::MachineOperand::setReg(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 32) + 32, a3);
        v77 = (unsigned __int8 *)(v79 | (unint64_t)(a3 << 32));
        v78 = IncompleteVirtualRegister;
        sub_1C6204540((uint64_t)&v81, v8, (int *)&v77, &v78);
        sub_1C51A3F30(*(_QWORD **)(a1 + 32), IncompleteVirtualRegister, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
        *v18 = -2;
        *(int32x2_t *)(a1 + 112) = vadd_s32(*(int32x2_t *)(a1 + 112), (int32x2_t)0x1FFFFFFFFLL);
      }
      return IncompleteVirtualRegister;
    }
    v23 = *(_QWORD *)(a1 + 32);
    if (!a4)
      a4 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * (v79 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(_QWORD *)(a1 + 32), "", 0);
    v74 = a4 & 0xFFFFFFFFFFFFFFFBLL;
    *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a4 & 0xFFFFFFFFFFFFFFFBLL;
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 24))(v24, IncompleteVirtualRegister);
      if (!v9)
      {
LABEL_33:
        v25 = *(_QWORD **)(a1 + 8);
        v26 = v25 + 6;
        for (i = v25[7]; (unint64_t *)i != v26; i = *(_QWORD *)(i + 8))
        {
          if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
          {
            v26 = (unint64_t *)i;
            break;
          }
        }
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v29 = (llvm::MachineFunction *)v25[4];
        v76 = v29;
        v77 = 0;
        v30 = *((_QWORD *)v29 + 28);
        if (v30)
        {
          *((_QWORD *)v29 + 28) = *(_QWORD *)v30;
          v81 = 0;
        }
        else
        {
          v72 = v28;
          v30 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
          v81 = v77;
          v29 = v76;
          v28 = v72;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v30, v29, v28, &v81, 0);
        if (v81)
          llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
        if (v77)
          llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
        v32 = v25[5];
        *(_QWORD *)(v30 + 24) = v32;
        v33 = *(_QWORD *)(v32 + 32);
        v34 = *(unsigned int *)(v30 + 40);
        if ((_DWORD)v34)
        {
          v57 = *(_QWORD *)(v30 + 32);
          v58 = *(_QWORD *)(v33 + 40);
          v59 = 32 * v34;
          do
          {
            if (!*(_BYTE *)v57)
            {
              v60 = *(unsigned int *)(v57 + 4);
              if ((int)v60 >= 0)
                v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
              else
                v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
              v62 = *v61;
              if (*v61)
              {
                v63 = *(_QWORD *)(v62 + 16);
                *(_QWORD *)(v62 + 16) = v57;
                *(_QWORD *)(v57 + 16) = v63;
                if ((*(_BYTE *)(v57 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v57 + 24) = v62;
                }
                else
                {
                  *(_QWORD *)(v57 + 24) = 0;
                  v61 = (uint64_t *)(v63 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v57 + 16) = v57;
                *(_QWORD *)(v57 + 24) = 0;
              }
              *v61 = v57;
            }
            v57 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        v35 = *(_QWORD *)(v33 + 728);
        if (v35)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 24))(v35, v30);
        v36 = *v26 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v30 = v36 | *(_QWORD *)v30 & 7;
        *(_QWORD *)(v30 + 8) = v26;
        *(_QWORD *)(v36 + 8) = v30;
        *v26 = *v26 & 7 | v30;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        LODWORD(v81) = 0x1000000;
        HIDWORD(v81) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v76, (const llvm::MachineOperand *)&v81);
        v37 = a3;
        if (!v9)
        {
          v80 = a4;
          v38 = sub_1C6144C70(a1 + 56, (uint64_t *)&v80);
          v37 = *((_DWORD *)v38 + 2);
          if (!v37)
          {
            v39 = v38;
            v40 = *(_QWORD *)(a1 + 32);
            v41 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v40, "", 0);
            *(_QWORD *)(*(_QWORD *)(v40 + 24) + 16 * (v41 & 0x7FFFFFFF)) = v74;
            v42 = *(_QWORD *)(v40 + 8);
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
            *((_DWORD *)v39 + 2) = v41;
            v43 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 328);
            FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(v43);
            v44 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 480;
            v75 = v39;
            v73 = *((_DWORD *)v39 + 2);
            v45 = (llvm::MachineFunction *)*((_QWORD *)v43 + 4);
            v77 = 0;
            v46 = *((_QWORD *)v45 + 28);
            v47 = v45;
            if (v46)
            {
              *((_QWORD *)v45 + 28) = *(_QWORD *)v46;
            }
            else
            {
              v48 = v44;
              v49 = sub_1C484358C((uint64_t)v45 + 128, 72, 3);
              v44 = v48;
              v45 = v47;
              v46 = v49;
            }
            v81 = 0;
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v45, v44, &v81, 0);
            if (v81)
              llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
            if (v77)
              llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
            v50 = *((_QWORD *)v43 + 5);
            *(_QWORD *)(v46 + 24) = v50;
            v51 = *(_QWORD *)(v50 + 32);
            v52 = *(unsigned int *)(v46 + 40);
            if ((_DWORD)v52)
            {
              v64 = *(_QWORD *)(v46 + 32);
              v65 = *(_QWORD *)(v51 + 40);
              v66 = 32 * v52;
              do
              {
                if (!*(_BYTE *)v64)
                {
                  v67 = *(unsigned int *)(v64 + 4);
                  if ((int)v67 >= 0)
                    v68 = (uint64_t *)(*(_QWORD *)(v65 + 272) + 8 * v67);
                  else
                    v68 = (uint64_t *)(*(_QWORD *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
                  v69 = *v68;
                  if (*v68)
                  {
                    v70 = *(_QWORD *)(v69 + 16);
                    *(_QWORD *)(v69 + 16) = v64;
                    *(_QWORD *)(v64 + 16) = v70;
                    if ((*(_BYTE *)(v64 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v64 + 24) = v69;
                    }
                    else
                    {
                      *(_QWORD *)(v64 + 24) = 0;
                      v68 = (uint64_t *)(v70 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v64 + 16) = v64;
                    *(_QWORD *)(v64 + 24) = 0;
                  }
                  *v68 = v64;
                }
                v64 += 32;
                v66 -= 32;
              }
              while (v66);
            }
            v53 = *(_QWORD *)(v51 + 728);
            if (v53)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v46);
            v54 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v46 = v54 | *(_QWORD *)v46 & 7;
            *(_QWORD *)(v46 + 8) = FirstTerminator;
            *(_QWORD *)(v54 + 8) = v46;
            *FirstTerminator = *FirstTerminator & 7 | v46;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            LODWORD(v81) = 0x1000000;
            HIDWORD(v81) = v73;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v47, (const llvm::MachineOperand *)&v81);
            v37 = *((_DWORD *)v75 + 2);
          }
        }
        v82 = 0;
        v83 = 0;
        LODWORD(v81) = 0;
        HIDWORD(v81) = v37;
        v84 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v76, (const llvm::MachineOperand *)&v81);
        v55 = *(_QWORD *)(a1 + 16);
        v82 = 0;
        v83 = v55;
        LODWORD(v81) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v76, (const llvm::MachineOperand *)&v81);
        v82 = 0;
        v83 = 0;
        LODWORD(v81) = 0;
        HIDWORD(v81) = v79;
        v84 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v76, (const llvm::MachineOperand *)&v81);
        v56 = *(_QWORD *)(a1 + 8);
        v82 = 0;
        v83 = v56;
        LODWORD(v81) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v76, (const llvm::MachineOperand *)&v81);
        if (v9)
        {
          v81 = (unsigned __int8 *)__PAIR64__(a3, v79);
          sub_1C6204768(v8, (int *)&v81)[2] = IncompleteVirtualRegister;
        }
        else
        {
          sub_1C61482A0(a1 + 104, (int *)&v79)[1] = IncompleteVirtualRegister;
        }
        return IncompleteVirtualRegister;
      }
    }
    else if (!v9)
    {
      goto LABEL_33;
    }
    sub_1C51A3F30(*(_QWORD **)(a1 + 32), IncompleteVirtualRegister, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
    goto LABEL_33;
  }
  v10 = sub_1C62043FC(a1 + 80);
  v12 = *(_QWORD *)(a1 + 80) + 12 * *(unsigned int *)(a1 + 96);
  if ((_DWORD *)v12 == v10)
    goto LABEL_22;
  while (*v10 != a2)
  {
    while (1)
    {
      v10 += 3;
      if (v10 == v11)
        break;
      v13 = v10[1];
      if ((*v10 != -1 || v13 != -1) && (*v10 != -2 || v13 != -2))
        goto LABEL_15;
    }
    v10 = v11;
LABEL_15:
    if (v10 == (_DWORD *)v12)
      goto LABEL_22;
  }
  return v10[2];
}

_QWORD *sub_1C51E32A0(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C620469C(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 12 * v10;
    do
    {
      *result = -1;
      result = (_QWORD *)((char *)result + 12);
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51E3364()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1ED7FD118) = &off_1E81470D0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FD120);
  if (v2 != -1)
  {
    v6[0] = sub_1C51E280C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FD120, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51E343C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C51E34D0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51E355C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LiveIntervals::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C51E35A8(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  llvm::MachineLoop **v7;
  llvm::MachineLoop **v8;
  llvm::MachineLoop *v9;
  uint64_t *TopBlock;
  void **v11;
  void *v12;
  uint64_t *v13;
  llvm *v14;
  llvm *v15;
  void *v16;
  unint64_t v17;
  llvm::raw_ostream *v18;
  int v19;
  llvm *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  BOOL v44;
  BOOL v45;
  llvm *v46;
  llvm::raw_ostream *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t v58;
  llvm *v59;
  llvm *v60;
  llvm *v61;
  _QWORD *v62;
  unint64_t v63;
  llvm::raw_ostream *v64;
  int v65;
  _QWORD *v66;
  unint64_t v67;
  llvm::raw_ostream *v68;
  int v69;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD v84[4];
  int v85;
  unint64_t v86[2];
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MachineLoopInfo::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineLoopInfo::ID);
  v7 = *(llvm::MachineLoop ***)(v6 + 272);
  v8 = *(llvm::MachineLoop ***)(v6 + 280);
  while (1)
  {
    if (v7 == v8)
      return 0;
    v9 = *v7;
    TopBlock = llvm::MachineLoop::getTopBlock(*v7);
    if (TopBlock == (uint64_t *)llvm::MachineLoop::getBottomBlock(v9))
      break;
    ++v7;
  }
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::LiveIntervals::ID);
  v73 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::LiveIntervals::ID);
  v13 = llvm::MachineLoop::getTopBlock(v9);
  v14 = llvm::dbgs((llvm *)v13);
  v15 = v14;
  v16 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v16 > 0x24uLL)
  {
    qmemcpy(v16, "--- ModuloScheduleTest running on BB#", 37);
    *((_QWORD *)v14 + 4) += 37;
  }
  else
  {
    llvm::raw_ostream::write(v14, "--- ModuloScheduleTest running on BB#", 0x25uLL);
  }
  v17 = *((int *)v13 + 6);
  if ((v17 & 0x80000000) != 0)
  {
    v17 = -(uint64_t)v17;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v18 = v15;
    v19 = 0;
  }
  v20 = sub_1C5E21910(v18, v17, 0, 0, v19);
  v21 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v21)
  {
    v20 = llvm::raw_ostream::write(v15, "\n", 1uLL);
  }
  else
  {
    *v21 = 10;
    ++*((_QWORD *)v15 + 4);
  }
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v22 = v13 + 6;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v23 = v13[7];
  if ((uint64_t *)v23 == v13 + 6)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    goto LABEL_94;
  }
  v30 = 0;
  v29 = 0;
  v28 = 0;
  do
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8);
    if ((*(_WORD *)(v23 + 44) & 0xC) != 0 && (*(_WORD *)(v23 + 44) & 4) == 0)
    {
      v35 = v23;
      if ((v33 & 0x200) != 0)
        goto LABEL_83;
      while ((*(_WORD *)(v35 + 44) & 8) != 0)
      {
        v35 = *(_QWORD *)(v35 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v35 + 16) + 9) & 2) != 0)
          goto LABEL_83;
      }
    }
    else if ((v33 & 0x200) != 0)
    {
      goto LABEL_83;
    }
    if (v28 >= v30)
    {
      v36 = (v28 - v29) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        abort();
      if ((v30 - v29) >> 2 > v37)
        v37 = (v30 - v29) >> 2;
      if ((unint64_t)(v30 - v29) >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
      {
        if (v38 >> 61)
          sub_1C4764EE4();
        v20 = (llvm *)operator new(8 * v38);
      }
      else
      {
        v20 = 0;
      }
      v39 = (uint64_t *)((char *)v20 + 8 * v36);
      *v39 = v23;
      v40 = (char *)(v39 + 1);
      while (v28 != v29)
      {
        v41 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v39 = v41;
      }
      v30 = (char *)v20 + 8 * v38;
      if (v29)
        operator delete(v29);
      v29 = (char *)v39;
      v28 = v40;
    }
    else
    {
      *(_QWORD *)v28 = v23;
      v28 += 8;
    }
    v42 = *(_QWORD *)(v23 + 48);
    if (v42 >= 8)
    {
      v43 = (_BYTE *)(v42 & 0xFFFFFFFFFFFFFFF8);
      v44 = (*(_QWORD *)(v23 + 48) & 7) != 2 || v43 == 0;
      if (!v44
        || ((*(_QWORD *)(v23 + 48) & 7) == 3 ? (v45 = v43 == 0) : (v45 = 1),
            !v45 && v43[5] && (v43 = *(_BYTE **)&v43[8 * *(int *)v43 + 8 + 8 * v43[4]]) != 0))
      {
        v46 = llvm::dbgs(v20);
        v47 = v46;
        v48 = (void *)*((_QWORD *)v46 + 4);
        if (*((_QWORD *)v46 + 3) - (_QWORD)v48 > 0x1DuLL)
        {
          qmemcpy(v48, "Parsing post-instr symbol for ", 30);
          *((_QWORD *)v46 + 4) += 30;
        }
        else
        {
          llvm::raw_ostream::write(v46, "Parsing post-instr symbol for ", 0x1EuLL);
        }
        llvm::MachineInstr::print((llvm::MachineInstr *)v23, v47, 1, 0, 0, 1, 0);
        v49 = 0;
        v50 = 0;
        if ((*v43 & 4) != 0)
        {
          v51 = (unint64_t *)*((_QWORD *)v43 - 1);
          v52 = *v51;
          v49 = (uint64_t)(v51 + 2);
          v50 = v52;
        }
        v95 = v23;
        v53 = sub_1C6128C08(&v99, &v95);
        v94 = v23;
        v74 = sub_1C6128C08((uint64_t *)&v96, &v94);
        llvm::getToken(v49, v50, "_", 1, &v75);
        llvm::getToken((uint64_t)v75, v76, "-", 1, v91);
        llvm::getToken(v77, v78, "-", 1, &v102);
        v55 = v92;
        if (v93)
          v55 = v92 + 1;
        v86[0] = 0;
        v88 = v55;
        v89 = v93 - (v93 != 0);
        llvm::consumeSignedInteger((llvm *)&v88, (llvm::StringRef *)0xA, v86, v54);
        if ((v57 & 1) == 0 && !v89 && v86[0] == SLODWORD(v86[0]))
          *((_DWORD *)v74 + 2) = v86[0];
        v58 = (uint64_t)v104;
        if (v105)
          v58 = (uint64_t)(v104 + 1);
        v86[0] = 0;
        v88 = v58;
        v89 = v105 - (v105 != 0);
        llvm::consumeSignedInteger((llvm *)&v88, (llvm::StringRef *)0xA, v86, v56);
        if ((v59 & 1) == 0 && !v89 && v86[0] == SLODWORD(v86[0]))
          *((_DWORD *)v53 + 2) = v86[0];
        v60 = llvm::dbgs(v59);
        v61 = v60;
        v62 = (_QWORD *)*((_QWORD *)v60 + 4);
        if (*((_QWORD *)v60 + 3) - (_QWORD)v62 > 7uLL)
        {
          *v62 = 0x3D65676174532020;
          *((_QWORD *)v60 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v60, "  Stage=", 8uLL);
        }
        v63 = *((int *)v74 + 2);
        if ((v63 & 0x80000000) != 0)
        {
          v63 = -(uint64_t)v63;
          v64 = v61;
          v65 = 1;
        }
        else
        {
          v64 = v61;
          v65 = 0;
        }
        sub_1C5E21910(v64, v63, 0, 0, v65);
        v66 = (_QWORD *)*((_QWORD *)v61 + 4);
        if (*((_QWORD *)v61 + 3) - (_QWORD)v66 > 7uLL)
        {
          *v66 = 0x3D656C637943202CLL;
          *((_QWORD *)v61 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v61, ", Cycle=", 8uLL);
        }
        v67 = *((int *)v53 + 2);
        if ((v67 & 0x80000000) != 0)
        {
          v67 = -(uint64_t)v67;
          v68 = v61;
          v69 = 1;
        }
        else
        {
          v68 = v61;
          v69 = 0;
        }
        v20 = sub_1C5E21910(v68, v67, 0, 0, v69);
        v70 = (_BYTE *)*((_QWORD *)v61 + 4);
        if (*((_BYTE **)v61 + 3) == v70)
        {
          v20 = llvm::raw_ostream::write(v61, "\n", 1uLL);
        }
        else
        {
          *v70 = 10;
          ++*((_QWORD *)v61 + 4);
        }
      }
    }
LABEL_83:
    if ((*(_BYTE *)v23 & 4) == 0)
    {
      while ((*(_WORD *)(v23 + 44) & 8) != 0)
        v23 = *(_QWORD *)(v23 + 8);
    }
    v23 = *(_QWORD *)(v23 + 8);
  }
  while ((uint64_t *)v23 != v22);
  v27 = v99;
  v31 = v100;
  v26 = v101;
  v25 = v96;
  v32 = v97;
  v24 = v98;
LABEL_94:
  v102 = v29;
  v103 = v28;
  v104 = v30;
  v88 = v27;
  v99 = 0;
  v89 = v31;
  v100 = 0;
  v90 = v26;
  v101 = 0;
  v86[0] = v25;
  v96 = 0;
  v86[1] = v32;
  v97 = 0;
  v87 = v24;
  v98 = 0;
  sub_1C5190EA4((uint64_t)v91, a2, (uint64_t)v9, (uint64_t)&v102, (uint64_t)&v88, (uint64_t)v86);
  MEMORY[0x1CAA32FB4](v86[0], 8);
  MEMORY[0x1CAA32FB4](v88, 8);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  v75 = v91;
  v76 = a2;
  v71 = *(_QWORD *)(a2 + 40);
  v77 = *(_QWORD *)(a2 + 16);
  v78 = v71;
  v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 104))(v77);
  v80 = v73;
  v81 = 0;
  v82 = 0;
  v83 = v84;
  memset(v84, 0, sizeof(v84));
  v85 = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  llvm::ModuloScheduleExpander::expand((llvm::ModuloScheduleExpander *)&v75);
  llvm::ModuloScheduleExpander::cleanup((llvm::ModuloScheduleExpander *)&v75);
  sub_1C61F7BE8((uint64_t)&v75);
  sub_1C61F7C38(v91);
  MEMORY[0x1CAA32FB4](v96, 8);
  MEMORY[0x1CAA32FB4](v99, 8);
  return 0;
}

uint64_t **sub_1C51E3D00(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *((_BYTE *)v7 + 36) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_OWORD *sub_1C51E3DCC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6204904(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C51E3E94(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

_QWORD *sub_1C51E3F10(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6204B08(a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 80 * v10;
    do
    {
      *result = -4096;
      result += 10;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C51E3FD4(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *result;
  uint64_t v17;

  v8 = *a5;
  if (a1 == a3)
  {
    v15 = a2;
  }
  else
  {
    v9 = a1 + 1;
    v10 = (uint64_t)(*a1 + 512);
    v11 = a2;
    for (i = (uint64_t *)v10; ; i = v14 + 512)
    {
      sub_1C51E4058(v11, i, v8);
      v8 = v13;
      *a5 = v13;
      if (v9 == a3)
        break;
      v14 = *v9++;
      v11 = v14;
    }
    v15 = *a3;
  }
  result = sub_1C51E4058(v15, a4, v8);
  *a5 = v17;
  return result;
}

uint64_t *sub_1C51E4058(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned int v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    v6 = *(_DWORD *)(a3 + 8);
    do
    {
      v7 = *v4;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = v7;
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v4;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1C51E40FC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v6 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  if (*(_DWORD *)(a2 + 24))
    sub_1C48621E4(v6, a2 + 16);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *a3;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  if (*((_DWORD *)a3 + 6))
    sub_1C48621E4(a1 + 80, (uint64_t)(a3 + 1));
  *(_OWORD *)(a1 + 112) = a3[3];
  return a1;
}

void llvm::MultiHazardRecognizer::AddHazardRecognizer(uint64_t a1, char *a2)
{
  char *v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;

  v2 = a2;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v6 = (unint64_t *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8) > v4)
    v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  v7 = *(unsigned int *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    v10 = v7 + 1;
    v11 = v5 + 8 * v7;
    if (v5 <= (unint64_t)v2 && v11 > (unint64_t)v2)
    {
      v13 = &v2[-v5];
      sub_1C6189DFC(a1 + 16, v10);
      v5 = *v6;
      v2 = &v13[*v6];
    }
    else
    {
      sub_1C6189DFC(a1 + 16, v10);
      v5 = *v6;
    }
  }
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v5 + 8 * v8) = v9;
  *(_DWORD *)(a1 + 24) = v8 + 1;
}

uint64_t llvm::MultiHazardRecognizer::atIssueLimit(llvm::MultiHazardRecognizer *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t llvm::MultiHazardRecognizer::getHazardType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v3)
    return 0;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = 8 * v3;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 24))(*v6, a2, a3);
    if ((_DWORD)result)
      break;
    ++v6;
    v7 -= 8;
    if (!v7)
      return 0;
  }
  return result;
}

uint64_t llvm::MultiHazardRecognizer::Reset(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::EmitInstruction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 16);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t llvm::MultiHazardRecognizer::EmitInstruction(uint64_t this, llvm::MachineInstr *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 24);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 16);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v6 + 48))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::PreEmitNoops(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(v4) = 0;
  v5 = *(uint64_t **)(a1 + 16);
  v6 = 8 * v2;
  do
  {
    v7 = *v5++;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a2);
    if (v8 <= v4)
      v4 = v4;
    else
      v4 = v8;
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t llvm::MultiHazardRecognizer::PreEmitNoops(llvm::MultiHazardRecognizer *this, llvm::MachineInstr *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *((unsigned int *)this + 6);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(v4) = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = 8 * v2;
  do
  {
    v7 = *v5++;
    v8 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v7 + 64))(v7, a2);
    if (v8 <= v4)
      v4 = v4;
    else
      v4 = v8;
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t llvm::MultiHazardRecognizer::ShouldPreferAnother(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(uint64_t **)(a1 + 16);
  v5 = 8 * v2 - 8;
  do
  {
    v6 = *v4++;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a2);
    if ((result & 1) != 0)
      break;
    v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return result;
}

uint64_t llvm::MultiHazardRecognizer::AdvanceCycle(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::RecedeCycle(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::EmitNoop(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t sub_1C51E45CC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8147190;
  sub_1C51E463C((char **)(a1 + 16));
  return a1;
}

void sub_1C51E45FC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8147190;
  sub_1C51E463C((char **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

char **sub_1C51E463C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C51E46AC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Implement the 'patchable-function' attribute";
  *(_QWORD *)(v2 + 8) = 44;
  *(_QWORD *)(v2 + 16) = "patchable-function";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB4;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51E473C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C51E473C()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB4) = &off_1E8147210;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FD128);
  if (v2 != -1)
  {
    v6[0] = sub_1C51E46AC;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FD128, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51E4814(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C51E48A8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51E4934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int j;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v38;
  uint64_t *k;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v46;
  llvm::MachineFunction *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const llvm::MachineOperand *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (v2)
  {
    v3 = a2;
    if (*(_DWORD *)(v2 + 8))
    {
      v4 = *(_QWORD *)(v2 + 40);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 40);
        if (v5)
        {
          v6 = *(_QWORD *)(v4 + 24);
          v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v7 & 1) == 0)
          {
            v85 = *(_DWORD *)(v4 + 40);
            v80 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v5 = v85;
            if (v80)
            {
              v81 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v81 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v81;
              __cxa_guard_release(&qword_1ED7EAC88);
              v5 = v85;
            }
          }
          v8 = __ROR8__(qword_1ED7EAC80 ^ 0xD0DB31C61410D441, 30);
          v9 = 0x9DDFEA08EB382D69
             * ((qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                                           * ((v8 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80
                                                                                           - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL))));
          v10 = -348639895 * ((v9 >> 47) ^ v9);
          v11 = v5 - 1;
          for (i = 1; ; ++i)
          {
            v13 = v10 & v11;
            v14 = v6 + 24 * v13;
            v15 = *(_QWORD **)v14;
            if (*(_QWORD *)v14 == -1)
            {
              if ("patchable-function-entry" == (char *)-1)
                goto LABEL_23;
            }
            else if (v15 == (_QWORD *)-2)
            {
              if ("patchable-function-entry" == (char *)-2)
                goto LABEL_23;
            }
            else if (*(_QWORD *)(v14 + 8) == 24)
            {
              a2 = v15[2];
              v16 = *v15 == 0x6C62616863746170 && v15[1] == 0x6974636E75662D65;
              if (v16 && a2 == 0x7972746E652D6E6FLL)
              {
LABEL_23:
                v18 = *(_QWORD **)(v3 + 328);
                v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 104))(*(_QWORD *)(v3 + 16), a2);
                v20 = (unint64_t *)v18[7];
                v21 = *(_QWORD *)(v19 + 8) + 1680;
                v22 = (llvm::MachineFunction *)v18[4];
                v89 = 0;
                v23 = *((_QWORD *)v22 + 28);
                if (v23)
                  *((_QWORD *)v22 + 28) = *(_QWORD *)v23;
                else
                  v23 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
                v86 = 0;
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v22, v21, &v86, 0);
                if (v86)
                  llvm::MetadataTracking::untrack((uint64_t)&v86, v86);
                if (v89)
                  llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
                v51 = v18[5];
                *(_QWORD *)(v23 + 24) = v51;
                v52 = *(_QWORD *)(v51 + 32);
                v53 = *(unsigned int *)(v23 + 40);
                if ((_DWORD)v53)
                {
                  v66 = *(_QWORD *)(v23 + 32);
                  v67 = *(_QWORD *)(v52 + 40);
                  v68 = 32 * v53;
                  do
                  {
                    if (!*(_BYTE *)v66)
                    {
                      v69 = *(unsigned int *)(v66 + 4);
                      if ((int)v69 >= 0)
                        v70 = (uint64_t *)(*(_QWORD *)(v67 + 272) + 8 * v69);
                      else
                        v70 = (uint64_t *)(*(_QWORD *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                      v71 = *v70;
                      if (*v70)
                      {
                        v72 = *(_QWORD *)(v71 + 16);
                        *(_QWORD *)(v71 + 16) = v66;
                        *(_QWORD *)(v66 + 16) = v72;
                        if ((*(_BYTE *)(v66 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v66 + 24) = v71;
                        }
                        else
                        {
                          *(_QWORD *)(v66 + 24) = 0;
                          v70 = (uint64_t *)(v72 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v66 + 16) = v66;
                        *(_QWORD *)(v66 + 24) = 0;
                      }
                      *v70 = v66;
                    }
                    v66 += 32;
                    v68 -= 32;
                  }
                  while (v68);
                }
                v54 = *(_QWORD *)(v52 + 728);
                if (v54)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v23);
                v55 = *v20 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v23 = v55 | *(_QWORD *)v23 & 7;
                *(_QWORD *)(v23 + 8) = v20;
                *(_QWORD *)(v55 + 8) = v23;
                *v20 = *v20 & 7 | v23;
                return 1;
              }
            }
            if (v15 == (_QWORD *)-1)
              break;
            v10 = i + v13;
          }
          v2 = *(_QWORD *)(*(_QWORD *)v3 + 112);
          if (!v2)
            return 0;
        }
      }
    }
    if (*(_DWORD *)(v2 + 8))
    {
      v24 = *(_QWORD *)(v2 + 40);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 40);
        if (v25)
        {
          v26 = *(_QWORD *)(v24 + 24);
          v27 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v27 & 1) == 0)
          {
            v82 = v25;
            v83 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v25 = v82;
            if (v83)
            {
              v84 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v84 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v84;
              __cxa_guard_release(&qword_1ED7EAC88);
              v25 = v82;
            }
          }
          v28 = __ROR8__(qword_1ED7EAC80 ^ 0xD02F23F80FCFBA7ALL, 30);
          v29 = 0x9DDFEA08EB382D69
              * ((qword_1ED7EAC80 - 0x1CFE3D1088A182B9) ^ ((0x9DDFEA08EB382D69
                                                            * ((v28 - 0x7EB4AA8EE79AFE29) ^ (qword_1ED7EAC80
                                                                                             - 0x1CFE3D1088A182B9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v28 - 0x7EB4AA8EE79AFE29) ^ (qword_1ED7EAC80 - 0x1CFE3D1088A182B9))));
          v30 = -348639895 * ((v29 >> 47) ^ v29);
          v31 = v25 - 1;
          for (j = 1; ; ++j)
          {
            v33 = v30 & v31;
            v34 = (uint64_t *)(v26 + 24 * v33);
            v35 = *v34;
            if (*v34 == -1)
            {
              if ("patchable-function" == (char *)-1)
                goto LABEL_47;
            }
            else if (v35 == -2)
            {
              if ("patchable-function" == (char *)-2)
                goto LABEL_47;
            }
            else if (v34[1] == 18)
            {
              a2 = *(unsigned __int16 *)(v35 + 16);
              v36 = *(_QWORD *)v35 == 0x6C62616863746170 && *(_QWORD *)(v35 + 8) == 0x6974636E75662D65;
              if (v36 && (_DWORD)a2 == 28271)
              {
LABEL_47:
                v38 = *(_QWORD *)(v3 + 328);
                for (k = (uint64_t *)(v38 + 56); ; k = (uint64_t *)(v40 + 8))
                {
                  v40 = *k;
                  v41 = **(unsigned __int16 **)(*k + 16);
                  v42 = v41 > 0x11;
                  v43 = (1 << v41) & 0x224B8;
                  if (v42 || v43 == 0)
                    break;
                  if ((*(_BYTE *)v40 & 4) == 0)
                  {
                    while ((*(_WORD *)(v40 + 44) & 8) != 0)
                      v40 = *(_QWORD *)(v40 + 8);
                  }
                }
                v46 = *(_QWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 104))(*(_QWORD *)(v3 + 16), a2)+ 8);
                v47 = *(llvm::MachineFunction **)(v38 + 32);
                v48 = *(unsigned __int8 **)(v40 + 56);
                v89 = v48;
                if (v48)
                  llvm::MetadataTracking::track((uint64_t)&v89, v48, 2);
                v49 = v46 + 1632;
                v50 = *((_QWORD *)v47 + 28);
                if (v50)
                  *((_QWORD *)v47 + 28) = *(_QWORD *)v50;
                else
                  v50 = sub_1C484358C((uint64_t)v47 + 128, 72, 3);
                v86 = v89;
                if (v89)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v89, v89, (uint64_t)&v86);
                  v89 = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v50, v47, v49, &v86, 0);
                if (v86)
                  llvm::MetadataTracking::untrack((uint64_t)&v86, v86);
                if (v89)
                  llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
                v56 = *(_QWORD *)(v38 + 40);
                *(_QWORD *)(v50 + 24) = v56;
                v57 = *(_QWORD *)(v56 + 32);
                v58 = *(unsigned int *)(v50 + 40);
                if ((_DWORD)v58)
                {
                  v73 = *(_QWORD *)(v50 + 32);
                  v74 = *(_QWORD *)(v57 + 40);
                  v75 = 32 * v58;
                  do
                  {
                    if (!*(_BYTE *)v73)
                    {
                      v76 = *(unsigned int *)(v73 + 4);
                      if ((int)v76 >= 0)
                        v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
                      else
                        v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
                      v78 = *v77;
                      if (*v77)
                      {
                        v79 = *(_QWORD *)(v78 + 16);
                        *(_QWORD *)(v78 + 16) = v73;
                        *(_QWORD *)(v73 + 16) = v79;
                        if ((*(_BYTE *)(v73 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v73 + 24) = v78;
                        }
                        else
                        {
                          *(_QWORD *)(v73 + 24) = 0;
                          v77 = (uint64_t *)(v79 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v73 + 16) = v73;
                        *(_QWORD *)(v73 + 24) = 0;
                      }
                      *v77 = v73;
                    }
                    v73 += 32;
                    v75 -= 32;
                  }
                  while (v75);
                }
                v59 = *(_QWORD *)(v57 + 728);
                if (v59)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 24))(v59, v50);
                v60 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v50 = v60 | *(_QWORD *)v50 & 7;
                *(_QWORD *)(v50 + 8) = v40;
                *(_QWORD *)(v60 + 8) = v50;
                *(_QWORD *)v40 = *(_QWORD *)v40 & 7 | v50;
                LODWORD(v86) = 1;
                v87 = 0;
                v88 = 2;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v47, (const llvm::MachineOperand *)&v86);
                v61 = **(unsigned __int16 **)(v40 + 16);
                LODWORD(v86) = 1;
                v87 = 0;
                v88 = v61;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v47, (const llvm::MachineOperand *)&v86);
                v62 = *(unsigned int *)(v40 + 40);
                if ((_DWORD)v62)
                {
                  v63 = *(const llvm::MachineOperand **)(v40 + 32);
                  v64 = 32 * v62;
                  do
                  {
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v47, v63);
                    v63 = (const llvm::MachineOperand *)((char *)v63 + 32);
                    v64 -= 32;
                  }
                  while (v64);
                }
                v65 = v40;
                if ((*(_BYTE *)v40 & 4) == 0)
                {
                  v65 = v40;
                  if ((*(_WORD *)(v40 + 44) & 8) != 0)
                  {
                    v65 = v40;
                    do
                      v65 = *(_QWORD *)(v65 + 8);
                    while ((*(_WORD *)(v65 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(v40 + 24) + 40, v40, *(_QWORD *)(v65 + 8));
                if (*(unsigned __int8 *)(v3 + 352) <= 3u)
                  *(_BYTE *)(v3 + 352) = 4;
                return 1;
              }
            }
            if (v35 == -1)
              return 0;
            v30 = j + v33;
          }
        }
      }
    }
  }
  return 0;
}

void sub_1C51E50C8(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

llvm::raw_ostream *llvm::MBFIWrapper::printBlockFreq(llvm::MBFIWrapper *this, llvm::raw_ostream *a2, const llvm::MachineBasicBlock *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t BlockFreq;

  v4 = *(_QWORD *)this;
  BlockFreq = llvm::MBFIWrapper::getBlockFreq(this, a3);
  v5 = *(_QWORD *)(v4 + 248);
  if (v5)
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v5, a2, (unint64_t *)&BlockFreq);
  return a2;
}

llvm::raw_ostream *llvm::MBFIWrapper::printBlockFreq(uint64_t *a1, llvm::ScaledNumberBase *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;

  v3 = *a1;
  v6 = a3;
  v4 = *(_QWORD *)(v3 + 248);
  if (v4)
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v4, a2, &v6);
  return a2;
}

void llvm::MIRPrinter::convert(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v5;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  __int128 *v16;
  void (**v17)(__int128 *);
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  _BYTE *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _BYTE *v32;
  __int128 v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  char *v37;
  _BYTE *v38;
  char *v39;
  void **v40;
  void **v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  __int128 v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  char *v64;
  void **v65;
  void **v66;
  __int128 v67;
  __int128 v68;
  void **v69;
  unsigned __int16 *v70;
  int v71;
  _OWORD *v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  int64x2_t v83;
  char *v84;
  int v85;
  int v86;
  _BYTE v89[88];
  __int128 v90;
  void *v91[2];
  _BYTE v92[24];
  char v93;
  uint64_t v94;
  int v95;
  _BYTE *v96;
  __int128 v97;
  char *v98;
  __int128 *v99;
  uint64_t v100;

  v4 = a4;
  v5 = a3;
  v100 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a2 + 23) = (**(_BYTE **)(*(_QWORD *)a3 + 360) & 4) != 0;
  v7 = a3[8];
  if (v7)
  {
    v8 = 0;
    v86 = a3[8];
    while (1)
    {
      v90 = 0u;
      *(_DWORD *)v89 = v8;
      v9 = v8 & 0x7FFFFFFF;
      memset(&v89[8], 0, 80);
      if ((v8 & 0x7FFFFFFFu) < v5[18])
      {
        v10 = *((_QWORD *)v5 + 8) + 24 * v9;
        v11 = *(_BYTE *)(v10 + 23);
        v12 = v11;
        v13 = *(_QWORD *)(v10 + 8);
        v14 = v11 & 0x7F;
        if (v12 >= 0)
          v13 = v14;
        if (v13)
          goto LABEL_54;
      }
      LODWORD(v91[1]) = 0;
      v93 = 0;
      v94 = 0;
      v91[0] = &unk_1E81A7208;
      v96 = &v89[24];
      v95 = 0;
      memset(v92, 0, sizeof(v92));
      v15 = operator new(0x20uLL);
      *(_QWORD *)v15 = &off_1E814D0E8;
      v15[2] = v8 | 0x80000000;
      *((_QWORD *)v15 + 2) = v5;
      *((_QWORD *)v15 + 3) = v4;
      v99 = (__int128 *)v15;
      sub_1C52C9EF0((uint64_t)v15, (llvm::raw_ostream *)v91);
      v16 = v99;
      if (v99 == &v97)
        break;
      if (v99)
      {
        v17 = (void (**)(__int128 *))(*(_QWORD *)v99 + 40);
LABEL_11:
        (*v17)(v16);
      }
      v91[0] = off_1E81A6E70;
      if (v95 == 1 && *(_QWORD *)v92)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v92, 0x1000C8077774924);
      v18 = *((_QWORD *)v5 + 26);
      v19 = v18 + 40 * v9;
      if (*(_DWORD *)(v19 + 16))
      {
        if (!*(_DWORD *)(v18 + 40 * v9))
        {
          v20 = **(_DWORD **)(v19 + 8);
          if (v20)
            sub_1C51E8830(v20, (uint64_t)&v89[64], v4);
        }
      }
      v22 = *(_QWORD *)(a2 + 40);
      v21 = *(_QWORD *)(a2 + 48);
      if (v22 >= v21)
      {
        v26 = *(_QWORD *)(a2 + 32);
        v27 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v22 - v26) >> 3);
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) > 0x276276276276276)
LABEL_139:
          abort();
        v29 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v21 - v26) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x13B13B13B13B13BLL)
          v30 = 0x276276276276276;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 > 0x276276276276276)
LABEL_140:
            sub_1C4764EE4();
          v31 = (char *)operator new(104 * v30);
        }
        else
        {
          v31 = 0;
        }
        v35 = &v31[104 * v27];
        *(_OWORD *)v35 = *(_OWORD *)v89;
        *((_QWORD *)v35 + 2) = *(_QWORD *)&v89[16];
        v36 = v35 + 24;
        if ((v89[47] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v36, *(void **)&v89[24], *(unint64_t *)&v89[32]);
        }
        else
        {
          *(_OWORD *)v36 = *(_OWORD *)&v89[24];
          *((_QWORD *)v35 + 5) = *(_QWORD *)&v89[40];
        }
        v37 = &v31[104 * v27];
        *((_OWORD *)v37 + 3) = *(_OWORD *)&v89[48];
        v38 = v37 + 64;
        if ((v89[87] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v38, *(void **)&v89[64], *(unint64_t *)&v89[72]);
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)&v89[64];
          *((_QWORD *)v37 + 10) = *(_QWORD *)&v89[80];
        }
        v5 = a3;
        v39 = &v31[104 * v30];
        *(_OWORD *)&v31[104 * v27 + 88] = v90;
        v34 = v35 + 104;
        v40 = *(void ***)(a2 + 32);
        v41 = *(void ***)(a2 + 40);
        if (v41 == v40)
        {
          *(_QWORD *)(a2 + 32) = v35;
          *(_QWORD *)(a2 + 40) = v34;
          *(_QWORD *)(a2 + 48) = v39;
        }
        else
        {
          do
          {
            v42 = *(_OWORD *)(v41 - 13);
            *((_QWORD *)v35 - 11) = *(v41 - 11);
            *(_OWORD *)(v35 - 104) = v42;
            v43 = *((_OWORD *)v41 - 5);
            *((_QWORD *)v35 - 8) = *(v41 - 8);
            *((_OWORD *)v35 - 5) = v43;
            *(v41 - 9) = 0;
            *(v41 - 8) = 0;
            *(v41 - 10) = 0;
            *(_OWORD *)(v35 - 56) = *(_OWORD *)(v41 - 7);
            v44 = *(_OWORD *)(v41 - 5);
            *((_QWORD *)v35 - 3) = *(v41 - 3);
            *(_OWORD *)(v35 - 40) = v44;
            *(v41 - 4) = 0;
            *(v41 - 3) = 0;
            *(v41 - 5) = 0;
            *((_OWORD *)v35 - 1) = *((_OWORD *)v41 - 1);
            v35 -= 104;
            v41 -= 13;
          }
          while (v41 != v40);
          v41 = *(void ***)(a2 + 32);
          v45 = *(void ***)(a2 + 40);
          *(_QWORD *)(a2 + 32) = v35;
          *(_QWORD *)(a2 + 40) = v34;
          *(_QWORD *)(a2 + 48) = v39;
          if (v45 != v41)
          {
            v7 = v86;
            do
            {
              if (*((char *)v45 - 17) < 0)
                operator delete(*(v45 - 5));
              if (*((char *)v45 - 57) < 0)
                operator delete(*(v45 - 10));
              v45 -= 13;
            }
            while (v45 != v41);
            if (!v41)
              goto LABEL_52;
LABEL_51:
            operator delete(v41);
            goto LABEL_52;
          }
        }
        v7 = v86;
        if (v41)
          goto LABEL_51;
      }
      else
      {
        v23 = *(_OWORD *)v89;
        *(_QWORD *)(v22 + 16) = *(_QWORD *)&v89[16];
        *(_OWORD *)v22 = v23;
        v24 = (_BYTE *)(v22 + 24);
        if ((v89[47] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v24, *(void **)&v89[24], *(unint64_t *)&v89[32]);
        }
        else
        {
          v25 = *(_OWORD *)&v89[24];
          *(_QWORD *)(v22 + 40) = *(_QWORD *)&v89[40];
          *(_OWORD *)v24 = v25;
        }
        *(_OWORD *)(v22 + 48) = *(_OWORD *)&v89[48];
        v32 = (_BYTE *)(v22 + 64);
        if ((v89[87] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v32, *(void **)&v89[64], *(unint64_t *)&v89[72]);
        }
        else
        {
          v33 = *(_OWORD *)&v89[64];
          *(_QWORD *)(v22 + 80) = *(_QWORD *)&v89[80];
          *(_OWORD *)v32 = v33;
        }
        *(_OWORD *)(v22 + 88) = v90;
        v34 = (char *)(v22 + 104);
      }
LABEL_52:
      *(_QWORD *)(a2 + 40) = v34;
      v4 = a4;
      if ((v89[87] & 0x80000000) != 0)
        operator delete(*(void **)&v89[64]);
LABEL_54:
      if ((v89[47] & 0x80000000) != 0)
        operator delete(*(void **)&v89[24]);
      if (++v8 == v7)
        goto LABEL_63;
    }
    v17 = (void (**)(__int128 *))(v97 + 32);
    v16 = &v97;
    goto LABEL_11;
  }
LABEL_63:
  v46 = (int *)*((_QWORD *)v5 + 57);
  v47 = (int *)*((_QWORD *)v5 + 58);
  if (v47 != v46)
  {
    while (1)
    {
      v48 = *v46;
      v49 = v46[1];
      memset(v89, 0, 80);
      sub_1C51E8830(v48, (uint64_t)v89, v4);
      if (v49)
        sub_1C51E8830(v49, (uint64_t)&v89[40], v4);
      v51 = *(_QWORD *)(a2 + 64);
      v50 = *(_QWORD *)(a2 + 72);
      if (v51 >= v50)
        break;
      if ((v89[23] & 0x80000000) != 0)
      {
        sub_1C47EBC30(*(_BYTE **)(a2 + 64), *(void **)v89, *(unint64_t *)&v89[8]);
      }
      else
      {
        v52 = *(_OWORD *)v89;
        *(_QWORD *)(v51 + 16) = *(_QWORD *)&v89[16];
        *(_OWORD *)v51 = v52;
      }
      *(_OWORD *)(v51 + 24) = *(_OWORD *)&v89[24];
      v59 = (_BYTE *)(v51 + 40);
      if ((v89[63] & 0x80000000) != 0)
      {
        sub_1C47EBC30(v59, *(void **)&v89[40], *(unint64_t *)&v89[48]);
      }
      else
      {
        v60 = *(_OWORD *)&v89[40];
        *(_QWORD *)(v51 + 56) = *(_QWORD *)&v89[56];
        *(_OWORD *)v59 = v60;
      }
      *(_OWORD *)(v51 + 64) = *(_OWORD *)&v89[64];
      v61 = (char *)(v51 + 80);
LABEL_104:
      *(_QWORD *)(a2 + 64) = v61;
      if ((v89[63] & 0x80000000) != 0)
        operator delete(*(void **)&v89[40]);
      if ((v89[23] & 0x80000000) != 0)
        operator delete(*(void **)v89);
      v46 += 2;
      if (v46 == v47)
        goto LABEL_109;
    }
    v53 = *(_QWORD *)(a2 + 56);
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - v53) >> 4);
    v55 = v54 + 1;
    if (v54 + 1 > 0x333333333333333)
      goto LABEL_139;
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - v53) >> 4);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x199999999999999)
      v57 = 0x333333333333333;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 > 0x333333333333333)
        goto LABEL_140;
      v58 = operator new(80 * v57);
    }
    else
    {
      v58 = 0;
    }
    v62 = &v58[80 * v54];
    if ((v89[23] & 0x80000000) != 0)
    {
      sub_1C47EBC30(&v58[80 * v54], *(void **)v89, *(unint64_t *)&v89[8]);
    }
    else
    {
      *(_OWORD *)v62 = *(_OWORD *)v89;
      *((_QWORD *)v62 + 2) = *(_QWORD *)&v89[16];
    }
    *(_OWORD *)(v62 + 24) = *(_OWORD *)&v89[24];
    v63 = &v58[80 * v54 + 40];
    if ((v89[63] & 0x80000000) != 0)
    {
      sub_1C47EBC30(v63, *(void **)&v89[40], *(unint64_t *)&v89[48]);
    }
    else
    {
      *(_OWORD *)v63 = *(_OWORD *)&v89[40];
      *(_QWORD *)&v58[80 * v54 + 56] = *(_QWORD *)&v89[56];
    }
    v64 = &v58[80 * v57];
    *(_OWORD *)&v58[80 * v54 + 64] = *(_OWORD *)&v89[64];
    v61 = v62 + 80;
    v65 = *(void ***)(a2 + 56);
    v66 = *(void ***)(a2 + 64);
    if (v66 == v65)
    {
      *(_QWORD *)(a2 + 56) = v62;
      *(_QWORD *)(a2 + 64) = v61;
      *(_QWORD *)(a2 + 72) = v64;
    }
    else
    {
      do
      {
        v67 = *((_OWORD *)v66 - 5);
        *((_QWORD *)v62 - 8) = *(v66 - 8);
        *((_OWORD *)v62 - 5) = v67;
        *(v66 - 9) = 0;
        *(v66 - 8) = 0;
        *(v66 - 10) = 0;
        *(_OWORD *)(v62 - 56) = *(_OWORD *)(v66 - 7);
        v68 = *(_OWORD *)(v66 - 5);
        *((_QWORD *)v62 - 3) = *(v66 - 3);
        *(_OWORD *)(v62 - 40) = v68;
        *(v66 - 4) = 0;
        *(v66 - 3) = 0;
        *(v66 - 5) = 0;
        *((_OWORD *)v62 - 1) = *((_OWORD *)v66 - 1);
        v62 -= 80;
        v66 -= 10;
      }
      while (v66 != v65);
      v66 = *(void ***)(a2 + 56);
      v69 = *(void ***)(a2 + 64);
      *(_QWORD *)(a2 + 56) = v62;
      *(_QWORD *)(a2 + 64) = v61;
      *(_QWORD *)(a2 + 72) = v64;
      if (v69 != v66)
      {
        v4 = a4;
        do
        {
          if (*((char *)v69 - 17) < 0)
            operator delete(*(v69 - 5));
          if (*((char *)v69 - 57) < 0)
            operator delete(*(v69 - 10));
          v69 -= 10;
        }
        while (v69 != v66);
        goto LABEL_102;
      }
    }
    v4 = a4;
LABEL_102:
    if (v66)
      operator delete(v66);
    goto LABEL_104;
  }
LABEL_109:
  if (*((_BYTE *)v5 + 144))
  {
    v70 = (unsigned __int16 *)*((_QWORD *)v5 + 19);
    v71 = *v70;
    v97 = 0uLL;
    v98 = 0;
    if (v71)
    {
      do
      {
        *(_OWORD *)v91 = 0u;
        memset(v92, 0, sizeof(v92));
        sub_1C51E8830(v71, (uint64_t)v91, a4);
        v72 = (_OWORD *)*((_QWORD *)&v97 + 1);
        if (*((_QWORD *)&v97 + 1) >= (unint64_t)v98)
        {
          v74 = v97;
          v75 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3);
          v76 = v75 + 1;
          if (v75 + 1 > 0x666666666666666)
            goto LABEL_139;
          if (0x999999999999999ALL * ((uint64_t)&v98[-v97] >> 3) > v76)
            v76 = 0x999999999999999ALL * ((uint64_t)&v98[-v97] >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v98[-v97] >> 3) >= 0x333333333333333)
            v77 = 0x666666666666666;
          else
            v77 = v76;
          *(_QWORD *)&v89[24] = 0;
          *(_QWORD *)&v89[32] = &v98;
          if (v77)
          {
            if (v77 > 0x666666666666666)
              goto LABEL_140;
            v78 = operator new(40 * v77);
          }
          else
          {
            v78 = 0;
          }
          v80 = &v78[40 * v75];
          if ((v92[7] & 0x80000000) != 0)
          {
            sub_1C47EBC30(&v78[40 * v75], v91[0], (unint64_t)v91[1]);
            v72 = (_OWORD *)*((_QWORD *)&v97 + 1);
            v74 = v97;
          }
          else
          {
            *(_OWORD *)v80 = *(_OWORD *)v91;
            *((_QWORD *)v80 + 2) = *(_QWORD *)v92;
          }
          *(_OWORD *)(v80 + 24) = *(_OWORD *)&v92[8];
          if (v72 == (_OWORD *)v74)
          {
            v83 = vdupq_n_s64(v74);
            v81 = &v78[40 * v75];
          }
          else
          {
            v81 = &v78[40 * v75];
            do
            {
              v82 = *(_OWORD *)((char *)v72 - 40);
              *((_QWORD *)v81 - 3) = *((_QWORD *)v72 - 3);
              *(_OWORD *)(v81 - 40) = v82;
              *((_QWORD *)v72 - 4) = 0;
              *((_QWORD *)v72 - 3) = 0;
              *((_QWORD *)v72 - 5) = 0;
              *((_OWORD *)v81 - 1) = *(v72 - 1);
              v81 -= 40;
              v72 = (_OWORD *)((char *)v72 - 40);
            }
            while (v72 != (_OWORD *)v74);
            v83 = (int64x2_t)v97;
          }
          v79 = v80 + 40;
          *(_QWORD *)&v97 = v81;
          *((_QWORD *)&v97 + 1) = v80 + 40;
          *(int64x2_t *)&v89[8] = v83;
          v84 = v98;
          v98 = &v78[40 * v77];
          *(_QWORD *)&v89[24] = v84;
          *(_QWORD *)v89 = v83.i64[0];
          sub_1C51EF1D4((uint64_t)v89);
        }
        else
        {
          if ((v92[7] & 0x80000000) != 0)
          {
            sub_1C47EBC30(*((_BYTE **)&v97 + 1), v91[0], (unint64_t)v91[1]);
          }
          else
          {
            v73 = *(_OWORD *)v91;
            *(_QWORD *)(*((_QWORD *)&v97 + 1) + 16) = *(_QWORD *)v92;
            *v72 = v73;
          }
          *(_OWORD *)((char *)v72 + 24) = *(_OWORD *)&v92[8];
          v79 = (char *)v72 + 40;
        }
        *((_QWORD *)&v97 + 1) = v79;
        if ((v92[7] & 0x80000000) != 0)
          operator delete(v91[0]);
        v85 = v70[1];
        ++v70;
        v71 = v85;
      }
      while (v85);
    }
    sub_1C6207D1C(a2 + 80, (std::string **)&v97);
    *(_QWORD *)v89 = &v97;
    sub_1C51E9EC0((void ***)v89);
  }
}

void llvm::MIRPrinter::convertStackObjects(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::ModuleSlotTracker *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  llvm::ModuleSlotTracker *v30;
  int v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t ***v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  const void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  _BYTE *v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  __int128 v76;
  _BYTE *v77;
  __int128 v78;
  __int128 v79;
  _BYTE *v80;
  __int128 v81;
  _BYTE *v82;
  __int128 v83;
  _BYTE *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  _BYTE *v92;
  char *v93;
  _BYTE *v94;
  char *v95;
  _BYTE *v96;
  char *v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void **v103;
  char *v104;
  _BYTE *v105;
  size_t v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t i;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int j;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  char v144[24];
  __int128 v145;
  unint64_t v146;
  int v147;
  char v148;
  _BYTE __dst[24];
  unint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  int v154;
  _QWORD *v155;
  _BYTE __str[80];
  __int128 v157;
  __int128 v158;
  _QWORD v159[3];
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  _QWORD v163[6];
  __int128 v164;
  __int128 v165;
  _QWORD v166[3];
  void *v167;
  uint64_t v168;
  _BYTE v169[128];
  void *v170;
  uint64_t v171;
  _QWORD v172[19];

  v172[16] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 56);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 176))(*(_QWORD *)(a3 + 16));
  v170 = v172;
  v171 = 0x2000000000;
  v7 = *(_DWORD *)(v5 + 32);
  v8 = -v7;
  v142 = v5;
  v140 = v7;
  v132 = v6;
  if (v7 <= 32)
  {
    if ((v8 & 0x80000000) == 0)
      goto LABEL_40;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v7, 4);
  }
  v9 = 0;
  v10 = v140;
  do
  {
    v11 = v171;
    if (v171 >= (unint64_t)HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v11 = v171;
    }
    *((_DWORD *)v170 + v11) = -1;
    LODWORD(v171) = v171 + 1;
    v12 = *(_DWORD *)(v5 + 32) + v8;
    v13 = *(_QWORD *)(v5 + 8);
    v14 = *(_QWORD *)(v13 + 40 * v12 + 8);
    if (v14 != -1)
    {
      *(_OWORD *)&__dst[4] = 0uLL;
      if (*(_BYTE *)(v5 + 654))
        v15 = 0;
      else
        v15 = *(_BYTE *)(v13 + 40 * v12 + 17) != 0;
      v16 = (uint64_t *)(v13 + 40 * v12);
      v17 = *((unsigned __int8 *)v16 + 18);
      v18 = *v16;
      v19 = *((unsigned __int8 *)v16 + 16) | 0x100;
      v20 = *((unsigned __int8 *)v16 + 20);
      v21 = *((_BYTE *)v16 + 33);
      v23 = a2[35];
      v22 = a2[36];
      v24 = 0x34F72C234F72C235 * ((uint64_t)(v22 - v23) >> 3);
      *((_DWORD *)v170 + v9) = v24;
      v25 = a2[37];
      if (v22 >= v25)
      {
        v27 = v24 + 1;
        if ((unint64_t)(v24 + 1) > 0x11A7B9611A7B961)
LABEL_201:
          abort();
        v28 = 0x34F72C234F72C235 * ((uint64_t)(v25 - v23) >> 3);
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x8D3DCB08D3DCB0)
          v29 = 0x11A7B9611A7B961;
        else
          v29 = v27;
        if (v29)
        {
          v136 = v17;
          v137 = v18;
          v138 = v21;
          v139 = v14;
          if (v29 > 0x11A7B9611A7B961)
LABEL_202:
            sub_1C4764EE4();
          v30 = a4;
          v31 = v20;
          v32 = (char *)operator new(232 * v29);
          v20 = v31;
          a4 = v30;
          v14 = v139;
          v21 = v138;
          v18 = v137;
          v17 = v136;
        }
        else
        {
          v32 = 0;
        }
        v33 = (uint64_t)&v32[8 * ((uint64_t)(v22 - v23) >> 3)];
        *(_DWORD *)v33 = v9;
        *(_OWORD *)(v33 + 4) = *(_OWORD *)__dst;
        v34 = &v32[232 * v29];
        *(_DWORD *)(v33 + 20) = *(_DWORD *)&__dst[16];
        *(_DWORD *)(v33 + 24) = v17;
        *(_QWORD *)(v33 + 32) = v18;
        *(_QWORD *)(v33 + 40) = v14;
        *(_WORD *)(v33 + 48) = v19;
        *(_DWORD *)(v33 + 52) = v20;
        *(_BYTE *)(v33 + 56) = v15;
        *(_BYTE *)(v33 + 57) = v21;
        *(_OWORD *)(v33 + 64) = 0u;
        *(_OWORD *)(v33 + 80) = 0u;
        *(_QWORD *)(v33 + 96) = 0;
        *(_BYTE *)(v33 + 104) = 1;
        v26 = v33 + 232;
        *(_OWORD *)(v33 + 112) = 0u;
        *(_OWORD *)(v33 + 128) = 0u;
        *(_OWORD *)(v33 + 144) = 0u;
        *(_OWORD *)(v33 + 160) = 0u;
        *(_OWORD *)(v33 + 176) = 0u;
        *(_OWORD *)(v33 + 192) = 0u;
        *(_OWORD *)(v33 + 208) = 0u;
        *(_QWORD *)(v33 + 224) = 0;
        v35 = sub_1C51EFA9C(v22, v22, v23, v23, v33, v33);
        v5 = v142;
        v37 = (void **)a2[35];
        v36 = (void **)a2[36];
        a2[35] = v35;
        a2[36] = v26;
        for (a2[37] = v34; v36 != v37; v36 -= 29)
        {
          if (*((char *)v36 - 17) < 0)
            operator delete(*(v36 - 5));
          if (*((char *)v36 - 57) < 0)
            operator delete(*(v36 - 10));
          if (*((char *)v36 - 97) < 0)
            operator delete(*(v36 - 15));
          if (*((char *)v36 - 145) < 0)
            operator delete(*(v36 - 21));
        }
        if (v37)
          operator delete(v37);
        v10 = v140;
      }
      else
      {
        *(_DWORD *)v22 = v9;
        *(_OWORD *)(v22 + 4) = *(_OWORD *)__dst;
        *(_DWORD *)(v22 + 20) = *(_DWORD *)&__dst[16];
        *(_DWORD *)(v22 + 24) = v17;
        *(_QWORD *)(v22 + 32) = v18;
        *(_QWORD *)(v22 + 40) = v14;
        *(_WORD *)(v22 + 48) = v19;
        *(_DWORD *)(v22 + 52) = v20;
        *(_BYTE *)(v22 + 56) = v15;
        *(_BYTE *)(v22 + 57) = v21;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_QWORD *)(v22 + 96) = 0;
        *(_BYTE *)(v22 + 104) = 1;
        v26 = v22 + 232;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 128) = 0u;
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 160) = 0u;
        *(_OWORD *)(v22 + 176) = 0u;
        *(_OWORD *)(v22 + 192) = 0u;
        *(_OWORD *)(v22 + 208) = 0u;
        *(_QWORD *)(v22 + 224) = 0;
        v5 = v142;
      }
      a2[36] = v26;
      *(_DWORD *)__str = v8;
      *(_QWORD *)&__str[8] = 0;
      __str[31] = 0;
      *(_DWORD *)&__str[32] = v9;
      __str[36] = 1;
      sub_1C51E8908((uint64_t)&v167, a1 + 32, (uint64_t)__str);
      if ((__str[31] & 0x80000000) != 0)
        operator delete(*(void **)&__str[8]);
    }
    ++v8;
    ++v9;
  }
  while (v9 != v10);
  LODWORD(v140) = *(_DWORD *)(v5 + 32);
LABEL_40:
  v167 = v169;
  v168 = 0x2000000000;
  v38 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 3;
  v39 = (-858993459 * v38 - v140);
  if ((int)v39 > 32)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, (-858993459 * v38 - v140), 4);
LABEL_43:
    v40 = v39;
    v41 = 0;
    v135 = v39;
    while (1)
    {
      v42 = v168;
      if (v168 >= (unint64_t)HIDWORD(v168))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 4);
        v42 = v168;
      }
      *((_DWORD *)v167 + v42) = -1;
      LODWORD(v168) = v168 + 1;
      if (*(_QWORD *)(*(_QWORD *)(v5 + 8) + 40 * (*(_DWORD *)(v5 + 32) + v41) + 8) == -1)
        goto LABEL_158;
      *(_QWORD *)&__str[72] = 0;
      *(_QWORD *)&v157 = 0;
      WORD4(v157) = 0;
      v158 = 0u;
      memset(v159, 0, sizeof(v159));
      LOBYTE(v160) = 1;
      BYTE8(v160) = 0;
      LOBYTE(v161) = 0;
      v162 = 0u;
      memset(v163, 0, sizeof(v163));
      v164 = 0u;
      v165 = 0u;
      memset(v166, 0, sizeof(v166));
      *(_DWORD *)__str = v41;
      v43 = *(_DWORD *)(v5 + 32) + v41;
      memset(&__str[8], 0, 60);
      v44 = *(_QWORD *)(v5 + 8);
      v45 = *(uint64_t ****)(v44 + 40 * v43 + 24);
      if (v45)
        break;
LABEL_68:
      v62 = v44 + 40 * v43;
      v63 = *(_QWORD *)(v62 + 8);
      if (*(_BYTE *)(v62 + 18))
        v64 = 1;
      else
        v64 = 2 * (v63 == 0);
      *(_DWORD *)&__str[64] = v64;
      *(_QWORD *)&__str[72] = *(_QWORD *)v62;
      *(_QWORD *)&v157 = v63;
      WORD4(v157) = *(unsigned __int8 *)(v62 + 16) | 0x100;
      HIDWORD(v157) = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + 40 * (*(_DWORD *)(v5 + 32) + v41) + 20);
      v65 = a2[38];
      v66 = a2[39];
      v67 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v66 - v65) >> 3);
      *((_DWORD *)v167 + v41) = v67;
      v68 = a2[40];
      if (v66 >= v68)
      {
        if (v67 + 1 > 0xEA0EA0EA0EA0EALL)
          goto LABEL_201;
        v72 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v68 - v65) >> 3);
        v73 = 2 * v72;
        if (2 * v72 <= v67 + 1)
          v73 = v67 + 1;
        if (v72 >= 0x75075075075075)
          v74 = 0xEA0EA0EA0EA0EALL;
        else
          v74 = v73;
        if (v74)
        {
          if (v74 > 0xEA0EA0EA0EA0EALL)
            goto LABEL_202;
          v75 = (char *)operator new(280 * v74);
        }
        else
        {
          v75 = 0;
        }
        v87 = (uint64_t)&v75[280 * v67];
        *(_OWORD *)v87 = *(_OWORD *)__str;
        *(_QWORD *)(v87 + 16) = *(_QWORD *)&__str[16];
        v88 = (_BYTE *)(v87 + 24);
        if ((__str[47] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v88, *(void **)&__str[24], *(unint64_t *)&__str[32]);
        }
        else
        {
          *(_OWORD *)v88 = *(_OWORD *)&__str[24];
          *(_QWORD *)(v87 + 40) = *(_QWORD *)&__str[40];
        }
        v89 = &v75[280 * v67];
        v90 = *(_OWORD *)&__str[64];
        v91 = v157;
        *((_OWORD *)v89 + 3) = *(_OWORD *)&__str[48];
        *((_OWORD *)v89 + 4) = v90;
        *((_OWORD *)v89 + 5) = v91;
        v92 = v89 + 96;
        if (SHIBYTE(v159[0]) < 0)
        {
          sub_1C47EBC30(v92, (void *)v158, *((unint64_t *)&v158 + 1));
        }
        else
        {
          *(_OWORD *)v92 = v158;
          *((_QWORD *)v89 + 14) = v159[0];
        }
        v93 = &v75[280 * v67];
        *(_OWORD *)(v93 + 120) = *(_OWORD *)&v159[1];
        *(_OWORD *)(v93 + 136) = v160;
        *((_QWORD *)v93 + 19) = v161;
        v94 = v93 + 160;
        if (SHIBYTE(v163[0]) < 0)
        {
          sub_1C47EBC30(v94, (void *)v162, *((unint64_t *)&v162 + 1));
        }
        else
        {
          *(_OWORD *)v94 = v162;
          *((_QWORD *)v93 + 22) = v163[0];
        }
        v95 = &v75[280 * v67];
        *(_OWORD *)(v95 + 184) = *(_OWORD *)&v163[1];
        v96 = v95 + 200;
        if (SHIBYTE(v163[5]) < 0)
        {
          sub_1C47EBC30(v96, (void *)v163[3], v163[4]);
        }
        else
        {
          *(_OWORD *)v96 = *(_OWORD *)&v163[3];
          *((_QWORD *)v95 + 27) = v163[5];
        }
        v97 = &v75[280 * v67];
        *((_OWORD *)v97 + 14) = v164;
        v98 = v97 + 240;
        if (SHIBYTE(v166[0]) < 0)
        {
          sub_1C47EBC30(v98, (void *)v165, *((unint64_t *)&v165 + 1));
        }
        else
        {
          *(_OWORD *)v98 = v165;
          *((_QWORD *)v97 + 32) = v166[0];
        }
        v99 = &v75[280 * v74];
        *(_OWORD *)&v75[280 * v67 + 264] = *(_OWORD *)&v166[1];
        v86 = v87 + 280;
        v100 = sub_1C51EFD98(a2[39], (__int128 *)a2[39], a2[38], (__int128 *)a2[38], v87, v87);
        v102 = (char *)a2[38];
        v101 = (char *)a2[39];
        a2[38] = v100;
        a2[39] = v87 + 280;
        a2[40] = v99;
        if (v101 != v102)
        {
          v103 = (void **)(v101 - 120);
          do
          {
            if (*((char *)v103 + 103) < 0)
              operator delete(v103[10]);
            if (*((char *)v103 + 63) < 0)
              operator delete(v103[5]);
            if (*((char *)v103 + 23) < 0)
              operator delete(*v103);
            if (*((char *)v103 - 41) < 0)
              operator delete(*(v103 - 8));
            if (*((char *)v103 - 113) < 0)
              operator delete(*(v103 - 17));
            v104 = (char *)(v103 - 20);
            v103 -= 35;
          }
          while (v104 != v102);
        }
        if (v102)
          operator delete(v102);
        v40 = v135;
      }
      else
      {
        v69 = *(_OWORD *)__str;
        *(_QWORD *)(v66 + 16) = *(_QWORD *)&__str[16];
        *(_OWORD *)v66 = v69;
        v70 = (_BYTE *)(v66 + 24);
        if ((__str[47] & 0x80000000) != 0)
        {
          sub_1C47EBC30(v70, *(void **)&__str[24], *(unint64_t *)&__str[32]);
        }
        else
        {
          v71 = *(_OWORD *)&__str[24];
          *(_QWORD *)(v66 + 40) = *(_QWORD *)&__str[40];
          *(_OWORD *)v70 = v71;
        }
        *(_OWORD *)(v66 + 48) = *(_OWORD *)&__str[48];
        v76 = v157;
        *(_OWORD *)(v66 + 64) = *(_OWORD *)&__str[64];
        *(_OWORD *)(v66 + 80) = v76;
        v77 = (_BYTE *)(v66 + 96);
        if (SHIBYTE(v159[0]) < 0)
        {
          sub_1C47EBC30(v77, (void *)v158, *((unint64_t *)&v158 + 1));
        }
        else
        {
          v78 = v158;
          *(_QWORD *)(v66 + 112) = v159[0];
          *(_OWORD *)v77 = v78;
        }
        *(_OWORD *)(v66 + 120) = *(_OWORD *)&v159[1];
        v79 = v160;
        *(_QWORD *)(v66 + 152) = v161;
        *(_OWORD *)(v66 + 136) = v79;
        v80 = (_BYTE *)(v66 + 160);
        if (SHIBYTE(v163[0]) < 0)
        {
          sub_1C47EBC30(v80, (void *)v162, *((unint64_t *)&v162 + 1));
        }
        else
        {
          v81 = v162;
          *(_QWORD *)(v66 + 176) = v163[0];
          *(_OWORD *)v80 = v81;
        }
        *(_OWORD *)(v66 + 184) = *(_OWORD *)&v163[1];
        v82 = (_BYTE *)(v66 + 200);
        if (SHIBYTE(v163[5]) < 0)
        {
          sub_1C47EBC30(v82, (void *)v163[3], v163[4]);
        }
        else
        {
          v83 = *(_OWORD *)&v163[3];
          *(_QWORD *)(v66 + 216) = v163[5];
          *(_OWORD *)v82 = v83;
        }
        *(_OWORD *)(v66 + 224) = v164;
        v84 = (_BYTE *)(v66 + 240);
        if (SHIBYTE(v166[0]) < 0)
        {
          sub_1C47EBC30(v84, (void *)v165, *((unint64_t *)&v165 + 1));
        }
        else
        {
          v85 = v165;
          *(_QWORD *)(v66 + 256) = v166[0];
          *(_OWORD *)v84 = v85;
        }
        *(_OWORD *)(v66 + 264) = *(_OWORD *)&v166[1];
        v86 = v66 + 280;
      }
      a2[39] = v86;
      if (__str[47] >= 0)
        v105 = &__str[24];
      else
        v105 = *(_BYTE **)&__str[24];
      if (v105)
      {
        if (__str[47] >= 0)
          v106 = __str[47] & 0x7F;
        else
          v106 = *(_QWORD *)&__str[32];
        if (v106 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v106 >= 0x17)
        {
          v108 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v106 | 7) != 0x17)
            v108 = v106 | 7;
          v109 = v108 + 1;
          v107 = (__int128 *)operator new(v108 + 1);
          v110 = v109 | 0x8000000000000000;
          v5 = v142;
          *((_QWORD *)&v145 + 1) = v106;
          v146 = v110;
          *(_QWORD *)&v145 = v107;
        }
        else
        {
          HIBYTE(v146) = v106;
          v107 = &v145;
          if (!v106)
            goto LABEL_145;
        }
        memmove(v107, v105, v106);
LABEL_145:
        *((_BYTE *)v107 + v106) = 0;
        goto LABEL_146;
      }
      v145 = 0uLL;
      v146 = 0;
LABEL_146:
      v147 = v41;
      v148 = 0;
      *(_DWORD *)__dst = v41;
      *(_OWORD *)&__dst[8] = v145;
      v150 = v146;
      v145 = 0uLL;
      v146 = 0;
      LODWORD(v151) = v41;
      BYTE4(v151) = 0;
      sub_1C51E8908((uint64_t)v144, a1 + 32, (uint64_t)__dst);
      if (SHIBYTE(v150) < 0)
        operator delete(*(void **)&__dst[8]);
      if (SHIBYTE(v166[0]) < 0)
        operator delete((void *)v165);
      if (SHIBYTE(v163[5]) < 0)
        operator delete((void *)v163[3]);
      if (SHIBYTE(v163[0]) < 0)
        operator delete((void *)v162);
      if (SHIBYTE(v159[0]) < 0)
        operator delete((void *)v158);
      if ((__str[47] & 0x80000000) != 0)
        operator delete(*(void **)&__str[24]);
LABEL_158:
      if (++v41 == v40)
        goto LABEL_159;
    }
    if ((*((_BYTE *)v45 + 23) & 0x10) == 0)
    {
      v46 = 0;
      __dst[23] = 0;
      v47 = __dst;
      goto LABEL_65;
    }
    v48 = ***v45;
    v49 = *(_QWORD *)(v48 + 152);
    v50 = *(unsigned int *)(v48 + 168);
    if ((_DWORD)v50)
    {
      LODWORD(v51) = (v50 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      v52 = (uint64_t ****)(v49 + 16 * v51);
      v53 = *v52;
      if (*v52 == v45)
      {
LABEL_57:
        v56 = (unint64_t *)v52[1];
        v58 = *v56;
        v57 = v56 + 2;
        v46 = v58;
        if (v58 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v46 >= 0x17)
        {
          v59 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v59 = v46 | 7;
          v60 = v59 + 1;
          v47 = operator new(v59 + 1);
          v61 = v60 | 0x8000000000000000;
          v5 = v142;
          *(_QWORD *)&__dst[8] = v46;
          *(_QWORD *)&__dst[16] = v61;
          *(_QWORD *)__dst = v47;
        }
        else
        {
          __dst[23] = v46;
          v47 = __dst;
          if (!v46)
            goto LABEL_65;
        }
        memmove(v47, v57, v46);
LABEL_65:
        v47[v46] = 0;
        if ((__str[47] & 0x80000000) != 0)
          operator delete(*(void **)&__str[24]);
        *(_OWORD *)&__str[24] = *(_OWORD *)__dst;
        *(_QWORD *)&__str[40] = *(_QWORD *)&__dst[16];
        v44 = *(_QWORD *)(v5 + 8);
        v43 = *(_DWORD *)(v5 + 32) + v41;
        goto LABEL_68;
      }
      v54 = 1;
      while (v53 != (uint64_t ***)-4096)
      {
        v55 = v51 + v54++;
        v51 = v55 & (v50 - 1);
        v53 = *(uint64_t ****)(v49 + 16 * v51);
        if (v53 == v45)
        {
          v52 = (uint64_t ****)(v49 + 16 * v51);
          goto LABEL_57;
        }
      }
    }
    v52 = (uint64_t ****)(v49 + 16 * v50);
    goto LABEL_57;
  }
  if ((int)v39 >= 1)
    goto LABEL_43;
LABEL_159:
  v111 = *(_QWORD *)(v5 + 80);
  for (i = *(_QWORD *)(v5 + 88); v111 != i; v111 += 12)
  {
    v113 = *(unsigned int *)(v111 + 4);
    if (*(_BYTE *)(v111 + 9)
      || *(_QWORD *)(*(_QWORD *)(v142 + 8) + 40 * (*(_DWORD *)(v142 + 32) + v113) + 8) != -1)
    {
      memset(__str, 0, 40);
      sub_1C51E8830(*(_DWORD *)v111, (uint64_t)__str, v132);
      if (!*(_BYTE *)(v111 + 9))
      {
        if ((v113 & 0x80000000) != 0)
        {
          v115 = a2[35] + 232 * *((int *)v170 + (*(_DWORD *)(v142 + 32) + v113));
          std::string::operator=((std::string *)(v115 + 64), (const std::string *)__str);
          *(_OWORD *)(v115 + 88) = *(_OWORD *)&__str[24];
          *(_BYTE *)(v115 + 104) = *(_BYTE *)(v111 + 8);
        }
        else
        {
          v114 = a2[38] + 280 * *((unsigned int *)v167 + v113);
          std::string::operator=((std::string *)(v114 + 96), (const std::string *)__str);
          *(_OWORD *)(v114 + 120) = *(_OWORD *)&__str[24];
          *(_BYTE *)(v114 + 136) = *(_BYTE *)(v111 + 8);
        }
      }
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
  }
  v116 = *(_DWORD *)(v142 + 120);
  if (v116)
  {
    for (j = 0; j != v116; ++j)
    {
      v118 = (uint64_t *)(*(_QWORD *)(v142 + 112) + 16 * j);
      v120 = *v118;
      v119 = v118[1];
      v121 = a2[38] + 280 * *((unsigned int *)v167 + (int)v120);
      if (!*(_BYTE *)(v121 + 152))
        *(_BYTE *)(v121 + 152) = 1;
      *(_QWORD *)(v121 + 144) = v119;
    }
  }
  v122 = *(_DWORD *)(v142 + 64);
  if (v122 != -1)
  {
    *(_DWORD *)&__dst[8] = 0;
    v152 = 0;
    v153 = 0;
    *(_QWORD *)__dst = &unk_1E81A7208;
    v154 = 0;
    v150 = 0;
    v151 = 0;
    *(_QWORD *)&__dst[16] = 0;
    v155 = a2 + 18;
    *(_QWORD *)__str = __dst;
    *(_QWORD *)&__str[8] = a4;
    *(_QWORD *)&__str[16] = a1 + 8;
    *(_QWORD *)&__str[24] = a1 + 32;
    *(_QWORD *)&__str[32] = &__str[48];
    *(_QWORD *)&__str[40] = 0x800000000;
    llvm::MIPrinter::printStackObjectReference((llvm::MIPrinter *)__str, v122);
    if (*(_BYTE **)&__str[32] != &__str[48])
      free(*(void **)&__str[32]);
    *(_QWORD *)__dst = off_1E81A6E70;
    if (v154 == 1 && *(_QWORD *)&__dst[16])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&__dst[16], 0x1000C8077774924);
  }
  v123 = *(unsigned int *)(a3 + 776);
  if ((_DWORD)v123)
  {
    v124 = *(__int128 **)(a3 + 768);
    v141 = &v124[2 * v123];
    do
    {
      v125 = *((unsigned int *)v124 + 4);
      if ((v125 & 0x80000000) != 0)
      {
        v129 = 0;
        v130 = a2[35] + 232 * *((int *)v170 + (*(_DWORD *)(v142 + 32) + v125));
        *(_QWORD *)__dst = v130 + 112;
        *(_QWORD *)&__dst[8] = v130 + 152;
        *(_QWORD *)&__dst[16] = v130 + 192;
        v145 = *v124;
        v146 = *((_QWORD *)v124 + 3);
        do
        {
          v131 = *(_QWORD *)&__dst[v129];
          *(_DWORD *)&__str[8] = 0;
          *(_QWORD *)&__str[48] = 0;
          *(_QWORD *)__str = &unk_1E81A7208;
          *(_QWORD *)&__str[64] = v131;
          *(_DWORD *)&__str[56] = 0;
          memset(&__str[16], 0, 25);
          sub_1C5314B04((uint64_t)__str, *(uint64_t ***)((char *)&v145 + v129), a4, 0, 1, 0);
          *(_QWORD *)__str = off_1E81A6E70;
          if (*(_DWORD *)&__str[56] == 1 && *(_QWORD *)&__str[16])
            MEMORY[0x1CAA32F9C](*(_QWORD *)&__str[16], 0x1000C8077774924);
          v129 += 8;
        }
        while (v129 != 24);
      }
      else
      {
        v126 = 0;
        v127 = a2[38] + 280 * *((unsigned int *)v167 + v125);
        *(_QWORD *)__dst = v127 + 160;
        *(_QWORD *)&__dst[8] = v127 + 200;
        *(_QWORD *)&__dst[16] = v127 + 240;
        v145 = *v124;
        v146 = *((_QWORD *)v124 + 3);
        do
        {
          v128 = *(_QWORD *)&__dst[v126];
          *(_DWORD *)&__str[8] = 0;
          *(_QWORD *)&__str[48] = 0;
          *(_QWORD *)__str = &unk_1E81A7208;
          *(_QWORD *)&__str[64] = v128;
          *(_DWORD *)&__str[56] = 0;
          memset(&__str[16], 0, 25);
          sub_1C5314B04((uint64_t)__str, *(uint64_t ***)((char *)&v145 + v126), a4, 0, 1, 0);
          *(_QWORD *)__str = off_1E81A6E70;
          if (*(_DWORD *)&__str[56] == 1 && *(_QWORD *)&__str[16])
            MEMORY[0x1CAA32F9C](*(_QWORD *)&__str[16], 0x1000C8077774924);
          v126 += 8;
        }
        while (v126 != 24);
      }
      v124 += 2;
    }
    while (v124 != v141);
  }
  if (v167 != v169)
    free(v167);
  if (v170 != v172)
    free(v170);
}

void llvm::MIRPrinter::convertCallSiteObjects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  void **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *__p[2];
  _BYTE v62[24];
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  void **v67;
  int64x2_t v68;
  char *v69;
  char **v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD v74[3];

  v74[1] = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 176))(*(_QWORD *)(a3 + 16));
  v6 = v5;
  v7 = *(_QWORD *)(a3 + 744);
  v8 = *(unsigned int *)(a3 + 760);
  if (*(_DWORD *)(a3 + 752))
  {
    if ((_DWORD)v8)
    {
      v9 = 32 * v8;
      v10 = *(uint64_t **)(a3 + 744);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 4;
        v9 -= 32;
        if (!v9)
          goto LABEL_6;
      }
    }
    else
    {
      v10 = *(uint64_t **)(a3 + 744);
    }
  }
  else
  {
LABEL_6:
    v10 = (uint64_t *)(v7 + 32 * v8);
  }
  v59 = (uint64_t *)(v7 + 32 * v8);
  if (v10 != v59)
  {
    v55 = a2 + 376;
    v56 = (uint64_t *)(a2 + 360);
    v60 = v5;
    v57 = (uint64_t *)(v7 + 32 * v8);
    v58 = a2;
    do
    {
      v11 = *v10;
      v71 = *v10;
      v72 = (char *)v74;
      v73 = 0x100000000;
      if (*((_DWORD *)v10 + 4))
      {
        sub_1C61EF4B8((uint64_t)&v72, (uint64_t)(v10 + 1));
        v11 = v71;
      }
      v66 = 0;
      v65 = 0uLL;
      v12 = *(_QWORD *)(v11 + 24);
      v13 = *(_DWORD *)(v12 + 24);
      v14 = *(_QWORD *)(v12 + 56);
      if (v14 == v11)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          ++v15;
          v14 = *(_QWORD *)(v14 + 8);
        }
        while (v14 != v11);
      }
      v64 = __PAIR64__(v15, v13);
      if ((_DWORD)v73)
      {
        v16 = v72;
        v17 = &v72[8 * v73];
        do
        {
          v18 = *(_QWORD *)v16;
          v19 = HIDWORD(*(_QWORD *)v16);
          *(_OWORD *)__p = 0u;
          memset(v62, 0, sizeof(v62));
          v63 = v19;
          sub_1C51E8830(v18, (uint64_t)__p, v6);
          v20 = *((_QWORD *)&v65 + 1);
          if (*((_QWORD *)&v65 + 1) >= (unint64_t)v66)
          {
            v22 = v65;
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 4);
            v24 = v23 + 1;
            if (v23 + 1 > 0x555555555555555)
              goto LABEL_73;
            if (0x5555555555555556 * ((uint64_t)&v66[-v65] >> 4) > v24)
              v24 = 0x5555555555555556 * ((uint64_t)&v66[-v65] >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v66[-v65] >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v25 = 0x555555555555555;
            else
              v25 = v24;
            v70 = &v66;
            if (v25)
            {
              if (v25 > 0x555555555555555)
                goto LABEL_74;
              v26 = operator new(48 * v25);
            }
            else
            {
              v26 = 0;
            }
            v28 = &v26[48 * v23];
            if ((v62[7] & 0x80000000) != 0)
            {
              sub_1C47EBC30(&v26[48 * v23], __p[0], (unint64_t)__p[1]);
              v20 = *((_QWORD *)&v65 + 1);
              v22 = v65;
            }
            else
            {
              *(_OWORD *)v28 = *(_OWORD *)__p;
              *((_QWORD *)v28 + 2) = *(_QWORD *)v62;
            }
            *(_OWORD *)(v28 + 24) = *(_OWORD *)&v62[8];
            *(_WORD *)&v26[48 * v23 + 40] = v63;
            if (v20 == v22)
            {
              v33 = vdupq_n_s64(v22);
              v34 = &v26[48 * v23];
            }
            else
            {
              v29 = 0;
              do
              {
                v30 = &v28[v29];
                v31 = v20 + v29;
                v32 = *(_OWORD *)(v20 + v29 - 48);
                *((_QWORD *)v30 - 4) = *(_QWORD *)(v20 + v29 - 32);
                *((_OWORD *)v30 - 3) = v32;
                *(_QWORD *)(v31 - 40) = 0;
                *(_QWORD *)(v31 - 32) = 0;
                *(_QWORD *)(v31 - 48) = 0;
                *(_OWORD *)(v30 - 24) = *(_OWORD *)(v20 + v29 - 24);
                *((_WORD *)v30 - 4) = *(_WORD *)(v20 + v29 - 8);
                v29 -= 48;
              }
              while (v20 + v29 != v22);
              v33 = (int64x2_t)v65;
              v34 = &v28[v29];
            }
            v27 = v28 + 48;
            *(_QWORD *)&v65 = v34;
            *((_QWORD *)&v65 + 1) = v28 + 48;
            v68 = v33;
            v35 = v66;
            v66 = &v26[48 * v25];
            v69 = v35;
            v67 = (void **)v33.i64[0];
            sub_1C51F05A8((uint64_t)&v67);
            v6 = v60;
          }
          else
          {
            if ((v62[7] & 0x80000000) != 0)
            {
              sub_1C47EBC30(*((_BYTE **)&v65 + 1), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              v21 = *(_OWORD *)__p;
              *(_QWORD *)(*((_QWORD *)&v65 + 1) + 16) = *(_QWORD *)v62;
              *(_OWORD *)v20 = v21;
            }
            *(_OWORD *)(v20 + 24) = *(_OWORD *)&v62[8];
            *(_WORD *)(v20 + 40) = v63;
            v27 = (char *)(v20 + 48);
          }
          *((_QWORD *)&v65 + 1) = v27;
          if ((v62[7] & 0x80000000) != 0)
            operator delete(__p[0]);
          v16 += 8;
        }
        while (v16 != v17);
      }
      a2 = v58;
      v37 = *(unint64_t **)(v58 + 368);
      v36 = *(_QWORD *)(v58 + 376);
      if ((unint64_t)v37 >= v36)
      {
        v41 = ((uint64_t)v37 - *v56) >> 5;
        if ((unint64_t)(v41 + 1) >> 59)
LABEL_73:
          abort();
        v42 = v36 - *v56;
        v43 = v42 >> 4;
        if (v42 >> 4 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
          v44 = 0x7FFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        *(_QWORD *)&v62[16] = v55;
        if (v44 >> 59)
LABEL_74:
          sub_1C4764EE4();
        v45 = (char *)operator new(32 * v44);
        v46 = (unint64_t *)&v45[32 * v41];
        __p[0] = v45;
        __p[1] = v46;
        *(_QWORD *)&v62[8] = &v45[32 * v44];
        v47 = v65;
        *v46 = v64;
        v46[2] = 0;
        v46[3] = 0;
        v46[1] = 0;
        sub_1C51F0A80(v46 + 1, v47, *((uint64_t *)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v65 + 1) - v47) >> 4));
        *(_QWORD *)v62 = v46 + 4;
        sub_1C6207360(v56, __p);
        v38 = *(_QWORD **)(v58 + 368);
        v49 = (char *)__p[1];
        v48 = *(char **)v62;
        if (*(void **)v62 != __p[1])
        {
          do
          {
            v50 = v48 - 32;
            v67 = (void **)(v48 - 24);
            sub_1C51EA488(&v67);
            v48 = v50;
          }
          while (v50 != v49);
        }
        if (__p[0])
          operator delete(__p[0]);
        v39 = v57;
      }
      else
      {
        *v37 = v64;
        v37[1] = 0;
        v37[2] = 0;
        v37[3] = 0;
        sub_1C51F0A80(v37 + 1, v65, *((uint64_t *)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 4));
        v38 = v37 + 4;
        v39 = v57;
      }
      *(_QWORD *)(v58 + 368) = v38;
      __p[0] = &v65;
      sub_1C51EA488((void ***)__p);
      if (v72 != (char *)v74)
        free(v72);
      v40 = v10 + 4;
      v10 = v39;
      if (v40 != v39)
      {
        v10 = v40;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 4;
          if (v10 == v39)
          {
            v10 = v39;
            break;
          }
        }
      }
    }
    while (v10 != v59);
  }
  v51 = *(_QWORD *)(a2 + 360);
  v52 = *(void ***)(a2 + 368);
  v53 = 126 - 2 * __clz((uint64_t)((uint64_t)v52 - v51) >> 5);
  if (v52 == (void **)v51)
    v54 = 0;
  else
    v54 = v53;
  sub_1C51F17BC(v51, v52, v54, 1);
}

void llvm::MIRPrinter::convert(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  llvm::Value *v7;
  __int128 v8;
  void *v9;
  unint64_t v10;
  int v11;
  char v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  __int16 v21;
  char v22;
  void *v23;
  char *v24;
  void *v25;
  unint64_t v26;
  char v27;
  int v28;
  __int16 v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  void *v33;
  unint64_t v34;
  char v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  void *v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t *v49;
  unint64_t v50;
  __int128 __dst;
  void *v52;
  __int128 v53;
  _DWORD v54[2];
  void (**v55)(llvm::raw_ostream *__hidden);
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  void **v63;
  void *v64[2];
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  uint64_t v68;
  _QWORD *v69;
  _BYTE v70[20];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 != v4)
  {
    v5 = a2;
    v6 = 0;
    v47 = a2 + 43;
    v49 = a2 + 41;
    v46 = *(_QWORD *)(a3 + 16);
    do
    {
      v64[0] = 0;
      v64[1] = 0;
      v65 = 0;
      v56 = 0;
      v60 = 0;
      v61 = 0;
      v55 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      v63 = v64;
      v62 = 0;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      v7 = *(llvm::Value **)v3;
      if (*(_BYTE *)(v3 + 9))
        (*(void (**)(llvm::Value *, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v7 + 48))(v7, &v55);
      else
        llvm::Value::printAsOperand(v7, (llvm::raw_ostream *)&v55, 1, 0);
      *(_QWORD *)&v70[4] = 0;
      *(_QWORD *)&v70[12] = 0;
      if (*((char *)v63 + 23) < 0)
      {
        sub_1C47EBC30(&__dst, *v63, (unint64_t)v63[1]);
      }
      else
      {
        v8 = *(_OWORD *)v63;
        v52 = v63[2];
        __dst = v8;
      }
      v10 = *((_QWORD *)&__dst + 1);
      v9 = (void *)__dst;
      v54[0] = (_DWORD)v52;
      *(_DWORD *)((char *)v54 + 3) = *(_DWORD *)((char *)&v52 + 3);
      v11 = SHIBYTE(v52);
      v52 = 0;
      __dst = 0uLL;
      v53 = 0uLL;
      v12 = *(_BYTE *)(v3 + 9);
      v13 = *(unsigned __int8 *)(v3 + 8) | 0x100;
      v15 = v5[42];
      v14 = v5[43];
      if (v15 >= v14)
      {
        v16 = *v49;
        v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - *v49) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0x38E38E38E38E38ELL)
          abort();
        v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x1C71C71C71C71C7)
          v18 = 0x38E38E38E38E38ELL;
        v68 = 0;
        v69 = v47;
        v50 = v18;
        if (v18)
        {
          if (v18 > 0x38E38E38E38E38ELL)
            sub_1C4764EE4();
          v20 = v11;
          v21 = v13;
          v22 = v12;
          v23 = v9;
          v24 = (char *)operator new(72 * v18);
          v9 = v23;
          v12 = v22;
          v13 = v21;
          v11 = v20;
        }
        else
        {
          v24 = 0;
        }
        v31 = &v24[72 * v17];
        *(_DWORD *)v31 = v6;
        *(_OWORD *)(v31 + 4) = *(_OWORD *)v70;
        *((_DWORD *)v31 + 5) = *(_DWORD *)&v70[16];
        v32 = v31 + 24;
        if (v11 < 0)
        {
          v33 = v9;
          v34 = v10;
          v35 = v12;
          v36 = v13;
          v37 = v24;
          sub_1C47EBC30(v32, v9, v34);
          v24 = v37;
          v13 = v36;
          v12 = v35;
          v9 = v33;
          v16 = a2[41];
          v15 = a2[42];
        }
        else
        {
          *(_QWORD *)v32 = v9;
          *((_QWORD *)v31 + 4) = v10;
          *((_DWORD *)v31 + 10) = v54[0];
          *(_DWORD *)(v31 + 43) = *(_DWORD *)((char *)v54 + 3);
          v31[47] = v11;
        }
        v38 = &v24[72 * v17];
        *((_OWORD *)v38 + 3) = v53;
        *((_WORD *)v38 + 32) = v13;
        v38[66] = v12;
        if (v15 == v16)
        {
          v43 = v9;
          v44 = vdupq_n_s64(v16);
          v39 = v31;
        }
        else
        {
          v39 = v31;
          do
          {
            v40 = *(_OWORD *)(v15 - 72);
            *((_QWORD *)v39 - 7) = *(_QWORD *)(v15 - 56);
            *(_OWORD *)(v39 - 72) = v40;
            v41 = *(_OWORD *)(v15 - 48);
            *((_QWORD *)v39 - 4) = *(_QWORD *)(v15 - 32);
            *((_OWORD *)v39 - 3) = v41;
            *(_QWORD *)(v15 - 40) = 0;
            *(_QWORD *)(v15 - 32) = 0;
            *(_QWORD *)(v15 - 48) = 0;
            *(_OWORD *)(v39 - 24) = *(_OWORD *)(v15 - 24);
            v42 = *(_WORD *)(v15 - 8);
            *(v39 - 6) = *(_BYTE *)(v15 - 6);
            *((_WORD *)v39 - 4) = v42;
            v39 -= 72;
            v15 -= 72;
          }
          while (v15 != v16);
          v43 = v9;
          v44 = *(int64x2_t *)v49;
        }
        v30 = v31 + 72;
        v5 = a2;
        a2[41] = v39;
        a2[42] = v31 + 72;
        v67 = v44;
        v45 = a2[43];
        a2[43] = &v24[72 * v50];
        v68 = v45;
        v66 = v44.i64[0];
        sub_1C51F0B74((uint64_t)&v66);
        v4 = v46;
        v9 = v43;
      }
      else
      {
        *(_DWORD *)v15 = v6;
        *(_OWORD *)(v15 + 4) = *(_OWORD *)v70;
        *(_DWORD *)(v15 + 20) = *(_DWORD *)&v70[16];
        if (v11 < 0)
        {
          v25 = v9;
          v26 = v10;
          v27 = v12;
          v28 = v11;
          v29 = v13;
          sub_1C47EBC30((_BYTE *)(v15 + 24), v9, v26);
          v13 = v29;
          v11 = v28;
          v12 = v27;
          v9 = v25;
        }
        else
        {
          *(_QWORD *)(v15 + 24) = v9;
          *(_QWORD *)(v15 + 32) = v10;
          *(_DWORD *)(v15 + 40) = v54[0];
          *(_DWORD *)(v15 + 43) = *(_DWORD *)((char *)v54 + 3);
          *(_BYTE *)(v15 + 47) = v11;
        }
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_WORD *)(v15 + 64) = v13;
        v30 = (char *)(v15 + 72);
        *(_BYTE *)(v15 + 66) = v12;
      }
      v5[42] = v30;
      if (v11 < 0)
        operator delete(v9);
      v55 = off_1E81A6E70;
      if (v62 == 1 && v57)
        MEMORY[0x1CAA32F9C](v57, 0x1000C8077774924);
      if (SHIBYTE(v65) < 0)
        operator delete(v64[0]);
      ++v6;
      v3 += 16;
    }
    while (v3 != v4);
  }
}

void llvm::MIRPrinter::convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void (**v9)(void);
  __int128 v10;
  void *v11;
  char v12;
  void ***v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v45;
  int v46;
  uint64_t **v47;
  uint64_t *v48;
  void *__p[4];
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  void **v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  void ***v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t (**v67)();
  int64x2_t v68;
  void ***v69;
  void ****v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a3 = *(_DWORD *)a4;
  v4 = *(uint64_t ***)(a4 + 8);
  v45 = *(uint64_t ***)(a4 + 16);
  if (v4 == v45)
    return;
  v5 = 0;
  v42 = a3 + 24;
  v43 = (uint64_t *)(a3 + 8);
  do
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v61 = 0uLL;
    v46 = v5;
    LODWORD(v59) = v5;
    *((_QWORD *)&v59 + 1) = 0;
    v60 = 0;
    v7 = *v4;
    v6 = v4[1];
    v47 = v4;
    v48 = v6;
    while (v7 != v6)
    {
      v8 = *v7;
      LODWORD(v51) = 0;
      v55 = 0;
      v56 = 0;
      v50 = &unk_1E81A7208;
      v58 = (void **)&v63;
      v57 = 0;
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v69 = (void ***)&v67;
      v67 = &off_1E8143F38;
      v68.i64[0] = v8;
      sub_1C512E114((uint64_t)&v67, (llvm::raw_ostream *)&v50);
      if (v69 == (void ***)&v67)
      {
        v9 = (void (**)(void))(v67 + 4);
      }
      else
      {
        if (!v69)
          goto LABEL_10;
        v9 = (void (**)(void))(*v69 + 5);
      }
      (*v9)();
LABEL_10:
      if (*((char *)v58 + 23) < 0)
      {
        sub_1C47EBC30(__p, *v58, (unint64_t)v58[1]);
      }
      else
      {
        v10 = *(_OWORD *)v58;
        __p[2] = v58[2];
        *(_OWORD *)__p = v10;
      }
      v11 = __p[0];
      v66[0] = __p[1];
      *(void **)((char *)v66 + 7) = *(void **)((char *)&__p[1] + 7);
      v12 = HIBYTE(__p[2]);
      memset(__p, 0, 24);
      v14 = *((_QWORD *)&v61 + 1);
      v13 = v62;
      if (*((_QWORD *)&v61 + 1) >= (unint64_t)v62)
      {
        v17 = v61;
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666)
          goto LABEL_59;
        if (0x999999999999999ALL * ((uint64_t)((uint64_t)v62 - v61) >> 3) > v19)
          v19 = 0x999999999999999ALL * ((uint64_t)((uint64_t)v62 - v61) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v62 - v61) >> 3) >= 0x333333333333333)
          v20 = 0x666666666666666;
        else
          v20 = v19;
        v69 = 0;
        v70 = &v62;
        if (v20)
        {
          if (v20 > 0x666666666666666)
            goto LABEL_60;
          v21 = (char *)operator new(40 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[40 * v18];
        v23 = v66[0];
        *(_QWORD *)v22 = v11;
        *((_QWORD *)v22 + 1) = v23;
        *(_QWORD *)(v22 + 15) = *(_QWORD *)((char *)v66 + 7);
        v22[23] = v12;
        v66[0] = 0;
        *(_QWORD *)((char *)v66 + 7) = 0;
        *((_QWORD *)v22 + 3) = 0;
        *((_QWORD *)v22 + 4) = 0;
        if (v14 == v17)
        {
          v26 = vdupq_n_s64(v14);
          v24 = &v21[40 * v18];
        }
        else
        {
          v24 = &v21[40 * v18];
          do
          {
            v25 = *(_OWORD *)(v14 - 40);
            *((_QWORD *)v24 - 3) = *(_QWORD *)(v14 - 24);
            *(_OWORD *)(v24 - 40) = v25;
            *(_QWORD *)(v14 - 32) = 0;
            *(_QWORD *)(v14 - 24) = 0;
            *(_QWORD *)(v14 - 40) = 0;
            *((_OWORD *)v24 - 1) = *(_OWORD *)(v14 - 16);
            v24 -= 40;
            v14 -= 40;
          }
          while (v14 != v17);
          v26 = (int64x2_t)v61;
          v13 = v62;
        }
        v16 = (unint64_t)(v22 + 40);
        *(_QWORD *)&v61 = v24;
        *((_QWORD *)&v61 + 1) = v22 + 40;
        v68 = v26;
        v62 = (void ***)&v21[40 * v20];
        v69 = v13;
        v67 = (uint64_t (**)())v26.i64[0];
        sub_1C51EF1D4((uint64_t)&v67);
      }
      else
      {
        v15 = v66[0];
        **((_QWORD **)&v61 + 1) = v11;
        *(_QWORD *)(v14 + 8) = v15;
        *(_QWORD *)(v14 + 15) = *(_QWORD *)((char *)v66 + 7);
        *(_BYTE *)(v14 + 23) = v12;
        v16 = v14 + 40;
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
      }
      *((_QWORD *)&v61 + 1) = v16;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v65) < 0)
      {
        *v63 = 0;
        v64 = 0;
      }
      else
      {
        LOBYTE(v63) = 0;
        HIBYTE(v65) = 0;
      }
      v50 = off_1E81A6E70;
      if (v57 == 1)
      {
        if (v52)
          MEMORY[0x1CAA32F9C](v52, 0x1000C8077774924);
      }
      ++v7;
      v6 = v48;
    }
    v28 = *(_QWORD *)(a3 + 16);
    v27 = *(_QWORD *)(a3 + 24);
    if (v28 >= v27)
    {
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v43) >> 4);
      v32 = v31 + 1;
      if (v31 + 1 > 0x555555555555555)
LABEL_59:
        abort();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v43) >> 4);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x2AAAAAAAAAAAAAALL)
        v34 = 0x555555555555555;
      else
        v34 = v32;
      v54 = v42;
      if (v34 > 0x555555555555555)
LABEL_60:
        sub_1C4764EE4();
      v35 = 3 * v34;
      v36 = (char *)operator new(48 * v34);
      v37 = &v36[48 * v31];
      v50 = v36;
      v51 = v37;
      v53 = &v36[16 * v35];
      *(_OWORD *)v37 = v59;
      v38 = v61;
      *((_QWORD *)v37 + 2) = v60;
      *((_QWORD *)v37 + 4) = 0;
      *((_QWORD *)v37 + 5) = 0;
      *((_QWORD *)v37 + 3) = 0;
      sub_1C51EF120((_QWORD *)v37 + 3, v38, *((uint64_t *)&v61 + 1), 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)&v61 + 1) - v38) >> 3));
      v52 = v37 + 48;
      sub_1C6207B40(v43, &v50);
      v30 = *(_QWORD *)(a3 + 16);
      v40 = v51;
      v39 = v52;
      if (v52 != v51)
      {
        do
        {
          v41 = v39 - 48;
          v67 = (uint64_t (**)())(v39 - 24);
          sub_1C51E9EC0((void ***)&v67);
          v39 = v41;
        }
        while (v41 != v40);
      }
      if (v50)
        operator delete(v50);
    }
    else
    {
      v29 = v59;
      *(_QWORD *)(v28 + 16) = v60;
      *(_OWORD *)v28 = v29;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = 0;
      sub_1C51EF120((_QWORD *)(v28 + 24), v61, *((uint64_t *)&v61 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
      v30 = v28 + 48;
    }
    *(_QWORD *)(a3 + 16) = v30;
    v50 = &v61;
    sub_1C51E9EC0((void ***)&v50);
    if (SHIBYTE(v65) < 0)
      operator delete(v63);
    v5 = v46 + 1;
    v4 = v47 + 3;
  }
  while (v47 + 3 != v45);
}

{
  uint64_t v6;
  void (**v7)(void);
  uint64_t v8;
  void (**v9)(void);
  void (**v10)(llvm::raw_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a3 = *(_DWORD *)(a4 + 37);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 48);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(a3 + 20) = 1 << *(_BYTE *)(a4 + 60);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a4 + 61);
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(a4 + 72);
  *(_BYTE *)(a3 + 80) = *(_BYTE *)(a4 + 650);
  *(_BYTE *)(a3 + 81) = *(_BYTE *)(a4 + 652);
  *(_WORD *)(a3 + 82) = *(_WORD *)(a4 + 653);
  *(_DWORD *)(a3 + 84) = *(_QWORD *)(a4 + 640);
  v6 = *(_QWORD *)(a4 + 656);
  if (!v6)
    goto LABEL_7;
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v18 = a3 + 88;
  v19 = &off_1E8143F38;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v21 = &v19;
  v20 = v6;
  sub_1C512E114((uint64_t)&v19, (llvm::raw_ostream *)&v10);
  if (v21 == &v19)
  {
    v7 = (void (**)(void))(v19 + 4);
    goto LABEL_5;
  }
  if (v21)
  {
    v7 = (void (**)(void))(*v21 + 5);
LABEL_5:
    (*v7)();
  }
  v10 = off_1E81A6E70;
  if (v17 == 1 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
LABEL_7:
  v8 = *(_QWORD *)(a4 + 664);
  if (!v8)
    return;
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v18 = a3 + 128;
  v19 = &off_1E8143F38;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v21 = &v19;
  v20 = v8;
  sub_1C512E114((uint64_t)&v19, (llvm::raw_ostream *)&v10);
  if (v21 == &v19)
  {
    v9 = (void (**)(void))(v19 + 4);
  }
  else
  {
    if (!v21)
      goto LABEL_12;
    v9 = (void (**)(void))(*v21 + 5);
  }
  (*v9)();
LABEL_12:
  v10 = off_1E81A6E70;
  if (v17 == 1)
  {
    if (v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  }
}

llvm::raw_ostream *llvm::MIPrinter::print(llvm::MIPrinter *this, const llvm::MachineBasicBlock *a2)
{
  llvm::raw_ostream *v4;
  _WORD *v5;
  _BOOL8 canPredictBranchProbabilities;
  BOOL v7;
  char *v8;
  BOOL v9;
  llvm::raw_ostream *result;
  int v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t v14;
  const char **v15;
  const char **v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  const char *v20;
  void (**v21)(void);
  BOOL v22;
  char *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unsigned int SuccProbability;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  char v35;
  llvm::raw_ostream *v36;
  _WORD *v37;
  llvm::raw_ostream *v38;
  int v39;
  _DWORD *v40;
  void (**v41)(void);
  llvm::raw_ostream *v42;
  uint64_t v43;
  const char *v44;
  void (**v45)(void);
  llvm::raw_ostream *v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  _WORD *v54;
  llvm::raw_ostream *v55;
  _WORD *v56;
  _BYTE *v57;
  _WORD *v58;
  _QWORD v59[3];
  uint64_t (**v60)();
  const char *v61;
  uint64_t v62;
  uint64_t (***v63)();
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  llvm::MachineBasicBlock::printName(a2, *(llvm::raw_ostream **)this, 3, *((llvm::SlotTracker ***)this + 1));
  v4 = *(llvm::raw_ostream **)this;
  v5 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 2618;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, ":\n", 2uLL);
  }
  canPredictBranchProbabilities = llvm::MIPrinter::canPredictBranchProbabilities(v4, a2);
  v7 = canPredictBranchProbabilities;
  v8 = &byte_1ED7FCFF8[8];
  if (*((_QWORD *)a2 + 11) == *((_QWORD *)a2 + 12))
  {
    if (!canPredictBranchProbabilities)
      goto LABEL_12;
  }
  else
  {
    if (byte_1ED7FD1B0)
      v9 = canPredictBranchProbabilities;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_12;
  }
  result = (llvm::raw_ostream *)llvm::MIPrinter::canPredictSuccessors((llvm::MIPrinter *)canPredictBranchProbabilities, a2);
  if ((result & 1) != 0)
  {
    v11 = 0;
    goto LABEL_40;
  }
LABEL_12:
  v12 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0xB)
  {
    *(_DWORD *)(v13 + 8) = 540701554;
    *(_QWORD *)v13 = *(_QWORD *)"successors: ";
    *((_QWORD *)v12 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v12, "successors: ", 0xCuLL);
  }
  v14 = *((_QWORD *)a2 + 11);
  v15 = (const char **)*((_QWORD *)a2 + 12);
  if ((const char **)v14 != v15)
  {
    v16 = (const char **)*((_QWORD *)a2 + 11);
    while (1)
    {
      if (v16 != *((const char ***)a2 + 11))
      {
        v17 = *(llvm::raw_ostream **)this;
        v18 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v18 > 1uLL)
        {
          *v18 = 8236;
          *((_QWORD *)v17 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v17, ", ", 2uLL);
        }
      }
      v19 = *(llvm::raw_ostream **)this;
      v20 = *v16;
      v63 = &v60;
      v60 = &off_1E8143F38;
      v61 = v20;
      sub_1C512E114((uint64_t)&v60, v19);
      if (v63 == &v60)
        break;
      if (v63)
      {
        v21 = (void (**)(void))(*v63 + 5);
LABEL_23:
        (*v21)();
      }
      if (v8[432])
        v22 = v7;
      else
        v22 = 0;
      if (!v22)
      {
        v23 = v8;
        v24 = *(llvm::raw_ostream **)this;
        v25 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v25 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 40);
        }
        else
        {
          *((_QWORD *)v24 + 4) = v25 + 1;
          *v25 = 40;
        }
        SuccProbability = llvm::MachineBasicBlock::getSuccProbability(a2, v14);
        v60 = (uint64_t (**)())&off_1E8132728;
        v61 = "0x%08x";
        v62 = SuccProbability;
        llvm::raw_ostream::operator<<(v24, (uint64_t)&v60);
        v27 = (_BYTE *)*((_QWORD *)v24 + 4);
        if ((unint64_t)v27 >= *((_QWORD *)v24 + 3))
        {
          llvm::raw_ostream::write(v24, 41);
        }
        else
        {
          *((_QWORD *)v24 + 4) = v27 + 1;
          *v27 = 41;
        }
        v8 = v23;
      }
      ++v16;
      v14 += 8;
      if (v16 == v15)
        goto LABEL_38;
    }
    v21 = (void (**)(void))(v60 + 4);
    goto LABEL_23;
  }
LABEL_38:
  result = *(llvm::raw_ostream **)this;
  v28 = *(_BYTE **)(*(_QWORD *)this + 32);
  if (*(_BYTE **)(*(_QWORD *)this + 24) == v28)
  {
    v11 = 1;
    result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *v28 = 10;
    ++*((_QWORD *)result + 4);
    v11 = 1;
  }
LABEL_40:
  v29 = **(_QWORD **)(*((_QWORD *)a2 + 4) + 40);
  if ((**(_BYTE **)(v29 + 360) & 4) != 0 && *((_QWORD *)a2 + 19) != *((_QWORD *)a2 + 20))
  {
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 16) + 176))(*(_QWORD *)(v29 + 16));
    v31 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    v32 = *((_QWORD *)v31 + 4);
    if ((unint64_t)(*((_QWORD *)v31 + 3) - v32) > 8)
    {
      *(_BYTE *)(v32 + 8) = 32;
      *(_QWORD *)v32 = *(_QWORD *)"liveins: ";
      *((_QWORD *)v31 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v31, "liveins: ", 9uLL);
    }
    v33 = (unsigned __int16 *)*((_QWORD *)a2 + 19);
    v34 = (unsigned __int16 *)*((_QWORD *)a2 + 20);
    if (v34 != v33)
    {
      v35 = 1;
      do
      {
        if ((v35 & 1) == 0)
        {
          v36 = *(llvm::raw_ostream **)this;
          v37 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v37 > 1uLL)
          {
            *v37 = 8236;
            *((_QWORD *)v36 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v36, ", ", 2uLL);
          }
        }
        v38 = *(llvm::raw_ostream **)this;
        v39 = *v33;
        v40 = operator new(0x28uLL);
        *(_QWORD *)v40 = &off_1E814D010;
        v40[2] = v39;
        *((_QWORD *)v40 + 2) = v30;
        v40[6] = 0;
        *((_QWORD *)v40 + 4) = 0;
        v63 = (uint64_t (***)())v40;
        sub_1C52C9630((llvm::raw_ostream *)v40, v38);
        if (v63 == &v60)
        {
          v41 = (void (**)(void))(v60 + 4);
        }
        else
        {
          if (!v63)
            goto LABEL_54;
          v41 = (void (**)(void))(*v63 + 5);
        }
        (*v41)();
LABEL_54:
        if (*((_QWORD *)v33 + 1) != -1)
        {
          v42 = *(llvm::raw_ostream **)this;
          v43 = *(_QWORD *)(*(_QWORD *)this + 32);
          if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v43) > 2)
          {
            *(_BYTE *)(v43 + 2) = 120;
            *(_WORD *)v43 = 12346;
            *((_QWORD *)v42 + 4) += 3;
          }
          else
          {
            v42 = llvm::raw_ostream::write(v42, ":0x", 3uLL);
          }
          v44 = (const char *)*((_QWORD *)v33 + 1);
          v63 = &v60;
          v60 = &off_1E81433A0;
          v61 = v44;
          v59[0] = &unk_1E8133270;
          v59[1] = "%016llX";
          v59[2] = v44;
          llvm::raw_ostream::operator<<(v42, (uint64_t)v59);
          if (v63 == &v60)
          {
            v45 = (void (**)(void))(v60 + 4);
            goto LABEL_61;
          }
          if (v63)
          {
            v45 = (void (**)(void))(*v63 + 5);
LABEL_61:
            (*v45)();
          }
        }
        v35 = 0;
        v33 += 8;
      }
      while (v33 != v34);
    }
    v46 = *(llvm::raw_ostream **)this;
    v47 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v47)
    {
      llvm::raw_ostream::write(v46, "\n", 1uLL);
    }
    else
    {
      *v47 = 10;
      ++*((_QWORD *)v46 + 4);
    }
    goto LABEL_70;
  }
  if (v11)
  {
LABEL_70:
    result = *(llvm::raw_ostream **)this;
    v48 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v48)
    {
      result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v48 = 10;
      ++*((_QWORD *)result + 4);
    }
  }
  v49 = (char *)a2 + 48;
  v50 = *((_QWORD *)a2 + 7);
  if ((char *)v50 == v49)
    return result;
  v51 = 0;
  do
  {
    if ((v51 & 1) != 0)
    {
      v52 = *(llvm::raw_ostream **)this;
      if ((*(_WORD *)(v50 + 44) & 4) != 0)
      {
        llvm::raw_ostream::write(v52, "                                                                                ", 4uLL);
        llvm::MIPrinter::print((llvm::MachineOperand **)this, (const llvm::MachineInstr *)v50);
        goto LABEL_83;
      }
      v53 = llvm::raw_ostream::write(v52, "                                                                                ", 2uLL);
      v54 = (_WORD *)*((_QWORD *)v53 + 4);
      if (*((_QWORD *)v53 + 3) - (_QWORD)v54 > 1uLL)
      {
        *v54 = 2685;
        *((_QWORD *)v53 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v53, "}\n", 2uLL);
      }
    }
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    llvm::MIPrinter::print((llvm::MachineOperand **)this, (const llvm::MachineInstr *)v50);
    if ((*(_WORD *)(v50 + 44) & 8) == 0)
    {
      v51 = 0;
      goto LABEL_84;
    }
    v55 = *(llvm::raw_ostream **)this;
    v56 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v56 > 1uLL)
    {
      *v56 = 31520;
      *((_QWORD *)v55 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v55, " {", 2uLL);
    }
LABEL_83:
    v51 = 1;
LABEL_84:
    result = *(llvm::raw_ostream **)this;
    v57 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v57)
    {
      result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v57 = 10;
      ++*((_QWORD *)result + 4);
    }
    v50 = *(_QWORD *)(v50 + 8);
  }
  while ((char *)v50 != v49);
  if ((v51 & 1) != 0)
  {
    result = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    v58 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v58 > 1uLL)
    {
      *v58 = 2685;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "}\n", 2uLL);
    }
  }
  return result;
}

void llvm::MIRPrinter::convertMachineMetadataNodes(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  llvm::ModuleSlotTracker *v4;
  uint64_t ***v7;
  char *v8;
  __int128 v9;
  void *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::ModuleSlotTracker *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t *v30;
  int64x2_t *v31;
  void *__p[3];
  void (**v33)(llvm::raw_ostream *__hidden);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  void **v41;
  void *v42[2];
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD v51[5];

  v4 = (llvm::ModuleSlotTracker *)a4;
  v51[2] = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  llvm::ModuleSlotTracker::collectMDNodes(a4, &v44, *(_DWORD *)(a4 + 128), *(unsigned int *)(a4 + 132));
  v7 = (uint64_t ***)v44;
  v8 = v45;
  if (v44 != v45)
  {
    v30 = a2 + 57;
    v31 = (int64x2_t *)(a2 + 55);
    v28 = v45;
    v29 = a2;
    do
    {
      v42[0] = 0;
      v42[1] = 0;
      v43 = 0;
      v34 = 0;
      v38 = 0;
      v39 = 0;
      v33 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      v41 = v42;
      v40 = 0;
      v36 = 0;
      v37 = 0;
      v35 = 0;
      sub_1C5314B04((uint64_t)&v33, v7[1], v4, *(_QWORD *)(*(_QWORD *)a3 + 40), 0, 0);
      if (*((char *)v41 + 23) < 0)
      {
        sub_1C47EBC30(__p, *v41, (unint64_t)v41[1]);
      }
      else
      {
        v9 = *(_OWORD *)v41;
        __p[2] = v41[2];
        *(_OWORD *)__p = v9;
      }
      v10 = __p[0];
      v51[0] = __p[1];
      *(void **)((char *)v51 + 7) = *(void **)((char *)&__p[1] + 7);
      v11 = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      v12 = a2[56];
      v13 = a2[57];
      if (v12 >= v13)
      {
        v16 = a3;
        v17 = v4;
        v18 = v31->i64[0];
        v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v31->i64[0]) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0x666666666666666)
          abort();
        if (0x999999999999999ALL * ((uint64_t)(v13 - v18) >> 3) > v20)
          v20 = 0x999999999999999ALL * ((uint64_t)(v13 - v18) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v18) >> 3) >= 0x333333333333333)
          v21 = 0x666666666666666;
        else
          v21 = v20;
        v50 = v30;
        if (v21)
        {
          if (v21 > 0x666666666666666)
            sub_1C4764EE4();
          v22 = (char *)operator new(40 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[40 * v19];
        v24 = v51[0];
        *(_QWORD *)v23 = v10;
        *((_QWORD *)v23 + 1) = v24;
        *(_QWORD *)(v23 + 15) = *(_QWORD *)((char *)v51 + 7);
        v23[23] = v11;
        v51[0] = 0;
        *(_QWORD *)((char *)v51 + 7) = 0;
        *((_QWORD *)v23 + 3) = 0;
        *((_QWORD *)v23 + 4) = 0;
        if (v12 == v18)
        {
          v27 = vdupq_n_s64(v12);
          v25 = &v22[40 * v19];
          v4 = v17;
        }
        else
        {
          v25 = &v22[40 * v19];
          v4 = v17;
          do
          {
            v26 = *(_OWORD *)(v12 - 40);
            *((_QWORD *)v25 - 3) = *(_QWORD *)(v12 - 24);
            *(_OWORD *)(v25 - 40) = v26;
            *(_QWORD *)(v12 - 32) = 0;
            *(_QWORD *)(v12 - 24) = 0;
            *(_QWORD *)(v12 - 40) = 0;
            *((_OWORD *)v25 - 1) = *(_OWORD *)(v12 - 16);
            v25 -= 40;
            v12 -= 40;
          }
          while (v12 != v18);
          v27 = *v31;
          v13 = *v30;
        }
        a3 = v16;
        v15 = (unint64_t)(v23 + 40);
        a2 = v29;
        v29[55] = v25;
        v29[56] = v23 + 40;
        v48 = v27;
        v29[57] = &v22[40 * v21];
        v49 = v13;
        v47 = v27.i64[0];
        sub_1C51EF1D4((uint64_t)&v47);
        v8 = v28;
      }
      else
      {
        v14 = v51[0];
        *(_QWORD *)v12 = v10;
        *(_QWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 15) = *(_QWORD *)((char *)v51 + 7);
        *(_BYTE *)(v12 + 23) = v11;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        v15 = v12 + 40;
      }
      a2[56] = v15;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v33 = off_1E81A6E70;
      if (v40 == 1 && v35)
        MEMORY[0x1CAA32F9C](v35, 0x1000C8077774924);
      if (SHIBYTE(v43) < 0)
        operator delete(v42[0]);
      v7 += 2;
    }
    while (v7 != (uint64_t ***)v8);
    v7 = (uint64_t ***)v44;
  }
  if (v7)
  {
    v45 = (char *)v7;
    operator delete(v7);
  }
}

uint64_t sub_1C51E8830(int a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t result;
  void (**v7)(llvm::raw_ostream *__hidden);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = 0;
  v12 = 0;
  v13 = 0;
  v7 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v15 = a2;
  v14 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v5 = operator new(0x28uLL);
  *(_QWORD *)v5 = &off_1E814D010;
  v5[2] = a1;
  *((_QWORD *)v5 + 2) = a3;
  v5[6] = 0;
  *((_QWORD *)v5 + 4) = 0;
  sub_1C52C9630((llvm::raw_ostream *)v5, (llvm::raw_ostream *)&v7);
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 40))(v5);
  v7 = off_1E81A6E70;
  if (v14 == 1)
  {
    result = v9;
    if (v9)
      return MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  }
  return result;
}

uint64_t sub_1C51E8908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 *v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v7 = (__int128 *)(a3 + 8);
  v6 = *(_DWORD *)a3;
  v16 = 0;
  result = sub_1C51F159C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, &v16);
  v9 = v16;
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_10;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 12) <= v12 >> 3)
  {
LABEL_10:
    sub_1C51F1638(a2, v12);
    v16 = 0;
    result = sub_1C51F159C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, &v16);
    v9 = v16;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v9 != 0x7FFFFFFF)
    --*(_DWORD *)(a2 + 12);
  *(_DWORD *)v9 = *(_DWORD *)a3;
  v13 = *v7;
  *(_QWORD *)(v9 + 24) = *((_QWORD *)v7 + 2);
  *(_OWORD *)(v9 + 8) = v13;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  v14 = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(v9 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(v9 + 32) = v14;
  v10 = 1;
LABEL_8:
  v15 = *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

BOOL llvm::MIPrinter::canPredictSuccessors(llvm::MIPrinter *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  _QWORD *v10;
  _BOOL8 v11;
  char v13;
  void *__s2;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  __s2 = v16;
  v15 = 0x800000000;
  v13 = 0;
  llvm::guessSuccessors(a2, (uint64_t)&__s2, &v13);
  if (v13)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = v15;
    if (v3 != *((_QWORD *)a2 + 4) + 320)
    {
      v5 = __s2;
      v6 = (char *)__s2;
      if ((_DWORD)v15)
      {
        v7 = 8 * v15;
        v6 = (char *)__s2;
        while (*(_QWORD *)v6 != v3)
        {
          v6 += 8;
          v7 -= 8;
          if (!v7)
          {
            v6 = (char *)__s2 + 8 * v15;
            break;
          }
        }
      }
      if (v15 == (v6 - (_BYTE *)__s2) >> 3)
      {
        if (v15 >= HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v16, v15 + 1, 8);
          v5 = __s2;
          v4 = v15;
        }
        v5[v4] = v3;
        LODWORD(v4) = v15 + 1;
        LODWORD(v15) = v15 + 1;
      }
    }
  }
  else
  {
    LODWORD(v4) = v15;
  }
  v8 = (const void *)*((_QWORD *)a2 + 11);
  v9 = *((_QWORD *)a2 + 12) - (_QWORD)v8;
  v10 = __s2;
  v11 = (_DWORD)v4 == (v9 >> 3) && memcmp(v8, __s2, v9) == 0;
  if (v10 != v16)
    free(v10);
  return v11;
}

void ***llvm::MIPrinter::print(llvm::MachineOperand **this, const llvm::MachineInstr *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  llvm::MCSymbol *v8;
  int hasComplexRegisterTies;
  unint64_t v10;
  unint64_t v11;
  llvm::MachineOperand *v12;
  _WORD *v13;
  uint64_t TypeToPrint;
  unsigned int v15;
  llvm::MachineOperand *v16;
  uint64_t v17;
  llvm::MachineOperand *v18;
  uint64_t v19;
  llvm::MachineOperand *v20;
  void *v21;
  llvm::MachineOperand *v22;
  uint64_t v23;
  llvm::MachineOperand *v24;
  uint64_t v25;
  llvm::MachineOperand *v26;
  _DWORD *v27;
  llvm::MachineOperand *v28;
  uint64_t v29;
  llvm::MachineOperand *v30;
  uint64_t v31;
  llvm::MachineOperand *v32;
  _DWORD *v33;
  llvm::MachineOperand *v34;
  _QWORD *v35;
  llvm::MachineOperand *v36;
  _DWORD *v37;
  llvm::MachineOperand *v38;
  _DWORD *v39;
  llvm::MachineOperand *v40;
  uint64_t v41;
  __int16 v42;
  llvm::MachineOperand *v43;
  uint64_t v44;
  llvm::MachineOperand *v45;
  _QWORD *v46;
  uint64_t v47;
  llvm::MachineOperand *v48;
  const char *v49;
  size_t v50;
  void *v51;
  llvm::MachineOperand *v52;
  _BYTE *v53;
  _BOOL4 v54;
  char v55;
  uint64_t v56;
  llvm::MachineOperand *v57;
  _WORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  llvm::raw_ostream *v62;
  uint64_t v64;
  uint64_t **v65;
  llvm::MachineOperand *v66;
  _BYTE *v67;
  llvm::MachineOperand *v68;
  uint64_t v69;
  unsigned int v70;
  llvm::MachineOperand *v71;
  _BYTE *v72;
  llvm::MachineOperand *v73;
  uint64_t v74;
  llvm::MachineOperand *v75;
  _BYTE *v76;
  llvm::MachineOperand *v77;
  uint64_t v78;
  llvm::MachineOperand *v79;
  _BYTE *v80;
  llvm::MachineOperand *v81;
  uint64_t v82;
  llvm::MachineOperand *v83;
  _BYTE *v84;
  llvm::MachineOperand *v85;
  _OWORD *v86;
  unint64_t v87;
  _DWORD *v88;
  llvm::MachineOperand *v89;
  _DWORD *v90;
  unint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  char v98;
  uint64_t *v99;
  llvm::MachineOperand *v100;
  _WORD *v101;
  uint64_t v103;
  _BOOL4 v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v5 = *(_QWORD *)(v4 + 40);
  v103 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  v107 = 0x2000000000000001;
  hasComplexRegisterTies = llvm::MachineInstr::hasComplexRegisterTies(a2);
  v10 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v10)
  {
    if ((**((_DWORD **)a2 + 4) & 0x30000FF) == 0x1000000)
    {
      v11 = 0;
      while (1)
      {
        if (v11)
        {
          v12 = *this;
          v13 = (_WORD *)*((_QWORD *)*this + 4);
          if (*((_QWORD *)*this + 3) - (_QWORD)v13 > 1uLL)
          {
            *v13 = 8236;
            *((_QWORD *)v12 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v12, ", ", 2uLL);
          }
        }
        TypeToPrint = llvm::MachineInstr::getTypeToPrint((uint64_t)a2, v11, (unint64_t *)&v107, v5);
        llvm::MIPrinter::print((uint64_t)this, (uint64_t)a2, v11++, v7, v106, hasComplexRegisterTies, TypeToPrint, 0);
        if (v11 == v10)
          break;
        if ((*(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * v11) & 0x30000FF) != 0x1000000)
        {
          v15 = v11;
          goto LABEL_14;
        }
      }
      v15 = v10;
LABEL_14:
      v104 = v11 < v10;
      if (v15)
      {
        v16 = *this;
        v17 = *((_QWORD *)*this + 4);
        if ((unint64_t)(*((_QWORD *)*this + 3) - v17) > 2)
        {
          *(_BYTE *)(v17 + 2) = 32;
          *(_WORD *)v17 = 15648;
          *((_QWORD *)v16 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v16, " = ", 3uLL);
        }
      }
    }
    else
    {
      v15 = 0;
      v104 = 1;
    }
  }
  else
  {
    v104 = 0;
    v15 = 0;
  }
  if ((*((_WORD *)a2 + 22) & 1) != 0)
  {
    v18 = *this;
    v19 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v19) > 0xB)
    {
      *(_DWORD *)(v19 + 8) = 544241012;
      *(_QWORD *)v19 = *(_QWORD *)"frame-setup ";
      *((_QWORD *)v18 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v18, "frame-setup ", 0xCuLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 2) != 0)
  {
    v20 = *this;
    v21 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v21 > 0xDuLL)
    {
      qmemcpy(v21, "frame-destroy ", 14);
      *((_QWORD *)v20 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v20, "frame-destroy ", 0xEuLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x10) != 0)
  {
    v22 = *this;
    v23 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v23) > 4)
    {
      *(_BYTE *)(v23 + 4) = 32;
      *(_DWORD *)v23 = 1851879022;
      *((_QWORD *)v22 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v22, "nnan ", 5uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x20) != 0)
  {
    v24 = *this;
    v25 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v25) > 4)
    {
      *(_BYTE *)(v25 + 4) = 32;
      *(_DWORD *)v25 = 1718511982;
      *((_QWORD *)v24 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v24, "ninf ", 5uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x40) != 0)
  {
    v26 = *this;
    v27 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v27 > 3uLL)
    {
      *v27 = 544895854;
      *((_QWORD *)v26 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v26, "nsz ", 4uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x80) != 0)
  {
    v28 = *this;
    v29 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v29) > 4)
    {
      *(_BYTE *)(v29 + 4) = 32;
      *(_DWORD *)v29 = 1885565537;
      *((_QWORD *)v28 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v28, "arcp ", 5uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x100) != 0)
  {
    v30 = *this;
    v31 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v31) > 8)
    {
      *(_BYTE *)(v31 + 8) = 32;
      *(_QWORD *)v31 = *(_QWORD *)"contract ";
      *((_QWORD *)v30 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v30, "contract ", 9uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x200) != 0)
  {
    v32 = *this;
    v33 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v33 > 3uLL)
    {
      *v33 = 544106081;
      *((_QWORD *)v32 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v32, "afn ", 4uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x400) != 0)
  {
    v34 = *this;
    v35 = (_QWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v35 > 7uLL)
    {
      *v35 = 0x20636F7373616572;
      *((_QWORD *)v34 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v34, "reassoc ", 8uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x800) != 0)
  {
    v36 = *this;
    v37 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v37 > 3uLL)
    {
      *v37 = 544699758;
      *((_QWORD *)v36 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v36, "nuw ", 4uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x1000) != 0)
  {
    v38 = *this;
    v39 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v39 > 3uLL)
    {
      *v39 = 544699246;
      *((_QWORD *)v38 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v38, "nsw ", 4uLL);
    }
  }
  if ((*((_WORD *)a2 + 22) & 0x2000) != 0)
  {
    v40 = *this;
    v41 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v41) > 5)
    {
      *(_WORD *)(v41 + 4) = 8308;
      *(_DWORD *)v41 = 1667332197;
      *((_QWORD *)v40 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v40, "exact ", 6uLL);
    }
  }
  v42 = *((_WORD *)a2 + 22);
  if ((v42 & 0x4000) != 0)
  {
    v43 = *this;
    v44 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v44) > 0xA)
    {
      *(_DWORD *)(v44 + 7) = 544501861;
      *(_QWORD *)v44 = *(_QWORD *)"nofpexcept ";
      *((_QWORD *)v43 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v43, "nofpexcept ", 0xBuLL);
    }
    v42 = *((_WORD *)a2 + 22);
  }
  if (v42 < 0)
  {
    v45 = *this;
    v46 = (_QWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v46 > 7uLL)
    {
      *v46 = 0x20656772656D6F6ELL;
      *((_QWORD *)v45 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v45, "nomerge ", 8uLL);
    }
  }
  v47 = *(_QWORD *)(v106 + 24);
  if (v47)
  {
    v48 = *this;
    v49 = (const char *)(v47 + *(unsigned int *)(*(_QWORD *)(v106 + 16) + 4 * **((unsigned __int16 **)a2 + 2)));
    v50 = strlen(v49);
    v51 = (void *)*((_QWORD *)*this + 4);
    if (v50 <= *((_QWORD *)*this + 3) - (_QWORD)v51)
    {
      if (v50)
      {
        memcpy(v51, v49, v50);
        *((_QWORD *)v48 + 4) += v50;
      }
    }
    else
    {
      llvm::raw_ostream::write(v48, v49, v50);
    }
  }
  if (v104)
  {
    v52 = *this;
    v53 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v53 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v52, 32);
    }
    else
    {
      *((_QWORD *)v52 + 4) = v53 + 1;
      *v53 = 32;
    }
  }
  v105 = v15;
  v54 = v15 < v10;
  if (v15 < v10)
  {
    v55 = 0;
    v56 = v105;
    do
    {
      if ((v55 & 1) != 0)
      {
        v57 = *this;
        v58 = (_WORD *)*((_QWORD *)*this + 4);
        if (*((_QWORD *)*this + 3) - (_QWORD)v58 > 1uLL)
        {
          *v58 = 8236;
          *((_QWORD *)v57 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v57, ", ", 2uLL);
        }
      }
      v59 = llvm::MachineInstr::getTypeToPrint((uint64_t)a2, v56, (unint64_t *)&v107, v5);
      v55 = 1;
      llvm::MIPrinter::print((uint64_t)this, (uint64_t)a2, v56, v7, v106, hasComplexRegisterTies, v59, 1);
      v56 = (v56 + 1);
    }
    while ((_DWORD)v10 != (_DWORD)v56);
  }
  v61 = (unint64_t *)((char *)a2 + 48);
  v60 = *((_QWORD *)a2 + 6);
  if (v60 < 8)
  {
LABEL_137:
    v70 = *((_DWORD *)a2 + 16);
    if (!v70)
      goto LABEL_145;
    if (!v54)
      goto LABEL_142;
    goto LABEL_139;
  }
  v62 = (llvm::raw_ostream *)(v60 & 0xFFFFFFFFFFFFFFF8);
  if ((*((_QWORD *)a2 + 6) & 7) != 1 || v62 == 0)
  {
    if ((*((_QWORD *)a2 + 6) & 7) != 3 || !v62 || !*((_BYTE *)v62 + 4) || !*((_QWORD *)v62 + *(int *)v62 + 1))
      goto LABEL_87;
    v62 = (llvm::raw_ostream *)*((_QWORD *)v62 + *(int *)v62 + 1);
  }
  if (v105 < v10)
  {
    v71 = *this;
    v72 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v72 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v71, 44);
    }
    else
    {
      *((_QWORD *)v71 + 4) = v72 + 1;
      *v72 = 44;
    }
  }
  v73 = *this;
  v74 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v74) > 0x11)
  {
    *(_WORD *)(v74 + 16) = 8300;
    *(_OWORD *)v74 = *(_OWORD *)" pre-instr-symbol ";
    *((_QWORD *)v73 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v73, " pre-instr-symbol ", 0x12uLL);
  }
  llvm::MachineOperand::printSymbol(*this, v62, v8);
  v60 = *v61;
  if (*v61 < 8)
    goto LABEL_136;
  v62 = (llvm::raw_ostream *)(v60 & 0xFFFFFFFFFFFFFFF8);
  v54 = 1;
LABEL_87:
  if ((v60 & 7) == 2 && v62)
  {
LABEL_128:
    if (v54)
    {
      v75 = *this;
      v76 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v76 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v75, 44);
      }
      else
      {
        *((_QWORD *)v75 + 4) = v76 + 1;
        *v76 = 44;
      }
    }
    v77 = *this;
    v78 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v78) > 0x12)
    {
      *(_DWORD *)(v78 + 15) = 543977314;
      *(_OWORD *)v78 = *(_OWORD *)" post-instr-symbol ";
      *((_QWORD *)v77 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v77, " post-instr-symbol ", 0x13uLL);
    }
    llvm::MachineOperand::printSymbol(*this, v62, v8);
    v60 = *v61;
    if (*v61 >= 8)
    {
      v62 = (llvm::raw_ostream *)(v60 & 0xFFFFFFFFFFFFFFF8);
      v54 = 1;
      goto LABEL_93;
    }
LABEL_136:
    v54 = 1;
    goto LABEL_137;
  }
  if ((v60 & 7) == 3)
  {
    if (v62)
    {
      if (*((_BYTE *)v62 + 5))
      {
        v64 = *((unsigned __int8 *)v62 + 4);
        if (*((_QWORD *)v62 + *(int *)v62 + v64 + 1))
        {
          v62 = (llvm::raw_ostream *)*((_QWORD *)v62 + *(int *)v62 + v64 + 1);
          goto LABEL_128;
        }
      }
    }
  }
LABEL_93:
  if ((v60 & 7) != 3)
    goto LABEL_137;
  if (!v62)
    goto LABEL_137;
  if (!*((_BYTE *)v62 + 6))
    goto LABEL_137;
  v65 = (uint64_t **)*((_QWORD *)v62 + *(int *)v62 + (*((_BYTE *)v62 + 5) + *((_BYTE *)v62 + 4)) + 1);
  if (!v65)
    goto LABEL_137;
  if (v54)
  {
    v66 = *this;
    v67 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v67 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v66, 44);
    }
    else
    {
      *((_QWORD *)v66 + 4) = v67 + 1;
      *v67 = 44;
    }
  }
  v68 = *this;
  v69 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v69) > 0x12)
  {
    *(_DWORD *)(v69 + 15) = 544367979;
    *(_OWORD *)v69 = *(_OWORD *)" heap-alloc-marker ";
    *((_QWORD *)v68 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v68, " heap-alloc-marker ", 0x13uLL);
  }
  v54 = 1;
  sub_1C5314B04((uint64_t)*this, v65, this[1], 0, 1, 0);
  v70 = *((_DWORD *)a2 + 16);
  if (v70)
  {
LABEL_139:
    v79 = *this;
    v80 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v80 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v79, 44);
    }
    else
    {
      *((_QWORD *)v79 + 4) = v80 + 1;
      *v80 = 44;
    }
LABEL_142:
    v81 = *this;
    v82 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v82) > 0x13)
    {
      *(_DWORD *)(v82 + 16) = 544367970;
      *(_OWORD *)v82 = *(_OWORD *)" debug-instr-number ";
      *((_QWORD *)v81 + 4) += 20;
    }
    else
    {
      v81 = llvm::raw_ostream::write(v81, " debug-instr-number ", 0x14uLL);
    }
    sub_1C5E21910(v81, v70, 0, 0, 0);
    v54 = 1;
  }
LABEL_145:
  if (byte_1ED7FD270 && *((_QWORD *)a2 + 7))
  {
    if (v54)
    {
      v83 = *this;
      v84 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v84 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v83, 44);
      }
      else
      {
        *((_QWORD *)v83 + 4) = v84 + 1;
        *v84 = 44;
      }
    }
    v85 = *this;
    v86 = (_OWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v86 > 0xFuLL)
    {
      *v86 = *(_OWORD *)" debug-location ";
      *((_QWORD *)v85 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v85, " debug-location ", 0x10uLL);
    }
    sub_1C5314B04((uint64_t)*this, *((uint64_t ***)a2 + 7), this[1], 0, 1, 0);
  }
  v87 = *v61;
  if (*v61 >= 8)
  {
    if ((v87 & 7) != 0)
    {
      if ((*v61 & 7) != 3)
        return sub_1C4914448((void ***)&v107);
      v88 = (_DWORD *)(v87 & 0xFFFFFFFFFFFFFFF8);
      if (!v88 || !*v88)
        return sub_1C4914448((void ***)&v107);
    }
    else
    {
      *v61 = v87 & 0xFFFFFFFFFFFFFFF8;
    }
    v89 = *this;
    v90 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v90 > 3uLL)
    {
      *v90 = 540686880;
      *((_QWORD *)v89 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v89, " :: ", 4uLL);
    }
    v91 = *v61;
    if (*v61 >= 8)
    {
      v92 = ***(uint64_t ****)v103;
      v93 = *(_QWORD **)(v103 + 56);
      if ((v91 & 7) != 0)
      {
        if ((*v61 & 7) != 3)
          return sub_1C4914448((void ***)&v107);
        v94 = (int *)(v91 & 0xFFFFFFFFFFFFFFF8);
        if ((v91 & 0xFFFFFFFFFFFFFFF8) == 0)
          return sub_1C4914448((void ***)&v107);
        v96 = *v94;
        v61 = (unint64_t *)(v94 + 2);
        v95 = v96;
        if (!(_DWORD)v96)
          return sub_1C4914448((void ***)&v107);
        v97 = &v61[v95];
      }
      else
      {
        *((_QWORD *)a2 + 6) = v91 & 0xFFFFFFFFFFFFFFF8;
        v97 = (unint64_t *)((char *)a2 + 56);
      }
      v98 = 0;
      do
      {
        v99 = (uint64_t *)*v61;
        if ((v98 & 1) != 0)
        {
          v100 = *this;
          v101 = (_WORD *)*((_QWORD *)*this + 4);
          if (*((_QWORD *)*this + 3) - (_QWORD)v101 > 1uLL)
          {
            *v101 = 8236;
            *((_QWORD *)v100 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v100, ", ", 2uLL);
          }
        }
        llvm::MachineMemOperand::print(v99, *this, this[1], (uint64_t)(this + 4), v92, v93, v106);
        ++v61;
        v98 = 1;
      }
      while (v61 != v97);
    }
  }
  return sub_1C4914448((void ***)&v107);
}

void llvm::MIPrinter::print(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  const llvm::MachineOperand *v18;
  int v19;
  BOOL v20;
  unsigned int TiedOperandIdx;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  void *v25;
  std::string *v26;
  std::string::size_type v27;
  void **v28;
  size_t v29;
  void *v30;
  int v31;
  _BOOL4 v32;
  BOOL v34;
  const llvm::TargetRegisterInfo *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::raw_ostream *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  void *v49;
  std::string *v50;
  size_t size;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE *v55;
  std::string *v56;
  void (**v57)(void);
  _BYTE *v58;
  void *__dst[2];
  uint64_t v60;
  void *__p[2];
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  std::string v65;
  std::string *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a2 + 32);
  v16 = a3;
  v17 = (llvm::raw_ostream *)(v15 + 32 * a3);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a5 + 776))(v63, a5);
  v19 = *(_DWORD *)v17;
  switch(*(_DWORD *)v17)
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
      goto LABEL_2;
    case 1u:
      v31 = **(unsigned __int16 **)(a2 + 16);
      if ((_DWORD)a3 == 2 && v31 == 8 || (_DWORD)a3 == 3 && v31 == 9)
        goto LABEL_48;
      v32 = (a3 & 1) == 0;
      if (a3 <= 1 || v31 != 18)
        v32 = 0;
      v34 = v31 == 11 && (_DWORD)a3 == 3;
      if (v34 || v32)
      {
LABEL_48:
        llvm::MachineOperand::printTargetFlags(*(_QWORD *)a1, v17, v18);
        llvm::MachineOperand::printSubRegIdx(*(llvm::MachineOperand **)a1, *(llvm::raw_ostream **)(v15 + 32 * v16 + 16), (uint64_t)a4, v36);
      }
      else
      {
LABEL_2:
        if (!a6 || ((v19 & 0x10000FF) == 0 ? (v20 = (v19 & 0xF00000) == 0) : (v20 = 1), v20))
          TiedOperandIdx = 0;
        else
          TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(*(llvm::MachineInstr **)(v15 + 32 * v16 + 8), a3);
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8);
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v22);
        llvm::MachineOperand::print(v17, *(llvm::MachineOperand **)a1, *(const llvm::Function ***)(a1 + 8), a7, v16 | 0x100000000, a8, 0, a6, TiedOperandIdx, (uint64_t)a4, v23);
        v24 = *(llvm::raw_ostream **)a1;
        if (SHIBYTE(v64) < 0)
        {
          sub_1C47EBC30(__dst, v63[0], (unint64_t)v63[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v63;
          v60 = v64;
        }
        v25 = (void *)(HIBYTE(v60) & 0x7F);
        if (v60 < 0)
          v25 = __dst[1];
        if (v25)
        {
          std::operator+<char>();
          v26 = std::string::append(&v65, " */");
          v27 = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v62 = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)__dst;
          v62 = v60;
          __dst[1] = 0;
          v60 = 0;
          __dst[0] = 0;
        }
        if (v62 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        if (v62 >= 0)
          v29 = HIBYTE(v62) & 0x7F;
        else
          v29 = (size_t)__p[1];
        llvm::raw_ostream::write(v24, (const char *)v28, v29);
        if (SHIBYTE(v62) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v60) < 0)
        {
          v30 = __dst[0];
          goto LABEL_28;
        }
      }
      goto LABEL_29;
    case 5u:
      llvm::MIPrinter::printStackObjectReference((llvm::MIPrinter *)a1, *(_DWORD *)(v15 + 32 * v16 + 16));
      goto LABEL_29;
    case 0xCu:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = v15 + 32 * v16;
      v40 = *(_QWORD *)(v38 + 16);
      v39 = (uint64_t *)(v38 + 16);
      v65.__r_.__value_.__r.__words[0] = 0;
      if (sub_1C6144BDC(*(_QWORD *)v37, *(_DWORD *)(v37 + 16), v40, &v65))
        v41 = v65.__r_.__value_.__r.__words[0];
      else
        v41 = *(_QWORD *)v37 + 16 * *(unsigned int *)(v37 + 16);
      if (v41 == **(_QWORD **)(a1 + 16) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16))
      {
        v47 = *v39;
        v48 = *(llvm::raw_ostream **)a1;
        v49 = (void *)*((_QWORD *)v48 + 4);
        if (*((_QWORD *)v48 + 3) - (_QWORD)v49 > 0xDuLL)
        {
          qmemcpy(v49, "CustomRegMask(", 14);
          *((_QWORD *)v48 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(v48, "CustomRegMask(", 0xEuLL);
        }
        v52 = a4[4];
        if ((int)v52 < 1)
        {
LABEL_82:
          v58 = (_BYTE *)*((_QWORD *)v48 + 4);
          if ((unint64_t)v58 >= *((_QWORD *)v48 + 3))
          {
            llvm::raw_ostream::write(v48, 41);
          }
          else
          {
            *((_QWORD *)v48 + 4) = v58 + 1;
            *v58 = 41;
          }
          goto LABEL_29;
        }
        v53 = 0;
        v54 = 0;
        while (((*(_DWORD *)(v47 + 4 * (v53 >> 5)) >> v53) & 1) == 0)
        {
LABEL_81:
          if (v52 == ++v53)
            goto LABEL_82;
        }
        if ((v54 & 1) != 0)
        {
          v55 = (_BYTE *)*((_QWORD *)v48 + 4);
          if ((unint64_t)v55 >= *((_QWORD *)v48 + 3))
          {
            llvm::raw_ostream::write(v48, 44);
          }
          else
          {
            *((_QWORD *)v48 + 4) = v55 + 1;
            *v55 = 44;
          }
        }
        v56 = (std::string *)operator new(0x28uLL);
        v56->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814D010;
        LODWORD(v56->__r_.__value_.__r.__words[1]) = v53;
        v56->__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
        LODWORD(v56[1].__r_.__value_.__l.__data_) = 0;
        v56[1].__r_.__value_.__l.__size_ = 0;
        v66 = v56;
        sub_1C52C9630((llvm::raw_ostream *)v56, v48);
        if (v66 == &v65)
        {
          v57 = (void (**)(void))(v65.__r_.__value_.__r.__words[0] + 32);
        }
        else
        {
          if (!v66)
          {
LABEL_80:
            v54 = 1;
            goto LABEL_81;
          }
          v57 = (void (**)(void))(v66->__r_.__value_.__r.__words[0] + 40);
        }
        (*v57)();
        goto LABEL_80;
      }
      v42 = *(llvm::raw_ostream **)a1;
      v43 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 80))(a4);
      v44 = *(unsigned int *)(v41 + 8);
      v45 = *(char **)(v43 + 8 * v44);
      if (v45)
        v46 = strlen(*(const char **)(v43 + 8 * v44));
      else
        v46 = 0;
      sub_1C5E3DEA4(&v65, v45, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v45[v46], (uint64_t)sub_1C5E3C6A8, v46);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v65;
      else
        v50 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v65.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v65.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v42, (const char *)v50, size);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      {
        v30 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_28:
        operator delete(v30);
      }
LABEL_29:
      if (SHIBYTE(v64) < 0)
        operator delete(v63[0]);
      return;
    default:
      goto LABEL_29;
  }
}

uint64_t sub_1C51E9D94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void **v5;

  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  v5 = (void **)(a1 + 440);
  sub_1C51E9EC0(&v5);
  v5 = (void **)(a1 + 416);
  sub_1C51E9F38(&v5);
  v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(_QWORD *)(a1 + 392) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 360);
  sub_1C51E9FC0(&v5);
  v3 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = (void **)(a1 + 328);
  sub_1C51EA048(&v5);
  v5 = (void **)(a1 + 304);
  sub_1C51EA0C0(&v5);
  v5 = (void **)(a1 + 280);
  sub_1C51EA180(&v5);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = (void **)(a1 + 80);
    sub_1C51E9EC0(&v5);
    *(_BYTE *)(a1 + 104) = 0;
  }
  v5 = (void **)(a1 + 56);
  sub_1C51EA228(&v5);
  v5 = (void **)(a1 + 32);
  sub_1C51EA2B0(&v5);
  return a1;
}

void sub_1C51E9EC0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51E9F38(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        v7 = (void **)(v4 - 24);
        sub_1C51E9EC0(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51E9FC0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        sub_1C51EA488(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51EA048(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 9;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51EA0C0(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 256;
      do
      {
        if (*(char *)(v6 + 239) < 0)
          operator delete(*(void **)(v6 + 216));
        if (*(char *)(v6 + 199) < 0)
          operator delete(*(void **)(v6 + 176));
        if (*(char *)(v6 + 159) < 0)
          operator delete(*(void **)(v6 + 136));
        if (*(char *)(v6 + 95) < 0)
          operator delete(*(void **)(v6 + 72));
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        v7 = (void *)(v6 - 24);
        v6 -= 280;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51EA180(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        if (*((char *)v4 - 57) < 0)
          operator delete(*(v4 - 10));
        if (*((char *)v4 - 97) < 0)
          operator delete(*(v4 - 15));
        if (*((char *)v4 - 145) < 0)
          operator delete(*(v4 - 21));
        v4 -= 29;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51EA228(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        if (*((char *)v4 - 57) < 0)
          operator delete(*(v4 - 10));
        v4 -= 10;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C51EA2B0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        if (*((char *)v4 - 57) < 0)
          operator delete(*(v4 - 10));
        v4 -= 13;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C51EA338(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1C51EA378(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C51EA3B8(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return a1;
}

uint64_t sub_1C51EA418(uint64_t a1)
{
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C51EA488(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C51EA500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    do
    {
      if ((*(_DWORD *)v3 - 0x7FFFFFFF) >= 2 && *(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 32);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

__n128 sub_1C51EA588(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FD1F0, "mir-debug-loc", 0xDuLL);
  word_1ED7FD1FA = (32 * (*a1 & 3)) | word_1ED7FD1FA & 0xFF9F;
  v6 = *a2;
  byte_1ED7FD270 = **a2;
  byte_1ED7FD281 = 1;
  byte_1ED7FD280 = *v6;
  result = *a3;
  xmmword_1ED7FD210 = (__int128)*a3;
  return result;
}

char *sub_1C51EA60C(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 2) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 2);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 2) >= 0x666666666666666)
    v8 = 0xCCCCCCCCCCCCCCCLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xCCCCCCCCCCCCCCCLL)
      sub_1C4764EE4();
    v9 = (char *)operator new(20 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[20 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  v11 = v10 + 20;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 20);
      *((_DWORD *)v10 - 1) = *((_DWORD *)v2 - 1);
      *(_OWORD *)(v10 - 20) = v12;
      v10 -= 20;
      v2 -= 20;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[20 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

void sub_1C51EA724(uint64_t *a1, _OWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  std::string *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  std::string::value_type *v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  char *v19;
  _BYTE *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  __n128 v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t i;
  void ***v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  std::string::size_type size;
  std::string *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  std::string::value_type v55;
  int v56;
  std::string::pointer data;
  std::string::size_type *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  std::string *v62;
  std::string *v63;
  unint64_t v64;
  std::string *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  void **v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  std::string *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  _BYTE *v89;
  void **v90;
  __int128 v91;
  std::string *v92;
  std::string *j;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  BOOL v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  std::string *v108;
  char v109;
  uint64_t v110;
  char *v111;
  std::string::value_type v112;
  int v113;
  std::string::pointer v114;
  std::string::size_type *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char *v119;
  std::string::value_type v120;
  int v121;
  std::string::pointer v122;
  std::string::size_type *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  std::string::value_type v128;
  int v129;
  std::string::size_type v130;
  std::string::size_type *p_size;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  int v137;
  std::string::size_type v138;
  std::string *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  int v151;
  std::string::size_type v152;
  std::string *v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  int v159;
  std::string::size_type v160;
  std::string *v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char *v165;
  std::string::value_type v166;
  int v167;
  std::string::pointer v168;
  std::string::size_type *v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  std::string::value_type v174;
  int v175;
  std::string::size_type v176;
  std::string::size_type *v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  int v183;
  std::string::size_type v184;
  std::string *v185;
  uint64_t v186;
  int v187;
  char *v188;
  char *v189;
  int *v190;
  _BOOL8 v191;
  int v192;
  int v193;
  int v194;
  int v195;
  __int128 *v198;
  std::string *v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  char *v212;
  void **v213;
  __int128 v214;
  char *v215;
  void **v216;
  __int128 v217;
  char *v218;
  void **v219;
  __int128 v220;
  char *v221;
  void **v222;
  __int128 v223;
  std::string *v224;
  std::string *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  int64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __n128 v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  unint64_t *v256;
  int v257;
  unint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  int v267;
  BOOL v268;
  __n128 v269;
  uint64_t v270;
  uint64_t v271;
  void **v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void **v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _BYTE *v280;
  void **v281;
  __int128 v282;
  _BYTE *v283;
  void **v284;
  __int128 v285;
  _BYTE *v286;
  void **v287;
  __int128 v288;
  _BYTE *v289;
  void **v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  __int128 *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  void **v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  std::string *v312;
  char v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  int v317;
  std::string::size_type v318;
  std::string *v319;
  uint64_t v320;
  int v321;
  BOOL v322;
  uint64_t v323;
  unsigned int v324;
  __int128 *v325;
  std::string *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  char *v343;
  _QWORD *v344;
  char *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v351;
  char *v352;
  size_t v353;
  __int128 v354;
  char *v355;
  _QWORD *v356;
  size_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  void *v365;
  unint64_t v366;
  unint64_t v367;
  char *v368;
  char *v369;
  int64x2_t v370;
  __int128 v371;
  __int128 v372;
  __int16 v373;
  char *v374;
  unint64_t v375;
  uint64_t v376;
  void **v377;
  __int128 v378;
  __int16 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  __int16 v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  std::string *v389;
  char v390;
  uint64_t v391;
  uint64_t v392;
  char v393;
  int v394;
  std::string::size_type v395;
  std::string *v396;
  uint64_t v397;
  unsigned int v398;
  unint64_t v399;
  void **v400;
  uint64_t v401;
  void **v402;
  void **v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  _BYTE *v407;
  unint64_t v408;
  unint64_t v409;
  void **v410;
  char *v411;
  char *v412;
  __int128 v413;
  int64x2_t v414;
  char *v415;
  double v416;
  std::string *v417;
  std::string *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void **v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  char *v428;
  __int128 v429;
  uint64_t v430;
  void **v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void **v435;
  __int128 v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t *v444;
  void **v445;
  void **v446;
  int64x2_t *v447;
  int64x2_t *v448;
  _QWORD *v449;
  void *__p[4];
  void *v451[2];
  __int128 v452;
  uint64_t v453;
  int v454;
  void *v455[4];
  __int128 v456;
  void *v457[2];
  _BYTE v458[28];
  std::string *v459;
  std::string *v460;
  uint64_t v461;
  char v462;
  char v463;
  uint64_t v464;
  void **v465[3];

  v2 = a2;
  v3 = a1;
  sub_1C6205CC8(a1, (uint64_t)"name", a2, 1);
  LOWORD(__p[0]) = 0;
  sub_1C51EDED8((uint64_t)v3, (unsigned __int8 *)v2 + 16, (unsigned __int8 *)__p);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"exposesReturnsTwice", (_BYTE *)v2 + 18, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"legalized", (_BYTE *)v2 + 19, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"regBankSelected", (_BYTE *)v2 + 20, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"selected", (_BYTE *)v2 + 21, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"failedISel", (_BYTE *)v2 + 22, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"tracksRegLiveness", (_BYTE *)v2 + 23, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"hasWinCFI", (_BYTE *)v2 + 24, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"callsEHReturn", (_BYTE *)v2 + 25, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"callsUnwindInit", (_BYTE *)v2 + 26, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"hasEHCatchret", (_BYTE *)v2 + 27, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"hasEHScopes", (_BYTE *)v2 + 28, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"hasEHFunclets", (_BYTE *)v2 + 29, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"failsVerification", (_BYTE *)v2 + 30, &v459, 0);
  LOBYTE(v459) = 0;
  sub_1C6205D50((uint64_t)v3, (uint64_t)"tracksDebugUserValues", (_BYTE *)v2 + 31, &v459, 0);
  v459 = 0;
  v460 = 0;
  v461 = 0;
  v4 = (*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
  if (v2[5] == v2[4])
    v5 = v4;
  else
    v5 = 0;
  v464 = 0;
  v463 = 0;
  v446 = (void **)(v2 + 4);
  v449 = v2;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "registers", 0, v5, &v463, &v464))
  {
    v6 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v6 = -991146299 * ((v2[5] - v2[4]) >> 3);
    if (v6)
    {
      v22 = 0;
      v23 = 64;
      do
      {
        v465[0] = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v22, v465))
        {
          v24 = (char *)v449[4];
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v449[5] - (_QWORD)v24) >> 3) <= v22)
          {
            sub_1C6205FD0((uint64_t)v446, v22 + 1);
            v24 = (char *)*v446;
          }
          v25 = (uint64_t)&v24[v23];
          v26 = (unsigned int *)&v24[v23 - 64];
          (*(void (**)(uint64_t *))(*v3 + 144))(v3);
          sub_1C6205E1C(v3, v26);
          sub_1C6205E94(v3, (uint64_t)"class", v25 - 40);
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          v27 = sub_1C6205F04(v3, (uint64_t)"preferred-register", v25, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t *, __n128))(*v3 + 152))(v3, v27);
          (*(void (**)(uint64_t *, void **))(*v3 + 40))(v3, v465[0]);
        }
        ++v22;
        v23 += 104;
      }
      while (v6 != v22);
    }
    (*(void (**)(uint64_t *))(*v3 + 48))(v3);
    (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
    v2 = v449;
  }
  else if (v2 + 4 != &v459 && v463)
  {
    v8 = v459;
    v7 = v460;
    v9 = 0x4EC4EC4EC4EC4EC5 * (((char *)v460 - (char *)v459) >> 3);
    v10 = v2[4];
    if (0x4EC4EC4EC4EC4EC5 * ((v2[6] - v10) >> 3) >= v9)
    {
      v28 = v2[5] - v10;
      if (0x4EC4EC4EC4EC4EC5 * (v28 >> 3) >= v9)
      {
        v38 = sub_1C51EE7D0((__int128 *)v459, (__int128 *)v460, v10);
        for (i = v2[5]; i != v38; i -= 104)
        {
          if (*(char *)(i - 17) < 0)
            operator delete(*(void **)(i - 40));
          if (*(char *)(i - 57) < 0)
            operator delete(*(void **)(i - 80));
        }
        v2[5] = v38;
      }
      else
      {
        v29 = (__int128 *)(&v459->__r_.__value_.__l.__data_ + (v28 >> 3));
        sub_1C51EE7D0((__int128 *)v459, v29, v10);
        v30 = v2[5];
        if (v29 != (__int128 *)v7)
        {
          v31 = v30 + 64;
          v32 = (uint64_t)&v8[2].__r_.__value_.__r.__words[2] + v28;
          do
          {
            v33 = *(_OWORD *)(v32 - 64);
            *(_QWORD *)(v31 - 48) = *(_QWORD *)(v32 - 48);
            *(_OWORD *)(v31 - 64) = v33;
            v34 = (_BYTE *)(v31 - 40);
            if (*(char *)(v32 - 17) < 0)
            {
              sub_1C47EBC30(v34, *(void **)(v32 - 40), *(_QWORD *)(v32 - 32));
            }
            else
            {
              v35 = *(_OWORD *)(v32 - 40);
              *(_QWORD *)(v31 - 24) = *(_QWORD *)(v32 - 24);
              *(_OWORD *)v34 = v35;
            }
            v36 = v32 - 64;
            *(_OWORD *)(v31 - 16) = *(_OWORD *)(v32 - 16);
            if (*(char *)(v32 + 23) < 0)
            {
              sub_1C47EBC30((_BYTE *)v31, *(void **)v32, *(_QWORD *)(v32 + 8));
            }
            else
            {
              v37 = *(_OWORD *)v32;
              *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
              *(_OWORD *)v31 = v37;
            }
            *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
            v31 += 104;
            v32 += 104;
            v30 += 104;
          }
          while ((std::string *)(v36 + 104) != v7);
        }
        v2[5] = v30;
      }
    }
    else
    {
      sub_1C6206050(v446);
      if (v9 > 0x276276276276276)
        goto LABEL_809;
      v11 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v2[6] - v2[4]) >> 3);
      if (v11 <= v9)
        v11 = 0x4EC4EC4EC4EC4EC5 * (((char *)v7 - (char *)v8) >> 3);
      v12 = (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v2[6] - v2[4]) >> 3)) >= 0x13B13B13B13B13BLL
          ? 0x276276276276276
          : v11;
      if (v12 > 0x276276276276276)
        goto LABEL_809;
      v13 = 104 * v12;
      v14 = (char *)operator new(104 * v12);
      v2[4] = v14;
      v2[5] = v14;
      v2[6] = &v14[v13];
      if (v8 != v7)
      {
        v15 = &v8[2].__r_.__value_.__s.__data_[16];
        do
        {
          v16 = *((_OWORD *)v15 - 4);
          *((_QWORD *)v14 + 2) = *((_QWORD *)v15 - 6);
          *(_OWORD *)v14 = v16;
          v17 = v14 + 24;
          if (*(v15 - 17) < 0)
          {
            sub_1C47EBC30(v17, *((void **)v15 - 5), *((_QWORD *)v15 - 4));
          }
          else
          {
            v18 = *(_OWORD *)(v15 - 40);
            *((_QWORD *)v14 + 5) = *((_QWORD *)v15 - 3);
            *(_OWORD *)v17 = v18;
          }
          v19 = v15 - 64;
          *((_OWORD *)v14 + 3) = *((_OWORD *)v15 - 1);
          v20 = v14 + 64;
          if (v15[23] < 0)
          {
            sub_1C47EBC30(v20, *(void **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v21 = *(_OWORD *)v15;
            *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 2);
            *(_OWORD *)v20 = v21;
          }
          *(_OWORD *)(v14 + 88) = *(_OWORD *)(v15 + 24);
          v14 += 104;
          v15 += 104;
        }
        while (v19 + 104 != (char *)v7);
      }
      v2[5] = v14;
    }
  }
  __p[0] = &v459;
  sub_1C51EA2B0((void ***)__p);
  v40 = (void ***)(v2 + 7);
  v459 = 0;
  v460 = 0;
  v461 = 0;
  if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
  {
    v41 = v2[7];
    v42 = v2[8];
    v43 = v459;
    if (v42 - v41 == (char *)v460 - (char *)v459)
    {
      while (1)
      {
        if (v41 == v42)
        {
          v60 = 1;
          goto LABEL_93;
        }
        v44 = *(_BYTE *)(v41 + 23);
        v45 = v44 & 0x7F;
        if (v44 >= 0)
          v46 = v44 & 0x7F;
        else
          v46 = *(_QWORD *)(v41 + 8);
        v47 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
        v48 = v47;
        size = v47 & 0x7F;
        if (v48 < 0)
          size = v43->__r_.__value_.__l.__size_;
        if (v46 != size)
          break;
        if (v48 >= 0)
          v50 = v43;
        else
          v50 = (std::string *)v43->__r_.__value_.__r.__words[0];
        if ((*(_BYTE *)(v41 + 23) & 0x80) != 0)
        {
          if (memcmp(*(const void **)v41, v50, *(_QWORD *)(v41 + 8)))
            break;
        }
        else if ((v44 & 0x7F) != 0)
        {
          v51 = 0;
          while (*(unsigned __int8 *)(v41 + v51) == v50->__r_.__value_.__s.__data_[v51])
          {
            if (v45 == ++v51)
              goto LABEL_75;
          }
          break;
        }
LABEL_75:
        v52 = *(_BYTE *)(v41 + 63);
        v53 = v52 & 0x7F;
        if (v52 >= 0)
          v54 = (char *)(v52 & 0x7F);
        else
          v54 = *(char **)(v41 + 48);
        v55 = v43[2].__r_.__value_.__s.__data_[15];
        v56 = v55;
        data = (std::string::pointer)(v55 & 0x7F);
        if (v56 < 0)
          data = v43[2].__r_.__value_.__l.__data_;
        if (v54 != data)
          break;
        if (v56 >= 0)
          v58 = &v43[1].__r_.__value_.__r.__words[2];
        else
          v58 = (std::string::size_type *)v43[1].__r_.__value_.__r.__words[2];
        if ((*(_BYTE *)(v41 + 63) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v41 + 40), v58, *(_QWORD *)(v41 + 48)))
            break;
        }
        else if ((v52 & 0x7F) != 0)
        {
          v59 = 0;
          while (*(unsigned __int8 *)(v41 + v59 + 40) == *((unsigned __int8 *)v58 + v59))
          {
            if (v53 == ++v59)
              goto LABEL_91;
          }
          break;
        }
LABEL_91:
        v41 += 80;
        v43 = (std::string *)((char *)v43 + 80);
      }
    }
  }
  v60 = 0;
LABEL_93:
  v464 = 0;
  v463 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "liveins", 0, v60, &v463, &v464))
  {
    v61 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v61 = -858993459 * ((v2[8] - v2[7]) >> 4);
    if (v61)
    {
      v77 = 0;
      v78 = 5;
      do
      {
        v465[0] = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v77, v465))
        {
          v79 = (void **)v2[7];
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[8] - (_QWORD)v79) >> 4) <= v77)
          {
            sub_1C62060AC((uint64_t)v40, v77 + 1);
            v79 = *v40;
          }
          v80 = (uint64_t)&v79[v78];
          v81 = (uint64_t)&v79[v78 - 5];
          (*(void (**)(uint64_t *))(*v3 + 144))(v3);
          sub_1C6205E94(v3, (uint64_t)"reg", v81);
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          v82 = sub_1C6205F04(v3, (uint64_t)"virtual-reg", v80, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t *, __n128))(*v3 + 152))(v3, v82);
          (*(void (**)(uint64_t *, void **))(*v3 + 40))(v3, v465[0]);
          v2 = v449;
        }
        ++v77;
        v78 += 10;
      }
      while (v61 != v77);
    }
    (*(void (**)(uint64_t *))(*v3 + 48))(v3);
    (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
  }
  else if (v40 != (void ***)&v459 && v463)
  {
    v63 = v459;
    v62 = v460;
    v64 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v460 - (char *)v459) >> 4);
    v65 = (std::string *)v2[7];
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[9] - (_QWORD)v65) >> 4) >= v64)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[8] - (_QWORD)v65) >> 4) >= v64)
      {
        v92 = sub_1C51EEA5C(v459, v460, v65);
        for (j = (std::string *)v2[8]; j != v92; j = (std::string *)((char *)j - 80))
        {
          if (j[-1].__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)j[-2].__r_.__value_.__l.__size_);
          if (j[-3].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)j[-4].__r_.__value_.__r.__words[2]);
        }
        v2[8] = v92;
      }
      else
      {
        v83 = (std::string *)((char *)v459 + 16 * ((uint64_t)(v2[8] - (_QWORD)v65) >> 4));
        sub_1C51EEA5C(v459, v83, v65);
        v84 = v2[8];
        if (v83 != v62)
        {
          v85 = 0;
          do
          {
            v86 = v84 + v85;
            v87 = (char *)v83 + v85;
            if (SHIBYTE(v83->__r_.__value_.__r.__words[v85 / 8 + 2]) < 0)
            {
              sub_1C47EBC30((_BYTE *)v86, *(void **)v87, *((_QWORD *)v87 + 1));
            }
            else
            {
              v88 = *(_OWORD *)v87;
              *(_QWORD *)(v86 + 16) = *((_QWORD *)v87 + 2);
              *(_OWORD *)v86 = v88;
            }
            *(_OWORD *)(v84 + v85 + 24) = *(_OWORD *)((char *)&v83[1].__r_.__value_.__l.__data_ + v85);
            v89 = (_BYTE *)(v84 + v85 + 40);
            v90 = (void **)&v83[1].__r_.__value_.__r.__words[v85 / 8 + 2];
            if (v83[2].__r_.__value_.__s.__data_[v85 + 15] < 0)
            {
              sub_1C47EBC30(v89, *v90, v83[2].__r_.__value_.__r.__words[v85 / 8]);
            }
            else
            {
              v91 = *(_OWORD *)v90;
              *(_QWORD *)(v84 + v85 + 56) = *(std::string::size_type *)((char *)&v83[2].__r_.__value_.__l.__size_ + v85);
              *(_OWORD *)v89 = v91;
            }
            *(_OWORD *)(v84 + v85 + 64) = *(_OWORD *)&v83[2].__r_.__value_.__r.__words[v85 / 8 + 2];
            v85 += 80;
          }
          while ((std::string *)((char *)v83 + v85) != v62);
          v84 += v85;
        }
        v2[8] = v84;
      }
    }
    else
    {
      sub_1C6206124((void **)v2 + 7);
      if (v64 > 0x333333333333333)
        goto LABEL_809;
      v66 = 0x999999999999999ALL * ((uint64_t)(v2[9] - v2[7]) >> 4);
      if (v66 <= v64)
        v66 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v62 - (char *)v63) >> 4);
      v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[9] - v2[7]) >> 4) >= 0x199999999999999 ? 0x333333333333333 : v66;
      if (v67 > 0x333333333333333)
        goto LABEL_809;
      v68 = 5 * v67;
      v69 = (char *)operator new(80 * v67);
      v2[7] = v69;
      v2[8] = v69;
      v2[9] = &v69[16 * v68];
      if (v63 != v62)
      {
        v70 = 0;
        do
        {
          v71 = &v69[v70];
          v72 = (char *)v63 + v70;
          if (SHIBYTE(v63->__r_.__value_.__r.__words[v70 / 8 + 2]) < 0)
          {
            sub_1C47EBC30(v71, *(void **)v72, *((_QWORD *)v72 + 1));
          }
          else
          {
            v73 = *(_OWORD *)v72;
            *((_QWORD *)v71 + 2) = *((_QWORD *)v72 + 2);
            *(_OWORD *)v71 = v73;
          }
          *(_OWORD *)&v69[v70 + 24] = *(_OWORD *)((char *)&v63[1].__r_.__value_.__l.__data_ + v70);
          v74 = &v69[v70 + 40];
          v75 = (void **)&v63[1].__r_.__value_.__r.__words[v70 / 8 + 2];
          if (v63[2].__r_.__value_.__s.__data_[v70 + 15] < 0)
          {
            sub_1C47EBC30(v74, *v75, v63[2].__r_.__value_.__r.__words[v70 / 8]);
          }
          else
          {
            v76 = *(_OWORD *)v75;
            *(_QWORD *)&v69[v70 + 56] = *(std::string::size_type *)((char *)&v63[2].__r_.__value_.__l.__size_ + v70);
            *(_OWORD *)v74 = v76;
          }
          *(_OWORD *)&v69[v70 + 64] = *(_OWORD *)&v63[2].__r_.__value_.__r.__words[v70 / 8 + 2];
          v70 += 80;
        }
        while ((std::string *)((char *)v63 + v70) != v62);
        v69 += v70;
      }
      v2[8] = v69;
    }
  }
  __p[0] = &v459;
  sub_1C51EA228((void ***)__p);
  memset(__p, 0, sizeof(__p));
  v464 = 0;
  v463 = 1;
  v94 = (*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
  if (*((_BYTE *)v2 + 104))
    v95 = 0;
  else
    v95 = v94;
  if (((*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3) & 1) == 0)
  {
    if (*((_BYTE *)v2 + 104))
      goto LABEL_155;
    v2[10] = 0;
    v2[11] = 0;
    v2[12] = 0;
    v460 = 0;
    v461 = 0;
    v459 = 0;
    *((_BYTE *)v2 + 104) = 1;
    v465[0] = (void **)&v459;
    sub_1C51E9EC0(v465);
  }
  if (!*((_BYTE *)v2 + 104))
  {
LABEL_173:
    sub_1C6206180((uint64_t)(v2 + 10), (uint64_t)__p);
    goto LABEL_176;
  }
LABEL_155:
  if (!(*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "calleeSavedRegisters", 0, v95, &v463, &v464))
  {
    if (!v463)
      goto LABEL_176;
    goto LABEL_173;
  }
  if (((*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3) & 1) != 0)
    goto LABEL_174;
  v96 = v3[37];
  if (!v96)
    goto LABEL_174;
  v97 = *(_QWORD *)(v96 + 8);
  if (!v97 || *(_DWORD *)(v97 + 32) != 1)
    goto LABEL_174;
  v98 = *(int **)(v97 + 72);
  v99 = *(_QWORD *)(v97 + 80);
  v100 = v99;
  do
  {
    v101 = v100;
    if (!v100)
      break;
    --v100;
  }
  while (*((_BYTE *)v98 + v101 - 1) == 32);
  if (v101 < v99)
    v99 = v101;
  if (v99 == 6
    && ((v102 = *v98, v103 = *((unsigned __int16 *)v98 + 2), v102 == 1852796476) ? (v104 = v103 == 15973) : (v104 = 0),
        v104))
  {
    sub_1C6206180((uint64_t)(v2 + 10), (uint64_t)__p);
  }
  else
  {
LABEL_174:
    sub_1C51EEACC(v3, (int64x2_t *)v2 + 5);
  }
  (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
LABEL_176:
  if (LOBYTE(__p[3]))
  {
    v459 = (std::string *)__p;
    sub_1C51E9EC0((void ***)&v459);
  }
  v453 = 0;
  *(_OWORD *)v451 = 0u;
  v452 = 0u;
  memset(__p, 0, sizeof(__p));
  v454 = -1;
  memset(v455, 0, sizeof(v455));
  v456 = 0u;
  *(_OWORD *)v457 = 0u;
  memset(v458, 0, sizeof(v458));
  v105 = sub_1C6206234(v3, (uint64_t)(v2 + 14), (__int128 *)__p);
  if ((v458[11] & 0x80000000) != 0)
    operator delete(*(void **)((char *)v457 + 4));
  if (SBYTE3(v456) < 0)
    operator delete(*(void **)((char *)&v455[1] + 4));
  if (SBYTE7(v452) < 0)
    operator delete(v451[0]);
  v443 = v2 + 35;
  v459 = 0;
  v460 = 0;
  v461 = 0;
  if ((*(unsigned int (**)(uint64_t *, __n128))(*v3 + 16))(v3, v105))
  {
    v107 = v2[35];
    v106 = v2[36];
    v108 = v459;
    if (v106 - v107 == (char *)v460 - (char *)v459)
    {
      while (1)
      {
        if (v107 == v106)
        {
          v141 = 1;
          goto LABEL_266;
        }
        if (*(_DWORD *)v107 != LODWORD(v108->__r_.__value_.__l.__data_)
          || *(_DWORD *)(v107 + 24) != LODWORD(v108[1].__r_.__value_.__l.__data_)
          || *(_QWORD *)(v107 + 32) != v108[1].__r_.__value_.__l.__size_
          || *(_QWORD *)(v107 + 40) != v108[1].__r_.__value_.__r.__words[2])
        {
          break;
        }
        if (*(_BYTE *)(v107 + 49) && v108[2].__r_.__value_.__s.__data_[1])
        {
          if (*(unsigned __int8 *)(v107 + 48) != v108[2].__r_.__value_.__s.__data_[0])
            break;
        }
        else if ((*(_BYTE *)(v107 + 49) == 0) == (v108[2].__r_.__value_.__s.__data_[1] != 0))
        {
          break;
        }
        if (*(_DWORD *)(v107 + 52) != HIDWORD(v108[2].__r_.__value_.__r.__words[0])
          || *(unsigned __int8 *)(v107 + 56) != v108[2].__r_.__value_.__s.__data_[8]
          || *(unsigned __int8 *)(v107 + 57) != v108[2].__r_.__value_.__s.__data_[9])
        {
          break;
        }
        v109 = *(_BYTE *)(v107 + 87);
        v110 = v109 & 0x7F;
        if (v109 >= 0)
          v111 = (char *)(v109 & 0x7F);
        else
          v111 = *(char **)(v107 + 72);
        v112 = v108[3].__r_.__value_.__s.__data_[15];
        v113 = v112;
        v114 = (std::string::pointer)(v112 & 0x7F);
        if (v113 < 0)
          v114 = v108[3].__r_.__value_.__l.__data_;
        if (v111 != v114)
          break;
        if (v113 >= 0)
          v115 = &v108[2].__r_.__value_.__r.__words[2];
        else
          v115 = (std::string::size_type *)v108[2].__r_.__value_.__r.__words[2];
        if ((*(_BYTE *)(v107 + 87) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v107 + 64), v115, *(_QWORD *)(v107 + 72)))
            break;
        }
        else if ((v109 & 0x7F) != 0)
        {
          v116 = 0;
          while (*(unsigned __int8 *)(v107 + v116 + 64) == *((unsigned __int8 *)v115 + v116))
          {
            if (v110 == ++v116)
              goto LABEL_215;
          }
          break;
        }
LABEL_215:
        if (*(unsigned __int8 *)(v107 + 104) != v108[4].__r_.__value_.__s.__data_[8])
          break;
        v117 = *(_BYTE *)(v107 + 135);
        v118 = v117 & 0x7F;
        if (v117 >= 0)
          v119 = (char *)(v117 & 0x7F);
        else
          v119 = *(char **)(v107 + 120);
        v120 = v108[5].__r_.__value_.__s.__data_[15];
        v121 = v120;
        v122 = (std::string::pointer)(v120 & 0x7F);
        if (v121 < 0)
          v122 = v108[5].__r_.__value_.__l.__data_;
        if (v119 != v122)
          break;
        if (v121 >= 0)
          v123 = &v108[4].__r_.__value_.__r.__words[2];
        else
          v123 = (std::string::size_type *)v108[4].__r_.__value_.__r.__words[2];
        if ((*(_BYTE *)(v107 + 135) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v107 + 112), v123, *(_QWORD *)(v107 + 120)))
            break;
        }
        else if ((v117 & 0x7F) != 0)
        {
          v124 = 0;
          while (*(unsigned __int8 *)(v107 + v124 + 112) == *((unsigned __int8 *)v123 + v124))
          {
            if (v118 == ++v124)
              goto LABEL_232;
          }
          break;
        }
LABEL_232:
        v125 = *(_BYTE *)(v107 + 175);
        v126 = v125 & 0x7F;
        if (v125 >= 0)
          v127 = v125 & 0x7F;
        else
          v127 = *(_QWORD *)(v107 + 160);
        v128 = v108[7].__r_.__value_.__s.__data_[7];
        v129 = v128;
        v130 = v128 & 0x7F;
        if (v129 < 0)
          v130 = v108[6].__r_.__value_.__r.__words[2];
        if (v127 != v130)
          break;
        if (v129 >= 0)
          p_size = &v108[6].__r_.__value_.__l.__size_;
        else
          p_size = (std::string::size_type *)v108[6].__r_.__value_.__l.__size_;
        if ((*(_BYTE *)(v107 + 175) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v107 + 152), p_size, *(_QWORD *)(v107 + 160)))
            break;
        }
        else if ((v125 & 0x7F) != 0)
        {
          v132 = 0;
          while (*(unsigned __int8 *)(v107 + v132 + 152) == *((unsigned __int8 *)p_size + v132))
          {
            if (v126 == ++v132)
              goto LABEL_248;
          }
          break;
        }
LABEL_248:
        v133 = *(_BYTE *)(v107 + 215);
        v134 = v133 & 0x7F;
        if (v133 >= 0)
          v135 = v133 & 0x7F;
        else
          v135 = *(_QWORD *)(v107 + 200);
        v136 = HIBYTE(v108[8].__r_.__value_.__r.__words[2]);
        v137 = v136;
        v138 = v136 & 0x7F;
        if (v137 < 0)
          v138 = v108[8].__r_.__value_.__l.__size_;
        if (v135 != v138)
          break;
        if (v137 >= 0)
          v139 = v108 + 8;
        else
          v139 = (std::string *)v108[8].__r_.__value_.__l.__data_;
        if ((*(_BYTE *)(v107 + 215) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v107 + 192), v139, *(_QWORD *)(v107 + 200)))
            break;
        }
        else if ((v133 & 0x7F) != 0)
        {
          v140 = 0;
          while (*(unsigned __int8 *)(v107 + v140 + 192) == v139->__r_.__value_.__s.__data_[v140])
          {
            if (v134 == ++v140)
              goto LABEL_264;
          }
          break;
        }
LABEL_264:
        v107 += 232;
        v108 = (std::string *)((char *)v108 + 232);
      }
    }
  }
  v141 = 0;
LABEL_266:
  v464 = 0;
  v462 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "fixedStack", 0, v141, &v462, &v464))
  {
    v142 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v142 = 1332920885 * ((v2[36] - v2[35]) >> 3);
    if (v142)
    {
      v244 = 0;
      v245 = 0;
      v246 = 232 * v142;
      do
      {
        v465[0] = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v245, v465))
        {
          v247 = v449[35];
          if (0x34F72C234F72C235 * ((v449[36] - v247) >> 3) <= v245)
          {
            sub_1C6206B58(v443, v245 + 1);
            v247 = *v443;
          }
          v248 = v247 + v244;
          (*(void (**)(uint64_t *))(*v3 + 144))(v3);
          sub_1C6205E1C(v3, (unsigned int *)(v247 + v244));
          LODWORD(__p[0]) = 0;
          sub_1C620670C((uint64_t)v3, (_DWORD *)(v247 + v244 + 24), __p);
          __p[0] = 0;
          sub_1C6206878((uint64_t)v3, (unint64_t *)(v247 + v244 + 32), (unint64_t *)__p);
          __p[0] = 0;
          sub_1C62064B8((uint64_t)v3, (uint64_t)"size", (unint64_t *)(v247 + v244 + 40), (unint64_t *)__p);
          LOWORD(__p[0]) = 0;
          sub_1C51EDED8((uint64_t)v3, (unsigned __int8 *)(v247 + v244 + 48), (unsigned __int8 *)__p);
          LODWORD(__p[0]) = 0;
          sub_1C620692C((uint64_t)v3, (_DWORD *)(v247 + v244 + 52), __p);
          if (*(_DWORD *)(v247 + v244 + 24) != 1)
          {
            v463 = 0;
            sub_1C6205D50((uint64_t)v3, (uint64_t)"isImmutable", (_BYTE *)(v248 + 56), &v463, 0);
            v463 = 0;
            sub_1C6205D50((uint64_t)v3, (uint64_t)"isAliased", (_BYTE *)(v248 + 57), &v463, 0);
          }
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          sub_1C6205F04(v3, (uint64_t)"callee-saved-register", v248 + 64, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v463 = 1;
          sub_1C6205D50((uint64_t)v3, (uint64_t)"callee-saved-restored", (_BYTE *)(v247 + v244 + 104), &v463, 0);
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          sub_1C6205F04(v3, (uint64_t)"debug-info-variable", v247 + v244 + 112, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          sub_1C6205F04(v3, (uint64_t)"debug-info-expression", v247 + v244 + 152, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          v249 = sub_1C6205F04(v3, (uint64_t)"debug-info-location", v247 + v244 + 192, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t *, __n128))(*v3 + 152))(v3, v249);
          (*(void (**)(uint64_t *, void **))(*v3 + 40))(v3, v465[0]);
        }
        ++v245;
        v244 += 232;
      }
      while (v246 != v244);
    }
    (*(void (**)(uint64_t *))(*v3 + 48))(v3);
    (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
    v2 = v449;
  }
  else if (v443 != (uint64_t *)&v459 && v462)
  {
    v198 = (__int128 *)v459;
    v199 = v460;
    v200 = 0x34F72C234F72C235 * (((char *)v460 - (char *)v459) >> 3);
    v201 = v2[35];
    if (0x34F72C234F72C235 * ((v2[37] - v201) >> 3) >= v200)
    {
      v270 = v2[36];
      v271 = v270 - v201;
      if (0x34F72C234F72C235 * ((v270 - v201) >> 3) >= v200)
      {
        if (v459 == v460)
        {
          v300 = v2[35];
        }
        else
        {
          v300 = v2[35];
          do
          {
            sub_1C6206C34(v201, v198);
            v198 = (__int128 *)((char *)v198 + 232);
            v201 += 232;
            v300 += 232;
          }
          while (v198 != (__int128 *)v199);
          v270 = v2[36];
        }
        while (v270 != v300)
        {
          if (*(char *)(v270 - 17) < 0)
            operator delete(*(void **)(v270 - 40));
          if (*(char *)(v270 - 57) < 0)
            operator delete(*(void **)(v270 - 80));
          if (*(char *)(v270 - 97) < 0)
            operator delete(*(void **)(v270 - 120));
          if (*(char *)(v270 - 145) < 0)
            operator delete(*(void **)(v270 - 168));
          v270 -= 232;
        }
        v2[36] = v300;
      }
      else
      {
        v272 = (void **)(&v459->__r_.__value_.__l.__data_ + ((v270 - v201) >> 3));
        if (v270 != v201)
        {
          do
          {
            sub_1C6206C34(v201, v198);
            v198 = (__int128 *)((char *)v198 + 232);
            v201 += 232;
            v271 -= 232;
          }
          while (v271);
          v201 = v2[36];
        }
        v273 = v201;
        if (v272 != (void **)v199)
        {
          v274 = 0;
          do
          {
            v275 = v201 + v274 * 8;
            v276 = &v272[v274];
            v277 = *(_OWORD *)&v272[v274];
            v278 = *(_OWORD *)&v272[v274 + 2];
            v279 = *(_OWORD *)&v272[v274 + 4];
            *(_OWORD *)(v275 + 42) = *(_OWORD *)((char *)&v272[v274 + 5] + 2);
            *(_OWORD *)(v275 + 16) = v278;
            *(_OWORD *)(v275 + 32) = v279;
            *(_OWORD *)v275 = v277;
            v280 = (_BYTE *)(v201 + v274 * 8 + 64);
            v281 = &v272[v274 + 8];
            if (SHIBYTE(v272[v274 + 10]) < 0)
            {
              sub_1C47EBC30(v280, *v281, (unint64_t)v276[9]);
            }
            else
            {
              v282 = *(_OWORD *)v281;
              *(_QWORD *)(v201 + v274 * 8 + 80) = v272[v274 + 10];
              *(_OWORD *)v280 = v282;
            }
            *(_OWORD *)(v275 + 88) = *(_OWORD *)(v276 + 11);
            *(_BYTE *)(v275 + 104) = *((_BYTE *)v276 + 104);
            v283 = (_BYTE *)(v201 + v274 * 8 + 112);
            v284 = &v272[v274 + 14];
            if (*((char *)v276 + 135) < 0)
            {
              sub_1C47EBC30(v283, *v284, (unint64_t)v272[v274 + 15]);
            }
            else
            {
              v285 = *(_OWORD *)v284;
              *(_QWORD *)(v201 + v274 * 8 + 128) = v272[v274 + 16];
              *(_OWORD *)v283 = v285;
            }
            *(_OWORD *)(v275 + 136) = *(_OWORD *)(v276 + 17);
            v286 = (_BYTE *)(v201 + v274 * 8 + 152);
            v287 = &v272[v274 + 19];
            if (*((char *)v276 + 175) < 0)
            {
              sub_1C47EBC30(v286, *v287, (unint64_t)v272[v274 + 20]);
            }
            else
            {
              v288 = *(_OWORD *)v287;
              *(_QWORD *)(v201 + v274 * 8 + 168) = v272[v274 + 21];
              *(_OWORD *)v286 = v288;
            }
            *(_OWORD *)(v275 + 176) = *((_OWORD *)v276 + 11);
            v289 = (_BYTE *)(v201 + v274 * 8 + 192);
            v290 = &v272[v274 + 24];
            if (*((char *)v276 + 215) < 0)
            {
              sub_1C47EBC30(v289, *v290, (unint64_t)v272[v274 + 25]);
            }
            else
            {
              v291 = *(_OWORD *)v290;
              *(_QWORD *)(v201 + v274 * 8 + 208) = v272[v274 + 26];
              *(_OWORD *)v289 = v291;
            }
            *(_OWORD *)(v275 + 216) = *(_OWORD *)(v276 + 27);
            v274 += 29;
          }
          while (v276 + 29 != (void **)v199);
          v273 = v201 + v274 * 8;
        }
        v2[36] = v273;
      }
    }
    else
    {
      sub_1C6206BD8((void **)v443);
      if (v200 > 0x11A7B9611A7B961)
        goto LABEL_809;
      v202 = 0x69EE58469EE5846ALL * ((uint64_t)(v2[37] - v2[35]) >> 3);
      if (v202 <= v200)
        v202 = 0x34F72C234F72C235 * (((char *)v199 - (char *)v198) >> 3);
      v203 = (unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v2[37] - v2[35]) >> 3)) >= 0x8D3DCB08D3DCB0
           ? 0x11A7B9611A7B961
           : v202;
      if (v203 > 0x11A7B9611A7B961)
        goto LABEL_809;
      v204 = 232 * v203;
      v205 = (char *)operator new(232 * v203);
      v2[35] = v205;
      v2[36] = v205;
      v2[37] = &v205[v204];
      if (v198 != (__int128 *)v199)
      {
        v206 = 0;
        do
        {
          v207 = &v205[v206];
          v208 = (char *)v198 + v206;
          v209 = *(__int128 *)((char *)v198 + v206);
          v210 = *(__int128 *)((char *)v198 + v206 + 16);
          v211 = *(__int128 *)((char *)v198 + v206 + 32);
          *(_OWORD *)(v207 + 42) = *(__int128 *)((char *)v198 + v206 + 42);
          *((_OWORD *)v207 + 1) = v210;
          *((_OWORD *)v207 + 2) = v211;
          *(_OWORD *)v207 = v209;
          v212 = &v205[v206 + 64];
          v213 = (void **)((char *)v198 + v206 + 64);
          if (*((char *)v198 + v206 + 87) < 0)
          {
            sub_1C47EBC30(v212, *v213, *((_QWORD *)v208 + 9));
          }
          else
          {
            v214 = *(_OWORD *)v213;
            *(_QWORD *)&v205[v206 + 80] = *(_QWORD *)((char *)v198 + v206 + 80);
            *(_OWORD *)v212 = v214;
          }
          *(_OWORD *)(v207 + 88) = *(_OWORD *)(v208 + 88);
          v207[104] = v208[104];
          v215 = &v205[v206 + 112];
          v216 = (void **)((char *)v198 + v206 + 112);
          if (v208[135] < 0)
          {
            sub_1C47EBC30(v215, *v216, *(_QWORD *)((char *)v198 + v206 + 120));
          }
          else
          {
            v217 = *(_OWORD *)v216;
            *(_QWORD *)&v205[v206 + 128] = *(_QWORD *)((char *)v198 + v206 + 128);
            *(_OWORD *)v215 = v217;
          }
          *(_OWORD *)(v207 + 136) = *(_OWORD *)(v208 + 136);
          v218 = &v205[v206 + 152];
          v219 = (void **)((char *)v198 + v206 + 152);
          if (v208[175] < 0)
          {
            sub_1C47EBC30(v218, *v219, *(_QWORD *)((char *)v198 + v206 + 160));
          }
          else
          {
            v220 = *(_OWORD *)v219;
            *(_QWORD *)&v205[v206 + 168] = *(_QWORD *)((char *)v198 + v206 + 168);
            *(_OWORD *)v218 = v220;
          }
          *((_OWORD *)v207 + 11) = *((_OWORD *)v208 + 11);
          v221 = &v205[v206 + 192];
          v222 = (void **)((char *)v198 + v206 + 192);
          if (v208[215] < 0)
          {
            sub_1C47EBC30(v221, *v222, *(_QWORD *)((char *)v198 + v206 + 200));
          }
          else
          {
            v223 = *(_OWORD *)v222;
            *(_QWORD *)&v205[v206 + 208] = *(_QWORD *)((char *)v198 + v206 + 208);
            *(_OWORD *)v221 = v223;
          }
          *(_OWORD *)(v207 + 216) = *(_OWORD *)(v208 + 216);
          v206 += 232;
        }
        while (v208 + 232 != (char *)v199);
        v205 += v206;
      }
      v2[36] = v205;
    }
  }
  __p[0] = &v459;
  sub_1C51EA180((void ***)__p);
  v444 = v2 + 38;
  v459 = 0;
  v460 = 0;
  v461 = 0;
  if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
  {
    v144 = v2[38];
    v143 = v2[39];
    v145 = v459;
    if (v143 - v144 == (char *)v460 - (char *)v459)
    {
      if (v144 == v143)
      {
        v146 = 1;
        goto LABEL_374;
      }
      while (*(_DWORD *)v144 == LODWORD(v145->__r_.__value_.__l.__data_))
      {
        v147 = *(_BYTE *)(v144 + 47);
        v148 = v147 & 0x7F;
        if (v147 >= 0)
          v149 = v147 & 0x7F;
        else
          v149 = *(_QWORD *)(v144 + 32);
        v150 = HIBYTE(v145[1].__r_.__value_.__r.__words[2]);
        v151 = v150;
        v152 = v150 & 0x7F;
        if (v151 < 0)
          v152 = v145[1].__r_.__value_.__l.__size_;
        if (v149 != v152)
          break;
        if (v151 >= 0)
          v153 = v145 + 1;
        else
          v153 = (std::string *)v145[1].__r_.__value_.__l.__data_;
        if ((*(_BYTE *)(v144 + 47) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v144 + 24), v153, *(_QWORD *)(v144 + 32)))
            break;
        }
        else if ((v147 & 0x7F) != 0)
        {
          v154 = 0;
          while (*(unsigned __int8 *)(v144 + v154 + 24) == v153->__r_.__value_.__s.__data_[v154])
          {
            if (v148 == ++v154)
              goto LABEL_292;
          }
          break;
        }
LABEL_292:
        if (*(_DWORD *)(v144 + 64) != LODWORD(v145[2].__r_.__value_.__r.__words[2])
          || *(_QWORD *)(v144 + 72) != v145[3].__r_.__value_.__r.__words[0]
          || *(_QWORD *)(v144 + 80) != v145[3].__r_.__value_.__l.__size_)
        {
          break;
        }
        if (*(_BYTE *)(v144 + 89) && v145[3].__r_.__value_.__s.__data_[17])
        {
          if (*(unsigned __int8 *)(v144 + 88) != v145[3].__r_.__value_.__s.__data_[16])
            break;
        }
        else if ((*(_BYTE *)(v144 + 89) == 0) == (v145[3].__r_.__value_.__s.__data_[17] != 0))
        {
          break;
        }
        if (*(_DWORD *)(v144 + 92) != HIDWORD(v145[3].__r_.__value_.__r.__words[2]))
          break;
        v155 = *(_BYTE *)(v144 + 119);
        v156 = v155 & 0x7F;
        if (v155 >= 0)
          v157 = v155 & 0x7F;
        else
          v157 = *(_QWORD *)(v144 + 104);
        v158 = HIBYTE(v145[4].__r_.__value_.__r.__words[2]);
        v159 = v158;
        v160 = v158 & 0x7F;
        if (v159 < 0)
          v160 = v145[4].__r_.__value_.__l.__size_;
        if (v157 != v160)
          break;
        if (v159 >= 0)
          v161 = v145 + 4;
        else
          v161 = (std::string *)v145[4].__r_.__value_.__l.__data_;
        if ((*(_BYTE *)(v144 + 119) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v144 + 96), v161, *(_QWORD *)(v144 + 104)))
            break;
        }
        else if ((v155 & 0x7F) != 0)
        {
          v162 = 0;
          while (*(unsigned __int8 *)(v144 + v162 + 96) == v161->__r_.__value_.__s.__data_[v162])
          {
            if (v156 == ++v162)
              goto LABEL_317;
          }
          break;
        }
LABEL_317:
        if (*(unsigned __int8 *)(v144 + 136) != v145[5].__r_.__value_.__s.__data_[16])
          break;
        if (*(_BYTE *)(v144 + 152) && v145[6].__r_.__value_.__s.__data_[8])
        {
          if (*(_QWORD *)(v144 + 144) != v145[6].__r_.__value_.__r.__words[0])
            break;
        }
        else if ((*(_BYTE *)(v144 + 152) == 0) == (v145[6].__r_.__value_.__s.__data_[8] != 0))
        {
          break;
        }
        v163 = *(_BYTE *)(v144 + 183);
        v164 = v163 & 0x7F;
        if (v163 >= 0)
          v165 = (char *)(v163 & 0x7F);
        else
          v165 = *(char **)(v144 + 168);
        v166 = v145[7].__r_.__value_.__s.__data_[15];
        v167 = v166;
        v168 = (std::string::pointer)(v166 & 0x7F);
        if (v167 < 0)
          v168 = v145[7].__r_.__value_.__l.__data_;
        if (v165 != v168)
          break;
        if (v167 >= 0)
          v169 = &v145[6].__r_.__value_.__r.__words[2];
        else
          v169 = (std::string::size_type *)v145[6].__r_.__value_.__r.__words[2];
        if ((*(_BYTE *)(v144 + 183) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v144 + 160), v169, *(_QWORD *)(v144 + 168)))
            break;
        }
        else if ((v163 & 0x7F) != 0)
        {
          v170 = 0;
          while (*(unsigned __int8 *)(v144 + v170 + 160) == *((unsigned __int8 *)v169 + v170))
          {
            if (v164 == ++v170)
              goto LABEL_339;
          }
          break;
        }
LABEL_339:
        v171 = *(_BYTE *)(v144 + 223);
        v172 = v171 & 0x7F;
        if (v171 >= 0)
          v173 = v171 & 0x7F;
        else
          v173 = *(_QWORD *)(v144 + 208);
        v174 = v145[9].__r_.__value_.__s.__data_[7];
        v175 = v174;
        v176 = v174 & 0x7F;
        if (v175 < 0)
          v176 = v145[8].__r_.__value_.__r.__words[2];
        if (v173 != v176)
          break;
        if (v175 >= 0)
          v177 = &v145[8].__r_.__value_.__l.__size_;
        else
          v177 = (std::string::size_type *)v145[8].__r_.__value_.__l.__size_;
        if ((*(_BYTE *)(v144 + 223) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v144 + 200), v177, *(_QWORD *)(v144 + 208)))
            break;
        }
        else if ((v171 & 0x7F) != 0)
        {
          v178 = 0;
          while (*(unsigned __int8 *)(v144 + v178 + 200) == *((unsigned __int8 *)v177 + v178))
          {
            if (v172 == ++v178)
              goto LABEL_355;
          }
          break;
        }
LABEL_355:
        v179 = *(_BYTE *)(v144 + 263);
        v180 = v179 & 0x7F;
        if (v179 >= 0)
          v181 = v179 & 0x7F;
        else
          v181 = *(_QWORD *)(v144 + 248);
        v182 = HIBYTE(v145[10].__r_.__value_.__r.__words[2]);
        v183 = v182;
        v184 = v182 & 0x7F;
        if (v183 < 0)
          v184 = v145[10].__r_.__value_.__l.__size_;
        if (v181 != v184)
          break;
        if (v183 >= 0)
          v185 = v145 + 10;
        else
          v185 = (std::string *)v145[10].__r_.__value_.__l.__data_;
        if ((*(_BYTE *)(v144 + 263) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v144 + 240), v185, *(_QWORD *)(v144 + 248)))
            break;
        }
        else if ((v179 & 0x7F) != 0)
        {
          v186 = 0;
          while (*(unsigned __int8 *)(v144 + v186 + 240) == v185->__r_.__value_.__s.__data_[v186])
          {
            if (v180 == ++v186)
              goto LABEL_371;
          }
          break;
        }
LABEL_371:
        v144 += 280;
        v145 = (std::string *)((char *)v145 + 280);
        v146 = 1;
        if (v144 == v143)
          goto LABEL_374;
      }
    }
  }
  v146 = 0;
LABEL_374:
  v464 = 0;
  v462 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "stack", 0, v146, &v462, &v464))
  {
    v187 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v187 = -1963413621 * ((v2[39] - v2[38]) >> 3);
    if (!v187)
    {
LABEL_378:
      (*(void (**)(uint64_t *))(*v3 + 48))(v3);
      (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
      v2 = v449;
      goto LABEL_379;
    }
    v250 = 0;
    while (1)
    {
      v465[0] = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v250, v465))
        break;
LABEL_468:
      if (++v250 == v187)
        goto LABEL_378;
    }
    v251 = v449[38];
    if (0xAF8AF8AF8AF8AF8BLL * ((v449[39] - v251) >> 3) <= v250)
    {
      sub_1C6206EF8(v444, v250 + 1);
      v251 = *v444;
    }
    (*(void (**)(uint64_t *))(*v3 + 144))(v3);
    sub_1C6205E1C(v3, (unsigned int *)(v251 + 280 * v250));
    v451[0] = 0;
    memset(__p, 0, sizeof(__p));
    sub_1C6205F04(v3, (uint64_t)"name", v251 + 280 * v250 + 24, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v252 = v251 + 280 * v250;
    LODWORD(__p[0]) = 0;
    sub_1C6206CC4((uint64_t)v3, (_DWORD *)(v252 + 64), __p);
    __p[0] = 0;
    sub_1C6206878((uint64_t)v3, (unint64_t *)(v252 + 72), (unint64_t *)__p);
    if (*(_DWORD *)(v252 + 64) != 2)
      sub_1C6206E70((uint64_t)v3, (uint64_t)"size", (unint64_t *)(v251 + 280 * v250 + 80), 1);
    v253 = v251 + 280 * v250;
    LOWORD(__p[0]) = 0;
    sub_1C51EDED8((uint64_t)v3, (unsigned __int8 *)(v253 + 88), (unsigned __int8 *)__p);
    LODWORD(__p[0]) = 0;
    sub_1C620692C((uint64_t)v3, (_DWORD *)(v253 + 92), __p);
    v451[0] = 0;
    memset(__p, 0, sizeof(__p));
    sub_1C6205F04(v3, (uint64_t)"callee-saved-register", v253 + 96, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v254 = v251 + 280 * v250;
    v463 = 1;
    sub_1C6205D50((uint64_t)v3, (uint64_t)"callee-saved-restored", (_BYTE *)(v254 + 136), &v463, 0);
    v463 = 1;
    v255 = (*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
    v257 = *(unsigned __int8 *)(v254 + 152);
    v256 = (unint64_t *)(v254 + 152);
    v258 = v256 - 1;
    if (v257)
      v259 = 0;
    else
      v259 = v255;
    if (((*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3) & 1) != 0)
    {
      if (!*(_BYTE *)v256)
        goto LABEL_504;
    }
    else if (!*(_BYTE *)v256)
    {
      *v258 = 0;
      *(_BYTE *)v256 = 1;
    }
    __p[0] = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, void **))(*v3 + 120))(v3, "local-offset", 0, v259, &v463, __p))
    {
      if (((*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3) & 1) != 0)
        goto LABEL_505;
      v260 = v3[37];
      if (!v260)
        goto LABEL_505;
      v261 = *(_QWORD *)(v260 + 8);
      if (!v261 || *(_DWORD *)(v261 + 32) != 1)
        goto LABEL_505;
      v262 = *(int **)(v261 + 72);
      v263 = *(_QWORD *)(v261 + 80);
      v264 = v263;
      do
      {
        v265 = v264;
        if (!v264)
          break;
        --v264;
      }
      while (*((_BYTE *)v262 + v265 - 1) == 32);
      if (v265 < v263)
        v263 = v265;
      if (v263 == 6
        && ((v266 = *v262, v267 = *((unsigned __int16 *)v262 + 2), v266 == 1852796476)
          ? (v268 = v267 == 15973)
          : (v268 = 0),
            v268))
      {
        *v258 = 0;
        *v256 = 0;
      }
      else
      {
LABEL_505:
        sub_1C51EF720((uint64_t)v3, v256 - 1);
      }
      (*(void (**)(uint64_t *, void *))(*v3 + 128))(v3, __p[0]);
      goto LABEL_507;
    }
    if (!v463)
    {
LABEL_507:
      v451[0] = 0;
      memset(__p, 0, sizeof(__p));
      sub_1C6205F04(v3, (uint64_t)"debug-info-variable", v251 + 280 * v250 + 160, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v451[0] = 0;
      memset(__p, 0, sizeof(__p));
      sub_1C6205F04(v3, (uint64_t)"debug-info-expression", v251 + 280 * v250 + 200, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v451[0] = 0;
      memset(__p, 0, sizeof(__p));
      v269 = sub_1C6205F04(v3, (uint64_t)"debug-info-location", v251 + 280 * v250 + 240, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      (*(void (**)(uint64_t *, __n128))(*v3 + 152))(v3, v269);
      (*(void (**)(uint64_t *, void **))(*v3 + 40))(v3, v465[0]);
      goto LABEL_468;
    }
LABEL_504:
    *v258 = 0;
    *v256 = 0;
    goto LABEL_507;
  }
  if (v444 != (uint64_t *)&v459 && v462)
  {
    v224 = v459;
    v225 = v460;
    v226 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v460 - (char *)v459) >> 3);
    v227 = v2[38];
    if (0xAF8AF8AF8AF8AF8BLL * ((v2[40] - v227) >> 3) >= v226)
    {
      v292 = v2[39];
      v293 = v292 - v227;
      if (0xAF8AF8AF8AF8AF8BLL * ((v292 - v227) >> 3) >= v226)
      {
        if (v459 == v460)
        {
          v301 = v2[38];
        }
        else
        {
          v301 = v2[38];
          do
          {
            sub_1C6206FD4(v227, v224);
            v224 = (std::string *)((char *)v224 + 280);
            v227 += 280;
            v301 += 280;
          }
          while (v224 != v225);
          v292 = v2[39];
        }
        if (v292 != v301)
        {
          v381 = v292 - 120;
          do
          {
            if (*(char *)(v381 + 103) < 0)
              operator delete(*(void **)(v381 + 80));
            if (*(char *)(v381 + 63) < 0)
              operator delete(*(void **)(v381 + 40));
            if (*(char *)(v381 + 23) < 0)
              operator delete(*(void **)v381);
            if (*(char *)(v381 - 41) < 0)
              operator delete(*(void **)(v381 - 64));
            if (*(char *)(v381 - 113) < 0)
              operator delete(*(void **)(v381 - 136));
            v382 = v381 - 160;
            v381 -= 280;
          }
          while (v382 != v301);
        }
        v2[39] = v301;
      }
      else
      {
        v294 = (__int128 *)(&v459->__r_.__value_.__l.__data_ + ((v292 - v227) >> 3));
        if (v292 != v227)
        {
          do
          {
            sub_1C6206FD4(v227, v224);
            v224 = (std::string *)((char *)v224 + 280);
            v227 += 280;
            v293 -= 280;
          }
          while (v293);
          v227 = v2[39];
        }
        v295 = v227;
        if (v294 != (__int128 *)v225)
        {
          v295 = v227;
          v296 = v227;
          do
          {
            v297 = sub_1C51EFE90(v296, v294);
            v294 = (__int128 *)((char *)v294 + 280);
            v296 = v297 + 280;
            v295 += 280;
          }
          while (v294 != (__int128 *)v225);
        }
        v2[39] = v295;
      }
    }
    else
    {
      sub_1C6206F78((void **)v444);
      if (v226 > 0xEA0EA0EA0EA0EALL)
        goto LABEL_809;
      v228 = 0x5F15F15F15F15F16 * ((uint64_t)(v2[40] - v2[38]) >> 3);
      if (v228 <= v226)
        v228 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v225 - (char *)v224) >> 3);
      v229 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v2[40] - v2[38]) >> 3) >= 0x75075075075075 ? 0xEA0EA0EA0EA0EALL : v228;
      if (v229 > 0xEA0EA0EA0EA0EALL)
        goto LABEL_809;
      v230 = 280 * v229;
      v231 = (char *)operator new(280 * v229);
      v2[38] = v231;
      v2[39] = v231;
      v2[40] = &v231[v230];
      while (v224 != v225)
      {
        v232 = sub_1C51EFE90((uint64_t)v231, (__int128 *)v224);
        v224 = (std::string *)((char *)v224 + 280);
        v231 = (char *)(v232 + 280);
      }
      v2[39] = v231;
    }
  }
LABEL_379:
  __p[0] = &v459;
  sub_1C51EA0C0((void ***)__p);
  memset(__p, 0, 24);
  v465[0] = 0;
  if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3)
    && (v189 = (char *)v2[45],
        v188 = (char *)v2[46],
        v190 = (int *)__p[0],
        v188 - v189 == (char *)__p[1] - (char *)__p[0]))
  {
    if (v189 == v188)
    {
      v191 = 1;
    }
    else
    {
      do
      {
        v192 = *(_DWORD *)v189;
        v193 = *((_DWORD *)v189 + 1);
        v189 += 32;
        v194 = *v190;
        v195 = v190[1];
        v190 += 8;
        v191 = v192 == v194 && v193 == v195;
      }
      while (v191 && v189 != v188);
    }
  }
  else
  {
    v191 = 0;
  }
  LOBYTE(v464) = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _BOOL8, uint64_t *, void ***))(*v3 + 120))(v3, "callSites", 0, v191, &v464, v465))
  {
    sub_1C6207090(v3, v2 + 45);
    (*(void (**)(uint64_t *, void **))(*v3 + 128))(v3, v465[0]);
    goto LABEL_555;
  }
  if (v2 + 45 == __p || !(_BYTE)v464)
    goto LABEL_555;
  v234 = __p[0];
  v233 = __p[1];
  v235 = (char *)__p[1] - (char *)__p[0];
  v236 = ((char *)__p[1] - (char *)__p[0]) >> 5;
  v237 = v2[45];
  if (v236 > (v2[47] - v237) >> 5)
  {
    sub_1C62073F0((void **)v2 + 45);
    if (v235 < 0)
      goto LABEL_809;
    v238 = v2[47] - v2[45];
    v239 = v238 >> 4;
    if (v238 >> 4 <= v236)
      v239 = v236;
    v240 = (unint64_t)v238 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v239;
    if (v240 >> 59)
      goto LABEL_809;
    v241 = (char *)operator new(32 * v240);
    v2[45] = v241;
    v2[46] = v241;
    v2[47] = &v241[32 * v240];
    v242 = v2 + 45;
    v243 = v234;
    goto LABEL_546;
  }
  v298 = (v2[46] - v237) >> 5;
  if (v298 < v236)
  {
    v299 = (char *)__p[0] + 32 * v298;
    sub_1C51F0AFC((uint64_t)__p[0], (uint64_t)v299, v237);
    v242 = v2 + 45;
    v243 = v299;
LABEL_546:
    sub_1C51F09FC(v242, v243, v233);
    goto LABEL_555;
  }
  v302 = sub_1C51F0AFC((uint64_t)__p[0], (uint64_t)__p[1], v237);
  v303 = v2[46];
  if (v303 != v302)
  {
    do
    {
      v304 = v303 - 32;
      v459 = (std::string *)(v303 - 24);
      sub_1C51EA488((void ***)&v459);
      v303 = v304;
    }
    while (v304 != v302);
  }
  v2[46] = v302;
LABEL_555:
  v459 = (std::string *)__p;
  sub_1C51E9FC0((void ***)&v459);
  v459 = 0;
  v305 = (*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
  if (v2[49] == v2[48])
    v306 = v305;
  else
    v306 = 0;
  LOBYTE(v465[0]) = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, void ***, std::string **))(*v3 + 120))(v3, "debugValueSubstitutions", 0, v306, v465, &v459))
  {
    v307 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v307 = -858993459 * ((v2[49] - v2[48]) >> 2);
    if (v307)
    {
      v339 = 0;
      v340 = v307;
      do
      {
        __p[0] = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, void **))(*v3 + 32))(v3, v339, __p))
        {
          v341 = v2;
          v344 = v2 + 48;
          v343 = (char *)v2[48];
          v342 = (char *)v344[1];
          v345 = (char *)(v342 - v343);
          v346 = 0xCCCCCCCCCCCCCCCDLL * ((v342 - v343) >> 2);
          if (v346 <= v339)
          {
            v347 = v339 + 1;
            v348 = v339 + 1 - v346;
            v349 = v341[50];
            if (0xCCCCCCCCCCCCCCCDLL * ((v349 - (uint64_t)v342) >> 2) >= v348)
            {
              v357 = 20 * ((20 * v348 - 20) / 0x14) + 20;
              bzero(v342, v357);
              v341[49] = &v342[v357];
              v356 = v341;
            }
            else
            {
              v350 = 0xCCCCCCCCCCCCCCCDLL * ((v349 - (uint64_t)v343) >> 2);
              if (2 * v350 > v347)
                v347 = 2 * v350;
              if (v350 >= 0x666666666666666)
                v347 = 0xCCCCCCCCCCCCCCCLL;
              if (v347 > 0xCCCCCCCCCCCCCCCLL)
LABEL_808:
                sub_1C4764EE4();
              v439 = 5 * v347;
              v351 = operator new(20 * v347);
              v352 = (char *)v351 + 4 * ((v342 - v343) >> 2);
              v353 = 20 * ((20 * v348 - 20) / 0x14) + 20;
              bzero(v352, v353);
              if (v342 != v343)
              {
                do
                {
                  v354 = *(_OWORD *)(v342 - 20);
                  *((_DWORD *)v352 - 1) = *((_DWORD *)v342 - 1);
                  *(_OWORD *)(v352 - 20) = v354;
                  v352 -= 20;
                  v342 -= 20;
                }
                while (v342 != v343);
                v342 = v343;
              }
              v355 = &v345[(_QWORD)v351 + v353];
              v356 = v449;
              v449[48] = v352;
              v449[49] = v355;
              v449[50] = (char *)v351 + 4 * v439;
              if (v342)
                operator delete(v342);
            }
            v343 = (char *)v356[48];
          }
          (*(void (**)(uint64_t *))(*v3 + 144))(v3);
          sub_1C6207468(v3, &v343[20 * v339]);
          (*(void (**)(uint64_t *))(*v3 + 152))(v3);
          (*(void (**)(uint64_t *, void *))(*v3 + 40))(v3, __p[0]);
          v2 = v449;
        }
        ++v339;
      }
      while (v339 != v340);
    }
    (*(void (**)(uint64_t *))(*v3 + 48))(v3);
    (*(void (**)(uint64_t *, std::string *))(*v3 + 128))(v3, v459);
    v308 = v446;
  }
  else
  {
    v308 = v446;
    if (LOBYTE(v465[0]))
      v2[49] = v2[48];
  }
  v447 = (int64x2_t *)(v308 + 37);
  v309 = *v3;
  v459 = 0;
  v460 = 0;
  v461 = 0;
  if ((*(unsigned int (**)(uint64_t *))(v309 + 16))(v3))
  {
    v311 = v2[41];
    v310 = v2[42];
    v312 = v459;
    if (v310 - v311 == (char *)v460 - (char *)v459)
    {
      while (1)
      {
        if (v311 == v310)
        {
          v323 = 1;
          goto LABEL_596;
        }
        if (*(_DWORD *)v311 != LODWORD(v312->__r_.__value_.__l.__data_))
          break;
        v313 = *(_BYTE *)(v311 + 47);
        v314 = v313 & 0x7F;
        if (v313 >= 0)
          v315 = v313 & 0x7F;
        else
          v315 = *(_QWORD *)(v311 + 32);
        v316 = HIBYTE(v312[1].__r_.__value_.__r.__words[2]);
        v317 = v316;
        v318 = v316 & 0x7F;
        if (v317 < 0)
          v318 = v312[1].__r_.__value_.__l.__size_;
        if (v315 != v318)
          break;
        if (v317 >= 0)
          v319 = v312 + 1;
        else
          v319 = (std::string *)v312[1].__r_.__value_.__l.__data_;
        if ((*(_BYTE *)(v311 + 47) & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v311 + 24), v319, *(_QWORD *)(v311 + 32)))
            break;
        }
        else if ((v313 & 0x7F) != 0)
        {
          v320 = 0;
          while (*(unsigned __int8 *)(v311 + v320 + 24) == v319->__r_.__value_.__s.__data_[v320])
          {
            if (v314 == ++v320)
              goto LABEL_585;
          }
          break;
        }
LABEL_585:
        v321 = v312[2].__r_.__value_.__s.__data_[17];
        if (*(_BYTE *)(v311 + 65))
          v322 = v321 == 0;
        else
          v322 = 1;
        if (v322)
        {
          if ((*(_BYTE *)(v311 + 65) == 0) == (v321 != 0))
            break;
        }
        else if (*(unsigned __int8 *)(v311 + 64) != v312[2].__r_.__value_.__s.__data_[16])
        {
          break;
        }
        if (*(unsigned __int8 *)(v311 + 66) != v312[2].__r_.__value_.__s.__data_[18])
          break;
        v311 += 72;
        v312 += 3;
      }
    }
  }
  v323 = 0;
LABEL_596:
  v464 = 0;
  v462 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "constants", 0, v323, &v462, &v464))
  {
    v324 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
    if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
      v324 = 954437177 * ((v2[42] - v2[41]) >> 3);
    if (v324)
    {
      v358 = 0;
      v359 = v324;
      v445 = (void **)(v2 + 43);
      do
      {
        v465[0] = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v358, v465))
        {
          v360 = v2[41];
          v361 = v2[42];
          v362 = 0x8E38E38E38E38E39 * ((uint64_t)(v361 - v360) >> 3);
          if (v362 <= v358)
          {
            v363 = v358 + 1;
            v364 = v358 + 1 - v362;
            v365 = *v445;
            if (0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)*v445 - v361) >> 3) >= v364)
            {
              bzero((void *)v2[42], 72 * ((72 * v364 - 72) / 0x48) + 72);
              v2[42] = v361 + 72 * v364;
            }
            else
            {
              v366 = 0x1C71C71C71C71C72 * (((uint64_t)v365 - v360) >> 3);
              if (v366 <= v363)
                v366 = v358 + 1;
              if (0x8E38E38E38E38E39 * (((uint64_t)v365 - v360) >> 3) >= 0x1C71C71C71C71C7)
                v367 = 0x38E38E38E38E38ELL;
              else
                v367 = v366;
              v451[0] = v445;
              if (v367 > 0x38E38E38E38E38ELL)
                goto LABEL_808;
              v441 = 9 * v367;
              v368 = (char *)operator new(72 * v367);
              v369 = &v368[8 * ((uint64_t)(v361 - v360) >> 3)];
              bzero(v369, 72 * ((72 * v364 - 72) / 0x48) + 72);
              if (v361 == v360)
              {
                v370 = vdupq_n_s64(v361);
              }
              else
              {
                do
                {
                  v371 = *(_OWORD *)(v361 - 72);
                  *((_QWORD *)v369 - 7) = *(_QWORD *)(v361 - 56);
                  *(_OWORD *)(v369 - 72) = v371;
                  v372 = *(_OWORD *)(v361 - 48);
                  *((_QWORD *)v369 - 4) = *(_QWORD *)(v361 - 32);
                  *((_OWORD *)v369 - 3) = v372;
                  *(_QWORD *)(v361 - 40) = 0;
                  *(_QWORD *)(v361 - 32) = 0;
                  *(_QWORD *)(v361 - 48) = 0;
                  *(_OWORD *)(v369 - 24) = *(_OWORD *)(v361 - 24);
                  v373 = *(_WORD *)(v361 - 8);
                  *(v369 - 6) = *(_BYTE *)(v361 - 6);
                  *((_WORD *)v369 - 4) = v373;
                  v369 -= 72;
                  v361 -= 72;
                }
                while (v361 != v360);
                v370 = *v447;
                v365 = *v445;
              }
              v449[41] = v369;
              v449[42] = &v368[72 * v363];
              v374 = &v368[8 * v441];
              v2 = v449;
              *(int64x2_t *)&__p[1] = v370;
              v449[43] = v374;
              __p[3] = v365;
              __p[0] = (void *)v370.i64[0];
              sub_1C51F0B74((uint64_t)__p);
            }
            v360 = v447->i64[0];
          }
          (*(void (**)(uint64_t *))(*v3 + 104))(v3);
          sub_1C6205E1C(v3, (unsigned int *)(v360 + 72 * v358));
          v451[0] = 0;
          memset(__p, 0, sizeof(__p));
          sub_1C6205F04(v3, (uint64_t)"value", v360 + 72 * v358 + 24, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v375 = v360 + 72 * v358;
          LOWORD(__p[0]) = 0;
          sub_1C51EDED8((uint64_t)v3, (unsigned __int8 *)(v375 + 64), (unsigned __int8 *)__p);
          v463 = 0;
          sub_1C6205D50((uint64_t)v3, (uint64_t)"isTargetSpecific", (_BYTE *)(v375 + 66), &v463, 0);
          (*(void (**)(uint64_t *))(*v3 + 112))(v3);
          (*(void (**)(uint64_t *, void **))(*v3 + 40))(v3, v465[0]);
        }
        ++v358;
      }
      while (v358 != v359);
    }
    (*(void (**)(uint64_t *))(*v3 + 48))(v3);
    (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
    goto LABEL_707;
  }
  if (v447 != (int64x2_t *)&v459 && v462)
  {
    v326 = v459;
    v325 = (__int128 *)v460;
    v327 = 0x8E38E38E38E38E39 * (((char *)v460 - (char *)v459) >> 3);
    v328 = v2[43];
    v329 = v2[41];
    if (0x8E38E38E38E38E39 * ((v328 - v329) >> 3) >= v327)
    {
      v376 = v2[42];
      if (0x8E38E38E38E38E39 * ((v376 - v329) >> 3) >= v327)
      {
        if (v459 == v460)
        {
          v380 = v2[41];
        }
        else
        {
          v380 = v2[41];
          do
          {
            v383 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
            *(_QWORD *)(v329 + 16) = *((_QWORD *)&v326->__r_.__value_.__l + 2);
            *(_OWORD *)v329 = v383;
            std::string::operator=((std::string *)(v329 + 24), v326 + 1);
            *(_OWORD *)(v329 + 48) = *(_OWORD *)&v326[2].__r_.__value_.__l.__data_;
            v384 = v326[2].__r_.__value_.__r.__words[2];
            *(_BYTE *)(v329 + 66) = v326[2].__r_.__value_.__s.__data_[18];
            *(_WORD *)(v329 + 64) = v384;
            v380 += 72;
            v326 += 3;
            v329 += 72;
          }
          while (v326 != (std::string *)v325);
          v376 = v2[42];
        }
        while (v376 != v380)
        {
          if (*(char *)(v376 - 25) < 0)
            operator delete(*(void **)(v376 - 48));
          v376 -= 72;
        }
        v2[42] = v380;
        goto LABEL_707;
      }
      v377 = (void **)(&v459->__r_.__value_.__l.__data_ + ((v376 - v329) >> 3));
      if (v376 != v329)
      {
        do
        {
          v378 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
          *(_QWORD *)(v329 + 16) = *((_QWORD *)&v326->__r_.__value_.__l + 2);
          *(_OWORD *)v329 = v378;
          std::string::operator=((std::string *)(v329 + 24), v326 + 1);
          *(_OWORD *)(v329 + 48) = *(_OWORD *)&v326[2].__r_.__value_.__l.__data_;
          v379 = v326[2].__r_.__value_.__r.__words[2];
          *(_BYTE *)(v329 + 66) = v326[2].__r_.__value_.__s.__data_[18];
          *(_WORD *)(v329 + 64) = v379;
          v326 += 3;
          v329 += 72;
        }
        while (v326 != (std::string *)v377);
      }
      v337 = (uint64_t *)v447;
      v338 = (uint64_t)v377;
    }
    else
    {
      if (v329)
      {
        v330 = v2[42];
        v331 = (void *)v2[41];
        if (v330 != v329)
        {
          do
          {
            if (*(char *)(v330 - 25) < 0)
              operator delete(*(void **)(v330 - 48));
            v330 -= 72;
          }
          while (v330 != v329);
          v331 = (void *)v447->i64[0];
        }
        v2[42] = v329;
        operator delete(v331);
        v328 = 0;
        v447->i64[0] = 0;
        v447->i64[1] = 0;
        v447[1].i64[0] = 0;
      }
      if (v327 > 0x38E38E38E38E38ELL)
        goto LABEL_809;
      v332 = 0x8E38E38E38E38E39 * (v328 >> 3);
      v333 = 2 * v332;
      if (2 * v332 <= v327)
        v333 = 0x8E38E38E38E38E39 * (((char *)v325 - (char *)v326) >> 3);
      v334 = v332 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v333;
      if (v334 > 0x38E38E38E38E38ELL)
        goto LABEL_809;
      v335 = 9 * v334;
      v336 = (char *)operator new(72 * v334);
      v2[41] = v336;
      v2[42] = v336;
      v2[43] = &v336[8 * v335];
      v337 = (uint64_t *)v447;
      v338 = (uint64_t)v326;
    }
    sub_1C51F0BD4(v337, v338, (uint64_t)v325);
  }
LABEL_707:
  __p[0] = &v459;
  sub_1C51EA048((void ***)__p);
  sub_1C6207518((uint64_t)v3, v2 + 44);
  if (!(*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3) || v2[52] != v2[53])
  {
    __p[0] = (void *)5;
    memset(&__p[1], 0, 24);
    sub_1C62075BC(v3, (_DWORD *)v2 + 102, (uint64_t)__p);
    v459 = (std::string *)&__p[1];
    sub_1C51E9F38((void ***)&v459);
  }
  if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3) && v2[55] == v2[56])
    goto LABEL_805;
  v448 = v447 + 7;
  v459 = 0;
  v460 = 0;
  v461 = 0;
  v464 = 0;
  v463 = 0;
  v385 = (*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3);
  v386 = 0;
  if (!v385)
    goto LABEL_734;
  v388 = v2[55];
  v387 = v2[56];
  v389 = v459;
  if (v387 - v388 != (char *)v460 - (char *)v459)
    goto LABEL_732;
  while (1)
  {
    if (v388 == v387)
    {
      v386 = 1;
      goto LABEL_734;
    }
    v390 = *(_BYTE *)(v388 + 23);
    v391 = v390 & 0x7F;
    if (v390 >= 0)
      v392 = v390 & 0x7F;
    else
      v392 = *(_QWORD *)(v388 + 8);
    v393 = HIBYTE(v389->__r_.__value_.__r.__words[2]);
    v394 = v393;
    v395 = v393 & 0x7F;
    if (v394 < 0)
      v395 = v389->__r_.__value_.__l.__size_;
    if (v392 != v395)
      goto LABEL_732;
    v396 = v394 >= 0 ? v389 : (std::string *)v389->__r_.__value_.__r.__words[0];
    if ((*(_BYTE *)(v388 + 23) & 0x80) == 0)
      break;
    if (memcmp(*(const void **)v388, v396, *(_QWORD *)(v388 + 8)))
      goto LABEL_732;
LABEL_731:
    v388 += 40;
    v389 = (std::string *)((char *)v389 + 40);
  }
  if ((v390 & 0x7F) == 0)
    goto LABEL_731;
  v397 = 0;
  while (*(unsigned __int8 *)(v388 + v397) == v396->__r_.__value_.__s.__data_[v397])
  {
    if (v391 == ++v397)
      goto LABEL_731;
  }
LABEL_732:
  v386 = 0;
LABEL_734:
  if (!(*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*v3 + 120))(v3, "machineMetadataNodes", 0, v386, &v463, &v464))
  {
    if (v448 == (int64x2_t *)&v459 || !v463)
      goto LABEL_804;
    v417 = v459;
    v418 = v460;
    v419 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v460 - (char *)v459) >> 3);
    v420 = v2[57];
    v421 = v2[55];
    if (0xCCCCCCCCCCCCCCCDLL * ((v420 - v421) >> 3) >= v419)
    {
      v430 = v2[56];
      if (0xCCCCCCCCCCCCCCCDLL * ((v430 - v421) >> 3) >= v419)
      {
        if (v459 == v460)
        {
          v437 = v2[55];
        }
        else
        {
          v437 = v2[55];
          do
          {
            std::string::operator=((std::string *)v421, v417);
            *(_OWORD *)(v421 + 24) = *(_OWORD *)&v417[1].__r_.__value_.__l.__data_;
            v437 += 40;
            v417 = (std::string *)((char *)v417 + 40);
            v421 += 40;
          }
          while (v417 != v418);
          v430 = v2[56];
        }
        while (v430 != v437)
        {
          if (*(char *)(v430 - 17) < 0)
            operator delete(*(void **)(v430 - 40));
          v430 -= 40;
        }
        v2[56] = v437;
      }
      else
      {
        v431 = (void **)(&v459->__r_.__value_.__l.__data_ + ((v430 - v421) >> 3));
        if (v430 != v421)
        {
          do
          {
            std::string::operator=((std::string *)v421, v417);
            *(_OWORD *)(v421 + 24) = *(_OWORD *)&v417[1].__r_.__value_.__l.__data_;
            v417 = (std::string *)((char *)v417 + 40);
            v421 += 40;
          }
          while (v417 != (std::string *)v431);
          v421 = v2[56];
        }
        v432 = v421;
        if (v431 != (void **)v418)
        {
          v433 = 0;
          do
          {
            v434 = v421 + v433 * 8;
            v435 = &v431[v433];
            if (SHIBYTE(v431[v433 + 2]) < 0)
            {
              sub_1C47EBC30((_BYTE *)v434, *v435, (unint64_t)v435[1]);
            }
            else
            {
              v436 = *(_OWORD *)v435;
              *(_QWORD *)(v434 + 16) = v435[2];
              *(_OWORD *)v434 = v436;
            }
            *(_OWORD *)(v421 + v433 * 8 + 24) = *(_OWORD *)&v431[v433 + 3];
            v433 += 5;
          }
          while (&v431[v433] != (void **)v418);
          v432 = v421 + v433 * 8;
        }
        v2[56] = v432;
      }
      goto LABEL_804;
    }
    if (v421)
    {
      v422 = v2[56];
      v423 = (void **)v2[55];
      if (v422 != v421)
      {
        do
        {
          if (*(char *)(v422 - 17) < 0)
            operator delete(*(void **)(v422 - 40));
          v422 -= 40;
        }
        while (v422 != v421);
        v423 = (void **)v448->i64[0];
      }
      v2[56] = v421;
      operator delete(v423);
      v420 = 0;
      v448->i64[0] = 0;
      v448->i64[1] = 0;
      v448[1].i64[0] = 0;
    }
    if (v419 <= 0x666666666666666)
    {
      v424 = 0xCCCCCCCCCCCCCCCDLL * (v420 >> 3);
      v425 = 2 * v424;
      if (2 * v424 <= v419)
        v425 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v418 - (char *)v417) >> 3);
      v426 = v424 >= 0x333333333333333 ? 0x666666666666666 : v425;
      if (v426 <= 0x666666666666666)
      {
        v427 = 5 * v426;
        v428 = (char *)operator new(40 * v426);
        v2[55] = v428;
        v2[56] = v428;
        v2[57] = &v428[8 * v427];
        while (v417 != v418)
        {
          if (SHIBYTE(v417->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1C47EBC30(v428, v417->__r_.__value_.__l.__data_, v417->__r_.__value_.__l.__size_);
          }
          else
          {
            v429 = *(_OWORD *)&v417->__r_.__value_.__l.__data_;
            *((_QWORD *)v428 + 2) = *((_QWORD *)&v417->__r_.__value_.__l + 2);
            *(_OWORD *)v428 = v429;
          }
          *(_OWORD *)(v428 + 24) = *(_OWORD *)&v417[1].__r_.__value_.__l.__data_;
          v417 = (std::string *)((char *)v417 + 40);
          v428 += 40;
        }
        v2[56] = v428;
        goto LABEL_804;
      }
    }
LABEL_809:
    abort();
  }
  v398 = (*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
  if ((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3))
    v398 = -858993459 * ((v2[56] - v2[55]) >> 3);
  if (v398)
  {
    v399 = 0;
    v400 = (void **)(v2 + 57);
    v438 = v3;
    v401 = v398;
    v442 = v398;
    do
    {
      v465[0] = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, void ***))(*v3 + 32))(v3, v399, v465))
      {
        v403 = (void **)v2[55];
        v402 = (void **)v2[56];
        v404 = 0xCCCCCCCCCCCCCCCDLL * (v402 - v403);
        if (v404 <= v399)
        {
          v405 = v399 + 1;
          v406 = v399 + 1 - v404;
          v407 = *v400;
          if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)*v400 - (_BYTE *)v402) >> 3) >= v406)
          {
            bzero(v402, 40 * ((40 * v406 - 40) / 0x28) + 40);
            v2 = v449;
            v449[56] = &v402[5 * v406];
          }
          else
          {
            v408 = 0x999999999999999ALL * ((v407 - (_BYTE *)v403) >> 3);
            if (v408 <= v405)
              v408 = v399 + 1;
            if (0xCCCCCCCCCCCCCCCDLL * ((v407 - (_BYTE *)v403) >> 3) >= 0x333333333333333)
              v409 = 0x666666666666666;
            else
              v409 = v408;
            v451[0] = v400;
            if (v409 > 0x666666666666666)
              goto LABEL_808;
            v410 = v400;
            v440 = 5 * v409;
            v411 = (char *)operator new(40 * v409);
            v412 = &v411[8 * (v402 - v403)];
            bzero(v412, 40 * ((40 * v406 - 40) / 0x28) + 40);
            if (v402 == v403)
            {
              v414 = vdupq_n_s64((unint64_t)v402);
            }
            else
            {
              do
              {
                v413 = *(_OWORD *)(v402 - 5);
                *((_QWORD *)v412 - 3) = *(v402 - 3);
                *(_OWORD *)(v412 - 40) = v413;
                *(v402 - 4) = 0;
                *(v402 - 3) = 0;
                *(v402 - 5) = 0;
                *((_OWORD *)v412 - 1) = *((_OWORD *)v402 - 1);
                v412 -= 40;
                v402 -= 5;
              }
              while (v402 != v403);
              v414 = *v448;
              v407 = *v410;
            }
            v415 = &v411[40 * v405];
            v2 = v449;
            v449[55] = v412;
            v449[56] = v415;
            *(int64x2_t *)&__p[1] = v414;
            v449[57] = &v411[8 * v440];
            __p[3] = v407;
            __p[0] = (void *)v414.i64[0];
            sub_1C51EF1D4((uint64_t)__p);
            v400 = v410;
            v3 = v438;
          }
          v403 = (void **)v448->i64[0];
          v401 = v442;
        }
        v416 = sub_1C51EE360(v3, (uint64_t)&v403[5 * v399]);
        (*(void (**)(uint64_t *, void **, double))(*v3 + 40))(v3, v465[0], v416);
      }
      ++v399;
    }
    while (v399 != v401);
  }
  (*(void (**)(uint64_t *))(*v3 + 48))(v3);
  (*(void (**)(uint64_t *, uint64_t))(*v3 + 128))(v3, v464);
LABEL_804:
  __p[0] = &v459;
  sub_1C51E9EC0((void ***)__p);
LABEL_805:
  v451[0] = 0;
  memset(__p, 0, sizeof(__p));
  sub_1C6207C50(v3, (uint64_t)(v2 + 58), (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1C51EDDA4(_QWORD *a1, _OWORD *a2)
{
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t mustQuote;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    DWORD2(v9) = 0;
    v13 = 0;
    v14 = 0;
    *(_QWORD *)&v9 = &unk_1E81A7208;
    v16 = v17;
    v15 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    llvm::yaml::ScalarTraits<llvm::StringRef,void>::output((uint64_t)a2, a1[1], (llvm::raw_ostream *)&v9);
    v4 = *((_BYTE *)v16 + 23);
    if (v4 >= 0)
      v5 = (char *)v16;
    else
      v5 = (char *)*v16;
    if (v4 >= 0)
      v6 = v4 & 0x7F;
    else
      v6 = (uint64_t)v16[1];
    v8[0] = v5;
    v8[1] = v6;
    mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v5, v6);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*a1 + 216))(a1, v8, mustQuote);
    *(_QWORD *)&v9 = off_1E81A6E70;
    if (v15 == 1 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  else
  {
    v9 = 0uLL;
    (*(void (**)(_QWORD *, __int128 *, uint64_t))(*a1 + 216))(a1, &v9, 1);
    *a2 = v9;
  }
}

uint64_t sub_1C51EDED8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  void *v11;
  char v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint8x8_t v24;
  int v25;
  char v26;
  uint64_t v27;
  _QWORD v28[2];
  void (**v29)(llvm::raw_ostream *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  void **v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v6 = a3[1];
    if (a2[1])
      v7 = v6 == 0;
    else
      v7 = 1;
    if (v7)
      v8 = (a2[1] == 0) ^ (v6 != 0);
    else
      v8 = *a2 == *a3;
  }
  else
  {
    v8 = 0;
  }
  v27 = 0;
  v26 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "alignment", 0, v8, &v26, &v27);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      LODWORD(v30) = 0;
      v34 = 0;
      v35 = 0;
      v29 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      v37 = (void **)&v38;
      v36 = 0;
      v32 = 0;
      v33 = 0;
      if (a2[1])
        v10 = 1 << *a2;
      else
        v10 = 0;
      v31 = 0;
      sub_1C5E21910((llvm::raw_ostream *)&v29, v10, 0, 0, 0);
      v11 = v37;
      v12 = *((_BYTE *)v37 + 23);
      v13 = v12 < 0;
      if (v12 < 0)
        v11 = *v37;
      v14 = (void *)(v12 & 0x7F);
      if (v13)
        v14 = v37[1];
      v28[0] = v11;
      v28[1] = v14;
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v28, 0);
      v29 = off_1E81A6E70;
      if (v36 == 1 && v31)
        MEMORY[0x1CAA32F9C](v31, 0x1000C8077774924);
      if (SHIBYTE(v40) < 0)
        operator delete(v38);
    }
    else
    {
      v38 = 0;
      v39 = 0;
      (*(void (**)(uint64_t, unsigned __int8 **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v38, 0);
      v15 = v39;
      if (v39)
      {
        v16 = 0;
        v17 = v38;
        v18 = 14;
        v19 = "invalid number";
        while (1)
        {
          v20 = *v17;
          if ((v20 - 48) >= 0xA)
          {
            if ((v20 - 97) >= 0x1A)
            {
              if ((v20 - 65) > 0x19)
                break;
              v21 = -55;
            }
            else
            {
              v21 = -87;
            }
          }
          else
          {
            v21 = -48;
          }
          v22 = v21 + v20;
          if (v22 > 9)
            break;
          v23 = 10 * v16 + v22;
          if (v16 > v23 / 0xA)
            break;
          ++v17;
          v16 = v23;
          if (!--v15)
          {
            if (v23)
            {
              v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
              v24.i16[0] = vaddlv_u8(v24);
              if (v24.u32[0] > 1uLL)
              {
                v19 = "must be 0 or a power of two";
                v18 = 27;
                break;
              }
            }
            v25 = __clz(v23) ^ 0x3F | 0x100;
            if (!v23)
              LOWORD(v25) = 0;
            *(_WORD *)a2 = v25;
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v27);
          }
        }
      }
      else
      {
        v19 = "invalid number";
        v18 = 14;
      }
      LOWORD(v33) = 261;
      v29 = (void (**)(llvm::raw_ostream *__hidden))v19;
      v30 = v18;
      (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a1 + 248))(a1, &v29);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v27);
  }
  else if (v26)
  {
    *(_WORD *)a2 = *(_WORD *)a3;
  }
  return result;
}

void sub_1C51EE1E4(_QWORD *a1, unsigned int *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD v15[2];
  void (**v16)(llvm::raw_ostream *__hidden);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    LODWORD(v17) = 0;
    v21 = 0;
    v22 = 0;
    v16 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v24 = &v25;
    v23 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    sub_1C5E21910((llvm::raw_ostream *)&v16, *a2, 0, 0, 0);
    v4 = v24;
    v5 = *((_BYTE *)v24 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v24;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v24[1];
    v15[0] = v4;
    v15[1] = v7;
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 216))(a1, v15, 0);
    v16 = off_1E81A6E70;
    if (v23 == 1 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
    if (SHIBYTE(v27) < 0)
      operator delete(v25);
  }
  else
  {
    v25 = 0;
    v26 = 0;
    (*(void (**)(_QWORD *, void **, _QWORD))(*a1 + 216))(a1, &v25, 0);
    v8 = (unsigned __int8 *)v25;
    v9 = v26;
    v10 = a1[1];
    v11 = *(_QWORD *)(v10 + 296);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        *(_OWORD *)(a2 + 2) = *(_OWORD *)(v12 + 16);
    }
    v13 = llvm::yaml::ScalarTraits<unsigned int,void>::input(v8, v9, v10, a2);
    if (v14)
    {
      LOWORD(v20) = 261;
      v16 = (void (**)(llvm::raw_ostream *__hidden))v13;
      v17 = v14;
      (*(void (**)(_QWORD *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v16);
    }
  }
}

double sub_1C51EE360(uint64_t *a1, uint64_t a2)
{
  char v4;
  BOOL v5;
  const char *v6;
  size_t v7;
  size_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t mustQuote;
  double result;
  _QWORD v14[2];
  void (**v15)(llvm::raw_ostream *__hidden);
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *v24[2];
  uint64_t v25;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v24[0] = 0;
    v24[1] = 0;
    v25 = 0;
    LODWORD(v16) = 0;
    v20 = 0;
    v21 = 0;
    v15 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v23 = v24;
    v22 = 0;
    v18 = 0;
    v19 = 0;
    v4 = *(_BYTE *)(a2 + 23);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = (const char *)a2;
    else
      v6 = *(const char **)a2;
    v7 = v4 & 0x7F;
    if (v5)
      v8 = *(_QWORD *)(a2 + 8);
    else
      v8 = v7;
    v17 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v15, v6, v8);
    v9 = *((_BYTE *)v23 + 23);
    if (v9 >= 0)
      v10 = (char *)v23;
    else
      v10 = (char *)*v23;
    if (v9 >= 0)
      v11 = v9 & 0x7F;
    else
      v11 = (uint64_t)v23[1];
    v14[0] = v10;
    v14[1] = v11;
    mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v10, v11);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 216))(a1, v14, mustQuote);
    v15 = off_1E81A6E70;
    if (v22 == 1 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden), uint64_t))(*a1 + 216))(a1, &v15, 1);
    *(_QWORD *)&result = sub_1C51EE4B0(v15, v16, a1[1], a2).n128_u64[0];
  }
  return result;
}

__n128 sub_1C51EE4B0(void *__src, size_t __len, uint64_t a3, uint64_t a4)
{
  __int128 *p_dst;
  size_t v9;
  size_t v10;
  __n128 result;
  uint64_t v12;
  __n128 *v13;
  __int128 __dst;
  unint64_t v15;

  if (!__src)
  {
    __dst = 0uLL;
    v15 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v15 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v15) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  result.n128_u64[0] = __dst;
  *(_OWORD *)a4 = __dst;
  *(_QWORD *)(a4 + 16) = v15;
  v12 = *(_QWORD *)(a3 + 296);
  if (v12)
  {
    v13 = *(__n128 **)(v12 + 8);
    if (v13)
    {
      result = v13[1];
      *(__n128 *)(a4 + 24) = result;
    }
  }
  return result;
}

void sub_1C51EE5A4(char **a1, unint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;

  v5 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (0x4EC4EC4EC4EC4EC5 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      bzero(a1[1], 104 * ((104 * a2 - 104) / 0x68) + 104);
      v5 += 13 * a2;
    }
    a1[1] = (char *)v5;
  }
  else
  {
    v6 = (void **)*a1;
    v7 = 0x4EC4EC4EC4EC4EC5 * (((char *)v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x276276276276276)
      abort();
    v9 = 0x4EC4EC4EC4EC4EC5 * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x13B13B13B13B13BLL)
      v10 = 0x276276276276276;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x276276276276276)
        sub_1C4764EE4();
      v11 = (char *)operator new(104 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[104 * v7];
    v13 = &v11[104 * v10];
    v14 = 104 * a2;
    bzero(v12, 104 * ((v14 - 104) / 0x68uLL) + 104);
    v15 = &v12[v14];
    if (v5 == v6)
    {
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 13);
        *((_QWORD *)v12 - 11) = *(v5 - 11);
        *(_OWORD *)(v12 - 104) = v16;
        v17 = *((_OWORD *)v5 - 5);
        *((_QWORD *)v12 - 8) = *(v5 - 8);
        *((_OWORD *)v12 - 5) = v17;
        *(v5 - 9) = 0;
        *(v5 - 8) = 0;
        *(v5 - 10) = 0;
        *(_OWORD *)(v12 - 56) = *(_OWORD *)(v5 - 7);
        v18 = *(_OWORD *)(v5 - 5);
        *((_QWORD *)v12 - 3) = *(v5 - 3);
        *(_OWORD *)(v12 - 40) = v18;
        *(v5 - 4) = 0;
        *(v5 - 3) = 0;
        *(v5 - 5) = 0;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 104;
        v5 -= 13;
      }
      while (v5 != v6);
      v5 = (void **)*a1;
      v19 = (void **)a1[1];
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v13;
      while (v19 != v5)
      {
        if (*((char *)v19 - 17) < 0)
          operator delete(*(v19 - 5));
        if (*((char *)v19 - 57) < 0)
          operator delete(*(v19 - 10));
        v19 -= 13;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C51EE7D0(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      std::string::operator=((std::string *)(a3 + 24), (const std::string *)v5 + 1);
      *(_OWORD *)(a3 + 48) = v5[3];
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v5 + 4));
      *(_OWORD *)(a3 + 88) = *(__int128 *)((char *)v5 + 88);
      a3 += 104;
      v5 = (__int128 *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1C51EE850(void ***a1, unint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v4 - (char *)v5) >> 4) >= a2)
  {
    if (a2)
    {
      bzero(a1[1], 80 * ((80 * a2 - 80) / 0x50) + 80);
      v5 += 10 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (char *)*a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v4 - (char *)v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x333333333333333)
        sub_1C4764EE4();
      v11 = (char *)operator new(80 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[80 * v7];
    v13 = &v11[80 * v10];
    v14 = 5 * a2;
    bzero(v12, 80 * ((16 * v14 - 80) / 0x50uLL) + 80);
    v15 = &v12[16 * v14];
    if (v5 == v6)
    {
      *a1 = (void **)v12;
      a1[1] = (void **)v15;
      a1[2] = (void **)v13;
    }
    else
    {
      do
      {
        v16 = *((_OWORD *)v5 - 5);
        *((_QWORD *)v12 - 8) = *(v5 - 8);
        *((_OWORD *)v12 - 5) = v16;
        *(v5 - 9) = 0;
        *(v5 - 8) = 0;
        *(v5 - 10) = 0;
        *(_OWORD *)(v12 - 56) = *(_OWORD *)(v5 - 7);
        v17 = *(_OWORD *)(v5 - 5);
        *((_QWORD *)v12 - 3) = *(v5 - 3);
        *(_OWORD *)(v12 - 40) = v17;
        *(v5 - 4) = 0;
        *(v5 - 3) = 0;
        *(v5 - 5) = 0;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 80;
        v5 -= 10;
      }
      while (v5 != v6);
      v5 = *a1;
      v18 = a1[1];
      *a1 = (void **)v12;
      a1[1] = (void **)v15;
      a1[2] = (void **)v13;
      while (v18 != v5)
      {
        if (*((char *)v18 - 17) < 0)
          operator delete(*(v18 - 5));
        if (*((char *)v18 - 57) < 0)
          operator delete(*(v18 - 10));
        v18 -= 10;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

std::string *sub_1C51EEA5C(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 40), (std::string *)((char *)v5 + 40));
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[2].__r_.__value_.__r.__words[2];
      this = (std::string *)((char *)this + 80);
      v5 = (std::string *)((char *)v5 + 80);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_1C51EEACC(uint64_t *a1, int64x2_t *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char v20;
  BOOL v21;
  const char *v22;
  size_t v23;
  size_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t mustQuote;
  __n128 v29;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  _QWORD v36[2];
  void (**v37)(llvm::raw_ostream *__hidden);
  int64x2_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  int v43;
  void **v44;
  void *v45[2];
  uint64_t v46;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    v4 = -858993459 * ((unint64_t)(a2->i64[1] - a2->i64[0]) >> 3);
  if (v4)
  {
    v5 = 0;
    v6 = v4;
    v34 = a2 + 1;
    v33 = v4;
    v32 = a2;
    do
    {
      v35 = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 72))(a1, v5, &v35))
      {
        v8 = (char *)a2->i64[0];
        v7 = (char *)a2->i64[1];
        v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-a2->i64[0]] >> 3);
        if (v9 <= v5)
        {
          v10 = v5 + 1;
          v11 = v5 + 1 - v9;
          v12 = v34->i64[0];
          if (0xCCCCCCCCCCCCCCCDLL * ((v34->i64[0] - (uint64_t)v7) >> 3) >= v11)
          {
            bzero(v7, 40 * ((40 * v11 - 40) / 0x28) + 40);
            a2 = v32;
            v32->i64[1] = (uint64_t)&v7[40 * v11];
          }
          else
          {
            v13 = 0x999999999999999ALL * ((v12 - (uint64_t)v8) >> 3);
            if (v13 <= v10)
              v13 = v5 + 1;
            if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 3) >= 0x333333333333333)
              v14 = 0x666666666666666;
            else
              v14 = v13;
            v40 = (uint64_t *)v34;
            if (v14 > 0x666666666666666)
              sub_1C4764EE4();
            v31 = 5 * v14;
            v15 = (char *)operator new(40 * v14);
            v16 = &v15[40 * v9];
            bzero(v16, 40 * ((40 * v11 - 40) / 0x28) + 40);
            if (v7 == v8)
            {
              v18 = vdupq_n_s64((unint64_t)v7);
              a2 = v32;
            }
            else
            {
              a2 = v32;
              do
              {
                v17 = *(_OWORD *)(v7 - 40);
                *((_QWORD *)v16 - 3) = *((_QWORD *)v7 - 3);
                *(_OWORD *)(v16 - 40) = v17;
                *((_QWORD *)v7 - 4) = 0;
                *((_QWORD *)v7 - 3) = 0;
                *((_QWORD *)v7 - 5) = 0;
                *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
                v16 -= 40;
                v7 -= 40;
              }
              while (v7 != v8);
              v18 = *v32;
              v12 = v32[1].i64[0];
            }
            a2->i64[0] = (uint64_t)v16;
            a2->i64[1] = (uint64_t)&v15[40 * v10];
            v38 = v18;
            a2[1].i64[0] = (uint64_t)&v15[8 * v31];
            v39 = v12;
            v37 = (void (**)(llvm::raw_ostream *__hidden))v18.i64[0];
            sub_1C51EF1D4((uint64_t)&v37);
          }
          v8 = (char *)a2->i64[0];
          v6 = v33;
        }
        v19 = &v8[40 * v5];
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
        {
          v45[0] = 0;
          v45[1] = 0;
          v46 = 0;
          v38.i32[0] = 0;
          v41 = 0;
          v42 = 0;
          v37 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
          v44 = v45;
          v43 = 0;
          v39 = 0;
          v40 = 0;
          v38.i64[1] = 0;
          v20 = v19[23];
          v21 = v20 < 0;
          if (v20 >= 0)
            v22 = &v8[40 * v5];
          else
            v22 = *(const char **)v19;
          v23 = v20 & 0x7F;
          if (v21)
            v24 = *((_QWORD *)v19 + 1);
          else
            v24 = v23;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v37, v22, v24);
          v25 = *((_BYTE *)v44 + 23);
          if (v25 >= 0)
            v26 = (char *)v44;
          else
            v26 = (char *)*v44;
          if (v25 >= 0)
            v27 = v25 & 0x7F;
          else
            v27 = (uint64_t)v44[1];
          v36[0] = v26;
          v36[1] = v27;
          mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v26, v27);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 216))(a1, v36, mustQuote);
          v37 = off_1E81A6E70;
          if (v43 == 1 && v38.i64[1])
            MEMORY[0x1CAA32F9C](v38.i64[1], 0x1000C8077774924);
          if (SHIBYTE(v46) < 0)
            operator delete(v45[0]);
        }
        else
        {
          v37 = 0;
          v38.i64[0] = 0;
          (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden), uint64_t))(*a1 + 216))(a1, &v37, 1);
          v29 = sub_1C51EE4B0(v37, v38.u64[0], a1[1], (uint64_t)&v8[40 * v5]);
        }
        (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 80))(a1, v35, v29);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
}

void sub_1C51EEEA8(void **a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  void **v17;
  std::string *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  void **v24;

  v6 = __str;
  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    v17 = (void **)a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * (v17 - v9) >= a4)
    {
      if (__str == a3)
      {
        v24 = (void **)*a1;
      }
      else
      {
        v24 = (void **)*a1;
        do
        {
          std::string::operator=((std::string *)v9, v6);
          *(_OWORD *)(v9 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v24 += 5;
          v6 = (std::string *)((char *)v6 + 40);
          v9 += 5;
        }
        while (v6 != a3);
        v17 = (void **)a1[1];
      }
      while (v17 != v24)
      {
        if (*((char *)v17 - 17) < 0)
          operator delete(*(v17 - 5));
        v17 -= 5;
      }
      a1[1] = v24;
    }
    else
    {
      v18 = (std::string *)((char *)__str + 8 * (v17 - v9));
      if (v17 != v9)
      {
        do
        {
          std::string::operator=((std::string *)v9, v6);
          *(_OWORD *)(v9 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v6 = (std::string *)((char *)v6 + 40);
          v9 += 5;
        }
        while (v6 != v18);
        v9 = (void **)a1[1];
      }
      v19 = (char *)v9;
      if (v18 != a3)
      {
        v20 = 0;
        do
        {
          v21 = (char *)&v9[v20];
          v22 = (char *)v18 + v20 * 8;
          if (SHIBYTE(v18->__r_.__value_.__r.__words[v20 + 2]) < 0)
          {
            sub_1C47EBC30(v21, *(void **)v22, *((_QWORD *)v22 + 1));
          }
          else
          {
            v23 = *(_OWORD *)v22;
            *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
            *(_OWORD *)v21 = v23;
          }
          *(_OWORD *)&v9[v20 + 3] = *(_OWORD *)((char *)&v18[1].__r_.__value_.__l.__data_ + v20 * 8);
          v20 += 5;
        }
        while ((std::string *)((char *)v18 + v20 * 8) != a3);
        v19 = (char *)&v9[v20];
      }
      a1[1] = v19;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 17) < 0)
            operator delete(*(v10 - 5));
          v10 -= 5;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_45;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x333333333333333 ? 0x666666666666666 : v13;
    if (v14 > 0x666666666666666)
LABEL_45:
      abort();
    v15 = 5 * v14;
    v16 = (char *)operator new(40 * v14);
    *a1 = v16;
    a1[1] = v16;
    a1[2] = &v16[8 * v15];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1C47EBC30(v16, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        *((_QWORD *)v16 + 2) = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v16 + 24) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
      v6 = (std::string *)((char *)v6 + 40);
      v16 += 40;
    }
    a1[1] = v16;
  }
}

_QWORD *sub_1C51EF120(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      abort();
    v6 = result;
    v7 = 5 * a4;
    result = operator new(40 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_1C47EBC30(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a2 + 24);
      a2 += 40;
      v8 += 5;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C51EF1D4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C51EF234(uint64_t *a1, uint64_t a2)
{
  void *__p[2];
  __int128 v5;
  uint64_t v6;
  char v7;

  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"isFrameAddressTaken", (_BYTE *)a2, &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"isReturnAddressTaken", (_BYTE *)(a2 + 1), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasStackMap", (_BYTE *)(a2 + 2), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasPatchPoint", (_BYTE *)(a2 + 3), &v7, 0);
  __p[0] = 0;
  sub_1C62064B8((uint64_t)a1, (uint64_t)"stackSize", (unint64_t *)(a2 + 8), (unint64_t *)__p);
  LODWORD(__p[0]) = 0;
  sub_1C6206580(a1, (uint64_t *)(a2 + 16), __p);
  LODWORD(__p[0]) = 0;
  sub_1C6206640(a1, (uint64_t)"maxAlignment", (_DWORD *)(a2 + 20), __p, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"adjustsStack", (_BYTE *)(a2 + 24), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasCalls", (_BYTE *)(a2 + 25), &v7, 0);
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  sub_1C6205F04(a1, (uint64_t)"stackProtector", a2 + 32, (uint64_t)__p);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = -1;
  sub_1C6206640(a1, (uint64_t)"maxCallFrameSize", (_DWORD *)(a2 + 72), __p, 0);
  LODWORD(__p[0]) = 0;
  sub_1C6206640(a1, (uint64_t)"cvBytesOfCalleeSavedRegisters", (_DWORD *)(a2 + 76), __p, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasOpaqueSPAdjustment", (_BYTE *)(a2 + 80), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasVAStart", (_BYTE *)(a2 + 81), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasMustTailInVarArgFunc", (_BYTE *)(a2 + 82), &v7, 0);
  v7 = 0;
  sub_1C6205D50((uint64_t)a1, (uint64_t)"hasTailCall", (_BYTE *)(a2 + 83), &v7, 0);
  LODWORD(__p[0]) = 0;
  sub_1C6206640(a1, (uint64_t)"localFrameSize", (_DWORD *)(a2 + 84), __p, 0);
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  sub_1C6205F04(a1, (uint64_t)"savePoint", a2 + 88, (uint64_t)__p);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  sub_1C6205F04(a1, (uint64_t)"restorePoint", a2 + 128, (uint64_t)__p);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
}

void sub_1C51EF528(uint64_t a1, unint64_t *a2)
{
  __int128 *v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *i;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v25 = 0uLL;
    v26 = 0;
    DWORD2(v17) = 0;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)&v17 = &unk_1E81A7208;
    v24 = &v25;
    v23 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    sub_1C5E21910((llvm::raw_ostream *)&v17, *a2, 0, 0, 0);
    v4 = v24;
    v5 = *((_BYTE *)v24 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *(__int128 **)v24;
    v7 = v5 & 0x7F;
    if (v6)
      v7 = *((_QWORD *)v24 + 1);
    v16[0] = v4;
    v16[1] = v7;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v16, 0);
    *(_QWORD *)&v17 = off_1E81A6E70;
    if (v23 == 1 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
  else
  {
    v25 = 0uLL;
    (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v25, 0);
    v17 = v25;
    v8 = sub_1C5E3D4C0((uint64_t)&v17);
    v9 = *((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v10 = 0;
      for (i = (unsigned __int8 *)v17; ; ++i)
      {
        v12 = *i;
        if ((v12 - 48) >= 0xA)
        {
          if ((v12 - 97) >= 0x1A)
          {
            if ((v12 - 65) > 0x19)
              break;
            v13 = -55;
          }
          else
          {
            v13 = -87;
          }
        }
        else
        {
          v13 = -48;
        }
        v14 = v13 + v12;
        if (v14 >= v8)
          break;
        v15 = v10 * v8 + v14;
        if (v15 / v8 < v10)
          break;
        v10 = v15;
        if (!--v9)
        {
          *a2 = v15;
          return;
        }
      }
    }
    LOWORD(v20) = 261;
    *(_QWORD *)&v17 = "invalid number";
    *((_QWORD *)&v17 + 1) = 14;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 248))(a1, &v17);
  }
}

void sub_1C51EF720(uint64_t a1, unint64_t *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  _QWORD v8[2];
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    LODWORD(v10) = 0;
    v14 = 0;
    v15 = 0;
    v9 = (const char *)&unk_1E81A7208;
    v17 = &v18;
    v16 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, *a2);
    v4 = v17;
    v5 = *((_BYTE *)v17 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v17;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v17[1];
    v8[0] = v4;
    v8[1] = v7;
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v8, 0);
    v9 = (const char *)off_1E81A6E70;
    if (v16 == 1 && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v18, 0);
    v9 = 0;
    if ((llvm::getAsSignedInteger((uint64_t)v18, v19, 0, (unint64_t *)&v9) & 1) != 0)
    {
      LOWORD(v13) = 261;
      v9 = "invalid number";
      v10 = 14;
      (*(void (**)(uint64_t, const char **))(*(_QWORD *)a1 + 248))(a1, &v9);
    }
    else
    {
      *a2 = (unint64_t)v9;
    }
  }
}

void sub_1C51EF894(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void **v17;
  void **v18;

  v4 = a1[1];
  v5 = a1[2];
  if (0x34F72C234F72C235 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 232 * a2;
      do
      {
        *(_OWORD *)(v4 + 64) = 0uLL;
        *(_OWORD *)(v4 + 80) = 0uLL;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(_OWORD *)(v4 + 96) = 0uLL;
        *(_OWORD *)(v4 + 112) = 0uLL;
        *(_BYTE *)(v4 + 104) = 1;
        *(_OWORD *)(v4 + 128) = 0uLL;
        *(_OWORD *)(v4 + 144) = 0uLL;
        *(_OWORD *)(v4 + 160) = 0uLL;
        *(_OWORD *)(v4 + 176) = 0uLL;
        *(_OWORD *)(v4 + 192) = 0uLL;
        *(_OWORD *)(v4 + 208) = 0uLL;
        *(_QWORD *)(v4 + 224) = 0;
        v4 += 232;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x34F72C234F72C235 * ((v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x11A7B9611A7B961)
      abort();
    v8 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x8D3DCB08D3DCB0)
      v9 = 0x11A7B9611A7B961;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x11A7B9611A7B961)
        sub_1C4764EE4();
      v10 = (char *)operator new(232 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = (uint64_t)&v10[232 * v6];
    v13 = v12 + 232 * a2;
    v14 = v12;
    do
    {
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_BYTE *)(v14 + 104) = 1;
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(_OWORD *)(v14 + 176) = 0uLL;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(_OWORD *)(v14 + 208) = 0uLL;
      *(_QWORD *)(v14 + 224) = 0;
      v14 += 232;
    }
    while (v14 != v13);
    v15 = &v10[232 * v9];
    v16 = sub_1C51EFA9C(a1[1], a1[1], *a1, *a1, v12, v12);
    v17 = (void **)*a1;
    v18 = (void **)a1[1];
    *a1 = v16;
    a1[1] = v13;
    a1[2] = (uint64_t)v15;
    while (v18 != v17)
    {
      if (*((char *)v18 - 17) < 0)
        operator delete(*(v18 - 5));
      if (*((char *)v18 - 57) < 0)
        operator delete(*(v18 - 10));
      if (*((char *)v18 - 97) < 0)
        operator delete(*(v18 - 15));
      if (*((char *)v18 - 145) < 0)
        operator delete(*(v18 - 21));
      v18 -= 29;
    }
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_1C51EFA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  result = a6;
  if (a2 != a4)
  {
    v7 = a6 - 96;
    do
    {
      v8 = *(_OWORD *)(a2 - 232);
      v9 = *(_OWORD *)(a2 - 216);
      v10 = *(_OWORD *)(a2 - 200);
      *(_OWORD *)(v7 - 94) = *(_OWORD *)(a2 - 190);
      *(_OWORD *)(v7 - 104) = v10;
      *(_OWORD *)(v7 - 120) = v9;
      *(_OWORD *)(v7 - 136) = v8;
      v11 = *(_OWORD *)(a2 - 168);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a2 - 152);
      *(_OWORD *)(v7 - 72) = v11;
      *(_QWORD *)(a2 - 160) = 0;
      *(_QWORD *)(a2 - 152) = 0;
      *(_QWORD *)(a2 - 168) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a2 - 144);
      *(_BYTE *)(v7 - 32) = *(_BYTE *)(a2 - 128);
      v12 = *(_OWORD *)(a2 - 120);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a2 - 104);
      *(_OWORD *)(v7 - 24) = v12;
      *(_QWORD *)(a2 - 112) = 0;
      *(_QWORD *)(a2 - 104) = 0;
      *(_QWORD *)(a2 - 120) = 0;
      *(_OWORD *)v7 = *(_OWORD *)(a2 - 96);
      v13 = *(_OWORD *)(a2 - 80);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 - 64);
      *(_OWORD *)(v7 + 16) = v13;
      *(_QWORD *)(a2 - 72) = 0;
      *(_QWORD *)(a2 - 64) = 0;
      *(_QWORD *)(a2 - 80) = 0;
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 - 56);
      v14 = *(_OWORD *)(a2 - 40);
      *(_QWORD *)(v7 + 72) = *(_QWORD *)(a2 - 24);
      *(_OWORD *)(v7 + 56) = v14;
      *(_QWORD *)(a2 - 40) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 - 16);
      result -= 232;
      v7 -= 232;
      a2 -= 232;
    }
    while (a2 != a4);
  }
  return result;
}

void sub_1C51EFB70(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  char *v20;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAF8AF8AF8AF8AF8BLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 280 * a2;
      do
      {
        *(_OWORD *)(v4 + 128) = 0uLL;
        *(_OWORD *)(v4 + 144) = 0uLL;
        *(_OWORD *)(v4 + 96) = 0uLL;
        *(_OWORD *)(v4 + 112) = 0uLL;
        *(_OWORD *)(v4 + 64) = 0uLL;
        *(_OWORD *)(v4 + 80) = 0uLL;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(_BYTE *)(v4 + 136) = 1;
        *(_OWORD *)(v4 + 160) = 0uLL;
        *(_OWORD *)(v4 + 176) = 0uLL;
        *(_OWORD *)(v4 + 192) = 0uLL;
        *(_OWORD *)(v4 + 208) = 0uLL;
        *(_OWORD *)(v4 + 224) = 0uLL;
        *(_OWORD *)(v4 + 240) = 0uLL;
        *(_OWORD *)(v4 + 256) = 0uLL;
        *(_QWORD *)(v4 + 272) = 0;
        v4 += 280;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xEA0EA0EA0EA0EALL)
      abort();
    v8 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x75075075075075)
      v9 = 0xEA0EA0EA0EA0EALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xEA0EA0EA0EA0EALL)
        sub_1C4764EE4();
      v10 = (char *)operator new(280 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = (uint64_t)&v10[280 * v6];
    v13 = v12 + 280 * a2;
    v14 = v12;
    do
    {
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(_BYTE *)(v14 + 136) = 1;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(_OWORD *)(v14 + 176) = 0uLL;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(_OWORD *)(v14 + 208) = 0uLL;
      *(_OWORD *)(v14 + 224) = 0uLL;
      *(_OWORD *)(v14 + 240) = 0uLL;
      *(_OWORD *)(v14 + 256) = 0uLL;
      *(_QWORD *)(v14 + 272) = 0;
      v14 += 280;
    }
    while (v14 != v13);
    v15 = &v10[280 * v9];
    v16 = sub_1C51EFD98(a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, v12, v12);
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v16;
    a1[1] = v13;
    a1[2] = (uint64_t)v15;
    if (v17 != v18)
    {
      v19 = (void **)(v17 - 256);
      do
      {
        if (*((char *)v19 + 239) < 0)
          operator delete(v19[27]);
        if (*((char *)v19 + 199) < 0)
          operator delete(v19[22]);
        if (*((char *)v19 + 159) < 0)
          operator delete(v19[17]);
        if (*((char *)v19 + 95) < 0)
          operator delete(v19[9]);
        if (*((char *)v19 + 23) < 0)
          operator delete(*v19);
        v20 = (char *)(v19 - 3);
        v19 -= 35;
      }
      while (v20 != v18);
    }
    if (v18)
      operator delete(v18);
  }
}

uint64_t sub_1C51EFD98(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  result = a6;
  if (a2 != a4)
  {
    v7 = a6 - 120;
    v8 = (__int128 *)((char *)a2 - 120);
    do
    {
      v9 = v8 - 10;
      v10 = *(v8 - 10);
      *(_QWORD *)(v7 - 144) = *((_QWORD *)v8 - 18);
      *(_OWORD *)(v7 - 160) = v10;
      v11 = *(__int128 *)((char *)v8 - 136);
      *(_QWORD *)(v7 - 120) = *((_QWORD *)v8 - 15);
      *(_OWORD *)(v7 - 136) = v11;
      *((_QWORD *)v8 - 16) = 0;
      *((_QWORD *)v8 - 15) = 0;
      *((_QWORD *)v8 - 17) = 0;
      *(_OWORD *)(v7 - 112) = *(v8 - 7);
      v12 = *(v8 - 5);
      *(_OWORD *)(v7 - 96) = *(v8 - 6);
      *(_OWORD *)(v7 - 80) = v12;
      v13 = *(v8 - 4);
      *(_QWORD *)(v7 - 48) = *((_QWORD *)v8 - 6);
      *(_OWORD *)(v7 - 64) = v13;
      *((_QWORD *)v8 - 7) = 0;
      *((_QWORD *)v8 - 6) = 0;
      *((_QWORD *)v8 - 8) = 0;
      *(_OWORD *)(v7 - 40) = *(__int128 *)((char *)v8 - 40);
      v14 = *(__int128 *)((char *)v8 - 24);
      *(_QWORD *)(v7 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v7 - 24) = v14;
      v15 = *v8;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v7 = v15;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_OWORD *)(v7 + 24) = *(__int128 *)((char *)v8 + 24);
      v16 = *(__int128 *)((char *)v8 + 40);
      *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
      *(_OWORD *)(v7 + 40) = v16;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 7) = 0;
      *(_OWORD *)(v7 + 64) = v8[4];
      v17 = v8[5];
      *(_QWORD *)(v7 + 96) = *((_QWORD *)v8 + 12);
      *(_OWORD *)(v7 + 80) = v17;
      *((_QWORD *)v8 + 10) = 0;
      *((_QWORD *)v8 + 11) = 0;
      *((_QWORD *)v8 + 12) = 0;
      *(_OWORD *)(v7 + 104) = *(__int128 *)((char *)v8 + 104);
      result -= 280;
      v7 -= 280;
      v8 = (__int128 *)((char *)v8 - 280);
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t sub_1C51EFE90(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  v7 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v7;
  v8 = (_BYTE *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_1C47EBC30(v8, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v8 = v9;
  }
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  v10 = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_OWORD *)(a1 + 136) = v10;
  v11 = (_BYTE *)(a1 + 160);
  if (*((char *)a2 + 183) < 0)
  {
    sub_1C47EBC30(v11, *((void **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v12 = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)v11 = v12;
  }
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  v13 = (_BYTE *)(a1 + 200);
  if (*((char *)a2 + 223) < 0)
  {
    sub_1C47EBC30(v13, *((void **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)v13 = v14;
  }
  *(_OWORD *)(a1 + 224) = a2[14];
  v15 = (_BYTE *)(a1 + 240);
  if (*((char *)a2 + 263) < 0)
  {
    sub_1C47EBC30(v15, *((void **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    v16 = a2[15];
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
    *(_OWORD *)v15 = v16;
  }
  *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
  return a1;
}

void sub_1C51EFFE4(uint64_t *a1, int64x2_t *a2, std::string **a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  std::string *v10;
  signed __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  _BOOL4 v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int64x2_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  int64x2_t *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  uint64_t *v48;

  v43 = 0;
  v42 = 0;
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  v7 = 0;
  if (v6)
  {
    v9 = (unsigned __int8 *)a2->i64[0];
    v8 = (unsigned __int8 *)a2->i64[1];
    v10 = *a3;
    if (&v8[-a2->i64[0]] != (unsigned __int8 *)((char *)a3[1] - (char *)*a3))
    {
LABEL_24:
      v7 = 0;
      goto LABEL_25;
    }
    if (v9 != v8)
    {
      while (1)
      {
        v11 = v9[23];
        v12 = v11 & 0x7F;
        if (v11 >= 0)
          v13 = v11 & 0x7F;
        else
          v13 = *((_QWORD *)v9 + 1);
        v14 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        v15 = v14;
        size = v14 & 0x7F;
        if (v15 < 0)
          size = v10->__r_.__value_.__l.__size_;
        if (v13 != size)
          goto LABEL_24;
        if (v15 >= 0)
          v17 = v10;
        else
          v17 = (std::string *)v10->__r_.__value_.__r.__words[0];
        if ((v9[23] & 0x80) != 0)
        {
          v19 = memcmp(*(const void **)v9, v17, *((_QWORD *)v9 + 1)) == 0;
        }
        else
        {
          if ((v11 & 0x7F) != 0)
          {
            v18 = 0;
            while (v9[v18] == v17->__r_.__value_.__s.__data_[v18])
            {
              if (v12 == ++v18)
                goto LABEL_18;
            }
            goto LABEL_24;
          }
LABEL_18:
          v19 = 1;
        }
        v7 = 0;
        if (v19 && *((unsigned __int16 *)v9 + 20) == LOWORD(v10[1].__r_.__value_.__r.__words[2]))
        {
          v9 += 48;
          v10 += 2;
          v7 = 1;
          if (v9 != v8)
            continue;
        }
        goto LABEL_25;
      }
    }
    v7 = 1;
  }
LABEL_25:
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, "fwdArgRegs", 0, v7, &v42, &v43))
  {
    v20 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
      v20 = -1431655765 * ((unint64_t)(a2->i64[1] - a2->i64[0]) >> 4);
    if (v20)
    {
      v21 = 0;
      v22 = v20;
      v23 = a2 + 1;
      do
      {
        v44 = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v21, &v44))
        {
          v25 = (char *)a2->i64[0];
          v24 = (char *)a2->i64[1];
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v24[-a2->i64[0]] >> 4);
          if (v26 <= v21)
          {
            v27 = v21 + 1;
            v28 = v21 + 1 - v26;
            v29 = (uint64_t *)v23;
            v30 = v23->i64[0];
            v41 = (int64x2_t *)v29;
            if (0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v24) >> 4) >= v28)
            {
              bzero(v24, 48 * ((48 * v28 - 48) / 0x30) + 48);
              a2->i64[1] = (uint64_t)&v24[48 * v28];
            }
            else
            {
              v31 = 0x5555555555555556 * ((v30 - (uint64_t)v25) >> 4);
              if (v31 <= v27)
                v31 = v21 + 1;
              if (0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v25) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v32 = 0x555555555555555;
              else
                v32 = v31;
              v48 = v29;
              if (v32 > 0x555555555555555)
                sub_1C4764EE4();
              v40 = 3 * v32;
              v39 = (char *)operator new(48 * v32);
              v33 = &v39[48 * v26];
              bzero(v33, 48 * ((48 * v28 - 48) / 0x30) + 48);
              if (v24 == v25)
              {
                v34 = vdupq_n_s64((unint64_t)v24);
              }
              else
              {
                v35 = 0;
                do
                {
                  v36 = &v33[v35];
                  v37 = &v24[v35];
                  v38 = *(_OWORD *)&v24[v35 - 48];
                  *((_QWORD *)v36 - 4) = *(_QWORD *)&v24[v35 - 32];
                  *((_OWORD *)v36 - 3) = v38;
                  *((_QWORD *)v37 - 5) = 0;
                  *((_QWORD *)v37 - 4) = 0;
                  *((_QWORD *)v37 - 6) = 0;
                  *(_OWORD *)(v36 - 24) = *(_OWORD *)&v24[v35 - 24];
                  *((_WORD *)v36 - 4) = *(_WORD *)&v24[v35 - 8];
                  v35 -= 48;
                }
                while (&v24[v35] != v25);
                v34 = *a2;
                v30 = a2[1].i64[0];
                v33 += v35;
              }
              a2->i64[0] = (uint64_t)v33;
              a2->i64[1] = (uint64_t)&v39[48 * v27];
              v46 = v34;
              a2[1].i64[0] = (uint64_t)&v39[16 * v40];
              v47 = v30;
              v45 = v34.i64[0];
              sub_1C51F05A8((uint64_t)&v45);
            }
            v25 = (char *)a2->i64[0];
            v23 = v41;
          }
          (*(void (**)(uint64_t *))(*a1 + 144))(a1);
          sub_1C6207240(a1, &v25[48 * v21 + 40]);
          sub_1C6205E94(a1, (uint64_t)"reg", (uint64_t)&v25[48 * v21]);
          (*(void (**)(uint64_t *))(*a1 + 152))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v44);
        }
        ++v21;
      }
      while (v21 != v22);
    }
    (*(void (**)(uint64_t *))(*a1 + 48))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v43);
  }
  else if (a2 != (int64x2_t *)a3 && v42)
  {
    sub_1C51F0608((void **)a2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 4));
  }
}

void sub_1C51F0450(uint64_t *a1, _WORD *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, (unsigned __int16)*a2);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v8 = llvm::yaml::ScalarTraits<unsigned short,void>::input((unsigned __int8 *)v20, v21, a1[1], a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

uint64_t sub_1C51F05A8(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C51F0608(void **a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  char *v17;

  v6 = __str;
  v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) < a4)
  {
    sub_1C51F0864(a1);
    if (a4 > 0x555555555555555)
      goto LABEL_25;
    v9 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v9;
    if (v10 > 0x555555555555555)
LABEL_25:
      abort();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[16 * v11];
    v13 = a1;
    v14 = (uint64_t)v6;
LABEL_14:
    sub_1C51F07C4(v13, v14, (uint64_t)a3);
    return;
  }
  v15 = (char *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v8) >> 4) < a4)
  {
    v16 = (std::string *)((char *)__str + 16 * ((v15 - v8) >> 4));
    if (v15 != v8)
    {
      do
      {
        std::string::operator=((std::string *)v8, v6);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
        *((_WORD *)v8 + 20) = v6[1].__r_.__value_.__r.__words[2];
        v6 += 2;
        v8 += 48;
      }
      while (v6 != v16);
    }
    v13 = a1;
    v14 = (uint64_t)v16;
    goto LABEL_14;
  }
  if (__str == a3)
  {
    v17 = (char *)*a1;
  }
  else
  {
    v17 = (char *)*a1;
    do
    {
      std::string::operator=((std::string *)v8, v6);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
      *((_WORD *)v8 + 20) = v6[1].__r_.__value_.__r.__words[2];
      v17 += 48;
      v6 += 2;
      v8 += 48;
    }
    while (v6 != a3);
    v15 = (char *)a1[1];
  }
  while (v15 != v17)
  {
    if (*(v15 - 25) < 0)
      operator delete(*((void **)v15 - 6));
    v15 -= 48;
  }
  a1[1] = v17;
}

_QWORD *sub_1C51F07C4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(v4 + v7);
      v8 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        result = sub_1C47EBC30(result, *(void **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        result[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)result = v9;
      }
      v10 = v4 + v7;
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + v7 + 24);
      *(_WORD *)(v10 + 40) = *(_WORD *)(a2 + v7 + 40);
      v7 += 48;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_1C51F0864(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*(v3 - 6));
        v3 -= 6;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1C51F08D0(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  void **v21;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (char *)a1[1];
  if (a2 > (v5 - (uint64_t)v6) >> 5)
  {
    v8 = (uint64_t)&v6[-*a1];
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      abort();
    v10 = v5 - *a1;
    if (v10 >> 4 > v9)
      v9 = v10 >> 4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    v20 = v4;
    if (v11)
    {
      if (v11 >> 59)
        sub_1C4764EE4();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    __p = v12;
    v17 = &v12[32 * (v8 >> 5)];
    v19 = &v12[32 * v11];
    bzero(v17, 32 * a2);
    v18 = &v17[32 * a2];
    sub_1C6207360(a1, &__p);
    v14 = v17;
    v13 = v18;
    if (v18 != v17)
    {
      do
      {
        v15 = v13 - 32;
        v21 = (void **)(v13 - 24);
        sub_1C51EA488(&v21);
        v13 = v15;
      }
      while (v15 != v14);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    if (a2)
    {
      v7 = &v6[32 * a2];
      bzero(v6, 32 * a2);
      v6 = v7;
    }
    a1[1] = (uint64_t)v6;
  }
}

_QWORD *sub_1C51F09FC(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *v6;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      result = sub_1C51F0A80(v4 + 1, v6[1], v6[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[2] - v6[1]) >> 4));
      v4 += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

_QWORD *sub_1C51F0A80(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v6 = result;
    v7 = 3 * a4;
    v8 = (char *)operator new(48 * a4);
    *v6 = v8;
    v6[1] = v8;
    v6[2] = &v8[16 * v7];
    return sub_1C51F07C4(v6, a2, a3);
  }
  return result;
}

uint64_t sub_1C51F0AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      if (v5 != a3)
        sub_1C51F0608((void **)(a3 + 8), *(std::string **)(v5 + 8), *(std::string **)(v5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4));
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1C51F0B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C51F0BD4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int16 v10;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 24);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v4 = v7;
      result = (_QWORD *)(v4 + 24);
      if (*((char *)v6 + 23) < 0)
      {
        result = sub_1C47EBC30(result, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v6 + 2);
        *(_OWORD *)result = v8;
      }
      v9 = (uint64_t)v6 - 24;
      *(_OWORD *)(v4 + 48) = *(__int128 *)((char *)v6 + 24);
      v10 = *((_WORD *)v6 + 20);
      *(_BYTE *)(v4 + 66) = *((_BYTE *)v6 + 42);
      *(_WORD *)(v4 + 64) = v10;
      v4 += 72;
      v6 = (__int128 *)((char *)v6 + 72);
    }
    while (v9 + 72 != a3);
  }
  v3[1] = v4;
  return result;
}

void sub_1C51F0C78(uint64_t *a1, uint64_t *a2, __int128 **a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _BOOL8 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1)
    && (v6 = *a2, v7 = a2[1], v8 = *a3, v7 - *a2 == (char *)a3[1] - (char *)*a3))
  {
    if (v6 == v7)
    {
      v9 = 1;
    }
    else
    {
      do
      {
        v9 = sub_1C6207744(v6, (uint64_t)v8);
        if (!v9)
          break;
        v6 += 48;
        v8 += 3;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v9 = 0;
  }
  v16 = 0;
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _BOOL8, char *, uint64_t *))(*a1 + 120))(a1, "entries", 0, v9, &v15, &v16))
  {
    v10 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
      v10 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 4);
    if (v10)
    {
      v11 = 0;
      v12 = v10;
      do
      {
        v17 = 0;
        if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v11, &v17))
        {
          v13 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) <= v11)
          {
            sub_1C6207AA0(a2, v11 + 1);
            v13 = *a2;
          }
          v14 = v13 + 48 * v11;
          (*(void (**)(uint64_t *))(*a1 + 104))(a1);
          sub_1C6207A4C(a1, v14);
          (*(void (**)(uint64_t *))(*a1 + 112))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v17);
        }
        ++v11;
      }
      while (v11 != v12);
    }
    (*(void (**)(uint64_t *))(*a1 + 48))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v16);
  }
  else if (a2 != (uint64_t *)a3 && v15)
  {
    sub_1C51F11D8((uint64_t)a2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  }
}

void sub_1C51F0EA0(uint64_t *a1, int64x2_t *a2, std::string **a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = 0;
  v19 = 0;
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  v7 = 0;
  if (v6)
  {
    v9 = a2->i64[0];
    v8 = a2->i64[1];
    v10 = *a3;
    if (v8 - a2->i64[0] != (char *)a3[1] - (char *)*a3)
    {
LABEL_22:
      v7 = 0;
      goto LABEL_24;
    }
    if (v9 != v8)
    {
      while (1)
      {
        v11 = *(_BYTE *)(v9 + 23);
        v12 = v11 & 0x7F;
        if (v11 >= 0)
          v13 = v11 & 0x7F;
        else
          v13 = *(_QWORD *)(v9 + 8);
        v14 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        v15 = v14;
        size = v14 & 0x7F;
        if (v15 < 0)
          size = v10->__r_.__value_.__l.__size_;
        if (v13 != size)
          goto LABEL_22;
        if (v15 >= 0)
          v17 = v10;
        else
          v17 = (std::string *)v10->__r_.__value_.__r.__words[0];
        if ((*(_BYTE *)(v9 + 23) & 0x80) != 0)
        {
          if (memcmp(*(const void **)v9, v17, *(_QWORD *)(v9 + 8)))
            goto LABEL_22;
        }
        else if ((v11 & 0x7F) != 0)
        {
          v18 = 0;
          while (*(unsigned __int8 *)(v9 + v18) == v17->__r_.__value_.__s.__data_[v18])
          {
            if (v12 == ++v18)
              goto LABEL_20;
          }
          goto LABEL_22;
        }
LABEL_20:
        v9 += 40;
        v10 = (std::string *)((char *)v10 + 40);
        v7 = 1;
        if (v9 == v8)
          goto LABEL_24;
      }
    }
    v7 = 1;
  }
LABEL_24:
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, "blocks", 0, v7, &v19, &v20))
  {
    sub_1C51EEACC(a1, a2);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v20);
  }
  else if (a2 != (int64x2_t *)a3)
  {
    if (v19)
      sub_1C51EEEA8((void **)a2, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 3));
  }
}

void sub_1C51F1034(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  void **v22;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (char *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 4) < a2)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v21 = v4;
    if (v11)
    {
      if (v11 > 0x555555555555555)
        sub_1C4764EE4();
      v12 = (char *)operator new(48 * v11);
    }
    else
    {
      v12 = 0;
    }
    __p = v12;
    v18 = &v12[48 * v8];
    v20 = &v12[48 * v11];
    v13 = 3 * a2;
    bzero(v18, 48 * ((16 * v13 - 48) / 0x30uLL) + 48);
    v19 = &v18[16 * v13];
    sub_1C6207B40(a1, &__p);
    v15 = v18;
    v14 = v19;
    if (v19 != v18)
    {
      do
      {
        v16 = v14 - 48;
        v22 = (void **)(v14 - 24);
        sub_1C51E9EC0(&v22);
        v14 = v16;
      }
      while (v16 != v15);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    if (a2)
    {
      v7 = &v6[48 * a2];
      bzero(v6, 48 * ((48 * a2 - 48) / 0x30) + 48);
      v6 = v7;
    }
    a1[1] = (uint64_t)v6;
  }
}

void sub_1C51F11D8(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  void *v8;
  __int128 *v9;
  _QWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  void **v19;

  v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_1C6207BD8((void **)a1);
    if (a4 > 0x555555555555555)
      goto LABEL_16;
    v15 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v15 <= a4)
      v15 = a4;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v15;
    if (v16 > 0x555555555555555)
LABEL_16:
      abort();
    v17 = 3 * v16;
    v18 = (char *)operator new(48 * v16);
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = &v18[16 * v17];
    v10 = (_QWORD *)a1;
    v11 = a2;
    goto LABEL_4;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4) < a4)
  {
    v9 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4];
    sub_1C51F13D8(a2, v9, (uint64_t)v8);
    v10 = (_QWORD *)a1;
    v11 = v9;
LABEL_4:
    sub_1C51F134C(v10, v11, a3);
    return;
  }
  v12 = sub_1C51F13D8(a2, a3, (uint64_t)v8);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 != v12)
  {
    do
    {
      v14 = v13 - 48;
      v19 = (void **)(v13 - 24);
      sub_1C51E9EC0(&v19);
      v13 = v14;
    }
    while (v14 != v12);
  }
  *(_QWORD *)(a1 + 8) = v12;
}

_QWORD *sub_1C51F134C(_QWORD *result, __int128 *a2, __int128 *a3)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v6;
  __int128 v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      result = sub_1C51EF120((_QWORD *)(v4 + 24), *((_QWORD *)v6 + 3), *((_QWORD *)v6 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 3));
      v4 += 48;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

uint64_t sub_1C51F13D8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      if (v5 != (__int128 *)a3)
        sub_1C51EEEA8((void **)(a3 + 24), *((std::string **)v5 + 3), *((std::string **)v5 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v5 + 4) - *((_QWORD *)v5 + 3)) >> 3));
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

double sub_1C51F1458(uint64_t *a1, uint64_t a2)
{
  char v4;
  BOOL v5;
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  char v10;
  BOOL v11;
  void *v12;
  double result;
  _QWORD v14[2];
  void (**v15)(llvm::raw_ostream *__hidden);
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *v24[2];
  uint64_t v25;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v24[0] = 0;
    v24[1] = 0;
    v25 = 0;
    LODWORD(v16) = 0;
    v20 = 0;
    v21 = 0;
    v15 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v23 = v24;
    v22 = 0;
    v18 = 0;
    v19 = 0;
    v4 = *(_BYTE *)(a2 + 23);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = (const char *)a2;
    else
      v6 = *(const char **)a2;
    v7 = v4 & 0x7F;
    if (v5)
      v8 = *(_QWORD *)(a2 + 8);
    else
      v8 = v7;
    v17 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v15, v6, v8);
    v9 = v23;
    v10 = *((_BYTE *)v23 + 23);
    v11 = v10 < 0;
    if (v10 < 0)
      v9 = *v23;
    v12 = (void *)(v10 & 0x7F);
    if (v11)
      v12 = v23[1];
    v14[0] = v9;
    v14[1] = v12;
    (*(void (**)(uint64_t *, _QWORD *))(*a1 + 224))(a1, v14);
    v15 = off_1E81A6E70;
    if (v22 == 1 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 224))(a1, &v15);
    *(_QWORD *)&result = sub_1C51EE4B0(v15, v16, a1[1], a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_1C51F159C(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != 0x7FFFFFFF)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == 0x80000000;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C51F1638(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = 0x7FFFFFFF;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = v4 + 32;
      do
      {
        v14 = *(_DWORD *)(v13 - 32);
        if ((v14 - 0x7FFFFFFF) >= 2)
        {
          v20 = 0;
          sub_1C51F159C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = v14;
          v16 = *(_OWORD *)(v13 - 24);
          *((_QWORD *)v15 + 3) = *(_QWORD *)(v13 - 8);
          *(_OWORD *)(v15 + 2) = v16;
          *(_QWORD *)(v13 - 16) = 0;
          *(_QWORD *)(v13 - 8) = 0;
          *(_QWORD *)(v13 - 24) = 0;
          v17 = *(_DWORD *)v13;
          *((_BYTE *)v15 + 36) = *(_BYTE *)(v13 + 4);
          v15[8] = v17;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 - 1) < 0)
            operator delete(*(void **)(v13 - 24));
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 40 * v18;
    do
    {
      *result = 0x7FFFFFFF;
      result += 10;
      v19 -= 40;
    }
    while (v19);
  }
  return result;
}

void sub_1C51F17BC(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  _BOOL4 v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  BOOL v14;
  void **v15;
  void **v16;
  _BOOL4 v17;
  void **v18;
  BOOL v19;
  unint64_t v20;
  void **v21;
  void **v22;
  BOOL v23;
  void **v24;
  _BOOL4 v25;
  uint64_t v26;
  BOOL v27;
  void **v28;
  void **v29;
  uint64_t v30;
  BOOL v31;
  void **v32;
  BOOL v33;
  unint64_t v34;
  BOOL v35;
  void **v36;
  void **v37;
  BOOL v38;
  void **v39;
  void **v40;
  _BOOL4 v41;
  uint64_t v42;
  BOOL v43;
  void **v44;
  void **v45;
  _BOOL4 v46;
  void **v47;
  void *v48;
  void ***v49;
  uint64_t v50;
  unint64_t v51;
  void ***v52;
  uint64_t v53;
  _BOOL4 v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 *v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  _BOOL8 v75;
  void **v76;
  _BOOL4 v77;
  unint64_t v78;
  void **v79;
  uint64_t v80;
  void **v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  _BOOL8 v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  void **v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _BOOL4 v95;
  unint64_t v96;
  void **v97;
  BOOL v98;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL4 v104;
  void **v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  BOOL v110;
  void ***v111;
  void ***v112;
  void ***v113;
  void **v115;
  _BOOL4 v116;
  void **v117;
  int64_t v118;
  void **v120;
  void **v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  void *v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  __int128 v133;
  __int128 v134;
  void **v135;
  _QWORD v136[3];
  uint64_t v137;
  _QWORD v138[3];
  void **v139;
  _QWORD v140[3];
  uint64_t v141;
  _QWORD v142[3];
  uint64_t v143;
  _QWORD v144[3];
  void **v145;
  _QWORD v146[3];
  void **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void **v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void **v172;
  __int128 v173;
  void *v174;
  void **v175;
  __int128 v176;
  uint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void **v182;
  __int128 v183;
  uint64_t v184;
  void **v185;
  __int128 v186;
  uint64_t v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

__n128 sub_1C51F3328(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 v12;
  __n128 result;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL4 v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL4 v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  _BOOL4 v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void **v39;
  _QWORD v40[3];
  void **v41;
  _QWORD v42[3];
  void **v43;
  _QWORD v44[3];
  void **v45;
  _QWORD v46[3];
  void **v47;
  _QWORD v48[3];
  void **v49;
  _QWORD v50[3];
  void *v51;
  _QWORD v52[3];
  void *v53;
  _QWORD v54[3];
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;

  sub_1C51F41E4((uint64_t)a1, a2, a3, (void **)a4);
  v9 = (uint64_t)a5[1];
  v53 = *a5;
  memset(v54, 0, sizeof(v54));
  sub_1C51F0A80(v54, v9, (uint64_t)a5[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5[2] - v9) >> 4));
  v11 = (_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a4 + 8);
  v51 = *(void **)a4;
  memset(v52, 0, sizeof(v52));
  sub_1C51F0A80(v52, v10, *(_QWORD *)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a4 + 16) - v10) >> 4));
  if ((_DWORD)v53 == (_DWORD)v51)
    v12 = HIDWORD(v53) < HIDWORD(v51);
  else
    v12 = v53 < v51;
  v55 = (void **)v52;
  sub_1C51EA488(&v55);
  v55 = (void **)v54;
  sub_1C51EA488(&v55);
  if (v12)
  {
    v55 = *(void ***)a4;
    v14 = v55;
    v15 = *(void **)(a4 + 24);
    v34 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *v11 = 0;
    *(_QWORD *)a4 = *a5;
    sub_1C51F0864((void **)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 1);
    *(_QWORD *)(a4 + 24) = a5[3];
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    *a5 = v14;
    sub_1C51F0864(a5 + 1);
    *(_OWORD *)(a5 + 1) = v34;
    a5[3] = v15;
    v57 = 0;
    v58 = 0;
    v56 = 0;
    v49 = (void **)&v56;
    sub_1C51EA488(&v49);
    v16 = *(_QWORD *)(a4 + 8);
    v49 = *(void ***)a4;
    memset(v50, 0, sizeof(v50));
    sub_1C51F0A80(v50, v16, *(_QWORD *)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a4 + 16) - v16) >> 4));
    v18 = (_QWORD *)(a3 + 8);
    v17 = *(_QWORD *)(a3 + 8);
    v47 = *(void ***)a3;
    memset(v48, 0, sizeof(v48));
    sub_1C51F0A80(v48, v17, *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 16) - v17) >> 4));
    v19 = (_DWORD)v49 == (_DWORD)v47 ? HIDWORD(v49) < HIDWORD(v47) : v49 < v47;
    v55 = (void **)v48;
    sub_1C51EA488(&v55);
    v55 = (void **)v50;
    sub_1C51EA488(&v55);
    if (v19)
    {
      v55 = *(void ***)a3;
      v20 = v55;
      v21 = *(_QWORD *)(a3 + 24);
      v35 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *v18 = 0;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      sub_1C51F0864((void **)(a3 + 8));
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *v11 = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)a4 = v20;
      sub_1C51F0864((void **)(a4 + 8));
      *(_OWORD *)(a4 + 8) = v35;
      *(_QWORD *)(a4 + 24) = v21;
      v57 = 0;
      v58 = 0;
      v56 = 0;
      v45 = (void **)&v56;
      sub_1C51EA488(&v45);
      v22 = *(_QWORD *)(a3 + 8);
      v45 = *(void ***)a3;
      memset(v46, 0, sizeof(v46));
      sub_1C51F0A80(v46, v22, *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 16) - v22) >> 4));
      v24 = (_QWORD *)(a2 + 8);
      v23 = *(_QWORD *)(a2 + 8);
      v43 = *(void ***)a2;
      memset(v44, 0, sizeof(v44));
      sub_1C51F0A80(v44, v23, *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v23) >> 4));
      v25 = (_DWORD)v45 == (_DWORD)v43 ? HIDWORD(v45) < HIDWORD(v43) : v45 < v43;
      v55 = (void **)v44;
      sub_1C51EA488(&v55);
      v55 = (void **)v46;
      sub_1C51EA488(&v55);
      if (v25)
      {
        v55 = *(void ***)a2;
        v26 = v55;
        v27 = *(_QWORD *)(a2 + 24);
        v36 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *v24 = 0;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        sub_1C51F0864((void **)(a2 + 8));
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *v18 = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)a3 = v26;
        sub_1C51F0864((void **)(a3 + 8));
        *(_OWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v27;
        v57 = 0;
        v58 = 0;
        v56 = 0;
        v41 = (void **)&v56;
        sub_1C51EA488(&v41);
        v28 = *(_QWORD *)(a2 + 8);
        v41 = *(void ***)a2;
        memset(v42, 0, sizeof(v42));
        sub_1C51F0A80(v42, v28, *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v28) >> 4));
        v30 = (void **)(a1 + 1);
        v29 = a1[1];
        v39 = (void **)*a1;
        memset(v40, 0, sizeof(v40));
        sub_1C51F0A80(v40, v29, a1[2], 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v29) >> 4));
        if ((_DWORD)v41 == (_DWORD)v39)
          v31 = HIDWORD(v41) < HIDWORD(v39);
        else
          v31 = v41 < v39;
        v55 = (void **)v40;
        sub_1C51EA488(&v55);
        v55 = (void **)v42;
        sub_1C51EA488(&v55);
        if (v31)
        {
          v55 = (void **)*a1;
          v32 = v55;
          v33 = a1[3];
          v37 = *(_OWORD *)(a1 + 1);
          a1[2] = 0;
          a1[3] = 0;
          *v30 = 0;
          *a1 = *(_QWORD *)a2;
          sub_1C51F0864(v30);
          *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
          a1[3] = *(_QWORD *)(a2 + 24);
          *v24 = 0;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)a2 = v32;
          sub_1C51F0864((void **)(a2 + 8));
          *(_OWORD *)(a2 + 8) = v37;
          *(_QWORD *)(a2 + 24) = v33;
          v57 = 0;
          v58 = 0;
          v56 = 0;
          v59 = (void **)&v56;
          sub_1C51EA488(&v59);
        }
      }
    }
  }
  return result;
}

void sub_1C51F37F0(uint64_t a1, void ***a2, void ***a3)
{
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL4 v14;
  void **v15;
  void **v16;
  uint64_t v17;
  _BOOL4 v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  void **v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void **v38;
  _QWORD v39[3];
  void **v40;
  _QWORD v41[3];
  void **v42;
  _QWORD v43[3];
  void **v44;
  _QWORD v45[3];
  void **v46;
  _QWORD v47[3];
  void **v48;
  _QWORD v49[3];
  void **v50;
  _QWORD v51[3];
  void **v52;
  _QWORD v53[3];
  void **v54;
  _QWORD v55[3];
  void **v56;
  _QWORD v57[3];
  void **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;

  v6 = *a2;
  v8 = (void **)(a2 + 1);
  v7 = (uint64_t)a2[1];
  v56 = v6;
  memset(v57, 0, sizeof(v57));
  sub_1C51F0A80(v57, v7, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v7) >> 4));
  v10 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 8);
  v54 = *(void ***)a1;
  memset(v55, 0, sizeof(v55));
  sub_1C51F0A80(v55, v9, *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v9) >> 4));
  if ((_DWORD)v56 == (_DWORD)v54)
    v11 = HIDWORD(v56) < HIDWORD(v54);
  else
    v11 = v56 < v54;
  v58 = (void **)v55;
  sub_1C51EA488(&v58);
  v58 = (void **)v57;
  sub_1C51EA488(&v58);
  v12 = a3 + 1;
  if (v11)
  {
    v44 = *a3;
    memset(v45, 0, sizeof(v45));
    sub_1C51F0A80(v45, (uint64_t)a3[1], (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 4));
    v13 = (uint64_t)a2[1];
    v42 = *a2;
    memset(v43, 0, sizeof(v43));
    sub_1C51F0A80(v43, v13, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v13) >> 4));
    if ((_DWORD)v44 == (_DWORD)v42)
      v14 = HIDWORD(v44) < HIDWORD(v42);
    else
      v14 = v44 < v42;
    v58 = (void **)v43;
    sub_1C51EA488(&v58);
    v58 = (void **)v45;
    sub_1C51EA488(&v58);
    if (v14)
    {
      v58 = *(void ***)a1;
      v15 = v58;
      v16 = *(void ***)(a1 + 24);
      v33 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *v10 = 0;
      *(_QWORD *)a1 = *a3;
      sub_1C51F0864((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 1);
      *(_QWORD *)(a1 + 24) = a3[3];
      *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v15;
      sub_1C51F0864((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v33;
      a3[3] = v16;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      v62 = (void **)&v59;
LABEL_24:
      sub_1C51EA488(&v62);
      return;
    }
    v58 = *(void ***)a1;
    v26 = v58;
    v27 = *(void ***)(a1 + 24);
    v36 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v10 = 0;
    *(_QWORD *)a1 = *a2;
    sub_1C51F0864((void **)(a1 + 8));
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *a2 = v26;
    sub_1C51F0864(v8);
    *(_OWORD *)(a2 + 1) = v36;
    a2[3] = v27;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v62 = (void **)&v59;
    sub_1C51EA488(&v62);
    v28 = (uint64_t)a3[1];
    v40 = *a3;
    memset(v41, 0, sizeof(v41));
    sub_1C51F0A80(v41, v28, (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3[2] - v28) >> 4));
    v29 = (uint64_t)a2[1];
    v38 = *a2;
    memset(v39, 0, sizeof(v39));
    sub_1C51F0A80(v39, v29, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v29) >> 4));
    if ((_DWORD)v40 == (_DWORD)v38)
      v30 = HIDWORD(v40) < HIDWORD(v38);
    else
      v30 = v40 < v38;
    v58 = (void **)v39;
    sub_1C51EA488(&v58);
    v58 = (void **)v41;
    sub_1C51EA488(&v58);
    if (v30)
    {
      v58 = *a2;
      v31 = v58;
      v32 = a2[3];
      v37 = *(_OWORD *)(a2 + 1);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *a2 = *a3;
      sub_1C51F0864(v8);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v31;
      sub_1C51F0864((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v37;
      a3[3] = v32;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      v62 = (void **)&v59;
      goto LABEL_24;
    }
  }
  else
  {
    v52 = *a3;
    memset(v53, 0, sizeof(v53));
    sub_1C51F0A80(v53, (uint64_t)a3[1], (uint64_t)a3[2], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[2] - (char *)a3[1]) >> 4));
    v17 = (uint64_t)a2[1];
    v50 = *a2;
    memset(v51, 0, sizeof(v51));
    sub_1C51F0A80(v51, v17, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v17) >> 4));
    if ((_DWORD)v52 == (_DWORD)v50)
      v18 = HIDWORD(v52) < HIDWORD(v50);
    else
      v18 = v52 < v50;
    v58 = (void **)v51;
    sub_1C51EA488(&v58);
    v58 = (void **)v53;
    sub_1C51EA488(&v58);
    if (v18)
    {
      v58 = *a2;
      v19 = v58;
      v20 = a2[3];
      v34 = *(_OWORD *)(a2 + 1);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *a2 = *a3;
      sub_1C51F0864(v8);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      *v12 = 0;
      a3[2] = 0;
      a3[3] = 0;
      *a3 = v19;
      sub_1C51F0864((void **)a3 + 1);
      *(_OWORD *)(a3 + 1) = v34;
      a3[3] = v20;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      v62 = (void **)&v59;
      sub_1C51EA488(&v62);
      v21 = (uint64_t)a2[1];
      v48 = *a2;
      memset(v49, 0, sizeof(v49));
      sub_1C51F0A80(v49, v21, (uint64_t)a2[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[2] - v21) >> 4));
      v22 = *(_QWORD *)(a1 + 8);
      v46 = *(void ***)a1;
      memset(v47, 0, sizeof(v47));
      sub_1C51F0A80(v47, v22, *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v22) >> 4));
      v23 = (_DWORD)v48 == (_DWORD)v46 ? HIDWORD(v48) < HIDWORD(v46) : v48 < v46;
      v58 = (void **)v47;
      sub_1C51EA488(&v58);
      v58 = (void **)v49;
      sub_1C51EA488(&v58);
      if (v23)
      {
        v58 = *(void ***)a1;
        v24 = v58;
        v25 = *(void ***)(a1 + 24);
        v35 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *v10 = 0;
        *(_QWORD *)a1 = *a2;
        sub_1C51F0864((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(a1 + 24) = a2[3];
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        *a2 = v24;
        sub_1C51F0864(v8);
        *(_OWORD *)(a2 + 1) = v35;
        a2[3] = v25;
        v60 = 0;
        v61 = 0;
        v59 = 0;
        v62 = (void **)&v59;
        goto LABEL_24;
      }
    }
  }
}

BOOL sub_1C51F3D90(uint64_t a1, void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  void **v9;
  void *v10;
  uint64_t *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void **v23;
  void **v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  _QWORD v28[3];
  void **v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  void *v33;
  _QWORD v34[3];
  void **v35;
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  void **v39;
  __int128 v40;
  void *v41;
  void **v42[2];

  v4 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t)*(a2 - 3);
      v37 = (uint64_t)*(a2 - 4);
      memset(v38, 0, sizeof(v38));
      sub_1C51F0A80(v38, v6, (uint64_t)*(a2 - 2), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*(a2 - 2) - v6) >> 4));
      v7 = *(_QWORD *)(a1 + 8);
      v35 = *(void ***)a1;
      memset(v36, 0, sizeof(v36));
      sub_1C51F0A80(v36, v7, *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v7) >> 4));
      if ((_DWORD)v37 == (_DWORD)v35)
        v8 = HIDWORD(v37) < HIDWORD(v35);
      else
        v8 = v37 < v35;
      v39 = (void **)v36;
      sub_1C51EA488(&v39);
      v39 = (void **)v38;
      sub_1C51EA488(&v39);
      if (v8)
      {
        v39 = *(void ***)a1;
        v9 = v39;
        v10 = *(void **)(a1 + 24);
        v25 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(a2 - 4);
        sub_1C51F0864((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a1 + 24) = *(a2 - 1);
        *(a2 - 3) = 0;
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        *(a2 - 4) = v9;
        sub_1C51F0864(a2 - 3);
        *(_OWORD *)(a2 - 3) = v25;
        *(a2 - 1) = v10;
        v41 = 0;
        v40 = 0uLL;
        v42[0] = (void **)&v40;
        sub_1C51EA488(v42);
      }
      return 1;
    case 3:
      sub_1C51F37F0(a1, (void ***)(a1 + 32), (void ***)a2 - 4);
      return 1;
    case 4:
      sub_1C51F41E4(a1, a1 + 32, a1 + 64, a2 - 4);
      return 1;
    case 5:
      sub_1C51F3328((_QWORD *)a1, a1 + 32, a1 + 64, a1 + 96, a2 - 4);
      return 1;
    default:
      v11 = (uint64_t *)(a1 + 64);
      sub_1C51F37F0(a1, (void ***)(a1 + 32), (void ***)(a1 + 64));
      v12 = (void **)(a1 + 96);
      if ((void **)(a1 + 96) == a2)
        return 1;
      v13 = 0;
      v26 = 0;
      v24 = a2;
      break;
  }
  while (1)
  {
    v33 = *v12;
    v14 = (uint64_t)v12[1];
    memset(v34, 0, sizeof(v34));
    sub_1C51F0A80(v34, v14, (uint64_t)v12[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12[2] - v14) >> 4));
    v31 = *v11;
    memset(v32, 0, sizeof(v32));
    sub_1C51F0A80(v32, v11[1], v11[2], 0xAAAAAAAAAAAAAAABLL * ((v11[2] - v11[1]) >> 4));
    v15 = (_DWORD)v33 == (_DWORD)v31 ? HIDWORD(v33) < HIDWORD(v31) : v33 < v31;
    v39 = (void **)v32;
    sub_1C51EA488(&v39);
    v39 = (void **)v34;
    sub_1C51EA488(&v39);
    if (v15)
      break;
    v23 = v24;
LABEL_23:
    v11 = (uint64_t *)v12;
    v13 += 32;
    v12 += 4;
    if (v12 == v23)
      return 1;
  }
  v16 = (void **)*v12;
  v40 = *(_OWORD *)(v12 + 1);
  v17 = v12[3];
  v39 = v16;
  v41 = v17;
  v12[2] = 0;
  v12[3] = 0;
  v12[1] = 0;
  v18 = v13;
  while (1)
  {
    v19 = a1 + v18;
    *(_QWORD *)(a1 + v18 + 96) = *(_QWORD *)(a1 + v18 + 64);
    sub_1C51F0864((void **)(a1 + v18 + 104));
    *(_OWORD *)(v19 + 104) = *(_OWORD *)(v19 + 72);
    *(_QWORD *)(v19 + 120) = *(_QWORD *)(v19 + 88);
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    *(_QWORD *)(v19 + 72) = 0;
    if (v18 == -64)
      break;
    v29 = v39;
    memset(v30, 0, sizeof(v30));
    sub_1C51F0A80(v30, v40, *((uint64_t *)&v40 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 4));
    v20 = *(_QWORD *)(v19 + 40);
    v27 = *(_QWORD *)(v19 + 32);
    memset(v28, 0, sizeof(v28));
    sub_1C51F0A80(v28, v20, *(_QWORD *)(v19 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v19 + 48) - v20) >> 4));
    if ((_DWORD)v29 == (_DWORD)v27)
      v21 = HIDWORD(v29) < HIDWORD(v27);
    else
      v21 = v29 < v27;
    v42[0] = (void **)v28;
    sub_1C51EA488(v42);
    v42[0] = (void **)v30;
    sub_1C51EA488(v42);
    v18 -= 32;
    if (!v21)
    {
      v22 = a1 + v18 + 96;
      goto LABEL_22;
    }
  }
  v22 = a1;
LABEL_22:
  v23 = v24;
  *(_QWORD *)v22 = v39;
  sub_1C51F0864((void **)(v22 + 8));
  *(_OWORD *)(v22 + 8) = v40;
  *(_QWORD *)(v22 + 24) = v41;
  v41 = 0;
  v40 = 0uLL;
  v42[0] = (void **)&v40;
  sub_1C51EA488(v42);
  if (++v26 != 8)
    goto LABEL_23;
  return v12 + 4 == v24;
}

__n128 sub_1C51F41E4(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BOOL4 v11;
  __n128 result;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL4 v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void **v29;
  _QWORD v30[3];
  void **v31;
  _QWORD v32[3];
  void **v33;
  _QWORD v34[3];
  void **v35;
  _QWORD v36[3];
  void **v37;
  _QWORD v38[3];
  void *v39;
  _QWORD v40[3];
  void **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45[2];

  sub_1C51F37F0(a1, (void ***)a2, (void ***)a3);
  v8 = (uint64_t)a4[1];
  v39 = *a4;
  memset(v40, 0, sizeof(v40));
  sub_1C51F0A80(v40, v8, (uint64_t)a4[2], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4[2] - v8) >> 4));
  v10 = (_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 8);
  v37 = *(void ***)a3;
  memset(v38, 0, sizeof(v38));
  sub_1C51F0A80(v38, v9, *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 16) - v9) >> 4));
  if ((_DWORD)v39 == (_DWORD)v37)
    v11 = HIDWORD(v39) < HIDWORD(v37);
  else
    v11 = v39 < v37;
  v41 = (void **)v38;
  sub_1C51EA488(&v41);
  v41 = (void **)v40;
  sub_1C51EA488(&v41);
  if (v11)
  {
    v41 = *(void ***)a3;
    v13 = v41;
    v14 = *(void **)(a3 + 24);
    v26 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *v10 = 0;
    *(_QWORD *)a3 = *a4;
    sub_1C51F0864((void **)(a3 + 8));
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 1);
    *(_QWORD *)(a3 + 24) = a4[3];
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
    *a4 = v13;
    sub_1C51F0864(a4 + 1);
    *(_OWORD *)(a4 + 1) = v26;
    a4[3] = v14;
    v43 = 0;
    v44 = 0;
    v42 = 0;
    v45[0] = (void **)&v42;
    sub_1C51EA488(v45);
    v15 = *(_QWORD *)(a3 + 8);
    v35 = *(void ***)a3;
    memset(v36, 0, sizeof(v36));
    sub_1C51F0A80(v36, v15, *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 16) - v15) >> 4));
    v17 = (_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 8);
    v33 = *(void ***)a2;
    memset(v34, 0, sizeof(v34));
    sub_1C51F0A80(v34, v16, *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v16) >> 4));
    v18 = (_DWORD)v35 == (_DWORD)v33 ? HIDWORD(v35) < HIDWORD(v33) : v35 < v33;
    v41 = (void **)v34;
    sub_1C51EA488(&v41);
    v41 = (void **)v36;
    sub_1C51EA488(&v41);
    if (v18)
    {
      v41 = *(void ***)a2;
      v19 = v41;
      v20 = *(_QWORD *)(a2 + 24);
      v27 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *v17 = 0;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      sub_1C51F0864((void **)(a2 + 8));
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *v10 = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)a3 = v19;
      sub_1C51F0864((void **)(a3 + 8));
      *(_OWORD *)(a3 + 8) = v27;
      *(_QWORD *)(a3 + 24) = v20;
      v43 = 0;
      v44 = 0;
      v42 = 0;
      v45[0] = (void **)&v42;
      sub_1C51EA488(v45);
      v21 = *(_QWORD *)(a2 + 8);
      v31 = *(void ***)a2;
      memset(v32, 0, sizeof(v32));
      sub_1C51F0A80(v32, v21, *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v21) >> 4));
      v22 = *(_QWORD *)(a1 + 8);
      v29 = *(void ***)a1;
      memset(v30, 0, sizeof(v30));
      sub_1C51F0A80(v30, v22, *(_QWORD *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v22) >> 4));
      if ((_DWORD)v31 == (_DWORD)v29)
        v23 = HIDWORD(v31) < HIDWORD(v29);
      else
        v23 = v31 < v29;
      v41 = (void **)v30;
      sub_1C51EA488(&v41);
      v41 = (void **)v32;
      sub_1C51EA488(&v41);
      if (v23)
      {
        v41 = *(void ***)a1;
        v24 = v41;
        v25 = *(_QWORD *)(a1 + 24);
        v28 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        sub_1C51F0864((void **)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *v17 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)a2 = v24;
        sub_1C51F0864((void **)(a2 + 8));
        *(_OWORD *)(a2 + 8) = v28;
        *(_QWORD *)(a2 + 24) = v25;
        v43 = 0;
        v44 = 0;
        v42 = 0;
        v45[0] = (void **)&v42;
        sub_1C51EA488(v45);
      }
    }
  }
  return result;
}

void sub_1C51F458C(uint64_t a1, const std::string *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  _QWORD v8[2];
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18[2];
  uint64_t v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    LODWORD(v10) = 0;
    v14 = 0;
    v15 = 0;
    v9 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v17 = v18;
    v16 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    llvm::Module::print(a2, (llvm::raw_ostream *)&v9, 0, 0, 0);
    v4 = v17;
    v5 = *((_BYTE *)v17 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v17;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v17[1];
    v8[0] = v4;
    v8[1] = v7;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v8);
    v9 = off_1E81A6E70;
    if (v16 == 1 && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a1 + 224))(a1, &v9);
    __break(1u);
  }
}

uint64_t sub_1C51F46B4()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  LODWORD(v3) = 1;
  v1.n128_u64[0] = (unint64_t)"Leave out unnecessary information when printing MIR";
  v1.n128_u64[1] = 51;
  sub_1C61B2D38((uint64_t)&unk_1ED7FD130, "simplify-mir", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD130, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Print MIR debug-locations";
  v1.n128_u64[1] = 25;
  sub_1C6205C24(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FD1F0, &dword_1C475E000);
}

void llvm::initializeMIRPrintingPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F2F08);
  if (v1 != -1)
  {
    v4[0] = sub_1C51F47D4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F2F08, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C51F47D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "MIR Printer";
  *(_QWORD *)(v2 + 8) = 11;
  *(_QWORD *)(v2 + 16) = "mir-printer";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F00;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51F48B4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *llvm::createPrintMIRPass(llvm *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = operator new();
  result = (_QWORD *)sub_1C4776848(v3, (uint64_t)&unk_1EF8F2F00);
  *result = off_1E81472E0;
  result[31] = this;
  result[32] = 0;
  result[33] = 0;
  result[34] = 0;
  return result;
}

_QWORD *sub_1C51F48B4()
{
  _QWORD *v0;
  llvm *v1;

  v0 = (_QWORD *)operator new();
  v1 = (llvm *)sub_1C4776848((uint64_t)v0, (uint64_t)&unk_1EF8F2F00);
  *(_QWORD *)v1 = off_1E81472E0;
  v0[31] = llvm::dbgs(v1);
  v0[32] = 0;
  v0[33] = 0;
  v0[34] = 0;
  return v0;
}

void sub_1C51F4910(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E81472E0;
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C51F49A4(void **this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = off_1E81472E0;
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  *this = &unk_1E8144BE8;
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  v3 = (void **)this[13];
  if (v3 != this + 15)
    free(v3);
  v4 = (void **)this[4];
  if (v4 != this + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C51F4A4C()
{
  return "MIR Printing Pass";
}

uint64_t sub_1C51F4A5C(uint64_t a1, const std::string *a2, const llvm::Module *a3)
{
  char v4;
  int v5;
  const char *v6;
  size_t v7;
  size_t v8;

  llvm::printMIR(*(llvm **)(a1 + 248), a2, a3);
  v4 = *(_BYTE *)(a1 + 279);
  v5 = v4;
  if (v4 >= 0)
    v6 = (const char *)(a1 + 256);
  else
    v6 = *(const char **)(a1 + 256);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(a1 + 264);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 248), v6, v8);
  return 0;
}

void *sub_1C51F4AAC(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t sub_1C51F4AB8(uint64_t a1, llvm::raw_ostream *a2, const llvm::MachineFunction *a3)
{
  char v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v16 = v17;
  v15 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  llvm::printMIR((llvm *)&v8, a2, a3);
  v4 = *((_BYTE *)v16 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)v16;
  else
    v5 = (const std::string::value_type *)*v16;
  if (v4 >= 0)
    v6 = v4 & 0x7F;
  else
    v6 = (std::string::size_type)v16[1];
  std::string::append((std::string *)(a1 + 256), v5, v6);
  v8 = off_1E81A6E70;
  if (v15 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  return 0;
}

BOOL llvm::hasLessThanNumFused(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  unint64_t v6;
  _BOOL8 result;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD **)(a1 + 32);
    v4 = &v3[4 * v2];
    v5 = 1;
    while (1)
    {
      while ((~*v3 & 6) != 0 || v3[2] != 5)
      {
        v3 += 4;
        if (v3 == v4)
          return v5 < a2;
      }
      v6 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
      result = v5 < a2;
      if (!v6 || v5 >= a2)
        break;
      ++v5;
      v3 = *(_DWORD **)(v6 + 32);
      v9 = *(unsigned int *)(v6 + 40);
      v4 = &v3[4 * v9];
      if (!(_DWORD)v9)
        return v5 < a2;
    }
  }
  else
  {
    v5 = 1;
    return v5 < a2;
  }
  return result;
}

uint64_t llvm::fuseInstructionPair(llvm::ScheduleDAGInstrs *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    v8 = (_DWORD *)(*(_QWORD *)(a2 + 112) + 8);
    while ((~*(v8 - 2) & 6) != 0 || *v8 != 5)
    {
      v8 += 4;
      v7 -= 16;
      if (!v7)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v9 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (_DWORD *)(*(_QWORD *)(a3 + 32) + 8);
    while ((~*(v11 - 2) & 6) != 0 || *v11 != 5)
    {
      v11 += 4;
      v10 -= 16;
      if (!v10)
        goto LABEL_11;
    }
    return 0;
  }
LABEL_11:
  v43 = a2 | 6;
  v44 = 5;
  result = llvm::ScheduleDAGInstrs::addEdge(a1, (llvm::SUnit *)a3, (const llvm::SDep *)&v43);
  if ((_DWORD)result)
  {
    v13 = *(uint64_t **)(a2 + 112);
    v14 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v14)
    {
      v15 = 16 * v14;
      v16 = *(_QWORD *)(a2 + 112);
      do
      {
        if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) == a3)
          *(_DWORD *)(v16 + 12) = 0;
        v16 += 16;
        v15 -= 16;
      }
      while (v15);
    }
    v17 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a3 + 32);
      v19 = 16 * v17;
      do
      {
        if ((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8) == a2)
          *(_DWORD *)(v18 + 12) = 0;
        v18 += 16;
        v19 -= 16;
      }
      while (v19);
    }
    v20 = (_QWORD *)((char *)a1 + 344);
    if ((llvm::ScheduleDAGInstrs *)((char *)a1 + 344) != (llvm::ScheduleDAGInstrs *)a3 && (_DWORD)v14)
    {
      v21 = &v13[2 * v14];
      do
      {
        v22 = *v13;
        if ((~*(_DWORD *)v13 & 6) != 0 || *((_DWORD *)v13 + 2) <= 3u)
        {
          v23 = v22 & 0xFFFFFFFFFFFFFFF8;
          v24 = ((v22 >> 1) & 3) - 1;
          v25 = v23 == a3 || v20 == (_QWORD *)v23;
          if (!v25 && v24 >= 2)
          {
            v27 = *(unsigned int *)(v23 + 40);
            if ((_DWORD)v27)
            {
              v28 = *(_QWORD **)(v23 + 32);
              v29 = 16 * v27;
              while ((*v28 & 0xFFFFFFFFFFFFFFF8) != a3)
              {
                v28 += 2;
                v29 -= 16;
                if (!v29)
                  goto LABEL_40;
              }
            }
            else
            {
LABEL_40:
              v43 = a3 | 6;
              v44 = 3;
              llvm::ScheduleDAGInstrs::addEdge(a1, (llvm::SUnit *)v23, (const llvm::SDep *)&v43);
            }
          }
        }
        v13 += 2;
      }
      while (v13 != v21);
    }
    if ((llvm::ScheduleDAGInstrs *)((char *)a1 + 72) == (llvm::ScheduleDAGInstrs *)a2)
      return 1;
    v30 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v30)
    {
      v31 = *(uint64_t **)(a3 + 32);
      v32 = &v31[2 * v30];
      do
      {
        v33 = *v31;
        if ((~*(_DWORD *)v31 & 6) != 0 || *((_DWORD *)v31 + 2) <= 3u)
        {
          v34 = v33 & 0xFFFFFFFFFFFFFFF8;
          v35 = ((v33 >> 1) & 3) - 1;
          if (v34 != a2 && v35 >= 2)
          {
            v37 = *(unsigned int *)(a2 + 120);
            if ((_DWORD)v37)
            {
              v38 = *(_QWORD **)(a2 + 112);
              v39 = 16 * v37;
              while ((*v38 & 0xFFFFFFFFFFFFFFF8) != v34)
              {
                v38 += 2;
                v39 -= 16;
                if (!v39)
                  goto LABEL_58;
              }
            }
            else
            {
LABEL_58:
              v43 = v34 | 6;
              v44 = 3;
              llvm::ScheduleDAGInstrs::addEdge(a1, (llvm::SUnit *)a2, (const llvm::SDep *)&v43);
            }
          }
        }
        v31 += 2;
      }
      while (v31 != v32);
    }
    if (v20 != (_QWORD *)a3)
      return 1;
    v40 = *((_QWORD *)a1 + 6);
    v41 = *((_QWORD *)a1 + 7);
    if (v40 == v41)
    {
      return 1;
    }
    else
    {
      v42 = *((_QWORD *)a1 + 6);
      do
      {
        if (!*(_DWORD *)(v42 + 120))
        {
          v43 = v40 | 6;
          v44 = 3;
          llvm::ScheduleDAGInstrs::addEdge(a1, (llvm::SUnit *)a2, (const llvm::SDep *)&v43);
        }
        v42 += 272;
        v40 += 272;
        result = 1;
      }
      while (v42 != v41);
    }
  }
  return result;
}

_QWORD *llvm::createMacroFusionDAGMutation@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED7FD330)
  {
    v4 = 0;
    goto LABEL_17;
  }
  v3 = result;
  v4 = operator new();
  result = (_QWORD *)v3[3];
  if (!result)
  {
    *(_QWORD *)v4 = &off_1E81473A0;
LABEL_11:
    *(_QWORD *)(v4 + 32) = 0;
    *(_BYTE *)(v4 + 40) = 1;
    goto LABEL_17;
  }
  if (result == v3)
  {
    v7 = v6;
    (*(void (**)(_QWORD *, _QWORD *))(*v3 + 24))(v3, v6);
    result = v7;
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    v7 = result;
  }
  *(_QWORD *)v4 = &off_1E81473A0;
  v5 = v4 + 8;
  if (!result)
    goto LABEL_11;
  if (result == v6)
  {
    *(_QWORD *)(v4 + 32) = v5;
    (*(void (**)(_QWORD *))(v6[0] + 24))(v6);
  }
  else
  {
    *(_QWORD *)(v4 + 32) = (*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  result = v7;
  *(_BYTE *)(v4 + 40) = 1;
  if (result == v6)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
  }
  else if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  }
LABEL_17:
  *a2 = v4;
  return result;
}

_QWORD *llvm::createBranchMacroFusionDAGMutation@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED7FD330)
  {
    v4 = 0;
    goto LABEL_17;
  }
  v3 = result;
  v4 = operator new();
  result = (_QWORD *)v3[3];
  if (!result)
  {
    *(_QWORD *)v4 = &off_1E81473A0;
LABEL_11:
    *(_QWORD *)(v4 + 32) = 0;
    *(_BYTE *)(v4 + 40) = 0;
    goto LABEL_17;
  }
  if (result == v3)
  {
    v7 = v6;
    (*(void (**)(_QWORD *, _QWORD *))(*v3 + 24))(v3, v6);
    result = v7;
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    v7 = result;
  }
  *(_QWORD *)v4 = &off_1E81473A0;
  v5 = v4 + 8;
  if (!result)
    goto LABEL_11;
  if (result == v6)
  {
    *(_QWORD *)(v4 + 32) = v5;
    (*(void (**)(_QWORD *))(v6[0] + 24))(v6);
  }
  else
  {
    *(_QWORD *)(v4 + 32) = (*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  result = v7;
  *(_BYTE *)(v4 + 40) = 0;
  if (result == v6)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
  }
  else if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  }
LABEL_17:
  *a2 = v4;
  return result;
}

_QWORD *sub_1C51F5210(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E81473A0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C51F526C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E81473A0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51F52D8(uint64_t result, llvm::ScheduleDAGInstrs *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*(_BYTE *)(result + 40))
  {
    v4 = *((_QWORD *)a2 + 6);
    v5 = *((_QWORD *)a2 + 7);
    while (v4 != v5)
    {
      result = sub_1C51F5350(v3, a2, v4);
      v4 += 272;
    }
  }
  if (*((_QWORD *)a2 + 44))
    return sub_1C51F5350(v3, a2, (uint64_t)a2 + 344);
  return result;
}

uint64_t sub_1C51F5350(uint64_t a1, llvm::ScheduleDAGInstrs *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a3 + 8);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
  v24 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v6, &v24, v4);
    if ((_DWORD)result)
    {
      v11 = *(unsigned int *)(a3 + 40);
      if ((_DWORD)v11)
      {
        v12 = *(uint64_t **)(a3 + 32);
        v13 = &v12[2 * v11];
        do
        {
          v14 = *v12;
          if (((~*(_DWORD *)v12 & 6) != 0 || *((_DWORD *)v12 + 2) <= 3u) && ((v14 >> 1) & 3) - 1 >= 2)
          {
            v15 = v14 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            {
              v16 = *(unsigned int *)(v15 + 40);
              if (!(_DWORD)v16)
                goto LABEL_19;
              v17 = *(uint64_t **)(v15 + 32);
              v18 = &v17[2 * v16];
              v19 = 1;
              do
              {
                while (1)
                {
                  v20 = *v17;
                  if ((~*(_DWORD *)v17 & 6) == 0 && *((_DWORD *)v17 + 2) == 5)
                    break;
                  v17 += 2;
                  if (v17 == v18)
                    goto LABEL_18;
                }
                v21 = v20 & 0xFFFFFFFFFFFFFFF8;
                if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0 || (v19 & 1) == 0)
                  break;
                v19 = 0;
                v17 = *(uint64_t **)(v21 + 32);
                v22 = *(unsigned int *)(v21 + 40);
                v18 = &v17[2 * v22];
              }
              while ((_DWORD)v22);
LABEL_18:
              if ((v19 & 1) != 0)
              {
LABEL_19:
                v24 = *(_QWORD *)(v15 + 8);
                v23 = *(_QWORD *)(a1 + 32);
                if (!v23)
                  goto LABEL_24;
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v23 + 48))(v23, v5, v6, &v24, v4);
                if ((_DWORD)result)
                {
                  result = llvm::fuseInstructionPair(a2, v15, a3);
                  if ((result & 1) != 0)
                    break;
                }
              }
            }
          }
          v12 += 2;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
LABEL_24:
    sub_1C485C2F0();
    return sub_1C51F54E4();
  }
  return result;
}

uint64_t sub_1C51F54E4()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable scheduling for macro fusion.";
  v3.n128_u64[1] = 35;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FD2B0, "misched-fusion", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD2B0, &dword_1C475E000);
}

uint64_t llvm::obfuscateModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t i;
  size_t v14;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void (**v22)(_QWORD *);
  uint64_t v23;
  uint64_t j;
  uint64_t k;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t ****v31;
  unsigned __int8 *v32;
  size_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t ***v36;
  size_t v37;
  unsigned __int8 *v38;
  __int128 *v39;
  unsigned __int8 *v40;
  unint64_t v41;
  uint64_t ***v42;
  size_t v43;
  unsigned __int8 *v44;
  void *v45;
  std::string::size_type v46;
  void **v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  void **v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ***v64;
  uint64_t ***v65;
  uint64_t ***v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  const void *v155;
  size_t v156;
  uint64_t v157;
  _WORD *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  const void *v162;
  size_t v163;
  uint64_t v164;
  _WORD *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  const void *v169;
  size_t v170;
  uint64_t v171;
  _WORD *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  size_t v177;
  size_t v178;
  unsigned __int8 *v179;
  size_t v180;
  uint64_t v181;
  __int128 *v182;
  void (**v183)(__int128 *);
  uint64_t NamedMetadata;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t kk;
  uint64_t ***v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t ****v203;
  uint64_t ***v204;
  uint64_t ****v205;
  int v206;
  BOOL v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t ****v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  void (**v217)(_QWORD *);
  uint64_t m;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t n;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t ii;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t jj;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  size_t v239;
  unint64_t v240;
  std::string v241;
  uint64_t *v242[4];
  _QWORD v243[2];
  int v244;
  void *v245[2];
  uint64_t v246;
  uint64_t v247;
  _QWORD v248[3];
  _QWORD *v249;
  _OWORD *v250;
  void *v251[2];
  _DWORD v252[14];
  _OWORD v253[6];
  _BYTE v254[21];
  uint64_t v255;
  uint64_t v256;
  int v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 __dst;
  _QWORD *v262;
  __int128 *v263;
  const char *p_dst;
  void *v265;
  __int128 v266;
  _WORD v267[32];
  void *__p;
  uint64_t v269;
  _BYTE v270[128];
  uint64_t v271;
  _BYTE v272[24];
  _BYTE *v273;
  _QWORD v274[3];
  _QWORD *v275;
  void *v276[2];
  int v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  void *v287;
  uint64_t *v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  _BYTE v292[24];
  _BYTE *v293;
  _QWORD *v294;
  __int128 v295;
  _QWORD v296[11];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v236 = v7;
  v9 = v8;
  v296[8] = *MEMORY[0x1E0C80C00];
  v235 = v4;
  LOWORD(v279) = 260;
  v276[0] = (void *)(v4 + 216);
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v276);
  v255 = 0;
  v256 = 0;
  v257 = 0;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  *(_QWORD *)&v10 = -1;
  *((_QWORD *)&v10 + 1) = -1;
  v253[0] = v10;
  v253[1] = v10;
  v253[2] = v10;
  v253[3] = v10;
  v253[4] = v10;
  v253[5] = v10;
  *(_OWORD *)v254 = v10;
  *(_QWORD *)&v254[13] = -1;
  sub_1C4F777B0((uint64_t)v253, (int *)&__p);
  if ((v270[7] & 0x80000000) != 0)
    operator delete(__p);
  v250 = v253;
  v251[0] = v252;
  v251[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v251, 8uLL, 0);
  v252[12] = 468;
  if (!atomic_load(qword_1EF8F2F10))
  {
    for (i = 0; i != 393; ++i)
    {
      if (!atomic_load(qword_1EF8F2F10))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F2F10, (void *(*)(void))sub_1C62084BC, (void (*)(void *))sub_1C62084F4);
      v14 = strlen(off_1E81473C0[i]);
      sub_1C4F024D8((llvm::StringMapImpl *)qword_1EF8F2F10[0], (unsigned __int8 *)off_1E81473C0[i], v14);
    }
  }
  if (!atomic_load(qword_1EF8F2F10))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F2F10, (void *(*)(void))sub_1C62084BC, (void (*)(void *))sub_1C62084F4);
  v16 = qword_1EF8F2F10[0];
  v17 = operator new(0x20uLL);
  *v17 = &off_1E8148148;
  v17[1] = v6;
  v17[2] = &v250;
  v17[3] = v16;
  v249 = v17;
  v247 = v9;
  v18 = (void **)(v235 + 192);
  if (*(char *)(v235 + 215) < 0)
  {
    sub_1C47EBC30(v245, *(void **)(v235 + 192), *(_QWORD *)(v235 + 200));
  }
  else
  {
    *(_OWORD *)v245 = *(_OWORD *)v18;
    v246 = *(_QWORD *)(v235 + 208);
  }
  v19 = (void *)(HIBYTE(v246) & 0x7F);
  if (v246 < 0)
    v19 = v245[1];
  if (v19)
  {
    if (*(char *)(v235 + 215) < 0)
      operator delete(*v18);
    *(_BYTE *)(v235 + 192) = 0;
    *(_BYTE *)(v235 + 215) = 0;
  }
  v294 = v296;
  v295 = xmmword_1C64638C0;
  v243[0] = 0;
  v243[1] = 0;
  v244 = 0;
  v242[0] = (uint64_t *)&v294;
  v242[1] = &v247;
  v242[2] = v243;
  v242[3] = v248;
  v20 = *(_QWORD *)v235;
  v274[0] = &off_1E8148018;
  v274[1] = v236;
  v275 = v274;
  sub_1C51F6C28((uint64_t)v276, v20, (uint64_t)v274);
  v21 = v275;
  if (v275 == v274)
  {
    v22 = (void (**)(_QWORD *))(v274[0] + 32);
    v21 = v274;
  }
  else
  {
    if (!v275)
      goto LABEL_24;
    v22 = (void (**)(_QWORD *))(*v275 + 40);
  }
  (*v22)(v21);
LABEL_24:
  __p = v270;
  v269 = 0x4000000000;
  v23 = *(_QWORD *)(v235 + 32);
  v237 = v235 + 24;
  if (v23 != v235 + 24)
  {
    while (1)
    {
      v63 = v23 ? v23 - 56 : 0;
      if ((*(_WORD *)(v63 + 18) & 1) == 0)
        break;
      llvm::Function::BuildLazyArguments((llvm::Function *)v63);
      v64 = *(uint64_t ****)(v63 + 88);
      if ((*(_WORD *)(v63 + 18) & 1) == 0)
        goto LABEL_78;
      llvm::Function::BuildLazyArguments((llvm::Function *)v63);
      v65 = *(uint64_t ****)(v63 + 88);
LABEL_79:
      v66 = &v65[5 * *(_QWORD *)(v63 + 96)];
      while (v64 != v66)
      {
        v267[0] = 257;
        llvm::Value::setName(v64, (uint64_t)&p_dst);
        v64 += 5;
      }
      v67 = *(_QWORD *)(v63 + 80);
      while (2)
      {
        if (v67 != v63 + 72)
        {
          if (v67)
            v68 = v67 - 24;
          else
            v68 = 0;
          v267[0] = 257;
          llvm::Value::setName((uint64_t ***)v68, (uint64_t)&p_dst);
          v69 = v68 + 40;
          v70 = *(_QWORD *)(v68 + 48);
LABEL_88:
          if (v70 == v69)
          {
            v67 = *(_QWORD *)(v67 + 8);
            continue;
          }
          if (v70)
            v71 = v70 - 24;
          else
            v71 = 0;
          v72 = *(_DWORD *)(v71 + 20);
          if (*(_QWORD *)(v71 + 48))
          {
            if ((v72 & 0x20000000) == 0)
              goto LABEL_113;
LABEL_96:
            v73 = ***(_QWORD ***)v71;
            p_dst = (const char *)v71;
            v74 = *(_DWORD *)(v73 + 2496);
            if (!v74)
            {
              v143 = 0;
              goto LABEL_189;
            }
            v75 = *(_QWORD *)(v73 + 2480);
            v76 = v74 - 1;
            v77 = v76 & ((v71 >> 4) ^ (v71 >> 9));
            v78 = (_QWORD *)(v75 + 40 * v77);
            v79 = *v78;
            if (*v78 != v71)
            {
              v80 = 0;
              v81 = 1;
              while (v79 != -4096)
              {
                if (v80)
                  v82 = 0;
                else
                  v82 = v79 == -8192;
                if (v82)
                  v80 = v78;
                v83 = v77 + v81++;
                v77 = v83 & v76;
                v78 = (_QWORD *)(v75 + 40 * v77);
                v79 = *v78;
                if (*v78 == v71)
                  goto LABEL_106;
              }
              if (v80)
                v143 = v80;
              else
                v143 = v78;
LABEL_189:
              v78 = sub_1C541AB24(v73 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v143);
              v144 = (uint64_t)p_dst;
              v78[4] = 0;
              v78[3] = 0;
              *v78 = v144;
              v78[1] = v78 + 3;
              v78[2] = 0x100000000;
            }
LABEL_106:
            v84 = *((unsigned int *)v78 + 4);
            if ((_DWORD)v84)
            {
              v85 = (uint64_t *)(v78[1] + 8);
              v86 = 16 * v84;
              while (*((_DWORD *)v85 - 2) != 1)
              {
                v85 += 2;
                v86 -= 16;
                if (!v86)
                  goto LABEL_113;
              }
              if (*v85)
                sub_1C51F6CAC(v276, *v85);
            }
LABEL_113:
            if ((*(_BYTE *)(v71 + 23) & 0x20) != 0)
            {
              v87 = ***(_QWORD ***)v71;
              p_dst = (const char *)v71;
              v88 = *(_DWORD *)(v87 + 2496);
              if (!v88)
              {
                v145 = 0;
                goto LABEL_193;
              }
              v89 = *(_QWORD *)(v87 + 2480);
              v90 = v88 - 1;
              v91 = v90 & ((v71 >> 4) ^ (v71 >> 9));
              v92 = (_QWORD *)(v89 + 40 * v91);
              v93 = *v92;
              if (*v92 != v71)
              {
                v94 = 0;
                v95 = 1;
                while (v93 != -4096)
                {
                  if (v94)
                    v96 = 0;
                  else
                    v96 = v93 == -8192;
                  if (v96)
                    v94 = v92;
                  v97 = v91 + v95++;
                  v91 = v97 & v90;
                  v92 = (_QWORD *)(v89 + 40 * v91);
                  v93 = *v92;
                  if (*v92 == v71)
                    goto LABEL_124;
                }
                if (v94)
                  v145 = v94;
                else
                  v145 = v92;
LABEL_193:
                v92 = sub_1C541AB24(v87 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v145);
                v146 = (uint64_t)p_dst;
                v92[4] = 0;
                v92[3] = 0;
                *v92 = v146;
                v92[1] = v92 + 3;
                v92[2] = 0x100000000;
              }
LABEL_124:
              v98 = *((unsigned int *)v92 + 4);
              if ((_DWORD)v98)
              {
                v99 = (uint64_t *)(v92[1] + 8);
                v100 = 16 * v98;
                while (*((_DWORD *)v99 - 2) != 5)
                {
                  v99 += 2;
                  v100 -= 16;
                  if (!v100)
                    goto LABEL_131;
                }
                if (*v99)
                  sub_1C51F6CAC(v276, *v99);
              }
            }
LABEL_131:
            if ((*(_BYTE *)(v71 + 23) & 0x20) != 0)
            {
              v101 = ***(_QWORD ***)v71;
              p_dst = (const char *)v71;
              v102 = *(_DWORD *)(v101 + 2496);
              if (!v102)
              {
                v147 = 0;
                goto LABEL_197;
              }
              v103 = *(_QWORD *)(v101 + 2480);
              v104 = v102 - 1;
              v105 = v104 & ((v71 >> 4) ^ (v71 >> 9));
              v106 = (_QWORD *)(v103 + 40 * v105);
              v107 = *v106;
              if (*v106 != v71)
              {
                v108 = 0;
                v109 = 1;
                while (v107 != -4096)
                {
                  if (v108)
                    v110 = 0;
                  else
                    v110 = v107 == -8192;
                  if (v110)
                    v108 = v106;
                  v111 = v105 + v109++;
                  v105 = v111 & v104;
                  v106 = (_QWORD *)(v103 + 40 * v105);
                  v107 = *v106;
                  if (*v106 == v71)
                    goto LABEL_142;
                }
                if (v108)
                  v147 = v108;
                else
                  v147 = v106;
LABEL_197:
                v106 = sub_1C541AB24(v101 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v147);
                v148 = (uint64_t)p_dst;
                v106[4] = 0;
                v106[3] = 0;
                *v106 = v148;
                v106[1] = v106 + 3;
                v106[2] = 0x100000000;
              }
LABEL_142:
              v112 = *((unsigned int *)v106 + 4);
              if ((_DWORD)v112)
              {
                v113 = (uint64_t *)(v106[1] + 8);
                v114 = 16 * v112;
                while (*((_DWORD *)v113 - 2) != 7)
                {
                  v113 += 2;
                  v114 -= 16;
                  if (!v114)
                    goto LABEL_149;
                }
                if (*v113)
                  sub_1C51F6CAC(v276, *v113);
              }
            }
LABEL_149:
            if ((*(_BYTE *)(v71 + 23) & 0x20) != 0)
            {
              v115 = ***(_QWORD ***)v71;
              p_dst = (const char *)v71;
              v116 = *(_DWORD *)(v115 + 2496);
              if (!v116)
              {
                v149 = 0;
                goto LABEL_201;
              }
              v117 = *(_QWORD *)(v115 + 2480);
              v118 = v116 - 1;
              v119 = v118 & ((v71 >> 4) ^ (v71 >> 9));
              v120 = (_QWORD *)(v117 + 40 * v119);
              v121 = *v120;
              if (*v120 != v71)
              {
                v122 = 0;
                v123 = 1;
                while (v121 != -4096)
                {
                  if (v122)
                    v124 = 0;
                  else
                    v124 = v121 == -8192;
                  if (v124)
                    v122 = v120;
                  v125 = v119 + v123++;
                  v119 = v125 & v118;
                  v120 = (_QWORD *)(v117 + 40 * v119);
                  v121 = *v120;
                  if (*v120 == v71)
                    goto LABEL_160;
                }
                if (v122)
                  v149 = v122;
                else
                  v149 = v120;
LABEL_201:
                v120 = sub_1C541AB24(v115 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v149);
                v150 = (uint64_t)p_dst;
                v120[4] = 0;
                v120[3] = 0;
                *v120 = v150;
                v120[1] = v120 + 3;
                v120[2] = 0x100000000;
              }
LABEL_160:
              v126 = *((unsigned int *)v120 + 4);
              if ((_DWORD)v126)
              {
                v127 = (uint64_t *)(v120[1] + 8);
                v128 = 16 * v126;
                while (*((_DWORD *)v127 - 2) != 8)
                {
                  v127 += 2;
                  v128 -= 16;
                  if (!v128)
                    goto LABEL_167;
                }
                if (*v127)
                  sub_1C51F6CAC(v276, *v127);
              }
            }
LABEL_167:
            if ((*(_BYTE *)(v71 + 23) & 0x20) != 0)
            {
              v129 = ***(_QWORD ***)v71;
              p_dst = (const char *)v71;
              v130 = *(_DWORD *)(v129 + 2496);
              if (!v130)
              {
                v151 = 0;
                goto LABEL_205;
              }
              v131 = *(_QWORD *)(v129 + 2480);
              v132 = v130 - 1;
              v133 = v132 & ((v71 >> 4) ^ (v71 >> 9));
              v134 = (_QWORD *)(v131 + 40 * v133);
              v135 = *v134;
              if (*v134 != v71)
              {
                v136 = 0;
                v137 = 1;
                while (v135 != -4096)
                {
                  if (v136)
                    v138 = 0;
                  else
                    v138 = v135 == -8192;
                  if (v138)
                    v136 = v134;
                  v139 = v133 + v137++;
                  v133 = v139 & v132;
                  v134 = (_QWORD *)(v131 + 40 * v133);
                  v135 = *v134;
                  if (*v134 == v71)
                    goto LABEL_178;
                }
                if (v136)
                  v151 = v136;
                else
                  v151 = v134;
LABEL_205:
                v134 = sub_1C541AB24(v129 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v151);
                v152 = (uint64_t)p_dst;
                v134[4] = 0;
                v134[3] = 0;
                *v134 = v152;
                v134[1] = v134 + 3;
                v134[2] = 0x100000000;
              }
LABEL_178:
              v140 = *((unsigned int *)v134 + 4);
              if ((_DWORD)v140)
              {
                v141 = (uint64_t *)(v134[1] + 8);
                v142 = 16 * v140;
                while (*((_DWORD *)v141 - 2) != 16)
                {
                  v141 += 2;
                  v142 -= 16;
                  if (!v142)
                    goto LABEL_185;
                }
                if (*v141)
                  sub_1C51F6CAC(v276, *v141);
              }
            }
          }
          else if ((v72 & 0x20000000) != 0)
          {
            goto LABEL_96;
          }
LABEL_185:
          v70 = *(_QWORD *)(v70 + 8);
          goto LABEL_88;
        }
        break;
      }
      if ((*(_BYTE *)(v63 + 33) & 0x20) == 0)
      {
        v153 = sub_1C51F6D5C(v242, (_BYTE *)v63);
        if (v154)
        {
          v155 = (const void *)v153;
          v156 = v154;
          p_dst = (const char *)v63;
          v265 = v267;
          v266 = xmmword_1C64638C0;
          if (v154 >= 0x41)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v265, v267, v154, 1);
            v157 = v266;
            v158 = v265;
          }
          else
          {
            v157 = 0;
            v158 = v267;
          }
          memcpy((char *)v158 + v157, v155, v156);
          *(_QWORD *)&v266 = v266 + v156;
          sub_1C62081DC((uint64_t)&__p, (unint64_t)&p_dst);
          if (v265 != v267)
            free(v265);
        }
      }
      v23 = *(_QWORD *)(v23 + 8);
      if (v23 == v237)
        goto LABEL_25;
    }
    v64 = *(uint64_t ****)(v63 + 88);
LABEL_78:
    v65 = v64;
    goto LABEL_79;
  }
LABEL_25:
  sub_1C51F6FBC((uint64_t)v276);
  for (j = *(_QWORD *)(v235 + 16); j != v235 + 8; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v159 = (char *)(j - 56);
    else
      v159 = 0;
    v160 = sub_1C51F6D5C(v242, v159);
    if (v161)
    {
      v162 = (const void *)v160;
      v163 = v161;
      p_dst = v159;
      v265 = v267;
      v266 = xmmword_1C64638C0;
      if (v161 >= 0x41)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v265, v267, v161, 1);
        v164 = v266;
        v165 = v265;
      }
      else
      {
        v164 = 0;
        v165 = v267;
      }
      memcpy((char *)v165 + v164, v162, v163);
      *(_QWORD *)&v266 = v266 + v163;
      sub_1C62081DC((uint64_t)&__p, (unint64_t)&p_dst);
      if (v265 != v267)
        free(v265);
    }
  }
  for (k = *(_QWORD *)(v235 + 48); k != v235 + 40; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v166 = (char *)(k - 48);
    else
      v166 = 0;
    v167 = sub_1C51F6D5C(v242, v166);
    if (v168)
    {
      v169 = (const void *)v167;
      v170 = v168;
      p_dst = v166;
      v265 = v267;
      v266 = xmmword_1C64638C0;
      if (v168 >= 0x41)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v265, v267, v168, 1);
        v171 = v266;
        v172 = v265;
      }
      else
      {
        v171 = 0;
        v172 = v267;
      }
      memcpy((char *)v172 + v171, v169, v170);
      *(_QWORD *)&v266 = v266 + v170;
      sub_1C62081DC((uint64_t)&__p, (unint64_t)&p_dst);
      if (v265 != v267)
        free(v265);
    }
  }
  v26 = v236;
  if ((_DWORD)v269)
  {
    v27 = (uint64_t ****)__p;
    v28 = 96 * v269;
    do
    {
      v29 = *v27;
      v27 += 12;
      p_dst = "__obfs_tmp#";
      v267[0] = 259;
      llvm::Value::setName(v29, (uint64_t)&p_dst);
      v28 -= 96;
    }
    while (v28);
    if ((_DWORD)v269)
    {
      v30 = 96 * v269;
      v31 = (uint64_t ****)__p;
      do
      {
        v32 = (unsigned __int8 *)v31[1];
        v33 = (size_t)v31[2];
        if (((_DWORD)(*v31)[4] & 0xF) != 8)
        {
          v40 = llvm::Obfuscator::obfuscate(v26, v32, v33, 1, 1u);
          v42 = *v31;
          *((_BYTE *)&v241.__r_.__value_.__s + 23) = 1;
          LOWORD(v241.__r_.__value_.__l.__data_) = 1;
          if (v40)
          {
            v43 = v41;
            if (v41 > 0x7FFFFFFFFFFFFFF7)
LABEL_384:
              abort();
            v44 = v40;
            if (v41 >= 0x17)
            {
              v52 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v41 | 7) != 0x17)
                v52 = v41 | 7;
              v53 = v52 + 1;
              v45 = operator new(v52 + 1);
              v239 = v43;
              v240 = v53 | 0x8000000000000000;
              v238 = v45;
            }
            else
            {
              HIBYTE(v240) = v41;
              v45 = &v238;
              if (!v41)
              {
LABEL_56:
                *((_BYTE *)v45 + v43) = 0;
                v48 = HIBYTE(v240);
                v47 = (void **)v238;
                v46 = v239;
                v26 = v236;
                goto LABEL_57;
              }
            }
            memmove(v45, v44, v43);
            goto LABEL_56;
          }
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v238 = 0;
          v239 = 0;
          v240 = 0;
LABEL_57:
          v54 = v48 < 0;
          if (v48 >= 0)
            v55 = &v238;
          else
            v55 = v47;
          v56 = v48 & 0x7F;
          if (v54)
            v57 = v46;
          else
            v57 = v56;
          v58 = std::string::append(&v241, (const std::string::value_type *)v55, v57);
          v59 = (_QWORD *)v58->__r_.__value_.__r.__words[2];
          __dst = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v262 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          v267[0] = 260;
          p_dst = (const char *)&__dst;
          llvm::Value::setName(v42, (uint64_t)&p_dst);
          if (SHIBYTE(v262) < 0)
            operator delete((void *)__dst);
          if (SHIBYTE(v240) < 0)
            operator delete(v238);
          if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_70;
          v51 = (void *)v241.__r_.__value_.__r.__words[0];
          goto LABEL_69;
        }
        v34 = llvm::Obfuscator::obfuscate(v26, v32, v33, 0, 0);
        v36 = *v31;
        if (!v34)
        {
          __dst = 0uLL;
          v262 = 0;
          goto LABEL_50;
        }
        v37 = v35;
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_384;
        v38 = v34;
        if (v35 >= 0x17)
        {
          v49 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v49 = v35 | 7;
          v50 = v49 + 1;
          v39 = (__int128 *)operator new(v49 + 1);
          v262 = (_QWORD *)(v50 | 0x8000000000000000);
          *(_QWORD *)&__dst = v39;
          *((_QWORD *)&__dst + 1) = v37;
        }
        else
        {
          HIBYTE(v262) = v35;
          v39 = &__dst;
          if (!v35)
            goto LABEL_49;
        }
        memmove(v39, v38, v37);
LABEL_49:
        *((_BYTE *)v39 + v37) = 0;
        v26 = v236;
LABEL_50:
        v267[0] = 260;
        p_dst = (const char *)&__dst;
        llvm::Value::setName(v36, (uint64_t)&p_dst);
        if (SHIBYTE(v262) < 0)
        {
          v51 = (void *)__dst;
LABEL_69:
          operator delete(v51);
        }
LABEL_70:
        v31 += 12;
        v30 -= 96;
      }
      while (v30);
    }
  }
  sub_1C6208380((char **)&__p);
  v60 = v293;
  if (v293 == v292)
  {
    v61 = 4;
    v60 = v292;
    v62 = v235;
  }
  else
  {
    v62 = v235;
    if (!v293)
      goto LABEL_248;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_248:
  MEMORY[0x1CAA32FB4](v291, 8);
  if (v276[0] != &v277)
    free(v276[0]);
  v276[1] = 0;
  v276[0] = 0;
  v277 = 0;
  v279 = 0;
  v278 = 0;
  v280 = 0;
  v282 = 0;
  v281 = 0;
  v283 = 0;
  v285 = 0;
  v284 = 0;
  v286 = 0;
  v289 = 0;
  v287 = 0;
  v288 = 0;
  v290 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v276, (const llvm::Module *)v62, 1);
  v173 = (uint64_t *)v287;
  v174 = v288;
  while (v173 != v174)
  {
    v175 = *v173;
    v176 = *(unsigned __int8 **)(*v173 + 24);
    if (v176)
    {
      v178 = *(_QWORD *)v176;
      v176 += 16;
      v177 = v178;
    }
    else
    {
      v177 = 0;
    }
    v179 = llvm::Obfuscator::obfuscate(v26, v176, v177, 0, 0);
    llvm::StructType::setName(v175, v179, v180);
    ++v173;
  }
  v181 = *(_QWORD *)v62;
  *(_QWORD *)&__dst = &off_1E8148060;
  *((_QWORD *)&__dst + 1) = v26;
  v262 = v248;
  v263 = &__dst;
  sub_1C51F6C28((uint64_t)&__p, v181, (uint64_t)&__dst);
  v182 = v263;
  if (v263 == &__dst)
  {
    v183 = (void (**)(__int128 *))(__dst + 32);
    v182 = &__dst;
  }
  else
  {
    if (!v263)
      goto LABEL_261;
    v183 = (void (**)(__int128 *))(*(_QWORD *)v263 + 40);
  }
  (*v183)(v182);
LABEL_261:
  p_dst = "llvm.dbg.cu";
  v267[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v62, (uint64_t)&p_dst);
  if (NamedMetadata)
    sub_1C51F71D4(&__p, NamedMetadata);
  p_dst = "llvm.gcov";
  v267[0] = 259;
  v185 = llvm::Module::getNamedMetadata(v62, (uint64_t)&p_dst);
  if (v185)
    sub_1C51F71D4(&__p, v185);
  sub_1C51F6FBC((uint64_t)&__p);
  v186 = sub_1C4FB7E80(*(uint64_t **)(v62 + 112), "llvm.dbg.declare", 0x10uLL);
  if (v186)
  {
    if (!*(_BYTE *)(v186 + 16))
    {
      for (m = *(_QWORD *)(v186 + 8); m; m = *(_QWORD *)(m + 8))
      {
        v220 = *(_QWORD *)(m + 24);
        v221 = *(_DWORD *)(*(_QWORD *)(v220 - 32) + 36);
        if (v220 && v221 == 56 || v220 && v221 == 58 || v220 && v221 == 55)
        {
          v222 = v220 - 32 * (*(_DWORD *)(v220 + 20) & 0x7FFFFFF) + 32;
        }
        else
        {
          if (v221 != 57)
            v220 = 0;
          v222 = v220 - 32 * (*(_DWORD *)(v220 + 20) & 0x7FFFFFF);
        }
        sub_1C51F6CAC(&__p, *(_QWORD *)(*(_QWORD *)v222 + 24));
      }
    }
  }
  v187 = sub_1C4FB7E80(*(uint64_t **)(v62 + 112), "llvm.dbg.value", 0xEuLL);
  if (v187)
  {
    if (!*(_BYTE *)(v187 + 16))
    {
      for (n = *(_QWORD *)(v187 + 8); n; n = *(_QWORD *)(n + 8))
      {
        v224 = *(_QWORD *)(n + 24);
        v225 = *(_DWORD *)(*(_QWORD *)(v224 - 32) + 36);
        if (v224 && v225 == 56 || v224 && v225 == 58 || v224 && v225 == 55)
        {
          v226 = v224 - 32 * (*(_DWORD *)(v224 + 20) & 0x7FFFFFF) + 32;
        }
        else
        {
          if (v225 != 57)
            v224 = 0;
          v226 = v224 - 32 * (*(_DWORD *)(v224 + 20) & 0x7FFFFFF);
        }
        sub_1C51F6CAC(&__p, *(_QWORD *)(*(_QWORD *)v226 + 24));
      }
    }
  }
  v188 = sub_1C4FB7E80(*(uint64_t **)(v62 + 112), "llvm.dbg.addr", 0xDuLL);
  if (v188)
  {
    if (!*(_BYTE *)(v188 + 16))
    {
      for (ii = *(_QWORD *)(v188 + 8); ii; ii = *(_QWORD *)(ii + 8))
      {
        v228 = *(_QWORD *)(ii + 24);
        v229 = *(_DWORD *)(*(_QWORD *)(v228 - 32) + 36);
        if (v228 && v229 == 56 || v228 && v229 == 58 || v228 && v229 == 55)
        {
          v230 = v228 - 32 * (*(_DWORD *)(v228 + 20) & 0x7FFFFFF) + 32;
        }
        else
        {
          if (v229 != 57)
            v228 = 0;
          v230 = v228 - 32 * (*(_DWORD *)(v228 + 20) & 0x7FFFFFF);
        }
        sub_1C51F6CAC(&__p, *(_QWORD *)(*(_QWORD *)v230 + 24));
      }
    }
  }
  v189 = sub_1C4FB7E80(*(uint64_t **)(v62 + 112), "llvm.dbg.label", 0xEuLL);
  if (v189)
  {
    if (!*(_BYTE *)(v189 + 16))
    {
      for (jj = *(_QWORD *)(v189 + 8); jj; jj = *(_QWORD *)(jj + 8))
      {
        v232 = *(_QWORD *)(jj + 24);
        v233 = *(_DWORD *)(*(_QWORD *)(v232 - 32) + 36);
        if (v232 && v233 == 56 || v232 && v233 == 58 || v232 && v233 == 55)
        {
          v234 = v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF) + 32;
        }
        else
        {
          if (v233 != 57)
            v232 = 0;
          v234 = v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF);
        }
        sub_1C51F6CAC(&__p, *(_QWORD *)(*(_QWORD *)v234 + 24));
      }
    }
  }
  sub_1C51F6FBC((uint64_t)&__p);
  v190 = *(_QWORD *)(v62 + 32);
  if (v190 != v237)
  {
    while (1)
    {
      v191 = v190 - 56;
      if (!v190)
        v191 = 0;
      v192 = v191 + 72;
      v193 = *(_QWORD *)(v191 + 80);
LABEL_273:
      if (v193 != v192)
        break;
      v190 = *(_QWORD *)(v190 + 8);
      if (v190 == v237)
        goto LABEL_307;
    }
    v194 = v193 - 24;
    if (!v193)
      v194 = 0;
    v195 = v194 + 40;
    for (kk = *(_QWORD *)(v194 + 48); ; kk = *(_QWORD *)(kk + 8))
    {
      if (kk == v195)
      {
        v193 = *(_QWORD *)(v193 + 8);
        goto LABEL_273;
      }
      v197 = kk ? (uint64_t ***)(kk - 24) : 0;
      v267[0] = 257;
      llvm::Value::setName(v197, (uint64_t)&p_dst);
      sub_1C51F6CAC(&__p, (uint64_t)v197[6]);
      if ((*((_BYTE *)v197 + 23) & 0x20) != 0)
        break;
LABEL_299:
      ;
    }
    v198 = ***v197;
    p_dst = (const char *)v197;
    v199 = *(_DWORD *)(v198 + 2496);
    if (v199)
    {
      v200 = *(_QWORD *)(v198 + 2480);
      v201 = v199 - 1;
      v202 = v201 & ((v197 >> 4) ^ (v197 >> 9));
      v203 = (uint64_t ****)(v200 + 40 * v202);
      v204 = *v203;
      if (*v203 == v197)
        goto LABEL_292;
      v205 = 0;
      v206 = 1;
      while (v204 != (uint64_t ***)-4096)
      {
        if (v205)
          v207 = 0;
        else
          v207 = v204 == (uint64_t ***)-8192;
        if (v207)
          v205 = v203;
        v208 = v202 + v206++;
        v202 = v208 & v201;
        v203 = (uint64_t ****)(v200 + 40 * v202);
        v204 = *v203;
        if (*v203 == v197)
          goto LABEL_292;
      }
      if (v205)
        v212 = v205;
      else
        v212 = v203;
    }
    else
    {
      v212 = 0;
    }
    v203 = (uint64_t ****)sub_1C541AB24(v198 + 2480, (uint64_t)&p_dst, (uint64_t *)&p_dst, v212);
    v213 = (uint64_t)p_dst;
    v203[4] = 0;
    v203[3] = 0;
    *v203 = (uint64_t ***)v213;
    v203[1] = (uint64_t ***)(v203 + 3);
    v203[2] = (uint64_t ***)0x100000000;
LABEL_292:
    v209 = *((unsigned int *)v203 + 4);
    if ((_DWORD)v209)
    {
      v210 = (uint64_t *)(v203[1] + 1);
      v211 = 16 * v209;
      while (*((_DWORD *)v210 - 2) != 18)
      {
        v210 += 2;
        v211 -= 16;
        if (!v211)
          goto LABEL_299;
      }
      if (*v210)
        sub_1C51F6CAC(&__p, *v210);
    }
    goto LABEL_299;
  }
LABEL_307:
  sub_1C51F6FBC((uint64_t)&__p);
  v214 = v273;
  if (v273 == v272)
  {
    v215 = 4;
    v214 = v272;
  }
  else
  {
    if (!v273)
      goto LABEL_312;
    v215 = 5;
  }
  (*(void (**)(void))(*v214 + 8 * v215))();
LABEL_312:
  MEMORY[0x1CAA32FB4](v271, 8);
  if (__p != v270)
    free(__p);
  if (v287)
  {
    v288 = (uint64_t *)v287;
    operator delete(v287);
  }
  MEMORY[0x1CAA32FB4](v284, 8);
  MEMORY[0x1CAA32FB4](v281, 8);
  MEMORY[0x1CAA32FB4](v278, 8);
  MEMORY[0x1CAA32FB4](v276[0], 8);
  MEMORY[0x1CAA32FB4](v243[0], 8);
  if (v294 != v296)
    free(v294);
  if (SHIBYTE(v246) < 0)
    operator delete(v245[0]);
  v216 = v249;
  if (v249 == v248)
  {
    v217 = (void (**)(_QWORD *))(v248[0] + 32);
    v216 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_325;
    v217 = (void (**)(_QWORD *))(*v249 + 40);
  }
  (*v217)(v216);
LABEL_325:
  if (v251[0] != v252)
    free(v251[0]);
  sub_1C61BB478((uint64_t *)v253);
  return 0;
}

uint64_t sub_1C51F6AA4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Obfuscate all strings in the module";
  *(_QWORD *)(v2 + 8) = 35;
  *(_QWORD *)(v2 + 16) = "obfuscate-module";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FD370;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51F7410;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createObfuscateModulePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C51F6B60(v1);
}

uint64_t sub_1C51F6B60(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7FD370;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81480A8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FD378);
  if (v3 != -1)
  {
    v7[0] = sub_1C51F6AA4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FD378, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C51F6C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a2;
  v4 = *(_QWORD *)(a3 + 24);
  if (v4)
  {
    if (v4 == a3)
    {
      *(_QWORD *)(a1 + 200) = a1 + 176;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 200) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 200) = 0;
  }
  return a1;
}

_DWORD *sub_1C51F6CAC(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = result[40];
    if (v4)
    {
      v5 = *((_QWORD *)result + 18);
      v6 = v4 - 1;
      v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
      v8 = *(_QWORD *)(v5 + 8 * v7);
      if (v8 == a2)
        return result;
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v7 + v9++;
        v7 = v10 & v6;
        v8 = *(_QWORD *)(v5 + 8 * v7);
        if (v8 == a2)
          return result;
      }
    }
  }
  v11 = result[2];
  if (v11 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11 + 1, 8);
    LODWORD(v11) = v3[2];
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v11) = a2;
  ++v3[2];
  return result;
}

uint64_t sub_1C51F6D5C(uint64_t **a1, _BYTE *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  int v13;
  unint64_t *v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE *v35;
  int v36;
  int v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[2];

  if ((a2[23] & 0x10) == 0)
    return 0;
  v4 = *((_DWORD *)a2 + 8) & 0xF;
  v5 = ***(_QWORD ***)a2;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  v8 = a2 >> 4;
  if ((_DWORD)v7)
  {
    LODWORD(v9) = (v7 - 1) & (v8 ^ (a2 >> 9));
    v10 = (_QWORD *)(v6 + 16 * v9);
    v11 = (_BYTE *)*v10;
    if ((_BYTE *)*v10 == a2)
      goto LABEL_9;
    v12 = 1;
    while (v11 != (_BYTE *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v7 - 1);
      v11 = *(_BYTE **)(v6 + 16 * v9);
      if (v11 == a2)
      {
        v10 = (_QWORD *)(v6 + 16 * v9);
        goto LABEL_9;
      }
    }
  }
  v10 = (_QWORD *)(v6 + 16 * v7);
LABEL_9:
  v14 = (unint64_t *)v10[1];
  v17 = *v14;
  result = (uint64_t)(v14 + 2);
  v16 = v17;
  if (v4 == 8)
    return result;
  if (v16 >= 5 && *(_DWORD *)result == 1836477548 && *(_BYTE *)(result + 4) == 46)
    return 0;
  if (!(_DWORD)v7)
    goto LABEL_21;
  LODWORD(v19) = (v7 - 1) & (v8 ^ (a2 >> 9));
  v20 = (_QWORD *)(v6 + 16 * v19);
  v21 = (_BYTE *)*v20;
  if ((_BYTE *)*v20 != a2)
  {
    v22 = 1;
    while (v21 != (_BYTE *)-4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v7 - 1);
      v21 = *(_BYTE **)(v6 + 16 * v19);
      if (v21 == a2)
      {
        v20 = (_QWORD *)(v6 + 16 * v19);
        goto LABEL_22;
      }
    }
LABEL_21:
    v20 = (_QWORD *)(v6 + 16 * v7);
  }
LABEL_22:
  v24 = v20[1];
  if (*(_QWORD *)v24 < 9uLL
    || ((v25 = *(_QWORD *)(v24 + 16), v26 = *(unsigned __int8 *)(v24 + 24), v25 == 0x72612E676E616C63)
      ? (v27 = v26 == 99)
      : (v27 = 0),
        !v27))
  {
    v28 = *a1;
    v28[1] = 0;
    llvm::TargetMachine::getNameWithPrefix(*a1[1], (uint64_t)v28, (const llvm::GlobalValue *)a2, (llvm::Mangler *)a1[2], 0);
    v29 = a1[3];
    if ((a2[23] & 0x10) == 0)
    {
      v40 = 0;
      v39 = &byte_1C871356D;
      goto LABEL_39;
    }
    v30 = ***(_QWORD ***)a2;
    v31 = *(_QWORD *)(v30 + 152);
    v32 = *(unsigned int *)(v30 + 168);
    if ((_DWORD)v32)
    {
      LODWORD(v33) = (v32 - 1) & (v8 ^ (a2 >> 9));
      v34 = (_QWORD *)(v31 + 16 * v33);
      v35 = (_BYTE *)*v34;
      if ((_BYTE *)*v34 == a2)
      {
LABEL_38:
        v38 = (_QWORD *)v34[1];
        v41 = *v38;
        v39 = (char *)(v38 + 2);
        v40 = v41;
LABEL_39:
        v43 = **a1;
        v42 = (*a1)[1];
        v46[0] = v39;
        v46[1] = v40;
        v45[0] = v43;
        v45[1] = v42;
        v44 = v29[3];
        if (!v44)
        {
          sub_1C485C2F0();
          return sub_1C51F6FBC();
        }
        if (((*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v44 + 48))(v44, v46, v45) & 1) == 0)
          return **a1;
        return 0;
      }
      v36 = 1;
      while (v35 != (_BYTE *)-4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & (v32 - 1);
        v35 = *(_BYTE **)(v31 + 16 * v33);
        if (v35 == a2)
        {
          v34 = (_QWORD *)(v31 + 16 * v33);
          goto LABEL_38;
        }
      }
    }
    v34 = (_QWORD *)(v31 + 16 * v32);
    goto LABEL_38;
  }
  return 0;
}

void sub_1C51F6FBC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int **v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int **v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  size_t v30;
  llvm::Metadata *v31;
  unint64_t v32;
  unsigned int *v33;
  _QWORD v34[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1)
  {
    v3 = a1 + 144;
    v4 = a1 + 16;
    while (1)
    {
      v33 = 0;
      v5 = *(unsigned int **)(*(_QWORD *)a1 + 8 * v1-- - 8);
      *(_DWORD *)(a1 + 8) = v1;
      v33 = v5;
      if (v5)
        break;
LABEL_35:
      if (!v1)
        return;
    }
    v6 = *(_DWORD *)(a1 + 160);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 144);
      v8 = v6 - 1;
      v9 = v8 & ((v5 >> 4) ^ (v5 >> 9));
      v10 = (unsigned int **)(v7 + 8 * v9);
      v11 = *v10;
      if (v5 == *v10)
      {
LABEL_34:
        v1 = *(_DWORD *)(a1 + 8);
        goto LABEL_35;
      }
      v12 = 1;
      v13 = *v10;
      v14 = v8 & ((v5 >> 4) ^ (v5 >> 9));
      while (v13 != (unsigned int *)-4096)
      {
        v15 = v14 + v12++;
        v14 = v15 & v8;
        v13 = *(unsigned int **)(v7 + 8 * v14);
        if (v5 == v13)
          goto LABEL_34;
      }
      v16 = 0;
      v17 = 1;
      while (v11 != (unsigned int *)-4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v11 == (unsigned int *)-8192;
        if (v18)
          v16 = v10;
        v19 = v9 + v17++;
        v9 = v19 & v8;
        v10 = (unsigned int **)(v7 + 8 * v9);
        v11 = *v10;
        if (v5 == *v10)
          goto LABEL_23;
      }
      if (v16)
        v20 = v16;
      else
        v20 = v10;
    }
    else
    {
      v20 = 0;
    }
    v21 = sub_1C4A07FEC(v3, (uint64_t)&v33, (uint64_t *)&v33, v20);
    *v21 = v33;
    v5 = v33;
LABEL_23:
    v22 = v5[2];
    if ((_DWORD)v22)
    {
      v23 = 0;
      while (1)
      {
        v24 = *(unsigned __int8 **)&v5[2 * v23 + -2 * v22];
        if (v24)
        {
          if (*v24)
          {
            if (*v24 - 4 < 0x1F)
            {
              v32 = *(unsigned int *)(a1 + 8);
              if (v32 >= *(unsigned int *)(a1 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v4, v32 + 1, 8);
                v32 = *(unsigned int *)(a1 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v24;
              ++*(_DWORD *)(a1 + 8);
            }
          }
          else
          {
            v25 = *(uint64_t **)(a1 + 168);
            v26 = (uint64_t *)*((_QWORD *)v24 + 1);
            v27 = *v26;
            v34[0] = v26 + 3;
            v34[1] = v27;
            v28 = *(_QWORD *)(a1 + 200);
            if (!v28)
            {
              sub_1C485C2F0();
              sub_1C51F71D4();
              return;
            }
            v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v34);
            v31 = (llvm::Metadata *)llvm::MDString::get(v25, v29, v30);
            llvm::MDNode::replaceOperandWith((llvm::MDNode *)v5, v23, v31);
          }
        }
        ++v23;
        v5 = v33;
        v22 = v33[2];
        if (v23 >= v22)
          goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
}

_DWORD *sub_1C51F71D4(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 8 * v2;
    do
    {
      result = sub_1C51F6CAC(v4, *(_QWORD *)(**(_QWORD **)(a2 + 48) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_1C51F7234()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51F7248(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8148018;
  result[1] = v3;
  return result;
}

uint64_t sub_1C51F727C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8148018;
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_1C51F7298(uint64_t a1, uint64_t a2)
{
  return llvm::Obfuscator::obfuscate(*(_QWORD *)(a1 + 8), *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8), 0, 0);
}

unint64_t sub_1C51F72B0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 96 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C6208248(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C6208248(a1, v5);
    }
  }
  return a2;
}

void sub_1C51F731C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C51F7330(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8148060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C51F7368(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8148060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *sub_1C51F7388(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v3 = *(unsigned __int8 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v9[0] = v3;
  v9[1] = v4;
  v8[0] = v3;
  v8[1] = v4;
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    if (((*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v9, v8) & 1) == 0)
      return llvm::Obfuscator::obfuscate(*(_QWORD *)(a1 + 8), v3, v4, 1, 0);
    return v3;
  }
  else
  {
    sub_1C485C2F0();
    return (unsigned __int8 *)sub_1C51F7410();
  }
}

uint64_t sub_1C51F7410()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C51F6B60(v0);
}

void sub_1C51F743C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51F7460(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C51F7494(uint64_t a1, llvm *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  const llvm::TargetMachine *v6;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::TargetPassConfig::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::TargetPassConfig::ID);
  llvm::obfuscateModule(a2, *(llvm::Module **)(v5 + 112), v6);
  return 0;
}

void sub_1C51F74F8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C51F750C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8148148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C51F754C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8148148;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C51F7574(uint64_t **a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  size_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  size_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  size_t __n;
  _BYTE *v38;
  int v40;

  __n = *(_QWORD *)(a2 + 8);
  v38 = *(_BYTE **)a2;
  v3 = *a3;
  v4 = (size_t)a3[1];
  v5 = a1[1];
  v6 = *((unsigned int *)v5 + 2);
  if ((_DWORD)v6)
  {
    v7 = 0;
    if (v4)
    {
      v8 = a3[1];
      v9 = *a3;
      do
      {
        v10 = *v9++;
        v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    v11 = *v5;
    v12 = *v5 + 8 * v6 + 8;
    v13 = 1;
    v14 = v7;
    while (1)
    {
      v15 = v14 & (v6 - 1);
      v16 = *(_QWORD **)(v11 + 8 * v15);
      if (v16 != (_QWORD *)-8)
      {
        if (!v16)
          goto LABEL_15;
        if (*(_DWORD *)(v12 + 4 * v15) == v7
          && v4 == *v16
          && (!v4 || !memcmp(v3, (char *)v16 + *((unsigned int *)v5 + 5), v4)))
        {
          break;
        }
      }
      v14 = v13 + v15;
      ++v13;
    }
    if ((_DWORD)v15 != -1 && (int)v15 != v6)
      return 1;
  }
LABEL_15:
  if ((llvm::TargetLibraryInfoImpl::getLibFunc(*a1[2], v38, __n, &v40) & 1) != 0)
    return 1;
  if (v4 >= 9)
  {
    if (*(_QWORD *)v3 == 0x63617274645F5F5FLL && v3[8] == 101)
      return 1;
    if (v4 >= 0xE)
    {
      if (*(_QWORD *)v3 == 0x246E6F6974636573 && *(_QWORD *)(v3 + 6) == 0x247472617473246ELL)
        return 1;
      if (*(_QWORD *)v3 == 0x246E6F6974636573 && *((_DWORD *)v3 + 2) == 610561637)
        return 1;
      if (*(_QWORD *)v3 == 0x24746E656D676573 && *(_QWORD *)(v3 + 6) == 0x2474726174732474)
        return 1;
    }
    else
    {
      if (v4 < 0xC)
        goto LABEL_18;
      if (*(_QWORD *)v3 == 0x246E6F6974636573 && *((_DWORD *)v3 + 2) == 610561637)
        return 1;
    }
    if (*(_QWORD *)v3 == 0x24746E656D676573 && *((_DWORD *)v3 + 2) == 610561637)
      return 1;
  }
LABEL_18:
  v18 = a1[3];
  v19 = *((unsigned int *)v18 + 2);
  if ((_DWORD)v19)
  {
    v20 = 0;
    if (v4)
    {
      v21 = v4;
      v22 = v3;
      do
      {
        v23 = *v22++;
        v20 = 33 * v20 + v23;
        --v21;
      }
      while (v21);
    }
    v24 = *v18;
    v25 = *v18 + 8 * v19 + 8;
    v26 = 1;
    v27 = v20;
    while (1)
    {
      v28 = v27 & (v19 - 1);
      v29 = *(_QWORD **)(v24 + 8 * v28);
      if (v29 != (_QWORD *)-8)
      {
        if (!v29)
        {
          v30 = v19;
          return v30 != v19;
        }
        if (*(_DWORD *)(v25 + 4 * v28) == v20
          && v4 == *v29
          && (!v4 || !memcmp(v3, (char *)v29 + *((unsigned int *)v18 + 5), v4)))
        {
          break;
        }
      }
      v27 = v26 + v28;
      ++v26;
    }
    v30 = (int)v28;
    if ((_DWORD)v28 == -1)
      v30 = v19;
  }
  else
  {
    v19 = 0;
    v30 = 0;
  }
  return v30 != v19;
}

uint64_t sub_1C51F7874()
{
  uint64_t v0;
  __int128 v2;
  int v3;
  int v4;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED7FD458, 0, 0);
  qword_1ED7FD4D8 = 0;
  qword_1ED7FD4E0 = 0;
  qword_1ED7FD500 = 0;
  unk_1ED7FD508 = 0;
  qword_1ED7FD4F8 = 0;
  byte_1ED7FD510 = 0;
  qword_1ED7FD4E8 = 0;
  unk_1ED7FD4F0 = &unk_1E819E950;
  qword_1ED7FD458 = (uint64_t)&unk_1E819E480;
  qword_1ED7FD518 = (uint64_t)&unk_1E819E970;
  qword_1ED7FD520[0] = &off_1E7FA8CB8;
  qword_1ED7FD538 = (uint64_t)qword_1ED7FD520;
  llvm::cl::Option::setArgStr(v0, "obfuscation-symbol-map", 0x16uLL);
  word_1ED7FD462 = word_1ED7FD462 & 0xFFE7 | 0x10;
  qword_1ED7FD478 = (uint64_t)"Specify the symbol_map output";
  unk_1ED7FD480 = 29;
  qword_1ED7FD488 = (uint64_t)"filename.bcsymbolmap";
  unk_1ED7FD490 = 20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FD458);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7FD458, &dword_1C475E000);
  v3 = 2;
  v4 = 1;
  *(_QWORD *)&v2 = "<sym name>";
  *((_QWORD *)&v2 + 1) = 10;
  sub_1C62083F4(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED7FD380, &dword_1C475E000);
}

uint64_t llvm::NonRelocatableStringpool::getEntry(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  size_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = a3;
  v4 = a2;
  if (!a3 && *(_DWORD *)(a1 + 12))
    return *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 168);
  if (v6)
  {
    v16[0] = a2;
    v16[1] = a3;
    v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v16);
    v3 = v7;
  }
  v14 = 0uLL;
  v15 = 0;
  v8 = sub_1C51F7CBC((llvm::StringMapImpl *)a1, v4, v3, &v14);
  v9 = *v8;
  if (v10 || *(_DWORD *)(v9 + 24) == -1)
  {
    v11 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v11 + 1;
    *(_DWORD *)(v9 + 24) = v11;
    v12 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(a1 + 120) = v3 + v12 + 1;
    v9 = *v8;
  }
  return v9 | 4;
}

unint64_t llvm::NonRelocatableStringpool::internString(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  size_t v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = a2;
  v5 = *((_QWORD *)a1 + 21);
  if (v5)
  {
    v10[0] = a2;
    v10[1] = a3;
    v3 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, v10);
    a3 = v6;
  }
  v8 = xmmword_1C85FB6E0;
  v9 = 0xFFFFFFFFLL;
  return *sub_1C51F7CBC(a1, v3, a3, &v8) + 32;
}

unint64_t llvm::NonRelocatableStringpool::getEntriesForEmission@<X0>(uint64_t **this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)operator new(8 * v4);
    v6 = &v5[v4];
    *a2 = (unint64_t)v5;
    a2[1] = (unint64_t)v5;
    a2[2] = (unint64_t)v6;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7)
  {
    for (i = *this; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *this;
  }
  v10 = (uint64_t)&(*this)[v7];
  if (i == (uint64_t *)v10)
  {
    v22 = (unint64_t)v5;
  }
  else
  {
    v11 = *i;
    v12 = v5;
    do
    {
      if (*(_DWORD *)(v11 + 24) != -1)
      {
        if (v5 >= v6)
        {
          v14 = v5 - v12;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          if (((char *)v6 - (char *)v12) >> 2 > v15)
            v15 = ((char *)v6 - (char *)v12) >> 2;
          if ((unint64_t)((char *)v6 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
          {
            if (v16 >> 61)
              sub_1C4764EE4();
            v17 = (char *)operator new(8 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = (uint64_t *)&v17[8 * v14];
          *v18 = v11 | 4;
          v13 = v18 + 1;
          while (v5 != v12)
          {
            v19 = *--v5;
            *--v18 = v19;
          }
          v6 = (uint64_t *)&v17[8 * v16];
          *a2 = (unint64_t)v18;
          a2[1] = (unint64_t)v13;
          a2[2] = (unint64_t)v6;
          if (v12)
            operator delete(v12);
          v12 = v18;
        }
        else
        {
          *v5 = v11 | 4;
          v13 = v5 + 1;
        }
        a2[1] = (unint64_t)v13;
        v5 = v13;
      }
      do
      {
        v20 = i[1];
        ++i;
        v11 = v20;
        if (v20)
          v21 = v11 == -8;
        else
          v21 = 1;
      }
      while (v21);
    }
    while (i != (uint64_t *)v10);
    v22 = *a2;
  }
  v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v5 - v22) >> 3);
  if (v5 == (uint64_t *)v22)
    v24 = 0;
  else
    v24 = v23;
  return sub_1C51F7ED8(v22, v5, v24, 1);
}

unint64_t *sub_1C51F7CBC(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, __int128 *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *i;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v28;
  __int128 *v29;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *(_QWORD *)a1 = v28;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v29 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_20:
  i = (unint64_t *)(v12 + 8 * v18);
  if (v19 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v19)
  {
    return i;
  }
  v22 = sub_1C484358C((uint64_t)a1 + 24, __n + 33, 3);
  v23 = v22;
  v24 = v22 + 32;
  if (__n)
    memcpy((void *)(v22 + 32), a2, __n);
  *(_BYTE *)(v24 + __n) = 0;
  *(_QWORD *)v23 = __n;
  v25 = *v29;
  *(_QWORD *)(v23 + 24) = *((_QWORD *)v29 + 2);
  *(_OWORD *)(v23 + 8) = v25;
  *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

unint64_t sub_1C51F7ED8(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t *v90;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C51F8668(v8, v8 + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_1C51F891C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = (unint64_t)sub_1C51F891C(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 24);
          if (v46 < *(_DWORD *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFF8) + 24))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v56 < *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v88 = *v7;
              v87 = v7[1];
              v7 = v49;
              v89 = *(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v89 < *(_DWORD *)((v88 & 0xFFFFFFFFFFFFFFF8) + 24))
              {
                v90 = v7;
                do
                {
                  *v90 = v88;
                  v88 = *(v90 - 2);
                  --v90;
                }
                while (v89 < *(_DWORD *)((v88 & 0xFFFFFFFFFFFFFFF8) + 24));
                *v90 = v87;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10)
                {
                  result = *(unsigned int *)((v64[1] & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (*(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24) < result)
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_DWORD *)((*v66 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (*(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24) >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    v70 = (2 * v63) | 1;
                    v64 = &v8[v70];
                    v63 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v63 >= v10)
                    {
                      v63 = v70;
                    }
                    else if (*(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v64[1] & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24))
                    {
                      v63 = v70;
                    }
                    else
                    {
                      v65 = v64[1];
                      ++v64;
                    }
                    result = *(unsigned int *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v66 = v69;
                  }
                  while (result >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v71 = 2 * v71 + 2;
                if (v71 >= v10)
                {
                  v71 = v78;
                }
                else
                {
                  result = *(unsigned int *)((v76 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (result >= *(_DWORD *)((v75[1] & 0xFFFFFFFFFFFFFFF8) + 24))
                  {
                    v71 = v78;
                  }
                  else
                  {
                    v76 = v75[1];
                    ++v75;
                  }
                }
                *v73 = v76;
                v73 = v75;
              }
              while (v71 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v79 = (char *)v75 - (char *)v8 + 8;
                if (v79 >= 9)
                {
                  v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                  v81 = &v8[v80];
                  v82 = *v81;
                  v83 = *v75;
                  v84 = *(_DWORD *)((*v75 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (*(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24) < v84)
                  {
                    do
                    {
                      v85 = v81;
                      *v75 = v82;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v8[v80];
                      v82 = *v81;
                      v75 = v85;
                    }
                    while (*(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24) < v84);
                    *v85 = v83;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)sub_1C51F8668(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C51F8668(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C51F8668(v7 + 1, v12 - 1, a2 - 2);
          sub_1C51F8668(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)sub_1C51F8668(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
          if (*(_DWORD *)((*(v7 - 1) & 0xFFFFFFFFFFFFFFF8) + 24) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = sub_1C51F7ED8(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C51F8708(v7, v8 - 1);
        result = sub_1C51F8708(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C51F8668(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *a3;
  v8 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C51F8708(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C51F8668(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C51F891C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C51F891C(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v25 < *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C51F8668(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v14 < *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C51F891C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C51F8668(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C51F89C8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Optimize machine instruction PHIs";
  *(_QWORD *)(v2 + 8) = 33;
  *(_QWORD *)(v2 + 16) = "opt-phis";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB5;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51F8A58;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C51F8A58()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB5) = &off_1E81481E0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FD540);
  if (v2 != -1)
  {
    v6[0] = sub_1C51F89C8;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FD540, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51F8B30(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C51F8BC4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51F8C50(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C51F8C80(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[132];
  unsigned int v44[3];

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) == 0)
  {
    a1[31] = *(_QWORD *)(a2 + 40);
    a1[32] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v4 = *(_QWORD *)(a2 + 328);
    v36 = a2 + 320;
    if (v4 != a2 + 320)
    {
      v5 = 0;
      while (1)
      {
        v38 = v5;
        v6 = v4 + 48;
        v37 = v4;
        v7 = *(_QWORD *)(v4 + 56);
        if (v7 != v4 + 48)
          break;
        v8 = 0;
LABEL_80:
        v5 = v38 | v8;
        v4 = *(_QWORD *)(v37 + 8);
        if (v4 == v36)
          return v5 & 1;
      }
      v8 = 0;
      while (1)
      {
        if (!v7 || (v9 = v7, (*(_BYTE *)v7 & 4) == 0))
        {
          v9 = v7;
          if ((*(_WORD *)(v7 + 44) & 8) != 0)
          {
            v9 = v7;
            do
              v9 = *(_QWORD *)(v9 + 8);
            while ((*(_WORD *)(v9 + 44) & 8) != 0);
          }
        }
        v10 = **(unsigned __int16 **)(v7 + 16);
        if (v10 != 69 && v10 != 0)
          goto LABEL_80;
        v12 = *(_QWORD *)(v9 + 8);
        v44[0] = 0;
        v39 = v43;
        v40 = v43;
        v41 = 16;
        v42 = 0;
        if (!sub_1C51F90CC((uint64_t)a1, v7, v44, (llvm::SmallPtrSetImplBase *)&v39))
          break;
        v13 = v44[0];
        if (!v44[0])
          break;
        v14 = *(unsigned int *)(*(_QWORD *)(v7 + 32) + 4);
        if (sub_1C51A3F30((_QWORD *)a1[31], v44[0], *(_QWORD *)(*(_QWORD *)(a1[31] + 24) + 16 * (v44[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(a1[31] + 24) + 16 * (v14 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
        {
          v15 = (_QWORD *)a1[31];
          v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 16) + 176))(*(_QWORD *)(*v15 + 16));
          if ((v14 & 0x80000000) != 0)
            v17 = (uint64_t *)(v15[3] + 16 * (v14 & 0x7FFFFFFF) + 8);
          else
            v17 = (uint64_t *)(v15[34] + 8 * v14);
          v18 = *v17;
          if (*v17)
          {
            do
            {
              v19 = *(_QWORD *)(v18 + 24);
              if (v13 >> 30)
                llvm::MachineOperand::setReg(v18, v13);
              else
                llvm::MachineOperand::substPhysReg((unsigned int *)v18, v13, v16);
              v18 = v19;
            }
            while (v19);
          }
          v24 = v7;
          if ((*(_BYTE *)v7 & 4) == 0)
          {
            v24 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v24 = v7;
              do
                v24 = *(_QWORD *)(v24 + 8);
              while ((*(_WORD *)(v24 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v7 + 24) + 40, v7, *(_QWORD *)(v24 + 8));
          llvm::MachineRegisterInfo::clearKillFlags(a1[31], v13);
          v8 = 1;
        }
LABEL_63:
        if (v40 != v39)
          free(v40);
        v7 = v12;
        if (v12 == v6)
          goto LABEL_80;
      }
      if (v40 != v39)
      {
        if (v41 >= 0x21 && 4 * (HIDWORD(v41) - v42) < v41)
        {
          free(v40);
          v31 = 1 << (33 - __clz(HIDWORD(v41) - v42 - 1));
          v32 = (HIDWORD(v41) - v42) > 0x10;
          HIDWORD(v41) = 0;
          v42 = 0;
          if (v32)
            v33 = v31;
          else
            v33 = 32;
          LODWORD(v41) = v33;
          v34 = (char *)malloc_type_malloc(8 * v33, 0x4065EBACuLL);
          if (!v34)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v40 = v34;
          memset(v34, 255, 8 * v41);
LABEL_29:
          if (sub_1C51F9288((uint64_t)a1, v7, (llvm::SmallPtrSetImplBase *)&v39))
          {
            if (v40 == v39)
              v20 = (uint64_t *)((char *)&v41 + 4);
            else
              v20 = &v41;
            v21 = *(unsigned int *)v20;
            if ((_DWORD)v21)
            {
              v22 = 8 * v21;
              v23 = (uint64_t *)v40;
              while ((unint64_t)*v23 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v23;
                v22 -= 8;
                if (!v22)
                  goto LABEL_62;
              }
            }
            else
            {
              v23 = (uint64_t *)v40;
            }
            v25 = &v40[8 * v21];
            if (v23 != (uint64_t *)v25)
            {
              v26 = *v23;
LABEL_46:
              if (v12 == v26)
              {
                if (!v26 || (v27 = v26, (*(_BYTE *)v26 & 4) == 0))
                {
                  v27 = v26;
                  if ((*(_WORD *)(v26 + 44) & 8) != 0)
                  {
                    v27 = v26;
                    do
                      v27 = *(_QWORD *)(v27 + 8);
                    while ((*(_WORD *)(v27 + 44) & 8) != 0);
                  }
                }
                v12 = *(_QWORD *)(v27 + 8);
              }
              v28 = v26;
              if ((*(_BYTE *)v26 & 4) == 0)
              {
                v28 = v26;
                if ((*(_WORD *)(v26 + 44) & 8) != 0)
                {
                  v28 = v26;
                  do
                    v28 = *(_QWORD *)(v28 + 8);
                  while ((*(_WORD *)(v28 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v26 + 24) + 40, v26, *(_QWORD *)(v28 + 8));
              v29 = (unint64_t *)(v23 + 1);
              while (v29 != (unint64_t *)v25)
              {
                v30 = *v29++;
                v26 = v30;
                if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v23 = (uint64_t *)(v29 - 1);
                  goto LABEL_46;
                }
              }
            }
LABEL_62:
            v8 = 1;
          }
          goto LABEL_63;
        }
        memset(v40, 255, 8 * v41);
      }
      HIDWORD(v41) = 0;
      v42 = 0;
      goto LABEL_29;
    }
  }
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t sub_1C51F90CC(uint64_t a1, uint64_t a2, _DWORD *a3, llvm::SmallPtrSetImplBase *a4)
{
  int v8;
  char v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  unsigned int v24;

  v8 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  sub_1C4774094(a4, a2);
  if (v9)
  {
    if (*((_DWORD *)a4 + 5) - *((_DWORD *)a4 + 6) == 16)
      return 0;
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      v11 = 1;
      while (1)
      {
        v12 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * v11 + 4);
        if ((_DWORD)v12 == v8)
          goto LABEL_8;
        v13 = *(_QWORD *)(a1 + 248);
        if ((v12 & 0x80000000) != 0)
          v14 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        else
          v14 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v12);
        v15 = *v14;
        if (!v15)
          return 0;
        v24 = v11;
        if ((*(_BYTE *)(v15 + 3) & 1) == 0)
        {
          v15 = *(_QWORD *)(v15 + 24);
          if (!v15 || (*(_BYTE *)(v15 + 3) & 1) == 0)
            return 0;
        }
        v16 = *(_QWORD *)(v15 + 8);
        if (!v16)
          return 0;
        v17 = **(unsigned __int16 **)(v16 + 16);
        if (v17 == 19)
        {
          v18 = *(_DWORD **)(v16 + 32);
          if ((*v18 & 0xFFF00) != 0)
            goto LABEL_35;
          if ((v18[8] & 0xFFF00) != 0)
            goto LABEL_35;
          v19 = v18[9];
          if ((v19 & 0x80000000) == 0)
            goto LABEL_35;
          v20 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
          if (!v20)
            return 0;
          if ((*(_BYTE *)(v20 + 3) & 1) == 0)
          {
            v20 = *(_QWORD *)(v20 + 24);
            if (!v20 || (*(_BYTE *)(v20 + 3) & 1) == 0)
              return 0;
          }
          v21 = *(_QWORD *)(v20 + 8);
          if (!v21)
            return 0;
          v17 = **(unsigned __int16 **)(v21 + 16);
          LODWORD(v12) = v19;
        }
        if (v17 == 69 || v17 == 0)
        {
          v23 = sub_1C51F90CC(a1);
          v11 = v24;
          if ((v23 & 1) == 0)
            return 0;
          goto LABEL_8;
        }
LABEL_35:
        if (*a3 && *a3 != (_DWORD)v12)
          return 0;
        *a3 = v12;
        v11 = v24;
LABEL_8:
        v11 += 2;
        result = 1;
        if (v11 == *(_DWORD *)(a2 + 40))
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_1C51F9288(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;

  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  sub_1C4774094(a3, a2);
  if (!v6)
    return 1;
  if (*((_DWORD *)a3 + 5) - *((_DWORD *)a3 + 6) == 16)
    return 0;
  v8 = *(_QWORD *)(a1 + 248);
  v9 = (uint64_t *)((v5 & 0x80000000) != 0
                 ? *(_QWORD *)(v8 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v8 + 272) + 8 * v5);
  v10 = *v9;
  if (!*v9)
    return 1;
  if ((*(_BYTE *)(v10 + 3) & 0x81) != 0)
  {
    do
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (!v10)
        return 1;
    }
    while ((*(_DWORD *)v10 & 0x81000000) != 0);
  }
  v11 = *(_QWORD *)(v10 + 8);
LABEL_12:
  v12 = **(unsigned __int16 **)(v11 + 16);
  if (v12 != 69 && v12 != 0)
    return 0;
  result = sub_1C51F9288(a1);
  if ((_DWORD)result)
  {
    v14 = *(_QWORD *)(v10 + 8);
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (!v10)
        return 1;
      if ((*(_DWORD *)v10 & 0x81000000) == 0)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 != v14)
          goto LABEL_12;
      }
    }
  }
  return result;
}

void llvm::splitCodeGen(const llvm::Module *a1, uint64_t *a2, uint64_t a3, llvm::raw_ostream **a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned int v13;
  _QWORD v14[6];
  int v15;
  int v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _BYTE v19[456];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  v16 = a7;
  if (a3 == 1)
  {
    if (a5)
      llvm::WriteBitcodeToFile(a1, *a4, 0, 0, 0, 0);
    sub_1C51F94D8(a1, *a2, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1C51F95A4, a6, a7);
  }
  else
  {
    v13 = a3;
    llvm::ThreadPool::ThreadPool((uint64_t)v19, a3 | 0x100000000);
    v15 = 0;
    v14[0] = v17;
    v14[1] = &v15;
    v14[2] = v18;
    v14[3] = v19;
    v14[4] = a6;
    v14[5] = &v16;
    llvm::SplitModule((uint64_t *)a1, v13, (void (*)(uint64_t, llvm::Module **))sub_1C51F95C8, (uint64_t)v14, a8);
    llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)v19);
  }
}

uint64_t sub_1C51F94D8(llvm::Module *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void (**v9)(llvm::legacy::PassManager *__hidden);
  llvm::legacy::PassManagerImpl *v10;
  uint64_t v11;

  a3(&v11, a4);
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v9);
  if ((*(unsigned int (**)(uint64_t, void (***)(llvm::legacy::PassManager *__hidden), uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 120))(v11, &v9, a2, 0, a5, 1, 0))
  {
    llvm::report_fatal_error((llvm *)"Failed to setup codegen", (const char *)1);
  }
  llvm::legacy::PassManagerImpl::run(v10, a1);
  v9 = &off_1E81682B8;
  if (v10)
    (*(void (**)(llvm::legacy::PassManagerImpl *))(*(_QWORD *)v10 + 8))(v10);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C51F95A4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C51F95C8();
}

uint64_t sub_1C51F95C8(uint64_t a1, const llvm::Module **a2)
{
  const llvm::Module *v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  const char *v6;
  const char *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  void (**v18)(void);
  void (**v19)(void);
  void (**v20)(void);
  void (**v21)(void);
  std::shared_future<void> v23;
  _QWORD v24[2];
  uint64_t v25;
  int v26;
  void *v27;
  size_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  __int128 v32;
  _QWORD v33[3];
  _QWORD *v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v28 = 0;
  v29 = 0;
  v27 = v30;
  sub_1C613932C((uint64_t)v24, (uint64_t)&v27);
  llvm::WriteBitcodeToFile(v3, (llvm::raw_ostream *)v24, 0, 0, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(**(_QWORD **)a1 + 8 * **(int **)(a1 + 8)), (const char *)v27, v28);
    v5 = *(llvm::raw_ostream **)(**(_QWORD **)a1 + 8 * **(int **)(a1 + 8));
    v6 = (const char *)*((_QWORD *)v5 + 4);
    v7 = (const char *)*((_QWORD *)v5 + 2);
    v4 = v6 - v7;
    if (v6 != v7)
    {
      *((_QWORD *)v5 + 4) = v7;
      llvm::raw_ostream::flush_tied_then_write(v5, v7, v4);
    }
  }
  v9 = *(int **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *v9;
  *v9 = v10 + 1;
  v11 = *(_QWORD *)(*v8 + 8 * v10);
  v13 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(v12 + 24);
  if (!v14)
  {
    v31 = 0;
    LODWORD(v32) = **(_DWORD **)(a1 + 40);
    *((_QWORD *)&v32 + 1) = v11;
LABEL_10:
    v34 = 0;
    goto LABEL_11;
  }
  if (v14 == v12)
  {
    v31 = v30;
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v12 + 24) + 24))(*(_QWORD *)(v12 + 24), v30, v4);
    v15 = v31;
  }
  else
  {
    v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    v31 = v15;
  }
  LODWORD(v32) = **(_DWORD **)(a1 + 40);
  *((_QWORD *)&v32 + 1) = v11;
  if (!v15)
    goto LABEL_10;
  if (v15 == v30)
  {
    v34 = v33;
    (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v33);
  }
  else
  {
    v34 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  }
LABEL_11:
  v35 = v32;
  v37 = 0;
  v38 = 0;
  v36 = v39;
  if (v28)
    sub_1C4FE6ED8((uint64_t)&v36, (uint64_t)&v27);
  if (v34)
  {
    if (v34 == v33)
    {
      v40 = v39;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v33[0] + 24))(v33, v39, v4);
    }
    else
    {
      v40 = (_QWORD *)(*(uint64_t (**)(void))(*v34 + 16))();
    }
  }
  else
  {
    v40 = 0;
  }
  v41 = v35;
  v43 = 0;
  v44 = 0;
  v42 = v45;
  if (v37)
    sub_1C4FE6ED8((uint64_t)&v42, (uint64_t)&v36);
  v16 = (char *)operator new(0x50uLL);
  *(_QWORD *)v16 = &off_1E8148320;
  if (v40)
  {
    if (v40 == v39)
    {
      *((_QWORD *)v16 + 4) = v16 + 8;
      (*(void (**)(_QWORD *))(v39[0] + 24))(v39);
    }
    else
    {
      *((_QWORD *)v16 + 4) = (*(uint64_t (**)(void))(*v40 + 16))();
    }
  }
  else
  {
    *((_QWORD *)v16 + 4) = 0;
  }
  v17 = v41;
  *((_QWORD *)v16 + 7) = v16 + 80;
  *(_OWORD *)(v16 + 40) = v17;
  *((_QWORD *)v16 + 8) = 0;
  *((_QWORD *)v16 + 9) = 0;
  if (v43)
    sub_1C4FE6ED8((uint64_t)(v16 + 56), (uint64_t)&v42);
  v46 = v16;
  sub_1C6208584(v13, v45, 0, (std::future<void> *)&v23);
  if (v46 == v45)
  {
    v18 = (void (**)(void))(v45[0] + 32);
  }
  else
  {
    if (!v46)
      goto LABEL_34;
    v18 = (void (**)(void))(*v46 + 40);
  }
  (*v18)();
LABEL_34:
  if (v42 != v45)
    free(v42);
  if (v40 == v39)
  {
    v19 = (void (**)(void))(v39[0] + 32);
  }
  else
  {
    if (!v40)
      goto LABEL_41;
    v19 = (void (**)(void))(*v40 + 40);
  }
  (*v19)();
LABEL_41:
  if (v36 != v39)
    free(v36);
  if (v34 == v33)
  {
    v20 = (void (**)(void))(v33[0] + 32);
  }
  else
  {
    if (!v34)
      goto LABEL_48;
    v20 = (void (**)(void))(*v34 + 40);
  }
  (*v20)();
LABEL_48:
  std::shared_future<void>::~shared_future(&v23);
  if (v31 == v30)
  {
    v21 = (void (**)(void))(v30[0] + 32);
    goto LABEL_52;
  }
  if (v31)
  {
    v21 = (void (**)(void))(*v31 + 40);
LABEL_52:
    (*v21)();
  }
  v24[0] = off_1E81A6E70;
  if (v26 == 1 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8077774924);
  if (v27 != v30)
    free(v27);
  llvm::Module::~Module(v3);
  return MEMORY[0x1CAA32FC0]();
}

uint64_t sub_1C51F9A54(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  __int128 *v5;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = (__int128 *)*((_QWORD *)a2 + 5);
  if (v5)
  {
    if (v5 == a2 + 1)
    {
      v9 = &v8;
      (*(void (**)(__int128 *))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      v9 = (uint64_t *)*((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = 0;
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1C51F9B1C(a1, (uint64_t)&v7);
  sub_1C6208B50((uint64_t)&v7);
  *(_QWORD *)(a1 + 32) = *a3;
  *a3 = 0;
  return a1;
}

uint64_t sub_1C51F9B1C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &off_1E81482D8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
  {
    if (v5 == a2 + 16)
    {
      *((_QWORD *)v4 + 6) = v4 + 24;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    else
    {
      *((_QWORD *)v4 + 6) = v5;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  else
  {
    *((_QWORD *)v4 + 6) = 0;
  }
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

_QWORD *sub_1C51F9BB0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)a2[5];
  if (v6)
  {
    if (v6 == a2 + 2)
    {
      a1[5] = a1 + 2;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[5] + 24))(a2[5], a1 + 2);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    a1[5] = 0;
  }
  return a1;
}

void sub_1C51F9C3C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v46 = operator new(0xFF0uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0xFF0uLL);
    sub_1C6135314((void **)a1, &v46);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v48 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v38);
  *((_QWORD *)&v46 + 1) = v46 + v28;
  *(_QWORD *)&v47 = v46 + v28;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v38;
  v45 = operator new(0xFF0uLL);
  sub_1C61351F0((uint64_t)&v46, &v45);
  v39 = *(char **)(a1 + 16);
  if (v39 == *(char **)(a1 + 8))
  {
    v40 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v39 -= 8;
      sub_1C6135314((void **)&v46, v39);
    }
    while (v39 != *(char **)(a1 + 8));
    v40 = *(char **)(a1 + 16);
  }
  v41 = *(char **)a1;
  v42 = v46;
  v43 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v39;
  v44 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v42;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)&v47 = v40;
  *((_QWORD *)&v47 + 1) = v44;
  if (v40 != v39)
    *(_QWORD *)&v47 = &v40[(v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v41)
    operator delete(v41);
}

_QWORD *sub_1C51F9F04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E8148320;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[7];
  if (v3 != a1 + 10)
    free(v3);
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_1C51F9F74(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E8148320;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[7];
  if (v3 != a1 + 10)
    free(v3);
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C51F9FF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x50uLL);
  *v2 = &off_1E8148320;
  sub_1C51FA214((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1C51FA034(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8148320;
  return sub_1C51FA214((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_1C51FA050(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;

  v2 = a1 + 1;
  v3 = (_QWORD *)a1[7];
  if (v3 != a1 + 10)
    free(v3);
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v5 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1C51FA0B8(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 7);
  if (v3 != __p + 80)
    free(v3);
  v4 = (char *)*((_QWORD *)__p + 4);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  operator delete(__p);
}

void sub_1C51FA11C(uint64_t a1)
{
  uint64_t v2;
  llvm::Module *v3;
  llvm::Value *v4;
  char v5;
  __int128 v6;
  const char *v7;
  uint64_t v8;
  llvm::LLVMContextImpl *v9;
  llvm::Module *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v9);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v6 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)&v6 + 1) = v2;
  v7 = "<split-module>";
  v8 = 14;
  llvm::parseBitcodeFile(&v6, (uint64_t)&v9, (uint64_t)sub_1C51FA2A4, (uint64_t)&v5, (uint64_t)&v10);
  if ((v11 & 1) != 0)
    llvm::report_fatal_error((llvm *)"Failed to read bitcode", (const char *)1);
  v3 = v10;
  v10 = 0;
  sub_1C51F94D8(v3, *(_QWORD *)(a1 + 48), (void (*)(uint64_t *__return_ptr, uint64_t))sub_1C51F95A4, a1 + 8, *(unsigned int *)(a1 + 40));
  if (v3)
  {
    llvm::Module::~Module(v3);
    MEMORY[0x1CAA32FC0]();
  }
  sub_1C4FF9CA4((uint64_t)&v10);
  llvm::LLVMContext::~LLVMContext(&v9, v4);
}

uint64_t sub_1C51FA214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a2 + 56))
    sub_1C50502AC(a1 + 48, a2 + 48);
  return a1;
}

void sub_1C51FA2A4(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C51FA2B0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Peephole Optimizations";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "peephole-opt";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB6;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51FA34C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C51FA34C()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB6) = &off_1E8148368;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7FD548);
  if (v2 != -1)
  {
    v6[0] = sub_1C51FA2B0;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7FD548, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51FA424(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C51FA4B8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51FA544(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  void *result;

  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  result = sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  if (byte_1ED7FD5D0)
  {
    sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
    return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  }
  return result;
}

uint64_t sub_1C51FA5EC(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v26;
  char v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  llvm::MachineInstr **v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v49;
  BOOL v50;
  uint64_t i;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t IncompleteVirtualRegister;
  uint64_t v62;
  llvm::MachineFunction *v63;
  llvm::MachineInstr *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  __int16 v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  uint64_t v82;
  uint64_t (**v83)();
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t j;
  unint64_t v88;
  unsigned int v90;
  _DWORD *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int *v101;
  int v102;
  int v103;
  int *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  int v112;
  int v114;
  unsigned int v115;
  int *v117;
  uint64_t v119;
  unsigned int v120;
  int *v121;
  uint64_t v122;
  unint64_t *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int **v136;
  int *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  void **v149;
  char *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t (**v159)();
  uint64_t (**v160)();
  uint64_t v161;
  int v162;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (**v169)();
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  llvm::MachineFunction *v174;
  llvm::MachineInstr *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  int *v185;
  int v186;
  BOOL v187;
  unsigned int v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t k;
  uint64_t v195;
  unsigned int v196;
  _QWORD *m;
  unsigned int v198;
  _DWORD *v199;
  uint64_t v200;
  int *v201;
  int v202;
  unsigned __int16 *v203;
  uint64_t v204;
  __int16 v205;
  _DWORD *v206;
  unsigned int v207;
  unsigned int v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *n;
  unsigned int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t v229;
  const llvm::MachineInstr *v230;
  char *v231;
  uint64_t *v232;
  char *v233;
  uint64_t *v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  int v244;
  int *v246;
  int v247;
  BOOL v248;
  unsigned int v250;
  BOOL v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v255;
  uint64_t v256;
  char v257;
  int v258;
  unint64_t *v259;
  uint64_t v260;
  _BOOL4 v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int *v267;
  int32x2_t v268;
  unsigned int v269;
  uint64_t v270[2];
  int v271;
  char *v272;
  char *v273;
  uint64_t v274;
  int v275;
  _BYTE v276[128];
  unint64_t v277;
  uint64_t (**v278)();
  uint64_t (**v279)();
  uint64_t v280;
  int v281;
  _BYTE v282[32];
  unint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE v287[32];
  uint64_t v288;
  _QWORD v289[4];
  void *v290;
  uint64_t v291;
  _BYTE v292[64];
  _QWORD **v293;
  _QWORD *v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  _BYTE v298[16];
  _QWORD **v299;
  _QWORD *v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  _BYTE v304[184];
  unint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD **v308;
  _QWORD *v309[8];

  v3 = (uint64_t)a1;
  v309[6] = *(_QWORD **)MEMORY[0x1E0C80C00];
  LOBYTE(v258) = 0;
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) == 0 && !byte_1ED7FD690)
  {
    *(_QWORD *)(v3 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
    *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 40);
    if (byte_1ED7FD5D0)
    {
      v4 = **(void ****)(v3 + 8);
      do
      {
        v5 = *v4;
        v4 += 2;
      }
      while (v5 != &llvm::MachineDominatorTree::ID);
      v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::MachineDominatorTree::ID);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 + 272) = v6;
    v7 = **(void ****)(v3 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != &llvm::MachineLoopInfo::ID);
    *(_QWORD *)(v3 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineLoopInfo::ID);
    v9 = *(_QWORD *)(a2 + 328);
    v255 = a2 + 320;
    if (v9 != a2 + 320)
    {
      v258 = 0;
      v262 = (uint64_t *)v3;
      while (1)
      {
        v272 = v276;
        v273 = v276;
        v274 = 16;
        v275 = 0;
        v296 = v298;
        v297 = 0x400000000;
        v300 = 0;
        v301 = 0;
        v299 = &v300;
        v270[0] = 0;
        v270[1] = 0;
        v271 = 0;
        v290 = v292;
        v291 = 0x1000000000;
        v294 = 0;
        v295 = 0;
        v293 = &v294;
        v267 = 0;
        v268 = 0;
        v269 = 0;
        v264 = 0;
        v265 = 0;
        v266 = 0;
        v10 = *(_QWORD *)(v3 + 280);
        v11 = *(_DWORD *)(v10 + 264);
        if (v11)
        {
          v12 = *(_QWORD *)(v10 + 248);
          v13 = v11 - 1;
          v14 = (v11 - 1) & ((v9 >> 4) ^ (v9 >> 9));
          v15 = *(_QWORD *)(v12 + 16 * v14);
          if (v9 == v15)
          {
LABEL_17:
            v18 = *(_QWORD *)(v12 + 16 * v14 + 8);
            if (v18)
            {
              v261 = **(_QWORD **)(v18 + 32) == v9;
              goto LABEL_20;
            }
          }
          else
          {
            v16 = 1;
            while (v15 != -4096)
            {
              v17 = v14 + v16++;
              v14 = v17 & v13;
              v15 = *(_QWORD *)(v12 + 16 * v14);
              if (v9 == v15)
                goto LABEL_17;
            }
          }
          v261 = 0;
        }
        else
        {
          v261 = 0;
        }
LABEL_20:
        v19 = *(_QWORD *)(v9 + 56);
        v263 = v9 + 48;
        if (v19 != v9 + 48)
        {
          v256 = v9;
          v257 = 0;
          while (1)
          {
            if (!v19 || (v20 = v19, (*(_BYTE *)v19 & 4) == 0))
            {
              v20 = v19;
              if ((*(_WORD *)(v19 + 44) & 8) != 0)
              {
                v20 = v19;
                do
                  v20 = *(_QWORD *)(v20 + 8);
                while ((*(_WORD *)(v20 + 44) & 8) != 0);
              }
            }
            v21 = *(_QWORD *)(v20 + 8);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v272, v19);
            v22 = *(unsigned __int16 **)(v19 + 16);
            v23 = *v22;
            if (v23 <= 0x11 && ((1 << v23) & 0x3E078) != 0)
              goto LABEL_31;
            if (v261 && (v23 == 69 || v23 == 0))
              break;
LABEL_62:
            if (v23 != 19)
            {
              v36 = *(unsigned int *)(v19 + 40);
              if ((_DWORD)v36)
              {
                v37 = *(_QWORD *)(v19 + 32);
                v38 = v37 + 32 * v36;
                do
                {
                  if (*(_BYTE *)v37 == 12)
                  {
                    v41 = (uint64_t)&v267[4 * v269];
                    if (v268.i32[0])
                    {
                      if (v269)
                      {
                        v42 = 16 * v269;
                        v43 = v267;
                        while (*v43 >= 0xFFFFFFFE)
                        {
                          v43 += 4;
                          v42 -= 16;
                          if (!v42)
                            goto LABEL_78;
                        }
                      }
                      else
                      {
                        v43 = v267;
                      }
                    }
                    else
                    {
LABEL_78:
                      v43 = &v267[4 * v269];
                    }
                    v44 = (uint64_t)&v267[4 * v269];
                    if (v43 != (unsigned int *)v44)
                    {
                      v45 = *(_QWORD *)(v37 + 16);
                      do
                      {
                        LODWORD(v302) = *v43;
                        if (((*(_DWORD *)(v45 + (((unint64_t)v302 >> 3) & 0x1FFFFFFC)) >> (char)v302) & 1) == 0)
                          sub_1C51FC81C((int32x2_t *)&v267, &v302);
                        v46 = v43 + 4;
                        while (v46 != (unsigned int *)v41)
                        {
                          v47 = *v46;
                          v46 += 4;
                          if (v47 <= 0xFFFFFFFD)
                          {
                            v43 = v46 - 4;
                            goto LABEL_89;
                          }
                        }
                        v43 = (unsigned int *)v41;
LABEL_89:
                        ;
                      }
                      while (v43 != (unsigned int *)v44);
                    }
                  }
                  else if (!*(_BYTE *)v37)
                  {
                    v39 = *(_DWORD *)(v37 + 4);
                    LODWORD(v302) = v39;
                    if ((*(_BYTE *)(v37 + 3) & 1) != 0)
                    {
                      if (sub_1C51FC7A4(v3, v39))
                      {
                        v40 = sub_1C4A1156C((uint64_t *)&v267, &v302);
                        if (&v267[4 * v269] != (unsigned int *)v40)
                        {
                          *v40 = -2;
                          v268 = vadd_s32(v268, (int32x2_t)0x1FFFFFFFFLL);
                        }
                      }
                    }
                  }
                  v37 += 32;
                }
                while (v37 != v38);
                v22 = *(unsigned __int16 **)(v19 + 16);
                v23 = *v22;
              }
              if (v23 == 7 || v23 == 10)
                goto LABEL_31;
              if (v23 - 1 < 2)
                goto LABEL_97;
            }
            if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v19))
            {
LABEL_97:
              if (v268)
              {
                if (v269 > 4 * v268.i32[0] && v269 >= 0x41)
                {
                  sub_1C4AB1258(&v267);
                  v22 = *(unsigned __int16 **)(v19 + 16);
                }
                else
                {
                  if (v269)
                  {
                    v131 = v267;
                    v132 = 16 * v269;
                    do
                    {
                      *v131 = -1;
                      v131 += 4;
                      v132 -= 16;
                    }
                    while (v132);
                  }
                  v268 = 0;
                }
              }
            }
            v49 = *((_QWORD *)v22 + 1);
            if ((v49 & 0x8000) != 0 || ((v49 & 0xE00000000) != 0 ? (v50 = byte_1ED7FD750 == 0) : (v50 = 0), v50))
            {
              LODWORD(v280) = 0;
              v278 = &off_1E8148428;
              v279 = (uint64_t (**)())v19;
              HIDWORD(v280) = *((unsigned __int8 *)v22 + 4);
              v302 = (void *)1;
              for (i = 8; i != 200; i += 48)
                *(void **)((char *)&v302 + i) = (void *)-1;
              v289[0] = 0;
              v277 = 0;
              v305 = (unint64_t *)&v307;
              v306 = 0x400000000;
              if (!sub_1C51FCC6C((uint64_t)&v278, v289, &v277))
                goto LABEL_131;
              do
              {
                if ((v277 - 1) < 0x3FFFFFFF || (v52 = v277, !sub_1C51FCCE4(v3, v277, &v302)))
                {
                  v55 = 1;
                  goto LABEL_134;
                }
                v53 = v306;
                if (v306 >= (unint64_t)HIDWORD(v306))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v305, (uint64_t)&v307, v306 + 1, 8);
                  v53 = v306;
                }
                v305[v53] = v52;
                v54 = v306 + 1;
                LODWORD(v306) = v306 + 1;
              }
              while ((sub_1C51FCC6C((uint64_t)&v278, v289, &v277) & 1) != 0);
              if (v54)
              {
                v56 = v305;
                v259 = &v305[v54];
                do
                {
                  v57 = *v56;
                  v58 = sub_1C51FE188(*(_QWORD *)(v3 + 264), *(_QWORD *)(v3 + 248), *v56, (uint64_t)&v302, 1);
                  v59 = *(_QWORD *)(v3 + 264);
                  v60 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 16 * (v57 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v59, "", 0);
                  *(_QWORD *)(*(_QWORD *)(v59 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v60;
                  v62 = *(_QWORD *)(v59 + 8);
                  if (v62)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 24))(v62, IncompleteVirtualRegister);
                  v63 = sub_1C4779044(*(_QWORD *)(v19 + 24), v19, (unsigned __int8 **)(v19 + 56), *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8) + 912, IncompleteVirtualRegister);
                  v65 = (uint64_t)v64;
                  v284 = 0;
                  v285 = 0;
                  v286 = 0;
                  HIDWORD(v283) = v58;
                  LODWORD(v283) = (v58 >> 24) & 0xFFF00;
                  llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v283);
                  if (HIDWORD(v57))
                  {
                    **(_DWORD **)(v65 + 32) = **(_DWORD **)(v65 + 32) & 0xFFF000FF | ((WORD2(v57) & 0xFFF) << 8);
                    **(_DWORD **)(v65 + 32) |= 0x10000000u;
                  }
                  v66 = *(_QWORD **)(v3 + 264);
                  v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v66 + 16) + 176))(*(_QWORD *)(*v66 + 16));
                  if ((v57 & 0x80000000) != 0)
                    v68 = (uint64_t *)(v66[3] + 16 * (v57 & 0x7FFFFFFF) + 8);
                  else
                    v68 = (uint64_t *)(v66[34] + 8 * v57);
                  v69 = *v68;
                  v3 = (uint64_t)v262;
                  if (*v68)
                  {
                    do
                    {
                      v70 = *(_QWORD *)(v69 + 24);
                      if ((IncompleteVirtualRegister - 1) <= 0x3FFFFFFE)
                        llvm::MachineOperand::substPhysReg((unsigned int *)v69, IncompleteVirtualRegister, v67);
                      else
                        llvm::MachineOperand::setReg(v69, IncompleteVirtualRegister);
                      v69 = v70;
                    }
                    while (v70);
                  }
                  llvm::MachineRegisterInfo::clearKillFlags(v262[33], IncompleteVirtualRegister);
                  llvm::MachineRegisterInfo::clearKillFlags(v262[33], v58);
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v272, v65);
                  ++v56;
                }
                while (v56 != v259);
              }
LABEL_131:
              v71 = v19;
              if ((*(_BYTE *)v19 & 4) == 0)
              {
                v71 = v19;
                if ((*(_WORD *)(v19 + 44) & 8) != 0)
                {
                  v71 = v19;
                  do
                    v71 = *(_QWORD *)(v71 + 8);
                  while ((*(_WORD *)(v71 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v19 + 24) + 40, v19, *(_QWORD *)(v71 + 8));
              v55 = 0;
LABEL_134:
              if (v305 != (unint64_t *)&v307)
                free(v305);
              sub_1C51FDA44((int *)&v302);
              if (!v55)
              {
LABEL_154:
                v74 = (char *)sub_1C477672C((uint64_t)&v272, v19);
                if (v273 == v272)
                  v75 = (uint64_t *)((char *)&v274 + 4);
                else
                  v75 = &v274;
                if (v74 != &v273[8 * *(unsigned int *)v75])
                {
                  *(_QWORD *)v74 = -2;
                  ++v275;
                }
                goto LABEL_159;
              }
              v49 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8);
            }
            if ((v49 & 0x1000) != 0)
            {
              LODWORD(v283) = 0;
              LODWORD(v278) = 0;
              v302 = 0;
              v305 = 0;
              if ((*(unsigned int (**)(_QWORD, uint64_t, unint64_t *, uint64_t (***)(), void **, unint64_t **))(**(_QWORD **)(v3 + 248) + 896))(*(_QWORD *)(v3 + 248), v19, &v283, &v278, &v302, &v305))
              {
                if ((v283 - 1) >= 0x3FFFFFFF
                  && ((_DWORD)v278 - 1) >= 0x3FFFFFFF
                  && ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 248) + 904))(*(_QWORD *)(v3 + 248), v19) & 1) != 0)
                {
                  goto LABEL_154;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 10) & 1) != 0)
            {
              LODWORD(v305) = 0;
              LODWORD(v283) = 0;
              LOBYTE(v278) = 0;
              v302 = v304;
              v303 = 0x400000000;
              v72 = 0;
              if (((*(uint64_t (**)(_QWORD, uint64_t, void **, unint64_t **, unint64_t *, uint64_t (***)()))(**(_QWORD **)(v3 + 248) + 384))(*(_QWORD *)(v3 + 248), v19, &v302, &v305, &v283, &v278) & 1) == 0&& (_BYTE)v278)
              {
                if ((*(uint64_t (**)(_QWORD, uint64_t, char **, _QWORD))(**(_QWORD **)(v3 + 248) + 392))(*(_QWORD *)(v3 + 248), v19, &v272, 0))
                {
                  v73 = v19;
                  if ((*(_BYTE *)v19 & 4) == 0)
                  {
                    v73 = v19;
                    if ((*(_WORD *)(v19 + 44) & 8) != 0)
                    {
                      v73 = v19;
                      do
                        v73 = *(_QWORD *)(v73 + 8);
                      while ((*(_WORD *)(v73 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v19 + 24) + 40, v19, *(_QWORD *)(v73 + 8));
                  v72 = 1;
                }
                else
                {
                  v72 = 0;
                }
              }
              if (v302 != v304)
                free(v302);
              if (v72)
                goto LABEL_154;
            }
            v76 = *(_WORD *)(v19 + 44);
            v77 = *(unsigned __int16 **)(v19 + 16);
            v78 = *((_QWORD *)v77 + 1);
            if ((v76 & 0xC) != 0 && (v76 & 4) == 0)
            {
              v217 = v19;
              if ((v78 & 0x400) == 0)
              {
                while ((*(_WORD *)(v217 + 44) & 8) != 0)
                {
                  v217 = *(_QWORD *)(v217 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v217 + 16) + 9) & 4) != 0)
                    goto LABEL_471;
                }
LABEL_564:
                v3 = (uint64_t)v262;
                goto LABEL_163;
              }
LABEL_471:
              if ((v78 & 0x100) != 0)
                goto LABEL_564;
              v218 = v19;
              while ((*(_WORD *)(v218 + 44) & 8) != 0)
              {
                v218 = *(_QWORD *)(v218 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v218 + 16) + 9) & 1) != 0)
                  goto LABEL_564;
              }
              if ((v78 & 0x800) != 0)
                goto LABEL_564;
              v252 = v19;
              do
              {
                v3 = (uint64_t)v262;
                if ((*(_WORD *)(v252 + 44) & 8) == 0)
                  goto LABEL_562;
                v252 = *(_QWORD *)(v252 + 8);
              }
              while ((*(_BYTE *)(*(_QWORD *)(v252 + 16) + 9) & 8) == 0);
              v3 = (uint64_t)v262;
            }
            else if ((*((_QWORD *)v77 + 1) & 0xD00) == 0x400)
            {
LABEL_562:
              if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 248) + 912))(*(_QWORD *)(v3 + 248), v19) & 1) != 0)goto LABEL_159;
              v77 = *(unsigned __int16 **)(v19 + 16);
            }
LABEL_163:
            v79 = *v77;
            if (v79 != 19)
            {
              v80 = byte_1ED7FD750 || v79 > 0x12;
              if (v80 || ((1 << v79) & 0x40300) == 0)
                goto LABEL_199;
            }
            if ((*(_DWORD *)(*(_QWORD *)(v19 + 32) + 4) - 1) < 0x3FFFFFFF)
              goto LABEL_199;
            if ((*((_QWORD *)v77 + 1) & 0xE00008000) != 0)
            {
              v82 = operator new();
              *(_DWORD *)(v82 + 16) = 0;
              *(_QWORD *)v82 = &off_1E8148428;
              *(_QWORD *)(v82 + 8) = v19;
              *(_DWORD *)(v82 + 20) = *(unsigned __int8 *)(*(_QWORD *)(v19 + 16) + 4);
              v83 = &off_1E8148428;
              goto LABEL_184;
            }
            if (*v77 > 0x11u)
            {
              if (v79 == 18)
              {
                v84 = operator new();
                v82 = v84;
                *(_DWORD *)(v84 + 16) = 0;
                *(_QWORD *)(v84 + 8) = v19;
                v83 = &off_1E81484E8;
              }
              else
              {
                if (v79 != 19)
                  goto LABEL_199;
                v84 = operator new();
                v82 = v84;
                *(_DWORD *)(v84 + 16) = 0;
                *(_QWORD *)(v84 + 8) = v19;
                v83 = &off_1E8148458;
              }
            }
            else
            {
              if (v79 == 8)
              {
                v85 = *(_QWORD *)(v3 + 248);
                v82 = operator new();
                *(_DWORD *)(v82 + 16) = 0;
                v83 = &off_1E81484B8;
                *(_QWORD *)v82 = &off_1E81484B8;
                *(_QWORD *)(v82 + 8) = v19;
                *(_QWORD *)(v82 + 24) = v85;
                goto LABEL_184;
              }
              if (v79 != 9)
                goto LABEL_199;
              v84 = operator new();
              v82 = v84;
              *(_DWORD *)(v84 + 16) = 0;
              *(_QWORD *)(v84 + 8) = v19;
              v83 = &off_1E8148488;
            }
            *(_QWORD *)v84 = v83;
LABEL_184:
            v305 = 0;
            v283 = 0;
            if (((unsigned int (*)(uint64_t, _QWORD *, unint64_t *))v83[2])(v82, &v305, &v283))
            {
              v86 = 0;
              do
              {
                v302 = (void *)1;
                for (j = 8; j != 200; j += 48)
                  *(void **)((char *)&v302 + j) = (void *)-1;
                if (sub_1C51FCCE4((uint64_t)v262, v283, &v302))
                {
                  v88 = sub_1C51FE188(v262[33], v262[31], v283, (uint64_t)&v302, 0);
                  if ((_DWORD)v305 != (_DWORD)v88 && (_DWORD)v88 != 0)
                  {
                    v90 = v88;
                    if ((*(unsigned int (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v82 + 24))(v82, v88, HIDWORD(v88)))
                    {
                      llvm::MachineRegisterInfo::clearKillFlags(v262[33], v90);
                      v86 = 1;
                    }
                  }
                }
                sub_1C51FDA44((int *)&v302);
              }
              while (((*(uint64_t (**)(uint64_t, unint64_t **, unint64_t *))(*(_QWORD *)v82 + 16))(v82, &v305, &v283) & 1) != 0);
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
              v3 = (uint64_t)v262;
              if ((v86 & 1) != 0)
                goto LABEL_159;
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
              v3 = (uint64_t)v262;
            }
LABEL_199:
            if (**(_WORD **)(v19 + 16) != 19)
              goto LABEL_252;
            v91 = *(_DWORD **)(v19 + 32);
            v92 = v91[9];
            if ((v92 & 0x80000000) == 0)
              goto LABEL_243;
            v93 = v91[1];
            if ((v93 & 0x80000000) == 0)
              goto LABEL_243;
            v94 = ((unint64_t)v91[8] >> 8) & 0xFFF;
            if (!v266)
            {
              v117 = 0;
LABEL_235:
              if (4 * (int)v265 + 4 >= 3 * v266)
              {
                sub_1C51FE824(&v264, 2 * v266);
                if (v266)
                {
                  v176 = ((37 * v94) | ((unint64_t)(37 * v92) << 32))
                       + ~((unint64_t)(37 * v94) << 32);
                  v177 = (v176 ^ (v176 >> 22)) + ~((v176 ^ (v176 >> 22)) << 13);
                  v178 = (9 * (v177 ^ (v177 >> 8))) ^ ((9 * (v177 ^ (v177 >> 8))) >> 15);
                  v179 = ((v178 + ~(v178 << 27)) >> 31) ^ (v178 + ~((_DWORD)v178 << 27));
                  v180 = v266 - 1;
                  v181 = (v266 - 1) & v179;
                  v117 = (int *)(v264 + 16 * v181);
                  v182 = *v117;
                  v183 = v117[1];
                  if ((_DWORD)v92 != *v117 || (_DWORD)v94 != v183)
                  {
                    v185 = 0;
                    v186 = 1;
                    while (v182 != -1 || v183 != -1)
                    {
                      if (v185)
                        v187 = 0;
                      else
                        v187 = v183 == -2;
                      if (v187 && v182 == -2)
                        v185 = v117;
                      v189 = v181 + v186++;
                      v181 = v189 & v180;
                      v117 = (int *)(v264 + 16 * (v189 & v180));
                      v182 = *v117;
                      v183 = v117[1];
                      if ((_DWORD)v92 == *v117 && (_DWORD)v94 == v183)
                        goto LABEL_237;
                    }
                    if (v185)
                      v117 = v185;
                  }
                }
                else
                {
                  v117 = 0;
                }
              }
              else if (v266 + ~(_DWORD)v265 - HIDWORD(v265) <= v266 >> 3)
              {
                sub_1C51FE824(&v264, v266);
                if (v266)
                {
                  v237 = ((37 * v94) | ((unint64_t)(37 * v92) << 32))
                       + ~((unint64_t)(37 * v94) << 32);
                  v238 = (v237 ^ (v237 >> 22)) + ~((v237 ^ (v237 >> 22)) << 13);
                  v239 = (9 * (v238 ^ (v238 >> 8))) ^ ((9 * (v238 ^ (v238 >> 8))) >> 15);
                  v240 = ((v239 + ~(v239 << 27)) >> 31) ^ (v239 + ~((_DWORD)v239 << 27));
                  v241 = v266 - 1;
                  v242 = (v266 - 1) & v240;
                  v117 = (int *)(v264 + 16 * v242);
                  v243 = *v117;
                  v244 = v117[1];
                  if (*v117 != (_DWORD)v92 || v244 != (_DWORD)v94)
                  {
                    v246 = 0;
                    v247 = 1;
                    while (v243 != -1 || v244 != -1)
                    {
                      if (v246)
                        v248 = 0;
                      else
                        v248 = v244 == -2;
                      if (v248 && v243 == -2)
                        v246 = v117;
                      v250 = v242 + v247++;
                      v242 = v250 & v241;
                      v117 = (int *)(v264 + 16 * (v250 & v241));
                      v243 = *v117;
                      v244 = v117[1];
                      v251 = *v117 == (_DWORD)v92 && v244 == (_DWORD)v94;
                      v3 = (uint64_t)v262;
                      if (v251)
                        goto LABEL_237;
                    }
                    if (v246)
                      v117 = v246;
                  }
                }
                else
                {
                  v117 = 0;
                }
                v3 = (uint64_t)v262;
              }
LABEL_237:
              LODWORD(v265) = v265 + 1;
              if (*v117 != -1 || v117[1] != -1)
                --HIDWORD(v265);
              *(_QWORD *)v117 = v92 | (v94 << 32);
              *((_QWORD *)v117 + 1) = v19;
LABEL_243:
              if (!byte_1ED7FD810)
              {
                v119 = *(_QWORD *)(v19 + 32);
                LODWORD(v283) = *(_DWORD *)(v119 + 4);
                v120 = *(_DWORD *)(v119 + 36);
                if (sub_1C51FC7A4(v3, v120) && (v283 & 0x80000000) != 0)
                {
                  LODWORD(v305) = v120;
                  v306 = v19;
                  sub_1C51FE9FC((uint64_t)&v267, (int *)&v305, &v306, (uint64_t)&v302);
                }
                else if ((v120 & 0x80000000) != 0)
                {
                  if (sub_1C51FC7A4(v3, v283))
                  {
                    v121 = sub_1C4A1156C((uint64_t *)&v267, &v283);
                    if (&v267[4 * v269] != (unsigned int *)v121)
                    {
                      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v121 + 1) + 32) + 4) == v120)
                        goto LABEL_450;
                      *v121 = -2;
                      v268 = vadd_s32(v268, (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
                }
              }
LABEL_252:
              v122 = *(_QWORD *)(v19 + 16);
              if ((*(_BYTE *)(v122 + 9) & 0x20) != 0 && *(_BYTE *)(v122 + 4) == 1)
              {
                v123 = (unint64_t *)*(unsigned int *)(*(_QWORD *)(v19 + 32) + 4);
                LODWORD(v283) = (_DWORD)v123;
                if ((v123 & 0x80000000) != 0)
                {
                  v305 = v123;
                  v306 = v19;
                  sub_1C51FE9FC((uint64_t)v270, (int *)&v305, &v306, (uint64_t)&v302);
                  sub_1C4854E58((uint64_t)&v296, (unsigned int *)&v283);
                  goto LABEL_429;
                }
              }
              LODWORD(v277) = 0;
              v288 = 0;
              if (!(*(unsigned int (**)(_QWORD, uint64_t, unint64_t *, char *, uint64_t *))(**(_QWORD **)(v3 + 248) + 56))(*(_QWORD *)(v3 + 248), v19, &v277, (char *)&v288 + 4, &v288))goto LABEL_399;
              v124 = HIDWORD(v288);
              if ((HIDWORD(v288) - 1) < 0x3FFFFFFF)
                goto LABEL_399;
              if ((v277 - 1) < 0x3FFFFFFF)
                goto LABEL_399;
              v125 = *(_QWORD *)(v3 + 264);
              if (llvm::MachineRegisterInfo::hasOneNonDBGUse(v125, v277))
                goto LABEL_399;
              v260 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v3 + 256) + 200))(*(_QWORD *)(v3 + 256), *(_QWORD *)(*(_QWORD *)(v125 + 24) + 16 * (v124 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v288);
              if (!v260)
                goto LABEL_399;
              v126 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v3 + 256) + 200))(*(_QWORD *)(v3 + 256), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 24) + 16 * (v277 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v288);
              v127 = v3;
              v128 = v126;
              v283 = (unint64_t)v287;
              v284 = v287;
              v285 = 4;
              LODWORD(v286) = 0;
              v129 = *(_QWORD *)(v127 + 264);
              if (v288 < 0)
                v130 = (uint64_t *)(*(_QWORD *)(v129 + 24) + 16 * (HIDWORD(v288) & 0x7FFFFFFF) + 8);
              else
                v130 = (uint64_t *)(*(_QWORD *)(v129 + 272) + 8 * HIDWORD(v288));
              v133 = *v130;
              if (*v130)
              {
                while ((*(_DWORD *)v133 & 0x81000000) != 0)
                {
                  v133 = *(_QWORD *)(v133 + 24);
                  if (!v133)
                    goto LABEL_281;
                }
                v134 = *(_QWORD *)(v133 + 8);
LABEL_275:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v283, *(_QWORD *)(v134 + 24));
                v135 = *(_QWORD *)(v133 + 8);
                while (1)
                {
                  v133 = *(_QWORD *)(v133 + 24);
                  if (!v133)
                    break;
                  if ((*(_DWORD *)v133 & 0x81000000) == 0)
                  {
                    v134 = *(_QWORD *)(v133 + 8);
                    if (v134 != v135)
                      goto LABEL_275;
                  }
                }
                v129 = v262[33];
              }
LABEL_281:
              v302 = v304;
              v303 = 0x800000000;
              v305 = (unint64_t *)&v307;
              v306 = 0x800000000;
              if ((v277 & 0x80000000) != 0)
                v136 = (int **)(*(_QWORD *)(v129 + 24) + 16 * (v277 & 0x7FFFFFFF) + 8);
              else
                v136 = (int **)(*(_QWORD *)(v129 + 272) + 8 * v277);
              v137 = *v136;
              if (!*v136)
                goto LABEL_325;
              while (1)
              {
                v138 = *v137;
                if ((*v137 & 0x81000000) == 0)
                  break;
                v137 = (int *)*((_QWORD *)v137 + 3);
                if (!v137)
                  goto LABEL_325;
              }
              v139 = 1;
LABEL_289:
              v140 = *((_QWORD *)v137 + 1);
              if (v140 == v19)
                goto LABEL_317;
              v141 = 0;
              v142 = **(unsigned __int16 **)(v140 + 16);
              if (!**(_WORD **)(v140 + 16) || v142 == 69)
              {
LABEL_318:
                while (1)
                {
                  v137 = (int *)*((_QWORD *)v137 + 3);
                  if (!v137)
                    break;
                  v138 = *v137;
                  if ((*v137 & 0x81000000) == 0)
                  {
                    v139 = v141;
                    goto LABEL_289;
                  }
                }
                if ((v141 & 1) != 0 && (_DWORD)v306)
                  sub_1C618A450((unsigned int *)&v302, v305, &v305[v306]);
                goto LABEL_325;
              }
              if (v128)
              {
                v143 = (v138 >> 8) & 0xFFF;
                if (v142 == 11 || v143 != (_DWORD)v288)
                  goto LABEL_317;
LABEL_299:
                v145 = *(_QWORD *)(v140 + 24);
                if (v145 != v256)
                {
                  v146 = (char *)sub_1C477672C((uint64_t)&v283, *(_QWORD *)(v140 + 24));
                  if (v284 == (char *)v283)
                    v147 = (uint64_t *)((char *)&v285 + 4);
                  else
                    v147 = &v285;
                  if (v146 != &v284[8 * *(unsigned int *)v147])
                  {
                    v148 = v303;
                    v149 = &v302;
                    if (v303 < (unint64_t)HIDWORD(v303))
                      goto LABEL_316;
LABEL_321:
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v302, (uint64_t)v304, v303 + 1, 8);
                    v148 = v303;
                    goto LABEL_316;
                  }
                  if (byte_1ED7FD5D0)
                  {
                    v152 = v262[34];
                    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v152);
                    if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v152 + 1320), v256, v145))
                    {
                      v148 = v306;
                      v149 = (void **)&v305;
                      if (v306 >= (unint64_t)HIDWORD(v306))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v305, (uint64_t)&v307, v306 + 1, 8);
                        v148 = v306;
                      }
                      goto LABEL_316;
                    }
                  }
LABEL_325:
                  v153 = v303;
                  if ((_DWORD)v303)
                  {
                    v278 = (uint64_t (**)())v282;
                    v279 = (uint64_t (**)())v282;
                    v280 = 4;
                    v281 = 0;
                    v154 = v262[33];
                    if (v288 < 0)
                      v155 = (uint64_t *)(*(_QWORD *)(v154 + 24) + 16 * (HIDWORD(v288) & 0x7FFFFFFF) + 8);
                    else
                      v155 = (uint64_t *)(*(_QWORD *)(v154 + 272) + 8 * HIDWORD(v288));
                    v158 = *v155;
                    if (!*v155)
                      goto LABEL_347;
                    while ((*(_DWORD *)v158 & 0x81000000) != 0)
                    {
                      v158 = *(_QWORD *)(v158 + 24);
                      if (!v158)
                      {
                        v159 = (uint64_t (**)())v282;
                        v160 = (uint64_t (**)())v282;
                        goto LABEL_346;
                      }
                    }
                    v161 = *(_QWORD *)(v158 + 8);
                    v159 = (uint64_t (**)())v282;
                    v160 = (uint64_t (**)())v282;
LABEL_335:
                    v162 = **(unsigned __int16 **)(v161 + 16);
                    if (v162 == 69 || v162 == 0)
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v278, *(_QWORD *)(v161 + 24));
                      v160 = v278;
                      v159 = v279;
                      v161 = *(_QWORD *)(v158 + 8);
                    }
                    while (1)
                    {
                      v158 = *(_QWORD *)(v158 + 24);
                      if (!v158)
                        break;
                      if ((*(_DWORD *)v158 & 0x81000000) == 0 && *(_QWORD *)(v158 + 8) != v161)
                      {
                        v161 = *(_QWORD *)(v158 + 8);
                        goto LABEL_335;
                      }
                    }
                    v154 = v262[33];
                    v153 = v303;
LABEL_346:
                    if (!v153)
                    {
                      v156 = 0;
                    }
                    else
                    {
LABEL_347:
                      v164 = 0;
                      v156 = 0;
                      v165 = *(_QWORD *)(*(_QWORD *)(v154 + 24) + 16 * (v277 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                      do
                      {
                        v166 = *((_QWORD *)v302 + v164);
                        v167 = *(_QWORD *)(v166 + 8);
                        v168 = *(_QWORD *)(v167 + 24);
                        v169 = (uint64_t (**)())sub_1C477672C((uint64_t)&v278, v168);
                        if (v279 == v278)
                          v170 = (uint64_t *)((char *)&v280 + 4);
                        else
                          v170 = &v280;
                        if (v169 == &v279[*(unsigned int *)v170])
                        {
                          if ((v156 & 1) == 0)
                          {
                            llvm::MachineRegisterInfo::clearKillFlags(v262[33], HIDWORD(v288));
                            sub_1C51A3F30((_QWORD *)v262[33], SHIDWORD(v288), *(_QWORD *)(*(_QWORD *)(v262[33] + 24) + 16 * (HIDWORD(v288) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v260, 0);
                          }
                          v171 = v262[33];
                          if (v128)
                            v165 = *(_QWORD *)(*(_QWORD *)(v171 + 24)
                                             + 16 * (*(_DWORD *)(*(_QWORD *)(v167 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                          v172 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v262[33], "", 0);
                          *(_QWORD *)(*(_QWORD *)(v171 + 24) + 16 * (v172 & 0x7FFFFFFF)) = v165 & 0xFFFFFFFFFFFFFFFBLL;
                          v173 = *(_QWORD *)(v171 + 8);
                          if (v173)
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 24))(v173, v172);
                          v174 = sub_1C4779044(v168, v167, (unsigned __int8 **)(v167 + 56), *(_QWORD *)(v262[31] + 8) + 912, v172);
                          memset(&v289[1], 0, 24);
                          HIDWORD(v289[0]) = HIDWORD(v288);
                          LODWORD(v289[0]) = (v288 & 0xFFF) << 8;
                          llvm::MachineInstr::addOperand(v175, v174, (const llvm::MachineOperand *)v289);
                          if (v128)
                            *(_DWORD *)v166 &= 0xFFF000FF;
                          llvm::MachineOperand::setReg(v166, v172);
                          v156 = 1;
                        }
                        ++v164;
                      }
                      while (v153 != v164);
                      v160 = v278;
                      v159 = v279;
                    }
                    v3 = (uint64_t)v262;
                    v157 = v258;
                    if (v159 != v160)
                      free(v159);
                  }
                  else
                  {
                    v156 = 0;
                    v3 = (uint64_t)v262;
                    v157 = v258;
                  }
                  if (v305 != (unint64_t *)&v307)
                    free(v305);
                  if (v302 != v304)
                    free(v302);
                  if (v284 != (char *)v283)
                    free(v284);
                  v258 = v157 | v156;
                  if (v19)
                  {
LABEL_399:
                    v191 = v19;
                    if ((*(_BYTE *)v19 & 4) == 0)
                      goto LABEL_400;
                  }
                  else
                  {
LABEL_400:
                    if ((*(_WORD *)(v19 + 44) & 8) != 0)
                    {
                      v191 = v19;
                      do
                        v191 = *(_QWORD *)(v191 + 8);
                      while ((*(_WORD *)(v191 + 44) & 8) != 0);
                    }
                    else
                    {
                      v191 = v19;
                    }
                  }
                  v21 = *(_QWORD *)(v191 + 8);
                  if ((v257 & 1) != 0)
                  {
                    v192 = *(_QWORD *)(v19 + 16);
                    v193 = *(unsigned __int16 *)(v192 + 2);
                    if (*(_WORD *)(v192 + 2))
                    {
                      for (k = 0; k != v193; ++k)
                      {
                        v195 = *(_QWORD *)(v19 + 32);
                        if ((*(_DWORD *)(v195 + 32 * k) & 0x10000FF) == 0)
                        {
                          v196 = *(_DWORD *)(v195 + 32 * k + 4);
                          LODWORD(v302) = v196;
                          if ((v196 & 0x80000000) != 0)
                          {
                            if (v301)
                            {
                              for (m = v300; m; m = (_QWORD *)*m)
                              {
                                v198 = *((_DWORD *)m + 7);
                                if (v196 >= v198)
                                {
                                  if (v198 >= v196)
                                    goto LABEL_424;
                                  ++m;
                                }
                              }
                            }
                            else if ((_DWORD)v297)
                            {
                              v199 = v296;
                              v200 = 4 * v297;
                              while (*v199 != v196)
                              {
                                ++v199;
                                v200 -= 4;
                                if (!v200)
                                  goto LABEL_409;
                              }
                              if (v200)
                              {
LABEL_424:
                                v201 = sub_1C4A1156C(v270, &v302);
                                if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 248) + 928))(*(_QWORD *)(v3 + 248), v19, *((_QWORD *)v201 + 1), v302, *(_QWORD *)(v3 + 264)) & 1) != 0)
                                {
                                  v202 = 1;
                                  goto LABEL_428;
                                }
                              }
                            }
                          }
                        }
LABEL_409:
                        ;
                      }
                    }
                    v202 = 0;
LABEL_428:
                    v258 |= v202;
LABEL_429:
                    v257 = 1;
                  }
                  else
                  {
                    v257 = 0;
                  }
                  v203 = *(unsigned __int16 **)(v19 + 16);
                  v204 = *((_QWORD *)v203 + 1);
                  if ((v204 & 0x40000) != 0)
                  {
                    if (*v203 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 8) != 0)
                    {
LABEL_435:
                      if (*((_BYTE *)v203 + 4) == 1)
                      {
                        v206 = *(_DWORD **)(v19 + 32);
                        v207 = v206[1];
                        LODWORD(v302) = v207;
                        if ((v207 & 0x80000000) != 0
                          && (*v206 & 0xFFF00) == 0
                          && llvm::MachineRegisterInfo::hasOneNonDBGUser(*(_QWORD *)(v3 + 264), v207))
                        {
                          sub_1C48302EC((uint64_t)&v290, (unsigned int *)&v302);
LABEL_487:
                          if (llvm::MachineInstr::isLoadFoldBarrier((llvm::MachineInstr *)v19))
                          {
                            LODWORD(v291) = 0;
                            sub_1C47655E8((uint64_t)&v293, v294);
                            v295 = 0;
                            v293 = &v294;
                            v294 = 0;
                          }
                          goto LABEL_31;
                        }
                      }
                    }
                    else
                    {
                      v205 = *(_WORD *)(v19 + 44);
                      if ((v205 & 0xC) != 0 && (v205 & 4) == 0)
                      {
                        v219 = v19;
                        if ((v204 & 0x80000) != 0)
                          goto LABEL_435;
                        while ((*(_WORD *)(v219 + 44) & 8) != 0)
                        {
                          v219 = *(_QWORD *)(v219 + 8);
                          if ((*(_BYTE *)(*(_QWORD *)(v219 + 16) + 10) & 8) != 0)
                            goto LABEL_435;
                        }
                      }
                      else if ((v204 & 0x80000) != 0)
                      {
                        goto LABEL_435;
                      }
                    }
                  }
                  if ((_DWORD)v291)
                    v220 = 0;
                  else
                    v220 = v295 == 0;
                  if (!v220)
                  {
                    v221 = *((unsigned __int8 *)v203 + 4);
                    if (*(_DWORD *)(v19 + 40) != v221)
                    {
                      do
                      {
                        v222 = *(_QWORD *)(v19 + 32);
                        v223 = v221;
                        if (!*(_BYTE *)(v222 + 32 * v221))
                        {
                          v224 = *(_DWORD *)(v222 + 32 * v221 + 4);
                          LODWORD(v305) = *(_DWORD *)(v222 + 32 * v223 + 4);
                          if (v295)
                          {
                            for (n = v294; n; n = (_QWORD *)*n)
                            {
                              v226 = *((_DWORD *)n + 7);
                              if (v224 >= v226)
                              {
                                if (v226 >= v224)
                                  goto LABEL_506;
                                ++n;
                              }
                            }
                          }
                          else if ((_DWORD)v291)
                          {
                            v227 = v290;
                            v228 = 4 * v291;
                            while (*v227 != v224)
                            {
                              ++v227;
                              v228 -= 4;
                              if (!v228)
                                goto LABEL_491;
                            }
                            if (v228)
                            {
LABEL_506:
                              LODWORD(v283) = v224;
                              v302 = 0;
                              v229 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t **, void **))(**(_QWORD **)(v3 + 248) + 920))(*(_QWORD *)(v3 + 248), v19, *(_QWORD *)(v3 + 264), &v305, &v302);
                              if (v229)
                              {
                                v230 = (const llvm::MachineInstr *)v229;
                                v231 = (char *)sub_1C477672C((uint64_t)&v272, v19);
                                if (v273 == v272)
                                  v232 = (uint64_t *)((char *)&v274 + 4);
                                else
                                  v232 = &v274;
                                if (v231 != &v273[8 * *(unsigned int *)v232])
                                {
                                  *(_QWORD *)v231 = -2;
                                  ++v275;
                                }
                                v233 = (char *)sub_1C477672C((uint64_t)&v272, (uint64_t)v302);
                                if (v273 == v272)
                                  v234 = (uint64_t *)((char *)&v274 + 4);
                                else
                                  v234 = &v274;
                                if (v233 != &v273[8 * *(unsigned int *)v234])
                                {
                                  *(_QWORD *)v233 = -2;
                                  ++v275;
                                }
                                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v272, (uint64_t)v230);
                                if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v19))
                                  llvm::MachineFunction::moveCallSiteInfo(*(llvm::MachineFunction **)(*(_QWORD *)(v19 + 24) + 32), (const llvm::MachineInstr *)v19, v230);
                                v235 = v19;
                                if ((*(_BYTE *)v19 & 4) == 0)
                                {
                                  v235 = v19;
                                  if ((*(_WORD *)(v19 + 44) & 8) != 0)
                                  {
                                    v235 = v19;
                                    do
                                      v235 = *(_QWORD *)(v235 + 8);
                                    while ((*(_WORD *)(v235 + 44) & 8) != 0);
                                  }
                                }
                                sub_1C487FE80(*(_QWORD *)(v19 + 24) + 40, v19, *(_QWORD *)(v235 + 8));
                                v236 = v302;
                                if ((*(_BYTE *)v302 & 4) == 0)
                                {
                                  v236 = v302;
                                  if ((*((_WORD *)v302 + 22) & 8) != 0)
                                  {
                                    v236 = v302;
                                    do
                                      v236 = (_QWORD *)v236[1];
                                    while ((*((_WORD *)v236 + 22) & 8) != 0);
                                  }
                                }
                                sub_1C487FE80(*((_QWORD *)v302 + 3) + 40, (uint64_t)v302, v236[1]);
                                llvm::MachineRegisterInfo::markUsesInDebugValueAsUndef(v262[33], v283);
                                sub_1C5162A80((uint64_t)&v290, (unsigned int *)&v283);
                                v258 = 1;
                                v19 = (uint64_t)v230;
                              }
                              v3 = (uint64_t)v262;
                            }
                          }
                        }
LABEL_491:
                        v221 = v223 + 1;
                      }
                      while ((_DWORD)v223 + 1 != *(_DWORD *)(v19 + 40));
                    }
                  }
                  goto LABEL_487;
                }
                v150 = (char *)sub_1C477672C((uint64_t)&v272, v140);
                if (v273 == v272)
                  v151 = (uint64_t *)((char *)&v274 + 4);
                else
                  v151 = &v274;
                if (v150 == &v273[8 * *(unsigned int *)v151])
                {
                  v148 = v303;
                  v149 = &v302;
                  if (v303 >= (unint64_t)HIDWORD(v303))
                    goto LABEL_321;
LABEL_316:
                  *((_QWORD *)*v149 + v148) = v137;
                  ++*((_DWORD *)v149 + 2);
                }
              }
              else if (v142 != 11)
              {
                goto LABEL_299;
              }
LABEL_317:
              v141 = v139;
              goto LABEL_318;
            }
            v95 = ((37 * v94) | ((unint64_t)(37 * v92) << 32))
                + ~((unint64_t)(37 * v94) << 32);
            v96 = (v95 ^ (v95 >> 22)) + ~((v95 ^ (v95 >> 22)) << 13);
            v97 = (9 * (v96 ^ (v96 >> 8))) ^ ((9 * (v96 ^ (v96 >> 8))) >> 15);
            v98 = ((v97 + ~(v97 << 27)) >> 31) ^ (v97 + ~((_DWORD)v97 << 27));
            v99 = v266 - 1;
            v100 = (v266 - 1) & v98;
            v101 = (int *)(v264 + 16 * v100);
            v103 = *v101;
            v102 = v101[1];
            if ((_DWORD)v92 == *v101 && (_DWORD)v94 == v102)
              goto LABEL_442;
            v105 = 0;
            v106 = 1;
            v107 = v101[1];
            v108 = *v101;
            v109 = v100;
            do
            {
              if (v108 == -1 && v107 == -1)
              {
                if (v105)
                  v117 = v105;
                else
                  v117 = v101;
                goto LABEL_235;
              }
              if (v105)
                v110 = 0;
              else
                v110 = v107 == -2;
              if (v110 && v108 == -2)
                v105 = v101;
              v112 = v109 + v106++;
              v109 = v112 & v99;
              v101 = (int *)(v264 + 16 * (v112 & v99));
              v108 = *v101;
              v107 = v101[1];
            }
            while ((_DWORD)v92 != *v101 || (_DWORD)v94 != v107);
            v114 = 1;
            while (v103 != -1 || v102 != -1)
            {
              v115 = v100 + v114++;
              v100 = v115 & v99;
              v101 = (int *)(v264 + 16 * v100);
              v103 = *v101;
              v102 = v101[1];
              if ((_DWORD)v92 == *v101 && (_DWORD)v94 == v102)
                goto LABEL_442;
            }
            v101 = (int *)(v264 + 16 * v266);
LABEL_442:
            v208 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v101 + 1) + 32) + 4);
            v209 = *(_QWORD **)(v3 + 264);
            v210 = v93 & 0x7FFFFFFF;
            if ((*(_QWORD *)(v209[3] + 16 * v210) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v209[3]
                                                                                         + 16 * (v208 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_243;
            v211 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v209 + 16) + 176))(*(_QWORD *)(*v209 + 16));
            v212 = *(_QWORD *)(v209[3] + 16 * v210 + 8);
            if (v212)
            {
              do
              {
                v213 = *(_QWORD *)(v212 + 24);
                if (v208 - 1 <= 0x3FFFFFFE)
                  llvm::MachineOperand::substPhysReg((unsigned int *)v212, v208, v211);
                else
                  llvm::MachineOperand::setReg(v212, v208);
                v212 = v213;
              }
              while (v213);
            }
            llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v3 + 264), v208);
LABEL_450:
            v214 = (char *)sub_1C477672C((uint64_t)&v272, v19);
            if (v273 == v272)
              v215 = (uint64_t *)((char *)&v274 + 4);
            else
              v215 = &v274;
            if (v214 != &v273[8 * *(unsigned int *)v215])
            {
              *(_QWORD *)v214 = -2;
              ++v275;
            }
            v216 = v19;
            if ((*(_BYTE *)v19 & 4) == 0)
            {
              v216 = v19;
              if ((*(_WORD *)(v19 + 44) & 8) != 0)
              {
                v216 = v19;
                do
                  v216 = *(_QWORD *)(v216 + 8);
                while ((*(_WORD *)(v216 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v19 + 24) + 40, v19, *(_QWORD *)(v216 + 8));
LABEL_159:
            v258 = 1;
LABEL_31:
            v19 = v21;
            if (v21 == v263)
            {
              v253 = v264;
              v9 = v256;
              goto LABEL_566;
            }
          }
          v305 = (unint64_t *)&v307;
          v306 = 0x200000000;
          v309[0] = 0;
          v309[1] = 0;
          v308 = v309;
          if (*(_DWORD *)(v19 + 40) >= 2u)
          {
            v26 = 1;
            do
            {
              LODWORD(v302) = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 32 * v26 + 4);
              sub_1C4778DC4((uint64_t)&v305, (unsigned int *)&v302);
              v26 += 2;
            }
            while (v26 < *(_DWORD *)(v19 + 40));
          }
          v302 = v304;
          v303 = 0x400000000;
          v27 = sub_1C51FC8A8(v3, *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4), (uint64_t)&v305, (uint64_t)&v302);
          v28 = (char *)v302;
          v29 = v303;
          if ((v27 & 1) != 0)
          {
            v30 = 0;
            if ((_DWORD)v303)
            {
              v31 = 24 * v303;
              v32 = (llvm::MachineInstr **)((char *)v302 + 16);
              do
              {
                if (*(_BYTE *)v32)
                {
                  llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v3 + 248), *(v32 - 2), 0, *((unsigned int *)v32 - 2), *((unsigned int *)v32 - 1));
                  v30 = 1;
                }
                v32 += 3;
                v31 -= 24;
              }
              while (v31);
              v28 = (char *)v302;
              v29 = v303;
            }
            v33 = v30;
            if (!v29)
              goto LABEL_56;
LABEL_52:
            v34 = v28 - 8;
            v35 = 24 * v29;
            do
            {
              if (v34[v35])
                v34[v35] = 0;
              v35 -= 24;
            }
            while (v35);
          }
          else
          {
            v33 = 0;
            if ((_DWORD)v303)
              goto LABEL_52;
          }
LABEL_56:
          if (v28 != v304)
            free(v28);
          sub_1C47655E8((uint64_t)&v308, v309[0]);
          if (v305 != (unint64_t *)&v307)
            free(v305);
          if ((v33 & 1) != 0)
            goto LABEL_159;
          v22 = *(unsigned __int16 **)(v19 + 16);
          v23 = *v22;
          goto LABEL_62;
        }
        v253 = 0;
LABEL_566:
        MEMORY[0x1CAA32FB4](v253, 8);
        MEMORY[0x1CAA32FB4](v267, 8);
        sub_1C47655E8((uint64_t)&v293, v294);
        if (v290 != v292)
          free(v290);
        MEMORY[0x1CAA32FB4](v270[0], 8);
        sub_1C47655E8((uint64_t)&v299, v300);
        if (v296 != v298)
          free(v296);
        if (v273 != v272)
          free(v273);
        v9 = *(_QWORD *)(v9 + 8);
        if (v9 == v255)
          return v258 & 1;
      }
    }
    LOBYTE(v258) = 0;
  }
  return v258 & 1;
}

void sub_1C51FC678(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C51FC7A4(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;

  if (a2 - 1 > 0x3FFFFFFE)
    return 0;
  v3 = *(_QWORD **)(a1 + 264);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v3 + 16) + 176))(*(_QWORD *)(*v3 + 16))
                                        + 216)
                            + 16)
                + a2))
    return (*(_QWORD *)(v3[44] + 8 * (a2 >> 6)) >> a2) & 1;
  else
    return 1;
}

uint64_t sub_1C51FC81C(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v9;
  int v10;

  v2 = a1[2].i32[0];
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    v6 = (int *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_3:
      *v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    v9 = 1;
    while (v7 != -1)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v7 = *(_DWORD *)(*(_QWORD *)&v3 + 16 * v5);
      if (*a2 == v7)
      {
        v6 = (int *)(*(_QWORD *)&v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  return 0;
}

uint64_t sub_1C51FC8A8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *i;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::MachineInstr *v18;
  unsigned int RegisterUseOperandIdx;
  int *v20;
  int v21;
  int v22;
  int v23;
  uint64_t TiedOperandIdx;
  uint64_t v26;
  BOOL v27;
  int v28;
  llvm::MachineInstr *v29;
  unint64_t v30;
  char v31;
  unsigned int v32;

  if (*(_QWORD *)(a3 + 40))
  {
    for (i = *(uint64_t **)(a3 + 32); i; i = (uint64_t *)*i)
    {
      v9 = *((_DWORD *)i + 7);
      if (v9 <= a2)
      {
        if (v9 >= a2)
          return 1;
        ++i;
      }
    }
  }
  else
  {
    v10 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_DWORD **)a3;
      v12 = 4 * v10;
      while (*v11 != a2)
      {
        ++v11;
        v12 -= 4;
        if (!v12)
          goto LABEL_15;
      }
      if (v12)
        return 1;
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(a1 + 264);
  v15 = a2;
  result = llvm::MachineRegisterInfo::hasOneNonDBGUse(v14, a2);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a4 + 8) >= dword_1ED7FD990)
      return 0;
    if ((a2 & 0x80000000) != 0)
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    else
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v15);
    v17 = *v16;
    if ((*(_BYTE *)(v17 + 3) & 0x81) != 0)
    {
      do
        v17 = *(_QWORD *)(v17 + 24);
      while ((*(_DWORD *)v17 & 0x81000000) != 0);
    }
    v18 = *(llvm::MachineInstr **)(v17 + 8);
    RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v18, v15, 0, 0);
    result = 0;
    v32 = RegisterUseOperandIdx;
    if (*(_BYTE *)(*((_QWORD *)v18 + 2) + 4) == 1)
    {
      result = 0;
      v20 = (int *)*((_QWORD *)v18 + 4);
      v21 = *v20;
      if (!*v20 && v20[1] < 0)
      {
        v22 = v21 & 0x10000FF;
        v23 = v21 & 0xF00000;
        if (v22 == 0x1000000 && v23 != 0)
        {
          TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(v18, 0);
          if (RegisterUseOperandIdx == (_DWORD)TiedOperandIdx)
          {
            v29 = v18;
            LOBYTE(v30) = 0;
            v31 = 0;
LABEL_40:
            sub_1C51FCACC(a4, (char *)&v29);
            return sub_1C51FC8A8(a1, v20[1], a3, a4);
          }
          v26 = TiedOperandIdx;
          v28 = -1;
          if ((*(unsigned int (**)(_QWORD, llvm::MachineInstr *, unsigned int *, int *))(**(_QWORD **)(a1 + 248) + 200))(*(_QWORD *)(a1 + 248), v18, &v32, &v28))
          {
            v27 = v28 == (_DWORD)v26;
          }
          else
          {
            v27 = 0;
          }
          if (v27)
          {
            v29 = v18;
            v30 = v32 | (unint64_t)(v26 << 32);
            v31 = 1;
            goto LABEL_40;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1C51FCACC(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  _BYTE *v8;
  unint64_t v9;
  char *v10;
  _BOOL4 v12;
  unint64_t v13;
  char *v14;
  int v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v4 + 1;
    v10 = &v5[24 * v4];
    v12 = v5 <= a2 && v10 > a2;
    if (v12)
      v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v5) >> 3);
    else
      v13 = -1;
    v22 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v9, 24, &v22);
    v14 = *(char **)a1;
    v15 = *(_DWORD *)(a1 + 8);
    if (!v15)
      goto LABEL_25;
    v16 = &v14[24 * v15];
    v17 = v5 + 16;
    v18 = v14 + 8;
    do
    {
      v19 = v18 - 8;
      *((_QWORD *)v17 - 2) = *((_QWORD *)v18 - 1);
      *(v17 - 8) = 0;
      *v17 = 0;
      if (v18[8])
      {
        *((_QWORD *)v17 - 1) = *(_QWORD *)v18;
        *v17 = 1;
      }
      v17 += 24;
      v18 += 24;
    }
    while (v19 + 24 != v16);
    v14 = *(char **)a1;
    v4 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v4)
    {
      v20 = 24 * v4;
      do
      {
        if (v14[v20 - 8])
          v14[v20 - 8] = 0;
        v20 -= 24;
      }
      while (v20);
    }
    else
    {
LABEL_25:
      LODWORD(v4) = 0;
    }
    v21 = v22;
    if (v14 != (char *)(a1 + 16))
    {
      free(v14);
      LODWORD(v4) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v21;
    if (v12)
      a2 = &v5[24 * v13];
  }
  *(_QWORD *)&v5[24 * v4] = *(_QWORD *)a2;
  v6 = &v5[24 * v4];
  v6[8] = 0;
  v7 = v6 + 8;
  v6[16] = 0;
  v8 = v6 + 16;
  if (a2[16])
  {
    *v7 = *((_QWORD *)a2 + 1);
    *v8 = 1;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t sub_1C51FCC6C(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v3 == v4)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  while ((~*(_DWORD *)(v5 + 32 * v3) & 0x5000000) == 0)
  {
    *(_DWORD *)(a1 + 16) = ++v3;
    if (v4 == v3)
      return 0;
  }
  *a2 = 0;
  *a3 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 32 * *(unsigned int *)(a1 + 16) + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 32 * *(unsigned int *)(a1 + 16)) >> 8) & 0xFFF) << 32);
  ++*(_DWORD *)(a1 + 16);
  return 1;
}

BOOL sub_1C51FCCE4(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  _BOOL8 v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int16 v37;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v46;
  int v47;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  int v108;
  uint64_t v109;
  void *__src;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD v117[4];
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) < 0x3FFFFFFF)
    return 0;
  v5 = a1;
  v101 = 0;
  v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v100 = HIDWORD(a2);
  v115 = v117;
  v98 = a2;
  v117[0] = a2;
  v116 = 0x400000001;
  v6 = 1;
  do
  {
    v7 = *((_QWORD *)v115 + v6 - 1);
    LODWORD(v116) = v6 - 1;
    if ((v7 - 1) < 0x3FFFFFFF)
    {
LABEL_232:
      v3 = 0;
      goto LABEL_233;
    }
    v8 = *(_QWORD *)(v5 + 264);
    if ((v7 & 0x80000000) != 0)
      v9 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    else
      v9 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v7);
    v10 = *v9;
    v102 = *(_QWORD **)(v5 + 264);
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 3) & 1) != 0 || (v10 = *(_QWORD *)(v10 + 24)) != 0 && (*(_BYTE *)(v10 + 3) & 1) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      else
        v11 = 0;
      v8 = *(_QWORD *)(v5 + 264);
    }
    else
    {
      v11 = 0;
    }
    v12 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v7);
    if ((v7 & 0x80000000) != 0)
      v12 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    v13 = *v12;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if ((*(_BYTE *)(v13 + 3) & 1) == 0)
        v13 = 0;
    }
    v14 = HIDWORD(v7);
    v103 = *(_QWORD *)(v5 + 248);
    v15 = (unint64_t)(v13 - *(_QWORD *)(*(_QWORD *)(v13 + 8) + 32)) >> 5;
    v104 = HIDWORD(v7);
    LODWORD(v105) = v7;
    do
    {
      if (!v11)
        goto LABEL_203;
      v16 = *(unsigned __int16 **)(v11 + 16);
      v17 = *v16;
      if (v17 == 19)
      {
        v18 = *(_QWORD *)(v11 + 32);
        if (((*(_DWORD *)(v18 + 32 * v15) >> 8) & 0xFFF) != (_DWORD)v14)
          goto LABEL_202;
        v19 = *(_DWORD *)(v18 + 32);
        if ((v19 & 0x10000000) != 0)
          goto LABEL_202;
        v20 = *(_DWORD *)(v18 + 36);
        v21 = (v19 >> 8) & 0xFFF;
        __src = &v112;
        v111 = 0x200000000;
        v114 = 0;
LABEL_21:
        sub_1C51FDBF0(&__src, v20, v21);
LABEL_22:
        v22 = v105;
        goto LABEL_23;
      }
      v25 = *((_QWORD *)v16 + 1);
      if ((v25 & 0x8000) != 0)
      {
        v37 = *(_WORD *)(v11 + 44);
        if ((v37 & 0xC) != 0 && (v37 & 4) == 0)
        {
          v90 = v11;
          if ((v25 & 0x200000) != 0)
            goto LABEL_201;
          while ((*(_WORD *)(v90 + 44) & 8) != 0)
          {
            v90 = *(_QWORD *)(v90 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v90 + 16) + 10) & 0x20) != 0)
              goto LABEL_201;
          }
        }
        else
        {
          if ((v25 & 0x200000) == 0)
            goto LABEL_51;
LABEL_201:
          if ((*(_WORD *)(v11 + 44) & 0x4000) == 0)
          {
LABEL_202:
            v11 = 0;
            goto LABEL_203;
          }
        }
LABEL_51:
        if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v11) && *((_BYTE *)v16 + 4) == 1)
        {
          v39 = *(_QWORD *)(v11 + 32);
          v40 = (_DWORD *)(v39 + 32 * v15);
          if (((*v40 >> 8) & 0xFFF) == (_DWORD)v14)
          {
            v41 = *(_DWORD *)(v11 + 40);
            v42 = v15 + 1;
            if ((_DWORD)v15 + 1 != v41)
            {
              v43 = v40[1];
              v44 = *(_DWORD *)(v11 + 40);
              while (1)
              {
                if (!*(_DWORD *)(v39 + 32 * v42)
                  && (~*(_DWORD *)(v39 + 32 * v42) & 0x7000000) != 0
                  && *(_DWORD *)(v39 + 32 * v42 + 4) != 0)
                {
                  v26 = v44 == v41;
                  v44 = v42;
                  if (!v26)
                    break;
                }
                if (v41 == ++v42)
                {
                  if (v44 >= v41)
                    goto LABEL_202;
                  if ((v43 & 0x80000000) != 0)
                    v46 = (uint64_t *)(v102[3] + 16 * (v43 & 0x7FFFFFFF) + 8);
                  else
                    v46 = (uint64_t *)(v102[34] + 8 * v43);
                  v22 = v105;
                  v83 = *v46;
                  if (v83)
                  {
                    if ((*(_BYTE *)(v83 + 3) & 0x81) != 0)
                    {
                      while (1)
                      {
                        v83 = *(_QWORD *)(v83 + 24);
                        if (!v83)
                          break;
                        if ((*(_DWORD *)v83 & 0x81000000) == 0)
                          goto LABEL_162;
                      }
                    }
                    else
                    {
LABEL_162:
                      v84 = *(_QWORD *)(v83 + 8);
                      if (**(_WORD **)(v84 + 16) == 11)
                        goto LABEL_202;
                      while (1)
                      {
                        v83 = *(_QWORD *)(v83 + 24);
                        if (!v83)
                          break;
                        if ((*(_DWORD *)v83 & 0x81000000) == 0)
                        {
                          v85 = *(_QWORD *)(v83 + 8);
                          if (v85 != v84)
                          {
                            v84 = *(_QWORD *)(v83 + 8);
                            if (**(_WORD **)(v85 + 16) == 11)
                              goto LABEL_202;
                          }
                        }
                      }
                    }
                  }
                  v86 = *(_DWORD *)(v39 + 32 * v44);
                  if ((v86 & 0x10000000) == 0)
                  {
                    v49 = *(_DWORD *)(v39 + 32 * v44 + 4);
                    __src = &v112;
                    v50 = (v86 >> 8) & 0xFFF;
                    goto LABEL_170;
                  }
                  goto LABEL_202;
                }
              }
            }
          }
        }
        goto LABEL_202;
      }
      if (byte_1ED7FD750)
        goto LABEL_202;
      v26 = v17 != 18 && (v25 & 0x200000000) == 0;
      if (!v26)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 32 * v15) & 0xFFF00) != 0 || !v103)
          goto LABEL_202;
        v118 = &v120;
        v119 = 0x800000000;
        if (v17 == 18)
        {
          v27 = *(_DWORD *)(v11 + 40);
          if (v27 == 1)
            goto LABEL_214;
          v97 = v5;
          v28 = 0;
          v29 = 1;
          do
          {
            v30 = a3;
            v31 = *(_QWORD *)(v11 + 32);
            v32 = v29;
            v33 = *(_DWORD *)(v31 + 32 * v29);
            if ((v33 & 0x10000000) == 0)
            {
              v34 = *(unsigned int *)(v31 + 32 * v29 + 4);
              v35 = *(_QWORD *)(v31 + 32 * (v29 + 1) + 16);
              if (v28 >= HIDWORD(v119))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)&v120, v28 + 1, 12);
                v28 = v119;
              }
              v36 = (char *)v118 + 12 * v28;
              *(_QWORD *)v36 = v34 | ((unint64_t)((v33 >> 8) & 0xFFF) << 32);
              *((_DWORD *)v36 + 2) = v35;
              v28 = v119 + 1;
              LODWORD(v119) = v119 + 1;
            }
            v29 = v32 + 2;
            a3 = v30;
          }
          while (v27 != v32 + 2);
LABEL_210:
          v5 = v97;
          if (!v28)
          {
LABEL_214:
            v112 = 0;
            v113 = 0;
            __src = &v112;
            v111 = 0x200000000;
            v114 = 0;
          }
          else
          {
            v91 = v28;
            v92 = (unsigned int *)v118 + 1;
            v93 = 12 * v91;
            while (v92[1] != (_DWORD)v14)
            {
              v92 += 3;
              v93 -= 12;
              if (!v93)
                goto LABEL_214;
            }
            v94 = *(v92 - 1);
            v95 = *v92;
            __src = &v112;
            v111 = 0x200000000;
            v114 = 0;
            sub_1C51FDBF0(&__src, v94, v95);
          }
        }
        else
        {
          v97 = v5;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v103 + 608))(v103, v11, v15, &v118))
          {
            v28 = v119;
            goto LABEL_210;
          }
          v112 = 0;
          v113 = 0;
          __src = &v112;
          v111 = 0x200000000;
          v114 = 0;
        }
        v87 = v118;
        v22 = v105;
        if (v118 == &v120)
          goto LABEL_23;
LABEL_217:
        free(v87);
        goto LABEL_23;
      }
      if (v17 == 9 || (v25 & 0x800000000) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 32 * v15) & 0xFFF00) != 0 || !v103)
          goto LABEL_202;
        v107 = 0;
        v118 = 0;
        LODWORD(v119) = 0;
        if ((llvm::TargetInstrInfo::getInsertSubregInputs(v103, v11, v15, &v107, &v118) & 1) == 0)
          goto LABEL_182;
        v22 = v105;
        if ((_DWORD)v119 == (_DWORD)v14)
        {
          v49 = v118;
          v50 = HIDWORD(v118);
LABEL_181:
          __src = &v112;
LABEL_170:
          v111 = 0x200000000;
          v114 = 0;
LABEL_171:
          sub_1C51FDBF0(&__src, v49, v50);
          goto LABEL_23;
        }
        if ((*(_QWORD *)(v102[3]
                        + 16 * (*(_DWORD *)(*(_QWORD *)(v11 + 32) + 32 * v15 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v102[3] + 16 * (v107 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
          && HIDWORD(v107) == 0)
        {
          v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v102 + 16) + 176))(*(_QWORD *)(*v102 + 16));
          if (v89)
          {
            if ((*(_QWORD *)(*(_QWORD *)(v89 + 232) + 8 * v119) & *(_QWORD *)(*(_QWORD *)(v89 + 232)
                                                                                             + 8 * v14)) == 0)
            {
              v49 = v107;
              __src = &v112;
              v111 = 0x200000000;
              v114 = 0;
              v50 = v14;
              goto LABEL_171;
            }
          }
        }
        goto LABEL_190;
      }
      v67 = v25 & 0x400000000;
      if (v17 == 8 || v67 != 0)
      {
        if ((_DWORD)v14)
          goto LABEL_202;
        if (!v103)
        {
          v11 = 0;
          LODWORD(v14) = 0;
LABEL_203:
          v112 = 0;
          v113 = 0;
          __src = &v112;
          v111 = 0x200000000;
          v47 = 1;
          v114 = 0;
          goto LABEL_204;
        }
        v118 = 0;
        LODWORD(v119) = 0;
        if ((llvm::TargetInstrInfo::getExtractSubregInputs(v103, v11, v15, &v118) & 1) == 0)
        {
LABEL_182:
          v112 = 0;
          v113 = 0;
          __src = &v112;
          v111 = 0x200000000;
          v114 = 0;
          goto LABEL_22;
        }
        v22 = v105;
        if (!HIDWORD(v118))
        {
          v49 = v118;
          v50 = v119;
          goto LABEL_181;
        }
LABEL_190:
        v112 = 0;
        v113 = 0;
        __src = &v112;
        v111 = 0x200000000;
        v114 = 0;
        goto LABEL_23;
      }
      if (*v16 && v17 != 69)
      {
        if (v17 != 11)
          goto LABEL_202;
        v70 = *(_QWORD *)(v11 + 32);
        if (*(_QWORD *)(v70 + 112) != v14 || (*(_DWORD *)(v70 + 64) & 0xFFF00) != 0)
          goto LABEL_202;
        v20 = *(_DWORD *)(v70 + 68);
        __src = &v112;
        v111 = 0x200000000;
        v114 = 0;
        v21 = v14;
        goto LABEL_21;
      }
      v118 = &v120;
      v119 = 0x200000000;
      v122 = 0;
      if (((**(_DWORD **)(v11 + 32) >> 8) & 0xFFF) != (_DWORD)v14)
      {
        v82 = 0;
        v112 = 0;
        v113 = 0;
        __src = &v112;
        v111 = 0x200000000;
LABEL_175:
        v22 = v105;
        goto LABEL_176;
      }
      v73 = *(_DWORD *)(v11 + 40);
      if (v73 >= 2)
      {
        v74 = 1;
        while (1)
        {
          v75 = *(_QWORD *)(v11 + 32);
          v76 = *(_DWORD *)(v75 + 32 * v74);
          if ((v76 & 0x10000000) != 0)
            break;
          v77 = v74;
          sub_1C51FDBF0(&v118, *(_DWORD *)(v75 + 32 * v74 + 4), (v76 >> 8) & 0xFFF);
          v74 = v77 + 2;
          if (v77 + 2 >= v73)
          {
            v78 = v119;
            __src = &v112;
            v111 = 0x200000000;
            v22 = v105;
            if (!(_DWORD)v119)
              goto LABEL_173;
            if (v118 == &v120)
            {
              v79 = &v112;
              v80 = &v120;
              v81 = v119;
              if (v119 < 3uLL)
                goto LABEL_150;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v112, v119, 8);
              v81 = v119;
              if ((_DWORD)v119)
              {
                v80 = v118;
                v79 = (uint64_t *)__src;
LABEL_150:
                memcpy(v79, v80, 8 * v81);
              }
              LODWORD(v111) = v78;
            }
            else
            {
              __src = v118;
              v111 = v119;
              v118 = &v120;
              HIDWORD(v119) = 0;
            }
            LODWORD(v119) = 0;
            goto LABEL_173;
          }
        }
        v82 = 0;
        v112 = 0;
        v113 = 0;
        __src = &v112;
        v111 = 0x200000000;
        goto LABEL_175;
      }
      __src = &v112;
      v111 = 0x200000000;
      v22 = v105;
LABEL_173:
      v82 = v122;
LABEL_176:
      v114 = v82;
      v87 = v118;
      if (v118 != &v120)
        goto LABEL_217;
LABEL_23:
      if ((int)v111 < 1)
      {
        v11 = 0;
        v47 = 1;
        goto LABEL_204;
      }
      if ((_DWORD)v111 != 1)
      {
        v114 = v11;
LABEL_77:
        v11 = 0;
        goto LABEL_78;
      }
      v23 = *(unsigned int *)__src;
      v114 = v11;
      if ((v23 - 1) < 0x3FFFFFFF)
        goto LABEL_77;
      v24 = (uint64_t *)((v23 & 0x80000000) != 0 ? v102[3] + 16 * (v23 & 0x7FFFFFFF) + 8 : v102[34] + 8 * v23);
      v71 = *v24;
      if (!v71)
        goto LABEL_77;
      if ((*(_BYTE *)(v71 + 3) & 1) == 0)
      {
        v71 = *(_QWORD *)(v71 + 24);
        if (!v71 || (*(_BYTE *)(v71 + 3) & 1) == 0)
          goto LABEL_77;
      }
      v11 = *(_QWORD *)(v71 + 8);
      v15 = (unint64_t)(v71 - *(_QWORD *)(v11 + 32)) >> 5;
      LODWORD(v14) = *((_DWORD *)__src + 1);
LABEL_78:
      sub_1C51FDB0C((const void **)&v107, (uint64_t)a3, v22, v104);
      if (v108 >= 1)
      {
        if (v108 == 1)
          v47 = 5;
        else
          v47 = 1;
        goto LABEL_154;
      }
      v118 = (uint64_t *)(v22 | (v104 << 32));
      v119 = (uint64_t)&v121;
      v120 = 0x200000000;
      v51 = v111;
      v52 = v104;
      v53 = v22;
      if ((_DWORD)v111)
      {
        if (v111 < 3)
        {
          v54 = &v121;
          v55 = v111;
          goto LABEL_85;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)&v121, v111, 8);
        v55 = v111;
        if ((_DWORD)v111)
        {
          v54 = (uint64_t *)v119;
LABEL_85:
          memcpy(v54, __src, 8 * v55);
        }
        LODWORD(v120) = v51;
        v53 = (int)v118;
        v52 = HIDWORD(v118);
      }
      v123 = v114;
      v106 = 0;
      if ((sub_1C51FDC5C((uint64_t)a3, v53, v52, &v106) & 1) == 0)
      {
        v56 = *a3 >> 1;
        if ((*a3 & 1) != 0)
          v57 = 4;
        else
          v57 = a3[4];
        if (4 * v56 + 4 >= 3 * v57)
        {
          v57 *= 2;
        }
        else if (v57 + ~v56 - a3[1] > v57 >> 3)
        {
LABEL_93:
          v58 = v106;
          *a3 += 2;
          if (*(_DWORD *)v58 != -1 || *(_DWORD *)(v58 + 4) != -1)
            --a3[1];
          *(_QWORD *)v58 = v118;
          v59 = (void *)(v58 + 24);
          *(_QWORD *)(v58 + 8) = v58 + 24;
          *(_QWORD *)(v58 + 16) = 0x200000000;
          if ((uint64_t **)v58 == &v118)
            goto LABEL_104;
          v60 = v120;
          if (!(_DWORD)v120)
            goto LABEL_104;
          if ((uint64_t *)v119 != &v121)
          {
            *(_QWORD *)(v58 + 8) = v119;
            *(_DWORD *)(v58 + 16) = v60;
            *(_DWORD *)(v58 + 20) = HIDWORD(v120);
            v119 = (uint64_t)&v121;
            HIDWORD(v120) = 0;
            goto LABEL_103;
          }
          if (v120 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 8, v58 + 24, v120, 8);
            v62 = v120;
            if (!(_DWORD)v120)
              goto LABEL_102;
            v61 = (uint64_t *)v119;
            v59 = *(void **)(v58 + 8);
          }
          else
          {
            v61 = &v121;
            v62 = v120;
          }
          memcpy(v59, v61, 8 * v62);
LABEL_102:
          *(_DWORD *)(v58 + 16) = v60;
LABEL_103:
          LODWORD(v120) = 0;
LABEL_104:
          *(_QWORD *)(v58 + 40) = v123;
          goto LABEL_105;
        }
        sub_1C51FDD5C((uint64_t)a3, v57);
        v106 = 0;
        sub_1C51FDC5C((uint64_t)a3, (int)v118, SHIDWORD(v118), &v106);
        goto LABEL_93;
      }
LABEL_105:
      if ((uint64_t *)v119 != &v121)
        free((void *)v119);
      v63 = v111;
      if (v111 >= 2)
      {
        if (++v101 < dword_1ED7FD8D0)
        {
          v64 = 0;
          v65 = v116;
          do
          {
            v66 = *((_QWORD *)__src + v64);
            if (v65 >= HIDWORD(v116))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v65 + 1, 8);
              v65 = v116;
            }
            *((_QWORD *)v115 + v65) = v66;
            v65 = v116 + 1;
            LODWORD(v116) = v116 + 1;
            ++v64;
          }
          while (v63 != v64);
          v47 = 5;
          goto LABEL_154;
        }
LABEL_122:
        v47 = 1;
        goto LABEL_154;
      }
      v69 = HIDWORD(*(_QWORD *)__src);
      v104 = v69;
      v105 = *(_QWORD *)__src;
      if (*(_QWORD *)__src - 1 < 0x3FFFFFFF)
        goto LABEL_122;
      if ((*(unsigned int (**)(_QWORD, unint64_t, unint64_t, unint64_t, unint64_t))(**(_QWORD **)(v5 + 256) + 192))(*(_QWORD *)(v5 + 256), v99, v100, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 264) + 24) + 16 * (*(_QWORD *)__src & 0x7FFFFFFFLL)) & 0xFFFFFFFFFFFFFFF8, v69))
      {
        if ((_DWORD)v69)
          v72 = v101 == 0;
        else
          v72 = 1;
        if (v72)
          v47 = 5;
        else
          v47 = 4;
      }
      else
      {
        v47 = 4;
      }
LABEL_154:
      if (v107 != &v109)
        free(v107);
LABEL_204:
      if (__src != &v112)
        free(__src);
    }
    while (v47 == 4);
    if (v47 != 5)
      goto LABEL_232;
    v6 = v116;
  }
  while ((_DWORD)v116);
  v3 = (_DWORD)v105 != v98;
LABEL_233:
  if (v115 != v117)
    free(v115);
  return v3;
}

int *sub_1C51FDA44(int *a1)
{
  int v2;
  unsigned int v3;
  int *v4;
  char *v5;
  _DWORD *v6;
  int v7;
  int v8;
  char *v9;
  _DWORD *v12;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v4 = a1 + 2;
    v3 = 4;
  }
  else
  {
    v3 = a1[4];
    if (!v3)
      goto LABEL_18;
    v4 = (int *)*((_QWORD *)a1 + 1);
  }
  v5 = (char *)&v4[12 * v3];
  v6 = v4 + 6;
  do
  {
    v7 = *(v6 - 6);
    v8 = *(v6 - 5);
    v9 = (char *)(v6 - 6);
    if ((v7 != -1 || v8 != -1) && (v7 != -2 || v8 != -2))
    {
      v12 = (_DWORD *)*((_QWORD *)v6 - 2);
      if (v6 != v12)
        free(v12);
    }
    v6 += 12;
  }
  while (v9 + 48 != v5);
  v2 = *a1;
LABEL_18:
  if ((v2 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
  return a1;
}

void sub_1C51FDAF0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51FDB04()
{
  return 0;
}

double sub_1C51FDB0C(const void **a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  void *v6;
  double result;
  unsigned int v8;
  const void **v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  v12 = 0;
  if (sub_1C51FDC5C(a2, a3, a4, &v12))
  {
    v5 = v12;
    v6 = a1 + 2;
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x200000000;
    a1[1] = (const void *)0x200000000;
    v8 = *(_DWORD *)(v5 + 16);
    v9 = (const void **)(v5 + 8);
    if (v8)
      v10 = v9 == a1;
    else
      v10 = 1;
    if (v10)
      goto LABEL_10;
    if (v8 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 2), *(unsigned int *)(v5 + 16), 8);
      v11 = *(_DWORD *)(v5 + 16);
      if (!v11)
        goto LABEL_9;
      v6 = (void *)*a1;
    }
    else
    {
      v11 = *(_DWORD *)(v5 + 16);
    }
    memcpy(v6, *v9, 8 * v11);
LABEL_9:
    *((_DWORD *)a1 + 2) = v8;
LABEL_10:
    a1[4] = *(const void **)(v5 + 40);
    return result;
  }
  a1[2] = 0;
  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x200000000;
  a1[1] = (const void *)0x200000000;
  a1[3] = 0;
  a1[4] = 0;
  return result;
}

_DWORD *sub_1C51FDBF0(_DWORD *result, unsigned int a2, unsigned int a3)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
    LODWORD(v6) = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2 | ((unint64_t)a3 << 32);
  ++v5[2];
  return result;
}

uint64_t sub_1C51FDC5C(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((37 * a3) | ((unint64_t)(37 * a2) << 32))
     + ~((unint64_t)(37 * a3) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_DWORD *)(v4 + 48 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -1 || v14 != -1)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -2;
      if (v19 && v13 == -2)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_DWORD *)(v4 + 48 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

void sub_1C51FDD5C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  _QWORD *v13;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[192];
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(48 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C51FDFF0(a1, v7, v7 + 48 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v23;
  do
  {
    v11 = *(_DWORD *)(a1 + v9 + 8);
    v12 = *(_DWORD *)(a1 + v9 + 12);
    v13 = (_QWORD *)(a1 + v9 + 8);
    if (v11 == -1 && v12 == -1)
      goto LABEL_27;
    if (v11 == -2 && v12 == -2)
      goto LABEL_27;
    *(_QWORD *)v10 = *v13;
    v16 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    v17 = a1 + v9;
    *((_QWORD *)v10 + 2) = 0x200000000;
    v18 = *(unsigned int *)(a1 + v9 + 24);
    v19 = *(void **)(a1 + v9 + 16);
    if ((_DWORD)v18 && v13 != (_QWORD *)v10)
    {
      v20 = a1 + v9;
      v21 = a1 + v9 + 32;
      if ((void *)v21 != v19)
      {
        *((_QWORD *)v10 + 1) = v19;
        *((_DWORD *)v10 + 4) = v18;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v20 + 28);
        *(_QWORD *)(v17 + 16) = v21;
        *(_DWORD *)(v20 + 28) = 0;
        v19 = (void *)(a1 + v9 + 32);
        goto LABEL_24;
      }
      if (v18 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), v18, 8);
        v22 = *(unsigned int *)(v17 + 24);
        if (!(_DWORD)v22)
          goto LABEL_23;
        v19 = *(void **)(v17 + 16);
        v16 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v22 = *(unsigned int *)(a1 + v9 + 24);
      }
      memcpy(v16, v19, 8 * v22);
LABEL_23:
      *((_DWORD *)v10 + 4) = v18;
      v19 = *(void **)(v17 + 16);
LABEL_24:
      *(_DWORD *)(v17 + 24) = 0;
    }
    *((_QWORD *)v10 + 5) = *(_QWORD *)(v17 + 48);
    v10 += 48;
    if ((void *)(v17 + 32) != v19)
      free(v19);
LABEL_27:
    v9 += 48;
  }
  while (v9 != 192);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(48 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C51FDFF0(a1, (uint64_t)v23, (uint64_t)v10);
}

void sub_1C51FDFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  const void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  _QWORD *v22;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 200);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[6 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    while (1)
    {
      v10 = *(_DWORD *)v4;
      v11 = *(_DWORD *)(v4 + 4);
      if (*(_DWORD *)v4 == -1 && v11 == -1)
        goto LABEL_27;
      if (v10 == -2 && v11 == -2)
        goto LABEL_27;
      v22 = 0;
      sub_1C51FDC5C(a1, v10, v11, &v22);
      v14 = v22;
      *v22 = *(_QWORD *)v4;
      v15 = v14 + 3;
      v14[1] = v14 + 3;
      v14[2] = 0x200000000;
      v16 = *(unsigned int *)(v4 + 16);
      if ((_QWORD *)v4 != v14 && (_DWORD)v16 != 0)
        break;
LABEL_25:
      v14[5] = *(_QWORD *)(v4 + 40);
      *(_DWORD *)a1 += 2;
      v20 = *(void **)(v4 + 8);
      if ((void *)(v4 + 24) != v20)
        free(v20);
LABEL_27:
      v4 += 48;
      if (v4 == a3)
        return;
    }
    v18 = *(const void **)(v4 + 8);
    if ((const void *)(v4 + 24) != v18)
    {
      v14[1] = v18;
      v21 = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v14 + 4) = v16;
      *((_DWORD *)v14 + 5) = v21;
      *(_QWORD *)(v4 + 8) = v4 + 24;
      *(_DWORD *)(v4 + 20) = 0;
      goto LABEL_24;
    }
    if (v16 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v14 + 1), (uint64_t)(v14 + 3), v16, 8);
      v19 = *(unsigned int *)(v4 + 16);
      if (!(_DWORD)v19)
        goto LABEL_23;
      v18 = *(const void **)(v4 + 8);
      v15 = (void *)v14[1];
    }
    else
    {
      v19 = *(unsigned int *)(v4 + 16);
    }
    memcpy(v15, v18, 8 * v19);
LABEL_23:
    *((_DWORD *)v14 + 4) = v16;
LABEL_24:
    *(_DWORD *)(v4 + 16) = 0;
    goto LABEL_25;
  }
}

uint64_t sub_1C51FE188(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  __n128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int IncompleteVirtualRegister;
  uint64_t v22;
  uint64_t v23;
  llvm::MachineFunction *v24;
  llvm::MachineInstr *v25;
  llvm::MachineInstr *v26;
  char *v27;
  llvm::MachineFunction *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v43;
  unint64_t v44;
  _DWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[32];
  void *v52;
  int v53;
  _QWORD v54[5];

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v54[3] = *MEMORY[0x1E0C80C00];
  v12 = HIDWORD(a3);
  do
  {
    v13.n128_f64[0] = sub_1C51FDB0C((const void **)&v52, v8, v9, v12);
    if (v53 < 1)
    {
      v14 = 1;
      v5 = v9;
      v6 = v12;
    }
    else if (v53 == 1)
    {
      v9 = *(unsigned int *)v52;
      v12 = *((unsigned int *)v52 + 1);
      v14 = 2;
    }
    else if (v7)
    {
      v15 = 0;
      v49 = v51;
      v50 = 0x400000000;
      v16 = 8 * v53;
      do
      {
        v17 = sub_1C51FE188(a1, v10, *(_QWORD *)((char *)v52 + v15), v8, 1, v13);
        v18 = v50;
        if (v50 >= (unint64_t)HIDWORD(v50))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v50 + 1, 8);
          v18 = v50;
        }
        v15 += 8;
        *((_QWORD *)v49 + v18) = v17;
        LODWORD(v50) = v50 + 1;
      }
      while (v16 != v15);
      v43 = v12;
      v44 = v9;
      v19 = v54[2];
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (*(_DWORD *)v49 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, "", 0);
      v22 = IncompleteVirtualRegister;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20;
      v23 = *(_QWORD *)(a1 + 8);
      if (v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v22);
      v24 = sub_1C4779044(*(_QWORD *)(v19 + 24), v19, (unsigned __int8 **)(v19 + 56), *(_QWORD *)(v10 + 8), v22);
      v26 = v25;
      v27 = (char *)v49;
      if ((_DWORD)v50)
      {
        v28 = v24;
        v29 = 0;
        v30 = (unsigned int *)((char *)v49 + 8 * v50);
        do
        {
          v31 = (unsigned int *)&v27[4 * v29];
          v32 = *v31;
          v33 = v31[1];
          v29 += 2;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v45[0] = (v33 & 0xFFF) << 8;
          v45[1] = v32;
          llvm::MachineInstr::addOperand(v26, v28, (const llvm::MachineOperand *)v45);
          v34 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 32 * v29 + 16);
          v46 = 0;
          v47 = v34;
          v45[0] = 4;
          llvm::MachineInstr::addOperand(v26, v28, (const llvm::MachineOperand *)v45);
          llvm::MachineRegisterInfo::clearKillFlags(a1, *v31);
        }
        while (v31 + 2 != v30);
        v27 = (char *)v49;
        v7 = a5;
        v8 = a4;
        v10 = a2;
      }
      v35 = (unsigned int *)*((_QWORD *)v26 + 4);
      v36 = *v35;
      v5 = v35[1];
      if (v27 != v51)
        free(v27);
      v6 = (v36 >> 8) & 0xFFF;
      v14 = 1;
      v12 = v43;
      v9 = v44;
    }
    else
    {
      v14 = 3;
    }
    if (v52 != v54)
      free(v52);
  }
  while (v14 == 2);
  if (v14 == 3)
    v37 = 0;
  else
    v37 = v5;
  if (v14 == 3)
    v38 = 0;
  else
    v38 = v6;
  return v37 | (v38 << 32);
}

void sub_1C51FE488()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C51FE49C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    *(_DWORD *)(a1 + 16) = 1;
    *a2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 36) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 32) >> 8) & 0xFFF) << 32);
    *a3 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 4) | ((unint64_t)((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 32) >> 8) & 0xFFF) << 32);
  }
  return v3 == 0;
}

BOOL sub_1C51FE4E8(uint64_t a1, unsigned int a2, __int16 a3)
{
  int v3;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    llvm::MachineOperand::setReg(v5 + 32, a2);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 32) & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  }
  return v3 == 1;
}

void sub_1C51FE544()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51FE558(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  if (*(_DWORD *)(a1 + 16) == 2)
    return 0;
  *(_DWORD *)(a1 + 16) = 2;
  *a2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 68) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 64) >> 8) & 0xFFF) << 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if ((*(_DWORD *)v3 & 0xFFF00) != 0)
    return 0;
  *a3 = *(unsigned int *)(v3 + 4) | (*(_QWORD *)(v3 + 112) << 32);
  return 1;
}

BOOL sub_1C51FE5B8(uint64_t a1, unsigned int a2, __int16 a3)
{
  int v3;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
    llvm::MachineOperand::setReg(v5 + 64, a2);
    *(_DWORD *)(v5 + 64) = *(_DWORD *)(v5 + 64) & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  }
  return v3 == 2;
}

void sub_1C51FE614()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51FE628(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v3;

  if (*(_DWORD *)(a1 + 16) == 1)
    return 0;
  *(_DWORD *)(a1 + 16) = 1;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if ((*(_DWORD *)(v3 + 32) & 0xFFF00) != 0)
    return 0;
  *a2 = *(unsigned int *)(v3 + 36) | (*(_QWORD *)(v3 + 80) << 32);
  *a3 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 4) | ((unint64_t)((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 32) >> 8) & 0xFFF) << 32);
  return 1;
}

BOOL sub_1C51FE688(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    llvm::MachineOperand::setReg(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 32, a2);
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 32 * (*(_DWORD *)(a1 + 16) + 1) + 16) = a3;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = -1;
      llvm::MachineInstr::removeOperand(*(_QWORD *)(a1 + 8), 2u);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 912;
    }
  }
  return v3 == 1;
}

void sub_1C51FE728()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C51FE73C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 + 2;
    *(_DWORD *)(a1 + 16) = v4;
    v5 = *(_QWORD *)(a1 + 8);
    if (v4 >= *(_DWORD *)(v5 + 40))
      return 0;
  }
  else
  {
    v4 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v6 = *(_DWORD **)(v5 + 32);
  v7 = &v6[8 * v4];
  *a2 = v7[1];
  LODWORD(v7) = (*v7 >> 8) & 0xFFF;
  a2[1] = (_DWORD)v7;
  if ((_DWORD)v7)
    return 0;
  a3[1] = *(_QWORD *)&v6[8 * (*(_DWORD *)(a1 + 16) + 1) + 4];
  *a3 = v6[1];
  return (*v6 & 0xFFF00) == 0;
}

uint64_t sub_1C51FE7C4(uint64_t a1, unsigned int a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;

  v3 = *(unsigned int *)(a1 + 16);
  if ((v3 & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v3 > *(_DWORD *)(v4 + 40))
    return 0;
  v7 = (unsigned int *)(*(_QWORD *)(v4 + 32) + 32 * v3);
  llvm::MachineOperand::setReg((uint64_t)v7, a2);
  *v7 = *v7 & 0xFFF000FF | ((a3 & 0xFFF) << 8);
  return 1;
}

_QWORD *sub_1C51FE824(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        v14 = v12[1];
        if ((*v12 != -1 || v14 != -1) && (v13 != -2 || v14 != -2))
        {
          v17 = ((37 * v14) | ((unint64_t)(37 * v13) << 32))
              + ~((unint64_t)(37 * v14) << 32);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = ((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27));
          v21 = *((_DWORD *)a1 + 4) - 1;
          v22 = v21 & v20;
          v23 = *a1 + 16 * v22;
          v24 = *(_DWORD *)v23;
          v25 = *(_DWORD *)(v23 + 4);
          if (v13 != *(_DWORD *)v23 || v14 != v25)
          {
            v27 = 0;
            v28 = 1;
            while (v24 != -1 || v25 != -1)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v25 == -2;
              if (v29 && v24 == -2)
                v27 = v23;
              v31 = v22 + v28++;
              v22 = v31 & v21;
              v23 = *a1 + 16 * (v31 & v21);
              v24 = *(_DWORD *)v23;
              v25 = *(_DWORD *)(v23 + 4);
              if (v13 == *(_DWORD *)v23 && v14 == v25)
                goto LABEL_41;
            }
            if (v27)
              v23 = v27;
          }
LABEL_41:
          *(_QWORD *)v23 = *(_QWORD *)v12;
          *(_QWORD *)(v23 + 8) = *((_QWORD *)v12 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 4;
      }
      while (v12 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v33 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v33)
  {
    v34 = 16 * v33;
    do
    {
      *result = -1;
      result += 2;
      v34 -= 16;
    }
    while (v34);
  }
  return result;
}

_DWORD *sub_1C51FE9FC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_1C51FEAEC(a1, (uint64_t)a2, a2, v14);
    *result = *a2;
    *((_QWORD *)result + 1) = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  v10 = (37 * *a2) & (v8 - 1);
  result = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v15 = result;
      v18 = v10 + v16++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

_DWORD *sub_1C51FEAEC(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4A11B00(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C4A11B00(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C51FEC60()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  LODWORD(v3) = 1;
  v1.n128_u64[0] = (unint64_t)"Aggressive extension optimization";
  v1.n128_u64[1] = 33;
  sub_1C61B2D38((uint64_t)&unk_1ED7FD550, "aggressive-ext-opt", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD550, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable the peephole optimizer";
  v1.n128_u64[1] = 30;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FD610, "disable-peephole", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD610, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable advanced copy optimization";
  v1.n128_u64[1] = 34;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FD6D0, "disable-adv-copy-opt", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD6D0, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable non-allocatable physical register copy optimization";
  v1.n128_u64[1] = 59;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7FD790, "disable-non-allocatable-phys-copy-opt", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD790, &dword_1C475E000);
  v4 = 1;
  v2 = 10;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Limit the length of PHI chains to lookup";
  v1.n128_u64[1] = 40;
  sub_1C6208C3C(&v4, &v3, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FD850, &dword_1C475E000);
  v4 = 1;
  v2 = 3;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum length of recurrence chain when evaluating the benefit of commuting operands";
  v1.n128_u64[1] = 84;
  sub_1C61798D0((uint64_t)&unk_1ED7FD910, "recurrence-chain-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FD910, &dword_1C475E000);
}

uint64_t sub_1C51FEE68(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLiveVariablesPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Eliminate PHI nodes for register allocation";
  *(_QWORD *)(v3 + 8) = 43;
  *(_QWORD *)(v3 + 16) = "phi-node-elimination";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6FB7;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C51FEEFC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C51FEEFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB7);
  *(_QWORD *)v1 = &off_1E8148528;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = v1 + 328;
  *(_QWORD *)(v1 + 304) = v1 + 328;
  *(_QWORD *)(v1 + 312) = 4;
  *(_DWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  *(_DWORD *)(v1 + 376) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FD9D0);
  if (v3 != -1)
  {
    v7[0] = sub_1C51FEE68;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FD9D0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C51FEFFC(llvm::Pass *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E8148528;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 45), 8);
  v2 = (void *)*((_QWORD *)a1 + 38);
  if (v2 != *((void **)a1 + 37))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 34), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C51FF0A8(llvm::Pass *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E8148528;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 45), 8);
  v2 = (void *)*((_QWORD *)a1 + 38);
  if (v2 != *((void **)a1 + 37))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 34), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51FF168(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::LiveVariables::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveVariables::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C51FF214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::PMDataManager *v3;
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  llvm::MachineBasicBlock *v9;
  uint64_t j;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int *v19;
  llvm::MachineBasicBlock *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  llvm::MachineInstr *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  const llvm::MachineInstr *const *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::MachineFunction *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int HashValue;
  uint64_t *v90;
  int v91;
  int m;
  unsigned int v93;
  uint64_t *v94;
  llvm::MachineInstr *v95;
  BOOL v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int IncompleteVirtualRegister;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  BOOL v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  BOOL v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  BOOL v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  llvm::MachineInstr *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  int *v175;
  char v176;
  uint64_t v177;
  llvm::MachineInstr *v178;
  int32x2_t *v179;
  int32x2_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  llvm::MachineInstr *v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  unsigned int *v192;
  llvm::MachineBasicBlock *v193;
  unsigned int v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t *v198;
  llvm::MachineBasicBlock *v199;
  uint64_t v200;
  _QWORD *PHICopyInsertPoint;
  uint64_t v202;
  uint64_t v203;
  llvm::MachineFunction *v204;
  unsigned __int8 *v205;
  char v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  llvm::LiveInterval *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  BOOL v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  __int16 v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int v245;
  int v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  int v254;
  _QWORD *v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unsigned int v258;
  _QWORD *v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned __int8 **v264;
  unint64_t v265;
  unint64_t v266;
  unsigned __int8 *v267;
  BOOL v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  char *v280;
  unsigned int v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  int32x2_t *v328;
  int32x2_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  int32x2_t *v349;
  int32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  int v355;
  int v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  void *v368;
  uint64_t v369;
  int v370;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  int v375;
  int v376;
  uint64_t v377;
  _QWORD *v378;
  unsigned int v379;
  int v380;
  int v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v386;
  int v387;
  char *v388;
  uint64_t **v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  BOOL v393;
  int v394;
  int v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  uint64_t v402;
  _BOOL4 v403;
  int v404;
  int v406;
  unsigned int i;
  uint64_t v408;
  llvm::MachineBasicBlock *v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  int v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  llvm::MachineBasicBlock *v418;
  int v419;
  int v420;
  _QWORD *v421;
  _BOOL4 v422;
  unsigned int v424;
  uint64_t v425;
  llvm::LiveInterval *v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  unsigned int v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  BOOL v436;
  unint64_t v437;
  char v438;
  _BOOL4 isLiveOut;
  llvm::LiveInterval *v440;
  uint64_t v441;
  unsigned int v442;
  _QWORD *v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  _QWORD *v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t v450;
  BOOL v451;
  unint64_t v452;
  unsigned __int8 isLiveIn;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  int v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  int v469;
  unint64_t v470;
  unint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t *v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  void *v502;
  _QWORD *v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  llvm::SmallPtrSetImplBase *v510;
  unsigned int v511;
  _QWORD *v512;
  int v513;
  int v514;
  llvm::MachineBasicBlock *v515;
  uint64_t v517;
  unint64_t v518;
  unint64_t k;
  uint64_t v520;
  uint64_t v521;
  int v522;
  int v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  _BOOL4 v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  llvm::MachineBasicBlock *v535;
  llvm::MachineBasicBlock *v536;
  unsigned __int8 *v537;
  __int128 v538;
  unint64_t v539;
  uint64_t v540;
  unsigned __int8 *v541;
  uint64_t *v542;
  uint64_t v543;
  unint64_t v544;
  _QWORD v545[8];
  uint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  llvm::MachineInstr *v549;
  unsigned __int8 *v550[2];

  v2 = a1;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 40);
  v3 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v3, &llvm::LiveVariables::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveVariables::ID);
    v3 = *(llvm::PMDataManager **)(*(_QWORD *)(v2 + 8) + 24);
  }
  *(_QWORD *)(v2 + 256) = AnalysisPass;
  v5 = llvm::PMDataManager::findAnalysisPass(v3, &llvm::LiveIntervals::ID, 1);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v5 + 96))(v5, &llvm::LiveIntervals::ID);
  *(_QWORD *)(v2 + 264) = v5;
  v526 = v2;
  if (byte_1ED7FDA58 || (v6 = *(_QWORD *)(v2 + 256), !(v6 | v5)))
  {
    v7 = 0;
    goto LABEL_8;
  }
  v546 = 0;
  v547 = 0;
  v548 = 0;
  if (v6)
  {
    v480 = -1;
    v481 = a2 + 320;
    do
    {
      v481 = *(_QWORD *)(v481 + 8);
      ++v480;
    }
    while (v481 != a2 + 320);
    sub_1C6208D7C(&v546, v480);
    v482 = *(_DWORD *)(*(_QWORD *)(v2 + 248) + 32);
    if (v482)
    {
      v483 = 0;
      while (1)
      {
        v484 = v483 & 0x7FFFFFFF;
        v485 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 248) + 24) + 16 * v484 + 8);
        if (v485)
        {
          if ((*(_BYTE *)(v485 + 3) & 1) != 0)
          {
            v2 = v526;
          }
          else
          {
            v485 = *(_QWORD *)(v485 + 24);
            v2 = v526;
            if (!v485 || (*(_BYTE *)(v485 + 3) & 1) == 0)
              goto LABEL_742;
          }
          v486 = *(_QWORD *)(v485 + 8);
          if (v486)
            break;
        }
LABEL_742:
        if (++v483 == v482)
          goto LABEL_567;
      }
      v487 = *(_QWORD *)(v2 + 256);
      v488 = (uint64_t *)(v487 + 248);
      if (v484 >= *(_DWORD *)(v487 + 256))
        sub_1C61E5C60((uint64_t *)(v487 + 248), v484 + 1, v487 + 264);
      v489 = *v488;
      v490 = (uint64_t *)(v489 + 56 * v484);
      v542 = v490;
      v543 = v490[1];
      v545[0] = 0;
      v544 = 0xFFFFFFFF00000000;
      LOBYTE(v541) = 0;
      sub_1C511F4E8((uint64_t)&v541);
      *(_QWORD *)&v538 = v490;
      *((_QWORD *)&v538 + 1) = v490[1];
      v540 = 0;
      v539 = 0xFFFFFFFF00000000;
      LOBYTE(v537) = 1;
      sub_1C511F4E8((uint64_t)&v537);
      v491 = v541;
      v492 = v537;
      if (!(_BYTE)v541 || !(_BYTE)v537)
      {
        do
        {
          v493 = v544;
          if (v491 == v492 && (_DWORD)v539 == (_DWORD)v544)
            break;
          LODWORD(v544) = v544 + 1;
          v545[0] >>= 1;
          sub_1C511F56C((uint64_t)&v541);
          sub_1C4DB3420(&v546[4 * v493], v483);
          v491 = v541;
          v492 = v537;
        }
        while (!(_BYTE)v541 || v537 == 0);
      }
      v495 = v489 + 56 * v484;
      v497 = *(uint64_t **)(v495 + 32);
      v496 = *(uint64_t **)(v495 + 40);
      if ((unint64_t)((char *)v496 - (char *)v497) > 8)
        goto LABEL_765;
      if (v497 != v496 && *(_QWORD *)(*v497 + 24) != *(_QWORD *)(v486 + 24))
      {
        do
        {
          v498 = *v497++;
          sub_1C4DB3420(&v546[4 * *(int *)(*(_QWORD *)(v498 + 24) + 24)], v483);
LABEL_765:
          ;
        }
        while (v497 != v496);
      }
      v2 = v526;
      goto LABEL_742;
    }
  }
LABEL_567:
  v372 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v2 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (v372)
    v373 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v372 + 96))(v372, &llvm::MachineLoopInfo::ID);
  else
    v373 = 0;
  v386 = *(_QWORD *)(a2 + 328);
  if (v386 == a2 + 320)
  {
    v387 = 0;
    goto LABEL_722;
  }
  v387 = 0;
  v388 = &byte_1ED7FCFF8[8];
  do
  {
    v389 = &v546;
    if (!*(_QWORD *)(v526 + 256))
      v389 = 0;
    v536 = (llvm::MachineBasicBlock *)v389;
    v390 = v386 + 48;
    if (v386 + 48 == (*(_QWORD *)(v386 + 48) & 0xFFFFFFFFFFFFFFF8)
      || ((v391 = *(_QWORD *)(v386 + 56), v392 = **(unsigned __int16 **)(v391 + 16), v392 != 69)
        ? (v393 = v392 == 0)
        : (v393 = 1),
          !v393 || *(_BYTE *)(v386 + 184)))
    {
LABEL_605:
      v394 = 0;
      goto LABEL_606;
    }
    if (!v373)
      goto LABEL_616;
    v395 = *(_DWORD *)(v373 + 264);
    if (!v395)
      goto LABEL_616;
    v396 = *(_QWORD *)(v373 + 248);
    v397 = v395 - 1;
    v398 = (v395 - 1) & ((v386 >> 4) ^ (v386 >> 9));
    v399 = *(_QWORD *)(v396 + 16 * v398);
    if (v386 != v399)
    {
      v400 = 1;
      while (v399 != -4096)
      {
        v401 = v398 + v400++;
        v398 = v401 & v397;
        v399 = *(_QWORD *)(v396 + 16 * v398);
        if (v386 == v399)
          goto LABEL_614;
      }
LABEL_616:
      v402 = 0;
LABEL_617:
      v403 = 0;
      goto LABEL_618;
    }
LABEL_614:
    v402 = *(_QWORD *)(v396 + 16 * v398 + 8);
    if (!v402)
      goto LABEL_617;
    v403 = **(_QWORD **)(v402 + 32) == v386;
LABEL_618:
    if (v391 == v390)
      goto LABEL_605;
    v394 = 0;
    v530 = v402;
    v534 = v386;
    v528 = v403;
    v514 = v387;
    v525 = v386 + 48;
    do
    {
      v404 = **(unsigned __int16 **)(v391 + 16);
      if (v404 != 69 && v404 != 0)
        break;
      v406 = *(_DWORD *)(v391 + 40);
      if (v406 == 1)
        goto LABEL_715;
      for (i = 1; i != v406; i += 2)
      {
        v408 = *(_QWORD *)(v391 + 32);
        v409 = *(llvm::MachineBasicBlock **)(v408 + 32 * (i + 1) + 16);
        v410 = *((_QWORD *)v409 + 11);
        v411 = *((_QWORD *)v409 + 12);
        if (((v411 - v410) & 0x7FFFFFFF8) == 8)
          continue;
        v412 = v388[2840];
        if (v409 == (llvm::MachineBasicBlock *)v386 && v412 == 0)
          continue;
        if (v373)
        {
          v414 = *(_DWORD *)(v373 + 264);
          if (v414)
          {
            v415 = *(_QWORD *)(v373 + 248);
            v416 = v414 - 1;
            v417 = (v414 - 1) & ((v409 >> 4) ^ (v409 >> 9));
            v418 = *(llvm::MachineBasicBlock **)(v415 + 16 * v417);
            if (v409 == v418)
            {
LABEL_638:
              v421 = *(_QWORD **)(v415 + 16 * v417 + 8);
              goto LABEL_640;
            }
            v419 = 1;
            while (v418 != (llvm::MachineBasicBlock *)-4096)
            {
              v420 = v417 + v419++;
              v417 = v420 & v416;
              v418 = *(llvm::MachineBasicBlock **)(v415 + 16 * v417);
              if (v409 == v418)
                goto LABEL_638;
            }
          }
        }
        v421 = 0;
LABEL_640:
        v422 = v421 == (_QWORD *)v402 && v403;
        if (!v422 || v412 != 0)
        {
          v424 = *(_DWORD *)(v408 + 32 * i + 4);
          v425 = *(_QWORD *)(v526 + 264);
          if (v425)
          {
            if ((v424 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v425 + 416)
              || (v426 = *(llvm::LiveInterval **)(*(_QWORD *)(v425 + 408) + 8 * (v424 & 0x7FFFFFFF))) == 0)
            {
              v426 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v526 + 264), v424);
              v521 = *(_QWORD *)(v425 + 304);
              v459 = *(_QWORD *)(v425 + 248);
              *(_QWORD *)v521 = v459;
              *(_QWORD *)(v521 + 8) = *(_QWORD *)(v459 + 40);
              *(_OWORD *)(v521 + 16) = *(_OWORD *)(v425 + 288);
              *(_QWORD *)(v521 + 32) = v425 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v521);
              *(_DWORD *)(v521 + 184) = 0;
              v460 = *(_QWORD *)(v425 + 256);
              v12 = *(_BYTE *)(v460 + 16) == 0;
              v461 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v460 + 24)
                                                     + 16 * (*((_DWORD *)v426 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v463 = !v12 && v461 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v425 + 304), v426, v463);
              llvm::LiveIntervals::computeDeadValues(v425, (uint64_t)v426, 0);
              v403 = v528;
              v402 = v530;
              v386 = v534;
              v388 = byte_1ED7FCFF8 + 8;
              v410 = *((_QWORD *)v409 + 11);
              v411 = *((_QWORD *)v409 + 12);
            }
            if (v410 != v411)
            {
              v427 = *(_QWORD *)(v526 + 264);
              v428 = *((_DWORD *)v426 + 2);
              v429 = *(_QWORD *)v426 + 24 * v428;
              while (1)
              {
                v430 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v427 + 288) + 392)
                                 + 16 * *(unsigned int *)(*(_QWORD *)v410 + 24));
                v431 = (_QWORD *)(*(_QWORD *)v426 + 24 * v428);
                if (v428)
                {
                  v432 = *(_DWORD *)((v430 & 0xFFFFFFFFFFFFFFF8) + 24) | (v430 >> 1) & 3;
                  v431 = (_QWORD *)(*(_QWORD *)v426 + 24 * v428);
                  if (v432 < ((*(_QWORD *)(v429 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v429 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
                  {
                    v431 = *(_QWORD **)v426;
                    v433 = *((unsigned int *)v426 + 2);
                    do
                    {
                      v434 = v433 >> 1;
                      v435 = v431[3 * (v433 >> 1) + 1];
                      LODWORD(v435) = (v435 >> 1) & 3 | *(_DWORD *)((v435 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v433 -= (v433 >> 1) + 1;
                      v436 = v432 >= v435;
                      if (v432 >= v435)
                        v437 = v434 + 1;
                      else
                        v437 = 0;
                      v431 += 3 * v437;
                      if (!v436)
                        v433 = v434;
                    }
                    while (v433);
                  }
                }
                if (v431 != (_QWORD *)v429
                  && ((*v431 >> 1) & 3 | *(_DWORD *)((*v431 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v430 & 0xFFFFFFFFFFFFFFF8) + 24) | (v430 >> 1) & 3))
                {
                  break;
                }
                v410 += 8;
                if (v410 == v411)
                  goto LABEL_664;
              }
LABEL_668:
              if (!v427)
              {
                v456 = v373;
                v457 = *(_QWORD *)(v526 + 256);
                v458 = v424 & 0x7FFFFFFF;
                if (v458 >= *(unsigned int *)(v457 + 256))
                {
                  sub_1C61E5C60((uint64_t *)(v457 + 248), v458 + 1, v457 + 264);
                  v386 = v534;
                }
                isLiveIn = llvm::LiveVariables::VarInfo::isLiveIn((uint64_t *)(*(_QWORD *)(v457 + 248) + 56 * v458), v386, v424, *(_QWORD *)(v457 + 368));
                v402 = v530;
                v386 = v534;
                v373 = v456;
                v388 = byte_1ED7FCFF8 + 8;
                v403 = v528;
                goto LABEL_684;
              }
              if ((v424 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v427 + 416)
                || (v440 = *(llvm::LiveInterval **)(*(_QWORD *)(v427 + 408) + 8 * (v424 & 0x7FFFFFFF))) == 0)
              {
                v440 = (llvm::LiveInterval *)sub_1C4851220(v427, v424);
                v464 = *(_QWORD *)(v427 + 304);
                v465 = *(_QWORD *)(v427 + 248);
                *(_QWORD *)v464 = v465;
                *(_QWORD *)(v464 + 8) = *(_QWORD *)(v465 + 40);
                *(_OWORD *)(v464 + 16) = *(_OWORD *)(v427 + 288);
                *(_QWORD *)(v464 + 32) = v427 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v464);
                *(_DWORD *)(v464 + 184) = 0;
                v466 = *(_QWORD *)(v427 + 256);
                v12 = *(_BYTE *)(v466 + 16) == 0;
                v467 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v466 + 24)
                                                       + 16 * (*((_DWORD *)v440 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v469 = !v12 && v467 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v427 + 304), v440, v469);
                llvm::LiveIntervals::computeDeadValues(v427, (uint64_t)v440, 0);
                v403 = v528;
                v402 = v530;
                v386 = v534;
                v388 = byte_1ED7FCFF8 + 8;
              }
              v441 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v427 + 288) + 392) + 16 * *(unsigned int *)(v386 + 24));
              v442 = *((_DWORD *)v440 + 2);
              v443 = *(_QWORD **)v440;
              if (v442)
              {
                v444 = v443[3 * v442 - 2];
                v445 = *(_DWORD *)((v441 & 0xFFFFFFFFFFFFFFF8) + 24) | (v441 >> 1) & 3;
                v446 = (v444 >> 1) & 3 | *(_DWORD *)((v444 & 0xFFFFFFFFFFFFFFF8) + 24);
                v447 = *(_QWORD **)v440;
                v448 = *((unsigned int *)v440 + 2);
                if (v445 < v446)
                {
                  do
                  {
                    v449 = v448 >> 1;
                    v450 = v447[3 * (v448 >> 1) + 1];
                    LODWORD(v450) = (v450 >> 1) & 3 | *(_DWORD *)((v450 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v448 -= (v448 >> 1) + 1;
                    v451 = v445 >= v450;
                    if (v445 >= v450)
                      v452 = v449 + 1;
                    else
                      v452 = 0;
                    v447 += 3 * v452;
                    if (!v451)
                      v448 = v449;
                  }
                  while (v448);
LABEL_682:
                  isLiveIn = v447 != &v443[3 * v442]
                          && ((*v447 >> 1) & 3 | *(_DWORD *)((*v447 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v441 & 0xFFFFFFFFFFFFFFF8) + 24) | (v441 >> 1) & 3);
LABEL_684:
                  v438 = isLiveIn ^ 1;
                  if (((isLiveIn ^ 1) & 1) == 0)
                  {
LABEL_685:
                    if (v421 != (_QWORD *)v402)
                    {
                      if (v421)
                      {
                        v454 = (_QWORD *)v402;
                        while (v454)
                        {
                          v454 = (_QWORD *)*v454;
                          if (v454 == v421)
                          {
                            v438 = 0;
                            goto LABEL_691;
                          }
                        }
                        goto LABEL_693;
                      }
                      goto LABEL_692;
                    }
                  }
LABEL_691:
                  if ((v438 & 1) != 0)
                  {
LABEL_693:
                    v455 = llvm::MachineBasicBlock::SplitCriticalEdge(v409, (const llvm::MachineBasicBlock *)v386, v526, v536);
                    v403 = v528;
                    v402 = v530;
                    v386 = v534;
                    v388 = byte_1ED7FCFF8 + 8;
                    v394 |= v455 != 0;
                    continue;
                  }
LABEL_692:
                  if (!v388[2840])
                    continue;
                  goto LABEL_693;
                }
              }
              else
              {
                v442 = 0;
              }
              v447 = &v443[3 * v442];
              goto LABEL_682;
            }
          }
          else
          {
            isLiveOut = llvm::LiveVariables::isLiveOut(*(_QWORD *)(v526 + 256), v424, (uint64_t)v409);
            v403 = v528;
            v402 = v530;
            v386 = v534;
            v388 = &byte_1ED7FCFF8[8];
            if (isLiveOut)
            {
              v427 = *(_QWORD *)(v526 + 264);
              goto LABEL_668;
            }
          }
LABEL_664:
          if (!byte_1ED7FDBD8)
            continue;
          v438 = 0;
          goto LABEL_685;
        }
      }
      v387 = v514;
      v390 = v525;
      if (v391)
      {
LABEL_715:
        if ((*(_BYTE *)v391 & 4) != 0)
          goto LABEL_719;
      }
      while ((*(_WORD *)(v391 + 44) & 8) != 0)
        v391 = *(_QWORD *)(v391 + 8);
LABEL_719:
      v391 = *(_QWORD *)(v391 + 8);
    }
    while (v391 != v390);
LABEL_606:
    v387 |= v394;
    v386 = *(_QWORD *)(v386 + 8);
  }
  while (v386 != a2 + 320);
LABEL_722:
  if (v546)
  {
    sub_1C5202020(&v546, v546);
    operator delete(v546);
  }
  v7 = v387;
  v2 = v526;
LABEL_8:
  v8 = *(_QWORD **)(**(_QWORD **)(v2 + 248) + 360);
  *v8 &= ~1uLL;
  v9 = *(llvm::MachineBasicBlock **)(a2 + 328);
  v515 = (llvm::MachineBasicBlock *)(a2 + 320);
  if (v9 != (llvm::MachineBasicBlock *)(a2 + 320))
  {
    do
    {
      for (j = *((_QWORD *)v9 + 7);
            (llvm::MachineBasicBlock *)j != (llvm::MachineBasicBlock *)((char *)v9 + 48);
            j = *(_QWORD *)(j + 8))
      {
        v11 = **(unsigned __int16 **)(j + 16);
        v12 = v11 == 69 || v11 == 0;
        if (!v12)
          break;
        v13 = *(_DWORD *)(j + 40);
        if (v13 != 1)
        {
          v14 = 1;
          do
          {
            v15 = *(_QWORD *)(j + 32);
            v16 = v14;
            v17 = v15 + 32 * v14;
            if ((*(_BYTE *)(v17 + 3) & 0x10) == 0)
            {
              v18 = *(_DWORD *)(v17 + 4);
              LODWORD(v541) = *(_DWORD *)(*(_QWORD *)(v15 + 32 * (v16 + 1) + 16) + 24);
              HIDWORD(v541) = v18;
              v19 = sub_1C52020A8(v2 + 272, (int *)&v541);
              ++v19[2];
            }
            v14 = v16 + 2;
          }
          while (v13 != v16 + 2);
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
      v9 = (llvm::MachineBasicBlock *)*((_QWORD *)v9 + 1);
    }
    while (v9 != v515);
    v20 = *(llvm::MachineBasicBlock **)(a2 + 328);
    if (v20 != v515)
    {
      v517 = v2 + 360;
      v510 = (llvm::SmallPtrSetImplBase *)(v2 + 296);
      v529 = v2 + 272;
      do
      {
        if ((llvm::MachineBasicBlock *)((char *)v20 + 48) == (llvm::MachineBasicBlock *)(*((_QWORD *)v20 + 6) & 0xFFFFFFFFFFFFFFF8)
          || ((v21 = *((_QWORD *)v20 + 7), v22 = **(unsigned __int16 **)(v21 + 16), v22 != 69)
            ? (v23 = v22 == 0)
            : (v23 = 1),
              !v23))
        {
          v319 = 0;
          goto LABEL_493;
        }
        v512 = (_QWORD *)((char *)v20 + 48);
        v24 = *(_QWORD *)llvm::MachineBasicBlock::SkipPHIsAndLabels((uint64_t)v20, v21) & 0xFFFFFFFFFFFFFFF8;
        if (!v24 || (*(_BYTE *)v24 & 4) == 0)
        {
          while ((*(_WORD *)(v24 + 44) & 4) != 0)
            v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
        }
        v513 = v7;
        v535 = v20;
        for (k = v24; ; v24 = k)
        {
          v25 = *((_QWORD *)v20 + 7);
          v26 = **(unsigned __int16 **)(v25 + 16);
          if (v26 != 69 && v26 != 0)
            break;
          v28 = v24;
          if ((*(_BYTE *)v24 & 4) == 0)
          {
            v28 = v24;
            if ((*(_WORD *)(v24 + 44) & 8) != 0)
            {
              v28 = v24;
              do
                v28 = *(_QWORD *)(v28 + 8);
              while ((*(_WORD *)(v28 + 44) & 8) != 0);
            }
          }
          v29 = *(unint64_t **)(v28 + 8);
          v549 = 0;
          v30 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 32);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 728);
            if (v31)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v25);
            v32 = *(unsigned int *)(v25 + 40);
            if ((_DWORD)v32)
            {
              v33 = *(_QWORD *)(v25 + 32);
              v34 = *(_QWORD *)(v30 + 40);
              v35 = 32 * v32;
              do
              {
                if (!*(_BYTE *)v33)
                {
                  v36 = *(unsigned int *)(v33 + 4);
                  if ((v36 & 0x80000000) != 0)
                    v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
                  else
                    v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
                  v38 = *v37;
                  v40 = *(_QWORD *)(v33 + 16);
                  v39 = *(_QWORD *)(v33 + 24);
                  if (v33 != *v37)
                    v37 = (uint64_t *)(v40 + 24);
                  *v37 = v39;
                  if (v39)
                    v41 = v39;
                  else
                    v41 = v38;
                  *(_QWORD *)(v41 + 16) = v40;
                  *(_QWORD *)(v33 + 16) = 0;
                  *(_QWORD *)(v33 + 24) = 0;
                }
                v33 += 32;
                v35 -= 32;
              }
              while (v35);
            }
          }
          *(_QWORD *)(v25 + 24) = 0;
          v42 = *(unint64_t **)(v25 + 8);
          v43 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
          *v42 = v43 | *v42 & 7;
          *(_QWORD *)(v43 + 8) = v42;
          *(_QWORD *)v25 &= 7uLL;
          *(_QWORD *)(v25 + 8) = 0;
          v549 = (llvm::MachineInstr *)v25;
          v44 = *(_DWORD *)(v25 + 40);
          v45 = **(_DWORD **)(v25 + 32);
          v46 = *(unsigned int *)(*(_QWORD *)(v25 + 32) + 4);
          v523 = v45;
          v520 = *((_QWORD *)v20 + 4);
          v527 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v520 + 16) + 104))(*(_QWORD *)(v520 + 16));
          v47 = v549;
          v48 = *((_DWORD *)v549 + 10);
          if (v48 == 1)
          {
LABEL_71:
            v57 = v527[1];
            v58 = (uint64_t)v535;
            v59 = (llvm::MachineFunction *)*((_QWORD *)v535 + 4);
            v60 = (unsigned __int8 *)*((_QWORD *)v47 + 7);
            v537 = v60;
            if (v60)
              llvm::MetadataTracking::track((uint64_t)&v537, v60, 2);
            v61 = *((_QWORD *)v59 + 28);
            v62 = v529;
            if (v61)
              *((_QWORD *)v59 + 28) = *(_QWORD *)v61;
            else
              v61 = sub_1C484358C((uint64_t)v59 + 128, 72, 3);
            v541 = v537;
            v2 = v526;
            if (v537)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v537, v537, (uint64_t)&v541);
              v537 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v61, v59, v57 + 480, &v541, 0);
            if (v541)
              llvm::MetadataTracking::untrack((uint64_t)&v541, v541);
            if (v537)
              llvm::MetadataTracking::untrack((uint64_t)&v537, v537);
            v63 = *((_QWORD *)v535 + 5);
            *(_QWORD *)(v61 + 24) = v63;
            v64 = *(_QWORD *)(v63 + 32);
            v65 = *(unsigned int *)(v61 + 40);
            if ((_DWORD)v65)
            {
              v111 = *(_QWORD *)(v61 + 32);
              v112 = *(_QWORD *)(v64 + 40);
              v113 = 32 * v65;
              do
              {
                if (!*(_BYTE *)v111)
                {
                  v114 = *(unsigned int *)(v111 + 4);
                  if ((int)v114 >= 0)
                    v115 = (uint64_t *)(*(_QWORD *)(v112 + 272) + 8 * v114);
                  else
                    v115 = (uint64_t *)(*(_QWORD *)(v112 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
                  v116 = *v115;
                  if (*v115)
                  {
                    v117 = *(_QWORD *)(v116 + 16);
                    *(_QWORD *)(v116 + 16) = v111;
                    *(_QWORD *)(v111 + 16) = v117;
                    if ((*(_BYTE *)(v111 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v111 + 24) = v116;
                    }
                    else
                    {
                      *(_QWORD *)(v111 + 24) = 0;
                      v115 = (uint64_t *)(v117 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v111 + 16) = v111;
                    *(_QWORD *)(v111 + 24) = 0;
                  }
                  *v115 = v111;
                }
                v111 += 32;
                v113 -= 32;
              }
              while (v113);
            }
            v66 = *(_QWORD *)(v64 + 728);
            if (v66)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v66 + 24))(v66, v61);
            v67 = *v29 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v61 = v67 | *(_QWORD *)v61 & 7;
            *(_QWORD *)(v61 + 8) = v29;
            *(_QWORD *)(v67 + 8) = v61;
            *v29 = *v29 & 7 | v61;
            v542 = 0;
            v543 = 0;
            v544 = 0;
            LODWORD(v541) = 0x1000000;
            HIDWORD(v541) = v46;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v541);
            v522 = 0;
            v68 = 0;
          }
          else
          {
            v49 = *(_QWORD *)(v526 + 248);
            v50 = *((_QWORD *)v549 + 4);
            v51 = *(_QWORD *)(v49 + 24);
            v52 = *(_QWORD *)(v49 + 272);
            v53 = 1;
            while (1)
            {
              v54 = v53;
              v55 = v50 + 32 * v53;
              if ((sub_1C52025D0(*(_DWORD *)(v55 + 4), v51, v52) & 1) == 0 && (*(_BYTE *)(v55 + 3) & 0x10) == 0)
                break;
              v53 = v54 + 2;
              if (v48 == v54 + 2)
                goto LABEL_71;
            }
            v2 = v526;
            v87 = *(_DWORD *)(v526 + 376);
            if (v87)
            {
              v88 = *(_QWORD *)(v526 + 360);
              HashValue = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v549, v56);
              v90 = 0;
              v91 = v87 - 1;
              for (m = 1; ; ++m)
              {
                v93 = HashValue & v91;
                v94 = (uint64_t *)(v88 + 16 * (HashValue & v91));
                v95 = (llvm::MachineInstr *)*v94;
                if ((unint64_t)(*v94 + 1) < 2 || (unint64_t)v549 + 1 <= 1)
                {
                  if (v549 == v95)
                    goto LABEL_489;
                }
                else
                {
                  if ((llvm::MachineInstr::isIdenticalTo((uint64_t)v549, (uint64_t)v95, 3) & 1) != 0)
                  {
LABEL_489:
                    v101 = *((unsigned int *)v94 + 2);
                    v2 = v526;
                    v58 = (uint64_t)v535;
                    if (!(_DWORD)v101)
                      goto LABEL_119;
                    v522 = 1;
                    v68 = *((_DWORD *)v94 + 2);
                    v62 = v529;
                    goto LABEL_122;
                  }
                  v95 = (llvm::MachineInstr *)*v94;
                }
                if (!v95)
                {
                  if (v90)
                    v97 = v90;
                  else
                    v97 = (uint64_t *)(v88 + 16 * v93);
                  v2 = v526;
                  goto LABEL_118;
                }
                if (v90)
                  v96 = 0;
                else
                  v96 = v95 == (llvm::MachineInstr *)-1;
                if (v96)
                  v90 = (uint64_t *)(v88 + 16 * v93);
                HashValue = v93 + m;
              }
            }
            v97 = 0;
LABEL_118:
            v94 = sub_1C5181784(v517, (uint64_t)&v549, (llvm::MachineInstrExpressionTrait *)&v549, v97);
            *v94 = (uint64_t)v549;
            *((_DWORD *)v94 + 2) = 0;
            v58 = (uint64_t)v535;
LABEL_119:
            v532 = v44;
            v98 = *(_QWORD *)(v520 + 40);
            v99 = *(_QWORD *)(*(_QWORD *)(v98 + 24) + 16 * (v46 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v98, "", 0);
            v101 = IncompleteVirtualRegister;
            *(_QWORD *)(*(_QWORD *)(v98 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v99;
            v102 = *(_QWORD *)(v98 + 8);
            if (v102)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 24))(v102, IncompleteVirtualRegister);
            v522 = 0;
            *((_DWORD *)v94 + 2) = IncompleteVirtualRegister;
            v62 = v529;
            v68 = IncompleteVirtualRegister;
            v44 = v532;
LABEL_122:
            v61 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t *, char *, uint64_t, uint64_t))(*v527 + 1152))(v527, v58, v29, (char *)v549 + 56, v101, v46);
          }
          if (*((_DWORD *)v549 + 16))
          {
            v103 = *(_QWORD *)(v58 + 32) + 1096;
            LODWORD(v537) = *((_DWORD *)v549 + 16);
            *(_QWORD *)&v538 = v58;
            *((_QWORD *)&v538 + 1) = v68;
            sub_1C6209068((uint64_t)&v541, v103, (int *)&v537, &v538);
          }
          v69 = *(_QWORD *)(v2 + 256);
          if (v69)
          {
            if (v68)
            {
              v104 = v68 & 0x7FFFFFFF;
              v105 = *(_QWORD *)(v2 + 256);
              if (v104 >= *(unsigned int *)(v69 + 256))
              {
                sub_1C61E5C60((uint64_t *)(v69 + 248), v104 + 1, v69 + 264);
                v105 = *(_QWORD *)(v2 + 256);
              }
              v106 = *(_QWORD *)(v69 + 248);
              sub_1C4DB3420((uint64_t *)(v105 + 328), v68);
              if (v522)
              {
                v107 = v106 + 56 * v104;
                v108 = *(uint64_t **)(v107 + 32);
                v109 = *(uint64_t **)(v107 + 40);
                while (v108 != v109)
                {
                  v110 = *v108;
                  if (*(_QWORD *)(*v108 + 24) == v58)
                  {
                    v310 = llvm::MachineBasicBlock::SkipPHIsAndLabels(v58, *(_QWORD *)(v58 + 56));
                    if (v512 == (_QWORD *)v310 || v61 == v310)
                      goto LABEL_480;
                    while (v310 != v110)
                    {
                      if (!v310 || (*(_BYTE *)v310 & 4) == 0)
                      {
                        while ((*(_WORD *)(v310 + 44) & 8) != 0)
                          v310 = *(_QWORD *)(v310 + 8);
                      }
                      v310 = *(_QWORD *)(v310 + 8);
                      if ((_QWORD *)v310 == v512 || v310 == v61)
                        goto LABEL_480;
                    }
                    sub_1C6208DAC(*(_QWORD *)(v2 + 256), v68, v110);
                    break;
                  }
                  ++v108;
                }
              }
              sub_1C6208E5C(*(_QWORD *)(v2 + 256), v68, (llvm::MachineInstr *)v61, 0);
            }
LABEL_480:
            llvm::LiveVariables::removeVirtualRegistersKilled(*(_QWORD *)(v2 + 256), v549);
            if ((v523 & 0x5000000) == 0x5000000)
            {
              sub_1C6208F08(*(_QWORD *)(v2 + 256), v46, (llvm::MachineInstr *)v61, 0);
              sub_1C6208FB4(*(_QWORD *)(v2 + 256), v46, (uint64_t)v549);
            }
          }
          v70 = *(_QWORD *)(v2 + 264);
          if (v70)
          {
            v531 = v44;
            v71 = sub_1C4850BC8(*(_QWORD *)(v70 + 288), v61, 0);
            v72 = *(_QWORD *)(v2 + 264);
            v73 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v72 + 288) + 392) + 16 * *(unsigned int *)(v58 + 24));
            if (!v68)
              goto LABEL_154;
            v74 = sub_1C4851220(*(_QWORD *)(v2 + 264), v68);
            v75 = v74;
            v76 = *(_DWORD *)(v74 + 8);
            v77 = *(_QWORD **)v74;
            if (v76)
            {
              v78 = v77[3 * v76 - 2];
              v79 = *(_DWORD *)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 24) | (v73 >> 1) & 3;
              v80 = (v78 >> 1) & 3 | *(_DWORD *)((v78 & 0xFFFFFFFFFFFFFFF8) + 24);
              v81 = *(_QWORD **)v74;
              v82 = *(unsigned int *)(v74 + 8);
              if (v79 < v80)
              {
                do
                {
                  v83 = v82 >> 1;
                  v84 = v81[3 * (v82 >> 1) + 1];
                  LODWORD(v84) = (v84 >> 1) & 3 | *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v82 -= (v82 >> 1) + 1;
                  v85 = v79 >= v84;
                  if (v79 >= v84)
                    v86 = v83 + 1;
                  else
                    v86 = 0;
                  v81 += 3 * v86;
                  if (!v85)
                    v82 = v83;
                }
                while (v82);
LABEL_147:
                if (v81 == &v77[3 * v76]
                  || ((*v81 >> 1) & 3 | *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 24) | (v73 >> 1) & 3)
                  || (v118 = v81[2]) == 0)
                {
                  v118 = sub_1C484358C(*(_QWORD *)(v2 + 264) + 312, 16, 3);
                  v119 = *(unsigned int *)(v75 + 72);
                  *(_DWORD *)v118 = v119;
                  *(_QWORD *)(v118 + 8) = v73;
                  if (v119 >= *(unsigned int *)(v75 + 76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v75 + 64, v75 + 80, v119 + 1, 8);
                    v119 = *(unsigned int *)(v75 + 72);
                  }
                  *(_QWORD *)(*(_QWORD *)(v75 + 64) + 8 * v119) = v118;
                  ++*(_DWORD *)(v75 + 72);
                }
                v546 = v73;
                v547 = v71 & 0xFFFFFFFFFFFFFFF8 | 4;
                v548 = v118;
                llvm::LiveRange::addSegment(v75, (uint64_t)&v546);
                v72 = *(_QWORD *)(v2 + 264);
LABEL_154:
                if ((v46 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v72 + 416)
                  || (v120 = *(_QWORD *)(*(_QWORD *)(v72 + 408) + 8 * (v46 & 0x7FFFFFFF))) == 0)
                {
                  v120 = sub_1C4851220(v72, v46);
                  v313 = *(_QWORD *)(v72 + 304);
                  v314 = *(_QWORD *)(v72 + 248);
                  *(_QWORD *)v313 = v314;
                  *(_QWORD *)(v313 + 8) = *(_QWORD *)(v314 + 40);
                  *(_OWORD *)(v313 + 16) = *(_OWORD *)(v72 + 288);
                  *(_QWORD *)(v313 + 32) = v72 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v313);
                  *(_DWORD *)(v313 + 184) = 0;
                  v315 = *(_QWORD *)(v72 + 256);
                  v12 = *(_BYTE *)(v315 + 16) == 0;
                  v316 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v315 + 24)
                                                         + 16 * (*(_DWORD *)(v120 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v318 = !v12 && v316 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v72 + 304), (llvm::LiveInterval *)v120, v318);
                  llvm::LiveIntervals::computeDeadValues(v72, v120, 0);
                }
                v121 = *(unsigned int *)(v120 + 8);
                v122 = v121;
                v123 = *(_QWORD *)v120 + 24 * v121;
                v124 = *(_QWORD *)(v123 - 16);
                if ((~*(_DWORD *)(v123 - 16) & 6) == 0)
                {
                  if ((_DWORD)v121)
                  {
                    v125 = (unint64_t)v73 & 0xFFFFFFFFFFFFFFF8;
                    v126 = (v73 >> 1) & 3;
                    v127 = *(_DWORD *)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 24) | v126;
                    if (v127 < (*(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24) | (v124 >> 1) & 3))
                    {
                      v128 = *(uint64_t **)v120;
                      v129 = *(unsigned int *)(v120 + 8);
                      do
                      {
                        v130 = v128;
                        v131 = v129 >> 1;
                        v132 = v128[3 * (v129 >> 1) + 1];
                        LODWORD(v132) = (v132 >> 1) & 3 | *(_DWORD *)((v132 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v129 -= (v129 >> 1) + 1;
                        v133 = v127 >= v132;
                        if (v127 >= v132)
                          v134 = v131 + 1;
                        else
                          v134 = 0;
                        v128 += 3 * v134;
                        if (!v133)
                          v129 = v131;
                      }
                      while (v129);
                      if (v128 != (uint64_t *)v123)
                      {
                        if (((*v128 >> 1) & 3 | *(_DWORD *)((*v128 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v125 + 24) | v126))
                          v135 = v130[3 * v134 + 2];
                        else
                          v135 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                  v135 = 0;
                  v125 = (unint64_t)v73 & 0xFFFFFFFFFFFFFFF8;
                  if ((_DWORD)v121)
                  {
LABEL_182:
                    v145 = *(_DWORD *)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 24) | (v73 >> 1) & 3;
                    v146 = (uint64_t *)(*(_QWORD *)v120 + 24 * v121);
                    if (v145 < (*(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24) | (v124 >> 1) & 3))
                    {
                      v146 = *(uint64_t **)v120;
                      do
                      {
                        v147 = v121 >> 1;
                        v148 = v146[3 * (v121 >> 1) + 1];
                        LODWORD(v148) = (v148 >> 1) & 3 | *(_DWORD *)((v148 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v121 -= (v121 >> 1) + 1;
                        v149 = v145 >= v148;
                        if (v145 >= v148)
                          v150 = v147 + 1;
                        else
                          v150 = 0;
                        v146 += 3 * v150;
                        if (!v149)
                          v121 = v147;
                      }
                      while (v121);
                    }
                  }
                  else
                  {
                    v146 = (uint64_t *)(*(_QWORD *)v120 + 24 * v121);
                  }
                  v151 = v125 | 6;
                  v152 = (uint64_t *)v146[1];
                  if ((uint64_t *)*v146 == v73)
                  {
                    if (v152 == (uint64_t *)v151)
                    {
                      v44 = v531;
                      if ((uint64_t *)v123 != v146 + 3)
                      {
                        memmove(v146, v146 + 3, v123 - (_QWORD)(v146 + 3));
                        v122 = *(_DWORD *)(v120 + 8);
                      }
                      *(_DWORD *)(v120 + 8) = v122 - 1;
                    }
                    else
                    {
                      *v146 = v151;
                      v44 = v531;
                    }
                  }
                  else
                  {
                    v154 = v146[2];
                    v146[1] = (uint64_t)v73;
                    v44 = v531;
                    if (v152 != (uint64_t *)v151)
                    {
                      v541 = (unsigned __int8 *)(v125 | 6);
                      v542 = v152;
                      v543 = v154;
                      sub_1C510F69C(v120, (uint64_t)(v146 + 3), (unint64_t)&v541);
                    }
                  }
                  v166 = v71 & 0xFFFFFFFFFFFFFFF8 | 4;
                  v167 = *(_QWORD *)(v2 + 264) + 312;
                  if (*(_QWORD *)(v120 + 96))
                  {
                    v541 = (unsigned __int8 *)v120;
                    sub_1C510A3C0((uint64_t *)&v541, v166, v167, 0);
                  }
                  else
                  {
                    v541 = (unsigned __int8 *)v120;
                    sub_1C510A6B8((uint64_t **)&v541, v166, v167, 0);
                  }
                  llvm::LiveRange::removeValNo((uint64_t *)v120, v135);
                  goto LABEL_225;
                }
                if ((_DWORD)v121)
                {
                  v136 = *(_DWORD *)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8) + 24) | (v73 >> 1) & 3;
                  v137 = (uint64_t *)(*(_QWORD *)v120 + 24 * v121);
                  if (v136 < (*(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24) | (v124 >> 1) & 3))
                  {
                    v137 = *(uint64_t **)v120;
                    do
                    {
                      v138 = v121 >> 1;
                      v139 = v137[3 * (v121 >> 1) + 1];
                      LODWORD(v139) = (v139 >> 1) & 3 | *(_DWORD *)((v139 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v121 -= (v121 >> 1) + 1;
                      v140 = v136 >= v139;
                      if (v136 >= v139)
                        v141 = v138 + 1;
                      else
                        v141 = 0;
                      v137 += 3 * v141;
                      if (!v140)
                        v121 = v138;
                    }
                    while (v121);
                  }
                }
                else
                {
                  v137 = *(uint64_t **)v120;
                }
                v142 = v71 & 0xFFFFFFFFFFFFFFF8;
                v143 = v142 | 4;
                v144 = (uint64_t *)v137[1];
                if ((uint64_t *)*v137 == v73)
                {
                  if (v144 == (uint64_t *)v143)
                  {
                    v44 = v531;
                    if ((uint64_t *)v123 != v137 + 3)
                    {
                      memmove(v137, v137 + 3, v123 - (_QWORD)(v137 + 3));
                      v122 = *(_DWORD *)(v120 + 8);
                    }
                    *(_DWORD *)(v120 + 8) = --v122;
                  }
                  else
                  {
                    *v137 = v143;
                    v44 = v531;
                  }
                }
                else
                {
                  v153 = v137[2];
                  v137[1] = (uint64_t)v73;
                  v44 = v531;
                  if (v144 != (uint64_t *)v143)
                  {
                    v541 = (unsigned __int8 *)(v142 | 4);
                    v542 = v144;
                    v543 = v153;
                    sub_1C510F69C(v120, (uint64_t)(v137 + 3), (unint64_t)&v541);
                    v122 = *(_DWORD *)(v120 + 8);
                  }
                }
                v155 = *(uint64_t **)v120;
                if (v122)
                {
                  v156 = v122;
                  v157 = v155[3 * v122 - 2];
                  v158 = *(_DWORD *)(v142 + 24) | 2;
                  v159 = (v157 >> 1) & 3 | *(_DWORD *)((v157 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v160 = *(uint64_t **)v120;
                  v161 = v156;
                  if (v158 < v159)
                  {
                    do
                    {
                      v162 = v161 >> 1;
                      v163 = v160[3 * (v161 >> 1) + 1];
                      LODWORD(v163) = (v163 >> 1) & 3 | *(_DWORD *)((v163 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v161 -= (v161 >> 1) + 1;
                      v164 = v158 >= v163;
                      if (v158 >= v163)
                        v165 = v162 + 1;
                      else
                        v165 = 0;
                      v160 += 3 * v165;
                      if (!v164)
                        v161 = v162;
                    }
                    while (v161);
                    goto LABEL_221;
                  }
                }
                else
                {
                  LODWORD(v156) = 0;
                }
                v160 = &v155[3 * v156];
LABEL_221:
                v168 = &v155[3 * v156];
                if (v160 == v168
                  || ((*v160 >> 1) & 3 | *(_DWORD *)((*v160 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v142 + 24) | 2u))
                {
                  v160 = v168;
                }
                *(_QWORD *)(v160[2] + 8) = v143;
                goto LABEL_225;
              }
            }
            else
            {
              v76 = 0;
            }
            v81 = &v77[3 * v76];
            goto LABEL_147;
          }
LABEL_225:
          v169 = v549;
          if (*((_DWORD *)v549 + 10) != 1)
          {
            v170 = 1;
            do
            {
              v171 = *((_QWORD *)v169 + 4);
              v172 = v170;
              v173 = v171 + 32 * v170;
              if ((*(_BYTE *)(v173 + 3) & 0x10) == 0)
              {
                v174 = *(_DWORD *)(v173 + 4);
                LODWORD(v541) = *(_DWORD *)(*(_QWORD *)(v171 + 32 * (v172 + 1) + 16) + 24);
                HIDWORD(v541) = v174;
                v175 = sub_1C52020A8(v62, (int *)&v541);
                --v175[2];
                v169 = v549;
              }
              v170 = v172 + 2;
            }
            while (v172 + 2 != *((_DWORD *)v169 + 10));
          }
          v524 = v68;
          v541 = (unsigned __int8 *)v545;
          v542 = v545;
          v543 = 8;
          LODWORD(v544) = 0;
          if ((v44 - 1) >= 2)
          {
            v187 = (v44 - 1) >> 1;
            v188 = v522;
            if (!v68)
              v188 = 1;
            v533 = v188;
            v518 = v68 & 0x7FFFFFFF;
            v189 = v187;
            do
            {
              --v189;
              v190 = 1;
              v191 = *((_QWORD *)v549 + 4);
              v192 = (unsigned int *)(v191 + 32 * ((2 * v189) | 1u));
              v194 = *v192;
              v193 = (llvm::MachineBasicBlock *)v192[1];
              if ((*v192 & 0x10000000) == 0)
                v190 = sub_1C52025D0((int)v193, *(_QWORD *)(*(_QWORD *)(v2 + 248) + 24), *(_QWORD *)(*(_QWORD *)(v2 + 248) + 272));
              v195 = *(_QWORD *)(v191 + 32 * (2 * v189 + 2) + 16);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v541, v195);
              if (!v196)
                goto LABEL_310;
              v197 = *(_QWORD *)(v2 + 248);
              if ((v193 & 0x80000000) != 0)
                v198 = (uint64_t *)(*(_QWORD *)(v197 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
              else
                v198 = (uint64_t *)(*(_QWORD *)(v197 + 272) + 8 * (_QWORD)v193);
              v199 = v535;
              v200 = *v198;
              if (v200)
              {
                if ((*(_BYTE *)(v200 + 3) & 1) != 0)
                {
                  v2 = v526;
                  v199 = v535;
                }
                else
                {
                  v200 = *(_QWORD *)(v200 + 24);
                  v2 = v526;
                  v199 = v535;
                  if (!v200 || (*(_BYTE *)(v200 + 3) & 1) == 0)
                    goto LABEL_251;
                }
                v291 = *(_QWORD *)(v200 + 8);
                if (v291 && sub_1C5079C7C((uint64_t)v527, *(_QWORD *)(v200 + 8)))
                {
                  llvm::MachineOperand::setReg(*(_QWORD *)(v291 + 32), v524);
                  v292 = *(_QWORD *)(v2 + 256);
                  if (v292)
                  {
                    v293 = v193 & 0x7FFFFFFF;
                    v294 = *(unsigned int *)(v292 + 256);
                    v295 = *(_QWORD *)(v2 + 256);
                    if (v293 >= v294)
                    {
                      sub_1C61E5C60((uint64_t *)(v292 + 248), v293 + 1, v292 + 264);
                      v295 = *(_QWORD *)(v526 + 256);
                      v294 = *(unsigned int *)(v295 + 256);
                    }
                    v296 = *(_QWORD *)(v292 + 248);
                    v297 = (_QWORD *)(v295 + 248);
                    if (v518 >= v294)
                      sub_1C61E5C60((uint64_t *)(v295 + 248), (v524 & 0x7FFFFFFF) + 1, v295 + 264);
                    v298 = (uint64_t *)(v296 + 56 * v293);
                    v299 = (uint64_t *)(*v297 + 56 * v518);
                    sub_1C4DBA094(v299, v298);
                    v299[3] = v299[1];
                    v2 = v526;
                    if (v298[2])
                    {
                      v301 = *v298;
                      v300 = (uint64_t *)v298[1];
                      v302 = *v300;
                      *(_QWORD *)(v302 + 8) = *(_QWORD *)(*v298 + 8);
                      **(_QWORD **)(v301 + 8) = v302;
                      v298[2] = 0;
                      if (v300 != v298)
                      {
                        do
                        {
                          v303 = (uint64_t *)v300[1];
                          operator delete(v300);
                          v300 = v303;
                        }
                        while (v303 != v298);
                      }
                    }
                  }
                  goto LABEL_310;
                }
              }
LABEL_251:
              PHICopyInsertPoint = (_QWORD *)llvm::findPHICopyInsertPoint((llvm *)v195, v199, v193);
              if ((v533 & 1) != 0)
              {
                v202 = 0;
                goto LABEL_260;
              }
              if (!v190)
              {
                v537 = 0;
                v202 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, unsigned __int8 **, llvm::MachineBasicBlock *, _QWORD, _QWORD))(*v527 + 1160))(v527, v195, PHICopyInsertPoint, &v537, v193, (v194 >> 8) & 0xFFF, v524);
                if (v537)
                  llvm::MetadataTracking::untrack((uint64_t)&v537, v537);
LABEL_260:
                if (*(_QWORD *)(v2 + 256))
                  v206 = v190;
                else
                  v206 = 1;
                if ((v206 & 1) == 0)
                {
                  LODWORD(v537) = *(_DWORD *)(v195 + 24);
                  HIDWORD(v537) = (_DWORD)v193;
                  if (!sub_1C52020A8(v529, (int *)&v537)[2]
                    && !llvm::LiveVariables::isLiveOut(*(_QWORD *)(v2 + 256), (int)v193, v195))
                  {
                    v207 = v195 + 48;
                    v208 = PHICopyInsertPoint;
                    if ((_QWORD *)(v195 + 48) != PHICopyInsertPoint)
                    {
                      v208 = (_QWORD *)(v195 + 48);
                      v209 = (uint64_t)PHICopyInsertPoint;
                      do
                      {
                        if (llvm::MachineInstr::findRegisterUseOperandIdx(v209, v193, 0, 0) != -1)v208 = (_QWORD *)v209;
                        if (!v209 || (*(_BYTE *)v209 & 4) == 0)
                        {
                          while ((*(_WORD *)(v209 + 44) & 8) != 0)
                            v209 = *(_QWORD *)(v209 + 8);
                        }
                        v209 = *(_QWORD *)(v209 + 8);
                      }
                      while (v209 != v207);
                    }
                    v210 = v533;
                    if (v208 == (_QWORD *)v207)
                    {
                      v211 = v202;
                    }
                    else
                    {
                      v210 = 0;
                      v211 = (unint64_t)v208;
                    }
                    if (v210 == 1)
                    {
                      v212 = *(_QWORD **)(v195 + 56);
                      v211 = (unint64_t)PHICopyInsertPoint;
                      if (v212 != PHICopyInsertPoint)
                      {
                        v211 = (unint64_t)PHICopyInsertPoint;
                        do
                        {
                          v211 = *(_QWORD *)v211 & 0xFFFFFFFFFFFFFFF8;
                          if (!v211 || (*(_BYTE *)v211 & 4) == 0)
                          {
                            while ((*(_WORD *)(v211 + 44) & 4) != 0)
                              v211 = *(_QWORD *)v211 & 0xFFFFFFFFFFFFFFF8;
                          }
                          if (**(unsigned __int16 **)(v211 + 16) - 13 > 4)
                          {
                            if (llvm::MachineInstr::findRegisterUseOperandIdx(v211, v193, 0, 0) != -1)break;
                            v212 = *(_QWORD **)(v195 + 56);
                          }
                        }
                        while ((_QWORD *)v211 != v212);
                      }
                    }
                    sub_1C6208E5C(*(_QWORD *)(v526 + 256), v193, (llvm::MachineInstr *)v211, 0);
                    v281 = *(_DWORD *)(v195 + 24);
                    v282 = *(_QWORD *)(v526 + 256);
                    v283 = (_QWORD *)(v282 + 248);
                    v284 = v193 & 0x7FFFFFFF;
                    if (v284 >= *(unsigned int *)(v282 + 256))
                    {
                      v511 = *(_DWORD *)(v195 + 24);
                      sub_1C61E5C60((uint64_t *)(v282 + 248), v284 + 1, v282 + 264);
                      v281 = v511;
                    }
                    sub_1C5202668((uint64_t *)(*v283 + 56 * v284), v281);
                    v2 = v526;
                  }
                }
                goto LABEL_306;
              }
              v203 = v527[1];
              v204 = *(llvm::MachineFunction **)(v195 + 32);
              v205 = (unsigned __int8 *)*((_QWORD *)v549 + 7);
              v550[0] = v205;
              if (v205)
                llvm::MetadataTracking::track((uint64_t)v550, v205, 2);
              v202 = *((_QWORD *)v204 + 28);
              if (v202)
                *((_QWORD *)v204 + 28) = *(_QWORD *)v202;
              else
                v202 = sub_1C484358C((uint64_t)v204 + 128, 72, 3);
              v537 = v550[0];
              if (v550[0])
              {
                llvm::MetadataTracking::retrack((uint64_t)v550, v550[0], (uint64_t)&v537);
                v550[0] = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v202, v204, v203 + 480, &v537, 0);
              if (v537)
                llvm::MetadataTracking::untrack((uint64_t)&v537, v537);
              if (v550[0])
                llvm::MetadataTracking::untrack((uint64_t)v550, v550[0]);
              v213 = *(_QWORD *)(v195 + 40);
              *(_QWORD *)(v202 + 24) = v213;
              v214 = *(_QWORD *)(v213 + 32);
              v215 = *(unsigned int *)(v202 + 40);
              if ((_DWORD)v215)
              {
                v270 = *(_QWORD *)(v202 + 32);
                v271 = *(_QWORD *)(v214 + 40);
                v272 = 32 * v215;
                do
                {
                  if (!*(_BYTE *)v270)
                  {
                    v273 = *(unsigned int *)(v270 + 4);
                    if ((int)v273 >= 0)
                      v274 = (uint64_t *)(*(_QWORD *)(v271 + 272) + 8 * v273);
                    else
                      v274 = (uint64_t *)(*(_QWORD *)(v271 + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
                    v275 = *v274;
                    if (*v274)
                    {
                      v276 = *(_QWORD *)(v275 + 16);
                      *(_QWORD *)(v275 + 16) = v270;
                      *(_QWORD *)(v270 + 16) = v276;
                      if ((*(_BYTE *)(v270 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v270 + 24) = v275;
                      }
                      else
                      {
                        *(_QWORD *)(v270 + 24) = 0;
                        v274 = (uint64_t *)(v276 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v270 + 16) = v270;
                      *(_QWORD *)(v270 + 24) = 0;
                    }
                    *v274 = v270;
                  }
                  v270 += 32;
                  v272 -= 32;
                }
                while (v272);
              }
              v216 = *(_QWORD *)(v214 + 728);
              if (v216)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 24))(v216, v202);
              v217 = *PHICopyInsertPoint & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v202 = v217 | *(_QWORD *)v202 & 7;
              *(_QWORD *)(v202 + 8) = PHICopyInsertPoint;
              *(_QWORD *)(v217 + 8) = v202;
              *PHICopyInsertPoint = *PHICopyInsertPoint & 7 | v202;
              v538 = 0uLL;
              v539 = 0;
              LODWORD(v537) = 0x1000000;
              HIDWORD(v537) = v524;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v202, v204, (const llvm::MachineOperand *)&v537);
              v2 = v526;
              v218 = *(_QWORD *)(v526 + 248);
              if ((v193 & 0x80000000) != 0)
                v219 = (uint64_t *)(*(_QWORD *)(v218 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
              else
                v219 = (uint64_t *)(*(_QWORD *)(v218 + 272) + 8 * (_QWORD)v193);
              v220 = *v219;
              if (v220)
              {
                if ((*(_BYTE *)(v220 + 3) & 1) != 0)
                {
                  v2 = v526;
                }
                else
                {
                  v220 = *(_QWORD *)(v220 + 24);
                  v2 = v526;
                  if (!v220 || (*(_BYTE *)(v220 + 3) & 1) == 0)
                    goto LABEL_306;
                }
                v304 = *(_QWORD *)(v220 + 8);
                if (v304 && **(_WORD **)(v304 + 16) == 10)
                  sub_1C4774094(v510, v304);
              }
LABEL_306:
              v221 = *(_QWORD *)(v2 + 264);
              if (v221)
              {
                if (v202)
                {
                  sub_1C4850BC8(*(_QWORD *)(v221 + 288), v202, 0);
                  llvm::LiveIntervals::addSegmentToEndOfBlock(*(_QWORD *)(v2 + 264), v524, v202, (unint64_t *)&v537);
                  if ((v190 & 1) != 0)
                    goto LABEL_310;
                }
                else if ((v190 & 1) != 0)
                {
                  goto LABEL_310;
                }
                LODWORD(v537) = *(_DWORD *)(v195 + 24);
                HIDWORD(v537) = (_DWORD)v193;
                if (!sub_1C52020A8(v529, (int *)&v537)[2])
                {
                  v223 = *(_QWORD *)(v2 + 264);
                  if ((v193 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v223 + 416)
                    || (v224 = *(llvm::LiveInterval **)(*(_QWORD *)(v223 + 408) + 8
                                                                                * (v193 & 0x7FFFFFFF))) == 0)
                  {
                    v224 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v2 + 264), (int)v193);
                    v285 = *(_QWORD *)(v223 + 304);
                    v286 = *(_QWORD *)(v223 + 248);
                    *(_QWORD *)v285 = v286;
                    *(_QWORD *)(v285 + 8) = *(_QWORD *)(v286 + 40);
                    *(_OWORD *)(v285 + 16) = *(_OWORD *)(v223 + 288);
                    *(_QWORD *)(v285 + 32) = v223 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v285);
                    *(_DWORD *)(v285 + 184) = 0;
                    v2 = v526;
                    v287 = *(_QWORD *)(v223 + 256);
                    v12 = *(_BYTE *)(v287 + 16) == 0;
                    v288 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v287 + 24)
                                                           + 16 * (*((_DWORD *)v224 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                              + 34);
                    v290 = !v12 && v288 != 0;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v223 + 304), v224, v290);
                    llvm::LiveIntervals::computeDeadValues(v223, (uint64_t)v224, 0);
                  }
                  v225 = *(_QWORD *)(v195 + 88);
                  v226 = *(_QWORD *)(v195 + 96);
                  if (v225 != v226)
                  {
                    v227 = *((_DWORD *)v224 + 2);
                    v228 = *(_QWORD *)v224 + 24 * v227;
                    do
                    {
                      v229 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 264) + 288) + 392)
                                       + 16 * *(unsigned int *)(*(_QWORD *)v225 + 24));
                      v230 = (_QWORD *)(*(_QWORD *)v224 + 24 * v227);
                      if (v227)
                      {
                        v231 = *(_DWORD *)((v229 & 0xFFFFFFFFFFFFFFF8) + 24) | (v229 >> 1) & 3;
                        v230 = (_QWORD *)(*(_QWORD *)v224 + 24 * v227);
                        if (v231 < ((*(_QWORD *)(v228 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v228 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 24)))
                        {
                          v230 = *(_QWORD **)v224;
                          v232 = *((unsigned int *)v224 + 2);
                          do
                          {
                            v233 = v232 >> 1;
                            v234 = v230[3 * (v232 >> 1) + 1];
                            LODWORD(v234) = (v234 >> 1) & 3 | *(_DWORD *)((v234 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v232 -= (v232 >> 1) + 1;
                            v235 = v231 >= v234;
                            if (v231 >= v234)
                              v236 = v233 + 1;
                            else
                              v236 = 0;
                            v230 += 3 * v236;
                            if (!v235)
                              v232 = v233;
                          }
                          while (v232);
                        }
                      }
                      if (v230 != (_QWORD *)v228
                        && ((*v230 >> 1) & 3 | *(_DWORD *)((*v230 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v229 & 0xFFFFFFFFFFFFFFF8) + 24) | (v229 >> 1) & 3))
                      {
                        v237 = v230[2];
                        if (v237)
                        {
                          if (*(_QWORD *)(v237 + 8) != v229)
                            goto LABEL_310;
                        }
                      }
                      v225 += 8;
                    }
                    while (v225 != v226);
                  }
                  v238 = v195 + 48;
                  if ((_QWORD *)(v195 + 48) == PHICopyInsertPoint)
                  {
                    v240 = (unint64_t)PHICopyInsertPoint;
                  }
                  else
                  {
                    v239 = (uint64_t)PHICopyInsertPoint;
                    v240 = v195 + 48;
                    do
                    {
                      if (llvm::MachineInstr::findRegisterUseOperandIdx(v239, v193, 0, 0) != -1)
                        v240 = v239;
                      if (!v239 || (*(_BYTE *)v239 & 4) == 0)
                      {
                        while ((*(_WORD *)(v239 + 44) & 8) != 0)
                          v239 = *(_QWORD *)(v239 + 8);
                      }
                      v239 = *(_QWORD *)(v239 + 8);
                    }
                    while (v239 != v238);
                  }
                  v2 = v526;
                  if (v240 == v238)
                  {
                    if ((v533 & 1) != 0)
                    {
                      v255 = *(_QWORD **)(v195 + 56);
                      v240 = (unint64_t)PHICopyInsertPoint;
                      if (v255 != PHICopyInsertPoint)
                      {
                        do
                        {
                          v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
                          if (!v240 || (*(_BYTE *)v240 & 4) == 0)
                          {
                            while ((*(_WORD *)(v240 + 44) & 4) != 0)
                              v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
                          }
                          if (**(unsigned __int16 **)(v240 + 16) - 13 > 4)
                          {
                            if (llvm::MachineInstr::findRegisterUseOperandIdx(v240, v193, 0, 0) != -1)break;
                            v255 = *(_QWORD **)(v195 + 56);
                          }
                        }
                        while ((_QWORD *)v240 != v255);
                      }
                    }
                    else
                    {
                      v240 = *PHICopyInsertPoint & 0xFFFFFFFFFFFFFFF8;
                      if (!v240 || (*(_BYTE *)v240 & 4) == 0)
                      {
                        while ((*(_WORD *)(v240 + 44) & 4) != 0)
                          v240 = *(_QWORD *)v240 & 0xFFFFFFFFFFFFFFF8;
                      }
                    }
                  }
                  v241 = *(_QWORD *)(*(_QWORD *)(v526 + 264) + 288);
                  v242 = *(_WORD *)(v240 + 44);
                  v243 = v240;
                  if ((v242 & 4) != 0)
                  {
                    do
                      v243 = *(_QWORD *)v243 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v243 + 44) & 4) != 0);
                  }
                  if ((v242 & 8) != 0)
                  {
                    do
                      v240 = *(_QWORD *)(v240 + 8);
                    while ((*(_WORD *)(v240 + 44) & 8) != 0);
                  }
                  v244 = *(_QWORD *)(v240 + 8);
                  if (v243 != v244)
                  {
                    while (1)
                    {
                      v245 = **(unsigned __int16 **)(v243 + 16);
                      v222 = v245 > 0x17;
                      v246 = (1 << v245) & 0x83E000;
                      if (v222 || v246 == 0)
                        break;
                      v243 = *(_QWORD *)(v243 + 8);
                      if (v243 == v244)
                      {
                        v243 = *(_QWORD *)(v240 + 8);
                        break;
                      }
                    }
                  }
                  v248 = *(_QWORD *)(v241 + 368);
                  v249 = *(unsigned int *)(v241 + 384);
                  if ((_DWORD)v249)
                  {
                    LODWORD(v250) = ((v243 >> 4) ^ (v243 >> 9)) & (v249 - 1);
                    v251 = (uint64_t *)(v248 + 16 * v250);
                    v252 = *v251;
                    if (v243 != *v251)
                    {
                      v253 = 1;
                      while (v252 != -4096)
                      {
                        v254 = v250 + v253++;
                        v250 = v254 & (v249 - 1);
                        v252 = *(_QWORD *)(v248 + 16 * v250);
                        if (v243 == v252)
                        {
                          v251 = (uint64_t *)(v248 + 16 * v250);
                          goto LABEL_380;
                        }
                      }
                      goto LABEL_379;
                    }
                  }
                  else
                  {
LABEL_379:
                    v251 = (uint64_t *)(v248 + 16 * v249);
                  }
LABEL_380:
                  v256 = v251[1] & 0xFFFFFFFFFFFFFFF8;
                  v257 = *(unsigned __int8 **)(*(_QWORD *)(v241 + 392) + 16 * *(unsigned int *)(v195 + 24) + 8);
                  v258 = *((_DWORD *)v224 + 2);
                  v259 = *(_QWORD **)v224;
                  if (v258)
                  {
                    v260 = v259[3 * v258 - 2];
                    v261 = *(_DWORD *)(v256 + 24) | 2;
                    v262 = (v260 >> 1) & 3 | *(_DWORD *)((v260 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v263 = *((_DWORD *)v224 + 2);
                    v264 = *(unsigned __int8 ***)v224;
                    v265 = v263;
                    if (v261 < v262)
                    {
                      do
                      {
                        v266 = v265 >> 1;
                        v267 = v264[3 * (v265 >> 1) + 1];
                        LODWORD(v267) = (v267 >> 1) & 3 | *(_DWORD *)(((unint64_t)v267 & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 24);
                        v265 -= (v265 >> 1) + 1;
                        v268 = v261 >= v267;
                        if (v261 >= v267)
                          v269 = v266 + 1;
                        else
                          v269 = 0;
                        v264 += 3 * v269;
                        if (!v268)
                          v265 = v266;
                      }
                      while (v265);
                      goto LABEL_404;
                    }
                  }
                  else
                  {
                    v263 = 0;
                  }
                  v264 = (unsigned __int8 **)&v259[3 * v263];
LABEL_404:
                  v277 = v256 | 4;
                  v278 = v264[1];
                  if (*v264 == (unsigned __int8 *)v277)
                  {
                    if (v278 == v257)
                    {
                      v280 = (char *)&v259[3 * v258];
                      if (v280 != (char *)(v264 + 3))
                      {
                        memmove(v264, v264 + 3, v280 - (char *)(v264 + 3));
                        v258 = *((_DWORD *)v224 + 2);
                      }
                      *((_DWORD *)v224 + 2) = v258 - 1;
                    }
                    else
                    {
                      *v264 = v257;
                    }
                  }
                  else
                  {
                    v279 = v264[2];
                    v264[1] = (unsigned __int8 *)v277;
                    if (v278 != v257)
                    {
                      v537 = v257;
                      *(_QWORD *)&v538 = v278;
                      *((_QWORD *)&v538 + 1) = v279;
                      sub_1C510F69C((uint64_t)v224, (uint64_t)(v264 + 3), (unint64_t)&v537);
                    }
                  }
                }
              }
LABEL_310:
              v222 = v187-- <= 1;
            }
            while (!v222);
          }
          v176 = v522;
          if (!v524)
            v176 = 1;
          v20 = v535;
          if ((v176 & 1) != 0)
          {
            v177 = *(_QWORD *)(v2 + 264);
            v178 = v549;
            if (!v177)
            {
LABEL_453:
              v306 = (_QWORD *)*((_QWORD *)v178 + 4);
              if (v306)
              {
                v307 = *((unsigned __int8 *)v178 + 47);
                v308 = (uint64_t *)(v520 + 232);
                if (*(_DWORD *)(v520 + 240) <= v307)
                  sub_1C515FA1C(v520 + 232, v307 + 1);
                v309 = *v308;
                *v306 = *(_QWORD *)(*v308 + 8 * v307);
                *(_QWORD *)(v309 + 8 * v307) = v306;
              }
              *(_QWORD *)v178 = *(_QWORD *)(v520 + 224);
              *(_QWORD *)(v520 + 224) = v178;
              goto LABEL_458;
            }
            v179 = *(int32x2_t **)(v177 + 288);
            v180 = v179[46];
            v181 = v179[48].u32[0];
            if ((_DWORD)v181)
            {
              LODWORD(v182) = (v181 - 1) & ((v549 >> 4) ^ (v549 >> 9));
              v183 = *(_QWORD *)&v180 + 16 * v182;
              v184 = *(llvm::MachineInstr **)v183;
              if (*(llvm::MachineInstr **)v183 == v549)
                goto LABEL_451;
              v185 = 1;
              while (v184 != (llvm::MachineInstr *)-4096)
              {
                v186 = v182 + v185++;
                v182 = v186 & (v181 - 1);
                v184 = *(llvm::MachineInstr **)(*(_QWORD *)&v180 + 16 * v182);
                if (v184 == v549)
                {
                  v183 = *(_QWORD *)&v180 + 16 * v182;
                  goto LABEL_451;
                }
              }
            }
            v183 = *(_QWORD *)&v180 + 16 * v181;
LABEL_451:
            if (v183 != *(_QWORD *)&v180 + 16 * v181)
            {
              v305 = *(_QWORD *)(v183 + 8) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v183 = -8192;
              v179[47] = vadd_s32(v179[47], (int32x2_t)0x1FFFFFFFFLL);
              *(_QWORD *)(v305 + 16) = 0;
              v178 = v549;
            }
            goto LABEL_453;
          }
LABEL_458:
          if (v542 != (uint64_t *)v541)
            free(v542);
        }
        v319 = 1;
        v7 = v513;
LABEL_493:
        v7 |= v319;
        v20 = (llvm::MachineBasicBlock *)*((_QWORD *)v20 + 1);
      }
      while (v20 != v515);
    }
  }
  v320 = *(_QWORD *)(v2 + 304);
  v321 = 312;
  if (v320 == *(_QWORD *)(v2 + 296))
    v321 = 316;
  v322 = *(unsigned int *)(v2 + v321);
  if ((_DWORD)v322)
  {
    v323 = 8 * v322;
    v324 = *(uint64_t **)(v2 + 304);
    while ((unint64_t)*v324 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v324;
      v323 -= 8;
      if (!v323)
        goto LABEL_525;
    }
  }
  else
  {
    v324 = *(uint64_t **)(v2 + 304);
  }
  v325 = (_QWORD *)(v320 + 8 * v322);
  if (v324 != v325)
  {
    v326 = *v324;
LABEL_504:
    if (sub_1C4A91738(*(_QWORD *)(v2 + 248), *(_DWORD *)(*(_QWORD *)(v326 + 32) + 4)))
    {
      v327 = *(_QWORD *)(v2 + 264);
      if (v327)
      {
        v328 = *(int32x2_t **)(v327 + 288);
        v329 = v328[46];
        v330 = v328[48].u32[0];
        if (!(_DWORD)v330)
          goto LABEL_512;
        LODWORD(v331) = (v330 - 1) & ((v326 >> 4) ^ (v326 >> 9));
        v332 = (uint64_t *)(*(_QWORD *)&v329 + 16 * v331);
        v333 = *v332;
        if (*v332 != v326)
        {
          v334 = 1;
          while (v333 != -4096)
          {
            v335 = v331 + v334++;
            v331 = v335 & (v330 - 1);
            v333 = *(_QWORD *)(*(_QWORD *)&v329 + 16 * v331);
            if (v333 == v326)
            {
              v332 = (uint64_t *)(*(_QWORD *)&v329 + 16 * v331);
              goto LABEL_513;
            }
          }
LABEL_512:
          v332 = (uint64_t *)(*(_QWORD *)&v329 + 16 * v330);
        }
LABEL_513:
        if (v332 != (uint64_t *)(*(_QWORD *)&v329 + 16 * v330))
        {
          v336 = v332[1] & 0xFFFFFFFFFFFFFFF8;
          *v332 = -8192;
          v328[47] = vadd_s32(v328[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v336 + 16) = 0;
        }
      }
      v337 = v326;
      if ((*(_BYTE *)v326 & 4) == 0)
      {
        v337 = v326;
        if ((*(_WORD *)(v326 + 44) & 8) != 0)
        {
          v337 = v326;
          do
            v337 = *(_QWORD *)(v337 + 8);
          while ((*(_WORD *)(v337 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v326 + 24) + 40, v326, *(_QWORD *)(v337 + 8));
    }
    v338 = (unint64_t *)(v324 + 1);
    while (v338 != v325)
    {
      v339 = *v338++;
      v326 = v339;
      if (v339 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v324 = (uint64_t *)(v338 - 1);
        goto LABEL_504;
      }
    }
  }
LABEL_525:
  v340 = *(_QWORD *)(v2 + 360);
  v341 = *(unsigned int *)(v2 + 376);
  v342 = (uint64_t *)(v340 + 16 * v341);
  if (*(_DWORD *)(v2 + 368))
  {
    if ((_DWORD)v341)
    {
      v343 = 16 * v341;
      v344 = *(uint64_t **)(v2 + 360);
      while ((unint64_t)(*v344 + 1) <= 1)
      {
        v344 += 2;
        v343 -= 16;
        if (!v343)
          goto LABEL_530;
      }
    }
    else
    {
      v344 = *(uint64_t **)(v2 + 360);
    }
  }
  else
  {
LABEL_530:
    v344 = (uint64_t *)(v340 + 16 * v341);
  }
  v345 = (uint64_t *)(v340 + 16 * v341);
  if (v344 != v345)
  {
    v346 = (uint64_t *)(a2 + 232);
    while (1)
    {
      v347 = *(_QWORD *)(v2 + 264);
      v348 = *v344;
      if (v347)
        break;
LABEL_544:
      v358 = *(_QWORD **)(v348 + 32);
      if (v358)
      {
        v359 = *(unsigned __int8 *)(v348 + 47);
        if (*(_DWORD *)(a2 + 240) <= v359)
          sub_1C515FA1C((uint64_t)v346, v359 + 1);
        v360 = *v346;
        *v358 = *(_QWORD *)(*v346 + 8 * v359);
        *(_QWORD *)(v360 + 8 * v359) = v358;
      }
      *(_QWORD *)v348 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 224) = v348;
      v361 = v344 + 2;
      v344 = v342;
      if (v361 != v342)
      {
        v344 = v361;
        while ((unint64_t)(*v344 + 1) <= 1)
        {
          v344 += 2;
          if (v344 == v342)
          {
            v344 = v342;
            break;
          }
        }
      }
      if (v344 == v345)
        goto LABEL_554;
    }
    v349 = *(int32x2_t **)(v347 + 288);
    v350 = v349[46];
    v351 = v349[48].u32[0];
    if ((_DWORD)v351)
    {
      LODWORD(v352) = (v351 - 1) & ((v348 >> 4) ^ (v348 >> 9));
      v353 = (uint64_t *)(*(_QWORD *)&v350 + 16 * v352);
      v354 = *v353;
      if (*v353 != v348)
      {
        v355 = 1;
        while (v354 != -4096)
        {
          v356 = v352 + v355++;
          v352 = v356 & (v351 - 1);
          v354 = *(_QWORD *)(*(_QWORD *)&v350 + 16 * v352);
          if (v354 == v348)
          {
            v353 = (uint64_t *)(*(_QWORD *)&v350 + 16 * v352);
            goto LABEL_542;
          }
        }
        goto LABEL_541;
      }
    }
    else
    {
LABEL_541:
      v353 = (uint64_t *)(*(_QWORD *)&v350 + 16 * v351);
    }
LABEL_542:
    if (v353 != (uint64_t *)(*(_QWORD *)&v350 + 16 * v351))
    {
      v357 = v353[1] & 0xFFFFFFFFFFFFFFF8;
      *v353 = -8192;
      v349[47] = vadd_s32(v349[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v357 + 16) = 0;
      v348 = *v344;
    }
    goto LABEL_544;
  }
LABEL_554:
  if ((v7 & 1) != 0)
  {
    v362 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v2 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
    if (v362)
    {
      v363 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v362 + 96))(v362, &llvm::MachineDominatorTree::ID);
      if (v363)
      {
        v364 = v363;
        if (!*(_QWORD *)(v363 + 1320))
        {
          v507 = (uint64_t *)(v363 + 1320);
          v508 = operator new();
          *(_OWORD *)(v508 + 32) = 0u;
          *(_OWORD *)(v508 + 48) = 0u;
          *(_QWORD *)(v508 + 56) = 0;
          *(_QWORD *)(v508 + 64) = 0;
          *(_OWORD *)(v508 + 16) = 0u;
          *(_QWORD *)v508 = v508 + 16;
          *(_QWORD *)(v508 + 8) = 0x100000000;
          *(_QWORD *)(v508 + 24) = 0;
          *(_QWORD *)(v508 + 32) = 0;
          *(_DWORD *)(v508 + 40) = 0;
          *(_QWORD *)(v508 + 48) = 0;
          *(_BYTE *)(v508 + 64) = 0;
          v509 = *v507;
          *v507 = v508;
          if (v509)
            sub_1C4DC4DE4(v364 + 1320, v509);
        }
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v364);
        v365 = *(_QWORD *)(v364 + 1320);
        *(_QWORD *)(v365 + 56) = a2;
        sub_1C50F0A2C(v365, 0);
      }
    }
  }
  v366 = v2 + 360;
  v367 = *(_DWORD *)(v2 + 368);
  if (v367)
  {
    v374 = *(_DWORD *)(v2 + 376);
    if (v374 > 4 * v367 && v374 >= 0x41)
    {
      v375 = 1 << (33 - __clz(v367 - 1));
      if (v375 <= 64)
        v376 = 64;
      else
        v376 = v375;
      goto LABEL_574;
    }
    goto LABEL_782;
  }
  if (!*(_DWORD *)(v2 + 372))
    goto LABEL_561;
  v374 = *(_DWORD *)(v2 + 376);
  if (v374 <= 0x40)
  {
    v2 = v526;
LABEL_782:
    if (v374)
    {
      v505 = *(_QWORD **)v366;
      v506 = 16 * v374;
      do
      {
        *v505 = 0;
        v505 += 2;
        v506 -= 16;
      }
      while (v506);
    }
    *(_QWORD *)(v2 + 368) = 0;
    goto LABEL_561;
  }
  v376 = 0;
  v2 = v526;
LABEL_574:
  if (v376 == v374)
  {
    *(_QWORD *)(v2 + 368) = 0;
    v377 = 16 * v374;
    v378 = *(_QWORD **)(v2 + 360);
    do
    {
      *v378 = 0;
      v378 += 2;
      v377 -= 16;
    }
    while (v377);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v366, 8);
    if (v376)
    {
      v470 = (4 * v376 / 3u + 1) | ((unint64_t)(4 * v376 / 3u + 1) >> 1);
      v471 = v470 | (v470 >> 2) | ((v470 | (v470 >> 2)) >> 4);
      LODWORD(v471) = (((v471 | (v471 >> 8)) >> 16) | v471 | (v471 >> 8)) + 1;
      *(_DWORD *)(v2 + 376) = v471;
      v472 = operator new(16 * v471, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 360) = v472;
      *(_QWORD *)(v2 + 368) = 0;
      v473 = *(unsigned int *)(v2 + 376);
      if ((_DWORD)v473)
      {
        v474 = 16 * v473;
        do
        {
          *v472 = 0;
          v472 += 2;
          v474 -= 16;
        }
        while (v474);
      }
    }
    else
    {
      *(_QWORD *)v366 = 0;
      *(_QWORD *)(v366 + 8) = 0;
      *(_DWORD *)(v366 + 16) = 0;
    }
  }
LABEL_561:
  v368 = *(void **)(v2 + 304);
  if (v368 == *(void **)(v2 + 296))
  {
LABEL_562:
    *(_QWORD *)(v2 + 316) = 0;
  }
  else
  {
    v384 = *(unsigned int *)(v2 + 312);
    if (v384 < 0x21 || 4 * (*(_DWORD *)(v2 + 316) - *(_DWORD *)(v2 + 320)) >= v384)
    {
      memset(v368, 255, 8 * v384);
      goto LABEL_562;
    }
    free(v368);
    v499 = *(_DWORD *)(v2 + 316) - *(_DWORD *)(v2 + 320);
    v500 = 1 << (33 - __clz(v499 - 1));
    if (v499 <= 0x10)
      v501 = 32;
    else
      v501 = v500;
    *(_DWORD *)(v2 + 312) = v501;
    *(_QWORD *)(v2 + 316) = 0;
    v502 = malloc_type_malloc(8 * v501, 0x4065EBACuLL);
    if (!v502)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v2 + 304) = v502;
    memset(v502, 255, 8 * *(unsigned int *)(v2 + 312));
  }
  v369 = v2 + 272;
  v370 = *(_DWORD *)(v2 + 280);
  if (v370)
  {
    v379 = *(_DWORD *)(v2 + 288);
    if (v379 > 4 * v370 && v379 >= 0x41)
    {
      v380 = 1 << (33 - __clz(v370 - 1));
      if (v380 <= 64)
        v381 = 64;
      else
        v381 = v380;
      goto LABEL_583;
    }
    goto LABEL_777;
  }
  if (!*(_DWORD *)(v2 + 284))
    goto LABEL_565;
  v379 = *(_DWORD *)(v2 + 288);
  if (v379 <= 0x40)
  {
    v2 = v526;
LABEL_777:
    if (v379)
    {
      v503 = *(_QWORD **)v369;
      v504 = 12 * v379;
      do
      {
        *v503 = -1;
        v503 = (_QWORD *)((char *)v503 + 12);
        v504 -= 12;
      }
      while (v504);
    }
    *(_QWORD *)(v2 + 280) = 0;
    goto LABEL_565;
  }
  v381 = 0;
  v2 = v526;
LABEL_583:
  if (v381 == v379)
  {
    *(_QWORD *)(v2 + 280) = 0;
    v382 = *(_QWORD **)(v2 + 272);
    v383 = 12 * v379;
    do
    {
      *v382 = -1;
      v382 = (_QWORD *)((char *)v382 + 12);
      v383 -= 12;
    }
    while (v383);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v369, 4);
    if (v381)
    {
      v475 = (4 * v381 / 3u + 1) | ((unint64_t)(4 * v381 / 3u + 1) >> 1);
      v476 = v475 | (v475 >> 2) | ((v475 | (v475 >> 2)) >> 4);
      LODWORD(v476) = (((v476 | (v476 >> 8)) >> 16) | v476 | (v476 >> 8)) + 1;
      *(_DWORD *)(v2 + 288) = v476;
      v477 = operator new(12 * v476, (std::align_val_t)4uLL);
      *(_QWORD *)(v2 + 272) = v477;
      *(_QWORD *)(v2 + 280) = 0;
      v478 = *(unsigned int *)(v2 + 288);
      if ((_DWORD)v478)
      {
        v479 = 12 * v478;
        do
        {
          *v477 = -1;
          v477 = (_QWORD *)((char *)v477 + 12);
          v479 -= 12;
        }
        while (v479);
      }
    }
    else
    {
      *(_QWORD *)v369 = 0;
      *(_QWORD *)(v369 + 8) = 0;
      *(_DWORD *)(v369 + 16) = 0;
    }
  }
LABEL_565:
  **(_QWORD **)(a2 + 360) |= 2uLL;
  return v7 & 1;
}

