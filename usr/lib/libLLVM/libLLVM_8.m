void sub_1C4AE6724(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::detail::DoubleAPFloat *v11;
  uint64_t v12;
  uint64_t **v13;
  char v14;
  int v15;
  _BOOL4 v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  int v28;
  const char *v29;
  unsigned int v30;
  const llvm::APInt *v31;
  unsigned int v32;
  const llvm::APInt *v33;
  const llvm::APInt *v34;
  char v35;
  void *v36;
  int v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  const llvm::detail::DoubleAPFloat *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  double v61;
  const llvm::APInt *v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66[8];
  void *v67;
  uint64_t *v68;
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v56 = a3;
  v7 = (uint64_t *)(a5 + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0)
    v7 = (uint64_t *)(a6 + 8 * a4);
  v8 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 8);
  if (**(_WORD **)(v9 + 16) == 121)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48);
    if (v10)
    {
      v11 = (llvm::detail::DoubleAPFloat *)&v67;
      v12 = *(_QWORD *)(v10 + 32);
      if ((_UNKNOWN *)v12 == &unk_1C866F1C0)
      {
        v53 = a2;
        v46 = (const llvm::detail::DoubleAPFloat *)(v10 + 32);
        v47 = a3;
        v11 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v67, v46);
        a2 = v53;
        a3 = v47;
      }
      else
      {
        v67 = *(void **)(v10 + 32);
        v13 = (uint64_t **)*(unsigned int *)(v12 + 8);
        if (((_DWORD)v13 + 64) >= 0x80)
        {
          v52 = v12;
          v54 = a2;
          v51 = a3;
          v48 = operator new[]();
          a3 = v51;
          v12 = v52;
          a2 = v54;
          v13 = (uint64_t **)v48;
          v11 = (llvm::detail::DoubleAPFloat *)&v67;
          v68 = (uint64_t *)v13;
        }
        v14 = *(_BYTE *)(v10 + 52);
        v15 = v14 & 7;
        v70 = v14 & 0xF;
        v69 = *(_DWORD *)(v10 + 48);
        v17 = (v14 & 6) != 0 && v15 != 3;
        if (v15 == 1 || v17)
        {
          v19 = *(unsigned int *)(v12 + 8);
          if ((v19 - 64) > 0xFFFFFF7F)
            v13 = &v68;
          v22 = *(uint64_t **)(v10 + 40);
          v21 = (uint64_t *)(v10 + 40);
          v20 = v22;
          if ((*(_DWORD *)(*(v21 - 1) + 8) - 64) >= 0xFFFFFF80)
            v23 = v21;
          else
            v23 = v20;
          if (v19 <= 0xFFFFFFBF)
          {
            v24 = (unint64_t)(v19 + 64) >> 6;
            do
            {
              v25 = *v23++;
              *v13++ = (uint64_t *)v25;
              --v24;
            }
            while (v24);
          }
        }
      }
      switch(a2)
      {
        case 175:
          llvm::APFloat::convert((uint64_t)v66, &unk_1C866F198, 1, &v55);
          v26 = llvm::APFloat::convertToDouble((llvm::APFloat *)v66);
          v27 = log2(v26);
          v28 = sub_1C4825F50(&v56);
          if ((_DWORD)v29 == 1)
          {
            v49 = v28;
            v28 = v49;
          }
          if (v28 == 64)
          {
            LODWORD(v62) = 64;
            v61 = v27;
            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v57, (const llvm::APInt **)&v61);
            v31 = (const llvm::APInt *)v57;
            v62 = (const llvm::APInt *)v57;
            v63 = v58;
          }
          else
          {
            if (v28 != 32)
            {
              LODWORD(v62) = 64;
              v61 = v27;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v57, (const llvm::APInt **)&v61);
              v62 = (const llvm::APInt *)v57;
              v63 = v58;
              v64 = v59;
              v65 = v65 & 0xF0 | v60 & 0xF;
              v57 = 129;
              v42 = sub_1C4825F50(&v57);
              if ((_DWORD)v43 == 1)
              {
                v50 = v42;
                v42 = v50;
              }
              if (v42 == 64)
              {
                v44 = &unk_1C866F198;
              }
              else if (v42 == 32)
              {
                v44 = &unk_1C866F184;
              }
              else
              {
                v44 = &unk_1C866F15C;
              }
              llvm::APFloat::convert((uint64_t)&v61, v44, 1, &v57);
              v31 = v62;
              goto LABEL_66;
            }
            *(float *)&v30 = v27;
            LODWORD(v62) = 32;
            *(_QWORD *)&v61 = v30;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v57, (const llvm::APInt **)&v61);
            v31 = (const llvm::APInt *)v57;
            v62 = (const llvm::APInt *)&unk_1C866F210;
            v63 = v58;
          }
          v64 = v59;
          v65 = v65 & 0xF0 | v60 & 0xF;
LABEL_66:
          v45 = v63;
          if (v31 != (const llvm::APInt *)&unk_1C866F1C0)
          {
            *(_DWORD *)(a1 + 24) = v64;
            *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v65 & 0xF;
          }
          *(_QWORD *)(a1 + 8) = v31;
          *(_QWORD *)(a1 + 16) = v45;
          *(_BYTE *)(a1 + 32) = 1;
          goto LABEL_69;
        case 176:
        case 178:
        case 180:
        case 181:
        case 182:
        case 183:
          goto LABEL_43;
        case 177:
          v38 = v67;
          goto LABEL_50;
        case 179:
          if ((a3 | 0x8000000000000000) != 0x8000000000000081)
            goto LABEL_43;
          if (a3 == 129)
          {
            v36 = &unk_1C866F15C;
            v37 = 0;
          }
          else
          {
            v36 = &unk_1C866F170;
            v37 = 1;
          }
          llvm::APFloat::convert((uint64_t)v66, v36, v37, &v61);
          v38 = v67;
          if (v67 != &unk_1C866F1C0)
            goto LABEL_56;
          v40 = (uint64_t)v68;
          v68 = 0;
          goto LABEL_57;
        case 184:
          v38 = v67;
          v39 = v68;
          if (v67 != &unk_1C866F1C0)
            v39 = (uint64_t *)v66;
          if ((*((_BYTE *)v39 + 28) & 8) == 0)
            goto LABEL_47;
LABEL_50:
          if (v38 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::changeSign(v11);
            v38 = v67;
LABEL_47:
            if (v38 == &unk_1C866F1C0)
            {
              v40 = (uint64_t)v68;
              v68 = 0;
              v38 = &unk_1C866F1C0;
              goto LABEL_57;
            }
          }
          else
          {
            v70 ^= 8u;
          }
LABEL_56:
          v40 = (uint64_t)v68;
          *(_DWORD *)(a1 + 24) = v69;
          *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v70 & 0xF;
LABEL_57:
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = v40;
          v41 = &unk_1C866F210;
          v67 = &unk_1C866F210;
          *(_BYTE *)(a1 + 32) = 1;
LABEL_70:
          if ((v41[2] - 64) <= 0xFFFFFF7F)
          {
            if (v68)
              MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          }
          return;
        default:
          if (a2 == 217)
          {
            llvm::APFloat::convert((uint64_t)v66, &unk_1C866F198, 1, &v55);
            *(float *)&v32 = sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v66));
            LODWORD(v58) = 32;
            v57 = v32;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v61, (const llvm::APInt **)&v57);
            v33 = *(const llvm::APInt **)&v61;
            v34 = v62;
            if (*(_UNKNOWN **)&v61 != &unk_1C866F1C0)
            {
              v35 = BYTE4(v63);
              *(_DWORD *)(a1 + 24) = v63;
              *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v35 & 0xF;
            }
            *(_QWORD *)(a1 + 8) = v33;
            *(_QWORD *)(a1 + 16) = v34;
            *(_BYTE *)(a1 + 32) = 1;
          }
          else
          {
LABEL_43:
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 32) = 0;
          }
LABEL_69:
          v41 = v67;
          if (v67 != &unk_1C866F1C0)
            goto LABEL_70;
          sub_1C4773C74((uint64_t *)&v68);
          return;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

BOOL sub_1C4AE6CA0(int a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = (uint64_t *)(v4 + 16 * (a1 & 0x7FFFFFFF) + 8);
  v6 = *(_QWORD *)(a2 + 272);
  if (a1 >= 0)
    v5 = (uint64_t *)(v6 + 8 * a1);
  v7 = *v5;
  if (v7)
  {
    v23 = a2;
    if ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (v9)
      {
        v10 = **(unsigned __int16 **)(v9 + 16);
        if ((v10 & 0xFFFE) == 0x78)
          return 1;
        v11 = *(unsigned int **)(v9 + 32);
        v12 = v11[1];
        v13 = (uint64_t *)(v4 + 16 * (v12 & 0x7FFFFFFF) + 8);
        v14 = (uint64_t *)(v6 + 8 * v12);
        if ((int)v12 >= 0)
          v13 = v14;
        v15 = *v13;
        if (v15)
        {
          v16 = v15;
          if ((*(_DWORD *)v15 & 0x1000000) == 0)
            goto LABEL_19;
          v16 = v15;
          while (1)
          {
            v16 = *(_QWORD *)(v16 + 24);
            if (!v16)
              break;
            if ((*(_BYTE *)(v16 + 3) & 1) == 0)
            {
LABEL_19:
              while (1)
              {
                v16 = *(_QWORD *)(v16 + 24);
                if (!v16)
                  goto LABEL_31;
                if ((*(_BYTE *)(v16 + 3) & 1) == 0)
                  goto LABEL_21;
              }
            }
          }
LABEL_21:
          if (!a4)
            return 0;
          if ((*(_DWORD *)v15 & 0x1000000) != 0)
          {
            do
            {
              v15 = *(_QWORD *)(v15 + 24);
              if (!v15)
                return 0;
            }
            while ((*(_BYTE *)(v15 + 3) & 1) != 0);
          }
          v17 = 0;
LABEL_26:
          ++v17;
          while (1)
          {
            v15 = *(_QWORD *)(v15 + 24);
            if (!v15)
              break;
            if ((*(_BYTE *)(v15 + 3) & 1) == 0)
              goto LABEL_26;
          }
          if (v17 != 2)
            return 0;
LABEL_31:
          v18 = a3;
          if (v10 != 313)
            v18 = 0;
          result = 1;
          if ((v18 & 1) != 0 || (v10 - 299) < 4)
            return result;
          if (**(unsigned __int16 **)(v9 + 16) > 0x10Fu)
          {
            if ((v10 - 272) <= 0x3D && ((1 << (v10 - 16)) & 0x20000040000000C1) != 0
              || v10 == 357)
            {
              return result;
            }
          }
          else if ((v10 - 163) <= 0x38
                 && ((1 << (v10 + 93)) & 0x18800000038540DLL) != 0
                 || v10 == 54
                 || v10 == 85)
          {
            return result;
          }
          if ((v10 & 0xFFFE) == 0x74)
          {
            v19 = *(unsigned int *)(v9 + 40);
            if ((_DWORD)v19)
            {
              v20 = v11 + 4;
              while (*((_BYTE *)v20 - 16) != 17)
              {
                v20 += 8;
                if (!--v19)
                  goto LABEL_51;
              }
              if (*v20 == 2131)
                return 1;
            }
          }
LABEL_51:
          switch(v10)
          {
            case 51:
              if (!sub_1C4AE6CA0(v11[33], a2, a3, 0))
                return 0;
              v21 = v11[41];
              a2 = v23;
              v22 = a3;
              break;
            case 178:
              return (a3 & 1) != 0;
            case 179:
              if ((a3 & 1) != 0)
                return 1;
              v21 = v11[9];
              v22 = 0;
              break;
            default:
              return 0;
          }
          return (sub_1C4AE6CA0(v21, a2, v22, 0) & 1) != 0;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4AE6F08(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *i;

  v2 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v2 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v3 = *v2;
  if (!*v2)
    return 1;
  while ((*(_BYTE *)(v3 + 3) & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v6 = *(_QWORD *)(v3 + 8);
LABEL_9:
  v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    if ((sub_1C4AE6F08(*(unsigned int *)(*(_QWORD *)(v6 + 32) + 4), a2) & 1) == 0)
      return 0;
    goto LABEL_29;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x10Fu)
  {
    v12 = (v7 - 272) > 0x3D || ((1 << (v7 - 16)) & 0x20000040000000C1) == 0;
    if (!v12 || v7 == 357)
      goto LABEL_29;
LABEL_38:
    if ((v7 & 0xFFFE) != 0x74)
      return 0;
    v14 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v14)
      return 0;
    for (i = (_DWORD *)(*(_QWORD *)(v6 + 32) + 16); *((_BYTE *)i - 16) != 17; i += 8)
    {
      result = 0;
      if (!--v14)
        return result;
    }
    if (*i != 2131)
      return 0;
    goto LABEL_29;
  }
  v8 = (v7 - 163);
  if (v8 > 0x38)
    goto LABEL_35;
  if (((1 << (v7 + 93)) & 0x18800000038140DLL) != 0)
    goto LABEL_29;
  if (v8 != 14)
  {
LABEL_35:
    if (v7 == 54 || v7 == 85)
      goto LABEL_29;
    goto LABEL_38;
  }
  v9 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 4);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  if ((int)v9 >= 0)
    v10 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v9);
  v11 = *v10;
  if (!v11)
  {
LABEL_29:
    v13 = *(_QWORD *)(v3 + 8);
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 1;
      if ((*(_BYTE *)(v3 + 3) & 1) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8);
        if (v6 != v13)
          goto LABEL_9;
      }
    }
  }
  while ((*(_BYTE *)(v11 + 3) & 1) != 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      goto LABEL_29;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11)
      break;
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
      goto LABEL_29;
  }
  result = sub_1C4AE6F08(v9, a2);
  if ((_DWORD)result)
  {
    if ((sub_1C4ADBFFC(v9, a2) & 1) == 0)
      return 0;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_1C4AE7104(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t i;
  uint64_t v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 40) != 3)
    return 0;
  v3 = *(unsigned int **)(a2 + 32);
  v4 = v3[1];
  if ((v4 & 0x80000000) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40);
  v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) >= *(_DWORD *)(v6 + 432) || *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * v7) != 9)
    return 0;
  v8 = v3[9];
  v9 = v3[17];
  if ((v8 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v8);
  v11 = *v10;
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 3) & 1) != 0 || (v11 = *(_QWORD *)(v11 + 24)) != 0 && (*(_BYTE *)(v11 + 3) & 1) != 0)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_15;
LABEL_10:
      v13 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v9);
      goto LABEL_16;
    }
  }
  v12 = 0;
  if ((v9 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_15:
  v13 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
LABEL_16:
  v14 = *v13;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
    v14 = *(_QWORD *)(v14 + 24);
  v15 = *(_QWORD *)(v14 + 8);
  if (sub_1C499F11C(v15, v6)
    && (!sub_1C499F11C(v12, v6) || llvm::MachineRegisterInfo::hasOneNonDBGUse(v6, v9)))
  {
    v16 = v12;
    v17 = v8;
  }
  else
  {
    v16 = v15;
    v15 = v12;
    v17 = v9;
    LODWORD(v9) = v8;
  }
  result = sub_1C499F11C(v15, v6);
  if ((_DWORD)result)
  {
    v56 = 0;
    if (!sub_1C499F11C(v15, v6)
      || ((v19 = **(unsigned __int16 **)(v15 + 16), (v19 - 134) >= 2) && v19 != 51
        ? (v20 = 0)
        : (v20 = 2),
          (v21 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 32 * v20 + 4),
           v58 = &v56,
           v70 = v21,
           !sub_1C49BCA00((uint64_t)&v57, v6, &v70))
       || v56 != 1))
    {
      if (!sub_1C499F11C(v16, v6)
        || ((v22 = **(unsigned __int16 **)(v16 + 16), (v22 - 134) >= 2) && v22 != 51
          ? (v23 = 0)
          : (v23 = 2),
            (v24 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + 32 * v23 + 4),
             v58 = &v56,
             v70 = v24,
             !sub_1C49BCA00((uint64_t)&v57, v6, &v70))
         || v56 != 1))
      {
        v25 = **(unsigned __int16 **)(v15 + 16);
        v26 = v25 - 134;
        if ((v25 - 134) < 2 || v25 == 51)
          v27 = 2;
        else
          v27 = 0;
        v28 = *(_QWORD *)(v15 + 32);
        if (v26 < 2 || v25 == 51)
          v29 = 3;
        else
          v29 = 0;
        v30 = v28 + 32 * v27;
        v31 = v28 + 32 * v29;
        v32 = v26 < 2 || v25 == 51;
        v33 = *(_DWORD *)(v30 + 4);
        v53 = *(_DWORD *)(v31 + 4);
        v34 = *(_DWORD *)(v28 + 32 * v32 + 16);
        if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(v6, v9))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v7 + 8);
          if (v35)
          {
            while ((*(_BYTE *)(v35 + 3) & 1) != 0)
            {
              v35 = *(_QWORD *)(v35 + 24);
              if (!v35)
                goto LABEL_54;
            }
            v51 = *(_QWORD *)(v35 + 8);
LABEL_78:
            v52 = **(unsigned __int16 **)(v51 + 16);
            if (v52 == 114 || v52 == 136)
              return 0;
            while (1)
            {
              v35 = *(_QWORD *)(v35 + 24);
              if (!v35)
                break;
              if ((*(_BYTE *)(v35 + 3) & 1) == 0 && *(_QWORD *)(v35 + 8) != v51)
              {
                v51 = *(_QWORD *)(v35 + 8);
                goto LABEL_78;
              }
            }
          }
        }
LABEL_54:
        if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(v6, v4))
          goto LABEL_70;
        v36 = 0;
        v37 = v4;
        v38 = v4;
        while (1)
        {
          v39 = (uint64_t *)(v38 < 0
                          ? *(_QWORD *)(v6 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v6 + 272) + 8 * v37);
          for (i = *v39; (*(_BYTE *)(i + 3) & 1) != 0; i = *(_QWORD *)(i + 24))
            ;
          v41 = *(_QWORD *)(i + 8);
          v42 = **(unsigned __int16 **)(v41 + 16);
          if ((v42 - 65) >= 2)
            break;
          v43 = *(_QWORD *)(v41 + 32);
          v37 = *(unsigned int *)(v43 + 4);
          v44 = !llvm::MachineRegisterInfo::hasOneNonDBGUse(v6, *(_DWORD *)(v43 + 4)) || v36 >= 4;
          v38 = v37;
          ++v36;
          if (v44)
            goto LABEL_70;
        }
        if (v42 != 136)
        {
LABEL_70:
          v45 = *a1;
          *(_QWORD *)(v45 + 40) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(v45 + 48) = a2;
          v46 = **(unsigned __int16 **)(a2 + 16);
          if (v46 == 66)
          {
            v47 = *a1;
            v70 = v4;
            v71 = 1;
            v57 = v34;
            v59 = 2;
            v60 = v33;
            v61 = 0;
            v62 = v53;
            v63 = 0;
            v54 = 9;
            v55 = 0;
            v64 = sub_1C5544694(v47, &v54, 1);
            v65 = v49;
            v66 = 1;
            LODWORD(v67) = v17;
            v69 = 0;
LABEL_74:
            (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 51, &v70, 1, &v57, 5, 0);
            v50 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v50 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v50 = a2;
                do
                  v50 = *(_QWORD *)(v50 + 8);
                while ((*(_WORD *)(v50 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v50 + 8));
            return 1;
          }
          if (v46 == 65)
          {
            v47 = *a1;
            v70 = v4;
            v71 = 1;
            v57 = v34;
            v59 = 2;
            v60 = v33;
            v61 = 0;
            v62 = v53;
            v63 = 0;
            LODWORD(v64) = v17;
            v66 = 0;
            v54 = 9;
            v55 = 0;
            v67 = sub_1C5544694(v47, &v54, 0);
            v68 = v48;
            v69 = 1;
            goto LABEL_74;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C4AE7668(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, _QWORD *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  int v14;
  const char *v15;
  const llvm::APInt *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  int64_t v45;
  BOOL v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  void *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  char v84;
  BOOL v85;
  size_t v86;
  int v87;
  void *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  char v95;
  unsigned int v96;
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  const char *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  const char *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  const char *v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  size_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  unint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  size_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int64_t v187;
  int v188;
  unint64_t v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  BOOL v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(void);
  uint64_t v214;
  int v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  int64_t v219;
  unint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t *v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  int64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  char v264;
  int v265;
  unsigned int v266;
  int v267;
  int64_t v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  unint64_t v284;
  int8x8_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unint64_t v305;
  unsigned int v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  unsigned int v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  _BOOL4 v327;
  uint64_t *v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  unsigned __int16 *v336;
  unsigned int v337;
  int v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  int v345;
  BOOL v346;
  uint64_t v347;
  uint64_t *v348;
  unint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t i;
  uint64_t v356;
  uint64_t v357;
  uint64_t j;
  uint64_t v359;
  llvm::ConstantInt *****v360;
  llvm::ValueHandleBase *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char v382;
  int8x8_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  size_t v387;
  uint64_t *v388;
  unint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  _BOOL4 v392;
  uint64_t *v393;
  unint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t *v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _BOOL4 v408;
  uint64_t *v409;
  unint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  int8x8_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  unint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  uint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t *v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t *v462;
  unint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t *v468;
  unint64_t v469;
  _QWORD *v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char v482;
  int8x8_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  size_t v487;
  uint64_t *v488;
  unint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _BOOL4 v492;
  uint64_t *v493;
  unint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  char v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t *v504;
  unint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  _BOOL4 v508;
  uint64_t *v509;
  unint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  char v516;
  uint64_t v517;
  uint64_t v519;
  _QWORD *v520;
  uint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  char v533;
  char v534;
  unint64_t v535;
  unint64_t v536;
  void *v537;
  unsigned int v538;
  BOOL v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  unint64_t v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  llvm::APInt *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  unint64_t v553;
  unsigned int v554;
  void *v555;
  unsigned int v556;
  unint64_t v557;
  unsigned int v558;
  void *v559;
  unsigned int v560;
  void *v561;
  unsigned int v562;
  void *v563;
  unsigned int v564;
  void *v565;
  unsigned int v566;
  void *v567;
  unsigned int v568;
  void *__src;
  unsigned int v570;
  void *__s1;
  unsigned int v572;
  void *v573;
  unsigned int v574;
  void *v575;
  unsigned int v576;
  unint64_t v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  unsigned int v586;
  unint64_t v587;
  unsigned int v588;
  uint64_t v589;

  v12 = a2;
  v589 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)a3 & 1) == 0)
  {
    v14 = **(unsigned __int16 **)(a2 + 16);
    if (v14 != 193 && v14 != 70)
      return 0;
  }
  v17 = sub_1C4825F50(a3);
  if ((_DWORD)v15 == 1)
  LODWORD(v580) = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v579, 0, 0);
    LODWORD(v582) = v17;
    llvm::APInt::initSlowCase((llvm::APInt *)&v581, 0, 0);
  }
  else
  {
    LODWORD(v582) = v17;
    v579 = 0;
    v581 = 0;
  }
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
    MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
  v552 = a1;
  *a5 = v579;
  *((_DWORD *)a5 + 2) = v580;
  LODWORD(v580) = 0;
  v549 = (llvm::APInt *)(a5 + 2);
  if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
  a5[2] = v581;
  *((_DWORD *)a5 + 6) = v582;
  v18 = *(unsigned int *)(a4 + 8);
  v578 = v18;
  v551 = v12;
  if (v18 > 0x40)
  {
    v20 = operator new[]();
    v19 = *(_QWORD **)a4;
    memcpy((void *)v20, *(const void **)a4, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v19 = *(_QWORD **)a4;
    v20 = *(_QWORD *)a4;
  }
  v577 = v20;
  v21 = *(_QWORD *)(*(_QWORD *)(*v552 + 8) + 40);
  v22 = *(_QWORD *)(v12 + 32);
  v23 = (const char *)*(unsigned int *)(v22 + 4);
  if ((v23 & 0x80000000) != 0)
    v24 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
  else
    v24 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * (_QWORD)v23);
  v25 = *v24;
  v550 = *(_QWORD *)(*(_QWORD *)(*v552 + 8) + 40);
  if (v25)
  {
    while ((*(_BYTE *)(v25 + 3) & 1) != 0)
    {
      v25 = *(_QWORD *)(v25 + 24);
      if (!v25)
        goto LABEL_19;
    }
    while (1)
    {
      v25 = *(_QWORD *)(v25 + 24);
      if (!v25)
        break;
      if ((*(_BYTE *)(v25 + 3) & 1) == 0)
        goto LABEL_19;
    }
LABEL_32:
    v30 = *(_DWORD *)(a4 + 8);
    if (v30 >= 0x41)
    {
      v31 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
      v21 = v550;
      if (v30 - v31 > 0x40)
      {
        v32 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      v19 = (_QWORD *)a4;
    }
    v32 = *v19 == 0;
LABEL_46:
    v12 = v551;
    v29 = 0;
    if (a6 != 6 && !v32)
      goto LABEL_48;
    goto LABEL_914;
  }
LABEL_19:
  if ((a7 & 1) != 0)
    goto LABEL_32;
  if (!a6)
    goto LABEL_36;
  v26 = *(_QWORD *)(v12 + 16);
  v27 = *(unsigned __int8 *)(v26 + 4);
  if ((*(_BYTE *)(v26 + 8) & 2) == 0 || (v78 = *(_DWORD *)(v12 + 40), v78 == v27))
  {
    v28 = v27;
  }
  else
  {
    v79 = v78 - 1;
    v28 = v27;
    while (1)
    {
      v80 = *(_DWORD *)(v22 + 32 * v27);
      if ((v80 & 0x10000FF) != 0x1000000)
        break;
      v28 += (v80 & 0x2000000) == 0;
      if (v79 == v27)
        break;
      ++v27;
      v21 = *(_QWORD *)(*(_QWORD *)(*v552 + 8) + 40);
      if ((v80 & 0x2000000) != 0)
        goto LABEL_23;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(*v552 + 8) + 40);
  }
LABEL_23:
  if (v28 != 1)
  {
LABEL_36:
    LODWORD(v580) = v17;
    if (v17 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v579, -1, 1);
      v21 = v550;
      LODWORD(v18) = v578;
    }
    else
    {
      if (v17)
        v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      else
        v33 = 0;
      v579 = v33;
    }
    if (v18 >= 0x41 && v577)
    {
      MEMORY[0x1CAA32F9C](v577, 0x1000C8000313F17);
      v21 = v550;
    }
    v20 = v579;
    v577 = v579;
    LODWORD(v18) = v580;
    v578 = v580;
LABEL_48:
    v574 = 1;
    v573 = 0;
    v576 = 1;
    v575 = 0;
    v34 = *(unsigned __int16 **)(v12 + 16);
    v35 = *v34;
    if (v35 > 0x4F)
    {
      switch(*v34)
      {
        case 0x76u:
          v36 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
          if ((v36 & 0x80000000) != 0
            && (v36 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v21 + 432))
          {
            v37 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v36 & 0x7FFFFFFF));
          }
          else
          {
            v37 = 0;
          }
          v579 = v37;
          v142 = sub_1C4825F50((unint64_t *)&v579);
          if ((_DWORD)v141 == 1)
          llvm::APInt::trunc((llvm::APInt *)&v577, v142, (llvm::APInt *)&v587);
          v143 = v550;
          if ((v36 & 0x80000000) != 0)
            v144 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
          else
            v144 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v36);
          v167 = *v144;
          if (v167)
          {
            if ((*(_BYTE *)(v167 + 3) & 1) != 0
              || (v167 = *(_QWORD *)(v167 + 24)) != 0 && (*(_BYTE *)(v167 + 3) & 1) != 0)
            {
              v168 = *(_QWORD *)(v167 + 8);
            }
            else
            {
              v168 = 0;
            }
            v143 = v550;
            v12 = v551;
            if ((v36 & 0x80000000) == 0)
              goto LABEL_582;
          }
          else
          {
            v168 = 0;
            if ((v36 & 0x80000000) == 0)
              goto LABEL_582;
          }
          if ((v36 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v143 + 432))
          {
            v169 = *(_QWORD *)(*(_QWORD *)(v143 + 424) + 8 * (v36 & 0x7FFFFFFF));
            goto LABEL_583;
          }
LABEL_582:
          v169 = 0;
LABEL_583:
          v579 = v169;
          if ((sub_1C4AE7668(v552, v168, &v579, &v587, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_584;
          llvm::APInt::zext((llvm::APInt *)a5, v17, (uint64_t)&v579);
          llvm::APInt::zext(v549, v17, (uint64_t)&__src);
          goto LABEL_588;
        case 0x77u:
          v100 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
          if ((v100 & 0x80000000) != 0
            && (v100 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v21 + 432))
          {
            v101 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v100 & 0x7FFFFFFF));
          }
          else
          {
            v101 = 0;
          }
          v579 = v101;
          v128 = sub_1C4825F50((unint64_t *)&v579);
          if ((_DWORD)v127 == 1)
          llvm::APInt::zext((llvm::APInt *)&v577, v128, (uint64_t)&v587);
          v129 = v550;
          if ((v100 & 0x80000000) != 0)
            v130 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
          else
            v130 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v100);
          v164 = *v130;
          if (v164)
          {
            if ((*(_BYTE *)(v164 + 3) & 1) != 0
              || (v164 = *(_QWORD *)(v164 + 24)) != 0 && (*(_BYTE *)(v164 + 3) & 1) != 0)
            {
              v165 = *(_QWORD *)(v164 + 8);
            }
            else
            {
              v165 = 0;
            }
            v129 = v550;
            v12 = v551;
            if ((v100 & 0x80000000) == 0)
              goto LABEL_577;
          }
          else
          {
            v165 = 0;
            if ((v100 & 0x80000000) == 0)
              goto LABEL_577;
          }
          if ((v100 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v129 + 432))
          {
            v166 = *(_QWORD *)(*(_QWORD *)(v129 + 424) + 8 * (v100 & 0x7FFFFFFF));
            goto LABEL_578;
          }
LABEL_577:
          v166 = 0;
LABEL_578:
          v579 = v166;
          if ((sub_1C4AE7668(v552, v165, &v579, &v587, a5, (a6 + 1), 0) & 1) != 0)
          {
LABEL_584:
            if (v588 >= 0x41)
            {
              v286 = v587;
              if (v587)
                goto LABEL_507;
            }
            goto LABEL_911;
          }
          llvm::APInt::trunc((llvm::APInt *)a5, v17, (llvm::APInt *)&v579);
          llvm::APInt::trunc(v549, v17, (llvm::APInt *)&__src);
LABEL_588:
          v304 = v580;
          v305 = v579;
          v306 = v570;
          v307 = __src;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v305;
          *((_DWORD *)a5 + 2) = v304;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
          a5[2] = v307;
          *((_DWORD *)a5 + 6) = v306;
          if (v588 < 0x41)
            goto LABEL_637;
          v287 = v587;
          if (!v587)
            goto LABEL_637;
          goto LABEL_592;
        case 0x78u:
          v107 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v12 + 32) + 4), v21);
          if (!v108)
            goto LABEL_637;
          v109 = *((unsigned int *)a5 + 6);
          if (v109 > 0x40)
          {
            *(_QWORD *)a5[2] = v107;
            bzero((void *)(a5[2] + 8), (((unint64_t)(v109 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v109 = *((unsigned int *)a5 + 6);
            v568 = v109;
            if (v109 > 0x40)
            {
              v567 = (void *)operator new[]();
              memcpy(v567, *(const void **)v549, ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v567);
              LODWORD(v109) = v568;
              v184 = (unint64_t)v567;
              goto LABEL_333;
            }
            v112 = *(_QWORD *)v549;
            v110 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
          }
          else
          {
            v110 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
            if ((_DWORD)v109)
              v111 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
            else
              v111 = 0;
            v112 = v111 & v107;
            *(_QWORD *)v549 = v112;
            v568 = v109;
          }
          v183 = ~v112;
          if (!(_DWORD)v109)
            v110 = 0;
          v184 = v110 & v183;
          v567 = (void *)(v110 & v183);
LABEL_333:
          v568 = 0;
          if (*((_DWORD *)a5 + 2) <= 0x40u || !*a5)
          {
            v29 = 0;
            *a5 = v184;
            *((_DWORD *)a5 + 2) = v109;
            goto LABEL_912;
          }
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          v234 = v568;
          *a5 = v184;
          *((_DWORD *)a5 + 2) = v109;
          if (v234 >= 0x41 && v567)
            MEMORY[0x1CAA32F9C](v567, 0x1000C8000313F17);
          goto LABEL_663;
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Du:
          goto LABEL_99;
        case 0x7Cu:
          v102 = v552;
          v103 = *v552;
          *(_QWORD *)(v103 + 40) = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v103 + 48) = v12;
          v104 = *(_QWORD *)(v12 + 32);
          v105 = *(unsigned int *)(v104 + 36);
          v547 = v105;
          if ((v105 & 0x80000000) != 0
            && (v105 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v21 + 432))
          {
            v106 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v105 & 0x7FFFFFFF));
          }
          else
          {
            v106 = 0;
          }
          v543 = *(_DWORD *)(v104 + 4);
          v579 = v106;
          v132 = sub_1C4825F50((unint64_t *)&v579);
          if ((_DWORD)v131 == 1)
          v588 = v17;
          if (v17 <= 0x40)
          {
            v587 = 0;
            sub_1C4912E54(&v587, 0, v132);
            v133 = 0;
            v586 = v17;
            v134 = 1 << (v132 - 1);
            v135 = v17;
LABEL_176:
            v136 = v133 | v134;
            v585 = v133 | v134;
            goto LABEL_177;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&v587, 0, 0);
          sub_1C4912E54(&v587, 0, v132);
          v586 = v17;
          llvm::APInt::initSlowCase((llvm::APInt *)&v585, 0, 0);
          v134 = 1 << (v132 - 1);
          v135 = v586;
          if (v586 <= 0x40)
          {
            v133 = v585;
            v12 = v551;
            v102 = v552;
            goto LABEL_176;
          }
          v136 = v585;
          *(_QWORD *)(v585 + 8 * ((v132 - 1) >> 6)) |= v134;
          v12 = v551;
          v102 = v552;
LABEL_177:
          v137 = v588;
          v556 = v588;
          if (v588 > 0x40)
          {
            v159 = (((unint64_t)v588 + 63) >> 3) & 0x3FFFFFF8;
            v555 = (void *)operator new[]();
            memcpy(v555, (const void *)v587, v159);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v555);
            v160 = v556;
            v140 = (unint64_t)v555;
            v556 = 0;
            if (v160 > 0x40)
            {
              v185 = 0;
              v186 = v577;
              v187 = (unint64_t)(v160 + 63) >> 6;
              do
              {
                *(_QWORD *)(v140 + v185) &= *(_QWORD *)(v186 + v185);
                v185 += 8;
              }
              while (8 * v187 != v185);
              v188 = 0;
              do
              {
                v46 = v187-- < 1;
                if (v46)
                  break;
                v189 = *(_QWORD *)(v140 + 8 * v187);
                v188 += __clz(v189);
              }
              while (!v189);
              v190 = v160 | 0xFFFFFFC0;
              if ((v160 & 0x3F) == 0)
                v190 = 0;
              if ((v160 - v188 - v190) <= 0x40 && !*(_QWORD *)v140)
                goto LABEL_209;
              goto LABEL_250;
            }
            v137 = v160;
          }
          else
          {
            v138 = ~v587;
            if (v588)
              v139 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v588;
            else
              v139 = 0;
            v140 = v139 & v138;
            v555 = (void *)(v139 & v138);
            v556 = 0;
          }
          v140 &= v577;
          LODWORD(v160) = v137;
          if (!v140)
          {
LABEL_209:
            v545 = v160;
            v161 = *v102;
            LODWORD(__src) = v543;
            v570 = 1;
            LODWORD(v579) = v547;
            LODWORD(v581) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 118, &__src, 1, &v579, 1, 0);
            v162 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v162 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v162 = v12;
                do
                  v162 = *(_QWORD *)(v162 + 8);
                while ((*(_WORD *)(v162 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v162 + 8));
            v163 = 1;
            goto LABEL_627;
          }
LABEL_250:
          v545 = v160;
          v191 = v588;
          if (v588 >= 0x41)
          {
            v192 = v588 + 63;
            v193 = (_QWORD *)operator new[]();
            memcpy(v193, (const void *)v587, (v192 >> 3) & 0x3FFFFFF8);
            v194 = (uint64_t *)v577;
            v195 = v192 >> 6;
            v196 = v193;
            v197 = v192 >> 6;
            do
            {
              v198 = *v194++;
              *v196++ &= v198;
              --v197;
            }
            while (v197);
            v554 = v191;
            v553 = (unint64_t)v193;
            v199 = (uint64_t *)v136;
            v12 = v551;
            do
            {
              v200 = *v199++;
              *v193++ |= v200;
              --v195;
            }
            while (v195);
          }
          else
          {
            v554 = v588;
            v553 = v136 | v577 & v587;
          }
          llvm::APInt::trunc((llvm::APInt *)&v553, v132, (llvm::APInt *)&v579);
          v201 = v552;
          if (v554 >= 0x41 && v553)
            MEMORY[0x1CAA32F9C](v553, 0x1000C8000313F17);
          v553 = v579;
          v554 = v580;
          v202 = v550;
          if ((v547 & 0x80000000) != 0)
            v203 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v547 & 0x7FFFFFFF) + 8);
          else
            v203 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v547);
          v204 = *v203;
          if (v204)
          {
            if ((*(_BYTE *)(v204 + 3) & 1) != 0
              || (v204 = *(_QWORD *)(v204 + 24)) != 0 && (*(_BYTE *)(v204 + 3) & 1) != 0)
            {
              v205 = *(_QWORD *)(v204 + 8);
            }
            else
            {
              v205 = 0;
            }
            v12 = v551;
            v201 = v552;
            v202 = v550;
            if ((v547 & 0x80000000) == 0)
              goto LABEL_614;
          }
          else
          {
            v205 = 0;
            if ((v547 & 0x80000000) == 0)
              goto LABEL_614;
          }
          if ((v547 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v202 + 432))
          {
            v206 = *(_QWORD *)(*(_QWORD *)(v202 + 424) + 8 * (v547 & 0x7FFFFFFF));
            goto LABEL_615;
          }
LABEL_614:
          v206 = 0;
LABEL_615:
          v579 = v206;
          if ((sub_1C4AE7668(v201, v205, &v579, &v553, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_623;
          llvm::APInt::sext((llvm::APInt *)a5, v17, (llvm::APInt *)&v579);
          llvm::APInt::sext(v549, v17, (llvm::APInt *)&__src);
          v314 = v580;
          v315 = v579;
          v316 = v570;
          v317 = (unint64_t)__src;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v315;
          *((_DWORD *)a5 + 2) = v314;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
            v314 = *((_DWORD *)a5 + 2);
          }
          a5[2] = v317;
          *((_DWORD *)a5 + 6) = v316;
          if (v314 > 0x40)
          {
            v349 = ((unint64_t)v314 + 63) >> 6;
            v350 = (uint64_t *)*a5;
            v351 = (uint64_t *)v136;
            while (1)
            {
              v353 = *v350++;
              v352 = v353;
              v354 = *v351++;
              if ((v354 & v352) != 0)
                break;
              if (!--v349)
                goto LABEL_684;
            }
          }
          else if ((v136 & *a5) == 0)
          {
LABEL_684:
            if (v316 > 0x40)
            {
              v367 = (unint64_t)(v316 + 63) >> 6;
              v368 = (uint64_t *)v317;
              v369 = (uint64_t *)v136;
              v370 = v367;
              while (1)
              {
                v372 = *v368++;
                v371 = v372;
                v373 = *v369++;
                if ((v373 & v371) != 0)
                  break;
                if (!--v370)
                  goto LABEL_710;
              }
              v374 = (uint64_t *)v140;
              v163 = 2;
              do
              {
                v375 = *v374++;
                *(_QWORD *)v317 |= v375;
                v317 += 8;
                --v367;
              }
              while (v367);
            }
            else
            {
              if ((v136 & v317) != 0)
                *(_QWORD *)v549 = v317 | v140;
LABEL_710:
              v163 = 2;
            }
            goto LABEL_624;
          }
          v318 = *v552;
          *(_QWORD *)(v318 + 40) = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v318 + 48) = v12;
          v319 = *v552;
          LODWORD(__src) = v543;
          v570 = 1;
          LODWORD(v579) = v547;
          LODWORD(v581) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v319 + 32))(v319, 126, &__src, 1, &v579, 1, 0);
          v320 = v12;
          if ((*(_BYTE *)v12 & 4) == 0)
          {
            v320 = v12;
            if ((*(_WORD *)(v12 + 44) & 8) != 0)
            {
              v320 = v12;
              do
                v320 = *(_QWORD *)(v320 + 8);
              while ((*(_WORD *)(v320 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v320 + 8));
LABEL_623:
          v163 = 1;
LABEL_624:
          if (v554 >= 0x41 && v553)
            MEMORY[0x1CAA32F9C](v553, 0x1000C8000313F17);
LABEL_627:
          if (v545 >= 0x41 && v140)
            MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
          if (v135 >= 0x41 && v136)
            MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
          if (v588 >= 0x41 && v587)
            MEMORY[0x1CAA32F9C](v587, 0x1000C8000313F17);
          if (v163 == 2)
            goto LABEL_637;
          goto LABEL_911;
        case 0x7Eu:
          v91 = *(_QWORD *)(v12 + 32);
          v92 = *(_DWORD *)(v91 + 36);
          if (v92 < 0 && (v92 & 0x7FFFFFFFu) < *(_DWORD *)(v21 + 432))
            v93 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v92 & 0x7FFFFFFF));
          else
            v93 = 0;
          v121 = *(_DWORD *)(v91 + 4);
          v579 = v93;
          v123 = sub_1C4825F50((unint64_t *)&v579);
          if ((_DWORD)v122 == 1)
          llvm::APInt::trunc((llvm::APInt *)&v577, v123, (llvm::APInt *)&__src);
          v124 = v123 - v17;
          v558 = v17;
          if (v17 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v557, 0, 0);
            v17 = v558;
          }
          else
          {
            v557 = 0;
          }
          sub_1C4912E54(&v557, v124 + v17, v17);
          v125 = v558;
          if (v558 < 0x41)
          {
            v558 = 0;
            v557 &= v577;
            if (v557)
              goto LABEL_511;
            v126 = 0;
LABEL_201:
            v156 = *v552;
            *(_QWORD *)(v156 + 40) = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v156 + 48) = v12;
            v157 = *v552;
            LODWORD(v587) = v121;
            v588 = 1;
            LODWORD(v579) = v92;
            LODWORD(v581) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v157 + 32))(v157, 118, &v587, 1, &v579, 1, 0);
            v158 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v158 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v158 = v12;
                do
                  v158 = *(_QWORD *)(v158 + 8);
                while ((*(_WORD *)(v158 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v158 + 8));
            if (v126 && v125 >= 0x41)
              MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
            goto LABEL_505;
          }
          v151 = (_QWORD *)v557;
          v152 = (uint64_t *)v577;
          v153 = ((unint64_t)v558 + 63) >> 6;
          do
          {
            v154 = *v152++;
            *v151++ &= v154;
            --v153;
          }
          while (v153);
          v155 = 0;
          v126 = v557;
          v558 = 0;
          while ((*(_QWORD *)(v577 + v155) & *(_QWORD *)(v557 + v155)) == 0)
          {
            v155 += 8;
            if (8 * ((unint64_t)(v125 + 63) >> 6) == v155)
              goto LABEL_201;
          }
          if (!v557)
            goto LABEL_511;
          goto LABEL_240;
        case 0x7Fu:
          v113 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v12 + 32) + 68), v21);
          if (!v114)
            goto LABEL_637;
          v115 = v113;
          if (v113 >= v17)
            goto LABEL_637;
          v116 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
          if ((v116 & 0x80000000) != 0)
            v117 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
          else
            v117 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v116);
          v226 = *v117;
          if (v226)
          {
            if ((*(_BYTE *)(v226 + 3) & 1) != 0
              || (v226 = *(_QWORD *)(v226 + 24)) != 0 && (*(_BYTE *)(v226 + 3) & 1) != 0)
            {
              v227 = *(_QWORD *)(v226 + 8);
            }
            else
            {
              v227 = 0;
            }
            v12 = v551;
          }
          else
          {
            v227 = 0;
          }
          LODWORD(v580) = v18;
          if (v18 > 0x40)
          {
            v262 = v18 + 63;
            v263 = (void *)operator new[]();
            v579 = (uint64_t)v263;
            memcpy(v263, (const void *)v20, (v262 >> 3) & 0x3FFFFFF8);
            llvm::APInt::tcShiftRight((llvm::APInt *)v263, (unint64_t *)(v262 >> 6), v115);
            v264 = sub_1C4AE7668(v552, v227, a3, &v579, a5, (a6 + 1), 0);
            MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
            if ((v264 & 1) == 0)
            {
LABEL_316:
              sub_1C4888094((uint64_t)a5, v115);
              sub_1C4888094((uint64_t)v549, v115);
              sub_1C4912E54(a5, 0, v115);
              goto LABEL_637;
            }
          }
          else
          {
            v228 = v20 >> v113;
            if ((_DWORD)v18 == v113)
              v228 = 0;
            v579 = v228;
            if ((sub_1C4AE7668(v552, v227, a3, &v579, a5, (a6 + 1), 0) & 1) == 0)
              goto LABEL_316;
          }
          goto LABEL_911;
        case 0x80u:
          v94 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v12 + 32) + 68), v21);
          if (v95)
          {
            v96 = v94;
            if (v94 < v17)
            {
              LODWORD(v580) = v18;
              if (v18 > 0x40)
              {
                v97 = (void *)operator new[]();
                memcpy(v97, (const void *)v20, (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8);
                v20 = (unint64_t)v97;
              }
              v579 = v20;
              sub_1C4888094((uint64_t)&v579, v96);
              if ((*(_WORD *)(v12 + 44) & 0x2000) != 0)
                sub_1C4912E54(&v579, 0, v96);
              v98 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
              if ((v98 & 0x80000000) != 0)
                v99 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
              else
                v99 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v98);
              v223 = *v99;
              if ((*(_BYTE *)(v223 + 3) & 1) == 0)
                v223 = *(_QWORD *)(v223 + 24);
              v224 = sub_1C4AE7668(v552, *(_QWORD *)(v223 + 8), a3, &v579, a5, (a6 + 1), 0);
              if ((v224 & 1) == 0)
              {
                v225 = *((unsigned int *)a5 + 2);
                if (v225 > 0x40)
                {
                  llvm::APInt::tcShiftRight((llvm::APInt *)*a5, (unint64_t *)((unint64_t)(v225 + 63) >> 6), v96);
                }
                else if ((_DWORD)v225 == v96)
                {
                  *a5 = 0;
                }
                else
                {
                  *a5 >>= v96;
                }
                v252 = *((unsigned int *)a5 + 6);
                if (v252 > 0x40)
                {
                  llvm::APInt::tcShiftRight(*(llvm::APInt **)v549, (unint64_t *)((unint64_t)(v252 + 63) >> 6), v96);
                }
                else if ((_DWORD)v252 == v96)
                {
                  *(_QWORD *)v549 = 0;
                }
                else
                {
                  *(_QWORD *)v549 >>= v96;
                }
                sub_1C4912E54(a5, *((_DWORD *)a5 + 2) - v96, *((_DWORD *)a5 + 2));
              }
              if (v580 >= 0x41 && v579)
                MEMORY[0x1CAA32F9C](v579, 0x1000C8000313F17);
              if ((v224 & 1) != 0)
                goto LABEL_911;
            }
          }
          goto LABEL_637;
        case 0x81u:
          v81 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 68);
          v82 = sub_1C554C050(v81, v21);
          v83 = v82;
          if (v84)
            v85 = v82 >= v17;
          else
            v85 = 1;
          if (v85)
            goto LABEL_637;
          v570 = v18;
          if (v18 > 0x40)
          {
            v86 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
            v87 = v81;
            v88 = (void *)operator new[]();
            memcpy(v88, (const void *)v20, v86);
            v20 = (unint64_t)v88;
            v81 = v87;
          }
          __src = (void *)v20;
          sub_1C4888094((uint64_t)&__src, v83);
          if ((*(_WORD *)(v12 + 44) & 0x2000) != 0)
            sub_1C4912E54(&__src, 0, v83);
          if (v578 > 0x40)
          {
            v218 = 0;
            v219 = ((unint64_t)v578 + 63) >> 6;
            v90 = v550;
            do
            {
              v46 = v219-- < 1;
              if (v46)
                break;
              v220 = *(_QWORD *)(v577 + 8 * v219);
              v218 += __clz(v220);
            }
            while (!v220);
            if ((v578 & 0x3F) != 0)
              v221 = v578 | 0xFFFFFFC0;
            else
              v221 = 0;
            v89 = v218 + v221;
          }
          else
          {
            v89 = v578 + __clz(v577) - 64;
            v90 = v550;
          }
          if (v89 < v83)
          {
            v222 = 1 << (v570 - 1);
            if (v570 > 0x40)
              *((_QWORD *)__src + ((v570 - 1) >> 6)) |= v222;
            else
              __src = (void *)((unint64_t)__src | v222);
          }
          v235 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
          if ((v235 & 0x80000000) != 0)
            v236 = (uint64_t *)(*(_QWORD *)(v90 + 24) + 16 * (v235 & 0x7FFFFFFF) + 8);
          else
            v236 = (uint64_t *)(*(_QWORD *)(v90 + 272) + 8 * v235);
          v237 = *v236;
          if ((*(_BYTE *)(v237 + 3) & 1) == 0)
            v237 = *(_QWORD *)(v237 + 24);
          v238 = 0;
          if ((sub_1C4AE7668(v552, *(_QWORD *)(v237 + 8), a3, &__src, a5, (a6 + 1), 0) & 1) != 0)
            goto LABEL_402;
          v239 = *((unsigned int *)a5 + 2);
          if (v239 > 0x40)
          {
            llvm::APInt::tcShiftRight((llvm::APInt *)*a5, (unint64_t *)((unint64_t)(v239 + 63) >> 6), v83);
          }
          else if ((_DWORD)v239 == v83)
          {
            *a5 = 0;
          }
          else
          {
            *a5 >>= v83;
          }
          v246 = *((unsigned int *)a5 + 6);
          if (v246 > 0x40)
          {
            llvm::APInt::tcShiftRight(*(llvm::APInt **)v549, (unint64_t *)((unint64_t)(v246 + 63) >> 6), v83);
          }
          else if ((_DWORD)v246 == v83)
          {
            *(_QWORD *)v549 = 0;
          }
          else
          {
            *(_QWORD *)v549 >>= v83;
          }
          v247 = ~v83 + v17;
          v248 = v247 >> 6;
          v249 = (_QWORD *)(*a5 + 8 * v248);
          if (*((_DWORD *)a5 + 2) < 0x41u)
            v249 = a5;
          v250 = 1 << v247;
          if ((*v249 & (1 << v247)) != 0)
            goto LABEL_398;
          if (v578 > 0x40)
          {
            v253 = 0;
            v254 = ((unint64_t)v578 + 63) >> 6;
            do
            {
              v46 = v254-- < 1;
              if (v46)
                break;
              v255 = *(_QWORD *)(v577 + 8 * v254);
              v253 += __clz(v255);
            }
            while (!v255);
            v256 = (v578 & 0x3F) != 0 ? v578 | 0xFFFFFFC0 : 0;
            v251 = v253 + v256;
          }
          else
          {
            v251 = v578 + __clz(v577) - 64;
          }
          if (v251 >= v83)
          {
LABEL_398:
            v257 = *v552;
            *(_QWORD *)(v257 + 40) = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v257 + 48) = v12;
            v258 = *v552;
            LODWORD(v587) = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
            v588 = 1;
            LODWORD(v579) = v235;
            LODWORD(v581) = 0;
            LODWORD(v582) = v81;
            v584 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v258 + 32))(v258, 128, &v587, 1, &v579, 2, 0x100002000);
            v259 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v259 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v259 = v12;
                do
                  v259 = *(_QWORD *)(v259 + 8);
                while ((*(_WORD *)(v259 + 44) & 8) != 0);
              }
            }
            v260 = *(_QWORD *)(v259 + 8);
            v261 = *(_QWORD *)(v12 + 24) + 40;
LABEL_401:
            sub_1C487FE80(v261, v12, v260);
            v238 = 0;
            goto LABEL_402;
          }
          v265 = sub_1C614D48C((unsigned int *)&v577);
          if ((v265 & 0x80000000) == 0)
          {
            if (v578 > 0x40)
            {
              v267 = 0;
              v268 = ((unint64_t)v578 + 63) >> 6;
              do
              {
                v46 = v268-- < 1;
                if (v46)
                  break;
                v269 = *(_QWORD *)(v577 + 8 * v268);
                v267 += __clz(v269);
              }
              while (!v269);
              v270 = (v578 & 0x3F) != 0 ? v578 | 0xFFFFFFC0 : 0;
              v266 = v267 + v270;
            }
            else
            {
              v266 = v578 + __clz(v577) - 64;
            }
            if (v266 < v83)
            {
              v271 = *v552;
              *(_QWORD *)(v271 + 40) = *(_QWORD *)(v551 + 24);
              *(_QWORD *)(v271 + 48) = v551;
              v272 = *v552;
              if (v81 < 0 && (v81 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v550 + 432))
                v273 = *(_QWORD *)(*(_QWORD *)(v550 + 424) + 8 * (v81 & 0x7FFFFFFF));
              else
                v273 = 0;
              v579 = v273;
              LODWORD(v580) = 0;
              v275 = sub_1C5544694(v272, (unint64_t *)&v579, ~v265 + v17);
              v276 = *v552;
              LODWORD(v587) = *(_DWORD *)(*(_QWORD *)(v551 + 32) + 4);
              v588 = 1;
              LODWORD(v579) = v235;
              LODWORD(v581) = 0;
              v582 = v275;
              v583 = v277;
              v584 = 1;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v276 + 32))(v276, 128, &v587, 1, &v579, 2, 0);
              v278 = v551;
              if ((*(_BYTE *)v551 & 4) == 0)
              {
                v278 = v551;
                if ((*(_WORD *)(v551 + 44) & 8) != 0)
                {
                  v278 = v551;
                  do
                    v278 = *(_QWORD *)(v278 + 8);
                  while ((*(_WORD *)(v278 + 44) & 8) != 0);
                }
              }
              v260 = *(_QWORD *)(v278 + 8);
              v261 = *(_QWORD *)(v551 + 24) + 40;
              v12 = v551;
              goto LABEL_401;
            }
          }
          v16 = (const llvm::APInt *)*((unsigned int *)a5 + 6);
          v274 = (_QWORD *)(a5[2] + 8 * v248);
          if (v16 < 0x41)
            v274 = a5 + 2;
          if ((*v274 & v250) != 0)
            sub_1C4912E54(v549, (_DWORD)v16 - v83, v16);
          v238 = 1;
          v12 = v551;
LABEL_402:
          if (v570 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if ((v238 & 1) == 0)
            goto LABEL_911;
          goto LABEL_637;
        default:
          if (v35 != 80)
          {
            if (v35 == 193)
              goto LABEL_55;
            goto LABEL_99;
          }
          v118 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 36);
          if ((v118 & 0x80000000) != 0)
          {
            v181 = v118 & 0x7FFFFFFF;
            if (v181 >= *(unsigned int *)(v21 + 432))
              v182 = 0;
            else
              v182 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * v181);
            v217 = 0x7FFFFF800000000;
            if ((v182 & 4) == 0)
              v217 = 0x7FFFFF80000;
            if ((v217 & v182) != 0)
              goto LABEL_637;
            v119 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * v181 + 8);
          }
          else
          {
            v119 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v118);
          }
          v120 = *v119;
          if ((*(_BYTE *)(v120 + 3) & 1) == 0)
            v120 = *(_QWORD *)(v120 + 24);
          if ((sub_1C4AE7668(v552, *(_QWORD *)(v120 + 8), a3, &v577, a5, (a6 + 1), 0) & 1) == 0)
            goto LABEL_637;
          goto LABEL_911;
      }
    }
    if (*v34 <= 0x40u)
    {
      if (v35 - 45 < 3)
      {
LABEL_55:
        v38 = *(_QWORD *)(v12 + 32);
        v39 = *(unsigned int *)(v38 + 36);
        if (v18 > 0x40)
        {
          v44 = 0;
          v45 = ((unint64_t)v18 + 63) >> 6;
          do
          {
            v46 = v45-- < 1;
            if (v46)
              break;
            v47 = *(_QWORD *)(v20 + 8 * v45);
            v44 += __clz(v47);
          }
          while (!v47);
          v48 = v18 | 0xFFFFFFC0;
          if ((v18 & 0x3F) == 0)
            v48 = 0;
          v40 = v44 + v48;
        }
        else
        {
          v40 = v18 + __clz(v20) - 64;
        }
        v49 = *(unsigned int *)(v38 + 68);
        v50 = v17 - v40;
        v570 = v17;
        if (v17 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        else
          __src = 0;
        sub_1C4912E54(&__src, 0, v50);
        v51 = v550;
        if ((v39 & 0x80000000) != 0)
          v52 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        else
          v52 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v39);
        v53 = *v52;
        if (v53)
        {
          if ((*(_BYTE *)(v53 + 3) & 1) != 0 || (v53 = *(_QWORD *)(v53 + 24)) != 0 && (*(_BYTE *)(v53 + 3) & 1) != 0)
            v54 = *(_QWORD *)(v53 + 8);
          else
            v54 = 0;
          v51 = v550;
          v12 = v551;
          if ((v49 & 0x80000000) == 0)
            goto LABEL_75;
        }
        else
        {
          v54 = 0;
          if ((v49 & 0x80000000) == 0)
          {
LABEL_75:
            v55 = (uint64_t *)(*(_QWORD *)(v51 + 272) + 8 * v49);
            goto LABEL_491;
          }
        }
        v55 = (uint64_t *)(*(_QWORD *)(v51 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
LABEL_491:
        v281 = *v55;
        v282 = v552;
        if (v281)
        {
          if ((*(_BYTE *)(v281 + 3) & 1) != 0
            || (v281 = *(_QWORD *)(v281 + 24)) != 0 && (*(_BYTE *)(v281 + 3) & 1) != 0)
          {
            v283 = *(_QWORD *)(v281 + 8);
          }
          else
          {
            v283 = 0;
          }
          v12 = v551;
          v282 = v552;
          v51 = v550;
          if ((v39 & 0x80000000) == 0)
            goto LABEL_501;
        }
        else
        {
          v283 = 0;
          if ((v39 & 0x80000000) == 0)
            goto LABEL_501;
        }
        if ((v39 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v51 + 432))
        {
          v284 = *(_QWORD *)(*(_QWORD *)(v51 + 424) + 8 * (v39 & 0x7FFFFFFF));
LABEL_502:
          v587 = v284;
          if ((sub_1C4AE7668(v282, v54, &v587, &__src, a5, (a6 + 1), 0) & 1) != 0
            || (sub_1C4AE7668(v282, v283, &v587, &__src, a5, (a6 + 1), 0) & 1) != 0
            || (sub_1C49A5D68(v282, v12, (llvm::APInt *)&v577, v285) & 1) != 0)
          {
LABEL_505:
            if (v570 >= 0x41)
            {
              v286 = (unint64_t)__src;
              if (__src)
LABEL_507:
                MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
            }
            goto LABEL_911;
          }
          sub_1C54EB4A0(v282[3], (const char *)*(unsigned int *)(*(_QWORD *)(v12 + 32) + 4), (uint64_t)&v579);
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = v579;
          *((_DWORD *)a5 + 2) = v580;
          LODWORD(v580) = 0;
          if (*((_DWORD *)a5 + 6) < 0x41u || !*(_QWORD *)v549)
          {
            a5[2] = v581;
            *((_DWORD *)a5 + 6) = v582;
            goto LABEL_511;
          }
          MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
          v288 = v580;
          a5[2] = v581;
          *((_DWORD *)a5 + 6) = v582;
          LODWORD(v582) = 0;
          if (v288 < 0x41 || !v579)
          {
LABEL_511:
            if (v570 >= 0x41)
            {
              v287 = (unint64_t)__src;
              if (__src)
LABEL_592:
                MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
            }
            goto LABEL_637;
          }
LABEL_240:
          MEMORY[0x1CAA32F9C]();
          goto LABEL_511;
        }
LABEL_501:
        v284 = 0;
        goto LABEL_502;
      }
      if (v35 == 19)
      {
        v56 = *(_DWORD **)(v12 + 32);
        if ((*v56 & 0xFFF00) == 0 && (v56[8] & 0xFFF00) == 0)
        {
          v57 = v56[9];
          if (v57 < 0)
          {
            v58 = v57 & 0x7FFFFFFF;
            if (v58 < *(_DWORD *)(v550 + 432)
              && (*(_QWORD *)(*(_QWORD *)(v550 + 424) + 8 * v58) & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v59 = *(_QWORD *)(*(_QWORD *)(v550 + 24) + 16 * v58 + 8);
              if ((*(_BYTE *)(v59 + 3) & 1) == 0)
                v59 = *(_QWORD *)(v59 + 24);
              v29 = sub_1C4AE7668(v552, *(_QWORD *)(v59 + 8), a3, &v577, a5, (a6 + 1), a7);
              goto LABEL_912;
            }
          }
        }
        goto LABEL_637;
      }
LABEL_99:
      v76 = *((unsigned __int8 *)v34 + 4);
      if ((v34[4] & 2) == 0 || (v229 = *(_DWORD *)(v12 + 40), v229 == v76))
      {
        v77 = v76;
      }
      else
      {
        v230 = v229 - 1;
        v77 = v76;
        do
        {
          v231 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v76);
          if ((v231 & 0x10000FF) != 0x1000000)
            break;
          v77 += (v231 & 0x2000000) == 0;
          if (v230 == v76)
            break;
          ++v76;
        }
        while ((v231 & 0x2000000) == 0);
      }
      if (v77 != 1)
        goto LABEL_637;
      sub_1C54EB4A0(v552[3], (const char *)*(unsigned int *)(*(_QWORD *)(v12 + 32) + 4), (uint64_t)&__src);
      sub_1C49A9BF8((llvm::APInt *)&__src, v17, (uint64_t)&v579);
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
      *a5 = v579;
      *((_DWORD *)a5 + 2) = v580;
      LODWORD(v580) = 0;
      if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
        v280 = v580;
        a5[2] = v581;
        *((_DWORD *)a5 + 6) = v582;
        LODWORD(v582) = 0;
        if (v280 >= 0x41 && v579)
          MEMORY[0x1CAA32F9C](v579, 0x1000C8000313F17);
      }
      else
      {
        a5[2] = v581;
        *((_DWORD *)a5 + 6) = v582;
        LODWORD(v582) = 0;
      }
      if (v572 < 0x41 || !__s1)
        goto LABEL_511;
      goto LABEL_240;
    }
    if (v35 != 65)
    {
      if (v35 != 66)
      {
        if (v35 != 67)
          goto LABEL_99;
        v41 = *(_DWORD **)(v12 + 32);
        v42 = v41[17];
        if ((v42 & 0x80000000) != 0)
          v43 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
        else
          v43 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v42);
        v148 = *v43;
        if (v148)
        {
          if ((*(_BYTE *)(v148 + 3) & 1) != 0
            || (v148 = *(_QWORD *)(v148 + 24)) != 0 && (*(_BYTE *)(v148 + 3) & 1) != 0)
          {
            v149 = *(_QWORD *)(v148 + 8);
          }
          else
          {
            v149 = 0;
          }
          v21 = v550;
          v12 = v551;
          if ((v42 & 0x80000000) == 0)
            goto LABEL_557;
        }
        else
        {
          v149 = 0;
          if ((v42 & 0x80000000) == 0)
            goto LABEL_557;
        }
        if ((v42 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v21 + 432))
        {
          v150 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v42 & 0x7FFFFFFF));
          goto LABEL_558;
        }
LABEL_557:
        v150 = 0;
LABEL_558:
        v297 = v41[9];
        v298 = v41[1];
        v579 = v150;
        if ((sub_1C4AE7668(v552, v149, &v579, &v577, a5, (a6 + 1), 0) & 1) != 0)
          goto LABEL_911;
        v299 = v550;
        if ((v297 & 0x80000000) != 0)
          v300 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v297 & 0x7FFFFFFF) + 8);
        else
          v300 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v297);
        v301 = *v300;
        if (v301)
        {
          if ((*(_BYTE *)(v301 + 3) & 1) != 0
            || (v301 = *(_QWORD *)(v301 + 24)) != 0 && (*(_BYTE *)(v301 + 3) & 1) != 0)
          {
            v302 = *(_QWORD *)(v301 + 8);
          }
          else
          {
            v302 = 0;
          }
          v299 = v550;
          v12 = v551;
          if ((v297 & 0x80000000) == 0)
            goto LABEL_796;
        }
        else
        {
          v302 = 0;
          if ((v297 & 0x80000000) == 0)
            goto LABEL_796;
        }
        if ((v297 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v299 + 432))
        {
          v303 = *(_QWORD *)(*(_QWORD *)(v299 + 424) + 8 * (v297 & 0x7FFFFFFF));
LABEL_797:
          v579 = v303;
          if ((sub_1C4AE7668(v552, v302, &v579, &v577, &v573, (a6 + 1), 0) & 1) == 0)
          {
            v429 = *v552;
            *(_QWORD *)(v429 + 40) = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v429 + 48) = v12;
            if (v578 > 0x40)
            {
              v432 = ((unint64_t)v578 + 63) >> 6;
              v433 = (uint64_t *)v577;
              v434 = (uint64_t *)*a5;
              v435 = (uint64_t *)v577;
              v436 = v432;
              while (1)
              {
                v438 = *v435++;
                v437 = v438;
                v439 = *v434++;
                if ((v437 & ~v439) != 0)
                  break;
                if (!--v436)
                  goto LABEL_807;
              }
              v441 = (uint64_t *)v573;
              while (1)
              {
                v443 = *v433++;
                v442 = v443;
                v444 = *v441++;
                if ((v442 & ~v444) != 0)
                  break;
                if (!--v432)
                  goto LABEL_815;
              }
            }
            else
            {
              if ((v577 & ~*a5) == 0)
              {
LABEL_807:
                v440 = *v552;
                LODWORD(__src) = v298;
                v570 = 1;
                LODWORD(v579) = v297;
                LODWORD(v581) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v440 + 32))(v440, 19, &__src, 1, &v579, 1, 0);
                v365 = *(_QWORD *)(v12 + 24);
                v366 = v12;
                if ((*(_BYTE *)v12 & 4) == 0)
                {
                  v366 = v12;
                  if ((*(_WORD *)(v12 + 44) & 8) != 0)
                  {
                    v366 = v12;
                    do
                      v366 = *(_QWORD *)(v366 + 8);
                    while ((*(_WORD *)(v366 + 44) & 8) != 0);
                  }
                }
                goto LABEL_910;
              }
              if ((v577 & ~(unint64_t)v573) == 0)
              {
LABEL_815:
                v445 = *v552;
                LODWORD(__src) = v298;
                v570 = 1;
                LODWORD(v579) = v42;
                LODWORD(v581) = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v445 + 32))(v445, 19, &__src, 1, &v579, 1, 0);
                v365 = *(_QWORD *)(v12 + 24);
                v366 = v12;
                if ((*(_BYTE *)v12 & 4) == 0)
                {
                  v366 = v12;
                  if ((*(_WORD *)(v12 + 44) & 8) != 0)
                  {
                    v366 = v12;
                    do
                      v366 = *(_QWORD *)(v366 + 8);
                    while ((*(_WORD *)(v366 + 44) & 8) != 0);
                  }
                }
                goto LABEL_910;
              }
            }
            if ((sub_1C49A5D68(v552, v12, (llvm::APInt *)&v577, v428) & 1) == 0)
            {
              v430 = *((unsigned int *)a5 + 2);
              if (v430 > 0x40)
              {
                v431 = operator new[]();
                memcpy((void *)v431, (const void *)*a5, ((unint64_t)(v430 + 63) >> 3) & 0x3FFFFFF8);
                v446 = (uint64_t *)v573;
                v447 = (unint64_t)(v430 + 63) >> 6;
                v448 = (_QWORD *)v431;
                do
                {
                  v449 = *v446++;
                  *v448++ &= v449;
                  --v447;
                }
                while (v447);
              }
              else
              {
                v431 = (unint64_t)v573 & *a5;
              }
              v450 = *((unsigned int *)a5 + 6);
              if (v450 >= 0x41)
              {
                v451 = (void *)operator new[]();
                memcpy(v451, *(const void **)v549, ((unint64_t)(v450 + 63) >> 3) & 0x3FFFFFF8);
                v452 = (uint64_t *)v575;
                v453 = (unint64_t)(v450 + 63) >> 6;
                v454 = v451;
                v455 = v453;
                do
                {
                  v456 = *v452++;
                  *v454++ &= v456;
                  --v455;
                }
                while (v455);
                v457 = (uint64_t *)v431;
                v458 = v451;
                do
                {
                  v459 = *v457++;
                  *v458++ |= v459;
                  --v453;
                }
                while (v453);
                v12 = v551;
              }
              else
              {
                v451 = (void *)((unint64_t)v575 & *(_QWORD *)v549 | v431);
              }
              if (v430 >= 0x41 && v431)
                MEMORY[0x1CAA32F9C](v431, 0x1000C8000313F17);
              v460 = *((unsigned int *)a5 + 2);
              if (v460 > 0x40)
              {
                v461 = operator new[]();
                memcpy((void *)v461, (const void *)*a5, ((unint64_t)(v460 + 63) >> 3) & 0x3FFFFFF8);
                v462 = (uint64_t *)v575;
                v463 = (unint64_t)(v460 + 63) >> 6;
                v464 = (_QWORD *)v461;
                do
                {
                  v465 = *v462++;
                  *v464++ &= v465;
                  --v463;
                }
                while (v463);
                v12 = v551;
              }
              else
              {
                v461 = (unint64_t)v575 & *a5;
              }
              v466 = *((unsigned int *)a5 + 6);
              if (v466 >= 0x41)
              {
                v467 = (void *)operator new[]();
                memcpy(v467, *(const void **)v549, ((unint64_t)(v466 + 63) >> 3) & 0x3FFFFFF8);
                v468 = (uint64_t *)v573;
                v469 = (unint64_t)(v466 + 63) >> 6;
                v470 = v467;
                v471 = v469;
                do
                {
                  v472 = *v468++;
                  *v470++ &= v472;
                  --v471;
                }
                while (v471);
                v473 = (uint64_t *)v461;
                v474 = v467;
                v12 = v551;
                do
                {
                  v475 = *v473++;
                  *v474++ |= v475;
                  --v469;
                }
                while (v469);
              }
              else
              {
                v467 = (void *)((unint64_t)v573 & *(_QWORD *)v549 | v461);
              }
              if (v460 >= 0x41 && v461)
                MEMORY[0x1CAA32F9C](v461, 0x1000C8000313F17);
              if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
                MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
              *a5 = v451;
              *((_DWORD *)a5 + 2) = v450;
              if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
              a5[2] = v467;
              *((_DWORD *)a5 + 6) = v466;
              goto LABEL_637;
            }
          }
LABEL_911:
          v29 = 1;
LABEL_912:
          if (v576 >= 0x41 && v575)
            MEMORY[0x1CAA32F9C](v575, 0x1000C8000313F17);
          if (v574 >= 0x41 && v573)
            MEMORY[0x1CAA32F9C](v573, 0x1000C8000313F17);
          goto LABEL_914;
        }
LABEL_796:
        v303 = 0;
        goto LABEL_797;
      }
      v73 = *(_DWORD **)(v12 + 32);
      v74 = v73[17];
      if ((v74 & 0x80000000) != 0)
        v75 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
      else
        v75 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v74);
      v145 = *v75;
      if (v145)
      {
        if ((*(_BYTE *)(v145 + 3) & 1) != 0 || (v145 = *(_QWORD *)(v145 + 24)) != 0 && (*(_BYTE *)(v145 + 3) & 1) != 0)
          v146 = *(_QWORD *)(v145 + 8);
        else
          v146 = 0;
        v21 = v550;
        v12 = v551;
        if ((v74 & 0x80000000) == 0)
          goto LABEL_546;
      }
      else
      {
        v146 = 0;
        if ((v74 & 0x80000000) == 0)
          goto LABEL_546;
      }
      if ((v74 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v21 + 432))
      {
        v147 = *(_QWORD *)(*(_QWORD *)(v21 + 424) + 8 * (v74 & 0x7FFFFFFF));
        goto LABEL_547;
      }
LABEL_546:
      v147 = 0;
LABEL_547:
      v289 = v73[9];
      v290 = v73[1];
      v291 = (a6 + 1);
      v579 = v147;
      if ((sub_1C4AE7668(v552, v146, &v579, &v577, a5, v291, 0) & 1) != 0)
        goto LABEL_911;
      v292 = v550;
      if ((v289 & 0x80000000) != 0)
        v293 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
      else
        v293 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v289);
      v294 = *v293;
      if (v294)
      {
        if ((*(_BYTE *)(v294 + 3) & 1) != 0 || (v294 = *(_QWORD *)(v294 + 24)) != 0 && (*(_BYTE *)(v294 + 3) & 1) != 0)
          v295 = *(_QWORD *)(v294 + 8);
        else
          v295 = 0;
        v292 = v550;
        v12 = v551;
        if ((v289 & 0x80000000) == 0)
          goto LABEL_727;
      }
      else
      {
        v295 = 0;
        if ((v289 & 0x80000000) == 0)
          goto LABEL_727;
      }
      if ((v289 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v292 + 432))
      {
        v296 = *(void **)(*(_QWORD *)(v292 + 424) + 8 * (v289 & 0x7FFFFFFF));
        goto LABEL_728;
      }
LABEL_727:
      v296 = 0;
LABEL_728:
      __src = v296;
      v376 = *((unsigned int *)a5 + 6);
      v560 = v376;
      if (v376 > 0x40)
      {
        v559 = (void *)operator new[]();
        memcpy(v559, *(const void **)v549, ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v559);
        v376 = v560;
        v379 = (unint64_t)v559;
        v560 = 0;
        if (v376 > 0x40)
        {
          v380 = 0;
          v381 = v577;
          do
          {
            *(_QWORD *)(v379 + v380) &= *(_QWORD *)(v381 + v380);
            v380 += 8;
          }
          while ((((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8) != v380);
LABEL_736:
          LODWORD(v580) = v376;
          v579 = v379;
          v382 = sub_1C4AE7668(v552, v295, &__src, &v579, &v573, v291, 0);
          if (v376 >= 0x41 && v379)
            MEMORY[0x1CAA32F9C](v379, 0x1000C8000313F17);
          if ((v382 & 1) != 0)
            goto LABEL_911;
          v384 = *v552;
          *(_QWORD *)(v384 + 40) = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v384 + 48) = v12;
          v385 = v576;
          if (v576 > 0x40)
          {
            v387 = (((unint64_t)v576 + 63) >> 3) & 0x3FFFFFF8;
            v386 = operator new[]();
            memcpy((void *)v386, v575, v387);
            v388 = (uint64_t *)*a5;
            v389 = (unint64_t)(v385 + 63) >> 6;
            v390 = (_QWORD *)v386;
            do
            {
              v391 = *v388++;
              *v390++ |= v391;
              --v389;
            }
            while (v389);
            v12 = v551;
          }
          else
          {
            v386 = *a5 | (unint64_t)v575;
          }
          if (v578 > 0x40)
          {
            v393 = (uint64_t *)v577;
            v394 = (((unint64_t)v578 + 63) >> 6) - 1;
            v395 = (uint64_t *)v386;
            do
            {
              v397 = *v393++;
              v396 = v397;
              v398 = *v395++;
              v399 = v396 & ~v398;
              v392 = v399 == 0;
              v85 = v394-- != 0;
              v400 = v85;
            }
            while (!v399 && (v400 & 1) != 0);
          }
          else
          {
            v392 = (v577 & ~v386) == 0;
          }
          if (v385 >= 0x41 && v386)
            MEMORY[0x1CAA32F9C](v386, 0x1000C8000313F17);
          if (v392)
          {
            v401 = *v552;
            LODWORD(__src) = v290;
            v570 = 1;
            LODWORD(v579) = v289;
            LODWORD(v581) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v401 + 32))(v401, 19, &__src, 1, &v579, 1, 0);
            v365 = *(_QWORD *)(v12 + 24);
            v366 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v366 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v366 = v12;
                do
                  v366 = *(_QWORD *)(v366 + 8);
                while ((*(_WORD *)(v366 + 44) & 8) != 0);
              }
            }
            goto LABEL_910;
          }
          v402 = *((unsigned int *)a5 + 6);
          if (v402 > 0x40)
          {
            v403 = operator new[]();
            memcpy((void *)v403, *(const void **)v549, ((unint64_t)(v402 + 63) >> 3) & 0x3FFFFFF8);
            v404 = (uint64_t *)v573;
            v405 = (unint64_t)(v402 + 63) >> 6;
            v406 = (_QWORD *)v403;
            do
            {
              v407 = *v404++;
              *v406++ |= v407;
              --v405;
            }
            while (v405);
            v12 = v551;
          }
          else
          {
            v403 = (unint64_t)v573 | *(_QWORD *)v549;
          }
          if (v578 > 0x40)
          {
            v409 = (uint64_t *)v577;
            v410 = (((unint64_t)v578 + 63) >> 6) - 1;
            v411 = (uint64_t *)v403;
            do
            {
              v413 = *v409++;
              v412 = v413;
              v414 = *v411++;
              v415 = v412 & ~v414;
              v408 = v415 == 0;
              v85 = v410-- != 0;
              v416 = v85;
            }
            while (!v415 && (v416 & 1) != 0);
          }
          else
          {
            v408 = (v577 & ~v403) == 0;
          }
          if (v402 >= 0x41 && v403)
            MEMORY[0x1CAA32F9C](v403, 0x1000C8000313F17);
          if (v408)
          {
            v417 = *v552;
            LODWORD(__src) = v290;
            v570 = 1;
            LODWORD(v579) = v74;
            LODWORD(v581) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v417 + 32))(v417, 19, &__src, 1, &v579, 1, 0);
            v365 = *(_QWORD *)(v12 + 24);
            v366 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v366 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v366 = v12;
                do
                  v366 = *(_QWORD *)(v366 + 8);
                while ((*(_WORD *)(v366 + 44) & 8) != 0);
              }
            }
            goto LABEL_910;
          }
          if ((sub_1C49A5D68(v552, v12, (llvm::APInt *)&v577, v383) & 1) == 0)
          {
            v418 = *((unsigned int *)a5 + 2);
            if (v418 > 0x40)
            {
              v419 = (_QWORD *)*a5;
              v420 = (uint64_t *)v573;
              v421 = (unint64_t)(v418 + 63) >> 6;
              do
              {
                v422 = *v420++;
                *v419++ &= v422;
                --v421;
              }
              while (v421);
            }
            else
            {
              *a5 &= (unint64_t)v573;
            }
            v423 = *((unsigned int *)a5 + 6);
            if (v423 > 0x40)
            {
              v424 = *(_QWORD **)v549;
              v425 = (uint64_t *)v575;
              v426 = (unint64_t)(v423 + 63) >> 6;
              do
              {
                v427 = *v425++;
                *v424++ |= v427;
                --v426;
              }
              while (v426);
            }
            else
            {
              *(_QWORD *)v549 |= (unint64_t)v575;
            }
            goto LABEL_637;
          }
          goto LABEL_911;
        }
      }
      else
      {
        v377 = ~*(_QWORD *)v549;
        if ((_DWORD)v376)
          v378 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v376;
        else
          v378 = 0;
        v379 = v378 & v377;
        v559 = (void *)(v378 & v377);
        v560 = 0;
      }
      v379 &= v577;
      goto LABEL_736;
    }
    v60 = *(_DWORD **)(v12 + 32);
    v61 = v60[1];
    v62 = (const char *)v60[9];
    v63 = v60[17];
    v64 = sub_1C554C050(v60[17], v21);
    v65 = v552;
    if (!v66)
    {
LABEL_360:
      v241 = v550;
      if ((v63 & 0x80000000) != 0)
        v242 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
      else
        v242 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v63);
      v243 = *v242;
      if (v243)
      {
        if ((*(_BYTE *)(v243 + 3) & 1) != 0 || (v243 = *(_QWORD *)(v243 + 24)) != 0 && (*(_BYTE *)(v243 + 3) & 1) != 0)
          v244 = *(_QWORD *)(v243 + 8);
        else
          v244 = 0;
        v12 = v551;
        v65 = v552;
        v241 = v550;
        if ((v63 & 0x80000000) == 0)
          goto LABEL_599;
      }
      else
      {
        v244 = 0;
        if ((v63 & 0x80000000) == 0)
          goto LABEL_599;
      }
      if ((v63 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v241 + 432))
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v241 + 424) + 8 * (v63 & 0x7FFFFFFF));
        goto LABEL_600;
      }
LABEL_599:
      v245 = 0;
LABEL_600:
      v579 = v245;
      v308 = (a6 + 1);
      if ((sub_1C4AE7668(v65, v244, &v579, &v577, a5, v308, 0) & 1) != 0)
        goto LABEL_911;
      v309 = v550;
      if ((v62 & 0x80000000) != 0)
        v310 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
      else
        v310 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * (_QWORD)v62);
      v311 = *v310;
      if (v311)
      {
        if ((*(_BYTE *)(v311 + 3) & 1) != 0 || (v311 = *(_QWORD *)(v311 + 24)) != 0 && (*(_BYTE *)(v311 + 3) & 1) != 0)
          v312 = *(_QWORD *)(v311 + 8);
        else
          v312 = 0;
        v309 = v550;
        v12 = v551;
        if ((v62 & 0x80000000) == 0)
          goto LABEL_856;
      }
      else
      {
        v312 = 0;
        if ((v62 & 0x80000000) == 0)
          goto LABEL_856;
      }
      if ((v62 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v309 + 432))
      {
        v313 = *(void **)(*(_QWORD *)(v309 + 424) + 8 * (v62 & 0x7FFFFFFF));
        goto LABEL_857;
      }
LABEL_856:
      v313 = 0;
LABEL_857:
      __src = v313;
      v476 = *((unsigned int *)a5 + 2);
      v562 = v476;
      if (v476 > 0x40)
      {
        v561 = (void *)operator new[]();
        memcpy(v561, (const void *)*a5, ((unint64_t)(v476 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v561);
        v476 = v562;
        v479 = (unint64_t)v561;
        v562 = 0;
        if (v476 > 0x40)
        {
          v480 = 0;
          v481 = v577;
          do
          {
            *(_QWORD *)(v479 + v480) &= *(_QWORD *)(v481 + v480);
            v480 += 8;
          }
          while ((((unint64_t)(v476 + 63) >> 3) & 0x3FFFFFF8) != v480);
          goto LABEL_865;
        }
      }
      else
      {
        v477 = ~*a5;
        if ((_DWORD)v476)
          v478 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v476;
        else
          v478 = 0;
        v479 = v478 & v477;
        v561 = (void *)(v478 & v477);
        v562 = 0;
      }
      v479 &= v577;
LABEL_865:
      LODWORD(v580) = v476;
      v579 = v479;
      v482 = sub_1C4AE7668(v552, v312, &__src, &v579, &v573, v308, 0);
      if (v476 >= 0x41 && v479)
        MEMORY[0x1CAA32F9C](v479, 0x1000C8000313F17);
      if ((v482 & 1) != 0)
        goto LABEL_911;
      v484 = *v552;
      *(_QWORD *)(v484 + 40) = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v484 + 48) = v12;
      v485 = v574;
      if (v574 > 0x40)
      {
        v487 = (((unint64_t)v574 + 63) >> 3) & 0x3FFFFFF8;
        v486 = operator new[]();
        memcpy((void *)v486, v573, v487);
        v488 = *(uint64_t **)v549;
        v489 = (unint64_t)(v485 + 63) >> 6;
        v490 = (_QWORD *)v486;
        do
        {
          v491 = *v488++;
          *v490++ |= v491;
          --v489;
        }
        while (v489);
        v12 = v551;
      }
      else
      {
        v486 = *(_QWORD *)v549 | (unint64_t)v573;
      }
      if (v578 > 0x40)
      {
        v493 = (uint64_t *)v577;
        v494 = (((unint64_t)v578 + 63) >> 6) - 1;
        v495 = (uint64_t *)v486;
        do
        {
          v497 = *v493++;
          v496 = v497;
          v498 = *v495++;
          v499 = v496 & ~v498;
          v492 = v499 == 0;
          v85 = v494-- != 0;
          v500 = v85;
        }
        while (!v499 && (v500 & 1) != 0);
      }
      else
      {
        v492 = (v577 & ~v486) == 0;
      }
      if (v485 >= 0x41 && v486)
        MEMORY[0x1CAA32F9C](v486, 0x1000C8000313F17);
      if (v492)
      {
        v501 = *v552;
        LODWORD(__src) = v61;
        v570 = 1;
        LODWORD(v579) = (_DWORD)v62;
        LODWORD(v581) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v501 + 32))(v501, 19, &__src, 1, &v579, 1, 0);
        v365 = *(_QWORD *)(v12 + 24);
        v366 = v12;
        if ((*(_BYTE *)v12 & 4) == 0)
        {
          v366 = v12;
          if ((*(_WORD *)(v12 + 44) & 8) != 0)
          {
            v366 = v12;
            do
              v366 = *(_QWORD *)(v366 + 8);
            while ((*(_WORD *)(v366 + 44) & 8) != 0);
          }
        }
        goto LABEL_910;
      }
      v502 = *((unsigned int *)a5 + 2);
      if (v502 > 0x40)
      {
        v503 = operator new[]();
        memcpy((void *)v503, (const void *)*a5, ((unint64_t)(v502 + 63) >> 3) & 0x3FFFFFF8);
        v504 = (uint64_t *)v575;
        v505 = (unint64_t)(v502 + 63) >> 6;
        v506 = (_QWORD *)v503;
        do
        {
          v507 = *v504++;
          *v506++ |= v507;
          --v505;
        }
        while (v505);
        v12 = v551;
      }
      else
      {
        v503 = (unint64_t)v575 | *a5;
      }
      if (v578 > 0x40)
      {
        v509 = (uint64_t *)v577;
        v510 = (((unint64_t)v578 + 63) >> 6) - 1;
        v511 = (uint64_t *)v503;
        do
        {
          v513 = *v509++;
          v512 = v513;
          v514 = *v511++;
          v515 = v512 & ~v514;
          v508 = v515 == 0;
          v85 = v510-- != 0;
          v516 = v85;
        }
        while (!v515 && (v516 & 1) != 0);
      }
      else
      {
        v508 = (v577 & ~v503) == 0;
      }
      if (v502 >= 0x41 && v503)
        MEMORY[0x1CAA32F9C](v503, 0x1000C8000313F17);
      if (v508)
      {
        v517 = *v552;
        LODWORD(__src) = v61;
        v570 = 1;
        LODWORD(v579) = v63;
        LODWORD(v581) = 0;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v517 + 32))(v517, 19, &__src, 1, &v579, 1, 0);
        v365 = *(_QWORD *)(v12 + 24);
        v366 = v12;
        if ((*(_BYTE *)v12 & 4) == 0)
        {
          v366 = v12;
          if ((*(_WORD *)(v12 + 44) & 8) != 0)
          {
            v366 = v12;
            do
              v366 = *(_QWORD *)(v366 + 8);
            while ((*(_WORD *)(v366 + 44) & 8) != 0);
          }
        }
        goto LABEL_910;
      }
      if ((sub_1C49A5D68(v552, v12, (llvm::APInt *)&v577, v483) & 1) != 0)
        goto LABEL_911;
      v519 = *((unsigned int *)a5 + 6);
      if (v519 > 0x40)
      {
        v520 = *(_QWORD **)v549;
        v521 = (uint64_t *)v575;
        v522 = (unint64_t)(v519 + 63) >> 6;
        do
        {
          v523 = *v521++;
          *v520++ &= v523;
          --v522;
        }
        while (v522);
      }
      else
      {
        *(_QWORD *)v549 &= (unint64_t)v575;
      }
      v524 = *((unsigned int *)a5 + 2);
      if (v524 > 0x40)
      {
        v525 = (_QWORD *)*a5;
        v526 = (uint64_t *)v573;
        v527 = (unint64_t)(v524 + 63) >> 6;
        do
        {
          v528 = *v526++;
          *v525++ |= v528;
          --v527;
        }
        while (v527);
      }
      else
      {
        *a5 |= (unint64_t)v573;
      }
LABEL_637:
      v321 = *((unsigned int *)a5 + 2);
      if (v321 > 0x40)
      {
        v322 = operator new[]();
        memcpy((void *)v322, (const void *)*a5, ((unint64_t)(v321 + 63) >> 3) & 0x3FFFFFF8);
        v323 = (uint64_t *)a5[2];
        v324 = (unint64_t)(v321 + 63) >> 6;
        v325 = (_QWORD *)v322;
        do
        {
          v326 = *v323++;
          *v325++ |= v326;
          --v324;
        }
        while (v324);
        v12 = v551;
      }
      else
      {
        v322 = a5[2] | *a5;
      }
      if (v578 > 0x40)
      {
        v328 = (uint64_t *)v577;
        v329 = (((unint64_t)v578 + 63) >> 6) - 1;
        v330 = (uint64_t *)v322;
        do
        {
          v332 = *v328++;
          v331 = v332;
          v333 = *v330++;
          v334 = v331 & ~v333;
          v327 = v334 == 0;
          v85 = v329-- != 0;
          v335 = v85;
        }
        while (!v334 && (v335 & 1) != 0);
      }
      else
      {
        v327 = (v577 & ~v322) == 0;
      }
      if (v321 >= 0x41 && v322)
        MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
      if (!v327)
        goto LABEL_663;
      v336 = *(unsigned __int16 **)(v12 + 16);
      v337 = *((unsigned __int8 *)v336 + 4);
      if ((v336[4] & 2) == 0 || (v342 = *(_DWORD *)(v12 + 40), v342 == v337))
      {
        v338 = *((unsigned __int8 *)v336 + 4);
      }
      else
      {
        v343 = v342 - 1;
        v338 = *((unsigned __int8 *)v336 + 4);
        do
        {
          v344 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * v337);
          if ((v344 & 0x10000FF) != 0x1000000)
            break;
          v338 += (v344 & 0x2000000) == 0;
          if (v343 == v337)
            break;
          ++v337;
        }
        while ((v344 & 0x2000000) == 0);
      }
      if (v338 != 1)
        goto LABEL_663;
      v339 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 4);
      v340 = (uint64_t *)((v339 & 0x80000000) != 0
                       ? *(_QWORD *)(v550 + 24) + 16 * (v339 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v550 + 272) + 8 * v339);
      v341 = *v340;
      if (!v341)
        goto LABEL_663;
      while ((*(_BYTE *)(v341 + 3) & 1) != 0)
      {
        v341 = *(_QWORD *)(v341 + 24);
        if (!v341)
          goto LABEL_663;
      }
      v29 = 0;
      while (1)
      {
        v341 = *(_QWORD *)(v341 + 24);
        if (!v341)
          break;
        if ((*(_BYTE *)(v341 + 3) & 1) == 0)
          goto LABEL_912;
      }
      v345 = *v336;
      v346 = v345 == 69 || v345 == 0;
      v347 = v12;
      if (!v346)
        goto LABEL_702;
      if ((v339 & 0x80000000) != 0)
        v348 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v339 & 0x7FFFFFFF) + 8);
      else
        v348 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v339);
      for (i = *v348; (*(_BYTE *)(i + 3) & 1) != 0; i = *(_QWORD *)(i + 24))
        ;
      v356 = *(_QWORD *)(i + 8);
      if (**(_WORD **)(v356 + 16) && **(_WORD **)(v356 + 16) != 69)
      {
        v357 = *(_QWORD *)(v12 + 24);
      }
      else
      {
        v357 = *(_QWORD *)(v12 + 24);
        if (*(_QWORD *)(v356 + 24) == v357)
        {
LABEL_663:
          v29 = 0;
          goto LABEL_912;
        }
      }
      v347 = v357 + 48;
      for (j = *(_QWORD *)(v357 + 56); j != v347; j = *(_QWORD *)(j + 8))
      {
        if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
        {
          v347 = j;
          break;
        }
      }
LABEL_702:
      v359 = *v552;
      *(_QWORD *)(v359 + 40) = *(_QWORD *)(v347 + 24);
      *(_QWORD *)(v359 + 48) = v347;
      v360 = (llvm::ConstantInt *****)*v552;
      v579 = (8 * *((unsigned int *)a5 + 2)) | 1;
      LODWORD(v580) = 0;
      v361 = llvm::ConstantInt::get(***v360[1], v549, v16);
      v362 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t *, llvm::ValueHandleBase *))(*v360)[2])(v360, &v579, v361);
      v363 = (uint64_t *)*v552;
      LODWORD(__src) = v339;
      v570 = 1;
      v579 = v362;
      v580 = v364;
      LODWORD(v581) = 1;
      sub_1C5546EF4(v363, (uint64_t *)&__src, (int *)&v579);
      v365 = *(_QWORD *)(v12 + 24);
      v366 = v12;
      if ((*(_BYTE *)v12 & 4) == 0)
      {
        v366 = v12;
        if ((*(_WORD *)(v12 + 44) & 8) != 0)
        {
          v366 = v12;
          do
            v366 = *(_QWORD *)(v366 + 8);
          while ((*(_WORD *)(v366 + 44) & 8) != 0);
        }
      }
LABEL_910:
      sub_1C487FE80(v365 + 40, v12, *(_QWORD *)(v366 + 8));
      goto LABEL_911;
    }
    v67 = v64;
    sub_1C54EB4A0(v552[3], v62, (uint64_t)&v579);
    sub_1C49A9BF8((llvm::APInt *)&v579, v17, (uint64_t)&__src);
    if (v582 >= 0x41 && v581)
      MEMORY[0x1CAA32F9C](v581, 0x1000C8000313F17);
    if (v580 >= 0x41 && v579)
      MEMORY[0x1CAA32F9C](v579, 0x1000C8000313F17);
    v588 = v17;
    if (v17 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v587, v67, 0);
    }
    else
    {
      v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      if (!v17)
        v68 = 0;
      v587 = v68 & v67;
    }
    v69 = v570;
    if (v570 > 0x40)
    {
      v170 = (((unint64_t)v570 + 63) >> 3) & 0x3FFFFFF8;
      v72 = (void *)operator new[]();
      memcpy(v72, __src, v170);
      v71 = v577;
      v171 = (unint64_t)(v69 + 63) >> 6;
      v172 = (uint64_t *)v577;
      v173 = v72;
      do
      {
        v174 = *v172++;
        *v173++ &= v174;
        --v171;
      }
      while (v171);
      v70 = v62;
      v12 = v551;
    }
    else
    {
      v70 = v62;
      v71 = v577;
      v72 = (void *)(v577 & (unint64_t)__src);
    }
    v548 = v61;
    v175 = v588;
    v566 = v588;
    if (v588 > 0x40)
    {
      v180 = (((unint64_t)v588 + 63) >> 3) & 0x3FFFFFF8;
      v565 = (void *)operator new[]();
      v544 = v587;
      memcpy(v565, (const void *)v587, v180);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v565);
      v179 = v566;
      v178 = (unint64_t)v565;
      v566 = 0;
      if (v179 > 0x40)
      {
        v207 = 0;
        v208 = v577;
        do
        {
          *(_QWORD *)(v178 + v207) &= *(_QWORD *)(v208 + v207);
          v207 += 8;
        }
        while ((((unint64_t)(v179 + 63) >> 3) & 0x3FFFFFF8) != v207);
        goto LABEL_268;
      }
      v71 = v577;
    }
    else
    {
      v544 = v587;
      v176 = ~v587;
      v177 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v588;
      if (!v588)
        v177 = 0;
      v178 = v177 & v176;
      v565 = (void *)(v177 & v176);
      v566 = 0;
      LODWORD(v179) = v588;
    }
    v178 &= v71;
LABEL_268:
    v546 = v63;
    if (v69 > 0x40)
      v209 = memcmp(v72, (const void *)v178, ((unint64_t)(v69 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v209 = v72 == (void *)v178;
    v210 = v209;
    if (v179 >= 0x41 && v178)
      MEMORY[0x1CAA32F9C](v178, 0x1000C8000313F17);
    if (v69 >= 0x41 && v72)
      MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
    v61 = v548;
    if (v210)
    {
      v211 = *v552;
      *(_QWORD *)(v211 + 40) = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v211 + 48) = v12;
      v212 = *v552;
      LODWORD(v585) = v548;
      v586 = 1;
      LODWORD(v579) = (_DWORD)v70;
      LODWORD(v581) = 0;
      v213 = *(void (**)(void))(*(_QWORD *)v212 + 32);
      goto LABEL_282;
    }
    if ((v70 & 0x80000000) != 0)
      v216 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
    else
      v216 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * (_QWORD)v70);
    v232 = *v216;
    if (!v232)
      goto LABEL_353;
    while ((*(_BYTE *)(v232 + 3) & 1) != 0)
    {
      v232 = *(_QWORD *)(v232 + 24);
      if (!v232)
        goto LABEL_353;
    }
    while (1)
    {
      v232 = *(_QWORD *)(v232 + 24);
      if (!v232)
        break;
      if ((*(_BYTE *)(v232 + 3) & 1) == 0)
        goto LABEL_353;
    }
    v233 = (uint64_t *)((v70 & 0x80000000) != 0
                     ? *(_QWORD *)(v550 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v550 + 272) + 8 * (_QWORD)v70);
    v240 = *v233;
    if (!v240)
    {
LABEL_353:
      v215 = 1;
      goto LABEL_354;
    }
    if ((*(_BYTE *)(v240 + 3) & 1) != 0 || (v240 = *(_QWORD *)(v240 + 24)) != 0 && (*(_BYTE *)(v240 + 3) & 1) != 0)
    {
      v529 = *(_QWORD *)(v240 + 8);
      if (v529)
      {
        if (**(_WORD **)(v529 + 16) == 67 && *(_DWORD *)(v529 + 40) == 3)
        {
          v530 = *(_QWORD *)(v529 + 32);
          v531 = *(_DWORD *)(v530 + 36);
          v532 = sub_1C554C050(*(_DWORD *)(v530 + 68), v550);
          if (!v533)
          {
            v532 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v529 + 32) + 36), v550);
            if (!v534)
              goto LABEL_943;
            v531 = *(_DWORD *)(*(_QWORD *)(v529 + 32) + 68);
          }
          if (v532 == -1)
          {
            v564 = v175;
            if (v175 > 0x40)
            {
              v563 = (void *)operator new[]();
              memcpy(v563, (const void *)v544, ((unint64_t)(v175 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v563);
              v538 = v564;
              v537 = v563;
            }
            else
            {
              v535 = ~v544;
              v536 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v175;
              if (!(_DWORD)v175)
                v536 = 0;
              v537 = (void *)(v536 & v535);
              v563 = (void *)(v536 & v535);
              v538 = v175;
            }
            v564 = 0;
            if (v572 > 0x40)
              v539 = memcmp(__s1, v537, (((unint64_t)v572 + 63) >> 3) & 0x3FFFFFF8) == 0;
            else
              v539 = __s1 == v537;
            v540 = v539;
            if (v538 >= 0x41 && v537)
              MEMORY[0x1CAA32F9C](v537, 0x1000C8000313F17);
            v215 = 1;
            v12 = v551;
            v61 = v548;
            if (!v540)
            {
LABEL_354:
              if (v175 >= 0x41 && v544)
                MEMORY[0x1CAA32F9C](v544, 0x1000C8000313F17);
              v65 = v552;
              v63 = v546;
              v62 = v70;
              if (v572 >= 0x41 && __s1)
                MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
              if (v570 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              if (!v215)
                goto LABEL_911;
              goto LABEL_360;
            }
            v541 = *v552;
            *(_QWORD *)(v541 + 40) = *(_QWORD *)(v551 + 24);
            *(_QWORD *)(v541 + 48) = v551;
            v542 = *v552;
            LODWORD(v585) = v548;
            v586 = 1;
            LODWORD(v579) = v531;
            LODWORD(v581) = 0;
            LODWORD(v582) = v546;
            v584 = 0;
            v213 = *(void (**)(void))(*(_QWORD *)v542 + 32);
LABEL_282:
            v213();
            v214 = v12;
            if ((*(_BYTE *)v12 & 4) == 0)
            {
              v214 = v12;
              if ((*(_WORD *)(v12 + 44) & 8) != 0)
              {
                v214 = v12;
                do
                  v214 = *(_QWORD *)(v214 + 8);
                while ((*(_WORD *)(v214 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v214 + 8));
            v215 = 0;
            goto LABEL_354;
          }
        }
      }
    }
LABEL_943:
    v215 = 1;
    v12 = v551;
    v61 = v548;
    goto LABEL_354;
  }
  sub_1C54EB4A0(v552[3], v23, (uint64_t)&v573);
  sub_1C49A9BF8((llvm::APInt *)&v573, v17, (uint64_t)&v579);
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
    MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
  *a5 = v579;
  *((_DWORD *)a5 + 2) = v580;
  LODWORD(v580) = 0;
  if (*((_DWORD *)a5 + 6) >= 0x41u && *(_QWORD *)v549)
  {
    MEMORY[0x1CAA32F9C](*(_QWORD *)v549, 0x1000C8000313F17);
    v279 = v580;
    a5[2] = v581;
    *((_DWORD *)a5 + 6) = v582;
    LODWORD(v582) = 0;
    if (v279 >= 0x41 && v579)
      MEMORY[0x1CAA32F9C](v579, 0x1000C8000313F17);
  }
  else
  {
    a5[2] = v581;
    *((_DWORD *)a5 + 6) = v582;
    LODWORD(v582) = 0;
  }
  if (v576 >= 0x41 && v575)
    MEMORY[0x1CAA32F9C](v575, 0x1000C8000313F17);
  if (v574 >= 0x41 && v573)
    MEMORY[0x1CAA32F9C](v573, 0x1000C8000313F17);
  v29 = 0;
LABEL_914:
  if (v578 >= 0x41 && v577)
    MEMORY[0x1CAA32F9C](v577, 0x1000C8000313F17);
  return v29;
}

#error "1C4AEB310: too big function (funcsize=0)"

uint64_t sub_1C4AFB760(int a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  unsigned int *v10;
  uint64_t v11;
  _DWORD *v12;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v4 = *v3;
  if (!*v3)
    return 1;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 8);
LABEL_8:
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 177) <= 7 && ((1 << (v8 + 79)) & 0x87) != 0)
  {
    v10 = *(unsigned int **)(v7 + 32);
    goto LABEL_17;
  }
  if (v8 != 51 && v8 != 335)
  {
    if ((v8 & 0xFFFE) == 0x74)
    {
      v11 = *(unsigned int *)(v7 + 40);
      if (!(_DWORD)v11)
        return 0;
      v12 = (_DWORD *)(*(_QWORD *)(v7 + 32) + 16);
      while (*((_BYTE *)v12 - 16) != 17)
      {
        v12 += 8;
        if (!--v11)
          goto LABEL_29;
      }
      if (*v12 == 2131)
        goto LABEL_18;
    }
LABEL_29:
    if (v8 != 163 || *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36) == *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68))
      return 0;
LABEL_18:
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 1;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v7)
      {
        v7 = *(_QWORD *)(v4 + 8);
        goto LABEL_8;
      }
    }
  }
  v10 = *(unsigned int **)(v7 + 32);
  if (v10[17] != a1 && v10[25] != a1)
  {
LABEL_17:
    if ((sub_1C4AFB760(v10[1], a2) & 1) != 0)
      goto LABEL_18;
  }
  return 0;
}

int *sub_1C4AFB8C8(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int *v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  int *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  int *v34;
  unsigned int v35;
  int *v36;
  int *v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int *v55;
  BOOL v57;
  uint64_t v58;
  int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  int v66;
  int *v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  int *v72;
  unsigned int v73;
  unsigned int v74;
  int *v75;
  int v76;
  unsigned int v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  int *v94;
  int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int *v102;
  unsigned int v103;
  int v104;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < v8[1])
        {
          v43 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v43;
          v44 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v44;
        }
        return result;
      case 3:
        return sub_1C49BA72C(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_1C49BA9FC(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_1C49BA9FC(v8, v8 + 2, v8 + 4, v8 + 6);
        if (*(a2 - 1) < v8[7])
        {
          v45 = v8[6];
          v8[6] = *(a2 - 2);
          *(a2 - 2) = v45;
          v46 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v46;
          v47 = v8[7];
          v48 = v8[5];
          if (v47 < v48)
          {
            v49 = v8[6];
            v50 = v8[3];
            v51 = v8[4];
            v8[4] = v49;
            v8[5] = v47;
            v8[6] = v51;
            v8[7] = v48;
            if (v47 < v50)
            {
              v52 = v8[1];
              v53 = v8[2];
              v8[2] = v49;
              v8[3] = v47;
              v8[4] = v53;
              v8[5] = v50;
              if (v47 < v52)
              {
                v54 = *v8;
                *v8 = v49;
                v8[1] = v47;
                v8[2] = v54;
                v8[3] = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v55 = v8 + 2;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v59[3];
                v61 = v59[1];
                v59 = v55;
                if (v60 < v61)
                {
                  v62 = *v55;
                  v63 = v59[1];
                  v64 = v58;
                  while (1)
                  {
                    v65 = (char *)v8 + v64;
                    v66 = *(int *)((char *)v8 + v64 + 4);
                    *((_DWORD *)v65 + 2) = *(int *)((char *)v8 + v64);
                    *((_DWORD *)v65 + 3) = v66;
                    if (!v64)
                      break;
                    v64 -= 8;
                    if (*((_DWORD *)v65 - 1) <= v63)
                    {
                      v67 = (int *)((char *)v8 + v64 + 8);
                      goto LABEL_78;
                    }
                  }
                  v67 = v8;
LABEL_78:
                  *v67 = v62;
                  v67[1] = v63;
                }
                v55 = v59 + 2;
                v58 += 8;
              }
              while (v59 + 2 != a2);
            }
          }
          else if (!v57)
          {
            v96 = v8 + 3;
            do
            {
              v97 = v7[3];
              v98 = v7[1];
              v7 = v55;
              if (v97 < v98)
              {
                v99 = *(_QWORD *)v55;
                v100 = HIDWORD(*(_QWORD *)v7);
                v101 = v96;
                do
                {
                  v102 = v101;
                  v103 = *(v101 - 4);
                  *(v101 - 1) = *(v101 - 3);
                  v104 = *(v101 - 2);
                  v101 -= 2;
                  *v102 = v104;
                }
                while (v103 > v100);
                *(v101 - 1) = v99;
                *v101 = v100;
              }
              v55 = v7 + 2;
              v96 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v68 = (unint64_t)(v10 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = &v8[2 * v71];
                if (2 * v70 + 2 < v10)
                {
                  v73 = v72[1];
                  v74 = v72[3];
                  v72 += 2 * (v73 < v74);
                  if (v73 < v74)
                    v71 = 2 * v70 + 2;
                }
                if (v72[1] >= v8[2 * v70 + 1])
                {
                  v75 = &v8[2 * v70];
                  v76 = *v75;
                  v77 = v75[1];
                  do
                  {
                    v78 = v75;
                    v75 = v72;
                    *v78 = *v72;
                    v78[1] = v72[1];
                    if (v68 < v71)
                      break;
                    v79 = (2 * v71) | 1;
                    v72 = &v8[2 * v79];
                    v80 = 2 * v71 + 2;
                    if (v80 < v10)
                    {
                      v81 = v72[1];
                      result = (int *)v72[3];
                      v72 += 2 * (v81 < result);
                      if (v81 < result)
                        v79 = v80;
                    }
                    v71 = v79;
                  }
                  while (v72[1] >= v77);
                  *v75 = v76;
                  v75[1] = v77;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            do
            {
              v82 = 0;
              v83 = *(_QWORD *)v8;
              v84 = v8;
              do
              {
                v85 = &v84[2 * v82 + 2];
                v86 = (2 * v82) | 1;
                v87 = 2 * v82 + 2;
                if (v87 < v10)
                {
                  v88 = v85[1];
                  v89 = v85[3];
                  v85 += 2 * (v88 < v89);
                  if (v88 < v89)
                    v86 = v87;
                }
                *v84 = *v85;
                v84[1] = v85[1];
                v84 = v85;
                v82 = v86;
              }
              while (v86 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v85 == a2 - 2)
              {
                *(_QWORD *)v85 = v83;
              }
              else
              {
                *v85 = *(a2 - 2);
                v85[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v83;
                v90 = (char *)v85 - (char *)v8 + 8;
                if (v90 >= 9)
                {
                  v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
                  if (v8[2 * v91 + 1] < v85[1])
                  {
                    v92 = *v85;
                    v93 = v85[1];
                    do
                    {
                      v94 = v85;
                      v85 = &v8[2 * v91];
                      *v94 = *v85;
                      v94[1] = v85[1];
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                    }
                    while (v8[2 * v91 + 1] < v93);
                    *v85 = v92;
                    v85[1] = v93;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49BA72C(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C49BA72C(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C49BA72C(v7 + 2, v12 - 2, a2 - 4);
          sub_1C49BA72C(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_1C49BA72C(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v7[1])
        {
          v30 = *(_QWORD *)v7;
          v31 = HIDWORD(*(_QWORD *)v7);
          if (*(a2 - 1) <= v31)
          {
            v34 = v7 + 2;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v35 = v34[1];
              v34 += 2;
            }
            while (v35 <= v31);
          }
          else
          {
            v32 = v7;
            do
            {
              v8 = v32 + 2;
              v33 = v32[3];
              v32 += 2;
            }
            while (v33 <= v31);
          }
          v36 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v36 = v37 - 2;
              v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v38 > v31);
          }
          while (v8 < v36)
          {
            v39 = *v8;
            *v8 = *v36;
            *v36 = v39;
            v40 = v8[1];
            v8[1] = v36[1];
            v36[1] = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v41 <= v31);
            do
            {
              v42 = *(v36 - 1);
              v36 -= 2;
            }
            while (v42 > v31);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v30;
          *(v8 - 1) = v31;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        v16 = HIDWORD(*(_QWORD *)v7);
        do
        {
          v17 = v7[v14 + 3];
          v14 += 2;
        }
        while (v17 < v16);
        v18 = &v7[v14];
        v19 = a2;
        if (v14 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 < v16)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 >= v16);
        }
LABEL_21:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = v8[1];
            v8[1] = v24[1];
            v24[1] = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 < v16);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 >= v16);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v15;
        *(v8 - 1) = v16;
        if (v18 < v20)
        {
LABEL_32:
          result = (int *)sub_1C4AFB8C8(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1C4AFC020(v7, v8 - 2);
        result = (int *)sub_1C4AFC020(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C4AFC020(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49BA72C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C49BA9FC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C49BA9FC(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        v20 = a1[7];
        v21 = a1[5];
        if (v20 < v21)
        {
          v22 = a1[6];
          v23 = a1[3];
          v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            v25 = a1[1];
            v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 4;
      sub_1C49BA72C(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] < v8[1])
    {
      v12 = *v9;
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        v15 = (int *)((char *)a1 + v14);
        v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16)
          break;
        v14 -= 8;
        if (v15[3] <= v13)
        {
          v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      v17[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t sub_1C4AFC214(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AddRelaxedMathFlags";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "add-relaxed-math-flags";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EE8B0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4AFC370;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4AFC2A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7EE8B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E7FB3988;
  *(_QWORD *)(a1 + 32) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7EE8B8);
  if (v4 != -1)
  {
    v8[0] = sub_1C4AFC214;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7EE8B8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4AFC370()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4AFC2A4(v0, 0);
}

void sub_1C4AFC3A0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4AFC3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 1020) & 1) != 0 || (v2 = a2 + 72, v3 = *(_QWORD *)(a2 + 80), v3 == a2 + 72))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = v5 + 40;
      for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v8 = i - 24;
        else
          v8 = 0;
        if (sub_1C4774A9C(v8))
        {
          v9 = *(unsigned __int8 *)(v8 + 17);
          if (v9 >= 0xFE)
          {
            *(_BYTE *)(v8 + 17) = v9 & 1 | 0xF2;
            v4 = 1;
          }
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1C4AFC47C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  if ((*(_BYTE *)(a1 + 34) & 0x40) == 0)
    return 0;
  v2 = ***(_QWORD ***)a1;
  v28 = a1;
  v3 = *(_DWORD *)(v2 + 2520);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2504);
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v7 = (_QWORD *)(v4 + 24 * v6);
    v8 = *v7;
    if (*v7 == a1)
      goto LABEL_5;
    v22 = 0;
    v23 = 1;
    while (v8 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v8 == -8192;
      if (v24)
        v22 = v7;
      v25 = v6 + v23++;
      v6 = v25 & v5;
      v7 = (_QWORD *)(v4 + 24 * (v25 & v5));
      v8 = *v7;
      if (*v7 == a1)
        goto LABEL_5;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v7;
  }
  else
  {
    v26 = 0;
  }
  v7 = sub_1C53D65B8(v2 + 2504, (uint64_t)&v28, &v28, v26);
  v27 = v28;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = v27;
LABEL_5:
  v10 = v7[1];
  v9 = v7[2];
  if (v9 == 21)
  {
    if (*(_QWORD *)v10 == 0x766972642E616972
      && *(_QWORD *)(v10 + 8) == 0x6D617261705F7265
      && *(_QWORD *)(v10 + 13) == 0x73726574656D6172)
    {
      return 2;
    }
    v15 = *(_QWORD *)v10 ^ 0x5F7961722E616972;
    v16 = *(_QWORD *)(v10 + 8) ^ 0x6465646E65747865;
    v17 = *(_QWORD *)(v10 + 13);
    v21 = 1600415076;
    goto LABEL_32;
  }
  if (v9 == 19)
  {
    v15 = *(_QWORD *)v10 ^ 0x5F7961722E616972;
    v16 = *(_QWORD *)(v10 + 8) ^ 0x645F726576697264;
    v17 = *(_QWORD *)(v10 + 11);
    v21 = 1601332598;
LABEL_32:
    v18 = v21 | 0x6174616400000000;
    goto LABEL_33;
  }
  if (v9 != 17)
    return 0;
  v11 = *(_QWORD *)v10 == 0x656B6F742E616972 && *(_QWORD *)(v10 + 8) == 0x7265666675625F6ELL;
  if (v11 && *(_BYTE *)(v10 + 16) == 115)
    return 0;
  if (*(_QWORD *)v10 == 0x5F7961722E616972
    && *(_QWORD *)(v10 + 8) == 0x7461645F65726F63
    && *(_BYTE *)(v10 + 16) == 97)
  {
    return 1;
  }
  v15 = *(_QWORD *)v10 ^ 0x5F7961722E616972;
  v16 = *(_QWORD *)(v10 + 8) ^ 0x7461645F72657375;
  v17 = *(unsigned __int8 *)(v10 + 16);
  v18 = 97;
LABEL_33:
  if (v15 | v16 | v17 ^ v18)
    return 0;
  else
    return 3;
}

BOOL sub_1C4AFC700(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unsigned __int16 v68;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unsigned __int16 v75;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  uint64_t *v97;
  unint64_t v98;
  _QWORD v99[2];
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;

  v10 = (int *)(a1 + 34376);
  v11 = *(unsigned __int16 **)(a2 + 16);
  v12 = *((_QWORD *)v11 + 1);
  v13 = *v11;
  if ((v12 & 8) != 0)
  {
    if ((v13 - 263) <= 1)
      goto LABEL_6;
  }
  else
  {
    v14 = sub_1C4C915C4(*v11);
    if ((v14 & 0xFF00000000) == 0)
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    if ((_DWORD)v14 == 18)
      goto LABEL_6;
  }
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
  {
    if ((v12 & 0x80) == 0 && (v12 & 0x420) != 0x420)
      goto LABEL_15;
LABEL_6:
    sub_1C4AFCDC8(a3, *((uint64_t **)v10 + 3), (uint64_t *)(*((_QWORD *)v10 + 3) + 8 * v10[8]));
    return 0;
  }
  if ((v12 & 0x80) != 0)
    goto LABEL_6;
  v19 = a2;
  while ((*(_WORD *)(v19 + 44) & 8) != 0)
  {
    v19 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 8) & 0x80) != 0)
      goto LABEL_6;
  }
  if ((v12 & 0x20) != 0)
  {
LABEL_29:
    if ((v12 & 0x400) != 0)
      goto LABEL_6;
    v21 = a2;
    while ((*(_WORD *)(v21 + 44) & 8) != 0)
    {
      v21 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v21 + 16) + 9) & 4) != 0)
        goto LABEL_6;
    }
  }
  else
  {
    v20 = a2;
    while ((*(_WORD *)(v20 + 44) & 8) != 0)
    {
      v20 = *(_QWORD *)(v20 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v20 + 16) + 8) & 0x20) != 0)
        goto LABEL_29;
    }
  }
LABEL_15:
  v17 = sub_1C4C915C4(v13);
  if ((v17 & 0xFF00000000) == 0)
    return 0;
  v18 = v17;
  result = 0;
  if (v18 > 97)
  {
    if (v18 == 192)
    {
      v24 = *(_QWORD *)(a2 + 48);
      if ((v24 & 7) != 0)
      {
        v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v24 & 0xFFFFFFFFFFFFFFF8;
      }
      v98 = v25;
      v78 = *v10;
      v79 = sub_1C4B03504(*((_QWORD *)v10 + 2), v25);
      v80 = sub_1C4AFC47C(*(_QWORD *)(v79 + 8));
      v81 = v80 == 0;
      if (!v78)
        v81 = v80;
      if (v81)
      {
        sub_1C4AFCE80(a4, (uint64_t *)&v98);
        v99[0] = v25;
        v82 = *(uint64_t **)(a3 + 264);
        v83 = &v82[*(unsigned int *)(a3 + 272)];
        v102 = a1;
        v103 = v99;
        *(_QWORD *)&v104 = a3;
        v84 = sub_1C4B038D0(v82, v83, (uint64_t)&v102);
        v85 = *(_QWORD *)(a3 + 264);
        if (v84 != (uint64_t *)(v85 + 8 * *(unsigned int *)(a3 + 272)))
          *(_DWORD *)(a3 + 272) = ((unint64_t)v84 - v85) >> 3;
      }
      return 0;
    }
    if (v18 != 98)
      return result;
    v22 = *(_QWORD *)(a2 + 48);
    if ((v22 & 7) != 0)
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a2 + 48) = v22 & 0xFFFFFFFFFFFFFFF8;
    }
    v98 = v23;
    v26 = *v10;
    v27 = sub_1C4B03504(*((_QWORD *)v10 + 2), v23);
    v28 = sub_1C4AFC47C(*(_QWORD *)(v27 + 8));
    v29 = v28 == 0;
    if (!v26)
      v29 = v28;
    if (!v29)
      return 0;
    if (a5)
    {
      v30 = *(unsigned int *)(a3 + 272);
      if (!(_DWORD)v30)
      {
LABEL_132:
        v87 = sub_1C4B03504(*((_QWORD *)v10 + 2), v23);
        v88 = sub_1C4AFC47C(*(_QWORD *)(v87 + 8));
        v89 = *(unsigned __int16 **)(a2 + 16);
        v90 = *v89;
        if (v88)
        {
          v91 = *(_QWORD *)(a2 + 32);
        }
        else
        {
          v92 = sub_1C4C2FD5C(*v89);
          v91 = *(_QWORD *)(a2 + 32);
          v93 = *(_QWORD *)(v91 + 32 * v92 + 16);
          if (v93 >= 192 && (unint64_t)(*(_QWORD *)(v87 + 32) + v93) < 0x101)
          {
            v86 = 0;
            return v86 != 0;
          }
        }
        v94 = sub_1C4C2FD5C(v90);
        *(_QWORD *)(v91 + 32 * v94 + 16) |= 0x20000uLL;
        *(_WORD *)(v23 + 32) |= 4u;
        v86 = 1;
LABEL_138:
        sub_1C4AFCE80(a3, (uint64_t *)&v98);
        return v86 != 0;
      }
      v31 = *(uint64_t **)(a3 + 264);
      v97 = &v31[v30];
      while (1)
      {
        v32 = *v31;
        if (v23 == *v31)
          break;
        v33 = sub_1C4B03504(*((_QWORD *)v10 + 2), v23);
        v35 = *(_QWORD *)(v33 + 8);
        v34 = *(_QWORD *)(v33 + 16);
        v36 = sub_1C4B03504(*((_QWORD *)v10 + 2), v32);
        v38 = *(_QWORD *)(v36 + 8);
        v37 = *(_QWORD *)(v36 + 16);
        if (sub_1C4AFC47C(v35) || sub_1C4AFC47C(v38))
          goto LABEL_66;
        if (*(_BYTE *)(v34 + 16) != 62)
          v34 = 0;
        v39 = *(_BYTE *)(v37 + 16) == 62 ? v37 : 0;
        if (!v34 || v39 == 0)
          goto LABEL_66;
        v65 = *(_DWORD *)(v34 + 20) & 0x7FFFFFF;
        if (v34 - 32 * v65 + 32 == v34)
        {
          v71 = 0;
          v70 = 256;
        }
        else
        {
          v66 = 0;
          v67 = 32 - 32 * v65;
          do
          {
            v68 = sub_1C4B035F4(*(_QWORD *)(v34 + v67), 6);
            if (v68 >= 0x100u && v68 != 0)
            {
              v70 = 256;
              v71 = 1;
              goto LABEL_107;
            }
            v66 |= v68 < 0x100u;
            v67 += 32;
          }
          while (v67);
          v71 = 0;
          v70 = (v66 & 1) != 0 ? 0 : 256;
        }
LABEL_107:
        v72 = *(_DWORD *)(v39 + 20) & 0x7FFFFFF;
        if (v39 - 32 * v72 + 32 == v39)
        {
          v77 = 0;
          v73 = 0;
        }
        else
        {
          v96 = v71;
          v73 = 0;
          v74 = 32 - 32 * v72;
          do
          {
            v75 = sub_1C4B035F4(*(_QWORD *)(v39 + v74), 6);
            if (v75 >= 0x100u && v75 != 0)
            {
              v73 = 0;
              v77 = 1;
              goto LABEL_117;
            }
            v73 |= v75 < 0x100u;
            v74 += 32;
          }
          while (v74);
          v77 = 0;
LABEL_117:
          v71 = v96;
        }
        if (v71 == v77 || !v70 || (v73 & 1) != 0)
        {
LABEL_66:
          v41 = (_QWORD *)sub_1C4B03504(*((_QWORD *)v10 + 2), v23);
          v43 = v41[1];
          v42 = v41[2];
          v44 = v41[3];
          v45 = v41[4];
          v46 = (_QWORD *)sub_1C4B03504(*((_QWORD *)v10 + 2), v32);
          v47 = v46[4];
          if (v45 == -1 || v47 == -1)
            break;
          if (v43 == v46[1])
          {
            if (v42 == v46[2])
            {
              v62 = v46[3];
              v63 = v47 + v62;
              if (v45 + v44 > v62 && v63 > v44)
                break;
            }
            else
            {
              if (!*((_QWORD *)v10 + 1))
                break;
              v49 = *(_QWORD *)(v23 + 8);
              v50 = *(_QWORD *)(v32 + 8);
              v51 = v50 >= v49 ? *(_QWORD *)(v23 + 8) : *(_QWORD *)(v32 + 8);
              if ((*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                v95 = (unint64_t)(sub_1C4825F50((unint64_t *)(v23 + 24)) + 7) >> 3;
                if ((_DWORD)v52 == 1)
              }
              else
              {
                v95 = -1;
              }
              if ((*(_QWORD *)(v32 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                v54 = (unint64_t)(sub_1C4825F50((unint64_t *)(v32 + 24)) + 7) >> 3;
                if ((_DWORD)v53 == 1)
              }
              else
              {
                v54 = -1;
              }
              v55 = v95 + v49 - v51;
              v56 = v54 + v50 - v51;
              v57 = *((_QWORD *)v10 + 1);
              if ((*(_QWORD *)v23 & 4) != 0)
                v58 = 0;
              else
                v58 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
              if (v55 > 0x7FFFFFFFFFFFFFFBLL)
                v55 = -2;
              v59 = *(_OWORD *)(v23 + 56);
              v104 = *(_OWORD *)(v23 + 40);
              v105 = v59;
              v102 = v58;
              v103 = (_QWORD *)v55;
              v60 = (*(_QWORD *)v32 & 4) != 0 ? 0 : *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
              if (v56 > 0x7FFFFFFFFFFFFFFBLL)
                v56 = -2;
              v61 = *(_OWORD *)(v32 + 56);
              v100 = *(_OWORD *)(v32 + 40);
              v101 = v61;
              v99[0] = v60;
              v99[1] = v56;
              if (llvm::AAResults::alias(v57, (uint64_t)&v102, (uint64_t)v99))
                break;
            }
          }
        }
        if (++v31 == v97)
          goto LABEL_132;
      }
    }
    v86 = 0;
    goto LABEL_138;
  }
  if (v18 == 22)
  {
    if (*v10 != 1)
      return 0;
    goto LABEL_6;
  }
  if (v18 == 85)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 34672) + *(int *)(*(_QWORD *)(a2 + 24) + 24)) = 1;
    sub_1C4B0486C((_QWORD *)a3);
    result = 0;
    *(_DWORD *)(a3 + 272) = 0;
  }
  return result;
}

uint64_t sub_1C4AFCDC8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;

  if (a2 != a3)
  {
    v13 = v3;
    v14 = v4;
    v5 = a2;
    v6 = result;
    do
    {
      v9 = a3;
      v10 = v5;
      v11 = v6;
      result = sub_1C4B048E8((uint64_t)v12, v6, v5);
      if (v12[16])
      {
        v7 = *v10;
        v8 = *(unsigned int *)(v11 + 272);
        if (v8 >= *(unsigned int *)(v11 + 276))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 264, v11 + 280, v8 + 1, 8);
          v8 = *(unsigned int *)(v11 + 272);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 264) + 8 * v8) = v7;
        ++*(_DWORD *)(v11 + 272);
      }
      a3 = v9;
      v5 = v10 + 1;
      v6 = v11;
    }
    while (v10 + 1 != v9);
  }
  return result;
}

uint64_t sub_1C4AFCE80(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  result = sub_1C4B048E8((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 272);
    if (v6 >= *(_DWORD *)(a1 + 276))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 272);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 272);
  }
  return result;
}

uint64_t sub_1C4AFCF04(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int32x2_t v40[2];
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _OWORD v48[4];
  uint64_t v49;
  void *v50;
  _DWORD v51[32];
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  unsigned int v56;
  _QWORD v57[18];

  v57[16] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 4296;
  v3 = a1[4299];
  v4 = *(uint64_t **)v3;
  v5 = *(unsigned int *)(v3 + 16);
  v6 = *(_QWORD *)v3 + 40 * v5;
  if (*(_DWORD *)(v3 + 8))
  {
    if ((_DWORD)v5)
    {
      v7 = 40 * v5;
      v8 = *(uint64_t **)v3;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 5;
        v7 -= 40;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(uint64_t **)v3;
    }
  }
  else
  {
LABEL_6:
    v8 = &v4[5 * v5];
  }
  v9 = &v4[5 * v5];
  while (v8 != v9)
  {
    v10 = *v8;
    v11 = sub_1C4AFC47C(v8[1]);
    if ((*(_WORD *)(v10 + 32) & 1) != 0)
    {
      v12 = *((_DWORD *)v2 + 2) ? v11 == 0 : v11;
      if ((v12 & 1) != 0 && (v11 & 1) != 0)
      {
        v13 = *((unsigned int *)v2 + 10);
        if (v13 >= *((unsigned int *)v2 + 11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 4), (uint64_t)(a1 + 4302), v13 + 1, 8);
          v13 = *((unsigned int *)v2 + 10);
        }
        *(_QWORD *)(v2[4] + 8 * v13) = v10;
        ++*((_DWORD *)v2 + 10);
      }
    }
    v14 = v8 + 5;
    v8 = (uint64_t *)v6;
    if (v14 != (uint64_t *)v6)
    {
      v8 = v14;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 5;
        if (v8 == (uint64_t *)v6)
        {
          v8 = (uint64_t *)v6;
          break;
        }
      }
    }
  }
  v15 = *v2 + 320;
  v16 = *(_QWORD *)(*v2 + 328);
  if (v16 != v15)
  {
    do
    {
      v17 = *a1 + 536 * *(int *)(v16 + 24);
      sub_1C4B0486C((_QWORD *)v17);
      *(_DWORD *)(v17 + 272) = 0;
      v18 = a1[1074] + 536 * *(int *)(v16 + 24);
      sub_1C4B0486C((_QWORD *)v18);
      *(_DWORD *)(v18 + 272) = 0;
      v19 = a1[2148] + 536 * *(int *)(v16 + 24);
      sub_1C4B0486C((_QWORD *)v19);
      *(_DWORD *)(v19 + 272) = 0;
      v20 = a1[3222] + 536 * *(int *)(v16 + 24);
      sub_1C4B0486C((_QWORD *)v20);
      *(_DWORD *)(v20 + 272) = 0;
      sub_1C49B9F28(a1 + 4334, v2[39], 0);
      v21 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v21 || (*(_BYTE *)v21 & 4) == 0)
      {
        while ((*(_WORD *)(v21 + 44) & 4) != 0)
          v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
      }
      v22 = *(_DWORD *)(v16 + 24);
      while (v21 != v16 + 48)
      {
        sub_1C4AFC700((unint64_t)a1, v21, a1[2148] + 536 * v22, a1[3222] + 536 * v22, 0);
        v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v21 || (*(_BYTE *)v21 & 4) == 0)
        {
          while ((*(_WORD *)(v21 + 44) & 4) != 0)
            v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v23 = a1[2148];
      v24 = v23 + 536 * v22;
      v25 = *a1 + 536 * v22;
      if (v23 != *a1)
        sub_1C4B03C10((_DWORD *)(*a1 + 536 * v22), (_DWORD *)(v23 + 536 * v22));
      sub_1C4B03D34(v25 + 264, v24 + 264);
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v15);
    v15 = *(_QWORD *)(*v2 + 328);
  }
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  sub_1C486F76C((uint64_t)&v53, v15);
  v26 = 0;
  v49 = 0;
  memset(v51, 0, sizeof(v51));
  memset(v48, 0, sizeof(v48));
  v45 = (char *)v48 + 8;
  v46 = (char *)v48 + 8;
  v51[1] = 8;
  v52 = 0;
  v47 = 8;
  v50 = &v51[2];
  while (1)
  {
    if (v56 != v26)
      goto LABEL_39;
    if (!v26)
      break;
    v33 = (char *)v55 + 16 * v26;
    v34 = v50;
    v35 = (char *)v55;
    while (*(_QWORD *)v35 == *v34 && *((_QWORD *)v35 + 1) == v34[1])
    {
      v35 += 16;
      v34 += 2;
      if (v35 == v33)
        goto LABEL_44;
    }
LABEL_39:
    v27 = sub_1C4AFD3D4(a1, *((_QWORD *)v55 + 2 * v56 - 2));
    v28 = v56;
    if (v27)
    {
      v30 = *((_QWORD *)v55 + 2 * v56 - 2);
      v31 = *(_QWORD **)(v30 + 64);
      v32 = *(_QWORD **)(v30 + 72);
      if (v31 != v32)
      {
        do
          sub_1C4A07D1C((uint64_t)v40, v31++);
        while (v31 != v32);
        v28 = v56;
      }
    }
    v56 = v28 - 1;
    if (v28 != 1)
      sub_1C486F1F8(&v53);
    v26 = v51[0];
  }
LABEL_44:
  if (v50 != &v51[2])
    free(v50);
  if (v46 != v45)
    free(v46);
  if (v55 != v57)
    free(v55);
  if (v54 != v53)
    free(v54);
  while (v42 != v43)
  {
    v37 = *(_QWORD *)v42;
    sub_1C6159104(v40, v42);
    if (sub_1C4AFD3D4(a1, v37))
    {
      v38 = *(_QWORD **)(v37 + 64);
      v39 = *(_QWORD **)(v37 + 72);
      while (v38 != v39)
        sub_1C4A07D1C((uint64_t)v40, v38++);
    }
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  return MEMORY[0x1CAA32FB4](*(_QWORD *)v40, 8);
}

BOOL sub_1C4AFD3D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD v36[33];
  void *__s2;
  uint64_t v38;
  _QWORD v39[33];

  v39[32] = *MEMORY[0x1E0C80C00];
  v4 = *(int *)(a2 + 24);
  v5 = a1[1074] + 536 * (int)v4;
  sub_1C4B0486C((_QWORD *)v5);
  *(_DWORD *)(v5 + 272) = 0;
  v6 = *(_QWORD *)(a2 + 88);
  for (i = *(_QWORD *)(a2 + 96); v6 != i; v6 += 8)
  {
    v8 = *a1 + 536 * *(int *)(*(_QWORD *)v6 + 24);
    v9 = *(unsigned int *)(v8 + 272);
    if ((_DWORD)v9)
    {
      v10 = a1[1074] + 536 * (int)v4;
      v11 = *(uint64_t **)(v8 + 264);
      v12 = 8 * v9;
      do
      {
        sub_1C4AFCE80(v10, v11++);
        v12 -= 8;
      }
      while (v12);
    }
  }
  v13 = a1[1074];
  v36[0] = 1;
  v14 = 1;
  v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v36[v14] = v15;
    v14 += 2;
  }
  while (v14 != 33);
  v16 = (_DWORD *)(v13 + 536 * (int)v4);
  sub_1C4B03C10(v36, v16);
  __s2 = v39;
  v38 = 0x2000000000;
  if (v16[68])
    sub_1C4B03D34((uint64_t)&__s2, (uint64_t)(v16 + 66));
  if (*(_BYTE *)(a1[4334] + v4))
  {
    sub_1C4B0486C(v36);
    LODWORD(v38) = 0;
  }
  v17 = a1[3222] + 536 * (int)v4;
  v18 = *(unsigned int *)(v17 + 272);
  if ((_DWORD)v18)
  {
    v19 = *(uint64_t **)(v17 + 264);
    v20 = (uint64_t *)__s2;
    v21 = 8 * v18;
    v22 = v38;
    do
    {
      v34 = *v19;
      v35[0] = a1;
      v35[1] = &v34;
      v35[2] = v36;
      v23 = sub_1C4B038D0(v20, &v20[v22], (uint64_t)v35);
      v20 = (uint64_t *)__s2;
      v22 = v38;
      if (v23 != (uint64_t *)((char *)__s2 + 8 * v38))
      {
        v22 = ((unint64_t)((char *)v23 - (_BYTE *)__s2) >> 3);
        LODWORD(v38) = (unint64_t)((char *)v23 - (_BYTE *)__s2) >> 3;
      }
      ++v19;
      v21 -= 8;
    }
    while (v21);
  }
  v24 = a1[2148] + 536 * (int)v4;
  v25 = *(unsigned int *)(v24 + 272);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)(v24 + 264);
    v27 = 8 * v25;
    do
    {
      sub_1C4AFCE80((uint64_t)v36, v26++);
      v27 -= 8;
    }
    while (v27);
  }
  v28 = *a1 + 536 * (int)v4;
  v29 = *(unsigned int *)(v28 + 272);
  v30 = (_DWORD)v29 != (_DWORD)v38 || memcmp(*(const void **)(v28 + 264), __s2, 8 * v29) != 0;
  if ((*(_BYTE *)v28 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v28 + 8), 8);
  v31 = 0;
  *(_QWORD *)v28 = 1;
  v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(v28 + 8 + v31) = v32;
    v31 += 16;
  }
  while (v31 != 256);
  sub_1C4B03E98((unsigned int *)v28, (unsigned int *)v36);
  sub_1C4B03F84(v28 + 264, (uint64_t)&__s2);
  if (__s2 != v39)
    free(__s2);
  if ((v36[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v36[1], 8);
  return v30;
}

void sub_1C4AFD6C8(uint64_t a1)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25[2];
  _QWORD v26[10];

  v26[8] = *MEMORY[0x1E0C80C00];
  sub_1C615A230(a1, ((*(_QWORD *)(*(_QWORD *)(a1 + 144) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 144) + 104)) >> 3));
  v25[0] = v26;
  v25[1] = (void *)0x400000000;
  llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v25, *(llvm::MachineFunction **)(a1 + 144), (uint64_t)&v22);
  v2 = (uint64_t *)v22;
  if (v23)
  {
    v3 = (char *)v22 + 16 * v23;
LABEL_3:
    v4 = *v2;
    v21 = 0x1000000000000001;
    v5 = *(_QWORD *)(v4 + 64);
    v6 = *(_QWORD *)(v4 + 72);
    while (v5 != v6)
    {
      v7 = (unint64_t *)(*(_QWORD *)a1 + 8 * *(int *)(*(_QWORD *)v5 + 24));
      v8 = *v7;
      if ((*v7 & 1) == 0)
      {
        if (!*(_DWORD *)(v8 + 64))
          goto LABEL_8;
LABEL_7:
        sub_1C4AFD980(&v21, v7);
        goto LABEL_8;
      }
      if (v8 >> 58)
        goto LABEL_7;
LABEL_8:
      v5 += 8;
    }
    for (i = *(_QWORD *)(v4 + 56); ; i = *(_QWORD *)(i + 8))
    {
      if (i == v4 + 48)
      {
        sub_1C4AFDC18((uint64_t *)(*(_QWORD *)a1 + 8 * *(int *)(v4 + 24)), (uint64_t *)&v21);
        sub_1C4914448((void ***)&v21);
        v2 += 2;
        if (v2 == (uint64_t *)v3)
        {
          v2 = (uint64_t *)v22;
          goto LABEL_42;
        }
        goto LABEL_3;
      }
      v10 = *(unsigned __int16 **)(i + 16);
      v11 = *((_QWORD *)v10 + 1);
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        v16 = i;
        if ((v11 & 0x80) != 0)
        {
LABEL_26:
          sub_1C6159188(&v21);
          goto LABEL_36;
        }
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v16 + 16) + 8) & 0x80) != 0)
            goto LABEL_26;
        }
      }
      else if ((v11 & 0x80) != 0)
      {
        goto LABEL_26;
      }
      v13 = sub_1C4C915C4(*v10);
      if ((v13 & 0xFF00000000) == 0)
        goto LABEL_36;
      if ((_DWORD)v13 != 85)
        break;
      if ((v21 & 1) != 0)
      {
        v18 = v21 & 0xFC00000000000000;
LABEL_35:
        v21 = v18 | 1;
        goto LABEL_36;
      }
      v17 = *(unsigned int *)(v21 + 8);
      if ((_DWORD)v17)
        bzero(*(void **)v21, 8 * v17);
LABEL_36:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    if ((_DWORD)v13 != 192)
      goto LABEL_36;
    v14 = *(_QWORD *)(i + 48);
    if ((v14 & 7) != 0)
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(i + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
    }
    v19 = sub_1C4B03504(*(_QWORD *)(a1 + 152), v15);
    v20 = sub_1C4AFC47C(*(_QWORD *)(v19 + 8));
    if ((v21 & 1) == 0)
    {
      **(_QWORD **)v21 |= 1 << v20;
      goto LABEL_36;
    }
    v18 = v21 & 0xFC00000000000000 | (2
                                      * (((v21 >> 1) & ~(-1 << (v21 >> 58)) | (1 << v20)) & ~(-1 << (v21 >> 58))));
    goto LABEL_35;
  }
LABEL_42:
  if (v2 != &v24)
    free(v2);
  if (v25[0] != v26)
    free(v25[0]);
}

unint64_t *sub_1C4AFD980(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];

  v4 = *a1;
  if ((*a1 & 1) != 0)
    v5 = v4 >> 58;
  else
    v5 = *(unsigned int *)(v4 + 64);
  v6 = *a2;
  if ((*a2 & 1) != 0)
    v7 = v6 >> 58;
  else
    v7 = *(unsigned int *)(v6 + 64);
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  sub_1C496F5AC(a1, v8, 0);
  v9 = *a1;
  v10 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v10 & 1) != 0)
    {
      *a1 = v9 & 0xFC00000000000000 | (2
                                       * (((v10 >> 1) & ~(-1 << (v10 >> 58)) | (v9 >> 1) & ~(-1 << (v9 >> 58))) & ~(-1 << (v9 >> 58)))) | 1;
      return a1;
    }
    v16 = *(unsigned int *)(v10 + 64);
    if (!*(_DWORD *)(v10 + 64))
      return a1;
LABEL_21:
    v17 = 0;
    while (1)
    {
      v18 = *a1;
      if ((*a1 & 1) != 0)
      {
        if (((1 << v17) & (v18 >> 1) & ~(-1 << (v18 >> 58))) == 0)
        {
LABEL_26:
          v20 = *a2;
          if ((*a2 & 1) != 0)
            v21 = (1 << v17) & (v20 >> 1) & ~(-1 << (v20 >> 58));
          else
            v21 = *(_QWORD *)(*(_QWORD *)v20 + 8 * (v17 >> 6)) & (1 << v17);
          v19 = v21 != 0;
          goto LABEL_30;
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v18 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
      {
        goto LABEL_26;
      }
      v19 = 1;
LABEL_30:
      v30[0] = a1;
      v30[1] = v17;
      sub_1C496F7C8((uint64_t)v30, v19);
      if (v16 == ++v17)
        return a1;
    }
  }
  if ((v10 & 1) != 0)
  {
    v16 = v10 >> 58;
    if (!(v10 >> 58))
      return a1;
    goto LABEL_21;
  }
  v11 = *(_DWORD *)(v10 + 64);
  if (*(_DWORD *)(v9 + 64) < v11)
  {
    v23 = *(_DWORD *)(v9 + 64) & 0x3F;
    v24 = *(unsigned int *)(v9 + 8);
    if (v23)
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v24 - 8) &= ~(-1 << v23);
    v25 = v24;
    *(_DWORD *)(v9 + 64) = v11;
    v26 = v11 + 63;
    if ((_DWORD)v24 != (v11 + 63) >> 6)
    {
      v27 = v26 >> 6;
      if (v24 > v27)
      {
        *(_DWORD *)(v9 + 8) = v27;
        v25 = v26 >> 6;
      }
      else
      {
        v28 = v24;
        if (v27 > *(_DWORD *)(v9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v9 + 16, v27, 8);
          v28 = *(unsigned int *)(v9 + 8);
          v25 = *(_DWORD *)(v9 + 8);
        }
        if (v27 != v24)
          bzero((void *)(*(_QWORD *)v9 + 8 * v28), 8 * (v27 - v24));
        v25 += v27 - v24;
        *(_DWORD *)(v9 + 8) = v25;
        v11 = *(_DWORD *)(v9 + 64);
      }
    }
    v29 = v11 & 0x3F;
    if (v29)
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v25 - 8) &= ~(-1 << v29);
  }
  v12 = *(unsigned int *)(v10 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)v10;
    v14 = *(_QWORD **)v9;
    do
    {
      v15 = *v13++;
      *v14++ |= v15;
      --v12;
    }
    while (v12);
  }
  return a1;
}

uint64_t *sub_1C4AFDC18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  if ((*a1 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      if (v4 == v5)
      {
LABEL_11:
        *(_DWORD *)(v4 + 64) = *(_DWORD *)(v5 + 64);
        return a1;
      }
      v6 = *(unsigned int *)(v5 + 8);
      v7 = *(unsigned int *)(v4 + 8);
      if (v7 >= v6)
      {
        if ((_DWORD)v6)
          memmove(*(void **)v4, *(const void **)v5, 8 * v6);
        goto LABEL_10;
      }
      if (*(_DWORD *)(v4 + 12) < v6)
      {
        *(_DWORD *)(v4 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6, 8);
      }
      else if ((_DWORD)v7)
      {
        memmove(*(void **)v4, *(const void **)v5, 8 * v7);
LABEL_8:
        v8 = *(unsigned int *)(v5 + 8);
        if (v7 != v8)
          memcpy((void *)(*(_QWORD *)v4 + 8 * v7), (const void *)(*(_QWORD *)v5 + 8 * v7), *(_QWORD *)v5 + 8 * v8 - (*(_QWORD *)v5 + 8 * v7));
LABEL_10:
        *(_DWORD *)(v4 + 8) = v6;
        goto LABEL_11;
      }
      v7 = 0;
      goto LABEL_8;
    }
    if (v4)
    {
      if (*(_QWORD *)v4 != v4 + 16)
        free(*(void **)v4);
      MEMORY[0x1CAA32FC0](v4, 0x1080C40EF38A13ELL);
      v5 = *a2;
    }
LABEL_17:
    *a1 = v5;
    return a1;
  }
  if ((v5 & 1) != 0)
    goto LABEL_17;
  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = *a2;
  *v10 = v10 + 2;
  v10[1] = 0x600000000;
  if (*(_DWORD *)(v12 + 8))
    sub_1C49DA960((uint64_t)v10, v12);
  *((_DWORD *)v11 + 16) = *(_DWORD *)(v12 + 64);
  *a1 = (uint64_t)v11;
  return a1;
}

uint64_t sub_1C4AFDDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[32];
  uint64_t v48;
  unint64_t v49;

  NearestCommonDominator = *(_QWORD *)(a1 + 328);
  if (sub_1C4AFE4C8(NearestCommonDominator))
  {
    v8 = *(_QWORD *)a4;
    v9 = *(unsigned int *)(a4 + 16);
    v10 = *(_QWORD *)a4 + 8 * v9;
    if (*(_DWORD *)(a4 + 8))
    {
      if ((_DWORD)v9)
      {
        v11 = 8 * v9;
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 8;
          v11 -= 8;
          if (!v11)
            goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      v8 = v10;
    }
    NearestCommonDominator = *(_QWORD *)(*(_QWORD *)v8 + 24);
  }
  v43 = v47;
  v44 = v47;
  v45 = 4;
  v46 = 0;
  v12 = *(_DWORD *)(a3 + 264);
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 248);
    v14 = v12 - 1;
    v15 = (v12 - 1) & ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9));
    v16 = *(_QWORD *)(v13 + 16 * v15);
    if (NearestCommonDominator == v16)
    {
LABEL_14:
      v19 = *(_QWORD **)(v13 + 16 * v15 + 8);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
        NearestCommonDominator = sub_1C4B0409C(v20, a2);
        if (!NearestCommonDominator)
          goto LABEL_62;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v43, (uint64_t)v20);
      }
    }
    else
    {
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v15 + v17++;
        v15 = v18 & v14;
        v16 = *(_QWORD *)(v13 + 16 * v15);
        if (NearestCommonDominator == v16)
          goto LABEL_14;
      }
    }
  }
  v21 = *(unsigned int *)(a4 + 16);
  v22 = *(_QWORD *)a4 + 8 * v21;
  if (*(_DWORD *)(a4 + 8))
  {
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v24 = *(_QWORD *)a4;
      while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 8;
        v23 -= 8;
        if (!v23)
          goto LABEL_23;
      }
    }
    else
    {
      v24 = *(_QWORD *)a4;
    }
  }
  else
  {
LABEL_23:
    v24 = *(_QWORD *)a4 + 8 * v21;
  }
  v25 = *(_QWORD *)a4 + 8 * v21;
  while (v24 != v25)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v24 + 24);
    if (v26 != NearestCommonDominator)
    {
      v27 = *(_DWORD *)(a3 + 264);
      if (!v27)
        goto LABEL_40;
      v28 = *(_QWORD *)(a3 + 248);
      v29 = v27 - 1;
      v30 = (v27 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      v31 = *(_QWORD *)(v28 + 16 * v30);
      if (v26 != v31)
      {
        v32 = 1;
        while (v31 != -4096)
        {
          v33 = v30 + v32++;
          v30 = v33 & v29;
          v31 = *(_QWORD *)(v28 + 16 * v30);
          if (v26 == v31)
            goto LABEL_32;
        }
LABEL_40:
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(a2 + 248), NearestCommonDominator, v26);
        if (!NearestCommonDominator)
          goto LABEL_62;
        goto LABEL_41;
      }
LABEL_32:
      v34 = *(_QWORD **)(v28 + 16 * v30 + 8);
      if (!v34)
        goto LABEL_40;
      do
      {
        v35 = v34;
        v34 = (_QWORD *)*v34;
      }
      while (v34);
      v36 = (char *)sub_1C477672C((uint64_t)&v43, (uint64_t)v35);
      if (v44 == v43)
        v37 = (uint64_t *)((char *)&v45 + 4);
      else
        v37 = &v45;
      if (v36 == &v44[8 * *(unsigned int *)v37])
      {
        v38 = sub_1C4B0409C(v35, a2);
        if (!v38)
        {
          NearestCommonDominator = 0;
          goto LABEL_62;
        }
        v26 = v38;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v43, (uint64_t)v35);
        goto LABEL_40;
      }
    }
LABEL_41:
    v39 = v24 + 8;
    v24 = v22;
    if (v39 != v22)
    {
      v24 = v39;
      while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 8;
        if (v24 == v22)
        {
          v24 = v22;
          break;
        }
      }
    }
  }
  v40 = NearestCommonDominator + 48;
  while (v40 != *(_QWORD *)(NearestCommonDominator + 56))
  {
    v41 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
    if (!v41 || (*(_BYTE *)v41 & 4) == 0)
    {
      while ((*(_WORD *)(v41 + 44) & 4) != 0)
        v41 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
    }
    v48 = 0;
    v49 = v41;
    if ((sub_1C4A07178((uint64_t *)a4, &v49, &v48) & 1) != 0)
      break;
    v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
    if (!v40 || (*(_BYTE *)v40 & 4) == 0)
    {
      while ((*(_WORD *)(v40 + 44) & 4) != 0)
        v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
    }
  }
LABEL_62:
  if (v44 != v43)
    free(v44);
  return NearestCommonDominator;
}

void sub_1C4AFE0FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::LiveInterval *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  llvm::LiveInterval *v21;
  llvm::LiveIntervals *v22;

  v2 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 328);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 288), v5, 0);
      v4 -= 8;
    }
    while (v4);
    v6 = *(unsigned int *)(a1 + 336);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 328);
      v8 = 8 * v6;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)v7 + 32);
        if (!*(_BYTE *)v9)
        {
          v10 = *(_QWORD *)(a1 + 288);
          v11 = (llvm::LiveInterval *)sub_1C4851220(v10, *(_DWORD *)(v9 + 4));
          v12 = *(_QWORD *)(v10 + 304);
          v13 = *(_QWORD *)(v10 + 248);
          v14 = *(_QWORD *)(v13 + 40);
          *(_QWORD *)v12 = v13;
          *(_QWORD *)(v12 + 8) = v14;
          *(_OWORD *)(v12 + 16) = *(_OWORD *)(v10 + 288);
          *(_QWORD *)(v12 + 32) = v10 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v12);
          *(_DWORD *)(v12 + 184) = 0;
          v15 = *(_QWORD *)(v10 + 256);
          v17 = *(_BYTE *)(v15 + 16) == 0;
          v16 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (*((_DWORD *)v11 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v17 = v17 || v16 == 0;
          v18 = !v17;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v10 + 304), v11, v18);
          llvm::LiveIntervals::computeDeadValues(v10, (uint64_t)v11, 0);
        }
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  if (*(_BYTE *)(a1 + 508))
  {
    v19 = *(_QWORD *)(a1 + 288);
    v20 = *(_DWORD *)(a1 + 504);
    if ((v20 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v19 + 416)
      || (v21 = *(llvm::LiveInterval **)(*(_QWORD *)(v19 + 408) + 8 * (v20 & 0x7FFFFFFF))) == 0)
    {
      v22 = (llvm::LiveIntervals *)v19;
      v21 = (llvm::LiveInterval *)sub_1C4851220(v19, v20);
      llvm::LiveIntervals::computeVirtRegInterval(v22, v21);
      v19 = (uint64_t)v22;
    }
    llvm::LiveIntervals::extendToUses((llvm::LiveIntervals *)v19, v21);
  }
}

uint64_t sub_1C4AFE27C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  llvm *v7;
  uint64_t v8;
  llvm::DataLayout *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  const void *v19;
  unsigned int IndexTypeSizeInBits;

  v3 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v4 = *(_QWORD *)(a2 + 48);
  if ((v4 & 7) != 0)
  {
    v5 = *(_QWORD **)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a2 + 48) = v4 & 0xFFFFFFFFFFFFFFF8;
  }
  result = 0;
  if ((*v5 & 4) != 0)
    return result;
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == 0)
    return result;
  v7 = llvm::Value::stripPointerCasts((llvm::Value *)(*v5 & 0xFFFFFFFFFFFFFFF8));
  result = (uint64_t)llvm::getUnderlyingObject(v7, (const llvm::Value *)6);
  if (!result)
    return result;
  v8 = result;
  if (*(_BYTE *)(result + 16) != 3)
    return 0;
  v9 = (llvm::DataLayout *)(v3 + 272);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v9, *(_QWORD *)v7);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, 0, 0);
  else
    v19 = 0;
  v11 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v7, v9, &v19, 1, 0, 0, v10);
  if (IndexTypeSizeInBits > 0x40)
  {
    v12 = *(_QWORD *)v19;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v12 = (uint64_t)((_QWORD)v19 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  if (*(_BYTE *)(v8 + 16) != 3)
    v8 = 0;
  v13 = v5[1];
  if ((v5[3] & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v15 = (unint64_t)(sub_1C4825F50(v5 + 3) + 7) >> 3;
    if ((_DWORD)v14 == 1)
  }
  else
  {
    v15 = -1;
  }
  v19 = 0;
  if ((sub_1C4B04B98(*(_QWORD *)(a1 + 256), *(_DWORD *)(a1 + 272), (uint64_t)v5, &v19) & 1) != 0)
    return 1;
  v16 = *(_DWORD *)(a1 + 264);
  v17 = *(_DWORD *)(a1 + 272);
  if (4 * v16 + 4 >= 3 * v17)
  {
    v17 *= 2;
    goto LABEL_25;
  }
  if (v17 + ~v16 - *(_DWORD *)(a1 + 268) <= v17 >> 3)
  {
LABEL_25:
    sub_1C4B04C24(a1 + 256, v17);
    v19 = 0;
    sub_1C4B04B98(*(_QWORD *)(a1 + 256), *(_DWORD *)(a1 + 272), (uint64_t)v5, &v19);
  }
  v18 = v19;
  ++*(_DWORD *)(a1 + 264);
  if (*v18 != -4096)
    --*(_DWORD *)(a1 + 268);
  *v18 = v5;
  v18[1] = v8;
  v18[2] = v11;
  v18[3] = v13 + v12;
  result = 1;
  v18[4] = v15;
  return result;
}

uint64_t sub_1C4AFE4C8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1 == a1 + 48)
    return 0;
  while (**(_WORD **)(v1 + 16) != 6722 || *(_DWORD *)(*(_QWORD *)(v1 + 32) + 68) != 15)
  {
    if ((*(_BYTE *)v1 & 4) == 0)
    {
      while ((*(_WORD *)(v1 + 44) & 8) != 0)
        v1 = *(_QWORD *)(v1 + 8);
    }
    v1 = *(_QWORD *)(v1 + 8);
    if (v1 == a1 + 48)
      return 0;
  }
  return 1;
}

uint64_t sub_1C4AFE530(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunction *v3;
  llvm::MachineInstr *v4;
  llvm::MachineInstr *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _UNKNOWN ***v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = &off_1E7FB1B88;
  v13 = 2;
  v3 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 6722, &v12, 1, 0, 0, 0);
  v5 = v4;
  LODWORD(v8) = 1;
  v9 = 0;
  v10 = 0;
  llvm::MachineInstr::addOperand(v4, v3, (const llvm::MachineOperand *)&v8);
  v9 = 0;
  v10 = 0;
  v8 = 0x4500000000;
  v11 = 0;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v8);
  LODWORD(v8) = 1;
  v9 = 0;
  v10 = 0;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v8);
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v5 + 4) + 4);
}

uint64_t sub_1C4AFE664(uint64_t a1, uint64_t a2, int a3)
{
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  uint64_t v8;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN ***v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = &off_1E7FB1B88;
  v15 = 2;
  v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 375, &v14, 1, 0, 0, 0);
  v7 = v6;
  v10[0] = 1;
  v11 = 0;
  v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
  v11 = 0;
  v12 = 0;
  v10[0] = 0;
  v10[1] = a3;
  v13 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  v11 = 0;
  v12 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  v11 = 0;
  v12 = 31;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v7 + 4) + 4);
}

uint64_t sub_1C4AFE7B8(uint64_t a1, uint64_t a2, int a3)
{
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  uint64_t v8;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN ***v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = &off_1E7FB1B88;
  v15 = 2;
  v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 402, &v14, 1, 0, 0, 0);
  v7 = v6;
  v10[0] = 1;
  v11 = 0;
  v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
  v11 = 0;
  v12 = 0;
  v10[0] = 0;
  v10[1] = a3;
  v13 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  v11 = 0;
  v12 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  v11 = 0;
  v12 = 31;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v7 + 4) + 4);
}

void sub_1C4AFE90C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  llvm::GlobalValue *v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  llvm::MachineFunction *v42;
  llvm::MachineInstr *v43;
  llvm::MachineInstr *v44;
  int8x8_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int8x8_t v59;
  char v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _OWORD v68[2];
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74[4];
  unsigned __int8 *v75[5];
  _OWORD v76[2];
  __int16 ***v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v12 = *(uint64_t **)(a2 + 32);
  v13 = *(_QWORD *)(*v12 + 40);
  if (a6)
    v14 = "agc.ria.ray_driver_data";
  else
    v14 = "agc.ria.ray_user_data";
  if (a6)
    v15 = 23;
  else
    v15 = 21;
  v16 = sub_1C4FB7E80(*(uint64_t **)(v13 + 112), (unsigned __int8 *)v14, v15);
  if (v16)
  {
    v17 = (llvm::GlobalValue *)v16;
    if (*(_BYTE *)(v16 + 16) == 3 && (*(_DWORD *)(v16 + 32) & 0xFu) - 7 >= 2 && *(_QWORD *)(a1 + 520))
    {
      v18 = sub_1C5EABB98(v13);
      v64 = sub_1C5EABC98(v13);
      v65 = v18;
      if (v18)
        v19 = a6;
      else
        v19 = 1;
      v60 = v19;
      sub_1C4B0078C((uint64_t)v76, a1, *(_QWORD *)(a1 + 520), a6 ^ 1);
      v20 = atomic_load((unsigned __int8 *)&qword_1ED7EE908);
      if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE908))
      {
        qword_1ED7EE900 = 512;
        __cxa_guard_release(&qword_1ED7EE908);
      }
      v21 = *(unsigned int *)(a1 + 640);
      v66 = a5;
      v67 = a1;
      if ((_DWORD)v21)
      {
        v61 = a3;
        v63 = a4;
        v22 = 0;
        LOBYTE(v23) = 0;
        v24 = *(uint64_t **)(a1 + 632);
        v25 = &v24[2 * v21];
        do
        {
          v26 = v24 + 1;
          if (a6)
            v27 = v24;
          else
            v27 = v24 + 1;
          v28 = *v27;
          if ((*(_QWORD *)(*v27 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            v30 = sub_1C4825F50((unint64_t *)(*v27 + 24));
            if ((_DWORD)v29 == 1)
            v31 = (unint64_t)(v30 + 7) >> 3;
            v28 = *v27;
          }
          else
          {
            v31 = -1;
          }
          if (v22 <= v31)
            v22 = v31;
          v32 = (1 << *(_BYTE *)(v28 + 34)) | *(_QWORD *)(v28 + 8);
          v33 = 63 - __clz(v32 & -v32);
          if (v23 <= v33)
            v23 = v33;
          else
            v23 = v23;
          v24 = v26 + 1;
        }
        while (v26 + 1 != v25);
        v34 = v22 - 1;
        a3 = v61;
        a4 = v63;
      }
      else
      {
        v23 = 0;
        v34 = -1;
      }
      v35 = ((1 << v23) + v34) & -(1 << v23);
      if (qword_1ED7EE900 < v35)
        v35 = qword_1ED7EE900;
      if (v23 >= 2 && v35 != 0)
      {
        v62 = v35;
        v75[4] = 0;
        v74[0] = (uint64_t)&off_1E816EC08;
        v74[1] = (uint64_t)v12;
        v74[3] = v12[5];
        v74[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12[2] + 104))(v12[2]);
        v75[0] = 0;
        v75[1] = (unsigned __int8 *)a2;
        v37 = v12[43];
        v75[2] = a3;
        v75[3] = 0;
        if (a6)
          v38 = v64 != 0;
        else
          v38 = v65 != 0;
        if (v38)
        {
          v39 = v67;
          if ((v60 & 1) != 0)
            v40 = sub_1C63A39CC(v37);
          else
            v40 = sub_1C5EABBE8(v37);
          v71 = 0;
          v72 = 64;
          v73 = 0;
          v69 = 519;
          v70 = v40 >> 1;
          v79 = xmmword_1C640F840;
          v41 = sub_1C4C640F8(77, 4, &v79);
          v77 = &off_1E7FB1568;
          v78 = 2;
          v42 = (llvm::MachineFunction *)sub_1C5548620(v74, v41, (uint64_t *)&v77, 1, 0, 0, 0);
          v44 = v43;
          LODWORD(v79) = 1;
          *((_QWORD *)&v79 + 1) = 0;
          v80 = 0;
          llvm::MachineInstr::addOperand(v43, v42, (const llvm::MachineOperand *)&v79);
          *((_QWORD *)&v79 + 1) = 0;
          v80 = 0;
          LODWORD(v79) = 0;
          DWORD1(v79) = a4;
          v81 = 0;
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v79);
          LODWORD(v79) = 1;
          *((_QWORD *)&v79 + 1) = 0;
          v80 = 0;
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v79);
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)v76);
          LODWORD(v79) = 1;
          *((_QWORD *)&v79 + 1) = 0;
          v80 = 0;
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v79);
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v69);
          LODWORD(v79) = 1;
          *((_QWORD *)&v79 + 1) = 0;
          v80 = 0;
          llvm::MachineInstr::addOperand(v44, v42, (const llvm::MachineOperand *)&v79);
          v46 = *(unsigned int *)(v67 + 336);
          if (v46 >= *(_DWORD *)(v67 + 340))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v67 + 328, v67 + 344, v46 + 1, 8);
            LODWORD(v46) = *(_DWORD *)(v67 + 336);
          }
          v47 = a4;
          *(_QWORD *)(*(_QWORD *)(v67 + 328) + 8 * v46) = v44;
          ++*(_DWORD *)(v67 + 336);
          v48 = *(_DWORD *)(*((_QWORD *)v44 + 4) + 4);
          v49 = v62;
        }
        else
        {
          v50 = sub_1C4A17AE8(v12[2]);
          v51 = sub_1C5EAB3E0(v17, 0, v37, v50 << 32);
          v39 = v67;
          v52 = sub_1C4AFF798((uint64_t)v74, v67 + 328, v51);
          v68[0] = v76[0];
          v68[1] = v76[1];
          v47 = a4;
          v48 = sub_1C4B005C4((uint64_t)v74, v67 + 328, a4, (const llvm::MachineOperand *)v68, v52);
          v49 = v62;
        }
        sub_1C4AFEEB4(v39, v74, v48, v66, v49, v23, (uint64_t)v17, v45);
        v53 = *(unsigned int *)(v39 + 536);
        if ((_DWORD)v53)
        {
          v54 = *(uint64_t **)(v67 + 528);
          v55 = 8 * v53;
          do
          {
            v56 = *v54;
            if ((*(_QWORD *)(*(_QWORD *)(*v54 + 32) + 80) == 0) != a6)
            {
              sub_1C4B0078C((uint64_t)&v79, v67, *v54, 0);
              v57 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 48);
              v58 = sub_1C4AFF8B8((uint64_t)v74, v67 + 328, v47, v57, SDWORD1(v79));
              sub_1C4AFEEB4(v67, v74, v58, v66, v57, v23, (uint64_t)v17, v59);
            }
            ++v54;
            v55 -= 8;
          }
          while (v55);
        }
        v74[0] = (uint64_t)&off_1E816EC08;
        if (v75[0])
          llvm::MetadataTracking::untrack((uint64_t)v75, v75[0]);
      }
    }
  }
}

void sub_1C4AFEEB4(uint64_t a1, _QWORD *a2, int a3, int a4, unsigned int a5, char a6, uint64_t a7, int8x8_t a8)
{
  uint64_t v8;
  char v9;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint8x8_t v18;
  __int32 v19;
  unsigned int v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 ***v32;
  uint64_t v33;
  int IncompleteVirtualRegister;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v57;
  uint64_t v58;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if (a5)
  {
    v8 = a7;
    v9 = a6;
    v11 = 0;
    v12 = a2[1];
    v58 = *(_QWORD *)(v12 + 16);
    v48 = a1 + 328;
    v49 = v12;
    v47 = a1 + 344;
    v52 = v12 + 128;
    v53 = a7 & 0xFFFFFFFFFFFFFFFBLL;
    v51 = ((((unint64_t)(32 * a5) >> 5) & 0xFFFFFF) << 11) | 1;
    v54 = a5;
    do
    {
      LODWORD(v13) = a5 - v11;
      if (a5 - v11 >= 0x10)
        v13 = 16;
      else
        v13 = v13;
      v14 = 1 << ~__clz(v13);
      if ((_DWORD)v13)
        v15 = v14;
      else
        v15 = 0;
      v57 = v15;
      v16 = ~(-1 << (v15 >> 2));
      if (*(_BYTE *)(v58 + 366))
        v17 = 5674;
      else
        v17 = 5722;
      a8.i32[0] = ~(-1 << (v15 >> 2));
      v18 = (uint8x8_t)vcnt_s8(a8);
      v18.i16[0] = vaddlv_u8(v18);
      v19 = v18.i32[0];
      v20 = sub_1C4C915F0(v17, 34, v18.i32[0] + 54);
      v22 = sub_1C55437B8(a2, v20);
      v23 = (unint64_t *)v21;
      v24 = (unint64_t *)a2[6];
      v25 = *(_QWORD *)(a2[5] + 40);
      *(_QWORD *)(v21 + 24) = v25;
      v26 = *(_QWORD *)(v25 + 32);
      v27 = *(unsigned int *)(v21 + 40);
      if ((_DWORD)v27)
      {
        v40 = *(_QWORD *)(v21 + 32);
        v41 = *(_QWORD *)(v26 + 40);
        v42 = 32 * v27;
        do
        {
          if (!*(_BYTE *)v40)
          {
            v43 = *(unsigned int *)(v40 + 4);
            if ((int)v43 >= 0)
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 272) + 8 * v43);
            else
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
            v45 = *v44;
            if (*v44)
            {
              v46 = *(_QWORD *)(v45 + 16);
              *(_QWORD *)(v45 + 16) = v40;
              *(_QWORD *)(v40 + 16) = v46;
              if ((*(_BYTE *)(v40 + 3) & 1) != 0)
              {
                *(_QWORD *)(v40 + 24) = v45;
              }
              else
              {
                *(_QWORD *)(v40 + 24) = 0;
                v44 = (uint64_t *)(v46 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v40 + 16) = v40;
              *(_QWORD *)(v40 + 24) = 0;
            }
            *v44 = v40;
          }
          v40 += 32;
          v42 -= 32;
        }
        while (v42);
      }
      v28 = *(_QWORD *)(v26 + 728);
      if (v28)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v21);
      v29 = *v24 & 0xFFFFFFFFFFFFFFF8;
      *v23 = v29 | *v23 & 7;
      v23[1] = (unint64_t)v24;
      *(_QWORD *)(v29 + 8) = v23;
      *v24 = *v24 & 7 | (unint64_t)v23;
      v30 = a2[7];
      if (v30)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v30 + 24))(v30, v23);
      if (!*(_BYTE *)(v58 + 366))
      {
        v31 = v8;
        v32 = (&off_1E7FB3C18)[v19 - 1];
        v33 = *(_QWORD *)(v49 + 40);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v33, "", 0);
        *(_QWORD *)(*(_QWORD *)(v33 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v32;
        v35 = *(_QWORD *)(v33 + 8);
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v60 = 0x1000000;
        v61 = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
        v8 = v31;
        v9 = a6;
      }
      v60 = 1;
      v62 = 0;
      v63 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v60 = 1;
      v62 = 0;
      v63 = (16 * v16) | 0x20002;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v62 = 0;
      v60 = 0;
      v61 = a3;
      v63 = 0;
      v64 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v60 = 1;
      v62 = 0;
      v63 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v62 = 0;
      v60 = 0;
      v61 = a4;
      v63 = 0;
      v64 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v60 = 1;
      v62 = 0;
      v63 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v60 = 1;
      v62 = 0;
      v63 = 32 * v11;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      v60 = 1;
      v62 = 0;
      v63 = v57;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v60);
      if (v8)
      {
        v36 = *(_DWORD *)(*(_QWORD *)v8 + 8);
        if ((v36 & 0xFE) == 0x12)
          v36 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 16) + 8);
        v37 = v36 >> 8;
      }
      else
      {
        v37 = 0;
      }
      v38 = sub_1C484358C(v52, 80, 3);
      *(_QWORD *)v38 = v53;
      *(_QWORD *)(v38 + 8) = 0;
      *(_DWORD *)(v38 + 16) = v37;
      *(_BYTE *)(v38 + 20) = 0;
      *(_QWORD *)(v38 + 24) = v51;
      *(_WORD *)(v38 + 32) = 2;
      *(_BYTE *)(v38 + 34) = v9;
      *(_OWORD *)(v38 + 40) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *(_QWORD *)(v38 + 72) = 0;
      *(_WORD *)(v38 + 36) = 1;
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v23, v22, (llvm::MachineMemOperand *)v38);
      v39 = *(unsigned int *)(a1 + 336);
      if (v39 >= *(unsigned int *)(a1 + 340))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v48, v47, v39 + 1, 8);
        v39 = *(unsigned int *)(a1 + 336);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v39) = v23;
      ++*(_DWORD *)(a1 + 336);
      v11 += v57;
      a5 = v54;
    }
    while (v11 < v54);
  }
}

void sub_1C4AFF340(uint64_t a1, _QWORD *a2, int a3, int a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint8x8_t v14;
  __int32 v15;
  unsigned int v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 ***v29;
  uint64_t v30;
  int IncompleteVirtualRegister;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (a4 >= 1)
  {
    v6 = a5;
    v7 = a2;
    v8 = 0;
    v9 = a2[1];
    v53 = *(_QWORD *)(v9 + 16);
    v44 = a1 + 344;
    v45 = a1 + 328;
    v46 = v9;
    v49 = v9 + 128;
    v50 = a5 & 0xFFFFFFFFFFFFFFFBLL;
    v48 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
    v51 = a4;
    do
    {
      LODWORD(v10) = a4 - v8;
      if ((a4 - v8) >= 0x10)
        v10 = 16;
      else
        v10 = v10;
      v11 = -1 << ((unint64_t)(1 << ~__clz(v10)) >> 2);
      if ((_DWORD)v10)
        v12 = ~v11;
      else
        v12 = 0;
      if (*(_BYTE *)(v53 + 366))
        v13 = 5675;
      else
        v13 = 5723;
      a6.i32[0] = v12;
      v14 = (uint8x8_t)vcnt_s8(a6);
      v14.i16[0] = vaddlv_u8(v14);
      v15 = v14.i32[0];
      v16 = sub_1C4C915F0(v13, 34, v14.i32[0] + 54);
      v18 = sub_1C55437B8(v7, v16);
      v19 = (unint64_t *)v17;
      v20 = (unint64_t *)v7[6];
      v21 = *(_QWORD *)(v7[5] + 40);
      *(_QWORD *)(v17 + 24) = v21;
      v22 = *(_QWORD *)(v21 + 32);
      v23 = *(unsigned int *)(v17 + 40);
      if ((_DWORD)v23)
      {
        v37 = *(_QWORD *)(v17 + 32);
        v38 = *(_QWORD *)(v22 + 40);
        v39 = 32 * v23;
        do
        {
          if (!*(_BYTE *)v37)
          {
            v40 = *(unsigned int *)(v37 + 4);
            if ((int)v40 >= 0)
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v40);
            else
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
            v42 = *v41;
            if (*v41)
            {
              v43 = *(_QWORD *)(v42 + 16);
              *(_QWORD *)(v42 + 16) = v37;
              *(_QWORD *)(v37 + 16) = v43;
              if ((*(_BYTE *)(v37 + 3) & 1) != 0)
              {
                *(_QWORD *)(v37 + 24) = v42;
              }
              else
              {
                *(_QWORD *)(v37 + 24) = 0;
                v41 = (uint64_t *)(v43 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v37 + 16) = v37;
              *(_QWORD *)(v37 + 24) = 0;
            }
            *v41 = v37;
          }
          v37 += 32;
          v39 -= 32;
        }
        while (v39);
      }
      v24 = *(_QWORD *)(v22 + 728);
      if (v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v17);
      v25 = *v20 & 0xFFFFFFFFFFFFFFF8;
      *v19 = v25 | *v19 & 7;
      v19[1] = (unint64_t)v20;
      *(_QWORD *)(v25 + 8) = v19;
      *v20 = *v20 & 7 | (unint64_t)v19;
      v26 = v7;
      v27 = v7[7];
      if (v27)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v27 + 24))(v27, v19);
      v28 = v6;
      if (!*(_BYTE *)(v53 + 366))
      {
        v29 = (&off_1E7FB3C18)[v15 - 1];
        v30 = *(_QWORD *)(v46 + 40);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
        *(_QWORD *)(*(_QWORD *)(v30 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v29;
        v32 = *(_QWORD *)(v30 + 8);
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v54 = 0x1000000;
        v55 = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      }
      v54 = 1;
      v56 = 0;
      v57 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v54 = 1;
      v56 = 0;
      v57 = (16 * v12) | 0x20002;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v56 = 0;
      v54 = 0;
      v55 = a3;
      v57 = 0;
      v58 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v54 = 1;
      v56 = 0;
      v57 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v54 = 1;
      v56 = 0;
      v57 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v54 = 1;
      v56 = 0;
      v57 = v8;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v54 = 1;
      v56 = 0;
      v57 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v54);
      v6 = v28;
      if (v28)
      {
        v33 = *(_DWORD *)(*(_QWORD *)v28 + 8);
        v7 = v26;
        if ((v33 & 0xFE) == 0x12)
          v33 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
        v34 = v33 >> 8;
      }
      else
      {
        v34 = 0;
        v7 = v26;
      }
      v35 = sub_1C484358C(v49, 80, 3);
      *(_QWORD *)v35 = v50;
      *(_QWORD *)(v35 + 8) = v8;
      *(_DWORD *)(v35 + 16) = v34;
      *(_BYTE *)(v35 + 20) = 0;
      *(_QWORD *)(v35 + 24) = v48;
      *(_WORD *)(v35 + 32) = 2;
      *(_BYTE *)(v35 + 34) = 4;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_QWORD *)(v35 + 72) = 0;
      *(_WORD *)(v35 + 36) = 1;
      llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v19, v18, (llvm::MachineMemOperand *)v35);
      v36 = *(unsigned int *)(a1 + 336);
      if (v36 >= *(unsigned int *)(a1 + 340))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v45, v44, v36 + 1, 8);
        v36 = *(unsigned int *)(a1 + 336);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v36) = v19;
      ++*(_DWORD *)(a1 + 336);
      v8 += 16;
      a4 = v51;
    }
    while (v8 < v51);
  }
}

uint64_t sub_1C4AFF798(uint64_t a1, uint64_t a2, unsigned int a3)
{
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 ***v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = &off_1E7FB1568;
  v14 = 2;
  v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 5625, &v13, 1, 0, 0, 0);
  v7 = v6;
  v10 = 1;
  v11 = 0;
  v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v10);
  v10 = 1;
  v11 = 0;
  v12 = a3;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)&v10);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v7 + 4) + 4);
}

uint64_t sub_1C4AFF8B8(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  uint64_t v14;
  __int16 ***v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = xmmword_1C677F4E0;
  v10 = sub_1C4C640F8(77, 4, &v18);
  v16 = &off_1E7FB1568;
  v17 = 2;
  v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v10, &v16, 1, 0, 0, 0);
  v13 = v12;
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v18);
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a3;
  v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = a4;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a5;
  v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v13 + 4) + 4);
}

uint64_t sub_1C4AFFA74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  llvm::MachineFunction *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  uint64_t v12;
  __int16 ***v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  LODWORD(v17) = 0;
  v8 = sub_1C4C640F8(67, 3, &v16);
  v14 = &off_1E7FB1568;
  v15 = 2;
  v9 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, &v14, 1, 0, 0, 0);
  v11 = v10;
  LODWORD(v16) = 1;
  v17 = 0;
  v18 = 0;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v16);
  v17 = 0;
  v18 = 0;
  LODWORD(v16) = 0;
  HIDWORD(v16) = a3;
  v19 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 1;
  v17 = 0;
  v18 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  v17 = 0;
  v18 = 0;
  LODWORD(v16) = 0;
  HIDWORD(v16) = a4;
  v19 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 1;
  v17 = 0;
  v18 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v11;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v11 + 4) + 4);
}

uint64_t sub_1C4AFFC04(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v6 = a2 + 48;
  v7 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(_BYTE *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v7 != v6)
  {
    v8 = *(unsigned __int16 **)(v7 + 16);
    v9 = *v8;
    v10 = sub_1C4C915C4(v9);
    if ((v8[4] & 8) != 0)
    {
      if ((v9 - 263) < 2)
        goto LABEL_37;
      v11 = v10 & 0xFF00000000;
      if ((v10 & 0xFF00000000) == 0)
        goto LABEL_14;
    }
    else
    {
      if ((v10 & 0xFF00000000) == 0)
        llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
      if ((_DWORD)v10 == 18)
      {
LABEL_37:
        v20 = v7 + 8;
        return *(_QWORD *)v20;
      }
      v11 = 1;
    }
    if ((_DWORD)v10 == 85)
      goto LABEL_37;
LABEL_14:
    if (v11)
    {
      if ((_DWORD)v10 == 192)
      {
        v14 = *(_QWORD *)(v7 + 48);
        if ((v14 & 7) != 0)
        {
          v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v15 = v14 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v7 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
        }
        v22 = 0;
        v18 = sub_1C4B0355C(*(_QWORD *)(a1 + 256), *(_DWORD *)(a1 + 272), v15, &v22);
        v19 = v22;
        if (!v18)
          v19 = *(_QWORD *)(a1 + 256) + 40 * *(unsigned int *)(a1 + 272);
        sub_1C4AFC47C(*(_QWORD *)(v19 + 8));
      }
      else if ((_DWORD)v10 == 98)
      {
        v12 = *(_QWORD *)(v7 + 48);
        if ((v12 & 7) != 0)
        {
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v7 + 48) = v12 & 0xFFFFFFFFFFFFFFF8;
        }
        v22 = 0;
        v16 = sub_1C4B0355C(*(_QWORD *)(a1 + 256), *(_DWORD *)(a1 + 272), v13, &v22);
        v17 = v22;
        if (!v16)
          v17 = *(_QWORD *)(a1 + 256) + 40 * *(unsigned int *)(a1 + 272);
        if (sub_1C4AFC47C(*(_QWORD *)(v17 + 8)) == a3)
          goto LABEL_37;
      }
    }
    v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v20 = a2 + 56;
  return *(_QWORD *)v20;
}

uint64_t sub_1C4AFFDE8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t NearestCommonDominator;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  const char *v77;
  unint64_t v78;
  _QWORD *v79;
  unsigned __int8 v80;
  uint64_t v81;
  _BOOL4 v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;

  v87 = 0;
  v88 = 0;
  v89 = 0;
  v8 = *(_QWORD *)(a1 + 416);
  v9 = 424;
  if (v8 == *(_QWORD *)(a1 + 408))
    v9 = 428;
  v10 = *(unsigned int *)(a1 + v9);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = *(uint64_t **)(a1 + 416);
    while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_59;
    }
  }
  else
  {
    v12 = *(uint64_t **)(a1 + 416);
  }
  v13 = (_QWORD *)(v8 + 8 * v10);
  if (v12 == v13)
  {
    LODWORD(v11) = 0;
LABEL_59:
    v38 = 0;
    goto LABEL_60;
  }
  v14 = *v12;
LABEL_11:
  v91 = 0;
  v15 = sub_1C6159428(a1, v14, a2, a3, a4);
  v91 = v15;
  if (v15)
  {
    v16 = v87;
    v17 = v89;
    v18 = v87;
    if (v89)
    {
      LODWORD(v19) = (v89 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v18 = &v87[2 * v19];
      v20 = *v18;
      if (v15 != *v18)
      {
        v36 = 1;
        while (v20 != -4096)
        {
          v37 = v19 + v36++;
          v19 = v37 & (v89 - 1);
          v20 = v87[2 * v19];
          if (v15 == v20)
          {
            v18 = &v87[2 * v19];
            goto LABEL_14;
          }
        }
        v18 = &v87[2 * v89];
      }
    }
LABEL_14:
    if (a2 == 1)
    {
      LODWORD(v21) = 32;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 608);
      v23 = *(unsigned int *)(a1 + 624);
      v24 = (_QWORD *)(v22 + 16 * v23);
      v84 = a3;
      v85 = a4;
      v83 = v18;
      if (*(_DWORD *)(a1 + 616))
      {
        if (*(_DWORD *)(a1 + 624))
        {
          v25 = 16 * v23;
          v26 = *(_QWORD **)(a1 + 608);
          while ((*v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v26 += 2;
            v25 -= 16;
            if (!v25)
              goto LABEL_21;
          }
        }
        else
        {
          v26 = *(_QWORD **)(a1 + 608);
        }
      }
      else
      {
LABEL_21:
        v26 = (_QWORD *)(v22 + 16 * v23);
      }
      v27 = (_QWORD *)(v22 + 16 * v23);
      v21 = 32;
      if (v26 != v27)
      {
        do
        {
          if (*(_QWORD *)(*v26 + 24) == v14)
          {
            v28 = v26[1];
            v30 = *(_QWORD *)(v28 + 24);
            v29 = (unint64_t *)(v28 + 24);
            if ((v30 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              v32 = (unint64_t)(sub_1C4825F50(v29) + 7) >> 3;
              if ((_DWORD)v31 == 1)
            }
            else
            {
              v32 = -1;
            }
            if (v21 <= v32)
              v21 = v32;
          }
          v33 = v26 + 2;
          v26 = v24;
          if (v33 != v24)
          {
            v26 = v33;
            while ((*v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v26 += 2;
              if (v26 == v24)
              {
                v26 = v24;
                break;
              }
            }
          }
        }
        while (v26 != v27);
        v16 = v87;
        v17 = v89;
      }
      a3 = v84;
      a4 = v85;
      v18 = v83;
    }
    if (v18 != &v16[2 * v17] && *((_DWORD *)v18 + 2) > v21)
      LODWORD(v21) = *((_DWORD *)v18 + 2);
    *((_DWORD *)sub_1C49D78CC((uint64_t)&v87, &v91) + 2) = v21;
  }
  v34 = (unint64_t *)(v12 + 1);
  while (v34 != v13)
  {
    v35 = *v34++;
    v14 = v35;
    if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = (uint64_t *)(v34 - 1);
      goto LABEL_11;
    }
  }
  v38 = v87;
  v39 = v88;
  LODWORD(v11) = v89;
  if (!(_DWORD)v88)
  {
LABEL_60:
    v39 = 0;
    v42 = &v38[2 * v11];
    v40 = v42;
    goto LABEL_61;
  }
  v40 = &v87[2 * v89];
  if (v89)
  {
    v41 = 0;
    while ((v87[v41] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v41 += 2;
      if (2 * v89 == v41)
      {
        v42 = &v87[2 * v89];
        goto LABEL_61;
      }
    }
    v42 = &v87[v41];
  }
  else
  {
    v42 = v87;
  }
LABEL_61:
  v43 = &v38[2 * v11];
  if (v42 == v43)
  {
    v44 = 0;
    if (!v39)
      goto LABEL_78;
LABEL_76:
    v49 = atomic_load((unsigned __int8 *)&qword_1ED7EE910);
    if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE910))
    {
      byte_1ED7EE8C4 = 0;
      __cxa_guard_release(&qword_1ED7EE910);
    }
    if (byte_1ED7EE8C4)
      goto LABEL_78;
    v51 = v89;
    v52 = &v87[2 * v89];
    if ((_DWORD)v88)
    {
      if (v89)
      {
        v53 = 16 * v89;
        v54 = v53;
        v55 = v87;
        while (1)
        {
          v56 = *v55;
          if ((*v55 | 0x1000) != 0xFFFFFFFFFFFFF000)
            break;
          v55 += 2;
          v54 -= 16;
          if (!v54)
          {
            v56 = *v52;
            break;
          }
        }
        v57 = *(_QWORD *)(v56 + 32);
        v58 = *(_QWORD *)(v57 + 328);
        v59 = v87;
        while ((*v59 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v59 += 2;
          v53 -= 16;
          if (!v53)
          {
            v59 = &v87[2 * v89];
            goto LABEL_94;
          }
        }
        goto LABEL_94;
      }
      v59 = v87;
    }
    else
    {
      v59 = &v87[2 * v89];
    }
    v57 = *(_QWORD *)(*v59 + 32);
    v58 = *(_QWORD *)(v57 + 328);
    v51 = v89;
LABEL_94:
    v60 = &v87[2 * v51];
LABEL_95:
    while (v59 != v60)
    {
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 248), v58, *v59);
      if (!NearestCommonDominator)
        goto LABEL_78;
      v58 = NearestCommonDominator;
      v62 = v59 + 2;
      v59 = v52;
      if (v62 != v52)
      {
        v59 = v62;
        while ((*v59 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v59 += 2;
          if (v59 == v52)
          {
            v59 = v52;
            goto LABEL_95;
          }
        }
      }
    }
    v63 = sub_1C6159428(a1, v58, a2, a3, a4);
    if (v63)
    {
      v64 = v63;
      if (a2 != 3 || sub_1C4B004D4(*(_DWORD *)(a1 + 504), v63, *(_QWORD *)(a1 + 304)))
      {
        v90 = 0;
        v91 = v64;
        if ((sub_1C4926528((uint64_t)&v87, &v91, &v90) & 1) == 0)
        {
          v65 = sub_1C4AFFC04(a1, v64, a2);
          v66 = v65;
          if (a2 == 3)
          {
            v67 = *(_QWORD *)(a1 + 608);
            v68 = *(unsigned int *)(a1 + 624);
            v69 = (_QWORD *)(v67 + 16 * v68);
            v86 = v65;
            if (*(_DWORD *)(a1 + 616))
            {
              if ((_DWORD)v68)
              {
                v72 = 16 * v68;
                v70 = *(_QWORD **)(a1 + 608);
                while ((*v70 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v70 += 2;
                  v72 -= 16;
                  if (!v72)
                    goto LABEL_114;
                }
              }
              else
              {
                v70 = *(_QWORD **)(a1 + 608);
              }
            }
            else
            {
LABEL_114:
              v70 = (_QWORD *)(v67 + 16 * v68);
            }
            v73 = (_QWORD *)(v67 + 16 * v68);
            v71 = 32;
LABEL_116:
            while (v70 != v73)
            {
              v74 = v70[1];
              v76 = *(_QWORD *)(v74 + 24);
              v75 = (unint64_t *)(v74 + 24);
              if ((v76 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                v78 = (unint64_t)(sub_1C4825F50(v75) + 7) >> 3;
                if ((_DWORD)v77 == 1)
              }
              else
              {
                v78 = -1;
              }
              if (v71 <= v78)
                v71 = v78;
              v79 = v70 + 2;
              v70 = v69;
              if (v79 != v69)
              {
                v70 = v79;
                while ((*v70 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v70 += 2;
                  if (v70 == v69)
                  {
                    v70 = v69;
                    goto LABEL_116;
                  }
                }
              }
            }
            v66 = v86;
          }
          else
          {
            LODWORD(v71) = 32;
          }
          v80 = atomic_load((unsigned __int8 *)&qword_1ED7EE918);
          if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE918))
          {
            byte_1ED7EE8C5 = 0;
            __cxa_guard_release(&qword_1ED7EE918);
          }
          v81 = *(_QWORD *)(v57 + 48);
          if (!v81)
          {
            v81 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v57 + 8) + 216))(*(_QWORD *)(v57 + 8), v57 + 128, v57);
            *(_QWORD *)(v57 + 48) = v81;
          }
          v82 = 0;
          if (a2 == 1 && !byte_1ED7EE8C5)
            v82 = *(_BYTE *)(v81 + 561) != 0;
          sub_1C615921C(a1, v64, v66, a2, v71, v82);
        }
      }
    }
    goto LABEL_78;
  }
  v44 = 0;
  do
  {
    v45 = *v42;
    v46 = *((_DWORD *)v42 + 2);
    if (a2 != 3 || sub_1C4B004D4(*(_DWORD *)(a1 + 504), *v42, *(_QWORD *)(a1 + 304)))
    {
      v48 = sub_1C4AFFC04(a1, v45, a2);
      sub_1C615921C(a1, v45, v48, a2, v46, 0);
      v44 = 1;
    }
    v47 = v42 + 2;
    v42 = v40;
    if (v47 != v40)
    {
      v42 = v47;
      while ((*v42 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v42 += 2;
        if (v42 == v40)
        {
          v42 = v40;
          break;
        }
      }
    }
  }
  while (v42 != v43);
  if ((_DWORD)v88)
    goto LABEL_76;
LABEL_78:
  MEMORY[0x1CAA32FB4](v87, 8);
  return v44 & 1;
}

BOOL sub_1C4B004D4(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
  if ((a1 & 0x80000000) != 0)
    v6 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * a1);
  v7 = *v6;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v8 = *(_QWORD *)(v7 + 24);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
      return 0;
  }
  if ((a1 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * a1);
  v11 = *v9;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
      v11 = 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 24);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a3);
  return llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(a3 + 1320), v12, a2);
}

uint64_t sub_1C4B005C4(uint64_t a1, uint64_t a2, int a3, const llvm::MachineOperand *a4, int a5)
{
  uint64_t v10;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  uint64_t v14;
  __int16 ***v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = xmmword_1C640F840;
  v10 = sub_1C4C640F8(77, 4, &v18);
  v16 = &off_1E7FB1568;
  v17 = 2;
  v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v10, &v16, 1, 0, 0, 0);
  v13 = v12;
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v18);
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a3;
  v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  llvm::MachineInstr::addOperand(v13, v11, a4);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a5;
  v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((_QWORD *)&v18 + 1) = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((_QWORD *)v13 + 4) + 4);
}

void sub_1C4B0078C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22[4];
  unsigned __int8 *v23[5];
  _DWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 ***v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 32);
  v6 = a4;
  v7 = (_OWORD *)(v5 + 32 * a4);
  if (*(_BYTE *)v7 == 7)
  {
    v8 = v7[1];
    *(_OWORD *)a1 = *v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 24);
    v23[4] = 0;
    v12 = *(_QWORD *)(v11 + 32);
    v22[0] = (uint64_t)&off_1E816EC08;
    v22[1] = v12;
    v22[3] = *(_QWORD *)(v12 + 40);
    v22[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 16) + 104))(*(_QWORD *)(v12 + 16));
    v13 = *(unsigned __int8 **)(a3 + 24);
    v23[2] = (unsigned __int8 *)a3;
    v23[3] = 0;
    v23[0] = 0;
    v23[1] = v13;
    if ((unsigned __int8 **)(a3 + 56) != v23)
    {
      v14 = *(unsigned __int8 **)(a3 + 56);
      v23[0] = v14;
      if (v14)
        llvm::MetadataTracking::track((uint64_t)v23, v14, 2);
    }
    v28 = &off_1E7FB1568;
    v29 = 2;
    v15 = (llvm::MachineFunction *)sub_1C5548620(v22, 19, (uint64_t *)&v28, 1, 0, 0, 0);
    v17 = v16;
    v18 = *(_DWORD *)(v5 + 32 * v6 + 4);
    v19 = *(_DWORD *)v7 & 0xFFF00;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v24[0] = v19;
    v24[1] = v18;
    llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)v24);
    v20 = *(unsigned int *)(a2 + 336);
    if (v20 >= *(_DWORD *)(a2 + 340))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 328, a2 + 344, v20 + 1, 8);
      LODWORD(v20) = *(_DWORD *)(a2 + 336);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 328) + 8 * v20) = v17;
    ++*(_DWORD *)(a2 + 336);
    v21 = *(_DWORD *)(*((_QWORD *)v17 + 4) + 4);
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v21;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v22[0] = (uint64_t)&off_1E816EC08;
    if (v23[0])
      llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
  }
}

uint64_t sub_1C4B00968()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  _QWORD **v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t i;
  int v23;
  unint64_t v24;
  _QWORD **v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  size_t v41;
  int v42;
  unsigned __int8 v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  llvm::MachineBasicBlock *v47;
  unint64_t FirstTerminator;
  uint64_t v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t j;
  unsigned __int16 *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ***v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ****v70;
  uint64_t ***v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t *v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  uint64_t (**v79)();
  int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t ***v85;
  uint64_t **v86;
  uint64_t **v87;
  uint64_t **v88;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  int v96;
  unsigned int v97;
  int v98;
  unint64_t v99;
  unint64_t *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  int v107;
  uint64_t v108;
  char v109;
  __n128 v110;
  int v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  BOOL v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t (***v134)();
  char *v135;
  uint64_t v136;
  llvm::GlobalValue *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int8x8_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  int8x8_t v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  llvm::GlobalValue *v155;
  unint64_t v156;
  unsigned __int16 *v157;
  uint64_t v158;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  unsigned int v163;
  int v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  llvm::GlobalValue *v175;
  uint64_t v176;
  llvm::GlobalValue *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  BOOL v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  void *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  _QWORD *v195;
  uint64_t v196;
  void **v197;
  unint64_t v198;
  __int16 ****v199;
  __int16 ***v200;
  int v201;
  unsigned __int8 v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  llvm::MachineFunction *v209;
  llvm::MachineInstr *v210;
  llvm::MachineInstr *v211;
  uint64_t v212;
  llvm::MachineFunction *v213;
  llvm::MachineInstr *v214;
  llvm::MachineInstr *v215;
  uint64_t v216;
  llvm::MachineFunction *v217;
  llvm::MachineInstr *v218;
  llvm::MachineInstr *v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int8x8_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  int v237;
  int8x8_t v238;
  unsigned __int8 *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int8 *v244;
  llvm::MachineFunction *v245;
  llvm::MachineInstr *v246;
  llvm::MachineInstr *v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  unsigned __int8 v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t *v261;
  uint64_t v262;
  const char *v263;
  unint64_t v264;
  uint64_t v265;
  unsigned __int8 v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unsigned __int8 v285;
  uint64_t v286;
  int v287;
  int v288;
  int8x8_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int8x8_t v293;
  int8x8_t v294;
  int v295;
  unsigned int v296;
  int8x8_t v297;
  llvm::GlobalValue *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  llvm::MachineFunction *v302;
  llvm::MachineInstr *v303;
  llvm::MachineInstr *v304;
  int v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  int8x8_t v310;
  llvm::GlobalValue *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  int v316;
  int v317;
  llvm::GlobalValue *v318;
  int8x8_t v319;
  unsigned __int8 v320;
  uint64_t v321;
  int v322;
  int8x8_t v323;
  int8x8_t v324;
  int v325;
  _QWORD **v326;
  int v327;
  _QWORD **v328;
  int v329;
  _QWORD **v330;
  int v331;
  _QWORD **v332;
  int v333;
  _QWORD **v334;
  int v335;
  int v336;
  unsigned int v337;
  int v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  int v342;
  int v343;
  _QWORD *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  void **v356;
  unsigned int v357;
  uint64_t v358;
  unsigned int v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  int v364;
  int v365;
  uint64_t v366;
  llvm::GlobalValue *v367;
  int v368;
  llvm::SmallPtrSetImplBase *v369;
  int v370;
  __n128 v371;
  uint64_t v372;
  unsigned int v373;
  int v374;
  void *__p;
  uint64_t v376;
  unsigned __int8 v377;
  char v378;
  uint64_t (**v379)();
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  __int16 ***v391;
  unint64_t v392;
  char v393;
  char v394;
  _UNKNOWN ***v395;
  int v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _BYTE *v401;
  uint64_t v402;
  _BYTE v403[256];
  uint64_t v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  uint64_t v409;
  void *v410[2];
  _QWORD v411[34];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v411[32] = *MEMORY[0x1E0C80C00];
  v4 = &v387;
  v5 = **(void ****)(v0 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v0 + 304) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineDominatorTree::ID);
  v7 = **(void ****)(v3 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachinePostDominatorTree::ID);
  *(_QWORD *)(v3 + 312) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachinePostDominatorTree::ID);
  v9 = **(void ****)(v3 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(v3 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LiveIntervals::ID);
  v11 = **(void ****)(v3 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v3 + 296) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachineLoopInfo::ID);
  v13 = **(void ****)(v3 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v3 + 320) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  *(_DWORD *)(v3 + 336) = 0;
  v15 = (_QWORD *)(v3 + 256);
  v16 = *(_DWORD *)(v3 + 264);
  if (v16)
  {
    v163 = *(_DWORD *)(v3 + 272);
    if (v163 > 4 * v16 && v163 >= 0x41)
    {
      v164 = 1 << (33 - __clz(v16 - 1));
      if (v164 <= 64)
        v165 = 64;
      else
        v165 = v164;
LABEL_285:
      if (v165 == v163)
      {
        *(_QWORD *)(v3 + 264) = 0;
        v166 = *(_QWORD **)(v3 + 256);
        v167 = 40 * v163;
        do
        {
          *v166 = -4096;
          v166 += 5;
          v167 -= 40;
        }
        while (v167);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v15, 8);
        if (v165)
        {
          v189 = (4 * v165 / 3u + 1) | ((unint64_t)(4 * v165 / 3u + 1) >> 1);
          v190 = v189 | (v189 >> 2) | ((v189 | (v189 >> 2)) >> 4);
          LODWORD(v190) = (((v190 | (v190 >> 8)) >> 16) | v190 | (v190 >> 8)) + 1;
          *(_DWORD *)(v3 + 272) = v190;
          v191 = operator new(40 * v190, (std::align_val_t)8uLL);
          *(_QWORD *)(v3 + 256) = v191;
          *(_QWORD *)(v3 + 264) = 0;
          v192 = *(unsigned int *)(v3 + 272);
          if ((_DWORD)v192)
          {
            v193 = 40 * v192;
            do
            {
              *v191 = -4096;
              v191 += 5;
              v193 -= 40;
            }
            while (v193);
          }
        }
        else
        {
          *v15 = 0;
          *(_QWORD *)(v3 + 264) = 0;
          *(_DWORD *)(v3 + 272) = 0;
        }
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_DWORD *)(v3 + 268))
      goto LABEL_13;
    v163 = *(_DWORD *)(v3 + 272);
    if (v163 > 0x40)
    {
      v165 = 0;
      goto LABEL_285;
    }
  }
  if (v163)
  {
    v340 = (_QWORD *)*v15;
    v341 = 40 * v163;
    do
    {
      *v340 = -4096;
      v340 += 5;
      v341 -= 40;
    }
    while (v341);
  }
  *(_QWORD *)(v3 + 264) = 0;
LABEL_13:
  v17 = *(void **)(v3 + 416);
  if (v17 == *(void **)(v3 + 408))
  {
LABEL_14:
    *(_QWORD *)(v3 + 428) = 0;
    goto LABEL_15;
  }
  v49 = *(unsigned int *)(v3 + 424);
  if (v49 < 0x21 || 4 * (*(_DWORD *)(v3 + 428) - *(_DWORD *)(v3 + 432)) >= v49)
  {
    memset(v17, 255, 8 * v49);
    goto LABEL_14;
  }
  free(v17);
  v185 = *(_DWORD *)(v3 + 428) - *(_DWORD *)(v3 + 432);
  v186 = 1 << (33 - __clz(v185 - 1));
  if (v185 <= 0x10)
    v187 = 32;
  else
    v187 = v186;
  *(_DWORD *)(v3 + 424) = v187;
  *(_QWORD *)(v3 + 428) = 0;
  v188 = malloc_type_malloc(8 * v187, 0x4065EBACuLL);
  if (!v188)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(v3 + 416) = v188;
  memset(v188, 255, 8 * *(unsigned int *)(v3 + 424));
LABEL_15:
  sub_1C4A067C4((_DWORD *)(v3 + 776));
  *(_DWORD *)(v3 + 536) = 0;
  v18 = (_QWORD **)(v3 + 608);
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  v19 = *(_DWORD *)(v3 + 616);
  if (v19)
  {
    v194 = *(_DWORD *)(v3 + 624);
    if (v194 <= 4 * v19 || v194 < 0x41)
    {
      if (!v194)
      {
LABEL_329:
        *(_QWORD *)(v3 + 616) = 0;
        goto LABEL_17;
      }
LABEL_327:
      v195 = *v18;
      v196 = 16 * v194;
      do
      {
        *v195 = -4096;
        v195 += 2;
        v196 -= 16;
      }
      while (v196);
      goto LABEL_329;
    }
    v339 = (_QWORD *)(v3 + 608);
    v342 = 1 << (33 - __clz(v19 - 1));
    if (v342 <= 64)
      v343 = 64;
    else
      v343 = v342;
  }
  else
  {
    if (!*(_DWORD *)(v3 + 620))
      goto LABEL_17;
    v339 = (_QWORD *)(v3 + 608);
    v194 = *(_DWORD *)(v3 + 624);
    if (v194 <= 0x40)
    {
      if (!v194)
        goto LABEL_329;
      goto LABEL_327;
    }
    v343 = 0;
  }
  if (v343 == v194)
  {
    *(_QWORD *)(v3 + 616) = 0;
    v344 = *(_QWORD **)(v3 + 608);
    v345 = 16 * v194;
    v18 = (_QWORD **)v339;
    do
    {
      *v344 = -4096;
      v344 += 2;
      v345 -= 16;
    }
    while (v345);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v339, 8);
    if (v343)
    {
      v346 = (4 * v343 / 3u + 1) | ((unint64_t)(4 * v343 / 3u + 1) >> 1);
      v347 = v346 | (v346 >> 2) | ((v346 | (v346 >> 2)) >> 4);
      LODWORD(v347) = (((v347 | (v347 >> 8)) >> 16) | v347 | (v347 >> 8)) + 1;
      *(_DWORD *)(v3 + 624) = v347;
      v348 = operator new(16 * v347, (std::align_val_t)8uLL);
      *(_QWORD *)(v3 + 608) = v348;
      *(_QWORD *)(v3 + 616) = 0;
      v349 = *(unsigned int *)(v3 + 624);
      v18 = (_QWORD **)v339;
      if ((_DWORD)v349)
      {
        v350 = 16 * v349;
        do
        {
          *v348 = -4096;
          v348 += 2;
          v350 -= 16;
        }
        while (v350);
      }
    }
    else
    {
      v18 = (_QWORD **)v339;
      *v339 = 0;
      v339[1] = 0;
      *((_DWORD *)v339 + 4) = 0;
    }
  }
LABEL_17:
  *(_DWORD *)(v3 + 640) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  v20 = v2 + 40;
  v21 = (uint64_t *)v2[41];
  if (v21 != v2 + 40)
  {
    do
    {
      for (i = v21[7]; (uint64_t *)i != v21 + 6; i = *(_QWORD *)(i + 8))
      {
        v23 = **(unsigned __int16 **)(i + 16);
        switch(v23)
        {
          case 306:
            *(_QWORD *)(v3 + 520) = i;
            break;
          case 309:
            v24 = *(unsigned int *)(v3 + 536);
            if (v24 >= *(unsigned int *)(v3 + 540))
            {
              v355 = v4;
              v25 = v18;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 528, v3 + 544, v24 + 1, 8);
              v18 = v25;
              v4 = v355;
              v24 = *(unsigned int *)(v3 + 536);
            }
            *(_QWORD *)(*(_QWORD *)(v3 + 528) + 8 * v24) = i;
            ++*(_DWORD *)(v3 + 536);
            break;
          case 307:
            *(_QWORD *)(v3 + 512) = i;
            break;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v21 = (uint64_t *)v21[1];
    }
    while (v21 != v20);
  }
  v26 = v2[2];
  v27 = atomic_load((unsigned __int8 *)&qword_1ED7EE928);
  if ((v27 & 1) == 0)
  {
    v326 = v18;
    v327 = __cxa_guard_acquire(&qword_1ED7EE928);
    v18 = v326;
    if (v327)
    {
      byte_1ED7EE8C7 = 0;
      __cxa_guard_release(&qword_1ED7EE928);
      v18 = v326;
    }
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1ED7EE930);
  if ((v28 & 1) == 0)
  {
    v328 = v18;
    v329 = __cxa_guard_acquire(&qword_1ED7EE930);
    v18 = v328;
    if (v329)
    {
      byte_1ED7EE8C8 = 1;
      __cxa_guard_release(&qword_1ED7EE930);
      v18 = v328;
    }
  }
  v29 = atomic_load((unsigned __int8 *)&qword_1ED7EE938);
  if ((v29 & 1) == 0)
  {
    v330 = v18;
    v331 = __cxa_guard_acquire(&qword_1ED7EE938);
    v18 = v330;
    if (v331)
    {
      byte_1ED7EE8C9 = 0;
      __cxa_guard_release(&qword_1ED7EE938);
      v18 = v330;
    }
  }
  v30 = atomic_load((unsigned __int8 *)&qword_1ED7EE940);
  if ((v30 & 1) == 0)
  {
    v332 = v18;
    v333 = __cxa_guard_acquire(&qword_1ED7EE940);
    v18 = v332;
    if (v333)
    {
      byte_1ED7EE8CA = 0;
      __cxa_guard_release(&qword_1ED7EE940);
      v18 = v332;
    }
  }
  v31 = atomic_load((unsigned __int8 *)&qword_1ED7EE948);
  if ((v31 & 1) == 0)
  {
    v334 = v18;
    v335 = __cxa_guard_acquire(&qword_1ED7EE948);
    v18 = v334;
    if (v335)
    {
      byte_1ED7EE8CB = 0;
      __cxa_guard_release(&qword_1ED7EE948);
      v18 = v334;
    }
  }
  v32 = 0;
  if (!dword_1ED7EE9D0 || byte_1ED7EE8C7 || (uint64_t *)*v20 == v20)
    goto LABEL_45;
  if (!*(_BYTE *)(v26 + 365) || (*(_WORD *)(*v2 + 18) & 0x3FF0) == 0x640)
  {
    v32 = 0;
    goto LABEL_45;
  }
  v353 = (uint64_t)v18;
  sub_1C5EAC020(*(_QWORD *)(*v2 + 40), (uint64_t)&__p);
  if (v378)
  {
    v38 = (v377 & 0x80u) == 0 ? v377 & 0x7F : v376;
    if (v38 == 33)
    {
      v39 = (v377 & 0x80u) == 0 ? v377 : v376;
      v40 = (v377 & 0x80u) == 0 ? &__p : (void **)__p;
      v41 = v39 >= 0x21 ? 33 : v39;
      if (!memcmp(v40, "cliqueS-pop-intersection-(driver)", v41) && v39 == 33)
      {
        v42 = byte_1ED7EE8C8;
        v43 = atomic_load((unsigned __int8 *)&qword_1ED7EE920);
        if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE920))
        {
          byte_1ED7EE8C6 = v42;
          __cxa_guard_release(&qword_1ED7EE920);
        }
        if (!byte_1ED7EE8C6)
        {
          v44 = *v20;
          if (((*(_QWORD *)(*v20 + 96) - *(_QWORD *)(*v20 + 88)) & 0x7FFFFFFF8) == 0)
          {
            v45 = (_QWORD *)(v44 + 48);
            v46 = *(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (v44 + 48 != v46)
            {
              if (!v46 || (*(_BYTE *)v46 & 4) == 0)
              {
                while ((*(_WORD *)(v46 + 44) & 4) != 0)
                  v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
              }
              if (**(_WORD **)(v46 + 16) == 623)
              {
                v154 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*v2 + 40) + 112), "agc.ria.ray_core_data", 0x15uLL);
                if (!v154
                  || (v155 = (llvm::GlobalValue *)v154, *(_BYTE *)(v154 + 16) != 3)
                  || (*(_DWORD *)(v154 + 32) & 0xFu) - 7 <= 1)
                {
                  v155 = 0;
                }
                v382 = 0u;
                v383 = 0u;
                v379 = &off_1E816EC08;
                *(_QWORD *)&v380 = v2;
                *(_QWORD *)&v381 = v2[5];
                *((_QWORD *)&v380 + 1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2[2] + 104))(v2[2]);
                *((_QWORD *)&v381 + 1) = 0;
                *((_QWORD *)&v382 + 1) = 0;
                *(_QWORD *)&v383 = 0;
                v156 = *v45 & 0xFFFFFFFFFFFFFFF8;
                if (!v156 || (*(_BYTE *)v156 & 4) == 0)
                {
                  while ((*(_WORD *)(v156 + 44) & 4) != 0)
                    v156 = *(_QWORD *)v156 & 0xFFFFFFFFFFFFFFF8;
                }
                while ((_QWORD *)v156 != v45)
                {
                  v157 = *(unsigned __int16 **)(v156 + 16);
                  v158 = *((_QWORD *)v157 + 1);
                  if ((*(_WORD *)(v156 + 44) & 0xC) != 0 && (*(_WORD *)(v156 + 44) & 4) == 0)
                  {
                    v161 = v156;
                    if ((v158 & 0x80) != 0)
                      goto LABEL_279;
                    while ((*(_WORD *)(v161 + 44) & 8) != 0)
                    {
                      v161 = *(_QWORD *)(v161 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v161 + 16) + 8) & 0x80) != 0)
                        goto LABEL_279;
                    }
                  }
                  else if ((v158 & 0x80) != 0)
                  {
                    goto LABEL_279;
                  }
                  v160 = sub_1C4C915C4(*v157);
                  if ((v160 & 0xFF00000000) != 0 && ((_DWORD)v160 == 98 || (_DWORD)v160 == 192))
                  {
LABEL_279:
                    v162 = (uint64_t *)(v156 + 8);
                    goto LABEL_365;
                  }
                  v156 = *(_QWORD *)v156 & 0xFFFFFFFFFFFFFFF8;
                  if (!v156 || (*(_BYTE *)v156 & 4) == 0)
                  {
                    while ((*(_WORD *)(v156 + 44) & 4) != 0)
                      v156 = *(_QWORD *)v156 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v162 = (uint64_t *)(v44 + 56);
LABEL_365:
                v205 = *v162;
                *(_QWORD *)&v382 = v44;
                *((_QWORD *)&v382 + 1) = v205;
                v206 = v2[43];
                v207 = sub_1C4A17AE8(v2[2]);
                v208 = sub_1C5EAB3E0(v155, 0, v206, v207 << 32);
                v374 = sub_1C4AFF798((uint64_t)&v379, v3 + 328, v208 + 0x20000);
                v397 = (unint64_t)&off_1E7FB1B88;
                LODWORD(v398) = 2;
                v209 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v379, 6722, (uint64_t *)&v397, 1, 0, 0, 0);
                v211 = v210;
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v210, v209, (const llvm::MachineOperand *)&v404);
                v406 = 0uLL;
                v405 = 0;
                v404 = 0x2600000000;
                llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)&v404);
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v211, v209, (const llvm::MachineOperand *)&v404);
                v212 = *(unsigned int *)(v3 + 336);
                if (v212 >= *(_DWORD *)(v3 + 340))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v212 + 1, 8);
                  LODWORD(v212) = *(_DWORD *)(v3 + 336);
                }
                *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v212) = v211;
                ++*(_DWORD *)(v3 + 336);
                v397 = (unint64_t)&off_1E7FB1B88;
                LODWORD(v398) = 2;
                v213 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v379, 5626, (uint64_t *)&v397, 1, 0, 0, 0);
                v215 = v214;
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v214, v213, (const llvm::MachineOperand *)&v404);
                LODWORD(v404) = 1;
                v405 = 0;
                *(_QWORD *)&v406 = 4095;
                llvm::MachineInstr::addOperand(v215, v213, (const llvm::MachineOperand *)&v404);
                v216 = *(unsigned int *)(v3 + 336);
                if (v216 >= *(_DWORD *)(v3 + 340))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v216 + 1, 8);
                  LODWORD(v216) = *(_DWORD *)(v3 + 336);
                }
                *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v216) = v215;
                ++*(_DWORD *)(v3 + 336);
                v397 = (unint64_t)&off_1E7FB1B88;
                LODWORD(v398) = 2;
                v217 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v379, 404, (uint64_t *)&v397, 1, 0, 0, 0);
                v219 = v218;
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v218, v217, (const llvm::MachineOperand *)&v404);
                v220 = *(_DWORD *)(*((_QWORD *)v211 + 4) + 4);
                v406 = 0uLL;
                v405 = 0;
                HIDWORD(v404) = v220;
                LODWORD(v404) = 0;
                llvm::MachineInstr::addOperand(v219, v217, (const llvm::MachineOperand *)&v404);
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v219, v217, (const llvm::MachineOperand *)&v404);
                v221 = *(_DWORD *)(*((_QWORD *)v215 + 4) + 4);
                v406 = 0uLL;
                v405 = 0;
                HIDWORD(v404) = v221;
                LODWORD(v404) = 0;
                llvm::MachineInstr::addOperand(v219, v217, (const llvm::MachineOperand *)&v404);
                LODWORD(v404) = 1;
                *(_QWORD *)&v406 = 0;
                v405 = 0;
                llvm::MachineInstr::addOperand(v219, v217, (const llvm::MachineOperand *)&v404);
                v222 = *(unsigned int *)(v3 + 336);
                if (v222 >= *(_DWORD *)(v3 + 340))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v222 + 1, 8);
                  LODWORD(v222) = *(_DWORD *)(v3 + 336);
                }
                *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v222) = v219;
                ++*(_DWORD *)(v3 + 336);
                v223 = *(_DWORD *)(*((_QWORD *)v219 + 4) + 4);
                if (v42)
                {
                  v224 = sub_1C4AFE664((uint64_t)&v379, v3 + 328, v223);
                  v225 = sub_1C4AFE7B8((uint64_t)&v379, v3 + 328, *(_DWORD *)(*((_QWORD *)v219 + 4) + 4));
                  v226 = sub_1C4AFF8B8((uint64_t)&v379, v3 + 328, v224, 0x20u, v374);
                  sub_1C4AD6390((uint64_t)&v379, 2u);
                  v229 = v228;
                  v230 = *(unsigned int *)(v3 + 336);
                  if (v230 >= *(_DWORD *)(v3 + 340))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v230 + 1, 8);
                    LODWORD(v230) = *(_DWORD *)(v3 + 336);
                  }
                  *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v230) = v229;
                  ++*(_DWORD *)(v3 + 336);
                  sub_1C4AFEEB4(v3, &v379, v226, v225, 0x20u, 5, (uint64_t)v155, v227);
                }
                else
                {
                  v237 = sub_1C4AFF8B8((uint64_t)&v379, v3 + 328, v223, 0x20u, v374);
                  sub_1C4AFF340(v3, &v379, v237, 32, (uint64_t)v155, v238);
                }
                sub_1C4AFE0FC(v3);
                v379 = &off_1E816EC08;
                v239 = (unsigned __int8 *)*((_QWORD *)&v381 + 1);
                if (!*((_QWORD *)&v381 + 1))
                  goto LABEL_447;
                v240 = (uint64_t *)&v379;
LABEL_386:
                llvm::MetadataTracking::untrack((uint64_t)(v240 + 4), v239);
LABEL_447:
                v32 = 1;
                goto LABEL_361;
              }
            }
          }
        }
LABEL_310:
        v32 = 0;
        goto LABEL_361;
      }
    }
  }
  v47 = (llvm::MachineBasicBlock *)v2[41];
  v370 = sub_1C4AFE4C8((uint64_t)v47);
  if (v370
    && (FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v47), **(_WORD **)(FirstTerminator + 16) == 305))
  {
    v366 = *(_QWORD *)(*(_QWORD *)(FirstTerminator + 32) + 48);
  }
  else
  {
    v366 = 0;
  }
  v356 = (void **)v4;
  v358 = (uint64_t)v2;
  v51 = v2[41];
  if ((uint64_t *)v51 != v20)
  {
    v52 = 1;
    while (v370)
    {
      v53 = *(_QWORD *)(v3 + 304);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v53);
      if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v53 + 1320), v366, v51))
        break;
LABEL_86:
      v51 = *(_QWORD *)(v51 + 8);
      if ((uint64_t *)v51 == v20)
        goto LABEL_181;
    }
    for (j = *(_QWORD *)(v51 + 56); ; j = *(_QWORD *)(j + 8))
    {
      if (j == v51 + 48)
        goto LABEL_86;
      v55 = *(unsigned __int16 **)(j + 16);
      v56 = *((_QWORD *)v55 + 1);
      v57 = *v55;
      if ((v56 & 8) != 0)
      {
        if ((v57 - 263) <= 1)
        {
          v97 = sub_1C4C2FD5C(*v55);
          v98 = *(unsigned __int8 *)(v3 + 508);
          *(_DWORD *)(v3 + 504) = *(_DWORD *)(*(_QWORD *)(j + 32) + 32 * v97 + 4);
          if (!v98)
            *(_BYTE *)(v3 + 508) = 1;
        }
        if ((unsigned __int16)(v57 - 263) < 2u)
          goto LABEL_93;
      }
      else
      {
        v58 = sub_1C4C915C4(*v55);
        if ((v58 & 0xFF00000000) == 0)
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
        if ((_DWORD)v58 == 18)
          goto LABEL_93;
      }
      if ((*(_WORD *)(j + 44) & 0xC) != 0 && (*(_WORD *)(j + 44) & 4) == 0)
      {
        v61 = j;
        if ((v56 & 0x80) == 0)
        {
          while ((*(_WORD *)(v61 + 44) & 8) != 0)
          {
            v61 = *(_QWORD *)(v61 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v61 + 16) + 8) & 0x80) != 0)
            {
              v62 = j;
              while ((*(_WORD *)(v62 + 44) & 8) != 0)
              {
                v62 = *(_QWORD *)(v62 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v62 + 16) + 8) & 0x80) != 0)
                  goto LABEL_116;
              }
              goto LABEL_93;
            }
          }
          goto LABEL_105;
        }
      }
      else if ((v56 & 0x80) == 0)
      {
        goto LABEL_105;
      }
LABEL_116:
      v63 = *(_QWORD *)(j + 32);
      if (*(_BYTE *)v63 != 10)
        goto LABEL_93;
      v64 = *(uint64_t ****)(v63 + 16);
      v65 = v64 && *((_BYTE *)v64 + 16) == 0;
      if (!v65 || (*((_BYTE *)v64 + 23) & 0x10) == 0)
        goto LABEL_93;
      v66 = ***v64;
      v67 = *(_QWORD *)(v66 + 152);
      v68 = *(unsigned int *)(v66 + 168);
      if (!(_DWORD)v68)
        goto LABEL_157;
      LODWORD(v69) = (v68 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      v70 = (uint64_t ****)(v67 + 16 * v69);
      v71 = *v70;
      if (*v70 != v64)
        break;
LABEL_158:
      v85 = v70[1];
      if (*v85 != (uint64_t **)27)
        goto LABEL_93;
      v86 = v85[2];
      v87 = v85[3];
      v88 = v85[4];
      v89 = *(uint64_t *)((char *)v85 + 35);
      v90 = v86 == (uint64_t **)0x656A626F2E636761 && v87 == (uint64_t **)0x65746972772E7463;
      v91 = v90 && v88 == (uint64_t **)0x6F63646C6968635FLL;
      if (!v91 || v89 != 0x746E756F63646C69)
        goto LABEL_93;
LABEL_105:
      v60 = sub_1C4C915C4(v57);
      if ((v60 & 0xFF00000000) != 0)
      {
        switch((_DWORD)v60)
        {
          case 0x55:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3 + 408), v51);
            v75 = (unint64_t *)(j + 48);
            v74 = *(_QWORD *)(j + 48);
            if (v74 < 8)
            {
              v76 = 0;
            }
            else if ((v74 & 7) != 0)
            {
              v76 = 0;
              if ((*(_QWORD *)(j + 48) & 7) == 3 && (v74 & 0xFFFFFFFFFFFFFFF8) != 0)
                v76 = *(_DWORD *)(v74 & 0xFFFFFFFFFFFFFFF8);
            }
            else
            {
              v74 &= 0xFFFFFFFFFFFFFFF8;
              *v75 = v74;
              v76 = 1;
            }
            if ((v74 & 7) != 0)
            {
              v77 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v77 = v74 & 0xFFFFFFFFFFFFFFF8;
              *v75 = v74 & 0xFFFFFFFFFFFFFFF8;
            }
            v379 = 0;
            v78 = sub_1C4B04E2C(*(_QWORD *)(v3 + 608), *(_DWORD *)(v3 + 624), j, &v379);
            v79 = v379;
            if ((v78 & 1) == 0)
            {
              v80 = *(_DWORD *)(v3 + 616);
              v81 = *(_DWORD *)(v3 + 624);
              if (4 * v80 + 4 >= 3 * v81)
              {
                v81 *= 2;
              }
              else if (v81 + ~v80 - *(_DWORD *)(v3 + 620) > v81 >> 3)
              {
                goto LABEL_143;
              }
              sub_1C4B04EB4(v353, v81);
              v379 = 0;
              sub_1C4B04E2C(*(_QWORD *)(v3 + 608), *(_DWORD *)(v3 + 624), j, &v379);
              v79 = v379;
LABEL_143:
              ++*(_DWORD *)(v3 + 616);
              if (*v79 != (uint64_t (*)())-4096)
                --*(_DWORD *)(v3 + 620);
              *v79 = (uint64_t (*)())j;
              v79[1] = 0;
            }
            v79[1] = (uint64_t (*)())v77;
            if (v76 >= 2)
            {
              v82 = *v75;
              if (*v75 < 8)
              {
                v75 = 0;
              }
              else if ((v82 & 7) != 0)
              {
                v83 = v82 & 0xFFFFFFFFFFFFFFF8;
                if (v83)
                  v84 = (unint64_t *)(v83 + 8);
                else
                  v84 = 0;
                if ((*v75 & 7) == 3)
                  v75 = v84;
                else
                  v75 = 0;
              }
              else
              {
                *v75 = v82 & 0xFFFFFFFFFFFFFFF8;
              }
              v93 = v75[1];
              v94 = *(unsigned int *)(v3 + 640);
              if (v94 >= *(_DWORD *)(v3 + 644))
              {
                v99 = v75[2];
                llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 632, v3 + 648, v94 + 1, 16);
                v100 = (unint64_t *)(*(_QWORD *)(v3 + 632) + 16 * *(unsigned int *)(v3 + 640));
                *v100 = v93;
                v100[1] = v99;
                v96 = *(_DWORD *)(v3 + 640) + 1;
              }
              else
              {
                v95 = (unint64_t *)(*(_QWORD *)(v3 + 632) + 16 * v94);
                *v95 = v93;
                v95[1] = v75[2];
                v96 = v94 + 1;
              }
              *(_DWORD *)(v3 + 640) = v96;
            }
            goto LABEL_93;
          case 0xC0:
            v52 &= sub_1C4AFE27C(v3, j);
            ++*(_DWORD *)(v3 + 284);
            goto LABEL_93;
          case 0x62:
            v52 &= sub_1C4AFE27C(v3, j);
            ++*(_DWORD *)(v3 + 280);
LABEL_93:
            v404 = j;
            sub_1C4B04DA0((uint64_t)&v379, (_DWORD *)(v3 + 776), &v404);
            break;
        }
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
    v72 = 1;
    while (v71 != (uint64_t ***)-4096)
    {
      v73 = v69 + v72++;
      v69 = v73 & (v68 - 1);
      v71 = *(uint64_t ****)(v67 + 16 * v69);
      if (v71 == v64)
      {
        v70 = (uint64_t ****)(v67 + 16 * v69);
        goto LABEL_158;
      }
    }
LABEL_157:
    v70 = (uint64_t ****)(v67 + 16 * v68);
    goto LABEL_158;
  }
  LOBYTE(v52) = 1;
LABEL_181:
  if (!*(_DWORD *)(v3 + 280) && !*(_DWORD *)(v3 + 284) && *(_DWORD *)(v3 + 428) == *(_DWORD *)(v3 + 432))
    goto LABEL_310;
  v101 = *(_DWORD *)(v3 + 428);
  v102 = *(_DWORD *)(v3 + 432);
  *(_DWORD *)(v3 + 248) = v101 == v102;
  if ((v52 & 1) == 0)
  {
    v32 = 0;
    if (v101 == v102 || !byte_1ED7EE8C8)
      goto LABEL_361;
  }
  v103 = *(_QWORD *)(*v2 + 40);
  v104 = sub_1C4FB7E80(*(uint64_t **)(v103 + 112), "agc.ria.ray_driver_data", 0x17uLL);
  v106 = 1;
  if (!v104 || *(_BYTE *)(v104 + 16) != 3 || (*(_DWORD *)(v104 + 32) & 0xFu) - 7 <= 1)
  {
    v105 = sub_1C4FB7E80(*(uint64_t **)(v103 + 112), "agc.ria.ray_user_data", 0x15uLL);
    if (!v105 || *(_BYTE *)(v105 + 16) != 3 || (*(_DWORD *)(v105 + 32) & 0xFu) - 7 <= 1)
      v106 = 0;
  }
  v107 = *(_DWORD *)(v3 + 248);
  if (!v107)
  {
    if ((dword_1ED7EE9D0 & 1) == 0)
      goto LABEL_310;
    v120 = byte_1ED7EE8C9;
    v121 = byte_1ED7EE8CA;
    if (!byte_1ED7EE8C8)
    {
      v32 = sub_1C6159558();
      goto LABEL_361;
    }
    if (v106)
    {
      if (byte_1ED7EE8C9 && byte_1ED7EE8CA)
        goto LABEL_310;
      if (((*(unsigned __int16 *)(*(_QWORD *)v358 + 18) >> 4) & 0x3FFu) - 100 > 8)
        goto LABEL_310;
      v122 = sub_1C4AFDDA0(v358, *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 296), v3 + 776);
      if (!v122)
        goto LABEL_310;
      v124 = v122;
      v125 = v123;
      v404 = (uint64_t)&off_1E816EC08;
      v406 = 0u;
      v407 = 0u;
      v408 = 0u;
      v409 = 0;
      v405 = v358;
      *((_QWORD *)&v406 + 1) = *(_QWORD *)(v358 + 40);
      *(_QWORD *)&v406 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v358 + 16) + 104))(*(_QWORD *)(v358 + 16));
      *(_QWORD *)&v407 = 0;
      *((_QWORD *)&v407 + 1) = v124;
      v408 = (unint64_t)v125;
      v126 = sub_1C4AFE530((uint64_t)&v404, v3 + 328);
      v127 = sub_1C4AFE664((uint64_t)&v404, v3 + 328, v126);
      v128 = sub_1C4AFE7B8((uint64_t)&v404, v3 + 328, v126);
      sub_1C4AD6390((uint64_t)&v404, 2u);
      v130 = v129;
      v131 = *(unsigned int *)(v3 + 336);
      if (v131 >= *(_DWORD *)(v3 + 340))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v131 + 1, 8);
        LODWORD(v131) = *(_DWORD *)(v3 + 336);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v131) = v130;
      ++*(_DWORD *)(v3 + 336);
      if (v120)
        goto LABEL_382;
      v132 = *(_QWORD *)(v358 + 16);
      v379 = &off_1E81316D0;
      *(_QWORD *)&v380 = v132;
      *(_QWORD *)&v381 = &v379;
      v133 = sub_1C4C0B384(&v379);
      v134 = (uint64_t (***)())v381;
      if ((uint64_t (***)())v381 == &v379)
      {
        v135 = (char *)(v379 + 4);
        v134 = &v379;
      }
      else
      {
        if (!(_QWORD)v381)
        {
LABEL_239:
          v372 = *(_QWORD *)(v124 + 32);
          v136 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)v372 + 40) + 112), "agc.ria.ray_core_data", 0x15uLL);
          if (v133 > 3)
          {
            if (v136 && *(_BYTE *)(v136 + 16) == 3 && (*(_DWORD *)(v136 + 32) & 0xFu) - 7 >= 2)
            {
              *((_QWORD *)&v383 + 1) = 0;
              v379 = &off_1E816EC08;
              *(_QWORD *)&v380 = v372;
              *(_QWORD *)&v381 = *(_QWORD *)(v372 + 40);
              v311 = (llvm::GlobalValue *)v136;
              *((_QWORD *)&v380 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v372 + 16) + 104))(*(_QWORD *)(v372 + 16));
              *((_QWORD *)&v381 + 1) = 0;
              v312 = *(_QWORD *)(v372 + 16);
              v313 = *(_QWORD *)(v372 + 344);
              *((_QWORD *)&v382 + 1) = v125;
              *(_QWORD *)&v383 = 0;
              *(_QWORD *)&v382 = v124;
              v314 = sub_1C4A17AE8(v312);
              v315 = sub_1C5EAB3E0(v311, 0, v313, v314 << 32);
              v316 = sub_1C4AFF798((uint64_t)&v379, v3 + 328, v315);
              v317 = sub_1C4AFF8B8((uint64_t)&v379, v3 + 328, v127, 0x40u, v316);
              v318 = v311;
              sub_1C4AFEEB4(v3, &v379, v317, v128, 0x40u, 6, (uint64_t)v311, v319);
              v320 = atomic_load((unsigned __int8 *)&qword_1ED7EE8F8);
              if ((v320 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE8F8))
              {
                byte_1ED7EE8C3 = 0;
                __cxa_guard_release(&qword_1ED7EE8F8);
              }
              v321 = *(_QWORD *)(v372 + 48);
              if (!v321)
              {
                v321 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v372 + 8) + 216))(*(_QWORD *)(v372 + 8), v372 + 128, v372);
                *(_QWORD *)(v372 + 48) = v321;
              }
              if (byte_1ED7EE8C3 || !*(_BYTE *)(v321 + 561))
                goto LABEL_471;
              v336 = sub_1C4A17AE8(*(_QWORD *)(v372 + 16));
              v337 = sub_1C5EAB358(v336);
              v338 = sub_1C4AFF798((uint64_t)&v379, v3 + 328, v315 + 0x40000);
              v148 = sub_1C4AFF8B8((uint64_t)&v379, v3 + 328, v127, v337, v338);
              v152 = 63 - __clz(v337);
              v149 = v3;
              v150 = v128;
              v151 = v337;
              v153 = (uint64_t)v318;
LABEL_250:
              sub_1C4AFEEB4(v149, &v379, v148, v150, v151, v152, v153, v147);
LABEL_471:
              v379 = &off_1E816EC08;
              if (*((_QWORD *)&v381 + 1))
                llvm::MetadataTracking::untrack((uint64_t)&v381 + 8, *((unsigned __int8 **)&v381 + 1));
            }
          }
          else if (v136 && *(_BYTE *)(v136 + 16) == 3 && (*(_DWORD *)(v136 + 32) & 0xFu) - 7 >= 2)
          {
            *((_QWORD *)&v383 + 1) = 0;
            v379 = &off_1E816EC08;
            *(_QWORD *)&v380 = v372;
            *(_QWORD *)&v381 = *(_QWORD *)(v372 + 40);
            v137 = (llvm::GlobalValue *)v136;
            *((_QWORD *)&v380 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v372 + 16) + 104))(*(_QWORD *)(v372 + 16));
            *((_QWORD *)&v381 + 1) = 0;
            v138 = *(_QWORD *)(v372 + 16);
            v139 = *(_QWORD *)(v372 + 344);
            *((_QWORD *)&v382 + 1) = v125;
            *(_QWORD *)&v383 = 0;
            *(_QWORD *)&v382 = v124;
            v140 = sub_1C4A17AE8(v138);
            v363 = (uint64_t)v137;
            v141 = sub_1C5EAB3E0(v137, 0, v139, v140 << 32);
            LODWORD(v139) = sub_1C4AFF798((uint64_t)&v379, v3 + 328, v141);
            v361 = sub_1C4AFF798((uint64_t)&v379, v3 + 328, 0x20000u);
            v142 = sub_1C4AFF8B8((uint64_t)&v379, v3 + 328, v127, 0x20u, v139);
            v368 = sub_1C4AFFA74((uint64_t)&v379, v3 + 328, v361, v142);
            v144 = atomic_load((unsigned __int8 *)&qword_1ED7EE8F0);
            if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE8F0))
            {
              byte_1ED7EE8C2 = 0;
              __cxa_guard_release(&qword_1ED7EE8F0);
            }
            v145 = *(_QWORD *)(v372 + 48);
            if (!v145)
            {
              v145 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v372 + 8) + 216))(*(_QWORD *)(v372 + 8), v372 + 128);
              *(_QWORD *)(v372 + 48) = v145;
            }
            if (!byte_1ED7EE8C2 && *(_BYTE *)(v145 + 561))
            {
              v322 = sub_1C4AFF798((uint64_t)&v379, v3 + 328, v141 + 0x40000);
              v146 = v363;
              sub_1C4AFEEB4(v3, &v379, v142, v128, 0x20u, 5, v363, v323);
              sub_1C4AFEEB4(v3, &v379, v368, v128, 0x20u, 5, v363, v324);
              v325 = sub_1C4A17AE8(*(_QWORD *)(v372 + 16));
              v151 = sub_1C5EAB358(v325);
              v148 = v322;
              v152 = 63 - __clz(v151);
              v149 = v3;
              v150 = v126;
            }
            else
            {
              v146 = v363;
              sub_1C4AFEEB4(v3, &v379, v142, v128, 0x20u, 5, v363, v143);
              v148 = v368;
              v149 = v3;
              v150 = v128;
              v151 = 32;
              v152 = 5;
            }
            v153 = v146;
            goto LABEL_250;
          }
LABEL_382:
          if (!v121)
          {
            sub_1C4AFE90C(v3, v124, v125, v127, v128, 1);
            sub_1C4AFE90C(v3, v124, v125, v127, v128, 0);
          }
          sub_1C4AFE0FC(v3);
          v404 = (uint64_t)&off_1E816EC08;
          v239 = (unsigned __int8 *)v407;
          if (!(_QWORD)v407)
            goto LABEL_447;
          v240 = &v404;
          goto LABEL_386;
        }
        v135 = (char *)(*(_QWORD *)v381 + 40);
      }
      (*(void (**)(uint64_t (***)()))v135)(v134);
      goto LABEL_239;
    }
    if (byte_1ED7EE8C9)
      goto LABEL_310;
    if (((*(unsigned __int16 *)(*(_QWORD *)v358 + 18) >> 4) & 0x3FFu) - 100 > 8)
      goto LABEL_310;
    v168 = sub_1C4AFDDA0(v358, *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 296), v3 + 776);
    if (!v168)
      goto LABEL_310;
    v170 = v168;
    v171 = v169;
    v172 = *(_QWORD *)(v168 + 32);
    v173 = *(_QWORD *)(*(_QWORD *)v172 + 40);
    v174 = sub_1C4FB7E80(*(uint64_t **)(v173 + 112), "agc.ria.ray_core_data", 0x15uLL);
    if (!v174
      || (v175 = (llvm::GlobalValue *)v174, *(_BYTE *)(v174 + 16) != 3)
      || (*(_DWORD *)(v174 + 32) & 0xFu) - 7 <= 1)
    {
      v175 = 0;
    }
    v176 = sub_1C4FB7E80(*(uint64_t **)(v173 + 112), "agc.ria.ray_extended_data", 0x19uLL);
    if (!v176
      || (v177 = (llvm::GlobalValue *)v176, *(_BYTE *)(v176 + 16) != 3)
      || (*(_DWORD *)(v176 + 32) & 0xFu) - 7 <= 1)
    {
      v177 = 0;
    }
    if (!v175)
    {
LABEL_446:
      sub_1C4AFE0FC(v3);
      goto LABEL_447;
    }
    v178 = *(_QWORD *)(v172 + 344);
    v179 = sub_1C4A17AE8(*(_QWORD *)(v172 + 16));
    v373 = sub_1C5EAB3E0(v175, 0, v178, v179 << 32);
    v404 = (uint64_t)&off_1E816EC08;
    v409 = 0;
    v405 = v172;
    *((_QWORD *)&v406 + 1) = *(_QWORD *)(v172 + 40);
    *(_QWORD *)&v406 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v172 + 16) + 104))(*(_QWORD *)(v172 + 16));
    *(_QWORD *)&v407 = 0;
    v180 = *(_QWORD *)(v3 + 512);
    *((_QWORD *)&v407 + 1) = v170;
    v408 = v171;
    if (v177)
      v181 = v180 == 0;
    else
      v181 = 1;
    v182 = !v181 && v121 == 0;
    v183 = v182;
    if (v182)
    {
      v184 = *(unsigned int **)(v180 + 32);
      if (*v184 == 7)
      {
        v357 = *v184;
        v359 = v184[1];
        v352 = *(_OWORD *)(v184 + 2);
        v354 = *((_QWORD *)v184 + 3);
        goto LABEL_396;
      }
      v241 = *(_QWORD *)(v180 + 24);
      v382 = 0u;
      v383 = 0u;
      v380 = 0u;
      v381 = 0u;
      v242 = *(_QWORD *)(v241 + 32);
      v243 = *(_QWORD *)(v242 + 40);
      v379 = &off_1E816EC08;
      *(_QWORD *)&v380 = v242;
      *(_QWORD *)&v381 = v243;
      *((_QWORD *)&v380 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v242 + 16) + 104))(*(_QWORD *)(v242 + 16));
      *((_QWORD *)&v381 + 1) = 0;
      *((_QWORD *)&v382 + 1) = v180;
      *(_QWORD *)&v383 = 0;
      *(_QWORD *)&v382 = *(_QWORD *)(v180 + 24);
      *((_QWORD *)&v382 + 1) = v180;
      if ((__int128 *)(v180 + 56) != (__int128 *)((char *)&v381 + 8))
      {
        v244 = *(unsigned __int8 **)(v180 + 56);
        *((_QWORD *)&v381 + 1) = v244;
        if (v244)
          llvm::MetadataTracking::track((uint64_t)&v381 + 8, v244, 2);
      }
      v391 = &off_1E7FB1568;
      LODWORD(v392) = 2;
      v245 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v379, 19, (uint64_t *)&v391, 1, 0, 0, 0);
      v247 = v246;
      v248 = v184[1];
      v249 = *v184 & 0xFFF00;
      v398 = 0;
      v399 = 0;
      v400 = 0;
      v397 = __PAIR64__(v248, v249);
      llvm::MachineInstr::addOperand(v246, v245, (const llvm::MachineOperand *)&v397);
      v250 = *(unsigned int *)(v3 + 336);
      if (v250 >= *(_DWORD *)(v3 + 340))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v250 + 1, 8);
        LODWORD(v250) = *(_DWORD *)(v3 + 336);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v250) = v247;
      ++*(_DWORD *)(v3 + 336);
      v359 = *(_DWORD *)(*((_QWORD *)v247 + 4) + 4);
      v379 = &off_1E816EC08;
      if (*((_QWORD *)&v381 + 1))
        llvm::MetadataTracking::untrack((uint64_t)&v381 + 8, *((unsigned __int8 **)&v381 + 1));
      v357 = 0;
    }
    else
    {
      v357 = 0;
      v359 = 0;
    }
    v354 = 0;
    v352 = 0u;
LABEL_396:
    v251 = atomic_load((unsigned __int8 *)&qword_1ED7EE8E0);
    if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE8E0))
    {
      qword_1ED7EE8D8 = 1024;
      __cxa_guard_release(&qword_1ED7EE8E0);
    }
    v252 = *(_QWORD *)(v3 + 608);
    v253 = *(unsigned int *)(v3 + 624);
    v254 = (_QWORD *)(v252 + 16 * v253);
    v367 = v177;
    v369 = v175;
    if (*(_DWORD *)(v3 + 616))
    {
      if ((_DWORD)v253)
      {
        v255 = 16 * v253;
        v256 = *(_QWORD **)(v3 + 608);
        while ((*v256 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v256 += 2;
          v255 -= 16;
          if (!v255)
            goto LABEL_402;
        }
      }
      else
      {
        v256 = *(_QWORD **)(v3 + 608);
      }
    }
    else
    {
LABEL_402:
      v256 = (_QWORD *)(v252 + 16 * v253);
    }
    v257 = (_QWORD *)(v252 + 16 * v253);
    if (v256 == v257)
    {
      v259 = 0;
      v268 = -1;
    }
    else
    {
      v364 = v183;
      v258 = 0;
      LOBYTE(v259) = 0;
      do
      {
        v260 = v256[1];
        v262 = *(_QWORD *)(v260 + 24);
        v261 = (unint64_t *)(v260 + 24);
        if ((v262 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v264 = (unint64_t)(sub_1C4825F50(v261) + 7) >> 3;
          if ((_DWORD)v263 == 1)
        }
        else
        {
          v264 = -1;
        }
        if (v258 <= v264)
          v258 = v264;
        v265 = (1 << *(_BYTE *)(v256[1] + 34)) | *(_QWORD *)(v256[1] + 8);
        v266 = 63 - __clz(v265 & -v265);
        if (v259 <= v266)
          v259 = v266;
        else
          v259 = v259;
        v267 = v256 + 2;
        v256 = v254;
        if (v267 != v254)
        {
          v256 = v267;
          do
          {
            if ((*v256 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_419;
            v256 += 2;
          }
          while (v256 != v254);
          v256 = v254;
        }
LABEL_419:
        ;
      }
      while (v256 != v257);
      v268 = v258 - 1;
      v183 = v364;
    }
    v269 = ((1 << v259) + v268) & -(1 << v259);
    if (qword_1ED7EE8D8 < v269)
      LODWORD(v269) = qword_1ED7EE8D8;
    v351 = v269;
    if (v259 > 1)
      v270 = v183;
    else
      v270 = 0;
    v271 = sub_1C4AFE530((uint64_t)&v404, v3 + 328);
    v272 = sub_1C4AFF798((uint64_t)&v404, v3 + 328, v373);
    v273 = v271;
    v274 = sub_1C4AFE664((uint64_t)&v404, v3 + 328, v271);
    v275 = sub_1C4AFF798((uint64_t)&v404, v3 + 328, 0x20000u);
    v276 = v274;
    v277 = sub_1C4AFF8B8((uint64_t)&v404, v3 + 328, v274, 0x20u, v272);
    v365 = v270;
    if ((v270 & 1) != 0)
    {
      v278 = *(_QWORD *)(v172 + 344);
      v279 = sub_1C4A17AE8(*(_QWORD *)(v172 + 16));
      v280 = sub_1C5EAB3E0(v367, 0, v278, v279 << 32);
      LODWORD(v278) = sub_1C4AFF798((uint64_t)&v404, v3 + 328, v280);
      v362 = sub_1C4AFE7B8((uint64_t)&v404, v3 + 328, v273);
      v379 = (uint64_t (**)())__PAIR64__(v359, v357);
      v380 = v352;
      *(_QWORD *)&v381 = v354;
      v360 = sub_1C4B005C4((uint64_t)&v404, v3 + 328, v276, (const llvm::MachineOperand *)&v379, v278);
    }
    else
    {
      v362 = sub_1C4AFE7B8((uint64_t)&v404, v3 + 328, v273);
      v360 = 0;
    }
    v281 = v273;
    v282 = v275;
    v283 = v277;
    v284 = sub_1C4AFFA74((uint64_t)&v404, v3 + 328, v282, v277);
    v285 = atomic_load((unsigned __int8 *)&qword_1ED7EE8E8);
    if ((v285 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE8E8))
    {
      byte_1ED7EE8C1 = 0;
      __cxa_guard_release(&qword_1ED7EE8E8);
    }
    v286 = *(_QWORD *)(v172 + 48);
    if (!v286)
    {
      v286 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v172 + 8) + 216))(*(_QWORD *)(v172 + 8), v172 + 128, v172);
      *(_QWORD *)(v172 + 48) = v286;
    }
    if (byte_1ED7EE8C1 || !*(_BYTE *)(v286 + 561))
    {
      v287 = 0;
      v288 = 0;
    }
    else
    {
      v288 = sub_1C4AFF798((uint64_t)&v404, v3 + 328, v373 + 0x40000);
      v287 = 1;
    }
    sub_1C4AD6390((uint64_t)&v404, 2u);
    v291 = v290;
    v292 = *(unsigned int *)(v3 + 336);
    if (v292 >= *(_DWORD *)(v3 + 340))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v292 + 1, 8);
      LODWORD(v292) = *(_DWORD *)(v3 + 336);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v292) = v291;
    ++*(_DWORD *)(v3 + 336);
    sub_1C4AFEEB4(v3, &v404, v283, v362, 0x20u, 5, (uint64_t)v369, v289);
    sub_1C4AFEEB4(v3, &v404, v284, v362, 0x20u, 5, (uint64_t)v369, v293);
    if (v287)
    {
      v295 = sub_1C4A17AE8(*(_QWORD *)(v172 + 16));
      v296 = sub_1C5EAB358(v295);
      sub_1C4AFEEB4(v3, &v404, v288, v281, v296, 63 - __clz(v296), (uint64_t)v369, v297);
    }
    if (v365)
      sub_1C4AFEEB4(v3, &v404, v360, v362, v351, v259, (uint64_t)v367, v294);
    v404 = (uint64_t)&off_1E816EC08;
    if ((_QWORD)v407)
      llvm::MetadataTracking::untrack((uint64_t)&v407, (unsigned __int8 *)v407);
    goto LABEL_446;
  }
  v32 = 0;
  if ((dword_1ED7EE9D0 & 2) == 0 || byte_1ED7EE8CB)
    goto LABEL_361;
  sub_1C4B041F0((uint64_t)&v379, (uint64_t)v2, v107, *(_QWORD *)(v3 + 320), v3 + 256);
  sub_1C4AFCF04(&v379);
  v108 = v2[41];
  if ((uint64_t *)v108 == v20)
  {
    v109 = 0;
    goto LABEL_336;
  }
  v109 = 0;
  v110 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v371 = v110;
  do
  {
    v111 = *(_DWORD *)(v108 + 24);
    v112 = v384;
    v113 = 8;
    v404 = 1;
    do
    {
      *(__n128 *)((char *)&v404 + v113) = v110;
      v113 += 16;
    }
    while (v113 != 264);
    v114 = &v112[536 * v111];
    sub_1C4B03C10(&v404, v114);
    v410[0] = v411;
    v410[1] = (void *)0x2000000000;
    if (*((_DWORD *)v114 + 68))
      sub_1C4B03D34((uint64_t)v410, (uint64_t)(v114 + 264));
    v397 = 1;
    v115 = 8;
    v110 = v371;
    do
    {
      *(__n128 *)((char *)&v397 + v115) = v371;
      v115 += 16;
    }
    while (v115 != 264);
    v401 = v403;
    v402 = 0x2000000000;
    v116 = v108 + 48;
    v117 = *(_QWORD *)(v108 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v117 || (*(_BYTE *)v117 & 4) == 0)
    {
      while ((*(_WORD *)(v117 + 44) & 4) != 0)
        v117 = *(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v117 == v116)
    {
      v118 = 0;
      goto LABEL_218;
    }
    v118 = 0;
    do
    {
      v119 = sub_1C4AFC700((unint64_t)&v379, v117, (uint64_t)&v404, (uint64_t)&v397, 1);
      v117 = *(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8;
      if (v117)
      {
        v110 = v371;
        if ((*(_BYTE *)v117 & 4) != 0)
          goto LABEL_214;
      }
      else
      {
        v110 = v371;
      }
      while ((*(_WORD *)(v117 + 44) & 4) != 0)
        v117 = *(_QWORD *)v117 & 0xFFFFFFFFFFFFFFF8;
LABEL_214:
      v118 |= v119;
    }
    while (v117 != v116);
    if (v401 != v403)
    {
      free(v401);
      v110 = v371;
    }
LABEL_218:
    if ((v397 & 1) == 0)
    {
      MEMORY[0x1CAA32FB4](v398, 8, v110);
      v110 = v371;
    }
    if (v410[0] != v411)
    {
      free(v410[0]);
      v110 = v371;
    }
    if ((v404 & 1) == 0)
    {
      MEMORY[0x1CAA32FB4](v405, 8, v110);
      v110 = v371;
    }
    v109 |= v118;
    v108 = *(_QWORD *)(v108 + 8);
  }
  while ((uint64_t *)v108 != v20);
LABEL_336:
  if (((*(unsigned __int16 *)(*v2 + 18) >> 4) & 0x3FFu) - 100 > 8)
  {
    v204 = 0;
    v197 = v356;
  }
  else
  {
    sub_1C5EAC020(*(_QWORD *)(*v2 + 40), (uint64_t)&v391);
    v197 = v356;
    if (v394)
    {
      v198 = v393 & 0x7C;
      if (v393 < 0)
        v198 = v392;
      if (v198 < 0xC)
        goto LABEL_350;
      v199 = &v391;
      if (v393 < 0)
        v199 = (__int16 ****)v391;
      v200 = *v199;
      v201 = *((_DWORD *)v199 + 2);
      if (v200 != (__int16 ***)0x6365737265746E69 || v201 != 1852795252)
        goto LABEL_350;
      v203 = atomic_load((unsigned __int8 *)&qword_1ED7EE8D0);
      if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE8D0))
      {
        byte_1ED7EE8C0 = 0;
        __cxa_guard_release(&qword_1ED7EE8D0);
      }
      if (!byte_1ED7EE8C0
        && (v231 = sub_1C4AFDDA0((uint64_t)v2, *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 296), v3 + 776)) != 0)
      {
        v233 = v231;
        v234 = v232;
        v235 = *(uint64_t **)(v231 + 32);
        v236 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(*v235 + 40) + 112), "agc.ria.token_buffers", 0x15uLL);
        if (v236)
        {
          v298 = (llvm::GlobalValue *)v236;
          if (*(_BYTE *)(v236 + 16) == 3 && (*(_DWORD *)(v236 + 32) & 0xFu) - 7 >= 2)
          {
            v299 = v235[43];
            v300 = sub_1C4A17AE8(v235[2]);
            v301 = sub_1C5EAB3E0(v298, 0, v299, v300 << 32);
            v404 = (uint64_t)&off_1E816EC08;
            v409 = 0;
            v405 = (uint64_t)v235;
            *((_QWORD *)&v406 + 1) = v235[5];
            *(_QWORD *)&v406 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v235[2] + 104))(v235[2]);
            *(_QWORD *)&v407 = 0;
            *((_QWORD *)&v407 + 1) = v233;
            v408 = v234;
            v395 = &off_1E7FB1B88;
            v396 = 2;
            v302 = (llvm::MachineFunction *)sub_1C5548620(&v404, 6722, (uint64_t *)&v395, 1, 0, 0, 0);
            v304 = v303;
            LODWORD(v397) = 1;
            v398 = 0;
            v399 = 0;
            llvm::MachineInstr::addOperand(v303, v302, (const llvm::MachineOperand *)&v397);
            v398 = 0;
            v399 = 0;
            v397 = 0x3A00000000;
            v400 = 0;
            llvm::MachineInstr::addOperand(v304, v302, (const llvm::MachineOperand *)&v397);
            LODWORD(v397) = 1;
            v398 = 0;
            v399 = 0;
            llvm::MachineInstr::addOperand(v304, v302, (const llvm::MachineOperand *)&v397);
            v305 = *(_DWORD *)(*((_QWORD *)v304 + 4) + 4);
            v306 = *(unsigned int *)(v3 + 336);
            if (v306 >= *(_DWORD *)(v3 + 340))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 328, v3 + 344, v306 + 1, 8);
              LODWORD(v306) = *(_DWORD *)(v3 + 336);
            }
            *(_QWORD *)(*(_QWORD *)(v3 + 328) + 8 * v306) = v304;
            ++*(_DWORD *)(v3 + 336);
            v307 = sub_1C4AFF798((uint64_t)&v404, v3 + 328, v301 + 192);
            v308 = sub_1C4AFF798((uint64_t)&v404, v3 + 328, 0x200u);
            LODWORD(v397) = 0;
            HIDWORD(v397) = v308;
            v399 = 0;
            v400 = 0;
            v398 = 0;
            v309 = sub_1C4B005C4((uint64_t)&v404, v3 + 328, v305, (const llvm::MachineOperand *)&v397, v307);
            sub_1C4AFF340(v3, &v404, v309, 8, (uint64_t)v298, v310);
            v404 = (uint64_t)&off_1E816EC08;
            if ((_QWORD)v407)
              llvm::MetadataTracking::untrack((uint64_t)&v407, (unsigned __int8 *)v407);
          }
        }
        sub_1C4AFE0FC(v3);
        v204 = 1;
        v197 = v356;
      }
      else
      {
LABEL_350:
        v204 = 0;
      }
      if (v394 && v393 < 0)
        operator delete(v391);
    }
    else
    {
      v204 = 0;
    }
  }
  if (v389 != &v390)
    free(v389);
  if (*v197 != &v388)
    free(*v197);
  v32 = v109 | v204;
  sub_1C4B045F0(&v386);
  sub_1C4B045F0(&v385);
  sub_1C4B045F0(&v384);
  sub_1C4B045F0((char **)&v379);
LABEL_361:
  if (v378 && (char)v377 < 0)
    operator delete(__p);
LABEL_45:
  sub_1C4B04F6C(v3, *(_QWORD *)(v3 + 512));
  sub_1C4B04F6C(v3, *(_QWORD *)(v3 + 520));
  v33 = *(unsigned int *)(v3 + 536);
  if ((_DWORD)v33)
  {
    v34 = *(uint64_t **)(v3 + 528);
    v35 = 8 * v33;
    do
    {
      v36 = *v34++;
      sub_1C4B04F6C(v3, v36);
      v35 -= 8;
    }
    while (v35);
  }
  return v32 & 1;
}

uint64_t sub_1C4B03380(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 SCS LU Placement Pass";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "agx3-scs-lu-placement";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFAB0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6159D78;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

const char *sub_1C4B03414()
{
  return "AGX3 SCS LUPlacement Pass";
}

uint64_t sub_1C4B03424(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C4B03438(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  if (!*(_QWORD *)(result[1] + 24))
  {
    v3 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v4 = (int)result;
      v5 = 0;
      do
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 24))(v3, v5);
        v6 = result;
        v8 = v7;
        v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 16);
          v9 = *(unsigned int *)(a2 + 8);
        }
        v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
        *v10 = v6;
        v10[1] = v8;
        ++*(_DWORD *)(a2 + 8);
        v5 = (v5 + 1);
      }
      while (v4 != (_DWORD)v5);
    }
  }
  return result;
}

uint64_t sub_1C4B03504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C4B0355C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C4B0355C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4B035F4(uint64_t a1, int a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 16)
  {
    LOBYTE(v6) = 0;
LABEL_13:
    v7 = 1;
    return v6 | (v7 << 8);
  }
  if (v2 == 84)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v5 + 33) & 0x20) != 0)
      {
        LOBYTE(v6) = *(_DWORD *)(v5 + 36) == 2586;
        goto LABEL_13;
      }
    }
  }
  if (!a2)
    goto LABEL_23;
  v17 = &v19;
  v18 = &v19;
  v19 = 0;
  if ((sub_1C4B0378C(&v17, a1) & 1) != 0
    || (sub_1C4B037F8(&v18, a1) & 1) != 0
    || (v17 = &v19, LODWORD(v6) = sub_1C4B03864(&v17, a1), (_DWORD)v6))
  {
    LOWORD(v6) = sub_1C4B035F4(v19, (a2 - 1));
    v7 = BYTE1(v6);
    return v6 | (v7 << 8);
  }
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 < 0x1C)
  {
    v7 = 0;
    return v6 | (v7 << 8);
  }
  v9 = v8 - 41;
  v7 = v6;
  if (v9 > 0x11)
    return v6 | (v7 << 8);
  v6 = *(_QWORD *)(a1 - 64);
  if (!v6)
  {
LABEL_24:
    v7 = 0;
    return v6 | (v7 << 8);
  }
  v19 = *(_QWORD *)(a1 - 64);
  v10 = *(_QWORD *)(a1 - 32);
  if (!v10)
  {
LABEL_23:
    LOBYTE(v6) = 0;
    goto LABEL_24;
  }
  v11 = (a2 - 1);
  v12 = ((uint64_t (*)(void))sub_1C4B035F4)();
  v13 = sub_1C4B035F4(v10, v11);
  if (v12 >= 0x100u && (_BYTE)v12 || (v14 = v13, v13 >= 0x100u) && (_BYTE)v13)
  {
    LOBYTE(v6) = 1;
    goto LABEL_13;
  }
  LOBYTE(v6) = 0;
  v7 = v12 > 0xFFu && v14 > 0xFF;
  return v6 | (v7 << 8);
}

uint64_t sub_1C4B0378C(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 39
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C4B037F8(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 40
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C4B03864(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 38
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t *sub_1C4B038D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = v3 + 1;
      if (sub_1C4B03954(a3, v3))
        break;
      ++v3;
      if (v6 == a2)
        return a2;
    }
    while (v6 != a2)
    {
      if ((sub_1C4B03954(a3, v6) & 1) == 0)
        *v3++ = *v6;
      ++v6;
    }
  }
  return v3;
}

uint64_t sub_1C4B03954(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v15;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;

  v4 = *a2;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 34384);
  v6 = **(_QWORD **)(a1 + 8);
  if (!*v5 || *(_QWORD *)(v6 + 8) || *(_QWORD *)(v4 + 8))
    goto LABEL_4;
  if ((*(_QWORD *)v6 & 4) != 0)
    v17 = 0;
  else
    v17 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v19 = (unint64_t)(sub_1C4825F50((unint64_t *)(v6 + 24)) + 7) >> 3;
    if ((_DWORD)v18 == 1)
  }
  else
  {
    v19 = -2;
  }
  v20 = *(_OWORD *)(v6 + 56);
  v36 = *(_OWORD *)(v6 + 40);
  v37 = v20;
  v34 = (_QWORD *)v17;
  v35 = v19;
  if ((*(_QWORD *)v4 & 4) != 0)
    v21 = 0;
  else
    v21 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v23 = (unint64_t)(sub_1C4825F50((unint64_t *)(v4 + 24)) + 7) >> 3;
    if ((_DWORD)v22 == 1)
    {
      v29 = v23;
      v23 = v29;
    }
  }
  else
  {
    v23 = -1;
  }
  v24 = -2;
  v25 = *(_OWORD *)(v4 + 56);
  if (v23 < 0x7FFFFFFFFFFFFFFCLL)
    v24 = v23;
  v32 = *(_OWORD *)(v4 + 40);
  v33 = v25;
  v30 = v21;
  v31 = v24;
  if (v19 > 0xFFFFFFFFFFFFFFFDLL || v23 > 0x7FFFFFFFFFFFFFFBLL)
    return 0;
  if (llvm::AAResults::alias(*v5, (uint64_t)&v34, (uint64_t)&v30) != 3
    || (v35 & 0x7FFFFFFFFFFFFFFFLL) < (v31 & 0x7FFFFFFFFFFFFFFFuLL))
  {
LABEL_4:
    v7 = (_QWORD *)sub_1C4B03504(v5[1], v6);
    v8 = v7[1];
    v9 = v7[2];
    v10 = v7[3];
    v11 = v7[4];
    v12 = (_QWORD *)sub_1C4B03504(v5[1], v4);
    v13 = v12[3];
    v15 = v8 == v12[1] && v9 == v12[2] && v10 <= v13;
    if (!v15 || v11 + v10 < v12[4] + v13)
      return 0;
  }
  v26 = *(_DWORD **)(a1 + 16);
  v27 = *a2;
  v34 = 0;
  if (sub_1C4B03B6C((uint64_t)v26, v27, &v34))
  {
    *v34 = -8192;
    v28 = v26[1] + 1;
    *v26 -= 2;
    v26[1] = v28;
  }
  return 1;
}

uint64_t sub_1C4B03B6C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1C4B03C10(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    a2 = v13;
    a1 = v14;
    v2 = *v14;
  }
  *a1 = v2 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 0x20u)
  {
    v3 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    v4 = a1 + 2;
  }
  else
  {
    *a1 = v2 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v9 = 32;
    else
      v9 = a2[4];
    v10 = a1;
    v11 = a2;
    *((_QWORD *)a1 + 1) = operator new(8 * v9, (std::align_val_t)8uLL);
    v4 = v10 + 2;
    *((_QWORD *)v10 + 2) = v9;
    v12 = *v10;
    *v10 = *v11 & 0xFFFFFFFE | *v10 & 1;
    a2 = v11;
    a1 = v10;
    v10[1] = v11[1];
    if ((v12 & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      v4 = (_QWORD *)*v4;
      v3 = 1;
    }
  }
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 8 * a1[4];
  else
    v7 = 256;
  return memcpy(v4, v5, v7);
}

uint64_t sub_1C4B03D34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
LABEL_5:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 8);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v6 = v8;
      a2 = v10;
LABEL_10:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * v7 - (*(_QWORD *)a2 + 8 * v6));
      goto LABEL_5;
    }
    v6 = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *sub_1C4B03E18(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 0x20)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 33;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

__n128 sub_1C4B03E98(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  __n128 result;
  __n128 v13;

  v2 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  v3 = a1[1];
  *a1 = v2 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = 0;
      v6 = (int *)(a1 + 2);
      v7 = (int *)(a2 + 2);
      do
      {
        v8 = *(_QWORD *)&v6[v5];
        *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
        *(_QWORD *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 64);
      return result;
    }
    v10 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      v9 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v9;
      LODWORD(v9) = a1[4];
      a1[4] = a2[4];
      a2[4] = v9;
      return result;
    }
    v4 = *a1;
    v10 = a1;
    a1 = a2;
  }
  v13 = *(__n128 *)(v10 + 2);
  *v10 = v4 | 1;
  for (i = 2; i != 66; i += 2)
    *(_QWORD *)&v10[i] = *(_QWORD *)&a1[i];
  *a1 &= ~1u;
  result = v13;
  *(__n128 *)(a1 + 2) = v13;
  return result;
}

uint64_t sub_1C4B03F84(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_7;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_7:
      *v7 = 0;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_12;
    }
    v8 = 0;
LABEL_12:
    v10 = *v7;
    if (v8 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v8));
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C4B0409C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t NearestCommonDominator;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x100000000;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks(a1, (uint64_t)&v7);
  v3 = (uint64_t *)v7;
  if ((_DWORD)v8)
  {
    NearestCommonDominator = *(_QWORD *)v7;
    v5 = 8 * v8;
    do
    {
      if (*v3 != NearestCommonDominator)
      {
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(a2 + 248), NearestCommonDominator, *v3);
        if (!NearestCommonDominator)
          break;
      }
      ++v3;
      v5 -= 8;
    }
    while (v5);
    v3 = (uint64_t *)v7;
  }
  else
  {
    NearestCommonDominator = 0;
  }
  if (v3 != v9)
    free(v3);
  return NearestCommonDominator;
}

BOOL sub_1C4B0417C(uint64_t *a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  if (!a2)
    return 0;
  v6 = (uint64_t *)(a3 + 34392);
  v7 = 8 * a2 - 8;
  do
  {
    v8 = *a1++;
    v9 = sub_1C4B03504(*v6, v8);
    v11 = sub_1C4AFC47C(*(_QWORD *)(v9 + 8)) == *a4;
    result = v11;
    v11 = v11 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_1C4B041F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  v7 = (_QWORD *)(a1 + 34672);
  *(_QWORD *)(a1 + 8592) = a1 + 8608;
  *(_QWORD *)(a1 + 8600) = 0x1000000000;
  *(_QWORD *)(a1 + 17184) = a1 + 17200;
  *(_QWORD *)(a1 + 17192) = 0x1000000000;
  v8 = a1 + 8592;
  v9 = a1 + 17184;
  v10 = a1 + 25776;
  *(_QWORD *)(a1 + 25776) = a1 + 25792;
  *(_QWORD *)(a1 + 25784) = 0x1000000000;
  *(_QWORD *)(a1 + 34368) = a2;
  *(_DWORD *)(a1 + 34376) = a3;
  *(_QWORD *)(a1 + 34384) = a4;
  *(_QWORD *)(a1 + 34392) = a5;
  *(_QWORD *)(a1 + 34400) = a1 + 34416;
  *(_QWORD *)(a1 + 34408) = 0x2000000000;
  v11 = (void *)(a1 + 34696);
  *(_QWORD *)(a1 + 34672) = a1 + 34696;
  v12 = ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_OWORD *)(a1 + 34680) = xmmword_1C6612EE0;
  sub_1C4B04380(a1, v12);
  sub_1C4B04380(v8, ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  sub_1C4B04380(v9, ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  sub_1C4B04380(v10, ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  v13 = *(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104);
  v14 = v7[1];
  if (v14 != (v13 >> 3))
  {
    v15 = (v13 >> 3);
    if (v14 <= v15)
    {
      if (v7[2] < v15)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v7, v11, v15, 1);
        v14 = v7[1];
      }
      if (v15 != v14)
        bzero((void *)(*v7 + v14), v15 - v14);
    }
    v7[1] = v15;
  }
  return a1;
}

void sub_1C4B04380(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t i;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  int64x2_t v20;
  unsigned int *v21;
  unint64_t v22;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1C6159C64(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) >= a2)
      {
        v5 = *(unsigned int **)a1;
      }
      else
      {
        v22 = 0;
        v5 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 536, &v22);
        v6 = *(unsigned int **)a1;
        v7 = *(_DWORD *)(a1 + 8);
        if (v7)
        {
          v12 = *(unsigned int **)a1;
          v13 = 536 * v7;
          v21 = v5;
          do
          {
            v14 = sub_1C6159CEC((uint64_t)v5, v12);
            v12 += 134;
            v5 = (unsigned int *)(v14 + 536);
            v13 -= 536;
          }
          while (v13);
          v6 = *(unsigned int **)a1;
          v15 = *(_DWORD *)(a1 + 8);
          v5 = v21;
          if (v15)
          {
            v16 = *(unsigned int **)a1;
            v17 = 134 * v15;
            do
            {
              v18 = *(unsigned int **)&v16[v17 - 68];
              if (&v16[v17 - 64] != v18)
                free(v18);
              if ((v16[v17 - 134] & 1) == 0)
                MEMORY[0x1CAA32FB4](*(_QWORD *)&v16[v17 - 132], 8);
              v17 -= 134;
            }
            while (v17 * 4);
            v6 = *(unsigned int **)a1;
            v5 = v21;
          }
        }
        v8 = v22;
        if (v6 != (unsigned int *)(a1 + 16))
        {
          v19 = v5;
          free(v6);
          v5 = v19;
        }
        *(_QWORD *)a1 = v5;
        *(_DWORD *)(a1 + 12) = v8;
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v9 = &v5[134 * a2];
        v10 = &v5[134 * v2];
        v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          bzero(v10 + 2, 0x210uLL);
          *(_QWORD *)v10 = 1;
          for (i = 2; i != 66; i += 4)
            *(int64x2_t *)&v10[i] = v20;
          *((_QWORD *)v10 + 33) = v10 + 70;
          *((_QWORD *)v10 + 34) = 0x2000000000;
          v10 += 134;
        }
        while (v10 != v9);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

char **sub_1C4B0456C(uint64_t a1)
{
  void **v2;
  void *v3;

  v2 = (void **)(a1 + 34400);
  v3 = *(void **)(a1 + 34672);
  if (v3 != (void *)(a1 + 34696))
    free(v3);
  if (*v2 != (void *)(a1 + 34416))
    free(*v2);
  sub_1C4B045F0((char **)(a1 + 25776));
  sub_1C4B045F0((char **)(a1 + 17184));
  sub_1C4B045F0((char **)(a1 + 8592));
  return sub_1C4B045F0((char **)a1);
}

char **sub_1C4B045F0(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 536 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(char **)&v2[v4 - 272];
      if (&v2[v4 - 256] != v6)
      {
        v9 = v4;
        v11 = v2;
        v8 = &v2[v4];
        free(v6);
        v5 = v8;
        v4 = v9;
        v2 = v11;
      }
      if ((*(v5 - 536) & 1) == 0)
      {
        v10 = v4;
        v12 = v2;
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v2[v4 - 528], 8);
        v4 = v10;
        v2 = v12;
      }
      v4 -= 536;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C4B046AC(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E7FB3A28;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 97), 8);
  v2 = (_QWORD *)*((_QWORD *)a1 + 79);
  if (v2 != (_QWORD *)((char *)a1 + 648))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 76), 8);
  v3 = (_QWORD *)*((_QWORD *)a1 + 66);
  if (v3 != (_QWORD *)((char *)a1 + 544))
    free(v3);
  v4 = (void *)*((_QWORD *)a1 + 52);
  if (v4 != *((void **)a1 + 51))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 41);
  if (v5 != (_QWORD *)((char *)a1 + 344))
    free(v5);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 32), 8);
  sub_1C4926674(a1);
}

void sub_1C4B04754(__int128 *a1, uint64_t *a2, int **a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7EE950, "run-scs-lu", 0xAuLL);
  xmmword_1ED7EE970 = *a1;
  v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    v7 = *a2;
    v8 = v7 + 40 * v6;
    do
    {
      sub_1C6159F3C(*(unsigned __int8 **)v7, *(_QWORD *)(v7 + 8), *(_DWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32));
      v7 += 40;
    }
    while (v7 != v8);
  }
  v9 = *a3;
  dword_1ED7EE9D0 = **a3;
  byte_1ED7EE9E4 = 1;
  dword_1ED7EE9E0 = *v9;
}

unint64_t sub_1C4B047F8(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7EEA00 >= HIDWORD(qword_1ED7EEA00))
  {
    v3 = qword_1ED7EEA00 + 1;
    if (qword_1ED7EE9F8 <= a1 && qword_1ED7EE9F8 + 48 * (unint64_t)qword_1ED7EEA00 > a1)
    {
      v5 = a1 - qword_1ED7EE9F8;
      sub_1C6159FF0(v3);
      return qword_1ED7EE9F8 + v5;
    }
    else
    {
      sub_1C6159FF0(v3);
    }
  }
  return a1;
}

_QWORD *sub_1C4B0486C(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 33;
      goto LABEL_9;
    }
    v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
      do
LABEL_9:
        *v3++ = -4096;
      while (v3 != v4);
      v5 = *(_DWORD *)result & 1;
      goto LABEL_11;
    }
    return sub_1C615A0BC(result);
  }
  return result;
}

uint64_t sub_1C4B048E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v17 = 0;
  result = sub_1C4B03B6C(a2, *a3, &v17);
  v7 = v17;
  v8 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v8 & 1) != 0)
    {
      v15 = a2 + 8;
      v16 = 32;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(unsigned int *)(a2 + 16);
    }
    v14 = 0;
    v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  v9 = v8 >> 1;
  if ((v8 & 1) != 0)
    v10 = 32;
  else
    v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_16;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_16:
    sub_1C4B04A24(a2, v10);
    v17 = 0;
    result = sub_1C4B03B6C(a2, *a3, &v17);
    v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v7 = *a3;
  v11 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v12 = 32;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 16);
  }
  v13 = v11 + 8 * v12;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1C4B04A24(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C615A178(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C615A178(a1, v14, v8);
}

uint64_t sub_1C4B04B98(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4B04C24(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4B04CE8(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4B04CE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4B04B98(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_1C4B04DA0(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4A06ED8((uint64_t)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4A06F6C(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * a2[4];
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C4B04E2C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v12 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4B04EB4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C615A37C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4B04F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  llvm::LiveInterval *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  int32x2_t *v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v30 = v32;
  v31 = 0x400000000;
  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 32 * v4;
    v7 = (int *)(*(_QWORD *)(a2 + 32) + 4);
    do
    {
      if (!*((_BYTE *)v7 - 4))
      {
        v8 = *(_QWORD *)(a1 + 288);
        v9 = *v7;
        if ((*v7 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v8 + 416)
          || (v10 = *(llvm::LiveInterval **)(*(_QWORD *)(v8 + 408) + 8 * (v9 & 0x7FFFFFFF))) == 0)
        {
          v10 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v9);
          v11 = *(_QWORD *)(v8 + 304);
          v12 = *(_QWORD *)(v8 + 248);
          *(_QWORD *)v11 = v12;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 40);
          *(_OWORD *)(v11 + 16) = *(_OWORD *)(v8 + 288);
          *(_QWORD *)(v11 + 32) = v8 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v11);
          *(_DWORD *)(v11 + 184) = 0;
          v13 = *(_QWORD *)(v8 + 256);
          v15 = *(_BYTE *)(v13 + 16) == 0;
          v14 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (*((_DWORD *)v10 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v15 = v15 || v14 == 0;
          v16 = !v15;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v8 + 304), v10, v16);
          llvm::LiveIntervals::computeDeadValues(v8, (uint64_t)v10, 0);
          v5 = v31;
        }
        if (v5 >= HIDWORD(v31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v5 + 1, 8);
          v5 = v31;
        }
        *((_QWORD *)v30 + v5) = v10;
        v5 = v31 + 1;
        LODWORD(v31) = v31 + 1;
      }
      v7 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  v17 = *(int32x2_t **)(*(_QWORD *)(a1 + 288) + 288);
  v18 = v17[46];
  v19 = v17[48].u32[0];
  if (!(_DWORD)v19)
    goto LABEL_25;
  LODWORD(v20) = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v21 = (uint64_t *)(*(_QWORD *)&v18 + 16 * v20);
  v22 = *v21;
  if (*v21 != a2)
  {
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v22 = *(_QWORD *)(*(_QWORD *)&v18 + 16 * v20);
      if (v22 == a2)
      {
        v21 = (uint64_t *)(*(_QWORD *)&v18 + 16 * v20);
        goto LABEL_26;
      }
    }
LABEL_25:
    v21 = (uint64_t *)(*(_QWORD *)&v18 + 16 * v19);
  }
LABEL_26:
  if (v21 != (uint64_t *)(*(_QWORD *)&v18 + 16 * v19))
  {
    v25 = v21[1] & 0xFFFFFFFFFFFFFFF8;
    *v21 = -8192;
    v17[47] = vadd_s32(v17[47], (int32x2_t)0x1FFFFFFFFLL);
    *(_QWORD *)(v25 + 16) = 0;
  }
  v26 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v26 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v26 = a2;
      do
        v26 = *(_QWORD *)(v26 + 8);
      while ((*(_WORD *)(v26 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v26 + 8));
  v27 = (uint64_t *)v30;
  if ((_DWORD)v31)
  {
    v28 = 8 * v31;
    do
    {
      v29 = *v27++;
      llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), v29, 0);
      v28 -= 8;
    }
    while (v28);
    v27 = (uint64_t *)v30;
  }
  if (v27 != v32)
    free(v27);
}

uint64_t sub_1C4B05230()
{
  int v1;
  int *v2;
  __int128 v3;
  void *v4[2];
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = "Run SCS LU placement pass";
  *((_QWORD *)&v3 + 1) = 25;
  v4[0] = v5;
  v5[0] = "off";
  v5[1] = 3;
  v6 = 0;
  v7 = "Do not run SCS LU";
  v8 = 17;
  v9 = "cliqueA";
  v10 = 7;
  v11 = 1;
  v12 = "Run SCS LU for cliqueA";
  v13 = 22;
  v14 = "cliqueST";
  v15 = 8;
  v17 = "Run SCS LU for cliqueST";
  v18 = 23;
  v19 = "both";
  v20 = 4;
  v16 = 2;
  v21 = 3;
  v22 = "Run SCS LU for both cliqueA and cliqueST";
  v23 = 40;
  v4[1] = (void *)0x400000004;
  v1 = 3;
  v2 = &v1;
  sub_1C6159E3C(&v3, (uint64_t *)v4, &v2);
  if (v4[0] != v5)
    free(v4[0]);
  return __cxa_atexit((void (*)(void *))sub_1C6159100, qword_1ED7EE950, &dword_1C475E000);
}

uint64_t sub_1C4B05384(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Uniform Folding";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "agx3-uniform-folding";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F66A9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4B05410;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4B05410()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F66A9);
  *result = &off_1E7FB3C60;
  return result;
}

void sub_1C4B05450(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4B054E4(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4B05570()
{
  return "AGX3 Write Uniform Folding Pass";
}

void *sub_1C4B05580(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4B055B0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  const llvm::MachineOperand *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t (***v22)();
  void (**v23)(uint64_t (***)());
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  _BYTE *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int *v59;
  unsigned int *v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t UniqueVRegDef;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  __int16 ***v109;
  uint64_t v110;
  char v111;
  uint64_t v113;
  _QWORD *v114;
  char v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  unsigned __int8 *v119[4];
  void *v120;
  uint64_t v121;
  _BYTE v122[64];
  uint64_t (**v123)();
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v2 = a2[5];
  v113 = v2;
  if ((*(_WORD *)(*a2 + 18) & 0x3FF0) != 0x640)
  {
    v52 = (_QWORD *)a2[41];
    v114 = a2 + 40;
    if (v52 == a2 + 40)
      goto LABEL_224;
    v111 = 0;
LABEL_110:
    v53 = v52 + 6;
    v54 = v52[7];
    v118 = v52 + 6;
    if ((_QWORD *)v54 == v52 + 6)
      goto LABEL_222;
LABEL_196:
    if (!v54 || (v97 = v54, (*(_BYTE *)v54 & 4) == 0))
    {
      v97 = v54;
      if ((*(_WORD *)(v54 + 44) & 8) != 0)
      {
        v97 = v54;
        do
          v97 = *(_QWORD *)(v97 + 8);
        while ((*(_WORD *)(v97 + 44) & 8) != 0);
      }
    }
    v98 = *(_QWORD *)(v97 + 8);
    v99 = **(unsigned __int16 **)(v54 + 16);
    if (v99 == 19)
    {
      v100 = *(_QWORD *)(v54 + 32);
      if (*(_BYTE *)(v100 + 32))
        goto LABEL_220;
      UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v2, *(_DWORD *)(v100 + 36));
      v102 = v54;
      if (UniqueVRegDef)
        v54 = UniqueVRegDef;
      v99 = **(unsigned __int16 **)(v54 + 16);
    }
    else
    {
      v102 = 0;
    }
    if ((v99 & 0xFFFFFFFB) == 0x228)
    {
      v103 = sub_1C4C2FD5C(v99);
      v57 = 0;
      v104 = *(_QWORD *)(v54 + 32);
      v105 = v104 + 32 * v103;
      if (*(_BYTE *)v105 != 7)
        goto LABEL_221;
      v106 = (int *)(v105 + 16);
      if (*(_DWORD *)(v105 + 16) != 64)
        goto LABEL_221;
      v107 = v102 ? v102 : v54;
      v108 = *(unsigned int *)(*(_QWORD *)(v107 + 32) + 4);
      if ((v108 & 0x80000000) != 0)
      {
        v110 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16 * (v108 & 0x7FFFFFFF));
        v109 = (v110 & 4) != 0 ? 0 : (__int16 ***)(v110 & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v109 = 0;
      }
      if (v109 == (__int16 ***)&off_1E7FB1B88 || v109 == &off_1E7FB1568)
      {
        if ((v108 & 0x80000000) != 0)
          v55 = (uint64_t *)(*(_QWORD *)(v2 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
        else
          v55 = (uint64_t *)(*(_QWORD *)(v2 + 272) + 8 * v108);
        v56 = *v55;
        if (!*v55)
        {
LABEL_118:
          v57 = 1;
          v53 = v118;
          goto LABEL_221;
        }
        while ((*(_BYTE *)(v56 + 3) & 1) != 0)
        {
          v56 = *(_QWORD *)(v56 + 24);
          if (!v56)
            goto LABEL_118;
        }
        v116 = v52;
        v58 = v104 + 32 * v103;
        v59 = (int *)(v58 + 24);
        v60 = (unsigned int *)(v58 + 4);
        v115 = 1;
        while (1)
        {
          v61 = v56;
          do
          {
            v56 = *(_QWORD *)(v56 + 24);
            if (!v56)
            {
              if (!sub_1C49C8528(v61))
                goto LABEL_173;
              goto LABEL_126;
            }
          }
          while ((*(_BYTE *)(v56 + 3) & 1) != 0);
          if ((sub_1C49C8528(v61) & 1) == 0)
          {
            v115 = 0;
            continue;
          }
LABEL_126:
          if (!v102
            || ((v62 = (*(_DWORD *)(*(_QWORD *)(v102 + 32) + 32) >> 8) & 0xFFF,
                 !*(_DWORD *)(*(_QWORD *)(v102 + 32) + 32))
              ? (v63 = v62 == 0)
              : (v63 = 1),
                v63))
          {
            v64 = *v106;
            v65 = *v59;
            v66 = *v60;
            v67 = *(_DWORD *)v105 & 0xFFF00;
            if (!*(_DWORD *)v105)
              v67 = 0;
            v68 = *(_DWORD *)v61;
            if (!*(_DWORD *)v61)
            {
              v69 = *(_QWORD *)(v61 + 16);
              if (v69)
              {
                v70 = *(_QWORD *)(v61 + 8);
                if (v70)
                {
                  v71 = *(_QWORD *)(v70 + 24);
                  if (v71)
                  {
                    v72 = *(_QWORD *)(v71 + 32);
                    if (v72)
                    {
                      v73 = *(_QWORD *)(v72 + 40);
                      v74 = *(unsigned int *)(v61 + 4);
                      if ((v74 & 0x80000000) != 0)
                        v75 = (uint64_t *)(*(_QWORD *)(v73 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
                      else
                        v75 = (uint64_t *)(*(_QWORD *)(v73 + 272) + 8 * v74);
                      v76 = *v75;
                      v77 = *(_QWORD *)(v61 + 24);
                      if (*v75 != v61)
                        v75 = (uint64_t *)(v69 + 24);
                      *v75 = v77;
                      if (v77)
                        v78 = v77;
                      else
                        v78 = v76;
                      *(_QWORD *)(v78 + 16) = v69;
                      *(_QWORD *)(v61 + 16) = 0;
                      *(_QWORD *)(v61 + 24) = 0;
                      v68 = *(_DWORD *)v61;
                    }
                  }
                }
              }
            }
            *(_DWORD *)(v61 + 16) = v64;
            *(_DWORD *)(v61 + 4) = v66;
          }
          else
          {
            v79 = *v106;
            v80 = *v59;
            if (v62 == 2)
              v81 = *v60 + 1;
            else
              v81 = *v60;
            v68 = *(_DWORD *)v61;
            if (!*(_DWORD *)v61)
            {
              v82 = *(_QWORD *)(v61 + 16);
              if (v82)
              {
                v83 = *(_QWORD *)(v61 + 8);
                if (v83)
                {
                  v84 = *(_QWORD *)(v83 + 24);
                  if (v84)
                  {
                    v85 = *(_QWORD *)(v84 + 32);
                    if (v85)
                    {
                      v86 = *(_QWORD *)(v85 + 40);
                      v87 = *(unsigned int *)(v61 + 4);
                      if ((v87 & 0x80000000) != 0)
                        v88 = (uint64_t *)(*(_QWORD *)(v86 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
                      else
                        v88 = (uint64_t *)(*(_QWORD *)(v86 + 272) + 8 * v87);
                      v89 = *v88;
                      v90 = *(_QWORD *)(v61 + 24);
                      if (*v88 != v61)
                        v88 = (uint64_t *)(v82 + 24);
                      *v88 = v90;
                      if (v90)
                        v91 = v90;
                      else
                        v91 = v89;
                      *(_QWORD *)(v91 + 16) = v82;
                      *(_QWORD *)(v61 + 16) = 0;
                      *(_QWORD *)(v61 + 24) = 0;
                      v68 = *(_DWORD *)v61;
                    }
                  }
                }
              }
            }
            *(_DWORD *)(v61 + 16) = v79;
            *(_DWORD *)(v61 + 4) = v81;
            v65 = v80 + HIDWORD(v81);
            v67 = 256;
          }
          *(_DWORD *)(v61 + 24) = v65;
          *(_DWORD *)v61 = v68 & 0xFFF00000 | v67 | 7;
          if (!v56)
          {
            if ((v115 & 1) != 0)
            {
              v2 = v113;
              v52 = v116;
              v53 = v118;
              if (!v102)
                goto LABEL_182;
              v92 = *(unsigned int *)(*(_QWORD *)(v54 + 32) + 4);
              if ((v92 & 0x80000000) != 0)
                v93 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
              else
                v93 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v92);
              v94 = *v93;
              if (!v94)
                goto LABEL_186;
              while ((*(_BYTE *)(v94 + 3) & 1) != 0)
              {
                v94 = *(_QWORD *)(v94 + 24);
                if (!v94)
                  goto LABEL_185;
              }
              while (1)
              {
                v94 = *(_QWORD *)(v94 + 24);
                if (!v94)
                  break;
                if ((*(_BYTE *)(v94 + 3) & 1) == 0)
                  goto LABEL_185;
              }
LABEL_182:
              v95 = v54;
              if ((*(_BYTE *)v54 & 4) == 0)
              {
                v95 = v54;
                if ((*(_WORD *)(v54 + 44) & 8) != 0)
                {
                  v95 = v54;
                  do
                    v95 = *(_QWORD *)(v95 + 8);
                  while ((*(_WORD *)(v95 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v54 + 24) + 40, v54, *(_QWORD *)(v95 + 8));
LABEL_185:
              if (v102)
              {
LABEL_186:
                v96 = v102;
                if ((*(_BYTE *)v102 & 4) == 0)
                {
                  v96 = v102;
                  if ((*(_WORD *)(v102 + 44) & 8) != 0)
                  {
                    v96 = v102;
                    do
                      v96 = *(_QWORD *)(v96 + 8);
                    while ((*(_WORD *)(v96 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(v102 + 24) + 40, v102, *(_QWORD *)(v96 + 8));
              }
              v57 = 1;
            }
            else
            {
LABEL_173:
              v57 = 1;
              v2 = v113;
              v52 = v116;
              v53 = v118;
            }
LABEL_221:
            v111 |= v57;
            v54 = v98;
            if ((_QWORD *)v98 == v53)
            {
LABEL_222:
              v52 = (_QWORD *)v52[1];
              if (v52 == v114)
                return v111 & 1;
              goto LABEL_110;
            }
            goto LABEL_196;
          }
        }
      }
    }
LABEL_220:
    v57 = 0;
    goto LABEL_221;
  }
  v120 = v122;
  v121 = 0x800000000;
  v3 = a2 + 40;
  v4 = (_QWORD *)a2[41];
  if (v4 == a2 + 40)
  {
LABEL_224:
    v111 = 0;
    return v111 & 1;
  }
  v117 = a2 + 40;
  do
  {
    v5 = v4[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_9:
    while ((_QWORD *)v5 != v4 + 6)
    {
      v6 = v5;
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
      v7 = **(unsigned __int16 **)(v6 + 16);
      if ((v7 - 560) >= 0xFFFFFFFE)
      {
        v8 = *(const llvm::MachineOperand **)(v6 + 32);
        if (*(_DWORD *)v8 == 7
          && *((_DWORD *)v8 + 4) == 64
          && (v7 != 559 || (*(_DWORD *)v8 & 0x200) == 0))
        {
          v10 = *((unsigned int *)v8 + 8 * sub_1C4C2FD5C(v7) + 1);
          v11 = (uint64_t *)((v10 & 0x80000000) != 0
                          ? *(_QWORD *)(v2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v2 + 272) + 8 * v10);
          v12 = *v11;
          if (v12)
          {
            while ((*(_BYTE *)(v12 + 3) & 1) != 0)
            {
              v12 = *(_QWORD *)(v12 + 24);
              if (!v12)
                goto LABEL_9;
            }
            while (1)
            {
              v12 = *(_QWORD *)(v12 + 24);
              if (!v12)
                break;
              if ((*(_BYTE *)(v12 + 3) & 1) == 0)
                goto LABEL_9;
            }
            v13 = (uint64_t *)((v10 & 0x80000000) != 0
                            ? *(_QWORD *)(v2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                            : *(_QWORD *)(v2 + 272) + 8 * v10);
            v14 = *v13;
            if (v14)
            {
              if ((*(_BYTE *)(v14 + 3) & 1) != 0
                || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
              {
                v15 = *(_QWORD *)(v14 + 8);
              }
              else
              {
                v15 = 0;
              }
              v2 = v113;
            }
            else
            {
              v15 = 0;
            }
            v16 = *(unsigned __int16 **)(v15 + 16);
            v17 = *v16;
            v18 = (v17 - 9) > 0x3C || ((1 << (v17 - 9)) & 0x1000000000000605) == 0;
            v19 = !v18 || v17 == 0;
            if (!v19 && (v16[4] & 0x10) == 0)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 32) + 16);
              v123 = &off_1E81316D0;
              *(_QWORD *)&v124 = v20;
              *(_QWORD *)&v125 = &v123;
              v21 = sub_1C4C0B384(&v123);
              v22 = (uint64_t (***)())v125;
              if ((uint64_t (***)())v125 == &v123)
              {
                v23 = (void (**)(uint64_t (***)()))(v123 + 4);
                v22 = &v123;
LABEL_48:
                (*v23)(v22);
                v3 = v117;
                goto LABEL_49;
              }
              v3 = v117;
              if ((_QWORD)v125)
              {
                v23 = (void (**)(uint64_t (***)()))(*(_QWORD *)v125 + 40);
                goto LABEL_48;
              }
LABEL_49:
              if (sub_1C4C9179C(v17, v21) && !sub_1C4AD7110(v15))
              {
                v24 = sub_1C4C915F0(**(unsigned __int16 **)(v15 + 16), 0, 3);
                v25 = *(_QWORD *)(v6 + 24);
                v126 = 0u;
                v127 = 0u;
                v124 = 0u;
                v125 = 0u;
                v26 = *(_QWORD *)(v25 + 32);
                v123 = &off_1E816EC08;
                *(_QWORD *)&v124 = v26;
                *(_QWORD *)&v125 = *(_QWORD *)(v26 + 40);
                *((_QWORD *)&v124 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
                v119[0] = 0;
                if (*((_QWORD *)&v125 + 1))
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v125 + 8, *((unsigned __int8 **)&v125 + 1));
                  *((unsigned __int8 **)&v125 + 1) = v119[0];
                  if (v119[0])
                    llvm::MetadataTracking::retrack((uint64_t)v119, v119[0], (uint64_t)&v125 + 8);
                }
                else
                {
                  *((_QWORD *)&v125 + 1) = 0;
                }
                *((_QWORD *)&v126 + 1) = v6;
                *(_QWORD *)&v127 = 0;
                *(_QWORD *)&v126 = *(_QWORD *)(v6 + 24);
                *((_QWORD *)&v126 + 1) = v6;
                if ((__int128 *)(v6 + 56) != (__int128 *)((char *)&v125 + 8))
                {
                  if (*((_QWORD *)&v125 + 1))
                    llvm::MetadataTracking::untrack((uint64_t)&v125 + 8, *((unsigned __int8 **)&v125 + 1));
                  v27 = *(unsigned __int8 **)(v6 + 56);
                  *((_QWORD *)&v125 + 1) = v27;
                  if (v27)
                    llvm::MetadataTracking::track((uint64_t)&v125 + 8, v27, 2);
                }
                v29 = sub_1C55437B8(&v123, v24);
                v30 = (unint64_t *)v28;
                v31 = (unint64_t *)*((_QWORD *)&v126 + 1);
                v32 = *(_QWORD *)(v126 + 40);
                *(_QWORD *)(v28 + 24) = v32;
                v33 = *(_QWORD *)(v32 + 32);
                v34 = *(unsigned int *)(v28 + 40);
                if ((_DWORD)v34)
                {
                  v41 = *(_QWORD *)(v28 + 32);
                  v42 = *(_QWORD *)(v33 + 40);
                  v43 = 32 * v34;
                  do
                  {
                    if (!*(_BYTE *)v41)
                    {
                      v44 = *(unsigned int *)(v41 + 4);
                      if ((int)v44 >= 0)
                        v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
                      else
                        v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
                      v46 = *v45;
                      if (*v45)
                      {
                        v47 = *(_QWORD *)(v46 + 16);
                        *(_QWORD *)(v46 + 16) = v41;
                        *(_QWORD *)(v41 + 16) = v47;
                        if ((*(_BYTE *)(v41 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v41 + 24) = v46;
                        }
                        else
                        {
                          *(_QWORD *)(v41 + 24) = 0;
                          v45 = (uint64_t *)(v47 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v41 + 16) = v41;
                        *(_QWORD *)(v41 + 24) = 0;
                      }
                      *v45 = v41;
                    }
                    v41 += 32;
                    v43 -= 32;
                  }
                  while (v43);
                }
                v35 = *(_QWORD *)(v33 + 728);
                if (v35)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 24))(v35, v28);
                v36 = *v31 & 0xFFFFFFFFFFFFFFF8;
                *v30 = v36 | *v30 & 7;
                v30[1] = (unint64_t)v31;
                *(_QWORD *)(v36 + 8) = v30;
                *v31 = *v31 & 7 | (unint64_t)v30;
                if ((_QWORD)v127)
                  (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v127 + 24))(v127, v30);
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, v8);
                LODWORD(v119[0]) = 1;
                v119[1] = 0;
                v119[2] = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)v119);
                if (*(_DWORD *)(v15 + 40) >= 2u)
                {
                  v37 = 32;
                  v38 = 1;
                  do
                  {
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)(*(_QWORD *)(v15 + 32) + v37));
                    ++v38;
                    v37 += 32;
                  }
                  while (v38 < *(unsigned int *)(v15 + 40));
                }
                v39 = v6;
                if ((*(_BYTE *)v6 & 4) == 0)
                {
                  v39 = v6;
                  if ((*(_WORD *)(v6 + 44) & 8) != 0)
                  {
                    v39 = v6;
                    do
                      v39 = *(_QWORD *)(v39 + 8);
                    while ((*(_WORD *)(v39 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v39 + 8));
                v40 = v121;
                v2 = v113;
                if (v121 >= (unint64_t)HIDWORD(v121))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 8);
                  v40 = v121;
                }
                *((_QWORD *)v120 + v40) = v15;
                LODWORD(v121) = v121 + 1;
                v123 = &off_1E816EC08;
                if (*((_QWORD *)&v125 + 1))
                  llvm::MetadataTracking::untrack((uint64_t)&v125 + 8, *((unsigned __int8 **)&v125 + 1));
              }
            }
          }
        }
      }
    }
    v4 = (_QWORD *)v4[1];
  }
  while (v4 != v3);
  v48 = (char *)v120;
  if ((_DWORD)v121)
  {
    v49 = (char *)v120 + 8 * v121;
    do
    {
      v50 = *(_BYTE **)v48;
      v51 = *(_BYTE **)v48;
      if ((**(_BYTE **)v48 & 4) == 0)
      {
        v51 = *(_BYTE **)v48;
        if ((*((_WORD *)v50 + 22) & 8) != 0)
        {
          v51 = *(_BYTE **)v48;
          do
            v51 = (_BYTE *)*((_QWORD *)v51 + 1);
          while ((*((_WORD *)v51 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v50 + 3) + 40, (uint64_t)v50, *((_QWORD *)v51 + 1));
      v48 += 8;
    }
    while (v48 != v49);
    v48 = (char *)v120;
    v111 = (_DWORD)v121 != 0;
  }
  else
  {
    v111 = 0;
  }
  if (v48 != v122)
    free(v48);
  return v111 & 1;
}

uint64_t sub_1C4B060E0(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EEBA8);
  *v2 = &off_1E7FB3D20;
  v2[31] = 0;
  v2[32] = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7EEBB0);
  if (v4 != -1)
  {
    v8[0] = sub_1C4B061A4;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7EEBB0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4B061A4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3SFETransformationPass";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "agx3-sfe-transformation";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EEBA8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4B072EC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4B06238(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4B062CC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4B06358()
{
  return "AGX3 starvation free execution pass";
}

void *sub_1C4B06368(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  *((_BYTE *)this + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4B063B4(uint64_t a1, const llvm::Module *a2)
{
  uint64_t ForwardProgressMode;
  uint64_t v6;
  void **v7;
  void *v8;
  _QWORD *v9;
  uint64_t i;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t NearestCommonDominator;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  llvm::MachineFunction *v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  llvm::MachineFunction *v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  uint64_t (**v129)();
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  _BYTE v141[64];
  void *v142;
  uint64_t v143;
  _BYTE v144[32];
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _BYTE v149[64];
  void *v150;
  uint64_t v151;
  _BYTE v152[32];
  char *v153;
  uint64_t v154;
  _QWORD v155[6];

  v155[4] = *MEMORY[0x1E0C80C00];
  v127 = (_QWORD *)((char *)a2 + 320);
  if (*((const llvm::Module **)a2 + 40) == (const llvm::Module *)((char *)a2 + 320))
    return 0;
  if (!byte_1EF8EFB48)
  {
    ForwardProgressMode = llvm::AGXIR::getForwardProgressMode(*(llvm::AGXIR **)(*(_QWORD *)a2 + 40), a2);
    if ((ForwardProgressMode & 0xFF00000000) == 0 || ForwardProgressMode == 0)
      return 0;
  }
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 40);
  v145 = 0;
  v146 = 0;
  v147 = v149;
  v148 = 0x800000000;
  v150 = v152;
  v151 = 0x400000000;
  v137 = 0;
  v138 = 0;
  v139 = v141;
  v140 = 0x800000000;
  v142 = v144;
  v143 = 0x400000000;
  v9 = (_QWORD *)*((_QWORD *)a2 + 41);
  if (v9 == v127)
    goto LABEL_78;
  v125 = a1;
  do
  {
    for (i = v9[7]; (_QWORD *)i != v9 + 6; i = *(_QWORD *)(i + 8))
    {
      v11 = *(unsigned __int16 **)(i + 16);
      v12 = *v11;
      v13 = sub_1C4C915C4(v12);
      if ((v13 & 0xFF00000000) == 0)
        goto LABEL_47;
      v14 = (v13 - 61);
      if (v14 > 0x3F)
        goto LABEL_24;
      if (((1 << (v13 - 61)) & 0xF) == 0)
      {
        if (((1 << (v13 - 61)) & 0x200180000000) != 0)
        {
          v15 = 1;
          goto LABEL_40;
        }
        if (v14 == 63)
        {
          v16 = v143;
          if (v143 >= (unint64_t)HIDWORD(v143))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, (uint64_t)v144, v143 + 1, 8);
            v16 = v143;
          }
          *((_QWORD *)v142 + v16) = i;
          v17 = &v143;
          goto LABEL_46;
        }
LABEL_24:
        if ((_DWORD)v13 == 3)
        {
          v19 = v151;
          if (v151 >= (unint64_t)HIDWORD(v151))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 8);
            v19 = v151;
          }
          *((_QWORD *)v150 + v19) = i;
          v17 = &v151;
          goto LABEL_46;
        }
        if ((_DWORD)v13 == 190)
        {
          v18 = ((*(_QWORD *)(*(_QWORD *)(i + 32) + 32 * sub_1C4C2FD5C(v12) + 16) >> 42) & 7) - 1;
          if (v18 >= 5 || ((0x1Bu >> v18) & 1) == 0)
            goto LABEL_47;
        }
        else
        {
          v20 = *(_WORD *)(i + 44);
          v21 = *((_QWORD *)v11 + 1);
          if ((v20 & 0xC) == 0 || (v20 & 4) != 0)
          {
            if ((v21 & 0x80) == 0)
              goto LABEL_47;
          }
          else
          {
            v22 = i;
            if ((v21 & 0x80) == 0)
            {
              while ((*(_WORD *)(v22 + 44) & 8) != 0)
              {
                v15 = 0;
                v22 = *(_QWORD *)(v22 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v22 + 16) + 8) & 0x80) != 0)
                  goto LABEL_40;
              }
              goto LABEL_47;
            }
          }
        }
      }
      v15 = 0;
LABEL_40:
      v23 = v140;
      if (v140 >= (unint64_t)HIDWORD(v140))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, (uint64_t)v141, v140 + 1, 8);
        v23 = v140;
      }
      *((_QWORD *)v139 + v23) = i;
      LODWORD(v140) = v140 + 1;
      if ((v15 & 1) == 0)
      {
        v24 = v148;
        if (v148 >= (unint64_t)HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 8);
          v24 = v148;
        }
        *((_QWORD *)v147 + v24) = i;
        v17 = &v148;
LABEL_46:
        ++*(_DWORD *)v17;
      }
LABEL_47:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v9 = (_QWORD *)v9[1];
  }
  while (v9 != v127);
  if (!(_DWORD)v148)
  {
    v46 = 0;
    goto LABEL_79;
  }
  sub_1C4B070D8(a1, (uint64_t)&v145);
  if (!(_DWORD)v151)
    goto LABEL_66;
  v25 = 0;
  v26 = (uint64_t *)v150;
  v27 = 8 * v151;
  while (2)
  {
    v28 = *v26;
    v29 = *(_QWORD *)(a1 + 256);
    v30 = *(_QWORD *)(*v26 + 24);
    v31 = v145;
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v29);
    if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v29 + 1320), v30, v31))
    {
LABEL_61:
      a1 = v125;
      goto LABEL_62;
    }
    if (!v25)
    {
      v25 = v28;
      goto LABEL_61;
    }
    a1 = v125;
    if (!sub_1C4B071BC(*(_QWORD *)(v125 + 256), v25, v28))
      v25 = v28;
LABEL_62:
    ++v26;
    v27 -= 8;
    if (v27)
      continue;
    break;
  }
  if (!v146)
  {
    if (!v25)
      goto LABEL_66;
    goto LABEL_78;
  }
  if (v25 && sub_1C4B071BC(*(_QWORD *)(a1 + 256), v25, v146))
  {
LABEL_78:
    v46 = 0;
    goto LABEL_79;
  }
LABEL_66:
  v32 = sub_1C4B07248(a1, &v145);
  v33 = *(_QWORD *)(v32 + 24);
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v34 = *(_QWORD *)(v33 + 32);
  v35 = *(_QWORD *)(v34 + 40);
  v129 = &off_1E816EC08;
  *(_QWORD *)&v130 = v34;
  v131 = v35;
  *((_QWORD *)&v130 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 104))(*(_QWORD *)(v34 + 16));
  v153 = 0;
  *((_QWORD *)&v132 + 1) = v32;
  *(_QWORD *)&v133 = 0;
  *(_QWORD *)&v132 = *(_QWORD *)(v32 + 24);
  *((_QWORD *)&v132 + 1) = v32;
  if ((__int128 *)(v32 + 56) != (__int128 *)((char *)&v131 + 8))
  {
    v36 = *(unsigned __int8 **)(v32 + 56);
    *((_QWORD *)&v131 + 1) = v36;
    if (v36)
      llvm::MetadataTracking::track((uint64_t)&v131 + 8, v36, 2);
  }
  v38 = sub_1C55437B8(&v129, 0x19Eu);
  v39 = (unint64_t *)v37;
  v40 = (unint64_t *)*((_QWORD *)&v132 + 1);
  v41 = *(_QWORD *)(v132 + 40);
  *(_QWORD *)(v37 + 24) = v41;
  v42 = *(_QWORD *)(v41 + 32);
  v43 = *(unsigned int *)(v37 + 40);
  if ((_DWORD)v43)
  {
    v102 = *(_QWORD *)(v37 + 32);
    v103 = *(_QWORD *)(v42 + 40);
    v104 = 32 * v43;
    do
    {
      if (!*(_BYTE *)v102)
      {
        v105 = *(unsigned int *)(v102 + 4);
        if ((int)v105 >= 0)
          v106 = (uint64_t *)(*(_QWORD *)(v103 + 272) + 8 * v105);
        else
          v106 = (uint64_t *)(*(_QWORD *)(v103 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8);
        v107 = *v106;
        if (*v106)
        {
          v108 = *(_QWORD *)(v107 + 16);
          *(_QWORD *)(v107 + 16) = v102;
          *(_QWORD *)(v102 + 16) = v108;
          if ((*(_BYTE *)(v102 + 3) & 1) != 0)
          {
            *(_QWORD *)(v102 + 24) = v107;
          }
          else
          {
            *(_QWORD *)(v102 + 24) = 0;
            v106 = (uint64_t *)(v108 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v102 + 16) = v102;
          *(_QWORD *)(v102 + 24) = 0;
        }
        *v106 = v102;
      }
      v102 += 32;
      v104 -= 32;
    }
    while (v104);
  }
  v44 = *(_QWORD *)(v42 + 728);
  if (v44)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v37);
  v45 = *v40 & 0xFFFFFFFFFFFFFFF8;
  *v39 = v45 | *v39 & 7;
  v39[1] = (unint64_t)v40;
  *(_QWORD *)(v45 + 8) = v39;
  *v40 = *v40 & 7 | (unint64_t)v39;
  if ((_QWORD)v133)
    (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v39);
  v46 = 1;
  LODWORD(v153) = 1;
  v154 = 0;
  v155[0] = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v153);
  LODWORD(v153) = 1;
  v154 = 0;
  v155[0] = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v38, (const llvm::MachineOperand *)&v153);
  v129 = &off_1E816EC08;
  if (*((_QWORD *)&v131 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v131 + 8, *((unsigned __int8 **)&v131 + 1));
LABEL_79:
  v47 = 0;
  if ((_DWORD)v140 && (_DWORD)v143)
  {
    sub_1C4B070D8(a1, (uint64_t)&v137);
    v153 = (char *)v155;
    v154 = 0x400000000;
    if ((_DWORD)v143)
    {
      v123 = v46;
      v48 = (uint64_t *)v142;
      v49 = (uint64_t *)((char *)v142 + 8 * v143);
      v50 = sub_1C4C2FD5C(6504);
      v51 = 0;
      v52 = 0;
      NearestCommonDominator = 0;
      v126 = sub_1C4C2FD5C(6504);
      v54 = 1;
      v124 = v50;
      while (2)
      {
        v128 = v54;
        while (1)
        {
          v55 = *v48;
          v56 = a1;
          if (NearestCommonDominator)
          {
            v57 = *(_QWORD *)(a1 + 256);
            v58 = *(_QWORD *)(v55 + 24);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v57);
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v57 + 1320), NearestCommonDominator, v58);
            v59 = *(_QWORD *)(v55 + 24);
          }
          else
          {
            v59 = *(_QWORD *)(v55 + 24);
            NearestCommonDominator = v59;
          }
          v60 = *(_QWORD *)(v56 + 256);
          v61 = v137;
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v60);
          v62 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v60 + 1320), v59, v61);
          a1 = v56;
          if (!v62 || v138 && !sub_1C4B071BC(*(_QWORD *)(v56 + 256), v55, v138))
            break;
          if (++v48 == v49)
          {
            if ((v128 & 1) != 0)
            {
              v47 = 0;
              goto LABEL_137;
            }
            goto LABEL_105;
          }
        }
        v63 = v154;
        if (v154 >= (unint64_t)HIDWORD(v154))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, (uint64_t)v155, v154 + 1, 8);
          v63 = v154;
        }
        v54 = 0;
        *(_QWORD *)&v153[8 * v63] = v55;
        LODWORD(v154) = v154 + 1;
        v64 = *(_QWORD *)(v55 + 32);
        v65 = *(_DWORD *)(v64 + 32 * v126 + 16);
        v66 = *(_QWORD *)(v64 + 32 * v124 + 16);
        v67 = v66 == 1;
        if (v66 == 1)
          v68 = 0;
        else
          v68 = v65;
        v52 |= v68;
        if (v67)
          v69 = v65;
        else
          v69 = 0;
        v51 |= v69;
        if (++v48 != v49)
          continue;
        break;
      }
LABEL_105:
      v70 = *(_QWORD *)(v56 + 256);
      v71 = v137;
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v70);
      v137 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v70 + 1320), v71, NearestCommonDominator);
      v72 = sub_1C4B07248(v56, &v137);
      v73 = *(_QWORD *)(v72 + 24);
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v74 = *(_QWORD *)(v73 + 32);
      v75 = *(_QWORD *)(v74 + 40);
      v129 = &off_1E816EC08;
      *(_QWORD *)&v130 = v74;
      *(_QWORD *)&v131 = v75;
      *((_QWORD *)&v130 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v74 + 16) + 104))(*(_QWORD *)(v74 + 16));
      v134 = 0;
      if (*((_QWORD *)&v131 + 1))
      {
        llvm::MetadataTracking::untrack((uint64_t)&v131 + 8, *((unsigned __int8 **)&v131 + 1));
        *((_QWORD *)&v131 + 1) = v134;
        v76 = v52;
        v77 = v51;
        if (v134)
          llvm::MetadataTracking::retrack((uint64_t)&v134, v134, (uint64_t)&v131 + 8);
      }
      else
      {
        *((_QWORD *)&v131 + 1) = 0;
        v76 = v52;
        v77 = v51;
      }
      *((_QWORD *)&v132 + 1) = 0;
      *(_QWORD *)&v133 = 0;
      *(_QWORD *)&v132 = *(_QWORD *)(v72 + 24);
      *((_QWORD *)&v132 + 1) = v72;
      if ((__int128 *)(v72 + 56) == (__int128 *)((char *)&v131 + 8))
        goto LABEL_111;
      if (*((_QWORD *)&v131 + 1))
        llvm::MetadataTracking::untrack((uint64_t)&v131 + 8, *((unsigned __int8 **)&v131 + 1));
      v78 = *(unsigned __int8 **)(v72 + 56);
      *((_QWORD *)&v131 + 1) = v78;
      if (v78)
      {
        llvm::MetadataTracking::track((uint64_t)&v131 + 8, v78, 2);
        if (v77)
        {
LABEL_112:
          v80 = sub_1C55437B8(&v129, 0x1968u);
          v81 = (unint64_t *)v79;
          v82 = (unint64_t *)*((_QWORD *)&v132 + 1);
          v83 = *(_QWORD *)(v132 + 40);
          *(_QWORD *)(v79 + 24) = v83;
          v84 = *(_QWORD *)(v83 + 32);
          v85 = *(unsigned int *)(v79 + 40);
          if ((_DWORD)v85)
          {
            v109 = *(_QWORD *)(v79 + 32);
            v110 = *(_QWORD *)(v84 + 40);
            v111 = 32 * v85;
            do
            {
              if (!*(_BYTE *)v109)
              {
                v112 = *(unsigned int *)(v109 + 4);
                if ((int)v112 >= 0)
                  v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
                else
                  v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
                v114 = *v113;
                if (*v113)
                {
                  v115 = *(_QWORD *)(v114 + 16);
                  *(_QWORD *)(v114 + 16) = v109;
                  *(_QWORD *)(v109 + 16) = v115;
                  if ((*(_BYTE *)(v109 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v109 + 24) = v114;
                  }
                  else
                  {
                    *(_QWORD *)(v109 + 24) = 0;
                    v113 = (uint64_t *)(v115 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v109 + 16) = v109;
                  *(_QWORD *)(v109 + 24) = 0;
                }
                *v113 = v109;
              }
              v109 += 32;
              v111 -= 32;
            }
            while (v111);
          }
          v86 = *(_QWORD *)(v84 + 728);
          if (v86)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 24))(v86, v79);
          v87 = *v82 & 0xFFFFFFFFFFFFFFF8;
          *v81 = v87 | *v81 & 7;
          v81[1] = (unint64_t)v82;
          *(_QWORD *)(v87 + 8) = v81;
          *v82 = *v82 & 7 | (unint64_t)v81;
          if ((_QWORD)v133)
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v81);
          LODWORD(v134) = 1;
          v135 = 0;
          v136 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v134);
          LODWORD(v134) = 1;
          v135 = 0;
          v136 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v134);
          LODWORD(v134) = 1;
          v135 = 0;
          v136 = v77;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v134);
        }
      }
      else
      {
LABEL_111:
        if (v77)
          goto LABEL_112;
      }
      if (v76)
      {
        v89 = sub_1C55437B8(&v129, 0x1968u);
        v90 = (unint64_t *)v88;
        v91 = (unint64_t *)*((_QWORD *)&v132 + 1);
        v92 = *(_QWORD *)(v132 + 40);
        *(_QWORD *)(v88 + 24) = v92;
        v93 = *(_QWORD *)(v92 + 32);
        v94 = *(unsigned int *)(v88 + 40);
        if ((_DWORD)v94)
        {
          v116 = *(_QWORD *)(v88 + 32);
          v117 = *(_QWORD *)(v93 + 40);
          v118 = 32 * v94;
          do
          {
            if (!*(_BYTE *)v116)
            {
              v119 = *(unsigned int *)(v116 + 4);
              if ((int)v119 >= 0)
                v120 = (uint64_t *)(*(_QWORD *)(v117 + 272) + 8 * v119);
              else
                v120 = (uint64_t *)(*(_QWORD *)(v117 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
              v121 = *v120;
              if (*v120)
              {
                v122 = *(_QWORD *)(v121 + 16);
                *(_QWORD *)(v121 + 16) = v116;
                *(_QWORD *)(v116 + 16) = v122;
                if ((*(_BYTE *)(v116 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v116 + 24) = v121;
                }
                else
                {
                  *(_QWORD *)(v116 + 24) = 0;
                  v120 = (uint64_t *)(v122 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v116 + 16) = v116;
                *(_QWORD *)(v116 + 24) = 0;
              }
              *v120 = v116;
            }
            v116 += 32;
            v118 -= 32;
          }
          while (v118);
        }
        v95 = *(_QWORD *)(v93 + 728);
        if (v95)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 24))(v95, v88);
        v96 = *v91 & 0xFFFFFFFFFFFFFFF8;
        *v90 = v96 | *v90 & 7;
        v90[1] = (unint64_t)v91;
        *(_QWORD *)(v96 + 8) = v90;
        *v91 = *v91 & 7 | (unint64_t)v90;
        if ((_QWORD)v133)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v133 + 24))(v133, v90);
        LODWORD(v134) = 1;
        v135 = 0;
        v136 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v90, v89, (const llvm::MachineOperand *)&v134);
        LODWORD(v134) = 1;
        v135 = 0;
        v136 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v90, v89, (const llvm::MachineOperand *)&v134);
        LODWORD(v134) = 1;
        v135 = 0;
        v136 = v76;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v90, v89, (const llvm::MachineOperand *)&v134);
      }
      if ((_DWORD)v154)
      {
        v97 = v153;
        v98 = &v153[8 * v154];
        do
        {
          v99 = *(_BYTE **)v97;
          v100 = *(_BYTE **)v97;
          if ((**(_BYTE **)v97 & 4) == 0)
          {
            v100 = *(_BYTE **)v97;
            if ((*((_WORD *)v99 + 22) & 8) != 0)
            {
              v100 = *(_BYTE **)v97;
              do
                v100 = (_BYTE *)*((_QWORD *)v100 + 1);
              while ((*((_WORD *)v100 + 22) & 8) != 0);
            }
          }
          sub_1C487FE80(*((_QWORD *)v99 + 3) + 40, (uint64_t)v99, *((_QWORD *)v100 + 1));
          v97 += 8;
        }
        while (v97 != v98);
      }
      v129 = &off_1E816EC08;
      if (*((_QWORD *)&v131 + 1))
        llvm::MetadataTracking::untrack((uint64_t)&v131 + 8, *((unsigned __int8 **)&v131 + 1));
      v47 = 1;
LABEL_137:
      v46 = v123;
    }
    else
    {
      v47 = 0;
    }
    if (v153 != (char *)v155)
      free(v153);
  }
  if (v142 != v144)
    free(v142);
  if (v139 != v141)
    free(v139);
  if (v150 != v152)
    free(v150);
  v6 = v46 | v47;
  if (v147 != v149)
    free(v147);
  return v6;
}

uint64_t sub_1C4B070D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(uint64_t **)(a2 + 16);
    v6 = *(_QWORD *)a2;
    v7 = 8 * v2;
    do
    {
      v8 = *v5;
      if (v6)
      {
        v9 = *(_QWORD *)(v4 + 256);
        v10 = *(_QWORD *)(v8 + 24);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v9);
        result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v9 + 1320), v6, v10);
        v6 = result;
      }
      else
      {
        v6 = *(_QWORD *)(v8 + 24);
      }
      *(_QWORD *)a2 = v6;
      ++v5;
      v7 -= 8;
    }
    while (v7);
    v11 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a2 + 16);
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        if (*(_QWORD *)(*v12 + 24) == *(_QWORD *)a2)
        {
          v15 = *(_QWORD *)(a2 + 8);
          if (v15)
          {
            result = sub_1C4B071BC(*(_QWORD *)(v4 + 256), v15, *v12);
            if ((_DWORD)result)
              v14 = *(_QWORD *)(a2 + 8);
          }
          *(_QWORD *)(a2 + 8) = v14;
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

BOOL sub_1C4B071BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t i;

  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (v6 != v7)
    return llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(a1 + 1320), v6, v7);
  for (i = *(_QWORD *)(v6 + 56); ; i = *(_QWORD *)(i + 8))
  {
    result = i == a2;
    if (i == a2 || i == a3)
      break;
    if (!i || (*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return result;
}

uint64_t sub_1C4B07248(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MachineBasicBlock *NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v6 = *(_QWORD *)(a1 + 248);
  v5 = *(_QWORD *)(a1 + 256);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v5);
  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v5 + 1320), v4, v6))
  {
    NearestCommonDominator = (llvm::MachineBasicBlock *)*a2;
  }
  else
  {
    v8 = *a2;
    v11 = a1 + 248;
    v9 = *(_QWORD *)(a1 + 248);
    v10 = *(_QWORD *)(v11 + 8);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v10);
    NearestCommonDominator = (llvm::MachineBasicBlock *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v10 + 1320), v8, v9);
  }
  v12 = a2[1];
  if (!v12)
    return llvm::MachineBasicBlock::getLastNonDebugInstr(NearestCommonDominator, 1);
  if (NearestCommonDominator != *(llvm::MachineBasicBlock **)(v12 + 24))
  {
    a2[1] = 0;
    return llvm::MachineBasicBlock::getLastNonDebugInstr(NearestCommonDominator, 1);
  }
  return v12;
}

uint64_t sub_1C4B072EC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4B060E0(v0);
}

uint64_t sub_1C4B07314()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Force the forward progress mode to SIMDGroupParallel";
  v4.n128_u64[1] = 52;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1EF8EFAC8, "force-simdgroup-parallel-forward-progress", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFAC8, &dword_1C475E000);
}

void sub_1C4B07398()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4B073AC()
{
  return 0;
}

_QWORD *sub_1C4B073C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1C615AB68(1, 16777235, 1, a1);
}

uint64_t sub_1C4B073D4()
{
  return 13;
}

char **sub_1C4B073DC(uint64_t a1, int a2)
{
  if (a2 >= 128)
    return &(&off_1E7FB3EC8)[3 * (a2 - 128)];
  else
    return &(&off_1E817F4F8)[3 * a2];
}

uint64_t sub_1C4B07404()
{
  return 0;
}

uint64_t sub_1C4B0740C()
{
  return 0;
}

uint64_t sub_1C4B07414()
{
  return 0;
}

_DWORD *sub_1C4B0741C(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;

  v7 = a7;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = 1;
  switch(v10)
  {
    case 1:
    case 6:
    case 10:
    case 18:
      goto LABEL_7;
    case 2:
    case 7:
    case 11:
    case 19:
      v11 = 2;
      if (!a7)
        return result;
      goto LABEL_8;
    case 3:
    case 8:
    case 12:
    case 20:
      v11 = 4;
      goto LABEL_7;
    case 4:
    case 9:
    case 13:
    case 21:
      v11 = 8;
      if (!a7)
        return result;
      goto LABEL_8;
    case 5:
    case 14:
    case 15:
    case 16:
    case 17:
      goto LABEL_5;
    default:
      if ((v10 - 129) >= 0xC)
LABEL_5:
        llvm::report_fatal_error((llvm *)"Unknown relocation!", (const char *)1);
LABEL_7:
      if (a7)
      {
LABEL_8:
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 80))(result);
        switch(*(_DWORD *)(a3 + 12))
        {
          case 0x81:
          case 0x87:
            v7 = (v7 + 2) >> 1;
            break;
          case 0x82:
          case 0x88:
            v7 = ((v7 + 2) >> 8) & 1;
            break;
          case 0x83:
          case 0x89:
            v7 = (unsigned __int16)(v7 + 3) >> 9;
            break;
          case 0x84:
          case 0x8A:
            v7 = ((v7 + 4) >> 16);
            break;
          case 0x85:
          case 0x8B:
            v7 = HIBYTE(v7) & 1;
            break;
          case 0x86:
          case 0x8C:
            v7 = (v7 + 5) >> 25;
            break;
          default:
            break;
        }
        v12 = 0;
        v13 = (unint64_t)v7 << result[2];
        v14 = *(_DWORD *)(a3 + 8);
        do
        {
          *(_BYTE *)(a5 + v14) |= v13 >> v12;
          v12 += 8;
          ++v14;
        }
        while (8 * v11 != v12);
      }
      return result;
  }
}

BOOL sub_1C4B0755C(uint64_t a1, unsigned int *a2)
{
  int v2;

  v2 = *a2;
  return sub_1C4B07738(*a2) != v2;
}

BOOL sub_1C4B07588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 != (__int16)a3;
}

uint64_t sub_1C4B07594(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;
  _BYTE v9[64];
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  result = sub_1C4B07738(*a2);
  if ((_DWORD)result == v3)
  {
    v11 = v13;
    v12 = xmmword_1C64638F0;
    sub_1C4B07764((uint64_t)v9, (uint64_t)&v11);
    llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v9, 0, " ", 1uLL, 0);
    sub_1C4816AD8((llvm::raw_ostream *)v9, "\n");
    v6 = *v10;
    v5 = v10[1];
    v8 = 1283;
    v7[0] = "unexpected instruction to relax: ";
    v7[2] = v6;
    v7[3] = v5;
    llvm::report_fatal_error((uint64_t)v7, 1);
  }
  *a2 = result;
  return result;
}

uint64_t sub_1C4B07684()
{
  return 0;
}

uint64_t sub_1C4B0768C()
{
  return 0;
}

uint64_t sub_1C4B07694()
{
  return 2;
}

BOOL sub_1C4B0769C(int a1, llvm::raw_ostream *this, uint64_t a3)
{
  char v3;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = a3;
  if (a3 && (a3 & 1) == 0)
  {
    v5 = a3;
    do
    {
      v6 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v6 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 0);
      }
      else
      {
        *((_QWORD *)this + 4) = v6 + 1;
        *v6 = 0;
      }
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 192);
      }
      else
      {
        *((_QWORD *)this + 4) = v7 + 1;
        *v7 = -64;
      }
      v5 -= 2;
    }
    while (v5);
  }
  return (v3 & 1) == 0;
}

uint64_t sub_1C4B07730()
{
  return 0;
}

uint64_t sub_1C4B07738(uint64_t result)
{
  int v1;

  v1 = result - 378;
  if ((result - 378) <= 0x12 && ((0x51455u >> v1) & 1) != 0)
    return dword_1C677F53C[v1];
  return result;
}

void sub_1C4B0776C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4B07780(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v15;
  unsigned int v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  _OWORD v52[2];
  uint64_t v53[4];
  __int16 v54;

  v15 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 80))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  v16 = *(_DWORD *)(a6 + 12) - 1;
  if (v16 >= 4)
  {
    v49 = *(_QWORD *)a3;
    v50 = *(_QWORD *)(a6 + 16);
    v53[0] = (uint64_t)"unsupported relocation on symbol";
    v54 = 259;
    llvm::MCContext::reportError(v49, v50, (uint64_t)v53);
    v16 = -1;
  }
  if (*(_QWORD *)(a7 + 8))
  {
    v17 = *(_OWORD *)(a7 + 16);
    v52[0] = *(_OWORD *)a7;
    v52[1] = v17;
    v18 = v52;
LABEL_5:
    sub_1C4B07B34(a2, a3, a4, (uint64_t *)a5, a6, v18, v16, a8);
    return;
  }
  if (*(_QWORD *)a7)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a7 + 16);
    if (v19
      && ((v15 << 31 >> 31) & (1 << v16)) != -*(_DWORD *)(a7 + 16)
      && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19) & 1) == 0)
    {
      v48 = *(_OWORD *)(a7 + 16);
      v51[0] = *(_OWORD *)a7;
      v51[1] = v48;
      v18 = v51;
      goto LABEL_5;
    }
  }
  else
  {
    v19 = 0;
  }
  llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
  v20 = *(_DWORD *)(a5 + 32);
  v21 = *(_DWORD *)(a6 + 8);
  if (!*(_QWORD *)a7 && !*(_QWORD *)(a7 + 8))
    llvm::report_fatal_error((llvm *)"FIXME: relocations to absolute targets not yet implemented", (const char *)1);
  v22 = *(_DWORD *)(v19 + 8);
  if ((v22 & 0x1C00) == 0x800)
  {
    v53[0] = 0;
    *(_DWORD *)(v19 + 8) = v22 | 4;
    llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v19 + 24), v53);
    if (v23)
    {
      *a8 = v53[0];
      return;
    }
  }
  if (!llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19))
  {
    v28 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (!v28 && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v19 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
      *(_QWORD *)v19 = *(_QWORD *)v19 & 7 | v28;
    }
    v29 = *(_QWORD *)(v28 + 16);
    v24 = *(_DWORD *)(v29 + 28) + 1;
    v30 = *(_DWORD *)(a2 + 80);
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 64);
      v32 = v30 - 1;
      v33 = ((v29 >> 4) ^ (v29 >> 9)) & (v30 - 1);
      v34 = *(_QWORD *)(v31 + 16 * v33);
      if (v29 == v34)
      {
LABEL_27:
        v37 = *(_QWORD *)(v31 + 16 * v33 + 8);
LABEL_28:
        v27 = 0;
        v26 = *a8 + v37;
        goto LABEL_29;
      }
      v35 = 1;
      while (v34 != -4096)
      {
        v36 = v33 + v35++;
        v33 = v36 & v32;
        v34 = *(_QWORD *)(v31 + 16 * v33);
        if (v29 == v34)
          goto LABEL_27;
      }
    }
    v37 = 0;
    goto LABEL_28;
  }
  v24 = *(_DWORD *)(v19 + 16);
  v25 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
  if (!v25 && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v19 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
    *(_QWORD *)v19 = *(_QWORD *)v19 & 7 | v25;
  }
  if (v25)
  {
    v53[0] = 0;
    sub_1C59415F0(a4, (uint64_t *)v19, 1, v53);
    v26 = *a8 - v53[0];
    v27 = 0x8000000;
LABEL_29:
    *a8 = v26;
    goto LABEL_30;
  }
  v27 = 0x8000000;
LABEL_30:
  v38 = *(_QWORD *)(a5 + 16);
  if ((v15 & 1) != 0)
  {
    v40 = *(_DWORD *)(a2 + 80);
    if (v40)
    {
      v41 = *(_QWORD *)(a2 + 64);
      v42 = v40 - 1;
      v43 = (v40 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v44 = *(_QWORD *)(v41 + 16 * v43);
      if (v38 == v44)
      {
LABEL_37:
        v47 = *(_QWORD *)(v41 + 16 * v43 + 8);
LABEL_38:
        *a8 -= v47;
        v39 = 0x1000000;
        goto LABEL_39;
      }
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v43 + v45++;
        v43 = v46 & v42;
        v44 = *(_QWORD *)(v41 + 16 * v43);
        if (v38 == v44)
          goto LABEL_37;
      }
    }
    v47 = 0;
    goto LABEL_38;
  }
  v39 = 0;
LABEL_39:
  LODWORD(v53[0]) = v21 + v20;
  HIDWORD(v53[0]) = v24 | (v16 << 25) | v27 | v39;
  sub_1C4B07F2C(a2, 0, v38, v53);
}

void sub_1C4B07B34(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, int a7, _QWORD *a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int SymbolAddress;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD *v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67[2];
  const char *v68;
  __int16 v69;

  llvm::MCAsmLayout::ensureValid(a3, (const llvm::MCFragment *)a4);
  v62 = a4[4];
  v61 = *(_DWORD *)(a5 + 8);
  v15 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 80))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a5 + 12))+ 16);
  v16 = *(_QWORD *)(*a6 + 16);
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
  if (!v18 && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v16 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
    v17 = *(_QWORD *)v16 & 7 | v18;
    *(_QWORD *)v16 = v17;
  }
  if (!v18)
  {
    v48 = *(_QWORD *)a2;
    v49 = *(_QWORD *)(a5 + 16);
    if ((v17 & 4) != 0)
    {
      v56 = *(uint64_t **)(v16 - 8);
      v57 = *v56;
      v50 = v56 + 2;
      v51 = v57;
    }
    else
    {
      v50 = 0;
      v51 = 0;
    }
    v66 = 1283;
    v63[0] = "symbol '";
    v64 = v50;
    v65 = v51;
    v67[0] = (uint64_t)v63;
    v68 = "' can not be undefined in a subtraction expression";
    v69 = 770;
    llvm::MCContext::reportError(v48, v49, (uint64_t)v67);
  }
  SymbolAddress = llvm::MachObjectWriter::getSymbolAddress((llvm::MachObjectWriter *)a1, (const llvm::MCSymbol *)v16, a3);
  v20 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
  if (!v20 && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v16 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
    *(_QWORD *)v16 = *(_QWORD *)v16 & 7 | v20;
  }
  v21 = *(_DWORD *)(a1 + 80);
  if (v21)
  {
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(a1 + 64);
    v24 = v21 - 1;
    v25 = ((v22 >> 4) ^ (v22 >> 9)) & (v21 - 1);
    v26 = *(_QWORD *)(v23 + 16 * v25);
    if (v22 == v26)
    {
LABEL_9:
      v29 = *(_QWORD *)(v23 + 16 * v25 + 8);
      goto LABEL_10;
    }
    v27 = 1;
    while (v26 != -4096)
    {
      v28 = v25 + v27++;
      v25 = v28 & v24;
      v26 = *(_QWORD *)(v23 + 16 * v25);
      if (v22 == v26)
        goto LABEL_9;
    }
  }
  v29 = 0;
LABEL_10:
  v30 = v15 & 1;
  *a8 += v29;
  v31 = a6[1];
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 16);
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (!v34 && (*(_DWORD *)(v32 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v32 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v32 + 24));
      v33 = *(_QWORD *)v32 & 7 | v34;
      *(_QWORD *)v32 = v33;
    }
    if (!v34)
    {
      v52 = *(_QWORD *)a2;
      v53 = *(_QWORD *)(a5 + 16);
      if ((v33 & 4) != 0)
      {
        v58 = *(uint64_t **)(v32 - 8);
        v59 = *v58;
        v54 = v58 + 2;
        v55 = v59;
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
      v66 = 1283;
      v63[0] = "symbol '";
      v64 = v54;
      v65 = v55;
      v67[0] = (uint64_t)v63;
      v68 = "' can not be undefined in a subtraction expression";
      v69 = 770;
      llvm::MCContext::reportError(v52, v53, (uint64_t)v67);
    }
    v35 = llvm::MachObjectWriter::getSymbolAddress((llvm::MachObjectWriter *)a1, (const llvm::MCSymbol *)v32, a3);
    v36 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (!v36 && (*(_DWORD *)(v32 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v32 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v32 + 24));
      *(_QWORD *)v32 = *(_QWORD *)v32 & 7 | v36;
    }
    v37 = *(_DWORD *)(a1 + 80);
    if (v37)
    {
      v38 = *(_QWORD *)(v36 + 16);
      v39 = *(_QWORD *)(a1 + 64);
      v40 = v37 - 1;
      v41 = ((v38 >> 4) ^ (v38 >> 9)) & (v37 - 1);
      v42 = *(_QWORD *)(v39 + 16 * v41);
      if (v38 == v42)
      {
LABEL_19:
        v45 = *(_QWORD *)(v39 + 16 * v41 + 8);
      }
      else
      {
        v43 = 1;
        while (v42 != -4096)
        {
          v44 = v41 + v43++;
          v41 = v44 & v40;
          v42 = *(_QWORD *)(v39 + 16 * v41);
          if (v38 == v42)
            goto LABEL_19;
        }
        v45 = 0;
      }
      *a8 -= v45;
    }
    v46 = a7 << 28;
    v47 = v30 << 30;
    LODWORD(v67[0]) = (a7 << 28) | (v30 << 30) | 0x81000000;
    HIDWORD(v67[0]) = v35;
    sub_1C4B07F2C(a1, 0, a4[2], v67);
    LODWORD(v31) = 0x2000000;
  }
  else
  {
    v46 = a7 << 28;
    v47 = v30 << 30;
  }
  LODWORD(v67[0]) = (v61 + v62) | v31 | v47 | v46 | 0x80000000;
  HIDWORD(v67[0]) = SymbolAddress;
  sub_1C4B07F2C(a1, 0, a4[2], v67);
}

void sub_1C4B07F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v18 = a3;
  v5 = *a4;
  v6 = sub_1C4B08044(a1 + 16, &v18);
  v7 = v6;
  v9 = (char *)v6[2];
  v8 = v6[3];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)v6[1];
    v12 = (v9 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_1C4764EE4();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_QWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = v5;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = (char *)v7[1];
    }
    v7[1] = v17;
    v7[2] = v10;
    v7[3] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v9 = a2;
    *((_QWORD *)v9 + 1) = v5;
    v10 = v9 + 16;
  }
  v7[2] = v10;
}

_QWORD *sub_1C4B08044(uint64_t a1, uint64_t *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_16:
    v6 = sub_1C4B081A0((uint64_t *)a1, (uint64_t)a2, a2, v13);
    v14 = *a2;
    v6[2] = 0;
    v6[3] = 0;
    *v6 = v14;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6;
}

uint64_t sub_1C4B08104(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4B081A0(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t *v8;
  _QWORD *v9;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 4);
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - *((_DWORD *)a1 + 3) > v5 >> 3)
  {
    goto LABEL_3;
  }
  v8 = a1;
  sub_1C4B0824C((uint64_t)a1, v5);
  v9 = 0;
  sub_1C4B08104(v8, a3, &v9);
  a1 = v8;
  a4 = v9;
LABEL_3:
  ++*((_DWORD *)a1 + 2);
  if (*a4 != -4096)
    --*((_DWORD *)a1 + 3);
  return a4;
}

_QWORD *sub_1C4B0824C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C615ABDC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4B08304()
{
  return 0;
}

void sub_1C4B08310()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4B08328(uint64_t a1, llvm::MCInst *a2, llvm::raw_ostream *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  void **v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  unsigned int v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t i;
  char *v81;
  char v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  int v103;
  uint64_t v104;
  _DWORD *v105;
  int j;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned __int8 *v113;
  BOOL v114;
  unsigned int v115;
  int v116;
  char v117;
  _OWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  int v146;
  _BOOL4 v147;
  unsigned int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  char v161;
  _BOOL4 v162;
  char v163;
  unsigned int v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  char v182;
  char v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  char v238;
  char *v239;
  void *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  _BOOL4 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char v285;
  char *v286;
  uint64_t v287;
  unsigned int v288;
  _BOOL4 v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  char v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  char v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  char v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  char v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char v352;
  char *v353;
  unsigned int v354;
  _BOOL4 v355;
  unsigned int v356;
  char v357;
  unsigned int v358;
  _BOOL4 v359;
  unsigned int v360;
  _BOOL4 v361;
  char v362;
  unsigned int v363;
  _BOOL4 v364;
  char v365;
  unsigned int v366;
  _BOOL4 v367;
  char v368;
  unsigned int v369;
  _BOOL4 v370;
  char v371;
  unsigned int v372;
  _BOOL4 v373;
  unsigned int v374;
  unsigned int v375;
  _BOOL4 v376;
  unsigned int v377;
  _BOOL4 v378;
  char v379;
  unsigned int v380;
  _BOOL4 v381;
  int v382;
  int v383;
  _BOOL4 v384;
  int v385;
  _BOOL4 v386;
  int v387;
  _BOOL4 v388;
  int v389;
  _BOOL4 v390;
  int v391;
  _BOOL4 v392;
  int v393;
  _BOOL4 v394;
  unsigned int v395;
  _BOOL4 v396;
  unsigned int v397;
  _BOOL4 v398;
  unsigned int v399;
  _BOOL4 v400;
  _BOOL4 v401;
  _BOOL4 v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  char v413;
  _BOOL4 v414;
  _BOOL4 v415;
  _BOOL4 v416;
  uint64_t v417;
  _BOOL4 v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  _BOOL4 v426;
  _BOOL4 v427;
  _BOOL4 v428;
  _BOOL4 v429;
  _BOOL4 v430;
  _BOOL4 v431;
  _BOOL4 v432;
  _BOOL4 v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  int v446;
  int v447;
  unint64_t v448;
  unsigned int v449;
  _BOOL4 v450;
  _BOOL4 v451;
  unint64_t v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  char v457;
  char v458;
  char v459;
  char v460;
  unsigned int v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  __int16 v487;
  void *v488;
  __int128 v489;
  _BYTE v490[32];
  _DWORD *v491;
  uint64_t v492;
  _DWORD v493[8];
  void *v494;
  __int128 v495;
  _BYTE v496[56];
  __int128 v497;
  __int128 v498;
  _DWORD v499[4];
  _QWORD *v500;
  __int128 v501;
  _QWORD v502[5];

  v8 = (_QWORD *)a1;
  v502[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)a2;
  v10 = **(_QWORD **)(a1 + 8);
  v488 = v490;
  v489 = xmmword_1C677F680;
  v11 = v10 + 48 * v9;
  v13 = *(_QWORD *)(v11 + 16);
  v12 = (_BYTE *)(v11 + 16);
  v14 = sub_1C4B0B6C0(a1, a2, a4, a5);
  v15 = v14;
  if ((v13 & 1) != 0)
  {
    v34 = 0;
    v487 = 0;
    v35 = (uint64_t *)v8[1];
    v36 = *(_QWORD *)(v8[2] + 24);
    v417 = *(_QWORD *)(v36 + 200);
    v423 = *(unsigned __int16 *)(v36 + 214);
    v37 = *(_DWORD *)a2;
    v38 = *v35;
    v39 = *(_QWORD *)(*v35 + 48 * *(unsigned int *)a2 + 16);
    do
    {
      v40 = (char *)&(&v491)[v34];
      *(_QWORD *)v40 = 0;
      *((_DWORD *)v40 + 2) = 0;
      v34 += 2;
    }
    while (v34 != 4);
    v463 = (uint64_t)v8;
    v41 = (v39 >> 1) & 7;
    v42 = *(unsigned __int8 *)(v38 + 48 * v37 + 4);
    v43 = *((_DWORD *)a2 + 6);
    v449 = v42;
    if (v43 > v42)
    {
      v44 = 0;
      LOBYTE(v434) = 0;
      v45 = 0;
      v46 = 0;
      LOBYTE(v453) = 0;
      v47 = 0;
      v48 = *((_QWORD *)a2 + 2);
      v49 = v38 + 48 * v37;
      v50 = (_QWORD *)(v49 + 40);
      v51 = v49 + 8;
      v52 = v42;
      while (1)
      {
        *((_DWORD *)&v494 + v52) = -1;
        v53 = *(unsigned __int8 *)(v48 + 16 * v52);
        if (v53 == 5)
          break;
        if (v53 == 1)
        {
          if ((*(_DWORD *)(v48 + 16 * v52 + 8) | 2) != 2)
            break;
        }
        else if ((*(_BYTE *)(*v50 + 6 * v52 + 2) & 2) != 0)
        {
          if (v53 == 2)
            v453 = *(_DWORD *)(v48 + 16 * v52 + 8);
        }
        else
        {
          if ((v39 & 0x10) != 0 && v52 == v43 - 1)
            goto LABEL_75;
          if ((v39 & 0x10) != 0 && v52 == v43 - 3 && (*(_BYTE *)(v51 + 2) & 0x40) != 0)
          {
            v52 = v43 - 3;
          }
          else
          {
            v54 = *(_QWORD *)(v48 + 16 * v52 + 8);
            if ((v53 != 2) | v45 & 1)
            {
              if ((v54 & 0x100000000) != 0)
                v55 = (unsigned __int16)*(_QWORD *)(v48 + 16 * v52 + 8);
              else
                v55 = *(_QWORD *)(v48 + 16 * v52 + 8);
              if (v47)
              {
                v56 = v47;
                v57 = v47;
                v58 = &v492;
                while (*(v58 - 1) != v55)
                {
                  v58 += 2;
                  if (!--v57)
                    goto LABEL_51;
                }
                *((_DWORD *)&v494 + v52) = *(_DWORD *)v58;
              }
              else
              {
                v56 = 0;
LABEL_51:
                v59 = 2 * (v44 & 1);
                v44 |= 1 << (2 * (v44 & 1));
                *((_DWORD *)&v494 + v52) = v59;
                v499[v59] = v52;
                *(_BYTE *)((unint64_t)&v487 | (v59 >> 1)) = 1;
                ++v47;
                v60 = (void **)&(&v491)[2 * v56];
                *v60 = (void *)v55;
                *((_DWORD *)v60 + 2) = v59;
              }
            }
            else
            {
              v434 = (v54 >> 5) & 1;
              v45 = 1;
            }
          }
        }
LABEL_29:
        if (++v52 >= v43)
          goto LABEL_75;
      }
      if (v46 < v41)
      {
        ++v52;
        ++v46;
      }
      goto LABEL_29;
    }
    LOBYTE(v453) = 0;
    LOBYTE(v434) = 0;
    v44 = 0;
LABEL_75:
    for (i = 0; i != 4; i += 2)
    {
      v81 = (char *)&(&v500)[i];
      *(_QWORD *)v81 = 0;
      *((_DWORD *)v81 + 2) = 0;
    }
    if (v43 > v449)
    {
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = *((_QWORD *)a2 + 2);
      v87 = v449;
      while (2)
      {
        switch(*(_BYTE *)(v86 + 16 * v87))
        {
          case 1:
            v88 = *(unsigned int *)(v86 + 16 * v87 + 8);
            if ((unint64_t)(v88 - 771) < 0xFFFFFFFFFFFFFE00)
              goto LABEL_99;
            goto LABEL_83;
          case 2:
          case 4:
            goto LABEL_99;
          case 5:
            v93 = *(_QWORD *)(v86 + 16 * v87 + 8);
            if (v93)
              v94 = v93 - 8;
            else
              v94 = 0;
            v89 = *(_QWORD *)(*(_QWORD *)(v94 + 32) + 16);
            if (!v85)
              goto LABEL_92;
            goto LABEL_84;
          default:
            LODWORD(v88) = *(_DWORD *)(v86 + 16 * v87 + 8);
LABEL_83:
            v89 = v88 | 0xFFFFFFFF00000000;
            if (v85)
            {
LABEL_84:
              v90 = v85;
              v91 = v85;
              v92 = &v501;
              while (*((_QWORD *)v92 - 1) != v89)
              {
                ++v92;
                if (!--v91)
                  goto LABEL_93;
              }
              *((_DWORD *)&v494 + v87) = *(_DWORD *)v92;
            }
            else
            {
LABEL_92:
              v90 = 0;
LABEL_93:
              v95 = 2 * (v44 & 1);
              v96 = 1 << (2 * (v44 & 1));
              *((_DWORD *)&v494 + v87) = v95;
              v499[v95] = v87;
              v44 |= v96;
              ++v85;
              v97 = (unint64_t *)&(&v500)[2 * v90];
              *v97 = v89;
              *((_DWORD *)v97 + 2) = v95;
              if (v84 < v41)
              {
                v98 = *(_DWORD *)(v86 + 16 * ++v87 + 8);
                if ((v98 & 0x20) != 0)
                {
                  if ((v82 & 4) != 0)
LABEL_434:
                    llvm::report_fatal_error((llvm *)"Too many cached reads specified!", (const char *)1);
                  v82 = v95 | 4;
                }
                v83 |= v96 & (v98 << 27 >> 31);
                ++v84;
              }
            }
LABEL_99:
            if (++v87 < v43)
              continue;
            v99 = 0;
            v100 = 0;
            v497 = 0u;
            v498 = 0u;
            v101 = v449;
            break;
        }
        break;
      }
      while (1)
      {
        v102 = *(unsigned __int8 *)(v86 + 16 * v101);
        if ((v102 - 4) >= 2)
        {
          if (v102 == 1)
          {
            v103 = *(_DWORD *)(v86 + 16 * v101 + 8);
            if ((v103 | 2) == 2 || (v103 - 259) < 0x200)
              goto LABEL_121;
          }
          else
          {
            if (v102 == 2)
              goto LABEL_121;
            v103 = *(_DWORD *)(v86 + 16 * v101 + 8);
          }
          if (!(_DWORD)v100)
          {
LABEL_109:
            for (j = 0; j != 4; ++j)
            {
              if (((v44 >> j) & 1) == 0)
                break;
            }
            *((_DWORD *)&v494 + v101) = j;
            v499[j] = v101;
            v44 |= 1 << j;
            v107 = (v100 + 1);
            v108 = (_DWORD *)&v497 + 2 * v100;
            *v108 = v103;
            v108[1] = j;
            if (v99 < v41)
            {
              v109 = *(_DWORD *)(v86 + 16 * ++v101 + 8);
              if ((v109 & 0x20) != 0)
              {
                if ((v82 & 4) != 0)
                  goto LABEL_434;
                v82 = j | 4;
              }
              v83 |= (1 << j) & (v109 << 27 >> 31);
              ++v99;
            }
            goto LABEL_122;
          }
          v104 = v100;
          v105 = (_DWORD *)&v497 + 1;
          while (*(v105 - 1) != v103)
          {
            v105 += 2;
            if (!--v104)
              goto LABEL_109;
          }
          *((_DWORD *)&v494 + v101) = *v105;
        }
LABEL_121:
        v107 = v100;
LABEL_122:
        ++v101;
        v100 = v107;
        if (v101 >= v43)
          goto LABEL_125;
      }
    }
    LOBYTE(v83) = 0;
    v82 = 0;
    v497 = 0u;
    v498 = 0u;
LABEL_125:
    v413 = v82;
    v110 = *(_QWORD *)(a5 + 192);
    v111 = (v110 >> 6) & 0x200;
    v462 = v487;
    v446 = HIBYTE(v487);
    v112 = v111;
    if (v449)
    {
      v113 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      if (*v113 == 1)
      {
        v114 = v449 > 1 && *((_DWORD *)v113 + 2) == 2;
        v115 = v114;
        v113 += 16 * v115;
      }
      v445 = sub_1C4B12E5C(v463, (uint64_t)v113, v110, 0);
      v116 = *v113;
      if (v116 == 5)
      {
        v133 = *((_QWORD *)v113 + 1);
        if (v133)
          v134 = v133 - 8;
        else
          v134 = 0;
        v117 = 16 * (*(_DWORD *)(v134 + 24) == 4);
        v111 = v112;
LABEL_160:
        v425 = v15 >> 62;
        LODWORD(v135) = v111;
        v136 = v462;
        if ((v44 & 1) == 0)
          goto LABEL_167;
        v137 = *((_QWORD *)a2 + 2) + 16 * v499[0];
        if (v462)
        {
          v135 = *(_QWORD *)(v137 + 8);
          if ((v135 & 0x100000000) == 0)
          {
            v136 = WORD1(v135) != 0;
            if (!WORD1(v135))
              LODWORD(v135) = (unsigned __int16)*(_QWORD *)(v137 + 8);
LABEL_167:
            v418 = v136;
            v139 = v111;
            if ((v44 & 2) != 0)
            {
              v140 = sub_1C4B12E5C(v463, *((_QWORD *)a2 + 2) + 16 * v499[1], *(_QWORD *)(a5 + 192), 0);
              v111 = v112;
              v139 = v140;
            }
            if ((v44 & 4) == 0)
            {
              LODWORD(v141) = v111;
              v142 = v446;
              goto LABEL_177;
            }
            v143 = *((_QWORD *)a2 + 2) + 16 * v499[2];
            if (v446)
            {
              v141 = *(_QWORD *)(v143 + 8);
              if ((v141 & 0x100000000) == 0)
              {
                v142 = WORD1(v141) != 0;
                if (!WORD1(v141))
                  v139 = (unsigned __int16)v139;
LABEL_177:
                v144 = v413;
                if ((v44 & 8) != 0)
                {
                  v146 = v141;
                  v147 = v142;
                  LODWORD(v141) = sub_1C4B12E5C(v463, *((_QWORD *)a2 + 2) + 16 * v499[3], *(_QWORD *)(a5 + 192), 0);
                  v142 = v147;
                  v111 = v141;
                  LODWORD(v141) = v146;
                }
                else if (!v44)
                {
                  LOBYTE(v145) = 1;
                  v462 = 1;
                  LOBYTE(v487) = 1;
                  goto LABEL_182;
                }
                v145 = 32 - __clz(v44);
LABEL_182:
                v148 = v449;
                v149 = (v145 - 1) & 3 | v117 | (32 * v453) | (8 * (v449 != 0)) | v413 & 4 | 0x80;
                v150 = v489;
                if ((unint64_t)(v489 + 1) > *((_QWORD *)&v489 + 1))
                {
                  v466 = v141;
                  v354 = v111;
                  v355 = v142;
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v489 + 1, 1);
                  v142 = v355;
                  v111 = v354;
                  v144 = v413;
                  LODWORD(v141) = v466;
                  v150 = v489;
                }
                *((_BYTE *)v488 + v150) = v149;
                v151 = v489;
                v152 = v489 + 1;
                *(_QWORD *)&v489 = v489 + 1;
                v153 = v139 >> 5;
                v154 = v141 >> 6;
                v155 = (v445 >> 7) & 2 | ((v144 & 3) << 6) | (v135 >> 4) & 0x20 | (v139 >> 5) & 0x10 | (v141 >> 6) & 8 | (v111 >> 7) & 4 | 1;
                if ((unint64_t)(v151 + 2) > *((_QWORD *)&v489 + 1))
                {
                  v467 = v141;
                  v456 = v141 >> 6;
                  v356 = v111;
                  v450 = v142;
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v151 + 2, 1);
                  LOBYTE(v154) = v456;
                  v142 = v450;
                  v111 = v356;
                  LODWORD(v141) = v467;
                  v152 = v489;
                }
                *((_BYTE *)v488 + v152) = v155;
                v156 = v489;
                v157 = v489 + 1;
                *(_QWORD *)&v489 = v489 + 1;
                if (v148)
                {
                  if ((unint64_t)(v156 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v468 = v141;
                    v357 = v154;
                    v358 = v111;
                    v359 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v156 + 2, 1);
                    LOBYTE(v154) = v357;
                    v142 = v359;
                    v111 = v358;
                    LODWORD(v141) = v468;
                    v157 = v489;
                  }
                  *((_BYTE *)v488 + v157) = v445;
                  v158 = v489;
                  v159 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if ((v434 & 1) != 0)
                    v160 = -127;
                  else
                    v160 = 1;
                  v161 = BYTE1(v445) & 0x3E | v160;
                  v162 = v418;
                  if ((unint64_t)(v158 + 2) > *((_QWORD *)&v158 + 1))
                  {
                    v469 = v141;
                    v457 = v154;
                    v360 = v111;
                    v361 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v158 + 2, 1);
                    LOBYTE(v154) = v457;
                    v142 = v361;
                    v162 = v418;
                    v111 = v360;
                    LODWORD(v141) = v469;
                    v159 = v489;
                  }
                  *((_BYTE *)v488 + v159) = v161;
                  v157 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                }
                else
                {
                  v162 = v418;
                }
                v163 = ((_BYTE)v83 << 6) & 0x80 | (2 * (v139 & 0x3F)) | 1;
                v164 = (32 * v462) | (v135 >> 14 << 6) | (v135 >> 6) & 0x10 | (v135 >> 5) & 0xE | v162;
                v165 = ((_BYTE)v83 << 7) | (2 * (v135 & 0x3F));
                v166 = (v135 >> 17) & 0x80 | (v135 >> 7) & 0x70 | v153 & 0xE;
                if (((32 * v462) | ((v135 >> 14) << 6) | (v135 >> 6) & 0x10 | (v135 >> 5) & 0xE) | v162
                  || v166)
                {
                  v169 = v165 | 1;
                  if ((unint64_t)(v157 + 1) > *((_QWORD *)&v489 + 1))
                  {
                    v474 = v141;
                    v458 = v154;
                    v374 = v111;
                    v451 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v157 + 1, 1);
                    LOBYTE(v154) = v458;
                    v142 = v451;
                    v111 = v374;
                    v162 = v418;
                    LODWORD(v141) = v474;
                    v157 = v489;
                  }
                  *((_BYTE *)v488 + v157) = v169;
                  v170 = v489;
                  v171 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if ((unint64_t)(v170 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v475 = v141;
                    v459 = v154;
                    v375 = v111;
                    v376 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v170 + 2, 1);
                    LOBYTE(v154) = v459;
                    v142 = v376;
                    v162 = v418;
                    v111 = v375;
                    LODWORD(v141) = v475;
                    v171 = v489;
                  }
                  v172 = v166 | 1;
                  *((_BYTE *)v488 + v171) = v163;
                  v173 = v489;
                  v174 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if ((unint64_t)(v173 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v476 = v141;
                    v460 = v154;
                    v377 = v111;
                    v378 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v173 + 2, 1);
                    LOBYTE(v154) = v460;
                    v142 = v378;
                    v162 = v418;
                    v111 = v377;
                    LODWORD(v141) = v476;
                    v174 = v489;
                  }
                  *((_BYTE *)v488 + v174) = v164;
                  v175 = v489;
                  v176 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if ((unint64_t)(v175 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v477 = v141;
                    v379 = v154;
                    v380 = v111;
                    v381 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v175 + 2, 1);
                    LOBYTE(v154) = v379;
                    v142 = v381;
                    v111 = v380;
                    LODWORD(v141) = v477;
                    v162 = v418;
                    v176 = v489;
                  }
                  *((_BYTE *)v488 + v176) = v172;
                }
                else
                {
                  if ((unint64_t)(v157 + 1) > *((_QWORD *)&v489 + 1))
                  {
                    v472 = v141;
                    v368 = v154;
                    v369 = v111;
                    v370 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v157 + 1, 1);
                    LOBYTE(v154) = v368;
                    v142 = v370;
                    v111 = v369;
                    LODWORD(v141) = v472;
                    v162 = v418;
                    v157 = v489;
                  }
                  *((_BYTE *)v488 + v157) = v165;
                  v167 = v489;
                  v168 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if ((unint64_t)(v167 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v473 = v141;
                    v371 = v154;
                    v372 = v111;
                    v373 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v167 + 2, 1);
                    LOBYTE(v154) = v371;
                    v142 = v373;
                    v111 = v372;
                    LODWORD(v141) = v473;
                    v162 = v418;
                    v168 = v489;
                  }
                  *((_BYTE *)v488 + v168) = v163;
                }
                v177 = v489;
                v178 = v489 + 1;
                *(_QWORD *)&v489 = v489 + 1;
                if (v162)
                {
                  if ((unint64_t)(v177 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v470 = v141;
                    v362 = v154;
                    v363 = v111;
                    v364 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v177 + 2, 1);
                    LOBYTE(v154) = v362;
                    v142 = v364;
                    v111 = v363;
                    LODWORD(v141) = v470;
                    v178 = v489;
                  }
                  *((_BYTE *)v488 + v178) = BYTE2(v135);
                  v179 = v489;
                  v180 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  v181 = BYTE3(v135) | 1;
                  if ((unint64_t)(v179 + 2) > *((_QWORD *)&v489 + 1))
                  {
                    v471 = v141;
                    v365 = v154;
                    v366 = v111;
                    v367 = v142;
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v179 + 2, 1);
                    LOBYTE(v154) = v365;
                    v142 = v367;
                    v111 = v366;
                    LODWORD(v141) = v471;
                    v180 = v489;
                  }
                  *((_BYTE *)v488 + v180) = v181;
                  v178 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                }
                if ((v44 & 0xC) != 0)
                {
                  v182 = (32 * v83) & 0x80 | (2 * (v141 & 0x3F));
                  v183 = (16 * v83) & 0x80 | (2 * (v111 & 0x3F)) | 1;
                  v184 = (v141 >> 8) & 0xFFFFC0 | (32 * v446) | v154 & 0x10 | (v141 >> 5) & 0xE | v142;
                  v185 = (v141 >> 17) & 0x80 | (v141 >> 7) & 0x70 | (v111 >> 5) & 0xE;
                  if (BYTE1(v141) & 0xC0 | (32 * v446) | v154 & 0x10 | (v141 >> 5) & 0xE | v142
                    || v185)
                  {
                    v188 = v182 | 1;
                    if ((unint64_t)(v178 + 1) > *((_QWORD *)&v489 + 1))
                    {
                      v387 = v141;
                      v388 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v178 + 1, 1);
                      v142 = v388;
                      LODWORD(v141) = v387;
                      v178 = v489;
                    }
                    *((_BYTE *)v488 + v178) = v188;
                    v189 = v489;
                    v190 = v489 + 1;
                    *(_QWORD *)&v489 = v489 + 1;
                    if ((unint64_t)(v189 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      v389 = v141;
                      v390 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v189 + 2, 1);
                      v142 = v390;
                      LODWORD(v141) = v389;
                      v190 = v489;
                    }
                    v191 = v185 | 1;
                    *((_BYTE *)v488 + v190) = v183;
                    v192 = v489;
                    v193 = v489 + 1;
                    *(_QWORD *)&v489 = v489 + 1;
                    if ((unint64_t)(v192 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      v391 = v141;
                      v392 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v192 + 2, 1);
                      v142 = v392;
                      LODWORD(v141) = v391;
                      v193 = v489;
                    }
                    *((_BYTE *)v488 + v193) = v184;
                    v194 = v489;
                    v195 = v489 + 1;
                    *(_QWORD *)&v489 = v489 + 1;
                    if ((unint64_t)(v194 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      v393 = v141;
                      v394 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v194 + 2, 1);
                      v142 = v394;
                      LODWORD(v141) = v393;
                      v195 = v489;
                    }
                    *((_BYTE *)v488 + v195) = v191;
                  }
                  else
                  {
                    if ((unint64_t)(v178 + 1) > *((_QWORD *)&v489 + 1))
                    {
                      v383 = v141;
                      v384 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v178 + 1, 1);
                      v142 = v384;
                      LODWORD(v141) = v383;
                      v178 = v489;
                    }
                    *((_BYTE *)v488 + v178) = v182;
                    v186 = v489;
                    v187 = v489 + 1;
                    *(_QWORD *)&v489 = v489 + 1;
                    if ((unint64_t)(v186 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      v385 = v141;
                      v386 = v142;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v186 + 2, 1);
                      v142 = v386;
                      LODWORD(v141) = v385;
                      v187 = v489;
                    }
                    *((_BYTE *)v488 + v187) = v183;
                  }
                  v196 = v489;
                  v197 = v489 + 1;
                  *(_QWORD *)&v489 = v489 + 1;
                  if (v142)
                  {
                    if ((unint64_t)(v196 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      v382 = v141;
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v196 + 2, 1);
                      LODWORD(v141) = v382;
                      v197 = v489;
                    }
                    *((_BYTE *)v488 + v197) = BYTE2(v141);
                    v198 = v489;
                    v199 = v489 + 1;
                    *(_QWORD *)&v489 = v489 + 1;
                    v200 = BYTE3(v141) | 1;
                    if ((unint64_t)(v198 + 2) > *((_QWORD *)&v489 + 1))
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v198 + 2, 1);
                      v199 = v489;
                    }
                    *((_BYTE *)v488 + v199) = v200;
                    *(_QWORD *)&v489 = v489 + 1;
                  }
                }
                __asm { BR              X11 }
              }
            }
            else
            {
              LODWORD(v141) = sub_1C4B12E5C(v463, v143, *(_QWORD *)(a5 + 192), v425 == 0);
              v111 = v112;
            }
            v142 = 0;
            goto LABEL_177;
          }
        }
        else
        {
          v138 = sub_1C4B12E5C(v463, v137, *(_QWORD *)(a5 + 192), v425 == 0);
          v111 = v112;
          LODWORD(v135) = v138;
        }
        v136 = 0;
        goto LABEL_167;
      }
      v111 = v112;
      if (v116 == 1
        && *((_DWORD *)v113 + 2) >> 3 < v423
        && ((*(unsigned __int8 *)(v417 + ((unint64_t)*((unsigned int *)v113 + 2) >> 3)) >> (*((_DWORD *)v113 + 2) & 7)) & 1) != 0)
      {
        v117 = 16;
        goto LABEL_160;
      }
    }
    else
    {
      v445 = 0;
    }
    v117 = 0;
    goto LABEL_160;
  }
  if ((*v12 & 0x20) != 0)
  {
    v461 = v14 >> 12;
    v61 = v14 >> 14;
    if ((*(_BYTE *)(a5 + 192) & 0x20) == 0)
    {
      v454 = v14 >> 14;
      v500 = v502;
      v501 = xmmword_1C6464ED0;
      v494 = (char *)&v495 + 8;
      *(_QWORD *)&v495 = 0x800000000;
      v491 = v493;
      v492 = 0x800000000;
      v464 = (uint64_t)v8;
      v62 = *(_DWORD *)a2;
      v63 = *(_QWORD *)v8[1];
      v64 = *((_DWORD *)a2 + 6);
      if (!v64)
      {
        v233 = v14;
        v67 = 0;
        v65 = 0;
        v234 = v493;
LABEL_286:
        v241 = (v233 >> 12) & 7;
        v242 = v234[1];
        if ((*(_BYTE *)(v63 + 48 * v62 + 10) & 0x10) != 0)
        {
          v244 = *((_QWORD *)v494 + 1);
          if (v241)
          {
            v245 = v234[2];
            v246 = *((_QWORD *)v494 + 2) != 0;
            v247 = 3;
          }
          else
          {
            v245 = 0;
            v246 = 0;
            v247 = 2;
          }
          v243 = 0;
          v288 = 0;
          v289 = 0;
          v290 = v234[v247];
        }
        else
        {
          v243 = v234[2];
          v244 = *((_QWORD *)v494 + 3);
          if (v241)
          {
            v245 = v234[4];
            v246 = *((_QWORD *)v494 + 4) != 0;
          }
          else
          {
            v245 = 0;
            v246 = 0;
          }
          if ((v233 & 0x10080000) != 0)
          {
            v114 = v241 == 0;
            v287 = 4;
            if (!v114)
              v287 = 5;
            v288 = v234[v287];
            v289 = *((_QWORD *)v494 + v287) != 0;
          }
          else
          {
            v288 = 0;
            v289 = 0;
          }
          v290 = v15;
          LODWORD(v15) = v234[1];
          v242 = v234[3];
        }
        v291 = (v233 >> 1) & 2 | (32 * (v67 & 3)) | v65 & 1 | 0x18;
        v292 = v501;
        if ((unint64_t)(v501 + 1) > *((_QWORD *)&v501 + 1))
        {
          v478 = v245;
          v426 = v246;
          v436 = v290;
          v395 = v288;
          v396 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v501 + 1, 1);
          v289 = v396;
          v290 = v436;
          v246 = v426;
          v245 = v478;
          v288 = v395;
          v292 = v501;
        }
        *((_BYTE *)v500 + v292) = v291;
        v293 = v501;
        v294 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if ((unint64_t)(v293 + 2) > *((_QWORD *)&v501 + 1))
        {
          v479 = v245;
          v427 = v246;
          v437 = v290;
          v397 = v288;
          v398 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v293 + 2, 1);
          v289 = v398;
          v290 = v437;
          v246 = v427;
          v245 = v479;
          v288 = v397;
          v294 = v501;
        }
        *((_BYTE *)v500 + v294) = (v233 >> 11) & 0xF0 | BYTE1(v233) & 0xE | 1;
        v295 = v501;
        v296 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v297 = v290 & 0x3F | ((_BYTE)v233 << 6);
        if ((unint64_t)(v295 + 2) > *((_QWORD *)&v501 + 1))
        {
          v480 = v245;
          v428 = v246;
          v438 = v290;
          v399 = v288;
          v400 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v295 + 2, 1);
          v289 = v400;
          v290 = v438;
          v246 = v428;
          v245 = v480;
          v288 = v399;
          v296 = v501;
        }
        *((_BYTE *)v500 + v296) = v297;
        v298 = (v233 >> 7) & 1;
        v299 = v15 >> 1;
        if (v298)
          LOBYTE(v299) = 4 * v15;
        v300 = v501;
        v301 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v302 = v299 & 0xFC | (2 * v298) | 1;
        if ((unint64_t)(v300 + 2) > *((_QWORD *)&v501 + 1))
        {
          v481 = v245;
          v429 = v246;
          v439 = v290;
          v419 = v288;
          v401 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v300 + 2, 1);
          v289 = v401;
          v290 = v439;
          v246 = v429;
          v245 = v481;
          v288 = v419;
          v301 = v501;
        }
        *((_BYTE *)v500 + v301) = v302;
        v303 = (v233 >> 8) & 1;
        v304 = (v243 >> 1) & 0xFE;
        if (v303)
          LOBYTE(v304) = 4 * v243;
        v305 = v501;
        v306 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v307 = v303 | v304;
        if ((unint64_t)(v305 + 2) > *((_QWORD *)&v501 + 1))
        {
          v482 = v245;
          v430 = v246;
          v440 = v290;
          v414 = v289;
          v420 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v305 + 2, 1);
          v289 = v414;
          v288 = v420;
          v290 = v440;
          v246 = v430;
          v245 = v482;
          v306 = v501;
        }
        *((_BYTE *)v500 + v306) = v307;
        v308 = v501;
        v309 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v310 = v233;
        if (v244)
          v311 = -127;
        else
          v311 = 1;
        v312 = v242 & 0x3E | (v233 >> 22) & 0x40 | v311;
        if ((unint64_t)(v308 + 2) > *((_QWORD *)&v501 + 1))
        {
          v483 = v245;
          v431 = v246;
          v441 = v290;
          v421 = v288;
          v402 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v308 + 2, 1);
          v289 = v402;
          v290 = v441;
          v246 = v431;
          v245 = v483;
          v288 = v421;
          v309 = v501;
        }
        *((_BYTE *)v500 + v309) = v312;
        v313 = v501;
        v314 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v315 = (32 * v461) | (v245 >> 1) & 0x1F;
        if ((unint64_t)(v313 + 2) > *((_QWORD *)&v501 + 1))
        {
          v484 = v245;
          v432 = v246;
          v442 = v290;
          v415 = v289;
          v422 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v313 + 2, 1);
          v289 = v415;
          v288 = v422;
          v290 = v442;
          v246 = v432;
          v245 = v484;
          v314 = v501;
        }
        *((_BYTE *)v500 + v314) = v315;
        v316 = v501;
        v317 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if ((unint64_t)(v316 + 2) > *((_QWORD *)&v501 + 1))
        {
          v485 = v245;
          v433 = v246;
          v443 = v290;
          v403 = v288;
          v416 = v289;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v316 + 2, 1);
          v289 = v416;
          v290 = v443;
          v246 = v433;
          v245 = v485;
          v288 = v403;
          v317 = v501;
        }
        *((_BYTE *)v500 + v317) = (v310 >> 18) & 0x20 | v454 & 0x40 | (v310 >> 20) & 0x10 | (v310 >> 22) & 8 | (v310 >> 25) & 6 | v461 & 0x80 | 1;
        v318 = v501;
        v319 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if (v289)
          v320 = 64;
        else
          v320 = 0;
        if (v246)
          v321 = 0x80;
        else
          v321 = 0;
        v322 = v321 & 0xC0 | v288 & 0x3F | v320;
        if ((unint64_t)(v318 + 2) > *((_QWORD *)&v501 + 1))
        {
          v486 = v245;
          v444 = v290;
          v404 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v318 + 2, 1);
          v290 = v444;
          v245 = v486;
          v288 = v404;
          v319 = v501;
        }
        *((_BYTE *)v500 + v319) = v322;
        v323 = v501;
        v324 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v325 = (v290 >> 2) & 0xF0 | (v310 >> 28) & 2 | (v310 >> 19) & 0xC | 1;
        if ((unint64_t)(v323 + 2) > *((_QWORD *)&v501 + 1))
        {
          v405 = v245;
          v406 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v323 + 2, 1);
          v245 = v405;
          v288 = v406;
          v324 = v501;
        }
        *((_BYTE *)v500 + v324) = v325;
        if (v298)
          v326 = 2;
        else
          v326 = 5;
        v327 = v15 >> v326;
        v328 = v501;
        v329 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v330 = v327 & 0xF0 | (v242 >> 6) & 0xF;
        if ((unint64_t)(v328 + 2) > *((_QWORD *)&v501 + 1))
        {
          v407 = v245;
          v408 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v328 + 2, 1);
          v245 = v407;
          v288 = v408;
          v329 = v501;
        }
        *((_BYTE *)v500 + v329) = v330;
        v331 = v501;
        v332 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if (v303)
          v333 = 2;
        else
          v333 = 5;
        v334 = (v243 >> v333) & 0xFFFFFFF0 | 1;
        if ((unint64_t)(v331 + 2) > *((_QWORD *)&v501 + 1))
        {
          v409 = v245;
          v410 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v331 + 2, 1);
          v245 = v409;
          v288 = v410;
          v332 = v501;
        }
        *((_BYTE *)v500 + v332) = v334;
        v335 = v501;
        v336 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        v337 = (v245 >> 5) & 0x7FFFFFE;
        v8 = (_QWORD *)v464;
        if ((unint64_t)(v335 + 2) > *((_QWORD *)&v501 + 1))
        {
          v411 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v335 + 2, 1);
          v288 = v411;
          v336 = v501;
        }
        *((_BYTE *)v500 + v336) = v337;
        v338 = v501;
        v339 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if ((unint64_t)(v338 + 2) > *((_QWORD *)&v501 + 1))
        {
          v412 = v288;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v500, v502, v338 + 2, 1);
          v288 = v412;
          v339 = v501;
        }
        *((_BYTE *)v500 + v339) = (v288 >> 2) & 0xF0;
        LODWORD(v340) = v501;
        v341 = v501 + 1;
        *(_QWORD *)&v501 = v501 + 1;
        if ((v340 + 1) >= 3)
        {
          v342 = (v340 - 1);
          v340 = v340;
          while (!(*((unsigned __int8 *)v500 + v340) | *((unsigned __int8 *)v500 + v342)))
          {
            *(_QWORD *)&v501 = v501 - 2;
            *((_BYTE *)v500 + v501 - 1) &= ~1u;
            LODWORD(v341) = v341 - 2;
            v340 -= 2;
            v342 -= 2;
            if (v341 <= 2)
            {
              v341 = v501;
              goto LABEL_402;
            }
          }
          v341 = v501;
        }
LABEL_402:
        if (v341)
        {
          v343 = (char *)v500;
          do
          {
            v344 = *v343;
            v345 = (char *)*((_QWORD *)a3 + 4);
            if ((unint64_t)v345 >= *((_QWORD *)a3 + 3))
            {
              llvm::raw_ostream::write(a3, v344);
            }
            else
            {
              *((_QWORD *)a3 + 4) = v345 + 1;
              *v345 = v344;
            }
            ++v343;
            --v341;
          }
          while (v341);
        }
        if (v491 != v493)
          free(v491);
        if (v494 != (char *)&v495 + 8)
          free(v494);
        v240 = v500;
        if (v500 == v502)
          goto LABEL_284;
        goto LABEL_283;
      }
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v424 = v63;
      v435 = *(_DWORD *)a2;
      v68 = (_QWORD *)(v63 + 48 * v62 + 40);
      while (1)
      {
        v69 = *((_QWORD *)a2 + 2);
        v70 = (unsigned __int8 *)(v69 + 16 * v66);
        v71 = *v70;
        if (v71 == 5)
          break;
        if (v71 == 1)
        {
          if ((*(_DWORD *)(v69 + 16 * v66 + 8) | 2) != 2)
            break;
        }
        else
        {
          v78 = *(_DWORD *)(v69 + 16 * v66 + 8);
          if ((*(_BYTE *)(*v68 + 6 * v66 + 2) & 2) != 0)
            v67 = v78;
          else
            v65 = v78;
        }
LABEL_72:
        if (++v66 == v64)
        {
          v233 = v15;
          v234 = v491;
          LODWORD(v15) = *v491;
          v63 = v424;
          v62 = v435;
          goto LABEL_286;
        }
      }
      v72 = sub_1C4B12E5C(v464, (uint64_t)v70, *(_QWORD *)(a5 + 192), 0);
      v73 = v492;
      if (v492 >= (unint64_t)HIDWORD(v492))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v491, (uint64_t)v493, v492 + 1, 4);
        v73 = v492;
      }
      v491[v73] = v72;
      LODWORD(v492) = v492 + 1;
      v74 = v66 + 1;
      if (v74 < *((_DWORD *)a2 + 6)
        && (v75 = *((_QWORD *)a2 + 2), *(_BYTE *)(v75 + 16 * (v66 + 1)) == 2))
      {
        v76 = *(_QWORD *)(v75 + 16 * v74 + 8);
        v77 = v495;
        if (v495 >= (unint64_t)DWORD1(v495))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v494, (uint64_t)&v495 + 8, v495 + 1, 8);
          v77 = v495;
        }
        *((_QWORD *)v494 + v77) = v76;
        LODWORD(v495) = v495 + 1;
        v66 = v74;
      }
      else
      {
        v79 = v495;
        if (v495 >= (unint64_t)DWORD1(v495))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v494, (uint64_t)&v495 + 8, v495 + 1, 8);
          v79 = v495;
        }
        *((_QWORD *)v494 + v79) = 0;
        LODWORD(v495) = v495 + 1;
      }
      goto LABEL_72;
    }
    v494 = v496;
    v495 = xmmword_1C6464ED0;
    v491 = v493;
    v492 = 0x400000000;
    v119 = *(_QWORD *)v8[1];
    if ((v14 & 0x10) != 0)
    {
      v493[0] = 0;
      LODWORD(v492) = 1;
    }
    v120 = *((unsigned int *)a2 + 6);
    if (!(_DWORD)v120)
    {
      v235 = 0;
      v125 = 0;
      v124 = 0;
      v236 = 8;
LABEL_292:
      if (v235 + 1 > v236)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v235 + 1, 1);
        v235 = v495;
      }
      *((_BYTE *)v494 + v235) = v124 & 1 | (32 * (v125 & 3)) | 0x1A;
      v248 = v495;
      v249 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v250 = (*v491 >> 7) & 6 | v461 & 0x18 | (v15 >> 13) & 0x20 | (((v491[2] >> 3) & 3) << 6) | 1;
      if ((unint64_t)(v248 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v248 + 2, 1);
        v249 = v495;
      }
      *((_BYTE *)v494 + v249) = v250;
      v251 = v495;
      v252 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v253 = *v491;
      if ((unint64_t)(v251 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v251 + 2, 1);
        v252 = v495;
      }
      *((_BYTE *)v494 + v252) = v253;
      v254 = v495;
      v255 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v256 = (v491[1] >> 7) & 0x7E | (v15 >> 2) & 0x80 | 1;
      if ((unint64_t)(v254 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v254 + 2, 1);
        v255 = v495;
      }
      *((_BYTE *)v494 + v255) = v256;
      v257 = v495;
      v258 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v259 = v491[1];
      if ((unint64_t)(v257 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v257 + 2, 1);
        v258 = v495;
      }
      *((_BYTE *)v494 + v258) = v259;
      v260 = v495;
      v261 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v262 = (v491[2] >> 4) | 1;
      if ((unint64_t)(v260 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v260 + 2, 1);
        v261 = v495;
      }
      *((_BYTE *)v494 + v261) = v262;
      v263 = v495;
      v264 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      if ((unint64_t)(v263 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v263 + 2, 1);
        v264 = v495;
      }
      *((_BYTE *)v494 + v264) = (v15 >> 7) & 0xF3 | (v15 >> 3) & 0xC;
      v265 = v495;
      v266 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v267 = (v491[3] >> 7) & 6 | (v15 >> 3) & 0x80 | (32 * ((v15 >> 2) & 3)) | v61 & 8 | v15 & 0x10 | 1;
      if ((unint64_t)(v265 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v265 + 2, 1);
        v266 = v495;
      }
      *((_BYTE *)v494 + v266) = v267;
      v268 = v495;
      v269 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v270 = v491[3];
      if ((unint64_t)(v268 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v268 + 2, 1);
        v269 = v495;
      }
      *((_BYTE *)v494 + v269) = v270;
      v271 = v495;
      v272 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v273 = (v15 >> 13) & 0xFFFFFFC0 | 1;
      if ((_DWORD)v492 == 5)
        v273 |= (v491[4] >> 7) & 0x3E;
      if ((unint64_t)(v271 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v271 + 2, 1);
        v272 = v495;
      }
      *((_BYTE *)v494 + v272) = v273;
      v274 = v495;
      v275 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      if ((_DWORD)v492 == 5)
        v276 = v491[4];
      else
        LOBYTE(v276) = 0;
      if ((unint64_t)(v274 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v274 + 2, 1);
        v275 = v495;
      }
      *((_BYTE *)v494 + v275) = v276;
      v277 = v495;
      v278 = v495 + 1;
      *(_QWORD *)&v495 = v495 + 1;
      v279 = (v491[2] >> 6) & 0xE0 | (8 * (v491[2] & 7)) | (2 * (v15 & 3));
      if ((unint64_t)(v277 + 2) > *((_QWORD *)&v495 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v277 + 2, 1);
        v278 = v495;
      }
      *((_BYTE *)v494 + v278) = v279;
      LODWORD(v280) = v495;
      v281 = v495 + 1;
      *(_QWORD *)&v495 = v281;
      if (v281 >= 3)
      {
        v282 = (v280 - 1);
        v280 = v280;
        while (1)
        {
          v283 = v495;
          if (*((unsigned __int8 *)v494 + v280) | *((unsigned __int8 *)v494 + v282))
            break;
          *(_QWORD *)&v495 = v495 - 2;
          *((char *)v494 + v283 - 3) &= ~1u;
          LODWORD(v281) = v281 - 2;
          v280 -= 2;
          v282 -= 2;
          if (v281 <= 2)
          {
            v281 = v495;
            goto LABEL_327;
          }
        }
        v281 = v495;
      }
LABEL_327:
      if (v281)
      {
        v284 = (char *)v494;
        do
        {
          v285 = *v284;
          v286 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v286 >= *((_QWORD *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, v285);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v286 + 1;
            *v286 = v285;
          }
          ++v284;
          --v281;
        }
        while (v281);
      }
      if (v491 != v493)
        free(v491);
      v240 = v494;
      if (v494 == v496)
        goto LABEL_284;
      goto LABEL_283;
    }
    v455 = v14 >> 14;
    v448 = v14;
    v121 = (uint64_t)v8;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v126 = (_QWORD *)(v119 + 48 * *(unsigned int *)a2 + 40);
    v127 = 2;
    while (1)
    {
      v128 = *((_QWORD *)a2 + 2);
      v129 = *(unsigned __int8 *)(v128 + v122);
      if (v129 == 5)
        break;
      if (v129 == 1)
      {
        if ((*(_DWORD *)(v128 + v122 + 8) | 2) != 2)
          break;
      }
      else
      {
        v132 = *(_DWORD *)(v128 + v122 + 8);
        if ((*(_BYTE *)(*v126 + v127) & 2) != 0)
          v125 = v132;
        else
          v124 = v132;
      }
LABEL_154:
      ++v123;
      v122 += 16;
      v127 += 6;
      if (v123 >= v120)
      {
        v236 = *((_QWORD *)&v495 + 1);
        v235 = v495;
        v8 = (_QWORD *)v121;
        v15 = v448;
        LOBYTE(v61) = v455;
        goto LABEL_292;
      }
    }
    v130 = sub_1C4B12E5C(v121, v128 + v122, *(_QWORD *)(a5 + 192), 0);
    v131 = v492;
    if (v492 >= (unint64_t)HIDWORD(v492))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v491, (uint64_t)v493, v492 + 1, 4);
      v131 = v492;
    }
    v491[v131] = v130;
    LODWORD(v492) = v492 + 1;
    v120 = *((unsigned int *)a2 + 6);
    goto LABEL_154;
  }
  v16 = *(_DWORD *)a2;
  HIDWORD(v18) = *(_DWORD *)a2 - 2503;
  LODWORD(v18) = HIDWORD(v18);
  v17 = v18 >> 1;
  if (v17 - 12 < 8 || v17 < 2)
  {
    v494 = v496;
    v495 = xmmword_1C6464ED0;
    v491 = v493;
    v492 = 0x400000000;
    v20 = v14 & 0x1000;
    v21 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v21)
    {
      v452 = v14 & 0x1000;
      v447 = v14;
      v22 = v8;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v15 = (unint64_t)v22;
      v27 = (_QWORD *)(*(_QWORD *)v22[1] + 48 * v16 + 40);
      v28 = 2;
      while (1)
      {
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(unsigned __int8 *)(v29 + v23);
        if (v30 == 5)
          break;
        if (v30 == 1)
        {
          if ((*(_DWORD *)(v29 + v23 + 8) | 2) != 2)
            break;
        }
        else
        {
          v33 = *(_DWORD *)(v29 + v23 + 8);
          if ((*(_BYTE *)(*v27 + v28) & 2) != 0)
            v26 = v33;
          else
            v25 = v33;
        }
LABEL_18:
        ++v24;
        v23 += 16;
        v28 += 6;
        if (v24 >= v21)
        {
          v118 = v491;
          v8 = (_QWORD *)v15;
          LODWORD(v15) = v447;
          v20 = v452;
          goto LABEL_244;
        }
      }
      v31 = sub_1C4B12E5C(v15, v29 + v23, *(_QWORD *)(a5 + 192), 0);
      v32 = v492;
      if (v492 >= (unint64_t)HIDWORD(v492))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v491, (uint64_t)v493, v492 + 1, 4);
        v32 = v492;
      }
      v491[v32] = v31;
      LODWORD(v492) = v492 + 1;
      v21 = *((unsigned int *)a2 + 6);
      goto LABEL_18;
    }
    v26 = 0;
    v25 = 0;
    v118 = v493;
LABEL_244:
    if (v20)
    {
      LODWORD(v500) = *(_QWORD *)(*((_QWORD *)a2 + 2) + 40);
      sub_1C615AD38((unsigned int *)&v491, (uint64_t)v118 + 8, (int *)&v500);
      v118 = v491;
    }
    v201 = (*((_DWORD *)v118 + 1) >> 12) & 2;
    v202 = v495;
    if ((unint64_t)(v495 + 1) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v495 + 1, 1);
      v202 = v495;
    }
    *((_BYTE *)v494 + v202) = v25 & 1 | (32 * (v26 & 3)) | v201 | 0x10;
    v203 = v495;
    v204 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    if (v201)
      v491[1] >>= 1;
    if ((unint64_t)(v203 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v203 + 2, 1);
      v204 = v495;
    }
    *((_BYTE *)v494 + v204) = (v15 >> 6) & 0x30 | (v20 >> 11) | 0x81;
    v205 = v495;
    v206 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v207 = *v491 & 0x3F | (((v15 >> 8) & 3) << 6);
    if ((unint64_t)(v205 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v205 + 2, 1);
      v206 = v495;
    }
    *((_BYTE *)v494 + v206) = v207;
    v208 = v495;
    v209 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v210 = (2 * *((_BYTE *)v491 + 4)) | 1;
    if ((unint64_t)(v208 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v208 + 2, 1);
      v209 = v495;
    }
    *((_BYTE *)v494 + v209) = v210;
    v211 = v495;
    v212 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v213 = v491[2];
    if ((unint64_t)(v211 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v211 + 2, 1);
      v212 = v495;
    }
    *((_BYTE *)v494 + v212) = v213;
    v214 = v495;
    v215 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v216 = (v491[1] >> 6) & 0xE | (*v491 >> 2) & 0xF0 | 1;
    if ((unint64_t)(v214 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v214 + 2, 1);
      v215 = v495;
    }
    *((_BYTE *)v494 + v215) = v216;
    v217 = v495;
    v218 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v219 = v491[2];
    if ((unint64_t)(v217 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v217 + 2, 1);
      v218 = v495;
    }
    *((_BYTE *)v494 + v218) = BYTE1(v219);
    v220 = v495;
    v221 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v222 = (v491[1] >> 4) & 0xC0 | (v15 >> 3) & 0xC | v15 & 0x18 | 1;
    if ((unint64_t)(v220 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v220 + 2, 1);
      v221 = v495;
    }
    *((_BYTE *)v494 + v221) = v222;
    v223 = v495;
    v224 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v225 = v491[3] & 0xFE;
    if ((unint64_t)(v223 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v223 + 2, 1);
      v224 = v495;
    }
    *((_BYTE *)v494 + v224) = v225;
    v226 = v495;
    v227 = v495 + 1;
    *(_QWORD *)&v495 = v495 + 1;
    v228 = (v491[3] >> 2) & 0x3FFFFFC0;
    if ((unint64_t)(v226 + 2) > *((_QWORD *)&v495 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v494, v496, v226 + 2, 1);
      v227 = v495;
    }
    *((_BYTE *)v494 + v227) = v228;
    LODWORD(v229) = v495;
    v230 = v495 + 1;
    *(_QWORD *)&v495 = v230;
    if (v230 >= 3)
    {
      v231 = (v229 - 1);
      v229 = v229;
      while (1)
      {
        v232 = v495;
        if (*((unsigned __int8 *)v494 + v229) | *((unsigned __int8 *)v494 + v231))
          break;
        *(_QWORD *)&v495 = v495 - 2;
        *((char *)v494 + v232 - 3) &= ~1u;
        LODWORD(v230) = v230 - 2;
        v229 -= 2;
        v231 -= 2;
        if (v230 <= 2)
        {
          v230 = v495;
          goto LABEL_274;
        }
      }
      v230 = v495;
    }
LABEL_274:
    if (v230)
    {
      v237 = (char *)v494;
      do
      {
        v238 = *v237;
        v239 = (char *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v239 >= *((_QWORD *)a3 + 3))
        {
          llvm::raw_ostream::write(a3, v238);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v239 + 1;
          *v239 = v238;
        }
        ++v237;
        --v230;
      }
      while (v230);
    }
    if (v491 != v493)
      free(v491);
    v240 = v494;
    if (v494 == v496)
      goto LABEL_284;
LABEL_283:
    free(v240);
LABEL_284:
    *(_DWORD *)(v8[3] + 144) += v489;
    goto LABEL_337;
  }
  v346 = v489;
  if (*(_BYTE *)(v10 + 48 * v9 + 5))
  {
    v347 = 8 * *(unsigned __int8 *)(v10 + 48 * v9 + 5) - 8;
    do
    {
      if ((unint64_t)(v346 + 1) > *((_QWORD *)&v489 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v488, v490, v346 + 1, 1);
        v346 = v489;
      }
      *((_BYTE *)v488 + v346) = ((255 << (v347 & 0xF8)) & v15) >> (v347 & 0xF8);
      v346 = v489 + 1;
      *(_QWORD *)&v489 = v489 + 1;
      v347 -= 8;
    }
    while (v347 != -8);
  }
  if (*(_DWORD *)(a4 + 8) || v346 < 3)
  {
    v350 = v346;
  }
  else
  {
    v348 = (v346 - 2);
    v349 = (v346 - 1);
    while (1)
    {
      v350 = v489;
      if (*((unsigned __int8 *)v488 + v349) | *((unsigned __int8 *)v488 + v348))
        break;
      *(_QWORD *)&v489 = v489 - 2;
      *((char *)v488 + v350 - 3) &= ~1u;
      LODWORD(v346) = v346 - 2;
      v349 -= 2;
      v348 -= 2;
      if (v346 <= 2)
      {
        v350 = v489;
        break;
      }
    }
    LODWORD(v346) = v350;
  }
  *(_DWORD *)(v8[3] + 144) += v346;
  if (v350)
  {
    v351 = (char *)v488;
    do
    {
      v352 = *v351;
      v353 = (char *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v353 >= *((_QWORD *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, v352);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v353 + 1;
        *v353 = v352;
      }
      ++v351;
      --v350;
    }
    while (v350);
  }
LABEL_337:
  if (v488 != v490)
    free(v488);
}

unint64_t sub_1C4B0B6C0(uint64_t a1, llvm::MCInst *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  unsigned __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  char v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  int v232;
  char v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  unsigned __int8 *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  unsigned __int8 *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int8 *v334;
  int v335;
  unsigned int v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unint64_t v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  int v392;
  int v393;
  uint64_t v394;
  unint64_t v395;
  int v396;
  int v397;
  uint64_t v398;
  unint64_t v399;
  int v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  uint64_t v414;
  unint64_t v415;
  __int16 v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  int v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  int v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  unint64_t v433;
  int v434;
  int v435;
  uint64_t v436;
  unint64_t v437;
  int v438;
  unsigned int v439;
  uint64_t v440;
  unint64_t v441;
  int v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  int v452;
  uint64_t v453;
  unint64_t v454;
  __int16 v455;
  uint64_t v456;
  int v457;
  unsigned int v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  int v464;
  int v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  uint64_t v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int v481;
  int v482;
  uint64_t v483;
  int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  int v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  __int16 v505;
  char v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  int v543;
  uint64_t v544;
  int v545;
  int v546;
  int v547;
  uint64_t v548;
  unsigned int v549;
  int v550;
  int v551;
  uint64_t v552;
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  int v557;
  int v558;
  int v559;
  uint64_t v560;
  int v561;
  int v562;
  int v563;
  uint64_t v564;
  int v565;
  int v566;
  int v567;
  uint64_t v568;
  int v569;
  int v570;
  int v571;
  uint64_t v572;
  int v573;
  int v574;
  int v575;
  uint64_t v576;
  int v577;
  int v578;
  int v579;
  uint64_t v580;
  unsigned int v581;
  uint64_t v582;
  int v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  int v593;
  int v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  int v598;
  int v599;
  int v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  unsigned int v604;
  int v605;
  int v606;
  uint64_t v607;
  int v608;
  int v609;
  int v610;
  uint64_t v611;
  int v612;
  int v613;
  int v614;
  uint64_t v615;
  int v616;
  int v617;
  int v618;
  uint64_t v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  int v624;
  int v625;
  int v626;
  uint64_t v627;
  int v628;
  int v629;
  int v630;
  uint64_t v631;
  int v632;
  int v633;
  int v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unsigned __int8 v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  int v662;
  int v663;
  uint64_t v664;
  int v665;
  int v666;
  uint64_t v667;
  int v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  int v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  uint64_t v686;
  unsigned int v687;
  uint64_t v688;
  unsigned int v689;
  int v690;
  int v691;
  uint64_t v692;
  int v693;
  int v694;
  uint64_t v695;
  int v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  int v701;
  uint64_t v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  int v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  unint64_t v712;
  unint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  uint64_t v717;
  unsigned int v718;
  int v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  int v725;
  uint64_t v726;
  int v727;
  int v728;
  uint64_t v729;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t v745;
  int v746;
  int v747;
  uint64_t v748;
  int v749;
  int v750;
  int v751;
  uint64_t v752;
  int v753;
  int v754;
  uint64_t v755;
  int v756;
  int v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  int v761;
  int v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  int v766;
  unsigned int v767;
  uint64_t v768;
  int v769;
  int v770;
  int v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  int v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  int v779;
  uint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  uint64_t v784;
  int v785;
  int v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  int v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  uint64_t v797;
  unint64_t v798;
  unint64_t v799;
  int v800;
  int v801;
  uint64_t v802;
  uint64_t v803;
  int v804;
  int v805;
  int v806;
  uint64_t v807;
  unint64_t v808;
  int v809;
  int v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  int v815;
  uint64_t v816;
  unint64_t v817;
  uint64_t v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t v823;
  int v824;
  int v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  int v835;
  uint64_t v836;
  uint64_t v838;
  void *v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  __int128 v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  __int128 v847;
  uint64_t v848;
  uint64_t v849;
  unsigned int v850;
  unint64_t v851;
  int v852;
  uint64_t v853;
  unsigned __int8 *v854;
  int v855;
  int v856;
  int v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  unsigned int v861;
  uint64_t v862;
  int v863;
  int v864;
  unsigned int v865;
  int v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  int v871;
  int v872;
  uint64_t v873;
  char v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  int v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  int v888;
  int v889;
  int v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  int v896;
  int v897;
  uint64_t v898;
  int v899;
  int v900;
  uint64_t v901;
  int v902;
  int v903;
  int v904;
  uint64_t v905;
  unsigned __int8 v906;
  uint64_t v907;
  int v908;
  int v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  int v918;
  unsigned __int8 v919;
  int v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  unint64_t v925;
  uint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  uint64_t v932;
  int v933;
  int v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  unint64_t v940;
  int v941;
  int v942;
  uint64_t v943;
  unint64_t v944;
  int v945;
  int v946;
  uint64_t v947;
  unint64_t v948;
  int v949;
  int v950;
  uint64_t v951;
  unint64_t v952;
  int v953;
  int v954;
  uint64_t v955;
  unint64_t v956;
  int v957;
  unsigned int v958;
  uint64_t v959;
  unint64_t v960;
  int v961;
  unsigned int v962;
  uint64_t v963;
  uint64_t v964;
  int v965;
  uint64_t v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  int v970;
  int v971;
  uint64_t v972;
  int v973;
  unsigned int v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  int v978;
  uint64_t v979;
  int v980;
  int v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  int v986;
  uint64_t v987;
  unsigned int v988;
  int v989;
  int v990;
  uint64_t v991;
  uint64_t v992;
  int v993;
  int v994;
  uint64_t v995;
  unsigned int v996;
  int v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  uint64_t v1003;
  int v1004;
  int v1005;
  int v1006;
  uint64_t v1007;
  int v1008;
  int v1009;
  int v1010;
  uint64_t v1011;
  int v1012;
  unsigned __int8 *v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  int v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  unsigned __int8 *v1021;
  int v1022;
  unsigned int v1023;
  uint64_t v1024;
  unint64_t v1025;
  int v1026;
  uint64_t v1027;
  uint64_t v1028;
  int v1029;
  unsigned __int8 *v1030;
  int v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  int v1041;
  uint64_t v1042;
  unsigned __int8 *v1043;
  int v1044;
  uint64_t v1045;
  uint64_t v1046;
  int v1047;
  uint64_t v1048;
  int v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  void *v1053;
  uint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  __int128 v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  __int128 v1061;
  unint64_t v1062;
  uint64_t v1063;
  __int128 v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unsigned __int8 *v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  int v1077;
  int v1078;
  unsigned __int8 *v1079;
  int v1080;
  unint64_t v1081;
  uint64_t v1082;
  int v1083;
  unsigned __int8 *v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  int v1088;
  int v1089;
  unsigned __int8 *v1090;
  int v1091;
  int v1092;
  unsigned __int8 *v1093;
  int v1094;
  unint64_t v1095;
  unsigned __int8 *v1096;
  int v1097;
  int v1098;
  unsigned __int8 *v1099;
  int v1100;
  unint64_t v1101;
  unsigned __int8 *v1102;
  int v1103;
  int v1104;
  int v1105;
  unsigned int v1106;
  uint64x2_t v1107;
  int8x16_t v1108;
  unsigned __int8 *v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  int v1114;
  int v1115;
  unsigned __int8 *v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  int v1121;
  uint64_t v1122;
  unsigned __int8 *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  int v1128;
  int v1129;
  int v1130;
  unsigned __int8 *v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  int v1137;
  uint64_t v1138;
  unsigned __int8 *v1139;
  int v1140;
  int v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  int v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  int v1171;
  unsigned int v1172;
  uint64_t v1173;
  unint64_t v1174;
  int v1175;
  int v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  unint64_t v1182;
  int v1183;
  int v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  int v1188;
  uint64_t v1189;
  int v1190;
  uint64_t v1191;
  int v1192;
  int v1193;
  int v1194;
  uint64_t v1195;
  int v1196;
  int v1197;
  uint64_t v1198;
  int v1199;
  unint64_t v1200;
  int v1201;
  uint64_t v1202;
  unint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  int v1211;
  unint64_t v1212;
  uint64_t v1213;
  int v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  int v1218;
  int v1219;
  int v1220;
  uint64_t v1221;
  unint64_t v1222;
  int v1223;
  int v1224;
  uint64_t v1225;
  unsigned int v1226;
  int v1227;
  int v1228;
  uint64_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  uint64_t v1232;
  int v1233;
  int v1234;
  uint64_t v1235;
  unint64_t v1236;
  int v1237;
  int v1238;
  uint64_t v1239;
  int v1240;
  int v1241;
  int v1242;
  uint64_t v1243;
  unint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  int v1250;
  uint64_t v1251;
  uint64_t v1252;
  int v1253;
  int v1254;
  int v1255;
  uint64_t v1256;
  int v1257;
  int v1258;
  int v1259;
  uint64_t v1260;
  int v1261;
  int v1262;
  int v1263;
  uint64_t v1264;
  int v1265;
  int v1266;
  int v1267;
  uint64_t v1268;
  int v1269;
  int v1270;
  int v1271;
  uint64_t v1272;
  int v1273;
  int v1274;
  int v1275;
  uint64_t v1276;
  int v1277;
  unint64_t v1278;
  int v1279;
  uint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  int v1284;
  unint64_t v1285;
  int v1286;
  int v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  int v1291;
  uint64_t v1292;
  int v1293;
  int v1294;
  int v1295;
  uint64_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  int v1299;
  unint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  int v1304;
  int v1305;
  uint64_t v1306;
  unint64_t v1307;
  uint64_t v1308;
  unint64_t v1309;
  int v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  int v1321;
  int v1322;
  uint64_t v1323;
  int v1324;
  unint64_t v1325;
  int v1326;
  uint64_t v1327;
  unint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unint64_t v1333;
  int v1334;
  uint64_t v1335;
  int v1336;
  uint64_t v1337;
  int v1338;
  int v1339;
  uint64_t v1340;
  int v1341;
  llvm::raw_ostream *v1342;
  llvm *v1343;
  int v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  char v1348;
  uint64_t v1349;
  char v1350;
  uint64_t v1351;
  uint64_t v1352;
  char v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  void *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  char v1380;
  uint64_t v1381;
  int v1382;
  llvm *v1383;
  _QWORD v1384[3];

  v5 = *(unsigned int *)a2;
  v8 = a1;
  v9 = qword_1C6785EF0[v5];
  switch((int)v5)
  {
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 386:
    case 387:
    case 392:
    case 393:
    case 398:
    case 399:
    case 464:
    case 465:
    case 466:
    case 467:
    case 740:
    case 741:
    case 742:
    case 743:
    case 744:
    case 745:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 978:
    case 979:
    case 980:
    case 981:
    case 982:
    case 983:
    case 984:
    case 985:
    case 986:
    case 987:
    case 988:
    case 989:
    case 990:
    case 991:
    case 992:
    case 993:
    case 994:
    case 995:
    case 996:
    case 997:
    case 998:
    case 999:
    case 1000:
    case 1001:
    case 1002:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
    case 1318:
    case 1319:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2501:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2616:
    case 2617:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2623:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2628:
    case 2629:
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
    case 2662:
    case 2663:
    case 2664:
    case 2665:
    case 2666:
    case 2667:
    case 2668:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2685:
    case 2686:
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
    case 2711:
    case 2712:
    case 2713:
    case 2714:
    case 2715:
    case 2716:
    case 2717:
    case 2718:
    case 2719:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2727:
    case 2728:
    case 2729:
    case 2730:
    case 2731:
    case 2732:
    case 2733:
    case 2734:
    case 2735:
    case 2736:
    case 2737:
    case 2738:
    case 2739:
    case 2740:
    case 2741:
    case 2742:
    case 2743:
    case 2744:
    case 2745:
    case 2746:
    case 2747:
    case 2748:
    case 2749:
    case 2750:
    case 2751:
    case 2752:
    case 2753:
    case 2754:
    case 2755:
    case 2756:
    case 2757:
    case 2758:
    case 2759:
    case 2760:
    case 2761:
    case 2762:
    case 2763:
    case 2764:
    case 2765:
    case 2766:
    case 2767:
    case 2768:
    case 2769:
    case 2770:
    case 2771:
    case 2772:
    case 2773:
    case 2774:
    case 2775:
    case 2776:
    case 2777:
    case 2778:
    case 2779:
    case 2780:
    case 2781:
    case 2782:
    case 2783:
    case 2784:
    case 2785:
    case 2786:
    case 2787:
    case 2788:
    case 2789:
    case 2790:
    case 2791:
    case 2792:
    case 2793:
    case 2794:
    case 2795:
    case 2796:
    case 2797:
    case 2798:
    case 2799:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2807:
    case 2808:
    case 2809:
    case 2810:
    case 2811:
    case 2812:
    case 2813:
    case 2814:
    case 2815:
    case 2816:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 2821:
    case 2822:
    case 2823:
    case 2824:
    case 2825:
    case 2826:
    case 2827:
    case 2828:
    case 2829:
    case 2830:
    case 2831:
    case 2832:
    case 2833:
    case 2834:
    case 2835:
    case 2836:
    case 2837:
    case 2838:
    case 2839:
    case 2840:
    case 2841:
    case 2842:
    case 2843:
    case 2844:
    case 2845:
    case 2846:
    case 2847:
    case 2848:
    case 2849:
    case 2850:
    case 2851:
    case 2852:
    case 2853:
    case 2854:
    case 2855:
    case 2856:
    case 2857:
    case 2858:
    case 2859:
    case 2860:
    case 2861:
    case 2862:
    case 2863:
    case 2864:
    case 2865:
    case 2866:
    case 2867:
    case 2868:
    case 2869:
    case 2870:
    case 2871:
    case 2872:
    case 2873:
    case 2874:
    case 2875:
    case 2876:
    case 2877:
    case 2878:
    case 2879:
    case 2880:
    case 2881:
    case 2882:
    case 2883:
    case 2884:
    case 2885:
    case 2886:
    case 2887:
    case 2888:
    case 2889:
    case 2890:
    case 2891:
    case 2892:
    case 2893:
    case 2894:
    case 2895:
    case 2896:
    case 2897:
    case 2898:
    case 2899:
    case 2900:
    case 2901:
    case 2905:
    case 2906:
    case 2907:
    case 2908:
    case 2909:
    case 2910:
    case 2911:
    case 2912:
    case 2913:
    case 2914:
    case 2915:
    case 2916:
    case 2917:
    case 2918:
    case 2919:
    case 2920:
    case 2921:
    case 2922:
    case 2923:
    case 2924:
    case 2925:
    case 2926:
    case 2927:
    case 2928:
    case 2929:
    case 2930:
    case 2931:
    case 2932:
    case 2933:
    case 2934:
    case 2935:
    case 2936:
    case 2937:
    case 2938:
    case 2939:
    case 2940:
    case 2941:
    case 2942:
    case 2943:
    case 2944:
    case 2945:
    case 2946:
    case 2947:
    case 2948:
    case 2949:
    case 2950:
    case 2951:
    case 2952:
    case 2953:
    case 2954:
    case 2955:
    case 2956:
    case 2957:
    case 2958:
    case 2959:
    case 2960:
    case 2961:
    case 2962:
    case 2963:
    case 2964:
    case 2965:
    case 2966:
    case 2967:
    case 2968:
    case 2969:
    case 2970:
    case 2971:
    case 2972:
    case 2973:
    case 2974:
    case 2975:
    case 2976:
    case 2977:
    case 2978:
    case 2979:
    case 2980:
    case 2981:
    case 2982:
    case 2983:
    case 2984:
    case 2985:
    case 2986:
    case 2987:
    case 2988:
    case 2989:
    case 2990:
    case 2991:
    case 2992:
    case 2993:
    case 2994:
    case 2995:
    case 2996:
    case 2997:
    case 2998:
    case 2999:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3011:
    case 3012:
    case 3013:
    case 3014:
    case 3015:
    case 3016:
    case 3017:
    case 3018:
    case 3019:
    case 3020:
    case 3021:
    case 3022:
    case 3023:
    case 3024:
    case 3025:
    case 3026:
    case 3027:
    case 3028:
    case 3029:
    case 3030:
    case 3031:
    case 3032:
    case 3033:
    case 3034:
    case 3035:
    case 3036:
    case 3037:
    case 3038:
    case 3039:
    case 3040:
    case 3041:
    case 3042:
    case 3043:
    case 3044:
    case 3045:
    case 3046:
    case 3047:
    case 3048:
    case 3049:
    case 3050:
    case 3051:
    case 3052:
    case 3053:
    case 3054:
    case 3055:
    case 3056:
    case 3057:
    case 3058:
    case 3059:
    case 3060:
    case 3061:
    case 3062:
    case 3063:
    case 3064:
    case 3065:
    case 3066:
    case 3067:
    case 3068:
    case 3069:
    case 3070:
    case 3071:
    case 3072:
    case 3073:
    case 3074:
    case 3075:
    case 3076:
    case 3077:
    case 3078:
    case 3079:
    case 3080:
    case 3081:
    case 3082:
    case 3083:
    case 3084:
    case 3085:
    case 3086:
    case 3087:
    case 3088:
    case 3089:
    case 3090:
    case 3091:
    case 3092:
    case 3093:
    case 3094:
    case 3095:
    case 3096:
    case 3097:
    case 3098:
    case 3099:
    case 3100:
    case 3101:
    case 3102:
    case 3103:
    case 3104:
    case 3105:
    case 3106:
    case 3107:
    case 3108:
    case 3109:
    case 3110:
    case 3111:
    case 3112:
    case 3113:
    case 3114:
    case 3115:
    case 3116:
    case 3117:
    case 3118:
    case 3119:
    case 3120:
    case 3121:
    case 3122:
    case 3123:
    case 3124:
    case 3125:
    case 3126:
    case 3127:
    case 3128:
    case 3129:
    case 3130:
    case 3131:
    case 3132:
    case 3133:
    case 3134:
    case 3135:
    case 3136:
    case 3137:
    case 3138:
    case 3139:
    case 3140:
    case 3141:
    case 3142:
    case 3143:
    case 3144:
    case 3145:
    case 3146:
    case 3147:
    case 3148:
    case 3149:
    case 3150:
    case 3151:
    case 3152:
    case 3153:
    case 3154:
    case 3155:
    case 3156:
    case 3157:
    case 3158:
    case 3159:
    case 3160:
    case 3161:
    case 3162:
    case 3163:
    case 3164:
    case 3165:
    case 3166:
    case 3167:
    case 3168:
    case 3169:
    case 3170:
    case 3171:
    case 3172:
    case 3173:
    case 3174:
    case 3175:
    case 3176:
    case 3177:
    case 3178:
    case 3179:
    case 3180:
    case 3181:
    case 3182:
    case 3183:
    case 3184:
    case 3185:
    case 3186:
    case 3187:
    case 3188:
    case 3189:
    case 3190:
    case 3191:
    case 3192:
    case 3193:
    case 3194:
    case 3195:
    case 3196:
    case 3197:
    case 3198:
    case 3199:
    case 3200:
    case 3201:
    case 3202:
    case 3203:
    case 3204:
    case 3205:
    case 3206:
    case 3207:
    case 3208:
    case 3209:
    case 3210:
    case 3211:
    case 3212:
    case 3213:
    case 3214:
    case 3215:
    case 3216:
    case 3217:
    case 3218:
    case 3219:
    case 3220:
    case 3221:
    case 3222:
    case 3223:
    case 3224:
    case 3225:
    case 3226:
    case 3227:
    case 3228:
    case 3229:
    case 3230:
    case 3231:
    case 3232:
    case 3233:
    case 3234:
    case 3235:
    case 3236:
    case 3237:
    case 3238:
    case 3239:
    case 3240:
    case 3241:
    case 3242:
    case 3243:
    case 3244:
    case 3245:
    case 3246:
    case 3247:
    case 3248:
    case 3249:
    case 3250:
    case 3251:
    case 3252:
    case 3253:
    case 3254:
    case 3255:
    case 3256:
    case 3257:
    case 3258:
    case 3259:
    case 3260:
    case 3261:
    case 3262:
    case 3263:
    case 3264:
    case 3265:
    case 3266:
    case 3267:
    case 3268:
    case 3269:
    case 3270:
    case 3271:
    case 3272:
    case 3273:
    case 3274:
    case 3275:
    case 3276:
    case 3277:
    case 3278:
    case 3279:
    case 3280:
    case 3281:
    case 3282:
    case 3283:
    case 3284:
    case 3285:
    case 3286:
    case 3287:
    case 3288:
    case 3289:
    case 3290:
    case 3291:
    case 3292:
    case 3293:
    case 3294:
    case 3295:
    case 3296:
    case 3297:
    case 3298:
    case 3299:
    case 3300:
    case 3301:
    case 3302:
    case 3303:
    case 3304:
    case 3305:
    case 3306:
    case 3307:
    case 3308:
    case 3309:
    case 3310:
    case 3311:
    case 3312:
    case 3313:
    case 3314:
    case 3315:
    case 3316:
    case 3317:
    case 3318:
    case 3319:
    case 3320:
    case 3321:
    case 3322:
    case 3323:
    case 3324:
    case 3325:
    case 3326:
    case 3327:
    case 3328:
    case 3329:
    case 3330:
    case 3331:
    case 3332:
    case 3333:
    case 3334:
    case 3335:
    case 3336:
    case 3337:
    case 3338:
    case 3339:
    case 3340:
    case 3341:
    case 3342:
    case 3343:
    case 3344:
    case 3345:
    case 3346:
    case 3347:
    case 3348:
    case 3349:
    case 3350:
    case 3351:
    case 3352:
    case 3353:
    case 3354:
    case 3355:
    case 3356:
    case 3357:
    case 3358:
    case 3359:
    case 3360:
    case 3361:
    case 3362:
    case 3363:
    case 3364:
    case 3365:
    case 3366:
    case 3367:
    case 3368:
    case 3369:
    case 3370:
    case 3371:
    case 3372:
    case 3373:
    case 3374:
    case 3375:
    case 3376:
    case 3377:
    case 3378:
    case 3379:
    case 3380:
    case 3381:
    case 3382:
    case 3383:
    case 3384:
    case 3385:
    case 3386:
    case 3387:
    case 3388:
    case 3389:
    case 3390:
    case 3391:
    case 3392:
    case 3393:
    case 3394:
    case 3395:
    case 3396:
    case 3397:
    case 3398:
    case 3399:
    case 3400:
    case 3401:
    case 3402:
    case 3403:
    case 3404:
    case 3405:
    case 3406:
    case 3407:
    case 3408:
    case 3409:
    case 3410:
    case 3411:
    case 3412:
    case 3413:
    case 3414:
    case 3415:
    case 3416:
    case 3417:
    case 3418:
    case 3419:
    case 3420:
    case 3421:
    case 3422:
    case 3423:
    case 3424:
    case 3425:
    case 3426:
    case 3427:
    case 3428:
    case 3429:
    case 3430:
    case 3431:
    case 3432:
    case 3433:
    case 3434:
    case 3435:
    case 3436:
    case 3437:
    case 3438:
    case 3439:
    case 3440:
    case 3441:
    case 3442:
    case 3443:
    case 3444:
    case 3445:
    case 3446:
    case 3447:
    case 3448:
    case 3449:
    case 3450:
    case 3451:
    case 3452:
    case 3453:
    case 3454:
    case 3455:
    case 3456:
    case 3457:
    case 3458:
    case 3459:
    case 3460:
    case 3461:
    case 3462:
    case 3463:
    case 3464:
    case 3465:
    case 3466:
    case 3467:
    case 3468:
    case 3469:
    case 3470:
    case 3471:
    case 3472:
    case 3473:
    case 3474:
    case 3475:
    case 3476:
    case 3477:
    case 3478:
    case 3479:
    case 3480:
    case 3481:
    case 3482:
    case 3483:
    case 3484:
    case 3485:
    case 3486:
    case 3487:
    case 3488:
    case 3489:
    case 3490:
    case 3491:
    case 3492:
    case 3493:
    case 3494:
    case 3495:
    case 3496:
    case 3497:
    case 3498:
    case 3499:
    case 3500:
    case 3501:
    case 3502:
    case 3503:
    case 3504:
    case 3505:
    case 3506:
    case 3507:
    case 3508:
    case 3509:
    case 3510:
    case 3511:
    case 3512:
    case 3513:
    case 3514:
    case 3515:
    case 3516:
    case 3517:
    case 3518:
    case 3519:
    case 3520:
    case 3521:
    case 3522:
    case 3523:
    case 3524:
    case 3525:
    case 3526:
    case 3527:
    case 3528:
    case 3529:
    case 3530:
    case 3531:
    case 3532:
    case 3533:
    case 3534:
    case 3535:
    case 3536:
    case 3537:
    case 3538:
    case 3539:
    case 3540:
    case 3541:
    case 3542:
    case 3543:
    case 3544:
    case 3545:
    case 3546:
    case 3547:
    case 3548:
    case 3549:
    case 3550:
    case 3551:
    case 3552:
    case 3553:
    case 3554:
    case 3555:
    case 3556:
    case 3557:
    case 3558:
    case 3559:
    case 3560:
    case 3561:
    case 3562:
    case 3563:
    case 3564:
    case 3565:
    case 3566:
    case 3567:
    case 3568:
    case 3569:
    case 3570:
    case 3571:
    case 3572:
    case 3573:
    case 3574:
    case 3575:
    case 3576:
    case 3577:
    case 3578:
    case 3579:
    case 3580:
    case 3581:
    case 3582:
    case 3583:
    case 3584:
    case 3585:
    case 3586:
    case 3587:
    case 3588:
    case 3589:
    case 3590:
    case 3591:
    case 3592:
    case 3593:
    case 3594:
    case 3595:
    case 3596:
    case 3597:
    case 3598:
    case 3599:
    case 3600:
    case 3601:
    case 3602:
    case 3603:
    case 3604:
    case 3605:
    case 3606:
    case 3607:
    case 3608:
    case 3609:
    case 3610:
    case 3611:
    case 3612:
    case 3613:
    case 3614:
    case 3615:
    case 3616:
    case 3617:
    case 3618:
    case 3619:
    case 3620:
    case 3621:
    case 3622:
    case 3623:
    case 3624:
    case 3625:
    case 3626:
    case 3627:
    case 3628:
    case 3629:
    case 3630:
    case 3631:
    case 3632:
    case 3633:
    case 3634:
    case 3635:
    case 3636:
    case 3637:
    case 3638:
    case 3639:
    case 3640:
    case 3641:
    case 3642:
    case 3643:
    case 3644:
    case 3645:
    case 3646:
    case 3647:
    case 3648:
    case 3649:
    case 3650:
    case 3651:
    case 3652:
    case 3653:
    case 3654:
    case 3655:
    case 3656:
    case 3657:
    case 3658:
    case 3659:
    case 3660:
    case 3661:
    case 3662:
    case 3663:
    case 3664:
    case 3665:
    case 3666:
    case 3667:
    case 3668:
    case 3669:
    case 3670:
    case 3671:
    case 3672:
    case 3673:
    case 3674:
    case 3675:
    case 3676:
    case 3677:
    case 3678:
    case 3679:
    case 3680:
    case 3681:
    case 3682:
    case 3683:
    case 3684:
    case 3685:
    case 3686:
    case 3687:
    case 3688:
    case 3689:
    case 3690:
    case 3691:
    case 3692:
    case 3693:
    case 3694:
    case 3695:
    case 3696:
    case 3697:
    case 3698:
    case 3699:
    case 3700:
    case 3701:
    case 3702:
    case 3703:
    case 3704:
    case 3705:
    case 3706:
    case 3707:
    case 3708:
    case 3709:
    case 3710:
    case 3711:
    case 3712:
    case 3713:
    case 3714:
    case 3715:
    case 3716:
    case 3717:
    case 3718:
    case 3719:
    case 3720:
    case 3721:
    case 3722:
    case 3723:
    case 3724:
    case 3725:
    case 3726:
    case 3727:
    case 3728:
    case 3729:
    case 3730:
    case 3731:
    case 3732:
    case 3733:
    case 3734:
    case 3735:
    case 3736:
    case 3737:
    case 3738:
    case 3739:
    case 3740:
    case 3741:
    case 3742:
    case 3743:
    case 3744:
    case 3769:
    case 3770:
    case 3771:
    case 3772:
    case 3773:
    case 3774:
    case 3775:
    case 3776:
    case 3777:
    case 3778:
    case 3779:
    case 3780:
    case 3781:
    case 3782:
    case 3783:
    case 3784:
    case 3785:
    case 3786:
    case 3787:
    case 3788:
    case 3789:
    case 3790:
    case 3791:
    case 3792:
    case 3793:
    case 3794:
    case 3795:
    case 3796:
    case 3797:
    case 3798:
    case 3799:
    case 3800:
    case 3801:
    case 3802:
    case 3803:
    case 3804:
    case 3805:
    case 3806:
    case 3807:
    case 3808:
    case 3809:
    case 3810:
    case 3811:
    case 3812:
    case 3813:
    case 3814:
    case 3815:
    case 3816:
    case 3817:
    case 3818:
    case 3819:
    case 3820:
    case 3821:
    case 3822:
    case 3823:
    case 3824:
    case 3825:
    case 3826:
    case 3827:
    case 3828:
    case 3829:
    case 3830:
    case 3831:
    case 3832:
    case 3833:
    case 3834:
    case 3835:
    case 3836:
    case 3837:
    case 3838:
    case 3839:
    case 3840:
    case 3841:
    case 3842:
    case 3843:
    case 3844:
    case 3845:
    case 3846:
    case 3847:
    case 3848:
    case 3849:
    case 3850:
    case 3851:
    case 3852:
    case 3853:
    case 3854:
    case 3855:
    case 3856:
    case 3857:
    case 3858:
    case 3859:
    case 3860:
    case 3861:
    case 3862:
    case 3863:
    case 3864:
    case 3865:
    case 3866:
    case 3867:
    case 3868:
    case 3869:
    case 3870:
    case 3871:
    case 3872:
    case 3873:
    case 3874:
    case 3875:
    case 3876:
    case 3877:
    case 3878:
    case 3879:
    case 3880:
    case 3881:
    case 3882:
    case 3883:
    case 3884:
    case 3885:
    case 3886:
    case 3887:
    case 3888:
    case 3889:
    case 3890:
    case 3891:
    case 3892:
    case 3893:
    case 3894:
    case 3895:
    case 3896:
    case 3897:
    case 3898:
    case 3899:
    case 3900:
    case 3901:
    case 3902:
    case 3903:
    case 3904:
    case 3905:
    case 3906:
    case 3907:
    case 3908:
    case 3909:
    case 3910:
    case 3911:
    case 3912:
    case 3913:
    case 3914:
    case 3915:
    case 3916:
    case 3917:
    case 3918:
    case 3919:
    case 3920:
    case 3921:
    case 3922:
    case 3923:
    case 3924:
    case 3925:
    case 3926:
    case 3927:
    case 3928:
    case 3929:
    case 3930:
    case 3931:
    case 3932:
    case 3933:
    case 3934:
    case 3935:
    case 3936:
    case 3937:
    case 3938:
    case 3939:
    case 3940:
    case 3941:
    case 3942:
    case 3943:
    case 3944:
    case 3945:
    case 3946:
    case 3947:
    case 3948:
    case 3949:
    case 3950:
    case 3951:
    case 3952:
    case 3953:
    case 3954:
    case 3955:
    case 3956:
    case 3957:
    case 3958:
    case 3959:
    case 3960:
    case 3961:
    case 3962:
    case 3963:
    case 3964:
    case 3965:
    case 3966:
    case 3967:
    case 3968:
    case 3969:
    case 3970:
    case 3971:
    case 3972:
    case 3973:
    case 3974:
    case 3975:
    case 3976:
    case 3977:
    case 3978:
    case 3979:
    case 3980:
    case 3981:
    case 3982:
    case 3983:
    case 3984:
    case 3985:
    case 3986:
    case 3987:
    case 3988:
    case 3989:
    case 3990:
    case 3991:
    case 3992:
    case 3993:
    case 3994:
    case 3995:
    case 3996:
    case 3997:
    case 3998:
    case 3999:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
    case 4016:
    case 4017:
    case 4018:
    case 4019:
    case 4020:
    case 4021:
    case 4022:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4030:
    case 4031:
    case 4032:
    case 4033:
    case 4034:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
    case 4039:
    case 4040:
    case 4041:
    case 4042:
    case 4043:
    case 4044:
    case 4045:
    case 4046:
    case 4047:
    case 4048:
    case 4049:
    case 4050:
    case 4051:
    case 4052:
    case 4053:
    case 4054:
    case 4055:
    case 4056:
    case 4057:
    case 4058:
    case 4059:
    case 4060:
    case 4061:
    case 4062:
    case 4063:
    case 4064:
    case 4065:
    case 4066:
    case 4067:
    case 4068:
    case 4069:
    case 4070:
    case 4071:
    case 4072:
    case 4073:
    case 4074:
    case 4075:
    case 4076:
    case 4077:
    case 4078:
    case 4079:
    case 4080:
    case 4081:
    case 4082:
    case 4083:
    case 4084:
    case 4085:
    case 4086:
    case 4087:
    case 4088:
    case 4089:
    case 4090:
    case 4091:
    case 4092:
    case 4093:
    case 4094:
    case 4095:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4107:
    case 4108:
    case 4109:
    case 4110:
    case 4111:
    case 4112:
    case 4113:
    case 4114:
    case 4115:
    case 4116:
    case 4117:
    case 4118:
    case 4119:
    case 4120:
    case 4121:
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4128:
    case 4129:
    case 4130:
    case 4131:
    case 4132:
    case 4133:
    case 4134:
    case 4135:
    case 4136:
    case 4137:
    case 4138:
    case 4139:
    case 4140:
    case 4141:
    case 4142:
    case 4143:
    case 4144:
    case 4145:
    case 4146:
    case 4147:
    case 4148:
    case 4149:
    case 4150:
    case 4151:
    case 4152:
    case 4153:
    case 4154:
    case 4155:
    case 4156:
    case 4157:
    case 4158:
    case 4159:
    case 4160:
    case 4161:
    case 4162:
    case 4163:
    case 4164:
    case 4165:
    case 4166:
    case 4167:
    case 4168:
    case 4169:
    case 4170:
    case 4171:
    case 4172:
    case 4173:
    case 4174:
    case 4175:
    case 4176:
    case 4177:
    case 4178:
    case 4179:
    case 4180:
    case 4181:
    case 4182:
    case 4183:
    case 4184:
    case 4185:
    case 4186:
    case 4187:
    case 4188:
    case 4189:
    case 4190:
    case 4191:
    case 4192:
    case 4193:
    case 4194:
    case 4195:
    case 4196:
    case 4197:
    case 4198:
    case 4199:
    case 4200:
    case 4201:
    case 4202:
    case 4203:
    case 4204:
    case 4205:
    case 4206:
    case 4207:
    case 4208:
    case 4209:
    case 4210:
    case 4211:
    case 4212:
    case 4213:
    case 4214:
    case 4215:
    case 4216:
    case 4217:
    case 4218:
    case 4219:
    case 4220:
    case 4221:
    case 4222:
    case 4223:
    case 4224:
    case 4225:
    case 4226:
    case 4227:
    case 4228:
    case 4229:
    case 4230:
    case 4231:
    case 4232:
    case 4233:
    case 4234:
    case 4235:
    case 4236:
    case 4237:
    case 4238:
    case 4239:
    case 4240:
    case 4241:
    case 4242:
    case 4243:
    case 4244:
    case 4245:
    case 4246:
    case 4247:
    case 4248:
    case 4249:
    case 4250:
    case 4251:
    case 4252:
    case 4253:
    case 4254:
    case 4255:
    case 4256:
    case 4257:
    case 4258:
    case 4259:
    case 4260:
    case 4261:
    case 4262:
    case 4263:
    case 4264:
    case 4265:
    case 4266:
    case 4267:
    case 4268:
    case 4269:
    case 4270:
    case 4271:
    case 4272:
    case 4273:
    case 4274:
    case 4275:
    case 4276:
    case 4277:
    case 4278:
    case 4279:
    case 4280:
    case 4281:
    case 4282:
    case 4283:
    case 4284:
    case 4285:
    case 4286:
    case 4287:
    case 4288:
    case 4289:
    case 4290:
    case 4291:
    case 4292:
    case 4293:
    case 4294:
    case 4295:
    case 4296:
    case 4297:
    case 4298:
    case 4299:
    case 4300:
    case 4301:
    case 4302:
    case 4303:
    case 4304:
    case 4305:
    case 4306:
    case 4307:
    case 4308:
    case 4309:
    case 4310:
    case 4311:
    case 4312:
    case 4313:
    case 4314:
    case 4315:
    case 4316:
    case 4317:
    case 4318:
    case 4319:
    case 4320:
    case 4321:
    case 4322:
    case 4323:
    case 4324:
    case 4325:
    case 4326:
    case 4327:
    case 4328:
    case 4329:
    case 4330:
    case 4331:
    case 4332:
    case 4333:
    case 4334:
    case 4335:
    case 4336:
    case 4337:
    case 4338:
    case 4339:
    case 4340:
    case 4341:
    case 4342:
    case 4343:
    case 4344:
    case 4345:
    case 4346:
    case 4347:
    case 4348:
    case 4349:
    case 4350:
    case 4351:
    case 4352:
    case 4353:
    case 4354:
    case 4355:
    case 4356:
    case 4357:
    case 4358:
    case 4359:
    case 4360:
    case 4361:
    case 4362:
    case 4363:
    case 4364:
    case 4365:
    case 4366:
    case 4367:
    case 4368:
    case 4369:
    case 4370:
    case 4371:
    case 4372:
    case 4373:
    case 4374:
    case 4375:
    case 4376:
    case 4377:
    case 4378:
    case 4379:
    case 4380:
    case 4381:
    case 4382:
    case 4383:
    case 4384:
    case 4385:
    case 4386:
    case 4387:
    case 4388:
    case 4389:
    case 4390:
    case 4391:
    case 4392:
    case 4393:
    case 4394:
    case 4395:
    case 4396:
    case 4397:
    case 4398:
    case 4399:
    case 4400:
    case 4401:
    case 4402:
    case 4403:
    case 4404:
    case 4405:
    case 4406:
    case 4407:
    case 4408:
    case 4409:
    case 4410:
    case 4411:
    case 4412:
    case 4413:
    case 4414:
    case 4415:
    case 4416:
    case 4417:
    case 4418:
    case 4419:
    case 4420:
    case 4421:
    case 4422:
    case 4423:
    case 4424:
    case 4425:
    case 4426:
    case 4427:
    case 4428:
    case 4429:
    case 4430:
    case 4431:
    case 4432:
    case 4433:
    case 4434:
    case 4435:
    case 4436:
    case 4437:
    case 4438:
    case 4439:
    case 4440:
    case 4441:
    case 4442:
    case 4443:
    case 4444:
    case 4445:
    case 4446:
    case 4447:
    case 4448:
    case 4449:
    case 4450:
    case 4451:
    case 4452:
    case 4453:
    case 4454:
    case 4455:
    case 4456:
    case 4457:
    case 4458:
    case 4459:
    case 4460:
    case 4461:
    case 4462:
    case 4463:
    case 4464:
    case 4465:
    case 4466:
    case 4467:
    case 4468:
    case 4469:
    case 4470:
    case 4471:
    case 4472:
    case 4473:
    case 4474:
    case 4475:
    case 4476:
    case 4477:
    case 4478:
    case 4479:
    case 4480:
    case 4481:
    case 4482:
    case 4483:
    case 4484:
    case 4485:
    case 4486:
    case 4487:
    case 4488:
    case 4489:
    case 4490:
    case 4491:
    case 4492:
    case 4493:
    case 4494:
    case 4495:
    case 4496:
    case 4497:
    case 4498:
    case 4499:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4528:
    case 4529:
    case 4530:
    case 4531:
    case 4532:
    case 4533:
    case 4534:
    case 4535:
    case 4536:
    case 4537:
    case 4538:
    case 4539:
    case 4540:
    case 4541:
    case 4542:
    case 4543:
    case 4544:
    case 4545:
    case 4546:
    case 4547:
    case 4548:
    case 4549:
    case 4550:
    case 4551:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4560:
    case 4561:
    case 4562:
    case 4563:
    case 4564:
    case 4565:
    case 4566:
    case 4567:
    case 4568:
    case 4569:
    case 4570:
    case 4571:
    case 4572:
    case 4573:
    case 4574:
    case 4575:
    case 4576:
    case 4577:
    case 4578:
    case 4579:
    case 4580:
    case 4581:
    case 4582:
    case 4583:
    case 4584:
    case 4585:
    case 4586:
    case 4587:
    case 4588:
    case 4589:
    case 4590:
    case 4591:
    case 4592:
    case 4593:
    case 4594:
    case 4595:
    case 4596:
    case 4597:
    case 4598:
    case 4599:
    case 4600:
    case 4601:
    case 4602:
    case 4603:
    case 4604:
    case 4605:
    case 4606:
    case 4607:
    case 4608:
    case 4609:
    case 4610:
    case 4611:
    case 4612:
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
    case 4618:
    case 4619:
    case 4620:
    case 4621:
    case 4622:
    case 4623:
    case 4624:
    case 4625:
    case 4626:
    case 4627:
    case 4628:
    case 4629:
    case 4630:
    case 4631:
    case 4632:
    case 4633:
    case 4634:
    case 4635:
    case 4636:
    case 4637:
    case 4638:
    case 4639:
    case 4640:
    case 4641:
    case 4642:
    case 4643:
    case 4644:
    case 4645:
    case 4646:
    case 4647:
    case 4648:
    case 4649:
    case 4650:
    case 4651:
    case 4652:
    case 4653:
    case 4654:
    case 4655:
    case 4656:
    case 4657:
    case 4658:
    case 4659:
    case 4660:
    case 4661:
    case 4662:
    case 4663:
    case 4664:
    case 4665:
    case 4666:
    case 4667:
    case 4668:
    case 4669:
    case 4670:
    case 4671:
    case 4672:
    case 4673:
    case 4674:
    case 4675:
    case 4676:
    case 4677:
    case 4678:
    case 4679:
    case 4680:
    case 4681:
    case 4682:
    case 4683:
    case 4684:
    case 4685:
    case 4686:
    case 4687:
    case 4688:
    case 4689:
    case 4690:
    case 4691:
    case 4692:
    case 4693:
    case 4694:
    case 4695:
    case 4696:
    case 4697:
    case 4698:
    case 4699:
    case 4700:
    case 4701:
    case 4702:
    case 4703:
    case 4704:
    case 4705:
    case 4706:
    case 4707:
    case 4708:
    case 4709:
    case 4710:
    case 4711:
    case 4712:
    case 4713:
    case 4714:
    case 4715:
    case 4716:
    case 4717:
    case 4718:
    case 4719:
    case 4720:
    case 4721:
    case 4722:
    case 4723:
    case 4724:
    case 4725:
    case 4726:
    case 4727:
    case 4728:
    case 4729:
    case 4730:
    case 4731:
    case 4732:
    case 4733:
    case 4734:
    case 10095:
    case 10096:
    case 10097:
    case 10098:
    case 10099:
    case 10100:
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10111:
    case 10112:
    case 10113:
    case 10114:
    case 10115:
    case 10116:
    case 10117:
    case 10118:
    case 10119:
    case 10120:
    case 10121:
    case 10122:
    case 10123:
    case 10124:
    case 10125:
    case 10126:
    case 10127:
    case 10128:
    case 10129:
    case 10130:
    case 10131:
    case 10132:
    case 10133:
    case 10134:
    case 10135:
    case 10136:
    case 10137:
    case 10138:
    case 10139:
    case 10140:
    case 10141:
    case 10142:
    case 10143:
    case 10144:
    case 10145:
    case 10146:
    case 10147:
    case 10148:
    case 10149:
    case 10150:
    case 10151:
    case 10152:
    case 10153:
    case 10154:
    case 10155:
    case 10156:
    case 10157:
    case 10158:
    case 10159:
    case 10160:
    case 10161:
    case 10162:
    case 10163:
    case 10164:
    case 10165:
    case 10166:
    case 10167:
    case 10168:
    case 10169:
    case 10170:
    case 10171:
    case 10172:
    case 10173:
    case 10174:
    case 10175:
    case 10176:
    case 10177:
    case 10178:
    case 10179:
    case 10180:
    case 10181:
    case 10182:
    case 10183:
    case 10184:
    case 10185:
    case 10186:
    case 10187:
    case 10188:
    case 10189:
    case 10190:
    case 10191:
    case 10192:
    case 10193:
    case 10194:
    case 10195:
    case 10196:
    case 10197:
    case 10198:
    case 10199:
    case 10200:
    case 10201:
    case 10202:
    case 10203:
    case 10204:
    case 10205:
    case 10206:
    case 10207:
    case 10208:
    case 10209:
    case 10210:
    case 10211:
    case 10212:
    case 10213:
    case 10214:
    case 10215:
    case 10216:
    case 10217:
    case 10218:
    case 10219:
    case 10220:
    case 10221:
    case 10222:
    case 10223:
    case 10224:
    case 10225:
    case 10226:
    case 10227:
    case 10228:
    case 10229:
    case 10230:
    case 10231:
    case 10232:
    case 10233:
    case 10234:
    case 10235:
    case 10236:
    case 10237:
    case 10238:
    case 10239:
    case 10240:
    case 10241:
    case 10242:
    case 10243:
    case 10244:
    case 10245:
    case 10246:
    case 10247:
    case 10248:
    case 10249:
    case 10250:
    case 10251:
    case 10252:
    case 10253:
    case 10254:
    case 10255:
    case 10256:
    case 10257:
    case 10258:
    case 10259:
    case 10260:
    case 10261:
    case 10262:
    case 10263:
    case 10264:
    case 10265:
    case 10266:
    case 10267:
    case 10268:
    case 10269:
    case 10270:
    case 10271:
    case 10272:
    case 10273:
    case 10274:
    case 10275:
    case 10276:
    case 10277:
    case 10278:
    case 10279:
    case 10280:
    case 10281:
    case 10282:
    case 10283:
    case 10284:
    case 10285:
    case 10286:
    case 10287:
    case 10288:
    case 10289:
    case 10290:
    case 10291:
    case 10292:
    case 10293:
    case 10294:
    case 10295:
    case 10296:
    case 10297:
    case 10298:
    case 10299:
    case 10300:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
    case 10308:
    case 10309:
    case 10310:
    case 10311:
    case 10312:
    case 10313:
    case 10314:
    case 10315:
    case 10316:
    case 10317:
    case 10318:
    case 10319:
    case 10320:
    case 10321:
    case 10322:
    case 10323:
    case 10324:
    case 10325:
    case 10326:
    case 10327:
    case 10328:
    case 10329:
    case 10330:
    case 10331:
    case 10332:
    case 10333:
    case 10334:
    case 10335:
    case 10336:
    case 10337:
    case 10338:
    case 10339:
    case 10340:
    case 10341:
    case 10342:
    case 10343:
    case 10344:
    case 10345:
    case 10346:
    case 10347:
    case 10348:
    case 10349:
    case 10350:
    case 10351:
    case 10352:
    case 10353:
    case 10354:
    case 10355:
    case 10356:
    case 10357:
    case 10358:
    case 10359:
    case 10360:
    case 10361:
    case 10362:
    case 10363:
    case 10364:
    case 10365:
    case 10366:
    case 10367:
    case 10368:
    case 10369:
    case 10370:
    case 10371:
    case 10372:
    case 10373:
    case 10374:
    case 10375:
    case 10376:
    case 10377:
    case 10378:
    case 10379:
    case 10380:
    case 10381:
    case 10382:
    case 10383:
    case 10384:
    case 10385:
    case 10386:
    case 10387:
    case 10388:
    case 10389:
    case 10390:
    case 10391:
    case 10392:
    case 10393:
    case 10394:
    case 10395:
    case 10396:
    case 10397:
    case 10398:
    case 10399:
    case 10400:
    case 10401:
    case 10402:
    case 10403:
    case 10404:
    case 10405:
    case 10406:
    case 11575:
    case 11576:
    case 11974:
    case 11975:
    case 11976:
    case 11977:
    case 11978:
    case 11979:
    case 11980:
    case 11981:
    case 11982:
    case 11983:
    case 11984:
    case 11985:
    case 11986:
    case 11987:
    case 11988:
    case 11989:
    case 11990:
    case 11991:
    case 11992:
    case 11993:
    case 11994:
    case 11995:
    case 11996:
    case 11997:
    case 11998:
    case 11999:
    case 12000:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12013:
    case 12014:
    case 12015:
    case 12016:
    case 12017:
    case 12018:
    case 12019:
    case 12020:
    case 12021:
    case 12023:
    case 12024:
    case 12025:
    case 12026:
    case 12027:
    case 12028:
    case 12029:
    case 12030:
    case 12031:
    case 12032:
    case 12033:
    case 12034:
    case 12035:
    case 12036:
    case 12037:
    case 12038:
    case 12039:
    case 12040:
    case 12041:
    case 12042:
    case 12043:
    case 12044:
    case 12045:
    case 12046:
    case 12047:
    case 12048:
    case 12049:
    case 12050:
    case 12051:
    case 12052:
    case 12053:
    case 12054:
    case 12055:
    case 12056:
    case 12057:
    case 12058:
    case 12059:
    case 12060:
    case 12061:
    case 12062:
    case 12063:
    case 12064:
    case 12065:
    case 12066:
    case 12067:
    case 12068:
    case 12069:
    case 12070:
    case 12071:
    case 12072:
    case 12073:
    case 12074:
    case 12075:
    case 12076:
    case 12077:
    case 12078:
    case 12079:
    case 12080:
    case 12081:
    case 12082:
    case 12083:
    case 12084:
    case 12085:
    case 12086:
    case 12087:
    case 12088:
    case 12089:
    case 12090:
    case 12091:
    case 12092:
    case 12093:
    case 12094:
    case 12095:
    case 12096:
    case 12097:
    case 12098:
    case 12099:
    case 12100:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12109:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12115:
    case 12116:
    case 12117:
    case 12118:
    case 12119:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12125:
    case 12126:
    case 12127:
    case 12128:
    case 12129:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12135:
    case 12136:
    case 12137:
    case 12138:
    case 12139:
    case 12140:
    case 12141:
    case 12142:
    case 12143:
    case 12144:
    case 12145:
    case 12157:
    case 12158:
    case 12159:
    case 12160:
    case 12161:
    case 12162:
    case 12163:
    case 12164:
    case 12165:
    case 12166:
    case 12167:
    case 12168:
    case 12169:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12174:
    case 12175:
    case 12176:
    case 12177:
    case 12178:
    case 12179:
    case 12180:
    case 12181:
    case 12182:
    case 12183:
    case 12184:
    case 12185:
    case 12186:
    case 12187:
    case 12188:
    case 12189:
    case 12190:
    case 12191:
    case 12192:
    case 12193:
    case 12194:
    case 12195:
    case 12196:
    case 12197:
    case 12198:
    case 12199:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12205:
    case 12206:
    case 12207:
    case 12210:
    case 12211:
    case 12212:
    case 12213:
    case 12214:
    case 12884:
    case 12885:
    case 12886:
    case 12887:
    case 12888:
    case 12889:
    case 12890:
    case 12891:
    case 12892:
    case 12893:
    case 12894:
    case 12895:
    case 12896:
    case 12897:
    case 12898:
    case 12899:
    case 12900:
    case 12901:
    case 12902:
    case 12903:
    case 12904:
    case 12905:
    case 12906:
    case 12907:
    case 12908:
    case 12909:
    case 12910:
    case 12911:
    case 12912:
    case 12913:
    case 12914:
    case 12915:
    case 12916:
    case 12917:
    case 12918:
    case 12919:
    case 12920:
    case 12921:
    case 12922:
    case 12923:
    case 12924:
    case 12925:
    case 12926:
    case 12927:
    case 12928:
    case 12929:
    case 12930:
    case 12931:
    case 12932:
    case 12933:
    case 12934:
    case 12935:
    case 12936:
    case 12937:
    case 12938:
    case 12939:
    case 12940:
    case 12941:
    case 12942:
    case 12943:
    case 12944:
    case 12945:
    case 12946:
    case 12947:
    case 12948:
    case 12949:
    case 12950:
    case 12951:
    case 12952:
    case 12953:
    case 12954:
    case 12955:
    case 12956:
    case 12957:
    case 12958:
    case 12959:
    case 12960:
    case 12961:
    case 12962:
    case 12963:
    case 12964:
    case 12965:
    case 12966:
    case 12967:
    case 12968:
    case 12969:
    case 12970:
    case 12971:
    case 12972:
    case 12973:
    case 12974:
    case 12975:
    case 12976:
    case 12977:
    case 12978:
    case 12979:
    case 12980:
    case 12981:
    case 13356:
    case 13357:
    case 13406:
    case 13407:
    case 13408:
    case 13409:
    case 13410:
    case 13411:
    case 13412:
    case 13413:
    case 13414:
    case 13415:
    case 13416:
    case 13417:
    case 13418:
    case 13419:
    case 13420:
    case 13421:
    case 13422:
    case 13423:
    case 13424:
    case 13431:
    case 13432:
    case 13433:
    case 13434:
    case 13435:
    case 13436:
    case 13437:
    case 13438:
    case 13439:
    case 13440:
    case 13441:
    case 13442:
    case 13443:
    case 13444:
    case 13445:
    case 13446:
    case 13447:
    case 13448:
    case 13449:
    case 13450:
    case 13451:
    case 13452:
    case 13453:
    case 13454:
    case 13455:
    case 13456:
    case 13457:
    case 13458:
    case 13459:
    case 13460:
    case 13461:
    case 13462:
    case 13463:
    case 13464:
    case 13465:
    case 13466:
    case 13467:
    case 13468:
    case 13469:
    case 13470:
    case 13471:
    case 13472:
    case 13473:
    case 13474:
    case 13475:
    case 13476:
    case 13477:
    case 13478:
    case 13479:
      return v9;
    case 378:
    case 380:
    case 382:
    case 384:
      v838 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)v838 == 2)
        goto LABEL_1192;
      v840 = *((_QWORD *)a2 + 1);
      v1375 = *(void **)(v838 + 8);
      v839 = v1375;
      v1376 = 0x8100000002;
      v1377 = v840;
      v841 = sub_1C4926708(a3, (unint64_t)&v1375, 1);
      v842 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v843 = *(_OWORD *)v841;
      *(_QWORD *)(v842 + 16) = *(_QWORD *)(v841 + 16);
      *(_OWORD *)v842 = v843;
      ++*(_DWORD *)(a3 + 8);
      v844 = *((_QWORD *)a2 + 1);
      v1375 = v839;
      v1376 = 0x8200000002;
      v1377 = v844;
      v845 = sub_1C4926708(a3, (unint64_t)&v1375, 1);
      v846 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v847 = *(_OWORD *)v845;
      *(_QWORD *)(v846 + 16) = *(_QWORD *)(v845 + 16);
      *(_OWORD *)v846 = v847;
      ++*(_DWORD *)(a3 + 8);
      v848 = *((_QWORD *)a2 + 1);
      v1375 = v839;
      v849 = 0x8300000003;
      goto LABEL_1470;
    case 379:
    case 381:
    case 383:
    case 385:
      sub_1C4B129EC((uint64_t)a2, a3);
      goto LABEL_1194;
    case 388:
    case 390:
    case 394:
    case 396:
      v838 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)v838 == 2)
      {
LABEL_1192:
        v851 = *(unsigned int *)(v838 + 8);
      }
      else
      {
        v1054 = *((_QWORD *)a2 + 1);
        v1375 = *(void **)(v838 + 8);
        v1053 = v1375;
        v1376 = 0x8700000002;
        v1377 = v1054;
        v1055 = sub_1C4926708(a3, (unint64_t)&v1375, 1);
        v1056 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
        v1057 = *(_OWORD *)v1055;
        *(_QWORD *)(v1056 + 16) = *(_QWORD *)(v1055 + 16);
        *(_OWORD *)v1056 = v1057;
        ++*(_DWORD *)(a3 + 8);
        v1058 = *((_QWORD *)a2 + 1);
        v1375 = v1053;
        v1376 = 0x8800000002;
        v1377 = v1058;
        v1059 = sub_1C4926708(a3, (unint64_t)&v1375, 1);
        v1060 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
        v1061 = *(_OWORD *)v1059;
        *(_QWORD *)(v1060 + 16) = *(_QWORD *)(v1059 + 16);
        *(_OWORD *)v1060 = v1061;
        ++*(_DWORD *)(a3 + 8);
        v848 = *((_QWORD *)a2 + 1);
        v1375 = v1053;
        v849 = 0x8900000003;
LABEL_1470:
        v1376 = v849;
        v1377 = v848;
        v1062 = sub_1C4926708(a3, (unint64_t)&v1375, 1);
        v851 = 0;
        v1063 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
        v1064 = *(_OWORD *)v1062;
        *(_QWORD *)(v1063 + 16) = *(_QWORD *)(v1062 + 16);
        *(_OWORD *)v1063 = v1064;
        ++*(_DWORD *)(a3 + 8);
        v838 = *((_QWORD *)a2 + 2);
      }
      v1065 = ((_DWORD)v851 << 8) & 0xFE00;
      v1066 = v851 & 0x100010001000100;
      v1067 = (v851 >> 8) & 0xFE;
      v1068 = (unint64_t)(*(_DWORD *)(v838 + 24) & 3) << 29;
      v1069 = v1066 | v1065;
      goto LABEL_1562;
    case 389:
    case 391:
    case 395:
    case 397:
      sub_1C4B12C24((uint64_t)a2, a3);
LABEL_1194:
      v89 = ((unint64_t)v850 << 16) & 0x100010001000100 | (v850 << 24) & 0xFE000000 | (v850 << 8) & 0xFE0000 | ((unint64_t)v850 >> 8) & 0xFF00 | ((unint64_t)v850 >> 24) & 0xFE | ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 24) & 3) << 45);
      goto LABEL_112;
    case 400:
    case 401:
    case 410:
    case 411:
    case 412:
    case 413:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 454:
    case 455:
    case 749:
    case 750:
    case 759:
    case 760:
    case 761:
    case 762:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 803:
    case 804:
    case 11779:
    case 11780:
    case 11789:
    case 11790:
    case 11791:
    case 11792:
    case 11801:
    case 11802:
    case 11803:
    case 11804:
    case 11805:
    case 11806:
    case 11807:
    case 11808:
    case 11817:
    case 11818:
    case 11819:
    case 11820:
    case 11821:
    case 11822:
    case 11823:
    case 11824:
    case 11841:
    case 11842:
    case 11867:
    case 11868:
    case 11869:
    case 11870:
    case 11876:
    case 11877:
    case 11886:
    case 11887:
    case 11888:
    case 11889:
    case 11898:
    case 11899:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11914:
    case 11915:
    case 11916:
    case 11917:
    case 11918:
    case 11919:
    case 11920:
    case 11921:
    case 11938:
    case 11939:
    case 11948:
    case 11949:
    case 11950:
    case 11951:
      v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v51 = *((_QWORD *)a2 + 2);
      v54 = *(unsigned __int8 *)(v51 + 32);
      v52 = v51 + 32;
      v53 = v54;
      if (v54 == 1)
      {
        LOBYTE(v55) = sub_1C4B12E5C(a1, v52, *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v53 == 2)
      {
        v55 = *((_DWORD *)v50 + 10);
      }
      else
      {
        v152 = *((_QWORD *)v50 + 5);
        if (*(_BYTE *)v152 == 4)
          v55 = *(_DWORD *)(*(_QWORD *)(v152 + 24) + 16) | 0x2000;
        else
          LOBYTE(v55) = 0;
      }
      v325 = (unint64_t)(v55 & 1) << 40;
      v326 = *v50;
      if (v326 == 1)
      {
        v327 = sub_1C4B12E5C(v8, (uint64_t)v50, *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v326 == 2)
      {
        v327 = *((unsigned int *)v50 + 2);
      }
      else
      {
        v328 = *((_QWORD *)v50 + 1);
        if (*(_BYTE *)v328 == 4)
          v327 = *(_DWORD *)(*(_QWORD *)(v328 + 24) + 16) | 0x2000u;
        else
          v327 = 0;
      }
      v329 = (v327 << 25) & 0x600000000 | v325 | ((_DWORD)v327 << 24);
      v330 = v50[16];
      if (v330 == 1)
      {
        v331 = sub_1C4B12E5C(v8, (uint64_t)(v50 + 16), *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v330 == 2)
      {
        v331 = *((_DWORD *)v50 + 6);
      }
      else
      {
        v332 = *((_QWORD *)v50 + 3);
        if (*(_BYTE *)v332 == 4)
          v331 = *(_DWORD *)(*(_QWORD *)(v332 + 24) + 16) | 0x2000;
        else
          v331 = 0;
      }
      v333 = (v331 << 9) & 0x3E0000;
      goto LABEL_810;
    case 402:
    case 403:
    case 406:
    case 407:
    case 414:
    case 415:
    case 418:
    case 419:
    case 430:
    case 431:
    case 434:
    case 435:
    case 446:
    case 447:
    case 450:
    case 451:
    case 456:
    case 457:
    case 460:
    case 461:
    case 751:
    case 752:
    case 755:
    case 756:
    case 763:
    case 764:
    case 767:
    case 768:
    case 779:
    case 780:
    case 783:
    case 784:
    case 795:
    case 796:
    case 799:
    case 800:
    case 805:
    case 806:
    case 809:
    case 810:
    case 11781:
    case 11782:
    case 11785:
    case 11786:
    case 11793:
    case 11794:
    case 11797:
    case 11798:
    case 11809:
    case 11810:
    case 11813:
    case 11814:
    case 11825:
    case 11826:
    case 11829:
    case 11830:
    case 11833:
    case 11834:
    case 11837:
    case 11838:
    case 11843:
    case 11844:
    case 11847:
    case 11848:
    case 11878:
    case 11879:
    case 11882:
    case 11883:
    case 11890:
    case 11891:
    case 11894:
    case 11895:
    case 11906:
    case 11907:
    case 11910:
    case 11911:
    case 11922:
    case 11923:
    case 11926:
    case 11927:
    case 11930:
    case 11931:
    case 11934:
    case 11935:
    case 11940:
    case 11941:
    case 11944:
    case 11945:
    case 11952:
    case 11953:
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v56 = *v11;
      if (v56 == 1)
      {
        v57 = sub_1C4B12E5C(a1, (uint64_t)v11, *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v56 == 2)
      {
        v57 = *((_DWORD *)v11 + 2);
      }
      else
      {
        v183 = *((_QWORD *)v11 + 1);
        if (*(_BYTE *)v183 == 4)
          v57 = *(_DWORD *)(*(_QWORD *)(v183 + 24) + 16) | 0x2000;
        else
          v57 = 0;
      }
      v344 = (v57 << 14) & 0xF00000 | ((unint64_t)(v57 & 0x3F) << 40);
      v345 = v11[16];
      if (v345 == 1)
      {
        v346 = sub_1C4B12E5C(v8, (uint64_t)(v11 + 16), *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v345 == 2)
      {
        v346 = *((_DWORD *)v11 + 6);
      }
      else
      {
        v347 = *((_QWORD *)v11 + 3);
        if (*(_BYTE *)v347 == 4)
          v346 = *(_DWORD *)(*(_QWORD *)(v347 + 24) + 16) | 0x2000;
        else
          v346 = 0;
      }
      v357 = (v346 << 24);
      v358 = (unsigned __int16)v346 & 0xFF00 | v344;
      goto LABEL_436;
    case 404:
    case 405:
    case 408:
    case 409:
    case 416:
    case 417:
    case 420:
    case 421:
    case 432:
    case 433:
    case 436:
    case 437:
    case 448:
    case 449:
    case 452:
    case 453:
    case 458:
    case 459:
    case 462:
    case 463:
    case 753:
    case 754:
    case 757:
    case 758:
    case 765:
    case 766:
    case 769:
    case 770:
    case 781:
    case 782:
    case 785:
    case 786:
    case 797:
    case 798:
    case 801:
    case 802:
    case 807:
    case 808:
    case 811:
    case 812:
    case 11783:
    case 11784:
    case 11787:
    case 11788:
    case 11795:
    case 11796:
    case 11799:
    case 11800:
    case 11811:
    case 11812:
    case 11815:
    case 11816:
    case 11827:
    case 11828:
    case 11831:
    case 11832:
    case 11835:
    case 11836:
    case 11839:
    case 11840:
    case 11845:
    case 11846:
    case 11849:
    case 11850:
    case 11880:
    case 11881:
    case 11884:
    case 11885:
    case 11892:
    case 11893:
    case 11896:
    case 11897:
    case 11908:
    case 11909:
    case 11912:
    case 11913:
    case 11924:
    case 11925:
    case 11928:
    case 11929:
    case 11932:
    case 11933:
    case 11936:
    case 11937:
    case 11942:
    case 11943:
    case 11946:
    case 11947:
    case 11954:
    case 11955:
      v58 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v59 = *v58;
      if (v59 == 1)
      {
        v60 = sub_1C4B12E5C(a1, (uint64_t)v58, *(_QWORD *)(a4 + 192), 0);
        v58 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v59 == 2)
      {
        v60 = *((_DWORD *)v58 + 2);
      }
      else
      {
        v184 = *((_QWORD *)v58 + 1);
        if (*(_BYTE *)v184 == 4)
          v60 = *(_DWORD *)(*(_QWORD *)(v184 + 24) + 16) | 0x2000;
        else
          v60 = 0;
      }
      v348 = v60 << 14;
      v1357 = v8;
      if (v58[16] == 1)
      {
        v349 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 104) + 2 * *((unsigned int *)v58 + 6));
      }
      else
      {
        v350 = *((_QWORD *)v58 + 3);
        if (v350)
          v351 = v350 - 8;
        else
          v351 = 0;
        v349 = (*(_QWORD *)(*(_QWORD *)(v351 + 32) + 16) / 2) | 0x2000;
      }
      v352 = (_DWORD)v349 << 10;
      v353 = v349 >> 4;
      v354 = v58[32];
      v1365 = a4;
      if (v354 == 1)
      {
        v355 = sub_1C4B12E5C(v1357, (uint64_t)(v58 + 32), *(_QWORD *)(a4 + 192), 0);
        v58 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v354 == 2)
      {
        v355 = *((_DWORD *)v58 + 10);
      }
      else
      {
        v356 = *((_QWORD *)v58 + 5);
        if (*(_BYTE *)v356 == 4)
          v355 = *(_DWORD *)(*(_QWORD *)(v356 + 24) + 16) | 0x2000;
        else
          v355 = 0;
      }
      v366 = (unint64_t)(v60 & 0x3F) << 40;
      v367 = *(_QWORD *)&v348 & 0xF00000;
      v368 = (v349 << 44) & 0x200000000000000;
      v369 = (v349 & 0x7F) << 33;
      v370 = *(_QWORD *)&v352 & 0xE0000;
      v371 = v353 & 0xC0;
      v372 = (v355 << 24);
      v373 = (unsigned __int16)v355 & 0xFF00;
      v374 = v58[48];
      if (v374 == 1)
      {
        LOBYTE(v375) = sub_1C4B12E5C(v1357, (uint64_t)(v58 + 48), *(_QWORD *)(v1365 + 192), 0);
        v58 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v374 == 2)
      {
        v375 = *((_DWORD *)v58 + 14);
      }
      else
      {
        v376 = *((_QWORD *)v58 + 7);
        if (*(_BYTE *)v376 == 4)
          v375 = *(_DWORD *)(*(_QWORD *)(v376 + 24) + 16) | 0x2000;
        else
          LOBYTE(v375) = 0;
      }
      v377 = v375 & 1;
      v378 = (*((_QWORD *)v58 + 9) & 3) << 61;
      v379 = v366 | v367 | v368 | v369;
      v380 = v370 | v371 | v373;
      goto LABEL_1238;
    case 468:
    case 469:
    case 470:
    case 471:
    case 476:
    case 477:
    case 478:
    case 479:
    case 484:
    case 485:
    case 486:
    case 487:
    case 492:
    case 493:
    case 494:
    case 495:
    case 500:
    case 501:
    case 502:
    case 503:
    case 508:
    case 509:
    case 510:
    case 511:
    case 516:
    case 517:
    case 518:
    case 519:
    case 524:
    case 525:
    case 526:
    case 527:
    case 532:
    case 533:
    case 534:
    case 535:
    case 540:
    case 541:
    case 542:
    case 543:
    case 548:
    case 549:
    case 550:
    case 551:
    case 556:
    case 557:
    case 558:
    case 559:
    case 564:
    case 565:
    case 566:
    case 567:
    case 572:
    case 573:
    case 574:
    case 575:
    case 580:
    case 581:
    case 582:
    case 583:
    case 588:
    case 589:
    case 590:
    case 591:
    case 596:
    case 597:
    case 598:
    case 599:
    case 604:
    case 605:
    case 606:
    case 607:
    case 612:
    case 613:
    case 614:
    case 615:
    case 620:
    case 621:
    case 622:
    case 623:
    case 628:
    case 629:
    case 630:
    case 631:
    case 636:
    case 637:
    case 638:
    case 639:
    case 644:
    case 645:
    case 646:
    case 647:
    case 652:
    case 653:
    case 654:
    case 655:
    case 660:
    case 661:
    case 662:
    case 663:
    case 668:
    case 669:
    case 670:
    case 671:
    case 676:
    case 677:
    case 678:
    case 679:
    case 684:
    case 685:
    case 686:
    case 687:
    case 692:
    case 693:
    case 694:
    case 695:
    case 700:
    case 701:
    case 702:
    case 703:
    case 708:
    case 709:
    case 710:
    case 711:
    case 716:
    case 717:
    case 718:
    case 719:
    case 724:
    case 725:
    case 726:
    case 727:
    case 732:
    case 733:
    case 734:
    case 735:
      v37 = *((_QWORD *)a2 + 2);
      v38 = v37 + 64;
      v39 = *(unsigned __int8 *)(v37 + 64);
      if (v39 == 1)
        goto LABEL_51;
      if (v39 == 2)
      {
        v40 = *(_DWORD *)(v37 + 72);
        goto LABEL_138;
      }
      v119 = *(_QWORD *)(v37 + 72);
      goto LABEL_135;
    case 472:
    case 473:
    case 474:
    case 475:
    case 480:
    case 481:
    case 482:
    case 483:
    case 488:
    case 489:
    case 490:
    case 491:
    case 496:
    case 497:
    case 498:
    case 499:
    case 504:
    case 505:
    case 506:
    case 507:
    case 512:
    case 513:
    case 514:
    case 515:
    case 520:
    case 521:
    case 522:
    case 523:
    case 528:
    case 529:
    case 530:
    case 531:
    case 536:
    case 537:
    case 538:
    case 539:
    case 544:
    case 545:
    case 546:
    case 547:
    case 552:
    case 553:
    case 554:
    case 555:
    case 560:
    case 561:
    case 562:
    case 563:
    case 568:
    case 569:
    case 570:
    case 571:
    case 576:
    case 577:
    case 578:
    case 579:
    case 584:
    case 585:
    case 586:
    case 587:
    case 592:
    case 593:
    case 594:
    case 595:
    case 600:
    case 601:
    case 602:
    case 603:
    case 608:
    case 609:
    case 610:
    case 611:
    case 616:
    case 617:
    case 618:
    case 619:
    case 624:
    case 625:
    case 626:
    case 627:
    case 632:
    case 633:
    case 634:
    case 635:
    case 640:
    case 641:
    case 642:
    case 643:
    case 648:
    case 649:
    case 650:
    case 651:
    case 656:
    case 657:
    case 658:
    case 659:
    case 664:
    case 665:
    case 666:
    case 667:
    case 672:
    case 673:
    case 674:
    case 675:
    case 680:
    case 681:
    case 682:
    case 683:
    case 688:
    case 689:
    case 690:
    case 691:
    case 696:
    case 697:
    case 698:
    case 699:
    case 704:
    case 705:
    case 706:
    case 707:
    case 712:
    case 713:
    case 714:
    case 715:
    case 720:
    case 721:
    case 722:
    case 723:
    case 728:
    case 729:
    case 730:
    case 731:
    case 736:
    case 737:
    case 738:
    case 739:
      v41 = *((_QWORD *)a2 + 2);
      v38 = v41 + 48;
      v42 = *(unsigned __int8 *)(v41 + 48);
      if (v42 == 1)
      {
LABEL_51:
        LOBYTE(v40) = sub_1C4B12E5C(a1, v38, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v42 == 2)
      {
        v40 = *(_DWORD *)(v41 + 56);
      }
      else
      {
        v119 = *(_QWORD *)(v41 + 56);
LABEL_135:
        if (*(_BYTE *)v119 == 4)
          v40 = *(_DWORD *)(*(_QWORD *)(v119 + 24) + 16) | 0x2000;
        else
          LOBYTE(v40) = 0;
      }
LABEL_138:
      v9 |= (unint64_t)(v40 & 3) << 54;
      return v9;
    case 746:
      v648 = a1;
      v1073 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1074 = *((_QWORD *)a2 + 2);
      v1077 = *(unsigned __int8 *)(v1074 + 80);
      v1075 = v1074 + 80;
      v1076 = v1077;
      if (v1077 == 1)
      {
        LOBYTE(v1078) = sub_1C4B12E5C(a1, v1075, *(_QWORD *)(a4 + 192), 0);
        v1073 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1076 == 2)
      {
        v1078 = *((_DWORD *)v1073 + 22);
      }
      else
      {
        v1157 = *((_QWORD *)v1073 + 11);
        if (*(_BYTE *)v1157 == 4)
          v1078 = *(_DWORD *)(*(_QWORD *)(v1157 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1078) = 0;
      }
      v1278 = (unint64_t)(v1078 & 1) << 40;
      v1279 = *v1073;
      if (v1279 == 1)
      {
        v1280 = sub_1C4B12E5C(v8, (uint64_t)v1073, *(_QWORD *)(a4 + 192), 0);
        v1073 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1279 == 2)
      {
        v1280 = *((unsigned int *)v1073 + 2);
      }
      else
      {
        v1281 = *((_QWORD *)v1073 + 1);
        if (*(_BYTE *)v1281 == 4)
          v1280 = *(_DWORD *)(*(_QWORD *)(v1281 + 24) + 16) | 0x2000u;
        else
          v1280 = 0;
      }
      v1319 = (v1280 << 25) & 0x600000000 | v1278;
      v1320 = ((_DWORD)v1280 << 24);
      v1321 = v1073[16];
      if (v1321 == 1)
      {
        v1322 = sub_1C4B12E5C(v648, (uint64_t)(v1073 + 16), *(_QWORD *)(a4 + 192), 0);
        v1073 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1321 == 2)
      {
        v1322 = *((_DWORD *)v1073 + 6);
      }
      else
      {
        v1323 = *((_QWORD *)v1073 + 3);
        if (*(_BYTE *)v1323 == 4)
          v1322 = *(_DWORD *)(*(_QWORD *)(v1323 + 24) + 16) | 0x2000;
        else
          v1322 = 0;
      }
      v1332 = v1319 | v1320;
      v1333 = (v1322 << 9) & 0x60000 | ((unint64_t)v1322 << 8);
      v1334 = v1073[48];
      v1335 = *((_QWORD *)v1073 + 13);
      if (v1334 == 1)
      {
        LOBYTE(v1336) = sub_1C4B12E5C(v648, (uint64_t)(v1073 + 48), *(_QWORD *)(a4 + 192), 0);
        v1073 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1334 == 2)
      {
        v1336 = *((_DWORD *)v1073 + 14);
      }
      else
      {
        v1337 = *((_QWORD *)v1073 + 7);
        if (*(_BYTE *)v1337 == 4)
          v1336 = *(_DWORD *)(*(_QWORD *)(v1337 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1336) = 0;
      }
      v730 = v1333 | v1332;
      v731 = (unint64_t)(v1335 & 3) << 45;
      v732 = (v1336 & 3) << 6;
      v733 = (uint64_t)(v1073 + 64);
      v1341 = v1073[64];
      if (v1341 == 1)
        goto LABEL_1901;
      if (v1341 == 2)
      {
        v735 = *((_DWORD *)v1073 + 18);
        goto LABEL_1902;
      }
      v736 = *((_QWORD *)v1073 + 9);
      goto LABEL_1026;
    case 747:
    case 748:
      v1013 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1014 = *((_QWORD *)a2 + 2);
      v1017 = *(unsigned __int8 *)(v1014 + 64);
      v1015 = v1014 + 64;
      v1016 = v1017;
      if (v1017 == 1)
      {
        v1018 = a4;
        v1019 = a1;
        LOBYTE(v1020) = sub_1C4B12E5C(a1, v1015, *(_QWORD *)(a4 + 192), 0);
        v1013 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else
      {
        v1018 = a4;
        v1019 = a1;
        if (v1016 == 2)
        {
          v1020 = *((_DWORD *)v1013 + 18);
        }
        else
        {
          v1146 = *((_QWORD *)v1013 + 9);
          if (*(_BYTE *)v1146 == 4)
            v1020 = *(_DWORD *)(*(_QWORD *)(v1146 + 24) + 16) | 0x2000;
          else
            LOBYTE(v1020) = 0;
        }
      }
      v1170 = (unint64_t)(v1020 & 1) << 40;
      v1171 = *v1013;
      if (v1171 == 1)
      {
        v1172 = sub_1C4B12E5C(v1019, (uint64_t)v1013, *(_QWORD *)(v1018 + 192), 0);
        v1013 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1171 == 2)
      {
        v1172 = *((_DWORD *)v1013 + 2);
      }
      else
      {
        v1173 = *((_QWORD *)v1013 + 1);
        if (*(_BYTE *)v1173 == 4)
          v1172 = *(_DWORD *)(*(_QWORD *)(v1173 + 24) + 16) | 0x2000;
        else
          v1172 = 0;
      }
      v1199 = v1013[16];
      v1200 = ((v1172 << 24) | v1170) & 0xFFFF9FFFFFFFFFFFLL | (v1172 >> 2) & 0xC0 | ((*((_QWORD *)v1013 + 11) & 3) << 45);
      if (v1199 == 1)
      {
        LOBYTE(v1201) = sub_1C4B12E5C(v1019, (uint64_t)(v1013 + 16), *(_QWORD *)(v1018 + 192), 0);
        v1013 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1199 == 2)
      {
        v1201 = *((_DWORD *)v1013 + 6);
      }
      else
      {
        v1202 = *((_QWORD *)v1013 + 3);
        if (*(_BYTE *)v1202 == 4)
          v1201 = *(_DWORD *)(*(_QWORD *)(v1202 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1201) = 0;
      }
      v1222 = v1200 | (16 * (v1201 & 1u));
      v1223 = v1013[32];
      if (v1223 == 1)
      {
        LOBYTE(v1224) = sub_1C4B12E5C(v1019, (uint64_t)(v1013 + 32), *(_QWORD *)(v1018 + 192), 0);
        v1013 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1223 == 2)
      {
        v1224 = *((_DWORD *)v1013 + 10);
      }
      else
      {
        v1225 = *((_QWORD *)v1013 + 5);
        if (*(_BYTE *)v1225 == 4)
          v1224 = *(_DWORD *)(*(_QWORD *)(v1225 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1224) = 0;
      }
      v1236 = v1222 | (8 * (v1224 & 1u));
      v1237 = v1013[48];
      if (v1237 == 1)
      {
        LOBYTE(v1238) = sub_1C4B12E5C(v1019, (uint64_t)(v1013 + 48), *(_QWORD *)(v1018 + 192), 0);
      }
      else if (v1237 == 2)
      {
        v1238 = *((_DWORD *)v1013 + 14);
      }
      else
      {
        v1239 = *((_QWORD *)v1013 + 7);
        if (*(_BYTE *)v1239 == 4)
          v1238 = *(_DWORD *)(*(_QWORD *)(v1239 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1238) = 0;
      }
      v1252 = 2 * (v1238 & 3u);
      goto LABEL_1906;
    case 813:
      v1079 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1080 = *v1079;
      if (v1080 == 1)
      {
        v1081 = sub_1C4B12E5C(a1, (uint64_t)v1079, *(_QWORD *)(a4 + 192), 0);
        v1079 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1080 == 2)
      {
        v1081 = *((unsigned int *)v1079 + 2);
      }
      else
      {
        v1158 = *((_QWORD *)v1079 + 1);
        if (*(_BYTE *)v1158 == 4)
          v1081 = *(_DWORD *)(*(_QWORD *)(v1158 + 24) + 16) | 0x2000u;
        else
          v1081 = 0;
      }
      v1282 = v1081 >> 8;
      v1283 = ((_DWORD)v1081 << 8) & 0xFE00;
      v1284 = *((_DWORD *)v1079 + 6);
      goto LABEL_1817;
    case 814:
    case 815:
      v1021 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1022 = *v1021;
      if (v1022 == 1)
      {
        v1023 = sub_1C4B12E5C(a1, (uint64_t)v1021, *(_QWORD *)(a4 + 192), 0);
        v1021 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1022 == 2)
      {
        v1023 = *((_DWORD *)v1021 + 2);
      }
      else
      {
        v1147 = *((_QWORD *)v1021 + 1);
        if (*(_BYTE *)v1147 == 4)
          v1023 = *(_DWORD *)(*(_QWORD *)(v1147 + 24) + 16) | 0x2000;
        else
          v1023 = 0;
      }
      v462 = *((_QWORD *)v1021 + 3);
      v463 = (v1023 << 9) & 0x60000 | ((unint64_t)v1023 << 8) | (v1023 >> 7) & 0x38;
      goto LABEL_612;
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
      v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v335 = *v334;
      if (v335 == 1)
      {
        v336 = sub_1C4B12E5C(a1, (uint64_t)v334, *(_QWORD *)(a4 + 192), 0);
        v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v335 == 2)
      {
        v336 = *((_DWORD *)v334 + 2);
      }
      else
      {
        v640 = *((_QWORD *)v334 + 1);
        if (*(_BYTE *)v640 == 4)
          v336 = *(_DWORD *)(*(_QWORD *)(v640 + 24) + 16) | 0x2000;
        else
          v336 = 0;
      }
      v976 = (v336 << 24) | (v336 >> 2) & 0xC0;
      v977 = v334[16];
      if (v977 == 1)
      {
        v978 = sub_1C4B12E5C(v8, (uint64_t)(v334 + 16), *(_QWORD *)(a4 + 192), 0);
        v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v977 == 2)
      {
        v978 = *((_DWORD *)v334 + 6);
      }
      else
      {
        v979 = *((_QWORD *)v334 + 3);
        if (*(_BYTE *)v979 == 4)
          v978 = *(_DWORD *)(*(_QWORD *)(v979 + 24) + 16) | 0x2000;
        else
          v978 = 0;
      }
      v984 = (32 * v978) & 0xFF00 | (v978 << 6) & 0x60000 | v976;
      v985 = v334[32];
      if (v985 == 1)
      {
        LOBYTE(v986) = sub_1C4B12E5C(v8, (uint64_t)(v334 + 32), *(_QWORD *)(a4 + 192), 0);
        v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v985 == 2)
      {
        v986 = *((_DWORD *)v334 + 10);
      }
      else
      {
        v987 = *((_QWORD *)v334 + 5);
        if (*(_BYTE *)v987 == 4)
          v986 = *(_DWORD *)(*(_QWORD *)(v987 + 24) + 16) | 0x2000;
        else
          LOBYTE(v986) = 0;
      }
      v992 = v984 | (2 * (v986 & 3u));
      v993 = v334[48];
      if (v993 == 1)
      {
        LOBYTE(v994) = sub_1C4B12E5C(v8, (uint64_t)(v334 + 48), *(_QWORD *)(a4 + 192), 0);
        v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v993 == 2)
      {
        v994 = *((_DWORD *)v334 + 14);
      }
      else
      {
        v995 = *((_QWORD *)v334 + 7);
        if (*(_BYTE *)v995 == 4)
          v994 = *(_DWORD *)(*(_QWORD *)(v995 + 24) + 16) | 0x2000;
        else
          LOBYTE(v994) = 0;
      }
      v1000 = v992 | (8 * (v994 & 1u));
      v1001 = v334[64];
      if (v1001 == 1)
      {
        LOBYTE(v1002) = sub_1C4B12E5C(v8, (uint64_t)(v334 + 64), *(_QWORD *)(a4 + 192), 0);
        v334 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1001 == 2)
      {
        v1002 = *((_DWORD *)v334 + 18);
      }
      else
      {
        v1003 = *((_QWORD *)v334 + 9);
        if (*(_BYTE *)v1003 == 4)
          v1002 = *(_DWORD *)(*(_QWORD *)(v1003 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1002) = 0;
      }
      v602 = v1000 | ((unint64_t)(v1002 & 1) << 40);
      v603 = *((_QWORD *)v334 + 11);
      goto LABEL_811;
    case 832:
    case 833:
    case 836:
    case 837:
    case 848:
    case 849:
    case 852:
    case 853:
    case 889:
    case 890:
    case 893:
    case 894:
    case 905:
    case 906:
    case 909:
    case 910:
    case 12216:
    case 12217:
    case 12220:
    case 12221:
    case 12232:
    case 12233:
    case 12236:
    case 12237:
    case 12272:
    case 12273:
    case 12276:
    case 12277:
    case 12288:
    case 12289:
    case 12292:
    case 12293:
    case 12328:
    case 12329:
    case 12332:
    case 12333:
    case 12344:
    case 12345:
    case 12348:
    case 12349:
    case 12384:
    case 12385:
    case 12388:
    case 12389:
    case 12400:
    case 12401:
    case 12404:
    case 12405:
    case 12982:
    case 12983:
    case 12986:
    case 12987:
    case 12998:
    case 12999:
    case 13002:
    case 13003:
    case 13038:
    case 13039:
    case 13042:
    case 13043:
    case 13054:
    case 13055:
    case 13058:
    case 13059:
    case 13094:
    case 13095:
    case 13098:
    case 13099:
    case 13110:
    case 13111:
    case 13114:
    case 13115:
    case 13150:
    case 13151:
    case 13154:
    case 13155:
    case 13166:
    case 13167:
    case 13170:
    case 13171:
      v72 = *((_QWORD *)a2 + 2);
      v28 = v72 + 128;
      v73 = *(unsigned __int8 *)(v72 + 128);
      if (v73 == 1)
        goto LABEL_81;
      if (v73 == 2)
      {
        v30 = *(_DWORD *)(v72 + 136);
        goto LABEL_220;
      }
      v75 = *(_QWORD *)(v72 + 136);
      goto LABEL_217;
    case 834:
    case 835:
    case 838:
    case 839:
    case 840:
    case 841:
    case 844:
    case 845:
    case 850:
    case 851:
    case 854:
    case 855:
    case 856:
    case 857:
    case 860:
    case 861:
    case 864:
    case 865:
    case 868:
    case 869:
    case 877:
    case 878:
    case 881:
    case 882:
    case 891:
    case 892:
    case 895:
    case 896:
    case 897:
    case 898:
    case 901:
    case 902:
    case 907:
    case 908:
    case 911:
    case 912:
    case 913:
    case 914:
    case 917:
    case 918:
    case 921:
    case 922:
    case 925:
    case 926:
    case 933:
    case 934:
    case 937:
    case 938:
    case 12218:
    case 12219:
    case 12222:
    case 12223:
    case 12224:
    case 12225:
    case 12228:
    case 12229:
    case 12234:
    case 12235:
    case 12238:
    case 12239:
    case 12240:
    case 12241:
    case 12244:
    case 12245:
    case 12248:
    case 12249:
    case 12252:
    case 12253:
    case 12260:
    case 12261:
    case 12264:
    case 12265:
    case 12274:
    case 12275:
    case 12278:
    case 12279:
    case 12280:
    case 12281:
    case 12284:
    case 12285:
    case 12290:
    case 12291:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12300:
    case 12301:
    case 12304:
    case 12305:
    case 12308:
    case 12309:
    case 12316:
    case 12317:
    case 12320:
    case 12321:
    case 12330:
    case 12331:
    case 12334:
    case 12335:
    case 12336:
    case 12337:
    case 12340:
    case 12341:
    case 12346:
    case 12347:
    case 12350:
    case 12351:
    case 12352:
    case 12353:
    case 12356:
    case 12357:
    case 12360:
    case 12361:
    case 12364:
    case 12365:
    case 12372:
    case 12373:
    case 12376:
    case 12377:
    case 12386:
    case 12387:
    case 12390:
    case 12391:
    case 12392:
    case 12393:
    case 12396:
    case 12397:
    case 12402:
    case 12403:
    case 12406:
    case 12407:
    case 12408:
    case 12409:
    case 12412:
    case 12413:
    case 12416:
    case 12417:
    case 12420:
    case 12421:
    case 12428:
    case 12429:
    case 12432:
    case 12433:
    case 12984:
    case 12985:
    case 12988:
    case 12989:
    case 12990:
    case 12991:
    case 12994:
    case 12995:
    case 13000:
    case 13001:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13010:
    case 13011:
    case 13014:
    case 13015:
    case 13018:
    case 13019:
    case 13026:
    case 13027:
    case 13030:
    case 13031:
    case 13040:
    case 13041:
    case 13044:
    case 13045:
    case 13046:
    case 13047:
    case 13050:
    case 13051:
    case 13056:
    case 13057:
    case 13060:
    case 13061:
    case 13062:
    case 13063:
    case 13066:
    case 13067:
    case 13070:
    case 13071:
    case 13074:
    case 13075:
    case 13082:
    case 13083:
    case 13086:
    case 13087:
    case 13096:
    case 13097:
    case 13100:
    case 13101:
    case 13102:
    case 13103:
    case 13106:
    case 13107:
    case 13112:
    case 13113:
    case 13116:
    case 13117:
    case 13118:
    case 13119:
    case 13122:
    case 13123:
    case 13126:
    case 13127:
    case 13130:
    case 13131:
    case 13138:
    case 13139:
    case 13142:
    case 13143:
    case 13152:
    case 13153:
    case 13156:
    case 13157:
    case 13158:
    case 13159:
    case 13162:
    case 13163:
    case 13168:
    case 13169:
    case 13172:
    case 13173:
    case 13174:
    case 13175:
    case 13178:
    case 13179:
    case 13182:
    case 13183:
    case 13186:
    case 13187:
    case 13194:
    case 13195:
    case 13198:
    case 13199:
      v27 = *((_QWORD *)a2 + 2);
      v28 = v27 + 112;
      v29 = *(unsigned __int8 *)(v27 + 112);
      if (v29 == 1)
        goto LABEL_81;
      if (v29 == 2)
      {
        v30 = *(_DWORD *)(v27 + 120);
        goto LABEL_220;
      }
      v75 = *(_QWORD *)(v27 + 120);
      goto LABEL_217;
    case 842:
    case 843:
    case 846:
    case 847:
    case 858:
    case 859:
    case 862:
    case 863:
    case 866:
    case 867:
    case 870:
    case 871:
    case 872:
    case 873:
    case 875:
    case 876:
    case 879:
    case 880:
    case 883:
    case 884:
    case 885:
    case 886:
    case 887:
    case 888:
    case 899:
    case 900:
    case 903:
    case 904:
    case 915:
    case 916:
    case 919:
    case 920:
    case 923:
    case 924:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 935:
    case 936:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 12226:
    case 12227:
    case 12230:
    case 12231:
    case 12242:
    case 12243:
    case 12246:
    case 12247:
    case 12250:
    case 12251:
    case 12254:
    case 12255:
    case 12256:
    case 12257:
    case 12258:
    case 12259:
    case 12262:
    case 12263:
    case 12266:
    case 12267:
    case 12268:
    case 12269:
    case 12270:
    case 12271:
    case 12282:
    case 12283:
    case 12286:
    case 12287:
    case 12298:
    case 12299:
    case 12302:
    case 12303:
    case 12306:
    case 12307:
    case 12310:
    case 12311:
    case 12312:
    case 12313:
    case 12314:
    case 12315:
    case 12318:
    case 12319:
    case 12322:
    case 12323:
    case 12324:
    case 12325:
    case 12326:
    case 12327:
    case 12338:
    case 12339:
    case 12342:
    case 12343:
    case 12354:
    case 12355:
    case 12358:
    case 12359:
    case 12362:
    case 12363:
    case 12366:
    case 12367:
    case 12368:
    case 12369:
    case 12370:
    case 12371:
    case 12374:
    case 12375:
    case 12378:
    case 12379:
    case 12380:
    case 12381:
    case 12382:
    case 12383:
    case 12394:
    case 12395:
    case 12398:
    case 12399:
    case 12410:
    case 12411:
    case 12414:
    case 12415:
    case 12418:
    case 12419:
    case 12422:
    case 12423:
    case 12424:
    case 12425:
    case 12426:
    case 12427:
    case 12430:
    case 12431:
    case 12434:
    case 12435:
    case 12436:
    case 12437:
    case 12438:
    case 12439:
    case 12992:
    case 12993:
    case 12996:
    case 12997:
    case 13008:
    case 13009:
    case 13012:
    case 13013:
    case 13016:
    case 13017:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13024:
    case 13025:
    case 13028:
    case 13029:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13048:
    case 13049:
    case 13052:
    case 13053:
    case 13064:
    case 13065:
    case 13068:
    case 13069:
    case 13072:
    case 13073:
    case 13076:
    case 13077:
    case 13078:
    case 13079:
    case 13080:
    case 13081:
    case 13084:
    case 13085:
    case 13088:
    case 13089:
    case 13090:
    case 13091:
    case 13092:
    case 13093:
    case 13104:
    case 13105:
    case 13108:
    case 13109:
    case 13120:
    case 13121:
    case 13124:
    case 13125:
    case 13128:
    case 13129:
    case 13132:
    case 13133:
    case 13134:
    case 13135:
    case 13136:
    case 13137:
    case 13140:
    case 13141:
    case 13144:
    case 13145:
    case 13146:
    case 13147:
    case 13148:
    case 13149:
    case 13160:
    case 13161:
    case 13164:
    case 13165:
    case 13176:
    case 13177:
    case 13180:
    case 13181:
    case 13184:
    case 13185:
    case 13188:
    case 13189:
    case 13190:
    case 13191:
    case 13192:
    case 13193:
    case 13196:
    case 13197:
    case 13200:
    case 13201:
    case 13202:
    case 13203:
    case 13204:
    case 13205:
      v31 = *((_QWORD *)a2 + 2);
      v28 = v31 + 96;
      v32 = *(unsigned __int8 *)(v31 + 96);
      if (v32 == 1)
      {
LABEL_81:
        v74 = *(_QWORD *)(a4 + 192);
        goto LABEL_82;
      }
      if (v32 == 2)
      {
        v30 = *(_DWORD *)(v31 + 104);
        goto LABEL_220;
      }
      v75 = *(_QWORD *)(v31 + 104);
      goto LABEL_217;
    case 874:
      v1082 = *((_QWORD *)a2 + 2);
      v28 = v1082 + 80;
      v1083 = *(unsigned __int8 *)(v1082 + 80);
      if (v1083 == 1)
      {
        v74 = *(_QWORD *)(a4 + 192);
LABEL_82:
        LOBYTE(v30) = sub_1C4B12E5C(a1, v28, v74, 0);
      }
      else if (v1083 == 2)
      {
        v30 = *(_DWORD *)(v1082 + 88);
      }
      else
      {
        v75 = *(_QWORD *)(v1082 + 88);
LABEL_217:
        if (*(_BYTE *)v75 == 4)
          v30 = *(_DWORD *)(*(_QWORD *)(v75 + 24) + 16) | 0x2000;
        else
          LOBYTE(v30) = 0;
      }
LABEL_220:
      v101 = v30 & 0x1F;
LABEL_221:
      v9 |= v101 << 53;
      return v9;
    case 1003:
    case 1019:
    case 1035:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 168);
      goto LABEL_14;
    case 1004:
    case 1005:
    case 1007:
    case 1011:
    case 1020:
    case 1021:
    case 1023:
    case 1027:
    case 1036:
    case 1037:
    case 1039:
    case 1043:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 152);
      goto LABEL_14;
    case 1006:
    case 1008:
    case 1009:
    case 1012:
    case 1013:
    case 1022:
    case 1024:
    case 1025:
    case 1028:
    case 1029:
    case 1038:
    case 1040:
    case 1041:
    case 1044:
    case 1045:
    case 4737:
    case 4738:
    case 4739:
    case 4740:
    case 4747:
    case 4748:
    case 4749:
    case 4750:
    case 4777:
    case 4778:
    case 4779:
    case 4780:
    case 4787:
    case 4788:
    case 4789:
    case 4790:
    case 4865:
    case 4866:
    case 4867:
    case 4868:
    case 4875:
    case 4876:
    case 4877:
    case 4878:
    case 4905:
    case 4906:
    case 4907:
    case 4908:
    case 4915:
    case 4916:
    case 4917:
    case 4918:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
    case 5045:
    case 5046:
    case 5047:
    case 5048:
    case 5055:
    case 5056:
    case 5057:
    case 5058:
    case 5133:
    case 5134:
    case 5135:
    case 5136:
    case 5143:
    case 5144:
    case 5145:
    case 5146:
    case 5173:
    case 5174:
    case 5175:
    case 5176:
    case 5183:
    case 5184:
    case 5185:
    case 5186:
    case 5273:
    case 5274:
    case 5275:
    case 5276:
    case 5283:
    case 5284:
    case 5285:
    case 5286:
    case 5313:
    case 5314:
    case 5315:
    case 5316:
    case 5323:
    case 5324:
    case 5325:
    case 5326:
    case 5401:
    case 5402:
    case 5403:
    case 5404:
    case 5411:
    case 5412:
    case 5413:
    case 5414:
    case 5441:
    case 5442:
    case 5443:
    case 5444:
    case 5451:
    case 5452:
    case 5453:
    case 5454:
    case 5541:
    case 5542:
    case 5543:
    case 5544:
    case 5551:
    case 5552:
    case 5553:
    case 5554:
    case 5581:
    case 5582:
    case 5583:
    case 5584:
    case 5591:
    case 5592:
    case 5593:
    case 5594:
    case 5669:
    case 5670:
    case 5671:
    case 5672:
    case 5679:
    case 5680:
    case 5681:
    case 5682:
    case 5709:
    case 5710:
    case 5711:
    case 5712:
    case 5719:
    case 5720:
    case 5721:
    case 5722:
    case 5809:
    case 5810:
    case 5811:
    case 5812:
    case 5819:
    case 5820:
    case 5821:
    case 5822:
    case 5849:
    case 5850:
    case 5851:
    case 5852:
    case 5859:
    case 5860:
    case 5861:
    case 5862:
    case 5937:
    case 5938:
    case 5939:
    case 5940:
    case 5947:
    case 5948:
    case 5949:
    case 5950:
    case 5977:
    case 5978:
    case 5979:
    case 5980:
    case 5987:
    case 5988:
    case 5989:
    case 5990:
    case 6077:
    case 6078:
    case 6079:
    case 6080:
    case 6087:
    case 6088:
    case 6089:
    case 6090:
    case 6117:
    case 6118:
    case 6119:
    case 6120:
    case 6127:
    case 6128:
    case 6129:
    case 6130:
    case 6205:
    case 6206:
    case 6207:
    case 6208:
    case 6215:
    case 6216:
    case 6217:
    case 6218:
    case 6245:
    case 6246:
    case 6247:
    case 6248:
    case 6255:
    case 6256:
    case 6257:
    case 6258:
    case 6345:
    case 6346:
    case 6347:
    case 6348:
    case 6355:
    case 6356:
    case 6357:
    case 6358:
    case 6385:
    case 6386:
    case 6387:
    case 6388:
    case 6395:
    case 6396:
    case 6397:
    case 6398:
    case 6473:
    case 6474:
    case 6475:
    case 6476:
    case 6483:
    case 6484:
    case 6485:
    case 6486:
    case 6513:
    case 6514:
    case 6515:
    case 6516:
    case 6523:
    case 6524:
    case 6525:
    case 6526:
    case 6613:
    case 6614:
    case 6615:
    case 6616:
    case 6623:
    case 6624:
    case 6625:
    case 6626:
    case 6653:
    case 6654:
    case 6655:
    case 6656:
    case 6663:
    case 6664:
    case 6665:
    case 6666:
    case 6741:
    case 6742:
    case 6743:
    case 6744:
    case 6751:
    case 6752:
    case 6753:
    case 6754:
    case 6781:
    case 6782:
    case 6783:
    case 6784:
    case 6791:
    case 6792:
    case 6793:
    case 6794:
    case 6881:
    case 6882:
    case 6883:
    case 6884:
    case 6891:
    case 6892:
    case 6893:
    case 6894:
    case 6921:
    case 6922:
    case 6923:
    case 6924:
    case 6931:
    case 6932:
    case 6933:
    case 6934:
    case 7009:
    case 7010:
    case 7011:
    case 7012:
    case 7019:
    case 7020:
    case 7021:
    case 7022:
    case 7049:
    case 7050:
    case 7051:
    case 7052:
    case 7059:
    case 7060:
    case 7061:
    case 7062:
    case 7149:
    case 7150:
    case 7151:
    case 7152:
    case 7159:
    case 7160:
    case 7161:
    case 7162:
    case 7189:
    case 7190:
    case 7191:
    case 7192:
    case 7199:
    case 7200:
    case 7201:
    case 7202:
    case 7277:
    case 7278:
    case 7279:
    case 7280:
    case 7287:
    case 7288:
    case 7289:
    case 7290:
    case 7317:
    case 7318:
    case 7319:
    case 7320:
    case 7327:
    case 7328:
    case 7329:
    case 7330:
    case 7417:
    case 7418:
    case 7419:
    case 7420:
    case 7427:
    case 7428:
    case 7429:
    case 7430:
    case 7457:
    case 7458:
    case 7459:
    case 7460:
    case 7467:
    case 7468:
    case 7469:
    case 7470:
    case 7545:
    case 7546:
    case 7547:
    case 7548:
    case 7555:
    case 7556:
    case 7557:
    case 7558:
    case 7585:
    case 7586:
    case 7587:
    case 7588:
    case 7595:
    case 7596:
    case 7597:
    case 7598:
    case 7685:
    case 7686:
    case 7687:
    case 7688:
    case 7695:
    case 7696:
    case 7697:
    case 7698:
    case 7725:
    case 7726:
    case 7727:
    case 7728:
    case 7735:
    case 7736:
    case 7737:
    case 7738:
    case 7813:
    case 7814:
    case 7815:
    case 7816:
    case 7823:
    case 7824:
    case 7825:
    case 7826:
    case 7853:
    case 7854:
    case 7855:
    case 7856:
    case 7863:
    case 7864:
    case 7865:
    case 7866:
    case 7953:
    case 7954:
    case 7955:
    case 7956:
    case 7963:
    case 7964:
    case 7965:
    case 7966:
    case 7993:
    case 7994:
    case 7995:
    case 7996:
    case 8003:
    case 8004:
    case 8005:
    case 8006:
    case 8081:
    case 8082:
    case 8083:
    case 8084:
    case 8091:
    case 8092:
    case 8093:
    case 8094:
    case 8121:
    case 8122:
    case 8123:
    case 8124:
    case 8131:
    case 8132:
    case 8133:
    case 8134:
    case 8221:
    case 8222:
    case 8223:
    case 8224:
    case 8231:
    case 8232:
    case 8233:
    case 8234:
    case 8261:
    case 8262:
    case 8263:
    case 8264:
    case 8271:
    case 8272:
    case 8273:
    case 8274:
    case 8349:
    case 8350:
    case 8351:
    case 8352:
    case 8359:
    case 8360:
    case 8361:
    case 8362:
    case 8389:
    case 8390:
    case 8391:
    case 8392:
    case 8399:
    case 8400:
    case 8401:
    case 8402:
    case 8489:
    case 8490:
    case 8491:
    case 8492:
    case 8499:
    case 8500:
    case 8501:
    case 8502:
    case 8529:
    case 8530:
    case 8531:
    case 8532:
    case 8539:
    case 8540:
    case 8541:
    case 8542:
    case 8617:
    case 8618:
    case 8619:
    case 8620:
    case 8627:
    case 8628:
    case 8629:
    case 8630:
    case 8657:
    case 8658:
    case 8659:
    case 8660:
    case 8667:
    case 8668:
    case 8669:
    case 8670:
    case 8757:
    case 8758:
    case 8759:
    case 8760:
    case 8767:
    case 8768:
    case 8769:
    case 8770:
    case 8797:
    case 8798:
    case 8799:
    case 8800:
    case 8807:
    case 8808:
    case 8809:
    case 8810:
    case 8885:
    case 8886:
    case 8887:
    case 8888:
    case 8895:
    case 8896:
    case 8897:
    case 8898:
    case 8925:
    case 8926:
    case 8927:
    case 8928:
    case 8935:
    case 8936:
    case 8937:
    case 8938:
    case 9025:
    case 9026:
    case 9027:
    case 9028:
    case 9035:
    case 9036:
    case 9037:
    case 9038:
    case 9065:
    case 9066:
    case 9067:
    case 9068:
    case 9075:
    case 9076:
    case 9077:
    case 9078:
    case 9153:
    case 9154:
    case 9155:
    case 9156:
    case 9163:
    case 9164:
    case 9165:
    case 9166:
    case 9193:
    case 9194:
    case 9195:
    case 9196:
    case 9203:
    case 9204:
    case 9205:
    case 9206:
    case 9293:
    case 9294:
    case 9295:
    case 9296:
    case 9303:
    case 9304:
    case 9305:
    case 9306:
    case 9333:
    case 9334:
    case 9335:
    case 9336:
    case 9343:
    case 9344:
    case 9345:
    case 9346:
    case 9421:
    case 9422:
    case 9423:
    case 9424:
    case 9431:
    case 9432:
    case 9433:
    case 9434:
    case 9461:
    case 9462:
    case 9463:
    case 9464:
    case 9471:
    case 9472:
    case 9473:
    case 9474:
    case 9561:
    case 9562:
    case 9563:
    case 9564:
    case 9571:
    case 9572:
    case 9573:
    case 9574:
    case 9601:
    case 9602:
    case 9603:
    case 9604:
    case 9611:
    case 9612:
    case 9613:
    case 9614:
    case 9689:
    case 9690:
    case 9691:
    case 9692:
    case 9699:
    case 9700:
    case 9701:
    case 9702:
    case 9729:
    case 9730:
    case 9731:
    case 9732:
    case 9739:
    case 9740:
    case 9741:
    case 9742:
    case 9829:
    case 9830:
    case 9831:
    case 9832:
    case 9839:
    case 9840:
    case 9841:
    case 9842:
    case 9869:
    case 9870:
    case 9871:
    case 9872:
    case 9879:
    case 9880:
    case 9881:
    case 9882:
    case 9957:
    case 9958:
    case 9959:
    case 9960:
    case 9967:
    case 9968:
    case 9969:
    case 9970:
    case 9997:
    case 9998:
    case 9999:
    case 10000:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 136);
      goto LABEL_14;
    case 1010:
    case 1014:
    case 1026:
    case 1030:
    case 1042:
    case 1046:
    case 4741:
    case 4742:
    case 4743:
    case 4744:
    case 4751:
    case 4752:
    case 4753:
    case 4754:
    case 4757:
    case 4758:
    case 4759:
    case 4760:
    case 4767:
    case 4768:
    case 4769:
    case 4770:
    case 4781:
    case 4782:
    case 4783:
    case 4784:
    case 4791:
    case 4792:
    case 4793:
    case 4794:
    case 4797:
    case 4798:
    case 4799:
    case 4800:
    case 4807:
    case 4808:
    case 4809:
    case 4810:
    case 4817:
    case 4818:
    case 4819:
    case 4820:
    case 4827:
    case 4828:
    case 4829:
    case 4830:
    case 4841:
    case 4842:
    case 4843:
    case 4844:
    case 4851:
    case 4852:
    case 4853:
    case 4854:
    case 4869:
    case 4870:
    case 4871:
    case 4872:
    case 4879:
    case 4880:
    case 4881:
    case 4882:
    case 4885:
    case 4886:
    case 4887:
    case 4888:
    case 4895:
    case 4896:
    case 4897:
    case 4898:
    case 4909:
    case 4910:
    case 4911:
    case 4912:
    case 4919:
    case 4920:
    case 4921:
    case 4922:
    case 4925:
    case 4926:
    case 4927:
    case 4928:
    case 4935:
    case 4936:
    case 4937:
    case 4938:
    case 4945:
    case 4946:
    case 4947:
    case 4948:
    case 4955:
    case 4956:
    case 4957:
    case 4958:
    case 4969:
    case 4970:
    case 4971:
    case 4972:
    case 4979:
    case 4980:
    case 4981:
    case 4982:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5025:
    case 5026:
    case 5027:
    case 5028:
    case 5035:
    case 5036:
    case 5037:
    case 5038:
    case 5049:
    case 5050:
    case 5051:
    case 5052:
    case 5059:
    case 5060:
    case 5061:
    case 5062:
    case 5065:
    case 5066:
    case 5067:
    case 5068:
    case 5075:
    case 5076:
    case 5077:
    case 5078:
    case 5085:
    case 5086:
    case 5087:
    case 5088:
    case 5095:
    case 5096:
    case 5097:
    case 5098:
    case 5109:
    case 5110:
    case 5111:
    case 5112:
    case 5119:
    case 5120:
    case 5121:
    case 5122:
    case 5137:
    case 5138:
    case 5139:
    case 5140:
    case 5147:
    case 5148:
    case 5149:
    case 5150:
    case 5153:
    case 5154:
    case 5155:
    case 5156:
    case 5163:
    case 5164:
    case 5165:
    case 5166:
    case 5177:
    case 5178:
    case 5179:
    case 5180:
    case 5187:
    case 5188:
    case 5189:
    case 5190:
    case 5193:
    case 5194:
    case 5195:
    case 5196:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5213:
    case 5214:
    case 5215:
    case 5216:
    case 5223:
    case 5224:
    case 5225:
    case 5226:
    case 5237:
    case 5238:
    case 5239:
    case 5240:
    case 5247:
    case 5248:
    case 5249:
    case 5250:
    case 5277:
    case 5278:
    case 5279:
    case 5280:
    case 5287:
    case 5288:
    case 5289:
    case 5290:
    case 5293:
    case 5294:
    case 5295:
    case 5296:
    case 5303:
    case 5304:
    case 5305:
    case 5306:
    case 5317:
    case 5318:
    case 5319:
    case 5320:
    case 5327:
    case 5328:
    case 5329:
    case 5330:
    case 5333:
    case 5334:
    case 5335:
    case 5336:
    case 5343:
    case 5344:
    case 5345:
    case 5346:
    case 5353:
    case 5354:
    case 5355:
    case 5356:
    case 5363:
    case 5364:
    case 5365:
    case 5366:
    case 5377:
    case 5378:
    case 5379:
    case 5380:
    case 5387:
    case 5388:
    case 5389:
    case 5390:
    case 5405:
    case 5406:
    case 5407:
    case 5408:
    case 5415:
    case 5416:
    case 5417:
    case 5418:
    case 5421:
    case 5422:
    case 5423:
    case 5424:
    case 5431:
    case 5432:
    case 5433:
    case 5434:
    case 5445:
    case 5446:
    case 5447:
    case 5448:
    case 5455:
    case 5456:
    case 5457:
    case 5458:
    case 5461:
    case 5462:
    case 5463:
    case 5464:
    case 5471:
    case 5472:
    case 5473:
    case 5474:
    case 5481:
    case 5482:
    case 5483:
    case 5484:
    case 5491:
    case 5492:
    case 5493:
    case 5494:
    case 5505:
    case 5506:
    case 5507:
    case 5508:
    case 5515:
    case 5516:
    case 5517:
    case 5518:
    case 5545:
    case 5546:
    case 5547:
    case 5548:
    case 5555:
    case 5556:
    case 5557:
    case 5558:
    case 5561:
    case 5562:
    case 5563:
    case 5564:
    case 5571:
    case 5572:
    case 5573:
    case 5574:
    case 5585:
    case 5586:
    case 5587:
    case 5588:
    case 5595:
    case 5596:
    case 5597:
    case 5598:
    case 5601:
    case 5602:
    case 5603:
    case 5604:
    case 5611:
    case 5612:
    case 5613:
    case 5614:
    case 5621:
    case 5622:
    case 5623:
    case 5624:
    case 5631:
    case 5632:
    case 5633:
    case 5634:
    case 5645:
    case 5646:
    case 5647:
    case 5648:
    case 5655:
    case 5656:
    case 5657:
    case 5658:
    case 5673:
    case 5674:
    case 5675:
    case 5676:
    case 5683:
    case 5684:
    case 5685:
    case 5686:
    case 5689:
    case 5690:
    case 5691:
    case 5692:
    case 5699:
    case 5700:
    case 5701:
    case 5702:
    case 5713:
    case 5714:
    case 5715:
    case 5716:
    case 5723:
    case 5724:
    case 5725:
    case 5726:
    case 5729:
    case 5730:
    case 5731:
    case 5732:
    case 5739:
    case 5740:
    case 5741:
    case 5742:
    case 5749:
    case 5750:
    case 5751:
    case 5752:
    case 5759:
    case 5760:
    case 5761:
    case 5762:
    case 5773:
    case 5774:
    case 5775:
    case 5776:
    case 5783:
    case 5784:
    case 5785:
    case 5786:
    case 5813:
    case 5814:
    case 5815:
    case 5816:
    case 5823:
    case 5824:
    case 5825:
    case 5826:
    case 5829:
    case 5830:
    case 5831:
    case 5832:
    case 5839:
    case 5840:
    case 5841:
    case 5842:
    case 5853:
    case 5854:
    case 5855:
    case 5856:
    case 5863:
    case 5864:
    case 5865:
    case 5866:
    case 5869:
    case 5870:
    case 5871:
    case 5872:
    case 5879:
    case 5880:
    case 5881:
    case 5882:
    case 5889:
    case 5890:
    case 5891:
    case 5892:
    case 5899:
    case 5900:
    case 5901:
    case 5902:
    case 5913:
    case 5914:
    case 5915:
    case 5916:
    case 5923:
    case 5924:
    case 5925:
    case 5926:
    case 5941:
    case 5942:
    case 5943:
    case 5944:
    case 5951:
    case 5952:
    case 5953:
    case 5954:
    case 5957:
    case 5958:
    case 5959:
    case 5960:
    case 5967:
    case 5968:
    case 5969:
    case 5970:
    case 5981:
    case 5982:
    case 5983:
    case 5984:
    case 5991:
    case 5992:
    case 5993:
    case 5994:
    case 5997:
    case 5998:
    case 5999:
    case 6000:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 6027:
    case 6028:
    case 6029:
    case 6030:
    case 6041:
    case 6042:
    case 6043:
    case 6044:
    case 6051:
    case 6052:
    case 6053:
    case 6054:
    case 6081:
    case 6082:
    case 6083:
    case 6084:
    case 6091:
    case 6092:
    case 6093:
    case 6094:
    case 6097:
    case 6098:
    case 6099:
    case 6100:
    case 6107:
    case 6108:
    case 6109:
    case 6110:
    case 6121:
    case 6122:
    case 6123:
    case 6124:
    case 6131:
    case 6132:
    case 6133:
    case 6134:
    case 6137:
    case 6138:
    case 6139:
    case 6140:
    case 6147:
    case 6148:
    case 6149:
    case 6150:
    case 6157:
    case 6158:
    case 6159:
    case 6160:
    case 6167:
    case 6168:
    case 6169:
    case 6170:
    case 6181:
    case 6182:
    case 6183:
    case 6184:
    case 6191:
    case 6192:
    case 6193:
    case 6194:
    case 6209:
    case 6210:
    case 6211:
    case 6212:
    case 6219:
    case 6220:
    case 6221:
    case 6222:
    case 6225:
    case 6226:
    case 6227:
    case 6228:
    case 6235:
    case 6236:
    case 6237:
    case 6238:
    case 6249:
    case 6250:
    case 6251:
    case 6252:
    case 6259:
    case 6260:
    case 6261:
    case 6262:
    case 6265:
    case 6266:
    case 6267:
    case 6268:
    case 6275:
    case 6276:
    case 6277:
    case 6278:
    case 6285:
    case 6286:
    case 6287:
    case 6288:
    case 6295:
    case 6296:
    case 6297:
    case 6298:
    case 6309:
    case 6310:
    case 6311:
    case 6312:
    case 6319:
    case 6320:
    case 6321:
    case 6322:
    case 6349:
    case 6350:
    case 6351:
    case 6352:
    case 6359:
    case 6360:
    case 6361:
    case 6362:
    case 6365:
    case 6366:
    case 6367:
    case 6368:
    case 6375:
    case 6376:
    case 6377:
    case 6378:
    case 6389:
    case 6390:
    case 6391:
    case 6392:
    case 6399:
    case 6400:
    case 6401:
    case 6402:
    case 6405:
    case 6406:
    case 6407:
    case 6408:
    case 6415:
    case 6416:
    case 6417:
    case 6418:
    case 6425:
    case 6426:
    case 6427:
    case 6428:
    case 6435:
    case 6436:
    case 6437:
    case 6438:
    case 6449:
    case 6450:
    case 6451:
    case 6452:
    case 6459:
    case 6460:
    case 6461:
    case 6462:
    case 6477:
    case 6478:
    case 6479:
    case 6480:
    case 6487:
    case 6488:
    case 6489:
    case 6490:
    case 6493:
    case 6494:
    case 6495:
    case 6496:
    case 6503:
    case 6504:
    case 6505:
    case 6506:
    case 6517:
    case 6518:
    case 6519:
    case 6520:
    case 6527:
    case 6528:
    case 6529:
    case 6530:
    case 6533:
    case 6534:
    case 6535:
    case 6536:
    case 6543:
    case 6544:
    case 6545:
    case 6546:
    case 6553:
    case 6554:
    case 6555:
    case 6556:
    case 6563:
    case 6564:
    case 6565:
    case 6566:
    case 6577:
    case 6578:
    case 6579:
    case 6580:
    case 6587:
    case 6588:
    case 6589:
    case 6590:
    case 6617:
    case 6618:
    case 6619:
    case 6620:
    case 6627:
    case 6628:
    case 6629:
    case 6630:
    case 6633:
    case 6634:
    case 6635:
    case 6636:
    case 6643:
    case 6644:
    case 6645:
    case 6646:
    case 6657:
    case 6658:
    case 6659:
    case 6660:
    case 6667:
    case 6668:
    case 6669:
    case 6670:
    case 6673:
    case 6674:
    case 6675:
    case 6676:
    case 6683:
    case 6684:
    case 6685:
    case 6686:
    case 6693:
    case 6694:
    case 6695:
    case 6696:
    case 6703:
    case 6704:
    case 6705:
    case 6706:
    case 6717:
    case 6718:
    case 6719:
    case 6720:
    case 6727:
    case 6728:
    case 6729:
    case 6730:
    case 6745:
    case 6746:
    case 6747:
    case 6748:
    case 6755:
    case 6756:
    case 6757:
    case 6758:
    case 6761:
    case 6762:
    case 6763:
    case 6764:
    case 6771:
    case 6772:
    case 6773:
    case 6774:
    case 6785:
    case 6786:
    case 6787:
    case 6788:
    case 6795:
    case 6796:
    case 6797:
    case 6798:
    case 6801:
    case 6802:
    case 6803:
    case 6804:
    case 6811:
    case 6812:
    case 6813:
    case 6814:
    case 6821:
    case 6822:
    case 6823:
    case 6824:
    case 6831:
    case 6832:
    case 6833:
    case 6834:
    case 6845:
    case 6846:
    case 6847:
    case 6848:
    case 6855:
    case 6856:
    case 6857:
    case 6858:
    case 6885:
    case 6886:
    case 6887:
    case 6888:
    case 6895:
    case 6896:
    case 6897:
    case 6898:
    case 6901:
    case 6902:
    case 6903:
    case 6904:
    case 6911:
    case 6912:
    case 6913:
    case 6914:
    case 6925:
    case 6926:
    case 6927:
    case 6928:
    case 6935:
    case 6936:
    case 6937:
    case 6938:
    case 6941:
    case 6942:
    case 6943:
    case 6944:
    case 6951:
    case 6952:
    case 6953:
    case 6954:
    case 6961:
    case 6962:
    case 6963:
    case 6964:
    case 6971:
    case 6972:
    case 6973:
    case 6974:
    case 6985:
    case 6986:
    case 6987:
    case 6988:
    case 6995:
    case 6996:
    case 6997:
    case 6998:
    case 7013:
    case 7014:
    case 7015:
    case 7016:
    case 7023:
    case 7024:
    case 7025:
    case 7026:
    case 7029:
    case 7030:
    case 7031:
    case 7032:
    case 7039:
    case 7040:
    case 7041:
    case 7042:
    case 7053:
    case 7054:
    case 7055:
    case 7056:
    case 7063:
    case 7064:
    case 7065:
    case 7066:
    case 7069:
    case 7070:
    case 7071:
    case 7072:
    case 7079:
    case 7080:
    case 7081:
    case 7082:
    case 7089:
    case 7090:
    case 7091:
    case 7092:
    case 7099:
    case 7100:
    case 7101:
    case 7102:
    case 7113:
    case 7114:
    case 7115:
    case 7116:
    case 7123:
    case 7124:
    case 7125:
    case 7126:
    case 7153:
    case 7154:
    case 7155:
    case 7156:
    case 7163:
    case 7164:
    case 7165:
    case 7166:
    case 7169:
    case 7170:
    case 7171:
    case 7172:
    case 7179:
    case 7180:
    case 7181:
    case 7182:
    case 7193:
    case 7194:
    case 7195:
    case 7196:
    case 7203:
    case 7204:
    case 7205:
    case 7206:
    case 7209:
    case 7210:
    case 7211:
    case 7212:
    case 7219:
    case 7220:
    case 7221:
    case 7222:
    case 7229:
    case 7230:
    case 7231:
    case 7232:
    case 7239:
    case 7240:
    case 7241:
    case 7242:
    case 7253:
    case 7254:
    case 7255:
    case 7256:
    case 7263:
    case 7264:
    case 7265:
    case 7266:
    case 7281:
    case 7282:
    case 7283:
    case 7284:
    case 7291:
    case 7292:
    case 7293:
    case 7294:
    case 7297:
    case 7298:
    case 7299:
    case 7300:
    case 7307:
    case 7308:
    case 7309:
    case 7310:
    case 7321:
    case 7322:
    case 7323:
    case 7324:
    case 7331:
    case 7332:
    case 7333:
    case 7334:
    case 7337:
    case 7338:
    case 7339:
    case 7340:
    case 7347:
    case 7348:
    case 7349:
    case 7350:
    case 7357:
    case 7358:
    case 7359:
    case 7360:
    case 7367:
    case 7368:
    case 7369:
    case 7370:
    case 7381:
    case 7382:
    case 7383:
    case 7384:
    case 7391:
    case 7392:
    case 7393:
    case 7394:
    case 7421:
    case 7422:
    case 7423:
    case 7424:
    case 7431:
    case 7432:
    case 7433:
    case 7434:
    case 7437:
    case 7438:
    case 7439:
    case 7440:
    case 7447:
    case 7448:
    case 7449:
    case 7450:
    case 7461:
    case 7462:
    case 7463:
    case 7464:
    case 7471:
    case 7472:
    case 7473:
    case 7474:
    case 7477:
    case 7478:
    case 7479:
    case 7480:
    case 7487:
    case 7488:
    case 7489:
    case 7490:
    case 7497:
    case 7498:
    case 7499:
    case 7500:
    case 7507:
    case 7508:
    case 7509:
    case 7510:
    case 7521:
    case 7522:
    case 7523:
    case 7524:
    case 7531:
    case 7532:
    case 7533:
    case 7534:
    case 7549:
    case 7550:
    case 7551:
    case 7552:
    case 7559:
    case 7560:
    case 7561:
    case 7562:
    case 7565:
    case 7566:
    case 7567:
    case 7568:
    case 7575:
    case 7576:
    case 7577:
    case 7578:
    case 7589:
    case 7590:
    case 7591:
    case 7592:
    case 7599:
    case 7600:
    case 7601:
    case 7602:
    case 7605:
    case 7606:
    case 7607:
    case 7608:
    case 7615:
    case 7616:
    case 7617:
    case 7618:
    case 7625:
    case 7626:
    case 7627:
    case 7628:
    case 7635:
    case 7636:
    case 7637:
    case 7638:
    case 7649:
    case 7650:
    case 7651:
    case 7652:
    case 7659:
    case 7660:
    case 7661:
    case 7662:
    case 7689:
    case 7690:
    case 7691:
    case 7692:
    case 7699:
    case 7700:
    case 7701:
    case 7702:
    case 7705:
    case 7706:
    case 7707:
    case 7708:
    case 7715:
    case 7716:
    case 7717:
    case 7718:
    case 7729:
    case 7730:
    case 7731:
    case 7732:
    case 7739:
    case 7740:
    case 7741:
    case 7742:
    case 7745:
    case 7746:
    case 7747:
    case 7748:
    case 7755:
    case 7756:
    case 7757:
    case 7758:
    case 7765:
    case 7766:
    case 7767:
    case 7768:
    case 7775:
    case 7776:
    case 7777:
    case 7778:
    case 7789:
    case 7790:
    case 7791:
    case 7792:
    case 7799:
    case 7800:
    case 7801:
    case 7802:
    case 7817:
    case 7818:
    case 7819:
    case 7820:
    case 7827:
    case 7828:
    case 7829:
    case 7830:
    case 7833:
    case 7834:
    case 7835:
    case 7836:
    case 7843:
    case 7844:
    case 7845:
    case 7846:
    case 7857:
    case 7858:
    case 7859:
    case 7860:
    case 7867:
    case 7868:
    case 7869:
    case 7870:
    case 7873:
    case 7874:
    case 7875:
    case 7876:
    case 7883:
    case 7884:
    case 7885:
    case 7886:
    case 7893:
    case 7894:
    case 7895:
    case 7896:
    case 7903:
    case 7904:
    case 7905:
    case 7906:
    case 7917:
    case 7918:
    case 7919:
    case 7920:
    case 7927:
    case 7928:
    case 7929:
    case 7930:
    case 7957:
    case 7958:
    case 7959:
    case 7960:
    case 7967:
    case 7968:
    case 7969:
    case 7970:
    case 7973:
    case 7974:
    case 7975:
    case 7976:
    case 7983:
    case 7984:
    case 7985:
    case 7986:
    case 7997:
    case 7998:
    case 7999:
    case 8000:
    case 8007:
    case 8008:
    case 8009:
    case 8010:
    case 8013:
    case 8014:
    case 8015:
    case 8016:
    case 8023:
    case 8024:
    case 8025:
    case 8026:
    case 8033:
    case 8034:
    case 8035:
    case 8036:
    case 8043:
    case 8044:
    case 8045:
    case 8046:
    case 8057:
    case 8058:
    case 8059:
    case 8060:
    case 8067:
    case 8068:
    case 8069:
    case 8070:
    case 8085:
    case 8086:
    case 8087:
    case 8088:
    case 8095:
    case 8096:
    case 8097:
    case 8098:
    case 8101:
    case 8102:
    case 8103:
    case 8104:
    case 8111:
    case 8112:
    case 8113:
    case 8114:
    case 8125:
    case 8126:
    case 8127:
    case 8128:
    case 8135:
    case 8136:
    case 8137:
    case 8138:
    case 8141:
    case 8142:
    case 8143:
    case 8144:
    case 8151:
    case 8152:
    case 8153:
    case 8154:
    case 8161:
    case 8162:
    case 8163:
    case 8164:
    case 8171:
    case 8172:
    case 8173:
    case 8174:
    case 8185:
    case 8186:
    case 8187:
    case 8188:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8225:
    case 8226:
    case 8227:
    case 8228:
    case 8235:
    case 8236:
    case 8237:
    case 8238:
    case 8241:
    case 8242:
    case 8243:
    case 8244:
    case 8251:
    case 8252:
    case 8253:
    case 8254:
    case 8265:
    case 8266:
    case 8267:
    case 8268:
    case 8275:
    case 8276:
    case 8277:
    case 8278:
    case 8281:
    case 8282:
    case 8283:
    case 8284:
    case 8291:
    case 8292:
    case 8293:
    case 8294:
    case 8301:
    case 8302:
    case 8303:
    case 8304:
    case 8311:
    case 8312:
    case 8313:
    case 8314:
    case 8325:
    case 8326:
    case 8327:
    case 8328:
    case 8335:
    case 8336:
    case 8337:
    case 8338:
    case 8353:
    case 8354:
    case 8355:
    case 8356:
    case 8363:
    case 8364:
    case 8365:
    case 8366:
    case 8369:
    case 8370:
    case 8371:
    case 8372:
    case 8379:
    case 8380:
    case 8381:
    case 8382:
    case 8393:
    case 8394:
    case 8395:
    case 8396:
    case 8403:
    case 8404:
    case 8405:
    case 8406:
    case 8409:
    case 8410:
    case 8411:
    case 8412:
    case 8419:
    case 8420:
    case 8421:
    case 8422:
    case 8429:
    case 8430:
    case 8431:
    case 8432:
    case 8439:
    case 8440:
    case 8441:
    case 8442:
    case 8453:
    case 8454:
    case 8455:
    case 8456:
    case 8463:
    case 8464:
    case 8465:
    case 8466:
    case 8493:
    case 8494:
    case 8495:
    case 8496:
    case 8503:
    case 8504:
    case 8505:
    case 8506:
    case 8509:
    case 8510:
    case 8511:
    case 8512:
    case 8519:
    case 8520:
    case 8521:
    case 8522:
    case 8533:
    case 8534:
    case 8535:
    case 8536:
    case 8543:
    case 8544:
    case 8545:
    case 8546:
    case 8549:
    case 8550:
    case 8551:
    case 8552:
    case 8559:
    case 8560:
    case 8561:
    case 8562:
    case 8569:
    case 8570:
    case 8571:
    case 8572:
    case 8579:
    case 8580:
    case 8581:
    case 8582:
    case 8593:
    case 8594:
    case 8595:
    case 8596:
    case 8603:
    case 8604:
    case 8605:
    case 8606:
    case 8621:
    case 8622:
    case 8623:
    case 8624:
    case 8631:
    case 8632:
    case 8633:
    case 8634:
    case 8637:
    case 8638:
    case 8639:
    case 8640:
    case 8647:
    case 8648:
    case 8649:
    case 8650:
    case 8661:
    case 8662:
    case 8663:
    case 8664:
    case 8671:
    case 8672:
    case 8673:
    case 8674:
    case 8677:
    case 8678:
    case 8679:
    case 8680:
    case 8687:
    case 8688:
    case 8689:
    case 8690:
    case 8697:
    case 8698:
    case 8699:
    case 8700:
    case 8707:
    case 8708:
    case 8709:
    case 8710:
    case 8721:
    case 8722:
    case 8723:
    case 8724:
    case 8731:
    case 8732:
    case 8733:
    case 8734:
    case 8761:
    case 8762:
    case 8763:
    case 8764:
    case 8771:
    case 8772:
    case 8773:
    case 8774:
    case 8777:
    case 8778:
    case 8779:
    case 8780:
    case 8787:
    case 8788:
    case 8789:
    case 8790:
    case 8801:
    case 8802:
    case 8803:
    case 8804:
    case 8811:
    case 8812:
    case 8813:
    case 8814:
    case 8817:
    case 8818:
    case 8819:
    case 8820:
    case 8827:
    case 8828:
    case 8829:
    case 8830:
    case 8837:
    case 8838:
    case 8839:
    case 8840:
    case 8847:
    case 8848:
    case 8849:
    case 8850:
    case 8861:
    case 8862:
    case 8863:
    case 8864:
    case 8871:
    case 8872:
    case 8873:
    case 8874:
    case 8889:
    case 8890:
    case 8891:
    case 8892:
    case 8899:
    case 8900:
    case 8901:
    case 8902:
    case 8905:
    case 8906:
    case 8907:
    case 8908:
    case 8915:
    case 8916:
    case 8917:
    case 8918:
    case 8929:
    case 8930:
    case 8931:
    case 8932:
    case 8939:
    case 8940:
    case 8941:
    case 8942:
    case 8945:
    case 8946:
    case 8947:
    case 8948:
    case 8955:
    case 8956:
    case 8957:
    case 8958:
    case 8965:
    case 8966:
    case 8967:
    case 8968:
    case 8975:
    case 8976:
    case 8977:
    case 8978:
    case 8989:
    case 8990:
    case 8991:
    case 8992:
    case 8999:
    case 9000:
    case 9001:
    case 9002:
    case 9029:
    case 9030:
    case 9031:
    case 9032:
    case 9039:
    case 9040:
    case 9041:
    case 9042:
    case 9045:
    case 9046:
    case 9047:
    case 9048:
    case 9055:
    case 9056:
    case 9057:
    case 9058:
    case 9069:
    case 9070:
    case 9071:
    case 9072:
    case 9079:
    case 9080:
    case 9081:
    case 9082:
    case 9085:
    case 9086:
    case 9087:
    case 9088:
    case 9095:
    case 9096:
    case 9097:
    case 9098:
    case 9105:
    case 9106:
    case 9107:
    case 9108:
    case 9115:
    case 9116:
    case 9117:
    case 9118:
    case 9129:
    case 9130:
    case 9131:
    case 9132:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9183:
    case 9184:
    case 9185:
    case 9186:
    case 9197:
    case 9198:
    case 9199:
    case 9200:
    case 9207:
    case 9208:
    case 9209:
    case 9210:
    case 9213:
    case 9214:
    case 9215:
    case 9216:
    case 9223:
    case 9224:
    case 9225:
    case 9226:
    case 9233:
    case 9234:
    case 9235:
    case 9236:
    case 9243:
    case 9244:
    case 9245:
    case 9246:
    case 9257:
    case 9258:
    case 9259:
    case 9260:
    case 9267:
    case 9268:
    case 9269:
    case 9270:
    case 9297:
    case 9298:
    case 9299:
    case 9300:
    case 9307:
    case 9308:
    case 9309:
    case 9310:
    case 9313:
    case 9314:
    case 9315:
    case 9316:
    case 9323:
    case 9324:
    case 9325:
    case 9326:
    case 9337:
    case 9338:
    case 9339:
    case 9340:
    case 9347:
    case 9348:
    case 9349:
    case 9350:
    case 9353:
    case 9354:
    case 9355:
    case 9356:
    case 9363:
    case 9364:
    case 9365:
    case 9366:
    case 9373:
    case 9374:
    case 9375:
    case 9376:
    case 9383:
    case 9384:
    case 9385:
    case 9386:
    case 9397:
    case 9398:
    case 9399:
    case 9400:
    case 9407:
    case 9408:
    case 9409:
    case 9410:
    case 9425:
    case 9426:
    case 9427:
    case 9428:
    case 9435:
    case 9436:
    case 9437:
    case 9438:
    case 9441:
    case 9442:
    case 9443:
    case 9444:
    case 9451:
    case 9452:
    case 9453:
    case 9454:
    case 9465:
    case 9466:
    case 9467:
    case 9468:
    case 9475:
    case 9476:
    case 9477:
    case 9478:
    case 9481:
    case 9482:
    case 9483:
    case 9484:
    case 9491:
    case 9492:
    case 9493:
    case 9494:
    case 9501:
    case 9502:
    case 9503:
    case 9504:
    case 9511:
    case 9512:
    case 9513:
    case 9514:
    case 9525:
    case 9526:
    case 9527:
    case 9528:
    case 9535:
    case 9536:
    case 9537:
    case 9538:
    case 9565:
    case 9566:
    case 9567:
    case 9568:
    case 9575:
    case 9576:
    case 9577:
    case 9578:
    case 9581:
    case 9582:
    case 9583:
    case 9584:
    case 9591:
    case 9592:
    case 9593:
    case 9594:
    case 9605:
    case 9606:
    case 9607:
    case 9608:
    case 9615:
    case 9616:
    case 9617:
    case 9618:
    case 9621:
    case 9622:
    case 9623:
    case 9624:
    case 9631:
    case 9632:
    case 9633:
    case 9634:
    case 9641:
    case 9642:
    case 9643:
    case 9644:
    case 9651:
    case 9652:
    case 9653:
    case 9654:
    case 9665:
    case 9666:
    case 9667:
    case 9668:
    case 9675:
    case 9676:
    case 9677:
    case 9678:
    case 9693:
    case 9694:
    case 9695:
    case 9696:
    case 9703:
    case 9704:
    case 9705:
    case 9706:
    case 9709:
    case 9710:
    case 9711:
    case 9712:
    case 9719:
    case 9720:
    case 9721:
    case 9722:
    case 9733:
    case 9734:
    case 9735:
    case 9736:
    case 9743:
    case 9744:
    case 9745:
    case 9746:
    case 9749:
    case 9750:
    case 9751:
    case 9752:
    case 9759:
    case 9760:
    case 9761:
    case 9762:
    case 9769:
    case 9770:
    case 9771:
    case 9772:
    case 9779:
    case 9780:
    case 9781:
    case 9782:
    case 9793:
    case 9794:
    case 9795:
    case 9796:
    case 9803:
    case 9804:
    case 9805:
    case 9806:
    case 9833:
    case 9834:
    case 9835:
    case 9836:
    case 9843:
    case 9844:
    case 9845:
    case 9846:
    case 9849:
    case 9850:
    case 9851:
    case 9852:
    case 9859:
    case 9860:
    case 9861:
    case 9862:
    case 9873:
    case 9874:
    case 9875:
    case 9876:
    case 9883:
    case 9884:
    case 9885:
    case 9886:
    case 9889:
    case 9890:
    case 9891:
    case 9892:
    case 9899:
    case 9900:
    case 9901:
    case 9902:
    case 9909:
    case 9910:
    case 9911:
    case 9912:
    case 9919:
    case 9920:
    case 9921:
    case 9922:
    case 9933:
    case 9934:
    case 9935:
    case 9936:
    case 9943:
    case 9944:
    case 9945:
    case 9946:
    case 9961:
    case 9962:
    case 9963:
    case 9964:
    case 9971:
    case 9972:
    case 9973:
    case 9974:
    case 9977:
    case 9978:
    case 9979:
    case 9980:
    case 9987:
    case 9988:
    case 9989:
    case 9990:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10027:
    case 10028:
    case 10029:
    case 10030:
    case 10037:
    case 10038:
    case 10039:
    case 10040:
    case 10047:
    case 10048:
    case 10049:
    case 10050:
    case 10061:
    case 10062:
    case 10063:
    case 10064:
    case 10071:
    case 10072:
    case 10073:
    case 10074:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 120);
      goto LABEL_14;
    case 1015:
    case 1031:
    case 1047:
    case 4735:
    case 4736:
    case 4745:
    case 4746:
    case 4761:
    case 4762:
    case 4763:
    case 4764:
    case 4771:
    case 4772:
    case 4773:
    case 4774:
    case 4775:
    case 4776:
    case 4785:
    case 4786:
    case 4801:
    case 4802:
    case 4803:
    case 4804:
    case 4811:
    case 4812:
    case 4813:
    case 4814:
    case 4821:
    case 4822:
    case 4823:
    case 4824:
    case 4831:
    case 4832:
    case 4833:
    case 4834:
    case 4845:
    case 4846:
    case 4847:
    case 4848:
    case 4855:
    case 4856:
    case 4857:
    case 4858:
    case 4863:
    case 4864:
    case 4873:
    case 4874:
    case 4889:
    case 4890:
    case 4891:
    case 4892:
    case 4899:
    case 4900:
    case 4901:
    case 4902:
    case 4903:
    case 4904:
    case 4913:
    case 4914:
    case 4929:
    case 4930:
    case 4931:
    case 4932:
    case 4939:
    case 4940:
    case 4941:
    case 4942:
    case 4949:
    case 4950:
    case 4951:
    case 4952:
    case 4959:
    case 4960:
    case 4961:
    case 4962:
    case 4973:
    case 4974:
    case 4975:
    case 4976:
    case 4983:
    case 4984:
    case 4985:
    case 4986:
    case 5003:
    case 5004:
    case 5013:
    case 5014:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5039:
    case 5040:
    case 5041:
    case 5042:
    case 5043:
    case 5044:
    case 5053:
    case 5054:
    case 5069:
    case 5070:
    case 5071:
    case 5072:
    case 5079:
    case 5080:
    case 5081:
    case 5082:
    case 5089:
    case 5090:
    case 5091:
    case 5092:
    case 5099:
    case 5100:
    case 5101:
    case 5102:
    case 5113:
    case 5114:
    case 5115:
    case 5116:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5131:
    case 5132:
    case 5141:
    case 5142:
    case 5157:
    case 5158:
    case 5159:
    case 5160:
    case 5167:
    case 5168:
    case 5169:
    case 5170:
    case 5171:
    case 5172:
    case 5181:
    case 5182:
    case 5197:
    case 5198:
    case 5199:
    case 5200:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5217:
    case 5218:
    case 5219:
    case 5220:
    case 5227:
    case 5228:
    case 5229:
    case 5230:
    case 5241:
    case 5242:
    case 5243:
    case 5244:
    case 5251:
    case 5252:
    case 5253:
    case 5254:
    case 5271:
    case 5272:
    case 5281:
    case 5282:
    case 5297:
    case 5298:
    case 5299:
    case 5300:
    case 5307:
    case 5308:
    case 5309:
    case 5310:
    case 5311:
    case 5312:
    case 5321:
    case 5322:
    case 5337:
    case 5338:
    case 5339:
    case 5340:
    case 5347:
    case 5348:
    case 5349:
    case 5350:
    case 5357:
    case 5358:
    case 5359:
    case 5360:
    case 5367:
    case 5368:
    case 5369:
    case 5370:
    case 5381:
    case 5382:
    case 5383:
    case 5384:
    case 5391:
    case 5392:
    case 5393:
    case 5394:
    case 5399:
    case 5400:
    case 5409:
    case 5410:
    case 5425:
    case 5426:
    case 5427:
    case 5428:
    case 5435:
    case 5436:
    case 5437:
    case 5438:
    case 5439:
    case 5440:
    case 5449:
    case 5450:
    case 5465:
    case 5466:
    case 5467:
    case 5468:
    case 5475:
    case 5476:
    case 5477:
    case 5478:
    case 5485:
    case 5486:
    case 5487:
    case 5488:
    case 5495:
    case 5496:
    case 5497:
    case 5498:
    case 5509:
    case 5510:
    case 5511:
    case 5512:
    case 5519:
    case 5520:
    case 5521:
    case 5522:
    case 5539:
    case 5540:
    case 5549:
    case 5550:
    case 5565:
    case 5566:
    case 5567:
    case 5568:
    case 5575:
    case 5576:
    case 5577:
    case 5578:
    case 5579:
    case 5580:
    case 5589:
    case 5590:
    case 5605:
    case 5606:
    case 5607:
    case 5608:
    case 5615:
    case 5616:
    case 5617:
    case 5618:
    case 5625:
    case 5626:
    case 5627:
    case 5628:
    case 5635:
    case 5636:
    case 5637:
    case 5638:
    case 5649:
    case 5650:
    case 5651:
    case 5652:
    case 5659:
    case 5660:
    case 5661:
    case 5662:
    case 5667:
    case 5668:
    case 5677:
    case 5678:
    case 5693:
    case 5694:
    case 5695:
    case 5696:
    case 5703:
    case 5704:
    case 5705:
    case 5706:
    case 5707:
    case 5708:
    case 5717:
    case 5718:
    case 5733:
    case 5734:
    case 5735:
    case 5736:
    case 5743:
    case 5744:
    case 5745:
    case 5746:
    case 5753:
    case 5754:
    case 5755:
    case 5756:
    case 5763:
    case 5764:
    case 5765:
    case 5766:
    case 5777:
    case 5778:
    case 5779:
    case 5780:
    case 5787:
    case 5788:
    case 5789:
    case 5790:
    case 5807:
    case 5808:
    case 5817:
    case 5818:
    case 5833:
    case 5834:
    case 5835:
    case 5836:
    case 5843:
    case 5844:
    case 5845:
    case 5846:
    case 5847:
    case 5848:
    case 5857:
    case 5858:
    case 5873:
    case 5874:
    case 5875:
    case 5876:
    case 5883:
    case 5884:
    case 5885:
    case 5886:
    case 5893:
    case 5894:
    case 5895:
    case 5896:
    case 5903:
    case 5904:
    case 5905:
    case 5906:
    case 5917:
    case 5918:
    case 5919:
    case 5920:
    case 5927:
    case 5928:
    case 5929:
    case 5930:
    case 5935:
    case 5936:
    case 5945:
    case 5946:
    case 5961:
    case 5962:
    case 5963:
    case 5964:
    case 5971:
    case 5972:
    case 5973:
    case 5974:
    case 5975:
    case 5976:
    case 5985:
    case 5986:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
    case 6031:
    case 6032:
    case 6033:
    case 6034:
    case 6045:
    case 6046:
    case 6047:
    case 6048:
    case 6055:
    case 6056:
    case 6057:
    case 6058:
    case 6075:
    case 6076:
    case 6085:
    case 6086:
    case 6101:
    case 6102:
    case 6103:
    case 6104:
    case 6111:
    case 6112:
    case 6113:
    case 6114:
    case 6115:
    case 6116:
    case 6125:
    case 6126:
    case 6141:
    case 6142:
    case 6143:
    case 6144:
    case 6151:
    case 6152:
    case 6153:
    case 6154:
    case 6161:
    case 6162:
    case 6163:
    case 6164:
    case 6171:
    case 6172:
    case 6173:
    case 6174:
    case 6185:
    case 6186:
    case 6187:
    case 6188:
    case 6195:
    case 6196:
    case 6197:
    case 6198:
    case 6203:
    case 6204:
    case 6213:
    case 6214:
    case 6229:
    case 6230:
    case 6231:
    case 6232:
    case 6239:
    case 6240:
    case 6241:
    case 6242:
    case 6243:
    case 6244:
    case 6253:
    case 6254:
    case 6269:
    case 6270:
    case 6271:
    case 6272:
    case 6279:
    case 6280:
    case 6281:
    case 6282:
    case 6289:
    case 6290:
    case 6291:
    case 6292:
    case 6299:
    case 6300:
    case 6301:
    case 6302:
    case 6313:
    case 6314:
    case 6315:
    case 6316:
    case 6323:
    case 6324:
    case 6325:
    case 6326:
    case 6343:
    case 6344:
    case 6353:
    case 6354:
    case 6369:
    case 6370:
    case 6371:
    case 6372:
    case 6379:
    case 6380:
    case 6381:
    case 6382:
    case 6383:
    case 6384:
    case 6393:
    case 6394:
    case 6409:
    case 6410:
    case 6411:
    case 6412:
    case 6419:
    case 6420:
    case 6421:
    case 6422:
    case 6429:
    case 6430:
    case 6431:
    case 6432:
    case 6439:
    case 6440:
    case 6441:
    case 6442:
    case 6453:
    case 6454:
    case 6455:
    case 6456:
    case 6463:
    case 6464:
    case 6465:
    case 6466:
    case 6471:
    case 6472:
    case 6481:
    case 6482:
    case 6497:
    case 6498:
    case 6499:
    case 6500:
    case 6507:
    case 6508:
    case 6509:
    case 6510:
    case 6511:
    case 6512:
    case 6521:
    case 6522:
    case 6537:
    case 6538:
    case 6539:
    case 6540:
    case 6547:
    case 6548:
    case 6549:
    case 6550:
    case 6557:
    case 6558:
    case 6559:
    case 6560:
    case 6567:
    case 6568:
    case 6569:
    case 6570:
    case 6581:
    case 6582:
    case 6583:
    case 6584:
    case 6591:
    case 6592:
    case 6593:
    case 6594:
    case 6611:
    case 6612:
    case 6621:
    case 6622:
    case 6637:
    case 6638:
    case 6639:
    case 6640:
    case 6647:
    case 6648:
    case 6649:
    case 6650:
    case 6651:
    case 6652:
    case 6661:
    case 6662:
    case 6677:
    case 6678:
    case 6679:
    case 6680:
    case 6687:
    case 6688:
    case 6689:
    case 6690:
    case 6697:
    case 6698:
    case 6699:
    case 6700:
    case 6707:
    case 6708:
    case 6709:
    case 6710:
    case 6721:
    case 6722:
    case 6723:
    case 6724:
    case 6731:
    case 6732:
    case 6733:
    case 6734:
    case 6739:
    case 6740:
    case 6749:
    case 6750:
    case 6765:
    case 6766:
    case 6767:
    case 6768:
    case 6775:
    case 6776:
    case 6777:
    case 6778:
    case 6779:
    case 6780:
    case 6789:
    case 6790:
    case 6805:
    case 6806:
    case 6807:
    case 6808:
    case 6815:
    case 6816:
    case 6817:
    case 6818:
    case 6825:
    case 6826:
    case 6827:
    case 6828:
    case 6835:
    case 6836:
    case 6837:
    case 6838:
    case 6849:
    case 6850:
    case 6851:
    case 6852:
    case 6859:
    case 6860:
    case 6861:
    case 6862:
    case 6879:
    case 6880:
    case 6889:
    case 6890:
    case 6905:
    case 6906:
    case 6907:
    case 6908:
    case 6915:
    case 6916:
    case 6917:
    case 6918:
    case 6919:
    case 6920:
    case 6929:
    case 6930:
    case 6945:
    case 6946:
    case 6947:
    case 6948:
    case 6955:
    case 6956:
    case 6957:
    case 6958:
    case 6965:
    case 6966:
    case 6967:
    case 6968:
    case 6975:
    case 6976:
    case 6977:
    case 6978:
    case 6989:
    case 6990:
    case 6991:
    case 6992:
    case 6999:
    case 7000:
    case 7001:
    case 7002:
    case 7007:
    case 7008:
    case 7017:
    case 7018:
    case 7033:
    case 7034:
    case 7035:
    case 7036:
    case 7043:
    case 7044:
    case 7045:
    case 7046:
    case 7047:
    case 7048:
    case 7057:
    case 7058:
    case 7073:
    case 7074:
    case 7075:
    case 7076:
    case 7083:
    case 7084:
    case 7085:
    case 7086:
    case 7093:
    case 7094:
    case 7095:
    case 7096:
    case 7103:
    case 7104:
    case 7105:
    case 7106:
    case 7117:
    case 7118:
    case 7119:
    case 7120:
    case 7127:
    case 7128:
    case 7129:
    case 7130:
    case 7147:
    case 7148:
    case 7157:
    case 7158:
    case 7173:
    case 7174:
    case 7175:
    case 7176:
    case 7183:
    case 7184:
    case 7185:
    case 7186:
    case 7187:
    case 7188:
    case 7197:
    case 7198:
    case 7213:
    case 7214:
    case 7215:
    case 7216:
    case 7223:
    case 7224:
    case 7225:
    case 7226:
    case 7233:
    case 7234:
    case 7235:
    case 7236:
    case 7243:
    case 7244:
    case 7245:
    case 7246:
    case 7257:
    case 7258:
    case 7259:
    case 7260:
    case 7267:
    case 7268:
    case 7269:
    case 7270:
    case 7275:
    case 7276:
    case 7285:
    case 7286:
    case 7301:
    case 7302:
    case 7303:
    case 7304:
    case 7311:
    case 7312:
    case 7313:
    case 7314:
    case 7315:
    case 7316:
    case 7325:
    case 7326:
    case 7341:
    case 7342:
    case 7343:
    case 7344:
    case 7351:
    case 7352:
    case 7353:
    case 7354:
    case 7361:
    case 7362:
    case 7363:
    case 7364:
    case 7371:
    case 7372:
    case 7373:
    case 7374:
    case 7385:
    case 7386:
    case 7387:
    case 7388:
    case 7395:
    case 7396:
    case 7397:
    case 7398:
    case 7415:
    case 7416:
    case 7425:
    case 7426:
    case 7441:
    case 7442:
    case 7443:
    case 7444:
    case 7451:
    case 7452:
    case 7453:
    case 7454:
    case 7455:
    case 7456:
    case 7465:
    case 7466:
    case 7481:
    case 7482:
    case 7483:
    case 7484:
    case 7491:
    case 7492:
    case 7493:
    case 7494:
    case 7501:
    case 7502:
    case 7503:
    case 7504:
    case 7511:
    case 7512:
    case 7513:
    case 7514:
    case 7525:
    case 7526:
    case 7527:
    case 7528:
    case 7535:
    case 7536:
    case 7537:
    case 7538:
    case 7543:
    case 7544:
    case 7553:
    case 7554:
    case 7569:
    case 7570:
    case 7571:
    case 7572:
    case 7579:
    case 7580:
    case 7581:
    case 7582:
    case 7583:
    case 7584:
    case 7593:
    case 7594:
    case 7609:
    case 7610:
    case 7611:
    case 7612:
    case 7619:
    case 7620:
    case 7621:
    case 7622:
    case 7629:
    case 7630:
    case 7631:
    case 7632:
    case 7639:
    case 7640:
    case 7641:
    case 7642:
    case 7653:
    case 7654:
    case 7655:
    case 7656:
    case 7663:
    case 7664:
    case 7665:
    case 7666:
    case 7683:
    case 7684:
    case 7693:
    case 7694:
    case 7709:
    case 7710:
    case 7711:
    case 7712:
    case 7719:
    case 7720:
    case 7721:
    case 7722:
    case 7723:
    case 7724:
    case 7733:
    case 7734:
    case 7749:
    case 7750:
    case 7751:
    case 7752:
    case 7759:
    case 7760:
    case 7761:
    case 7762:
    case 7769:
    case 7770:
    case 7771:
    case 7772:
    case 7779:
    case 7780:
    case 7781:
    case 7782:
    case 7793:
    case 7794:
    case 7795:
    case 7796:
    case 7803:
    case 7804:
    case 7805:
    case 7806:
    case 7811:
    case 7812:
    case 7821:
    case 7822:
    case 7837:
    case 7838:
    case 7839:
    case 7840:
    case 7847:
    case 7848:
    case 7849:
    case 7850:
    case 7851:
    case 7852:
    case 7861:
    case 7862:
    case 7877:
    case 7878:
    case 7879:
    case 7880:
    case 7887:
    case 7888:
    case 7889:
    case 7890:
    case 7897:
    case 7898:
    case 7899:
    case 7900:
    case 7907:
    case 7908:
    case 7909:
    case 7910:
    case 7921:
    case 7922:
    case 7923:
    case 7924:
    case 7931:
    case 7932:
    case 7933:
    case 7934:
    case 7951:
    case 7952:
    case 7961:
    case 7962:
    case 7977:
    case 7978:
    case 7979:
    case 7980:
    case 7987:
    case 7988:
    case 7989:
    case 7990:
    case 7991:
    case 7992:
    case 8001:
    case 8002:
    case 8017:
    case 8018:
    case 8019:
    case 8020:
    case 8027:
    case 8028:
    case 8029:
    case 8030:
    case 8037:
    case 8038:
    case 8039:
    case 8040:
    case 8047:
    case 8048:
    case 8049:
    case 8050:
    case 8061:
    case 8062:
    case 8063:
    case 8064:
    case 8071:
    case 8072:
    case 8073:
    case 8074:
    case 8079:
    case 8080:
    case 8089:
    case 8090:
    case 8105:
    case 8106:
    case 8107:
    case 8108:
    case 8115:
    case 8116:
    case 8117:
    case 8118:
    case 8119:
    case 8120:
    case 8129:
    case 8130:
    case 8145:
    case 8146:
    case 8147:
    case 8148:
    case 8155:
    case 8156:
    case 8157:
    case 8158:
    case 8165:
    case 8166:
    case 8167:
    case 8168:
    case 8175:
    case 8176:
    case 8177:
    case 8178:
    case 8189:
    case 8190:
    case 8191:
    case 8192:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8219:
    case 8220:
    case 8229:
    case 8230:
    case 8245:
    case 8246:
    case 8247:
    case 8248:
    case 8255:
    case 8256:
    case 8257:
    case 8258:
    case 8259:
    case 8260:
    case 8269:
    case 8270:
    case 8285:
    case 8286:
    case 8287:
    case 8288:
    case 8295:
    case 8296:
    case 8297:
    case 8298:
    case 8305:
    case 8306:
    case 8307:
    case 8308:
    case 8315:
    case 8316:
    case 8317:
    case 8318:
    case 8329:
    case 8330:
    case 8331:
    case 8332:
    case 8339:
    case 8340:
    case 8341:
    case 8342:
    case 8347:
    case 8348:
    case 8357:
    case 8358:
    case 8373:
    case 8374:
    case 8375:
    case 8376:
    case 8383:
    case 8384:
    case 8385:
    case 8386:
    case 8387:
    case 8388:
    case 8397:
    case 8398:
    case 8413:
    case 8414:
    case 8415:
    case 8416:
    case 8423:
    case 8424:
    case 8425:
    case 8426:
    case 8433:
    case 8434:
    case 8435:
    case 8436:
    case 8443:
    case 8444:
    case 8445:
    case 8446:
    case 8457:
    case 8458:
    case 8459:
    case 8460:
    case 8467:
    case 8468:
    case 8469:
    case 8470:
    case 8487:
    case 8488:
    case 8497:
    case 8498:
    case 8513:
    case 8514:
    case 8515:
    case 8516:
    case 8523:
    case 8524:
    case 8525:
    case 8526:
    case 8527:
    case 8528:
    case 8537:
    case 8538:
    case 8553:
    case 8554:
    case 8555:
    case 8556:
    case 8563:
    case 8564:
    case 8565:
    case 8566:
    case 8573:
    case 8574:
    case 8575:
    case 8576:
    case 8583:
    case 8584:
    case 8585:
    case 8586:
    case 8597:
    case 8598:
    case 8599:
    case 8600:
    case 8607:
    case 8608:
    case 8609:
    case 8610:
    case 8615:
    case 8616:
    case 8625:
    case 8626:
    case 8641:
    case 8642:
    case 8643:
    case 8644:
    case 8651:
    case 8652:
    case 8653:
    case 8654:
    case 8655:
    case 8656:
    case 8665:
    case 8666:
    case 8681:
    case 8682:
    case 8683:
    case 8684:
    case 8691:
    case 8692:
    case 8693:
    case 8694:
    case 8701:
    case 8702:
    case 8703:
    case 8704:
    case 8711:
    case 8712:
    case 8713:
    case 8714:
    case 8725:
    case 8726:
    case 8727:
    case 8728:
    case 8735:
    case 8736:
    case 8737:
    case 8738:
    case 8755:
    case 8756:
    case 8765:
    case 8766:
    case 8781:
    case 8782:
    case 8783:
    case 8784:
    case 8791:
    case 8792:
    case 8793:
    case 8794:
    case 8795:
    case 8796:
    case 8805:
    case 8806:
    case 8821:
    case 8822:
    case 8823:
    case 8824:
    case 8831:
    case 8832:
    case 8833:
    case 8834:
    case 8841:
    case 8842:
    case 8843:
    case 8844:
    case 8851:
    case 8852:
    case 8853:
    case 8854:
    case 8865:
    case 8866:
    case 8867:
    case 8868:
    case 8875:
    case 8876:
    case 8877:
    case 8878:
    case 8883:
    case 8884:
    case 8893:
    case 8894:
    case 8909:
    case 8910:
    case 8911:
    case 8912:
    case 8919:
    case 8920:
    case 8921:
    case 8922:
    case 8923:
    case 8924:
    case 8933:
    case 8934:
    case 8949:
    case 8950:
    case 8951:
    case 8952:
    case 8959:
    case 8960:
    case 8961:
    case 8962:
    case 8969:
    case 8970:
    case 8971:
    case 8972:
    case 8979:
    case 8980:
    case 8981:
    case 8982:
    case 8993:
    case 8994:
    case 8995:
    case 8996:
    case 9003:
    case 9004:
    case 9005:
    case 9006:
    case 9023:
    case 9024:
    case 9033:
    case 9034:
    case 9049:
    case 9050:
    case 9051:
    case 9052:
    case 9059:
    case 9060:
    case 9061:
    case 9062:
    case 9063:
    case 9064:
    case 9073:
    case 9074:
    case 9089:
    case 9090:
    case 9091:
    case 9092:
    case 9099:
    case 9100:
    case 9101:
    case 9102:
    case 9109:
    case 9110:
    case 9111:
    case 9112:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9143:
    case 9144:
    case 9145:
    case 9146:
    case 9151:
    case 9152:
    case 9161:
    case 9162:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9201:
    case 9202:
    case 9217:
    case 9218:
    case 9219:
    case 9220:
    case 9227:
    case 9228:
    case 9229:
    case 9230:
    case 9237:
    case 9238:
    case 9239:
    case 9240:
    case 9247:
    case 9248:
    case 9249:
    case 9250:
    case 9261:
    case 9262:
    case 9263:
    case 9264:
    case 9271:
    case 9272:
    case 9273:
    case 9274:
    case 9291:
    case 9292:
    case 9301:
    case 9302:
    case 9317:
    case 9318:
    case 9319:
    case 9320:
    case 9327:
    case 9328:
    case 9329:
    case 9330:
    case 9331:
    case 9332:
    case 9341:
    case 9342:
    case 9357:
    case 9358:
    case 9359:
    case 9360:
    case 9367:
    case 9368:
    case 9369:
    case 9370:
    case 9377:
    case 9378:
    case 9379:
    case 9380:
    case 9387:
    case 9388:
    case 9389:
    case 9390:
    case 9401:
    case 9402:
    case 9403:
    case 9404:
    case 9411:
    case 9412:
    case 9413:
    case 9414:
    case 9419:
    case 9420:
    case 9429:
    case 9430:
    case 9445:
    case 9446:
    case 9447:
    case 9448:
    case 9455:
    case 9456:
    case 9457:
    case 9458:
    case 9459:
    case 9460:
    case 9469:
    case 9470:
    case 9485:
    case 9486:
    case 9487:
    case 9488:
    case 9495:
    case 9496:
    case 9497:
    case 9498:
    case 9505:
    case 9506:
    case 9507:
    case 9508:
    case 9515:
    case 9516:
    case 9517:
    case 9518:
    case 9529:
    case 9530:
    case 9531:
    case 9532:
    case 9539:
    case 9540:
    case 9541:
    case 9542:
    case 9559:
    case 9560:
    case 9569:
    case 9570:
    case 9585:
    case 9586:
    case 9587:
    case 9588:
    case 9595:
    case 9596:
    case 9597:
    case 9598:
    case 9599:
    case 9600:
    case 9609:
    case 9610:
    case 9625:
    case 9626:
    case 9627:
    case 9628:
    case 9635:
    case 9636:
    case 9637:
    case 9638:
    case 9645:
    case 9646:
    case 9647:
    case 9648:
    case 9655:
    case 9656:
    case 9657:
    case 9658:
    case 9669:
    case 9670:
    case 9671:
    case 9672:
    case 9679:
    case 9680:
    case 9681:
    case 9682:
    case 9687:
    case 9688:
    case 9697:
    case 9698:
    case 9713:
    case 9714:
    case 9715:
    case 9716:
    case 9723:
    case 9724:
    case 9725:
    case 9726:
    case 9727:
    case 9728:
    case 9737:
    case 9738:
    case 9753:
    case 9754:
    case 9755:
    case 9756:
    case 9763:
    case 9764:
    case 9765:
    case 9766:
    case 9773:
    case 9774:
    case 9775:
    case 9776:
    case 9783:
    case 9784:
    case 9785:
    case 9786:
    case 9797:
    case 9798:
    case 9799:
    case 9800:
    case 9807:
    case 9808:
    case 9809:
    case 9810:
    case 9827:
    case 9828:
    case 9837:
    case 9838:
    case 9853:
    case 9854:
    case 9855:
    case 9856:
    case 9863:
    case 9864:
    case 9865:
    case 9866:
    case 9867:
    case 9868:
    case 9877:
    case 9878:
    case 9893:
    case 9894:
    case 9895:
    case 9896:
    case 9903:
    case 9904:
    case 9905:
    case 9906:
    case 9913:
    case 9914:
    case 9915:
    case 9916:
    case 9923:
    case 9924:
    case 9925:
    case 9926:
    case 9937:
    case 9938:
    case 9939:
    case 9940:
    case 9947:
    case 9948:
    case 9949:
    case 9950:
    case 9955:
    case 9956:
    case 9965:
    case 9966:
    case 9981:
    case 9982:
    case 9983:
    case 9984:
    case 9991:
    case 9992:
    case 9993:
    case 9994:
    case 9995:
    case 9996:
    case 10005:
    case 10006:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10041:
    case 10042:
    case 10043:
    case 10044:
    case 10051:
    case 10052:
    case 10053:
    case 10054:
    case 10065:
    case 10066:
    case 10067:
    case 10068:
    case 10075:
    case 10076:
    case 10077:
    case 10078:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 104);
      goto LABEL_14;
    case 1016:
    case 1032:
    case 1048:
    case 4755:
    case 4756:
    case 4765:
    case 4766:
    case 4795:
    case 4796:
    case 4805:
    case 4806:
    case 4815:
    case 4816:
    case 4825:
    case 4826:
    case 4837:
    case 4838:
    case 4839:
    case 4840:
    case 4849:
    case 4850:
    case 4861:
    case 4862:
    case 4883:
    case 4884:
    case 4893:
    case 4894:
    case 4923:
    case 4924:
    case 4933:
    case 4934:
    case 4943:
    case 4944:
    case 4953:
    case 4954:
    case 4965:
    case 4966:
    case 4967:
    case 4968:
    case 4977:
    case 4978:
    case 4989:
    case 4990:
    case 4991:
    case 4992:
    case 4995:
    case 4996:
    case 5023:
    case 5024:
    case 5033:
    case 5034:
    case 5063:
    case 5064:
    case 5073:
    case 5074:
    case 5083:
    case 5084:
    case 5093:
    case 5094:
    case 5105:
    case 5106:
    case 5107:
    case 5108:
    case 5117:
    case 5118:
    case 5129:
    case 5130:
    case 5151:
    case 5152:
    case 5161:
    case 5162:
    case 5191:
    case 5192:
    case 5201:
    case 5202:
    case 5211:
    case 5212:
    case 5221:
    case 5222:
    case 5233:
    case 5234:
    case 5235:
    case 5236:
    case 5245:
    case 5246:
    case 5257:
    case 5258:
    case 5259:
    case 5260:
    case 5263:
    case 5264:
    case 5291:
    case 5292:
    case 5301:
    case 5302:
    case 5331:
    case 5332:
    case 5341:
    case 5342:
    case 5351:
    case 5352:
    case 5361:
    case 5362:
    case 5373:
    case 5374:
    case 5375:
    case 5376:
    case 5385:
    case 5386:
    case 5397:
    case 5398:
    case 5419:
    case 5420:
    case 5429:
    case 5430:
    case 5459:
    case 5460:
    case 5469:
    case 5470:
    case 5479:
    case 5480:
    case 5489:
    case 5490:
    case 5501:
    case 5502:
    case 5503:
    case 5504:
    case 5513:
    case 5514:
    case 5525:
    case 5526:
    case 5527:
    case 5528:
    case 5531:
    case 5532:
    case 5559:
    case 5560:
    case 5569:
    case 5570:
    case 5599:
    case 5600:
    case 5609:
    case 5610:
    case 5619:
    case 5620:
    case 5629:
    case 5630:
    case 5641:
    case 5642:
    case 5643:
    case 5644:
    case 5653:
    case 5654:
    case 5665:
    case 5666:
    case 5687:
    case 5688:
    case 5697:
    case 5698:
    case 5727:
    case 5728:
    case 5737:
    case 5738:
    case 5747:
    case 5748:
    case 5757:
    case 5758:
    case 5769:
    case 5770:
    case 5771:
    case 5772:
    case 5781:
    case 5782:
    case 5793:
    case 5794:
    case 5795:
    case 5796:
    case 5799:
    case 5800:
    case 5827:
    case 5828:
    case 5837:
    case 5838:
    case 5867:
    case 5868:
    case 5877:
    case 5878:
    case 5887:
    case 5888:
    case 5897:
    case 5898:
    case 5909:
    case 5910:
    case 5911:
    case 5912:
    case 5921:
    case 5922:
    case 5933:
    case 5934:
    case 5955:
    case 5956:
    case 5965:
    case 5966:
    case 5995:
    case 5996:
    case 6005:
    case 6006:
    case 6015:
    case 6016:
    case 6025:
    case 6026:
    case 6037:
    case 6038:
    case 6039:
    case 6040:
    case 6049:
    case 6050:
    case 6061:
    case 6062:
    case 6063:
    case 6064:
    case 6067:
    case 6068:
    case 6095:
    case 6096:
    case 6105:
    case 6106:
    case 6135:
    case 6136:
    case 6145:
    case 6146:
    case 6155:
    case 6156:
    case 6165:
    case 6166:
    case 6177:
    case 6178:
    case 6179:
    case 6180:
    case 6189:
    case 6190:
    case 6201:
    case 6202:
    case 6223:
    case 6224:
    case 6233:
    case 6234:
    case 6263:
    case 6264:
    case 6273:
    case 6274:
    case 6283:
    case 6284:
    case 6293:
    case 6294:
    case 6305:
    case 6306:
    case 6307:
    case 6308:
    case 6317:
    case 6318:
    case 6329:
    case 6330:
    case 6331:
    case 6332:
    case 6335:
    case 6336:
    case 6363:
    case 6364:
    case 6373:
    case 6374:
    case 6403:
    case 6404:
    case 6413:
    case 6414:
    case 6423:
    case 6424:
    case 6433:
    case 6434:
    case 6445:
    case 6446:
    case 6447:
    case 6448:
    case 6457:
    case 6458:
    case 6469:
    case 6470:
    case 6491:
    case 6492:
    case 6501:
    case 6502:
    case 6531:
    case 6532:
    case 6541:
    case 6542:
    case 6551:
    case 6552:
    case 6561:
    case 6562:
    case 6573:
    case 6574:
    case 6575:
    case 6576:
    case 6585:
    case 6586:
    case 6597:
    case 6598:
    case 6599:
    case 6600:
    case 6603:
    case 6604:
    case 6631:
    case 6632:
    case 6641:
    case 6642:
    case 6671:
    case 6672:
    case 6681:
    case 6682:
    case 6691:
    case 6692:
    case 6701:
    case 6702:
    case 6713:
    case 6714:
    case 6715:
    case 6716:
    case 6725:
    case 6726:
    case 6737:
    case 6738:
    case 6759:
    case 6760:
    case 6769:
    case 6770:
    case 6799:
    case 6800:
    case 6809:
    case 6810:
    case 6819:
    case 6820:
    case 6829:
    case 6830:
    case 6841:
    case 6842:
    case 6843:
    case 6844:
    case 6853:
    case 6854:
    case 6865:
    case 6866:
    case 6867:
    case 6868:
    case 6871:
    case 6872:
    case 6899:
    case 6900:
    case 6909:
    case 6910:
    case 6939:
    case 6940:
    case 6949:
    case 6950:
    case 6959:
    case 6960:
    case 6969:
    case 6970:
    case 6981:
    case 6982:
    case 6983:
    case 6984:
    case 6993:
    case 6994:
    case 7005:
    case 7006:
    case 7027:
    case 7028:
    case 7037:
    case 7038:
    case 7067:
    case 7068:
    case 7077:
    case 7078:
    case 7087:
    case 7088:
    case 7097:
    case 7098:
    case 7109:
    case 7110:
    case 7111:
    case 7112:
    case 7121:
    case 7122:
    case 7133:
    case 7134:
    case 7135:
    case 7136:
    case 7139:
    case 7140:
    case 7167:
    case 7168:
    case 7177:
    case 7178:
    case 7207:
    case 7208:
    case 7217:
    case 7218:
    case 7227:
    case 7228:
    case 7237:
    case 7238:
    case 7249:
    case 7250:
    case 7251:
    case 7252:
    case 7261:
    case 7262:
    case 7273:
    case 7274:
    case 7295:
    case 7296:
    case 7305:
    case 7306:
    case 7335:
    case 7336:
    case 7345:
    case 7346:
    case 7355:
    case 7356:
    case 7365:
    case 7366:
    case 7377:
    case 7378:
    case 7379:
    case 7380:
    case 7389:
    case 7390:
    case 7401:
    case 7402:
    case 7403:
    case 7404:
    case 7407:
    case 7408:
    case 7435:
    case 7436:
    case 7445:
    case 7446:
    case 7475:
    case 7476:
    case 7485:
    case 7486:
    case 7495:
    case 7496:
    case 7505:
    case 7506:
    case 7517:
    case 7518:
    case 7519:
    case 7520:
    case 7529:
    case 7530:
    case 7541:
    case 7542:
    case 7563:
    case 7564:
    case 7573:
    case 7574:
    case 7603:
    case 7604:
    case 7613:
    case 7614:
    case 7623:
    case 7624:
    case 7633:
    case 7634:
    case 7645:
    case 7646:
    case 7647:
    case 7648:
    case 7657:
    case 7658:
    case 7669:
    case 7670:
    case 7671:
    case 7672:
    case 7675:
    case 7676:
    case 7703:
    case 7704:
    case 7713:
    case 7714:
    case 7743:
    case 7744:
    case 7753:
    case 7754:
    case 7763:
    case 7764:
    case 7773:
    case 7774:
    case 7785:
    case 7786:
    case 7787:
    case 7788:
    case 7797:
    case 7798:
    case 7809:
    case 7810:
    case 7831:
    case 7832:
    case 7841:
    case 7842:
    case 7871:
    case 7872:
    case 7881:
    case 7882:
    case 7891:
    case 7892:
    case 7901:
    case 7902:
    case 7913:
    case 7914:
    case 7915:
    case 7916:
    case 7925:
    case 7926:
    case 7937:
    case 7938:
    case 7939:
    case 7940:
    case 7943:
    case 7944:
    case 7971:
    case 7972:
    case 7981:
    case 7982:
    case 8011:
    case 8012:
    case 8021:
    case 8022:
    case 8031:
    case 8032:
    case 8041:
    case 8042:
    case 8053:
    case 8054:
    case 8055:
    case 8056:
    case 8065:
    case 8066:
    case 8077:
    case 8078:
    case 8099:
    case 8100:
    case 8109:
    case 8110:
    case 8139:
    case 8140:
    case 8149:
    case 8150:
    case 8159:
    case 8160:
    case 8169:
    case 8170:
    case 8181:
    case 8182:
    case 8183:
    case 8184:
    case 8193:
    case 8194:
    case 8205:
    case 8206:
    case 8207:
    case 8208:
    case 8211:
    case 8212:
    case 8239:
    case 8240:
    case 8249:
    case 8250:
    case 8279:
    case 8280:
    case 8289:
    case 8290:
    case 8299:
    case 8300:
    case 8309:
    case 8310:
    case 8321:
    case 8322:
    case 8323:
    case 8324:
    case 8333:
    case 8334:
    case 8345:
    case 8346:
    case 8367:
    case 8368:
    case 8377:
    case 8378:
    case 8407:
    case 8408:
    case 8417:
    case 8418:
    case 8427:
    case 8428:
    case 8437:
    case 8438:
    case 8449:
    case 8450:
    case 8451:
    case 8452:
    case 8461:
    case 8462:
    case 8473:
    case 8474:
    case 8475:
    case 8476:
    case 8479:
    case 8480:
    case 8507:
    case 8508:
    case 8517:
    case 8518:
    case 8547:
    case 8548:
    case 8557:
    case 8558:
    case 8567:
    case 8568:
    case 8577:
    case 8578:
    case 8589:
    case 8590:
    case 8591:
    case 8592:
    case 8601:
    case 8602:
    case 8613:
    case 8614:
    case 8635:
    case 8636:
    case 8645:
    case 8646:
    case 8675:
    case 8676:
    case 8685:
    case 8686:
    case 8695:
    case 8696:
    case 8705:
    case 8706:
    case 8717:
    case 8718:
    case 8719:
    case 8720:
    case 8729:
    case 8730:
    case 8741:
    case 8742:
    case 8743:
    case 8744:
    case 8747:
    case 8748:
    case 8775:
    case 8776:
    case 8785:
    case 8786:
    case 8815:
    case 8816:
    case 8825:
    case 8826:
    case 8835:
    case 8836:
    case 8845:
    case 8846:
    case 8857:
    case 8858:
    case 8859:
    case 8860:
    case 8869:
    case 8870:
    case 8881:
    case 8882:
    case 8903:
    case 8904:
    case 8913:
    case 8914:
    case 8943:
    case 8944:
    case 8953:
    case 8954:
    case 8963:
    case 8964:
    case 8973:
    case 8974:
    case 8985:
    case 8986:
    case 8987:
    case 8988:
    case 8997:
    case 8998:
    case 9009:
    case 9010:
    case 9011:
    case 9012:
    case 9015:
    case 9016:
    case 9043:
    case 9044:
    case 9053:
    case 9054:
    case 9083:
    case 9084:
    case 9093:
    case 9094:
    case 9103:
    case 9104:
    case 9113:
    case 9114:
    case 9125:
    case 9126:
    case 9127:
    case 9128:
    case 9137:
    case 9138:
    case 9149:
    case 9150:
    case 9171:
    case 9172:
    case 9181:
    case 9182:
    case 9211:
    case 9212:
    case 9221:
    case 9222:
    case 9231:
    case 9232:
    case 9241:
    case 9242:
    case 9253:
    case 9254:
    case 9255:
    case 9256:
    case 9265:
    case 9266:
    case 9277:
    case 9278:
    case 9279:
    case 9280:
    case 9283:
    case 9284:
    case 9311:
    case 9312:
    case 9321:
    case 9322:
    case 9351:
    case 9352:
    case 9361:
    case 9362:
    case 9371:
    case 9372:
    case 9381:
    case 9382:
    case 9393:
    case 9394:
    case 9395:
    case 9396:
    case 9405:
    case 9406:
    case 9417:
    case 9418:
    case 9439:
    case 9440:
    case 9449:
    case 9450:
    case 9479:
    case 9480:
    case 9489:
    case 9490:
    case 9499:
    case 9500:
    case 9509:
    case 9510:
    case 9521:
    case 9522:
    case 9523:
    case 9524:
    case 9533:
    case 9534:
    case 9545:
    case 9546:
    case 9547:
    case 9548:
    case 9551:
    case 9552:
    case 9579:
    case 9580:
    case 9589:
    case 9590:
    case 9619:
    case 9620:
    case 9629:
    case 9630:
    case 9639:
    case 9640:
    case 9649:
    case 9650:
    case 9661:
    case 9662:
    case 9663:
    case 9664:
    case 9673:
    case 9674:
    case 9685:
    case 9686:
    case 9707:
    case 9708:
    case 9717:
    case 9718:
    case 9747:
    case 9748:
    case 9757:
    case 9758:
    case 9767:
    case 9768:
    case 9777:
    case 9778:
    case 9789:
    case 9790:
    case 9791:
    case 9792:
    case 9801:
    case 9802:
    case 9813:
    case 9814:
    case 9815:
    case 9816:
    case 9819:
    case 9820:
    case 9847:
    case 9848:
    case 9857:
    case 9858:
    case 9887:
    case 9888:
    case 9897:
    case 9898:
    case 9907:
    case 9908:
    case 9917:
    case 9918:
    case 9929:
    case 9930:
    case 9931:
    case 9932:
    case 9941:
    case 9942:
    case 9953:
    case 9954:
    case 9975:
    case 9976:
    case 9985:
    case 9986:
    case 10015:
    case 10016:
    case 10025:
    case 10026:
    case 10035:
    case 10036:
    case 10045:
    case 10046:
    case 10057:
    case 10058:
    case 10059:
    case 10060:
    case 10069:
    case 10070:
    case 10081:
    case 10082:
    case 10083:
    case 10084:
    case 10087:
    case 10088:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 88);
      goto LABEL_14;
    case 1017:
    case 1018:
    case 1033:
    case 1034:
    case 1049:
    case 1050:
    case 4835:
    case 4836:
    case 4859:
    case 4860:
    case 4963:
    case 4964:
    case 4987:
    case 4988:
    case 4993:
    case 4994:
    case 4997:
    case 4998:
    case 4999:
    case 5000:
    case 5001:
    case 5002:
    case 5103:
    case 5104:
    case 5127:
    case 5128:
    case 5231:
    case 5232:
    case 5255:
    case 5256:
    case 5261:
    case 5262:
    case 5265:
    case 5266:
    case 5267:
    case 5268:
    case 5269:
    case 5270:
    case 5371:
    case 5372:
    case 5395:
    case 5396:
    case 5499:
    case 5500:
    case 5523:
    case 5524:
    case 5529:
    case 5530:
    case 5533:
    case 5534:
    case 5535:
    case 5536:
    case 5537:
    case 5538:
    case 5639:
    case 5640:
    case 5663:
    case 5664:
    case 5767:
    case 5768:
    case 5791:
    case 5792:
    case 5797:
    case 5798:
    case 5801:
    case 5802:
    case 5803:
    case 5804:
    case 5805:
    case 5806:
    case 5907:
    case 5908:
    case 5931:
    case 5932:
    case 6035:
    case 6036:
    case 6059:
    case 6060:
    case 6065:
    case 6066:
    case 6069:
    case 6070:
    case 6071:
    case 6072:
    case 6073:
    case 6074:
    case 6175:
    case 6176:
    case 6199:
    case 6200:
    case 6303:
    case 6304:
    case 6327:
    case 6328:
    case 6333:
    case 6334:
    case 6337:
    case 6338:
    case 6339:
    case 6340:
    case 6341:
    case 6342:
    case 6443:
    case 6444:
    case 6467:
    case 6468:
    case 6571:
    case 6572:
    case 6595:
    case 6596:
    case 6601:
    case 6602:
    case 6605:
    case 6606:
    case 6607:
    case 6608:
    case 6609:
    case 6610:
    case 6711:
    case 6712:
    case 6735:
    case 6736:
    case 6839:
    case 6840:
    case 6863:
    case 6864:
    case 6869:
    case 6870:
    case 6873:
    case 6874:
    case 6875:
    case 6876:
    case 6877:
    case 6878:
    case 6979:
    case 6980:
    case 7003:
    case 7004:
    case 7107:
    case 7108:
    case 7131:
    case 7132:
    case 7137:
    case 7138:
    case 7141:
    case 7142:
    case 7143:
    case 7144:
    case 7145:
    case 7146:
    case 7247:
    case 7248:
    case 7271:
    case 7272:
    case 7375:
    case 7376:
    case 7399:
    case 7400:
    case 7405:
    case 7406:
    case 7409:
    case 7410:
    case 7411:
    case 7412:
    case 7413:
    case 7414:
    case 7515:
    case 7516:
    case 7539:
    case 7540:
    case 7643:
    case 7644:
    case 7667:
    case 7668:
    case 7673:
    case 7674:
    case 7677:
    case 7678:
    case 7679:
    case 7680:
    case 7681:
    case 7682:
    case 7783:
    case 7784:
    case 7807:
    case 7808:
    case 7911:
    case 7912:
    case 7935:
    case 7936:
    case 7941:
    case 7942:
    case 7945:
    case 7946:
    case 7947:
    case 7948:
    case 7949:
    case 7950:
    case 8051:
    case 8052:
    case 8075:
    case 8076:
    case 8179:
    case 8180:
    case 8203:
    case 8204:
    case 8209:
    case 8210:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8319:
    case 8320:
    case 8343:
    case 8344:
    case 8447:
    case 8448:
    case 8471:
    case 8472:
    case 8477:
    case 8478:
    case 8481:
    case 8482:
    case 8483:
    case 8484:
    case 8485:
    case 8486:
    case 8587:
    case 8588:
    case 8611:
    case 8612:
    case 8715:
    case 8716:
    case 8739:
    case 8740:
    case 8745:
    case 8746:
    case 8749:
    case 8750:
    case 8751:
    case 8752:
    case 8753:
    case 8754:
    case 8855:
    case 8856:
    case 8879:
    case 8880:
    case 8983:
    case 8984:
    case 9007:
    case 9008:
    case 9013:
    case 9014:
    case 9017:
    case 9018:
    case 9019:
    case 9020:
    case 9021:
    case 9022:
    case 9123:
    case 9124:
    case 9147:
    case 9148:
    case 9251:
    case 9252:
    case 9275:
    case 9276:
    case 9281:
    case 9282:
    case 9285:
    case 9286:
    case 9287:
    case 9288:
    case 9289:
    case 9290:
    case 9391:
    case 9392:
    case 9415:
    case 9416:
    case 9519:
    case 9520:
    case 9543:
    case 9544:
    case 9549:
    case 9550:
    case 9553:
    case 9554:
    case 9555:
    case 9556:
    case 9557:
    case 9558:
    case 9659:
    case 9660:
    case 9683:
    case 9684:
    case 9787:
    case 9788:
    case 9811:
    case 9812:
    case 9817:
    case 9818:
    case 9821:
    case 9822:
    case 9823:
    case 9824:
    case 9825:
    case 9826:
    case 9927:
    case 9928:
    case 9951:
    case 9952:
    case 10055:
    case 10056:
    case 10079:
    case 10080:
    case 10085:
    case 10086:
    case 10089:
    case 10090:
    case 10091:
    case 10092:
    case 10093:
    case 10094:
      v10 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 72);
LABEL_14:
      v9 |= (unint64_t)(v10 != 0) << 58;
      return v9;
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1250:
    case 1251:
    case 1252:
    case 1253:
    case 1254:
    case 1255:
    case 1256:
    case 1257:
    case 1258:
    case 1259:
    case 1260:
    case 1261:
    case 1262:
    case 1263:
    case 1264:
    case 1265:
    case 1266:
    case 1267:
    case 1268:
    case 1269:
    case 1270:
    case 1271:
    case 1272:
    case 1273:
    case 1274:
    case 1275:
    case 1276:
    case 1277:
    case 1278:
    case 1279:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
    case 1293:
    case 1294:
    case 1295:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
      v33 = *((_QWORD *)a2 + 2);
      v34 = *(unsigned __int8 *)(v33 + 16);
      if (v34 == 1)
      {
        LOWORD(v35) = sub_1C4B12E5C(a1, v33 + 16, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v34 == 2)
      {
        v35 = *(_DWORD *)(v33 + 24);
      }
      else
      {
        v76 = *(_QWORD *)(v33 + 24);
        if (*(_BYTE *)v76 == 4)
          v35 = *(_DWORD *)(*(_QWORD *)(v76 + 24) + 16) | 0x2000;
        else
          LOWORD(v35) = 0;
      }
      v9 |= (unint64_t)(v35 & 0x800) << 45;
      return v9;
    case 1329:
    case 1330:
    case 1332:
    case 1333:
    case 1338:
    case 1339:
    case 1341:
    case 1342:
    case 1354:
    case 1355:
    case 1357:
    case 1358:
    case 1363:
    case 1364:
    case 1366:
    case 1367:
    case 1381:
    case 1382:
    case 1383:
    case 1384:
    case 1389:
    case 1390:
    case 1391:
    case 1392:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1413:
    case 1414:
    case 1415:
    case 1416:
    case 1449:
    case 1450:
    case 1451:
    case 1452:
    case 1457:
    case 1458:
    case 1459:
    case 1460:
    case 1473:
    case 1474:
    case 1475:
    case 1476:
    case 1481:
    case 1482:
    case 1483:
    case 1484:
    case 1523:
    case 1524:
    case 1526:
    case 1527:
    case 1532:
    case 1533:
    case 1535:
    case 1536:
    case 1548:
    case 1549:
    case 1551:
    case 1552:
    case 1557:
    case 1558:
    case 1560:
    case 1561:
    case 1575:
    case 1576:
    case 1577:
    case 1578:
    case 1583:
    case 1584:
    case 1585:
    case 1586:
    case 1599:
    case 1600:
    case 1601:
    case 1602:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1667:
    case 1668:
    case 1669:
    case 1670:
    case 1675:
    case 1676:
    case 1677:
    case 1678:
    case 1717:
    case 1718:
    case 1720:
    case 1721:
    case 1726:
    case 1727:
    case 1729:
    case 1730:
    case 1742:
    case 1743:
    case 1745:
    case 1746:
    case 1751:
    case 1752:
    case 1754:
    case 1755:
    case 1769:
    case 1770:
    case 1771:
    case 1772:
    case 1777:
    case 1778:
    case 1779:
    case 1780:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1911:
    case 1912:
    case 1914:
    case 1915:
    case 1920:
    case 1921:
    case 1923:
    case 1924:
    case 1936:
    case 1937:
    case 1939:
    case 1940:
    case 1945:
    case 1946:
    case 1948:
    case 1949:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2105:
    case 2106:
    case 2108:
    case 2109:
    case 2114:
    case 2115:
    case 2117:
    case 2118:
    case 2130:
    case 2131:
    case 2133:
    case 2134:
    case 2139:
    case 2140:
    case 2142:
    case 2143:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2299:
    case 2300:
    case 2302:
    case 2303:
    case 2308:
    case 2309:
    case 2311:
    case 2312:
    case 2324:
    case 2325:
    case 2327:
    case 2328:
    case 2333:
    case 2334:
    case 2336:
    case 2337:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2375:
    case 2376:
    case 2377:
    case 2378:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2419:
    case 2420:
    case 2421:
    case 2422:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2443:
    case 2444:
    case 2445:
    case 2446:
    case 2451:
    case 2452:
    case 2453:
    case 2454:
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 136);
      goto LABEL_120;
    case 1331:
    case 1334:
    case 1335:
    case 1336:
    case 1340:
    case 1343:
    case 1344:
    case 1345:
    case 1347:
    case 1348:
    case 1350:
    case 1351:
    case 1356:
    case 1359:
    case 1360:
    case 1361:
    case 1365:
    case 1368:
    case 1369:
    case 1370:
    case 1372:
    case 1373:
    case 1375:
    case 1376:
    case 1385:
    case 1386:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1399:
    case 1400:
    case 1409:
    case 1410:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1423:
    case 1424:
    case 1429:
    case 1430:
    case 1431:
    case 1432:
    case 1437:
    case 1438:
    case 1439:
    case 1440:
    case 1453:
    case 1454:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1467:
    case 1468:
    case 1477:
    case 1478:
    case 1485:
    case 1486:
    case 1489:
    case 1490:
    case 1491:
    case 1492:
    case 1497:
    case 1498:
    case 1499:
    case 1500:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1525:
    case 1528:
    case 1529:
    case 1530:
    case 1534:
    case 1537:
    case 1538:
    case 1539:
    case 1541:
    case 1542:
    case 1544:
    case 1545:
    case 1550:
    case 1553:
    case 1554:
    case 1555:
    case 1559:
    case 1562:
    case 1563:
    case 1564:
    case 1566:
    case 1567:
    case 1569:
    case 1570:
    case 1579:
    case 1580:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1593:
    case 1594:
    case 1603:
    case 1604:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1617:
    case 1618:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1647:
    case 1648:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1671:
    case 1672:
    case 1679:
    case 1680:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1719:
    case 1722:
    case 1723:
    case 1724:
    case 1728:
    case 1731:
    case 1732:
    case 1733:
    case 1735:
    case 1736:
    case 1738:
    case 1739:
    case 1744:
    case 1747:
    case 1748:
    case 1749:
    case 1753:
    case 1756:
    case 1757:
    case 1758:
    case 1760:
    case 1761:
    case 1763:
    case 1764:
    case 1773:
    case 1774:
    case 1781:
    case 1782:
    case 1785:
    case 1786:
    case 1787:
    case 1788:
    case 1797:
    case 1798:
    case 1805:
    case 1806:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1841:
    case 1842:
    case 1849:
    case 1850:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1865:
    case 1866:
    case 1873:
    case 1874:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1913:
    case 1916:
    case 1917:
    case 1918:
    case 1922:
    case 1925:
    case 1926:
    case 1927:
    case 1929:
    case 1930:
    case 1932:
    case 1933:
    case 1938:
    case 1941:
    case 1942:
    case 1943:
    case 1947:
    case 1950:
    case 1951:
    case 1952:
    case 1954:
    case 1955:
    case 1957:
    case 1958:
    case 1967:
    case 1968:
    case 1975:
    case 1976:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1991:
    case 1992:
    case 1999:
    case 2000:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2035:
    case 2036:
    case 2043:
    case 2044:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2059:
    case 2060:
    case 2067:
    case 2068:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2107:
    case 2110:
    case 2111:
    case 2112:
    case 2116:
    case 2119:
    case 2120:
    case 2121:
    case 2123:
    case 2124:
    case 2126:
    case 2127:
    case 2132:
    case 2135:
    case 2136:
    case 2137:
    case 2141:
    case 2144:
    case 2145:
    case 2146:
    case 2148:
    case 2149:
    case 2151:
    case 2152:
    case 2161:
    case 2162:
    case 2169:
    case 2170:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2185:
    case 2186:
    case 2193:
    case 2194:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2229:
    case 2230:
    case 2237:
    case 2238:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2253:
    case 2254:
    case 2261:
    case 2262:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2301:
    case 2304:
    case 2305:
    case 2306:
    case 2310:
    case 2313:
    case 2314:
    case 2315:
    case 2317:
    case 2318:
    case 2320:
    case 2321:
    case 2326:
    case 2329:
    case 2330:
    case 2331:
    case 2335:
    case 2338:
    case 2339:
    case 2340:
    case 2342:
    case 2343:
    case 2345:
    case 2346:
    case 2355:
    case 2356:
    case 2363:
    case 2364:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2379:
    case 2380:
    case 2387:
    case 2388:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2407:
    case 2408:
    case 2409:
    case 2410:
    case 2423:
    case 2424:
    case 2431:
    case 2432:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2447:
    case 2448:
    case 2455:
    case 2456:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2467:
    case 2468:
    case 2469:
    case 2470:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 120);
      goto LABEL_120;
    case 1337:
    case 1346:
    case 1349:
    case 1352:
    case 1362:
    case 1371:
    case 1374:
    case 1377:
    case 1379:
    case 1380:
    case 1387:
    case 1388:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1411:
    case 1412:
    case 1425:
    case 1426:
    case 1433:
    case 1434:
    case 1441:
    case 1442:
    case 1447:
    case 1448:
    case 1455:
    case 1456:
    case 1469:
    case 1470:
    case 1471:
    case 1472:
    case 1479:
    case 1480:
    case 1493:
    case 1494:
    case 1501:
    case 1502:
    case 1509:
    case 1510:
    case 1531:
    case 1540:
    case 1543:
    case 1546:
    case 1556:
    case 1565:
    case 1568:
    case 1571:
    case 1573:
    case 1574:
    case 1581:
    case 1582:
    case 1595:
    case 1596:
    case 1597:
    case 1598:
    case 1605:
    case 1606:
    case 1619:
    case 1620:
    case 1627:
    case 1628:
    case 1635:
    case 1636:
    case 1641:
    case 1642:
    case 1649:
    case 1650:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1673:
    case 1674:
    case 1687:
    case 1688:
    case 1695:
    case 1696:
    case 1703:
    case 1704:
    case 1725:
    case 1734:
    case 1737:
    case 1740:
    case 1750:
    case 1759:
    case 1762:
    case 1765:
    case 1767:
    case 1768:
    case 1775:
    case 1776:
    case 1789:
    case 1790:
    case 1791:
    case 1792:
    case 1799:
    case 1800:
    case 1813:
    case 1814:
    case 1821:
    case 1822:
    case 1829:
    case 1830:
    case 1835:
    case 1836:
    case 1843:
    case 1844:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1867:
    case 1868:
    case 1881:
    case 1882:
    case 1889:
    case 1890:
    case 1897:
    case 1898:
    case 1919:
    case 1928:
    case 1931:
    case 1934:
    case 1944:
    case 1953:
    case 1956:
    case 1959:
    case 1961:
    case 1962:
    case 1969:
    case 1970:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1993:
    case 1994:
    case 2007:
    case 2008:
    case 2015:
    case 2016:
    case 2023:
    case 2024:
    case 2029:
    case 2030:
    case 2037:
    case 2038:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2061:
    case 2062:
    case 2075:
    case 2076:
    case 2083:
    case 2084:
    case 2091:
    case 2092:
    case 2113:
    case 2122:
    case 2125:
    case 2128:
    case 2138:
    case 2147:
    case 2150:
    case 2153:
    case 2155:
    case 2156:
    case 2163:
    case 2164:
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2187:
    case 2188:
    case 2201:
    case 2202:
    case 2209:
    case 2210:
    case 2217:
    case 2218:
    case 2223:
    case 2224:
    case 2231:
    case 2232:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2255:
    case 2256:
    case 2269:
    case 2270:
    case 2277:
    case 2278:
    case 2285:
    case 2286:
    case 2307:
    case 2316:
    case 2319:
    case 2322:
    case 2332:
    case 2341:
    case 2344:
    case 2347:
    case 2349:
    case 2350:
    case 2357:
    case 2358:
    case 2371:
    case 2372:
    case 2373:
    case 2374:
    case 2381:
    case 2382:
    case 2395:
    case 2396:
    case 2403:
    case 2404:
    case 2411:
    case 2412:
    case 2417:
    case 2418:
    case 2425:
    case 2426:
    case 2439:
    case 2440:
    case 2441:
    case 2442:
    case 2449:
    case 2450:
    case 2463:
    case 2464:
    case 2471:
    case 2472:
    case 2479:
    case 2480:
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 104);
      goto LABEL_120;
    case 1353:
    case 1378:
    case 1395:
    case 1396:
    case 1419:
    case 1420:
    case 1427:
    case 1428:
    case 1435:
    case 1436:
    case 1445:
    case 1446:
    case 1463:
    case 1464:
    case 1487:
    case 1488:
    case 1495:
    case 1496:
    case 1503:
    case 1504:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1518:
    case 1519:
    case 1547:
    case 1572:
    case 1589:
    case 1590:
    case 1613:
    case 1614:
    case 1621:
    case 1622:
    case 1629:
    case 1630:
    case 1639:
    case 1640:
    case 1657:
    case 1658:
    case 1681:
    case 1682:
    case 1689:
    case 1690:
    case 1697:
    case 1698:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1712:
    case 1713:
    case 1741:
    case 1766:
    case 1783:
    case 1784:
    case 1807:
    case 1808:
    case 1815:
    case 1816:
    case 1823:
    case 1824:
    case 1833:
    case 1834:
    case 1851:
    case 1852:
    case 1875:
    case 1876:
    case 1883:
    case 1884:
    case 1891:
    case 1892:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1906:
    case 1907:
    case 1935:
    case 1960:
    case 1977:
    case 1978:
    case 2001:
    case 2002:
    case 2009:
    case 2010:
    case 2017:
    case 2018:
    case 2027:
    case 2028:
    case 2045:
    case 2046:
    case 2069:
    case 2070:
    case 2077:
    case 2078:
    case 2085:
    case 2086:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2100:
    case 2101:
    case 2129:
    case 2154:
    case 2171:
    case 2172:
    case 2195:
    case 2196:
    case 2203:
    case 2204:
    case 2211:
    case 2212:
    case 2221:
    case 2222:
    case 2239:
    case 2240:
    case 2263:
    case 2264:
    case 2271:
    case 2272:
    case 2279:
    case 2280:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2294:
    case 2295:
    case 2323:
    case 2348:
    case 2365:
    case 2366:
    case 2389:
    case 2390:
    case 2397:
    case 2398:
    case 2405:
    case 2406:
    case 2415:
    case 2416:
    case 2433:
    case 2434:
    case 2457:
    case 2458:
    case 2465:
    case 2466:
    case 2473:
    case 2474:
    case 2483:
    case 2484:
    case 2485:
    case 2486:
    case 2488:
    case 2489:
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 88);
      goto LABEL_120;
    case 1443:
    case 1444:
    case 1511:
    case 1512:
    case 1517:
    case 1520:
    case 1521:
    case 1522:
    case 1637:
    case 1638:
    case 1705:
    case 1706:
    case 1711:
    case 1714:
    case 1715:
    case 1716:
    case 1831:
    case 1832:
    case 1899:
    case 1900:
    case 1905:
    case 1908:
    case 1909:
    case 1910:
    case 2025:
    case 2026:
    case 2093:
    case 2094:
    case 2099:
    case 2102:
    case 2103:
    case 2104:
    case 2219:
    case 2220:
    case 2287:
    case 2288:
    case 2293:
    case 2296:
    case 2297:
    case 2298:
    case 2413:
    case 2414:
    case 2481:
    case 2482:
    case 2487:
    case 2490:
    case 2491:
    case 2492:
      v17 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 72);
LABEL_120:
      v101 = v17 != 0;
      goto LABEL_221;
    case 2499:
      v1084 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1085 = *((_QWORD *)a2 + 2);
      v1088 = *(unsigned __int8 *)(v1085 + 16);
      v1086 = v1085 + 16;
      v1087 = v1088;
      if (v1088 == 1)
      {
        LOBYTE(v1089) = sub_1C4B12E5C(a1, v1086, *(_QWORD *)(a4 + 192), 0);
        v1084 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1087 == 2)
      {
        v1089 = *((_DWORD *)v1084 + 6);
      }
      else
      {
        v1159 = *((_QWORD *)v1084 + 3);
        if (*(_BYTE *)v1159 == 4)
          v1089 = *(_DWORD *)(*(_QWORD *)(v1159 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1089) = 0;
      }
      v1285 = ((unint64_t)(v1089 & 1) << 56) & 0x9FFFFFFFFFFFFFFFLL | ((*((_QWORD *)v1084 + 5) & 3) << 61);
      v1286 = *v1084;
      if (v1286 == 1)
      {
        LOBYTE(v1287) = sub_1C4B12E5C(v8, (uint64_t)v1084, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1286 == 2)
      {
        v1287 = *((_DWORD *)v1084 + 2);
      }
      else
      {
        v1288 = *((_QWORD *)v1084 + 1);
        if (*(_BYTE *)v1288 == 4)
          v1287 = *(_DWORD *)(*(_QWORD *)(v1288 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1287) = 0;
      }
      v89 = v1285 | ((v1287 & 1) << 19);
      goto LABEL_112;
    case 2500:
      v1090 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1091 = *v1090;
      if (v1091 == 1)
      {
        LOBYTE(v1092) = sub_1C4B12E5C(a1, (uint64_t)v1090, *(_QWORD *)(a4 + 192), 0);
        v1090 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1091 == 2)
      {
        v1092 = *((_DWORD *)v1090 + 2);
      }
      else
      {
        v1160 = *((_QWORD *)v1090 + 1);
        if (*(_BYTE *)v1160 == 4)
          v1092 = *(_DWORD *)(*(_QWORD *)(v1160 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1092) = 0;
      }
      v602 = (unint64_t)(v1092 & 1) << 40;
      v603 = *((_QWORD *)v1090 + 3);
      goto LABEL_811;
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
      v306 = *((_QWORD *)a2 + 2);
      v307 = *(unsigned __int8 *)(v306 + 64);
      if (v307 == 1)
      {
        LOBYTE(v308) = sub_1C4B12E5C(a1, v306 + 64, *(_QWORD *)(a4 + 192), 0);
        v306 = *((_QWORD *)a2 + 2);
      }
      else if (v307 == 2)
      {
        v308 = *(_DWORD *)(v306 + 72);
      }
      else
      {
        v539 = *(_QWORD *)(v306 + 72);
        if (*(_BYTE *)v539 == 4)
          v308 = *(_DWORD *)(*(_QWORD *)(v539 + 24) + 16) | 0x2000;
        else
          LOBYTE(v308) = 0;
      }
      v888 = 32 * (v308 & 3);
      v889 = *(unsigned __int8 *)(v306 + 80);
      if (v889 == 1)
      {
        LOBYTE(v890) = sub_1C4B12E5C(v8, v306 + 80, *(_QWORD *)(a4 + 192), 0);
        v306 = *((_QWORD *)a2 + 2);
      }
      else if (v889 == 2)
      {
        v890 = *(_DWORD *)(v306 + 88);
      }
      else
      {
        v891 = *(_QWORD *)(v306 + 88);
        if (*(_BYTE *)v891 == 4)
          v890 = *(_DWORD *)(*(_QWORD *)(v891 + 24) + 16) | 0x2000;
        else
          LOBYTE(v890) = 0;
      }
      v895 = (16 * (v890 & 1)) | v888;
      v896 = *(unsigned __int8 *)(v306 + 96);
      if (v896 == 1)
      {
        LOBYTE(v897) = sub_1C4B12E5C(v8, v306 + 96, *(_QWORD *)(a4 + 192), 0);
        v306 = *((_QWORD *)a2 + 2);
      }
      else if (v896 == 2)
      {
        v897 = *(_DWORD *)(v306 + 104);
      }
      else
      {
        v898 = *(_QWORD *)(v306 + 104);
        if (*(_BYTE *)v898 == 4)
          v897 = *(_DWORD *)(*(_QWORD *)(v898 + 24) + 16) | 0x2000;
        else
          LOBYTE(v897) = 0;
      }
      v902 = v895 | (8 * (v897 & 1));
      v903 = *(unsigned __int8 *)(v306 + 112);
      if (v903 == 1)
      {
        LOBYTE(v904) = sub_1C4B12E5C(v8, v306 + 112, *(_QWORD *)(a4 + 192), 0);
        v306 = *((_QWORD *)a2 + 2);
      }
      else if (v903 == 2)
      {
        v904 = *(_DWORD *)(v306 + 120);
      }
      else
      {
        v905 = *(_QWORD *)(v306 + 120);
        if (*(_BYTE *)v905 == 4)
          v904 = *(_DWORD *)(*(_QWORD *)(v905 + 24) + 16) | 0x2000;
        else
          LOBYTE(v904) = 0;
      }
      v639 = v902 | (4 * (v904 & 1)) | *(_DWORD *)(v306 + 136) & 3u;
      goto LABEL_1284;
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
      v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v310 = *v309;
      if (v310 == 1)
      {
        v311 = sub_1C4B12E5C(a1, (uint64_t)v309, *(_QWORD *)(a4 + 192), 0);
        v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v310 == 2)
      {
        v311 = *((unsigned int *)v309 + 2);
      }
      else
      {
        v540 = *((_QWORD *)v309 + 1);
        if (*(_BYTE *)v540 == 4)
          v311 = *(_DWORD *)(*(_QWORD *)(v540 + 24) + 16) | 0x2000u;
        else
          v311 = 0;
      }
      v892 = v309[16];
      if (v892 == 1)
      {
        v893 = sub_1C4B12E5C(v8, (uint64_t)(v309 + 16), *(_QWORD *)(a4 + 192), 0);
        v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v892 == 2)
      {
        v893 = *((unsigned int *)v309 + 6);
      }
      else
      {
        v894 = *((_QWORD *)v309 + 3);
        if (*(_BYTE *)v894 == 4)
          v893 = *(_DWORD *)(*(_QWORD *)(v894 + 24) + 16) | 0x2000u;
        else
          v893 = 0;
      }
      v899 = v309[48];
      v1372 = a4;
      if (v899 == 1)
      {
        v900 = sub_1C4B12E5C(v8, (uint64_t)(v309 + 48), *(_QWORD *)(a4 + 192), 0);
        v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v899 == 2)
      {
        v900 = *((_DWORD *)v309 + 14);
      }
      else
      {
        v901 = *((_QWORD *)v309 + 7);
        if (*(_BYTE *)v901 == 4)
          v900 = *(_DWORD *)(*(_QWORD *)(v901 + 24) + 16) | 0x2000;
        else
          v900 = 0;
      }
      v906 = v311;
      v907 = ((_DWORD)v893 << 24);
      v908 = v900 << 12;
      v909 = v309[96];
      v1360 = v8;
      if (v909 == 1)
      {
        LOBYTE(v910) = sub_1C4B12E5C(v8, (uint64_t)(v309 + 96), *(_QWORD *)(v1372 + 192), 0);
        v907 = ((_DWORD)v893 << 24);
        v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v909 == 2)
      {
        v910 = *((_DWORD *)v309 + 26);
      }
      else
      {
        v911 = *((_QWORD *)v309 + 13);
        if (*(_BYTE *)v911 == 4)
          v910 = *(_DWORD *)(*(_QWORD *)(v911 + 24) + 16) | 0x2000;
        else
          LOBYTE(v910) = 0;
      }
      v912 = v311 << 41;
      v913 = (unint64_t)v311 << 25;
      v914 = v893 << 25;
      v915 = v910 & 1;
      v916 = v309[64];
      v917 = *((_QWORD *)v309 + 15);
      if (v916 == 1)
      {
        v1353 = v900;
        v919 = v906;
        v920 = v908;
        v921 = v907;
        v922 = v913;
        LOBYTE(v918) = sub_1C4B12E5C(v1360, (uint64_t)(v309 + 64), *(_QWORD *)(v1372 + 192), 0);
        v913 = v922;
        v907 = v921;
        v908 = v920;
        v906 = v919;
        LOBYTE(v900) = v1353;
        v309 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v916 == 2)
      {
        v918 = *((_DWORD *)v309 + 18);
      }
      else
      {
        v923 = *((_QWORD *)v309 + 9);
        if (*(_BYTE *)v923 == 4)
          v918 = *(_DWORD *)(*(_QWORD *)(v923 + 24) + 16) | 0x2000;
        else
          LOBYTE(v918) = 0;
      }
      v924 = v912 & 0x6000000000000;
      v925 = (unint64_t)v906 << 40;
      v926 = v913 & 0x7800000000;
      v927 = v914 & 0x600000000;
      v928 = (unint64_t)(v900 & 0x1F) << 51;
      v929 = *(_QWORD *)&v908 & 0x3E0000;
      v930 = v915 << 56;
      v931 = (unint64_t)(v917 & 3) << 61;
      v932 = 32 * (v918 & 3u);
      v933 = v309[80];
      if (v933 == 1)
      {
        v1354 = v929;
        v935 = v907;
        v936 = v924;
        v937 = v925;
        v938 = v926;
        LOBYTE(v934) = sub_1C4B12E5C(v1360, (uint64_t)(v309 + 80), *(_QWORD *)(v1372 + 192), 0);
        v929 = v1354;
        v926 = v938;
        v925 = v937;
        v924 = v936;
        v907 = v935;
      }
      else if (v933 == 2)
      {
        v934 = *((_DWORD *)v309 + 22);
      }
      else
      {
        v939 = *((_QWORD *)v309 + 11);
        if (*(_BYTE *)v939 == 4)
          v934 = *(_DWORD *)(*(_QWORD *)(v939 + 24) + 16) | 0x2000;
        else
          LOBYTE(v934) = 0;
      }
      v293 = v924 | v925 | v926 | v927 | v907 | v928 | v929 | v930 | v931;
      v140 = v932 | ((v934 & 3) << 13);
      goto LABEL_1186;
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
      v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v103 = *v102;
      if (v103 == 1)
      {
        v104 = sub_1C4B12E5C(a1, (uint64_t)v102, *(_QWORD *)(a4 + 192), 0);
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v103 == 2)
      {
        v104 = *((_DWORD *)v102 + 2);
      }
      else
      {
        v342 = *((_QWORD *)v102 + 1);
        if (*(_BYTE *)v342 == 4)
          v104 = *(_DWORD *)(*(_QWORD *)(v342 + 24) + 16) | 0x2000;
        else
          v104 = 0;
      }
      v464 = v102[16];
      if (v464 == 1)
      {
        v465 = sub_1C4B12E5C(v8, (uint64_t)(v102 + 16), *(_QWORD *)(a4 + 192), 0);
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v464 == 2)
      {
        v465 = *((_DWORD *)v102 + 6);
      }
      else
      {
        v466 = *((_QWORD *)v102 + 3);
        if (*(_BYTE *)v466 == 4)
          v465 = *(_DWORD *)(*(_QWORD *)(v466 + 24) + 16) | 0x2000;
        else
          v465 = 0;
      }
      v473 = v102[32];
      v1366 = a4;
      if (v473 == 1)
      {
        LOBYTE(v474) = sub_1C4B12E5C(v8, (uint64_t)(v102 + 32), *(_QWORD *)(a4 + 192), 0);
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v473 == 2)
      {
        v474 = *((_DWORD *)v102 + 10);
      }
      else
      {
        v475 = *((_QWORD *)v102 + 5);
        if (*(_BYTE *)v475 == 4)
          v474 = *(_DWORD *)(*(_QWORD *)(v475 + 24) + 16) | 0x2000;
        else
          LOBYTE(v474) = 0;
      }
      v479 = v104 << 14;
      v480 = (v465 << 24);
      v481 = v102[48];
      if (v481 == 1)
      {
        LOBYTE(v482) = sub_1C4B12E5C(v8, (uint64_t)(v102 + 48), *(_QWORD *)(v1366 + 192), 0);
        v480 = (v465 << 24);
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v481 == 2)
      {
        v482 = *((_DWORD *)v102 + 14);
      }
      else
      {
        v483 = *((_QWORD *)v102 + 7);
        if (*(_BYTE *)v483 == 4)
          v482 = *(_DWORD *)(*(_QWORD *)(v483 + 24) + 16) | 0x2000;
        else
          LOBYTE(v482) = 0;
      }
      v493 = 16 * (v482 & 1u);
      v494 = v102[64];
      if (v494 == 1)
      {
        v496 = v480;
        LOBYTE(v495) = sub_1C4B12E5C(v8, (uint64_t)(v102 + 64), *(_QWORD *)(v1366 + 192), 0);
        v480 = v496;
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v494 == 2)
      {
        v495 = *((_DWORD *)v102 + 18);
      }
      else
      {
        v497 = *((_QWORD *)v102 + 9);
        if (*(_BYTE *)v497 == 4)
          v495 = *(_DWORD *)(*(_QWORD *)(v497 + 24) + 16) | 0x2000;
        else
          LOBYTE(v495) = 0;
      }
      v509 = (unint64_t)(v104 & 0x3F) << 40;
      v510 = *(_QWORD *)&v479 & 0xF00000;
      v511 = (unsigned __int16)v465 & 0xFF00;
      v512 = 4 * (v474 & 1);
      v513 = v474 & 2;
      v372 = 8 * (v495 & 1u);
      v514 = v102[80];
      if (v514 == 1)
      {
        v516 = v8;
        v517 = v480;
        LOBYTE(v515) = sub_1C4B12E5C(v516, (uint64_t)(v102 + 80), *(_QWORD *)(v1366 + 192), 0);
        v480 = v517;
        v102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v514 == 2)
      {
        v515 = *((_DWORD *)v102 + 22);
      }
      else
      {
        v518 = *((_QWORD *)v102 + 11);
        if (*(_BYTE *)v518 == 4)
          v515 = *(_DWORD *)(*(_QWORD *)(v518 + 24) + 16) | 0x2000;
        else
          LOBYTE(v515) = 0;
      }
      v377 = v515 & 1;
      v378 = (*((_QWORD *)v102 + 13) & 3) << 61;
      v379 = v509 | v510 | v511 | v480;
      v380 = v513 | v512 | v493;
      goto LABEL_1238;
    case 2902:
      v1093 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1094 = *v1093;
      if (v1094 == 1)
      {
        v1095 = sub_1C4B12E5C(a1, (uint64_t)v1093, *(_QWORD *)(a4 + 192), 0);
        v1093 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1094 == 2)
      {
        v1095 = *((unsigned int *)v1093 + 2);
      }
      else
      {
        v1161 = *((_QWORD *)v1093 + 1);
        if (*(_BYTE *)v1161 == 4)
          v1095 = *(_DWORD *)(*(_QWORD *)(v1161 + 24) + 16) | 0x2000u;
        else
          v1095 = 0;
      }
      v1289 = ((_DWORD)v1095 << 24) | (((v1095 >> 8) & 3) << 33);
      v1290 = v1093[48];
      if (v1290 == 1)
      {
        LOBYTE(v1291) = sub_1C4B12E5C(v8, (uint64_t)(v1093 + 48), *(_QWORD *)(a4 + 192), 0);
        v1093 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1290 == 2)
      {
        v1291 = *((_DWORD *)v1093 + 14);
      }
      else
      {
        v1292 = *((_QWORD *)v1093 + 7);
        if (*(_BYTE *)v1292 == 4)
          v1291 = *(_DWORD *)(*(_QWORD *)(v1292 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1291) = 0;
      }
      v1324 = v1093[16];
      v1325 = (v1289 | ((unint64_t)(v1291 & 1) << 56)) & 0x9FFFFFFFFFFFFFFFLL | ((*((_QWORD *)v1093 + 9) & 3) << 61);
      if (v1324 == 1)
      {
        LOBYTE(v1326) = sub_1C4B12E5C(v8, (uint64_t)(v1093 + 16), *(_QWORD *)(a4 + 192), 0);
        v1093 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1324 == 2)
      {
        v1326 = *((_DWORD *)v1093 + 6);
      }
      else
      {
        v1327 = *((_QWORD *)v1093 + 3);
        if (*(_BYTE *)v1327 == 4)
          v1326 = *(_DWORD *)(*(_QWORD *)(v1327 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1326) = 0;
      }
      v1236 = v1325 | (32 * (v1326 & 3u));
      v1338 = v1093[32];
      if (v1338 == 1)
      {
        LOBYTE(v1339) = sub_1C4B12E5C(v8, (uint64_t)(v1093 + 32), *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1338 == 2)
      {
        v1339 = *((_DWORD *)v1093 + 10);
      }
      else
      {
        v1340 = *((_QWORD *)v1093 + 5);
        if (*(_BYTE *)v1340 == 4)
          v1339 = *(_DWORD *)(*(_QWORD *)(v1340 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1339) = 0;
      }
      v1252 = (v1339 & 3) << 13;
LABEL_1906:
      v9 |= v1236 | v1252;
      return v9;
    case 2903:
    case 2904:
      v1024 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)v1024 == 1)
      {
        v1025 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(v1024 + 8));
      }
      else
      {
        v1142 = *(_QWORD *)(v1024 + 8);
        if (v1142)
          v1143 = v1142 - 8;
        else
          v1143 = 0;
        v1025 = (*(_QWORD *)(*(_QWORD *)(v1143 + 32) + 16) / 2) | 0x2000;
      }
      v1144 = *(unsigned __int8 *)(v1024 + 16);
      if (v1144 == 1)
      {
        v1145 = sub_1C4B12E5C(a1, v1024 + 16, *(_QWORD *)(a4 + 192), 0);
        v1024 = *((_QWORD *)a2 + 2);
      }
      else if (v1144 == 2)
      {
        v1145 = *(_DWORD *)(v1024 + 24);
      }
      else
      {
        v1156 = *(_QWORD *)(v1024 + 24);
        if (*(_BYTE *)v1156 == 4)
          v1145 = *(_DWORD *)(*(_QWORD *)(v1156 + 24) + 16) | 0x2000;
        else
          v1145 = 0;
      }
      v1196 = *(unsigned __int8 *)(v1024 + 32);
      if (v1196 == 1)
      {
        LOBYTE(v1197) = sub_1C4B12E5C(a1, v1024 + 32, *(_QWORD *)(a4 + 192), 0);
        v1024 = *((_QWORD *)a2 + 2);
      }
      else if (v1196 == 2)
      {
        v1197 = *(_DWORD *)(v1024 + 40);
      }
      else
      {
        v1198 = *(_QWORD *)(v1024 + 40);
        if (*(_BYTE *)v1198 == 4)
          v1197 = *(_DWORD *)(*(_QWORD *)(v1198 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1197) = 0;
      }
      v1218 = (_DWORD)v1025 << 10;
      v1219 = *(unsigned __int8 *)(v1024 + 48);
      v1346 = (v1145 << 24);
      v1355 = 2 * (v1197 & 3u);
      if (v1219 == 1)
      {
        LOBYTE(v1220) = sub_1C4B12E5C(a1, v1024 + 48, *(_QWORD *)(a4 + 192), 0);
        v1024 = *((_QWORD *)a2 + 2);
      }
      else if (v1219 == 2)
      {
        v1220 = *(_DWORD *)(v1024 + 56);
      }
      else
      {
        v1221 = *(_QWORD *)(v1024 + 56);
        if (*(_BYTE *)v1221 == 4)
          v1220 = *(_DWORD *)(*(_QWORD *)(v1221 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1220) = 0;
      }
      v1230 = v1025 << 44;
      v1231 = v1025 >> 4;
      v1232 = 16 * (v1220 & 1u);
      v1233 = *(unsigned __int8 *)(v1024 + 64);
      if (v1233 == 1)
      {
        LOBYTE(v1234) = sub_1C4B12E5C(a1, v1024 + 64, *(_QWORD *)(a4 + 192), 0);
        v1024 = *((_QWORD *)a2 + 2);
      }
      else if (v1233 == 2)
      {
        v1234 = *(_DWORD *)(v1024 + 72);
      }
      else
      {
        v1235 = *(_QWORD *)(v1024 + 72);
        if (*(_BYTE *)v1235 == 4)
          v1234 = *(_DWORD *)(*(_QWORD *)(v1235 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1234) = 0;
      }
      v1244 = (v1025 & 0x7F) << 33;
      v1245 = *(_QWORD *)&v1218 & 0xE0000;
      v1246 = v1231 & 0xC0;
      v1247 = (unsigned __int16)v1145 & 0xFF00;
      v1248 = 8 * (v1234 & 1u);
      v1249 = *(unsigned __int8 *)(v1024 + 80);
      if (v1249 == 1)
      {
        LOBYTE(v1250) = sub_1C4B12E5C(a1, v1024 + 80, *(_QWORD *)(a4 + 192), 0);
        v1024 = *((_QWORD *)a2 + 2);
      }
      else if (v1249 == 2)
      {
        v1250 = *(_DWORD *)(v1024 + 88);
      }
      else
      {
        v1251 = *(_QWORD *)(v1024 + 88);
        if (*(_BYTE *)v1251 == 4)
          v1250 = *(_DWORD *)(*(_QWORD *)(v1251 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1250) = 0;
      }
      v140 = (*(_QWORD *)(v1024 + 104) & 3) << 61;
      v293 = v1230 & 0x200000000000000 | v1244 | v1245 | v1246 | v1247 | v1346 | v1355 | v1232 | v1248 | ((unint64_t)(v1250 & 1) << 56);
      goto LABEL_1186;
    case 3745:
    case 3746:
    case 3747:
    case 3748:
    case 3749:
    case 3750:
    case 3751:
    case 3752:
    case 3753:
    case 3754:
    case 3755:
    case 3756:
    case 3757:
    case 3758:
    case 3759:
    case 3760:
    case 3761:
    case 3762:
    case 3763:
    case 3764:
    case 3765:
    case 3766:
    case 3767:
    case 3768:
      v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v186 = *v185;
      if (v186 == 1)
      {
        v187 = sub_1C4B12E5C(a1, (uint64_t)v185, *(_QWORD *)(a4 + 192), 0);
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v186 == 2)
      {
        v187 = *((_DWORD *)v185 + 2);
      }
      else
      {
        v420 = *((_QWORD *)v185 + 1);
        if (*(_BYTE *)v420 == 4)
          v187 = *(_DWORD *)(*(_QWORD *)(v420 + 24) + 16) | 0x2000;
        else
          v187 = 0;
      }
      v857 = v185[16];
      if (v857 == 1)
      {
        v858 = sub_1C4B12E5C(v8, (uint64_t)(v185 + 16), *(_QWORD *)(a4 + 192), 0);
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v857 == 2)
      {
        v858 = *((unsigned int *)v185 + 6);
      }
      else
      {
        v859 = *((_QWORD *)v185 + 3);
        if (*(_BYTE *)v859 == 4)
          v858 = *(_DWORD *)(*(_QWORD *)(v859 + 24) + 16) | 0x2000u;
        else
          v858 = 0;
      }
      v860 = v185[32];
      v1371 = a4;
      if (v860 == 1)
      {
        v861 = sub_1C4B12E5C(v8, (uint64_t)(v185 + 32), *(_QWORD *)(a4 + 192), 0);
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v860 == 2)
      {
        v861 = *((_DWORD *)v185 + 10);
      }
      else
      {
        v862 = *((_QWORD *)v185 + 5);
        if (*(_BYTE *)v862 == 4)
          v861 = *(_DWORD *)(*(_QWORD *)(v862 + 24) + 16) | 0x2000;
        else
          v861 = 0;
      }
      v863 = v187 << 14;
      v864 = (_DWORD)v858 << 21;
      v865 = v861 >> 2;
      v866 = v185[48];
      if (v866 == 1)
      {
        LOBYTE(v867) = sub_1C4B12E5C(v8, (uint64_t)(v185 + 48), *(_QWORD *)(v1371 + 192), 0);
        v865 = v861 >> 2;
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v866 == 2)
      {
        v867 = *((_DWORD *)v185 + 14);
      }
      else
      {
        v868 = *((_QWORD *)v185 + 7);
        if (*(_BYTE *)v868 == 4)
          v867 = *(_DWORD *)(*(_QWORD *)(v868 + 24) + 16) | 0x2000;
        else
          LOBYTE(v867) = 0;
      }
      v869 = v858 << 22;
      v870 = (v867 & 1) << 19;
      v871 = v185[64];
      if (v871 == 1)
      {
        v873 = (v867 & 1) << 19;
        v874 = v865;
        LOBYTE(v872) = sub_1C4B12E5C(v8, (uint64_t)(v185 + 64), *(_QWORD *)(v1371 + 192), 0);
        LOBYTE(v865) = v874;
        v870 = v873;
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v871 == 2)
      {
        v872 = *((_DWORD *)v185 + 18);
      }
      else
      {
        v875 = *((_QWORD *)v185 + 9);
        if (*(_BYTE *)v875 == 4)
          v872 = *(_DWORD *)(*(_QWORD *)(v875 + 24) + 16) | 0x2000;
        else
          LOBYTE(v872) = 0;
      }
      v876 = (unint64_t)v187 << 40;
      v877 = *(_QWORD *)&v863 & 0xC00000;
      v878 = v869 & 0x600000000;
      v879 = v864 & 0xFF000000;
      v880 = (unint64_t)v861 << 8;
      v881 = v865 & 0xC0;
      v372 = (v872 & 3) << 17;
      v882 = v185[80];
      if (v882 == 1)
      {
        v884 = v8;
        v885 = v870;
        LOBYTE(v883) = sub_1C4B12E5C(v884, (uint64_t)(v185 + 80), *(_QWORD *)(v1371 + 192), 0);
        v870 = v885;
        v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v882 == 2)
      {
        v883 = *((_DWORD *)v185 + 22);
      }
      else
      {
        v886 = *((_QWORD *)v185 + 11);
        if (*(_BYTE *)v886 == 4)
          v883 = *(_DWORD *)(*(_QWORD *)(v886 + 24) + 16) | 0x2000;
        else
          LOBYTE(v883) = 0;
      }
      v377 = v883 & 1;
      v378 = (*((_QWORD *)v185 + 13) & 3) << 61;
      v379 = v876 | v877 | v878 | v879;
      v380 = v880 | v881 | v870;
      goto LABEL_1238;
    case 10407:
    case 10408:
    case 11475:
    case 11476:
    case 11489:
    case 11490:
    case 11503:
    case 11504:
    case 11517:
    case 11518:
    case 11531:
    case 11532:
    case 11545:
    case 11546:
    case 11559:
    case 11560:
    case 11573:
    case 11574:
      v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v312 = *((_QWORD *)a2 + 2);
      v315 = *(unsigned __int8 *)(v312 + 80);
      v313 = v312 + 80;
      v314 = v315;
      if (v315 == 1)
      {
        LOBYTE(v316) = sub_1C4B12E5C(a1, v313, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v314 == 2)
      {
        v316 = *((_DWORD *)v105 + 22);
      }
      else
      {
        v586 = *((_QWORD *)v105 + 11);
        if (*(_BYTE *)v586 == 4)
          v316 = *(_DWORD *)(*(_QWORD *)(v586 + 24) + 16) | 0x2000;
        else
          LOBYTE(v316) = 0;
      }
      v940 = (unint64_t)(v316 & 1) << 40;
      v941 = v105[64];
      if (v941 == 1)
      {
        LOBYTE(v942) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 64), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v941 == 2)
      {
        v942 = *((_DWORD *)v105 + 18);
      }
      else
      {
        v943 = *((_QWORD *)v105 + 9);
        if (*(_BYTE *)v943 == 4)
          v942 = *(_DWORD *)(*(_QWORD *)(v943 + 24) + 16) | 0x2000;
        else
          LOBYTE(v942) = 0;
      }
      v948 = v940 | ((v942 & 1) << 15);
      v949 = v105[48];
      if (v949 == 1)
      {
        LOBYTE(v950) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 48), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v949 == 2)
      {
        v950 = *((_DWORD *)v105 + 14);
      }
      else
      {
        v951 = *((_QWORD *)v105 + 7);
        if (*(_BYTE *)v951 == 4)
          v950 = *(_DWORD *)(*(_QWORD *)(v951 + 24) + 16) | 0x2000;
        else
          LOBYTE(v950) = 0;
      }
      v956 = v948 | ((v950 & 1) << 7);
      v957 = *v105;
      if (v957 == 1)
      {
        v958 = sub_1C4B12E5C(v8, (uint64_t)v105, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v957 == 2)
      {
        v958 = *((_DWORD *)v105 + 2);
      }
      else
      {
        v959 = *((_QWORD *)v105 + 1);
        if (*(_BYTE *)v959 == 4)
          v958 = *(_DWORD *)(*(_QWORD *)(v959 + 24) + 16) | 0x2000;
        else
          v958 = 0;
      }
      v964 = (v958 << 24) & 0xFE000000 | (v958 >> 7) & 6 | v956;
      v965 = v105[16];
      if (v965 == 1)
      {
        v966 = v8;
        v967 = sub_1C4B12E5C(v8, (uint64_t)(v105 + 16), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v965 == 2)
      {
        v966 = v8;
        v967 = *((_DWORD *)v105 + 6);
      }
      else
      {
        v968 = *((_QWORD *)v105 + 3);
        v966 = v8;
        if (*(_BYTE *)v968 == 4)
          v967 = *(_DWORD *)(*(_QWORD *)(v968 + 24) + 16) | 0x2000;
        else
          v967 = 0;
      }
      v454 = ((unint64_t)(v967 & 0x7F) << 17) | v964;
      v456 = (v967 << 6) & 0x6000;
      v973 = v105[32];
      if (v973 == 1)
      {
        v974 = sub_1C4B12E5C(v966, (uint64_t)(v105 + 32), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v973 == 2)
      {
        v974 = *((_DWORD *)v105 + 10);
      }
      else
      {
        v975 = *((_QWORD *)v105 + 5);
        if (*(_BYTE *)v975 == 4)
          v974 = *(_DWORD *)(*(_QWORD *)(v975 + 24) + 16) | 0x2000;
        else
          v974 = 0;
      }
      v460 = v974 >> 2;
      v461 = (unint64_t)(v974 & 0x1F) << 8;
      goto LABEL_611;
    case 10409:
    case 10410:
    case 10413:
    case 10414:
    case 10417:
    case 10418:
    case 11351:
    case 11352:
    case 11355:
    case 11356:
    case 11359:
    case 11360:
    case 11365:
    case 11366:
    case 11369:
    case 11370:
    case 11373:
    case 11374:
    case 11379:
    case 11380:
    case 11383:
    case 11384:
    case 11387:
    case 11388:
    case 11393:
    case 11394:
    case 11397:
    case 11398:
    case 11401:
    case 11402:
    case 11407:
    case 11408:
    case 11411:
    case 11412:
    case 11415:
    case 11416:
    case 11421:
    case 11422:
    case 11425:
    case 11426:
    case 11429:
    case 11430:
    case 11435:
    case 11436:
    case 11439:
    case 11440:
    case 11443:
    case 11444:
    case 11449:
    case 11450:
    case 11453:
    case 11454:
    case 11457:
    case 11458:
      v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v91 = *((_QWORD *)a2 + 2);
      v94 = *(unsigned __int8 *)(v91 + 64);
      v92 = v91 + 64;
      v93 = v94;
      if (v94 == 1)
      {
        LOBYTE(v95) = sub_1C4B12E5C(a1, v92, *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v93 == 2)
      {
        v95 = *((_DWORD *)v90 + 18);
      }
      else
      {
        v323 = *((_QWORD *)v90 + 9);
        if (*(_BYTE *)v323 == 4)
          v95 = *(_DWORD *)(*(_QWORD *)(v323 + 24) + 16) | 0x2000;
        else
          LOBYTE(v95) = 0;
      }
      v391 = (unint64_t)(v95 & 1) << 40;
      v392 = v90[32];
      if (v392 == 1)
      {
        LOBYTE(v393) = sub_1C4B12E5C(v8, (uint64_t)(v90 + 32), *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v392 == 2)
      {
        v393 = *((_DWORD *)v90 + 10);
      }
      else
      {
        v394 = *((_QWORD *)v90 + 5);
        if (*(_BYTE *)v394 == 4)
          v393 = *(_DWORD *)(*(_QWORD *)(v394 + 24) + 16) | 0x2000;
        else
          LOBYTE(v393) = 0;
      }
      v399 = v391 | ((v393 & 1) << 7);
      v400 = *v90;
      if (v400 == 1)
      {
        v401 = sub_1C4B12E5C(v8, (uint64_t)v90, *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v400 == 2)
      {
        v401 = *((_DWORD *)v90 + 2);
      }
      else
      {
        v402 = *((_QWORD *)v90 + 1);
        if (*(_BYTE *)v402 == 4)
          v401 = *(_DWORD *)(*(_QWORD *)(v402 + 24) + 16) | 0x2000;
        else
          v401 = 0;
      }
      v407 = (v401 << 24) & 0xFE000000 | (v401 >> 7) & 6 | v399;
      v408 = v90[16];
      if (v408 == 1)
      {
        v409 = v8;
        LOWORD(v410) = sub_1C4B12E5C(v8, (uint64_t)(v90 + 16), *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v408 == 2)
      {
        v409 = v8;
        v410 = *((_DWORD *)v90 + 6);
      }
      else
      {
        v411 = *((_QWORD *)v90 + 3);
        v409 = v8;
        if (*(_BYTE *)v411 == 4)
          v410 = *(_DWORD *)(*(_QWORD *)(v411 + 24) + 16) | 0x2000;
        else
          LOWORD(v410) = 0;
      }
      v415 = (unint64_t)(v410 & 0x7F) << 17;
      v416 = (_WORD)v410 << 6;
      goto LABEL_531;
    case 10411:
    case 10412:
    case 10415:
    case 10416:
    case 10419:
    case 10420:
    case 11353:
    case 11354:
    case 11357:
    case 11358:
    case 11361:
    case 11362:
    case 11367:
    case 11368:
    case 11371:
    case 11372:
    case 11375:
    case 11376:
    case 11381:
    case 11382:
    case 11385:
    case 11386:
    case 11389:
    case 11390:
    case 11395:
    case 11396:
    case 11399:
    case 11400:
    case 11403:
    case 11404:
    case 11409:
    case 11410:
    case 11413:
    case 11414:
    case 11417:
    case 11418:
    case 11423:
    case 11424:
    case 11427:
    case 11428:
    case 11431:
    case 11432:
    case 11437:
    case 11438:
    case 11441:
    case 11442:
    case 11445:
    case 11446:
    case 11451:
    case 11452:
    case 11455:
    case 11456:
    case 11459:
    case 11460:
      v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v96 = *((_QWORD *)a2 + 2);
      v99 = *(unsigned __int8 *)(v96 + 64);
      v97 = v96 + 64;
      v98 = v99;
      if (v99 == 1)
      {
        LOBYTE(v100) = sub_1C4B12E5C(a1, v97, *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v98 == 2)
      {
        v100 = *((_DWORD *)v90 + 18);
      }
      else
      {
        v324 = *((_QWORD *)v90 + 9);
        if (*(_BYTE *)v324 == 4)
          v100 = *(_DWORD *)(*(_QWORD *)(v324 + 24) + 16) | 0x2000;
        else
          LOBYTE(v100) = 0;
      }
      v395 = (unint64_t)(v100 & 1) << 40;
      v396 = v90[32];
      if (v396 == 1)
      {
        LOBYTE(v397) = sub_1C4B12E5C(v8, (uint64_t)(v90 + 32), *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v396 == 2)
      {
        v397 = *((_DWORD *)v90 + 10);
      }
      else
      {
        v398 = *((_QWORD *)v90 + 5);
        if (*(_BYTE *)v398 == 4)
          v397 = *(_DWORD *)(*(_QWORD *)(v398 + 24) + 16) | 0x2000;
        else
          LOBYTE(v397) = 0;
      }
      v403 = v395 | ((v397 & 1) << 7);
      v404 = *v90;
      if (v404 == 1)
      {
        v405 = sub_1C4B12E5C(v8, (uint64_t)v90, *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v404 == 2)
      {
        v405 = *((_DWORD *)v90 + 2);
      }
      else
      {
        v406 = *((_QWORD *)v90 + 1);
        if (*(_BYTE *)v406 == 4)
          v405 = *(_DWORD *)(*(_QWORD *)(v406 + 24) + 16) | 0x2000;
        else
          v405 = 0;
      }
      v407 = (v405 << 24) & 0xFE000000 | (v405 >> 7) & 6 | v403;
      v412 = v90[16];
      if (v412 == 1)
      {
        v409 = v8;
        v413 = sub_1C4B12E5C(v8, (uint64_t)(v90 + 16), *(_QWORD *)(a4 + 192), 0);
        v90 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v412 == 2)
      {
        v409 = v8;
        v413 = *((_DWORD *)v90 + 6);
      }
      else
      {
        v414 = *((_QWORD *)v90 + 3);
        v409 = v8;
        if (*(_BYTE *)v414 == 4)
          v413 = *(_DWORD *)(*(_QWORD *)(v414 + 24) + 16) | 0x2000;
        else
          v413 = 0;
      }
      v415 = (v413 << 15) & 0xFE0000;
      v416 = 16 * v413;
LABEL_531:
      v135 = v415 | v416 & 0x6000 | v407;
      v417 = v90[48];
      v137 = (*((_QWORD *)v90 + 11) & 3) << 45;
      if (v417 == 1)
      {
        LOBYTE(v418) = sub_1C4B12E5C(v409, (uint64_t)(v90 + 48), *(_QWORD *)(a4 + 192), 0);
      }
      else if (v417 == 2)
      {
        v418 = *((_DWORD *)v90 + 14);
      }
      else
      {
        v419 = *((_QWORD *)v90 + 7);
        if (*(_BYTE *)v419 == 4)
          v418 = *(_DWORD *)(*(_QWORD *)(v419 + 24) + 16) | 0x2000;
        else
          LOBYTE(v418) = 0;
      }
      v140 = (v418 & 1) << 15;
      goto LABEL_539;
    case 10421:
    case 10422:
    case 11363:
    case 11364:
    case 11377:
    case 11378:
    case 11391:
    case 11392:
    case 11405:
    case 11406:
    case 11419:
    case 11420:
    case 11433:
    case 11434:
    case 11447:
    case 11448:
    case 11461:
    case 11462:
      v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v318 = *((_QWORD *)a2 + 2);
      v321 = *(unsigned __int8 *)(v318 + 64);
      v319 = v318 + 64;
      v320 = v321;
      if (v321 == 1)
      {
        LOBYTE(v322) = sub_1C4B12E5C(a1, v319, *(_QWORD *)(a4 + 192), 0);
        v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v320 == 2)
      {
        v322 = *((_DWORD *)v317 + 18);
      }
      else
      {
        v587 = *((_QWORD *)v317 + 9);
        if (*(_BYTE *)v587 == 4)
          v322 = *(_DWORD *)(*(_QWORD *)(v587 + 24) + 16) | 0x2000;
        else
          LOBYTE(v322) = 0;
      }
      v944 = (unint64_t)(v322 & 1) << 40;
      v945 = v317[48];
      if (v945 == 1)
      {
        LOBYTE(v946) = sub_1C4B12E5C(v8, (uint64_t)(v317 + 48), *(_QWORD *)(a4 + 192), 0);
        v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v945 == 2)
      {
        v946 = *((_DWORD *)v317 + 14);
      }
      else
      {
        v947 = *((_QWORD *)v317 + 7);
        if (*(_BYTE *)v947 == 4)
          v946 = *(_DWORD *)(*(_QWORD *)(v947 + 24) + 16) | 0x2000;
        else
          LOBYTE(v946) = 0;
      }
      v952 = v944 | ((v946 & 1) << 15);
      v953 = v317[32];
      if (v953 == 1)
      {
        LOBYTE(v954) = sub_1C4B12E5C(v8, (uint64_t)(v317 + 32), *(_QWORD *)(a4 + 192), 0);
        v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v953 == 2)
      {
        v954 = *((_DWORD *)v317 + 10);
      }
      else
      {
        v955 = *((_QWORD *)v317 + 5);
        if (*(_BYTE *)v955 == 4)
          v954 = *(_DWORD *)(*(_QWORD *)(v955 + 24) + 16) | 0x2000;
        else
          LOBYTE(v954) = 0;
      }
      v960 = v952 | ((v954 & 1) << 7);
      v961 = *v317;
      if (v961 == 1)
      {
        v962 = sub_1C4B12E5C(v8, (uint64_t)v317, *(_QWORD *)(a4 + 192), 0);
        v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v961 == 2)
      {
        v962 = *((_DWORD *)v317 + 2);
      }
      else
      {
        v963 = *((_QWORD *)v317 + 1);
        if (*(_BYTE *)v963 == 4)
          v962 = *(_DWORD *)(*(_QWORD *)(v963 + 24) + 16) | 0x2000;
        else
          v962 = 0;
      }
      v969 = (v962 << 24) & 0xFE000000 | (v962 >> 7) & 6 | v960;
      v970 = v317[16];
      if (v970 == 1)
      {
        v971 = sub_1C4B12E5C(v8, (uint64_t)(v317 + 16), *(_QWORD *)(a4 + 192), 0);
        v317 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v970 == 2)
      {
        v971 = *((_DWORD *)v317 + 6);
      }
      else
      {
        v972 = *((_QWORD *)v317 + 3);
        if (*(_BYTE *)v972 == 4)
          v971 = *(_DWORD *)(*(_QWORD *)(v972 + 24) + 16) | 0x2000;
        else
          v971 = 0;
      }
      v9 |= (v971 << 6) & 0x6000 | ((*((_QWORD *)v317 + 11) & 3) << 45) | ((unint64_t)(v971 & 0x7F) << 17) | v969;
      return v9;
    case 10423:
    case 10425:
    case 10427:
    case 10428:
    case 10429:
    case 10431:
    case 10433:
    case 10435:
    case 10437:
    case 10439:
    case 10441:
    case 10442:
    case 10443:
    case 10445:
    case 10447:
    case 10449:
    case 10451:
    case 10453:
    case 10455:
    case 10456:
    case 10457:
    case 10459:
    case 10461:
    case 10463:
    case 10465:
    case 10467:
    case 10469:
    case 10470:
    case 10471:
    case 10473:
    case 10475:
    case 10477:
    case 10479:
    case 10481:
    case 10483:
    case 10484:
    case 10485:
    case 10487:
    case 10489:
    case 10491:
    case 10493:
    case 10495:
    case 10497:
    case 10498:
    case 10499:
    case 10501:
    case 10503:
    case 10505:
    case 10507:
    case 10509:
    case 10511:
    case 10512:
    case 10513:
    case 10515:
    case 10517:
    case 10519:
    case 10521:
    case 10523:
    case 10525:
    case 10526:
    case 10527:
    case 10529:
    case 10531:
    case 10533:
    case 10535:
    case 10537:
    case 10539:
    case 10540:
    case 10541:
    case 10543:
    case 10545:
    case 10547:
    case 10549:
    case 10551:
    case 10553:
    case 10554:
    case 10555:
    case 10557:
    case 10559:
    case 10561:
    case 10563:
    case 10565:
    case 10567:
    case 10568:
    case 10569:
    case 10571:
    case 10573:
    case 10575:
    case 10577:
    case 10579:
    case 10581:
    case 10582:
    case 10583:
    case 10585:
    case 10587:
    case 10589:
    case 10591:
    case 10593:
    case 10595:
    case 10596:
    case 10597:
    case 10599:
    case 10601:
    case 10603:
    case 10605:
    case 10607:
    case 10609:
    case 10610:
    case 10611:
    case 10613:
    case 10615:
    case 10617:
    case 10619:
    case 10621:
    case 10623:
    case 10624:
    case 10625:
    case 10627:
    case 10629:
    case 10631:
    case 10633:
    case 10635:
    case 10637:
    case 10638:
    case 10639:
    case 10641:
    case 10643:
    case 10645:
    case 10647:
    case 10649:
    case 10651:
    case 10652:
    case 10653:
    case 10655:
    case 10657:
    case 10659:
    case 10661:
    case 10663:
    case 10665:
    case 10666:
    case 10667:
    case 10669:
    case 10671:
    case 10673:
    case 10675:
    case 10677:
    case 10679:
    case 10680:
    case 10681:
    case 10683:
    case 10685:
    case 10687:
    case 10689:
    case 10691:
    case 10693:
    case 10694:
    case 10695:
    case 10697:
    case 10699:
    case 10701:
    case 10703:
    case 10705:
    case 10707:
    case 10708:
    case 10709:
    case 10711:
    case 10713:
    case 10715:
    case 10717:
    case 10719:
    case 10721:
    case 10722:
    case 10723:
    case 10725:
    case 10727:
    case 10729:
    case 10731:
    case 10733:
    case 10735:
    case 10736:
    case 10737:
    case 10739:
    case 10741:
    case 10743:
    case 10745:
    case 10747:
    case 10749:
    case 10750:
    case 10751:
    case 10753:
    case 10755:
    case 10757:
    case 10759:
    case 10761:
    case 10763:
    case 10764:
    case 10765:
    case 10767:
    case 10769:
    case 10771:
    case 10773:
    case 10775:
    case 10777:
    case 10778:
    case 10779:
    case 10781:
    case 10783:
    case 10785:
    case 10787:
    case 10789:
    case 10791:
    case 10792:
    case 10793:
    case 10795:
    case 10797:
    case 10799:
    case 10801:
    case 10803:
    case 10805:
    case 10806:
    case 10807:
    case 10809:
    case 10811:
    case 10813:
    case 10815:
    case 10817:
    case 10819:
    case 10820:
    case 10821:
    case 10823:
    case 10825:
    case 10827:
    case 10829:
    case 10831:
    case 10833:
    case 10834:
    case 10835:
    case 10837:
    case 10839:
    case 10841:
    case 10843:
    case 10845:
    case 10847:
    case 10848:
    case 10849:
    case 10851:
    case 10853:
    case 10855:
    case 10857:
    case 10859:
    case 10861:
    case 10862:
    case 10863:
    case 10865:
    case 10867:
    case 10869:
    case 10871:
    case 10873:
    case 10875:
    case 10876:
    case 10877:
    case 10879:
    case 10881:
    case 10883:
    case 10887:
    case 10889:
    case 10891:
    case 10892:
    case 10893:
    case 10895:
    case 10897:
    case 10899:
    case 10901:
    case 10903:
    case 10905:
    case 10906:
    case 10907:
    case 10909:
    case 10911:
    case 10913:
    case 10917:
    case 10919:
    case 10921:
    case 10922:
    case 10923:
    case 10925:
    case 10927:
    case 10929:
    case 10931:
    case 10933:
    case 10935:
    case 10936:
    case 10937:
    case 10939:
    case 10941:
    case 10943:
    case 10947:
    case 10949:
    case 10951:
    case 10952:
    case 10953:
    case 10955:
    case 10957:
    case 10959:
    case 10961:
    case 10963:
    case 10965:
    case 10966:
    case 10967:
    case 10969:
    case 10971:
    case 10973:
    case 10977:
    case 10979:
    case 10981:
    case 10982:
    case 10983:
    case 10985:
    case 10987:
    case 10989:
    case 10991:
    case 10993:
    case 10995:
    case 10996:
    case 10997:
    case 10999:
    case 11001:
    case 11003:
    case 11007:
    case 11009:
    case 11011:
    case 11012:
    case 11013:
    case 11015:
    case 11017:
    case 11019:
    case 11021:
    case 11023:
    case 11025:
    case 11026:
    case 11027:
    case 11029:
    case 11031:
    case 11033:
    case 11037:
    case 11039:
    case 11041:
    case 11042:
    case 11043:
    case 11045:
    case 11047:
    case 11049:
    case 11051:
    case 11053:
    case 11055:
    case 11056:
    case 11057:
    case 11059:
    case 11061:
    case 11063:
    case 11067:
    case 11069:
    case 11071:
    case 11072:
    case 11073:
    case 11075:
    case 11077:
    case 11079:
    case 11081:
    case 11083:
    case 11085:
    case 11086:
    case 11087:
    case 11089:
    case 11091:
    case 11093:
    case 11097:
    case 11099:
    case 11101:
    case 11102:
    case 11103:
    case 11105:
    case 11107:
    case 11109:
    case 11111:
    case 11113:
    case 11115:
    case 11116:
    case 11117:
    case 11119:
    case 11121:
    case 11123:
    case 11127:
    case 11129:
    case 11131:
    case 11132:
    case 11133:
    case 11135:
    case 11137:
    case 11139:
    case 11141:
    case 11143:
    case 11145:
    case 11146:
    case 11147:
    case 11149:
    case 11151:
    case 11153:
    case 11157:
    case 11159:
    case 11161:
    case 11162:
    case 11163:
    case 11165:
    case 11167:
    case 11169:
    case 11171:
    case 11173:
    case 11175:
    case 11176:
    case 11177:
    case 11179:
    case 11181:
    case 11183:
    case 11187:
    case 11189:
    case 11191:
    case 11192:
    case 11193:
    case 11195:
    case 11197:
    case 11199:
    case 11201:
    case 11203:
    case 11205:
    case 11206:
    case 11207:
    case 11209:
    case 11211:
    case 11213:
    case 11217:
    case 11219:
    case 11221:
    case 11222:
    case 11223:
    case 11225:
    case 11227:
    case 11229:
    case 11231:
    case 11233:
    case 11235:
    case 11236:
    case 11237:
    case 11239:
    case 11241:
    case 11243:
    case 11247:
    case 11249:
    case 11251:
    case 11252:
    case 11253:
    case 11255:
    case 11257:
    case 11259:
    case 11261:
    case 11263:
    case 11265:
    case 11266:
    case 11267:
    case 11269:
    case 11271:
    case 11273:
    case 11277:
    case 11279:
    case 11281:
    case 11282:
    case 11283:
    case 11285:
    case 11287:
    case 11289:
    case 11291:
    case 11293:
    case 11295:
    case 11296:
    case 11297:
    case 11299:
    case 11301:
    case 11303:
    case 11307:
    case 11309:
    case 11311:
    case 11312:
    case 11313:
    case 11315:
    case 11317:
    case 11319:
    case 11321:
    case 11323:
    case 11325:
    case 11326:
    case 11327:
    case 11329:
    case 11331:
    case 11333:
    case 11337:
    case 11339:
    case 11341:
    case 11342:
    case 11343:
    case 11345:
    case 11347:
    case 11349:
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v12 = *((_QWORD *)a2 + 2);
      v15 = *(unsigned __int8 *)(v12 + 32);
      v13 = v12 + 32;
      v14 = v15;
      if (v15 == 1)
      {
        LOBYTE(v16) = sub_1C4B12E5C(a1, v13, *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v14 == 2)
      {
        v16 = *((_DWORD *)v11 + 10);
      }
      else
      {
        v36 = *((_QWORD *)v11 + 5);
        if (*(_BYTE *)v36 == 4)
          v16 = *(_DWORD *)(*(_QWORD *)(v36 + 24) + 16) | 0x2000;
        else
          LOBYTE(v16) = 0;
      }
      v61 = (unint64_t)(v16 & 1) << 56;
      v62 = *v11;
      if (v62 == 1)
      {
        v63 = sub_1C4B12E5C(v8, (uint64_t)v11, *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v62 == 2)
      {
        v63 = *((unsigned int *)v11 + 2);
      }
      else
      {
        v64 = *((_QWORD *)v11 + 1);
        if (*(_BYTE *)v64 == 4)
          v63 = *(_DWORD *)(*(_QWORD *)(v64 + 24) + 16) | 0x2000u;
        else
          v63 = 0;
      }
      v65 = (v63 << 41) & 0x6000000000000 | (v63 << 40) & 0xFE0000000000 | v61;
      v66 = v11[16];
      if (v66 == 1)
      {
        v67 = sub_1C4B12E5C(v8, (uint64_t)(v11 + 16), *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v66 == 2)
      {
        v67 = *((unsigned int *)v11 + 6);
      }
      else
      {
        v68 = *((_QWORD *)v11 + 3);
        if (*(_BYTE *)v68 == 4)
          v67 = *(_DWORD *)(*(_QWORD *)(v68 + 24) + 16) | 0x2000u;
        else
          v67 = 0;
      }
      v69 = (v67 << 25) & 0x1E00000000 | v65 | ((_DWORD)v67 << 24);
      goto LABEL_74;
    case 10424:
    case 10426:
    case 10430:
    case 10432:
    case 10434:
    case 10436:
    case 10438:
    case 10440:
    case 10444:
    case 10446:
    case 10448:
    case 10450:
    case 10452:
    case 10454:
    case 10458:
    case 10460:
    case 10462:
    case 10464:
    case 10466:
    case 10468:
    case 10472:
    case 10474:
    case 10476:
    case 10478:
    case 10480:
    case 10482:
    case 10486:
    case 10488:
    case 10490:
    case 10492:
    case 10494:
    case 10496:
    case 10500:
    case 10502:
    case 10504:
    case 10506:
    case 10508:
    case 10510:
    case 10514:
    case 10516:
    case 10518:
    case 10520:
    case 10522:
    case 10524:
    case 10528:
    case 10530:
    case 10532:
    case 10534:
    case 10536:
    case 10538:
    case 10542:
    case 10544:
    case 10546:
    case 10548:
    case 10550:
    case 10552:
    case 10556:
    case 10558:
    case 10560:
    case 10562:
    case 10564:
    case 10566:
    case 10570:
    case 10572:
    case 10574:
    case 10576:
    case 10578:
    case 10580:
    case 10584:
    case 10586:
    case 10588:
    case 10590:
    case 10592:
    case 10594:
    case 10598:
    case 10600:
    case 10602:
    case 10604:
    case 10606:
    case 10608:
    case 10612:
    case 10614:
    case 10616:
    case 10618:
    case 10620:
    case 10622:
    case 10626:
    case 10628:
    case 10630:
    case 10632:
    case 10634:
    case 10636:
    case 10640:
    case 10642:
    case 10644:
    case 10646:
    case 10648:
    case 10650:
    case 10654:
    case 10656:
    case 10658:
    case 10660:
    case 10662:
    case 10664:
    case 10668:
    case 10670:
    case 10672:
    case 10674:
    case 10676:
    case 10678:
    case 10682:
    case 10684:
    case 10686:
    case 10688:
    case 10690:
    case 10692:
    case 10696:
    case 10698:
    case 10700:
    case 10702:
    case 10704:
    case 10706:
    case 10710:
    case 10712:
    case 10714:
    case 10716:
    case 10718:
    case 10720:
    case 10724:
    case 10726:
    case 10728:
    case 10730:
    case 10732:
    case 10734:
    case 10738:
    case 10740:
    case 10742:
    case 10744:
    case 10746:
    case 10748:
    case 10752:
    case 10754:
    case 10756:
    case 10758:
    case 10760:
    case 10762:
    case 10766:
    case 10768:
    case 10770:
    case 10772:
    case 10774:
    case 10776:
    case 10780:
    case 10782:
    case 10784:
    case 10786:
    case 10788:
    case 10790:
    case 10794:
    case 10796:
    case 10798:
    case 10800:
    case 10802:
    case 10804:
    case 10808:
    case 10810:
    case 10812:
    case 10814:
    case 10816:
    case 10818:
    case 10822:
    case 10824:
    case 10826:
    case 10828:
    case 10830:
    case 10832:
    case 10836:
    case 10838:
    case 10840:
    case 10842:
    case 10844:
    case 10846:
    case 10850:
    case 10852:
    case 10854:
    case 10856:
    case 10858:
    case 10860:
    case 10864:
    case 10866:
    case 10868:
    case 10870:
    case 10872:
    case 10874:
    case 10878:
    case 10880:
    case 10882:
    case 10884:
    case 10888:
    case 10890:
    case 10894:
    case 10896:
    case 10898:
    case 10900:
    case 10902:
    case 10904:
    case 10908:
    case 10910:
    case 10912:
    case 10914:
    case 10918:
    case 10920:
    case 10924:
    case 10926:
    case 10928:
    case 10930:
    case 10932:
    case 10934:
    case 10938:
    case 10940:
    case 10942:
    case 10944:
    case 10948:
    case 10950:
    case 10954:
    case 10956:
    case 10958:
    case 10960:
    case 10962:
    case 10964:
    case 10968:
    case 10970:
    case 10972:
    case 10974:
    case 10978:
    case 10980:
    case 10984:
    case 10986:
    case 10988:
    case 10990:
    case 10992:
    case 10994:
    case 10998:
    case 11000:
    case 11002:
    case 11004:
    case 11008:
    case 11010:
    case 11014:
    case 11016:
    case 11018:
    case 11020:
    case 11022:
    case 11024:
    case 11028:
    case 11030:
    case 11032:
    case 11034:
    case 11038:
    case 11040:
    case 11044:
    case 11046:
    case 11048:
    case 11050:
    case 11052:
    case 11054:
    case 11058:
    case 11060:
    case 11062:
    case 11064:
    case 11068:
    case 11070:
    case 11074:
    case 11076:
    case 11078:
    case 11080:
    case 11082:
    case 11084:
    case 11088:
    case 11090:
    case 11092:
    case 11094:
    case 11098:
    case 11100:
    case 11104:
    case 11106:
    case 11108:
    case 11110:
    case 11112:
    case 11114:
    case 11118:
    case 11120:
    case 11122:
    case 11124:
    case 11128:
    case 11130:
    case 11134:
    case 11136:
    case 11138:
    case 11140:
    case 11142:
    case 11144:
    case 11148:
    case 11150:
    case 11152:
    case 11154:
    case 11158:
    case 11160:
    case 11164:
    case 11166:
    case 11168:
    case 11170:
    case 11172:
    case 11174:
    case 11178:
    case 11180:
    case 11182:
    case 11184:
    case 11188:
    case 11190:
    case 11194:
    case 11196:
    case 11198:
    case 11200:
    case 11202:
    case 11204:
    case 11208:
    case 11210:
    case 11212:
    case 11214:
    case 11218:
    case 11220:
    case 11224:
    case 11226:
    case 11228:
    case 11230:
    case 11232:
    case 11234:
    case 11238:
    case 11240:
    case 11242:
    case 11244:
    case 11248:
    case 11250:
    case 11254:
    case 11256:
    case 11258:
    case 11260:
    case 11262:
    case 11264:
    case 11268:
    case 11270:
    case 11272:
    case 11274:
    case 11278:
    case 11280:
    case 11284:
    case 11286:
    case 11288:
    case 11290:
    case 11292:
    case 11294:
    case 11298:
    case 11300:
    case 11302:
    case 11304:
    case 11308:
    case 11310:
    case 11314:
    case 11316:
    case 11318:
    case 11320:
    case 11322:
    case 11324:
    case 11328:
    case 11330:
    case 11332:
    case 11334:
    case 11338:
    case 11340:
    case 11344:
    case 11346:
    case 11348:
    case 11350:
      v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v19 = *((_QWORD *)a2 + 2);
      v22 = *(unsigned __int8 *)(v19 + 48);
      v20 = v19 + 48;
      v21 = v22;
      if (v22 == 1)
      {
        LOBYTE(v23) = sub_1C4B12E5C(a1, v20, *(_QWORD *)(a4 + 192), 0);
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v21 == 2)
      {
        v23 = *((_DWORD *)v18 + 14);
      }
      else
      {
        v49 = *((_QWORD *)v18 + 7);
        if (*(_BYTE *)v49 == 4)
          v23 = *(_DWORD *)(*(_QWORD *)(v49 + 24) + 16) | 0x2000;
        else
          LOBYTE(v23) = 0;
      }
      v77 = (unint64_t)(v23 & 1) << 56;
      v78 = *v18;
      if (v78 == 1)
      {
        v79 = sub_1C4B12E5C(v8, (uint64_t)v18, *(_QWORD *)(a4 + 192), 0);
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v78 == 2)
      {
        v79 = *((unsigned int *)v18 + 2);
      }
      else
      {
        v80 = *((_QWORD *)v18 + 1);
        if (*(_BYTE *)v80 == 4)
          v79 = *(_DWORD *)(*(_QWORD *)(v80 + 24) + 16) | 0x2000u;
        else
          v79 = 0;
      }
      v81 = (v79 << 41) & 0x6000000000000 | (v79 << 40) & 0xFE0000000000 | v77;
      v82 = v18[16];
      if (v82 == 1)
      {
        v83 = sub_1C4B12E5C(v8, (uint64_t)(v18 + 16), *(_QWORD *)(a4 + 192), 0);
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v82 == 2)
      {
        v83 = *((unsigned int *)v18 + 6);
      }
      else
      {
        v84 = *((_QWORD *)v18 + 3);
        if (*(_BYTE *)v84 == 4)
          v83 = *(_DWORD *)(*(_QWORD *)(v84 + 24) + 16) | 0x2000u;
        else
          v83 = 0;
      }
      v85 = (v83 << 25) & 0x1E00000000 | v81 | ((_DWORD)v83 << 24);
      v86 = v18[32];
      if (v86 == 1)
      {
        v87 = sub_1C4B12E5C(v8, (uint64_t)(v18 + 32), *(_QWORD *)(a4 + 192), 0);
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v86 == 2)
      {
        v87 = *((unsigned int *)v18 + 10);
      }
      else
      {
        v88 = *((_QWORD *)v18 + 5);
        if (*(_BYTE *)v88 == 4)
          v87 = *(_DWORD *)(*(_QWORD *)(v88 + 24) + 16) | 0x2000u;
        else
          v87 = 0;
      }
      v69 = (v87 << 51) & 0xE0000000000000 | ((_DWORD)v87 << 12) & 0xFE0000 | v85;
      v70 = *((_QWORD *)v18 + 9);
      goto LABEL_111;
    case 10885:
    case 10886:
    case 10915:
    case 10916:
    case 10945:
    case 10946:
    case 10975:
    case 10976:
    case 11005:
    case 11006:
    case 11035:
    case 11036:
    case 11065:
    case 11066:
    case 11095:
    case 11096:
    case 11125:
    case 11126:
    case 11155:
    case 11156:
    case 11185:
    case 11186:
    case 11215:
    case 11216:
    case 11245:
    case 11246:
    case 11275:
    case 11276:
    case 11305:
    case 11306:
    case 11335:
    case 11336:
      v153 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v154 = *((_QWORD *)a2 + 2);
      v157 = *(unsigned __int8 *)(v154 + 16);
      v155 = v154 + 16;
      v156 = v157;
      if (v157 == 1)
      {
        LOBYTE(v158) = sub_1C4B12E5C(a1, v155, *(_QWORD *)(a4 + 192), 0);
        v153 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v156 == 2)
      {
        v158 = *((_DWORD *)v153 + 6);
      }
      else
      {
        v384 = *((_QWORD *)v153 + 3);
        if (*(_BYTE *)v384 == 4)
          v158 = *(_DWORD *)(*(_QWORD *)(v384 + 24) + 16) | 0x2000;
        else
          LOBYTE(v158) = 0;
      }
      v642 = (unint64_t)(v158 & 1) << 56;
      v643 = *v153;
      if (v643 == 1)
      {
        v644 = sub_1C4B12E5C(v8, (uint64_t)v153, *(_QWORD *)(a4 + 192), 0);
        v153 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v643 == 2)
      {
        v644 = *((unsigned int *)v153 + 2);
      }
      else
      {
        v645 = *((_QWORD *)v153 + 1);
        if (*(_BYTE *)v645 == 4)
          v644 = *(_DWORD *)(*(_QWORD *)(v645 + 24) + 16) | 0x2000u;
        else
          v644 = 0;
      }
      v69 = (v644 << 41) & 0x6000000000000 | (v644 << 40) & 0xFE0000000000 | v642;
      v70 = *((_QWORD *)v153 + 5);
      goto LABEL_111;
    case 11463:
    case 11464:
    case 11467:
    case 11468:
    case 11471:
    case 11472:
    case 11477:
    case 11478:
    case 11481:
    case 11482:
    case 11485:
    case 11486:
    case 11491:
    case 11492:
    case 11495:
    case 11496:
    case 11499:
    case 11500:
    case 11505:
    case 11506:
    case 11509:
    case 11510:
    case 11513:
    case 11514:
    case 11519:
    case 11520:
    case 11523:
    case 11524:
    case 11527:
    case 11528:
    case 11533:
    case 11534:
    case 11537:
    case 11538:
    case 11541:
    case 11542:
    case 11547:
    case 11548:
    case 11551:
    case 11552:
    case 11555:
    case 11556:
    case 11561:
    case 11562:
    case 11565:
    case 11566:
    case 11569:
    case 11570:
      v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v106 = *((_QWORD *)a2 + 2);
      v109 = *(unsigned __int8 *)(v106 + 80);
      v107 = v106 + 80;
      v108 = v109;
      if (v109 == 1)
      {
        LOBYTE(v110) = sub_1C4B12E5C(a1, v107, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v108 == 2)
      {
        v110 = *((_DWORD *)v105 + 22);
      }
      else
      {
        v340 = *((_QWORD *)v105 + 11);
        if (*(_BYTE *)v340 == 4)
          v110 = *(_DWORD *)(*(_QWORD *)(v340 + 24) + 16) | 0x2000;
        else
          LOBYTE(v110) = 0;
      }
      v421 = (unint64_t)(v110 & 1) << 40;
      v422 = v105[64];
      if (v422 == 1)
      {
        LOBYTE(v423) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 64), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v422 == 2)
      {
        v423 = *((_DWORD *)v105 + 18);
      }
      else
      {
        v424 = *((_QWORD *)v105 + 9);
        if (*(_BYTE *)v424 == 4)
          v423 = *(_DWORD *)(*(_QWORD *)(v424 + 24) + 16) | 0x2000;
        else
          LOBYTE(v423) = 0;
      }
      v429 = v421 | ((v423 & 1) << 15);
      v430 = v105[48];
      if (v430 == 1)
      {
        LOBYTE(v431) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 48), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v430 == 2)
      {
        v431 = *((_DWORD *)v105 + 14);
      }
      else
      {
        v432 = *((_QWORD *)v105 + 7);
        if (*(_BYTE *)v432 == 4)
          v431 = *(_DWORD *)(*(_QWORD *)(v432 + 24) + 16) | 0x2000;
        else
          LOBYTE(v431) = 0;
      }
      v437 = v429 | ((v431 & 1) << 7);
      v438 = *v105;
      if (v438 == 1)
      {
        v439 = sub_1C4B12E5C(v8, (uint64_t)v105, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v438 == 2)
      {
        v439 = *((_DWORD *)v105 + 2);
      }
      else
      {
        v440 = *((_QWORD *)v105 + 1);
        if (*(_BYTE *)v440 == 4)
          v439 = *(_DWORD *)(*(_QWORD *)(v440 + 24) + 16) | 0x2000;
        else
          v439 = 0;
      }
      v445 = (v439 << 24) & 0xFE000000 | (v439 >> 7) & 6 | v437;
      v446 = v105[16];
      if (v446 == 1)
      {
        v447 = v8;
        LOWORD(v448) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 16), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v446 == 2)
      {
        v447 = v8;
        v448 = *((_DWORD *)v105 + 6);
      }
      else
      {
        v449 = *((_QWORD *)v105 + 3);
        v447 = v8;
        if (*(_BYTE *)v449 == 4)
          v448 = *(_DWORD *)(*(_QWORD *)(v449 + 24) + 16) | 0x2000;
        else
          LOWORD(v448) = 0;
      }
      v454 = ((unint64_t)(v448 & 0x7F) << 17) | v445;
      v455 = (_WORD)v448 << 6;
      goto LABEL_603;
    case 11465:
    case 11466:
    case 11469:
    case 11470:
    case 11473:
    case 11474:
    case 11479:
    case 11480:
    case 11483:
    case 11484:
    case 11487:
    case 11488:
    case 11493:
    case 11494:
    case 11497:
    case 11498:
    case 11501:
    case 11502:
    case 11507:
    case 11508:
    case 11511:
    case 11512:
    case 11515:
    case 11516:
    case 11521:
    case 11522:
    case 11525:
    case 11526:
    case 11529:
    case 11530:
    case 11535:
    case 11536:
    case 11539:
    case 11540:
    case 11543:
    case 11544:
    case 11549:
    case 11550:
    case 11553:
    case 11554:
    case 11557:
    case 11558:
    case 11563:
    case 11564:
    case 11567:
    case 11568:
    case 11571:
    case 11572:
      v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v111 = *((_QWORD *)a2 + 2);
      v114 = *(unsigned __int8 *)(v111 + 80);
      v112 = v111 + 80;
      v113 = v114;
      if (v114 == 1)
      {
        LOBYTE(v115) = sub_1C4B12E5C(a1, v112, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v113 == 2)
      {
        v115 = *((_DWORD *)v105 + 22);
      }
      else
      {
        v341 = *((_QWORD *)v105 + 11);
        if (*(_BYTE *)v341 == 4)
          v115 = *(_DWORD *)(*(_QWORD *)(v341 + 24) + 16) | 0x2000;
        else
          LOBYTE(v115) = 0;
      }
      v425 = (unint64_t)(v115 & 1) << 40;
      v426 = v105[64];
      if (v426 == 1)
      {
        LOBYTE(v427) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 64), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v426 == 2)
      {
        v427 = *((_DWORD *)v105 + 18);
      }
      else
      {
        v428 = *((_QWORD *)v105 + 9);
        if (*(_BYTE *)v428 == 4)
          v427 = *(_DWORD *)(*(_QWORD *)(v428 + 24) + 16) | 0x2000;
        else
          LOBYTE(v427) = 0;
      }
      v433 = v425 | ((v427 & 1) << 15);
      v434 = v105[48];
      if (v434 == 1)
      {
        LOBYTE(v435) = sub_1C4B12E5C(v8, (uint64_t)(v105 + 48), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v434 == 2)
      {
        v435 = *((_DWORD *)v105 + 14);
      }
      else
      {
        v436 = *((_QWORD *)v105 + 7);
        if (*(_BYTE *)v436 == 4)
          v435 = *(_DWORD *)(*(_QWORD *)(v436 + 24) + 16) | 0x2000;
        else
          LOBYTE(v435) = 0;
      }
      v441 = v433 | ((v435 & 1) << 7);
      v442 = *v105;
      if (v442 == 1)
      {
        v443 = sub_1C4B12E5C(v8, (uint64_t)v105, *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v442 == 2)
      {
        v443 = *((_DWORD *)v105 + 2);
      }
      else
      {
        v444 = *((_QWORD *)v105 + 1);
        if (*(_BYTE *)v444 == 4)
          v443 = *(_DWORD *)(*(_QWORD *)(v444 + 24) + 16) | 0x2000;
        else
          v443 = 0;
      }
      v450 = (v443 << 24) & 0xFE000000 | (v443 >> 7) & 6 | v441;
      v451 = v105[16];
      if (v451 == 1)
      {
        v447 = v8;
        v452 = sub_1C4B12E5C(v8, (uint64_t)(v105 + 16), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v451 == 2)
      {
        v447 = v8;
        v452 = *((_DWORD *)v105 + 6);
      }
      else
      {
        v453 = *((_QWORD *)v105 + 3);
        v447 = v8;
        if (*(_BYTE *)v453 == 4)
          v452 = *(_DWORD *)(*(_QWORD *)(v453 + 24) + 16) | 0x2000;
        else
          v452 = 0;
      }
      v454 = (v452 << 15) & 0xFE0000 | (unint64_t)v450;
      v455 = 16 * v452;
LABEL_603:
      v456 = v455 & 0x6000;
      v457 = v105[32];
      if (v457 == 1)
      {
        v458 = sub_1C4B12E5C(v447, (uint64_t)(v105 + 32), *(_QWORD *)(a4 + 192), 0);
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v457 == 2)
      {
        v458 = *((_DWORD *)v105 + 10);
      }
      else
      {
        v459 = *((_QWORD *)v105 + 5);
        if (*(_BYTE *)v459 == 4)
          v458 = *(_DWORD *)(*(_QWORD *)(v459 + 24) + 16) | 0x2000;
        else
          v458 = 0;
      }
      v460 = v458 >> 4;
      v461 = (v458 << 6) & 0x1F00;
LABEL_611:
      v462 = *((_QWORD *)v105 + 13);
      v463 = v456 | v454 | v461 | v460 & 0x78;
LABEL_612:
      v89 = v463 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v462 & 3) << 45);
      goto LABEL_112;
    case 11577:
    case 11578:
    case 11579:
    case 11580:
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v852 = *v11;
      if (v852 == 1)
      {
        v853 = sub_1C4B12E5C(a1, (uint64_t)v11, *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v852 == 2)
      {
        v853 = *((unsigned int *)v11 + 2);
      }
      else
      {
        v1070 = *((_QWORD *)v11 + 1);
        if (*(_BYTE *)v1070 == 4)
          v853 = *(_DWORD *)(*(_QWORD *)(v1070 + 24) + 16) | 0x2000u;
        else
          v853 = 0;
      }
      v1152 = (v853 << 41) & 0x6000000000000 | ((unint64_t)v853 << 40) | ((((unint64_t)v853 >> 10) & 0xF) << 35);
      v1153 = v11[16];
      if (v1153 == 1)
      {
        v1154 = sub_1C4B12E5C(v8, (uint64_t)(v11 + 16), *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1153 == 2)
      {
        v1154 = *((unsigned int *)v11 + 6);
      }
      else
      {
        v1155 = *((_QWORD *)v11 + 3);
        if (*(_BYTE *)v1155 == 4)
          v1154 = *(_DWORD *)(*(_QWORD *)(v1155 + 24) + 16) | 0x2000u;
        else
          v1154 = 0;
      }
      v357 = v1152 | (v1154 << 25) & 0x600000000;
      v358 = ((_DWORD)v1154 << 24);
LABEL_436:
      v359 = v358 | v357;
      v360 = (uint64_t)(v11 + 32);
      v361 = v11[32];
      if (v361 != 1)
        goto LABEL_437;
      v364 = *(_QWORD *)(a4 + 192);
      v365 = v8;
      goto LABEL_442;
    case 11581:
    case 11582:
    case 11583:
    case 11584:
    case 11585:
    case 11586:
    case 11587:
    case 11592:
    case 11593:
    case 11594:
    case 11595:
    case 11596:
    case 11597:
    case 11598:
    case 11599:
    case 11600:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11605:
    case 11610:
    case 11611:
    case 11612:
    case 11613:
    case 11614:
    case 11615:
    case 11616:
    case 11617:
    case 11618:
    case 11619:
    case 11620:
    case 11621:
    case 11622:
    case 11623:
    case 11624:
    case 11625:
    case 11626:
    case 11627:
    case 11628:
    case 11629:
    case 11630:
    case 11631:
    case 11632:
    case 11633:
    case 11634:
    case 11635:
    case 11636:
    case 11637:
    case 11638:
    case 11639:
    case 11640:
    case 11641:
    case 11642:
    case 11643:
    case 11644:
    case 11645:
    case 11646:
    case 11647:
    case 11648:
    case 11649:
    case 11650:
    case 11651:
    case 11656:
    case 11657:
    case 11658:
    case 11659:
    case 11660:
    case 11661:
    case 11662:
    case 11663:
    case 11664:
    case 11665:
    case 11666:
    case 11667:
    case 11668:
    case 11669:
    case 11670:
    case 11671:
    case 11672:
    case 11673:
    case 11674:
    case 11675:
    case 11676:
    case 11677:
    case 11678:
    case 11679:
    case 11680:
    case 11681:
    case 11682:
    case 11683:
    case 11684:
    case 11685:
    case 11686:
    case 11687:
    case 11688:
    case 11689:
    case 11690:
    case 11691:
    case 11692:
    case 11693:
    case 11694:
    case 11695:
    case 11696:
    case 11697:
    case 11698:
    case 11699:
    case 11700:
    case 11701:
    case 11702:
    case 11703:
    case 11704:
    case 11709:
    case 11710:
    case 11711:
    case 11712:
    case 11713:
    case 11714:
    case 11715:
    case 11720:
    case 11721:
    case 11722:
    case 11723:
    case 11724:
    case 11725:
    case 11726:
    case 13206:
    case 13207:
    case 13208:
    case 13209:
    case 13210:
    case 13211:
    case 13212:
    case 13217:
    case 13218:
    case 13219:
    case 13220:
    case 13221:
    case 13222:
    case 13223:
    case 13224:
    case 13225:
    case 13226:
    case 13227:
    case 13228:
    case 13229:
    case 13230:
    case 13235:
    case 13236:
    case 13237:
    case 13238:
    case 13239:
    case 13240:
    case 13241:
    case 13242:
    case 13243:
    case 13244:
    case 13245:
    case 13246:
    case 13247:
    case 13248:
    case 13249:
    case 13250:
    case 13251:
    case 13252:
    case 13253:
    case 13254:
    case 13255:
    case 13256:
    case 13257:
    case 13258:
    case 13259:
    case 13260:
    case 13261:
    case 13262:
    case 13263:
    case 13264:
    case 13265:
    case 13266:
    case 13267:
    case 13268:
    case 13269:
    case 13270:
    case 13271:
    case 13272:
    case 13273:
    case 13274:
    case 13275:
    case 13276:
    case 13281:
    case 13282:
    case 13283:
    case 13284:
    case 13285:
    case 13286:
    case 13287:
    case 13288:
    case 13289:
    case 13290:
    case 13291:
    case 13292:
    case 13293:
    case 13294:
    case 13295:
    case 13296:
    case 13297:
    case 13298:
    case 13299:
    case 13300:
    case 13301:
    case 13302:
    case 13303:
    case 13304:
    case 13305:
    case 13306:
    case 13307:
    case 13308:
    case 13309:
    case 13310:
    case 13311:
    case 13312:
    case 13313:
    case 13314:
    case 13315:
    case 13316:
    case 13317:
    case 13318:
    case 13319:
    case 13320:
    case 13321:
    case 13322:
    case 13323:
    case 13324:
    case 13325:
    case 13326:
    case 13327:
    case 13328:
    case 13329:
    case 13334:
    case 13335:
    case 13336:
    case 13337:
    case 13338:
    case 13339:
    case 13340:
    case 13345:
    case 13346:
    case 13347:
    case 13348:
    case 13349:
    case 13350:
    case 13351:
      v24 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v25 = *v24;
      if (v25 == 1)
      {
        v26 = sub_1C4B12E5C(a1, (uint64_t)v24, *(_QWORD *)(a4 + 192), 0);
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v25 == 2)
      {
        v26 = *((unsigned int *)v24 + 2);
      }
      else
      {
        v71 = *((_QWORD *)v24 + 1);
        if (*(_BYTE *)v71 == 4)
          v26 = *(_DWORD *)(*(_QWORD *)(v71 + 24) + 16) | 0x2000u;
        else
          v26 = 0;
      }
      v122 = (v26 << 41) & 0x6000000000000 | ((unint64_t)v26 << 40) | ((((unint64_t)v26 >> 10) & 0xF) << 35);
      v123 = v24[16];
      if (v123 == 1)
      {
        v124 = sub_1C4B12E5C(v8, (uint64_t)(v24 + 16), *(_QWORD *)(a4 + 192), 0);
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v123 == 2)
      {
        v124 = *((unsigned int *)v24 + 6);
      }
      else
      {
        v125 = *((_QWORD *)v24 + 3);
        if (*(_BYTE *)v125 == 4)
          v124 = *(_DWORD *)(*(_QWORD *)(v125 + 24) + 16) | 0x2000u;
        else
          v124 = 0;
      }
      v126 = ((_DWORD)v124 << 24) | v122 | (v124 << 25) & 0x600000000;
      v127 = v24[32];
      if (v127 == 1)
      {
        LOBYTE(v128) = sub_1C4B12E5C(v8, (uint64_t)(v24 + 32), *(_QWORD *)(a4 + 192), 0);
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v127 == 2)
      {
        v128 = *((_DWORD *)v24 + 10);
      }
      else
      {
        v129 = *((_QWORD *)v24 + 5);
        if (*(_BYTE *)v129 == 4)
          v128 = *(_DWORD *)(*(_QWORD *)(v129 + 24) + 16) | 0x2000;
        else
          LOBYTE(v128) = 0;
      }
      v130 = v126 | (32 * (v128 & 3u));
      v131 = v24[64];
      if (v131 == 1)
      {
        v132 = v8;
        LOBYTE(v133) = sub_1C4B12E5C(v8, (uint64_t)(v24 + 64), *(_QWORD *)(a4 + 192), 0);
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v131 == 2)
      {
        v132 = v8;
        v133 = *((_DWORD *)v24 + 18);
      }
      else
      {
        v134 = *((_QWORD *)v24 + 9);
        v132 = v8;
        if (*(_BYTE *)v134 == 4)
          v133 = *(_DWORD *)(*(_QWORD *)(v134 + 24) + 16) | 0x2000;
        else
          LOBYTE(v133) = 0;
      }
      v135 = v130 | ((unint64_t)(v133 & 1) << 56);
      v136 = v24[48];
      v137 = (*((_QWORD *)v24 + 11) & 3) << 61;
      if (v136 == 1)
      {
        LOBYTE(v138) = sub_1C4B12E5C(v132, (uint64_t)(v24 + 48), *(_QWORD *)(a4 + 192), 0);
      }
      else if (v136 == 2)
      {
        v138 = *((_DWORD *)v24 + 14);
      }
      else
      {
        v139 = *((_QWORD *)v24 + 7);
        if (*(_BYTE *)v139 == 4)
          v138 = *(_DWORD *)(*(_QWORD *)(v139 + 24) + 16) | 0x2000;
        else
          LOBYTE(v138) = 0;
      }
      v140 = (v138 & 3) << 13;
LABEL_539:
      v293 = v137 | v135;
      goto LABEL_1186;
    case 11588:
    case 11589:
    case 11590:
    case 11591:
    case 11606:
    case 11607:
    case 11608:
    case 11609:
    case 11652:
    case 11653:
    case 11654:
    case 11655:
    case 11705:
    case 11706:
    case 11707:
    case 11708:
    case 11716:
    case 11717:
    case 11718:
    case 11719:
    case 11727:
    case 11728:
    case 11729:
    case 11730:
    case 13213:
    case 13214:
    case 13215:
    case 13216:
    case 13231:
    case 13232:
    case 13233:
    case 13234:
    case 13277:
    case 13278:
    case 13279:
    case 13280:
    case 13330:
    case 13331:
    case 13332:
    case 13333:
    case 13341:
    case 13342:
    case 13343:
    case 13344:
    case 13352:
    case 13353:
    case 13354:
    case 13355:
      v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v117 = *v116;
      if (v117 == 1)
      {
        LODWORD(v118) = sub_1C4B12E5C(a1, (uint64_t)v116, *(_QWORD *)(a4 + 192), 0);
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v117 == 2)
      {
        LODWORD(v118) = *((_DWORD *)v116 + 2);
      }
      else
      {
        v343 = *((_QWORD *)v116 + 1);
        if (*(_BYTE *)v343 == 4)
          LODWORD(v118) = *(_DWORD *)(*(_QWORD *)(v343 + 24) + 16) | 0x2000;
        else
          LODWORD(v118) = 0;
      }
      if (v116[16] == 1)
      {
        v467 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 104) + 2 * *((unsigned int *)v116 + 6));
      }
      else
      {
        v468 = *((_QWORD *)v116 + 3);
        if (v468)
          v469 = v468 - 8;
        else
          v469 = 0;
        v467 = (*(_QWORD *)(*(_QWORD *)(v469 + 32) + 16) / 2) | 0x2000;
      }
      v470 = v116[32];
      if (v470 == 1)
      {
        v471 = sub_1C4B12E5C(v8, (uint64_t)(v116 + 32), *(_QWORD *)(a4 + 192), 0);
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v470 == 2)
      {
        v471 = *((_DWORD *)v116 + 10);
      }
      else
      {
        v472 = *((_QWORD *)v116 + 5);
        if (*(_BYTE *)v472 == 4)
          v471 = *(_DWORD *)(*(_QWORD *)(v472 + 24) + 16) | 0x2000;
        else
          v471 = 0;
      }
      v476 = v116[48];
      if (v476 == 1)
      {
        LOBYTE(v477) = sub_1C4B12E5C(v8, (uint64_t)(v116 + 48), *(_QWORD *)(a4 + 192), 0);
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v476 == 2)
      {
        v477 = *((_DWORD *)v116 + 14);
      }
      else
      {
        v478 = *((_QWORD *)v116 + 7);
        if (*(_BYTE *)v478 == 4)
          v477 = *(_DWORD *)(*(_QWORD *)(v478 + 24) + 16) | 0x2000;
        else
          LOBYTE(v477) = 0;
      }
      v484 = (_DWORD)v118 << 14;
      v485 = (_DWORD)v467 << 10;
      v486 = (v471 << 24);
      v487 = 2 * (v477 & 3u);
      v488 = v116[64];
      v1367 = a4;
      if (v488 == 1)
      {
        v490 = *(_QWORD *)(a4 + 192);
        v491 = 2 * (v477 & 3u);
        LOBYTE(v489) = sub_1C4B12E5C(v8, (uint64_t)(v116 + 64), v490, 0);
        v487 = v491;
        v486 = (v471 << 24);
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v488 == 2)
      {
        v489 = *((_DWORD *)v116 + 18);
      }
      else
      {
        v492 = *((_QWORD *)v116 + 9);
        if (*(_BYTE *)v492 == 4)
          v489 = *(_DWORD *)(*(_QWORD *)(v492 + 24) + 16) | 0x2000;
        else
          LOBYTE(v489) = 0;
      }
      v498 = v467 << 44;
      v499 = v467 >> 4;
      v500 = 16 * (v489 & 1u);
      v501 = v116[80];
      v1358 = v8;
      if (v501 == 1)
      {
        v503 = v8;
        v504 = v486;
        v1344 = (_DWORD)v467 << 10;
        v1348 = v467;
        v505 = v471;
        v506 = v118;
        v118 = v487;
        LODWORD(v467) = v484;
        v507 = v500;
        LOBYTE(v502) = sub_1C4B12E5C(v503, (uint64_t)(v116 + 80), *(_QWORD *)(v1367 + 192), 0);
        v500 = v507;
        v484 = v467;
        v487 = v118;
        LOBYTE(v118) = v506;
        LOWORD(v471) = v505;
        v485 = v1344;
        LOBYTE(v467) = v1348;
        v486 = v504;
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v501 == 2)
      {
        v502 = *((_DWORD *)v116 + 22);
      }
      else
      {
        v508 = *((_QWORD *)v116 + 11);
        if (*(_BYTE *)v508 == 4)
          v502 = *(_DWORD *)(*(_QWORD *)(v508 + 24) + 16) | 0x2000;
        else
          LOBYTE(v502) = 0;
      }
      v519 = (unint64_t)(v118 & 0x3F) << 40;
      v520 = *(_QWORD *)&v484 & 0xF00000;
      v521 = v498 & 0x200000000000000;
      v522 = (v467 & 0x7F) << 33;
      v523 = *(_QWORD *)&v485 & 0xE0000;
      v524 = v499 & 0xC0;
      v525 = (unsigned __int16)v471 & 0xFF00;
      v526 = 8 * (v502 & 1u);
      v527 = v116[96];
      v528 = (*((_QWORD *)v116 + 15) & 3) << 61;
      if (v527 == 1)
      {
        v530 = v1358;
        v1349 = *(_QWORD *)&v485 & 0xE0000;
        v1359 = v486;
        v531 = *(_QWORD *)(v1367 + 192);
        v1368 = v526;
        v532 = v487;
        v533 = v500;
        v534 = v519;
        v535 = v520;
        v536 = v521;
        v537 = v522;
        LOBYTE(v529) = sub_1C4B12E5C(v530, (uint64_t)(v116 + 96), v531, 0);
        v486 = v1359;
        v526 = v1368;
        v523 = v1349;
        v522 = v537;
        v521 = v536;
        v520 = v535;
        v519 = v534;
        v500 = v533;
        v487 = v532;
      }
      else if (v527 == 2)
      {
        v529 = *((_DWORD *)v116 + 26);
      }
      else
      {
        v538 = *((_QWORD *)v116 + 13);
        if (*(_BYTE *)v538 == 4)
          v529 = *(_DWORD *)(*(_QWORD *)(v538 + 24) + 16) | 0x2000;
        else
          LOBYTE(v529) = 0;
      }
      v89 = v519 | v520 | v521 | v522 | v523 | v524 | v525 | v486 | v487 | v500 | v526 | v528 | ((unint64_t)(v529 & 1) << 56);
      goto LABEL_112;
    case 11731:
    case 11732:
    case 11733:
    case 11734:
    case 11735:
    case 11736:
    case 11737:
    case 11738:
    case 11739:
    case 11740:
    case 11741:
    case 11742:
    case 11743:
    case 11744:
    case 11745:
    case 11746:
    case 12152:
    case 12153:
    case 12154:
    case 12155:
    case 13358:
    case 13359:
    case 13360:
    case 13361:
    case 13362:
    case 13363:
    case 13364:
    case 13365:
    case 13366:
    case 13367:
    case 13368:
    case 13369:
    case 13370:
    case 13371:
    case 13372:
    case 13373:
      v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v144 = *((_QWORD *)a2 + 2);
      v147 = *(unsigned __int8 *)(v144 + 32);
      v145 = v144 + 32;
      v146 = v147;
      if (v147 == 1)
      {
        LOBYTE(v148) = sub_1C4B12E5C(a1, v145, *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v146 == 2)
      {
        v148 = *((_DWORD *)v50 + 10);
      }
      else
      {
        v382 = *((_QWORD *)v50 + 5);
        if (*(_BYTE *)v382 == 4)
          v148 = *(_DWORD *)(*(_QWORD *)(v382 + 24) + 16) | 0x2000;
        else
          LOBYTE(v148) = 0;
      }
      v588 = (unint64_t)(v148 & 1) << 40;
      v589 = *v50;
      if (v589 == 1)
      {
        v590 = sub_1C4B12E5C(v8, (uint64_t)v50, *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v589 == 2)
      {
        v590 = *((unsigned int *)v50 + 2);
      }
      else
      {
        v591 = *((_QWORD *)v50 + 1);
        if (*(_BYTE *)v591 == 4)
          v590 = *(_DWORD *)(*(_QWORD *)(v591 + 24) + 16) | 0x2000u;
        else
          v590 = 0;
      }
      v329 = (v590 << 25) & 0x600000000 | v588 | ((_DWORD)v590 << 24);
      v596 = v50[16];
      if (v596 == 1)
      {
        v331 = sub_1C4B12E5C(v8, (uint64_t)(v50 + 16), *(_QWORD *)(a4 + 192), 0);
        v50 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v596 == 2)
      {
        v331 = *((_DWORD *)v50 + 6);
      }
      else
      {
        v597 = *((_QWORD *)v50 + 3);
        if (*(_BYTE *)v597 == 4)
          v331 = *(_DWORD *)(*(_QWORD *)(v597 + 24) + 16) | 0x2000;
        else
          v331 = 0;
      }
      v333 = (v331 << 9) & 0x60000;
LABEL_810:
      v602 = v333 | ((unint64_t)v331 << 8) | v329;
      v603 = *((_QWORD *)v50 + 7);
LABEL_811:
      v89 = v602 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v603 & 3) << 45);
      goto LABEL_112;
    case 11747:
    case 11749:
    case 11751:
    case 11753:
    case 11755:
    case 11757:
    case 11759:
    case 11761:
    case 11763:
    case 11765:
    case 11767:
    case 11769:
    case 11771:
    case 11773:
    case 11775:
    case 11777:
    case 13374:
    case 13376:
    case 13378:
    case 13380:
    case 13382:
    case 13384:
    case 13386:
    case 13388:
    case 13390:
    case 13392:
    case 13394:
    case 13396:
    case 13398:
    case 13400:
    case 13402:
    case 13404:
      v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v160 = *((_QWORD *)a2 + 2);
      v163 = *(unsigned __int8 *)(v160 + 64);
      v161 = v160 + 64;
      v162 = v163;
      if (v163 == 1)
      {
        LOBYTE(v164) = sub_1C4B12E5C(a1, v161, *(_QWORD *)(a4 + 192), 0);
        v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v162 == 2)
      {
        v164 = *((_DWORD *)v159 + 18);
      }
      else
      {
        v385 = *((_QWORD *)v159 + 9);
        if (*(_BYTE *)v385 == 4)
          v164 = *(_DWORD *)(*(_QWORD *)(v385 + 24) + 16) | 0x2000;
        else
          LOBYTE(v164) = 0;
      }
      v646 = (unint64_t)(v164 & 1) << 40;
      v647 = *v159;
      if (v647 == 1)
      {
        v648 = v8;
        v649 = sub_1C4B12E5C(v8, (uint64_t)v159, *(_QWORD *)(a4 + 192), 0);
        v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v647 == 2)
      {
        v648 = v8;
        v649 = *((unsigned int *)v159 + 2);
      }
      else
      {
        v650 = *((_QWORD *)v159 + 1);
        v648 = v8;
        if (*(_BYTE *)v650 == 4)
          v649 = *(_DWORD *)(*(_QWORD *)(v650 + 24) + 16) | 0x2000u;
        else
          v649 = 0;
      }
      v671 = (v649 << 25) & 0x600000000 | v646;
      v672 = ((_DWORD)v649 << 24);
      v673 = v159[16];
      if (v673 == 1)
      {
        v674 = sub_1C4B12E5C(v648, (uint64_t)(v159 + 16), *(_QWORD *)(a4 + 192), 0);
        v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v673 == 2)
      {
        v674 = *((_DWORD *)v159 + 6);
      }
      else
      {
        v675 = *((_QWORD *)v159 + 3);
        if (*(_BYTE *)v675 == 4)
          v674 = *(_DWORD *)(*(_QWORD *)(v675 + 24) + 16) | 0x2000;
        else
          v674 = 0;
      }
      v699 = v671 | v672;
      v700 = (v674 << 9) & 0x60000 | ((unint64_t)v674 << 8);
      v701 = v159[32];
      v702 = *((_QWORD *)v159 + 11);
      if (v701 == 1)
      {
        LOBYTE(v703) = sub_1C4B12E5C(v648, (uint64_t)(v159 + 32), *(_QWORD *)(a4 + 192), 0);
        v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v701 == 2)
      {
        v703 = *((_DWORD *)v159 + 10);
      }
      else
      {
        v704 = *((_QWORD *)v159 + 5);
        if (*(_BYTE *)v704 == 4)
          v703 = *(_DWORD *)(*(_QWORD *)(v704 + 24) + 16) | 0x2000;
        else
          LOBYTE(v703) = 0;
      }
      v730 = v700 | v699;
      v731 = (unint64_t)(v702 & 3) << 45;
      v732 = (v703 & 3) << 6;
      v733 = (uint64_t)(v159 + 48);
      v734 = v159[48];
      if (v734 == 1)
      {
LABEL_1901:
        LOBYTE(v735) = sub_1C4B12E5C(v648, v733, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v734 == 2)
      {
        v735 = *((_DWORD *)v159 + 14);
      }
      else
      {
        v736 = *((_QWORD *)v159 + 7);
LABEL_1026:
        if (*(_BYTE *)v736 == 4)
          v735 = *(_DWORD *)(*(_QWORD *)(v736 + 24) + 16) | 0x2000;
        else
          LOBYTE(v735) = 0;
      }
LABEL_1902:
      v293 = v731 | v730;
      v140 = v732 | (2 * (v735 & 3u));
      goto LABEL_1186;
    case 11748:
    case 11750:
    case 11752:
    case 11754:
    case 11756:
    case 11758:
    case 11760:
    case 11762:
    case 11764:
    case 11766:
    case 11768:
    case 11770:
    case 11772:
    case 11774:
    case 11776:
    case 11778:
    case 13375:
    case 13377:
    case 13379:
    case 13381:
    case 13383:
    case 13385:
    case 13387:
    case 13389:
    case 13391:
    case 13393:
    case 13395:
    case 13397:
    case 13399:
    case 13401:
    case 13403:
    case 13405:
      v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v166 = *((_QWORD *)a2 + 2);
      v169 = *(unsigned __int8 *)(v166 + 80);
      v167 = v166 + 80;
      v168 = v169;
      if (v169 == 1)
      {
        LOBYTE(v170) = sub_1C4B12E5C(a1, v167, *(_QWORD *)(a4 + 192), 0);
        v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v168 == 2)
      {
        v170 = *((_DWORD *)v165 + 22);
      }
      else
      {
        v386 = *((_QWORD *)v165 + 11);
        if (*(_BYTE *)v386 == 4)
          v170 = *(_DWORD *)(*(_QWORD *)(v386 + 24) + 16) | 0x2000;
        else
          LOBYTE(v170) = 0;
      }
      v651 = v170 & 1;
      v652 = *v165;
      if (v652 == 1)
      {
        v653 = v8;
        v654 = sub_1C4B12E5C(v8, (uint64_t)v165, *(_QWORD *)(a4 + 192), 0);
        v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v652 == 2)
      {
        v653 = v8;
        v654 = *((unsigned int *)v165 + 2);
      }
      else
      {
        v655 = *((_QWORD *)v165 + 1);
        v653 = v8;
        if (*(_BYTE *)v655 == 4)
          v654 = *(_DWORD *)(*(_QWORD *)(v655 + 24) + 16) | 0x2000u;
        else
          v654 = 0;
      }
      v676 = v651 << 40;
      v677 = (v654 << 25) & 0x600000000;
      v678 = ((_DWORD)v654 << 24);
      v679 = v165[16];
      if (v679 == 1)
      {
        v680 = sub_1C4B12E5C(v653, (uint64_t)(v165 + 16), *(_QWORD *)(a4 + 192), 0);
        v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v679 == 2)
      {
        v680 = *((_DWORD *)v165 + 6);
      }
      else
      {
        v681 = *((_QWORD *)v165 + 3);
        if (*(_BYTE *)v681 == 4)
          v680 = *(_DWORD *)(*(_QWORD *)(v681 + 24) + 16) | 0x2000;
        else
          v680 = 0;
      }
      v705 = v677 | v676;
      v706 = (v680 << 9) & 0x60000;
      v707 = (unint64_t)v680 << 8;
      v708 = v165[32];
      v709 = *((_QWORD *)v165 + 13);
      if (v708 == 1)
      {
        LOBYTE(v710) = sub_1C4B12E5C(v653, (uint64_t)(v165 + 32), *(_QWORD *)(a4 + 192), 0);
        v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v708 == 2)
      {
        v710 = *((_DWORD *)v165 + 10);
      }
      else
      {
        v711 = *((_QWORD *)v165 + 5);
        if (*(_BYTE *)v711 == 4)
          v710 = *(_DWORD *)(*(_QWORD *)(v711 + 24) + 16) | 0x2000;
        else
          LOBYTE(v710) = 0;
      }
      v737 = v705 | v678;
      v738 = v706 | v707;
      v739 = 16 * (v710 & 1u);
      v740 = v165[48];
      if (v740 == 1)
      {
        LOBYTE(v741) = sub_1C4B12E5C(v653, (uint64_t)(v165 + 48), *(_QWORD *)(a4 + 192), 0);
        v165 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v740 == 2)
      {
        v741 = *((_DWORD *)v165 + 14);
      }
      else
      {
        v742 = *((_QWORD *)v165 + 7);
        if (*(_BYTE *)v742 == 4)
          v741 = *(_DWORD *)(*(_QWORD *)(v742 + 24) + 16) | 0x2000;
        else
          LOBYTE(v741) = 0;
      }
      v759 = v738 | v737;
      v760 = 8 * (v741 & 1u);
      v761 = v165[64];
      if (v761 == 1)
      {
        LOBYTE(v762) = sub_1C4B12E5C(v653, (uint64_t)(v165 + 64), *(_QWORD *)(a4 + 192), 0);
      }
      else if (v761 == 2)
      {
        v762 = *((_DWORD *)v165 + 18);
      }
      else
      {
        v763 = *((_QWORD *)v165 + 9);
        if (*(_BYTE *)v763 == 4)
          v762 = *(_DWORD *)(*(_QWORD *)(v763 + 24) + 16) | 0x2000;
        else
          LOBYTE(v762) = 0;
      }
      v292 = 2 * (v762 & 3u);
      v293 = ((unint64_t)(v709 & 3) << 45) | v759;
      v781 = v739 | v760;
      goto LABEL_1185;
    case 11851:
    case 11852:
    case 11853:
    case 11854:
    case 11855:
    case 11856:
    case 11857:
    case 11858:
    case 11859:
    case 11860:
    case 11861:
    case 11862:
    case 11863:
    case 11864:
    case 11865:
    case 11866:
    case 11956:
    case 11957:
    case 11958:
    case 11959:
    case 11960:
    case 11961:
    case 11962:
    case 11963:
    case 11964:
    case 11965:
    case 11966:
    case 11967:
    case 11968:
    case 11969:
    case 11970:
    case 11971:
      v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v172 = *v171;
      if (v172 == 1)
      {
        v173 = sub_1C4B12E5C(a1, (uint64_t)v171, *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v172 == 2)
      {
        v173 = *((unsigned int *)v171 + 2);
      }
      else
      {
        v387 = *((_QWORD *)v171 + 1);
        if (*(_BYTE *)v387 == 4)
          v173 = *(_DWORD *)(*(_QWORD *)(v387 + 24) + 16) | 0x2000u;
        else
          v173 = 0;
      }
      v656 = v173;
      v657 = (v173 << 41) & 0x6000000000000;
      v658 = v171[16];
      if (v658 == 1)
      {
        v659 = sub_1C4B12E5C(v8, (uint64_t)(v171 + 16), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v658 == 2)
      {
        v659 = *((unsigned int *)v171 + 6);
      }
      else
      {
        v660 = *((_QWORD *)v171 + 3);
        if (*(_BYTE *)v660 == 4)
          v659 = *(_DWORD *)(*(_QWORD *)(v660 + 24) + 16) | 0x2000u;
        else
          v659 = 0;
      }
      v682 = v657 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v656 << 40);
      v683 = (v659 << 25) & 0x600000000;
      v684 = ((_DWORD)v659 << 24);
      v685 = v171[32];
      if (v685 == 1)
      {
        v686 = v8;
        v687 = sub_1C4B12E5C(v8, (uint64_t)(v171 + 32), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v685 == 2)
      {
        v686 = v8;
        v687 = *((_DWORD *)v171 + 10);
      }
      else
      {
        v688 = *((_QWORD *)v171 + 5);
        v686 = v8;
        if (*(_BYTE *)v688 == 4)
          v687 = *(_DWORD *)(*(_QWORD *)(v688 + 24) + 16) | 0x2000;
        else
          v687 = 0;
      }
      v712 = v682 | v683;
      v713 = (unint64_t)(v687 & 0x7F) << 17;
      v714 = (v687 >> 2) & 0xE0;
      v715 = v171[48];
      if (v715 == 1)
      {
        LOBYTE(v716) = sub_1C4B12E5C(v686, (uint64_t)(v171 + 48), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v715 == 2)
      {
        v716 = *((_DWORD *)v171 + 14);
      }
      else
      {
        v717 = *((_QWORD *)v171 + 7);
        if (*(_BYTE *)v717 == 4)
          v716 = *(_DWORD *)(*(_QWORD *)(v717 + 24) + 16) | 0x2000;
        else
          LOBYTE(v716) = 0;
      }
      v743 = v684 | v712;
      v744 = v714 | v713;
      v745 = v716 & 0xF;
      v746 = v171[64];
      if (v746 == 1)
      {
        LOBYTE(v747) = sub_1C4B12E5C(v686, (uint64_t)(v171 + 64), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v746 == 2)
      {
        v747 = *((_DWORD *)v171 + 18);
      }
      else
      {
        v748 = *((_QWORD *)v171 + 9);
        if (*(_BYTE *)v748 == 4)
          v747 = *(_DWORD *)(*(_QWORD *)(v748 + 24) + 16) | 0x2000;
        else
          LOBYTE(v747) = 0;
      }
      v764 = v744 | v743;
      v765 = (v747 & 0x1F) << 8;
      v766 = v171[80];
      if (v766 == 1)
      {
        v767 = sub_1C4B12E5C(v686, (uint64_t)(v171 + 80), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v766 == 2)
      {
        v767 = *((_DWORD *)v171 + 22);
      }
      else
      {
        v768 = *((_QWORD *)v171 + 11);
        if (*(_BYTE *)v768 == 4)
          v767 = *(_DWORD *)(*(_QWORD *)(v768 + 24) + 16) | 0x2000;
        else
          v767 = 0;
      }
      v782 = v764 | (v745 << 51);
      v783 = (unint64_t)(v767 & 7) << 13;
      v784 = (v767 >> 2) & 6;
      v785 = v171[96];
      if (v785 == 1)
      {
        LOBYTE(v786) = sub_1C4B12E5C(v686, (uint64_t)(v171 + 96), *(_QWORD *)(a4 + 192), 0);
        v171 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v785 == 2)
      {
        v786 = *((_DWORD *)v171 + 26);
      }
      else
      {
        v787 = *((_QWORD *)v171 + 13);
        if (*(_BYTE *)v787 == 4)
          v786 = *(_DWORD *)(*(_QWORD *)(v787 + 24) + 16) | 0x2000;
        else
          LOBYTE(v786) = 0;
      }
      v70 = *((_QWORD *)v171 + 15);
      v69 = v782 | v765 | v783 | v784 | ((unint64_t)(v786 & 1) << 56);
      goto LABEL_111;
    case 11871:
    case 11872:
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1026 = *v11;
      if (v1026 == 1)
      {
        v1027 = a4;
        v1028 = a1;
        v1029 = sub_1C4B12E5C(a1, (uint64_t)v11, *(_QWORD *)(a4 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else
      {
        v1027 = a4;
        v1028 = a1;
        if (v1026 == 2)
        {
          v1029 = *((_DWORD *)v11 + 2);
        }
        else
        {
          v1148 = *((_QWORD *)v11 + 1);
          if (*(_BYTE *)v1148 == 4)
            v1029 = *(_DWORD *)(*(_QWORD *)(v1148 + 24) + 16) | 0x2000;
          else
            v1029 = 0;
        }
      }
      v1174 = (v1029 << 14) & 0xF00000 | ((unint64_t)(v1029 & 0x3F) << 40);
      v1175 = v11[16];
      if (v1175 == 1)
      {
        v1176 = sub_1C4B12E5C(v1028, (uint64_t)(v11 + 16), *(_QWORD *)(v1027 + 192), 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1175 == 2)
      {
        v1176 = *((_DWORD *)v11 + 6);
      }
      else
      {
        v1177 = *((_QWORD *)v11 + 3);
        if (*(_BYTE *)v1177 == 4)
          v1176 = *(_DWORD *)(*(_QWORD *)(v1177 + 24) + 16) | 0x2000;
        else
          v1176 = 0;
      }
      v359 = (unsigned __int16)v1176 & 0xFF00 | v1174 | (v1176 << 24);
      v360 = (uint64_t)(v11 + 32);
      v361 = v11[32];
      if (v361 == 1)
      {
        v364 = *(_QWORD *)(v1027 + 192);
        v365 = v1028;
LABEL_442:
        LOBYTE(v362) = sub_1C4B12E5C(v365, v360, v364, 0);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else
      {
LABEL_437:
        if (v361 == 2)
        {
          v362 = *((_DWORD *)v11 + 10);
        }
        else
        {
          v363 = *((_QWORD *)v11 + 5);
          if (*(_BYTE *)v363 == 4)
            v362 = *(_DWORD *)(*(_QWORD *)(v363 + 24) + 16) | 0x2000;
          else
            LOBYTE(v362) = 0;
        }
      }
      v69 = v359 | ((unint64_t)(v362 & 1) << 56);
LABEL_74:
      v70 = *((_QWORD *)v11 + 7);
LABEL_111:
      v89 = v69 & 0x9FFFFFFFFFFFFFFFLL | ((unint64_t)(v70 & 3) << 61);
      goto LABEL_112;
    case 11873:
    case 11874:
      v1030 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1031 = *v1030;
      if (v1031 == 1)
      {
        v1032 = sub_1C4B12E5C(a1, (uint64_t)v1030, *(_QWORD *)(a4 + 192), 0);
        v1030 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1031 == 2)
      {
        v1032 = *((_DWORD *)v1030 + 2);
      }
      else
      {
        v1149 = *((_QWORD *)v1030 + 1);
        if (*(_BYTE *)v1149 == 4)
          v1032 = *(_DWORD *)(*(_QWORD *)(v1149 + 24) + 16) | 0x2000;
        else
          v1032 = 0;
      }
      if (v1030[16] == 1)
      {
        v1178 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *((unsigned int *)v1030 + 6));
      }
      else
      {
        v1179 = *((_QWORD *)v1030 + 3);
        if (v1179)
          v1180 = v1179 - 8;
        else
          v1180 = 0;
        v1178 = (*(_QWORD *)(*(_QWORD *)(v1180 + 32) + 16) / 2) | 0x2000;
      }
      v1181 = (_DWORD)v1178 << 10;
      v1182 = v1178 >> 4;
      v1183 = v1030[32];
      if (v1183 == 1)
      {
        v1184 = sub_1C4B12E5C(a1, (uint64_t)(v1030 + 32), *(_QWORD *)(a4 + 192), 0);
        v1030 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1183 == 2)
      {
        v1184 = *((_DWORD *)v1030 + 10);
      }
      else
      {
        v1185 = *((_QWORD *)v1030 + 5);
        if (*(_BYTE *)v1185 == 4)
          v1184 = *(_DWORD *)(*(_QWORD *)(v1185 + 24) + 16) | 0x2000;
        else
          v1184 = 0;
      }
      v1203 = (unint64_t)(v1032 & 0x3F) << 40;
      v1204 = (v1032 << 14) & 0xF00000;
      v1205 = (v1178 << 44) & 0x200000000000000;
      v1206 = (v1178 & 0x7F) << 33;
      v1207 = *(_QWORD *)&v1181 & 0xE0000;
      v1208 = v1182 & 0xC0;
      v372 = (v1184 << 24);
      v1209 = (unsigned __int16)v1184 & 0xFF00;
      v1210 = v1030[48];
      if (v1210 == 1)
      {
        v1212 = v1203;
        LOBYTE(v1211) = sub_1C4B12E5C(a1, (uint64_t)(v1030 + 48), *(_QWORD *)(a4 + 192), 0);
        v1203 = v1212;
        v1030 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1210 == 2)
      {
        v1211 = *((_DWORD *)v1030 + 14);
      }
      else
      {
        v1213 = *((_QWORD *)v1030 + 7);
        if (*(_BYTE *)v1213 == 4)
          v1211 = *(_DWORD *)(*(_QWORD *)(v1213 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1211) = 0;
      }
      v377 = v1211 & 1;
      v378 = (*((_QWORD *)v1030 + 9) & 3) << 61;
      v379 = v1203 | v1204 | v1205 | v1206;
      v380 = v1207 | v1208 | v1209;
LABEL_1238:
      v887 = v379 | v380 | v372 | (v377 << 56);
      goto LABEL_1239;
    case 11875:
    case 12156:
    case 12215:
    case 13429:
      v854 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v855 = *v854;
      if (v855 == 1)
      {
        LOBYTE(v856) = sub_1C4B12E5C(a1, (uint64_t)v854, *(_QWORD *)(a4 + 192), 0);
        v854 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v855 == 2)
      {
        v856 = *((_DWORD *)v854 + 2);
      }
      else
      {
        v1071 = *((_QWORD *)v854 + 1);
        if (*(_BYTE *)v1071 == 4)
          v856 = *(_DWORD *)(*(_QWORD *)(v1071 + 24) + 16) | 0x2000;
        else
          LOBYTE(v856) = 0;
      }
      v639 = (8 * (v856 & 0xF)) | ((*((_DWORD *)v854 + 6) & 3u) << 13);
      goto LABEL_1284;
    case 11972:
      v1096 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1097 = *v1096;
      if (v1097 == 1)
      {
        v1098 = sub_1C4B12E5C(a1, (uint64_t)v1096, *(_QWORD *)(a4 + 192), 0);
        v1096 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1097 == 2)
      {
        v1098 = *((_DWORD *)v1096 + 2);
      }
      else
      {
        v1162 = *((_QWORD *)v1096 + 1);
        if (*(_BYTE *)v1162 == 4)
          v1098 = *(_DWORD *)(*(_QWORD *)(v1162 + 24) + 16) | 0x2000;
        else
          v1098 = 0;
      }
      v89 = (v1098 << 10) & 0x20000 | ((v1098 & 0x7Fu) << 9) | ((*((_DWORD *)v1096 + 10) & 3) << 29);
      goto LABEL_112;
    case 11973:
      v1099 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1100 = *v1099;
      if (v1100 == 1)
      {
        v1101 = sub_1C4B12E5C(a1, (uint64_t)v1099, *(_QWORD *)(a4 + 192), 0);
        v1099 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1100 == 2)
      {
        v1101 = *((unsigned int *)v1099 + 2);
      }
      else
      {
        v1163 = *((_QWORD *)v1099 + 1);
        if (*(_BYTE *)v1163 == 4)
          v1101 = *(_DWORD *)(*(_QWORD *)(v1163 + 24) + 16) | 0x2000u;
        else
          v1101 = 0;
      }
      v1282 = v1101 >> 8;
      v1283 = ((_DWORD)v1101 << 8) & 0xFE00;
      v1284 = *((_DWORD *)v1099 + 10);
LABEL_1817:
      v9 |= v1283 & 0xFFFFFFFF9FFDFFFFLL | ((v1282 & 1) << 17) & 0xFFFFFFFF9FFFFFFFLL | ((unint64_t)(v1284 & 3) << 29);
      return v9;
    case 12022:
      v1102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1103 = (*((_DWORD *)v1102 + 10) & 3) << 13;
      v1104 = *v1102;
      if (v1104 == 1)
      {
        LOBYTE(v1105) = sub_1C4B12E5C(a1, (uint64_t)v1102, *(_QWORD *)(a4 + 192), 0);
        v1102 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1104 == 2)
      {
        v1105 = *((_DWORD *)v1102 + 2);
      }
      else
      {
        v1164 = *((_QWORD *)v1102 + 1);
        if (*(_BYTE *)v1164 == 4)
          v1105 = *(_DWORD *)(*(_QWORD *)(v1164 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1105) = 0;
      }
      v1293 = ((v1105 & 3) << 8) | v1103;
      v1294 = v1102[16];
      if (v1294 == 1)
      {
        LOBYTE(v1295) = sub_1C4B12E5C(v8, (uint64_t)(v1102 + 16), *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1294 == 2)
      {
        v1295 = *((_DWORD *)v1102 + 6);
      }
      else
      {
        v1296 = *((_QWORD *)v1102 + 3);
        if (*(_BYTE *)v1296 == 4)
          v1295 = *(_DWORD *)(*(_QWORD *)(v1296 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1295) = 0;
      }
      v639 = v1293 | (2 * (v1295 & 0xFu));
      goto LABEL_1284;
    case 12146:
      sub_1C4B129EC((uint64_t)a2, a3);
      goto LABEL_1510;
    case 12147:
      sub_1C4B12C24((uint64_t)a2, a3);
LABEL_1510:
      v1107 = (uint64x2_t)vdupq_n_s64(v1106);
      v1108 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v1107, (uint64x2_t)xmmword_1C677F780), (int8x16_t)xmmword_1C677F7B0), vandq_s8((int8x16_t)vshlq_u64(v1107, (uint64x2_t)xmmword_1C677F790), (int8x16_t)xmmword_1C677F7A0));
      v89 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v1108.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1108, v1108, 8uLL)) | ((unint64_t)v1106 >> 8) & 0xFE0000;
      goto LABEL_112;
    case 12148:
    case 12150:
      v1033 = a1;
      sub_1C4B129EC((uint64_t)a2, a3);
      goto LABEL_1460;
    case 12149:
    case 12151:
      v1033 = a1;
      sub_1C4B12C24((uint64_t)a2, a3);
LABEL_1460:
      v1035 = (v1034 << 40) & 0xFE0000000000;
      v1036 = (v1034 << 32) & 0x100010001000100;
      v1037 = ((unint64_t)v1034 << 24) & 0xFE00000000;
      v1038 = ((_DWORD)v1034 << 8) & 0xFF000000;
      v1039 = ((unint64_t)v1034 >> 8) & 0xFE0000;
      v1040 = *((_QWORD *)a2 + 2);
      v1041 = *(unsigned __int8 *)(v1040 + 16);
      if (v1041 == 1)
      {
        v1042 = sub_1C4B12E5C(v1033, v1040 + 16, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1041 == 2)
      {
        v1042 = *(unsigned int *)(v1040 + 24);
      }
      else
      {
        v1072 = *(_QWORD *)(v1040 + 24);
        if (*(_BYTE *)v1072 == 4)
          v1042 = *(_DWORD *)(*(_QWORD *)(v1072 + 24) + 16) | 0x2000u;
        else
          v1042 = 0;
      }
      v1067 = (v1042 << 50) & 0x38000000000000;
      v1068 = ((_DWORD)v1042 << 10) & 0xC400;
      v1069 = v1036 | v1035 | v1037 | v1038 | v1039;
LABEL_1562:
      v89 = v1069 | v1067 | v1068;
      goto LABEL_112;
    case 12208:
    case 12209:
      v1043 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1044 = *v1043;
      if (v1044 == 1)
      {
        v1045 = a4;
        v1046 = a1;
        v1047 = sub_1C4B12E5C(a1, (uint64_t)v1043, *(_QWORD *)(a4 + 192), 0);
        v1043 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else
      {
        v1045 = a4;
        v1046 = a1;
        if (v1044 == 2)
        {
          v1047 = *((_DWORD *)v1043 + 2);
        }
        else
        {
          v1150 = *((_QWORD *)v1043 + 1);
          if (*(_BYTE *)v1150 == 4)
            v1047 = *(_DWORD *)(*(_QWORD *)(v1150 + 24) + 16) | 0x2000;
          else
            v1047 = 0;
        }
      }
      v1186 = (v1047 << 9) & 0x20000;
      v1187 = (unint64_t)v1047 << 8;
      v1188 = v1043[16];
      v1189 = (*((_DWORD *)v1043 + 10) & 3) << 29;
      if (v1188 == 1)
      {
        LOBYTE(v1190) = sub_1C4B12E5C(v1046, (uint64_t)(v1043 + 16), *(_QWORD *)(v1045 + 192), 0);
      }
      else if (v1188 == 2)
      {
        v1190 = *((_DWORD *)v1043 + 6);
      }
      else
      {
        v1191 = *((_QWORD *)v1043 + 3);
        if (*(_BYTE *)v1191 == 4)
          v1190 = *(_DWORD *)(*(_QWORD *)(v1191 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1190) = 0;
      }
      v89 = v1186 | v1187 | ((v1190 & 1) << 24) | v1189;
LABEL_112:
      v9 |= v89;
      return v9;
    case 12440:
    case 12443:
    case 12446:
    case 12449:
    case 12452:
    case 12455:
    case 12458:
    case 12461:
    case 12464:
    case 12467:
    case 12470:
    case 12473:
    case 12476:
    case 12479:
    case 12482:
    case 12485:
      v337 = *((_QWORD *)a2 + 2);
      v338 = *(unsigned __int8 *)(v337 + 64);
      if (v338 == 1)
      {
        LOBYTE(v339) = sub_1C4B12E5C(a1, v337 + 64, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v338 == 2)
      {
        v339 = *(_DWORD *)(v337 + 72);
      }
      else
      {
        v641 = *(_QWORD *)(v337 + 72);
        if (*(_BYTE *)v641 == 4)
          v339 = *(_DWORD *)(*(_QWORD *)(v641 + 24) + 16) | 0x2000;
        else
          LOBYTE(v339) = 0;
      }
      v980 = (v339 & 7) << 9;
      v981 = *(unsigned __int8 *)(v337 + 80);
      if (v981 == 1)
      {
        LOBYTE(v982) = sub_1C4B12E5C(v8, v337 + 80, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v981 == 2)
      {
        v982 = *(_DWORD *)(v337 + 88);
      }
      else
      {
        v983 = *(_QWORD *)(v337 + 88);
        if (*(_BYTE *)v983 == 4)
          v982 = *(_DWORD *)(*(_QWORD *)(v983 + 24) + 16) | 0x2000;
        else
          LOBYTE(v982) = 0;
      }
      v988 = v980 & 0xFFFF8FFF | ((v982 & 7) << 12);
      v989 = *(unsigned __int8 *)(v337 + 96);
      if (v989 == 1)
      {
        LOBYTE(v990) = sub_1C4B12E5C(v8, v337 + 96, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v989 == 2)
      {
        v990 = *(_DWORD *)(v337 + 104);
      }
      else
      {
        v991 = *(_QWORD *)(v337 + 104);
        if (*(_BYTE *)v991 == 4)
          v990 = *(_DWORD *)(*(_QWORD *)(v991 + 24) + 16) | 0x2000;
        else
          LOBYTE(v990) = 0;
      }
      v996 = v988 & 0xF3FFFFFF | ((v990 & 3) << 26);
      v997 = *(unsigned __int8 *)(v337 + 112);
      if (v997 == 1)
      {
        LOBYTE(v998) = sub_1C4B12E5C(v8, v337 + 112, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v997 == 2)
      {
        v998 = *(_DWORD *)(v337 + 120);
      }
      else
      {
        v999 = *(_QWORD *)(v337 + 120);
        if (*(_BYTE *)v999 == 4)
          v998 = *(_DWORD *)(*(_QWORD *)(v999 + 24) + 16) | 0x2000;
        else
          LOBYTE(v998) = 0;
      }
      v1004 = v996 | ((v998 & 1) << 23);
      v1005 = *(unsigned __int8 *)(v337 + 128);
      if (v1005 == 1)
      {
        LOBYTE(v1006) = sub_1C4B12E5C(v8, v337 + 128, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v1005 == 2)
      {
        v1006 = *(_DWORD *)(v337 + 136);
      }
      else
      {
        v1007 = *(_QWORD *)(v337 + 136);
        if (*(_BYTE *)v1007 == 4)
          v1006 = *(_DWORD *)(*(_QWORD *)(v1007 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1006) = 0;
      }
      v1008 = v1004 | ((v1006 & 1) << 24);
      v1009 = *(unsigned __int8 *)(v337 + 144);
      if (v1009 == 1)
      {
        LOBYTE(v1010) = sub_1C4B12E5C(v8, v337 + 144, *(_QWORD *)(a4 + 192), 0);
        v337 = *((_QWORD *)a2 + 2);
      }
      else if (v1009 == 2)
      {
        v1010 = *(_DWORD *)(v337 + 152);
      }
      else
      {
        v1011 = *(_QWORD *)(v337 + 152);
        if (*(_BYTE *)v1011 == 4)
          v1010 = *(_DWORD *)(*(_QWORD *)(v1011 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1010) = 0;
      }
      v788 = v1008 | ((v1010 & 1) << 25);
      v789 = v337 + 160;
      v1012 = *(unsigned __int8 *)(v337 + 160);
      if (v1012 == 1)
        goto LABEL_1438;
      if (v1012 == 2)
      {
        v791 = *(_DWORD *)(v337 + 168);
        goto LABEL_1443;
      }
      v792 = *(_QWORD *)(v337 + 168);
      goto LABEL_1440;
    case 12441:
    case 12442:
    case 12444:
    case 12445:
    case 12447:
    case 12448:
    case 12450:
    case 12451:
    case 12453:
    case 12454:
    case 12456:
    case 12457:
    case 12459:
    case 12460:
    case 12462:
    case 12463:
    case 12465:
    case 12466:
    case 12468:
    case 12469:
    case 12471:
    case 12472:
    case 12474:
    case 12475:
    case 12477:
    case 12478:
    case 12480:
    case 12481:
    case 12483:
    case 12484:
    case 12486:
    case 12487:
      v174 = *((_QWORD *)a2 + 2);
      v175 = *(unsigned __int8 *)(v174 + 96);
      if (v175 == 1)
      {
        LOBYTE(v176) = sub_1C4B12E5C(a1, v174 + 96, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v175 == 2)
      {
        v176 = *(_DWORD *)(v174 + 104);
      }
      else
      {
        v388 = *(_QWORD *)(v174 + 104);
        if (*(_BYTE *)v388 == 4)
          v176 = *(_DWORD *)(*(_QWORD *)(v388 + 24) + 16) | 0x2000;
        else
          LOBYTE(v176) = 0;
      }
      v661 = (v176 & 7) << 9;
      v662 = *(unsigned __int8 *)(v174 + 112);
      if (v662 == 1)
      {
        LOBYTE(v663) = sub_1C4B12E5C(v8, v174 + 112, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v662 == 2)
      {
        v663 = *(_DWORD *)(v174 + 120);
      }
      else
      {
        v664 = *(_QWORD *)(v174 + 120);
        if (*(_BYTE *)v664 == 4)
          v663 = *(_DWORD *)(*(_QWORD *)(v664 + 24) + 16) | 0x2000;
        else
          LOBYTE(v663) = 0;
      }
      v689 = v661 & 0xFFFF8FFF | ((v663 & 7) << 12);
      v690 = *(unsigned __int8 *)(v174 + 128);
      if (v690 == 1)
      {
        LOBYTE(v691) = sub_1C4B12E5C(v8, v174 + 128, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v690 == 2)
      {
        v691 = *(_DWORD *)(v174 + 136);
      }
      else
      {
        v692 = *(_QWORD *)(v174 + 136);
        if (*(_BYTE *)v692 == 4)
          v691 = *(_DWORD *)(*(_QWORD *)(v692 + 24) + 16) | 0x2000;
        else
          LOBYTE(v691) = 0;
      }
      v718 = v689 & 0xF3FFFFFF | ((v691 & 3) << 26);
      v719 = *(unsigned __int8 *)(v174 + 144);
      if (v719 == 1)
      {
        LOBYTE(v720) = sub_1C4B12E5C(v8, v174 + 144, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v719 == 2)
      {
        v720 = *(_DWORD *)(v174 + 152);
      }
      else
      {
        v721 = *(_QWORD *)(v174 + 152);
        if (*(_BYTE *)v721 == 4)
          v720 = *(_DWORD *)(*(_QWORD *)(v721 + 24) + 16) | 0x2000;
        else
          LOBYTE(v720) = 0;
      }
      v749 = v718 | ((v720 & 1) << 23);
      v750 = *(unsigned __int8 *)(v174 + 160);
      if (v750 == 1)
      {
        LOBYTE(v751) = sub_1C4B12E5C(v8, v174 + 160, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v750 == 2)
      {
        v751 = *(_DWORD *)(v174 + 168);
      }
      else
      {
        v752 = *(_QWORD *)(v174 + 168);
        if (*(_BYTE *)v752 == 4)
          v751 = *(_DWORD *)(*(_QWORD *)(v752 + 24) + 16) | 0x2000;
        else
          LOBYTE(v751) = 0;
      }
      v769 = v749 | ((v751 & 1) << 24);
      v770 = *(unsigned __int8 *)(v174 + 176);
      if (v770 == 1)
      {
        LOBYTE(v771) = sub_1C4B12E5C(v8, v174 + 176, *(_QWORD *)(a4 + 192), 0);
        v174 = *((_QWORD *)a2 + 2);
      }
      else if (v770 == 2)
      {
        v771 = *(_DWORD *)(v174 + 184);
      }
      else
      {
        v772 = *(_QWORD *)(v174 + 184);
        if (*(_BYTE *)v772 == 4)
          v771 = *(_DWORD *)(*(_QWORD *)(v772 + 24) + 16) | 0x2000;
        else
          LOBYTE(v771) = 0;
      }
      v788 = v769 | ((v771 & 1) << 25);
      v789 = v174 + 192;
      v790 = *(unsigned __int8 *)(v174 + 192);
      if (v790 == 1)
      {
LABEL_1438:
        LOBYTE(v791) = sub_1C4B12E5C(v8, v789, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v790 == 2)
      {
        v791 = *(_DWORD *)(v174 + 200);
      }
      else
      {
        v792 = *(_QWORD *)(v174 + 200);
LABEL_1440:
        if (*(_BYTE *)v792 == 4)
          v791 = *(_DWORD *)(*(_QWORD *)(v792 + 24) + 16) | 0x2000;
        else
          LOBYTE(v791) = 0;
      }
LABEL_1443:
      v9 |= v788 & 0xDFFFFFFF | ((v791 & 1) << 29);
      return v9;
    case 12488:
    case 12490:
    case 12492:
    case 12494:
    case 12536:
    case 12538:
    case 12580:
    case 12582:
    case 12624:
    case 12626:
    case 12668:
    case 12670:
    case 12672:
    case 12674:
    case 12676:
    case 12678:
    case 12680:
    case 12682:
    case 12684:
    case 12686:
    case 12688:
    case 12690:
    case 12732:
    case 12734:
    case 12776:
    case 12778:
    case 12820:
    case 12822:
    case 12864:
    case 12866:
    case 12869:
    case 12871:
    case 12872:
    case 12874:
    case 12876:
    case 12878:
    case 12880:
    case 12882:
      v141 = *((_QWORD *)a2 + 2);
      v142 = *(unsigned __int8 *)(v141 + 64);
      if (v142 == 1)
      {
        LOBYTE(v143) = sub_1C4B12E5C(a1, v141 + 64, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v142 == 2)
      {
        v143 = *(_DWORD *)(v141 + 72);
      }
      else
      {
        v381 = *(_QWORD *)(v141 + 72);
        if (*(_BYTE *)v381 == 4)
          v143 = *(_DWORD *)(*(_QWORD *)(v381 + 24) + 16) | 0x2000;
        else
          LOBYTE(v143) = 0;
      }
      v541 = (v143 & 3) << 13;
      v542 = *(unsigned __int8 *)(v141 + 80);
      if (v542 == 1)
      {
        LOBYTE(v543) = sub_1C4B12E5C(v8, v141 + 80, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v542 == 2)
      {
        v543 = *(_DWORD *)(v141 + 88);
      }
      else
      {
        v544 = *(_QWORD *)(v141 + 88);
        if (*(_BYTE *)v544 == 4)
          v543 = *(_DWORD *)(*(_QWORD *)(v544 + 24) + 16) | 0x2000;
        else
          LOBYTE(v543) = 0;
      }
      v545 = ((v543 & 3) << 11) | v541;
      v546 = *(unsigned __int8 *)(v141 + 96);
      if (v546 == 1)
      {
        LOBYTE(v547) = sub_1C4B12E5C(v8, v141 + 96, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v546 == 2)
      {
        v547 = *(_DWORD *)(v141 + 104);
      }
      else
      {
        v548 = *(_QWORD *)(v141 + 104);
        if (*(_BYTE *)v548 == 4)
          v547 = *(_DWORD *)(*(_QWORD *)(v548 + 24) + 16) | 0x2000;
        else
          LOBYTE(v547) = 0;
      }
      v549 = v545 & 0xFFFDFFFF | ((v547 & 1) << 17);
      v550 = *(unsigned __int8 *)(v141 + 112);
      if (v550 == 1)
      {
        LOBYTE(v551) = sub_1C4B12E5C(v8, v141 + 112, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v550 == 2)
      {
        v551 = *(_DWORD *)(v141 + 120);
      }
      else
      {
        v552 = *(_QWORD *)(v141 + 120);
        if (*(_BYTE *)v552 == 4)
          v551 = *(_DWORD *)(*(_QWORD *)(v552 + 24) + 16) | 0x2000;
        else
          LOBYTE(v551) = 0;
      }
      v553 = v549 | ((v551 & 1) << 10);
      v554 = *(unsigned __int8 *)(v141 + 128);
      if (v554 == 1)
      {
        LOBYTE(v555) = sub_1C4B12E5C(v8, v141 + 128, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v554 == 2)
      {
        v555 = *(_DWORD *)(v141 + 136);
      }
      else
      {
        v556 = *(_QWORD *)(v141 + 136);
        if (*(_BYTE *)v556 == 4)
          v555 = *(_DWORD *)(*(_QWORD *)(v556 + 24) + 16) | 0x2000;
        else
          LOBYTE(v555) = 0;
      }
      v557 = v553 | ((v555 & 1) << 9);
      v558 = *(unsigned __int8 *)(v141 + 144);
      if (v558 == 1)
      {
        LOBYTE(v559) = sub_1C4B12E5C(v8, v141 + 144, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v558 == 2)
      {
        v559 = *(_DWORD *)(v141 + 152);
      }
      else
      {
        v560 = *(_QWORD *)(v141 + 152);
        if (*(_BYTE *)v560 == 4)
          v559 = *(_DWORD *)(*(_QWORD *)(v560 + 24) + 16) | 0x2000;
        else
          LOBYTE(v559) = 0;
      }
      v561 = v557 | ((v559 & 1) << 8);
      v562 = *(unsigned __int8 *)(v141 + 160);
      if (v562 == 1)
      {
        LOBYTE(v563) = sub_1C4B12E5C(v8, v141 + 160, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v562 == 2)
      {
        v563 = *(_DWORD *)(v141 + 168);
      }
      else
      {
        v564 = *(_QWORD *)(v141 + 168);
        if (*(_BYTE *)v564 == 4)
          v563 = *(_DWORD *)(*(_QWORD *)(v564 + 24) + 16) | 0x2000;
        else
          LOBYTE(v563) = 0;
      }
      v565 = v561 | ((v563 & 1) << 7);
      v566 = *(unsigned __int8 *)(v141 + 176);
      if (v566 == 1)
      {
        LOBYTE(v567) = sub_1C4B12E5C(v8, v141 + 176, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v566 == 2)
      {
        v567 = *(_DWORD *)(v141 + 184);
      }
      else
      {
        v568 = *(_QWORD *)(v141 + 184);
        if (*(_BYTE *)v568 == 4)
          v567 = *(_DWORD *)(*(_QWORD *)(v568 + 24) + 16) | 0x2000;
        else
          LOBYTE(v567) = 0;
      }
      v569 = v565 | ((v567 & 1) << 6);
      v570 = *(unsigned __int8 *)(v141 + 192);
      if (v570 == 1)
      {
        LOBYTE(v571) = sub_1C4B12E5C(v8, v141 + 192, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v570 == 2)
      {
        v571 = *(_DWORD *)(v141 + 200);
      }
      else
      {
        v572 = *(_QWORD *)(v141 + 200);
        if (*(_BYTE *)v572 == 4)
          v571 = *(_DWORD *)(*(_QWORD *)(v572 + 24) + 16) | 0x2000;
        else
          LOBYTE(v571) = 0;
      }
      v573 = v569 | (32 * (v571 & 1));
      v574 = *(unsigned __int8 *)(v141 + 208);
      if (v574 == 1)
      {
        LOBYTE(v575) = sub_1C4B12E5C(v8, v141 + 208, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v574 == 2)
      {
        v575 = *(_DWORD *)(v141 + 216);
      }
      else
      {
        v576 = *(_QWORD *)(v141 + 216);
        if (*(_BYTE *)v576 == 4)
          v575 = *(_DWORD *)(*(_QWORD *)(v576 + 24) + 16) | 0x2000;
        else
          LOBYTE(v575) = 0;
      }
      v577 = v573 | (4 * (v575 & 3));
      v578 = *(unsigned __int8 *)(v141 + 224);
      if (v578 == 1)
      {
        LOBYTE(v579) = sub_1C4B12E5C(v8, v141 + 224, *(_QWORD *)(a4 + 192), 0);
        v141 = *((_QWORD *)a2 + 2);
      }
      else if (v578 == 2)
      {
        v579 = *(_DWORD *)(v141 + 232);
      }
      else
      {
        v580 = *(_QWORD *)(v141 + 232);
        if (*(_BYTE *)v580 == 4)
          v579 = *(_DWORD *)(*(_QWORD *)(v580 + 24) + 16) | 0x2000;
        else
          LOBYTE(v579) = 0;
      }
      v581 = v577 & 0xFFE7FFFF | ((v579 & 3) << 19);
      v582 = v141 + 240;
      v583 = *(unsigned __int8 *)(v141 + 240);
      if (v583 == 1)
        goto LABEL_873;
      if (v583 == 2)
      {
        v584 = *(_DWORD *)(v141 + 248);
        goto LABEL_879;
      }
      v585 = *(_QWORD *)(v141 + 248);
      goto LABEL_876;
    case 12489:
    case 12491:
    case 12493:
    case 12495:
    case 12537:
    case 12539:
    case 12581:
    case 12583:
    case 12625:
    case 12627:
    case 12669:
    case 12671:
    case 12673:
    case 12675:
    case 12677:
    case 12679:
    case 12681:
    case 12683:
    case 12685:
    case 12687:
    case 12689:
    case 12691:
    case 12733:
    case 12735:
    case 12777:
    case 12779:
    case 12821:
    case 12823:
    case 12865:
    case 12867:
    case 12873:
    case 12875:
    case 12877:
    case 12879:
    case 12881:
    case 12883:
      v149 = *((_QWORD *)a2 + 2);
      v150 = *(unsigned __int8 *)(v149 + 80);
      if (v150 == 1)
      {
        LOBYTE(v151) = sub_1C4B12E5C(a1, v149 + 80, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v150 == 2)
      {
        v151 = *(_DWORD *)(v149 + 88);
      }
      else
      {
        v383 = *(_QWORD *)(v149 + 88);
        if (*(_BYTE *)v383 == 4)
          v151 = *(_DWORD *)(*(_QWORD *)(v383 + 24) + 16) | 0x2000;
        else
          LOBYTE(v151) = 0;
      }
      v592 = (v151 & 3) << 13;
      v593 = *(unsigned __int8 *)(v149 + 96);
      if (v593 == 1)
      {
        LOBYTE(v594) = sub_1C4B12E5C(v8, v149 + 96, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v593 == 2)
      {
        v594 = *(_DWORD *)(v149 + 104);
      }
      else
      {
        v595 = *(_QWORD *)(v149 + 104);
        if (*(_BYTE *)v595 == 4)
          v594 = *(_DWORD *)(*(_QWORD *)(v595 + 24) + 16) | 0x2000;
        else
          LOBYTE(v594) = 0;
      }
      v598 = ((v594 & 3) << 11) | v592;
      v599 = *(unsigned __int8 *)(v149 + 112);
      if (v599 == 1)
      {
        LOBYTE(v600) = sub_1C4B12E5C(v8, v149 + 112, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v599 == 2)
      {
        v600 = *(_DWORD *)(v149 + 120);
      }
      else
      {
        v601 = *(_QWORD *)(v149 + 120);
        if (*(_BYTE *)v601 == 4)
          v600 = *(_DWORD *)(*(_QWORD *)(v601 + 24) + 16) | 0x2000;
        else
          LOBYTE(v600) = 0;
      }
      v604 = v598 & 0xFFFDFFFF | ((v600 & 1) << 17);
      v605 = *(unsigned __int8 *)(v149 + 128);
      if (v605 == 1)
      {
        LOBYTE(v606) = sub_1C4B12E5C(v8, v149 + 128, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v605 == 2)
      {
        v606 = *(_DWORD *)(v149 + 136);
      }
      else
      {
        v607 = *(_QWORD *)(v149 + 136);
        if (*(_BYTE *)v607 == 4)
          v606 = *(_DWORD *)(*(_QWORD *)(v607 + 24) + 16) | 0x2000;
        else
          LOBYTE(v606) = 0;
      }
      v608 = v604 | ((v606 & 1) << 10);
      v609 = *(unsigned __int8 *)(v149 + 144);
      if (v609 == 1)
      {
        LOBYTE(v610) = sub_1C4B12E5C(v8, v149 + 144, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v609 == 2)
      {
        v610 = *(_DWORD *)(v149 + 152);
      }
      else
      {
        v611 = *(_QWORD *)(v149 + 152);
        if (*(_BYTE *)v611 == 4)
          v610 = *(_DWORD *)(*(_QWORD *)(v611 + 24) + 16) | 0x2000;
        else
          LOBYTE(v610) = 0;
      }
      v612 = v608 | ((v610 & 1) << 9);
      v613 = *(unsigned __int8 *)(v149 + 160);
      if (v613 == 1)
      {
        LOBYTE(v614) = sub_1C4B12E5C(v8, v149 + 160, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v613 == 2)
      {
        v614 = *(_DWORD *)(v149 + 168);
      }
      else
      {
        v615 = *(_QWORD *)(v149 + 168);
        if (*(_BYTE *)v615 == 4)
          v614 = *(_DWORD *)(*(_QWORD *)(v615 + 24) + 16) | 0x2000;
        else
          LOBYTE(v614) = 0;
      }
      v616 = v612 | ((v614 & 1) << 8);
      v617 = *(unsigned __int8 *)(v149 + 176);
      if (v617 == 1)
      {
        LOBYTE(v618) = sub_1C4B12E5C(v8, v149 + 176, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v617 == 2)
      {
        v618 = *(_DWORD *)(v149 + 184);
      }
      else
      {
        v619 = *(_QWORD *)(v149 + 184);
        if (*(_BYTE *)v619 == 4)
          v618 = *(_DWORD *)(*(_QWORD *)(v619 + 24) + 16) | 0x2000;
        else
          LOBYTE(v618) = 0;
      }
      v620 = v616 | ((v618 & 1) << 7);
      v621 = *(unsigned __int8 *)(v149 + 192);
      if (v621 == 1)
      {
        LOBYTE(v622) = sub_1C4B12E5C(v8, v149 + 192, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v621 == 2)
      {
        v622 = *(_DWORD *)(v149 + 200);
      }
      else
      {
        v623 = *(_QWORD *)(v149 + 200);
        if (*(_BYTE *)v623 == 4)
          v622 = *(_DWORD *)(*(_QWORD *)(v623 + 24) + 16) | 0x2000;
        else
          LOBYTE(v622) = 0;
      }
      v624 = v620 | ((v622 & 1) << 6);
      v625 = *(unsigned __int8 *)(v149 + 208);
      if (v625 == 1)
      {
        LOBYTE(v626) = sub_1C4B12E5C(v8, v149 + 208, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v625 == 2)
      {
        v626 = *(_DWORD *)(v149 + 216);
      }
      else
      {
        v627 = *(_QWORD *)(v149 + 216);
        if (*(_BYTE *)v627 == 4)
          v626 = *(_DWORD *)(*(_QWORD *)(v627 + 24) + 16) | 0x2000;
        else
          LOBYTE(v626) = 0;
      }
      v628 = v624 | (32 * (v626 & 1));
      v629 = *(unsigned __int8 *)(v149 + 224);
      if (v629 == 1)
      {
        LOBYTE(v630) = sub_1C4B12E5C(v8, v149 + 224, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v629 == 2)
      {
        v630 = *(_DWORD *)(v149 + 232);
      }
      else
      {
        v631 = *(_QWORD *)(v149 + 232);
        if (*(_BYTE *)v631 == 4)
          v630 = *(_DWORD *)(*(_QWORD *)(v631 + 24) + 16) | 0x2000;
        else
          LOBYTE(v630) = 0;
      }
      v632 = v628 | (4 * (v630 & 3));
      v633 = *(unsigned __int8 *)(v149 + 240);
      if (v633 == 1)
      {
        LOBYTE(v634) = sub_1C4B12E5C(v8, v149 + 240, *(_QWORD *)(a4 + 192), 0);
        v149 = *((_QWORD *)a2 + 2);
      }
      else if (v633 == 2)
      {
        v634 = *(_DWORD *)(v149 + 248);
      }
      else
      {
        v635 = *(_QWORD *)(v149 + 248);
        if (*(_BYTE *)v635 == 4)
          v634 = *(_DWORD *)(*(_QWORD *)(v635 + 24) + 16) | 0x2000;
        else
          LOBYTE(v634) = 0;
      }
      v581 = v632 & 0xFFE7FFFF | ((v634 & 3) << 19);
      v636 = *(unsigned __int8 *)(v149 + 256);
      if (v636 == 1)
      {
        v582 = v149 + 256;
LABEL_873:
        v637 = *(_QWORD *)(a4 + 192);
        v638 = v8;
        goto LABEL_874;
      }
      if (v636 == 2)
      {
        v584 = *(_DWORD *)(v149 + 264);
        goto LABEL_879;
      }
      v585 = *(_QWORD *)(v149 + 264);
      goto LABEL_876;
    case 12496:
    case 12506:
    case 12516:
    case 12526:
    case 12540:
    case 12550:
    case 12560:
    case 12570:
    case 12584:
    case 12594:
    case 12604:
    case 12614:
    case 12628:
    case 12638:
    case 12648:
    case 12658:
    case 12692:
    case 12702:
    case 12712:
    case 12722:
    case 12736:
    case 12746:
    case 12756:
    case 12766:
    case 12780:
    case 12790:
    case 12800:
    case 12810:
    case 12824:
    case 12834:
    case 12844:
    case 12854:
      v177 = *((_QWORD *)a2 + 2);
      v178 = *(unsigned __int8 *)(v177 + 80);
      if (v178 == 1)
      {
        LOBYTE(v179) = sub_1C4B12E5C(a1, v177 + 80, *(_QWORD *)(a4 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v178 == 2)
      {
        v179 = *(_DWORD *)(v177 + 88);
      }
      else
      {
        v389 = *(_QWORD *)(v177 + 88);
        if (*(_BYTE *)v389 == 4)
          v179 = *(_DWORD *)(*(_QWORD *)(v389 + 24) + 16) | 0x2000;
        else
          LOBYTE(v179) = 0;
      }
      v665 = *(unsigned __int8 *)(v177 + 160);
      if (v665 == 1)
      {
        LOBYTE(v666) = sub_1C4B12E5C(v8, v177 + 160, *(_QWORD *)(a4 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v665 == 2)
      {
        v666 = *(_DWORD *)(v177 + 168);
      }
      else
      {
        v667 = *(_QWORD *)(v177 + 168);
        if (*(_BYTE *)v667 == 4)
          v666 = *(_DWORD *)(*(_QWORD *)(v667 + 24) + 16) | 0x2000;
        else
          LOBYTE(v666) = 0;
      }
      v693 = *(unsigned __int8 *)(v177 + 96);
      if (v693 == 1)
      {
        LOBYTE(v694) = sub_1C4B12E5C(v8, v177 + 96, *(_QWORD *)(a4 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v693 == 2)
      {
        v694 = *(_DWORD *)(v177 + 104);
      }
      else
      {
        v695 = *(_QWORD *)(v177 + 104);
        if (*(_BYTE *)v695 == 4)
          v694 = *(_DWORD *)(*(_QWORD *)(v695 + 24) + 16) | 0x2000;
        else
          LOBYTE(v694) = 0;
      }
      v722 = v179 & 1;
      v723 = v666 & 0xF;
      v724 = *(unsigned __int8 *)(v177 + 112);
      if (v724 == 1)
      {
        LOBYTE(v725) = sub_1C4B12E5C(v8, v177 + 112, *(_QWORD *)(a4 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v724 == 2)
      {
        v725 = *(_DWORD *)(v177 + 120);
      }
      else
      {
        v726 = *(_QWORD *)(v177 + 120);
        if (*(_BYTE *)v726 == 4)
          v725 = *(_DWORD *)(*(_QWORD *)(v726 + 24) + 16) | 0x2000;
        else
          LOBYTE(v725) = 0;
      }
      v753 = *(unsigned __int8 *)(v177 + 144);
      v1369 = a4;
      if (v753 == 1)
      {
        v754 = sub_1C4B12E5C(v8, v177 + 144, *(_QWORD *)(a4 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v753 == 2)
      {
        v754 = *(_DWORD *)(v177 + 152);
      }
      else
      {
        v755 = *(_QWORD *)(v177 + 152);
        if (*(_BYTE *)v755 == 4)
          v754 = *(_DWORD *)(*(_QWORD *)(v755 + 24) + 16) | 0x2000;
        else
          v754 = 0;
      }
      v773 = (v694 & 7) << 9;
      v774 = *(unsigned __int8 *)(v177 + 176);
      if (v774 == 1)
      {
        LOBYTE(v775) = sub_1C4B12E5C(v8, v177 + 176, *(_QWORD *)(v1369 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v774 == 2)
      {
        v775 = *(_DWORD *)(v177 + 184);
      }
      else
      {
        v776 = *(_QWORD *)(v177 + 184);
        if (*(_BYTE *)v776 == 4)
          v775 = *(_DWORD *)(*(_QWORD *)(v776 + 24) + 16) | 0x2000;
        else
          LOBYTE(v775) = 0;
      }
      v793 = v722 | (v723 << 15);
      v794 = (v725 & 7) << 12;
      v795 = *(unsigned __int8 *)(v177 + 192);
      if (v795 == 1)
      {
        LOBYTE(v796) = sub_1C4B12E5C(v8, v177 + 192, *(_QWORD *)(v1369 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v795 == 2)
      {
        v796 = *(_DWORD *)(v177 + 200);
      }
      else
      {
        v797 = *(_QWORD *)(v177 + 200);
        if (*(_BYTE *)v797 == 4)
          v796 = *(_DWORD *)(*(_QWORD *)(v797 + 24) + 16) | 0x2000;
        else
          LOBYTE(v796) = 0;
      }
      v803 = v793 | (8 * v723);
      v804 = v754 << 18;
      v1351 = (v775 & 3) << 26;
      v239 = (v796 & 1) << 23;
      v805 = *(unsigned __int8 *)(v177 + 208);
      if (v805 == 1)
      {
        LOBYTE(v806) = sub_1C4B12E5C(v8, v177 + 208, *(_QWORD *)(v1369 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v805 == 2)
      {
        v806 = *(_DWORD *)(v177 + 216);
      }
      else
      {
        v807 = *(_QWORD *)(v177 + 216);
        if (*(_BYTE *)v807 == 4)
          v806 = *(_DWORD *)(*(_QWORD *)(v807 + 24) + 16) | 0x2000;
        else
          LOBYTE(v806) = 0;
      }
      v812 = v803 | v773;
      v250 = (v806 & 1) << 24;
      v813 = *(unsigned __int8 *)(v177 + 224);
      if (v813 == 1)
      {
        v814 = v8;
        LOBYTE(v815) = sub_1C4B12E5C(v8, v177 + 224, *(_QWORD *)(v1369 + 192), 0);
        v177 = *((_QWORD *)a2 + 2);
      }
      else if (v813 == 2)
      {
        v814 = v8;
        v815 = *(_DWORD *)(v177 + 232);
      }
      else
      {
        v816 = *(_QWORD *)(v177 + 232);
        v814 = v8;
        if (*(_BYTE *)v816 == 4)
          v815 = *(_DWORD *)(*(_QWORD *)(v816 + 24) + 16) | 0x2000;
        else
          LOBYTE(v815) = 0;
      }
      v822 = v812 | v794;
      v823 = (unint64_t)(v754 & 3) << 21;
      v274 = (v815 & 1) << 25;
      v824 = *(unsigned __int8 *)(v177 + 240);
      if (v824 == 1)
      {
        LOBYTE(v825) = sub_1C4B12E5C(v814, v177 + 240, *(_QWORD *)(v1369 + 192), 0);
      }
      else if (v824 == 2)
      {
        v825 = *(_DWORD *)(v177 + 248);
      }
      else
      {
        v826 = *(_QWORD *)(v177 + 248);
        if (*(_BYTE *)v826 == 4)
          v825 = *(_DWORD *)(*(_QWORD *)(v826 + 24) + 16) | 0x2000;
        else
          LOBYTE(v825) = 0;
      }
      v292 = (v825 & 1) << 29;
      v293 = v822 | v823;
      v294 = *(_QWORD *)&v804 & 0x100000 | v1351;
      goto LABEL_1174;
    case 12497:
    case 12499:
    case 12502:
    case 12504:
    case 12507:
    case 12509:
    case 12512:
    case 12514:
    case 12517:
    case 12519:
    case 12522:
    case 12524:
    case 12527:
    case 12529:
    case 12532:
    case 12534:
    case 12541:
    case 12543:
    case 12546:
    case 12548:
    case 12551:
    case 12553:
    case 12556:
    case 12558:
    case 12561:
    case 12563:
    case 12566:
    case 12568:
    case 12571:
    case 12573:
    case 12576:
    case 12578:
    case 12585:
    case 12587:
    case 12590:
    case 12592:
    case 12595:
    case 12597:
    case 12600:
    case 12602:
    case 12605:
    case 12607:
    case 12610:
    case 12612:
    case 12615:
    case 12617:
    case 12620:
    case 12622:
    case 12629:
    case 12631:
    case 12634:
    case 12636:
    case 12639:
    case 12641:
    case 12644:
    case 12646:
    case 12649:
    case 12651:
    case 12654:
    case 12656:
    case 12659:
    case 12661:
    case 12664:
    case 12666:
    case 12693:
    case 12695:
    case 12698:
    case 12700:
    case 12703:
    case 12705:
    case 12708:
    case 12710:
    case 12713:
    case 12715:
    case 12718:
    case 12720:
    case 12723:
    case 12725:
    case 12728:
    case 12730:
    case 12737:
    case 12739:
    case 12742:
    case 12744:
    case 12747:
    case 12749:
    case 12752:
    case 12754:
    case 12757:
    case 12759:
    case 12762:
    case 12764:
    case 12767:
    case 12769:
    case 12772:
    case 12774:
    case 12781:
    case 12783:
    case 12786:
    case 12788:
    case 12791:
    case 12793:
    case 12796:
    case 12798:
    case 12801:
    case 12803:
    case 12806:
    case 12808:
    case 12811:
    case 12813:
    case 12816:
    case 12818:
    case 12825:
    case 12827:
    case 12830:
    case 12832:
    case 12835:
    case 12837:
    case 12840:
    case 12842:
    case 12845:
    case 12847:
    case 12850:
    case 12852:
    case 12855:
    case 12857:
    case 12860:
    case 12862:
      v43 = *((_QWORD *)a2 + 2);
      v44 = *(unsigned __int8 *)(v43 + 112);
      if (v44 == 1)
      {
        LOBYTE(v45) = sub_1C4B12E5C(a1, v43 + 112, *(_QWORD *)(a4 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v44 == 2)
      {
        v45 = *(_DWORD *)(v43 + 120);
      }
      else
      {
        v120 = *(_QWORD *)(v43 + 120);
        if (*(_BYTE *)v120 == 4)
          v45 = *(_DWORD *)(*(_QWORD *)(v120 + 24) + 16) | 0x2000;
        else
          LOBYTE(v45) = 0;
      }
      v188 = *(unsigned __int8 *)(v43 + 192);
      if (v188 == 1)
      {
        LOBYTE(v189) = sub_1C4B12E5C(v8, v43 + 192, *(_QWORD *)(a4 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v188 == 2)
      {
        v189 = *(_DWORD *)(v43 + 200);
      }
      else
      {
        v190 = *(_QWORD *)(v43 + 200);
        if (*(_BYTE *)v190 == 4)
          v189 = *(_DWORD *)(*(_QWORD *)(v190 + 24) + 16) | 0x2000;
        else
          LOBYTE(v189) = 0;
      }
      v194 = *(unsigned __int8 *)(v43 + 128);
      if (v194 == 1)
      {
        LOBYTE(v195) = sub_1C4B12E5C(v8, v43 + 128, *(_QWORD *)(a4 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v194 == 2)
      {
        v195 = *(_DWORD *)(v43 + 136);
      }
      else
      {
        v196 = *(_QWORD *)(v43 + 136);
        if (*(_BYTE *)v196 == 4)
          v195 = *(_DWORD *)(*(_QWORD *)(v196 + 24) + 16) | 0x2000;
        else
          LOBYTE(v195) = 0;
      }
      v200 = v45 & 1;
      v201 = v189 & 0xF;
      v202 = *(unsigned __int8 *)(v43 + 144);
      if (v202 == 1)
      {
        LOBYTE(v203) = sub_1C4B12E5C(v8, v43 + 144, *(_QWORD *)(a4 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v202 == 2)
      {
        v203 = *(_DWORD *)(v43 + 152);
      }
      else
      {
        v204 = *(_QWORD *)(v43 + 152);
        if (*(_BYTE *)v204 == 4)
          v203 = *(_DWORD *)(*(_QWORD *)(v204 + 24) + 16) | 0x2000;
        else
          LOBYTE(v203) = 0;
      }
      v208 = *(unsigned __int8 *)(v43 + 176);
      v1363 = a4;
      if (v208 == 1)
      {
        v209 = sub_1C4B12E5C(v8, v43 + 176, *(_QWORD *)(a4 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v208 == 2)
      {
        v209 = *(_DWORD *)(v43 + 184);
      }
      else
      {
        v210 = *(_QWORD *)(v43 + 184);
        if (*(_BYTE *)v210 == 4)
          v209 = *(_DWORD *)(*(_QWORD *)(v210 + 24) + 16) | 0x2000;
        else
          v209 = 0;
      }
      v214 = (v195 & 7) << 9;
      v215 = *(unsigned __int8 *)(v43 + 208);
      if (v215 == 1)
      {
        LOBYTE(v216) = sub_1C4B12E5C(v8, v43 + 208, *(_QWORD *)(v1363 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v215 == 2)
      {
        v216 = *(_DWORD *)(v43 + 216);
      }
      else
      {
        v217 = *(_QWORD *)(v43 + 216);
        if (*(_BYTE *)v217 == 4)
          v216 = *(_DWORD *)(*(_QWORD *)(v217 + 24) + 16) | 0x2000;
        else
          LOBYTE(v216) = 0;
      }
      v224 = v200 | (v201 << 15);
      v225 = (v203 & 7) << 12;
      v226 = *(unsigned __int8 *)(v43 + 224);
      if (v226 == 1)
      {
        LOBYTE(v227) = sub_1C4B12E5C(v8, v43 + 224, *(_QWORD *)(v1363 + 192), 0);
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v226 == 2)
      {
        v227 = *(_DWORD *)(v43 + 232);
      }
      else
      {
        v228 = *(_QWORD *)(v43 + 232);
        if (*(_BYTE *)v228 == 4)
          v227 = *(_DWORD *)(*(_QWORD *)(v228 + 24) + 16) | 0x2000;
        else
          LOBYTE(v227) = 0;
      }
      v236 = v224 | (8 * v201);
      v237 = v209 << 18;
      v238 = (v216 & 3) << 26;
      v239 = (v227 & 1) << 23;
      v240 = *(unsigned __int8 *)(v43 + 240);
      if (v240 == 1)
      {
        LOBYTE(v241) = sub_1C4B12E5C(v8, v43 + 240, *(_QWORD *)(v1363 + 192), 0);
        v238 = (v216 & 3) << 26;
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v240 == 2)
      {
        v241 = *(_DWORD *)(v43 + 248);
      }
      else
      {
        v242 = *(_QWORD *)(v43 + 248);
        if (*(_BYTE *)v242 == 4)
          v241 = *(_DWORD *)(*(_QWORD *)(v242 + 24) + 16) | 0x2000;
        else
          LOBYTE(v241) = 0;
      }
      v249 = v236 | v214;
      v250 = (v241 & 1) << 24;
      v251 = *(unsigned __int8 *)(v43 + 256);
      if (v251 == 1)
      {
        v252 = v8;
        v254 = v8;
        v255 = v238;
        LOBYTE(v253) = sub_1C4B12E5C(v254, v43 + 256, *(_QWORD *)(v1363 + 192), 0);
        v238 = v255;
        v43 = *((_QWORD *)a2 + 2);
      }
      else if (v251 == 2)
      {
        v252 = v8;
        v253 = *(_DWORD *)(v43 + 264);
      }
      else
      {
        v256 = *(_QWORD *)(v43 + 264);
        v252 = v8;
        if (*(_BYTE *)v256 == 4)
          v253 = *(_DWORD *)(*(_QWORD *)(v256 + 24) + 16) | 0x2000;
        else
          LOBYTE(v253) = 0;
      }
      v272 = v249 | v225;
      v273 = (unint64_t)(v209 & 3) << 21;
      v274 = (v253 & 1) << 25;
      v275 = *(unsigned __int8 *)(v43 + 272);
      if (v275 == 1)
      {
        v277 = v252;
        v278 = v238;
        LOBYTE(v276) = sub_1C4B12E5C(v277, v43 + 272, *(_QWORD *)(v1363 + 192), 0);
        v238 = v278;
      }
      else if (v275 == 2)
      {
        v276 = *(_DWORD *)(v43 + 280);
      }
      else
      {
        v279 = *(_QWORD *)(v43 + 280);
        if (*(_BYTE *)v279 == 4)
          v276 = *(_DWORD *)(*(_QWORD *)(v279 + 24) + 16) | 0x2000;
        else
          LOBYTE(v276) = 0;
      }
      v292 = (v276 & 1) << 29;
      v293 = v272 | v273;
      v294 = *(_QWORD *)&v237 & 0x100000 | v238;
LABEL_1174:
      v781 = v294 | v239 | v250 | v274;
      goto LABEL_1185;
    case 12498:
    case 12500:
    case 12503:
    case 12505:
    case 12508:
    case 12510:
    case 12513:
    case 12515:
    case 12518:
    case 12520:
    case 12523:
    case 12525:
    case 12528:
    case 12530:
    case 12533:
    case 12535:
    case 12542:
    case 12544:
    case 12547:
    case 12549:
    case 12552:
    case 12554:
    case 12557:
    case 12559:
    case 12562:
    case 12564:
    case 12567:
    case 12569:
    case 12572:
    case 12574:
    case 12577:
    case 12579:
    case 12586:
    case 12588:
    case 12591:
    case 12593:
    case 12596:
    case 12598:
    case 12601:
    case 12603:
    case 12606:
    case 12608:
    case 12611:
    case 12613:
    case 12616:
    case 12618:
    case 12621:
    case 12623:
    case 12630:
    case 12632:
    case 12635:
    case 12637:
    case 12640:
    case 12642:
    case 12645:
    case 12647:
    case 12650:
    case 12652:
    case 12655:
    case 12657:
    case 12660:
    case 12662:
    case 12665:
    case 12667:
    case 12694:
    case 12696:
    case 12699:
    case 12701:
    case 12704:
    case 12706:
    case 12709:
    case 12711:
    case 12714:
    case 12716:
    case 12719:
    case 12721:
    case 12724:
    case 12726:
    case 12729:
    case 12731:
    case 12738:
    case 12740:
    case 12743:
    case 12745:
    case 12748:
    case 12750:
    case 12753:
    case 12755:
    case 12758:
    case 12760:
    case 12763:
    case 12765:
    case 12768:
    case 12770:
    case 12773:
    case 12775:
    case 12782:
    case 12784:
    case 12787:
    case 12789:
    case 12792:
    case 12794:
    case 12797:
    case 12799:
    case 12802:
    case 12804:
    case 12807:
    case 12809:
    case 12812:
    case 12814:
    case 12817:
    case 12819:
    case 12826:
    case 12828:
    case 12831:
    case 12833:
    case 12836:
    case 12838:
    case 12841:
    case 12843:
    case 12846:
    case 12848:
    case 12851:
    case 12853:
    case 12856:
    case 12858:
    case 12861:
    case 12863:
      v46 = *((_QWORD *)a2 + 2);
      v47 = *(unsigned __int8 *)(v46 + 144);
      if (v47 == 1)
      {
        LOBYTE(v48) = sub_1C4B12E5C(a1, v46 + 144, *(_QWORD *)(a4 + 192), 0);
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v47 == 2)
      {
        v48 = *(_DWORD *)(v46 + 152);
      }
      else
      {
        v121 = *(_QWORD *)(v46 + 152);
        if (*(_BYTE *)v121 == 4)
          v48 = *(_DWORD *)(*(_QWORD *)(v121 + 24) + 16) | 0x2000;
        else
          LOBYTE(v48) = 0;
      }
      v191 = *(unsigned __int8 *)(v46 + 192);
      if (v191 == 1)
      {
        v192 = sub_1C4B12E5C(v8, v46 + 192, *(_QWORD *)(a4 + 192), 0);
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v191 == 2)
      {
        v192 = *(unsigned int *)(v46 + 200);
      }
      else
      {
        v193 = *(_QWORD *)(v46 + 200);
        if (*(_BYTE *)v193 == 4)
          v192 = *(_DWORD *)(*(_QWORD *)(v193 + 24) + 16) | 0x2000u;
        else
          v192 = 0;
      }
      v197 = *(unsigned __int8 *)(v46 + 224);
      if (v197 == 1)
      {
        LOBYTE(v198) = sub_1C4B12E5C(v8, v46 + 224, *(_QWORD *)(a4 + 192), 0);
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v197 == 2)
      {
        v198 = *(_DWORD *)(v46 + 232);
      }
      else
      {
        v199 = *(_QWORD *)(v46 + 232);
        if (*(_BYTE *)v199 == 4)
          v198 = *(_DWORD *)(*(_QWORD *)(v199 + 24) + 16) | 0x2000;
        else
          LOBYTE(v198) = 0;
      }
      v205 = *(unsigned __int8 *)(v46 + 160);
      if (v205 == 1)
      {
        LOBYTE(v206) = sub_1C4B12E5C(v8, v46 + 160, *(_QWORD *)(a4 + 192), 0);
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v205 == 2)
      {
        v206 = *(_DWORD *)(v46 + 168);
      }
      else
      {
        v207 = *(_QWORD *)(v46 + 168);
        if (*(_BYTE *)v207 == 4)
          v206 = *(_DWORD *)(*(_QWORD *)(v207 + 24) + 16) | 0x2000;
        else
          LOBYTE(v206) = 0;
      }
      v211 = *(unsigned __int8 *)(v46 + 176);
      v1364 = a4;
      if (v211 == 1)
      {
        LOBYTE(v212) = sub_1C4B12E5C(v8, v46 + 176, *(_QWORD *)(a4 + 192), 0);
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v211 == 2)
      {
        v212 = *(_DWORD *)(v46 + 184);
      }
      else
      {
        v213 = *(_QWORD *)(v46 + 184);
        if (*(_BYTE *)v213 == 4)
          v212 = *(_DWORD *)(*(_QWORD *)(v213 + 24) + 16) | 0x2000;
        else
          LOBYTE(v212) = 0;
      }
      v218 = v198 & 0xF;
      v219 = *(unsigned __int8 *)(v46 + 208);
      if (v219 == 1)
      {
        v221 = v212;
        v222 = sub_1C4B12E5C(v8, v46 + 208, *(_QWORD *)(v1364 + 192), 0);
        LOBYTE(v212) = v221;
        LODWORD(v220) = v222;
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v219 == 2)
      {
        LODWORD(v220) = *(_DWORD *)(v46 + 216);
      }
      else
      {
        v223 = *(_QWORD *)(v46 + 216);
        if (*(_BYTE *)v223 == 4)
          LODWORD(v220) = *(_DWORD *)(*(_QWORD *)(v223 + 24) + 16) | 0x2000;
        else
          LODWORD(v220) = 0;
      }
      v229 = v192 >> 1;
      v230 = v48 & 1 | ((v192 & 1) << 28);
      v231 = *(unsigned __int8 *)(v46 + 240);
      if (v231 == 1)
      {
        v233 = v212;
        v234 = sub_1C4B12E5C(v8, v46 + 240, *(_QWORD *)(v1364 + 192), 0);
        LOBYTE(v212) = v233;
        LOBYTE(v232) = v234;
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v231 == 2)
      {
        v232 = *(_DWORD *)(v46 + 248);
      }
      else
      {
        v235 = *(_QWORD *)(v46 + 248);
        if (*(_BYTE *)v235 == 4)
          v232 = *(_DWORD *)(*(_QWORD *)(v235 + 24) + 16) | 0x2000;
        else
          LOBYTE(v232) = 0;
      }
      v243 = v230 & 0xFFFFFFFFFFF7FFFFLL | ((v229 & 1) << 19);
      v244 = (v206 & 7) << 9;
      v245 = *(unsigned __int8 *)(v46 + 256);
      if (v245 == 1)
      {
        v247 = v212;
        LOBYTE(v246) = sub_1C4B12E5C(v8, v46 + 256, *(_QWORD *)(v1364 + 192), 0);
        LOBYTE(v212) = v247;
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v245 == 2)
      {
        v246 = *(_DWORD *)(v46 + 264);
      }
      else
      {
        v248 = *(_QWORD *)(v46 + 264);
        if (*(_BYTE *)v248 == 4)
          v246 = *(_DWORD *)(*(_QWORD *)(v248 + 24) + 16) | 0x2000;
        else
          LOBYTE(v246) = 0;
      }
      v257 = v243 | (v218 << 15);
      v258 = (v212 & 7) << 12;
      v259 = (_DWORD)v220 << 18;
      v260 = (v232 & 3) << 26;
      v261 = (v246 & 1) << 23;
      v262 = *(unsigned __int8 *)(v46 + 272);
      if (v262 == 1)
      {
        v264 = v8;
        v265 = v261;
        v1347 = v218;
        v266 = v220;
        v220 = v244;
        v267 = v258;
        v268 = v9;
        v269 = v8;
        v270 = v259;
        LOBYTE(v263) = sub_1C4B12E5C(v264, v46 + 272, *(_QWORD *)(v1364 + 192), 0);
        v259 = v270;
        v8 = v269;
        v9 = v268;
        v258 = v267;
        v244 = v220;
        LOBYTE(v220) = v266;
        v218 = v1347;
        v261 = v265;
        v260 = (v232 & 3) << 26;
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v262 == 2)
      {
        v263 = *(_DWORD *)(v46 + 280);
      }
      else
      {
        v271 = *(_QWORD *)(v46 + 280);
        if (*(_BYTE *)v271 == 4)
          v263 = *(_DWORD *)(*(_QWORD *)(v271 + 24) + 16) | 0x2000;
        else
          LOBYTE(v263) = 0;
      }
      v280 = v257 | (8 * v218);
      v281 = (v263 & 1) << 24;
      v282 = *(unsigned __int8 *)(v46 + 288);
      v1356 = v8;
      if (v282 == 1)
      {
        v284 = v8;
        v285 = v260;
        v286 = v281;
        v287 = v261;
        v288 = v220;
        v220 = v244;
        v289 = v258;
        v290 = v259;
        LOBYTE(v283) = sub_1C4B12E5C(v284, v46 + 288, *(_QWORD *)(v1364 + 192), 0);
        v259 = v290;
        v258 = v289;
        v244 = v220;
        LOBYTE(v220) = v288;
        v261 = v287;
        v281 = v286;
        v260 = v285;
        v46 = *((_QWORD *)a2 + 2);
      }
      else if (v282 == 2)
      {
        v283 = *(_DWORD *)(v46 + 296);
      }
      else
      {
        v291 = *(_QWORD *)(v46 + 296);
        if (*(_BYTE *)v291 == 4)
          v283 = *(_DWORD *)(*(_QWORD *)(v291 + 24) + 16) | 0x2000;
        else
          LOBYTE(v283) = 0;
      }
      v295 = v280 | v244;
      v296 = (unint64_t)(v220 & 3) << 21;
      v297 = *(_QWORD *)&v259 & 0x100000;
      v298 = (v283 & 1) << 25;
      v299 = *(unsigned __int8 *)(v46 + 304);
      if (v299 == 1)
      {
        v301 = v260;
        v302 = v261;
        v303 = v258;
        LOBYTE(v300) = sub_1C4B12E5C(v1356, v46 + 304, *(_QWORD *)(v1364 + 192), 0);
        v258 = v303;
        v261 = v302;
        v260 = v301;
      }
      else if (v299 == 2)
      {
        v300 = *(_DWORD *)(v46 + 312);
      }
      else
      {
        v304 = *(_QWORD *)(v46 + 312);
        if (*(_BYTE *)v304 == 4)
          v300 = *(_DWORD *)(*(_QWORD *)(v304 + 24) + 16) | 0x2000;
        else
          LOBYTE(v300) = 0;
      }
      v292 = (v300 & 1) << 29;
      v293 = v295 | v258;
      v305 = v296 | v297 | v260 | v261 | v281;
      goto LABEL_1184;
    case 12501:
    case 12511:
    case 12521:
    case 12531:
    case 12545:
    case 12555:
    case 12565:
    case 12575:
    case 12589:
    case 12599:
    case 12609:
    case 12619:
    case 12633:
    case 12643:
    case 12653:
    case 12663:
    case 12697:
    case 12707:
    case 12717:
    case 12727:
    case 12741:
    case 12751:
    case 12761:
    case 12771:
    case 12785:
    case 12795:
    case 12805:
    case 12815:
    case 12829:
    case 12839:
    case 12849:
    case 12859:
      v180 = *((_QWORD *)a2 + 2);
      v181 = *(unsigned __int8 *)(v180 + 112);
      if (v181 == 1)
      {
        LOBYTE(v182) = sub_1C4B12E5C(a1, v180 + 112, *(_QWORD *)(a4 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v181 == 2)
      {
        v182 = *(_DWORD *)(v180 + 120);
      }
      else
      {
        v390 = *(_QWORD *)(v180 + 120);
        if (*(_BYTE *)v390 == 4)
          v182 = *(_DWORD *)(*(_QWORD *)(v390 + 24) + 16) | 0x2000;
        else
          LOBYTE(v182) = 0;
      }
      v668 = *(unsigned __int8 *)(v180 + 160);
      if (v668 == 1)
      {
        v669 = sub_1C4B12E5C(v8, v180 + 160, *(_QWORD *)(a4 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v668 == 2)
      {
        v669 = *(unsigned int *)(v180 + 168);
      }
      else
      {
        v670 = *(_QWORD *)(v180 + 168);
        if (*(_BYTE *)v670 == 4)
          v669 = *(_DWORD *)(*(_QWORD *)(v670 + 24) + 16) | 0x2000u;
        else
          v669 = 0;
      }
      v696 = *(unsigned __int8 *)(v180 + 192);
      if (v696 == 1)
      {
        LOBYTE(v697) = sub_1C4B12E5C(v8, v180 + 192, *(_QWORD *)(a4 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v696 == 2)
      {
        v697 = *(_DWORD *)(v180 + 200);
      }
      else
      {
        v698 = *(_QWORD *)(v180 + 200);
        if (*(_BYTE *)v698 == 4)
          v697 = *(_DWORD *)(*(_QWORD *)(v698 + 24) + 16) | 0x2000;
        else
          LOBYTE(v697) = 0;
      }
      v727 = *(unsigned __int8 *)(v180 + 128);
      if (v727 == 1)
      {
        LOBYTE(v728) = sub_1C4B12E5C(v8, v180 + 128, *(_QWORD *)(a4 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v727 == 2)
      {
        v728 = *(_DWORD *)(v180 + 136);
      }
      else
      {
        v729 = *(_QWORD *)(v180 + 136);
        if (*(_BYTE *)v729 == 4)
          v728 = *(_DWORD *)(*(_QWORD *)(v729 + 24) + 16) | 0x2000;
        else
          LOBYTE(v728) = 0;
      }
      v756 = *(unsigned __int8 *)(v180 + 144);
      v1370 = a4;
      if (v756 == 1)
      {
        v1350 = sub_1C4B12E5C(v8, v180 + 144, *(_QWORD *)(a4 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
        goto LABEL_1094;
      }
      if (v756 == 2)
      {
        v757 = *(_DWORD *)(v180 + 152);
LABEL_1064:
        v1350 = v757;
        goto LABEL_1094;
      }
      v758 = *(_QWORD *)(v180 + 152);
      if (*(_BYTE *)v758 == 4)
      {
        v757 = *(_DWORD *)(*(_QWORD *)(v758 + 24) + 16) | 0x2000;
        goto LABEL_1064;
      }
      v1350 = 0;
LABEL_1094:
      v777 = v697 & 0xF;
      v778 = *(unsigned __int8 *)(v180 + 176);
      if (v778 == 1)
      {
        v779 = sub_1C4B12E5C(v8, v180 + 176, *(_QWORD *)(v1370 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v778 == 2)
      {
        v779 = *(_DWORD *)(v180 + 184);
      }
      else
      {
        v780 = *(_QWORD *)(v180 + 184);
        if (*(_BYTE *)v780 == 4)
          v779 = *(_DWORD *)(*(_QWORD *)(v780 + 24) + 16) | 0x2000;
        else
          v779 = 0;
      }
      v798 = v669 >> 1;
      v799 = v182 & 1 | ((v669 & 1) << 28);
      v800 = *(unsigned __int8 *)(v180 + 208);
      if (v800 == 1)
      {
        LOBYTE(v801) = sub_1C4B12E5C(v8, v180 + 208, *(_QWORD *)(v1370 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v800 == 2)
      {
        v801 = *(_DWORD *)(v180 + 216);
      }
      else
      {
        v802 = *(_QWORD *)(v180 + 216);
        if (*(_BYTE *)v802 == 4)
          v801 = *(_DWORD *)(*(_QWORD *)(v802 + 24) + 16) | 0x2000;
        else
          LOBYTE(v801) = 0;
      }
      v808 = v799 & 0xFFFFFFFFFFF7FFFFLL | ((v798 & 1) << 19);
      v809 = *(unsigned __int8 *)(v180 + 224);
      if (v809 == 1)
      {
        LOBYTE(v810) = sub_1C4B12E5C(v8, v180 + 224, *(_QWORD *)(v1370 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v809 == 2)
      {
        v810 = *(_DWORD *)(v180 + 232);
      }
      else
      {
        v811 = *(_QWORD *)(v180 + 232);
        if (*(_BYTE *)v811 == 4)
          v810 = *(_DWORD *)(*(_QWORD *)(v811 + 24) + 16) | 0x2000;
        else
          LOBYTE(v810) = 0;
      }
      v817 = v808 | (v777 << 15);
      v818 = (v1350 & 7) << 12;
      v1352 = (v801 & 3) << 26;
      v1345 = (v810 & 1) << 23;
      v819 = *(unsigned __int8 *)(v180 + 240);
      if (v819 == 1)
      {
        LOBYTE(v820) = sub_1C4B12E5C(v8, v180 + 240, *(_QWORD *)(v1370 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v819 == 2)
      {
        v820 = *(_DWORD *)(v180 + 248);
      }
      else
      {
        v821 = *(_QWORD *)(v180 + 248);
        if (*(_BYTE *)v821 == 4)
          v820 = *(_DWORD *)(*(_QWORD *)(v821 + 24) + 16) | 0x2000;
        else
          LOBYTE(v820) = 0;
      }
      v827 = v817 | (8 * v777);
      v828 = (v820 & 1) << 24;
      v829 = *(unsigned __int8 *)(v180 + 256);
      if (v829 == 1)
      {
        v830 = v8;
        LOBYTE(v831) = sub_1C4B12E5C(v8, v180 + 256, *(_QWORD *)(v1370 + 192), 0);
        v180 = *((_QWORD *)a2 + 2);
      }
      else if (v829 == 2)
      {
        v830 = v8;
        v831 = *(_DWORD *)(v180 + 264);
      }
      else
      {
        v832 = *(_QWORD *)(v180 + 264);
        v830 = v8;
        if (*(_BYTE *)v832 == 4)
          v831 = *(_DWORD *)(*(_QWORD *)(v832 + 24) + 16) | 0x2000;
        else
          LOBYTE(v831) = 0;
      }
      v833 = v827 | ((v728 & 7) << 9);
      v298 = (v831 & 1) << 25;
      v834 = *(unsigned __int8 *)(v180 + 272);
      if (v834 == 1)
      {
        LOBYTE(v835) = sub_1C4B12E5C(v830, v180 + 272, *(_QWORD *)(v1370 + 192), 0);
      }
      else if (v834 == 2)
      {
        v835 = *(_DWORD *)(v180 + 280);
      }
      else
      {
        v836 = *(_QWORD *)(v180 + 280);
        if (*(_BYTE *)v836 == 4)
          v835 = *(_DWORD *)(*(_QWORD *)(v836 + 24) + 16) | 0x2000;
        else
          LOBYTE(v835) = 0;
      }
      v292 = (v835 & 1) << 29;
      v293 = v833 | v818;
      v305 = ((unint64_t)(v779 & 3) << 21) | (v779 << 18) & 0x100000 | v1352 | v1345 | v828;
LABEL_1184:
      v781 = v305 | v298;
LABEL_1185:
      v140 = v781 | v292;
LABEL_1186:
      v9 |= v293 | v140;
      return v9;
    case 12868:
    case 12870:
      v1048 = *((_QWORD *)a2 + 2);
      v1049 = *(unsigned __int8 *)(v1048 + 48);
      if (v1049 == 1)
      {
        v1050 = a4;
        v1051 = a1;
        LOBYTE(v1052) = sub_1C4B12E5C(a1, v1048 + 48, *(_QWORD *)(a4 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v1050 = a4;
        v1051 = a1;
        if (v1049 == 2)
        {
          v1052 = *(_DWORD *)(v1048 + 56);
        }
        else
        {
          v1151 = *(_QWORD *)(v1048 + 56);
          if (*(_BYTE *)v1151 == 4)
            v1052 = *(_DWORD *)(*(_QWORD *)(v1151 + 24) + 16) | 0x2000;
          else
            LOBYTE(v1052) = 0;
        }
      }
      v1192 = (v1052 & 3) << 13;
      v1193 = *(unsigned __int8 *)(v1048 + 64);
      if (v1193 == 1)
      {
        LOBYTE(v1194) = sub_1C4B12E5C(v1051, v1048 + 64, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1193 == 2)
      {
        v1194 = *(_DWORD *)(v1048 + 72);
      }
      else
      {
        v1195 = *(_QWORD *)(v1048 + 72);
        if (*(_BYTE *)v1195 == 4)
          v1194 = *(_DWORD *)(*(_QWORD *)(v1195 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1194) = 0;
      }
      v1214 = ((v1194 & 3) << 11) | v1192;
      v1215 = *(unsigned __int8 *)(v1048 + 80);
      if (v1215 == 1)
      {
        LOBYTE(v1216) = sub_1C4B12E5C(v1051, v1048 + 80, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1215 == 2)
      {
        v1216 = *(_DWORD *)(v1048 + 88);
      }
      else
      {
        v1217 = *(_QWORD *)(v1048 + 88);
        if (*(_BYTE *)v1217 == 4)
          v1216 = *(_DWORD *)(*(_QWORD *)(v1217 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1216) = 0;
      }
      v1226 = v1214 & 0xFFFDFFFF | ((v1216 & 1) << 17);
      v1227 = *(unsigned __int8 *)(v1048 + 96);
      if (v1227 == 1)
      {
        LOBYTE(v1228) = sub_1C4B12E5C(v1051, v1048 + 96, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1227 == 2)
      {
        v1228 = *(_DWORD *)(v1048 + 104);
      }
      else
      {
        v1229 = *(_QWORD *)(v1048 + 104);
        if (*(_BYTE *)v1229 == 4)
          v1228 = *(_DWORD *)(*(_QWORD *)(v1229 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1228) = 0;
      }
      v1240 = v1226 | ((v1228 & 1) << 10);
      v1241 = *(unsigned __int8 *)(v1048 + 112);
      if (v1241 == 1)
      {
        LOBYTE(v1242) = sub_1C4B12E5C(v1051, v1048 + 112, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1241 == 2)
      {
        v1242 = *(_DWORD *)(v1048 + 120);
      }
      else
      {
        v1243 = *(_QWORD *)(v1048 + 120);
        if (*(_BYTE *)v1243 == 4)
          v1242 = *(_DWORD *)(*(_QWORD *)(v1243 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1242) = 0;
      }
      v1253 = v1240 | ((v1242 & 1) << 9);
      v1254 = *(unsigned __int8 *)(v1048 + 128);
      if (v1254 == 1)
      {
        LOBYTE(v1255) = sub_1C4B12E5C(v1051, v1048 + 128, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1254 == 2)
      {
        v1255 = *(_DWORD *)(v1048 + 136);
      }
      else
      {
        v1256 = *(_QWORD *)(v1048 + 136);
        if (*(_BYTE *)v1256 == 4)
          v1255 = *(_DWORD *)(*(_QWORD *)(v1256 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1255) = 0;
      }
      v1257 = v1253 | ((v1255 & 1) << 8);
      v1258 = *(unsigned __int8 *)(v1048 + 144);
      if (v1258 == 1)
      {
        LOBYTE(v1259) = sub_1C4B12E5C(v1051, v1048 + 144, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1258 == 2)
      {
        v1259 = *(_DWORD *)(v1048 + 152);
      }
      else
      {
        v1260 = *(_QWORD *)(v1048 + 152);
        if (*(_BYTE *)v1260 == 4)
          v1259 = *(_DWORD *)(*(_QWORD *)(v1260 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1259) = 0;
      }
      v1261 = v1257 | ((v1259 & 1) << 7);
      v1262 = *(unsigned __int8 *)(v1048 + 160);
      if (v1262 == 1)
      {
        LOBYTE(v1263) = sub_1C4B12E5C(v1051, v1048 + 160, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1262 == 2)
      {
        v1263 = *(_DWORD *)(v1048 + 168);
      }
      else
      {
        v1264 = *(_QWORD *)(v1048 + 168);
        if (*(_BYTE *)v1264 == 4)
          v1263 = *(_DWORD *)(*(_QWORD *)(v1264 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1263) = 0;
      }
      v1265 = v1261 | ((v1263 & 1) << 6);
      v1266 = *(unsigned __int8 *)(v1048 + 176);
      if (v1266 == 1)
      {
        LOBYTE(v1267) = sub_1C4B12E5C(v1051, v1048 + 176, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1266 == 2)
      {
        v1267 = *(_DWORD *)(v1048 + 184);
      }
      else
      {
        v1268 = *(_QWORD *)(v1048 + 184);
        if (*(_BYTE *)v1268 == 4)
          v1267 = *(_DWORD *)(*(_QWORD *)(v1268 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1267) = 0;
      }
      v1269 = v1265 | (32 * (v1267 & 1));
      v1270 = *(unsigned __int8 *)(v1048 + 192);
      if (v1270 == 1)
      {
        LOBYTE(v1271) = sub_1C4B12E5C(v1051, v1048 + 192, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1270 == 2)
      {
        v1271 = *(_DWORD *)(v1048 + 200);
      }
      else
      {
        v1272 = *(_QWORD *)(v1048 + 200);
        if (*(_BYTE *)v1272 == 4)
          v1271 = *(_DWORD *)(*(_QWORD *)(v1272 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1271) = 0;
      }
      v1273 = v1269 | (4 * (v1271 & 3));
      v1274 = *(unsigned __int8 *)(v1048 + 208);
      if (v1274 == 1)
      {
        LOBYTE(v1275) = sub_1C4B12E5C(v1051, v1048 + 208, *(_QWORD *)(v1050 + 192), 0);
        v1048 = *((_QWORD *)a2 + 2);
      }
      else if (v1274 == 2)
      {
        v1275 = *(_DWORD *)(v1048 + 216);
      }
      else
      {
        v1276 = *(_QWORD *)(v1048 + 216);
        if (*(_BYTE *)v1276 == 4)
          v1275 = *(_DWORD *)(*(_QWORD *)(v1276 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1275) = 0;
      }
      v581 = v1273 & 0xFFE7FFFF | ((v1275 & 3) << 19);
      v582 = v1048 + 224;
      v1277 = *(unsigned __int8 *)(v1048 + 224);
      if (v1277 == 1)
      {
        v637 = *(_QWORD *)(v1050 + 192);
        v638 = v1051;
LABEL_874:
        LOBYTE(v584) = sub_1C4B12E5C(v638, v582, v637, 0);
      }
      else if (v1277 == 2)
      {
        v584 = *(_DWORD *)(v1048 + 232);
      }
      else
      {
        v585 = *(_QWORD *)(v1048 + 232);
LABEL_876:
        if (*(_BYTE *)v585 == 4)
          v584 = *(_DWORD *)(*(_QWORD *)(v585 + 24) + 16) | 0x2000;
        else
          LOBYTE(v584) = 0;
      }
LABEL_879:
      v639 = v581 | v584 & 3;
LABEL_1284:
      v9 |= v639;
      return v9;
    case 13425:
      v1110 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1111 = *((_QWORD *)a2 + 2);
      v1114 = *(unsigned __int8 *)(v1111 + 16);
      v1112 = v1111 + 16;
      v1113 = v1114;
      if (v1114 == 1)
      {
        v1115 = sub_1C4B12E5C(a1, v1112, *(_QWORD *)(a4 + 192), 0);
        v1110 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1113 == 2)
      {
        v1115 = *((_DWORD *)v1110 + 6);
      }
      else
      {
        v1165 = *((_QWORD *)v1110 + 3);
        if (*(_BYTE *)v1165 == 4)
          v1115 = *(_DWORD *)(*(_QWORD *)(v1165 + 24) + 16) | 0x2000;
        else
          v1115 = 0;
      }
      v1297 = (v1115 << 9) & 0x60000;
      v1298 = (unint64_t)v1115 << 8;
      v1299 = *v1110;
      if (v1299 == 1)
      {
        v1300 = sub_1C4B12E5C(a1, (uint64_t)v1110, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1299 == 2)
      {
        v1300 = *((unsigned int *)v1110 + 2);
      }
      else
      {
        v1301 = *((_QWORD *)v1110 + 1);
        if (*(_BYTE *)v1301 == 4)
          v1300 = *(_DWORD *)(*(_QWORD *)(v1301 + 24) + 16) | 0x2000u;
        else
          v1300 = 0;
      }
      v1328 = (v1297 | v1298) & 0xFFFFFFF9FFFFFFFFLL | (((v1300 >> 8) & 3) << 33);
      v1329 = ((_DWORD)v1300 << 24) | v9;
      return v1328 | v1329;
    case 13426:
      v1117 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1118 = *((_QWORD *)a2 + 2);
      v1121 = *(unsigned __int8 *)(v1118 + 16);
      v1119 = v1118 + 16;
      v1120 = v1121;
      if (v1121 == 1)
      {
        v1122 = sub_1C4B12E5C(a1, v1119, *(_QWORD *)(a4 + 192), 0);
        v1117 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1120 == 2)
      {
        v1122 = *((unsigned int *)v1117 + 6);
      }
      else
      {
        v1166 = *((_QWORD *)v1117 + 3);
        if (*(_BYTE *)v1166 == 4)
          v1122 = *(_DWORD *)(*(_QWORD *)(v1166 + 24) + 16) | 0x2000u;
        else
          v1122 = 0;
      }
      v1302 = (v1122 << 25) & 0x600000000;
      v1303 = ((_DWORD)v1122 << 24);
      v1304 = *v1117;
      if (v1304 == 1)
      {
        v1305 = sub_1C4B12E5C(a1, (uint64_t)v1117, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1304 == 2)
      {
        v1305 = *((_DWORD *)v1117 + 2);
      }
      else
      {
        v1306 = *((_QWORD *)v1117 + 1);
        if (*(_BYTE *)v1306 == 4)
          v1305 = *(_DWORD *)(*(_QWORD *)(v1306 + 24) + 16) | 0x2000;
        else
          v1305 = 0;
      }
      v1330 = (v1305 << 9) & 0x60000;
      v1331 = (unint64_t)v1305 << 8;
      v1328 = v1302 | v1303;
      goto LABEL_1879;
    case 13427:
      v1124 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1125 = *((_QWORD *)v1124 + 5);
      v1126 = *((_QWORD *)a2 + 2);
      v1129 = *(unsigned __int8 *)(v1126 + 16);
      v1127 = v1126 + 16;
      v1128 = v1129;
      if (v1129 == 1)
      {
        v1130 = sub_1C4B12E5C(a1, v1127, *(_QWORD *)(a4 + 192), 0);
        v1124 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1128 == 2)
      {
        v1130 = *((_DWORD *)v1124 + 6);
      }
      else
      {
        v1167 = *((_QWORD *)v1124 + 3);
        if (*(_BYTE *)v1167 == 4)
          v1130 = *(_DWORD *)(*(_QWORD *)(v1167 + 24) + 16) | 0x2000;
        else
          v1130 = 0;
      }
      v1307 = (unint64_t)(v1125 & 3) << 45;
      v1308 = (v1130 << 9) & 0x60000;
      v1309 = (unint64_t)v1130 << 8;
      v1310 = *v1124;
      if (v1310 == 1)
      {
        v1311 = sub_1C4B12E5C(a1, (uint64_t)v1124, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1310 == 2)
      {
        v1311 = *((unsigned int *)v1124 + 2);
      }
      else
      {
        v1312 = *((_QWORD *)v1124 + 1);
        if (*(_BYTE *)v1312 == 4)
          v1311 = *(_DWORD *)(*(_QWORD *)(v1312 + 24) + 16) | 0x2000u;
        else
          v1311 = 0;
      }
      v1331 = ((_DWORD)v1311 << 24);
      v1328 = v1307 | v1308;
      v1330 = v1309 | (v1311 << 25) & 0x600000000;
LABEL_1879:
      v1329 = v1330 | v1331 | v9;
      return v1328 | v1329;
    case 13428:
      v1132 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1133 = *((_QWORD *)v1132 + 5);
      v1134 = *((_QWORD *)a2 + 2);
      v1137 = *(unsigned __int8 *)(v1134 + 16);
      v1135 = v1134 + 16;
      v1136 = v1137;
      if (v1137 == 1)
      {
        v1138 = sub_1C4B12E5C(a1, v1135, *(_QWORD *)(a4 + 192), 0);
        v1132 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      }
      else if (v1136 == 2)
      {
        v1138 = *((unsigned int *)v1132 + 6);
      }
      else
      {
        v1168 = *((_QWORD *)v1132 + 3);
        if (*(_BYTE *)v1168 == 4)
          v1138 = *(_DWORD *)(*(_QWORD *)(v1168 + 24) + 16) | 0x2000u;
        else
          v1138 = 0;
      }
      v1313 = (unint64_t)(v1133 & 3) << 45;
      v1314 = (v1138 << 25) & 0x600000000;
      v1315 = ((_DWORD)v1138 << 24);
      v1316 = *v1132;
      if (v1316 == 1)
      {
        v1317 = sub_1C4B12E5C(a1, (uint64_t)v1132, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1316 == 2)
      {
        v1317 = *((_DWORD *)v1132 + 2);
      }
      else
      {
        v1318 = *((_QWORD *)v1132 + 1);
        if (*(_BYTE *)v1318 == 4)
          v1317 = *(_DWORD *)(*(_QWORD *)(v1318 + 24) + 16) | 0x2000;
        else
          v1317 = 0;
      }
      v378 = (unint64_t)v1317 << 8;
      v887 = v1313 | v1314 | v1315 | (v1317 << 9) & 0x60000;
LABEL_1239:
      v9 |= v887 | v378;
      return v9;
    case 13430:
      v1139 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v1140 = *v1139;
      if (v1140 == 1)
      {
        LOBYTE(v1141) = sub_1C4B12E5C(a1, (uint64_t)v1139, *(_QWORD *)(a4 + 192), 0);
      }
      else if (v1140 == 2)
      {
        v1141 = *((_DWORD *)v1139 + 2);
      }
      else
      {
        v1169 = *((_QWORD *)v1139 + 1);
        if (*(_BYTE *)v1169 == 4)
          v1141 = *(_DWORD *)(*(_QWORD *)(v1169 + 24) + 16) | 0x2000;
        else
          LOBYTE(v1141) = 0;
      }
      v639 = 2 * (v1141 & 1u);
      goto LABEL_1284;
    default:
      memset(v1384, 0, sizeof(v1384));
      LODWORD(v1376) = 0;
      v1380 = 0;
      v1381 = 0;
      v1375 = &unk_1E81A7208;
      v1383 = (llvm *)v1384;
      v1382 = 0;
      v1378 = 0;
      v1379 = 0;
      v1377 = 0;
      v1342 = llvm::raw_ostream::write((llvm::raw_ostream *)&v1375, "Not supported instr: ", 0x15uLL);
      llvm::MCInst::print(a2, v1342, 0);
      v1343 = v1383;
      if (*((char *)v1383 + 23) < 0)
        v1343 = *(llvm **)v1383;
      llvm::report_fatal_error(v1343, (const char *)1);
  }
}

__n128 sub_1C4B129EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  __n128 result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)v2 != 2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8500000000;
    v32 = v6;
    v7 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v8 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8100000002;
    v32 = v10;
    v11 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v12 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v13 = *(_OWORD *)v11;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
    *(_OWORD *)v12 = v13;
    ++*(_DWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8200000002;
    v32 = v14;
    v15 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v16 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v16 = v17;
    ++*(_DWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8300000003;
    v32 = v18;
    v19 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v20 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
    *(_OWORD *)v20 = v21;
    ++*(_DWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8400000004;
    v32 = v22;
    v23 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v24 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v25 = *(_OWORD *)v23;
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v24 = v25;
    ++*(_DWORD *)(a2 + 8);
    v26 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8600000005;
    v32 = v26;
    v27 = (__n128 *)sub_1C4926708(a2, (unint64_t)&v30, 1);
    v28 = (__n128 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8));
    result = *v27;
    v28[1].n128_u64[0] = v27[1].n128_u64[0];
    *v28 = result;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

__n128 sub_1C4B12C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  __n128 result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)v2 != 2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8B00000000;
    v32 = v6;
    v7 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v8 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8700000002;
    v32 = v10;
    v11 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v12 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v13 = *(_OWORD *)v11;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
    *(_OWORD *)v12 = v13;
    ++*(_DWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8800000002;
    v32 = v14;
    v15 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v16 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v16 = v17;
    ++*(_DWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8900000003;
    v32 = v18;
    v19 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v20 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
    *(_OWORD *)v20 = v21;
    ++*(_DWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8A00000004;
    v32 = v22;
    v23 = sub_1C4926708(a2, (unint64_t)&v30, 1);
    v24 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v25 = *(_OWORD *)v23;
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v24 = v25;
    ++*(_DWORD *)(a2 + 8);
    v26 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0x8C00000005;
    v32 = v26;
    v27 = (__n128 *)sub_1C4926708(a2, (unint64_t)&v30, 1);
    v28 = (__n128 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8));
    result = *v27;
    v28[1].n128_u64[0] = v27[1].n128_u64[0];
    *v28 = result;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_1C4B12E5C(uint64_t a1, uint64_t a2, __int16 a3, unsigned __int8 a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (*(_BYTE *)a2 == 1)
  {
    result = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 8));
    if (a3 < 0 && result <= 0x1FF)
      llvm::report_fatal_error((llvm *)"Temp register used when temp registers were disallowed!", (const char *)1);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
      v6 = v5 - 8;
    else
      v6 = 0;
    v7 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 16);
    if (((*(_DWORD *)(v6 + 24) == 4) & a4) != 0)
      v8 = 24576;
    else
      v8 = 0x2000;
    return v8 | v7;
  }
  return result;
}

uint64_t sub_1C4B12EDC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 1) < 2 && a1 == 40)
    return 42;
  else
    return 0;
}

uint64_t sub_1C4B12EF8()
{
  llvm::MCAsmInfoDarwin *v0;
  uint64_t result;

  v0 = (llvm::MCAsmInfoDarwin *)operator new();
  result = llvm::MCAsmInfoDarwin::MCAsmInfoDarwin(v0);
  *(_QWORD *)result = &unk_1E7FB4048;
  *(_QWORD *)(result + 48) = "//";
  *(_QWORD *)(result + 56) = 2;
  *(_BYTE *)(result + 408) = 1;
  *(_DWORD *)(result + 8) = 8;
  return result;
}

_QWORD *sub_1C4B12F54()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E7FB5628;
  result[1] = &unk_1C69032D4;
  result[4] = 0;
  result[5] = 0;
  result[2] = "10000";
  result[3] = 0;
  *((_DWORD *)result + 10) = 13480;
  return result;
}

double sub_1C4B12FA8()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_QWORD *)v0 = "P";
  *(_QWORD *)(v0 + 8) = 20571;
  *(_QWORD *)(v0 + 24) = &off_1E7FB4148;
  *(_QWORD *)(v0 + 48) = &unk_1C67A0440;
  *(_QWORD *)(v0 + 56) = &unk_1C67D0148;
  *(_QWORD *)(v0 + 64) = "VI85_VI86_VI87_VI88_VI89_VI90_VI91_VI92_VI93_VI94_VI95_VI96_VI97_VI98_VI99_VI100";
  *(_QWORD *)(v0 + 72) = "GPR32tup10";
  *(_QWORD *)(v0 + 40) = &unk_1C686D310;
  *(_QWORD *)(v0 + 32) = 0x601000000A7;
  *(_DWORD *)(v0 + 96) = 428;
  *(_QWORD *)(v0 + 80) = &unk_1C67D0C88;
  *(_QWORD *)(v0 + 88) = &unk_1C67D28C8;
  *(_QWORD *)(v0 + 104) = &unk_1C68DACA8;
  *(_QWORD *)(v0 + 144) = &unk_1C68D2C68;
  *(_QWORD *)(v0 + 152) = &unk_1C68D2C74;
  *(_QWORD *)(v0 + 128) = &unk_1C68D2C80;
  *(_QWORD *)(v0 + 136) = &unk_1C68D6C94;
  *(_QWORD *)&result = 0x80200000802;
  *(_OWORD *)(v0 + 112) = xmmword_1C642C7A0;
  return result;
}

_QWORD *sub_1C4B130AC(__int128 *a1, char *a2, size_t a3, const void *a4, size_t a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *result;

  if (a3)
    v8 = a2;
  else
    v8 = "g4";
  if (a3)
    v9 = a3;
  else
    v9 = 2;
  v10 = operator new();
  result = (_QWORD *)llvm::MCSubtargetInfo::MCSubtargetInfo(v10, a1, v8, v9, v8, v9, a4, a5, (uint64_t)&off_1E80535A8, 35, (uint64_t)&off_1E8053EF8, 11, (uint64_t)&unk_1C6910574, (uint64_t)&unk_1C69105CC, (uint64_t)&unk_1C69105E4, 0, 0, 0);
  *result = &off_1E8054CB8;
  return result;
}

uint64_t sub_1C4B13188(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, char a6)
{
  return llvm::createMachOStreamer(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t sub_1C4B13190(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 - 1) < 2 && a2 == 40)
    return 42;
  else
    return 0;
}

void llvm::TargetSubtargetInfo::~TargetSubtargetInfo(void **this)
{
  *this = &off_1E8183140;
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4B13220()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4B13234@<X0>(_QWORD *a1@<X8>)
{
  return sub_1C615B204(1, 16777235, 2, a1);
}

uint64_t sub_1C4B13248()
{
  return 9;
}

char **sub_1C4B13250(uint64_t a1, int a2)
{
  if (a2 >= 128)
    return &(&off_1E8054E10)[3 * (a2 - 128)];
  else
    return &(&off_1E817F4F8)[3 * a2];
}

_DWORD *sub_1C4B13278(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v7 = a7;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = 1;
  switch(v10)
  {
    case 1:
    case 6:
    case 10:
    case 18:
      goto LABEL_8;
    case 2:
    case 7:
    case 11:
    case 19:
LABEL_5:
      v11 = 2;
      if (!a7)
        return result;
      goto LABEL_9;
    case 3:
    case 8:
    case 12:
    case 20:
LABEL_7:
      v11 = 4;
LABEL_8:
      if (a7)
        goto LABEL_9;
      return result;
    case 4:
    case 9:
    case 13:
    case 21:
LABEL_2:
      v11 = 8;
      if (!a7)
        return result;
LABEL_9:
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 80))(result);
      v12 = result[2];
      switch(*(_DWORD *)(a3 + 12))
      {
        case 0x81:
          v7 = v7 >> 1;
          break;
        case 0x82:
          v7 = (unsigned __int16)v7 >> 1;
          break;
        case 0x83:
          v7 = (v7 >> 1) & 0x7FFFFF;
          break;
        case 0x84:
          v7 >>= 1;
          break;
        case 0x85:
          v7 = (v7 + 2) >> 1;
          break;
        case 0x86:
          v7 = (unsigned __int16)(v7 + 2) >> 1;
          break;
        case 0x87:
          v7 = ((v7 + 2) >> 1) & 0x7FFFFF;
          break;
        case 0x88:
          v7 = (v7 + 2) >> 1;
          break;
        default:
          break;
      }
      v13 = *(_DWORD *)(a3 + 8);
      v14 = -v12;
      do
      {
        v15 = (unint64_t)v7 >> v14;
        if (v12 >= 0)
          LOBYTE(v15) = (unint64_t)v7 << v12;
        *(_BYTE *)(a5 + v13++) |= v15;
        v12 -= 8;
        LOBYTE(v14) = v14 + 8;
        --v11;
      }
      while (v11);
      return result;
    case 5:
    case 14:
    case 15:
    case 16:
    case 17:
LABEL_25:
      llvm::report_fatal_error((llvm *)"Unknown relocation!", (const char *)1);
    default:
      switch(v10)
      {
        case 128:
          goto LABEL_2;
        case 129:
        case 133:
          goto LABEL_8;
        case 130:
        case 134:
          goto LABEL_5;
        case 131:
        case 135:
          v11 = 3;
          if (!a7)
            return result;
          goto LABEL_9;
        case 132:
        case 136:
          goto LABEL_7;
        default:
          goto LABEL_25;
      }
  }
}

BOOL sub_1C4B133F0(uint64_t a1, unsigned int *a2)
{
  int v2;

  v2 = *a2;
  return sub_1C4B135F0(*a2) != v2;
}

uint64_t sub_1C4B1341C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1C4B13440 + 4 * byte_1C6913ACB[*(_DWORD *)(a2 + 12) - 129]))(0);
}

BOOL sub_1C4B13440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 != (char)a3;
}

uint64_t sub_1C4B13468(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;
  _BYTE v9[64];
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  result = sub_1C4B135F0(*a2);
  if ((_DWORD)result == v3)
  {
    v11 = v13;
    v12 = xmmword_1C64638F0;
    sub_1C4B07764((uint64_t)v9, (uint64_t)&v11);
    llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v9, 0, " ", 1uLL, 0);
    sub_1C4816AD8((llvm::raw_ostream *)v9, "\n");
    v6 = *v10;
    v5 = v10[1];
    v8 = 1283;
    v7[0] = "unexpected instruction to relax: ";
    v7[2] = v6;
    v7[3] = v5;
    llvm::report_fatal_error((uint64_t)v7, 1);
  }
  *a2 = result;
  return result;
}

uint64_t sub_1C4B13558()
{
  return 2;
}

BOOL sub_1C4B13560(int a1, llvm::raw_ostream *this, uint64_t a3)
{
  char v3;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = a3;
  if (a3 && (a3 & 1) == 0)
  {
    v5 = a3;
    do
    {
      v6 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v6 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((_QWORD *)this + 4) = v6 + 1;
        *v6 = 8;
      }
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 0);
      }
      else
      {
        *((_QWORD *)this + 4) = v7 + 1;
        *v7 = 0;
      }
      v5 -= 2;
    }
    while (v5);
  }
  return (v3 & 1) == 0;
}

uint64_t sub_1C4B135F0(uint64_t result)
{
  switch((int)result)
  {
    case 527:
      result = 529;
      break;
    case 528:
      result = 530;
      break;
    case 529:
      result = 531;
      break;
    case 530:
      result = 532;
      break;
    case 533:
      result = 527;
      break;
    case 534:
      result = 528;
      break;
    case 535:
      result = 537;
      break;
    case 536:
      result = 538;
      break;
    case 537:
      result = 539;
      break;
    case 538:
      result = 540;
      break;
    case 541:
      result = 535;
      break;
    case 542:
      result = 536;
      break;
    case 543:
      result = 545;
      break;
    case 544:
      result = 546;
      break;
    case 545:
      result = 547;
      break;
    case 546:
      result = 548;
      break;
    case 549:
      result = 543;
      break;
    case 550:
      result = 544;
      break;
    case 551:
      result = 553;
      break;
    case 552:
      result = 554;
      break;
    case 553:
      result = 555;
      break;
    case 554:
      result = 556;
      break;
    case 557:
      result = 551;
      break;
    case 558:
      result = 552;
      break;
    case 559:
      result = 561;
      break;
    case 560:
      result = 562;
      break;
    case 561:
      result = 563;
      break;
    case 562:
      result = 564;
      break;
    case 565:
      result = 559;
      break;
    case 566:
      result = 560;
      break;
    case 567:
      result = 569;
      break;
    case 568:
      result = 570;
      break;
    case 569:
      result = 571;
      break;
    case 570:
      result = 572;
      break;
    case 573:
      result = 567;
      break;
    case 574:
      result = 568;
      break;
    case 609:
      result = 611;
      break;
    case 610:
      result = 612;
      break;
    case 611:
      result = 613;
      break;
    case 612:
      result = 614;
      break;
    case 615:
      result = 609;
      break;
    case 616:
      result = 610;
      break;
    case 617:
      result = 619;
      break;
    case 618:
      result = 620;
      break;
    case 619:
      result = 621;
      break;
    case 620:
      result = 622;
      break;
    case 623:
      result = 617;
      break;
    case 624:
      result = 618;
      break;
    case 625:
      result = 627;
      break;
    case 626:
      result = 628;
      break;
    case 627:
      result = 629;
      break;
    case 628:
      result = 630;
      break;
    case 631:
      result = 625;
      break;
    case 632:
      result = 626;
      break;
    case 633:
      result = 635;
      break;
    case 634:
      result = 636;
      break;
    case 635:
      result = 637;
      break;
    case 636:
      result = 638;
      break;
    case 639:
      result = 633;
      break;
    case 640:
      result = 634;
      break;
    case 641:
      result = 643;
      break;
    case 642:
      result = 644;
      break;
    case 643:
      result = 645;
      break;
    case 644:
      result = 646;
      break;
    case 647:
      result = 641;
      break;
    case 648:
      result = 642;
      break;
    case 649:
      result = 651;
      break;
    case 650:
      result = 652;
      break;
    case 651:
      result = 653;
      break;
    case 652:
      result = 654;
      break;
    case 655:
      result = 649;
      break;
    case 656:
      result = 650;
      break;
    case 657:
      result = 659;
      break;
    case 658:
      result = 660;
      break;
    case 659:
      result = 661;
      break;
    case 660:
      result = 662;
      break;
    case 663:
      result = 657;
      break;
    case 664:
      result = 658;
      break;
    case 665:
      result = 667;
      break;
    case 666:
      result = 668;
      break;
    case 667:
      result = 669;
      break;
    case 668:
      result = 670;
      break;
    case 671:
      result = 665;
      break;
    case 672:
      result = 666;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C4B138B4(int a1)
{
  uint64_t v1;

  v1 = (a1 - 256);
  if (v1 >> 1 > 0xFCE)
    return 0xFFFFFFFFLL;
  else
    return ((uint64_t (*)(void))((char *)&loc_1C4B138DC + 4 * word_1C6913B68[v1]))();
}

void sub_1C4B13E18()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E2C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E40()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E54()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E68()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E7C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13E90()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13EA4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13EB8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13ECC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13EE0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13EF4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F08()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F1C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F30()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F44()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B13F58()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F6C()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B13F7C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13F90()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13FA4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13FB8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13FCC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13FE0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B13FF4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14008()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1401C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14030()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14044()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14058()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1406C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14080()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14094()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B140A8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B140BC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B140D0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B140E4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B140F8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1410C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14120()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14134()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14148()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1415C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14170()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14184()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14198()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B141AC()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B141C0()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B141D4()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B141E8()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B141FC()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14210()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14224()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14238()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B1424C()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14260()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14274()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14288()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B1429C()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B142B0()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B142C4()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B142D8()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B142EC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14300()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14314()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14328()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1433C()
{
  JUMPOUT(0x1C4B138F0);
}

void sub_1C4B14350()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14364()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14378()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1438C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B143A0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B143B4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B143C8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B143DC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B143F0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14404()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14418()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1442C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14440()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14454()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14468()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1447C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14490()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B144A4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B144B8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B144CC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B144E0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B144F4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14508()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1451C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14530()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14544()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14558()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1456C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14580()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14594()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B145A8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B145BC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B145D0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B145E4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B145F8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1460C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14620()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14634()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14648()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1465C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14670()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14684()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14698()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B146AC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B146C0()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B146D4()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B146E8()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B146FC()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14710()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14724()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14738()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B1474C()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14760()
{
  JUMPOUT(0x1C4B138ECLL);
}

void sub_1C4B14774()
{
  JUMPOUT(0x1C4B138ECLL);
}

_QWORD *sub_1C4B14788(_QWORD *result, uint64_t a2, unsigned int a3)
{
  int v3;

  if (((_DWORD)result - 2286) >= 2)
    return ((_QWORD *(*)(_QWORD *__return_ptr))((char *)&loc_1C4B147B0
                                                         + 4 * word_1C6917AA4[(_DWORD)result - 2177]))(qword_1C6609000);
  v3 = *(unsigned __int8 *)(a2 + 52);
  *(_DWORD *)(a2 + 48) = 8;
  if (!v3)
    *(_BYTE *)(a2 + 52) = 1;
  *(_OWORD *)a2 = xmmword_1C66090F0;
  if (!*(_BYTE *)(a2 + 20))
    *(_BYTE *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 16) = 6;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (!*(_BYTE *)(a2 + 44))
    *(_BYTE *)(a2 + 44) = 1;
  *(_DWORD *)(a2 + 40) = 7;
  *(_QWORD *)(a2 + 56) = 0x500000003;
  *(_WORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 66) = (result & 0xFFFFFFBF) == 2223;
  *(int32x4_t *)a2 = vaddq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_1C66090F0);
  *(_DWORD *)(a2 + 16) = a3 + 6;
  *(_DWORD *)(a2 + 40) = a3 + 7;
  if (*(_BYTE *)(a2 + 52))
    *(_DWORD *)(a2 + 48) += a3;
  return result;
}

void sub_1C4B14A10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0x400000002;
  *(_WORD *)(a1 + 64) = 0;
  JUMPOUT(0x1C4B1481CLL);
}

void sub_1C4B14B7C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a1 + 28))
    *(_BYTE *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 24) = 7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x600000002;
  *(_WORD *)(a1 + 64) = 0;
  JUMPOUT(0x1C4B14824);
}

void sub_1C4B14E18(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 16) = 0;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x600000002;
  *(_WORD *)(a1 + 64) = 1;
  JUMPOUT(0x1C4B148CCLL);
}

void sub_1C4B154C8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 7;
  *(_QWORD *)(a1 + 56) = 0x500000003;
  *(_WORD *)(a1 + 64) = 1;
  JUMPOUT(0x1C4B14820);
}

void sub_1C4B15554(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1C4B14B64);
}

void sub_1C4B155B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  JUMPOUT(0x1C4B14AECLL);
}

void sub_1C4B15630(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 9;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 8;
  *(_QWORD *)(a1 + 56) = 0x100000001;
  JUMPOUT(0x1C4B149ECLL);
}

void sub_1C4B156C0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 7;
  *(_QWORD *)(a1 + 56) = 1;
  JUMPOUT(0x1C4B14810);
}

void sub_1C4B1573C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1C4B14B64);
}

void sub_1C4B1579C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  JUMPOUT(0x1C4B14AECLL);
}

void sub_1C4B15818(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int doesSymbolRequireExternRelocation;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char *v46;
  _QWORD *v47;
  int v48;
  std::string v49;
  std::string v50;
  void *__p[2];
  std::string::size_type v52;
  uint64_t v53[4];
  __int16 v54;

  v15 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 80))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  v16 = *(_DWORD *)(a6 + 12);
  v17 = 0;
  v18 = 0;
  switch(v16)
  {
    case 1:
      goto LABEL_21;
    case 2:
      v18 = 0;
      v17 = 1;
      goto LABEL_21;
    case 3:
      if (!*a7)
        goto LABEL_19;
      v25 = *(unsigned __int16 *)(*a7 + 1) - 151;
      if (v25 >= 7)
        goto LABEL_19;
      v18 = dword_1C693F61C[(__int16)v25];
      goto LABEL_20;
    case 4:
      goto LABEL_11;
    default:
      if (v16 == 128)
      {
LABEL_11:
        if (*a7)
        {
          if ((unsigned __int16)*(_DWORD *)(*a7 + 1) == 153)
            v18 = 5;
          else
            v18 = 0;
        }
        else
        {
          v18 = 0;
        }
        v17 = 3;
      }
      else
      {
        if (v16 != 136)
        {
          v19 = *(_QWORD *)a3;
          v20 = *(_QWORD *)(a6 + 16);
          v48 = *(_DWORD *)(a6 + 12);
          sub_1C4B15C90(&v48, (uint64_t)&v49);
          v21 = std::string::insert(&v49, 0, "unsupported relocation on symbol (");
          v22 = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v50.__r_.__value_.__r.__words[2] = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = std::string::append(&v50, ")");
          v24 = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v52 = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          v54 = 260;
          v53[0] = (uint64_t)__p;
          llvm::MCContext::reportError(v19, v20, (uint64_t)v53);
          if (SHIBYTE(v52) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          return;
        }
LABEL_19:
        v18 = 0;
LABEL_20:
        v17 = 2;
      }
LABEL_21:
      if (a7[1])
        goto LABEL_62;
      if (v18 == 10 || v18 == 5)
        *a8 = a7[2];
      v26 = *a7 ? *(_QWORD *)(*a7 + 16) : 0;
      v47 = a8;
      v27 = (v15 & (v18 == 0)) != 0 ? 1 << v17 : 0;
      if (v26
        && v27 != -*((_DWORD *)a7 + 4)
        && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v26) & 1) == 0)
      {
LABEL_62:
        v46 = "Relocation with symbol difference is not supported.";
        goto LABEL_63;
      }
      llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
      v28 = *(_DWORD *)(a5 + 32);
      v29 = *(_DWORD *)(a6 + 8);
      if (!*a7 && !a7[1])
      {
        v46 = "FIXME: relocations to absolute targets not yet implemented";
LABEL_63:
        llvm::report_fatal_error((llvm *)v46, (const char *)1);
      }
      v30 = *(_DWORD *)(v26 + 8);
      if ((v30 & 0x1C00) == 0x800
        && (v53[0] = 0,
            *(_DWORD *)(v26 + 8) = v30 | 4,
            llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v26 + 24), v53),
            v31))
      {
        *v47 = v53[0];
      }
      else
      {
        doesSymbolRequireExternRelocation = llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v26);
        v33 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
        if (doesSymbolRequireExternRelocation)
        {
          if (!v33 && (*(_DWORD *)(v26 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v26 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v26 + 24));
            *(_QWORD *)v26 = *(_QWORD *)v26 & 7 | v33;
          }
          if (v33)
          {
            v53[0] = 0;
            sub_1C59415F0(a4, (uint64_t *)v26, 1, v53);
            v34 = 0;
            *v47 -= v53[0];
          }
          else
          {
            v34 = 0;
          }
        }
        else
        {
          if (!v33 && (*(_DWORD *)(v26 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v26 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v26 + 24));
            *(_QWORD *)v26 = *(_QWORD *)v26 & 7 | v33;
          }
          v26 = 0;
          v34 = *(_DWORD *)(*(_QWORD *)(v33 + 16) + 28) + 1;
        }
        v35 = *(_QWORD *)(a5 + 16);
        if ((v15 & 1) != 0)
        {
          v36 = *(_DWORD *)(a2 + 80);
          if (v36)
          {
            v37 = *(_QWORD *)(a2 + 64);
            v38 = v36 - 1;
            v39 = (v36 - 1) & ((v35 >> 4) ^ (v35 >> 9));
            v40 = *(_QWORD *)(v37 + 16 * v39);
            v41 = v47;
            if (v35 == v40)
            {
LABEL_52:
              v44 = *(_QWORD *)(v37 + 16 * v39 + 8);
            }
            else
            {
              v42 = 1;
              while (v40 != -4096)
              {
                v43 = v39 + v42++;
                v39 = v43 & v38;
                v40 = *(_QWORD *)(v37 + 16 * v39);
                if (v35 == v40)
                  goto LABEL_52;
              }
              v44 = 0;
            }
          }
          else
          {
            v44 = 0;
            v41 = v47;
          }
          *v41 -= v44;
          v45 = 0x1000000;
        }
        else
        {
          v45 = 0;
        }
        LODWORD(v53[0]) = v29 + v28;
        HIDWORD(v53[0]) = v34 | v45 | (v17 << 25) | (v18 << 28);
        sub_1C4B07F2C(a2, v26, v35, v53);
      }
      return;
  }
}

void sub_1C4B15C90(int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  __int128 v5;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v14 = v15;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v3 = *a1;
  if ((v3 & 0x80000000) != 0)
  {
    v3 = -(uint64_t)v3;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_1C5E21910((llvm::raw_ostream *)&v6, v3, 0, 0, v4);
  if (*((char *)v14 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v14, (unint64_t)v14[1]);
  }
  else
  {
    v5 = *(_OWORD *)v14;
    *(_QWORD *)(a2 + 16) = v14[2];
    *(_OWORD *)a2 = v5;
  }
  v6 = off_1E81A6E70;
  if (v13 == 1 && v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1C4B15D9C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4B15DB0(uint64_t a1, llvm::MCInst *a2, llvm::raw_ostream *a3, int a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  unsigned int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char *v33;
  uint64_t *v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__dst;
  __int128 v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)a2;
  v9 = **(_QWORD **)(a1 + 8);
  v39 = 0;
  __dst = v42;
  v41 = xmmword_1C6464ED0;
  v10 = *(_QWORD *)(a5 + 192);
  v37 = 0;
  v38 = 0;
  v11 = v9 + 48 * v8;
  v14 = *(_QWORD *)(v11 + 16);
  v13 = (_QWORD *)(v11 + 16);
  v12 = v14;
  if ((v10 & 0x80000000000) != 0)
  {
    if ((v12 & 0x3C0000000) != 0)
      goto LABEL_15;
    v15 = "Emitted non-G14 instruction for G14";
    goto LABEL_55;
  }
  if ((v10 & 0x20000000000) != 0)
  {
    if ((v12 & 0x1E0000000) != 0)
      goto LABEL_15;
    v15 = "Emitted non-G13 instruction for G13";
    goto LABEL_55;
  }
  if ((v10 & 0x2000000000) != 0)
  {
    if ((v12 & 0xC0000000) != 0)
      goto LABEL_15;
    v15 = "Emitted non-G12 instruction for G12";
    goto LABEL_55;
  }
  if ((v10 & 0x800000000) != 0)
  {
    if ((v12 & 0x40000000) != 0)
      goto LABEL_15;
    v15 = "Emitted non-G11 instruction for G11";
LABEL_55:
    MEMORY[0x1CAA32ABC](&v37, v15);
    v36 = 260;
    v34 = &v37;
    llvm::report_fatal_error((uint64_t)&v34, 1);
  }
  if ((v10 & 0x200000000) == 0)
  {
    v15 = "Instruction not annotated as valid for any ISA";
    goto LABEL_55;
  }
  if ((v12 & 0x20000000) == 0)
  {
    v15 = "Emitted non-G10 instruction for G10";
    goto LABEL_55;
  }
LABEL_15:
  v16 = *(unsigned __int8 *)(v9 + 48 * v8 + 5);
  v35 = 1;
  v34 = 0;
  LODWORD(v38) = 1;
  v37 = 0;
  sub_1C4B16108(a1, a2, a4, (llvm::APInt *)&v34, (llvm::APInt *)&v37);
  v17 = v41;
  if ((_QWORD)v41 != v16)
  {
    if ((unint64_t)v41 <= v16)
    {
      if (*((_QWORD *)&v41 + 1) < v16)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v42, v16, 1);
        v17 = v41;
      }
      if (v16 != v17)
        bzero((char *)__dst + v17, v16 - v17);
    }
    *(_QWORD *)&v41 = v16;
  }
  if (v35 >= 0x41)
    v18 = (uint64_t **)v34;
  else
    v18 = &v34;
  memcpy(__dst, v18, v16);
  v19 = (*v13 >> 18) & 0xF;
  if ((*(_BYTE *)(a5 + 196) & 0x80) != 0 && (*v13 & 0x800000) != 0)
    v19 = 8;
  if (v19)
  {
    v21 = 0;
    v22 = 4 * v19 - 4;
    v23 = *(unsigned int *)((char *)&unk_1C6960040 + v22);
    v24 = *(_DWORD *)((char *)&unk_1C6960068 + v22);
    v25 = v41 - 1;
    v26 = *(_DWORD *)((char *)&unk_1C6960090 + v22);
LABEL_32:
    v27 = v23;
    v28 = v25;
    while (!*((_BYTE *)__dst + v28))
    {
      --v28;
      if (!--v27)
      {
        v25 -= v23;
        *(_QWORD *)&v41 = v41 - (v23 - 2) - 2;
        *((_BYTE *)__dst + v25 + v26) &= ~0x80u;
        if (++v21 != v24)
          goto LABEL_32;
        break;
      }
    }
  }
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v41;
  if (!*(_BYTE *)(v29 + 148))
    *(_DWORD *)(v29 + 144) += v41;
  if (v30)
  {
    v31 = (char *)__dst;
    do
    {
      v32 = *v31;
      v33 = (char *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, v32);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v33 + 1;
        *v33 = v32;
      }
      ++v31;
      --v30;
    }
    while (v30);
  }
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  if (__dst != v42)
    free(__dst);
}

void sub_1C4B16108(int a1, llvm::MCInst *a2, int a3, llvm::APInt *this, llvm::APInt *a5)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  char *v11;
  llvm::APInt *v12;
  uint64_t v13;
  llvm *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  llvm *v23;
  _QWORD v24[3];

  v8 = *(_DWORD *)a2;
  v10 = (unsigned int *)((char *)this + 8);
  v9 = *((_DWORD *)this + 2);
  if (v9 != 96)
  {
    llvm::APInt::zext(this, 0x60u, (uint64_t)&v15);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v15;
    v9 = v16;
    *((_DWORD *)this + 2) = v16;
  }
  if (*((_DWORD *)a5 + 2) != 96)
  {
    llvm::APInt::zext(a5, 0x60u, (uint64_t)&v15);
    if (*((_DWORD *)a5 + 2) >= 0x41u && *(_QWORD *)a5)
      MEMORY[0x1CAA32F9C](*(_QWORD *)a5, 0x1000C8000313F17);
    *(_QWORD *)a5 = v15;
    *((_DWORD *)a5 + 2) = v16;
    v9 = *v10;
  }
  v11 = (char *)&unk_1C693F658 + 8 * (2 * v8);
  if (v9 >= 0x41)
    v12 = *(llvm::APInt **)this;
  else
    v12 = this;
  *(_QWORD *)v12 = *(_QWORD *)v11;
  *((_DWORD *)v12 + 2) = *((_DWORD *)v11 + 2);
  v13 = (v8 - 358);
  if (v13 >> 3 <= 0x3E6)
    __asm { BR              X10 }
  memset(v24, 0, sizeof(v24));
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v15 = &unk_1E81A7208;
  v23 = (llvm *)v24;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v15, "Not supported instr: ", 0x15uLL);
  llvm::MCInst::print(a2, (llvm::raw_ostream *)&v15, 0);
  v14 = v23;
  if (*((char *)v23 + 23) < 0)
    v14 = *(llvm **)v23;
  llvm::report_fatal_error(v14, (const char *)1);
}

void sub_1C4C05364(uint64_t a1, unsigned __int8 *a2, unsigned int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *a2;
  if (v3 == 1)
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *((unsigned int *)a2 + 2));
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *((_QWORD *)a2 + 1);
      v5 = a3[2];
      if (v5 <= 0x40)
      {
        if ((_DWORD)v5)
          v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
        else
          v6 = 0;
        v7 = v6 & v4;
LABEL_18:
        *(_QWORD *)a3 = v7;
        return;
      }
      **(_QWORD **)a3 = v4;
      v10 = (void *)(*(_QWORD *)a3 + 8);
      v11 = v5 + 63;
      goto LABEL_20;
    }
    v9 = *((_QWORD *)a2 + 1);
    if (*(_BYTE *)v9 == 4)
      v8 = *(unsigned int *)(*(_QWORD *)(v9 + 24) + 16);
    else
      v8 = 0;
  }
  v12 = a3[2];
  if (v12 <= 0x40)
  {
    if ((_DWORD)v12)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    else
      v13 = 0;
    v7 = v13 & v8;
    goto LABEL_18;
  }
  **(_QWORD **)a3 = v8;
  v10 = (void *)(*(_QWORD *)a3 + 8);
  v11 = v12 + 63;
LABEL_20:
  bzero(v10, ((v11 >> 3) - 8) & 0xFFFFFFF8);
}

void sub_1C4C05440(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (*(_BYTE *)(a2 + 16 * a3) == 1)
  {
    LOWORD(v4) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16 * a3 + 8);
    if (*(_BYTE *)v4 == 4)
      LOBYTE(v4) = *(_BYTE *)(*(_QWORD *)(v4 + 24) + 16);
    else
      LOBYTE(v4) = 0;
  }
  v5 = v4 | ((((unint64_t)*(unsigned int *)(a2 + 16 * (a3 + 1) + 8) >> 4) & 1) << 8);
  v6 = a4[2];
  if (v6 > 0x40)
  {
    **(_QWORD **)a4 = v5;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v6 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v6)
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    else
      v7 = 0;
    *(_QWORD *)a4 = v7 & v5;
  }
}

void sub_1C4C054F8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v5 = *(_QWORD *)(a2 + 16 * a3 + 8);
    v6 = v5 - 8;
    if (!v5)
      v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
    v8 = *(_DWORD *)(v6 + 24) == 4;
    v9 = 10240;
    if (v8)
      v9 = 14336;
    v10 = 0x2000;
    if (v8)
      v10 = 12288;
    if ((v7 & 0x100) == 0)
      v9 = v10;
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    v9 = 4096;
    if ((v4 & 0x20) == 0)
      v9 = 2048;
    if ((v4 & 0x10) != 0)
      v9 = 6144;
  }
  v11 = v9 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  v12 = a4[2];
  if (v12 > 0x40)
  {
    **(_QWORD **)a4 = v11;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v12)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    else
      v13 = 0;
    *(_QWORD *)a4 = v13 & v11;
  }
}

void sub_1C4C055F4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v5 = *(_QWORD *)(a2 + 16 * a3 + 8);
    if (v5)
      v6 = v5 - 8;
    else
      v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
    v8 = 14336;
    if ((v7 & 0x100) == 0)
      v8 = 12288;
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    v8 = 20480;
    if ((v4 & 0x20) == 0)
      v8 = 18432;
    if ((v4 & 0x10) != 0)
      v8 = 22528;
  }
  v9 = v8 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  v10 = a4[2];
  if (v10 > 0x40)
  {
    **(_QWORD **)a4 = v9;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v10 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v10)
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    else
      v11 = 0;
    *(_QWORD *)a4 = v11 & v9;
  }
}

void sub_1C4C056D8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v5 = *(_QWORD *)(a2 + 16 * a3 + 8);
    v6 = v5 - 8;
    if (!v5)
      v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
    v8 = *(_DWORD *)(v6 + 24) == 4;
    v9 = 10240;
    if (v8)
      v9 = 14336;
    v10 = 0x2000;
    if (v8)
      v10 = 12288;
    if ((v7 & 0x100) == 0)
      v9 = v10;
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    v9 = 4096;
    if ((v4 & 0x20) == 0)
      v9 = 2048;
    if ((v4 & 0x10) != 0)
      v9 = 6144;
  }
  v11 = v9 | ((unint64_t)(__rbit32(v4) >> 29) << 8) | v7;
  v12 = a4[2];
  if (v12 > 0x40)
  {
    **(_QWORD **)a4 = v11;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v12)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    else
      v13 = 0;
    *(_QWORD *)a4 = v13 & v11;
  }
}

void sub_1C4C057D4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v6 = *(unsigned __int8 *)(a3 + 32);
  if (v6 == 1)
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a3 + 40));
  }
  else
  {
    if (v6 != 2)
    {
      v15[0] = *(_QWORD *)(a3 + 40);
      v15[1] = 0x300000002;
      v15[2] = a2;
      v11 = sub_1C4926708(a5, (unint64_t)v15, 1);
      v12 = *(_QWORD *)a5 + 24 * *(unsigned int *)(a5 + 8);
      v13 = *(_OWORD *)v11;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v12 = v13;
      ++*(_DWORD *)(a5 + 8);
      v14 = a4[2];
      if (v14 > 0x40)
      {
        **(_QWORD **)a4 = 0;
        bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v14 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)a4 = 0;
      }
      return;
    }
    v7 = *(unsigned int *)(a3 + 40);
  }
  v8 = a4[2];
  if (v8 > 0x40)
  {
    **(_QWORD **)a4 = v7;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v8 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v8)
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    else
      v9 = 0;
    *(_QWORD *)a4 = v9 & v7;
  }
}

void sub_1C4C05910(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_DWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v5 = *(_QWORD *)(a2 + 16 * a3 + 8);
    v6 = v5 - 8;
    if (!v5)
      v6 = 0;
    v7 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 16);
    v8 = *(_DWORD *)(v6 + 24) == 2;
    if (*(_DWORD *)(v6 + 24) == 2)
      v9 = 14336;
    else
      v9 = 10240;
    if (v8)
      v10 = 12288;
    else
      v10 = 0x2000;
    if ((v7 & 0x100) == 0)
      v9 = v10;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(unsigned int *)(a2 + 16 * a3 + 8);
    LOWORD(v7) = *(_WORD *)(*(_QWORD *)(v11 + 104) + 2 * v12);
    v13 = *(_QWORD *)(v11 + 24);
    if (*(_DWORD *)(a2 + 16 * a3 + 8) >> 3 < *(unsigned __int16 *)(v13 + 566)
      && ((*(unsigned __int8 *)(*(_QWORD *)(v13 + 552) + (v12 >> 3)) >> (v12 & 7)) & 1) != 0)
    {
      if ((v4 & 0x20) != 0)
        v9 = 20480;
      else
        v9 = 18432;
      v14 = (*(_DWORD *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0;
      v15 = 22528;
    }
    else
    {
      if ((v4 & 0x20) != 0)
        v9 = 4096;
      else
        v9 = 2048;
      v14 = (*(_DWORD *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0;
      v15 = 6144;
    }
    if (!v14)
      v9 = v15;
  }
  v16 = v9 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  v17 = a4[2];
  if (v17 > 0x40)
  {
    **(_QWORD **)a4 = v16;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v17 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v17)
      v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    else
      v18 = 0;
    *(_QWORD *)a4 = v18 & v16;
  }
}

void sub_1C4C05A50(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;

  sub_1C4C056D8(a1, a2, a3, a4);
  v5 = a4[2];
  if (v5 >= 0x41)
    v6 = *(unsigned int **)a4;
  else
    v6 = a4;
  v7 = qword_1C69600B8[((*(_QWORD *)v6 >> 11) & 7) - 1] | *(_QWORD *)v6 & 0x7FFLL;
  if (v5 > 0x40)
  {
    **(_QWORD **)a4 = v7;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v5 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v5)
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    else
      v8 = 0;
    *(_QWORD *)a4 = v8 & v7;
  }
}

void sub_1C4C05AEC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;

  sub_1C4C055F4(a1, a2, a3, a4);
  v5 = a4[2];
  if (v5 >= 0x41)
    v6 = *(unsigned int **)a4;
  else
    v6 = a4;
  v7 = qword_1C69600B8[((*(_QWORD *)v6 >> 11) & 7) - 1] | *(_QWORD *)v6 & 0x7FFLL;
  if (v5 > 0x40)
  {
    **(_QWORD **)a4 = v7;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v5 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v5)
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    else
      v8 = 0;
    *(_QWORD *)a4 = v8 & v7;
  }
}

void sub_1C4C05B88(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v4 = *(_QWORD *)(a2 + 16 * a3 + 8);
    if (v4)
      v5 = v4 - 8;
    else
      v5 = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 16);
    v7 = (v6 >> 8) & 1;
    v8 = 0x10000;
  }
  else
  {
    v8 = 0;
    LOWORD(v6) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    v7 = 3;
    if ((*(_QWORD *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0)
      v7 = (*(_QWORD *)(a2 + 16 * (a3 + 1) + 8) >> 4) & 2;
  }
  v9 = v6 | (unint64_t)v8 | (v7 << 17);
  v10 = a4[2];
  if (v10 > 0x40)
  {
    **(_QWORD **)a4 = v9;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v10 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v10)
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    else
      v11 = 0;
    *(_QWORD *)a4 = v11 & v9;
  }
}

void sub_1C4C05C58(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5, int a6, int a7, int a8, int a9)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v9 = *(_DWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(_BYTE *)(a2 + 16 * a3) == 5)
  {
    v10 = a9;
    v11 = *(_QWORD *)(a2 + 16 * a3 + 8);
    v12 = v11 - 8;
    if (!v11)
      v12 = 0;
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 16);
    v14 = *(_DWORD *)(v12 + 24) == 4;
    if (*(_DWORD *)(v12 + 24) == 4)
      v15 = 7;
    else
      v15 = 5;
    if (v14)
      v16 = 6;
    else
      v16 = 4;
    if (a9 == -1)
      v10 = v15;
    if (a8 == -1)
      v17 = v16;
    else
      v17 = a8;
    if ((v13 & 0x100) == 0)
      v10 = v17;
  }
  else
  {
    LOWORD(v13) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    if ((v9 & 0x20) != 0)
      v10 = a6;
    else
      v10 = a5;
    if ((v9 & 0x10) != 0)
      v10 = a7;
  }
  v18 = (v9 << 9) & 0x38000 | (((v9 >> 3) & 1) << 10) | v13 | (v10 << 11);
  v19 = a4[2];
  if (v19 > 0x40)
  {
    **(_QWORD **)a4 = v18;
    bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v19 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if ((_DWORD)v19)
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    else
      v20 = 0;
    *(_QWORD *)a4 = v20 & v18;
  }
}

llvm::MCStreamer *sub_1C4C05D60(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

uint64_t sub_1C4C05D70(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 1) < 6 && a1 == 104)
    return 107;
  else
    return 0;
}

uint64_t sub_1C4C05D8C(uint64_t a1, int a2)
{
  return sub_1C4C05D94(a2);
}

uint64_t sub_1C4C05D94(int a1)
{
  if ((a1 - 360) >> 2 > 0x7C8)
    return 1;
  else
    return dword_1C69A66A0[a1 - 360];
}

uint64_t sub_1C4C05DBC(uint64_t a1, int a2)
{
  return byte_1C69A4600[a2] & 1;
}

uint64_t sub_1C4C05DD0(uint64_t a1, int a2)
{
  return (byte_1C69A4600[a2] >> 1) & 1;
}

uint64_t sub_1C4C05DE4(uint64_t a1, int a2)
{
  return (byte_1C69A4600[a2] >> 2) & 1;
}

void LLVMInitializeAGX2AsmParser_0()
{
  qword_1ED82C550 = (uint64_t)sub_1C4C05E1C;
  byte_1ED7EEBB8 = 1;
}

void sub_1C4C05E1C()
{
  void *PermanentLibrary;
  void *v1;
  void (*v2)(void *);
  void (*v3)(void *);
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary("/usr/local/lib/libLLVMInternal.dylib", (uint64_t)__p);
  if (PermanentLibrary != &llvm::sys::DynamicLibrary::Invalid)
  {
    v1 = PermanentLibrary;
    if (byte_1ED82C300 == 1)
    {
      v2 = (void (*)(void *))dlsym(PermanentLibrary, "LLVMInitializeAGX2InstPrinterTgt");
      if (v2)
        v2(&unk_1ED82C430);
    }
    if (byte_1ED7EEBB8 == 1)
    {
      v3 = (void (*)(void *))dlsym(v1, "LLVMInitializeAGX2AsmParserTgt");
      if (v3)
        v3(&unk_1ED82C430);
    }
  }
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C4C05EE0()
{
  llvm::MCAsmInfoDarwin *v0;
  uint64_t result;

  v0 = (llvm::MCAsmInfoDarwin *)operator new();
  result = llvm::MCAsmInfoDarwin::MCAsmInfoDarwin(v0);
  *(_QWORD *)result = &unk_1E8054F30;
  *(_QWORD *)(result + 48) = "//";
  *(_QWORD *)(result + 56) = 2;
  *(_WORD *)(result + 408) = 257;
  *(_DWORD *)(result + 8) = 8;
  *(_DWORD *)(result + 412) = 1;
  return result;
}

_QWORD *sub_1C4C05F44()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E8055610;
  result[1] = &unk_1C699BF14;
  result[4] = 0;
  result[5] = 0;
  result[2] = "1000";
  result[3] = 0;
  *((_DWORD *)result + 10) = 8350;
  return result;
}

double sub_1C4C05F98()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_QWORD *)v0 = "0";
  *(_QWORD *)(v0 + 8) = 0x39000009FFLL;
  *(_QWORD *)(v0 + 24) = &off_1E8055030;
  *(_QWORD *)(v0 + 48) = &unk_1C6960108;
  *(_QWORD *)(v0 + 56) = &unk_1C6965370;
  *(_QWORD *)(v0 + 64) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(_QWORD *)(v0 + 72) = "GPR32tup12";
  *(_QWORD *)(v0 + 40) = &unk_1C6978CCC;
  *(_QWORD *)(v0 + 32) = 0x1380000002FLL;
  *(_DWORD *)(v0 + 96) = 182;
  *(_QWORD *)(v0 + 80) = &unk_1C6965768;
  *(_QWORD *)(v0 + 88) = &unk_1C6965C98;
  *(_QWORD *)(v0 + 104) = &unk_1C6982558;
  *(_QWORD *)(v0 + 144) = &unk_1C697F1A8;
  *(_QWORD *)(v0 + 152) = &unk_1C697FDBC;
  *(_QWORD *)(v0 + 128) = &unk_1C69809D0;
  *(_QWORD *)(v0 + 136) = &unk_1C6981794;
  *(_QWORD *)&result = 0x1B8000001B8;
  *(_OWORD *)(v0 + 112) = xmmword_1C660B7A0;
  return result;
}

_QWORD *sub_1C4C0609C(__int128 *a1, char *a2, size_t a3, const void *a4, size_t a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *result;

  if (a3)
    v8 = a2;
  else
    v8 = "g10";
  if (a3)
    v9 = a3;
  else
    v9 = 3;
  v10 = operator new();
  result = (_QWORD *)llvm::MCSubtargetInfo::MCSubtargetInfo(v10, a1, v8, v9, v8, v9, a4, a5, (uint64_t)&off_1E80B73B0, 127, (uint64_t)&off_1E80B9520, 40, (uint64_t)&unk_1C69A418C, (uint64_t)&unk_1C69A429C, (uint64_t)&unk_1C69A42DC, 0, 0, 0);
  *result = &off_1E80BE6D0;
  return result;
}

uint64_t sub_1C4C06178(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, char a6)
{
  return llvm::createMachOStreamer(a1, a2, a3, a4, a5, a6, 0);
}

_QWORD *sub_1C4C06180(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E80BE740;
  result[1] = a1;
  return result;
}

uint64_t sub_1C4C061C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 - 1) < 6 && a2 == 104)
    return 107;
  else
    return 0;
}

void sub_1C4C061E0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4C061F4(uint64_t a1, int *a2)
{
  unint64_t v2;

  v2 = sub_1C4C06220(*a2);
  if ((int)v2 <= -1 || HIDWORD(v2) == 0)
    return 0;
  else
    return v2 | 0x100000000;
}

uint64_t sub_1C4C06220(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A)
    return 0;
  else
    return qword_1C69BDCE0[a1 - 360] | qword_1C69AE330[a1 - 360] | qword_1C69CD690[a1 - 360];
}

void sub_1C4C0626C()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4C06280(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  llvm::raw_ostream *v6;
  int *v7;
  const char *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  _DWORD *v12;
  llvm::raw_ostream *result;
  _WORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v4 = *(llvm::raw_ostream **)(a1 + 16);
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 572552560;
    *v5 = 1885810185;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.gpu \"", 7uLL);
  }
  switch(a2)
  {
    case 0:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "unknown";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 1853321070;
      v15 = 1852534389;
      goto LABEL_147;
    case 1:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v11 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) <= 2)
      {
        v8 = "g10";
        goto LABEL_55;
      }
      v19 = 48;
      goto LABEL_123;
    case 2:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g10p-b0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811740528;
      v15 = 1882206567;
      goto LABEL_147;
    case 3:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v11 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) <= 2)
      {
        v8 = "g11";
        goto LABEL_55;
      }
      v19 = 49;
      goto LABEL_123;
    case 4:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11m-a0";
        goto LABEL_86;
      }
      v20 = 811674989;
      goto LABEL_101;
    case 5:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11m-b0";
        goto LABEL_86;
      }
      v20 = 811740525;
LABEL_101:
      *(int *)((char *)v7 + 3) = v20;
      v15 = 1831940455;
      goto LABEL_147;
    case 6:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11p-a0";
        goto LABEL_86;
      }
      v21 = 811674992;
      goto LABEL_104;
    case 7:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11p-b0";
        goto LABEL_86;
      }
      v21 = 811740528;
LABEL_104:
      *(int *)((char *)v7 + 3) = v21;
      v15 = 1882272103;
      goto LABEL_147;
    case 8:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11g-a0";
        goto LABEL_86;
      }
      v22 = 811674983;
      goto LABEL_107;
    case 9:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g11g-b0";
        goto LABEL_86;
      }
      v22 = 811740519;
LABEL_107:
      *(int *)((char *)v7 + 3) = v22;
      v15 = 1731277159;
      goto LABEL_147;
    case 10:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v11 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) <= 2)
      {
        v8 = "g12";
        goto LABEL_55;
      }
      v19 = 50;
      goto LABEL_123;
    case 11:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g12m-a0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811674989;
      v15 = 1832005991;
      goto LABEL_147;
    case 12:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g12p-a0";
        goto LABEL_86;
      }
      v23 = 811674992;
      goto LABEL_112;
    case 13:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g12p-b0";
        goto LABEL_86;
      }
      v23 = 811740528;
LABEL_112:
      *(int *)((char *)v7 + 3) = v23;
      v15 = 1882337639;
      goto LABEL_147;
    case 14:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g12g-b0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811740519;
      v15 = 1731342695;
      goto LABEL_147;
    case 15:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v12 = (_DWORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v12 <= 3uLL)
      {
        v8 = "g12x";
        v10 = 4;
        goto LABEL_87;
      }
      *v12 = 2016555367;
      v16 = *((_QWORD *)v6 + 4) + 4;
      goto LABEL_148;
    case 16:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v11 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) <= 2)
      {
        v8 = "g13";
        goto LABEL_55;
      }
      v19 = 51;
      goto LABEL_123;
    case 17:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13p-a0";
        goto LABEL_86;
      }
      v24 = 811674992;
      goto LABEL_118;
    case 18:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13p-b0";
        goto LABEL_86;
      }
      v24 = 811740528;
LABEL_118:
      *(int *)((char *)v7 + 3) = v24;
      v15 = 1882403175;
      goto LABEL_147;
    case 19:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13g-a0";
        goto LABEL_86;
      }
      v25 = 811674983;
      goto LABEL_121;
    case 20:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13g-b0";
        goto LABEL_86;
      }
      v25 = 811740519;
LABEL_121:
      *(int *)((char *)v7 + 3) = v25;
      v15 = 1731408231;
      goto LABEL_147;
    case 21:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v11 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v11) <= 2)
      {
        v8 = "g14";
LABEL_55:
        v10 = 3;
        goto LABEL_87;
      }
      v19 = 52;
LABEL_123:
      *(_BYTE *)(v11 + 2) = v19;
      *(_WORD *)v11 = 12647;
      v16 = *((_QWORD *)v6 + 4) + 3;
      goto LABEL_148;
    case 22:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14p-a0";
        goto LABEL_86;
      }
      v26 = 811674992;
      goto LABEL_126;
    case 23:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14p-b0";
        goto LABEL_86;
      }
      v26 = 811740528;
LABEL_126:
      *(int *)((char *)v7 + 3) = v26;
      v15 = 1882468711;
      goto LABEL_147;
    case 24:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14g-a0";
        goto LABEL_86;
      }
      v27 = 811674983;
      goto LABEL_129;
    case 25:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14g-b0";
        goto LABEL_86;
      }
      v27 = 811740519;
LABEL_129:
      *(int *)((char *)v7 + 3) = v27;
      v15 = 1731473767;
      goto LABEL_147;
    case 26:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14s-a0";
        goto LABEL_86;
      }
      v28 = 811674995;
      goto LABEL_146;
    case 27:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14s-b0";
        goto LABEL_86;
      }
      v28 = 811740531;
LABEL_146:
      *(int *)((char *)v7 + 3) = v28;
      v15 = 1932800359;
      goto LABEL_147;
    case 28:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14c-a0";
        goto LABEL_86;
      }
      v29 = 811674979;
      goto LABEL_133;
    case 29:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14c-b0";
        goto LABEL_86;
      }
      v29 = 811740515;
LABEL_133:
      *(int *)((char *)v7 + 3) = v29;
      v15 = 1664364903;
      goto LABEL_147;
    case 30:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14d-a0";
        goto LABEL_86;
      }
      v30 = 811674980;
      goto LABEL_136;
    case 31:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g14d-b0";
        goto LABEL_86;
      }
      v30 = 811740516;
LABEL_136:
      *(int *)((char *)v7 + 3) = v30;
      v15 = 1681142119;
      goto LABEL_147;
    case 32:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13s-a0";
        goto LABEL_86;
      }
      v31 = 811674995;
      goto LABEL_139;
    case 33:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13s-b0";
        goto LABEL_86;
      }
      v31 = 811740531;
LABEL_139:
      *(int *)((char *)v7 + 3) = v31;
      v15 = 1932734823;
      goto LABEL_147;
    case 34:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13c-a0";
        goto LABEL_86;
      }
      v17 = 811674979;
      goto LABEL_141;
    case 35:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13c-b0";
        goto LABEL_86;
      }
      v17 = 811740515;
LABEL_141:
      *(int *)((char *)v7 + 3) = v17;
      v15 = 1664299367;
      goto LABEL_147;
    case 36:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13d-a0";
        goto LABEL_86;
      }
      v18 = 811674980;
      goto LABEL_143;
    case 37:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g13d-b0";
        goto LABEL_86;
      }
      v18 = 811740516;
LABEL_143:
      *(int *)((char *)v7 + 3) = v18;
      v15 = 1681076583;
      goto LABEL_147;
    case 38:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15p-b0";
LABEL_86:
        v10 = 7;
        goto LABEL_87;
      }
      *(int *)((char *)v7 + 3) = 811740528;
      v15 = 1882534247;
LABEL_147:
      *v7 = v15;
      v16 = *((_QWORD *)v6 + 4) + 7;
      goto LABEL_148;
    default:
      if (a2 != 100)
        goto LABEL_88;
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v9 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v9) > 0xA)
      {
        *(_DWORD *)(v9 + 7) = 1684370546;
        *(_QWORD *)v9 = *(_QWORD *)"unsupported";
        v16 = *((_QWORD *)v6 + 4) + 11;
LABEL_148:
        *((_QWORD *)v6 + 4) = v16;
      }
      else
      {
        v8 = "unsupported";
        v10 = 11;
LABEL_87:
        llvm::raw_ostream::write(v6, v8, v10);
      }
LABEL_88:
      result = *(llvm::raw_ostream **)(a1 + 16);
      v14 = (_WORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v14 <= 1uLL)
        return llvm::raw_ostream::write(result, "\"\n", 2uLL);
      *v14 = 2594;
      *((_QWORD *)result + 4) += 2;
      return result;
  }
}

void sub_1C4C06B68()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4C06B7C(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 272) + 24) + 8);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFFFF00F | (16 * a2);
  return result;
}

_QWORD *sub_1C4C06BA0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E80BE9D8;
  v2 = (_QWORD *)a1[263];
  if (v2 != a1 + 266)
    free(v2);
  return a1;
}

void sub_1C4C06BE0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E80BE9D8;
  v2 = (_QWORD *)a1[263];
  if (v2 != a1 + 266)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4C06C30@<X0>(_QWORD *a1@<X8>)
{
  return sub_1C615BB8C(1, 16777235, 3, a1);
}

uint64_t sub_1C4C06C44()
{
  return 87;
}

char **sub_1C4C06C4C(uint64_t a1, int a2)
{
  if (a2 >= 128)
    return (char **)(a1 + 24 * (a2 - 128) + 16);
  else
    return &(&off_1E817F4F8)[3 * a2];
}

_DWORD *sub_1C4C06C70(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7;
  unint64_t v8;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;

  v7 = *(_DWORD *)(a3 + 12);
  v8 = a7;
  v11 = 1;
  switch(v7)
  {
    case 1:
    case 6:
    case 10:
    case 18:
    case 129:
    case 133:
    case 171:
    case 175:
      goto LABEL_42;
    case 2:
    case 7:
    case 11:
    case 19:
    case 130:
    case 134:
      v11 = 2;
      if (!a7)
        return result;
      goto LABEL_43;
    case 3:
    case 8:
    case 12:
    case 20:
    case 132:
    case 136:
    case 143:
    case 147:
    case 151:
    case 153:
    case 157:
    case 166:
    case 183:
    case 184:
    case 185:
    case 212:
    case 213:
    case 214:
      v11 = 4;
      if (!a7)
        return result;
      goto LABEL_43;
    case 4:
    case 9:
    case 13:
    case 21:
    case 128:
    case 138:
    case 139:
    case 167:
    case 176:
    case 190:
    case 191:
    case 192:
    case 193:
      v11 = 8;
      if (!a7)
        return result;
      goto LABEL_43;
    case 131:
    case 135:
    case 179:
    case 205:
      v11 = 3;
      if (!a7)
        return result;
      goto LABEL_43;
    case 137:
      v11 = 11;
      if (!a7)
        return result;
      goto LABEL_43;
    case 140:
    case 144:
    case 148:
    case 152:
    case 194:
    case 195:
    case 196:
    case 197:
    case 203:
      v11 = 10;
      if (!a7)
        return result;
      goto LABEL_43;
    case 141:
    case 142:
    case 145:
    case 146:
    case 149:
    case 150:
    case 202:
    case 204:
      v11 = 9;
      if (!a7)
        return result;
      goto LABEL_43;
    case 154:
    case 155:
    case 159:
    case 164:
    case 165:
    case 170:
    case 174:
      v11 = 5;
      if (!a7)
        return result;
      goto LABEL_43;
    case 156:
    case 160:
    case 177:
    case 178:
      v11 = 7;
      if (!a7)
        return result;
      goto LABEL_43;
    case 158:
    case 168:
    case 169:
    case 172:
    case 173:
      v11 = 6;
      if (!a7)
        return result;
      goto LABEL_43;
    case 161:
    case 162:
    case 163:
      v12 = (v7 - 161) >= 2;
      v13 = 7;
      v14 = 4;
      goto LABEL_27;
    case 180:
    case 181:
    case 182:
      v15 = (v7 & 0xFFFFFFFE) == 180;
      goto LABEL_34;
    case 186:
    case 187:
    case 188:
    case 189:
      v12 = (v7 - 186) >= 3;
      v13 = 2;
      v14 = 6;
LABEL_27:
      if (v12)
        v11 = v13;
      else
        v11 = v14;
      if (!a7)
        return result;
      goto LABEL_43;
    case 198:
    case 199:
    case 200:
    case 201:
      if ((v7 - 198) < 3)
        v11 = 9;
      else
        v11 = 10;
      if (!a7)
        return result;
      goto LABEL_43;
    case 206:
    case 207:
    case 208:
      v15 = v7 == 207;
LABEL_34:
      if (v15)
        v11 = 4;
      else
        v11 = 3;
      if (!a7)
        return result;
      goto LABEL_43;
    case 209:
    case 210:
    case 211:
      if ((v7 - 209) >= 2)
        v11 = 3;
      else
        v11 = 4;
LABEL_42:
      if (a7)
      {
LABEL_43:
        v16 = *(_DWORD *)(a3 + 8);
        if ((v7 - 137) > 3)
        {
          if ((v7 - 141) > 3)
          {
            if ((v7 - 145) > 3)
            {
              if ((v7 - 149) > 3)
              {
                if ((v7 - 198) > 3)
                {
                  result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)result + 80))(result, *(unsigned int *)(a3 + 12));
                  v17 = result[2];
                  switch(*(_DWORD *)(a3 + 12))
                  {
                    case 0x81:
                      v8 = v8 >> 1;
                      break;
                    case 0x82:
                      v8 = (unsigned __int16)v8 >> 1;
                      break;
                    case 0x83:
                      v8 = (v8 >> 1) & 0x7FFFFF;
                      break;
                    case 0x84:
                      v8 = v8 >> 1;
                      break;
                    case 0x85:
                      v8 = (v8 + 2) >> 1;
                      break;
                    case 0x86:
                      v8 = (unsigned __int16)(v8 + 2) >> 1;
                      break;
                    case 0x87:
                      v8 = ((unint64_t)(v8 + 2) >> 1) & 0x7FFFFF;
                      break;
                    case 0x88:
                      v8 = (v8 + 2) >> 1;
                      break;
                    default:
                      break;
                  }
                  v18 = -v17;
                  do
                  {
                    v19 = v8 >> v18;
                    if (v17 >= 0)
                      LOBYTE(v19) = v8 << v17;
                    *(_BYTE *)(a5 + v16++) |= v19;
                    v17 -= 8;
                    LOBYTE(v18) = v18 + 8;
                    --v11;
                  }
                  while (v11);
                }
                else
                {
                  return (_DWORD *)sub_1C6173560(*(_DWORD *)(a3 + 12));
                }
              }
              else
              {
                return (_DWORD *)sub_1C4C95CF4(*(_DWORD *)(a3 + 12));
              }
            }
            else
            {
              return (_DWORD *)sub_1C4C9598C(*(_DWORD *)(a3 + 12));
            }
          }
          else
          {
            return (_DWORD *)sub_1C4C95624(*(_DWORD *)(a3 + 12));
          }
        }
        else
        {
          return (_DWORD *)sub_1C4C95448(*(_DWORD *)(a3 + 12));
        }
      }
      return result;
    default:
      llvm::report_fatal_error((llvm *)"Unknown relocation!", (const char *)1);
  }
}

uint64_t sub_1C4C06F70()
{
  return 0;
}

uint64_t sub_1C4C06F78(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_1C4C06F9C + 4 * byte_1C69DD177[*(_DWORD *)(a2 + 12) - 129]))(0);
}

BOOL sub_1C4C06F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 != (char)a3;
}

void sub_1C4C06FC4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  __int16 v6;
  _BYTE v7[64];
  uint64_t *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;

  v9 = &v11;
  v10 = xmmword_1C64638F0;
  sub_1C4B07764((uint64_t)v7, (uint64_t)&v9);
  llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v7, 0, " ", 1uLL, 0);
  sub_1C4816AD8((llvm::raw_ostream *)v7, "\n");
  v4 = *v8;
  v3 = v8[1];
  v6 = 1283;
  v5[0] = "unexpected instruction to relax: ";
  v5[2] = v4;
  v5[3] = v3;
  llvm::report_fatal_error((uint64_t)v5, 1);
}

uint64_t sub_1C4C07058()
{
  return 2;
}

uint64_t sub_1C4C07060(uint64_t a1, llvm::raw_ostream *this, unint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  _BYTE *v10;
  _BYTE *v11;

  if (!a3)
    return 1;
  if ((a3 & 1) != 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 2112);
  if (!v4 || a3 % (2 * v4))
    return 0;
  if (a3 >= 2)
  {
    v7 = 0;
    v8 = a3 >> 1;
    do
    {
      v9 = *(_WORD *)(*(_QWORD *)(a1 + 2104) + 2 * (v7 % *(_QWORD *)(a1 + 2112)));
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = v9;
      }
      v11 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v11 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, SHIBYTE(v9));
      }
      else
      {
        *((_QWORD *)this + 4) = v11 + 1;
        *v11 = HIBYTE(v9);
      }
      ++v7;
    }
    while (v8 != v7);
  }
  return 1;
}

_QWORD *sub_1C4C07158(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v2 = result[1];
  if (v2 > a2)
  {
LABEL_2:
    result[1] = a2;
    return result;
  }
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      v3 = result;
      v4 = a2;
      if (result[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 2);
        v2 = v3[1];
      }
      a2 = v4;
      result = v3;
      if (v4 != v2)
      {
        bzero((void *)(*v3 + 2 * v2), 2 * (v4 - v2));
        result = v3;
        a2 = v4;
      }
    }
    goto LABEL_2;
  }
  return result;
}

void sub_1C4C071F4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, _QWORD *a7, unsigned int *a8)
{
  int v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  char *v51;
  int v52;
  int v54;
  std::string v55;
  std::string v56;
  void *__p[2];
  std::string::size_type v58;
  uint64_t v59[4];
  __int16 v60;

  v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 80))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  v15 = atomic_load((unsigned __int8 *)&qword_1EF8EFB88);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8EFB88))
    __cxa_guard_release(&qword_1EF8EFB88);
  v16 = *(_DWORD *)(a6 + 12);
  v17 = *a7;
  if (*a7)
    v18 = *(unsigned __int16 *)(v17 + 1);
  else
    v18 = 0;
  switch(v16)
  {
    case 128:
LABEL_81:
      v52 = 0;
      if (v18 == 153)
        v20 = 5;
      else
        v20 = 0;
      v19 = 3;
      goto LABEL_28;
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
LABEL_94:
      v45 = *(_QWORD *)a3;
      v46 = *(_QWORD *)(a6 + 16);
      v54 = *(_DWORD *)(a6 + 12);
      sub_1C4B15C90(&v54, (uint64_t)&v55);
      v47 = std::string::insert(&v55, 0, "unsupported relocation on symbol (");
      v48 = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&v56, ")");
      v50 = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v58 = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v60 = 260;
      v59[0] = (uint64_t)__p;
      llvm::MCContext::reportError(v45, v46, (uint64_t)v59);
      if (SHIBYTE(v58) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      return;
    case 137:
    case 138:
    case 139:
    case 140:
      switch(v18)
      {
        case 151:
          v52 = 0;
          v20 = 3;
          goto LABEL_93;
        case 152:
          v52 = 0;
          v20 = 4;
          goto LABEL_93;
        case 153:
          v52 = 0;
          v20 = 12;
          goto LABEL_93;
        case 154:
          v52 = 0;
          v20 = 6;
          goto LABEL_93;
        case 155:
          goto LABEL_94;
        case 156:
          v52 = 0;
          v20 = 7;
          goto LABEL_93;
        case 157:
          v52 = 0;
          v20 = 8;
          goto LABEL_93;
        default:
          goto LABEL_85;
      }
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
      v19 = 0;
      v52 = 0;
      v20 = 2;
      goto LABEL_28;
    case 153:
    case 154:
    case 155:
    case 156:
      v19 = 0;
      v21 = v16 - 9;
      goto LABEL_27;
    case 157:
    case 158:
    case 159:
    case 160:
      v19 = 0;
      v21 = v16 + 3;
      goto LABEL_27;
    case 161:
    case 162:
    case 163:
      v19 = 0;
      v21 = v16 + 15;
      goto LABEL_27;
    case 164:
    case 165:
    case 166:
    case 167:
      v19 = 0;
      v21 = v16 + 28;
      goto LABEL_27;
    case 168:
    case 169:
    case 170:
    case 171:
      v19 = 0;
      v21 = v16 + 40;
      goto LABEL_27;
    case 172:
    case 173:
    case 174:
    case 175:
      v19 = 0;
      v21 = v16 + 52;
      goto LABEL_27;
    case 176:
    case 177:
    case 178:
    case 179:
      v19 = 0;
      v21 = v16 + 64;
      goto LABEL_27;
    case 180:
    case 181:
    case 182:
      v19 = 0;
      v21 = v16 + 76;
      goto LABEL_27;
    case 183:
    case 184:
    case 185:
      v19 = 0;
      v21 = v16 + 89;
      goto LABEL_27;
    case 186:
    case 187:
    case 188:
    case 189:
      v19 = 0;
      v21 = v16 + 102;
      goto LABEL_27;
    case 190:
    case 191:
    case 192:
    case 193:
      v19 = 0;
      v21 = v16 + 114;
      goto LABEL_27;
    case 194:
    case 195:
    case 196:
    case 197:
      v19 = 0;
      v21 = v16 + 126;
      goto LABEL_27;
    case 198:
    case 199:
    case 200:
    case 201:
      v19 = 0;
      v21 = v16 + 138;
      goto LABEL_27;
    case 202:
    case 203:
    case 204:
    case 205:
      v19 = 0;
      v21 = v16 + 150;
      goto LABEL_27;
    case 206:
    case 207:
    case 208:
      v19 = 0;
      v21 = v16 + 162;
      goto LABEL_27;
    case 209:
    case 210:
    case 211:
      v19 = 0;
      v21 = v16 + 175;
      goto LABEL_27;
    case 212:
    case 213:
    case 214:
      v19 = 0;
      v21 = v16 + 188;
LABEL_27:
      v52 = v21;
      v20 = 15;
LABEL_28:
      if (a7[1])
        goto LABEL_100;
      if (v20 <= 0xC && ((1 << v20) & 0x10A0) != 0)
        *(_QWORD *)a8 = a7[2];
      v22 = v14 & 1;
      if (v17)
        v23 = *(_QWORD *)(v17 + 16);
      else
        v23 = 0;
      if (v20)
        v24 = 1;
      else
        v24 = v22 == 0;
      v25 = v19;
      v26 = 1 << v19;
      if (v24)
        v26 = 0;
      if (v23
        && v26 != -*((_DWORD *)a7 + 4)
        && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v23) & 1) == 0)
      {
LABEL_100:
        v51 = "Relocation with symbol difference is not supported.";
        goto LABEL_104;
      }
      llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
      v27 = *(_DWORD *)(a5 + 32);
      v28 = *(_DWORD *)(a6 + 8);
      if (!*a7 && !a7[1])
      {
        v51 = "FIXME: relocations to absolute targets not yet implemented";
LABEL_104:
        llvm::report_fatal_error((llvm *)v51, (const char *)1);
      }
      v29 = *(_DWORD *)(v23 + 8);
      if ((v29 & 0x1C00) == 0x800)
      {
        v59[0] = 0;
        *(_DWORD *)(v23 + 8) = v29 | 4;
        llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v23 + 24), v59);
        if (v30)
        {
          *(_QWORD *)a8 = v59[0];
          return;
        }
      }
      if ((v52 & 0x1F0) == 0x150
        || llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v23))
      {
        v31 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
        if (!v31 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v23 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
          *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v31;
        }
        if (v31)
        {
          v59[0] = 0;
          sub_1C59415F0(a4, (uint64_t *)v23, 1, v59);
          v32 = 0;
          *(_QWORD *)a8 -= v59[0];
          if (!v22)
            goto LABEL_66;
LABEL_59:
          v34 = *(_DWORD *)(a2 + 80);
          if (v34)
          {
            v35 = *(_QWORD *)(a5 + 16);
            v36 = *(_QWORD *)(a2 + 64);
            v37 = v34 - 1;
            v38 = ((v35 >> 4) ^ (v35 >> 9)) & (v34 - 1);
            v39 = *(_QWORD *)(v36 + 16 * v38);
            if (v35 == v39)
            {
LABEL_64:
              v42 = *(_QWORD *)(v36 + 16 * v38 + 8);
LABEL_65:
              *(_QWORD *)a8 -= v42;
              goto LABEL_66;
            }
            v40 = 1;
            while (v39 != -4096)
            {
              v41 = v38 + v40++;
              v38 = v41 & v37;
              v39 = *(_QWORD *)(v36 + 16 * v38);
              if (v35 == v39)
                goto LABEL_64;
            }
          }
          v42 = 0;
          goto LABEL_65;
        }
        v32 = 0;
        if (v22)
          goto LABEL_59;
      }
      else
      {
        v33 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
        if (!v33 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v23 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
          *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v33;
        }
        v23 = 0;
        v32 = *(_DWORD *)(*(_QWORD *)(v33 + 16) + 28) + 1;
        if (v22)
          goto LABEL_59;
      }
LABEL_66:
      if (v20 != 15)
      {
        if (v20 == 4)
        {
          v43 = a8[1];
        }
        else
        {
          if (v20 != 3)
            goto LABEL_72;
          v43 = *a8;
        }
        *(_QWORD *)a8 = v43;
LABEL_72:
        LODWORD(v59[0]) = v28 + v27;
        if (v22)
          v44 = 0x1000000;
        else
          v44 = 0;
        goto LABEL_76;
      }
      LODWORD(v59[0]) = v28 + v27;
      HIDWORD(v59[0]) = (v22 << 24) | (v25 << 25) | v32 | 0xF0000000;
      sub_1C4B07F2C(a2, v23, *(_QWORD *)(a5 + 16), v59);
      v23 = 0;
      v44 = 0;
      LODWORD(v59[0]) = v28 + v27;
      v25 = 2;
      v20 = 14;
      v32 = v52;
LABEL_76:
      HIDWORD(v59[0]) = v32 | (v20 << 28) | v44 | (v25 << 25);
      sub_1C4B07F2C(a2, v23, *(_QWORD *)(a5 + 16), v59);
      return;
    default:
      v19 = 0;
      v20 = 0;
      v52 = 0;
      switch(v16)
      {
        case 1:
          goto LABEL_28;
        case 2:
          v20 = 0;
          v52 = 0;
          v19 = 1;
          goto LABEL_28;
        case 3:
LABEL_85:
          v20 = 0;
          v52 = 0;
LABEL_93:
          v19 = 2;
          goto LABEL_28;
        case 4:
          goto LABEL_81;
        default:
          goto LABEL_94;
      }
  }
}

void sub_1C4C07868()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4C0787C(uint64_t a1, unsigned int *a2, llvm::raw_ostream *a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void (**v17)(void **);
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char *v91;
  const char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v101;
  void *v102;
  __int128 v103;
  uint64_t v104;
  _QWORD __dst[45];
  void *__src[47];

  __src[45] = *(void **)MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *a2;
  v7 = *v5;
  v102 = &v104;
  v103 = xmmword_1C6464ED0;
  v8 = a5[24];
  memset(__dst, 0, 24);
  if ((v8 & 0x80000000000) == 0)
  {
    v92 = "Instruction not annotated as valid for any ISA";
    goto LABEL_79;
  }
  if ((*(_BYTE *)(v7 + 48 * v6 + 20) & 4) == 0)
  {
    v92 = "Emitted non-G15 instruction for G15";
LABEL_79:
    MEMORY[0x1CAA32ABC](__dst, v92);
    LOWORD(__src[4]) = 260;
    __src[0] = __dst;
    llvm::report_fatal_error((uint64_t)__src, 1);
  }
  v14 = *(_QWORD *)(a1 + 16);
  __src[0] = &off_1E8131718;
  __src[1] = a5;
  __src[3] = __src;
  v15 = sub_1C4C0B384(__src);
  v16 = (void **)__src[3];
  if (__src[3] == __src)
  {
    v17 = (void (**)(void **))((char *)__src[0] + 32);
    v16 = __src;
LABEL_5:
    (*v17)(v16);
    goto LABEL_6;
  }
  if (__src[3])
  {
    v17 = (void (**)(void **))(*(_QWORD *)__src[3] + 40);
    goto LABEL_5;
  }
LABEL_6:
  v101 = 0;
  LODWORD(v97) = v15;
  v98 = a5;
  v99 = v5;
  v100 = v14;
  if (!sub_1C4C091DC((uint64_t)&v97, a2))
  {
    v94 = "Failed to encode instruction";
    goto LABEL_85;
  }
  v18 = v101;
  memcpy(__dst, __src, sizeof(__dst));
  sub_1C4C0AF6C(v15, v101, (uint64_t)__dst, 1);
  v101 = 0;
  v96 = 0;
  __src[0] = &__src[3];
  *(_OWORD *)&__src[1] = xmmword_1C69DD250;
  sub_1C4C080F8(__src, 0xBuLL, 0);
  v19 = *a2;
  if ((_DWORD)v19 != 5625
    || (v19 = *(unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * sub_1C4C2FD5C(5625)), (_DWORD)v19 == 2))
  {
    v20 = 0;
    LOBYTE(v21) = 0;
    v22 = 0;
  }
  else
  {
    v19 = qword_1C69DD260[(int)v15];
    v21 = (uint64_t)*(&off_1E80BF4E0 + (int)v15);
    v20 = v21 & 0xFFFFFFFFFFFFFF00;
    v22 = 1;
  }
  v95 = a1;
  v97 = v21 | v20;
  v98 = (_QWORD *)v19;
  LOBYTE(v99) = v22;
  if ((sub_1C4C94178(v15, (uint64_t)__dst, v18, (uint64_t)&v97, __src[0], &v101, &v96) & 1) == 0)
  {
    v94 = "Failed to encode.";
    goto LABEL_85;
  }
  v23 = v96;
  v24 = (unint64_t)v96 >> 1;
  v25 = __src[1];
  if (__src[1] != (void *)v24)
  {
    if (__src[1] <= (void *)v24)
    {
      v93 = (unint64_t)v96 >> 1;
      if (__src[2] < (void *)v24)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, &__src[3], v24, 2);
        v25 = __src[1];
      }
      v24 = v93;
      if ((void *)v93 != v25)
      {
        bzero((char *)__src[0] + 2 * (_QWORD)v25, 2 * (v93 - (_QWORD)v25));
        v24 = v93;
      }
    }
    __src[1] = (void *)v24;
  }
  if (v23 >= 2)
  {
    v32 = 0;
    v33 = v103;
    if (v24 <= 1)
      v24 = 1;
    v34 = 2 * v24;
    do
    {
      v35 = *(_WORD *)((char *)__src[0] + v32);
      if ((unint64_t)(v33 + 1) > *((_QWORD *)&v103 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v104, v33 + 1, 1);
        v33 = v103;
      }
      *((_BYTE *)v102 + v33) = v35;
      v36 = v103;
      v37 = v103 + 1;
      *(_QWORD *)&v103 = v103 + 1;
      v38 = *(_WORD *)((char *)__src[0] + v32);
      if ((unint64_t)(v36 + 2) > *((_QWORD *)&v103 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v104, v36 + 2, 1);
        v37 = v103;
      }
      *((_BYTE *)v102 + v37) = HIBYTE(v38);
      v33 = v103 + 1;
      *(_QWORD *)&v103 = v103 + 1;
      v32 += 2;
    }
    while (v34 != v32);
  }
  v26 = *a2;
  if ((int)*a2 > 5624)
  {
    if (v26 <= 6832)
    {
      if (v26 == 5625)
      {
        v61 = sub_1C4C2FD5C(5625);
        v62 = *((_QWORD *)a2 + 2);
        if (*(_BYTE *)(v62 + 16 * v61) == 2)
          goto LABEL_62;
        v30 = *(_QWORD *)(v62 + 16 * v61 + 8);
        v31 = sub_1C4C953D0(v15, v101);
        goto LABEL_61;
      }
      if (v26 == 5724)
      {
        v49 = 0;
        v50 = 1;
        v51 = v101;
        do
        {
          v52 = v50;
          v53 = sub_1C4C2FD5C(*(unsigned __int16 *)a2);
          v54 = *((_QWORD *)a2 + 2);
          if (*(_BYTE *)(v54 + 16 * v53) != 2)
          {
            v55 = *(_QWORD *)(v54 + 16 * v53 + 8);
            v56 = (*(uint64_t (**)(int, int))&word_1E80BF490[8 * v49 + 4])(v15, v51);
            v57 = (_QWORD *)*((_QWORD *)a2 + 1);
            v97 = v55;
            LODWORD(v98) = 0;
            HIDWORD(v98) = v56;
            v99 = v57;
            v58 = sub_1C4926708(a4, (unint64_t)&v97, 1);
            v59 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v60 = *(_OWORD *)v58;
            *(_QWORD *)(v59 + 16) = *(_QWORD *)(v58 + 16);
            *(_OWORD *)v59 = v60;
            ++*(_DWORD *)(a4 + 8);
          }
          v50 = 0;
          v49 = 1;
        }
        while ((v52 & 1) != 0);
      }
    }
    else
    {
      switch(v26)
      {
        case 6833:
          v73 = 0;
          v74 = v101;
          do
          {
            v75 = sub_1C4C2FD5C(*(unsigned __int16 *)a2);
            v76 = *((_QWORD *)a2 + 2);
            if (*(_BYTE *)(v76 + 16 * v75) != 2)
            {
              v77 = *(_QWORD *)(v76 + 16 * v75 + 8);
              v78 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1E80BF4B0[v73 + 4])(v15, v74);
              v79 = (_QWORD *)*((_QWORD *)a2 + 1);
              v97 = v77;
              LODWORD(v98) = 0;
              HIDWORD(v98) = v78;
              v99 = v79;
              v80 = sub_1C4926708(a4, (unint64_t)&v97, 1);
              v81 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
              v82 = *(_OWORD *)v80;
              *(_QWORD *)(v81 + 16) = *(_QWORD *)(v80 + 16);
              *(_OWORD *)v81 = v82;
              ++*(_DWORD *)(a4 + 8);
            }
            v73 += 8;
          }
          while (v73 != 24);
          break;
        case 8695:
          v63 = 0;
          v64 = v101;
          do
          {
            v65 = sub_1C4C2FD5C(*(unsigned __int16 *)a2);
            v66 = *((_QWORD *)a2 + 2);
            if (*(_BYTE *)(v66 + 16 * v65) != 2)
            {
              v67 = *(_QWORD *)(v66 + 16 * v65 + 8);
              v68 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1E80BF3D0[v63 + 4])(v15, v64);
              v69 = (_QWORD *)*((_QWORD *)a2 + 1);
              v97 = v67;
              LODWORD(v98) = 0;
              HIDWORD(v98) = v68;
              v99 = v69;
              v70 = sub_1C4926708(a4, (unint64_t)&v97, 1);
              v71 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
              v72 = *(_OWORD *)v70;
              *(_QWORD *)(v71 + 16) = *(_QWORD *)(v70 + 16);
              *(_OWORD *)v71 = v72;
              ++*(_DWORD *)(a4 + 8);
            }
            v63 += 8;
          }
          while (v63 != 56);
          break;
        case 8696:
          v39 = 0;
          v40 = v101;
          do
          {
            v41 = sub_1C4C2FD5C(*(unsigned __int16 *)a2);
            v42 = *((_QWORD *)a2 + 2);
            if (*(_BYTE *)(v42 + 16 * v41) != 2)
            {
              v43 = *(_QWORD *)(v42 + 16 * v41 + 8);
              v44 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1E80BF440[v39 + 4])(v15, v40);
              v45 = (_QWORD *)*((_QWORD *)a2 + 1);
              v97 = v43;
              LODWORD(v98) = 0;
              HIDWORD(v98) = v44;
              v99 = v45;
              v46 = sub_1C4926708(a4, (unint64_t)&v97, 1);
              v47 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
              v48 = *(_OWORD *)v46;
              *(_QWORD *)(v47 + 16) = *(_QWORD *)(v46 + 16);
              *(_OWORD *)v47 = v48;
              ++*(_DWORD *)(a4 + 8);
            }
            v39 += 8;
          }
          while (v39 != 40);
          break;
      }
    }
  }
  else if ((v26 - 417) <= 9 && ((1 << (v26 + 95)) & 0x333) != 0)
  {
    v27 = v101;
    v28 = sub_1C4C2FD5C((unsigned __int16)*a2);
    v29 = *((_QWORD *)a2 + 2);
    if (*(_BYTE *)(v29 + 16 * v28) != 2)
    {
      v30 = *(_QWORD *)(v29 + 16 * v28 + 8);
      switch(v18)
      {
        case 0x10u:
          v31 = sub_1C4C95C78(v15, v27);
          goto LABEL_61;
        case 0xFu:
          v31 = sub_1C4C95910(v15, v27);
          goto LABEL_61;
        case 3u:
          v31 = sub_1C4C955A8(v15, v27);
LABEL_61:
          v83 = (_QWORD *)*((_QWORD *)a2 + 1);
          v97 = v30;
          LODWORD(v98) = 0;
          HIDWORD(v98) = v31;
          v99 = v83;
          v84 = sub_1C4926708(a4, (unint64_t)&v97, 1);
          v85 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
          v86 = *(_OWORD *)v84;
          *(_QWORD *)(v85 + 16) = *(_QWORD *)(v84 + 16);
          *(_OWORD *)v85 = v86;
          ++*(_DWORD *)(a4 + 8);
          goto LABEL_62;
      }
      v94 = "Unhandled branch type";
LABEL_85:
      llvm::report_fatal_error((llvm *)v94, (const char *)1);
    }
  }
LABEL_62:
  if (__src[0] != &__src[3])
    free(__src[0]);
  v87 = *(_QWORD *)(v95 + 24);
  v88 = v103;
  if (!*(_BYTE *)(v87 + 148))
    *(_DWORD *)(v87 + 144) += v103;
  v89 = (char *)v102;
  if (v88)
  {
    do
    {
      v90 = *v89;
      v91 = (char *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v91 >= *((_QWORD *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, v90);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v91 + 1;
        *v91 = v90;
      }
      ++v89;
      --v88;
    }
    while (v88);
    v89 = (char *)v102;
  }
  if (v89 != (char *)&v104)
    free(v89);
}

_QWORD *sub_1C4C080F8(_QWORD *result, unint64_t a2, __int16 a3)
{
  _WORD **v5;
  _WORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _WORD *v14;

  v5 = (_WORD **)result;
  if (result[2] >= a2)
  {
    v9 = (_WORD *)*result;
    v8 = result + 1;
    v10 = result[1];
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = result[1];
    if (v11)
    {
      v12 = (_WORD *)*result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[1] = 0;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 2);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = (unint64_t *)(v5 + 1);
  }
  *v8 = a2;
  return result;
}

llvm::MCStreamer *sub_1C4C081A8(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

llvm::raw_ostream *sub_1C4C081B8(llvm::raw_ostream *this, char *__s, unsigned int a3, unsigned int a4)
{
  _WORD *v8;
  size_t v9;
  void *v10;
  llvm::raw_ostream *result;
  const char *v12;
  char *v13;
  int v14;
  unsigned int v15;
  _WORD *v16;
  size_t v17;
  void *v18;
  const char *v19;
  char *v20;
  size_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  size_t v27;
  void *v28;
  _WORD *v29;

  if (a4 >= 5)
  {
    v8 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8315;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "{ ", 2uLL);
    }
  }
  if ((a4 & 3) == 0)
  {
    if (__s)
    {
      v21 = strlen(__s);
      v22 = (void *)*((_QWORD *)this + 4);
      if (v21 <= *((_QWORD *)this + 3) - (_QWORD)v22)
      {
        if (v21)
        {
          memcpy(v22, __s, v21);
          *((_QWORD *)this + 4) += v21;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, __s, v21);
      }
    }
    v23 = a3 >> 1;
    result = sub_1C5E21910(this, v23, 0, 0, 0);
    if (a4 < 8)
    {
LABEL_46:
      if (a4 >= 5)
      {
        v29 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v29 > 1uLL)
        {
          *v29 = 32032;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          return llvm::raw_ostream::write(this, " }", 2uLL);
        }
      }
      return result;
    }
    v24 = (a4 >> 2) - 1;
    v25 = v23 + 1;
    while (1)
    {
      v26 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v26 > 1uLL)
      {
        *v26 = 8236;
        *((_QWORD *)this + 4) += 2;
        if (__s)
        {
LABEL_38:
          v27 = strlen(__s);
          v28 = (void *)*((_QWORD *)this + 4);
          if (v27 <= *((_QWORD *)this + 3) - (_QWORD)v28)
          {
            if (v27)
            {
              memcpy(v28, __s, v27);
              *((_QWORD *)this + 4) += v27;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, __s, v27);
          }
        }
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        if (__s)
          goto LABEL_38;
      }
      result = sub_1C5E21910(this, v25++, 0, 0, 0);
      if (!--v24)
        goto LABEL_46;
    }
  }
  if (__s)
  {
    v9 = strlen(__s);
    v10 = (void *)*((_QWORD *)this + 4);
    if (v9 <= *((_QWORD *)this + 3) - (_QWORD)v10)
    {
      if (v9)
      {
        memcpy(v10, __s, v9);
        *((_QWORD *)this + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, __s, v9);
    }
  }
  result = sub_1C5E21910(this, a3 >> 1, 0, 0, 0);
  if ((a3 & 1) != 0)
    v12 = "h";
  else
    v12 = "l";
  v13 = (char *)*((_QWORD *)this + 4);
  if (*((char **)this + 3) == v13)
  {
    result = llvm::raw_ostream::write(this, v12, 1uLL);
  }
  else
  {
    *v13 = *v12;
    ++*((_QWORD *)this + 4);
  }
  if (a4 >= 4)
  {
    v14 = (a4 >> 1) - 1;
    v15 = a3 + 1;
    while (1)
    {
      v16 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
      {
        *v16 = 8236;
        *((_QWORD *)this + 4) += 2;
        if (__s)
        {
LABEL_17:
          v17 = strlen(__s);
          v18 = (void *)*((_QWORD *)this + 4);
          if (v17 <= *((_QWORD *)this + 3) - (_QWORD)v18)
          {
            if (v17)
            {
              memcpy(v18, __s, v17);
              *((_QWORD *)this + 4) += v17;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, __s, v17);
          }
        }
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        if (__s)
          goto LABEL_17;
      }
      result = sub_1C5E21910(this, v15 >> 1, 0, 0, 0);
      if ((v15 & 1) != 0)
        v19 = "h";
      else
        v19 = "l";
      v20 = (char *)*((_QWORD *)this + 4);
      if (*((char **)this + 3) == v20)
      {
        result = llvm::raw_ostream::write(this, v19, 1uLL);
      }
      else
      {
        *v20 = *v19;
        ++*((_QWORD *)this + 4);
      }
      ++v15;
      if (!--v14)
        goto LABEL_46;
    }
  }
  return result;
}

uint64_t sub_1C4C08598(uint64_t a1, int a2)
{
  return sub_1C4C085A0(a2);
}

uint64_t sub_1C4C085A0(int a1)
{
  uint64_t result;
  uint64_t v3;

  result = 1;
  if (a1 > 5551)
  {
    switch(a1)
    {
      case 6250:
      case 6253:
      case 6254:
      case 6255:
      case 6355:
      case 6359:
      case 6363:
      case 6367:
      case 6371:
      case 6375:
      case 6379:
      case 6383:
      case 6387:
      case 6391:
      case 6395:
      case 6399:
      case 6403:
      case 6407:
      case 6411:
      case 6415:
      case 6419:
      case 6423:
      case 6427:
      case 6431:
      case 6435:
      case 6439:
      case 6443:
      case 6447:
      case 6451:
      case 6455:
      case 6459:
      case 6707:
      case 6708:
      case 6709:
      case 6710:
      case 6711:
      case 6712:
      case 6713:
      case 6714:
      case 6715:
      case 6834:
      case 6835:
      case 6836:
      case 6837:
      case 6838:
      case 6839:
      case 6840:
      case 6841:
      case 6842:
      case 6843:
      case 6844:
      case 6845:
      case 6997:
      case 6998:
      case 6999:
      case 7000:
      case 7001:
      case 7002:
      case 7003:
      case 7004:
      case 7005:
      case 7006:
      case 7007:
      case 7008:
      case 7009:
      case 7010:
      case 7011:
      case 7012:
      case 7013:
      case 7014:
      case 7015:
      case 7016:
      case 7017:
      case 7018:
      case 7019:
      case 7020:
      case 7021:
      case 7022:
      case 7023:
      case 7024:
      case 7025:
      case 7026:
      case 7027:
      case 7028:
      case 7029:
      case 7030:
      case 7031:
      case 7032:
      case 7033:
      case 7034:
      case 7035:
      case 7036:
      case 7037:
      case 7038:
      case 7039:
      case 7040:
      case 7041:
      case 7042:
      case 7043:
      case 7044:
      case 7045:
      case 7046:
      case 7047:
      case 7048:
      case 7049:
      case 7050:
      case 7051:
      case 7052:
      case 7053:
      case 7054:
      case 7055:
      case 7056:
      case 7057:
      case 7058:
      case 7059:
      case 7060:
      case 7061:
      case 7062:
      case 7063:
      case 7064:
      case 7065:
      case 7066:
      case 7067:
      case 7068:
      case 7069:
      case 7070:
      case 7071:
      case 7072:
      case 7073:
      case 7074:
      case 7075:
      case 7076:
      case 7077:
      case 7078:
      case 7079:
      case 7080:
      case 7081:
      case 7082:
      case 7083:
      case 7084:
      case 7085:
      case 7086:
      case 7087:
      case 7088:
      case 7089:
      case 7090:
      case 7091:
      case 7092:
      case 7093:
      case 7094:
      case 7095:
      case 7096:
      case 7097:
      case 7098:
      case 7099:
      case 7100:
      case 7101:
      case 7102:
      case 7103:
      case 7104:
      case 7105:
      case 7106:
      case 7107:
      case 7108:
      case 7109:
      case 7110:
      case 7111:
      case 7112:
      case 7113:
      case 7114:
      case 7115:
      case 7116:
      case 7117:
      case 7118:
      case 7119:
      case 7120:
      case 7121:
      case 7122:
      case 7123:
      case 7124:
      case 7125:
      case 7126:
      case 7127:
      case 7128:
      case 7129:
      case 7130:
      case 7131:
      case 7132:
      case 7133:
      case 7134:
      case 7135:
      case 7136:
      case 7137:
      case 7138:
      case 7139:
      case 7140:
      case 7141:
      case 7142:
      case 7143:
      case 7144:
      case 7145:
      case 7146:
      case 7147:
      case 7148:
      case 7149:
      case 7150:
      case 7151:
      case 7152:
      case 7153:
      case 7154:
      case 7155:
      case 7156:
      case 7157:
      case 7158:
        return 4;
      case 6251:
      case 6252:
      case 6356:
      case 6357:
      case 6358:
      case 6360:
      case 6361:
      case 6362:
      case 6364:
      case 6365:
      case 6366:
      case 6368:
      case 6369:
      case 6370:
      case 6372:
      case 6373:
      case 6374:
      case 6376:
      case 6377:
      case 6378:
      case 6380:
      case 6381:
      case 6382:
      case 6384:
      case 6385:
      case 6386:
      case 6388:
      case 6389:
      case 6390:
      case 6392:
      case 6393:
      case 6394:
      case 6396:
      case 6397:
      case 6398:
      case 6400:
      case 6401:
      case 6402:
      case 6404:
      case 6405:
      case 6406:
      case 6408:
      case 6409:
      case 6410:
      case 6412:
      case 6413:
      case 6414:
      case 6416:
      case 6417:
      case 6418:
      case 6420:
      case 6421:
      case 6422:
      case 6424:
      case 6425:
      case 6426:
      case 6428:
      case 6429:
      case 6430:
      case 6432:
      case 6433:
      case 6434:
      case 6436:
      case 6437:
      case 6438:
      case 6440:
      case 6441:
      case 6442:
      case 6444:
      case 6445:
      case 6446:
      case 6448:
      case 6449:
      case 6450:
      case 6452:
      case 6453:
      case 6454:
      case 6456:
      case 6457:
      case 6458:
      case 6460:
      case 6461:
      case 6462:
LABEL_14:
        result = 8;
        break;
      case 6256:
      case 6257:
      case 6258:
      case 6259:
      case 6260:
      case 6261:
      case 6262:
      case 6263:
      case 6264:
      case 6265:
      case 6266:
      case 6267:
      case 6268:
      case 6269:
      case 6270:
      case 6271:
      case 6272:
      case 6273:
      case 6274:
      case 6275:
      case 6276:
      case 6277:
      case 6278:
      case 6279:
      case 6280:
      case 6281:
      case 6282:
      case 6283:
      case 6284:
      case 6285:
      case 6286:
      case 6287:
      case 6288:
      case 6289:
      case 6290:
      case 6291:
      case 6292:
      case 6293:
      case 6294:
      case 6295:
      case 6296:
      case 6297:
      case 6298:
      case 6299:
      case 6300:
      case 6301:
      case 6302:
      case 6303:
      case 6304:
      case 6305:
      case 6306:
      case 6307:
      case 6308:
      case 6309:
      case 6310:
      case 6311:
      case 6312:
      case 6313:
      case 6314:
      case 6315:
      case 6316:
      case 6317:
      case 6318:
      case 6319:
      case 6320:
      case 6321:
      case 6322:
      case 6323:
      case 6324:
      case 6325:
      case 6326:
      case 6327:
      case 6328:
      case 6329:
      case 6330:
      case 6331:
      case 6332:
      case 6333:
      case 6334:
      case 6335:
      case 6336:
      case 6463:
      case 6464:
      case 6465:
      case 6466:
      case 6467:
      case 6468:
      case 6469:
      case 6470:
      case 6471:
      case 6472:
      case 6473:
      case 6474:
      case 6475:
      case 6476:
      case 6477:
      case 6478:
      case 6479:
      case 6480:
      case 6481:
      case 6482:
      case 6483:
      case 6484:
      case 6485:
      case 6486:
      case 6487:
      case 6488:
      case 6489:
      case 6490:
      case 6491:
      case 6492:
      case 6493:
      case 6494:
      case 6495:
      case 6496:
      case 6497:
      case 6498:
      case 6499:
      case 6500:
      case 6501:
      case 6502:
      case 6503:
      case 6504:
      case 6605:
      case 6606:
      case 6607:
      case 6608:
      case 6609:
      case 6610:
      case 6611:
      case 6612:
      case 6613:
      case 6614:
      case 6615:
      case 6616:
      case 6617:
      case 6618:
      case 6619:
      case 6620:
      case 6621:
      case 6622:
      case 6623:
      case 6624:
      case 6625:
      case 6626:
      case 6627:
      case 6628:
      case 6629:
      case 6630:
      case 6631:
      case 6632:
      case 6633:
      case 6634:
      case 6635:
      case 6636:
      case 6637:
      case 6638:
      case 6639:
      case 6640:
      case 6641:
      case 6642:
      case 6643:
      case 6644:
      case 6645:
      case 6646:
      case 6647:
      case 6648:
      case 6649:
      case 6650:
      case 6651:
      case 6652:
      case 6653:
      case 6654:
      case 6655:
      case 6656:
      case 6657:
      case 6658:
      case 6659:
      case 6660:
      case 6661:
      case 6662:
      case 6663:
      case 6664:
      case 6665:
      case 6666:
      case 6667:
      case 6668:
      case 6669:
      case 6670:
      case 6671:
      case 6672:
      case 6673:
      case 6674:
      case 6675:
      case 6676:
      case 6677:
      case 6678:
      case 6679:
      case 6680:
      case 6681:
      case 6682:
      case 6683:
      case 6684:
      case 6685:
      case 6686:
      case 6687:
      case 6688:
      case 6689:
      case 6690:
      case 6691:
      case 6692:
      case 6693:
      case 6694:
      case 6695:
      case 6696:
      case 6697:
      case 6698:
      case 6699:
      case 6700:
      case 6701:
      case 6702:
      case 6703:
      case 6704:
      case 6705:
      case 6706:
      case 6716:
      case 6717:
      case 6718:
      case 6719:
      case 6720:
      case 6721:
      case 6722:
      case 6723:
      case 6724:
      case 6725:
      case 6726:
      case 6727:
      case 6728:
      case 6729:
      case 6730:
      case 6731:
      case 6732:
      case 6733:
      case 6734:
      case 6735:
      case 6736:
      case 6737:
      case 6738:
      case 6739:
      case 6740:
      case 6741:
      case 6742:
      case 6743:
      case 6744:
      case 6745:
      case 6746:
      case 6747:
      case 6748:
      case 6749:
      case 6750:
      case 6751:
      case 6752:
      case 6753:
      case 6754:
      case 6755:
      case 6756:
      case 6757:
      case 6758:
      case 6759:
      case 6760:
      case 6761:
      case 6762:
      case 6763:
      case 6764:
      case 6765:
      case 6766:
      case 6767:
      case 6768:
      case 6769:
      case 6770:
      case 6771:
      case 6772:
      case 6773:
      case 6774:
      case 6775:
      case 6776:
      case 6777:
      case 6778:
      case 6779:
      case 6780:
      case 6781:
      case 6782:
      case 6783:
      case 6784:
      case 6785:
      case 6786:
      case 6787:
      case 6788:
      case 6789:
      case 6790:
      case 6791:
      case 6792:
      case 6793:
      case 6794:
      case 6795:
      case 6796:
      case 6797:
      case 6798:
      case 6799:
      case 6800:
      case 6801:
      case 6802:
      case 6803:
      case 6804:
      case 6805:
      case 6806:
      case 6807:
      case 6808:
      case 6809:
      case 6810:
      case 6811:
      case 6812:
      case 6813:
      case 6814:
      case 6815:
      case 6816:
      case 6817:
      case 6818:
      case 6819:
      case 6820:
      case 6821:
      case 6822:
      case 6823:
      case 6824:
      case 6825:
      case 6826:
      case 6827:
      case 6828:
      case 6829:
      case 6830:
      case 6831:
      case 6832:
      case 6833:
      case 6846:
      case 6847:
      case 6848:
      case 6849:
      case 6850:
      case 6851:
      case 6852:
      case 6853:
      case 6854:
      case 6855:
      case 6856:
      case 6857:
      case 6858:
      case 6859:
      case 6860:
      case 6861:
      case 6862:
      case 6863:
      case 6864:
      case 6865:
      case 6866:
      case 6867:
      case 6868:
      case 6869:
      case 6870:
      case 6871:
      case 6872:
      case 6873:
      case 6874:
      case 6875:
      case 6876:
      case 6877:
      case 6878:
      case 6879:
      case 6880:
      case 6881:
      case 6882:
      case 6883:
      case 6884:
      case 6885:
      case 6886:
      case 6887:
      case 6888:
      case 6889:
      case 6890:
      case 6891:
      case 6892:
      case 6893:
      case 6894:
      case 6895:
      case 6896:
      case 6897:
      case 6898:
      case 6899:
      case 6900:
      case 6901:
      case 6902:
      case 6903:
      case 6904:
      case 6905:
      case 6906:
      case 6907:
      case 6908:
      case 6909:
      case 6910:
      case 6911:
      case 6912:
      case 6913:
      case 6914:
      case 6915:
      case 6916:
      case 6917:
      case 6918:
      case 6919:
      case 6920:
      case 6921:
      case 6922:
      case 6923:
      case 6924:
      case 6925:
      case 6927:
      case 6929:
      case 6931:
      case 6933:
      case 6935:
      case 6937:
      case 6939:
      case 6941:
      case 6943:
      case 6945:
      case 6947:
      case 6949:
      case 6951:
      case 6953:
      case 6955:
      case 6957:
      case 6959:
      case 6961:
      case 6963:
      case 6965:
      case 6967:
      case 6969:
      case 6971:
      case 6973:
      case 6974:
      case 6975:
      case 6976:
      case 6977:
      case 6978:
      case 6979:
      case 6980:
      case 6981:
      case 6982:
      case 6983:
      case 6984:
      case 6985:
      case 6986:
      case 6987:
      case 6988:
      case 6989:
      case 6990:
      case 6991:
      case 6992:
      case 6993:
      case 6994:
      case 6995:
      case 6996:
        return result;
      case 6337:
      case 6338:
      case 6339:
      case 6340:
      case 6341:
      case 6342:
      case 6343:
      case 6344:
      case 6345:
      case 6346:
      case 6347:
      case 6348:
      case 6349:
      case 6350:
      case 6351:
      case 6352:
      case 6353:
      case 6354:
      case 6505:
      case 6507:
      case 6509:
      case 6511:
      case 6513:
      case 6515:
      case 6517:
      case 6519:
      case 6521:
      case 6523:
      case 6525:
      case 6527:
      case 6529:
      case 6531:
      case 6533:
      case 6535:
      case 6537:
      case 6539:
      case 6541:
      case 6543:
      case 6545:
      case 6547:
      case 6549:
      case 6551:
      case 6553:
      case 6555:
      case 6557:
      case 6559:
      case 6561:
      case 6563:
      case 6565:
      case 6567:
      case 6569:
      case 6571:
      case 6573:
      case 6575:
      case 6577:
      case 6579:
      case 6581:
      case 6583:
      case 6585:
      case 6587:
      case 6589:
      case 6591:
      case 6593:
      case 6595:
      case 6597:
      case 6599:
      case 6601:
      case 6603:
      case 6926:
      case 6928:
      case 6930:
      case 6932:
      case 6934:
      case 6936:
      case 6938:
      case 6940:
      case 6942:
      case 6944:
      case 6946:
      case 6948:
      case 6950:
      case 6952:
      case 6954:
      case 6956:
      case 6958:
      case 6960:
      case 6962:
      case 6964:
      case 6966:
      case 6968:
      case 6970:
      case 6972:
LABEL_6:
        result = 2;
        break;
      case 6506:
      case 6508:
      case 6510:
      case 6512:
      case 6514:
      case 6516:
      case 6518:
      case 6520:
      case 6522:
      case 6524:
      case 6526:
      case 6528:
      case 6530:
      case 6532:
      case 6534:
      case 6536:
      case 6538:
      case 6540:
      case 6542:
      case 6544:
      case 6546:
      case 6548:
      case 6550:
      case 6552:
      case 6554:
      case 6556:
      case 6558:
      case 6560:
      case 6562:
      case 6564:
      case 6566:
      case 6568:
      case 6570:
      case 6572:
      case 6574:
      case 6576:
      case 6578:
      case 6580:
      case 6582:
      case 6584:
      case 6586:
      case 6588:
      case 6590:
      case 6592:
      case 6594:
      case 6596:
      case 6598:
      case 6600:
      case 6602:
      case 6604:
        result = 3;
        break;
      default:
        switch(a1)
        {
          case 8697:
          case 8698:
          case 8699:
          case 8700:
          case 8701:
          case 8702:
          case 8703:
          case 8704:
          case 8705:
          case 8706:
          case 8707:
          case 8708:
          case 8709:
          case 8710:
          case 8711:
          case 8712:
          case 8713:
          case 8714:
          case 8715:
          case 8716:
          case 8717:
          case 8718:
          case 8719:
          case 8720:
          case 8721:
          case 8722:
          case 8723:
          case 8724:
          case 8725:
          case 8726:
          case 8727:
          case 8728:
          case 8729:
          case 8730:
          case 8731:
          case 8732:
          case 8733:
          case 8734:
          case 8735:
          case 8736:
          case 8737:
          case 8738:
          case 8739:
          case 8740:
          case 8741:
          case 8742:
          case 8743:
          case 8744:
          case 8745:
          case 8746:
          case 8747:
          case 8748:
          case 8749:
          case 8750:
          case 8851:
          case 8852:
          case 8853:
          case 8854:
          case 8855:
          case 8856:
          case 8857:
          case 8858:
          case 8859:
          case 8860:
          case 8861:
          case 8862:
          case 8863:
          case 8864:
          case 8865:
          case 8866:
          case 8867:
          case 8868:
          case 8869:
          case 8870:
          case 8871:
          case 8872:
          case 8873:
          case 8874:
          case 8875:
          case 8876:
          case 8877:
          case 8878:
          case 8879:
          case 8880:
          case 8881:
          case 8882:
          case 8883:
          case 8884:
          case 8885:
          case 8886:
          case 8887:
          case 8888:
          case 8889:
          case 8890:
          case 8891:
          case 8892:
          case 8893:
          case 8894:
          case 8895:
          case 8896:
          case 8897:
          case 8898:
          case 8899:
          case 8900:
          case 8901:
          case 8902:
          case 8903:
          case 8904:
          case 8905:
          case 8906:
          case 8907:
          case 8908:
          case 8909:
          case 8910:
          case 8911:
          case 8912:
          case 8913:
          case 8914:
          case 8915:
          case 8916:
          case 8917:
          case 8918:
          case 8919:
          case 8920:
          case 8921:
          case 8922:
          case 8923:
          case 8924:
          case 8925:
          case 8926:
          case 8927:
          case 8928:
          case 8929:
          case 8930:
          case 8931:
          case 8932:
          case 8933:
          case 8934:
          case 8935:
          case 8936:
          case 8937:
          case 8938:
          case 8939:
          case 8940:
          case 8941:
          case 8942:
          case 8943:
          case 8944:
          case 8945:
          case 8946:
          case 8947:
          case 8948:
          case 8949:
          case 8950:
          case 8951:
          case 8952:
          case 8953:
          case 8954:
          case 8955:
          case 8956:
          case 8957:
          case 8958:
          case 8959:
          case 8960:
          case 8961:
          case 8962:
          case 8963:
          case 8964:
          case 8965:
          case 8966:
          case 8967:
          case 8968:
          case 8969:
          case 8970:
          case 8971:
          case 8972:
          case 8973:
          case 8974:
          case 8975:
          case 8976:
          case 8977:
          case 8978:
          case 8979:
          case 8980:
          case 8981:
          case 8982:
          case 8983:
          case 8984:
          case 8985:
          case 8986:
          case 8987:
          case 8988:
          case 8989:
          case 8990:
          case 8991:
          case 8992:
          case 8993:
          case 8994:
          case 8995:
          case 8996:
          case 8997:
          case 8998:
          case 8999:
          case 9000:
          case 9001:
          case 9002:
          case 9003:
          case 9004:
          case 9005:
          case 9006:
          case 9007:
          case 9008:
          case 9009:
          case 9010:
          case 9011:
          case 9012:
          case 9188:
          case 9189:
          case 9190:
          case 9191:
          case 9192:
          case 9193:
          case 9194:
          case 9195:
            return 4;
          case 8751:
          case 8753:
          case 8755:
          case 8757:
          case 8759:
          case 8761:
          case 8763:
          case 8765:
          case 8767:
          case 8769:
          case 8771:
          case 8773:
          case 8775:
          case 8777:
          case 8779:
          case 8781:
          case 8783:
          case 8785:
          case 8787:
          case 8789:
          case 8791:
          case 8793:
          case 8795:
          case 8797:
          case 8799:
          case 8801:
          case 8803:
          case 8805:
          case 8807:
          case 8809:
          case 8811:
          case 8813:
          case 8815:
          case 8817:
          case 8819:
          case 8821:
          case 8823:
          case 8825:
          case 8827:
          case 8829:
          case 8831:
          case 8833:
          case 8835:
          case 8837:
          case 8839:
          case 8841:
          case 8843:
          case 8845:
          case 8847:
          case 8849:
            result = 5;
            break;
          case 8752:
          case 8754:
          case 8756:
          case 8758:
          case 8760:
          case 8762:
          case 8764:
          case 8766:
          case 8768:
          case 8770:
          case 8772:
          case 8774:
          case 8776:
          case 8778:
          case 8780:
          case 8782:
          case 8784:
          case 8786:
          case 8788:
          case 8790:
          case 8792:
          case 8794:
          case 8796:
          case 8798:
          case 8800:
          case 8802:
          case 8804:
          case 8806:
          case 8808:
          case 8810:
          case 8812:
          case 8814:
          case 8816:
          case 8818:
          case 8820:
          case 8822:
          case 8824:
          case 8826:
          case 8828:
          case 8830:
          case 8832:
          case 8834:
          case 8836:
          case 8838:
          case 8840:
          case 8842:
          case 8844:
          case 8846:
          case 8848:
          case 8850:
            result = 6;
            break;
          case 9013:
          case 9014:
          case 9015:
          case 9016:
          case 9017:
          case 9018:
          case 9019:
          case 9020:
          case 9021:
          case 9022:
          case 9023:
          case 9024:
          case 9025:
          case 9026:
          case 9027:
          case 9028:
          case 9029:
          case 9030:
          case 9031:
          case 9032:
          case 9033:
          case 9034:
          case 9035:
          case 9036:
          case 9037:
          case 9038:
          case 9039:
          case 9040:
          case 9041:
          case 9042:
          case 9043:
          case 9044:
          case 9045:
          case 9046:
          case 9047:
          case 9048:
          case 9049:
          case 9050:
          case 9051:
          case 9052:
          case 9053:
          case 9054:
          case 9055:
          case 9056:
          case 9057:
          case 9058:
          case 9059:
          case 9060:
          case 9061:
          case 9062:
          case 9063:
          case 9064:
          case 9065:
          case 9066:
          case 9067:
          case 9068:
          case 9069:
          case 9070:
          case 9071:
          case 9072:
          case 9073:
          case 9074:
          case 9075:
          case 9076:
          case 9077:
          case 9078:
          case 9079:
          case 9080:
          case 9081:
          case 9082:
          case 9083:
          case 9084:
          case 9085:
          case 9086:
          case 9087:
          case 9088:
          case 9089:
          case 9090:
          case 9091:
          case 9092:
          case 9093:
          case 9094:
          case 9095:
          case 9096:
          case 9097:
          case 9098:
          case 9099:
          case 9100:
          case 9101:
          case 9102:
          case 9103:
          case 9104:
          case 9105:
          case 9106:
          case 9107:
          case 9108:
          case 9109:
          case 9110:
          case 9111:
          case 9112:
          case 9113:
          case 9114:
          case 9115:
          case 9116:
          case 9117:
          case 9118:
          case 9119:
          case 9120:
          case 9121:
          case 9122:
          case 9123:
          case 9124:
          case 9125:
          case 9126:
          case 9127:
          case 9128:
          case 9129:
          case 9130:
          case 9131:
          case 9132:
          case 9133:
          case 9134:
          case 9135:
          case 9136:
          case 9137:
          case 9138:
          case 9139:
          case 9140:
          case 9141:
          case 9142:
          case 9143:
          case 9144:
          case 9145:
          case 9146:
          case 9147:
          case 9148:
          case 9149:
          case 9150:
          case 9151:
          case 9152:
          case 9153:
          case 9154:
          case 9155:
          case 9156:
          case 9157:
          case 9158:
          case 9159:
          case 9160:
          case 9161:
          case 9162:
          case 9163:
          case 9164:
          case 9165:
          case 9166:
          case 9167:
          case 9168:
          case 9169:
          case 9170:
          case 9171:
          case 9172:
          case 9173:
          case 9174:
          case 9175:
          case 9176:
          case 9177:
          case 9178:
          case 9179:
          case 9180:
          case 9181:
          case 9182:
          case 9183:
          case 9184:
          case 9185:
          case 9186:
          case 9187:
            return result;
          case 9196:
          case 9197:
          case 9198:
          case 9199:
            goto LABEL_6;
          case 9200:
          case 9202:
            result = 12;
            break;
          case 9201:
          case 9203:
            result = 16;
            break;
          default:
            if ((a1 - 5552) < 0x10)
              goto LABEL_14;
            break;
        }
        break;
    }
  }
  else
  {
    v3 = (a1 - 520);
    if (v3 >> 1 > 0x8BE)
    {
      if ((a1 - 427) < 9)
        return 4;
    }
    else
    {
      return ((uint64_t (*)(uint64_t))((char *)&loc_1C4C085DC + 4 * byte_1C69DD2B0[v3]))(1);
    }
  }
  return result;
}

uint64_t sub_1C4C0864C()
{
  return 32;
}

uint64_t sub_1C4C08694(uint64_t a1, int a2)
{
  return byte_1C6A3C70C[a2] & 1;
}

uint64_t sub_1C4C086A8(uint64_t a1, int a2)
{
  return (byte_1C6A3C70C[a2] >> 1) & 1;
}

uint64_t sub_1C4C086BC(uint64_t a1, int a2)
{
  return (byte_1C6A3C70C[a2] >> 2) & 1;
}

void LLVMInitializeAGX3AsmParser_0()
{
  qword_1EF8F6978 = (uint64_t)sub_1C4C086F0;
  byte_1EF8EFB90 = 1;
}

void sub_1C4C086F0()
{
  void *PermanentLibrary;
  void *v1;
  void (*v2)(void *);
  void (*v3)(void *);
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary("/usr/local/lib/libLLVMInternal.dylib", (uint64_t)__p);
  if (PermanentLibrary != &llvm::sys::DynamicLibrary::Invalid)
  {
    v1 = PermanentLibrary;
    if (byte_1EF8F66AA == 1)
    {
      v2 = (void (*)(void *))dlsym(PermanentLibrary, "LLVMInitializeAGX3InstPrinterTgt");
      if (v2)
        v2(&unk_1EF8F6858);
    }
    if (byte_1EF8EFB90 == 1)
    {
      v3 = (void (*)(void *))dlsym(v1, "LLVMInitializeAGX3AsmParserTgt");
      if (v3)
        v3(&unk_1EF8F6858);
    }
  }
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C4C087B4()
{
  llvm::MCAsmInfoDarwin *v0;
  uint64_t result;

  v0 = (llvm::MCAsmInfoDarwin *)operator new();
  result = llvm::MCAsmInfoDarwin::MCAsmInfoDarwin(v0);
  *(_QWORD *)result = &off_1E80BF330;
  *(_QWORD *)(result + 48) = "//";
  *(_QWORD *)(result + 56) = 2;
  *(_BYTE *)(result + 408) = 1;
  *(_DWORD *)(result + 8) = 8;
  return result;
}

_QWORD *sub_1C4C0880C()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E80C0570;
  result[1] = &unk_1C6A31F88;
  result[4] = 0;
  result[5] = 0;
  result[2] = "1000";
  result[3] = 0;
  *((_DWORD *)result + 10) = 9284;
  return result;
}

double sub_1C4C08860()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_QWORD *)v0 = "0";
  *(_QWORD *)(v0 + 8) = 2948;
  *(_QWORD *)(v0 + 24) = &off_1E80BF570;
  *(_QWORD *)(v0 + 48) = &unk_1C69DE9B6;
  *(_QWORD *)(v0 + 56) = &unk_1C69E60C8;
  *(_QWORD *)(v0 + 64) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(_QWORD *)(v0 + 72) = "IR16tup16_with_hsub3_hsub4_hsub5_hsub6_hsub7_hsub8_hsub9_hsub10";
  *(_QWORD *)(v0 + 40) = &unk_1C69FCDC0;
  *(_QWORD *)(v0 + 32) = 0x17800000080;
  *(_DWORD *)(v0 + 96) = 231;
  *(_QWORD *)(v0 + 80) = &unk_1C69E6650;
  *(_QWORD *)(v0 + 88) = &unk_1C69E7030;
  *(_QWORD *)(v0 + 104) = &unk_1C6A0AF18;
  *(_QWORD *)(v0 + 144) = &unk_1C6A08E78;
  *(_QWORD *)(v0 + 152) = &unk_1C6A08E84;
  *(_QWORD *)(v0 + 128) = &unk_1C6A08E90;
  *(_QWORD *)(v0 + 136) = &unk_1C6A09ED4;
  *(_QWORD *)&result = 0x20800000208;
  *(_OWORD *)(v0 + 112) = xmmword_1C676CC40;
  return result;
}

_QWORD *sub_1C4C08964(__int128 *a1, char *a2, size_t a3, const void *a4, size_t a5)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *result;

  if (a3)
    v8 = a2;
  else
    v8 = "g15";
  if (a3)
    v9 = a3;
  else
    v9 = 3;
  v10 = operator new();
  result = (_QWORD *)llvm::MCSubtargetInfo::MCSubtargetInfo(v10, a1, v8, v9, v8, v9, a4, a5, (uint64_t)&off_1E812D230, 92, (uint64_t)&off_1E812E978, 19, (uint64_t)&unk_1C6A3B098, (uint64_t)&unk_1C6A3B300, (uint64_t)&unk_1C6A3B35C, 0, 0, 0);
  *result = &off_1E81314C0;
  return result;
}

uint64_t sub_1C4C08A40(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5, char a6)
{
  return llvm::createMachOStreamer(a1, a2, a3, a4, a5, a6, 0);
}

_QWORD *sub_1C4C08A48(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E8131530;
  result[1] = a1;
  return result;
}

uint64_t sub_1C4C08A88(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *, unsigned int *))(*a1 + 32))(a1, a2) & 1) != 0
    || (result = (*(uint64_t (**)(_QWORD *, unsigned int *))(*a1 + 24))(a1, a2), (_DWORD)result))
  {
    v10 = (uint64_t *)a1[1];
    v11 = *a2;
    v12 = *v10;
    if ((*(_WORD *)(*v10 + 48 * *a2 + 8) & 0x820) == 0 && a2[6] != 0)
    {
      v14 = sub_1C4C2FD5C((unsigned __int16)*a2);
      v15 = v14 & ~(v14 >> 31);
      if (v11 == 50)
        v15 = 3;
      if (*(_BYTE *)(*(_QWORD *)(v12 + 48 * v11 + 40) + 6 * v15 + 3) != 4)
        a3 = 0;
      v21 = 0;
      v16 = *((_QWORD *)a2 + 2);
      v17 = *(unsigned __int8 *)(v16 + 16 * v15);
      if (v17 == 5)
      {
        v18 = &v21;
        llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v16 + 16 * v15 + 8), &v21);
        v20 = v19;
        result = 0;
        if (!v20)
          return result;
        goto LABEL_17;
      }
      if (v17 == 2)
      {
        v18 = (uint64_t *)(v16 + 16 * v15 + 8);
LABEL_17:
        *a5 = a3 + (*v18 << 16 >> 16);
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C4C08BEC(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  unsigned int v4;
  unsigned __int8 v5;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  int v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = &off_1E81316D0;
  v12[1] = a1;
  v13 = v12;
  v1 = sub_1C4C0B384(v12);
  v2 = v13;
  if (v13 == v12)
  {
    v3 = (void (**)(_QWORD *))(v12[0] + 32);
    v2 = v12;
LABEL_3:
    (*v3)(v2);
    goto LABEL_4;
  }
  if (v13)
  {
    v3 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_3;
  }
LABEL_4:
  if (v1 > 5)
    v4 = 0;
  else
    v4 = dword_1C6A3EB50[v1];
  v5 = atomic_load((unsigned __int8 *)&qword_1EF8F6778);
  v6 = &unk_1EF8F6000;
  if ((v5 & 1) == 0)
  {
    v11 = __cxa_guard_acquire(&qword_1EF8F6778);
    v6 = &unk_1EF8F6000;
    if (v11)
    {
      dword_1EF8F6770 = 0;
      __cxa_guard_release(&qword_1EF8F6778);
      v6 = (_DWORD *)&unk_1EF8F6000;
    }
  }
  v7 = v6[476];
  if (dword_1EF8F6730)
    v8 = word_1EF8F66B8 == 0;
  else
    v8 = 1;
  if (!v8)
    v7 = dword_1EF8F6730;
  if (v7 >= 0x11)
    v9 = v4;
  else
    v9 = v7;
  if (v7)
    return v9;
  else
    return v4;
}

uint64_t sub_1C4C08D14()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Maximum number of flag registers that can be allocated, idential to AGX3_FLAG_REG_LIMIT EV and overrides it";
  *((_QWORD *)&v1 + 1) = 107;
  sub_1C615C08C(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1EF8F66B0, &dword_1C475E000);
}

void sub_1C4C08D60()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4C08D74()
{
  return 0;
}

void sub_1C4C08D80()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4C08D94(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  llvm::raw_ostream *v6;
  int *v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *result;
  _WORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *(llvm::raw_ostream **)(a1 + 16);
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 572552560;
    *v5 = 1885810185;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.gpu \"", 7uLL);
  }
  switch(a2)
  {
    case 0:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 28:
    case 29:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "unknown";
        goto LABEL_6;
      }
      *(int *)((char *)v7 + 3) = 1853321070;
      v13 = 1852534389;
      goto LABEL_63;
    case 1:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v12 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v12) <= 2)
      {
        v8 = "g15";
        v9 = 3;
        goto LABEL_7;
      }
      *(_BYTE *)(v12 + 2) = 53;
      *(_WORD *)v12 = 12647;
      v14 = *((_QWORD *)v6 + 4) + 3;
      goto LABEL_64;
    case 4:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15g-a0";
        goto LABEL_6;
      }
      v15 = 811674983;
      goto LABEL_55;
    case 5:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15g-b0";
        goto LABEL_6;
      }
      v15 = 811740519;
      goto LABEL_55;
    case 6:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15s-a0";
        goto LABEL_6;
      }
      v16 = 811674995;
      goto LABEL_60;
    case 7:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15s-b0";
        goto LABEL_6;
      }
      v16 = 811740531;
      goto LABEL_60;
    case 8:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15c-a0";
        goto LABEL_6;
      }
      v17 = 811674979;
      goto LABEL_50;
    case 9:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15c-b0";
        goto LABEL_6;
      }
      v17 = 811740515;
LABEL_50:
      *(int *)((char *)v7 + 3) = v17;
      v13 = 1664430439;
      goto LABEL_63;
    case 14:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g16p-a0";
        goto LABEL_6;
      }
      v18 = 811674992;
      goto LABEL_62;
    case 15:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g16p-b0";
        goto LABEL_6;
      }
      v18 = 811740528;
      goto LABEL_62;
    case 16:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g16g-a0";
        goto LABEL_6;
      }
      v19 = 811674983;
      goto LABEL_58;
    case 17:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15g-c0";
        goto LABEL_6;
      }
      v15 = 811806055;
LABEL_55:
      *(int *)((char *)v7 + 3) = v15;
      v13 = 1731539303;
      goto LABEL_63;
    case 20:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g17p-a0";
        goto LABEL_6;
      }
      *(int *)((char *)v7 + 3) = 811674992;
      v13 = 1882665319;
      goto LABEL_63;
    case 25:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g16g-b0";
        goto LABEL_6;
      }
      v19 = 811740519;
LABEL_58:
      *(int *)((char *)v7 + 3) = v19;
      v13 = 1731604839;
      goto LABEL_63;
    case 26:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 6uLL)
      {
        v8 = "g15s-b1";
        goto LABEL_6;
      }
      v16 = 828517747;
LABEL_60:
      *(int *)((char *)v7 + 3) = v16;
      v13 = 1932865895;
      goto LABEL_63;
    case 27:
      v6 = *(llvm::raw_ostream **)(a1 + 16);
      v7 = (int *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
      {
        v18 = 828517744;
LABEL_62:
        *(int *)((char *)v7 + 3) = v18;
        v13 = 1882599783;
LABEL_63:
        *v7 = v13;
        v14 = *((_QWORD *)v6 + 4) + 7;
LABEL_64:
        *((_QWORD *)v6 + 4) = v14;
      }
      else
      {
        v8 = "g16p-b1";
LABEL_6:
        v9 = 7;
LABEL_7:
        llvm::raw_ostream::write(v6, v8, v9);
      }
LABEL_8:
      result = *(llvm::raw_ostream **)(a1 + 16);
      v11 = (_WORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v11 <= 1uLL)
        return llvm::raw_ostream::write(result, "\"\n", 2uLL);
      *v11 = 2594;
      *((_QWORD *)result + 4) += 2;
      return result;
    default:
      goto LABEL_8;
  }
}

void sub_1C4C091A4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4C091B8(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 272) + 24) + 8);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFFFF00F | (16 * a2);
  return result;
}

uint64_t sub_1C4C091DC(uint64_t a1, unsigned int *a2)
{
  if (dword_1C6A3F13C[*a2])
    __asm { BR              X11 }
  return 0;
}

void sub_1C4C0A32C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6160124(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A340(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163E84(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A354(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C23ADC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A368(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FDD4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A37C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C1560C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A390(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F6B0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A3A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F880(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A3B8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F880(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A3CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C15FD4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A3E0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C15A28(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A3F4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int *v5;

  sub_1C6161B18(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A408(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C4C14070(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A41C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F2EC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A430(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F2EC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A444(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615F4CC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A458(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C4C13C9C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A46C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EF70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A480(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EF70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A494(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EF70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A4A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615F12C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A4BC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EF70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A4D0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615F12C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A4E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615F12C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A4F8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615F12C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A50C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EF70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A520(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C4C14AF4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A534(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C615EDB0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A548(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C4C143F0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A55C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C24494(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A570(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61695A0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A584(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61695A0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A598(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169710(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A5AC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169710(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A5C0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6161D14(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A5D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6161D14(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A5E8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C24AF4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A5FC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FFDC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A610(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615C8FC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A624(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615CC3C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A638(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169408(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A64C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169408(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A660(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C247A0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A674(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169A14(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A688(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169A14(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A69C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169880(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A6B0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169880(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A6C4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169D40(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A6D8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169D40(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A6EC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169BAC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A700(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169BAC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A714(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615D064(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A728(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615D414(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A73C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615D63C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A750(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615D63C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A764(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616A428(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A778(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615CCB0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A78C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615CFF0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A7A0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615DB90(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A7B4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615DB90(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A7C8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615D9EC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A7DC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615E20C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A7F0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615DED0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A804(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615DED0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A818(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615DD2C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A82C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615E3A8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A840(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615E06C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A854(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615E544(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A868(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616A0B4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A87C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616A0B4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A890(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616400C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A8A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616496C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A8B8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6166C14(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A8CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6166FA0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A8E0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6166DB4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A8F4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6167704(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A908(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6167140(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A91C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C61678F4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A930(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C616732C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A944(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6167AE4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A958(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6167518(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A96C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6167CD4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A980(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6165B5C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A994(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616419C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A9A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6164AFC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A9BC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61652CC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A9D0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6165D00(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A9E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6165634(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0A9F8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616605C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA0C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6165474(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA20(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6165EA4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA34(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61657DC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA48(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6166200(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA5C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616432C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA70(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6164C8C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA84(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61630A8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AA98(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6162064(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AAAC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6162064(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AAC0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6161EB0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AAD4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6161EB0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AAE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6162F1C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AAFC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6162F1C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB10(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61633B8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB24(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163544(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB38(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163230(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB4C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616026C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB60(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6168F84(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB74(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61692A4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB88(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61603B4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AB9C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61636CC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ABB0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163858(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ABC4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61639E8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ABD8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6162258(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ABEC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6162600(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC00(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616244C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC14(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6162A00(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC28(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6162A00(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC3C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61627F4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC50(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61627F4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC64(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163CF8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC78(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163CF8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AC8C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6163B70(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ACA0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C4C17624(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ACB4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FC4C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ACC8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FC4C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ACDC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61644BC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ACF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6164E1C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD04(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6167EC4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD18(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6168250(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD2C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6168064(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD40(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6168064(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD54(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C61683F0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD68(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C61689B4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD7C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C61685DC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AD90(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6168BA4(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ADA4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C61687C8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ADB8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;

  sub_1C6168D94(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ADCC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61663B8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ADE0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616464C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0ADF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6164FAC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE08(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616655C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE1C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61668B8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE30(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6166700(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE44(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616599C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE58(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6166A5C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE6C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61647DC(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE80(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616513C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AE94(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FA4C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AEA8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615FA4C(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AEBC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616A288(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AED0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _OWORD *v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C616A288(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AEE4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169008(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AEF8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169120(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AF0C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169ED8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AF20(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C6169ED8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AF34(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C615E6E0(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

void sub_1C4C0AF48(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  _DWORD *v5;

  sub_1C61691C8(v5, v4, a3, v3);
  JUMPOUT(0x1C4C0A310);
}

BOOL sub_1C4C0AF6C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _BOOL8 result;
  uint64_t (*v9)();
  _BYTE v10[993];
  __int128 v11;
  uint64_t v12;

  if (byte_1EF8F6800)
    return 1;
  if (!atomic_load(qword_1EF8F6840))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F6840, (void *(*)(void))sub_1C4C0B298, (void (*)(void *))sub_1C615C818);
  if (!*(_BYTE *)qword_1EF8F6840[0])
    return 1;
  v12 = 0;
  v11 = 0u;
  v9 = sub_1C4C9CFD0(a2);
  ((void (*)(uint64_t, _BYTE *))v9)(a3, v10);
  result = sub_1C4C96358();
  if (!result)
  {
    if (a4)
      llvm::report_fatal_error((llvm *)"Invalid instruction specification (validation failed.)", (const char *)1);
  }
  return result;
}

uint64_t sub_1C4C0B04C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, int a8)
{
  int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void **p_src;
  _QWORD *v26;
  void **v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  void *__src;
  uint64_t v33;
  _BYTE v34[128];
  char v35;
  uint64_t v36;

  v14 = a1;
  v36 = *MEMORY[0x1E0C80C00];
  if (a8 && !sub_1C4C0AF6C(a1, *a5, a6, 0))
    return 1;
  v17 = sub_1C615C7CC(*a5, a6);
  if (!v17)
    return 0;
  v18 = v17;
  __src = v34;
  v33 = 0x800000000;
  v35 = 0;
  v31 = v17;
  v19 = *a2 + 48 * v17;
  v20 = *(unsigned __int16 *)(v19 + 2);
  if (*(_WORD *)(v19 + 2))
  {
    v24 = 0;
    p_src = &__src;
    do
    {
      if (v24 >= HIDWORD(v33))
      {
        v27 = p_src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)p_src, (uint64_t)v34, v24 + 1, 16);
        p_src = v27;
        v24 = v33;
      }
      v26 = (char *)__src + 16 * v24;
      *v26 = 0;
      v26[1] = 0;
      v24 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      --v20;
    }
    while (v20);
  }
  v28 = v14;
  v29 = a3;
  v30 = a4;
  v15 = sub_1C615C1EC((uint64_t)&v28, v18, &v31);
  *(_OWORD *)a7 = v31;
  if (&v31 != (__int128 *)a7)
  {
    v21 = (void **)(a7 + 16);
    v22 = v33;
    v23 = *(unsigned int *)(a7 + 24);
    if (v23 >= v33)
    {
      if ((_DWORD)v33)
        memmove(*v21, __src, 16 * v33);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a7 + 28) < v33)
    {
      *(_DWORD *)(a7 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a7 + 16, a7 + 32, v22, 16);
    }
    else if ((_DWORD)v23)
    {
      memmove(*v21, __src, 16 * v23);
LABEL_13:
      if (v23 != v33)
        memcpy((char *)*v21 + 16 * v23, (char *)__src + 16 * v23, 16 * v33 - 16 * v23);
LABEL_15:
      *(_DWORD *)(a7 + 24) = v22;
      goto LABEL_16;
    }
    v23 = 0;
    goto LABEL_13;
  }
LABEL_16:
  *(_BYTE *)(a7 + 160) = v35;
  if (__src != v34)
    free(__src);
  return v15;
}

_BYTE *sub_1C4C0B298()
{
  _BYTE *v0;

  v0 = (_BYTE *)operator new();
  *v0 = os_variant_has_internal_diagnostics();
  return v0;
}

uint64_t sub_1C4C0B2E0()
{
  __int128 v1;
  char v2;
  _BYTE *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Disable InstrSpec validation (AGX3). Can speed up compilation time.";
  *((_QWORD *)&v1 + 1) = 67;
  sub_1C615C834((uint64_t)&unk_1EF8F6780, "disable-instrspec-validation", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F6780, &dword_1C475E000);
}

uint64_t sub_1C4C0B354(int a1)
{
  return dword_1C6A5E31C[a1];
}

uint64_t sub_1C4C0B364(int a1)
{
  return dword_1C6A5E698[a1];
}

uint64_t sub_1C4C0B374(int a1)
{
  return dword_1C6A5F348[a1];
}

uint64_t sub_1C4C0B384(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  void (**v7)(void);
  _DWORD v9[6];
  int v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v1 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  do
  {
    v9[v1] = v1;
    ++v1;
  }
  while (v1 != 6);
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (v2 != a1)
    {
      v3 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v2 + 16))(a1[3]);
      v12 = v3;
      if (!v3)
        goto LABEL_8;
LABEL_10:
      if (v3 == v11)
      {
        v14 = v13;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v13);
      }
      else
      {
        v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      }
      goto LABEL_12;
    }
    v12 = v11;
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v11);
    v3 = v12;
    if (v12)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
  }
LABEL_8:
  v14 = 0;
LABEL_12:
  v4 = 0;
  do
  {
    v10 = *(_DWORD *)((char *)v9 + (_QWORD)v4);
    if (!v14)
    {
      sub_1C485C2F0();
      goto LABEL_26;
    }
    if (((*(uint64_t (**)(_QWORD *, int *))(*v14 + 48))(v14, &v10) & 1) != 0)
      break;
    ++v4;
  }
  while (v4 != (unsigned int *)24);
  v4 = (_DWORD *)((char *)v9 + (_QWORD)v4);
  v5 = v14;
  if (v14 == v13)
  {
    v6 = (void (**)(_QWORD *))(v13[0] + 32);
    v5 = v13;
LABEL_18:
    (*v6)(v5);
    goto LABEL_19;
  }
LABEL_26:
  if (v5)
  {
    v6 = (void (**)(_QWORD *))(*v5 + 40);
    goto LABEL_18;
  }
LABEL_19:
  if (v12 == v11)
  {
    v7 = (void (**)(void))(v11[0] + 32);
    goto LABEL_23;
  }
  if (v12)
  {
    v7 = (void (**)(void))(*v12 + 40);
LABEL_23:
    (*v7)();
  }
  return *v4;
}

uint64_t sub_1C4C0B52C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E8131718;
  v5[1] = a1;
  v6 = v5;
  v1 = sub_1C4C0B384(v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return v1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return v1;
}

void sub_1C4C0B5D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4C0B5E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81316D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4C0B618(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81316D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4C0B634(uint64_t a1, unsigned int *a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C0B654 + 4 * byte_1C6A59E38[*a2]))();
}

uint64_t sub_1C4C0B654@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 298);
}

void sub_1C4C0B68C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4C0B6A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8131718;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4C0B6D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8131718;
  a2[1] = v2;
  return result;
}

BOOL sub_1C4C0B6F0(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_1C6A5F6C8[*a2];
  v10 = 0u;
  v11 = 0u;
  v9 = v4;
  do
  {
    *(uint64_t *)((char *)&v9 + v2) &= *(_QWORD *)(v3 + 192 + v2);
    v2 += 8;
  }
  while (v2 != 40);
  v5 = 0;
  do
  {
    v6 = *(uint64_t *)((char *)&v9 + v5);
    if (v6)
      break;
    v7 = v5 == 32;
    v5 += 8;
  }
  while (!v7);
  return v6 != 0;
}

int8x8_t sub_1C4C0B76C(_DWORD *a1, uint64_t a2, unsigned int a3, BOOL *a4, int8x8_t *a5, uint64_t a6)
{
  unint64_t v6;
  uint64x2_t v7;
  uint64_t v8;
  int8x8_t result;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3 + 8);
  *a4 = (v6 & 0x40) != 0;
  v7 = (uint64x2_t)vdupq_n_s64(v6);
  *a5 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F920), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F910)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F940), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F930)))), (int8x8_t)0x101010101010101);
  v8 = HIDWORD(v6) & 3;
  if (*a1 < 4u)
  {
    *(_DWORD *)a6 = v8;
    result = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F950)), (int8x8_t)0x300000003);
    *(int8x8_t *)(a6 + 4) = result;
  }
  else
  {
    *(_DWORD *)(a6 + 12) = v8;
    result = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_1C6A5F950)), (int8x8_t)0x300000003);
    *(int8x8_t *)(a6 + 16) = result;
    *(_DWORD *)(a6 + 24) = (v6 >> 46) & 3;
  }
  return result;
}

double sub_1C4C0B830(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  BOOL v13[16];

  *a3 = 34;
  v7 = sub_1C4C2FD5C(*a2);
  *(_DWORD *)v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, v13, (int8x8_t *)&v10 + 1, (uint64_t)&v11);
  if (*a1 >= 4u)
    *(_QWORD *)&v10 = 0x2700000003;
  v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(_DWORD *)(a4 + 48) = *(_DWORD *)v13;
  return result;
}

__n128 sub_1C4C0B8D8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  *a3 = 114;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v18 + 5, (int8x8_t *)&v15.n128_i8[8], (uint64_t)&v16);
  v10 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v10 + 16 * v9) == 5)
    v11 = 0;
  else
    v11 = *(_DWORD *)(v10 + 16 * v9 + 8) & 0xFFFFFF;
  LODWORD(v18) = v11;
  if (*a1 >= 4u)
    *(_QWORD *)&v14 = 0x7100000003;
  v12 = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(_OWORD *)(a4 + 48) = v12;
  *(_QWORD *)(a4 + 64) = v18;
  result = v15;
  *(_OWORD *)a4 = v14;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C0B9D0(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double result;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  BOOL v20[16];

  *a3 = 89;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  *(_DWORD *)v20 = 0;
  v18 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  sub_1C4C0B76C(a1, a2, v9, v20, (int8x8_t *)((char *)&v17[1] + 4), (uint64_t)&v18);
  v12 = *(_QWORD *)(a2 + 16);
  WORD6(v17[1]) = *(_QWORD *)(v12 + 16 * v10 + 8);
  HIWORD(v17[1]) = *(_WORD *)(v12 + 16 * v11 + 8) & 0xFFF;
  v13 = sub_1C4C915C4(v7);
  if ((v13 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  if ((_DWORD)v13 != 65)
  {
    *((_QWORD *)&v16 + 1) = 0x200000007;
    LODWORD(v16) = 26;
  }
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v17 + 12) = 0x5A00000003;
  v14 = v18;
  *(_OWORD *)(a4 + 32) = v17[1];
  *(_OWORD *)(a4 + 48) = v14;
  *(_OWORD *)(a4 + 64) = v19;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v20;
  result = *(double *)&v16;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v17[0];
  return result;
}

double sub_1C4C0BB1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  BOOL v19[16];

  *a3 = 89;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v19 = 0;
  v17 = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)v16);
  v11 = *((_QWORD *)a2 + 2);
  LOBYTE(v16[1]) = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v19, (int8x8_t *)((char *)&v16[2] + 4), (uint64_t)&v17);
  WORD6(v16[2]) = *(_QWORD *)(v11 + 16 * v10 + 8);
  v12 = sub_1C4C915C4(*(_DWORD *)a2);
  if ((v12 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  if ((_DWORD)v12 != 65)
  {
    *((_QWORD *)&v16[0] + 1) = 0x200000007;
    LODWORD(v16[0]) = 26;
  }
  if (*a1 >= 4u)
    *(_QWORD *)((char *)&v16[1] + 12) = 0x5A00000003;
  v13 = v17;
  *(_OWORD *)(a4 + 32) = v16[2];
  *(_OWORD *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 64) = v18;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v19;
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a4 = v16[0];
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

uint64_t sub_1C4C0BC90(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;

  v7 = result;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = (unsigned __int8 *)(v8 + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  v10 = *v9;
  if (v10 == 1)
  {
    *(_DWORD *)(a4 + 8) = sub_1C4C26AB8(*(_QWORD **)(result + 24), (unsigned __int8 *)(v8 + 16 * a3));
    *(_DWORD *)(a4 + 12) = sub_1C4C26850(v7, (uint64_t)v9);
    result = sub_1C4C264D0(*(_QWORD *)(v7 + 24), v9, *(_DWORD *)(a4 + 8));
    *(_QWORD *)a4 = result;
    v11 = a3 + 1;
LABEL_44:
    v32 = *(_QWORD *)(a2 + 16) + 16 * v11;
LABEL_45:
    v23 = *(_QWORD *)(v32 + 8);
    goto LABEL_46;
  }
  if (v10 != 5)
  {
    if (*v9 == 2)
    {
      *(_DWORD *)(a4 + 8) = 4;
      *(_DWORD *)(a4 + 12) = sub_1C4C26750(a2);
      v16 = *(_DWORD *)(a4 + 8);
LABEL_43:
      result = sub_1C4C264D0(*(_QWORD *)(v7 + 24), v9, v16);
      *(_QWORD *)a4 = result;
      v11 = a3 + 2;
      goto LABEL_44;
    }
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v8 + 16 * a3 + 8);
  if (*(_BYTE *)v12 != 4)
  {
LABEL_15:
    v17 = 0;
    goto LABEL_16;
  }
  if (*v9 == 2 || (*(_DWORD *)(v12 + 16) - 9) < 2)
  {
    *(_DWORD *)(a4 + 8) = 4;
    v14 = *(_DWORD *)(v12 + 32);
    if (v14 == 2)
    {
      v15 = 1;
    }
    else if (v14 == 4)
    {
      v15 = 2;
    }
    else
    {
      v15 = 3;
    }
    *(_DWORD *)(a4 + 12) = v15;
    v16 = 4;
    goto LABEL_43;
  }
  v17 = v12 - 8;
LABEL_16:
  if (!*(_DWORD *)(v17 + 24))
  {
    v29 = *(_DWORD *)(v17 + 40);
    if (v29 == 4)
      v30 = 2;
    else
      v30 = 3;
    if (v29 == 2)
      v31 = 1;
    else
      v31 = v30;
    *(_DWORD *)(a4 + 8) = 3;
    *(_DWORD *)(a4 + 12) = v31;
    *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v17 + 32) + 16) & 0x1FF;
    v32 = v8 + 16 * (a3 + 1);
    goto LABEL_45;
  }
  v18 = v8 + 16 * a3;
  v19 = *(_QWORD *)(v18 + 8);
  if (v19)
    v20 = v19 - 8;
  else
    v20 = 0;
  v21 = *(_WORD *)(*(_QWORD *)(v20 + 32) + 16) & 0x1FFF;
  if (a3)
    v22 = 1;
  else
    v22 = 2;
  v23 = *(_QWORD *)(v8 + 16 * (v22 + a3) + 8);
  *(_DWORD *)(a4 + 8) = 5;
  *(_WORD *)a4 = v21;
  v24 = *(_QWORD *)(v18 + 8);
  if (v24)
    v25 = v24 - 8;
  else
    v25 = 0;
  v26 = *(_DWORD *)(v25 + 40);
  if (v26 == 4)
    v27 = 2;
  else
    v27 = 3;
  if (v26 == 2)
    v28 = 1;
  else
    v28 = v27;
  *(_DWORD *)(a4 + 12) = v28;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(v25 + 24) - 4;
LABEL_46:
  *(_DWORD *)(a4 + 20) = (v23 >> 20) & 0xF;
  return result;
}

double sub_1C4C0BEB8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
  {
    *(_QWORD *)&result = sub_1C4C0BF64(a1, a2, a3, a4).n128_u64[0];
  }
  else if ((sub_1C4C2627C((uint64_t)a2) & 1) != 0)
  {
    if (*a1 >= 4u)
      sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C4C0C228(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C0C0AC(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C0BF64(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 76;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 0;
  v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0C0AC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 78;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 80;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0C228(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 79;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 81;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C4C0C39C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = sub_1C4C0E430(a1, (unsigned __int16 *)a2, a3, a4);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a4 + 25) = *(_BYTE *)(v8 + 16 * a3) != 2 && (*(_BYTE *)(v8 + 16 * (a3 + 1) + 8) & 8) != 0;
  return result;
}

uint64_t sub_1C4C0C3FC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  result = sub_1C4C0C39C(a1, a2, a3, a4);
  v9 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v9 + 16 * a3) == 2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = (*(_QWORD *)(v9 + 16 * (a3 + 1) + 8) >> 8) & 7;
    if (v10 >= 5)
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  *a5 = v10;
  return result;
}

double sub_1C4C0C474(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
  {
    *(_QWORD *)&result = sub_1C4C0C520(a1, a2, a3, a4).n128_u64[0];
  }
  else if ((sub_1C4C2627C((uint64_t)a2) & 1) != 0)
  {
    if (*a1 >= 4u)
      sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C4C0C7E4(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C0C668(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C0C520(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 94;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 0;
  v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0C668(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 101;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 100;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0C7E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 102;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 101;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C0C958(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C4C0CA04(a1, a2, a3, a4);
  if ((sub_1C4C2627C((uint64_t)a2) & 1) != 0)
  {
    if (*a1 >= 4u)
      sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C4C0CD38(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C0CB88(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1C4C0CA04(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 81;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 0;
  v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  result = *(double *)&v25;
  v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1C4C0CB88(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 82;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 84;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C0CD38(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  BOOL v28[16];

  *a3 = 83;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v17, (uint64_t)&v23 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 85;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C0CEEC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C4C0CF98(a1, a2, a3, a4);
  if ((sub_1C4C2627C((uint64_t)a2) & 1) != 0)
  {
    if (*a1 >= 4u)
      sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C615D488(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C0D11C(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1C4C0CF98(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 86;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 0;
  v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  result = *(double *)&v25;
  v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1C4C0D11C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 87;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 88;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C0D2CC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 5;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 10;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0D46C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 6;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 11;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0D610(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 11;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 16;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0D7B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 13;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 18;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0D95C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 14;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 19;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0DB04(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 5;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 10;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0DCAC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 6;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 11;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0DE4C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 11;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 16;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C0DFF0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 14;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 19;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C0E194(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BOOL v21[16];

  *a3 = 106;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v11 = *((_QWORD *)a2 + 2);
  LOBYTE(v17) = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v21, (int8x8_t *)&v18 + 1, (uint64_t)&v19);
  v12 = 0;
  if (*(_BYTE *)(v11 + 16 * v10) != 5)
    v12 = *(_DWORD *)(v11 + 16 * v10 + 8);
  HIDWORD(v17) = v12;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      LODWORD(v18) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD1(v18) = 105;
  }
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 64) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v21;
  result = *(double *)&v16;
  v15 = v17;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

__n128 sub_1C4C0E2F8(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *a3 = 146;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  LOBYTE(v16) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21 + 12, (int8x8_t *)&v19, (uint64_t)&v19 + 12);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v16 + 12);
  v11 = *a1;
  if (*a1)
  {
    BYTE8(v19) = 1;
    if (v11 >= 4)
      v18.n128_u64[1] = 0x9000000004;
  }
  v12 = v20;
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = v21;
  v13 = v16;
  *(_OWORD *)a4 = v15;
  *(_OWORD *)(a4 + 16) = v13;
  result = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

uint64_t sub_1C4C0E430(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;

  v6 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    v9 = *(_QWORD *)(v7 + 16 * a3 + 8);
    if (v9)
      v10 = v9 - 8;
    else
      v10 = 0;
    if (!*(_DWORD *)(v10 + 24))
    {
      v11 = *(_DWORD *)(v10 + 40);
      if (v11 == 4)
        v12 = 2;
      else
        v12 = 3;
      if (v11 == 2)
        v13 = 1;
      else
        v13 = v12;
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v13;
      *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v10 + 32) + 16) & 0x1FF;
    }
    v14 = *(_DWORD *)(v7 + 16 * (a3 + 1) + 8);
    goto LABEL_28;
  }
  v16 = result;
  if (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
    v17 = (_DWORD *)(a4 + 8);
LABEL_19:
    v18 = sub_1C4C26750((uint64_t)a2);
    goto LABEL_21;
  }
  result = sub_1C4C26AB8(*(_QWORD **)(result + 24), (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = result;
  v17 = (_DWORD *)(a4 + 8);
  if ((_DWORD)result == 4)
    goto LABEL_19;
  if ((_DWORD)result == 1)
  {
    *(_WORD *)a4 = *(_QWORD *)(v7 + 16 * v6 + 8);
    *(_DWORD *)(a4 + 12) = 1;
    goto LABEL_22;
  }
  v18 = sub_1C4C26850(v16, (uint64_t)v8);
LABEL_21:
  *(_DWORD *)(a4 + 12) = v18;
  result = sub_1C4C264D0(*(_QWORD *)(v16 + 24), v8, *(_DWORD *)(a4 + 8));
  *(_QWORD *)a4 = result;
LABEL_22:
  if (*v17 == 4)
  {
    v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 2) + 8);
    *(_BYTE *)(a4 + 16) = 0;
LABEL_27:
    *(_BYTE *)(a4 + 24) = (v14 & 0x10) != 0;
LABEL_28:
    v19 = (v14 >> 20) & 0xF;
    goto LABEL_29;
  }
  if (*v17 != 1)
  {
    v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8);
    *(_BYTE *)(a4 + 16) = (v14 & 0x20) != 0;
    goto LABEL_27;
  }
  v19 = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_29:
  *(_DWORD *)(a4 + 20) = v19;
  return result;
}

__n128 sub_1C4C0E5F0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  *a3 = 105;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v29 = sub_1C4C2FD5C(v7);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = v8 + 1;
  v14 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v31 + 4) = (*(_DWORD *)(v14 + 16 * v13 + 8) >> 20) & 0xF;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39 + 4);
  v15 = *(_QWORD *)(v14 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v27, (uint64_t)&v31 + 12);
  v16 = 0;
  v17 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v17 + 16 * v11) != 5)
    v16 = *(_WORD *)(v17 + 16 * v11 + 8);
  WORD6(v38) = v16;
  v18 = *(_QWORD *)(v17 + 16 * v29 + 8) - 1;
  v19 = 0;
  switch(v18)
  {
    case 0:
      break;
    case 1:
      v19 = 1;
      break;
    case 3:
      v19 = 2;
      break;
    case 7:
      v19 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v20 = 0;
  v21 = *(_DWORD *)a1;
  v36 = 0uLL;
  *((_QWORD *)&v35 + 1) = 0;
  DWORD2(v38) = v19;
  v37.n128_u32[0] = 0;
  if (v21 >= 4)
  {
    WORD4(v35) = 15;
    *(unint64_t *)((char *)v37.n128_u64 + 4) = 0x6800000000;
    v20 = 1;
  }
  *(_QWORD *)&v36 = v20 | 0x100000000;
  BYTE4(v35) = 0;
  v22 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v40;
  *(_QWORD *)(a4 + 176) = v41;
  v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  v25 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v25;
  result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

void sub_1C4C0E8AC(_DWORD *a1, uint64_t a2, unsigned int a3, _DWORD *a4, BOOL *a5, BOOL *a6, int8x8_t *a7, uint64_t a8)
{
  uint64_t v10;

  v10 = a3;
  if (*a1 >= 4u)
    *a5 = (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16 * a3 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, a2, a3, a6, a7, a8);
  *a4 = (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v10 + 8) >> 42) & 7;
}

uint64_t sub_1C4C0E920(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;

  v6 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 != 5)
  {
    v15 = result;
    if (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] == 62)
    {
      *(_DWORD *)(a4 + 8) = 4;
    }
    else
    {
      v16 = sub_1C4C26AB8(*(_QWORD **)(result + 24), (unsigned __int8 *)(v7 + 16 * a3));
      *(_DWORD *)(a4 + 8) = v16;
      if (v16 != 4)
      {
        if (v16 == 1)
        {
          *(_WORD *)a4 = *(_QWORD *)(v7 + 16 * v6 + 8);
          *(_DWORD *)(a4 + 12) = 1;
          return sub_1C4C27110((uint64_t)a2, (uint64_t)v8, a3, a4);
        }
        v17 = sub_1C4C26850(v15, (uint64_t)v8);
LABEL_21:
        *(_DWORD *)(a4 + 12) = v17;
        *(_QWORD *)a4 = sub_1C4C264D0(*(_QWORD *)(v15 + 24), v8, *(_DWORD *)(a4 + 8));
        return sub_1C4C27110((uint64_t)a2, (uint64_t)v8, a3, a4);
      }
    }
    v17 = sub_1C4C26750((uint64_t)a2);
    goto LABEL_21;
  }
  v9 = *(_QWORD *)(v7 + 16 * a3 + 8);
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  if (!*(_DWORD *)(v10 + 24))
  {
    v11 = *(_DWORD *)(v10 + 40);
    if (v11 == 4)
      v12 = 2;
    else
      v12 = 3;
    if (v11 == 2)
      v13 = 1;
    else
      v13 = v12;
    *(_DWORD *)(a4 + 8) = 3;
    *(_DWORD *)(a4 + 12) = v13;
    *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v10 + 32) + 16) & 0x1FF;
  }
  *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * (a3 + 1) + 8) >> 20) & 0xF;
  return result;
}

double sub_1C4C0EAA0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  *a3 = 105;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v29 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v30 + 4) = (*(_DWORD *)(v13 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v38, (BOOL *)&v30, (BOOL *)&v40 + 4, (int8x8_t *)((char *)&v36 + 12), (uint64_t)&v38 + 4);
  v14 = *(_QWORD *)(v13 + 16 * v10 + 8);
  BYTE4(v37) = v14 >> 4;
  BYTE5(v32) = (v14 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v27, (uint64_t)&v32 + 8);
  sub_1C4C0E430(a1, a2, v26, (uint64_t)&v30 + 12);
  v15 = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v11) != 5)
    v15 = *(_WORD *)(v16 + 16 * v11 + 8);
  WORD6(v37) = v15;
  v17 = *(_QWORD *)(v16 + 16 * v28 + 8) - 1;
  v18 = 0;
  switch(v17)
  {
    case 0:
      break;
    case 1:
      v18 = 1;
      break;
    case 3:
      v18 = 2;
      break;
    case 7:
      v18 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v37) = v18;
  BYTE4(v34) = 1;
  sub_1C4C0E920(a1, a2, v25, (uint64_t)&v34 + 8);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v36 + 4) = 0x6800000000;
  v19 = v38;
  *(_OWORD *)(a4 + 128) = v37;
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 160) = v39;
  *(_QWORD *)(a4 + 176) = v40;
  v20 = v34;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v20;
  v21 = v36;
  *(_OWORD *)(a4 + 96) = v35;
  *(_OWORD *)(a4 + 112) = v21;
  v22 = v30;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v22;
  result = *(double *)&v31;
  v24 = v32;
  *(_OWORD *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 48) = v24;
  return result;
}

__n128 sub_1C4C0ED64(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  *a3 = 190;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v42 = 0;
  v30 = sub_1C4C2FD5C(v7);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v31 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = v8 + 1;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v13 + 8);
  DWORD1(v32) = (v15 >> 20) & 0xF;
  BYTE8(v32) = (v15 & 0x10) != 0;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v40, (BOOL *)&v32, (BOOL *)&v42 + 4, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40 + 4);
  v16 = *(_QWORD *)(v14 + 16 * v10 + 8);
  BYTE4(v39) = v16 >> 4;
  BYTE5(v34) = (v16 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v29, (uint64_t)&v34 + 8);
  sub_1C4C0E430(a1, a2, v28, (uint64_t)&v32 + 12);
  v17 = 0;
  v18 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v18 + 16 * v11) != 5)
    v17 = *(_WORD *)(v18 + 16 * v11 + 8);
  WORD6(v39) = v17;
  v19 = *(_QWORD *)(v18 + 16 * v30 + 8) - 1;
  v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      v20 = 1;
      break;
    case 3:
      v20 = 2;
      break;
    case 7:
      v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v21 = 0;
  v22 = *(_DWORD *)a1;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  DWORD2(v39) = v20;
  v38.n128_u32[0] = 0;
  if (v22 >= 4)
  {
    WORD4(v36) = 15;
    *(unint64_t *)((char *)v38.n128_u64 + 4) = 0xBB00000000;
    v21 = 1;
  }
  *(_QWORD *)&v37 = v21 | 0x100000000;
  BYTE4(v36) = 0;
  v23 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v23;
  *(_OWORD *)(a4 + 160) = v41;
  *(_QWORD *)(a4 + 176) = v42;
  v24 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v24;
  v25 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v25;
  v26 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v26;
  result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

double sub_1C4C0F028(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  *a3 = 190;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_DWORD *)(v13 + 16 * (v8 + 1) + 8);
  DWORD1(v31) = (v14 >> 20) & 0xF;
  BYTE8(v31) = (v14 & 0x10) != 0;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37 + 12), (uint64_t)&v39 + 4);
  v15 = *(_QWORD *)(v13 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v27, (uint64_t)&v31 + 12);
  v16 = 0;
  v17 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v17 + 16 * v11) != 5)
    v16 = *(_WORD *)(v17 + 16 * v11 + 8);
  WORD6(v38) = v16;
  v18 = *(_QWORD *)(v17 + 16 * v29 + 8) - 1;
  v19 = 0;
  switch(v18)
  {
    case 0:
      break;
    case 1:
      v19 = 1;
      break;
    case 3:
      v19 = 2;
      break;
    case 7:
      v19 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v38) = v19;
  BYTE4(v35) = 1;
  sub_1C4C0E920(a1, a2, v26, (uint64_t)&v35 + 8);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v37 + 4) = 0xBB00000000;
  v20 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v20;
  *(_OWORD *)(a4 + 160) = v40;
  *(_QWORD *)(a4 + 176) = v41;
  v21 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v21;
  v22 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v22;
  v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  result = *(double *)&v32;
  v25 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v25;
  return result;
}

__n128 sub_1C4C0F2F4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;

  *a3 = 109;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v29 = sub_1C4C2FD5C(v7);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v31 + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(v31) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v41 + 1, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39);
  v17 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE4(v38) = v17 >> 4;
  BYTE5(v33) = (v17 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v31 + 12);
  v18 = 0;
  v19 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v19 + 16 * v13) != 5)
    v18 = *(_WORD *)(v19 + 16 * v13 + 8);
  WORD6(v38) = v18;
  v20 = *(_QWORD *)(v19 + 16 * v29 + 8) - 1;
  v21 = 0;
  switch(v20)
  {
    case 0:
      break;
    case 1:
      v21 = 1;
      break;
    case 3:
      v21 = 2;
      break;
    case 7:
      v21 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v22 = 0;
  v23 = *(_DWORD *)a1;
  v36 = 0uLL;
  *((_QWORD *)&v35 + 1) = 0;
  DWORD2(v38) = v21;
  v37.n128_u32[0] = 0;
  if (v23 >= 4)
  {
    WORD4(v35) = 15;
    *(unint64_t *)((char *)v37.n128_u64 + 4) = 0x6C00000000;
    v22 = 1;
  }
  *(_QWORD *)&v36 = v22 | 0x100000000;
  BYTE4(v35) = 0;
  v24 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v24;
  *(_OWORD *)(a4 + 160) = v40;
  *(_DWORD *)(a4 + 176) = v41;
  v25 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v25;
  v26 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v26;
  v27 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v27;
  result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

double sub_1C4C0F5B0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double result;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;

  *a3 = 109;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = v8 + 1;
  v15 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v31 + 4) = (*(_DWORD *)(v15 + 16 * v14 + 8) >> 20) & 0xFLL;
  LOBYTE(v31) = (*(_BYTE *)(v15 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v41 + 1, (int8x8_t *)((char *)&v37 + 12), (uint64_t)&v39);
  v16 = *(_QWORD *)(v15 + 16 * v10 + 8);
  BYTE4(v38) = v16 >> 4;
  BYTE5(v33) = (v16 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v11, (uint64_t)&v31 + 12);
  v17 = 0;
  v18 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v18 + 16 * v12) != 5)
    v17 = *(_WORD *)(v18 + 16 * v12 + 8);
  WORD6(v38) = v17;
  v19 = *(_QWORD *)(v18 + 16 * v29 + 8) - 1;
  v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      v20 = 1;
      break;
    case 3:
      v20 = 2;
      break;
    case 7:
      v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v38) = v20;
  BYTE4(v35) = 1;
  sub_1C4C0E920(a1, a2, v27, (uint64_t)&v35 + 8);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v37 + 4) = 0x6C00000000;
  v21 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v21;
  *(_OWORD *)(a4 + 160) = v40;
  *(_DWORD *)(a4 + 176) = v41;
  v22 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v22;
  v23 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v23;
  v24 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v24;
  result = *(double *)&v32;
  v26 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v26;
  return result;
}

__n128 sub_1C4C0F874(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 result;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  BOOL v42[16];

  *a3 = 192;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v42 = 0;
  v30 = sub_1C4C2FD5C(v7);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v31 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *(_DWORD *)(v16 + 16 * v15 + 8);
  DWORD1(v32) = (v17 >> 20) & 0xF;
  BYTE8(v32) = (v17 & 0x10) != 0;
  LOBYTE(v32) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, v42, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40);
  v18 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE4(v39) = v18 >> 4;
  BYTE5(v34) = (v18 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v34 + 8);
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v32 + 12);
  v19 = 0;
  v20 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v20 + 16 * v13) != 5)
    v19 = *(_WORD *)(v20 + 16 * v13 + 8);
  WORD6(v39) = v19;
  v21 = *(_QWORD *)(v20 + 16 * v30 + 8) - 1;
  v22 = 0;
  switch(v21)
  {
    case 0:
      break;
    case 1:
      v22 = 1;
      break;
    case 3:
      v22 = 2;
      break;
    case 7:
      v22 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v23 = 0;
  v24 = *(_DWORD *)a1;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  DWORD2(v39) = v22;
  v38.n128_u32[0] = 0;
  if (v24 >= 4)
  {
    WORD4(v36) = 15;
    *(unint64_t *)((char *)v38.n128_u64 + 4) = 0xBD00000000;
    v23 = 1;
  }
  *(_QWORD *)&v37 = v23 | 0x100000000;
  BYTE4(v36) = 0;
  v25 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v25;
  *(_OWORD *)(a4 + 160) = v41;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v42;
  v26 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v26;
  v27 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v27;
  v28 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v28;
  result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

double sub_1C4C0FB38(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double result;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  BOOL v42[16];

  *a3 = 192;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v31 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = v8 + 1;
  v15 = *((_QWORD *)a2 + 2);
  v16 = *(_DWORD *)(v15 + 16 * v14 + 8);
  DWORD1(v32) = (v16 >> 20) & 0xF;
  BYTE8(v32) = (v16 & 0x10) != 0;
  LOBYTE(v32) = (*(_BYTE *)(v15 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, v42, (int8x8_t *)((char *)&v38 + 12), (uint64_t)&v40);
  v17 = *(_QWORD *)(v15 + 16 * v10 + 8);
  BYTE4(v39) = v17 >> 4;
  BYTE5(v34) = (v17 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v29, (uint64_t)&v34 + 8);
  sub_1C4C0E430(a1, a2, v11, (uint64_t)&v32 + 12);
  v18 = 0;
  v19 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v19 + 16 * v12) != 5)
    v18 = *(_WORD *)(v19 + 16 * v12 + 8);
  WORD6(v39) = v18;
  v20 = *(_QWORD *)(v19 + 16 * v30 + 8) - 1;
  v21 = 0;
  switch(v20)
  {
    case 0:
      break;
    case 1:
      v21 = 1;
      break;
    case 3:
      v21 = 2;
      break;
    case 7:
      v21 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v39) = v21;
  BYTE4(v36) = 1;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v36 + 8);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v38 + 4) = 0xBD00000000;
  v22 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v41;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v42;
  v23 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v23;
  v24 = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(_OWORD *)(a4 + 112) = v24;
  v25 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v25;
  result = *(double *)&v33;
  v27 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v27;
  return result;
}

double sub_1C4C0FE04(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double result;
  __int128 v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;

  *a3 = 110;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v29 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v30 + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(v30) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v38 + 1, (int8x8_t *)((char *)&v34 + 12), (uint64_t)&v36);
  v17 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE5(v35) = v17 >> 4;
  BYTE5(v32) = (v17 & 0x800) == 0;
  HIDWORD(v33) = (unsigned __int16)v17 >> 12;
  BYTE4(v35) = BYTE2(v17) & 1;
  if (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)v11] == 62)
    v18 = 4;
  else
    v18 = sub_1C4C26AB8(*(_QWORD **)(a1 + 24), (unsigned __int8 *)(v16 + 16 * v11));
  *(_QWORD *)&v33 = v18 | 0x100000000;
  WORD4(v32) = 0;
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v30 + 12);
  v19 = 0;
  v20 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v20 + 16 * v13) != 5)
    v19 = *(_WORD *)(v20 + 16 * v13 + 8);
  WORD6(v35) = v19;
  v21 = *(_QWORD *)(v20 + 16 * v28 + 8) - 1;
  v22 = 0;
  switch(v21)
  {
    case 0:
      break;
    case 1:
      v22 = 1;
      break;
    case 3:
      v22 = 2;
      break;
    case 7:
      v22 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v35) = v22;
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v34 + 4) = 0x6D00000000;
  v23 = v36;
  *(_OWORD *)(a4 + 96) = v35;
  *(_OWORD *)(a4 + 112) = v23;
  *(_OWORD *)(a4 + 128) = v37;
  *(_DWORD *)(a4 + 144) = v38;
  v24 = v32;
  *(_OWORD *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 48) = v24;
  v25 = v34;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v25;
  result = *(double *)&v29;
  v27 = v30;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v27;
  return result;
}

double sub_1C4C100D0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double result;
  __int128 v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  BOOL v39[16];

  *a3 = 193;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *(_DWORD *)(v16 + 16 * v15 + 8);
  DWORD1(v31) = (v17 >> 20) & 0xF;
  BYTE8(v31) = (v17 & 0x10) != 0;
  LOBYTE(v31) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, v39, (int8x8_t *)((char *)&v35 + 12), (uint64_t)&v37);
  v18 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE5(v36) = v18 >> 4;
  BYTE5(v33) = (v18 & 0x800) == 0;
  HIDWORD(v34) = (unsigned __int16)v18 >> 12;
  BYTE4(v36) = BYTE2(v18) & 1;
  if (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)v11] == 62)
    v19 = 4;
  else
    v19 = sub_1C4C26AB8(*(_QWORD **)(a1 + 24), (unsigned __int8 *)(v16 + 16 * v11));
  *(_QWORD *)&v34 = v19 | 0x100000000;
  WORD4(v33) = 0;
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v31 + 12);
  v20 = 0;
  v21 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v21 + 16 * v13) != 5)
    v20 = *(_WORD *)(v21 + 16 * v13 + 8);
  WORD6(v36) = v20;
  v22 = *(_QWORD *)(v21 + 16 * v29 + 8) - 1;
  v23 = 0;
  switch(v22)
  {
    case 0:
      break;
    case 1:
      v23 = 1;
      break;
    case 3:
      v23 = 2;
      break;
    case 7:
      v23 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  DWORD2(v36) = v23;
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&v35 + 4) = 0xBE00000000;
  v24 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v24;
  *(_OWORD *)(a4 + 128) = v38;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v39;
  v25 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v25;
  v26 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v26;
  result = *(double *)&v30;
  v28 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v28;
  return result;
}

__n128 sub_1C4C103A4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;

  *a3 = 107;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v29 = sub_1C4C2FD5C(v7);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v31 + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(v31) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v41 + 1, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39);
  v17 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE4(v38) = v17 >> 4;
  BYTE5(v33) = (v17 & 0x800) == 0;
  LOBYTE(v41) = (v17 & 0x20000) != 0;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v31 + 12);
  v18 = 0;
  v19 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v19 + 16 * v13) != 5)
    v18 = *(_WORD *)(v19 + 16 * v13 + 8);
  WORD6(v38) = v18;
  v20 = *(_QWORD *)(v19 + 16 * v29 + 8) - 1;
  v21 = 0;
  switch(v20)
  {
    case 0:
      break;
    case 1:
      v21 = 1;
      break;
    case 3:
      v21 = 2;
      break;
    case 7:
      v21 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v22 = 0;
  v23 = *(_DWORD *)a1;
  v36 = 0uLL;
  *((_QWORD *)&v35 + 1) = 0;
  DWORD2(v38) = v21;
  v37.n128_u32[0] = 0;
  if (v23 >= 4)
  {
    WORD4(v35) = 15;
    *(unint64_t *)((char *)v37.n128_u64 + 4) = 0x6A00000000;
    v22 = 1;
  }
  *(_QWORD *)&v36 = v22 | 0x100000000;
  BYTE4(v35) = 0;
  v24 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v24;
  *(_OWORD *)(a4 + 160) = v40;
  *(_DWORD *)(a4 + 176) = v41;
  v25 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v25;
  v26 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v26;
  v27 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v27;
  result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

double sub_1C4C10668(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double result;
  __int128 v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;

  *a3 = 107;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  *(_QWORD *)&v29 = 0;
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v30) = (*(_BYTE *)(v13 + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v40 + 1, (int8x8_t *)((char *)&v36 + 12), (uint64_t)&v38);
  v14 = *(_QWORD *)(v13 + 16 * v9 + 8);
  BYTE4(v37) = v14 >> 4;
  BYTE5(v32) = (v14 & 0x800) == 0;
  LOBYTE(v40) = 1;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v32 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v30 + 12);
  v15 = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v12) != 5)
    v15 = *(_WORD *)(v16 + 16 * v12 + 8);
  WORD6(v37) = v15;
  v17 = *(_QWORD *)(v16 + 16 * v28 + 8) - 1;
  v18 = 0;
  switch(v17)
  {
    case 0:
      break;
    case 1:
      v18 = 1;
      break;
    case 3:
      v18 = 2;
      break;
    case 7:
      v18 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v19 = 0;
  v20 = *a1;
  v35 = 0uLL;
  *((_QWORD *)&v34 + 1) = 0;
  DWORD2(v37) = v18;
  LODWORD(v36) = 0;
  if (v20 >= 4)
  {
    WORD4(v34) = 15;
    v19 = 1;
  }
  *(_QWORD *)&v35 = v19 | 0x100000000;
  BYTE4(v34) = 0;
  DWORD2(v29) = 0;
  LOBYTE(v29) = 0;
  if (sub_1C4C32DEC(*(_DWORD *)a2) == 54)
    v21 = 1;
  else
    v21 = 2;
  HIDWORD(v29) = v21;
  if (v20 >= 4)
    *(_QWORD *)((char *)&v36 + 4) = 0x6A00000000;
  v22 = v38;
  *(_OWORD *)(a4 + 128) = v37;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v39;
  *(_DWORD *)(a4 + 176) = v40;
  v23 = v34;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v23;
  v24 = v36;
  *(_OWORD *)(a4 + 96) = v35;
  *(_OWORD *)(a4 + 112) = v24;
  v25 = v30;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v25;
  result = *(double *)&v31;
  v27 = v32;
  *(_OWORD *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 48) = v27;
  return result;
}

__n128 sub_1C4C10900(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 result;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  BOOL v42[16];

  *a3 = 191;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v42 = 0;
  v30 = sub_1C4C2FD5C(v7);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v31 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v8 + 1;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *(_DWORD *)(v16 + 16 * v15 + 8);
  DWORD1(v32) = (v17 >> 20) & 0xF;
  BYTE8(v32) = (v17 & 0x10) != 0;
  LOBYTE(v32) = (*(_BYTE *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, v42, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40);
  v18 = *(_QWORD *)(v16 + 16 * v10 + 8);
  BYTE4(v39) = v18 >> 4;
  BYTE5(v34) = (v18 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v34 + 8);
  sub_1C4C0E430(a1, a2, v12, (uint64_t)&v32 + 12);
  v19 = 0;
  v20 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v20 + 16 * v13) != 5)
    v19 = *(_WORD *)(v20 + 16 * v13 + 8);
  WORD6(v39) = v19;
  v21 = *(_QWORD *)(v20 + 16 * v30 + 8) - 1;
  v22 = 0;
  switch(v21)
  {
    case 0:
      break;
    case 1:
      v22 = 1;
      break;
    case 3:
      v22 = 2;
      break;
    case 7:
      v22 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v23 = 0;
  v24 = *(_DWORD *)a1;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  DWORD2(v39) = v22;
  v38.n128_u32[0] = 0;
  if (v24 >= 4)
  {
    WORD4(v36) = 15;
    *(unint64_t *)((char *)v38.n128_u64 + 4) = 0xBC00000000;
    v23 = 1;
  }
  *(_QWORD *)&v37 = v23 | 0x100000000;
  BYTE4(v36) = 0;
  v25 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v25;
  *(_OWORD *)(a4 + 160) = v41;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v42;
  v26 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v26;
  v27 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v27;
  v28 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v28;
  result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1C4C10BC4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  *a3 = 216;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v41 = 0;
  v29 = sub_1C4C2FD5C(v7);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v30 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = v8 + 1;
  v14 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v31 + 4) = (*(_DWORD *)(v14 + 16 * v13 + 8) >> 20) & 0xF;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39 + 4);
  v15 = *(_QWORD *)(v14 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1C4C0E430(a1, a2, v27, (uint64_t)&v31 + 12);
  v16 = 0;
  v17 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v17 + 16 * v11) != 5)
    v16 = *(_WORD *)(v17 + 16 * v11 + 8);
  WORD6(v38) = v16;
  v18 = *(_QWORD *)(v17 + 16 * v29 + 8) - 1;
  v19 = 0;
  switch(v18)
  {
    case 0:
      break;
    case 1:
      v19 = 1;
      break;
    case 3:
      v19 = 2;
      break;
    case 7:
      v19 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v20 = 0;
  v21 = *(_DWORD *)a1;
  v36 = 0uLL;
  *((_QWORD *)&v35 + 1) = 0;
  DWORD2(v38) = v19;
  v37.n128_u32[0] = 0;
  if (v21 >= 4)
  {
    WORD4(v35) = 15;
    v37.n128_u32[2] = 219;
    v20 = 1;
  }
  *(_QWORD *)&v36 = v20 | 0x100000000;
  BYTE4(v35) = 0;
  v22 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v40;
  *(_QWORD *)(a4 + 176) = v41;
  v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  v25 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v25;
  result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1C4C10E7C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  *a3 = 217;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v42 = 0;
  v30 = sub_1C4C2FD5C(v7);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v12 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v31 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v12, 2);
  v13 = v8 + 1;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v13 + 8);
  DWORD1(v32) = (v15 >> 20) & 0xF;
  BYTE8(v32) = (v15 & 0x10) != 0;
  sub_1C4C0E8AC((_DWORD *)a1, (uint64_t)a2, v9, &v40, (BOOL *)&v32, (BOOL *)&v42 + 4, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40 + 4);
  v16 = *(_QWORD *)(v14 + 16 * v10 + 8);
  BYTE4(v39) = v16 >> 4;
  BYTE5(v34) = (v16 & 0x800) == 0;
  sub_1C4C0E920(a1, a2, v29, (uint64_t)&v34 + 8);
  sub_1C4C0E430(a1, a2, v28, (uint64_t)&v32 + 12);
  v17 = 0;
  v18 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v18 + 16 * v11) != 5)
    v17 = *(_WORD *)(v18 + 16 * v11 + 8);
  WORD6(v39) = v17;
  v19 = *(_QWORD *)(v18 + 16 * v30 + 8) - 1;
  v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      v20 = 1;
      break;
    case 3:
      v20 = 2;
      break;
    case 7:
      v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  v21 = 0;
  v22 = *(_DWORD *)a1;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  DWORD2(v39) = v20;
  v38.n128_u32[0] = 0;
  if (v22 >= 4)
  {
    WORD4(v36) = 15;
    v38.n128_u32[2] = 220;
    v21 = 1;
  }
  *(_QWORD *)&v37 = v21 | 0x100000000;
  BYTE4(v36) = 0;
  v23 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v23;
  *(_OWORD *)(a4 + 160) = v41;
  *(_QWORD *)(a4 + 176) = v42;
  v24 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v24;
  v25 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v25;
  v26 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v26;
  result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1C4C1113C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 30;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 35;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C11288(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 30;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 35;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C113BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 30;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 35;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C114F4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *a3 = 3;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1C4C115C4((uint64_t)a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u)
    *((_QWORD *)&v13 + 1) = 0x800000003;
  v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  result = *(double *)&v15;
  v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

uint64_t sub_1C4C115C4(uint64_t a1, unsigned int a2, BOOL *a3, uint64_t *a4)
{
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;

  v8 = *(_DWORD *)a1;
  v9 = sub_1C4C32DEC(*(_DWORD *)a1);
  *a3 = v9 == 4;
  result = sub_1C4C32DEC(v8);
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v11 + 16 * a2) == 2)
  {
    v12 = *(_QWORD *)(v11 + 16 * a2 + 8);
    v14 = v12 < 0 && v9 != 4;
    if (HIWORD(v12) && !v14)
      llvm::report_fatal_error((llvm *)"Branch offset too big to encode.", (const char *)1);
    v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v15 = 0;
  }
  *a4 = v15;
  return result;
}

double sub_1C4C11688(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *a3 = 16;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1C4C115C4((uint64_t)a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u)
    *((_QWORD *)&v13 + 1) = 0x1500000003;
  v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  result = *(double *)&v15;
  v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

double sub_1C4C11758(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *a3 = 15;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1C4C115C4((uint64_t)a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u)
    *((_QWORD *)&v13 + 1) = 0x1400000003;
  v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  result = *(double *)&v15;
  v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

double sub_1C4C11828(_DWORD *a1, int *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  BOOL v16[16];

  *a3 = 22;
  v7 = *(unsigned __int16 *)a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v16 = 0;
  v14 = 0u;
  v15 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v16, (int8x8_t *)((char *)&v13[2] + 4), (uint64_t)&v14);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v13);
  BYTE12(v13[2]) = sub_1C4C32DEC(*a2) == 4;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)&v13[1] + 12) = 0x1B00000002;
  v10 = v14;
  *(_OWORD *)(a4 + 32) = v13[2];
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v15;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v16;
  result = *(double *)v13;
  v12 = v13[1];
  *(_OWORD *)a4 = v13[0];
  *(_OWORD *)(a4 + 16) = v12;
  return result;
}

double sub_1C4C11930(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *a3 = 27;
  v7 = sub_1C4C2FD5C(*a2);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, (BOOL *)&v13 + 4, (int8x8_t *)&v10 + 1, (uint64_t)&v11 + 4);
  if (*a1 >= 4u)
    *(_QWORD *)&v10 = 0x2000000003;
  v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 48) = v13;
  return result;
}

double sub_1C4C119D8(_DWORD *a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;
  __int128 v16;
  double result;
  _OWORD v18[4];

  *a3 = 28;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  memset(v18, 0, 60);
  sub_1C4C0B76C(a1, a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1C4C32DEC(v7) == 13;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v18 + 4) = 0x2100000003;
  v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1C4C11B38(_DWORD *a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;
  __int128 v16;
  double result;
  _OWORD v18[4];

  *a3 = 26;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  memset(v18, 0, 60);
  sub_1C4C0B76C(a1, a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1C4C32DEC(v7) == 13;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v18 + 4) = 0x1F00000003;
  v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1C4C11C98(_DWORD *a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;
  __int128 v16;
  double result;
  _OWORD v18[4];

  *a3 = 24;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  memset(v18, 0, 60);
  sub_1C4C0B76C(a1, a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1C4C32DEC(v7) == 13;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v18 + 4) = 0x1D00000003;
  v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1C4C11DF8(_DWORD *a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;
  __int128 v16;
  double result;
  _OWORD v18[4];

  *a3 = 23;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  memset(v18, 0, 60);
  sub_1C4C0B76C(a1, a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1C4C32DEC(v7) == 13;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v18 + 4) = 0x1C00000003;
  v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1C4C11F58(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *a3 = 25;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17 + 4, (int8x8_t *)&v14 + 1, (uint64_t)&v15 + 4);
  v10 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v10 + 16 * v9) == 5)
    v11 = 0;
  else
    v11 = *(_WORD *)(v10 + 16 * v9 + 8);
  LOWORD(v15) = v11;
  if (*a1 >= 4u)
    *(_QWORD *)&v14 = 0x1E00000003;
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = *(double *)&v16;
  *(_OWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 48) = v17;
  return result;
}

double sub_1C4C1204C(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 199;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)v22 + 12);
  DWORD2(v21) = 5;
  v11 = *a1;
  if (v11 >= 4)
    HIDWORD(v21) = 2;
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(_QWORD *)(v12 + 16 * v10 + 8);
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  LOWORD(v21) = *(_WORD *)(*(_QWORD *)(v14 + 32) + 16) & 0x1FFF;
  if (v10)
    v15 = 1;
  else
    v15 = 2;
  v16 = *(_DWORD *)(v12 + 16 * (v15 + v10) + 8);
  BYTE8(v22[0]) = (v16 & 0x10) != 0;
  DWORD1(v22[0]) = (v16 >> 20) & 0xF;
  HIDWORD(v25) = 0;
  if (v11 >= 3)
  {
    if (sub_1C4C32DEC(*(_DWORD *)a2) == 85)
    {
      DWORD1(v22[2]) = 0;
      *(_QWORD *)((char *)&v22[1] + 4) = 0x100000000;
      *(_QWORD *)((char *)&v22[1] + 12) = 0;
      *(_QWORD *)((char *)v22 + 12) = 0;
    }
    if (v11 >= 4)
      *((_QWORD *)&v22[2] + 1) = 0xC400000002;
  }
  v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  *(_OWORD *)(a4 + 96) = v25;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v26;
  v18 = v22[0];
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v18;
  result = *(double *)&v22[1];
  v20 = v22[2];
  *(_OWORD *)(a4 + 32) = v22[1];
  *(_OWORD *)(a4 + 48) = v20;
  return result;
}

__n128 sub_1C4C12200(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 0;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v14);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
    v17.n128_u64[1] = 0x500000002;
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C12310(int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  __int128 v11;
  double result;
  __int128 v13;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *a3 = 198;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17 + 5, (int8x8_t *)((char *)&v14[2] + 4), (uint64_t)&v15 + 4);
  sub_1C4C12430((uint64_t)a1, a2, v9, (uint64_t)v14);
  LODWORD(v15) = dword_1C6A5FAE0[(int)sub_1C4C32DEC(*(_DWORD *)a2) - 82];
  BYTE4(v17) = 1;
  v10 = *a1;
  if (*a1 >= 3)
  {
    HIDWORD(v14[2]) = 1;
    if (v10 != 3)
      *(_QWORD *)((char *)&v14[1] + 12) = 0xC300000002;
  }
  v11 = v15;
  *(_OWORD *)(a4 + 32) = v14[2];
  *(_OWORD *)(a4 + 48) = v11;
  *(_OWORD *)(a4 + 64) = v16;
  *(_QWORD *)(a4 + 80) = v17;
  result = *(double *)v14;
  v13 = v14[1];
  *(_OWORD *)a4 = v14[0];
  *(_OWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1C4C12430(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;

  v6 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 != 5)
  {
    v15 = result;
    v16 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
    if (v16 == 62)
    {
      *(_DWORD *)(a4 + 8) = 4;
LABEL_19:
      *(_DWORD *)(a4 + 12) = sub_1C4C26750((uint64_t)a2);
      v20 = *(_QWORD *)(v15 + 24);
      v19 = *(_DWORD *)(a4 + 8);
LABEL_20:
      *(_QWORD *)a4 = sub_1C4C264D0(v20, v8, v19);
      return sub_1C4C27110((uint64_t)a2, (uint64_t)v8, a3, a4);
    }
    v17 = *(_QWORD **)(result + 24);
    v18 = sub_1C4C26AB8(v17, (unsigned __int8 *)(v7 + 16 * a3));
    *(_DWORD *)(a4 + 8) = v18;
    if (v18 == 4)
      goto LABEL_19;
    v19 = v18;
    if (v18 == 1)
    {
      *(_WORD *)a4 = *(_QWORD *)(v7 + 16 * v6 + 8);
      *(_DWORD *)(a4 + 12) = 1;
      return sub_1C4C27110((uint64_t)a2, (uint64_t)v8, a3, a4);
    }
    v21 = v16 + 117;
    if ((v16 - 139) <= 0x25)
    {
      if (((1 << v21) & 0x1600015) != 0)
      {
        v22 = 1;
LABEL_28:
        *(_DWORD *)(a4 + 12) = v22;
        v20 = (uint64_t)v17;
        goto LABEL_20;
      }
      if (((1 << v21) & 0x3400000000) != 0)
      {
        v22 = 2;
        goto LABEL_28;
      }
    }
    v22 = sub_1C4C26850(v15, (uint64_t)v8);
    v17 = *(_QWORD **)(v15 + 24);
    v19 = *(_DWORD *)(a4 + 8);
    goto LABEL_28;
  }
  v9 = *(_QWORD *)(v7 + 16 * a3 + 8);
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  if (!*(_DWORD *)(v10 + 24))
  {
    v11 = *(_DWORD *)(v10 + 40);
    if (v11 == 4)
      v12 = 2;
    else
      v12 = 3;
    if (v11 == 2)
      v13 = 1;
    else
      v13 = v12;
    *(_DWORD *)(a4 + 8) = 3;
    *(_DWORD *)(a4 + 12) = v13;
    *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v10 + 32) + 16) & 0x1FF;
  }
  *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * (a3 + 1) + 8) >> 20) & 0xF;
  return result;
}

double sub_1C4C1261C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 65;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  memset(v25, 0, sizeof(v25));
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v8, (BOOL *)&v28, (int8x8_t *)((char *)&v25[1] + 4), (uint64_t)&v26);
  v13 = *((_QWORD *)a2 + 2);
  HIDWORD(v25[1]) = *(_DWORD *)(v13 + 16 * v9 + 8) & 0xF;
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE9(v25[0]) = v15;
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v23 + 12);
  v16 = *(_DWORD *)a2;
  BYTE8(v25[0]) = sub_1C4C32DEC(v16) == 13;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v28) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v17 = sub_1C4C915C4(v16);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47)
        HIDWORD(v28) = 0;
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)a1 == 4)
LABEL_11:
    *(_QWORD *)((char *)v25 + 12) = 0x4500000003;
  v18 = v26;
  *(_OWORD *)(a4 + 64) = v25[1];
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 96) = v27;
  *(_QWORD *)(a4 + 112) = v28;
  v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  result = *(double *)&v24;
  v21 = v25[0];
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v21;
  return result;
}

uint64_t sub_1C4C1280C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = sub_1C4C15874(a1, (unsigned __int16 *)a2, a3, a4);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v8 + 16 * a3) != 2 && (*(_BYTE *)(v8 + 16 * (a3 + 1) + 9) & 8) != 0)
    *(_DWORD *)(a4 + 12) = 4;
  if (*(_DWORD *)(a4 + 8) == 1)
    *(_DWORD *)(a4 + 12) = 2;
  return result;
}

double sub_1C4C1287C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  double result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  BOOL v30[8];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  *a3 = 80;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v30 = 0;
  v28 = 0u;
  v29 = 0u;
  memset(v27, 0, sizeof(v27));
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v30, (int8x8_t *)((char *)&v27[1] + 4), (uint64_t)&v28);
  v13 = *((_QWORD *)a2 + 2);
  HIDWORD(v27[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v9 + 8) & 0xFLL) - 8];
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE9(v27[0]) = v15;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v24);
  sub_1C4C0E430((uint64_t)a1, a2, v12, (uint64_t)&v25 + 12);
  BYTE8(v27[0]) = sub_1C4C32DEC(*(_DWORD *)a2) == 13;
  if (HIDWORD(v27[1]) >= 4)
  {
    v16 = 0;
    v17 = 0;
    v31[0] = &v24;
    v31[1] = (char *)&v25 + 12;
    do
    {
      v18 = v16;
      v19 = v31[v17];
      if (*(_DWORD *)(v19 + 8) != 1 && *(_DWORD *)(v19 + 12) == 1)
        *(_BYTE *)(v19 + 25) = 1;
      v16 = 1;
      v17 = 1;
    }
    while ((v18 & 1) == 0);
  }
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v27 + 12) = 0x5200000003;
  v20 = v28;
  *(_OWORD *)(a4 + 64) = v27[1];
  *(_OWORD *)(a4 + 80) = v20;
  *(_OWORD *)(a4 + 96) = v29;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v30;
  v21 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v21;
  result = *(double *)&v26;
  v23 = v27[0];
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v23;
  return result;
}

double sub_1C4C12ABC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;

  *a3 = 43;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v25 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v21 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v23);
  v12 = *(_DWORD *)a2;
  BYTE12(v20) = sub_1C4C32DEC(v12) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    v28 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v13 = sub_1C4C915C4(v12);
      if ((v13 & 0xFF00000000) == 0 || v13 != 47)
        v28 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v19) - 2) <= 3)
    HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
  LODWORD(v25) = 48;
LABEL_11:
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_DWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

void sub_1C4C12CA8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;

  sub_1C4C157AC(a1, a2, a3, a4);
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v7 + 16 * a3) != 2 && (*(_BYTE *)(v7 + 16 * (a3 + 1) + 9) & 8) != 0)
    *(_DWORD *)(a4 + 12) = 4;
  sub_1C4C265DC((__int128 *)a2, a3, a4);
}

double sub_1C4C12D10(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;

  *a3 = 57;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v24) = (v12 & 0x20) != 0;
  BYTE8(v30) = (v12 & 0x80) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v32 + 12, (int8x8_t *)((char *)&v29 + 12), (uint64_t)&v30 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)v27);
  v13 = *(_DWORD *)a2;
  BYTE12(v24) = sub_1C4C32DEC(v13) == 19;
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    v33 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v22 = sub_1C4C915C4(v13);
      if ((v22 & 0xFF00000000) == 0 || v22 != 47)
        v33 = 0;
    }
  }
  *(_QWORD *)((char *)&v27[2] + 4) = 0x200000000;
  *(_QWORD *)((char *)&v27[1] + 12) = 0;
  memset((char *)&v27[2] + 12, 0, 20);
  v28 = 0x200000000uLL;
  DWORD1(v30) = 0;
  LODWORD(v29) = 0;
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      DWORD1(v29) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    DWORD2(v29) = 62;
  }
  v15 = v31;
  *(_OWORD *)(a4 + 160) = v30;
  *(_OWORD *)(a4 + 176) = v15;
  *(_OWORD *)(a4 + 192) = v32;
  *(_DWORD *)(a4 + 208) = v33;
  v16 = v27[3];
  *(_OWORD *)(a4 + 96) = v27[2];
  *(_OWORD *)(a4 + 112) = v16;
  v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  v18 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v18;
  v19 = v27[1];
  *(_OWORD *)(a4 + 64) = v27[0];
  *(_OWORD *)(a4 + 80) = v19;
  result = *(double *)&v23;
  v21 = v24;
  *(_OWORD *)a4 = v23;
  *(_OWORD *)(a4 + 16) = v21;
  return result;
}

double sub_1C4C12F48(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;

  *a3 = 57;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v13 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v27) = (v13 & 0x20) != 0;
  BYTE8(v36) = (v13 & 0x80) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v38 + 12, (int8x8_t *)((char *)&v35 + 12), (uint64_t)&v36 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v25, (uint64_t)&v28 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v30);
  v14 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v14 + 16 * v11) == 1)
  {
    sub_1C4C12430(a1, a2, v11, (uint64_t)&v31 + 12);
    v14 = *((_QWORD *)a2 + 2);
  }
  else
  {
    BYTE12(v31) = *(_BYTE *)(v14 + 16 * v11 + 8) & 0x7F;
    *(_QWORD *)((char *)&v32 + 4) = 0x200000006;
    BYTE12(v32) = 0;
  }
  if (*(_BYTE *)(v14 + 16 * v12) == 1)
  {
    sub_1C4C12430(a1, a2, v12, (uint64_t)&v33 + 8);
  }
  else
  {
    BYTE8(v33) = *(_BYTE *)(v14 + 16 * v12 + 8) & 0x7F;
    *(_QWORD *)&v34 = 0x200000006;
    BYTE8(v34) = 0;
  }
  v15 = *(_DWORD *)a2;
  BYTE12(v27) = sub_1C4C32DEC(v15) == 19;
  v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    v39 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v17 = sub_1C4C915C4(v15);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47)
        v39 = 0;
    }
    DWORD1(v36) = 1;
  }
  else
  {
    DWORD1(v36) = 1;
    if (v16 != 4)
      goto LABEL_16;
  }
  if ((DWORD2(v26) - 2) <= 3)
    DWORD1(v35) = dword_1C6A5F9D0[DWORD2(v26) - 2];
  DWORD2(v35) = 62;
LABEL_16:
  v18 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v38;
  *(_DWORD *)(a4 + 208) = v39;
  v19 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v20;
  v21 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v21;
  v22 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v22;
  result = *(double *)&v26;
  v24 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v24;
  return result;
}

double sub_1C4C1321C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;

  *a3 = 57;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v24) = (v12 & 0x20) != 0;
  BYTE8(v30) = (v12 & 0x80) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v32 + 12, (int8x8_t *)((char *)&v29 + 12), (uint64_t)&v30 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)v27);
  v13 = *(_DWORD *)a2;
  BYTE12(v24) = sub_1C4C32DEC(v13) == 19;
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    v33 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v15 = sub_1C4C915C4(v13);
      if ((v15 & 0xFF00000000) == 0 || v15 != 47)
        v33 = 0;
    }
  }
  *(_QWORD *)((char *)&v27[2] + 4) = 0x200000000;
  *(_QWORD *)((char *)&v27[1] + 12) = 0;
  memset((char *)&v27[2] + 12, 0, 20);
  v28 = 0x200000000uLL;
  DWORD1(v30) = 0;
  LODWORD(v29) = 0;
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      DWORD1(v29) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    DWORD2(v29) = 62;
  }
  v16 = v31;
  *(_OWORD *)(a4 + 160) = v30;
  *(_OWORD *)(a4 + 176) = v16;
  *(_OWORD *)(a4 + 192) = v32;
  *(_DWORD *)(a4 + 208) = v33;
  v17 = v27[3];
  *(_OWORD *)(a4 + 96) = v27[2];
  *(_OWORD *)(a4 + 112) = v17;
  v18 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v18;
  v19 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v19;
  v20 = v27[1];
  *(_OWORD *)(a4 + 64) = v27[0];
  *(_OWORD *)(a4 + 80) = v20;
  result = *(double *)&v23;
  v22 = v24;
  *(_OWORD *)a4 = v23;
  *(_OWORD *)(a4 + 16) = v22;
  return result;
}

__n128 sub_1C4C13450(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[5];

  *a3 = 50;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  memset(v34, 0, 60);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v23);
  LOBYTE(v24) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v34[3] + 4, (int8x8_t *)v34 + 1, (uint64_t)&v34[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v27);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v28 + 12);
  v13 = *(_DWORD *)a2;
  BYTE12(v24) = sub_1C4C32DEC(v13) == 19;
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v34[3]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v22 = sub_1C4C915C4(v13);
      if ((v22 & 0xFF00000000) == 0 || v22 != 47)
        DWORD2(v34[3]) = 0;
    }
  }
  *((_QWORD *)&v30 + 1) = 0;
  v31 = 0x200000000uLL;
  v32 = 0uLL;
  v33 = 2uLL;
  LODWORD(v34[1]) = 0;
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      LODWORD(v34[0]) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    DWORD1(v34[0]) = 55;
  }
  v15 = v34[2];
  *(_OWORD *)(a4 + 192) = v34[1];
  *(_OWORD *)(a4 + 208) = v15;
  *(_OWORD *)(a4 + 220) = *(_OWORD *)((char *)&v34[2] + 12);
  v16 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v34[0];
  *(_OWORD *)(a4 + 160) = v33;
  *(_OWORD *)(a4 + 176) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v24;
  *(_OWORD *)a4 = v23;
  *(_OWORD *)(a4 + 16) = v20;
  result = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C136A4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 59;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v21 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v20) = sub_1C4C32DEC(v11) == 19;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v28) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v18 = sub_1C4C915C4(v11);
      if ((v18 & 0xFF00000000) == 0 || v18 != 47)
        HIDWORD(v28) = 0;
    }
  }
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0x200000000;
  *(_QWORD *)&v24 = 0;
  HIDWORD(v25) = 0;
  DWORD2(v24) = 0;
  if (v12 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 64;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C4C13888(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *a3 = 59;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v30, (int8x8_t *)((char *)&v27 + 4), (uint64_t)&v28);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v23 + 4);
  v12 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v12 + 16 * v11) == 1)
  {
    sub_1C4C12430(a1, a2, v11, (uint64_t)&v25);
  }
  else
  {
    LOBYTE(v25) = *(_BYTE *)(v12 + 16 * v11 + 8) & 0x7F;
    *((_QWORD *)&v25 + 1) = 0x200000006;
    LOBYTE(v26) = 0;
  }
  v13 = *(_DWORD *)a2;
  BYTE12(v22) = sub_1C4C32DEC(v13) == 19;
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v30) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v15 = sub_1C4C915C4(v13);
      if ((v15 & 0xFF00000000) == 0 || v15 != 47)
        HIDWORD(v30) = 0;
    }
    HIDWORD(v27) = 1;
  }
  else
  {
    HIDWORD(v27) = 1;
    if (v14 != 4)
      goto LABEL_14;
  }
  if ((DWORD2(v21) - 2) <= 3)
    HIDWORD(v26) = dword_1C6A5F9D0[DWORD2(v21) - 2];
  LODWORD(v27) = 64;
LABEL_14:
  v16 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 128) = v29;
  *(_QWORD *)(a4 + 144) = v30;
  v17 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v18;
  result = *(double *)&v21;
  v20 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v20;
  return result;
}

double sub_1C4C13ABC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 59;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v21 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v20) = sub_1C4C32DEC(v11) == 19;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v28) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v13 = sub_1C4C915C4(v11);
      if ((v13 & 0xFF00000000) == 0 || v13 != 47)
        HIDWORD(v28) = 0;
    }
  }
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0x200000000;
  *(_QWORD *)&v24 = 0;
  HIDWORD(v25) = 0;
  DWORD2(v24) = 0;
  if (v12 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 64;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1C4C13C9C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *a3 = 58;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v20);
  LOBYTE(v21) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v30 + 8, (int8x8_t *)&v28, (uint64_t)&v28 + 8);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v19, (uint64_t)&v24);
  v12 = *(_DWORD *)a2;
  BYTE12(v21) = sub_1C4C32DEC(v12) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v30) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v13 = sub_1C4C915C4(v12);
      if ((v13 & 0xFF00000000) == 0 || v13 != 47)
        HIDWORD(v30) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v20) - 2) <= 3)
    DWORD2(v27) = dword_1C6A5F9D0[DWORD2(v20) - 2];
  HIDWORD(v27) = 63;
LABEL_11:
  v14 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v14;
  *(_OWORD *)(a4 + 160) = v30;
  v15 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v15;
  v16 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v16;
  v17 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v17;
  result = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C13EB0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 61;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 66;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C14070(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 54;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 59;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C14230(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 47;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 52;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C143F0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 63;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 68;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C145B0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 62;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_10;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 67;
LABEL_10:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C14774(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 44;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 49;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C14934(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 45;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 50;
LABEL_11:
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

double sub_1C4C14AF4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 60;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v16 = sub_1C4C915C4(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47)
        DWORD2(v21[3]) = 0;
    }
  }
  sub_1C4C14CB8((int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3)
      LODWORD(v21[0]) = dword_1C6A5F9D0[DWORD2(v17) - 2];
    DWORD1(v21[0]) = 65;
  }
  v12 = v21[1];
  a4[4] = v21[0];
  a4[5] = v12;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v18;
  *a4 = v17;
  a4[1] = v13;
  result = *(double *)&v19;
  v15 = v20;
  a4[2] = v19;
  a4[3] = v15;
  return result;
}

uint64_t sub_1C4C14CB8(int *a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  result = sub_1C4C32DEC(*a1);
  if ((int)result > 28)
  {
    if ((_DWORD)result == 29)
    {
      v4 = 3;
    }
    else
    {
      if ((_DWORD)result != 30)
        goto LABEL_11;
      v4 = 2;
    }
  }
  else if ((_DWORD)result == 20)
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    if ((_DWORD)result != 28)
LABEL_11:
      llvm::report_fatal_error((llvm *)"Expecting rounding mode for RndParamValue", (const char *)1);
  }
  *(_DWORD *)(a2 + 80) = v4;
  return result;
}

double sub_1C4C14D3C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 60;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v16 = sub_1C4C915C4(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47)
        DWORD2(v21[3]) = 0;
    }
  }
  sub_1C4C14CB8((int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3)
      LODWORD(v21[0]) = dword_1C6A5F9D0[DWORD2(v17) - 2];
    DWORD1(v21[0]) = 65;
  }
  v12 = v21[1];
  a4[4] = v21[0];
  a4[5] = v12;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v18;
  *a4 = v17;
  a4[1] = v13;
  result = *(double *)&v19;
  v15 = v20;
  a4[2] = v19;
  a4[3] = v15;
  return result;
}

double sub_1C4C14EFC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  *a3 = 43;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v20);
  LOBYTE(v21) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v28 + 12, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v26 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v22 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v24);
  v12 = *(_DWORD *)a2;
  BYTE12(v21) = sub_1C4C32DEC(v12) == 19;
  v13 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    v29 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v14 = sub_1C4C915C4(v12);
      if ((v14 & 0xFF00000000) == 0 || v14 != 47)
        v29 = 0;
    }
    sub_1C4C32DEC(v12);
    LODWORD(v22) = 1;
  }
  else
  {
    sub_1C4C32DEC(v12);
    LODWORD(v22) = 1;
    if (v13 != 4)
      goto LABEL_12;
  }
  if ((DWORD2(v20) - 2) <= 3)
    HIDWORD(v25) = dword_1C6A5F9D0[DWORD2(v20) - 2];
  LODWORD(v26) = 48;
LABEL_12:
  v15 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = v29;
  v16 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v20;
  v19 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

void sub_1C4C15114(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;

  sub_1C4C26D84(a1, (unsigned __int16 *)a2, a3, a4, 1);
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v7 + 16 * a3) != 2 && (*(_BYTE *)(v7 + 16 * (a3 + 1) + 9) & 8) != 0)
    *(_DWORD *)(a4 + 12) = 4;
  sub_1C4C265DC((__int128 *)a2, a3, a4);
}

uint64_t sub_1C4C15180(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  int v24;

  v6 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    v9 = *(_QWORD *)(v7 + 16 * a3 + 8);
    if (v9)
      v10 = v9 - 8;
    else
      v10 = 0;
    if (!*(_DWORD *)(v10 + 24))
    {
      if (*(_DWORD *)(v10 + 40) == 8)
        v11 = 2;
      else
        v11 = 1;
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v11;
      *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v10 + 32) + 16) & 0x1FF;
    }
    v12 = a3 + 1;
    *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * v12 + 8) >> 20) & 0xF;
    goto LABEL_20;
  }
  v14 = result;
  v15 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
  if (v15 == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
LABEL_16:
    *(_DWORD *)(a4 + 12) = sub_1C4C26750((uint64_t)a2);
    v19 = *(_QWORD *)(v14 + 24);
    v18 = *(_DWORD *)(a4 + 8);
LABEL_17:
    *(_QWORD *)a4 = sub_1C4C264D0(v19, v8, v18);
    goto LABEL_18;
  }
  v16 = *(_QWORD **)(result + 24);
  v17 = sub_1C4C26AB8(v16, (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = v17;
  if (v17 == 4)
    goto LABEL_16;
  v18 = v17;
  if (v17 != 1)
  {
    v23 = v15 + 117;
    if ((v15 - 139) <= 0x25)
    {
      if (((1 << v23) & 0x1600015) != 0)
      {
        v24 = 1;
LABEL_30:
        *(_DWORD *)(a4 + 12) = v24;
        v19 = (uint64_t)v16;
        goto LABEL_17;
      }
      if (((1 << v23) & 0x3400000000) != 0)
      {
        v24 = 2;
        goto LABEL_30;
      }
    }
    v24 = sub_1C4C26850(v14, (uint64_t)v8);
    v16 = *(_QWORD **)(v14 + 24);
    v18 = *(_DWORD *)(a4 + 8);
    goto LABEL_30;
  }
  *(_WORD *)a4 = *(_QWORD *)(v7 + 16 * v6 + 8);
  *(_DWORD *)(a4 + 12) = 1;
LABEL_18:
  result = sub_1C4C26A58(*((_QWORD *)a2 + 2), *v8, a3, a4);
  v7 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v7 + 16 * v6) == 2)
    return result;
  v12 = a3 + 1;
LABEL_20:
  v20 = v7 + 16 * v12;
  v22 = *(_QWORD *)(v20 + 8);
  v21 = (uint64_t *)(v20 + 8);
  LOBYTE(v12) = v22;
  if ((v22 & 0x800) != 0)
  {
    *(_DWORD *)(a4 + 12) = 4;
    v12 = *v21;
  }
  *(_BYTE *)(a4 + 25) = (v12 & 4) != 0;
  *(_BYTE *)(a4 + 26) = (v12 & 2) != 0;
  *(_BYTE *)(a4 + 27) = v12 & 1;
  return result;
}

uint64_t sub_1C4C15394(uint64_t result, int *a2, _DWORD *a3)
{
  if (a3[11] == 1)
    a3[12] = 2;
  if (a3[18] == 1)
    a3[19] = 2;
  if (a3[25] == 1)
    a3[26] = 2;
  if (*(_DWORD *)result >= 5u)
  {
    a3[43] = 1;
    if ((*(_BYTE *)(*(_QWORD *)(result + 8) + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(*a2);
      if ((result & 0xFF00000000) == 0 || result != 47)
        a3[43] = 0;
    }
  }
  return result;
}

__n128 sub_1C4C1542C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *a3 = 56;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  sub_1C4C15114((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 8, (int8x8_t *)&v26, (uint64_t)&v26 + 8);
  sub_1C4C15180((uint64_t)a1, a2, v10, (uint64_t)&v20 + 4);
  sub_1C4C15180((uint64_t)a1, a2, v11, (uint64_t)&v22);
  sub_1C4C15180((uint64_t)a1, a2, v17, (uint64_t)&v23 + 12);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  sub_1C4C15394((uint64_t)a1, (int *)a2, &v18);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    HIDWORD(v25) = 61;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_OWORD *)(a4 + 160) = v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C1560C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  *a3 = 36;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  memset(v22, 0, 44);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v22[2] + 8, (int8x8_t *)v22, (uint64_t)v22 + 8);
  sub_1C4C15874((uint64_t)a1, a2, v10, (uint64_t)&v18);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v19 + 12);
  v17.n128_u8[12] = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD2(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    HIDWORD(v21) = 41;
  }
  v12 = v22[1];
  *(_OWORD *)(a4 + 96) = v22[0];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v22[1] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C4C157AC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t result;

  v8 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  if (*v8 != 1)
    return sub_1C4C26EC0(a1, a2, v8, a3, a4, 0);
  *(_DWORD *)(a4 + 8) = sub_1C4C26AB8(*(_QWORD **)(a1 + 24), v8);
  *(_DWORD *)(a4 + 12) = sub_1C4C26850(a1, (uint64_t)v8);
  result = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v8, *(_DWORD *)(a4 + 8));
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 20) = (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 16 * (a3 + 1) + 8) >> 20) & 0xF;
  return result;
}

uint64_t sub_1C4C15874(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;

  v6 = a3;
  v7 = *((_QWORD *)a2 + 2);
  v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    v9 = *(_QWORD *)(v7 + 16 * a3 + 8);
    if (v9)
      v10 = v9 - 8;
    else
      v10 = 0;
    if (!*(_DWORD *)(v10 + 24))
    {
      v11 = *(_DWORD *)(v10 + 40);
      if (v11 == 2)
      {
        v12 = 1;
      }
      else if (v11 == 4)
      {
        v12 = 2;
      }
      else
      {
        v12 = 3;
      }
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v12;
      *(_WORD *)a4 = *(_WORD *)(*(_QWORD *)(v10 + 32) + 16) & 0x1FF;
    }
    v17 = a3 + 1;
    *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * v17 + 8) >> 20) & 0xF;
    goto LABEL_23;
  }
  v14 = result;
  if (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
LABEL_14:
    v16 = sub_1C4C26750((uint64_t)a2);
LABEL_15:
    *(_DWORD *)(a4 + 12) = v16;
    *(_QWORD *)a4 = sub_1C4C264D0(*(_QWORD *)(v14 + 24), v8, *(_DWORD *)(a4 + 8));
    goto LABEL_16;
  }
  v15 = sub_1C4C26AB8(*(_QWORD **)(result + 24), (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = v15;
  if (v15 == 4)
    goto LABEL_14;
  if (v15 != 1)
  {
    v16 = sub_1C4C26850(v14, (uint64_t)v8);
    goto LABEL_15;
  }
  *(_WORD *)a4 = *(_QWORD *)(v7 + 16 * v6 + 8);
  *(_DWORD *)(a4 + 12) = 1;
LABEL_16:
  result = sub_1C4C26A58(*((_QWORD *)a2 + 2), *v8, a3, a4);
  v7 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v7 + 16 * v6) == 2)
    return result;
  v17 = a3 + 1;
LABEL_23:
  v18 = *(_BYTE *)(v7 + 16 * v17 + 8);
  *(_BYTE *)(a4 + 25) = (v18 & 4) != 0;
  *(_BYTE *)(a4 + 26) = (v18 & 2) != 0;
  *(_BYTE *)(a4 + 27) = v18 & 1;
  return result;
}

__n128 sub_1C4C15A28(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  *a3 = 42;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  memset(v22, 0, 44);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v22[2] + 8, (int8x8_t *)v22, (uint64_t)v22 + 8);
  sub_1C4C15874((uint64_t)a1, a2, v10, (uint64_t)&v18);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v19 + 12);
  v17.n128_u8[12] = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD2(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    HIDWORD(v21) = 47;
  }
  v12 = v22[1];
  *(_OWORD *)(a4 + 96) = v22[0];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v22[1] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C15BC8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 37;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD1(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD2(v25) = 42;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void sub_1C4C15D94(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v21[136];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  if (*v9 == 1)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v11 = sub_1C4C26AB8(v10, v9);
    *(_DWORD *)(a4 + 8) = v11;
    if (((__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] - 139) <= 0x25)
    {
      v12 = v11;
      if (((1 << (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] + 117)) & 0x1600015) != 0)
      {
        v13 = 1;
LABEL_9:
        *(_DWORD *)(a4 + 12) = v13;
        *(_QWORD *)a4 = sub_1C4C264D0((uint64_t)v10, v9, v12);
        *(_DWORD *)(a4 + 20) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8) >> 20) & 0xF;
        goto LABEL_10;
      }
      if (((1 << (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] + 117)) & 0x3400000000) != 0)
      {
        v13 = 2;
        goto LABEL_9;
      }
    }
    v13 = sub_1C4C26850(a1, (uint64_t)v9);
    v10 = *(_QWORD **)(a1 + 24);
    v12 = *(_DWORD *)(a4 + 8);
    goto LABEL_9;
  }
  sub_1C4C26EC0(a1, (uint64_t)a2, v9, a3, a4, 1);
LABEL_10:
  v18 = *(_OWORD *)a2;
  v19 = v21;
  v20 = 0x800000000;
  if (&v18 != (__int128 *)a2)
  {
    v14 = *((_DWORD *)a2 + 6);
    if (v14)
    {
      if (v14 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, *((unsigned int *)a2 + 6), 16);
        v16 = *((unsigned int *)a2 + 6);
        v15 = v19;
        if (!(_DWORD)v16)
          goto LABEL_15;
      }
      else
      {
        v15 = v21;
        v16 = *((unsigned int *)a2 + 6);
      }
      memcpy(v15, *((const void **)a2 + 2), 16 * v16);
      v15 = v19;
LABEL_15:
      LODWORD(v20) = v14;
      goto LABEL_17;
    }
  }
  v15 = v21;
LABEL_17:
  v21[128] = *((_BYTE *)a2 + 160);
  v17 = 1;
  if (v15[16 * v8] == 5)
  {
    if (**(_BYTE **)&v15[16 * v8 + 8] == 4)
      v17 = 2;
    else
      v17 = 1;
  }
  *(_BYTE *)(a4 + 28) = v15[16 * v17 + 8 + 16 * a3] & 1;
  if (v15 != v21)
    free(v15);
}

__n128 sub_1C4C15FD4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 41;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C15D94((uint64_t)a1, a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1C4C15180((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1C4C15180((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C15180((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD1(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD2(v25) = 46;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C161A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  *a3 = 84;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v35 + 5, (int8x8_t *)&v27 + 1, (uint64_t)&v33 + 4);
  v13 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  v28.n128_u32[0] = v13 & 7;
  v28.n128_u32[1] = (v13 >> 11) & 7;
  v28.n128_u64[1] = (v13 << 9) & 0x300000000 | (v13 >> 7) & 7;
  LODWORD(v29) = (v13 >> 5) & 3;
  DWORD2(v29) = (v13 >> 14) & 7;
  BYTE5(v29) = (v13 & 0x200000) != 0;
  BYTE4(v29) = (v13 & 0x400000) != 0;
  BYTE4(v35) = (v13 & 0x2000000) != 0;
  v15 = (v13 & 0x4000000) == 0 && *a1 > 3u;
  LOBYTE(v27) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v29 + 12);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v31 + 8);
  DWORD2(v25) = 5;
  if (*a1 >= 4u)
    HIDWORD(v25) = 2;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *(_QWORD *)(v16 + 16 * v12 + 8);
  if (v17)
    v18 = v17 - 8;
  else
    v18 = 0;
  LOWORD(v25) = *(_WORD *)(*(_QWORD *)(v18 + 32) + 16) & 0x1FFF;
  if (v12)
    v19 = 1;
  else
    v19 = 2;
  v20 = *(_DWORD *)(v16 + 16 * (v19 + v12) + 8);
  if (*a1 >= 4u)
  {
    HIDWORD(v26) = 2;
    DWORD1(v27) = 86;
  }
  v21 = v34;
  *(_OWORD *)(a4 + 128) = v33;
  *(_OWORD *)(a4 + 144) = v21;
  *(_QWORD *)(a4 + 160) = v35;
  v22 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v22;
  v23 = v32;
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v23;
  *(_OWORD *)a4 = v25;
  DWORD1(v26) = (v20 >> 20) & 0xF;
  BYTE8(v26) = (v20 & 0x10) != 0;
  *(_OWORD *)(a4 + 16) = v26;
  result = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C163C4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[3];

  *a3 = 112;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  memset(v33, 0, 44);
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v25) = 2;
  HIDWORD(v25) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v25 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = *((_QWORD *)a2 + 2);
  DWORD1(v26) = (*(_DWORD *)(v14 + 16 * (v8 + 1) + 8) >> 20) & 0xF;
  BYTE8(v26) = (*(_DWORD *)(v14 + 16 * (v8 + 1) + 8) & 0x10) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v33[2] + 8, (int8x8_t *)&v27 + 1, (uint64_t)v33 + 8);
  v28.n128_u8[0] = *(_BYTE *)(v14 + 16 * v10 + 8) >> 4;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v31 + 12);
  sub_1C4C0E920(a1, a2, v22, (uint64_t)&v30);
  sub_1C4C1664C(a1, (uint64_t)a2, v23, (uint64_t)v28.n128_i64 + 4);
  LOWORD(v15) = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v12) != 5)
    v15 = *(unsigned __int16 *)(v16 + 16 * v12 + 8) << 21 >> 21;
  WORD6(v26) = v15;
  if (*(_BYTE *)(v16 + 16 * v24) == 5)
    LOWORD(v17) = 0;
  else
    v17 = *(unsigned __int16 *)(v16 + 16 * v24 + 8) << 21 >> 21;
  HIWORD(v26) = v17;
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)&v27 = 0x6F00000000;
  v18 = v33[1];
  *(_OWORD *)(a4 + 128) = v33[0];
  *(_OWORD *)(a4 + 144) = v18;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v33[1] + 12);
  v19 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v19;
  v20 = v32;
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v20;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v26;
  result = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

uint64_t sub_1C4C1664C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;

  v8 = *(_QWORD *)(a2 + 16);
  result = sub_1C4C32DEC(*(_DWORD *)a2);
  if ((_DWORD)result == 41)
  {
    v10 = (unsigned __int8 *)(v8 + 16 * a3);
    v11 = *(_QWORD **)(a1 + 24);
    v12 = sub_1C4C26AB8(v11, v10);
    *(_DWORD *)(a4 + 8) = v12;
    *(_DWORD *)(a4 + 12) = 1;
    result = sub_1C4C264D0((uint64_t)v11, v10, v12);
    *(_QWORD *)a4 = result;
    v13 = *(_QWORD *)(a2 + 16) + 16 * (a3 + 1);
    *(_BYTE *)(a4 + 24) = (*(_BYTE *)(v13 + 8) & 0x10) != 0;
    v14 = (*(_DWORD *)(v13 + 8) >> 20) & 0xF;
  }
  else
  {
    v14 = 0;
    *(_QWORD *)(a4 + 8) = 0x100000007;
    *(_DWORD *)a4 = 9;
  }
  *(_DWORD *)(a4 + 20) = v14;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

__n128 sub_1C4C16714(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[3];

  *a3 = 111;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  memset(v33, 0, 44);
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v25) = 2;
  HIDWORD(v25) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v25 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v26 + 4) = (*(_DWORD *)(v14 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  LODWORD(v26) = (*(_BYTE *)(v14 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v33[2] + 8, (int8x8_t *)&v27 + 1, (uint64_t)v33 + 8);
  v28.n128_u8[0] = *(_BYTE *)(v14 + 16 * v10 + 8) >> 4;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v31 + 12);
  sub_1C4C0E920(a1, a2, v22, (uint64_t)&v30);
  sub_1C4C1664C(a1, (uint64_t)a2, v23, (uint64_t)v28.n128_i64 + 4);
  LOWORD(v15) = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v12) != 5)
    v15 = *(unsigned __int16 *)(v16 + 16 * v12 + 8) << 21 >> 21;
  WORD6(v26) = v15;
  if (*(_BYTE *)(v16 + 16 * v24) == 5)
    LOWORD(v17) = 0;
  else
    v17 = *(unsigned __int16 *)(v16 + 16 * v24 + 8) << 21 >> 21;
  HIWORD(v26) = v17;
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)&v27 = 0x6E00000000;
  v18 = v33[1];
  *(_OWORD *)(a4 + 128) = v33[0];
  *(_OWORD *)(a4 + 144) = v18;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v33[1] + 12);
  v19 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v19;
  v20 = v32;
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v20;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v26;
  result = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C169A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *a3 = 121;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0u;
  v32 = 0u;
  v21 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v22);
  LOBYTE(v23) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v32 + 12, (int8x8_t *)&v24 + 1, (uint64_t)&v30 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v27);
  sub_1C4C1664C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)v25.n128_i64 + 4);
  v13 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v13 + 16 * v12) == 5)
    LOWORD(v14) = 0;
  else
    v14 = *(unsigned __int16 *)(v13 + 16 * v12 + 8) << 21 >> 21;
  WORD6(v23) = v14;
  if (*(_BYTE *)(v13 + 16 * v21) == 5)
    LOWORD(v15) = 0;
  else
    v15 = *(unsigned __int16 *)(v13 + 16 * v21 + 8) << 21 >> 21;
  HIWORD(v23) = v15;
  *(_QWORD *)&v29 = 0;
  *(_QWORD *)&v30 = 0;
  DWORD2(v30) = 0;
  *((_QWORD *)&v29 + 1) = 0x100000001;
  WORD6(v28) = 256;
  if (*a1 >= 4u)
  {
    v25.n128_u8[0] = 15;
    *(_QWORD *)&v24 = 0x7800000000;
  }
  v16 = v31;
  *(_OWORD *)(a4 + 128) = v30;
  *(_OWORD *)(a4 + 144) = v16;
  *(_OWORD *)(a4 + 160) = v32;
  v17 = v27;
  *(_OWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v29;
  *(_OWORD *)(a4 + 96) = v28;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  result = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C16BB8(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *a3 = 121;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v23) = 2;
  HIDWORD(v23) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v23 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v24 + 4) = (*(_DWORD *)(v15 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  LODWORD(v24) = (*(_BYTE *)(v15 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v33 + 12, (int8x8_t *)&v25 + 1, (uint64_t)&v31 + 12);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&v28);
  sub_1C4C1664C(a1, (uint64_t)a2, v11, (uint64_t)v26.n128_i64 + 4);
  LOWORD(v16) = 0;
  v17 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v17 + 16 * v12) != 5)
    v16 = *(unsigned __int16 *)(v17 + 16 * v12 + 8) << 21 >> 21;
  WORD6(v24) = v16;
  if (*(_BYTE *)(v17 + 16 * v13) == 5)
    LOWORD(v18) = 0;
  else
    v18 = *(unsigned __int16 *)(v17 + 16 * v13 + 8) << 21 >> 21;
  HIWORD(v24) = v18;
  *(_QWORD *)&v30 = 0;
  *(_QWORD *)&v31 = 0;
  DWORD2(v31) = 0;
  *((_QWORD *)&v30 + 1) = 0x100000001;
  WORD6(v29) = 256;
  if (*(_DWORD *)a1 >= 4u)
  {
    v26.n128_u8[0] = 15;
    *(_QWORD *)&v25 = 0x7800000000;
  }
  v19 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 160) = v33;
  v20 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v20;
  v21 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v21;
  *(_OWORD *)a4 = v23;
  *(_OWORD *)(a4 + 16) = v24;
  result = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C16E1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 179;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 162;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C1701C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 179;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 162;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17220(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 186;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 183;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17420(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 186;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 183;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17624(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 180;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 163;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17824(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 184;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 167;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C179AC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 35;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 40;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17BB0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 75;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 79;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17CFC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 18;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 23;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17E48(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 144;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 143;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C17F94(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 170;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 153;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1810C(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3)
  {
    if (sub_1C4C1841C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C18480(a1, a2, a3, a4).n128_u64[0];
    }
    else if (sub_1C4C1869C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C18700(a1, a2, a3, a4).n128_u64[0];
    }
    else if ((sub_1C4C26BA0((int *)a2) & 1) != 0 || !sub_1C4C26CCC((uint64_t)a2))
    {
      if (sub_1C4C26BA0((int *)a2))
        sub_1C4C26CCC((uint64_t)a2);
      *(_QWORD *)&result = sub_1C4C18B30(a1, a2, a3, a4).n128_u64[0];
    }
    else
    {
      *(_QWORD *)&result = sub_1C4C1891C(a1, a2, a3, a4).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C18224(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C18224(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];

  *a3 = 68;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  memset(v30, 0, 60);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v21, (BOOL *)&v30[3] + 8, (int8x8_t *)((char *)v30 + 12), (uint64_t)&v30[1] + 8);
  DWORD1(v30[1]) = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v23 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v25 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v28 + 12);
  if (v21 <= 1)
  {
    if (DWORD2(v27) == 1)
      HIDWORD(v27) = v22.n128_u32[0];
    if (DWORD1(v29) == 1)
      DWORD2(v29) = v22.n128_u32[0];
  }
  v13 = v30[2];
  *(_OWORD *)(a4 + 160) = v30[1];
  *(_OWORD *)(a4 + 176) = v13;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v30[2] + 12);
  v14 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v30[0];
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = v22;
  *(_OWORD *)a4 = v21;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

BOOL sub_1C4C1841C(_DWORD *a1, int *a2)
{
  return *a1 >= 4u
      && (sub_1C4C26BA0(a2) & 1) == 0
      && (sub_1C4C26CCC((uint64_t)a2) & 1) == 0
      && (sub_1C4C32DEC(*a2) & 0xFFFFFFFE) != 38;
}

__n128 sub_1C4C18480(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  BOOL v35[16];

  *a3 = 71;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v21 = sub_1C4C2FD5C(v7);
  *(_QWORD *)v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v11 = *((_QWORD *)a2 + 2);
  v24.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v35, (int8x8_t *)((char *)&v32 + 4), (uint64_t)&v33);
  HIDWORD(v32) = *(_DWORD *)(v11 + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v24.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v20, (uint64_t)&v26 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v22, (uint64_t)&v28 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v21, (uint64_t)&v30);
  v12 = *a1;
  sub_1C4C18F50(*a1, *((_QWORD *)a1 + 1), *(_DWORD *)a2, &v23);
  if (v12 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      HIDWORD(v31) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    LODWORD(v32) = 75;
  }
  v13 = v34;
  *(_OWORD *)(a4 + 160) = v33;
  *(_OWORD *)(a4 + 176) = v13;
  *(_QWORD *)(a4 + 192) = *(_QWORD *)v35;
  v14 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v17;
  result = v24;
  *(_OWORD *)a4 = v23;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C4C1869C(_DWORD *a1, int *a2)
{
  uint64_t result;

  if (*a1 >= 4u)
  {
    result = sub_1C4C26BA0(a2);
    if (!(_DWORD)result)
      return result;
    if ((sub_1C4C26CCC((uint64_t)a2) & 1) == 0)
      return (sub_1C4C32DEC(*a2) & 0xFFFFFFFE) != 38;
  }
  return 0;
}

__n128 sub_1C4C18700(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  BOOL v35[16];

  *a3 = 72;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v21 = sub_1C4C2FD5C(v7);
  *(_QWORD *)v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v11 = *((_QWORD *)a2 + 2);
  v24.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v35, (int8x8_t *)((char *)&v32 + 4), (uint64_t)&v33);
  HIDWORD(v32) = *(_DWORD *)(v11 + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v24.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v20, (uint64_t)&v26 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v22, (uint64_t)&v28 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v21, (uint64_t)&v30);
  v12 = *a1;
  sub_1C4C18FC4(*a1, *((_QWORD *)a1 + 1), *(_DWORD *)a2, &v23);
  if (v12 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      HIDWORD(v31) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    LODWORD(v32) = 76;
  }
  v13 = v34;
  *(_OWORD *)(a4 + 160) = v33;
  *(_OWORD *)(a4 + 176) = v13;
  *(_QWORD *)(a4 + 192) = *(_QWORD *)v35;
  v14 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v17;
  result = v24;
  *(_OWORD *)a4 = v23;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1891C(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *a3 = 69;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v21 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v13 = *((_QWORD *)a2 + 2);
  v24.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35 + 8, (int8x8_t *)((char *)&v32 + 12), (uint64_t)&v33 + 8);
  DWORD1(v33) = *(_DWORD *)(v13 + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v25 + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v21, (uint64_t)&v28 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v22, (uint64_t)&v30 + 8);
  v14 = *a1;
  sub_1C4C19040(*a1, *((_QWORD *)a1 + 1), *(_DWORD *)a2, &v23);
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      DWORD1(v32) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    DWORD2(v32) = 73;
  }
  v15 = v34;
  *(_OWORD *)(a4 + 160) = v33;
  *(_OWORD *)(a4 + 176) = v15;
  *(_OWORD *)(a4 + 192) = v35;
  v16 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v16;
  v17 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v17;
  v18 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v18;
  v19 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v19;
  result = v24;
  *(_OWORD *)a4 = v23;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C18B30(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *a3 = 70;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v21 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v13 = *((_QWORD *)a2 + 2);
  v24.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35 + 8, (int8x8_t *)((char *)&v32 + 12), (uint64_t)&v33 + 8);
  DWORD1(v33) = *(_DWORD *)(v13 + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v25 + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v21, (uint64_t)&v28 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v22, (uint64_t)&v30 + 8);
  v14 = *a1;
  sub_1C4C190B4(*a1, *((_QWORD *)a1 + 1), *(_DWORD *)a2, &v23);
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3)
      DWORD1(v32) = dword_1C6A5F9D0[DWORD2(v23) - 2];
    DWORD2(v32) = 74;
  }
  v15 = v34;
  *(_OWORD *)(a4 + 160) = v33;
  *(_OWORD *)(a4 + 176) = v15;
  *(_OWORD *)(a4 + 192) = v35;
  v16 = v30;
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v16;
  v17 = v32;
  *(_OWORD *)(a4 + 128) = v31;
  *(_OWORD *)(a4 + 144) = v17;
  v18 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v18;
  v19 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v19;
  result = v24;
  *(_OWORD *)a4 = v23;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C4C18D44(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;

  v7 = result;
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v8 + 16 * a3) != 1
    || (v9 = v8 + 16 * a3, v12 = *(_DWORD *)(v9 + 8), v10 = (int *)(v9 + 8), v11 = v12, v12 > 0x57)
    || ((byte_1C69FEF1A[v11 >> 3] >> (v11 & 7)) & 1) == 0)
  {
    v15 = *(_DWORD *)a2;
    v16 = sub_1C4C2FD5C((unsigned __int16)*(_DWORD *)a2);
    if (*(_BYTE *)(v8 + 16 * v16) == 2)
    {
      if (sub_1C4C32DEC(v15) != 9)
        goto LABEL_9;
    }
    else if (!(*(_BYTE *)(v8 + 16 * (v16 + 1) + 8) & 4 | ((*(_BYTE *)(v8 + 16 * (v16 + 1) + 8) & 3) != 0)))
    {
LABEL_9:
      v17 = sub_1C4C2FD5C((unsigned __int16)v15);
      if (*(_BYTE *)(v8 + 16 * v17) == 2)
      {
        v18 = sub_1C4C32DEC(v15);
        *(_DWORD *)a4 = v18 == 9;
        if (v18 != 9)
          return sub_1C4C0BC90(v7, a2, a3, a4 + 4);
      }
      else
      {
        v19 = *(_BYTE *)(v8 + 16 * (v17 + 1) + 8) & 4 | ((*(_BYTE *)(v8 + 16 * (v17 + 1) + 8) & 3) != 0);
        *(_DWORD *)a4 = v19 != 0;
        if (!v19)
          return sub_1C4C0BC90(v7, a2, a3, a4 + 4);
      }
      return sub_1C4C157AC(v7, a2, a3, a4 + 4);
    }
    *(_DWORD *)a4 = 1;
    return sub_1C4C157AC(v7, a2, a3, a4 + 4);
  }
  *(_DWORD *)a4 = 2;
  v13 = *v10;
  if (v13 == 1)
  {
    v14 = 7;
  }
  else if (v13 == 2)
  {
    v14 = 6;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  *(_BYTE *)(a4 + 5) = v14;
  *(_BYTE *)(a4 + 4) = 1;
  return result;
}

int8x8_t sub_1C4C18F14(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, BOOL *a5, int8x8_t *a6, uint64_t a7)
{
  int8x8_t result;

  if (*(_DWORD *)a4 >= 2u)
  {
    if (*(_DWORD *)a4 != 2)
      return result;
  }
  else
  {
    *(_BYTE *)(a4 + 20) = (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16 * a3 + 8) & 0x20) != 0;
  }
  return sub_1C4C0B76C(a1, a2, a3, a5, a6, a7);
}

uint64_t sub_1C4C18F50(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4[23] == 1)
    a4[24] = 1;
  if (a4[30] == 1)
    a4[31] = 1;
  if (result >= 5)
  {
    a4[49] = 1;
    if ((*(_BYTE *)(a2 + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(a3);
      if ((result & 0xFF00000000) == 0 || result != 47)
        a4[49] = 0;
    }
  }
  return result;
}

uint64_t sub_1C4C18FC4(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4[23] == 1)
    a4[24] = 2;
  if (a4[30] == 1)
    a4[31] = 2;
  if (result >= 5)
  {
    a4[49] = 1;
    if ((*(_BYTE *)(a2 + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(a3);
      if ((result & 0xFF00000000) == 0 || result != 47)
        a4[49] = 0;
    }
  }
  return result;
}

uint64_t sub_1C4C19040(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4[25] == 1)
    a4[26] = 1;
  if (a4[32] == 1)
    a4[33] = 1;
  if (result >= 5)
  {
    a4[51] = 1;
    if ((*(_BYTE *)(a2 + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(a3);
      if ((result & 0xFF00000000) == 0 || result != 47)
        a4[51] = 0;
    }
  }
  return result;
}

uint64_t sub_1C4C190B4(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4[25] == 1)
    a4[26] = 2;
  if (a4[32] == 1)
    a4[33] = 2;
  if (result >= 5)
  {
    a4[51] = 1;
    if ((*(_BYTE *)(a2 + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(a3);
      if ((result & 0xFF00000000) == 0 || result != 47)
        a4[51] = 0;
    }
  }
  return result;
}

double sub_1C4C19130(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3)
  {
    if (sub_1C4C1841C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C18480(a1, a2, a3, a4).n128_u64[0];
    }
    else if (sub_1C4C1869C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C18700(a1, a2, a3, a4).n128_u64[0];
    }
    else if ((sub_1C4C26BA0((int *)a2) & 1) == 0 && sub_1C4C26CCC((uint64_t)a2))
    {
      *(_QWORD *)&result = sub_1C4C1891C(a1, a2, a3, a4).n128_u64[0];
    }
    else
    {
      if (sub_1C4C26BA0((int *)a2))
        sub_1C4C26CCC((uint64_t)a2);
      *(_QWORD *)&result = sub_1C4C18B30(a1, a2, a3, a4).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C19248(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C19248(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];

  *a3 = 68;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  memset(v30, 0, 60);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v21, (BOOL *)&v30[3] + 8, (int8x8_t *)((char *)v30 + 12), (uint64_t)&v30[1] + 8);
  DWORD1(v30[1]) = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v23 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v25 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v28 + 12);
  if (v21 <= 1)
  {
    if (DWORD2(v27) == 1)
      HIDWORD(v27) = v22.n128_u32[0];
    if (DWORD1(v29) == 1)
      DWORD2(v29) = v22.n128_u32[0];
  }
  v13 = v30[2];
  *(_OWORD *)(a4 + 160) = v30[1];
  *(_OWORD *)(a4 + 176) = v13;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v30[2] + 12);
  v14 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v30[0];
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = v22;
  *(_OWORD *)a4 = v21;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1943C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3u)
  {
    if (sub_1C4C196D8(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C19730((uint64_t)a1, a2, a3, a4).n128_u64[0];
    }
    else
    {
      sub_1C4C19980(a1, (int *)a2);
      *(_QWORD *)&result = sub_1C6160528((uint64_t)a1, a2, a3, a4).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C194E4(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C194E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];

  *a3 = 68;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  memset(v30, 0, 60);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v21, (BOOL *)&v30[3] + 8, (int8x8_t *)((char *)v30 + 12), (uint64_t)&v30[1] + 8);
  DWORD1(v30[1]) = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v23 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v25 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v28 + 12);
  if (v21 <= 1)
  {
    if (DWORD2(v27) == 1)
      HIDWORD(v27) = v22.n128_u32[0];
    if (DWORD1(v29) == 1)
      DWORD2(v29) = v22.n128_u32[0];
  }
  v13 = v30[2];
  *(_OWORD *)(a4 + 160) = v30[1];
  *(_OWORD *)(a4 + 176) = v13;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v30[2] + 12);
  v14 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v30[0];
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = v22;
  *(_OWORD *)a4 = v21;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

BOOL sub_1C4C196D8(_DWORD *a1, int *a2)
{
  return *a1 >= 4u && (sub_1C4C26BA0(a2) & 1) == 0 && (sub_1C4C32DEC(*a2) & 0xFFFFFFFE) == 38;
}

__n128 sub_1C4C19730(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *a3 = 73;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    v16 = 6;
  }
  else if (v15 == 1)
  {
    v16 = 7;
  }
  else
  {
    v16 = (v15 + 9) & 0xF;
  }
  BYTE1(v24) = v16;
  LOBYTE(v24) = 1;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v23, (BOOL *)&v34 + 8, (int8x8_t *)((char *)&v31 + 12), (uint64_t)&v32 + 8);
  DWORD1(v32) = *(_DWORD *)(v14 + 16 * v9 + 8) & 0xF;
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v24 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v26);
  sub_1C4C0E920(a1, a2, v12, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E920(a1, a2, v13, (uint64_t)&v29 + 8);
  if (DWORD1(v28) == 1)
    *(_QWORD *)((char *)&v28 + 4) = 0x100000001;
  if ((_DWORD)v30 == 1)
    *(_QWORD *)&v30 = 0x100000001;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v34) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v17 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47)
        HIDWORD(v34) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_16;
  }
  *(_QWORD *)((char *)&v31 + 4) = 0x4D00000003;
LABEL_16:
  v18 = v33;
  *(_OWORD *)(a4 + 128) = v32;
  *(_OWORD *)(a4 + 144) = v18;
  *(_OWORD *)(a4 + 160) = v34;
  v19 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v19;
  v20 = v31;
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v20;
  v21 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v21;
  result = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

uint64_t sub_1C4C19980(_DWORD *a1, int *a2)
{
  uint64_t result;

  if (*a1 < 4u)
    return 0;
  result = sub_1C4C26BA0(a2);
  if ((_DWORD)result)
    return (sub_1C4C32DEC(*a2) & 0xFFFFFFFE) == 38;
  return result;
}

double sub_1C4C199D8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3u)
  {
    if (sub_1C4C1841C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C19CC8(a1, a2, a3, a4).n128_u64[0];
    }
    else if (sub_1C4C1869C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C19F88(a1, a2, a3, a4).n128_u64[0];
    }
    else if ((sub_1C4C26BA0((int *)a2) & 1) != 0 || !sub_1C4C26CCC((uint64_t)a2))
    {
      if (sub_1C4C26BA0((int *)a2))
        sub_1C4C26CCC((uint64_t)a2);
      *(_QWORD *)&result = sub_1C4C1A510(a1, a2, a3, a4).n128_u64[0];
    }
    else
    {
      *(_QWORD *)&result = sub_1C4C1A254(a1, a2, a3, a4).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C19AF0(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C19AF0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];

  *a3 = 93;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  memset(v30, 0, 60);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v21, (BOOL *)&v30[3] + 8, (int8x8_t *)((char *)v30 + 12), (uint64_t)&v30[1] + 8);
  DWORD1(v30[1]) = dword_1C6A5FB54[(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v23 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v19, (uint64_t)&v25 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v28 + 12);
  sub_1C4C1A7D4(&v21);
  v13 = v30[2];
  *(_OWORD *)(a4 + 160) = v30[1];
  *(_OWORD *)(a4 + 176) = v13;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v30[2] + 12);
  v14 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v30[0];
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = v22;
  *(_OWORD *)a4 = v21;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C19CC8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38[16];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  *a3 = 97;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v11 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v38, (int8x8_t *)((char *)&v35 + 4), (uint64_t)&v36);
  HIDWORD(v35) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v22, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v23, (uint64_t)&v29 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v31 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&v33);
  if (HIDWORD(v31) == 1)
    LODWORD(v32) = 1;
  if (DWORD2(v33) == 1)
    *((_QWORD *)&v33 + 1) = 0x100000001;
  if (HIDWORD(v35) >= 4)
  {
    v18 = 0;
    v19 = 0;
    v39[0] = (char *)&v27.n128_u64[1] + 4;
    v39[1] = (char *)&v29 + 8;
    do
    {
      v20 = v18;
      v21 = v39[v19];
      if (*(_DWORD *)(v21 + 8) != 1 && *(_DWORD *)(v21 + 12) == 1)
        *(_BYTE *)(v21 + 25) = 1;
      v18 = 1;
      v19 = 1;
    }
    while ((v20 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      HIDWORD(v34) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    LODWORD(v35) = 96;
  }
  v12 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v12;
  *(_DWORD *)(a4 + 192) = *(_DWORD *)v38;
  v13 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v13;
  v14 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v14;
  v15 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v16;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C19F88(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38[16];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  *a3 = 98;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v11 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v38, (int8x8_t *)((char *)&v35 + 4), (uint64_t)&v36);
  HIDWORD(v35) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v22, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v23, (uint64_t)&v29 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v31 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&v33);
  if (HIDWORD(v31) == 1)
    LODWORD(v32) = 2;
  if (DWORD2(v33) == 1)
    *((_QWORD *)&v33 + 1) = 0x200000001;
  if (HIDWORD(v35) >= 4)
  {
    v18 = 0;
    v19 = 0;
    v39[0] = (char *)&v27.n128_u64[1] + 4;
    v39[1] = (char *)&v29 + 8;
    do
    {
      v20 = v18;
      v21 = v39[v19];
      if (*(_DWORD *)(v21 + 8) != 1 && *(_DWORD *)(v21 + 12) == 1)
        *(_BYTE *)(v21 + 25) = 1;
      v18 = 1;
      v19 = 1;
    }
    while ((v20 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      HIDWORD(v34) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    LODWORD(v35) = 97;
  }
  v12 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v12;
  *(_DWORD *)(a4 + 192) = *(_DWORD *)v38;
  v13 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v13;
  v14 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v14;
  v15 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v16;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1A254(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  *a3 = 95;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  memset(v35, 0, 60);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v13 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35[3] + 8, (int8x8_t *)((char *)v35 + 12), (uint64_t)&v35[1] + 8);
  DWORD1(v35[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v28 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v12, (uint64_t)&v30);
  sub_1C4C15874((uint64_t)a1, a2, v24, (uint64_t)&v31 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v25, (uint64_t)&v33 + 8);
  if (DWORD1(v32) == 1)
    *(_QWORD *)((char *)&v32 + 4) = 0x100000001;
  if ((_DWORD)v34 == 1)
    *(_QWORD *)&v34 = 0x100000001;
  if (DWORD1(v35[1]) >= 4)
  {
    v20 = 0;
    v21 = 0;
    v36[0] = (char *)&v28 + 4;
    v36[1] = &v30;
    do
    {
      v22 = v20;
      v23 = v36[v21];
      if (*(_DWORD *)(v23 + 8) != 1 && *(_DWORD *)(v23 + 12) == 1)
        *(_BYTE *)(v23 + 25) = 1;
      v20 = 1;
      v21 = 1;
    }
    while ((v22 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      DWORD1(v35[0]) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    DWORD2(v35[0]) = 94;
  }
  v14 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v14;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v35[2] + 12);
  v15 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v18;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1A510(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  *a3 = 96;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  memset(v35, 0, 60);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v13 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35[3] + 8, (int8x8_t *)((char *)v35 + 12), (uint64_t)&v35[1] + 8);
  DWORD1(v35[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v24, (uint64_t)&v28 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v30);
  sub_1C4C15874((uint64_t)a1, a2, v25, (uint64_t)&v31 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v33 + 8);
  if (DWORD1(v32) == 1)
    *(_QWORD *)((char *)&v32 + 4) = 0x200000001;
  if ((_DWORD)v34 == 1)
    *(_QWORD *)&v34 = 0x200000001;
  if (DWORD1(v35[1]) >= 4)
  {
    v20 = 0;
    v21 = 0;
    v36[0] = (char *)&v28 + 4;
    v36[1] = &v30;
    do
    {
      v22 = v20;
      v23 = v36[v21];
      if (*(_DWORD *)(v23 + 8) != 1 && *(_DWORD *)(v23 + 12) == 1)
        *(_BYTE *)(v23 + 25) = 1;
      v20 = 1;
      v21 = 1;
    }
    while ((v22 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      DWORD1(v35[0]) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    DWORD2(v35[0]) = 95;
  }
  v14 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v14;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v35[2] + 12);
  v15 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v18;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

_DWORD *sub_1C4C1A7D4(_DWORD *result)
{
  int v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  if (*result <= 1u)
  {
    v1 = result[4];
    if (result[26] == 1)
      result[27] = v1;
    if (result[33] == 1)
      result[34] = v1;
  }
  if (result[41] >= 4u)
  {
    v2 = 0;
    v3 = 0;
    v6[0] = result + 10;
    v6[1] = result + 17;
    do
    {
      v4 = v2;
      v5 = v6[v3];
      if (*(_DWORD *)(v5 + 8) != 1 && *(_DWORD *)(v5 + 12) == 1)
        *(_BYTE *)(v5 + 25) = 1;
      v2 = 1;
      v3 = 1;
    }
    while ((v4 & 1) == 0);
  }
  return result;
}

double sub_1C4C1A8A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3u)
  {
    if (sub_1C4C1841C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C6160780(a1, a2, a3, a4).n128_u64[0];
    }
    else if (sub_1C4C1869C(a1, (int *)a2))
    {
      *(_QWORD *)&result = sub_1C4C1A9B8(a1, a2, a3, a4).n128_u64[0];
    }
    else if ((sub_1C4C26BA0((int *)a2) & 1) == 0 && sub_1C4C26CCC((uint64_t)a2))
    {
      *(_QWORD *)&result = sub_1C6160A40(a1, a2, a3, a4).n128_u64[0];
    }
    else
    {
      if (sub_1C4C26BA0((int *)a2))
        sub_1C4C26CCC((uint64_t)a2);
      *(_QWORD *)&result = sub_1C4C1AC8C(a1, a2, a3, a4).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C19AF0(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C1A9B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38[16];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  *a3 = 98;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v11 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v38, (int8x8_t *)((char *)&v35 + 4), (uint64_t)&v36);
  HIDWORD(v35) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v22, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v23, (uint64_t)&v29 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v31 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&v33);
  if (HIDWORD(v31) == 1)
    LODWORD(v32) = 2;
  if (DWORD2(v33) == 1)
    *((_QWORD *)&v33 + 1) = 0x200000001;
  if (HIDWORD(v35) >= 4)
  {
    v18 = 0;
    v19 = 0;
    v39[0] = (char *)&v27.n128_u64[1] + 4;
    v39[1] = (char *)&v29 + 8;
    do
    {
      v20 = v18;
      v21 = v39[v19];
      if (*(_DWORD *)(v21 + 8) != 1 && *(_DWORD *)(v21 + 12) == 1)
        *(_BYTE *)(v21 + 25) = 1;
      v18 = 1;
      v19 = 1;
    }
    while ((v20 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      HIDWORD(v34) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    LODWORD(v35) = 97;
  }
  v12 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v12;
  *(_DWORD *)(a4 + 192) = *(_DWORD *)v38;
  v13 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v13;
  v14 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v14;
  v15 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v16;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1AC8C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  *a3 = 96;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  memset(v35, 0, 60);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v13 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35[3] + 8, (int8x8_t *)((char *)v35 + 12), (uint64_t)&v35[1] + 8);
  DWORD1(v35[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v28 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v12, (uint64_t)&v30);
  sub_1C4C15874((uint64_t)a1, a2, v24, (uint64_t)&v31 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v25, (uint64_t)&v33 + 8);
  if (DWORD1(v32) == 1)
    *(_QWORD *)((char *)&v32 + 4) = 0x200000001;
  if ((_DWORD)v34 == 1)
    *(_QWORD *)&v34 = 0x200000001;
  if (DWORD1(v35[1]) >= 4)
  {
    v20 = 0;
    v21 = 0;
    v36[0] = (char *)&v28 + 4;
    v36[1] = &v30;
    do
    {
      v22 = v20;
      v23 = v36[v21];
      if (*(_DWORD *)(v23 + 8) != 1 && *(_DWORD *)(v23 + 12) == 1)
        *(_BYTE *)(v23 + 25) = 1;
      v20 = 1;
      v21 = 1;
    }
    while ((v22 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      DWORD1(v35[0]) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    DWORD2(v35[0]) = 95;
  }
  v14 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v14;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v35[2] + 12);
  v15 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v18;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1AF54(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
  {
    *(_QWORD *)&result = sub_1C4C19AF0(a1, a2, a3, a4).n128_u64[0];
  }
  else if (sub_1C4C196D8(a1, (int *)a2))
  {
    *(_QWORD *)&result = sub_1C4C1AFFC(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    sub_1C4C19980(a1, (int *)a2);
    *(_QWORD *)&result = sub_1C6160CF8(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C1AFFC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[4];
  _QWORD v35[5];

  v35[2] = *MEMORY[0x1E0C80C00];
  *a3 = 99;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  memset(v34, 0, 60);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_DWORD *)(v13 + 16 * v8 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE1(v27) = v15;
  LOBYTE(v27) = 1;
  sub_1C4C0B76C(a1, (uint64_t)a2, v26, (BOOL *)&v34[3] + 8, (int8x8_t *)((char *)v34 + 12), (uint64_t)&v34[1] + 8);
  DWORD1(v34[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v9 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v25, (uint64_t)&v27 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v29);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v30.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v32 + 8);
  if (DWORD1(v31) == 1)
    *(_QWORD *)((char *)&v31 + 4) = 0x100000001;
  if ((_DWORD)v33 == 1)
    *(_QWORD *)&v33 = 0x100000001;
  if (DWORD1(v34[1]) >= 4)
  {
    v21 = 0;
    v22 = 0;
    v35[0] = (char *)&v27 + 4;
    v35[1] = &v29;
    do
    {
      v23 = v21;
      v24 = v35[v22];
      if (*(_DWORD *)(v24 + 8) != 1 && *(_DWORD *)(v24 + 12) == 1)
        *(_BYTE *)(v24 + 25) = 1;
      v21 = 1;
      v22 = 1;
    }
    while ((v23 & 1) == 0);
  }
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v34 + 4) = 0x6200000003;
  v16 = v34[2];
  *(_OWORD *)(a4 + 128) = v34[1];
  *(_OWORD *)(a4 + 144) = v16;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v34[2] + 12);
  v17 = v32;
  *(_OWORD *)(a4 + 64) = v31;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v34[0];
  *(_OWORD *)(a4 + 96) = v33;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v28;
  *(_OWORD *)a4 = v27;
  *(_OWORD *)(a4 + 16) = v19;
  result = v30;
  *(_OWORD *)(a4 + 32) = v29;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C1B2A4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C4C1B3BC(a1, a2, a3, a4);
  if (sub_1C4C1841C(a1, (int *)a2))
  {
    *(_QWORD *)&result = sub_1C4C1B580(a1, a2, a3, a4).n128_u64[0];
  }
  else if (sub_1C4C1869C(a1, (int *)a2))
  {
    *(_QWORD *)&result = sub_1C6160FB0(a1, a2, a3, a4).n128_u64[0];
  }
  else if ((sub_1C4C26BA0((int *)a2) & 1) != 0 || !sub_1C4C26CCC((uint64_t)a2))
  {
    if (sub_1C4C26BA0((int *)a2))
      sub_1C4C26CCC((uint64_t)a2);
    return sub_1C6161390(a1, a2, a3, a4);
  }
  else
  {
    return sub_1C616119C(a1, a2, a3, a4);
  }
  return result;
}

double sub_1C4C1B3BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 161;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v20, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  if (v12 == 2)
  {
    v13 = 6;
  }
  else if (v12 == 1)
  {
    v13 = 7;
  }
  else
  {
    v13 = (v12 + 9) & 0xF;
  }
  BYTE1(v26) = v13;
  sub_1C4C15874((uint64_t)a1, a2, v19, (uint64_t)&v22 + 8);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v24 + 4);
  if (v20 <= 1)
  {
    if ((_DWORD)v23 == 1)
      DWORD1(v23) = v21;
    if (HIDWORD(v24) == 1)
      LODWORD(v25) = v21;
  }
  v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v20;
  v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1C4C1B580(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];

  *a3 = 164;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  memset(v26, 0, 44);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  v13 = *((_QWORD *)a2 + 2);
  v21.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26[2] + 8, (int8x8_t *)v26, (uint64_t)v26 + 8);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE5(v25) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  if (DWORD1(v22) == 1)
    *(_QWORD *)((char *)&v22 + 4) = 0x100000001;
  if ((_DWORD)v24 == 1)
    *(_QWORD *)&v24 = 0x100000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v20) - 2];
    HIDWORD(v25) = 147;
  }
  v16 = v26[1];
  *(_OWORD *)(a4 + 96) = v26[0];
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v26[1] + 12);
  v17 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  result = v21;
  *(_OWORD *)a4 = v20;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1B764(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C616158C(a1, a2, a3, a4);
  if (sub_1C4C1841C(a1, (int *)a2))
  {
    *(_QWORD *)&result = sub_1C6161750(a1, a2, a3, a4).n128_u64[0];
  }
  else if (sub_1C4C1869C(a1, (int *)a2))
  {
    *(_QWORD *)&result = sub_1C6160FB0(a1, a2, a3, a4).n128_u64[0];
  }
  else if ((sub_1C4C26BA0((int *)a2) & 1) != 0 || !sub_1C4C26CCC((uint64_t)a2))
  {
    if (sub_1C4C26BA0((int *)a2))
      sub_1C4C26CCC((uint64_t)a2);
    return sub_1C6161390(a1, a2, a3, a4);
  }
  else
  {
    return sub_1C616119C(a1, a2, a3, a4);
  }
  return result;
}

double sub_1C4C1B87C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
    return sub_1C4C1B924(a1, a2, a3, a4);
  if (sub_1C4C196D8(a1, (int *)a2))
    return sub_1C4C1BAEC(a1, a2, a3, a4);
  sub_1C4C19980(a1, (int *)a2);
  return sub_1C6161934(a1, a2, a3, a4);
}

double sub_1C4C1B924(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 161;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v20, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  if (v12 == 2)
  {
    v13 = 6;
  }
  else if (v12 == 1)
  {
    v13 = 7;
  }
  else
  {
    v13 = (v12 + 9) & 0xF;
  }
  BYTE1(v26) = v13;
  sub_1C4C15874((uint64_t)a1, a2, v19, (uint64_t)&v22 + 8);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v24 + 4);
  if (v20 <= 1)
  {
    if ((_DWORD)v23 == 1)
      DWORD1(v23) = v21;
    if (HIDWORD(v24) == 1)
      LODWORD(v25) = v21;
  }
  v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v20;
  v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C4C1BAEC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 166;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_DWORD *)(v13 + 16 * v8 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE1(v22) = v15;
  LOBYTE(v22) = 1;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v16 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v16 == 2)
  {
    v17 = 6;
  }
  else if (v16 == 1)
  {
    v17 = 7;
  }
  else
  {
    v17 = (v16 + 9) & 0xF;
  }
  BYTE13(v25) = v17;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24);
  if (HIDWORD(v22) == 1)
    LODWORD(v23) = 1;
  if (DWORD2(v24) == 1)
    *((_QWORD *)&v24 + 1) = 0x100000001;
  if (*a1 >= 4u)
    *(_QWORD *)&v26 = 0x9500000003;
  v18 = v27;
  *(_OWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 96) = v28;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v29;
  v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  result = *(double *)&v24;
  v21 = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v21;
  return result;
}

__n128 sub_1C4C1BCC8(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *a3 = 67;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v12 = *((_QWORD *)a2 + 2);
  v20.n128_u8[0] = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  DWORD1(v25) = dword_1C6A5FAEC[*(int *)(v12 + 16 * v10 + 8) - 4];
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  v13 = *a1;
  v14 = *a1 - 1 < 5;
  *((_QWORD *)&v22 + 1) = 0;
  LODWORD(v23) = 0;
  *((_QWORD *)&v23 + 1) = 0;
  LODWORD(v24) = 0;
  DWORD1(v23) = v14;
  BYTE8(v25) = 0;
  if (v13 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD1(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD2(v24) = 72;
  }
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1BE64(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *a3 = 67;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  v13 = *((_QWORD *)a2 + 2);
  v19.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26 + 12, (int8x8_t *)((char *)&v23 + 12), (uint64_t)&v24 + 12);
  DWORD1(v24) = dword_1C6A5FAEC[*(int *)(v13 + 16 * v10 + 8) - 4];
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v21 + 8);
  BYTE8(v24) = 1;
  HIDWORD(v18) = dword_1C6A5F700[SHIDWORD(v18) - 1];
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD1(v23) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD2(v23) = 72;
  }
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v26;
  v15 = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v16;
  result = v19;
  *(_OWORD *)a4 = v18;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1C02C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *a3 = 116;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v21) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 8, (int8x8_t *)&v24 + 1, (uint64_t)&v25 + 8);
  LODWORD(v25) = dword_1C6A5FAEC[*(int *)(v12 + 16 * v10 + 8) - 4];
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22 + 4);
  v13 = sub_1C4C32DEC(*(_DWORD *)a2);
  v14 = HIDWORD(v20);
  BYTE4(v25) = v13 == 56;
  if (v13 == 56)
    v14 = dword_1C6A5F700[HIDWORD(v20) - 1];
  HIDWORD(v20) = v14;
  if (*a1 >= 5u)
  {
    HIDWORD(v27) = 1;
  }
  else if (*a1 != 4)
  {
    goto LABEL_10;
  }
  if ((DWORD2(v20) - 2) <= 3)
    LODWORD(v24) = dword_1C6A5F9D0[DWORD2(v20) - 2];
  DWORD1(v24) = 115;
LABEL_10:
  v15 = v25;
  a4[4] = v24;
  a4[5] = v15;
  v16 = v27;
  a4[6] = v26;
  a4[7] = v16;
  v17 = v21;
  *a4 = v20;
  a4[1] = v17;
  result = *(double *)&v22;
  v19 = v23;
  a4[2] = v22;
  a4[3] = v19;
  return result;
}

__n128 sub_1C4C1C1E8(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[7];

  *a3 = 119;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  memset(v30, 0, 92);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v23);
  v14 = *((_QWORD *)a2 + 2);
  v24.n128_u8[0] = (*(_BYTE *)(v14 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v30[5] + 4, (int8x8_t *)((char *)&v30[2] + 4), (uint64_t)&v30[3] + 4);
  v15 = *(_QWORD *)(v14 + 16 * v10 + 8);
  HIDWORD(v30[2]) = dword_1C6A5FB28[(int)v15 - 8];
  LODWORD(v30[3]) = (v15 & 0xFFFFFFFFFFFFFFFELL) == 14;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v24.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v26 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v13, (uint64_t)&v28 + 4);
  v16 = *a1;
  if (HIDWORD(v30[2]))
  {
    *(_QWORD *)&v30[0] = 0;
    DWORD2(v30[0]) = 0;
    *(_QWORD *)((char *)&v30[1] + 4) = 0;
    *(_QWORD *)((char *)v30 + 12) = v16 - 1 < 5;
  }
  if (v16 >= 5)
  {
    DWORD2(v30[5]) = 1;
  }
  else if (v16 != 4)
  {
    goto LABEL_10;
  }
  if ((DWORD2(v23) - 2) <= 3)
    HIDWORD(v30[1]) = dword_1C6A5F9D0[DWORD2(v23) - 2];
  LODWORD(v30[2]) = 116;
LABEL_10:
  v17 = v30[4];
  *(_OWORD *)(a4 + 160) = v30[3];
  *(_OWORD *)(a4 + 176) = v17;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v30[4] + 12);
  v18 = v30[0];
  *(_OWORD *)(a4 + 96) = v29;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v30[2];
  *(_OWORD *)(a4 + 128) = v30[1];
  *(_OWORD *)(a4 + 144) = v19;
  v20 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v20;
  v21 = v28;
  *(_OWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 80) = v21;
  result = v24;
  *(_OWORD *)a4 = v23;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C1C410(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[7];

  *a3 = 119;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v30 = 0u;
  memset(v31, 0, 92);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v24);
  v13 = *((_QWORD *)a2 + 2);
  v25.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31[5] + 4, (int8x8_t *)((char *)&v31[2] + 4), (uint64_t)&v31[3] + 4);
  v14 = *(_QWORD *)(v13 + 16 * v10 + 8);
  HIDWORD(v31[2]) = dword_1C6A5FB28[(int)v14 - 8];
  LODWORD(v31[3]) = (v14 & 0xFFFFFFFFFFFFFFFELL) == 14;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v25.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v27 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v23, (uint64_t)&v29 + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v22, (uint64_t)v31);
  v15 = *a1;
  if (HIDWORD(v31[2]))
  {
    DWORD2(v31[0]) = 0;
    *(_QWORD *)((char *)&v31[1] + 4) = 0;
    *(_QWORD *)&v31[0] = 0;
    *(_QWORD *)((char *)v31 + 12) = v15 - 1 < 5;
  }
  if (v15 >= 5)
  {
    DWORD2(v31[5]) = 1;
  }
  else if (v15 != 4)
  {
    goto LABEL_10;
  }
  if ((DWORD2(v24) - 2) <= 3)
    HIDWORD(v31[1]) = dword_1C6A5F9D0[DWORD2(v24) - 2];
  LODWORD(v31[2]) = 116;
LABEL_10:
  v16 = v31[4];
  *(_OWORD *)(a4 + 160) = v31[3];
  *(_OWORD *)(a4 + 176) = v16;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v31[4] + 12);
  v17 = v31[0];
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v17;
  v18 = v31[2];
  *(_OWORD *)(a4 + 128) = v31[1];
  *(_OWORD *)(a4 + 144) = v18;
  v19 = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v19;
  v20 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v20;
  result = v25;
  *(_OWORD *)a4 = v24;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C1C664(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *a3 = 194;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  sub_1C4C1C7F0((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v19) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v25 + 4, (int8x8_t *)&v22 + 1, (uint64_t)&v23 + 4);
  v13 = *(_QWORD *)(v12 + 16 * v10 + 8);
  LODWORD(v23) = dword_1C6A5FB28[(int)v13 - 8];
  LODWORD(v20) = (v13 & 0xFFFFFFFFFFFFFFFELL) == 14;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v20 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v22) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v22) = 191;
  }
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  *(_OWORD *)(a4 + 96) = v24;
  *(_QWORD *)(a4 + 112) = v25;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = *(double *)&v20;
  v17 = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(_OWORD *)(a4 + 48) = v17;
  return result;
}

uint64_t sub_1C4C1C7F0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t result;

  v7 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  v8 = *(_QWORD **)(a1 + 24);
  v9 = sub_1C4C26AB8(v8, v7);
  *(_DWORD *)(a4 + 8) = v9;
  if (sub_1C4C32DEC(*(_DWORD *)a2) == 65)
    v10 = 1;
  else
    v10 = 2;
  *(_DWORD *)(a4 + 12) = v10;
  result = sub_1C4C264D0((uint64_t)v8, v7, v9);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 20) = (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 16 * (a3 + 1) + 8) >> 20) & 0xF;
  return result;
}

double sub_1C4C1C894(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *a3 = 53;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v11 = *((_QWORD *)a2 + 2);
  LOBYTE(v20) = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27, (int8x8_t *)((char *)&v24 + 4), (uint64_t)&v25);
  if (*(_BYTE *)(v11 + 16 * v10) == 1)
  {
    sub_1C4C12430((uint64_t)a1, a2, v10, (uint64_t)v21 + 4);
  }
  else
  {
    BYTE4(v21[0]) = *(_BYTE *)(v11 + 16 * v10 + 8) & 0x7F;
    *(_QWORD *)((char *)v21 + 12) = 0x200000006;
    BYTE4(v21[1]) = 0;
  }
  v12 = *(_DWORD *)a2;
  HIDWORD(v24) = sub_1C4C32DEC(v12) == 22;
  v13 = *a1;
  if (v13 >= 5)
    HIDWORD(v27) = 1;
  sub_1C4C32DEC(v12);
  *((_QWORD *)&v22 + 1) = 0x200000007;
  LODWORD(v22) = 66;
  if (v13 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v23) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v24) = 58;
  }
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v26;
  *(_QWORD *)(a4 + 144) = v27;
  v15 = v21[1];
  *(_OWORD *)(a4 + 32) = v21[0];
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C4C1CA88(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  *a3 = 53;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v18 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v19) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26, (int8x8_t *)((char *)&v23 + 4), (uint64_t)&v24);
  if (*(_BYTE *)(v12 + 16 * v10) == 1)
  {
    sub_1C4C12430((uint64_t)a1, a2, v10, (uint64_t)v20 + 4);
    v12 = *((_QWORD *)a2 + 2);
  }
  else
  {
    BYTE4(v20[0]) = *(_BYTE *)(v12 + 16 * v10 + 8) & 0x7F;
    *(_QWORD *)((char *)v20 + 12) = 0x200000006;
    BYTE4(v20[1]) = 0;
  }
  if (*(_BYTE *)(v12 + 16 * v11) == 2)
  {
    *((_QWORD *)&v21 + 1) = 0x200000007;
    LODWORD(v21) = 67;
    BYTE4(v21) = *(_BYTE *)(v12 + 16 * v11 + 8) & 0xF;
  }
  else
  {
    sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21);
  }
  HIDWORD(v23) = sub_1C4C32DEC(*(_DWORD *)a2) == 22;
  if (*a1 >= 5u)
  {
    HIDWORD(v26) = 1;
  }
  else if (*a1 != 4)
  {
    goto LABEL_12;
  }
  if ((DWORD2(v18) - 2) <= 3)
    HIDWORD(v22) = dword_1C6A5F9D0[DWORD2(v18) - 2];
  LODWORD(v23) = 58;
LABEL_12:
  v13 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v25;
  *(_QWORD *)(a4 + 144) = v26;
  v14 = v20[1];
  *(_OWORD *)(a4 + 32) = v20[0];
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v18;
  v17 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

__n128 sub_1C4C1CCC0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *a3 = 103;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  LOBYTE(v16) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21 + 12, (int8x8_t *)&v19, (uint64_t)&v19 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v16 + 12);
  if (sub_1C4C32DEC(*(_DWORD *)a2) == 51)
    v11 = 2;
  else
    v11 = 1;
  DWORD2(v19) = v11;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v15) - 2) <= 3)
      v18.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v15) - 2];
    v18.n128_u32[3] = 102;
  }
  v12 = v20;
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = v21;
  v13 = v16;
  *(_OWORD *)a4 = v15;
  *(_OWORD *)(a4 + 16) = v13;
  result = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C1CE28(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *a3 = 104;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  sub_1C4C0E920(a1, a2, v8, (uint64_t)&v17 + 12);
  v11 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v9);
  DWORD2(v16) = 2;
  HIDWORD(v16) = sub_1C4C26344((int *)a2, v9, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v16 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v11, 2);
  v12 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v17 + 4) = (*(_DWORD *)(v12 + 16 * (v9 + 1) + 8) >> 20) & 0xFLL;
  LOBYTE(v17) = (*(_BYTE *)(v12 + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v22 + 12, (int8x8_t *)&v20, (uint64_t)&v20 + 12);
  BYTE8(v20) = 7;
  if (*(_DWORD *)a1 >= 4u)
    v19.n128_u64[1] = 0x6700000000;
  v13 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v22;
  v14 = v17;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v14;
  result = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void *sub_1C4C1CF94(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, void *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD __src[23];

  *a3 = 181;
  v6 = *a2;
  v7 = sub_1C4C2FD5C(v6);
  v8 = sub_1C4C2FD5C(v6);
  v9 = sub_1C4C2FD5C(v6);
  v10 = sub_1C4C2FD5C(v6);
  v11 = sub_1C4C2FD5C(v6);
  v12 = sub_1C4C2FD5C(v6);
  v23 = sub_1C4C2FD5C(v6);
  v24 = sub_1C4C2FD5C(v6);
  v25 = sub_1C4C2FD5C(v6);
  v13 = sub_1C4C2FD5C(v6);
  memset(&__src[1], 0, 340);
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v7);
  DWORD2(__src[0]) = 2;
  HIDWORD(__src[0]) = sub_1C4C26344((int *)a2, v7, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&__src[0] = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v7 + 1;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&__src[1] + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(__src[1]) = (*(_BYTE *)(v16 + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v8, (BOOL *)&__src[21] + 4, (int8x8_t *)((char *)&__src[7] + 12), (uint64_t)&__src[19]);
  sub_1C4C1D2B0((_DWORD *)a1, v16, v9, (_DWORD *)&__src[17] + 2, (_BYTE *)&__src[8] + 8, (uint64_t *)((char *)&__src[8] + 12), (unsigned int *)&__src[18] + 1, (unsigned int *)&__src[18] + 2, (_DWORD *)&__src[18] + 3, (uint64_t *)&__src[17], (unsigned int *)&__src[18], (unsigned int *)&__src[16] + 3, (unsigned int *)&__src[8] + 1, (unsigned int *)&__src[9] + 2, &__src[21], (_DWORD *)&__src[21] + 2);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&__src[3] + 8);
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&__src[5] + 4);
  sub_1C4C0E920(a1, a2, v12, (uint64_t)&__src[9] + 12);
  sub_1C4C0E430(a1, a2, v23, (uint64_t)&__src[11] + 8);
  sub_1C4C0E920(a1, a2, v24, (uint64_t)&__src[13] + 4);
  sub_1C4C0E430(a1, a2, v25, (uint64_t)&__src[15]);
  DWORD1(__src[2]) = 5;
  if (*(_DWORD *)a1 >= 4u)
    DWORD2(__src[2]) = 2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *(_QWORD *)(v17 + 16 * v13 + 8);
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  WORD6(__src[1]) = *(_WORD *)(*(_QWORD *)(v19 + 32) + 16) & 0x1FFF;
  if (v13)
    v20 = 1;
  else
    v20 = 2;
  v21 = *(_DWORD *)(v17 + 16 * (v20 + v13) + 8);
  BYTE4(__src[3]) = (v21 & 0x10) != 0;
  LODWORD(__src[3]) = (v21 >> 20) & 0xF;
  sub_1C4C1D364(a1, (int *)a2, (uint64_t)__src);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&__src[7] + 4) = 0xA400000002;
  return memcpy(a4, __src, 0x164uLL);
}

_DWORD *sub_1C4C1D2B0(_DWORD *result, uint64_t a2, unsigned int a3, _DWORD *a4, _BYTE *a5, uint64_t *a6, unsigned int *a7, unsigned int *a8, _DWORD *a9, uint64_t *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, _DWORD *a15, _DWORD *a16)
{
  unint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a2 + 16 * a3 + 8);
  *a4 = v16 & 3;
  *a6 = (4 * v16) & 0x300000000 | (v16 >> 2) & 7;
  *a7 = (v16 >> 5) & 1;
  *a10 = v16 & 0x300000000 | (v16 >> 7) & 7;
  *a11 = (v16 >> 10) & 1;
  *a12 = (v16 >> 11) & 1;
  *a5 = (v16 >> 13) & 0xF;
  *a8 = (v16 >> 19) & 3;
  *a13 = (v16 >> 21) & 3;
  *a14 = (v16 >> 28) & 3;
  v17 = (v16 >> 47) & 7;
  *a15 = v17;
  *a16 = (v16 >> 50) & 3;
  if (*result <= 3u)
  {
    if (v17 <= 2)
      *a9 = dword_1C6A5FB48[v17];
    *a15 = 0;
  }
  return result;
}

uint64_t sub_1C4C1D364(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  char *v10;

  v6 = *a2;
  *(_DWORD *)(a3 + 284) = sub_1C4C32DEC(*a2) == 75;
  v7 = sub_1C4C915C4(v6);
  if ((v7 & 0xFF00000000) == 0)
  {
    v10 = "Unknown Opcode";
LABEL_14:
    llvm::report_fatal_error((llvm *)v10, (const char *)1);
  }
  if ((v7 - 164) >= 4)
  {
    v10 = "Unhandled sample opcode root name.";
    goto LABEL_14;
  }
  *(_DWORD *)(a3 + 148) = dword_1C6A5F9C0[(int)v7 - 164];
  result = sub_1C4C919CC(*(_QWORD *)(a3 + 140), *(_QWORD *)(a3 + 272), *(_DWORD *)(a3 + 280), *(_DWORD *)(a3 + 288), *(_DWORD *)a1);
  if (!(result & 0xFF0000FF0000FFLL | *(_QWORD *)&v9 & 0xFF0000))
  {
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_DWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_DWORD *)(a3 + 68) = 1;
  }
  if ((result & 0xFF0000FF0000FF00) == 0)
  {
    *(_QWORD *)(a3 + 92) = 0;
    *(_QWORD *)(a3 + 84) = 0;
    *(_DWORD *)(a3 + 108) = 0;
    *(_QWORD *)(a3 + 100) = 0;
    *(_DWORD *)(a3 + 96) = 1;
  }
  if (*(_DWORD *)a1 >= 5u)
  {
    *(_WORD *)(a3 + 352) = 3;
    *(_DWORD *)(a3 + 348) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      result = sub_1C4C915C4(*a2);
      if ((result & 0xFF00000000) == 0 || result != 47)
        *(_DWORD *)(a3 + 348) = 0;
    }
  }
  return result;
}

void *sub_1C4C1D4B4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, void *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD __src[23];

  *a3 = 181;
  v6 = *a2;
  v7 = sub_1C4C2FD5C(v6);
  v8 = sub_1C4C2FD5C(v6);
  v9 = sub_1C4C2FD5C(v6);
  v10 = sub_1C4C2FD5C(v6);
  v11 = sub_1C4C2FD5C(v6);
  v12 = sub_1C4C2FD5C(v6);
  v23 = sub_1C4C2FD5C(v6);
  v24 = sub_1C4C2FD5C(v6);
  v25 = sub_1C4C2FD5C(v6);
  v13 = sub_1C4C2FD5C(v6);
  memset(&__src[1], 0, 340);
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v7);
  DWORD2(__src[0]) = 2;
  HIDWORD(__src[0]) = sub_1C4C26344((int *)a2, v7, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&__src[0] = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = v7 + 1;
  v16 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&__src[1] + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(__src[1]) = (*(_BYTE *)(v16 + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v8, (BOOL *)&__src[21] + 4, (int8x8_t *)((char *)&__src[7] + 12), (uint64_t)&__src[19]);
  sub_1C4C1D2B0((_DWORD *)a1, v16, v9, (_DWORD *)&__src[17] + 2, (_BYTE *)&__src[8] + 8, (uint64_t *)((char *)&__src[8] + 12), (unsigned int *)&__src[18] + 1, (unsigned int *)&__src[18] + 2, (_DWORD *)&__src[18] + 3, (uint64_t *)&__src[17], (unsigned int *)&__src[18], (unsigned int *)&__src[16] + 3, (unsigned int *)&__src[8] + 1, (unsigned int *)&__src[9] + 2, &__src[21], (_DWORD *)&__src[21] + 2);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&__src[3] + 8);
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&__src[5] + 4);
  sub_1C4C0E920(a1, a2, v12, (uint64_t)&__src[9] + 12);
  sub_1C4C0E430(a1, a2, v23, (uint64_t)&__src[11] + 8);
  sub_1C4C0E920(a1, a2, v24, (uint64_t)&__src[13] + 4);
  sub_1C4C0E430(a1, a2, v25, (uint64_t)&__src[15]);
  DWORD1(__src[2]) = 5;
  if (*(_DWORD *)a1 >= 4u)
    DWORD2(__src[2]) = 2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *(_QWORD *)(v17 + 16 * v13 + 8);
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  WORD6(__src[1]) = *(_WORD *)(*(_QWORD *)(v19 + 32) + 16) & 0x1FFF;
  if (v13)
    v20 = 1;
  else
    v20 = 2;
  v21 = *(_DWORD *)(v17 + 16 * (v20 + v13) + 8);
  BYTE4(__src[3]) = (v21 & 0x10) != 0;
  LODWORD(__src[3]) = (v21 >> 20) & 0xF;
  sub_1C4C1D364(a1, (int *)a2, (uint64_t)__src);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&__src[7] + 4) = 0xA400000002;
  return memcpy(a4, __src, 0x164uLL);
}

void *sub_1C4C1D7D8(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, void *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _OWORD __src[23];

  *a3 = 181;
  v6 = *a2;
  v7 = sub_1C4C2FD5C(v6);
  v8 = sub_1C4C2FD5C(v6);
  v9 = sub_1C4C2FD5C(v6);
  v10 = sub_1C4C2FD5C(v6);
  v33 = sub_1C4C2FD5C(v6);
  v34 = sub_1C4C2FD5C(v6);
  v35 = sub_1C4C2FD5C(v6);
  v36 = sub_1C4C2FD5C(v6);
  v37 = sub_1C4C2FD5C(v6);
  v11 = sub_1C4C2FD5C(v6);
  v12 = sub_1C4C2FD5C(v6);
  v13 = sub_1C4C2FD5C(v6);
  memset(&__src[1], 0, 340);
  v14 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v7);
  DWORD2(__src[0]) = 2;
  HIDWORD(__src[0]) = sub_1C4C26344((int *)a2, v7, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&__src[0] = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v14, 2);
  v15 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&__src[1] + 4) = (*(_DWORD *)(v15 + 16 * (v7 + 1) + 8) >> 20) & 0xFLL;
  LOBYTE(__src[1]) = (*(_BYTE *)(v15 + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v8, (BOOL *)&__src[21] + 4, (int8x8_t *)((char *)&__src[7] + 12), (uint64_t)&__src[19]);
  sub_1C4C1D2B0((_DWORD *)a1, v15, v9, (_DWORD *)&__src[17] + 2, (_BYTE *)&__src[8] + 8, (uint64_t *)((char *)&__src[8] + 12), (unsigned int *)&__src[18] + 1, (unsigned int *)&__src[18] + 2, (_DWORD *)&__src[18] + 3, (uint64_t *)&__src[17], (unsigned int *)&__src[18], (unsigned int *)&__src[16] + 3, (unsigned int *)&__src[8] + 1, (unsigned int *)&__src[9] + 2, &__src[21], (_DWORD *)&__src[21] + 2);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&__src[3] + 8);
  sub_1C4C0E920(a1, a2, v33, (uint64_t)&__src[5] + 4);
  sub_1C4C0E920(a1, a2, v34, (uint64_t)&__src[9] + 12);
  sub_1C4C0E430(a1, a2, v35, (uint64_t)&__src[11] + 8);
  sub_1C4C0E920(a1, a2, v36, (uint64_t)&__src[13] + 4);
  sub_1C4C0E430(a1, a2, v37, (uint64_t)&__src[15]);
  DWORD1(__src[2]) = 5;
  if (*(_DWORD *)a1 >= 4u)
    DWORD2(__src[2]) = 2;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *(_QWORD *)(v16 + 16 * v11 + 8);
  if (v17)
    v18 = v17 - 8;
  else
    v18 = 0;
  v19 = *(_WORD *)(*(_QWORD *)(v18 + 32) + 16) & 0x1FFF;
  WORD6(__src[1]) = v19;
  if (v11)
    v20 = 1;
  else
    v20 = 2;
  v21 = *(_DWORD *)(v16 + 16 * (v20 + v11) + 8);
  BYTE4(__src[3]) = (v21 & 0x10) != 0;
  LODWORD(__src[3]) = (v21 >> 20) & 0xF;
  if (*(_BYTE *)(v16 + 16 * v12) == 2)
  {
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v22 = *(_QWORD *)(v16 + 16 * v12 + 8);
    if (v22)
      v23 = v22 - 8;
    else
      v23 = 0;
    v24 = (*(_WORD *)(*(_QWORD *)(v23 + 32) + 16) & 0x1FFF) - v19;
    v25 = (v24 + ((unsigned __int16)(v24 & 0x8000) >> 15)) << 24 >> 25;
    v26 = (*(unsigned __int8 *)(v16 + 16 * (v12 + 1) + 8) >> 4) & 1;
  }
  LOBYTE(__src[7]) = v25;
  BYTE1(__src[7]) = v26;
  if (*(_BYTE *)(v16 + 16 * v13) == 2)
  {
    LOBYTE(v30) = 0;
    LOBYTE(v31) = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v16 + 16 * v13 + 8);
    if (v27)
      v28 = v27 - 8;
    else
      v28 = 0;
    v29 = (*(_WORD *)(*(_QWORD *)(v28 + 32) + 16) & 0x1FFF) - v19;
    v30 = (v29 + ((unsigned __int16)(v29 & 0x8000) >> 15)) << 24 >> 25;
    v31 = (*(unsigned __int8 *)(v16 + 16 * (v13 + 1) + 8) >> 4) & 1;
  }
  BYTE2(__src[7]) = v30;
  BYTE3(__src[7]) = v31;
  sub_1C4C1D364(a1, (int *)a2, (uint64_t)__src);
  if (*(_DWORD *)a1 >= 4u)
    *(_QWORD *)((char *)&__src[7] + 4) = 0xA400000002;
  return memcpy(a4, __src, 0x164uLL);
}

double sub_1C4C1DBE4(_DWORD *a1, int *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];

  *a3 = 189;
  v7 = *(unsigned __int16 *)a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v16 = 0u;
  memset(v17, 0, 60);
  v15 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17[3] + 8, (int8x8_t *)((char *)v17 + 12), (uint64_t)&v17[1] + 8);
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v15);
  v10 = (int)sub_1C4C32DEC(*a2) - 79;
  v11 = dword_1C6A5FB48[v10];
  BYTE4(v17[1]) = 0x100u >> (8 * v10);
  HIDWORD(v16) = v11;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v17 + 4) = 0xBA00000003;
  v12 = v17[1];
  a4[2] = v17[0];
  a4[3] = v12;
  a4[4] = v17[2];
  *(_OWORD *)((char *)a4 + 76) = *(_OWORD *)((char *)&v17[2] + 12);
  result = *(double *)&v15;
  v14 = v16;
  *a4 = v15;
  a4[1] = v14;
  return result;
}

double sub_1C4C1DD04(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];

  *a3 = 188;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v16 = 0u;
  memset(v17, 0, 60);
  v15 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17[3] + 8, (int8x8_t *)((char *)v17 + 12), (uint64_t)&v17[1] + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v15 + 8);
  v10 = *(_DWORD *)a2;
  v11 = sub_1C4C32DEC(v10);
  if (v11 == 81)
  {
    BYTE4(v17[1]) = 0;
    LODWORD(v15) = 1;
  }
  else
  {
    BYTE4(v17[1]) = v11 != 79;
    LODWORD(v15) = 0;
  }
  if (sub_1C4C32DEC(v10) - 79 >= 2)
    DWORD1(v15) = HIDWORD(v16);
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v17 + 4) = 0xB900000003;
  v12 = v17[1];
  a4[2] = v17[0];
  a4[3] = v12;
  a4[4] = v17[2];
  *(_OWORD *)((char *)a4 + 76) = *(_OWORD *)((char *)&v17[2] + 12);
  result = *(double *)&v15;
  v14 = v16;
  *a4 = v15;
  a4[1] = v14;
  return result;
}

__n128 sub_1C4C1DE58(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[4];

  *a3 = 19;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = 0u;
  memset(v31, 0, 60);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  sub_1C4C0BC90(a1, (uint64_t)a2, v8, (uint64_t)&v24);
  LOBYTE(v25) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v31[3] + 4, (int8x8_t *)v31 + 1, (uint64_t)&v31[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v27.n128_i64[1]);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v29 + 4);
  v13 = *(_DWORD *)a2;
  v14 = sub_1C4C32DEC(v13);
  switch(v14)
  {
    case 8:
      v15 = 0;
      break;
    case 11:
      v15 = 2;
      break;
    case 10:
      v15 = 1;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unexpected variant", (const char *)1);
  }
  LODWORD(v31[1]) = v15;
  v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 3u)
  {
    HIDWORD(v24) = 2;
  }
  else
  {
    if (v14 == 8)
      v17 = 1;
    else
      v17 = 2;
    HIDWORD(v24) = v17;
    if (v16 != 4)
    {
      DWORD2(v31[3]) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v13);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          DWORD2(v31[3]) = 0;
      }
    }
    if ((DWORD2(v24) - 2) <= 3)
      LODWORD(v31[0]) = dword_1C6A5F9D0[DWORD2(v24) - 2];
    DWORD1(v31[0]) = 24;
  }
  v19 = v31[2];
  *(_OWORD *)(a4 + 128) = v31[1];
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v31[2] + 12);
  v20 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v20;
  v21 = v31[0];
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v21;
  v22 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v22;
  result = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C1E0AC(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31[16];

  *a3 = 118;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  LOBYTE(v23[1]) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v31, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v23);
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  LODWORD(v30) = v14 & 0xF;
  BYTE4(v30) = (v14 >> 4) & 0x1F;
  DWORD2(v30) = (v14 >> 9) & 0xF;
  BYTE12(v30) = (v14 >> 13) & 0x1F;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v23[1] + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23[3] + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&v25 + 4);
  if (HIDWORD(v25) == 1)
    LODWORD(v26) = 2;
  v15 = *a1;
  v16 = *a1 - 1 < 5;
  if (!(_DWORD)v30)
  {
    DWORD1(v23[3]) = 0;
    DWORD1(v23[2]) = 0;
    *(_QWORD *)((char *)&v23[2] + 12) = 0;
    *(_QWORD *)((char *)&v23[1] + 12) = 0;
    DWORD2(v23[2]) = v16;
  }
  if (!DWORD2(v30))
  {
    LODWORD(v25) = 0;
    LODWORD(v24) = 0;
    *((_QWORD *)&v24 + 1) = 0;
    *((_QWORD *)&v23[3] + 1) = 0;
    DWORD1(v24) = v16;
  }
  if (v15 >= 4)
  {
    if ((DWORD2(v23[0]) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v23[0]) - 2];
    DWORD1(v27) = 119;
  }
  v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v30;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v31;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v23[1];
  *(_OWORD *)a4 = v23[0];
  *(_OWORD *)(a4 + 16) = v20;
  result = *(double *)&v23[2];
  v22 = v23[3];
  *(_OWORD *)(a4 + 32) = v23[2];
  *(_OWORD *)(a4 + 48) = v22;
  return result;
}

double sub_1C4C1E2FC(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31[16];

  *a3 = 118;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v31, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v23);
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  LODWORD(v30) = v14 & 0xF;
  BYTE4(v30) = (v14 >> 4) & 0x1F;
  DWORD2(v30) = (v14 >> 9) & 0xF;
  BYTE12(v30) = (v14 >> 13) & 0x1F;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v23[1] + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23[3] + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&v25 + 4);
  if (HIDWORD(v25) == 1)
    LODWORD(v26) = 2;
  v15 = *a1;
  v16 = *a1 - 1 < 5;
  if (!(_DWORD)v30)
  {
    DWORD1(v23[3]) = 0;
    DWORD1(v23[2]) = 0;
    *(_QWORD *)((char *)&v23[2] + 12) = 0;
    *(_QWORD *)((char *)&v23[1] + 12) = 0;
    DWORD2(v23[2]) = v16;
  }
  if (!DWORD2(v30))
  {
    LODWORD(v25) = 0;
    LODWORD(v24) = 0;
    *((_QWORD *)&v24 + 1) = 0;
    *((_QWORD *)&v23[3] + 1) = 0;
    DWORD1(v24) = v16;
  }
  if (v15 >= 4)
  {
    if ((DWORD2(v23[0]) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v23[0]) - 2];
    DWORD1(v27) = 119;
  }
  v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v30;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v31;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v23[1];
  *(_OWORD *)a4 = v23[0];
  *(_OWORD *)(a4 + 16) = v20;
  result = *(double *)&v23[2];
  v22 = v23[3];
  *(_OWORD *)(a4 + 32) = v23[2];
  *(_OWORD *)(a4 + 48) = v22;
  return result;
}

double sub_1C4C1E538(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31[16];

  *a3 = 117;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  LOBYTE(v23[1]) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v8 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v31, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v23);
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  LODWORD(v30) = v14 & 0xF;
  BYTE4(v30) = (v14 >> 4) & 0x1F;
  DWORD2(v30) = (v14 >> 9) & 0xF;
  BYTE12(v30) = (v14 >> 13) & 0x1F;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v23[1] + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23[3] + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&v25 + 4);
  if (HIDWORD(v25) == 1)
    LODWORD(v26) = 2;
  v15 = *a1;
  v16 = *a1 - 1 < 5;
  if (!(_DWORD)v30)
  {
    DWORD1(v23[3]) = 0;
    DWORD1(v23[2]) = 0;
    *(_QWORD *)((char *)&v23[2] + 12) = 0;
    *(_QWORD *)((char *)&v23[1] + 12) = 0;
    DWORD2(v23[2]) = v16;
  }
  if (!DWORD2(v30))
  {
    LODWORD(v25) = 0;
    LODWORD(v24) = 0;
    *((_QWORD *)&v24 + 1) = 0;
    *((_QWORD *)&v23[3] + 1) = 0;
    DWORD1(v24) = v16;
  }
  if (v15 >= 4)
  {
    if ((DWORD2(v23[0]) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v23[0]) - 2];
    DWORD1(v27) = 118;
  }
  v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v30;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v31;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v23[1];
  *(_OWORD *)a4 = v23[0];
  *(_OWORD *)(a4 + 16) = v20;
  result = *(double *)&v23[2];
  v22 = v23[3];
  *(_OWORD *)(a4 + 32) = v23[2];
  *(_OWORD *)(a4 + 48) = v22;
  return result;
}

double sub_1C4C1E788(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  _OWORD v23[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31[16];

  *a3 = 117;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, v31, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v23);
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  LODWORD(v30) = v14 & 0xF;
  BYTE4(v30) = (v14 >> 4) & 0x1F;
  DWORD2(v30) = (v14 >> 9) & 0xF;
  BYTE12(v30) = (v14 >> 13) & 0x1F;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v23[1] + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23[3] + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&v25 + 4);
  if (HIDWORD(v25) == 1)
    LODWORD(v26) = 2;
  v15 = *a1;
  v16 = *a1 - 1 < 5;
  if (!(_DWORD)v30)
  {
    DWORD1(v23[3]) = 0;
    DWORD1(v23[2]) = 0;
    *(_QWORD *)((char *)&v23[2] + 12) = 0;
    *(_QWORD *)((char *)&v23[1] + 12) = 0;
    DWORD2(v23[2]) = v16;
  }
  if (!DWORD2(v30))
  {
    LODWORD(v25) = 0;
    LODWORD(v24) = 0;
    *((_QWORD *)&v24 + 1) = 0;
    *((_QWORD *)&v23[3] + 1) = 0;
    DWORD1(v24) = v16;
  }
  if (v15 >= 4)
  {
    if ((DWORD2(v23[0]) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v23[0]) - 2];
    DWORD1(v27) = 118;
  }
  v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v30;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v31;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v23[1];
  *(_OWORD *)a4 = v23[0];
  *(_OWORD *)(a4 + 16) = v20;
  result = *(double *)&v23[2];
  v22 = v23[3];
  *(_OWORD *)(a4 + 32) = v23[2];
  *(_OWORD *)(a4 + 48) = v22;
  return result;
}

void *sub_1C4C1E9C8(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, void *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint32x2_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  _OWORD __src[18];

  *a3 = 85;
  v6 = *a2;
  v7 = sub_1C4C2FD5C(v6);
  v8 = sub_1C4C2FD5C(v6);
  v9 = sub_1C4C2FD5C(v6);
  v10 = sub_1C4C2FD5C(v6);
  v11 = sub_1C4C2FD5C(v6);
  v12 = sub_1C4C2FD5C(v6);
  v24 = sub_1C4C2FD5C(v6);
  v13 = sub_1C4C2FD5C(v6);
  memset(__src, 0, 260);
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, (BOOL *)&__src[15] + 12, (int8x8_t *)((char *)&__src[7] + 12), (uint64_t)&__src[13] + 4);
  v14 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v8 + 8);
  v15 = (uint32x2_t)vdup_n_s32(v14);
  *(int8x8_t *)((char *)&__src[8] + 4) = vand_s8((int8x8_t)vshl_u32(v15, (uint32x2_t)0xFFFFFFE9FFFFFFEBLL), (int8x8_t)0x700000003);
  *(_QWORD *)((char *)&__src[8] + 12) = (4 * v14) & 0x300000000 | (v14 >> 2) & 7;
  *(_QWORD *)((char *)&__src[9] + 4) = *(_QWORD *)&vshl_u32(v15, (uint32x2_t)0xFFFFFFE4FFFFFFE6) & 0xFFFFFFC3FFFFFFC3;
  BYTE4(__src[15]) = (v14 & 0x400000000) != 0;
  DWORD2(__src[15]) = (v14 >> 44) & 7;
  DWORD1(__src[2]) = (v14 >> 35) & 7;
  LODWORD(__src[4]) = (v14 >> 38) & 7;
  HIDWORD(__src[5]) = (v14 >> 41) & 7;
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&__src[9] + 12);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&__src[11] + 8);
  DWORD2(__src[0]) = 5;
  v16 = *a1;
  if (*a1 >= 4)
    HIDWORD(__src[0]) = 2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *(_QWORD *)(v17 + 16 * v11 + 8);
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  LOWORD(__src[0]) = *(_WORD *)(*(_QWORD *)(v19 + 32) + 16) & 0x1FFF;
  if (v11)
    v20 = 1;
  else
    v20 = 2;
  v21 = *(_DWORD *)(v17 + 16 * (v20 + v11) + 8);
  BYTE8(__src[1]) = (v21 & 0x10) != 0;
  DWORD1(__src[1]) = (v21 >> 20) & 0xF;
  if (v16
    && (sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&__src[1] + 12), *a1)
    && (sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&__src[3] + 8), *a1))
  {
    sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&__src[5] + 4);
    v22 = *a1;
    sub_1C4C1EC9C(a1, *(_DWORD *)a2, *((_QWORD *)a2 + 2), (uint64_t)__src);
    if (v22 > 3)
    {
      LODWORD(__src[7]) = 2;
      DWORD2(__src[7]) = 87;
    }
  }
  else
  {
    sub_1C4C1EC9C(a1, *(_DWORD *)a2, *((_QWORD *)a2 + 2), (uint64_t)__src);
  }
  return memcpy(a4, __src, 0x104uLL);
}

_DWORD *sub_1C4C1EC9C(_DWORD *result, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v6;
  unint64_t v7;

  if (*result)
  {
    v6 = result;
    result = (_DWORD *)sub_1C4C2FD5C(a2);
    v7 = *(_QWORD *)(a3 + 16 * result + 8);
    if (((v7 >> 41) & 7) != *(_DWORD *)(a4 + 92))
    {
      *(_QWORD *)(a4 + 92) = 0;
      *(_QWORD *)(a4 + 84) = 0;
      *(_DWORD *)(a4 + 108) = 0;
      *(_QWORD *)(a4 + 100) = 0;
      *(_DWORD *)(a4 + 96) = 1;
    }
    if (((v7 >> 35) & 7) != *(_DWORD *)(a4 + 36))
    {
      *(_QWORD *)(a4 + 36) = 0;
      *(_QWORD *)(a4 + 28) = 0;
      *(_DWORD *)(a4 + 52) = 0;
      *(_QWORD *)(a4 + 44) = 0;
      *(_DWORD *)(a4 + 40) = 1;
    }
    if (((v7 >> 38) & 7) != *(_DWORD *)(a4 + 64))
    {
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 64) = 0;
      *(_DWORD *)(a4 + 80) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_DWORD *)(a4 + 68) = 1;
    }
    if (*v6 >= 5u)
      *(_WORD *)(a4 + 254) = 3;
  }
  return result;
}

void *sub_1C4C1ED6C(int *a1, unsigned __int16 *a2, _DWORD *a3, void *a4)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint32x2_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _OWORD __src[18];

  *a3 = 85;
  v6 = *a2;
  v7 = sub_1C4C2FD5C(v6);
  v8 = sub_1C4C2FD5C(v6);
  v9 = sub_1C4C2FD5C(v6);
  v10 = sub_1C4C2FD5C(v6);
  v11 = sub_1C4C2FD5C(v6);
  v37 = sub_1C4C2FD5C(v6);
  v38 = sub_1C4C2FD5C(v6);
  v39 = sub_1C4C2FD5C(v6);
  v12 = sub_1C4C2FD5C(v6);
  v13 = sub_1C4C2FD5C(v6);
  memset(__src, 0, 260);
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, (BOOL *)&__src[15] + 12, (int8x8_t *)((char *)&__src[7] + 12), (uint64_t)&__src[13] + 4);
  v14 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v8 + 8);
  v15 = (uint32x2_t)vdup_n_s32(v14);
  *(int8x8_t *)((char *)&__src[8] + 4) = vand_s8((int8x8_t)vshl_u32(v15, (uint32x2_t)0xFFFFFFE9FFFFFFEBLL), (int8x8_t)0x700000003);
  *(_QWORD *)((char *)&__src[8] + 12) = (4 * v14) & 0x300000000 | (v14 >> 2) & 7;
  *(_QWORD *)((char *)&__src[9] + 4) = *(_QWORD *)&vshl_u32(v15, (uint32x2_t)0xFFFFFFE4FFFFFFE6) & 0xFFFFFFC3FFFFFFC3;
  BYTE4(__src[15]) = (v14 & 0x400000000) != 0;
  DWORD2(__src[15]) = (v14 >> 44) & 7;
  DWORD1(__src[2]) = (v14 >> 35) & 7;
  LODWORD(__src[4]) = (v14 >> 38) & 7;
  HIDWORD(__src[5]) = (v14 >> 41) & 7;
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&__src[9] + 12);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&__src[11] + 8);
  DWORD2(__src[0]) = 5;
  v16 = *a1;
  if (*a1 >= 4)
    HIDWORD(__src[0]) = 2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *(_QWORD *)(v17 + 16 * v11 + 8);
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  LOWORD(__src[0]) = *(_WORD *)(*(_QWORD *)(v19 + 32) + 16) & 0x1FFF;
  if (v11)
    v20 = 1;
  else
    v20 = 2;
  v21 = *(_DWORD *)(v17 + 16 * (v20 + v11) + 8);
  BYTE8(__src[1]) = (v21 & 0x10) != 0;
  DWORD1(__src[1]) = (v21 >> 20) & 0xF;
  if (v16)
  {
    sub_1C4C0E920((uint64_t)a1, a2, v37, (uint64_t)&__src[1] + 12);
    if (*a1)
    {
      sub_1C4C0E920((uint64_t)a1, a2, v38, (uint64_t)&__src[3] + 8);
      if (*a1)
        sub_1C4C0E920((uint64_t)a1, a2, v39, (uint64_t)&__src[5] + 4);
    }
  }
  v22 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v22 + 16 * v12) == 2)
  {
    LOBYTE(v28) = 0;
    LOBYTE(v29) = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v22 + 16 * v12 + 8);
    if (v23)
      v24 = v23 - 8;
    else
      v24 = 0;
    v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 16) & 0x1FFF;
    v26 = __OFSUB__(v25, LOWORD(__src[0]));
    v27 = v25 - LOWORD(__src[0]);
    if (v27 < 0 != v26)
      LOBYTE(v27) = v27 + 1;
    v28 = (char)v27 >> 1;
    v29 = (*(unsigned __int8 *)(v22 + 16 * (v12 + 1) + 8) >> 4) & 1;
  }
  LOBYTE(__src[16]) = v28;
  BYTE1(__src[16]) = v29;
  if (*(_BYTE *)(v22 + 16 * v13) == 2)
  {
    LOBYTE(v34) = 0;
    LOBYTE(v35) = 0;
  }
  else
  {
    v30 = *(_QWORD *)(v22 + 16 * v13 + 8);
    if (v30)
      v31 = v30 - 8;
    else
      v31 = 0;
    v32 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 16) & 0x1FFF;
    v26 = __OFSUB__(v32, LOWORD(__src[0]));
    v33 = v32 - LOWORD(__src[0]);
    if (v33 < 0 != v26)
      LOBYTE(v33) = v33 + 1;
    v34 = (char)v33 >> 1;
    v35 = (*(unsigned __int8 *)(v22 + 16 * (v13 + 1) + 8) >> 4) & 1;
  }
  BYTE2(__src[16]) = v34;
  BYTE3(__src[16]) = v35;
  sub_1C4C1EC9C(a1, *(_DWORD *)a2, v22, (uint64_t)__src);
  if (*a1 >= 4)
  {
    LODWORD(__src[7]) = 2;
    DWORD2(__src[7]) = 87;
  }
  return memcpy(a4, __src, 0x104uLL);
}

double sub_1C4C1F118(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  *a3 = 66;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v20) = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26 + 4, (int8x8_t *)&v23, (uint64_t)&v24 + 4);
  v14 = *(_QWORD *)(v13 + 16 * v11 + 8);
  DWORD2(v23) = *(_QWORD *)(v13 + 16 * v10 + 8);
  HIDWORD(v23) = v14;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v20 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD2(v22) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    HIDWORD(v22) = 71;
  }
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  *(_OWORD *)(a4 + 96) = v25;
  *(_QWORD *)(a4 + 112) = v26;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = *(double *)&v21;
  v18 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v18;
  return result;
}

double sub_1C4C1F2A8(_DWORD *a1, __int128 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 90;
  v7 = *(unsigned __int16 *)a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C1F418((uint64_t)a1, a2, v8, (uint64_t)&v17, (int *)&v22);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v18) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)&v21 + 1, (uint64_t)&v22 + 4);
  LODWORD(v19) = *(_QWORD *)(v12 + 16 * v10 + 8);
  sub_1C4C1F5A0((uint64_t)a1, (unsigned __int16 *)a2, v11, (uint64_t)&v19 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3)
      LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
    DWORD1(v21) = 91;
  }
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v14 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v16;
  return result;
}

uint64_t sub_1C4C1F418(uint64_t a1, __int128 *a2, unsigned int a3, uint64_t a4, int *a5)
{
  unsigned int v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  __int128 v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[136];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C4C26D84(a1, (unsigned __int16 *)a2, a3, a4, 0);
  v16 = *a2;
  v17 = v19;
  v18 = 0x800000000;
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    v10 = &v16 == a2;
  else
    v10 = 1;
  if (!v10)
  {
    if (v9 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, *((unsigned int *)a2 + 6), 16);
      v12 = *((unsigned int *)a2 + 6);
      v11 = v17;
      if (!(_DWORD)v12)
        goto LABEL_8;
    }
    else
    {
      v11 = v19;
      v12 = *((unsigned int *)a2 + 6);
    }
    memcpy(v11, *((const void **)a2 + 2), 16 * v12);
    v11 = v17;
LABEL_8:
    LODWORD(v18) = v9;
    goto LABEL_10;
  }
  v11 = v19;
LABEL_10:
  v19[128] = *((_BYTE *)a2 + 160);
  v13 = 1;
  if (v11[16 * a3] == 5)
  {
    if (**(_BYTE **)&v11[16 * a3 + 8] == 4)
      v13 = 2;
    else
      v13 = 1;
  }
  *(_BYTE *)(a4 + 28) = v11[16 * v13 + 8 + 16 * a3] & 1;
  if (v11 != v19)
    free(v11);
  result = sub_1C4C32DEC(*(_DWORD *)a2);
  if ((int)result > 33)
  {
    if ((_DWORD)result == 35)
      v15 = 3;
    else
      v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  *a5 = v15;
  return result;
}

uint64_t sub_1C4C1F5A0(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v5;
  int v6;
  uint64_t result;
  char v8;
  int v9;

  v5 = a2;
  sub_1C4C0E430(a1, a2, a3, a4);
  v6 = *(_DWORD *)v5;
  LODWORD(v5) = *(_DWORD *)(*((_QWORD *)v5 + 2) + 16 * sub_1C4C2FD5C((unsigned __int16)*(_DWORD *)v5) + 8);
  result = sub_1C4C32DEC(v6);
  switch((int)v5)
  {
    case 0:
      v8 = 0;
      v9 = result == 34;
      break;
    case 1:
      v9 = result == 34;
      goto LABEL_10;
    case 2:
    case 8:
      v8 = 0;
      goto LABEL_4;
    case 3:
    case 9:
      v8 = 1;
LABEL_4:
      v9 = 1;
      break;
    case 4:
      v8 = 0;
      v9 = 2;
      break;
    case 5:
      v9 = 2;
LABEL_10:
      v8 = 1;
      break;
    case 6:
    case 7:
      llvm::report_fatal_error((llvm *)"Invalid int to float conversion.", (const char *)1);
    default:
      v8 = 0;
      v9 = 0;
      break;
  }
  *(_BYTE *)(a4 + 25) = v8;
  *(_DWORD *)(a4 + 12) = v9;
  return result;
}

double sub_1C4C1F680(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _OWORD v28[14];

  *a3 = 1;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  memset((char *)v28 + 4, 0, 216);
  *((_QWORD *)&v28[0] + 1) = 0x200000004;
  v13 = *((_QWORD *)a2 + 2);
  LODWORD(v28[0]) = *(_DWORD *)(v13 + 16 * v8 + 8) & 0x1FFFF;
  DWORD1(v28[1]) = (*(_DWORD *)(v13 + 16 * (v8 + 2) + 8) >> 20) & 0xF;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28[13] + 5, (int8x8_t *)((char *)&v28[9] + 10), (uint64_t)&v28[11] + 4);
  sub_1C4C1F9D4((uint64_t)a1, (uint64_t)a2, v10, (int *)&v28[10] + 1, (_BYTE *)&v28[10] + 9, (uint64_t)&v28[3] + 8, (_BYTE *)&v28[13] + 4, (_DWORD *)&v28[13] + 2);
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v28[5] + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v28[3] + 8);
  v14 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v14 + 16 * v12) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v14 + 16 * v12 + 8);
  LOWORD(v28[11]) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v27, (uint64_t)&v28[1] + 12);
  v16 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v26 + 8))
  {
    case 1:
      break;
    case 2:
      v16 = 1;
      break;
    case 4:
      v16 = 2;
      break;
    case 8:
      v16 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v28[10]) = v16;
  DWORD2(v28[2]) = 2;
  BYTE8(v28[10]) = 1;
  if (*a1 >= 4u)
  {
    v17 = BYTE9(v28[10]);
    if (BYTE9(v28[10]) == 1)
    {
      v17 = BYTE4(v28[10]);
      if (DWORD1(v28[10]) != 3)
        v17 = 1;
    }
    else if (BYTE9(v28[10]) != 3)
    {
      goto LABEL_16;
    }
    BYTE8(v28[9]) = v17;
LABEL_16:
    *(_QWORD *)((char *)&v28[7] + 4) = 15;
    HIDWORD(v28[8]) = 0;
    *(_QWORD *)((char *)&v28[8] + 4) = 0;
    *(_QWORD *)((char *)&v28[7] + 12) = 0x100000001;
    LOBYTE(v28[7]) = 0;
    *(_QWORD *)&v28[9] = 0x600000000;
    goto LABEL_17;
  }
  *(_QWORD *)((char *)&v28[7] + 4) = 0;
  *(_QWORD *)((char *)&v28[7] + 12) = 0x100000000;
  *(_QWORD *)((char *)&v28[8] + 4) = 0;
  HIDWORD(v28[8]) = 0;
  LOBYTE(v28[7]) = 0;
LABEL_17:
  v18 = v28[11];
  a4[10] = v28[10];
  a4[11] = v18;
  a4[12] = v28[12];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v28[12] + 12);
  v19 = v28[7];
  a4[6] = v28[6];
  a4[7] = v19;
  v20 = v28[9];
  a4[8] = v28[8];
  a4[9] = v20;
  v21 = v28[3];
  a4[2] = v28[2];
  a4[3] = v21;
  v22 = v28[5];
  a4[4] = v28[4];
  a4[5] = v22;
  result = *(double *)v28;
  v24 = v28[1];
  *a4 = v28[0];
  a4[1] = v24;
  return result;
}

void sub_1C4C1F9D4(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _BYTE *a5, uint64_t a6, _BYTE *a7, _DWORD *a8)
{
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  char *v22;

  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3 + 8);
  v12 = 1;
  *a5 = 1;
  v13 = 0;
  v14 = 1;
  switch(v11 & 0xF)
  {
    case 0:
      goto LABEL_14;
    case 1:
      v13 = 1;
      goto LABEL_14;
    case 2:
      v12 = 0;
      v13 = 2;
      goto LABEL_14;
    case 3:
      v12 = 0;
      v13 = 3;
      goto LABEL_14;
    case 4:
      v13 = 4;
      goto LABEL_14;
    case 5:
      v13 = 5;
      goto LABEL_14;
    case 6:
      v13 = 6;
      goto LABEL_14;
    case 7:
      v13 = 7;
      goto LABEL_14;
    case 8:
      v13 = 8;
      goto LABEL_14;
    case 9:
      v13 = 9;
      goto LABEL_14;
    case 0xALL:
      v13 = 10;
      goto LABEL_14;
    case 0xBLL:
      goto LABEL_15;
    case 0xCLL:
      v15 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 - 3) < 3)
      {
        v14 = 0;
        v12 = 1;
        v13 = 11;
LABEL_14:
        *a4 = v13;
        goto LABEL_15;
      }
      v12 = 1;
      if (v15 == 2)
      {
        v13 = 12;
        goto LABEL_14;
      }
      if (v15 <= 1)
      {
        v22 = "F32ADD not supported.";
        goto LABEL_39;
      }
LABEL_15:
      *(_BYTE *)(a6 + 25) = (v11 & 0x200) == 0;
      v16 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 < 4u)
        return;
      if ((v11 & 0x1000) != 0)
        v17 = 0;
      else
        v17 = v12;
      if ((v17 & 1) == 0)
      {
        *a7 = 1;
        return;
      }
      v18 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v18 & 0xFF00000000) == 0)
      {
        v22 = "Unknown Opcode";
LABEL_39:
        llvm::report_fatal_error((llvm *)v22, (const char *)1);
      }
      if ((v18 - 61) > 0x20)
        goto LABEL_33;
      if (((1 << (v18 - 61)) & 0x18000000CLL) == 0)
      {
        if ((_DWORD)v18 == 61)
        {
          v19 = v16 < 5;
          goto LABEL_24;
        }
LABEL_33:
        v21 = atomic_load((unsigned __int8 *)&qword_1ED7EEBD0);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EEBD0))
        {
          byte_1ED7EEBC0 = 1;
          __cxa_guard_release(&qword_1ED7EEBD0);
        }
        v19 = byte_1ED7EEBC0 ^ 1;
        goto LABEL_24;
      }
      v19 = 1;
LABEL_24:
      *a7 = v19 & 1;
      if (*(_DWORD *)a1 < 5u)
        v20 = 1;
      else
        v20 = v14;
      if ((v20 & 1) == 0)
        *a8 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 192) & 0x200000000) == 0;
      return;
    default:
      v14 = 1;
      goto LABEL_15;
  }
}

double sub_1C4C1FBEC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[7];

  *a3 = 1;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  memset(v36, 0, 108);
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v29 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v30 + 4) = (*(_DWORD *)(v14 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  LOBYTE(v30) = (*(_BYTE *)(v14 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v36[6] + 5, (int8x8_t *)((char *)&v36[2] + 10), (uint64_t)&v36[4] + 4);
  sub_1C4C1F9D4(a1, (uint64_t)a2, v10, (int *)&v36[3] + 1, (_BYTE *)&v36[3] + 9, (uint64_t)&v32 + 8, (_BYTE *)&v36[6] + 4, (_DWORD *)&v36[6] + 2);
  sub_1C4C0E920(a1, a2, v26, (uint64_t)&v34 + 4);
  sub_1C4C0E430(a1, a2, v11, (uint64_t)&v32 + 8);
  v15 = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v12) != 5)
    v15 = *(_WORD *)(v16 + 16 * v12 + 8);
  LOWORD(v36[4]) = v15;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v30 + 12);
  v17 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v27 + 8))
  {
    case 1:
      break;
    case 2:
      v17 = 1;
      break;
    case 4:
      v17 = 2;
      break;
    case 8:
      v17 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v36[3]) = v17;
  DWORD2(v31) = 2;
  BYTE8(v36[3]) = 1;
  if (*(_DWORD *)a1 >= 4u)
  {
    BYTE9(v36[2]) = 1;
    v18 = BYTE9(v36[3]);
    if (BYTE9(v36[3]) == 1)
    {
      v18 = BYTE4(v36[3]);
      if (DWORD1(v36[3]) != 3)
        v18 = 1;
    }
    else if (BYTE9(v36[3]) != 3)
    {
      goto LABEL_15;
    }
    BYTE8(v36[2]) = v18;
LABEL_15:
    *(_QWORD *)((char *)v36 + 4) = 15;
    HIDWORD(v36[1]) = 0;
    *(_QWORD *)((char *)&v36[1] + 4) = 0;
    *(_QWORD *)((char *)v36 + 12) = 0x100000001;
    LOBYTE(v36[0]) = 0;
    *(_QWORD *)&v36[2] = 0x600000000;
    goto LABEL_16;
  }
  HIDWORD(v36[0]) = 0;
  *(_QWORD *)((char *)v36 + 4) = 0;
  v36[1] = 1uLL;
  LOBYTE(v36[0]) = 0;
LABEL_16:
  v19 = v36[4];
  a4[10] = v36[3];
  a4[11] = v19;
  a4[12] = v36[5];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v36[5] + 12);
  v20 = v36[0];
  a4[6] = v35;
  a4[7] = v20;
  v21 = v36[2];
  a4[8] = v36[1];
  a4[9] = v21;
  v22 = v32;
  a4[2] = v31;
  a4[3] = v22;
  v23 = v34;
  a4[4] = v33;
  a4[5] = v23;
  result = *(double *)&v29;
  v25 = v30;
  *a4 = v29;
  a4[1] = v25;
  return result;
}

double sub_1C4C1FF78(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[8];

  *a3 = 1;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  memset(v33, 0, 108);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v33[6] + 5, (int8x8_t *)((char *)&v33[2] + 10), (uint64_t)&v33[4] + 4);
  sub_1C4C1F9D4((uint64_t)a1, (uint64_t)a2, v9, (int *)&v33[3] + 1, (_BYTE *)&v33[3] + 9, (uint64_t)&v29 + 8, (_BYTE *)&v33[6] + 4, (_DWORD *)&v33[6] + 2);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v31 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v29 + 8);
  v14 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v14 + 16 * v12) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v14 + 16 * v12 + 8);
  LOWORD(v33[4]) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v27 + 12);
  v16 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8))
  {
    case 1:
      break;
    case 2:
      v16 = 1;
      break;
    case 4:
      v16 = 2;
      break;
    case 8:
      v16 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v33[3]) = v16;
  BYTE8(v33[3]) = 0;
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = 0x200000000;
  *(_QWORD *)&v27 = 0;
  DWORD2(v28) = 2;
  DWORD2(v27) = 0;
  if (*a1 >= 4u)
  {
    v17 = BYTE9(v33[3]);
    if (BYTE9(v33[3]) == 1)
    {
      v17 = BYTE4(v33[3]);
      if (DWORD1(v33[3]) != 3)
        v17 = 1;
    }
    else if (BYTE9(v33[3]) != 3)
    {
      goto LABEL_16;
    }
    BYTE8(v33[2]) = v17;
LABEL_16:
    *(_QWORD *)((char *)v33 + 4) = 15;
    HIDWORD(v33[1]) = 0;
    *(_QWORD *)((char *)&v33[1] + 4) = 0;
    *(_QWORD *)((char *)v33 + 12) = 0x100000001;
    LOBYTE(v33[0]) = 0;
    *(_QWORD *)&v33[2] = 0x600000000;
    goto LABEL_17;
  }
  HIDWORD(v33[0]) = 0;
  *(_QWORD *)((char *)v33 + 4) = 0;
  v33[1] = 1uLL;
  LOBYTE(v33[0]) = 0;
LABEL_17:
  v18 = v33[4];
  a4[10] = v33[3];
  a4[11] = v18;
  a4[12] = v33[5];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v33[5] + 12);
  v19 = v33[0];
  a4[6] = v32;
  a4[7] = v19;
  v20 = v33[2];
  a4[8] = v33[1];
  a4[9] = v20;
  v21 = v29;
  a4[2] = v28;
  a4[3] = v21;
  v22 = v31;
  a4[4] = v30;
  a4[5] = v22;
  result = *(double *)&v26;
  v24 = v27;
  *a4 = v26;
  a4[1] = v24;
  return result;
}

double sub_1C4C20260(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[7];

  *a3 = 2;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  memset(v36, 0, 108);
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v13 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1C4C26344((int *)a2, v8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)&v29 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v13, 2);
  v14 = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)&v30 + 4) = (*(_DWORD *)(v14 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  LOBYTE(v30) = (*(_BYTE *)(v14 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v36[6] + 5, (int8x8_t *)((char *)&v36[2] + 10), (uint64_t)&v36[4] + 4);
  sub_1C4C1F9D4(a1, (uint64_t)a2, v10, (int *)&v36[3] + 1, (_BYTE *)&v36[3] + 9, (uint64_t)&v32 + 8, (_BYTE *)&v36[6] + 4, (_DWORD *)&v36[6] + 2);
  sub_1C4C0E920(a1, a2, v26, (uint64_t)&v34 + 4);
  sub_1C4C0E430(a1, a2, v11, (uint64_t)&v32 + 8);
  v15 = 0;
  v16 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v16 + 16 * v12) != 5)
    v15 = *(_WORD *)(v16 + 16 * v12 + 8);
  LOWORD(v36[4]) = v15;
  sub_1C4C0E920(a1, a2, v28, (uint64_t)&v30 + 12);
  v17 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v27 + 8))
  {
    case 1:
      break;
    case 2:
      v17 = 1;
      break;
    case 4:
      v17 = 2;
      break;
    case 8:
      v17 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v36[3]) = v17;
  DWORD2(v31) = 2;
  BYTE8(v36[3]) = 1;
  if (*(_DWORD *)a1 >= 4u)
  {
    BYTE9(v36[2]) = 1;
    v18 = BYTE9(v36[3]);
    if (BYTE9(v36[3]) == 1)
    {
      v18 = BYTE4(v36[3]);
      if (DWORD1(v36[3]) != 3)
        v18 = 1;
    }
    else if (BYTE9(v36[3]) != 3)
    {
      goto LABEL_15;
    }
    BYTE8(v36[2]) = v18;
LABEL_15:
    *(_QWORD *)((char *)v36 + 4) = 15;
    HIDWORD(v36[1]) = 0;
    *(_QWORD *)((char *)&v36[1] + 4) = 0;
    *(_QWORD *)((char *)v36 + 12) = 0x100000001;
    LOBYTE(v36[0]) = 0;
    *(_QWORD *)&v36[2] = 0x700000000;
    goto LABEL_16;
  }
  HIDWORD(v36[0]) = 0;
  *(_QWORD *)((char *)v36 + 4) = 0;
  v36[1] = 1uLL;
  LOBYTE(v36[0]) = 0;
LABEL_16:
  v19 = v36[4];
  a4[10] = v36[3];
  a4[11] = v19;
  a4[12] = v36[5];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v36[5] + 12);
  v20 = v36[0];
  a4[6] = v35;
  a4[7] = v20;
  v21 = v36[2];
  a4[8] = v36[1];
  a4[9] = v21;
  v22 = v32;
  a4[2] = v31;
  a4[3] = v22;
  v23 = v34;
  a4[4] = v33;
  a4[5] = v23;
  result = *(double *)&v29;
  v25 = v30;
  *a4 = v29;
  a4[1] = v25;
  return result;
}

double sub_1C4C205EC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[8];

  *a3 = 2;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  memset(v33, 0, 108);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v33[6] + 5, (int8x8_t *)((char *)&v33[2] + 10), (uint64_t)&v33[4] + 4);
  sub_1C4C1F9D4((uint64_t)a1, (uint64_t)a2, v9, (int *)&v33[3] + 1, (_BYTE *)&v33[3] + 9, (uint64_t)&v29 + 8, (_BYTE *)&v33[6] + 4, (_DWORD *)&v33[6] + 2);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v31 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v29 + 8);
  v14 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v14 + 16 * v12) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v14 + 16 * v12 + 8);
  LOWORD(v33[4]) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v27 + 12);
  v16 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8))
  {
    case 1:
      break;
    case 2:
      v16 = 1;
      break;
    case 4:
      v16 = 2;
      break;
    case 8:
      v16 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v33[3]) = v16;
  BYTE8(v33[3]) = 0;
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = 0x200000000;
  *(_QWORD *)&v27 = 0;
  DWORD2(v28) = 2;
  DWORD2(v27) = 0;
  if (*a1 >= 4u)
  {
    v17 = BYTE9(v33[3]);
    if (BYTE9(v33[3]) == 1)
    {
      v17 = BYTE4(v33[3]);
      if (DWORD1(v33[3]) != 3)
        v17 = 1;
    }
    else if (BYTE9(v33[3]) != 3)
    {
      goto LABEL_16;
    }
    BYTE8(v33[2]) = v17;
LABEL_16:
    *(_QWORD *)((char *)v33 + 4) = 15;
    HIDWORD(v33[1]) = 0;
    *(_QWORD *)((char *)&v33[1] + 4) = 0;
    *(_QWORD *)((char *)v33 + 12) = 0x100000001;
    LOBYTE(v33[0]) = 0;
    *(_QWORD *)&v33[2] = 0x700000000;
    goto LABEL_17;
  }
  HIDWORD(v33[0]) = 0;
  *(_QWORD *)((char *)v33 + 4) = 0;
  v33[1] = 1uLL;
  LOBYTE(v33[0]) = 0;
LABEL_17:
  v18 = v33[4];
  a4[10] = v33[3];
  a4[11] = v18;
  a4[12] = v33[5];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v33[5] + 12);
  v19 = v33[0];
  a4[6] = v32;
  a4[7] = v19;
  v20 = v33[2];
  a4[8] = v33[1];
  a4[9] = v20;
  v21 = v29;
  a4[2] = v28;
  a4[3] = v21;
  v22 = v31;
  a4[4] = v30;
  a4[5] = v22;
  result = *(double *)&v26;
  v24 = v27;
  *a4 = v26;
  a4[1] = v24;
  return result;
}

__n128 sub_1C4C208D4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[8];

  *a3 = 1;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  memset(v32, 0, 108);
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v32[6] + 5, (int8x8_t *)((char *)&v32[2] + 10), (uint64_t)&v32[4] + 4);
  sub_1C4C1F9D4((uint64_t)a1, (uint64_t)a2, v9, (int *)&v32[3] + 1, (_BYTE *)&v32[3] + 9, (uint64_t)&v28 + 8, (_BYTE *)&v32[6] + 4, (_DWORD *)&v32[6] + 2);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v30 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v28 + 8);
  v14 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v14 + 16 * v12) == 5)
    v15 = 0;
  else
    v15 = *(_WORD *)(v14 + 16 * v12 + 8);
  LOWORD(v32[4]) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&v26 + 12);
  v16 = 0;
  switch(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8))
  {
    case 1:
      break;
    case 2:
      v16 = 1;
      break;
    case 4:
      v16 = 2;
      break;
    case 8:
      v16 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const char *)1);
  }
  HIDWORD(v32[3]) = v16;
  BYTE8(v32[3]) = 0;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = 0x200000000;
  *(_QWORD *)&v26 = 0;
  DWORD2(v27) = 2;
  DWORD2(v26) = 0;
  if (*a1 >= 4u)
  {
    BYTE8(v32[2]) = 3;
    *(_QWORD *)((char *)v32 + 4) = 15;
    memset((char *)v32 + 12, 0, 20);
    *(_QWORD *)&v32[2] = 0x600000000;
    v17 = 1;
  }
  else
  {
    v17 = 0;
    memset((char *)v32 + 4, 0, 28);
  }
  BYTE9(v32[3]) = 3;
  HIDWORD(v32[0]) = v17;
  LODWORD(v32[1]) = 1;
  LOBYTE(v32[0]) = 0;
  *(_OWORD *)(a4 + 192) = v32[5];
  *(_OWORD *)(a4 + 204) = *(_OWORD *)((char *)&v32[5] + 12);
  v18 = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(_OWORD *)(a4 + 48) = v18;
  v19 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v19;
  v20 = v26;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v20;
  v21 = v32[4];
  *(_OWORD *)(a4 + 160) = v32[3];
  *(_OWORD *)(a4 + 176) = v21;
  v22 = v32[0];
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v22;
  result = (__n128)v32[2];
  *(_OWORD *)(a4 + 128) = v32[1];
  *(__n128 *)(a4 + 144) = result;
  return result;
}

double sub_1C4C20BA0(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  __int128 v15;
  double result;
  __int128 v17;
  _OWORD v18[3];

  *a3 = 123;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v17 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v18[2] + 9, (int8x8_t *)v18, (uint64_t)v18 + 8);
  v11 = *((_QWORD *)a2 + 2);
  v12 = *(_QWORD *)(v11 + 16 * v9 + 8);
  v13 = *a1;
  if (*a1 - 3 <= 2)
    BYTE8(v18[2]) = (v12 & 2) != 0;
  if (*(_BYTE *)(v11 + 16 * v10) == 5)
    v14 = 0;
  else
    v14 = *(_WORD *)(v11 + 16 * v10 + 8) & 0x3FF;
  LOWORD(v17) = v14;
  if (v13 >= 4)
    *((_QWORD *)&v17 + 1) = 0x7A00000003;
  v15 = v18[0];
  DWORD1(v17) = v12 & 1;
  *a4 = v17;
  a4[1] = v15;
  a4[2] = v18[1];
  result = *(double *)((char *)&v18[1] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[1] + 12);
  return result;
}

double sub_1C4C20CCC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *a3 = 122;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17 + 4, (int8x8_t *)((unint64_t)&v14 | 0xC), (uint64_t)&v15 + 4);
  v10 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v10 + 16 * v9) == 5)
    v11 = 0;
  else
    v11 = *(_WORD *)(v10 + 16 * v9 + 8) & 0x3FF;
  LOWORD(v14) = v11;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)&v14 + 4) = 0x7900000001;
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = *(double *)&v16;
  *(_OWORD *)(a4 + 32) = v16;
  *(_QWORD *)(a4 + 48) = v17;
  return result;
}

double sub_1C4C20DC4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64x2_t v11;
  int16x8_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *a3 = 4;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v19 + 15, (int8x8_t *)&v16 + 1, (uint64_t)&v17 + 12);
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v17) = (v10 & 0x80) != 0;
  v11 = (uint64x2_t)vdupq_n_s64(v10);
  v12 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1C6A5F970), (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1C6A5F960));
  *(int8x8_t *)v12.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v12), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)&v17 + 1) = vmovn_s16(v12).u32[0];
  DWORD2(v17) = (v10 >> 1) & 7;
  BYTE12(v19) = (v10 & 0x10) != 0;
  BYTE13(v19) = (v10 & 0x20) != 0;
  BYTE14(v19) = (v10 & 0x40) != 0;
  BYTE5(v17) = 1;
  if (*a1 >= 4u)
    *(_QWORD *)&v16 = 0x900000003;
  v13 = v17;
  *a4 = v16;
  a4[1] = v13;
  result = *(double *)&v18;
  v15 = v19;
  a4[2] = v18;
  a4[3] = v15;
  return result;
}

double sub_1C4C20EF0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64x2_t v11;
  int16x8_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *a3 = 4;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v19 + 15, (int8x8_t *)&v16 + 1, (uint64_t)&v17 + 12);
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8);
  v11 = (uint64x2_t)vdupq_n_s64(v10);
  LOBYTE(v17) = (v10 & 0x80) != 0;
  v12 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1C6A5F970), (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1C6A5F960));
  *(int8x8_t *)v12.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v12), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)&v17 + 1) = vmovn_s16(v12).u32[0];
  DWORD2(v17) = (v10 >> 1) & 7;
  BYTE12(v19) = (v10 & 0x10) != 0;
  BYTE13(v19) = (v10 & 0x20) != 0;
  BYTE14(v19) = (v10 & 0x40) != 0;
  BYTE5(v17) = 0;
  if (*a1 >= 4u)
    *(_QWORD *)&v16 = 0x900000003;
  v13 = v17;
  *a4 = v16;
  a4[1] = v13;
  result = *(double *)&v18;
  v15 = v19;
  a4[2] = v18;
  a4[3] = v15;
  return result;
}

double sub_1C4C21018(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *a3 = 113;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v22 + 4, (int8x8_t *)&v19 + 1, (uint64_t)&v20);
  DWORD2(v17) = 5;
  if (*a1 >= 4u)
    HIDWORD(v17) = 2;
  v10 = *((_QWORD *)a2 + 2);
  v11 = *(_QWORD *)(v10 + 16 * v9 + 8);
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  LOWORD(v17) = *(_WORD *)(*(_QWORD *)(v12 + 32) + 16) & 0x1FFF;
  if (v9)
    v13 = 1;
  else
    v13 = 2;
  v14 = *(_DWORD *)(v10 + 16 * (v13 + v9) + 8);
  if (*a1 >= 4u)
  {
    HIDWORD(v18) = 2;
    DWORD1(v19) = 112;
  }
  v15 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v15;
  *(_OWORD *)(a4 + 64) = v21;
  *(_QWORD *)(a4 + 80) = v22;
  result = *(double *)&v17;
  *(_OWORD *)a4 = v17;
  DWORD1(v18) = (v14 >> 20) & 0xF;
  BYTE8(v18) = (v14 & 0x10) != 0;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C4C21158(unsigned int *a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  __int128 v18;
  double result;
  __int128 v20;
  __int128 v21;
  _OWORD v22[4];

  *a3 = 32;
  v7 = *(_DWORD *)a2;
  v8 = (unsigned __int16)*(_DWORD *)a2;
  v9 = sub_1C4C2FD5C(v8);
  v10 = sub_1C4C2FD5C(v8);
  v21 = 0u;
  memset(v22, 0, 60);
  v20 = 0u;
  sub_1C4C0B76C(a1, a2, v9, (BOOL *)&v22[3] + 8, (int8x8_t *)v22 + 1, (uint64_t)&v22[1] + 4);
  DWORD2(v20) = 5;
  v11 = *a1;
  if (*a1 >= 4)
    HIDWORD(v20) = 2;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(v12 + 16 * v10 + 8);
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  LOWORD(v20) = *(_WORD *)(*(_QWORD *)(v14 + 32) + 16) & 0x1FFF;
  v15 = 1;
  if (v10)
    v16 = 1;
  else
    v16 = 2;
  v17 = *(_DWORD *)(v12 + 16 * (v16 + v10) + 8);
  if (v7 != 566)
  {
    if (v7 == 567)
    {
      LOWORD(v22[1]) = 257;
      if (v11 < 4)
        goto LABEL_12;
      v15 = 3;
    }
    else
    {
      LOWORD(v22[1]) = 256;
      if (v11 < 4)
        goto LABEL_12;
      v15 = 2;
    }
    goto LABEL_11;
  }
  LOWORD(v22[1]) = 1;
  if (v11 >= 4)
  {
LABEL_11:
    DWORD1(v22[3]) = v15;
    HIDWORD(v21) = 2;
    DWORD1(v22[0]) = 37;
  }
LABEL_12:
  v18 = v22[1];
  a4[2] = v22[0];
  a4[3] = v18;
  a4[4] = v22[2];
  *(_OWORD *)((char *)a4 + 76) = *(_OWORD *)((char *)&v22[2] + 12);
  result = *(double *)&v20;
  *a4 = v20;
  DWORD1(v21) = (v17 >> 20) & 0xF;
  BYTE8(v21) = (v17 & 0x10) != 0;
  a4[1] = v21;
  return result;
}

__n128 sub_1C4C212E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *a3 = 174;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v13 = *((_QWORD *)a2 + 2);
  v20.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  v14 = *(_QWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v25) = dword_1C6A5FB54[(v14 & 0xF) - 8];
  BYTE8(v25) = (v14 & 0x10) != 0;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v22 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD1(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD2(v24) = 157;
  }
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C2149C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *a3 = 176;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  v29 = 0;
  v12 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1)
    *(_QWORD *)((char *)&v21 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if ((_DWORD)v23 == 1)
    *(_QWORD *)&v23 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v29) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      LODWORD(v26) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD1(v26) = 159;
  }
  v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v29;
  v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C216B0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *a3 = 175;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  v29 = 0;
  v12 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1)
    *(_QWORD *)((char *)&v21 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if ((_DWORD)v23 == 1)
    *(_QWORD *)&v23 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v29) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      LODWORD(v26) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD1(v26) = 158;
  }
  v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v29;
  v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C4C218C4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  *a3 = 39;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v39 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v25);
  LOBYTE(v26) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v39 + 4, (int8x8_t *)((char *)&v36 + 4), (uint64_t)&v36 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v30 + 8);
  if ((_DWORD)v31 == 1)
    *(_QWORD *)&v31 = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v32 + 4);
  if (HIDWORD(v32) == 1)
    LODWORD(v33) = 2;
  v14 = *(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8);
  BYTE12(v38) = (v14 & 4) != 0;
  BYTE13(v38) = (v14 & 2) != 0;
  BYTE14(v38) = v14 & 1;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v22, (uint64_t)&v34);
  sub_1C4C15874((uint64_t)a1, a2, v23, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v24, (uint64_t)&v28.n128_i64[1] + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v39) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v25) - 2) <= 3)
      HIDWORD(v35) = dword_1C6A5F9D0[DWORD2(v25) - 2];
    LODWORD(v36) = 44;
  }
  v15 = v38;
  *(_OWORD *)(a4 + 192) = v37;
  *(_OWORD *)(a4 + 208) = v15;
  *(_QWORD *)(a4 + 224) = v39;
  v16 = v34;
  *(_OWORD *)(a4 + 128) = v33;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v36;
  *(_OWORD *)(a4 + 160) = v35;
  *(_OWORD *)(a4 + 176) = v17;
  v18 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v32;
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v26;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v20;
  result = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void sub_1C4C21B68(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sub_1C4C157AC(a1, a2, a3, a4);
  v12 = *(_OWORD *)a2;
  v13 = v15;
  v14 = 0x800000000;
  v7 = *(_DWORD *)(a2 + 24);
  if (v7)
    v8 = &v12 == (__int128 *)a2;
  else
    v8 = 1;
  if (!v8)
  {
    if (v7 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, *(unsigned int *)(a2 + 24), 16);
      v10 = *(unsigned int *)(a2 + 24);
      v9 = v13;
      if (!(_DWORD)v10)
        goto LABEL_8;
    }
    else
    {
      v9 = v15;
      v10 = *(unsigned int *)(a2 + 24);
    }
    memcpy(v9, *(const void **)(a2 + 16), 16 * v10);
    v9 = v13;
LABEL_8:
    LODWORD(v14) = v7;
    goto LABEL_10;
  }
  v9 = v15;
LABEL_10:
  v15[128] = *(_BYTE *)(a2 + 160);
  v11 = 1;
  if (v9[16 * a3] == 5)
  {
    if (**(_BYTE **)&v9[16 * a3 + 8] == 4)
      v11 = 2;
    else
      v11 = 1;
  }
  *(_BYTE *)(a4 + 28) = v9[16 * v11 + 8 + 16 * a3] & 1;
  if (v9 != v15)
    free(v9);
}

__n128 sub_1C4C21CA8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  *a3 = 38;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v39 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v25);
  LOBYTE(v26) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v39 + 4, (int8x8_t *)((char *)&v36 + 4), (uint64_t)&v36 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v30 + 8);
  if ((_DWORD)v31 == 1)
    *(_QWORD *)&v31 = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v32 + 4);
  if (HIDWORD(v32) == 1)
    LODWORD(v33) = 2;
  v14 = *(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8);
  BYTE12(v38) = (v14 & 4) != 0;
  BYTE13(v38) = (v14 & 2) != 0;
  BYTE14(v38) = v14 & 1;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v22, (uint64_t)&v34);
  sub_1C4C15874((uint64_t)a1, a2, v23, (uint64_t)&v27);
  sub_1C4C15874((uint64_t)a1, a2, v24, (uint64_t)&v28.n128_i64[1] + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v39) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v25) - 2) <= 3)
      HIDWORD(v35) = dword_1C6A5F9D0[DWORD2(v25) - 2];
    LODWORD(v36) = 43;
  }
  v15 = v38;
  *(_OWORD *)(a4 + 192) = v37;
  *(_OWORD *)(a4 + 208) = v15;
  *(_QWORD *)(a4 + 224) = v39;
  v16 = v34;
  *(_OWORD *)(a4 + 128) = v33;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v36;
  *(_OWORD *)(a4 + 160) = v35;
  *(_OWORD *)(a4 + 176) = v17;
  v18 = v30;
  *(_OWORD *)(a4 + 64) = v29;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v32;
  *(_OWORD *)(a4 + 96) = v31;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v26;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v20;
  result = v28;
  *(_OWORD *)(a4 + 32) = v27;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C21F4C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;

  *a3 = 52;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v45 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v30);
  LOBYTE(v31) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v44 + 12, (int8x8_t *)&v41 + 1, (uint64_t)&v42 + 4);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&v35 + 12);
  if (DWORD1(v36) == 1)
    *(_QWORD *)((char *)&v36 + 4) = 0x200000001;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v37 + 8);
  if ((_DWORD)v38 == 1)
    *(_QWORD *)&v38 = 0x200000001;
  v14 = *(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8);
  BYTE4(v44) = (v14 & 4) != 0;
  BYTE5(v44) = (v14 & 2) != 0;
  BYTE6(v44) = v14 & 1;
  sub_1C4C0C39C(a1, (uint64_t)a2, v27, (uint64_t)&v39 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v28, (uint64_t)&v32 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v29, (uint64_t)&v34);
  v15 = *((_QWORD *)a2 + 2);
  LODWORD(v42) = *(_QWORD *)(v15 + 16 * v26 + 8);
  v16 = (*(_QWORD *)(v15 + 16 * v13 + 8) & 7) - 1;
  if (v16 <= 4)
    DWORD2(v44) = v16;
  if (*(_DWORD *)a1 >= 5u)
  {
    v45 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v17 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47)
        v45 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_17;
  }
  if ((DWORD2(v30) - 2) <= 3)
    LODWORD(v41) = dword_1C6A5F9D0[DWORD2(v30) - 2];
  DWORD1(v41) = 57;
LABEL_17:
  v18 = v43;
  *(_OWORD *)(a4 + 192) = v42;
  *(_OWORD *)(a4 + 208) = v18;
  *(_OWORD *)(a4 + 224) = v44;
  *(_DWORD *)(a4 + 240) = v45;
  v19 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v19;
  v20 = v41;
  *(_OWORD *)(a4 + 160) = v40;
  *(_OWORD *)(a4 + 176) = v20;
  v21 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v21;
  v22 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v22;
  v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  result = *(double *)&v32;
  v25 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v25;
  return result;
}

double sub_1C4C22260(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;

  *a3 = 51;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v45 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v30);
  LOBYTE(v31) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v44 + 12, (int8x8_t *)&v41 + 1, (uint64_t)&v42 + 4);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&v35 + 12);
  if (DWORD1(v36) == 1)
    *(_QWORD *)((char *)&v36 + 4) = 0x200000001;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v37 + 8);
  if ((_DWORD)v38 == 1)
    *(_QWORD *)&v38 = 0x200000001;
  v14 = *(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8);
  BYTE4(v44) = (v14 & 4) != 0;
  BYTE5(v44) = (v14 & 2) != 0;
  BYTE6(v44) = v14 & 1;
  sub_1C4C0C39C(a1, (uint64_t)a2, v27, (uint64_t)&v39 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v28, (uint64_t)&v32 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v29, (uint64_t)&v34);
  v15 = *((_QWORD *)a2 + 2);
  LODWORD(v42) = *(_QWORD *)(v15 + 16 * v26 + 8);
  v16 = (*(_QWORD *)(v15 + 16 * v13 + 8) & 7) - 1;
  if (v16 <= 4)
    DWORD2(v44) = v16;
  if (*(_DWORD *)a1 >= 5u)
  {
    v45 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v25 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v25 & 0xFF00000000) == 0 || v25 != 47)
        v45 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_9;
  }
  if ((DWORD2(v30) - 2) <= 3)
    LODWORD(v41) = dword_1C6A5F9D0[DWORD2(v30) - 2];
  DWORD1(v41) = 56;
LABEL_9:
  v17 = v43;
  *(_OWORD *)(a4 + 192) = v42;
  *(_OWORD *)(a4 + 208) = v17;
  *(_OWORD *)(a4 + 224) = v44;
  *(_DWORD *)(a4 + 240) = v45;
  v18 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v18;
  v19 = v41;
  *(_OWORD *)(a4 + 160) = v40;
  *(_OWORD *)(a4 + 176) = v19;
  v20 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v20;
  v21 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v21;
  v22 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v22;
  result = *(double *)&v32;
  v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  return result;
}

__n128 sub_1C4C22574(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 138;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 137;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C22700(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 143;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 142;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C2288C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 171;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 154;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C22A1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 172;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 155;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C22BA8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 178;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 161;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C22D34(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 133;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 130;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C22EDC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 156;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 176;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C23084(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 157;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 178;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C2322C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 159;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 180;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C233EC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 158;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 179;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C23594(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 92;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (DWORD1(v16) == 1)
    *(_QWORD *)((char *)&v16 + 4) = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 93;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C4C236F4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[5];

  *a3 = 91;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v36 = 0u;
  memset(v37, 0, 60);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v37[3] + 8, (int8x8_t *)&v31, (uint64_t)&v31 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v33 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v35 + 4);
  if (*a1 >= 4u)
  {
    DWORD2(v37[1]) = 0;
    *((_QWORD *)&v37[0] + 1) = 0x100000000;
    *(_QWORD *)&v37[1] = 0;
    *(_QWORD *)&v37[0] = 0;
    goto LABEL_15;
  }
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)v37);
  if (*a1 >= 4u)
  {
LABEL_15:
    DWORD1(v37[3]) = 0;
    *(_OWORD *)((char *)&v37[2] + 4) = 0x100000000uLL;
    *(_QWORD *)((char *)&v37[1] + 12) = 0;
LABEL_16:
    sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v29);
    DWORD2(v27) = 5;
    if (*a1 < 4u)
    {
      v13 = 0;
    }
    else
    {
      HIDWORD(v27) = 2;
      v13 = 1;
    }
    goto LABEL_5;
  }
  sub_1C4C0E920((uint64_t)a1, a2, v26, (uint64_t)&v37[1] + 12);
  if (*a1 > 3u)
    goto LABEL_16;
  v13 = 0;
  v29 = 0uLL;
  DWORD2(v30) = 0;
  *(_QWORD *)&v30 = 0;
  DWORD2(v27) = 5;
LABEL_5:
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_QWORD *)(v14 + 16 * v12 + 8);
  if (v15)
    v16 = v15 - 8;
  else
    v16 = 0;
  LOWORD(v27) = *(_WORD *)(*(_QWORD *)(v16 + 32) + 16) & 0x1FFF;
  if (v12)
    v17 = 1;
  else
    v17 = 2;
  v18 = *(_DWORD *)(v14 + 16 * (v17 + v12) + 8);
  if (v13)
  {
    HIDWORD(v28) = 2;
    HIDWORD(v30) = 92;
  }
  v19 = v37[1];
  a4[10] = v37[0];
  a4[11] = v19;
  a4[12] = v37[2];
  *(_OWORD *)((char *)a4 + 204) = *(_OWORD *)((char *)&v37[2] + 12);
  v20 = v34;
  a4[6] = v33;
  a4[7] = v20;
  v21 = v36;
  a4[8] = v35;
  a4[9] = v21;
  v22 = v30;
  a4[2] = v29;
  a4[3] = v22;
  v23 = v32;
  a4[4] = v31;
  a4[5] = v23;
  result = *(double *)&v27;
  *a4 = v27;
  DWORD1(v28) = (v18 >> 20) & 0xF;
  BYTE8(v28) = (v18 & 0x10) != 0;
  a4[1] = v28;
  return result;
}

__n128 sub_1C4C239AC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  __n128 result;
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;

  *a3 = 29;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v20 + 12, (int8x8_t *)((char *)&v18[1] + 4), (uint64_t)&v18[1] + 12);
  DWORD2(v17) = 5;
  if (*a1 >= 4u)
    HIDWORD(v17) = 2;
  v10 = *((_QWORD *)a2 + 2);
  v11 = *(_QWORD *)(v10 + 16 * v9 + 8);
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  LOWORD(v17) = *(_WORD *)(*(_QWORD *)(v12 + 32) + 16) & 0x1FFF;
  if (v9)
    v13 = 1;
  else
    v13 = 2;
  v14 = *(_DWORD *)(v10 + 16 * (v13 + v9) + 8);
  BYTE8(v18[0]) = (v14 & 0x10) != 0;
  DWORD1(v18[0]) = (v14 >> 20) & 0xF;
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v18 + 12) = 0x2200000002;
  v15 = v19;
  a4[2] = v18[1];
  a4[3] = v15;
  a4[4] = v20;
  result = (__n128)v18[0];
  *a4 = v17;
  a4[1] = v18[0];
  return result;
}

double sub_1C4C23ADC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *a3 = 33;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v21 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v25 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v23 + 8);
  LOBYTE(v21) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v12, (BOOL *)&v31 + 12, (int8x8_t *)((char *)&v29 + 4), (uint64_t)&v29 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3)
      HIDWORD(v28) = dword_1C6A5F9D0[DWORD2(v20) - 2];
    LODWORD(v29) = 38;
  }
  v13 = v29;
  a4[8] = v28;
  a4[9] = v13;
  v14 = v31;
  a4[10] = v30;
  a4[11] = v14;
  v15 = v25;
  a4[4] = v24;
  a4[5] = v15;
  v16 = v27;
  a4[6] = v26;
  a4[7] = v16;
  v17 = v21;
  *a4 = v20;
  a4[1] = v17;
  result = *(double *)&v22;
  v19 = v23;
  a4[2] = v22;
  a4[3] = v19;
  return result;
}

__n128 sub_1C4C23C88(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *a3 = 20;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v12);
  v13.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v16 + 12, (int8x8_t *)((char *)&v14 + 4), (uint64_t)&v14 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v12) - 2) <= 3)
      v13.n128_u32[3] = dword_1C6A5F9D0[DWORD2(v12) - 2];
    LODWORD(v14) = 25;
  }
  v10 = v15;
  *(_OWORD *)(a4 + 32) = v14;
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v16;
  result = v13;
  *(_OWORD *)a4 = v12;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C23D98(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *a3 = 20;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v12);
  v13.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v16 + 12, (int8x8_t *)((char *)&v14 + 4), (uint64_t)&v14 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v12) - 2) <= 3)
      v13.n128_u32[3] = dword_1C6A5F9D0[DWORD2(v12) - 2];
    LODWORD(v14) = 25;
  }
  v10 = v15;
  *(_OWORD *)(a4 + 32) = v14;
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v16;
  result = v13;
  *(_OWORD *)a4 = v12;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C23EA4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __n128 result;
  _BYTE v18[72];

  *a3 = 108;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  memset(&v18[8], 0, 64);
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, &v18[64], (int8x8_t *)&v18[20], (uint64_t)&v18[28]);
  v12 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v12 + 16 * v9) == 5)
    v13 = 0;
  else
    v13 = *(_DWORD *)(v12 + 16 * v9 + 8);
  *(_DWORD *)&v18[60] = v13;
  if (*(_BYTE *)(v12 + 16 * v10) == 5)
    v14 = 0;
  else
    v14 = *(_QWORD *)(v12 + 16 * v10 + 8) & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)v18 = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_DWORD *)(v12 + 16 * v11 + 8);
  *(_DWORD *)&v18[8] = v15;
  if (*a1 >= 4u)
    *(_QWORD *)&v18[12] = 0x6B00000003;
  v16 = *(_OWORD *)&v18[48];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v18[32];
  *(_OWORD *)(a4 + 48) = v16;
  *(_QWORD *)(a4 + 64) = *(_QWORD *)&v18[64];
  result = *(__n128 *)&v18[16];
  *(_OWORD *)a4 = *(_OWORD *)v18;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C2401C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  char v19;
  BOOL v20;
  BOOL v21;
  __int16 v22;
  __int128 v23;
  __n128 result;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *a3 = 182;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v30 + 6, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v15 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v15 + 16 * v9) == 5)
    v16 = 0;
  else
    v16 = *(_DWORD *)(v15 + 16 * v9 + 8);
  DWORD1(v29) = v16;
  if (*(_BYTE *)(v15 + 16 * v10) == 5)
    v17 = 0;
  else
    v17 = *(_DWORD *)(v15 + 16 * v10 + 8);
  DWORD2(v29) = v17;
  if (*(_BYTE *)(v15 + 16 * v11) == 5)
    v18 = 0;
  else
    v18 = *(_DWORD *)(v15 + 16 * v11 + 8);
  HIDWORD(v29) = v18;
  if (*(_BYTE *)(v15 + 16 * v12) == 5)
    v19 = 0;
  else
    v19 = *(_BYTE *)(v15 + 16 * v12 + 8);
  LOBYTE(v30) = v19;
  v20 = *(_BYTE *)(v15 + 16 * v13) != 5 && *(_QWORD *)(v15 + 16 * v13 + 8) != 0;
  BYTE5(v30) = v20;
  v21 = *(_BYTE *)(v15 + 16 * v25) != 5 && *(_QWORD *)(v15 + 16 * v25 + 8) != 0;
  BYTE4(v30) = v21;
  if (*(_BYTE *)(v15 + 16 * v14) == 5)
    v22 = 0;
  else
    v22 = *(_WORD *)(v15 + 16 * v14 + 8);
  LOWORD(v29) = v22;
  if (*a1 >= 4u)
    *(_QWORD *)&v26 = 0xA500000003;
  v23 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v23;
  *(_QWORD *)(a4 + 64) = v30;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C242A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int32 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  int v26;

  *a3 = 183;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v25 + 14, (int8x8_t *)&v22 + 1, (uint64_t)&v23.n128_i64[1]);
  v14 = 0;
  v15 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v15 + 16 * v9) != 5)
    v14 = *(_BYTE *)(v15 + 16 * v9 + 8) & 0x7F;
  v23.n128_u8[0] = v14;
  if (*(_BYTE *)(v15 + 16 * v10) == 5)
    v16 = 0;
  else
    v16 = *(_DWORD *)(v15 + 16 * v10 + 8);
  v23.n128_u32[1] = v16;
  if (*(_BYTE *)(v15 + 16 * v11) == 5)
    v17 = 0;
  else
    v17 = *(_WORD *)(v15 + 16 * v11 + 8) & 0xFFF;
  WORD6(v25) = v17;
  if (*(_BYTE *)(v15 + 16 * v12) == 5)
    v18 = 0;
  else
    v18 = *(_WORD *)(v15 + 16 * v12 + 8);
  WORD4(v25) = v18;
  if (*(_BYTE *)(v15 + 16 * v13) == 5)
    v19 = 0;
  else
    v19 = *(_WORD *)(v15 + 16 * v13 + 8);
  WORD5(v25) = v19;
  if (*a1 >= 4u)
    *(_QWORD *)&v22 = 0xA600000003;
  v20 = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v20;
  *(_DWORD *)(a4 + 64) = v26;
  result = v23;
  *(_OWORD *)a4 = v22;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C24494(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;

  *a3 = 64;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v16);
  BYTE12(v16) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v23 + 12, (int8x8_t *)((char *)&v21[1] + 4), (uint64_t)&v21[1] + 12);
  sub_1C4C2469C((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1]);
  sub_1C4C2469C((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  DWORD2(v21[0]) = 1;
  sub_1C4C32DEC(*(_DWORD *)a2);
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v21 + 12) = 0x4600000003;
  v12 = v22;
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v23;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C4C24604(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t result;

  v6 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(a4 + 4) = 2;
  v7 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
  if (v7 == 182 || v7 == 177)
    *(_DWORD *)(a4 + 8) = 2;
  *(_WORD *)a4 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), (unsigned __int8 *)(v6 + 16 * a3), 2) & 0x1FF;
  result = sub_1C4C32DEC(*(_DWORD *)a2);
  *(_BYTE *)(a4 + 21) = (_DWORD)result == 33;
  *(_BYTE *)(a4 + 20) = 0;
  return result;
}

uint64_t sub_1C4C2469C(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t result;
  unint64_t v11;

  v7 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * a3);
  *(_DWORD *)(a4 + 4) = 2;
  v8 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
  if (v8 > 176)
  {
    if (v8 == 182)
    {
      v9 = 2;
    }
    else
    {
      if (v8 != 177)
        goto LABEL_10;
      v9 = 1;
    }
    goto LABEL_9;
  }
  v9 = 0;
  if (v8 == 171 || v8 == 174)
LABEL_9:
    *(_DWORD *)(a4 + 8) = v9;
LABEL_10:
  *(_WORD *)a4 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v7, 2) & 0x1FF;
  result = sub_1C4C270A8((uint64_t)a2, (uint64_t)v7, a3, a4);
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8);
  if ((v11 & 0x800) != 0)
  {
    *(_DWORD *)(a4 + 8) = 4;
  }
  else if (!*(_DWORD *)(a4 + 8))
  {
    *(_DWORD *)(a4 + 28) = (HIWORD(v11) & 3) - 1;
  }
  *(_DWORD *)(a4 + 24) = (v11 >> 45) & 1;
  return result;
}

double sub_1C4C247A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 77;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 0;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0x5300000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

uint64_t sub_1C4C24934(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t result;
  unint64_t v11;

  v7 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(a4 + 4) = 2;
  v8 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
  if (v8 == 174 || v8 == 171)
    *(_DWORD *)(a4 + 8) = 0;
  v9 = (unsigned __int8 *)(v7 + 16 * a3);
  *(_WORD *)a4 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v9, 2) & 0x1FF;
  result = sub_1C4C270A8((uint64_t)a2, (uint64_t)v9, a3, a4);
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8);
  *(_DWORD *)(a4 + 24) = (v11 >> 45) & 1;
  *(_BYTE *)(a4 + 13) = (v11 & 8) != 0;
  return result;
}

uint64_t sub_1C4C249F0(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t result;
  unint64_t v11;

  v7 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * a3);
  *(_DWORD *)(a4 + 4) = 2;
  v8 = (__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3];
  if (v8 <= 176)
  {
    if (v8 == 171)
    {
      v9 = 0;
    }
    else
    {
      if (v8 != 174)
        goto LABEL_10;
      v9 = 1;
    }
    goto LABEL_9;
  }
  if (v8 == 177 || v8 == 182)
  {
    v9 = 2;
LABEL_9:
    *(_DWORD *)(a4 + 8) = v9;
  }
LABEL_10:
  *(_WORD *)a4 = sub_1C4C264D0(*(_QWORD *)(a1 + 24), v7, 2) & 0x1FF;
  result = sub_1C4C270A8((uint64_t)a2, (uint64_t)v7, a3, a4);
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8);
  if ((v11 & 0x800) != 0)
  {
    *(_DWORD *)(a4 + 8) = 4;
  }
  else if (!*(_DWORD *)(a4 + 8))
  {
    *(_DWORD *)(a4 + 28) = (HIWORD(v11) & 3) - 1;
  }
  *(_DWORD *)(a4 + 24) = (v11 >> 45) & 1;
  return result;
}

double sub_1C4C24AF4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (!sub_1C4C26C54((uint64_t)a2))
    return sub_1C4C24B68(a1, a2, a3, a4);
  sub_1C4C26C54((uint64_t)a2);
  return sub_1C4C24E7C(a1, a2, a3, a4);
}

double sub_1C4C24B68(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;

  *a3 = 203;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v36 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v37);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v38) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v47 + 8, (int8x8_t *)&v45, (uint64_t)&v45 + 8);
  v13 = *(_DWORD *)(v12 + 16 * v35 + 8) & 0xF;
  HIDWORD(v47) = *(_DWORD *)(v12 + 16 * v36 + 8) & 0xF;
  LODWORD(v48) = v13;
  DWORD1(v48) = *(_DWORD *)(v12 + 16 * v31 + 8) & 0xF;
  sub_1C4C15874((uint64_t)a1, a2, v33, (uint64_t)&v39 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v32, (uint64_t)&v41);
  sub_1C4C15874((uint64_t)a1, a2, v34, (uint64_t)&v42 + 12);
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_QWORD *)(v14 + 16 * v29 + 8);
  DWORD2(v48) = *(_QWORD *)(v14 + 16 * v30 + 8);
  HIDWORD(v48) = v15;
  v16 = *(_QWORD *)(v14 + 16 * v27 + 8);
  LODWORD(v49) = *(_QWORD *)(v14 + 16 * v28 + 8);
  DWORD1(v49) = v16;
  v17 = *(_QWORD *)(v14 + 16 * v25 + 8);
  DWORD2(v49) = *(_QWORD *)(v14 + 16 * v26 + 8);
  HIDWORD(v49) = v17;
  v50 = __PAIR64__(*(_QWORD *)(v14 + 16 * v11 + 8), *(_QWORD *)(v14 + 16 * v10 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v37) - 2) <= 3)
      DWORD2(v44) = dword_1C6A5F9D0[DWORD2(v37) - 2];
    HIDWORD(v44) = 206;
  }
  v18 = v48;
  *(_OWORD *)(a4 + 160) = v47;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v49;
  *(_QWORD *)(a4 + 208) = v50;
  v19 = v44;
  *(_OWORD *)(a4 + 96) = v43;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v46;
  *(_OWORD *)(a4 + 128) = v45;
  *(_OWORD *)(a4 + 144) = v20;
  v21 = v40;
  *(_OWORD *)(a4 + 32) = v39;
  *(_OWORD *)(a4 + 48) = v21;
  v22 = v42;
  *(_OWORD *)(a4 + 64) = v41;
  *(_OWORD *)(a4 + 80) = v22;
  result = *(double *)&v37;
  v24 = v38;
  *(_OWORD *)a4 = v37;
  *(_OWORD *)(a4 + 16) = v24;
  return result;
}

double sub_1C4C24E7C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;

  *a3 = 204;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v36 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v37);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v38) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v47 + 8, (int8x8_t *)&v45, (uint64_t)&v45 + 8);
  v13 = *(_DWORD *)(v12 + 16 * v35 + 8) & 0xF;
  HIDWORD(v47) = *(_DWORD *)(v12 + 16 * v36 + 8) & 0xF;
  LODWORD(v48) = v13;
  DWORD1(v48) = *(_DWORD *)(v12 + 16 * v31 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v33, (uint64_t)&v39 + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v32, (uint64_t)&v41);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v42 + 12);
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_QWORD *)(v14 + 16 * v29 + 8);
  DWORD2(v48) = *(_QWORD *)(v14 + 16 * v30 + 8);
  HIDWORD(v48) = v15;
  v16 = *(_QWORD *)(v14 + 16 * v27 + 8);
  LODWORD(v49) = *(_QWORD *)(v14 + 16 * v28 + 8);
  DWORD1(v49) = v16;
  v17 = *(_QWORD *)(v14 + 16 * v25 + 8);
  DWORD2(v49) = *(_QWORD *)(v14 + 16 * v26 + 8);
  HIDWORD(v49) = v17;
  v50 = __PAIR64__(*(_QWORD *)(v14 + 16 * v11 + 8), *(_QWORD *)(v14 + 16 * v10 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v37) - 2) <= 3)
      DWORD2(v44) = dword_1C6A5F9D0[DWORD2(v37) - 2];
    HIDWORD(v44) = 207;
  }
  v18 = v48;
  *(_OWORD *)(a4 + 160) = v47;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v49;
  *(_QWORD *)(a4 + 208) = v50;
  v19 = v44;
  *(_OWORD *)(a4 + 96) = v43;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v46;
  *(_OWORD *)(a4 + 128) = v45;
  *(_OWORD *)(a4 + 144) = v20;
  v21 = v40;
  *(_OWORD *)(a4 + 32) = v39;
  *(_OWORD *)(a4 + 48) = v21;
  v22 = v42;
  *(_OWORD *)(a4 + 64) = v41;
  *(_OWORD *)(a4 + 80) = v22;
  result = *(double *)&v37;
  v24 = v38;
  *(_OWORD *)a4 = v37;
  *(_OWORD *)(a4 + 16) = v24;
  return result;
}

__n128 sub_1C4C25190(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 205;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v36);
  v12 = *((_QWORD *)a2 + 2);
  v37.n128_u8[0] = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v46, (int8x8_t *)&v43 + 1, (uint64_t)&v44);
  v13 = *(_DWORD *)(v12 + 16 * v34 + 8) & 0xF;
  DWORD1(v46) = *(_DWORD *)(v12 + 16 * v35 + 8) & 0xF;
  DWORD2(v46) = v13;
  HIDWORD(v46) = *(_DWORD *)(v12 + 16 * v29 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v31, (uint64_t)&v37.n128_i64[1] + 4);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v32, (uint64_t)&v39 + 8);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v33, (uint64_t)&v41 + 4);
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_QWORD *)(v14 + 16 * v28 + 8);
  LODWORD(v47) = *(_QWORD *)(v14 + 16 * v30 + 8);
  DWORD1(v47) = v15;
  v16 = *(_QWORD *)(v14 + 16 * v26 + 8);
  DWORD2(v47) = *(_QWORD *)(v14 + 16 * v27 + 8);
  HIDWORD(v47) = v16;
  v17 = *(_QWORD *)(v14 + 16 * v24 + 8);
  LODWORD(v48) = *(_QWORD *)(v14 + 16 * v25 + 8);
  DWORD1(v48) = v17;
  *((_QWORD *)&v48 + 1) = __PAIR64__(*(_QWORD *)(v14 + 16 * v11 + 8), *(_QWORD *)(v14 + 16 * v10 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v36) - 2) <= 3)
      LODWORD(v43) = dword_1C6A5F9D0[DWORD2(v36) - 2];
    DWORD1(v43) = 208;
  }
  v18 = v47;
  *(_OWORD *)(a4 + 160) = v46;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v48;
  v19 = v43;
  *(_OWORD *)(a4 + 96) = v42;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v45;
  *(_OWORD *)(a4 + 128) = v44;
  *(_OWORD *)(a4 + 144) = v20;
  v21 = v39;
  *(_OWORD *)(a4 + 32) = v38;
  *(_OWORD *)(a4 + 48) = v21;
  v22 = v41;
  *(_OWORD *)(a4 + 64) = v40;
  *(_OWORD *)(a4 + 80) = v22;
  result = v37;
  *(_OWORD *)a4 = v36;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C25498(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (sub_1C4C26C54((uint64_t)a2))
  {
    sub_1C4C26C54((uint64_t)a2);
    *(_QWORD *)&result = sub_1C4C25834(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C2550C(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C4C2550C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 207;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v36);
  v12 = *((_QWORD *)a2 + 2);
  v37.n128_u8[0] = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v46, (int8x8_t *)&v43 + 1, (uint64_t)&v44);
  v13 = dword_1C6A5FB54[(*(_QWORD *)(v12 + 16 * v30 + 8) & 0xFLL) - 8];
  DWORD1(v46) = dword_1C6A5FB54[(*(_QWORD *)(v12 + 16 * v31 + 8) & 0xFLL) - 8];
  DWORD2(v46) = v13;
  HIDWORD(v46) = dword_1C6A5FB54[(*(_QWORD *)(v12 + 16 * v29 + 8) & 0xFLL) - 8];
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v33, (uint64_t)&v37.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v39 + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v35, (uint64_t)&v41 + 4);
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_QWORD *)(v14 + 16 * v28 + 8);
  LODWORD(v47) = *(_QWORD *)(v14 + 16 * v32 + 8);
  DWORD1(v47) = v15;
  v16 = *(_QWORD *)(v14 + 16 * v26 + 8);
  DWORD2(v47) = *(_QWORD *)(v14 + 16 * v27 + 8);
  HIDWORD(v47) = v16;
  v17 = *(_QWORD *)(v14 + 16 * v24 + 8);
  LODWORD(v48) = *(_QWORD *)(v14 + 16 * v25 + 8);
  DWORD1(v48) = v17;
  *((_QWORD *)&v48 + 1) = __PAIR64__(*(_QWORD *)(v14 + 16 * v11 + 8), *(_QWORD *)(v14 + 16 * v10 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v36) - 2) <= 3)
      LODWORD(v43) = dword_1C6A5F9D0[DWORD2(v36) - 2];
    DWORD1(v43) = 210;
  }
  v18 = v47;
  *(_OWORD *)(a4 + 160) = v46;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v48;
  v19 = v43;
  *(_OWORD *)(a4 + 96) = v42;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v45;
  *(_OWORD *)(a4 + 128) = v44;
  *(_OWORD *)(a4 + 144) = v20;
  v21 = v39;
  *(_OWORD *)(a4 + 32) = v38;
  *(_OWORD *)(a4 + 48) = v21;
  v22 = v41;
  *(_OWORD *)(a4 + 64) = v40;
  *(_OWORD *)(a4 + 80) = v22;
  result = v37;
  *(_OWORD *)a4 = v36;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C4C25834(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 208;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v36);
  v11 = *((_QWORD *)a2 + 2);
  v37.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v46, (int8x8_t *)&v43 + 1, (uint64_t)&v44);
  v12 = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v32 + 8) & 0xFLL) - 8];
  DWORD1(v46) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v33 + 8) & 0xFLL) - 8];
  DWORD2(v46) = v12;
  HIDWORD(v46) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v31 + 8) & 0xFLL) - 8];
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v30, (uint64_t)&v37.n128_i64[1] + 4);
  if (DWORD1(v38) == 1)
    *(_QWORD *)((char *)&v38 + 4) = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v39 + 8);
  if ((_DWORD)v40 == 1)
    *(_QWORD *)&v40 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v35, (uint64_t)&v41 + 4);
  if (HIDWORD(v41) == 1)
    LODWORD(v42) = 2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_QWORD *)(v13 + 16 * v28 + 8);
  LODWORD(v47) = *(_QWORD *)(v13 + 16 * v29 + 8);
  DWORD1(v47) = v14;
  v15 = *(_QWORD *)(v13 + 16 * v27 + 8);
  DWORD2(v47) = *(_QWORD *)(v13 + 16 * v10 + 8);
  HIDWORD(v47) = v15;
  v16 = *(_QWORD *)(v13 + 16 * v25 + 8);
  LODWORD(v48) = *(_QWORD *)(v13 + 16 * v26 + 8);
  DWORD1(v48) = v16;
  *((_QWORD *)&v48 + 1) = __PAIR64__(*(_QWORD *)(v13 + 16 * v23 + 8), *(_QWORD *)(v13 + 16 * v24 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v36) - 2) <= 3)
      LODWORD(v43) = dword_1C6A5F9D0[DWORD2(v36) - 2];
    DWORD1(v43) = 211;
  }
  v17 = v47;
  *(_OWORD *)(a4 + 160) = v46;
  *(_OWORD *)(a4 + 176) = v17;
  *(_OWORD *)(a4 + 192) = v48;
  v18 = v43;
  *(_OWORD *)(a4 + 96) = v42;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v45;
  *(_OWORD *)(a4 + 128) = v44;
  *(_OWORD *)(a4 + 144) = v19;
  v20 = v39;
  *(_OWORD *)(a4 + 32) = v38;
  *(_OWORD *)(a4 + 48) = v20;
  v21 = v41;
  *(_OWORD *)(a4 + 64) = v40;
  *(_OWORD *)(a4 + 80) = v21;
  result = v37;
  *(_OWORD *)a4 = v36;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C4C25BE8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double result;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 202;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v38 = sub_1C4C2FD5C(v7);
  v37 = sub_1C4C2FD5C(v7);
  v36 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    v16 = 6;
  }
  else if (v15 == 1)
  {
    v16 = 7;
  }
  else
  {
    v16 = (v15 + 9) & 0xF;
  }
  BYTE5(v44) = v16;
  sub_1C4C0B76C(a1, (uint64_t)a2, v38, (BOOL *)&v47 + 8, (int8x8_t *)&v45, (uint64_t)&v45 + 8);
  v17 = *(_DWORD *)(v14 + 16 * v36 + 8) & 0xF;
  HIDWORD(v47) = *(_DWORD *)(v14 + 16 * v37 + 8) & 0xF;
  LODWORD(v48) = v17;
  DWORD1(v48) = *(_DWORD *)(v14 + 16 * v34 + 8) & 0xF;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v35, (uint64_t)&v39);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v33, (uint64_t)&v40 + 12);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v32, (uint64_t)&v42 + 8);
  v18 = *((_QWORD *)a2 + 2);
  v19.i64[0] = *(_QWORD *)(v18 + 16 * v31 + 8);
  v19.i64[1] = *(_QWORD *)(v18 + 16 * v30 + 8);
  v20.i64[0] = *(_QWORD *)(v18 + 16 * v29 + 8);
  v20.i64[1] = *(_QWORD *)(v18 + 16 * v9 + 8);
  v21.i64[0] = *(_QWORD *)(v18 + 16 * v10 + 8);
  v21.i64[1] = *(_QWORD *)(v18 + 16 * v11 + 8);
  v22.i64[0] = *(_QWORD *)(v18 + 16 * v12 + 8);
  v22.i64[1] = *(_QWORD *)(v18 + 16 * v13 + 8);
  *((int8x8_t *)&v48 + 1) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v19), (int32x4_t)vceqzq_s64(v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v21), (int32x4_t)vceqzq_s64(v22))))), (int8x8_t)0x101010101010101);
  BYTE4(v44) = sub_1C4C32DEC(*(_DWORD *)a2) == 31;
  if (*a1 >= 4u)
    *((_QWORD *)&v44 + 1) = 0xCD00000003;
  v23 = v46;
  a4[6] = v45;
  a4[7] = v23;
  v24 = v48;
  a4[8] = v47;
  a4[9] = v24;
  v25 = v42;
  a4[2] = v41;
  a4[3] = v25;
  v26 = v44;
  a4[4] = v43;
  a4[5] = v26;
  result = *(double *)&v39;
  v28 = v40;
  *a4 = v39;
  a4[1] = v28;
  return result;
}

double sub_1C4C25F20(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double result;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 206;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v38 = sub_1C4C2FD5C(v7);
  v37 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v36 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    v16 = 6;
  }
  else if (v15 == 1)
  {
    v16 = 7;
  }
  else
  {
    v16 = (v15 + 9) & 0xF;
  }
  BYTE5(v44) = v16;
  sub_1C4C0B76C(a1, (uint64_t)a2, v38, (BOOL *)&v47 + 8, (int8x8_t *)&v45, (uint64_t)&v45 + 8);
  v17 = dword_1C6A5FB54[(*(_QWORD *)(v14 + 16 * v35 + 8) & 0xFLL) - 8];
  HIDWORD(v47) = dword_1C6A5FB54[(*(_QWORD *)(v14 + 16 * v37 + 8) & 0xFLL) - 8];
  LODWORD(v48) = v17;
  DWORD1(v48) = dword_1C6A5FB54[(*(_QWORD *)(v14 + 16 * v32 + 8) & 0xFLL) - 8];
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v36, (uint64_t)&v39);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v40 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v33, (uint64_t)&v42 + 8);
  v18 = *((_QWORD *)a2 + 2);
  v19.i64[0] = *(_QWORD *)(v18 + 16 * v31 + 8);
  v19.i64[1] = *(_QWORD *)(v18 + 16 * v30 + 8);
  v20.i64[0] = *(_QWORD *)(v18 + 16 * v29 + 8);
  v20.i64[1] = *(_QWORD *)(v18 + 16 * v9 + 8);
  v21.i64[0] = *(_QWORD *)(v18 + 16 * v10 + 8);
  v21.i64[1] = *(_QWORD *)(v18 + 16 * v11 + 8);
  v22.i64[0] = *(_QWORD *)(v18 + 16 * v12 + 8);
  v22.i64[1] = *(_QWORD *)(v18 + 16 * v13 + 8);
  *((int8x8_t *)&v48 + 1) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v19), (int32x4_t)vceqzq_s64(v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v21), (int32x4_t)vceqzq_s64(v22))))), (int8x8_t)0x101010101010101);
  BYTE4(v44) = sub_1C4C32DEC(*(_DWORD *)a2) == 31;
  if (*a1 >= 4u)
    *((_QWORD *)&v44 + 1) = 0xD100000003;
  v23 = v46;
  a4[6] = v45;
  a4[7] = v23;
  v24 = v48;
  a4[8] = v47;
  a4[9] = v24;
  v25 = v42;
  a4[2] = v41;
  a4[3] = v25;
  v26 = v44;
  a4[4] = v43;
  a4[5] = v26;
  result = *(double *)&v39;
  v28 = v40;
  *a4 = v39;
  a4[1] = v28;
  return result;
}

uint64_t sub_1C4C2627C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v2 = *(_DWORD *)a1;
  v3 = sub_1C4C915C4(*(_DWORD *)a1);
  if ((v3 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  if ((v3 - 66) < 0x18 && ((0x808401u >> (v3 - 66)) & 1) != 0
    || (v4 = sub_1C4C2FD5C((unsigned __int16)v2), v5 = *(_QWORD *)(a1 + 16), *(_BYTE *)(v5 + 16 * v4) != 2)
    && (*(_BYTE *)(v5 + 16 * (v4 + 1) + 9) & 7) != 0
    || (v6 = sub_1C4C640C0(v2), !v7))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 4 * v7;
    do
    {
      v10 = *(_DWORD *)v6;
      v6 += 4;
      v8 |= v10 == 46;
      v9 -= 4;
    }
    while (v9);
  }
  return v8 & 1;
}

uint64_t sub_1C4C26344(int *a1, unsigned __int16 a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  int64x2_t v8;

  v3 = *a1;
  v4 = *(_QWORD *)(*a3 + 48 * *a1 + 16);
  if ((v4 & 0x4000000) != 0)
    return 2;
  if ((v3 - 6495) < 8)
    return 1;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16 * sub_1C4C2FD5C((unsigned __int16)*a1) + 8);
  if ((v4 & 0x1D00) == 0x500)
    return v7 & 0xF;
  v8.i64[0] = v4 & 0x1D00;
  v8.i64[1] = v4 & 0x1E00;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v8, (int64x2_t)xmmword_1C6A5F980), (int32x4_t)vceqq_s64(v8, (int64x2_t)xmmword_1C6A5F990)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v8, (int64x2_t)xmmword_1C6A5F9A0), (int32x4_t)vceqq_s64(v8, (int64x2_t)xmmword_1C6A5F9B0))))) & 1) != 0|| (v4 & 0x1E00) == 0x1600)
  {
    return v7 & 0xF;
  }
  if ((v4 & 0x2001C00) == 0x2000400 || (v4 & 0x2001C00) == 33556480)
    return 2;
  if ((v4 & 0x800000) == 0)
  {
    if (sub_1C4C32DEC(v3) == 54)
      return 1;
    else
      return 2;
  }
  if ((v7 & 0xF) == 0)
    return 0;
  result = 1;
  if (((1 << (word_1C6AA47DC[dword_1C6A9B6CC[(unsigned __int16)v3] + a2] + 117)) & 0x1E80011) == 0)
    return 2;
  return result;
}

uint64_t sub_1C4C264D0(uint64_t result, unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  switch(a3)
  {
    case 5:
      v5 = *((_QWORD *)a2 + 1);
      if (v5)
        v6 = v5 - 8;
      else
        v6 = 0;
      LODWORD(result) = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 16) & 0x1FFF;
      break;
    case 4:
      v7 = *a2;
      if (v7 == 5)
      {
        v9 = *((_QWORD *)a2 + 1);
        if (v9)
          v10 = v9 - 8;
        else
          v10 = 0;
        v8 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 16);
      }
      else
      {
        if (v7 != 2)
        {
          LODWORD(result) = *(unsigned __int16 *)(*(_QWORD *)(result + 104) + 2 * *((unsigned int *)a2 + 2));
          return result;
        }
        v8 = (uint64_t *)(a2 + 8);
      }
      result = *v8;
      if ((unint64_t)*v8 >= 0x20000)
        llvm::report_fatal_error((llvm *)"The shader is out of stack registers space", (const char *)1);
      break;
    case 2:
      v3 = *(_QWORD *)(result + 104);
      LODWORD(result) = *(_WORD *)(v3 + 2 * *((unsigned int *)a2 + 2)) & 0x1FF;
      v4 = atomic_load((unsigned __int8 *)&qword_1ED7EEBC8);
      if ((v4 & 1) == 0)
      {
        v11 = *(_WORD *)(v3 + 2 * *((unsigned int *)a2 + 2)) & 0x1FF;
        if (__cxa_guard_acquire(&qword_1ED7EEBC8))
        {
          dword_1ED7EEBC4 = 128;
          __cxa_guard_release(&qword_1ED7EEBC8);
        }
        LODWORD(result) = v11;
      }
      break;
    default:
      LODWORD(result) = sub_1C4C32970(*((_DWORD *)a2 + 2));
      break;
  }
  return result;
}

void sub_1C4C265DC(__int128 *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v15[136];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((sub_1C4C915C4(*(_DWORD *)a1) & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  v6 = (a2 + 1);
  v7 = (_DWORD *)*((_QWORD *)a1 + 2);
  *(_DWORD *)(a3 + 32) = (v7[4 * v6 + 2] >> 12) & 3;
  v12 = *a1;
  v13 = v15;
  v14 = 0x800000000;
  if (&v12 != a1)
  {
    v8 = *((_DWORD *)a1 + 6);
    if (v8)
    {
      if (v8 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, *((unsigned int *)a1 + 6), 16);
        v10 = *((unsigned int *)a1 + 6);
        v9 = v13;
        if (!(_DWORD)v10)
          goto LABEL_7;
        v7 = (_DWORD *)*((_QWORD *)a1 + 2);
      }
      else
      {
        v9 = v15;
        v10 = *((unsigned int *)a1 + 6);
      }
      memcpy(v9, v7, 16 * v10);
      v9 = v13;
LABEL_7:
      LODWORD(v14) = v8;
      goto LABEL_9;
    }
  }
  v9 = v15;
LABEL_9:
  v15[128] = *((_BYTE *)a1 + 160);
  if (v9[16 * a2] == 5)
  {
    if (**(_BYTE **)&v9[16 * a2 + 8] == 4)
      v11 = 2;
    else
      v11 = 1;
    v6 = (v11 + a2);
  }
  *(_BYTE *)(a3 + 28) = v9[16 * v6 + 8] & 1;
  if (v9 != v15)
    free(v9);
}

uint64_t sub_1C4C26750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  char *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)v1 != 5)
  {
    v5 = *(_DWORD *)a1;
    v6 = sub_1C4C915C4(*(_DWORD *)a1);
    if ((v6 & 0xFF00000000) != 0)
    {
      if ((v6 - 188) < 2)
        return 1;
      if ((_DWORD)v6 == 19 || (_DWORD)v6 == 147)
      {
        v7 = sub_1C4C32DEC(v5);
        result = 2;
        v8 = v7 - 2;
        if ((v7 - 2) <= 0x3F)
        {
          if (((1 << v8) & 0x8000000000002001) != 0)
            return 1;
          if (((1 << v8) & 0x4000000000001000) != 0)
            return result;
        }
        if (!v7)
          return result;
        v9 = "Invalid dst_variant";
      }
      else
      {
        v9 = "Invalid instruction";
      }
    }
    else
    {
      v9 = "Unknown Opcode";
    }
    llvm::report_fatal_error((llvm *)v9, (const char *)1);
  }
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  if (*(_DWORD *)(v3 + 24) == 9)
    return 1;
  else
    return 2;
}

uint64_t sub_1C4C26850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  _WORD *v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  if (*(_BYTE *)a2 != 5)
  {
    LODWORD(v2) = *(_DWORD *)(a2 + 8);
LABEL_7:
    v6 = *(_QWORD **)(a1 + 24);
    v7 = v6[6];
    v8 = *(unsigned int *)(*v6 + 24 * v2 + 4);
    if (!*(_WORD *)(v7 + 2 * v8))
      goto LABEL_13;
    v9 = *(_WORD *)(v7 + 2 * v8) + v2;
    v10 = (_WORD *)(v6[10] + 2 * *(unsigned int *)(*v6 + 24 * v2 + 12));
    v11 = (unsigned __int16 *)(v7 + 2 * v8 + 2);
    while (*v10 != 1)
    {
      v12 = *v11++;
      v9 += v12;
      ++v10;
      if (!v12)
        goto LABEL_13;
    }
    v13 = v9;
    if (!v9)
LABEL_13:
      v13 = v2;
    v14 = v6[3];
    v15 = (unint64_t)v13 >> 3;
    if (v15 < *(unsigned __int16 *)(v14 + 406)
      && ((*(unsigned __int8 *)(*(_QWORD *)(v14 + 392) + v15) >> (v13 & 7)) & 1) != 0)
    {
      v5 = 1;
      switch((int)v2)
      {
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 13:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 34:
        case 35:
        case 36:
        case 39:
        case 41:
        case 43:
        case 44:
        case 45:
        case 49:
        case 50:
        case 51:
        case 53:
        case 55:
        case 57:
        case 58:
        case 63:
        case 64:
        case 69:
          return v5;
        case 16:
        case 28:
        case 30:
        case 32:
        case 46:
        case 47:
        case 48:
        case 52:
        case 54:
        case 56:
        case 59:
        case 60:
        case 61:
        case 65:
        case 66:
        case 67:
        case 68:
          return 2;
        case 38:
          if (*(_DWORD *)a1 == 5)
            return 2;
          else
            return 1;
        default:
          llvm::report_fatal_error((llvm *)"Special register not implemented yet for G15", (const char *)1);
      }
    }
    v16 = off_1EF8EEB20();
    if (*(_BYTE *)(v16 + v17))
    {
      v21 = v20 + 32 * (*(unsigned __int8 *)(v16 + v17) - 1);
    }
    else
    {
      v22 = *(unsigned int *)(v19 + 32);
      if ((_DWORD)v22)
      {
        v23 = v17 >> 3;
        v24 = 1 << (v18 & 7);
        v25 = 32 * v22;
        v21 = v20;
        while (v23 >= *(unsigned __int16 *)(v21 + 22)
             || (v24 & *(_BYTE *)(*(_QWORD *)(v21 + 8) + v23)) == 0)
        {
          v21 += 32;
          v25 -= 32;
          if (!v25)
            goto LABEL_27;
        }
      }
      else
      {
LABEL_27:
        v21 = 0;
      }
      *(_BYTE *)(v16 + v17) = ((v21 - v20) >> 5) + 1;
    }
    return dword_1C6A5FB90[*(__int16 *)(v21 + 26) - 2];
  }
  v2 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)v2 != 4)
    goto LABEL_7;
  v3 = *(_DWORD *)(v2 + 32);
  if (!*(_DWORD *)(v2 + 16))
  {
    switch(v3)
    {
      case 2:
        return 1;
      case 8:
        return 3;
      case 4:
        return 2;
    }
  }
  v4 = v3 - 2;
  if (v4 >= 7)
    return 2;
  else
    return dword_1C6A5FB74[v4];
}

uint64_t sub_1C4C26A58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(a4 + 8);
  if (v4 == 4)
  {
    v6 = *(_DWORD *)(result + 16 * (a3 + 2) + 8);
    *(_BYTE *)(a4 + 16) = 0;
LABEL_6:
    *(_BYTE *)(a4 + 24) = (v6 & 0x10) != 0;
    v5 = (v6 >> 20) & 0xF;
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    v6 = *(_DWORD *)(result + 16 * (a3 + 1) + 8);
    *(_BYTE *)(a4 + 16) = (v6 & 0x20) != 0;
    goto LABEL_6;
  }
  v5 = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_7:
  *(_DWORD *)(a4 + 20) = v5;
  return result;
}

uint64_t sub_1C4C26AB8(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  _WORD *v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v2 = *a2;
  if (v2 == 5)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (v4)
      v5 = v4 - 8;
    else
      v5 = 0;
    return dword_1C6A5FBAC[*(int *)(v5 + 24)];
  }
  else if (v2 == 2)
  {
    return 1;
  }
  else
  {
    v6 = *((_DWORD *)a2 + 2);
    v7 = a1[6];
    v8 = *(unsigned int *)(*a1 + 24 * v6 + 4);
    if (*(_WORD *)(v7 + 2 * v8))
    {
      v9 = *(_WORD *)(v7 + 2 * v8) + v6;
      v10 = (_WORD *)(a1[10] + 2 * *(unsigned int *)(*a1 + 24 * v6 + 12));
      v11 = (unsigned __int16 *)(v7 + 2 * v8 + 2);
      while (*v10 != 1)
      {
        v12 = *v11++;
        v9 += v12;
        ++v10;
        if (!v12)
          goto LABEL_16;
      }
      if (v9)
        v6 = v9;
    }
LABEL_16:
    v13 = a1[3];
    v14 = (unint64_t)v6 >> 3;
    result = 7;
    if (v14 < *(unsigned __int16 *)(v13 + 22))
    {
      if (((*(unsigned __int8 *)(*(_QWORD *)(v13 + 8) + v14) >> (v6 & 7)) & 1) != 0)
        return 2;
      else
        return 7;
    }
  }
  return result;
}

uint64_t sub_1C4C26BA0(int *a1)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  char v7;

  v2 = sub_1C4C26C54((uint64_t)a1);
  v3 = 0;
  v4 = *a1;
  do
  {
    v5 = sub_1C4C32DEC(v4);
    if (v5)
      v6 = v5 == 38;
    else
      v6 = 1;
    v7 = v6;
    v2 |= v7;
    v3 += 4;
  }
  while (v3 != 8);
  return v2 & 1;
}

BOOL sub_1C4C26C54(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)a1;
  v3 = sub_1C4C32DEC(*(_DWORD *)a1);
  if (v3 == 3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * sub_1C4C2FD5C((unsigned __int16)v2) + 8);
    if (v4)
      v5 = v4 - 8;
    else
      v5 = 0;
    return *(_DWORD *)(v5 + 40) == 4;
  }
  else
  {
    return !v3 || v3 == 38;
  }
}

uint64_t sub_1C4C26CCC(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;

  v2 = *(_DWORD *)a1;
  v3 = sub_1C4C32DEC(*(_DWORD *)a1);
  if (v3 != 1
    && (v3 == 9
     || (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 16 * (sub_1C4C2FD5C((unsigned __int16)v2) + 1) + 8) & 7) != 0))
  {
    return 1;
  }
  v5 = sub_1C4C32DEC(v2);
  result = v5 == 9;
  if ((v5 | 8) != 9)
    return (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 16 * (sub_1C4C2FD5C((unsigned __int16)v2) + 1) + 8) & 7) != 0;
  return result;
}

uint64_t sub_1C4C26D84(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, int a5)
{
  unsigned __int8 *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;

  v9 = (unsigned __int8 *)(*((_QWORD *)a2 + 2) + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  if (*v9 != 1)
    return sub_1C4C26EC0(a1, (uint64_t)a2, v9, a3, a4, a5);
  v10 = *(_QWORD **)(a1 + 24);
  v11 = sub_1C4C26AB8(v10, v9);
  *(_DWORD *)(a4 + 8) = v11;
  if (((__int16)word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] - 139) > 0x25)
    goto LABEL_8;
  v12 = v11;
  if (((1 << (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] + 117)) & 0x1600015) == 0)
  {
    if (((1 << (word_1C6AA47DC[dword_1C6A9B6CC[*a2] + (unsigned __int16)a3] + 117)) & 0x3400000000) != 0)
    {
      v13 = 2;
      goto LABEL_9;
    }
LABEL_8:
    v13 = sub_1C4C26850(a1, (uint64_t)v9);
    v10 = *(_QWORD **)(a1 + 24);
    v12 = *(_DWORD *)(a4 + 8);
    goto LABEL_9;
  }
  v13 = 1;
LABEL_9:
  *(_DWORD *)(a4 + 12) = v13;
  result = sub_1C4C264D0((uint64_t)v10, v9, v12);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 20) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * (a3 + 1) + 8) >> 20) & 0xF;
  return result;
}

uint64_t sub_1C4C26EC0(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v10 = result;
  v11 = *a3;
  if (v11 != 5)
  {
    if (v11 == 2)
    {
      *(_DWORD *)(a5 + 8) = 4;
      *(_DWORD *)(a5 + 12) = sub_1C4C26750(a2);
      v17 = *(_DWORD *)(a5 + 8);
LABEL_19:
      result = sub_1C4C264D0(*(_QWORD *)(v10 + 24), a3, v17);
      *(_QWORD *)a5 = result;
      v18 = a4 + 2;
LABEL_47:
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v18 + 8);
      goto LABEL_52;
    }
    goto LABEL_20;
  }
  v12 = *((_QWORD *)a3 + 1);
  if (*(_BYTE *)v12 != 4)
  {
LABEL_20:
    v19 = 0;
    goto LABEL_22;
  }
  if (*a3 == 2 || (*(_DWORD *)(v12 + 16) - 9) < 2)
  {
    *(_DWORD *)(a5 + 8) = 4;
    v14 = *(_DWORD *)(v12 + 32);
    v15 = 1;
    if (v14 != 2)
    {
      if (a6)
        v15 = 1;
      else
        v15 = 2;
      if (a6)
        v16 = 2;
      else
        v16 = 3;
      if (v14 != 4)
        v15 = v16;
    }
    *(_DWORD *)(a5 + 12) = v15;
    v17 = 4;
    goto LABEL_19;
  }
  v19 = v12 - 8;
LABEL_22:
  if (!*(_DWORD *)(v19 + 24))
  {
    v30 = *(_DWORD *)(v19 + 40);
    if (a6)
      v31 = 1;
    else
      v31 = 2;
    if (a6)
      v32 = 2;
    else
      v32 = 3;
    if (v30 != 4)
      v31 = v32;
    if (v30 == 2)
      v33 = 1;
    else
      v33 = v31;
    *(_DWORD *)(a5 + 8) = 3;
    *(_DWORD *)(a5 + 12) = v33;
    *(_WORD *)a5 = *(_WORD *)(*(_QWORD *)(v19 + 32) + 16) & 0x1FF;
    v18 = a4 + 1;
    goto LABEL_47;
  }
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(v20 + 16 * a4 + 8);
  if (v21)
    v22 = v21 - 8;
  else
    v22 = 0;
  v23 = *(_WORD *)(*(_QWORD *)(v22 + 32) + 16) & 0x1FFF;
  v24 = 1;
  if (a4)
    v25 = 1;
  else
    v25 = 2;
  v26 = *(_QWORD *)(v20 + 16 * (v25 + a4) + 8);
  *(_DWORD *)(a5 + 8) = 5;
  *(_WORD *)a5 = v23;
  v27 = *((_QWORD *)a3 + 1);
  if (v27)
    v28 = v27 - 8;
  else
    v28 = 0;
  v29 = *(_DWORD *)(v28 + 40);
  if (v29 != 2)
  {
    if (v29 != 4)
      v24 = 2;
    if (!a6)
      ++v24;
  }
  *(_DWORD *)(a5 + 12) = v24;
  *(_DWORD *)(a5 + 24) = *(_DWORD *)(v28 + 24) - 4;
LABEL_52:
  *(_DWORD *)(a5 + 20) = (v26 >> 20) & 0xF;
  return result;
}

uint64_t sub_1C4C270A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(a4 + 4);
  if (v4 == 4)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(result + 16) + 16 * (a3 + 2) + 8);
    *(_BYTE *)(a4 + 12) = 0;
LABEL_6:
    *(_BYTE *)(a4 + 20) = (v6 & 0x10) != 0;
    v5 = (v6 >> 20) & 0xF;
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(result + 16) + 16 * (a3 + 1) + 8);
    *(_BYTE *)(a4 + 12) = (v6 & 0x20) != 0;
    goto LABEL_6;
  }
  v5 = 0;
  *(_BYTE *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 20) = 0;
LABEL_7:
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

uint64_t sub_1C4C27110(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(a4 + 8);
  if (v4 == 4)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(result + 16) + 16 * (a3 + 2) + 8);
    *(_BYTE *)(a4 + 16) = 0;
LABEL_6:
    *(_BYTE *)(a4 + 24) = (v6 & 0x10) != 0;
    v5 = (v6 >> 20) & 0xF;
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(result + 16) + 16 * (a3 + 1) + 8);
    *(_BYTE *)(a4 + 16) = (v6 & 0x20) != 0;
    goto LABEL_6;
  }
  v5 = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_7:
  *(_DWORD *)(a4 + 20) = v5;
  return result;
}

uint64_t sub_1C4C27178(uint64_t result, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned int *a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v6 = 64;
  if (!a4)
    v6 = 0;
  v7 = ((unint64_t)a5[1] << 25) | ((unint64_t)*a5 << 24) | ((unint64_t)a5[2] << 26) | ((unint64_t)a5[3] << 27) | ((unint64_t)a5[4] << 28) | ((unint64_t)a5[5] << 29) | ((unint64_t)a5[6] << 30) | ((unint64_t)a5[7] << 31) | v6;
  if (result < 4)
  {
    v8 = ((unint64_t)a6[1] << 36) | ((unint64_t)*a6 << 32);
    v9 = a6 + 2;
    v10 = 0x10000000000;
  }
  else
  {
    v8 = ((unint64_t)a6[4] << 36) | ((unint64_t)a6[3] << 32) | ((unint64_t)a6[5] << 40);
    v9 = a6 + 6;
    v10 = 0x400000000000;
  }
  v11 = v8 | (v10 * *v9) | v7;
  v12 = (_QWORD *)(a2 + 16 * a3);
  if (*(_BYTE *)v12 == 2)
  {
    v12 = (_QWORD *)(a2 + 16 * a3);
    v11 |= v12[1];
  }
  else
  {
    *v12 = 2;
  }
  v12[1] = v11;
  return result;
}

uint64_t sub_1C4C27248(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t result;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), a5);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a4 + 16))
      v9 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x20;
    else
      v9 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v10 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a4 + 12) == 4)
      v9 |= 0x800uLL;
    v11 = a3 + 1;
    if (v10 == 4 || !a3 && v10 == 5)
    {
      *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * v11) = xmmword_1C64169D0;
      v11 = a3 + 2;
    }
    v12 = *(_QWORD *)(a2 + 16);
    v13 = (_QWORD *)(v12 + 16 * v11);
    if (*(_BYTE *)v13 == 2)
    {
      *(_QWORD *)(v12 + 16 * v11 + 8) |= v9;
    }
    else
    {
      *v13 = 2;
      v13[1] = v9;
    }
    return 3;
  }
  return result;
}

uint64_t sub_1C4C2733C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a4 + 136);
    v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v9);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 88), (unsigned int *)(a4 + 104));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C2776C((uint64_t)a1, a3, v11, a4 + 56, (_DWORD *)(a4 + 100));
  }
  return result;
}

uint64_t sub_1C4C27480(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a4 + 140);
    v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v9);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 92), (unsigned int *)(a4 + 108));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C2776C((uint64_t)a1, a3, v11, a4 + 56, (_DWORD *)(a4 + 104));
  }
  return result;
}

uint64_t sub_1C4C275C4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a4 + 132);
    v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v9);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 92), (unsigned int *)(a4 + 100));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C27704((uint64_t)a1, a3, v11, a4 + 56);
  }
  return result;
}

uint64_t sub_1C4C27704(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = sub_1C4C27D28(a1, a2, a3, a4);
  if ((_DWORD)result == 3 && *(_DWORD *)(a4 + 8) != 1)
  {
    v8 = *(_QWORD *)(a2 + 16) + 16 * (a3 + 1);
    v9 = *(_QWORD *)(v8 + 8);
    if (*(_BYTE *)(a4 + 25))
      v9 |= 8uLL;
    *(_QWORD *)(v8 + 8) = v9;
  }
  return result;
}

uint64_t sub_1C4C2776C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;

  result = sub_1C4C27704(a1, a2, a3, a4);
  if ((_DWORD)result == 3)
  {
    v9 = *a5 - 1;
    result = v9 >= 4 ? 3 : 0;
    v10 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(v10 + 16 * a3) != 2)
    {
      if (v9 >= 4)
        v11 = 0;
      else
        v11 = ((unint64_t)(*a5 - 1) << 8) + 256;
      *(_QWORD *)(v10 + 16 * (a3 + 1) + 8) |= v11;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C277F4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a4 + 160);
    v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v9);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 116), (unsigned int *)(a4 + 128));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v11, a4 + 56);
      if ((_DWORD)result == 3)
        return sub_1C4C27704((uint64_t)a1, a3, v12, a4 + 84);
    }
  }
  return result;
}

uint64_t sub_1C4C27960(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a4 + 164);
    v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v9);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 132));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v11, a4 + 56);
      if ((_DWORD)result == 3)
        return sub_1C4C27704((uint64_t)a1, a3, v12, a4 + 84);
    }
  }
  return result;
}

uint64_t sub_1C4C27ACC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a4 + 160);
    v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v9);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 128));
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v11, a4 + 56);
      if ((_DWORD)result == 3)
        return sub_1C4C27704((uint64_t)a1, a3, v12, a4 + 84);
    }
  }
  return result;
}

uint64_t sub_1C4C27C38(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), 0, a5);
  if ((_DWORD)result == 3)
  {
    v9 = *(_DWORD *)(a4 + 8);
    if (v9 != 1)
    {
      if (*(_BYTE *)(a4 + 16))
        v10 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x20;
      else
        v10 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
      if (*(_BYTE *)(a4 + 24))
        v10 |= 0x10uLL;
      v11 = a3 + 1;
      if (v9 == 4)
      {
        *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * v11) = xmmword_1C64169D0;
        v11 = a3 + 2;
      }
      v12 = *(_QWORD *)(a2 + 16);
      v13 = (_QWORD *)(v12 + 16 * v11);
      if (*(_BYTE *)v13 == 2)
      {
        *(_QWORD *)(v12 + 16 * v11 + 8) |= v10;
      }
      else
      {
        *v13 = 2;
        v13[1] = v10;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C27D28(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), 0, 1);
  if ((_DWORD)result == 3)
  {
    v8 = *(_DWORD *)(a4 + 8);
    if (v8 != 1)
    {
      if (*(_BYTE *)(a4 + 16))
        v9 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x20;
      else
        v9 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
      if (*(_BYTE *)(a4 + 24))
        v9 |= 0x10uLL;
      v10 = a3 + 1;
      if (v8 == 4)
      {
        *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * v10) = xmmword_1C64169D0;
        v10 = a3 + 2;
      }
      v11 = *(_QWORD *)(a2 + 16);
      v12 = (_QWORD *)(v11 + 16 * v10);
      if (*(_BYTE *)v12 == 2)
      {
        *(_QWORD *)(v11 + 16 * v10 + 8) |= v9;
      }
      else
      {
        *v12 = 2;
        v12[1] = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C27E14(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    sub_1C4C281C8(a1, a3, v10, *(_DWORD *)(a5 + 144), *(unsigned __int8 *)(a5 + 16), *(unsigned __int8 *)(a5 + 180), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 148));
    v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v18 = 2;
    v18[1] = v19;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v20 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v21 = *v20;
        v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v22 = 2;
        v22[1] = v21;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v20);
        if ((_DWORD)result != 3)
          return result;
      }
      v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      v24 = *(__int16 *)(a5 + 140);
      *v23 = 2;
      v23[1] = v24;
      v25 = *(int *)(a5 + 136);
      if (v25 > 4)
        v26 = 0;
      else
        v26 = qword_1C6A5FD00[v25];
      v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v27 = 2;
      v27[1] = v26;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2800C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;

  v7 = a5;
  v12 = *(_DWORD *)a2;
  if ((a5 & 0xFF00000000) == 0)
  {
    v13 = sub_1C4C32DEC(*(_DWORD *)a2);
    v7 = 1;
    switch(v13)
    {
      case '7':
        goto LABEL_10;
      case '8':
        v7 = 2;
        goto LABEL_10;
      case '9':
        v7 = 3;
        goto LABEL_10;
      case ':':
        v7 = 4;
        goto LABEL_10;
      default:
        v14 = v13;
        if (v13 == 77)
        {
          v7 = 6;
        }
        else
        {
          result = 0;
          if (v14 != 78)
            return result;
          v7 = 8;
        }
LABEL_10:
        v16 = sub_1C4C915C4(v12);
        if ((v16 & 0xFF00000000) != 0 && (v16 & 0xFFFFFFFC) == 0xA4 && sub_1C4C32DEC(v12) == 75)
          ++v7;
        break;
    }
  }
  if ((a6 & 0xFF00000000) == 0)
  {
    v21 = sub_1C4C32DEC(v12);
    if (v21 == 54)
    {
      LODWORD(a6) = 1;
    }
    else
    {
      v22 = v21;
      result = 0;
      if (v22 != 59)
        return result;
      LODWORD(a6) = 2;
    }
  }
  result = sub_1C4C2F6C4(a1, v12, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), a6, 0, v7);
  if ((_DWORD)result == 3)
  {
    v17 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v18 = a3 + 1;
    v19 = *(_QWORD *)(a2 + 16);
    v20 = (_QWORD *)(v19 + 16 * v18);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v18);
      v17 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v17;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C281C8(_DWORD *a1, uint64_t a2, unsigned int a3, char a4, int a5, int a6, unsigned __int8 *a7, unsigned int *a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;

  if (*a1 > 3u)
  {
    v13 = 32;
    if (!a5)
      v13 = 0;
    v12 = a3;
    v14 = *(_QWORD *)(a2 + 16);
    v15 = (_QWORD *)(v14 + 16 * a3);
    if (*(_BYTE *)v15 == 2)
    {
      v15 = (_QWORD *)(v14 + 16 * a3);
      v13 |= v15[1];
    }
    else
    {
      *v15 = 2;
    }
    v15[1] = v13;
    result = sub_1C4C27178(*a1, *(_QWORD *)(a2 + 16), a3, a6, a7, a8);
  }
  else
  {
    result = sub_1C4C27178(*a1, *(_QWORD *)(a2 + 16), a3, a6, a7, a8);
    v12 = a3;
  }
  v16 = (unint64_t)(a4 & 7) << 42;
  v17 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v12);
  if (*(_BYTE *)v17 == 2)
    v16 |= v17[1];
  else
    *v17 = 2;
  v17[1] = v16;
  return result;
}

uint64_t sub_1C4C282B0(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unsigned int v29;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v29 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    sub_1C4C281C8(a1, a3, v10, *(_DWORD *)(a5 + 144), *(unsigned __int8 *)(a5 + 16), *(unsigned __int8 *)(a5 + 180), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 148));
    v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v18 = 2;
    v18[1] = v19;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v20 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v21 = *v20;
        v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v22 = 2;
        v22[1] = v21;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v20);
        if ((_DWORD)result != 3)
          return result;
      }
      v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v29);
      v24 = *(__int16 *)(a5 + 140);
      *v23 = 2;
      v23[1] = v24;
      v25 = *(int *)(a5 + 136);
      if (v25 > 4)
        v26 = 0;
      else
        v26 = qword_1C6A5FD00[v25];
      v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      *v27 = 2;
      v27[1] = v26;
      result = sub_1C4C27C38((uint64_t)a1, a3, v15, a5 + 88, 1);
      if ((_DWORD)result == 3)
      {
        if (*(_BYTE *)(a5 + 84))
          v28 = 1;
        else
          v28 = *(_DWORD *)(a5 + 96) == 1;
        if (v28)
          return 3;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C284F8(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    sub_1C4C281C8(a1, a3, v10, *(_DWORD *)(a5 + 144), *(unsigned __int8 *)(a5 + 16), *(unsigned __int8 *)(a5 + 180), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 148));
    v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v18 = 2;
    v18[1] = v19;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v20 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v21 = *v20;
        v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v22 = 2;
        v22[1] = v21;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v20);
        if ((_DWORD)result != 3)
          return result;
      }
      v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      v24 = *(__int16 *)(a5 + 140);
      *v23 = 2;
      v23[1] = v24;
      v25 = *(int *)(a5 + 136);
      if (v25 > 4)
        v26 = 0;
      else
        v26 = qword_1C6A5FD00[v25];
      v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v27 = 2;
      v27[1] = v26;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C286E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v8 = *(_DWORD *)a2;
  v9 = sub_1C4C32DEC(*(_DWORD *)a2);
  v10 = 1;
  switch(v9)
  {
    case '7':
      goto LABEL_9;
    case '8':
      v10 = 2;
      goto LABEL_9;
    case '9':
      v10 = 3;
      goto LABEL_9;
    case ':':
      v10 = 4;
      goto LABEL_9;
    default:
      v11 = v9;
      if (v9 == 77)
      {
        v10 = 6;
      }
      else
      {
        result = 0;
        if (v11 != 78)
          return result;
        v10 = 8;
      }
LABEL_9:
      v13 = sub_1C4C915C4(v8);
      if ((v13 & 0xFF00000000) != 0 && (v13 & 0xFFFFFFFC) == 0xA4 && sub_1C4C32DEC(v8) == 75)
        ++v10;
      v14 = sub_1C4C32DEC(v8);
      if (v14 == 54)
      {
        v16 = 1;
      }
      else
      {
        v15 = v14;
        result = 0;
        if (v15 != 59)
          return result;
        v16 = 2;
      }
      result = sub_1C4C2F6C4(a1, v8, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), v16, 0, v10);
      if ((_DWORD)result == 3)
      {
        v17 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
        v18 = a3 + 1;
        v19 = *(_QWORD *)(a2 + 16);
        v20 = (_QWORD *)(v19 + 16 * v18);
        if (*(_BYTE *)v20 == 2)
        {
          v20 = (_QWORD *)(v19 + 16 * v18);
          v17 |= v20[1];
        }
        else
        {
          *v20 = 2;
        }
        v20[1] = v17;
        if (*(_BYTE *)(a4 + 24))
        {
          v21 = *(_QWORD *)(a2 + 16) + 16 * v18;
          if (*(_BYTE *)v21 == 2)
            *(_QWORD *)(v21 + 8) |= 0x10uLL;
          else
            *(_OWORD *)v21 = xmmword_1C6A5FBE0;
        }
        return 3;
      }
      return result;
  }
}

uint64_t sub_1C4C288B4(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unsigned int v29;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v29 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    sub_1C4C281C8(a1, a3, v10, *(_DWORD *)(a5 + 144), *(unsigned __int8 *)(a5 + 16), *(unsigned __int8 *)(a5 + 180), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 148));
    v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v18 = 2;
    v18[1] = v19;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v20 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v21 = *v20;
        v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v22 = 2;
        v22[1] = v21;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v20);
        if ((_DWORD)result != 3)
          return result;
      }
      v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v29);
      v24 = *(__int16 *)(a5 + 140);
      *v23 = 2;
      v23[1] = v24;
      v25 = *(int *)(a5 + 136);
      if (v25 > 4)
        v26 = 0;
      else
        v26 = qword_1C6A5FD00[v25];
      v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      *v27 = 2;
      v27[1] = v26;
      result = sub_1C4C27C38((uint64_t)a1, a3, v15, a5 + 88, 1);
      if ((_DWORD)result == 3)
      {
        if (*(_BYTE *)(a5 + 84))
          v28 = 1;
        else
          v28 = *(_DWORD *)(a5 + 96) == 1;
        if (v28)
          return 3;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C28AF4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 177);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result == 3)
      {
        v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        v25 = *(__int16 *)(a5 + 140);
        *v24 = 2;
        v24[1] = v25;
        v26 = *(int *)(a5 + 136);
        if (v26 > 4)
          v27 = 0;
        else
          v27 = qword_1C6A5FD00[v26];
        v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v28 = 2;
        v28[1] = v27;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C28D00(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unsigned int v30;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v30 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 177);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result == 3)
      {
        v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v30);
        v25 = *(__int16 *)(a5 + 140);
        *v24 = 2;
        v24[1] = v25;
        v26 = *(int *)(a5 + 136);
        v27 = v26 > 4 ? 0 : qword_1C6A5FD00[v26];
        v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        *v28 = 2;
        v28[1] = v27;
        result = sub_1C4C27C38((uint64_t)a1, a3, v15, a5 + 88, 1);
        if ((_DWORD)result == 3)
        {
          if (*(_BYTE *)(a5 + 84))
            v29 = 1;
          else
            v29 = *(_DWORD *)(a5 + 96) == 1;
          if (v29)
            return 3;
          else
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C28F5C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 176);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result == 3)
      {
        v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        v25 = *(__int16 *)(a5 + 140);
        *v24 = 2;
        v24[1] = v25;
        v26 = *(int *)(a5 + 136);
        if (v26 > 4)
          v27 = 0;
        else
          v27 = qword_1C6A5FD00[v26];
        v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v28 = 2;
        v28[1] = v27;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C29160(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unsigned int v30;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v30 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 176);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result == 3)
      {
        v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v30);
        v25 = *(__int16 *)(a5 + 140);
        *v24 = 2;
        v24[1] = v25;
        v26 = *(int *)(a5 + 136);
        v27 = v26 > 4 ? 0 : qword_1C6A5FD00[v26];
        v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        *v28 = 2;
        v28[1] = v27;
        result = sub_1C4C27C38((uint64_t)a1, a3, v15, a5 + 88, 1);
        if ((_DWORD)result == 3)
        {
          if (*(_BYTE *)(a5 + 84))
            v29 = 1;
          else
            v29 = *(_DWORD *)(a5 + 96) == 1;
          if (v29)
            return 3;
          else
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C293B4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 145);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 112));
    sub_1C4C295B8(a3, v11, *(_BYTE *)(a5 + 101), *(_DWORD *)(a5 + 12), *(_BYTE *)(a5 + 53), (unsigned int *)(a5 + 76), (unsigned __int8 *)(a5 + 100));
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
    v22 = *(unsigned __int16 *)(a5 + 56);
    *v21 = 2;
    v21[1] = v22;
    if (*(_DWORD *)(a5 + 36) == 1)
    {
      v23 = *(__int16 *)(a5 + 28);
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
      *v24 = 2;
      v24[1] = v23;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result != 3)
        return result;
    }
    v25 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
    v26 = *(__int16 *)(a5 + 108);
    *v25 = 2;
    v25[1] = v26;
    v27 = *(int *)(a5 + 104);
    if (v27 > 4)
      v28 = 0;
    else
      v28 = qword_1C6A5FD00[v27];
    v29 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
    *v29 = 2;
    v29[1] = v28;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C295B8(uint64_t result, unsigned int a2, unsigned __int8 a3, unsigned int a4, char a5, unsigned int *a6, unsigned __int8 *a7)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a4 >= 3)
    llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
  v7 = (_QWORD *)(*(_QWORD *)(result + 16) + 16 * a2);
  *v7 = 2;
  v7[1] = a4 | (16 * a3) | ((unint64_t)(a5 == 0) << 11);
  v8 = ((unint64_t)*a7 << 16) | ((unint64_t)*a6 << 12);
  v9 = *(_QWORD *)(result + 16);
  v10 = (_QWORD *)(v9 + 16 * a2);
  if (*(_BYTE *)v10 == 2)
  {
    v10 = (_QWORD *)(v9 + 16 * a2);
    v8 |= v10[1];
  }
  else
  {
    *v10 = 2;
  }
  v10[1] = v8;
  return result;
}

uint64_t sub_1C4C2964C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 144);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 112));
    sub_1C4C295B8(a3, v11, *(_BYTE *)(a5 + 101), *(_DWORD *)(a5 + 12), *(_BYTE *)(a5 + 53), (unsigned int *)(a5 + 76), (unsigned __int8 *)(a5 + 100));
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
    v22 = *(unsigned __int16 *)(a5 + 56);
    *v21 = 2;
    v21[1] = v22;
    if (*(_DWORD *)(a5 + 36) == 1)
    {
      v23 = *(__int16 *)(a5 + 28);
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
      *v24 = 2;
      v24[1] = v23;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
      if ((_DWORD)result != 3)
        return result;
    }
    v25 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
    v26 = *(__int16 *)(a5 + 108);
    *v25 = 2;
    v25[1] = v26;
    v27 = *(int *)(a5 + 104);
    if (v27 > 4)
      v28 = 0;
    else
      v28 = qword_1C6A5FD00[v27];
    v29 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
    *v29 = 2;
    v29[1] = v28;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C29848(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int16 *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 177);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    sub_1C4C29A4C(a3, v11, *(_BYTE *)(a5 + 132), *(_DWORD *)(a5 + 12), *(_BYTE *)(a5 + 53), (unsigned __int8 *)(a5 + 176));
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v21 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v22 = *v21;
        v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v23 = 2;
        v23[1] = v22;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v21);
        if ((_DWORD)result != 3)
          return result;
      }
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      v25 = *(__int16 *)(a5 + 140);
      *v24 = 2;
      v24[1] = v25;
      v26 = *(int *)(a5 + 136);
      if (v26 > 4)
        v27 = 0;
      else
        v27 = qword_1C6A5FD00[v26];
      v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v28 = 2;
      v28[1] = v27;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C29A4C(uint64_t result, unsigned int a2, unsigned __int8 a3, unsigned int a4, char a5, unsigned __int8 *a6)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (a4 >= 3)
    llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
  v6 = (_QWORD *)(*(_QWORD *)(result + 16) + 16 * a2);
  *v6 = 2;
  v6[1] = a4 | (16 * a3) | ((unint64_t)(a5 == 0) << 11);
  v7 = (unint64_t)*a6 << 17;
  v8 = *(_QWORD *)(result + 16);
  v9 = (_QWORD *)(v8 + 16 * a2);
  if (*(_BYTE *)v9 == 2)
  {
    v9 = (_QWORD *)(v8 + 16 * a2);
    v7 |= v9[1];
  }
  else
  {
    *v9 = 2;
  }
  v9[1] = v7;
  return result;
}

uint64_t sub_1C4C29AD8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = *(unsigned __int8 *)(a5 + 177);
  v16 = 32 * *(unsigned __int8 *)(a5 + 16);
  v17 = *(_QWORD *)(a3 + 16);
  v18 = (_QWORD *)(v17 + 16 * v9);
  if (*(_BYTE *)v18 == 2)
  {
    v18 = (_QWORD *)(v17 + 16 * v9);
    v16 |= v18[1];
  }
  else
  {
    *v18 = 2;
  }
  v18[1] = v16;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v15 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
  sub_1C4C29A4C(a3, v10, *(_BYTE *)(a5 + 132), *(_DWORD *)(a5 + 12), *(_BYTE *)(a5 + 53), (unsigned __int8 *)(a5 + 176));
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 56, 1);
  if ((_DWORD)result == 3)
  {
    v20 = (__int16 *)(a5 + 28);
    if (*(_DWORD *)(a5 + 36) == 1)
    {
      v21 = *v20;
      v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
      *v22 = 2;
      v22[1] = v21;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, (uint64_t)v20);
      if ((_DWORD)result != 3)
        return result;
    }
    v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
    v24 = *(__int16 *)(a5 + 140);
    *v23 = 2;
    v23[1] = v24;
    v25 = *(int *)(a5 + 136);
    if (v25 > 4)
      v26 = 0;
    else
      v26 = qword_1C6A5FD00[v25];
    v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
    *v27 = 2;
    v27[1] = v26;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C29CA8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  __int16 *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 176);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 144));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 132)) | ((unint64_t)(*(_BYTE *)(a5 + 53) == 0) << 11);
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
    if ((_DWORD)result == 3)
    {
      v24 = (__int16 *)(a5 + 28);
      if (*(_DWORD *)(a5 + 36) == 1)
      {
        v25 = *v24;
        v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v26 = 2;
        v26[1] = v25;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v24);
        if ((_DWORD)result != 3)
          return result;
      }
      v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      v28 = *(__int16 *)(a5 + 140);
      *v27 = 2;
      v27[1] = v28;
      v29 = *(int *)(a5 + 136);
      if (v29 > 4)
        v30 = 0;
      else
        v30 = qword_1C6A5FD00[v29];
      v31 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v31 = 2;
      v31[1] = v30;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C29ED0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 80), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));
  return sub_1C4C27704((uint64_t)a1, a3, v10, a5);
}

uint64_t sub_1C4C29F54(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 56), (unsigned __int8 *)(a5 + 12), (unsigned int *)(a5 + 24));
  v12 = *(unsigned __int8 *)(a5 + 1);
  v13 = v12 + 71;
  if ((_DWORD)v12 == 7)
    v13 = 1;
  if ((_DWORD)v12 == 6)
    v14 = 2;
  else
    v14 = v13;
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v15 = 1;
  v15[1] = v14;
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v17 = *(unsigned __int16 *)(a5 + 20);
  *v16 = 2;
  v16[1] = v17;
  return 3;
}

uint64_t sub_1C4C2A020(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 68), (unsigned int *)(a5 + 80));
  v14 = (*(_DWORD *)(a5 + 76) - 1);
  if (v14 < 7)
    v15 = v14 + 1;
  else
    v15 = 0;
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v17 = 2;
  *v16 = 2;
  v16[1] = v15;
  v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v19 = *(unsigned __int8 *)(a5 + 57);
  if ((_DWORD)v19 != 6)
  {
    if ((_DWORD)v19 == 7)
      v17 = 1;
    else
      v17 = v19 + 71;
  }
  *v18 = 1;
  v18[1] = v17;
  result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5);
  if ((_DWORD)result == 3)
    return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C4C2A160(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  result = sub_1C4C27C38(a1, a2, a3, a4, 1);
  if ((_DWORD)result == 3 && *(_DWORD *)(a4 + 8) != 1)
  {
    v9 = a3 + 1;
    if (*(_DWORD *)(a4 + 12) == 4)
    {
      v10 = *(_QWORD *)(a2 + 16);
      v11 = (_OWORD *)(v10 + 16 * v9);
      if (*(_BYTE *)v11 == 2)
        *(_QWORD *)(v10 + 16 * v9 + 8) |= 0x800uLL;
      else
        *v11 = xmmword_1C6A5FBF0;
    }
    if (*(_BYTE *)(a4 + 26))
      v12 = (4 * *(unsigned __int8 *)(a4 + 25)) | 2;
    else
      v12 = 4 * *(unsigned __int8 *)(a4 + 25);
    v13 = v12 | *(unsigned __int8 *)(a4 + 27);
    v14 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v9);
    if (*(_BYTE *)v14 == 2)
      v13 |= v14[1];
    else
      *v14 = 2;
    v14[1] = v13;
  }
  return result;
}

uint64_t sub_1C4C2A238(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 68), (unsigned int *)(a5 + 80));
  v14 = *(int *)(a5 + 76);
  if (v14 > 6)
    v15 = 0;
  else
    v15 = qword_1C6A5FD50[v14];
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v17 = 2;
  *v16 = 2;
  v16[1] = v15;
  v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v19 = *(unsigned __int8 *)(a5 + 57);
  if ((_DWORD)v19 != 6)
  {
    if ((_DWORD)v19 == 7)
      v17 = 1;
    else
      v17 = v19 + 71;
  }
  *v18 = 1;
  v18[1] = v17;
  result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5);
  if ((_DWORD)result == 3)
    return sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C4C2A38C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 16);
    v15 = *(unsigned __int8 *)(a5 + 204);
    v16 = 128;
    if (!*(_BYTE *)(a5 + 168))
      v16 = 32 * v14;
    v17 = v16 | (32 * v14);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 156), (unsigned int *)(a5 + 172));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 64);
  }
  return result;
}

uint64_t sub_1C4C2A4E0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 16);
    v17 = *(unsigned __int8 *)(a5 + 204);
    v18 = 128;
    if (!*(_BYTE *)(a5 + 168))
      v18 = 32 * v16;
    v19 = v18 | (32 * v16);
    v20 = *(_QWORD *)(a3 + 16);
    v21 = (_QWORD *)(v20 + 16 * v10);
    if (*(_BYTE *)v21 == 2)
    {
      v21 = (_QWORD *)(v20 + 16 * v10);
      v19 |= v21[1];
    }
    else
    {
      *v21 = 2;
    }
    v21[1] = v19;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 156), (unsigned int *)(a5 + 172));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 64);
      if ((_DWORD)result == 3)
      {
        v22 = (unsigned __int8 *)(a5 + 92);
        if (*(_DWORD *)(a5 + 100) == 2)
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v13, (uint64_t)v22, 3);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          v23 = *v22;
          v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
          *v24 = 2;
          v24[1] = v23;
        }
        v25 = (unsigned __int8 *)(a5 + 120);
        if (*(_DWORD *)(a5 + 128) == 2)
        {
          return sub_1C4C27C38((uint64_t)a1, a3, v14, (uint64_t)v25, 3);
        }
        else
        {
          v26 = *v25;
          v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
          *v27 = 2;
          v27[1] = v26;
          return 3;
        }
      }
    }
  }
  return result;
}

double sub_1C4C2A6E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  double result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;

  if (sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), 2) == 3)
  {
    v8 = *(unsigned __int8 *)(a4 + 28) | ((unint64_t)*(unsigned int *)(a4 + 20) << 20);
    if (*(_BYTE *)(a4 + 16))
      v8 |= 0x20uLL;
    if (*(_DWORD *)(a4 + 12) == 4)
      v8 |= 0x800uLL;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
      v9 = 2;
    else
      v9 = 1;
    v10 = v9 + a3;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (_QWORD *)(v11 + 16 * v10);
    if (*(_BYTE *)v12 == 2)
    {
      v12 = (_QWORD *)(v11 + 16 * v10);
      v8 |= v12[1];
    }
    else
    {
      *v12 = 2;
    }
    v12[1] = v8;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      v13 = (_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * (a3 + 1));
      if (*(_BYTE *)v13 != 2)
      {
        *(_QWORD *)&result = 2;
        *v13 = xmmword_1C64169D0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2A7F4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  result = sub_1C4C27C38(a1, a2, a3, a4, 2);
  if ((_DWORD)result == 3 && *(_DWORD *)(a4 + 8) != 1)
  {
    v9 = a3 + 1;
    if (*(_DWORD *)(a4 + 12) == 4)
    {
      v10 = *(_QWORD *)(a2 + 16);
      v11 = (_OWORD *)(v10 + 16 * v9);
      if (*(_BYTE *)v11 == 2)
        *(_QWORD *)(v10 + 16 * v9 + 8) |= 0x800uLL;
      else
        *v11 = xmmword_1C6A5FBF0;
    }
    if (*(_BYTE *)(a4 + 26))
      v12 = (4 * *(unsigned __int8 *)(a4 + 25)) | 2;
    else
      v12 = 4 * *(unsigned __int8 *)(a4 + 25);
    v13 = v12 | *(unsigned __int8 *)(a4 + 27);
    v14 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v9);
    if (*(_BYTE *)v14 == 2)
      v13 |= v14[1];
    else
      *v14 = 2;
    v14[1] = v13;
  }
  return result;
}

uint64_t sub_1C4C2A8CC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), 1);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a4 + 16))
      v8 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x20;
    else
      v8 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v9 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a4 + 12) == 4)
      v8 |= 0x800uLL;
    v10 = a3 + 1;
    if (v9 == 4 || !a3 && v9 == 5)
    {
      *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * v10) = xmmword_1C64169D0;
      v10 = a3 + 2;
    }
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (_QWORD *)(v11 + 16 * v10);
    if (*(_BYTE *)v12 == 2)
    {
      *(_QWORD *)(v11 + 16 * v10 + 8) |= v8;
    }
    else
    {
      *v12 = 2;
      v12[1] = v8;
    }
    return 3;
  }
  return result;
}

uint64_t sub_1C4C2A9BC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), 2);
  if ((_DWORD)result == 3)
  {
    v8 = *(unsigned __int8 *)(a4 + 28) | ((unint64_t)*(unsigned int *)(a4 + 20) << 20);
    if (*(_BYTE *)(a4 + 16))
      v8 |= 0x20uLL;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      return 0;
    }
    else
    {
      v9 = a3 + 1;
      v10 = *(_QWORD *)(a2 + 16);
      v11 = (_QWORD *)(v10 + 16 * v9);
      if (*(_BYTE *)v11 == 2)
      {
        v11 = (_QWORD *)(v10 + 16 * v9);
        v8 |= v11[1];
      }
      else
      {
        *v11 = 2;
      }
      v11[1] = v8;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2AA90(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unsigned int v19;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 165), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 132));
  v14 = *a1 >= 4 && *(_BYTE *)(a5 + 32) == 0;
  v15 = 0x4000000;
  if (!v14)
    v15 = 0;
  v16 = *(unsigned int *)(a5 + 48) | ((unint64_t)*(unsigned int *)(a5 + 52) << 11) | ((unint64_t)*(_QWORD *)(a5 + 56) << 7) | (HIDWORD(*(_QWORD *)(a5 + 56)) << 23) | (32 * *(unsigned int *)(a5 + 64)) | ((unint64_t)*(unsigned int *)(a5 + 72) << 14) | ((unint64_t)*(unsigned __int8 *)(a5 + 69) << 21) | ((unint64_t)*(unsigned __int8 *)(a5 + 68) << 22) | ((unint64_t)*(unsigned __int8 *)(a5 + 164) << 25) | v15;
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v17 = 2;
  v17[1] = v16;
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 76, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5 + 104);
    if ((_DWORD)result == 3)
    {
      v19 = sub_1C6172E10(a5, *a1);
      return sub_1C4C2FC84((uint64_t)a1, a3, v13, a5, v19);
    }
  }
  return result;
}

uint64_t sub_1C4C2AC20(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v24 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C286E8((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 168), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 136));
    v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 48));
    *v18 = 2;
    v18[1] = v19;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 108, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 80, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2ADEC((uint64_t)a1, a3, v14, a5 + 52);
        if ((_DWORD)result == 3)
        {
          v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v24);
          v21 = *(__int16 *)(a5 + 28);
          *v20 = 2;
          v20[1] = v21;
          v22 = *(__int16 *)(a5 + 30);
          v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
          *v23 = 2;
          v23[1] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2ADEC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = *(_DWORD *)a2;
  if (sub_1C4C32DEC(*(_DWORD *)a2) == 41)
  {
    result = sub_1C4C2F6C4(a1, v8, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), 2, 0, 1);
    if ((_DWORD)result != 3)
      return result;
    if (*(_BYTE *)(a4 + 24))
      v10 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x10;
    else
      v10 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v11 = a3 + 1;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = (_QWORD *)(v12 + 16 * v11);
    if (*(_BYTE *)v13 == 2)
    {
      v13 = (_QWORD *)(v12 + 16 * v11);
      v10 |= v13[1];
    }
    else
    {
      *v13 = 2;
    }
    v13[1] = v10;
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3) = xmmword_1C64169D0;
  }
  return 3;
}

uint64_t sub_1C4C2AEE4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v28 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 168);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 136));
    v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3)
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const char *)1);
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 48));
    *v22 = 2;
    v22[1] = v23;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 108, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 80, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2ADEC((uint64_t)a1, a3, v14, a5 + 52);
        if ((_DWORD)result == 3)
        {
          v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v28);
          v25 = *(__int16 *)(a5 + 28);
          *v24 = 2;
          v24[1] = v25;
          v26 = *(__int16 *)(a5 + 30);
          v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
          *v27 = 2;
          v27[1] = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2B0F8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 132);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    result = sub_1C4C27704((uint64_t)a1, a3, v11, a5 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
  }
  return result;
}

uint64_t sub_1C4C2B23C(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  int v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;

  v4 = *a4;
  if (*a4 == 2)
  {
    v6 = (int64x2_t *)(*(_QWORD *)(a2 + 16) + 16 * a3);
    v7 = *((unsigned __int8 *)a4 + 5);
    if ((_DWORD)v7 == 7)
    {
      v8 = vdupq_n_s64(1uLL);
    }
    else
    {
      if ((_DWORD)v7 != 6)
      {
        v6->i64[0] = 1;
        v6->i64[1] = v7 + 71;
        return 3;
      }
      v8 = (int64x2_t)xmmword_1C6A5FC00;
    }
    *v6 = v8;
    return 3;
  }
  if (v4 == 1)
  {
    v5 = (uint64_t)(a4 + 1);
    return sub_1C4C27248(a1, a2, a3, v5, 1);
  }
  if (!v4)
  {
    v5 = (uint64_t)(a4 + 1);
    return sub_1C4C27248(a1, a2, a3, v5, 1);
  }
  return 0;
}

uint64_t sub_1C4C2B2C0(unsigned int *a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, int a6, unsigned __int8 *a7, unsigned int *a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a4 != 2)
  {
    if (a4 > 1)
      return 0;
    v8 = 32 * (a5 != 0);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = (_QWORD *)(v9 + 16 * a3);
    if (*(_BYTE *)v10 == 2)
    {
      v10 = (_QWORD *)(v9 + 16 * a3);
      v8 |= v10[1];
    }
    else
    {
      *v10 = 2;
    }
    v10[1] = v8;
  }
  sub_1C4C27178(*a1, *(_QWORD *)(a2 + 16), a3, a6, a7, a8);
  return 3;
}

uint64_t sub_1C4C2B348(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v8);
  v16 = *(unsigned __int8 *)(a4 + 1);
  if ((_DWORD)v16 == 6)
  {
    v17 = 2;
  }
  else if ((_DWORD)v16 == 7)
  {
    v17 = 1;
  }
  else
  {
    v17 = v16 + 71;
  }
  *v15 = 1;
  v15[1] = v17;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 168), (unsigned __int8 *)(a4 + 124), (unsigned int *)(a4 + 136));
  v18 = (*(_DWORD *)(a4 + 132) - 1);
  if (v18 < 7)
    v19 = v18 + 1;
  else
    v19 = 0;
  v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v20 = 2;
  v20[1] = v19;
  result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 4);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 32);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a4 + 60, 1);
      if ((_DWORD)result == 3)
        return sub_1C4C27C38((uint64_t)a1, a3, v14, a4 + 88, 1);
    }
  }
  return result;
}

uint64_t sub_1C4C2B4FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v8);
  v16 = *(unsigned __int8 *)(a4 + 1);
  if ((_DWORD)v16 == 6)
  {
    v17 = 2;
  }
  else if ((_DWORD)v16 == 7)
  {
    v17 = 1;
  }
  else
  {
    v17 = v16 + 71;
  }
  *v15 = 1;
  v15[1] = v17;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 168), (unsigned __int8 *)(a4 + 124), (unsigned int *)(a4 + 136));
  v18 = *(int *)(a4 + 132);
  if (v18 > 6)
    v19 = 0;
  else
    v19 = qword_1C6A5FD50[v18];
  v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v20 = 2;
  v20[1] = v19;
  result = sub_1C4C27D28((uint64_t)a1, a3, v11, a4 + 4);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v12, a4 + 32);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a4 + 60, 1);
      if ((_DWORD)result == 3)
        return sub_1C4C27C38((uint64_t)a1, a3, v14, a4 + 88, 1);
    }
  }
  return result;
}

uint64_t sub_1C4C2B6C0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C2B23C((uint64_t)a1, a3, v8, (int *)a4);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2B2C0(a1, a3, v9, *(_DWORD *)a4, *(_BYTE *)(a4 + 20), *(unsigned __int8 *)(a4 + 144), (unsigned __int8 *)(a4 + 104), (unsigned int *)(a4 + 112));
    if ((_DWORD)result == 3)
    {
      v14 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
      v15 = *(unsigned __int8 *)(a4 + 97);
      if ((_DWORD)v15 == 6)
      {
        v16 = 2;
      }
      else if ((_DWORD)v15 == 7)
      {
        v16 = 1;
      }
      else
      {
        v16 = v15 + 71;
      }
      *v14 = 1;
      v14[1] = v16;
      result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 40);
      if ((_DWORD)result == 3)
        return sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 68);
    }
  }
  return result;
}

uint64_t sub_1C4C2B818(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a4 + 136);
    v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v9);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 96), (unsigned int *)(a4 + 104));
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    v19 = *(unsigned __int8 *)(a4 + 85);
    if ((_DWORD)v19 == 6)
    {
      v20 = 2;
    }
    else if ((_DWORD)v19 == 7)
    {
      v20 = 1;
    }
    else
    {
      v20 = v19 + 71;
    }
    *v18 = 1;
    v18[1] = v20;
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a4 + 28, 1);
    if ((_DWORD)result == 3)
      return sub_1C4C27C38((uint64_t)a1, a3, v12, a4 + 56, 1);
  }
  return result;
}

uint64_t sub_1C4C2B9AC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a4 + 144);
    v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v9);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 104), (unsigned int *)(a4 + 112));
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    v19 = *(unsigned __int8 *)(a4 + 93);
    if ((_DWORD)v19 == 6)
    {
      v20 = 2;
    }
    else if ((_DWORD)v19 == 7)
    {
      v20 = 1;
    }
    else
    {
      v20 = v19 + 71;
    }
    *v18 = 1;
    v18[1] = v20;
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 36);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 64);
  }
  return result;
}

uint64_t sub_1C4C2BB38(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v8);
  v14 = *(unsigned __int8 *)(a4 + 1);
  if ((_DWORD)v14 == 6)
  {
    v15 = 2;
  }
  else if ((_DWORD)v14 == 7)
  {
    v15 = 1;
  }
  else
  {
    v15 = v14 + 71;
  }
  *v13 = 1;
  v13[1] = v15;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 112), (unsigned __int8 *)(a4 + 72), (unsigned int *)(a4 + 80));
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v17 = *(unsigned __int8 *)(a4 + 61);
  if ((_DWORD)v17 == 6)
  {
    v18 = 2;
  }
  else if ((_DWORD)v17 == 7)
  {
    v18 = 1;
  }
  else
  {
    v18 = v17 + 71;
  }
  *v16 = 1;
  v16[1] = v18;
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a4 + 4, 1);
  if ((_DWORD)result == 3)
    return sub_1C4C27C38((uint64_t)a1, a3, v12, a4 + 32, 1);
  return result;
}

uint64_t sub_1C4C2BCA0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v10 = *(_DWORD *)a2;
  if (sub_1C4C32DEC(*(_DWORD *)a2) == 65)
    v11 = 1;
  else
    v11 = 2;
  v12 = 3;
  if (!a5)
    v12 = 4;
  result = sub_1C4C2F6C4(a1, v10, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), v11, *(_DWORD *)(a4 + 24), v12);
  if ((_DWORD)result == 3)
  {
    v14 = a3 + 1;
    v15 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (_QWORD *)(v16 + 16 * v14);
    if (*(_BYTE *)v17 == 2)
    {
      *(_QWORD *)(v16 + 16 * v14 + 8) |= v15;
    }
    else
    {
      *v17 = 2;
      v17[1] = v15;
    }
  }
  return result;
}

double sub_1C4C2BD80(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  double result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;

  if (sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), 1) == 3)
  {
    v8 = *(unsigned __int8 *)(a4 + 28) | ((unint64_t)*(unsigned int *)(a4 + 20) << 20);
    if (*(_BYTE *)(a4 + 16))
      v8 |= 0x20uLL;
    if (*(_DWORD *)(a4 + 12) == 4)
      v8 |= 0x800uLL;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
      v9 = 2;
    else
      v9 = 1;
    v10 = v9 + a3;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (_QWORD *)(v11 + 16 * v10);
    if (*(_BYTE *)v12 == 2)
    {
      v12 = (_QWORD *)(v11 + 16 * v10);
      v8 |= v12[1];
    }
    else
    {
      *v12 = 2;
    }
    v12[1] = v8;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      v13 = (_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * (a3 + 1));
      if (*(_BYTE *)v13 != 2)
      {
        *(_QWORD *)&result = 2;
        *v13 = xmmword_1C64169D0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2BE88(unsigned int *a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  int v8;
  __int16 *v9;
  __int16 v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  void *v28;
  unsigned int v29;
  _QWORD v30[193];

  v30[192] = *MEMORY[0x1E0C80C00];
  v8 = sub_1C4C2FD5C(*a2);
  v9 = (__int16 *)(a4 + 112);
  if (v8 != a3)
    v9 = (__int16 *)(a4 + 114);
  v10 = *v9;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v27 = HIBYTE(v10);
  if (v8 == a3)
    v11 = 94;
  else
    v11 = 95;
  sub_1C6172C4C(a4, *a1, v11, &v28);
  v12 = (char *)v28;
  v13 = (char *)v28 + 96 * v29;
  v14 = (char *)v28;
  if (v29 >= 2)
  {
    v15 = (char *)v28 + 96;
    v16 = 96 * v29 - 96;
    v14 = (char *)v28;
    do
    {
      if (*((_DWORD *)v14 + 1) < *((_DWORD *)v15 + 1))
        v14 = v15;
      v15 += 96;
      v16 -= 96;
    }
    while (v16);
  }
  if (v14 != v13 && *((_DWORD *)v14 + 1) != -1)
    HIDWORD(v26) = *(_DWORD *)(a4 + 48);
  LOWORD(v25[0]) = (*(_WORD *)(a4 + 28) + 2 * (char)v10) & 0x1FFF;
  if (v29 >= 2)
  {
    v17 = (char *)v28 + 96;
    v18 = 96 * v29 - 96;
    do
    {
      if (*((_DWORD *)v12 + 1) < *((_DWORD *)v17 + 1))
        v12 = v17;
      v17 += 96;
      v18 -= 96;
    }
    while (v18);
  }
  if (v12 == v13 || *((_DWORD *)v12 + 1) == -1)
    v19 = 0;
  else
    v19 = sub_1C6172A44((uint64_t *)&v28);
  v20 = sub_1C4C2FC84((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)v25, v19);
  v21 = (char *)v28;
  if (v29)
  {
    v22 = 96 * v29;
    do
    {
      v23 = *(char **)&v21[v22 - 72];
      if (&v21[v22 - 56] != v23)
        free(v23);
      v22 -= 96;
    }
    while (v22);
    v21 = (char *)v28;
  }
  if (v21 != (char *)v30)
    free(v21);
  return v20;
}

uint64_t sub_1C4C2C098(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  __n128 v19;
  unsigned int v20;
  unsigned int v21;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v21 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 252), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 212));
  v16 = ((unint64_t)*(unsigned int *)(a5 + 136) << 23) | ((unint64_t)*(unsigned int *)(a5 + 132) << 21) | (4 * *(_QWORD *)(a5 + 140)) | (HIDWORD(*(_QWORD *)(a5 + 140)) << 30) | ((unint64_t)*(unsigned int *)(a5 + 148) << 26) | ((unint64_t)*(unsigned int *)(a5 + 152) << 28) | ((unint64_t)*(unsigned __int8 *)(a5 + 244) << 34) | ((unint64_t)*(unsigned int *)(a5 + 248) << 44) | ((unint64_t)*(unsigned int *)(a5 + 36) << 35) | ((unint64_t)*(unsigned int *)(a5 + 64) << 38) | ((unint64_t)*(unsigned int *)(a5 + 92) << 41);
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v17 = 2;
  v17[1] = v16;
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 156, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5 + 184);
    if ((_DWORD)result == 3)
    {
      v20 = sub_1C6172D80(a5, *a1, v19);
      result = sub_1C4C2FC84((uint64_t)a1, a3, v13, a5, v20);
      if ((_DWORD)result == 3)
      {
        if (*(_DWORD *)(a5 + 36))
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 28, 1);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14) = xmmword_1C64169D0;
        }
        if (*(_DWORD *)(a5 + 64))
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v21, a5 + 56, 1);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v21) = xmmword_1C64169D0;
        }
        if (*(_DWORD *)(a5 + 92))
        {
          return sub_1C4C27C38((uint64_t)a1, a3, v15, a5 + 84, 1);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15) = xmmword_1C64169D0;
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2C320(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  __n128 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v23 = sub_1C4C2FD5C(v8);
  v22 = sub_1C4C2FD5C(v8);
  v21 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 252), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 212));
  v16 = ((unint64_t)*(unsigned int *)(a5 + 136) << 23) | ((unint64_t)*(unsigned int *)(a5 + 132) << 21) | (4 * *(_QWORD *)(a5 + 140)) | (HIDWORD(*(_QWORD *)(a5 + 140)) << 30) | ((unint64_t)*(unsigned int *)(a5 + 148) << 26) | ((unint64_t)*(unsigned int *)(a5 + 152) << 28) | ((unint64_t)*(unsigned __int8 *)(a5 + 244) << 34) | ((unint64_t)*(unsigned int *)(a5 + 248) << 44) | ((unint64_t)*(unsigned int *)(a5 + 36) << 35) | ((unint64_t)*(unsigned int *)(a5 + 64) << 38) | ((unint64_t)*(unsigned int *)(a5 + 92) << 41);
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v17 = 2;
  v17[1] = v16;
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 156, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5 + 184);
    if ((_DWORD)result == 3)
    {
      v20 = sub_1C6172D80(a5, *a1, v19);
      result = sub_1C4C2FC84((uint64_t)a1, a3, v13, a5, v20);
      if ((_DWORD)result == 3)
      {
        if (*(_DWORD *)(a5 + 36))
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 28, 1);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14) = xmmword_1C64169D0;
        }
        if (*(_DWORD *)(a5 + 64))
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v23, a5 + 56, 1);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v23) = xmmword_1C64169D0;
        }
        if (*(_DWORD *)(a5 + 92))
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v22, a5 + 84, 1);
          if ((_DWORD)result != 3)
            return result;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v22) = xmmword_1C64169D0;
        }
        result = sub_1C4C2C600(a1, (unsigned __int16 *)a3, v21, a5);
        if ((_DWORD)result == 3)
          return sub_1C4C2C600(a1, (unsigned __int16 *)a3, v15, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2C600(unsigned int *a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  int v8;
  __n128 v9;
  __int16 *v10;
  __int16 v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[2];
  uint64_t v27;
  int v28;
  void *v29;
  unsigned int v30;
  _QWORD v31[193];

  v31[192] = *MEMORY[0x1E0C80C00];
  v8 = sub_1C4C2FD5C(*a2);
  v10 = (__int16 *)(a4 + 256);
  if (v8 != a3)
    v10 = (__int16 *)(a4 + 258);
  v11 = *v10;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v28 = HIBYTE(v11);
  if (v8 == a3)
    v12 = 94;
  else
    v12 = 95;
  sub_1C6172D58(a4, *a1, v12, (uint64_t *)&v29, v9);
  v13 = (char *)v29;
  v14 = (char *)v29 + 96 * v30;
  v15 = (char *)v29;
  if (v30 >= 2)
  {
    v16 = (char *)v29 + 96;
    v17 = 96 * v30 - 96;
    v15 = (char *)v29;
    do
    {
      if (*((_DWORD *)v15 + 1) < *((_DWORD *)v16 + 1))
        v15 = v16;
      v16 += 96;
      v17 -= 96;
    }
    while (v17);
  }
  if (v15 != v14 && *((_DWORD *)v15 + 1) != -1)
    HIDWORD(v27) = *(_DWORD *)(a4 + 20);
  LOWORD(v26[0]) = (*(_WORD *)a4 + 2 * (char)v11) & 0x1FFF;
  if (v30 >= 2)
  {
    v18 = (char *)v29 + 96;
    v19 = 96 * v30 - 96;
    do
    {
      if (*((_DWORD *)v13 + 1) < *((_DWORD *)v18 + 1))
        v13 = v18;
      v18 += 96;
      v19 -= 96;
    }
    while (v19);
  }
  if (v13 == v14 || *((_DWORD *)v13 + 1) == -1)
    v20 = 0;
  else
    v20 = sub_1C6172A44((uint64_t *)&v29);
  v21 = sub_1C4C2FC84((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)v26, v20);
  v22 = (char *)v29;
  if (v30)
  {
    v23 = 96 * v30;
    do
    {
      v24 = *(char **)&v22[v23 - 72];
      if (&v22[v23 - 56] != v24)
        free(v24);
      v23 -= 96;
    }
    while (v23);
    v22 = (char *)v29;
  }
  if (v22 != (char *)v31)
    free(v22);
  return v21;
}

uint64_t sub_1C4C2C810(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4, int a5)
{
  unsigned int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v9 = a5 & 0xFFFFFFFE;
  v10 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  v11 = *((_DWORD *)a4 + 2);
  if (v11 == 3)
  {
    if (v9 == 8)
      v14 = 16;
    else
      v14 = 8;
    v15 = *a4;
    v16 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 24, 3);
    *(_BYTE *)v16 = 1;
    *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = v15;
    v17 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 48, 3);
    *(_DWORD *)(v17 + 9) = *(unsigned __int8 *)(v17 + 12) << 24;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)v17 = &off_1E80BF520;
    *(_DWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = v16;
    *(_DWORD *)(v17 + 40) = v14;
    *(_BYTE *)(v17 + 8) = 4;
    *v10 = 5;
    v10[1] = v17 + 8;
  }
  else
  {
    if (v11 != 2)
      return 0;
    v12 = v9 == 8 ? 20 : 8;
    if ((sub_1C4C2F9E4(v10, *a4, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24), v12) & 1) == 0)
      return 0;
  }
  v18 = 32 * *((unsigned __int8 *)a4 + 16);
  if (*((_BYTE *)a4 + 24))
    v18 = (32 * *((unsigned __int8 *)a4 + 16)) | 0x10;
  v19 = a3 + 1;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = (_QWORD *)(v20 + 16 * v19);
  if (*(_BYTE *)v21 == 2)
  {
    v21 = (_QWORD *)(v20 + 16 * v19);
    v18 |= v21[1];
  }
  else
  {
    *v21 = 2;
  }
  v21[1] = v18;
  if (*((_BYTE *)a4 + 26))
    v22 = (4 * *((unsigned __int8 *)a4 + 25)) | 2;
  else
    v22 = 4 * *((unsigned __int8 *)a4 + 25);
  v23 = v22 | *((unsigned __int8 *)a4 + 27);
  v24 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v19);
  if (*(_BYTE *)v24 == 2)
    v23 |= v24[1];
  else
    *v24 = 2;
  v24[1] = v23;
  return 3;
}

uint64_t sub_1C4C2C9D4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (a5 > 3)
    v8 = 0;
  else
    v8 = dword_1C6A5FC10[a5];
  result = sub_1C4C27248(a1, a2, a3, a4, v8);
  if ((_DWORD)result)
  {
    v10 = *(unsigned __int8 *)(a4 + 28);
    v11 = a3 + 1;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = (_QWORD *)(v12 + 16 * v11);
    if (*(_BYTE *)v13 == 2)
    {
      v13 = (_QWORD *)(v12 + 16 * v11);
      v10 |= v13[1];
    }
    else
    {
      *v13 = 2;
    }
    v13[1] = v10;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C2CA6C(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, int a5)
{
  int v9;
  _BOOL4 v11;
  int v12;
  _BOOL4 v16;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  _OWORD v22[2];

  v9 = *(_DWORD *)(a4 + 12);
  v11 = a5 == 3 && v9 == 1;
  v12 = *(unsigned __int8 *)(a4 + 25);
  if (v11 && v12 == 0)
  {
    v18 = 8;
  }
  else
  {
    if (v11 && v12 != 0)
    {
      v18 = 9;
      goto LABEL_35;
    }
    v16 = a5 == 1 && v9 == 1;
    if (v16 && v12 == 0)
      goto LABEL_30;
    if (v16 && *(_BYTE *)(a4 + 25))
      goto LABEL_34;
    if (!v9 && !*(_BYTE *)(a4 + 25))
    {
LABEL_30:
      v18 = 0;
      goto LABEL_35;
    }
    if (!v9 && *(_BYTE *)(a4 + 25))
    {
LABEL_34:
      v18 = 1;
    }
    else if (v9 != 1 || *(_BYTE *)(a4 + 25))
    {
      if (v9 == 1 && *(_BYTE *)(a4 + 25))
      {
        v18 = 3;
      }
      else if (v9 != 2 || *(_BYTE *)(a4 + 25))
      {
        if (v9 != 2 || !*(_BYTE *)(a4 + 25))
          llvm::report_fatal_error((llvm *)"Invalid int to float conversion.", (const char *)1);
        v18 = 5;
      }
      else
      {
        v18 = 4;
      }
    }
    else
    {
      v18 = 2;
    }
  }
LABEL_35:
  v19 = (_QWORD *)(*((_QWORD *)a2 + 2) + 16 * sub_1C4C2FD5C(*a2));
  *v19 = 2;
  v19[1] = v18;
  v22[0] = *(_OWORD *)a4;
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a4 + 12);
  v20 = HIDWORD(v22[0]);
  if (HIDWORD(v22[0]) <= 1)
    v20 = 1;
  HIDWORD(v22[0]) = v20;
  return sub_1C4C27D28(a1, (uint64_t)a2, a3, (uint64_t)v22);
}

uint64_t sub_1C4C2CBD4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  __int16 *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _OWORD v33[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v32 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v9);
  v17 = *a5;
  *v16 = 2;
  v16[1] = v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = (_OWORD *)(v18 + 16 * (v9 + 1));
  if (*(_BYTE *)v19 != 2)
  {
    *v19 = xmmword_1C64169D0;
    v18 = *(_QWORD *)(a3 + 16);
  }
  v20 = (unint64_t)a5[5] << 20;
  v21 = v9 + 2;
  v22 = (_QWORD *)(v18 + 16 * v21);
  if (*(_BYTE *)v22 == 2)
  {
    *(_QWORD *)(v18 + 16 * v21 + 8) |= v20;
  }
  else
  {
    *v22 = 2;
    v22[1] = v20;
  }
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, *((unsigned __int8 *)a5 + 213), (unsigned __int8 *)a5 + 154, a5 + 45);
  sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v11, a5[41], *((_BYTE *)a5 + 81));
  result = sub_1C4C27C38((uint64_t)a1, a3, v12, (uint64_t)(a5 + 21), 1);
  if ((_DWORD)result == 3)
  {
    v24 = (__int16 *)(a5 + 14);
    if (a5[16] == 1)
    {
      v25 = *v24;
      v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
      *v26 = 2;
      v26[1] = v25;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v24);
      if ((_DWORD)result != 3)
        return result;
    }
    v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
    v28 = *((__int16 *)a5 + 88);
    *v27 = 2;
    v27[1] = v28;
    v33[0] = *(_OWORD *)(a5 + 7);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(a5 + 10);
    result = sub_1C4C2CEE0((uint64_t)a1, a3, v32, v33, a5[41]);
    if ((_DWORD)result == 3)
    {
      v29 = (int)a5[43];
      if (v29 > 4)
        v30 = 0;
      else
        v30 = qword_1C6A5FD00[v29];
      v31 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v31 = 2;
      v31[1] = v30;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2CE28(uint64_t result, unsigned int a2, int a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;

  switch(a3)
  {
    case 1:
      v4 = 1;
      break;
    case 2:
      v4 = 2;
      break;
    case 3:
      v4 = 3;
      break;
    case 4:
      v4 = 4;
      break;
    case 5:
      v4 = 5;
      break;
    case 6:
      v4 = 6;
      break;
    case 7:
      v4 = 7;
      break;
    case 8:
      v4 = 8;
      break;
    case 9:
      v4 = 9;
      break;
    case 10:
      v4 = 10;
      break;
    case 11:
    case 12:
      v4 = 12;
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      llvm::report_fatal_error((llvm *)"Unhandled atomic op", (const char *)1);
    default:
      v4 = 0;
      break;
  }
  v5 = (_QWORD *)(result + 16 * a2);
  *v5 = 2;
  v5[1] = v4 | ((unint64_t)(a4 == 0) << 9);
  return result;
}

uint64_t sub_1C4C2CEE0(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  if (a5 != 3)
    return sub_1C4C27C38(a1, a2, a3, (uint64_t)a4, 1);
  v9 = v5;
  v10 = v6;
  v8[0] = *a4;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a4 + 12);
  HIDWORD(v8[0]) = 3;
  return sub_1C4C27C38(a1, a2, a3, (uint64_t)v8, 1);
}

uint64_t sub_1C4C2CF2C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int16 *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  _OWORD v30[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v29 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0x100000001, *(unsigned int *)(a5 + 12) | 0x100000000);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 213);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 154), (unsigned int *)(a5 + 180));
    sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v11, *(_DWORD *)(a5 + 164), *(_BYTE *)(a5 + 81));
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 84, 1);
    if ((_DWORD)result == 3)
    {
      v21 = (__int16 *)(a5 + 56);
      if (*(_DWORD *)(a5 + 64) == 1)
      {
        v22 = *v21;
        v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        *v23 = 2;
        v23[1] = v22;
      }
      else
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v13, (uint64_t)v21);
        if ((_DWORD)result != 3)
          return result;
      }
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      v25 = *(__int16 *)(a5 + 176);
      *v24 = 2;
      v24[1] = v25;
      v30[0] = *(_OWORD *)(a5 + 28);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a5 + 40);
      result = sub_1C4C2CEE0((uint64_t)a1, a3, v29, v30, *(_DWORD *)(a5 + 164));
      if ((_DWORD)result == 3)
      {
        v26 = *(int *)(a5 + 172);
        if (v26 > 4)
          v27 = 0;
        else
          v27 = qword_1C6A5FD00[v26];
        v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v28 = 2;
        v28[1] = v27;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2D174(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  __int16 *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD v25[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 213), (unsigned __int8 *)(a5 + 154), (unsigned int *)(a5 + 180));
  sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v10, *(_DWORD *)(a5 + 164), *(_BYTE *)(a5 + 81));
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 84, 1);
  if ((_DWORD)result == 3)
  {
    v17 = (__int16 *)(a5 + 56);
    if (*(_DWORD *)(a5 + 64) == 1)
    {
      v18 = *v17;
      v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
      *v19 = 2;
      v19[1] = v18;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, (uint64_t)v17);
      if ((_DWORD)result != 3)
        return result;
    }
    v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
    v21 = *(__int16 *)(a5 + 176);
    *v20 = 2;
    v20[1] = v21;
    v25[0] = *(_OWORD *)(a5 + 28);
    *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a5 + 40);
    result = sub_1C4C2CEE0((uint64_t)a1, a3, v14, v25, *(_DWORD *)(a5 + 164));
    if ((_DWORD)result == 3)
    {
      v22 = *(int *)(a5 + 172);
      if (v22 > 4)
        v23 = 0;
      else
        v23 = qword_1C6A5FD00[v22];
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v24 = 2;
      v24[1] = v23;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2D344(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  _OWORD v27[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v26 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0x100000001, *(unsigned int *)(a5 + 12) | 0x100000000);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 213);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 154), (unsigned int *)(a5 + 180));
    sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v11, *(_DWORD *)(a5 + 164), *(_BYTE *)(a5 + 81));
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 84, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v13, a5 + 56);
      if ((_DWORD)result == 3)
      {
        v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        v22 = *(__int16 *)(a5 + 176);
        *v21 = 2;
        v21[1] = v22;
        v27[0] = *(_OWORD *)(a5 + 28);
        *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)(a5 + 40);
        result = sub_1C4C2CEE0((uint64_t)a1, a3, v26, v27, *(_DWORD *)(a5 + 164));
        if ((_DWORD)result == 3)
        {
          v23 = *(int *)(a5 + 172);
          if (v23 > 4)
            v24 = 0;
          else
            v24 = qword_1C6A5FD00[v23];
          v25 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
          *v25 = 2;
          v25[1] = v24;
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2D568(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD v22[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 213), (unsigned __int8 *)(a5 + 154), (unsigned int *)(a5 + 180));
  sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v10, *(_DWORD *)(a5 + 164), *(_BYTE *)(a5 + 81));
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 84, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5 + 56);
    if ((_DWORD)result == 3)
    {
      v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
      v18 = *(__int16 *)(a5 + 176);
      *v17 = 2;
      v17[1] = v18;
      v22[0] = *(_OWORD *)(a5 + 28);
      *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a5 + 40);
      result = sub_1C4C2CEE0((uint64_t)a1, a3, v14, v22, *(_DWORD *)(a5 + 164));
      if ((_DWORD)result == 3)
      {
        v19 = *(int *)(a5 + 172);
        if (v19 > 4)
          v20 = 0;
        else
          v20 = qword_1C6A5FD00[v19];
        v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v21 = 2;
        v21[1] = v20;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2D714(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  __int16 *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD v25[2];

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 213), (unsigned __int8 *)(a5 + 154), (unsigned int *)(a5 + 180));
  sub_1C4C2CE28(*(_QWORD *)(a3 + 16), v10, *(_DWORD *)(a5 + 164), *(_BYTE *)(a5 + 81));
  result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 84, 1);
  if ((_DWORD)result == 3)
  {
    v17 = (__int16 *)(a5 + 56);
    if (*(_DWORD *)(a5 + 64) == 1)
    {
      v18 = *v17;
      v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
      *v19 = 2;
      v19[1] = v18;
    }
    else
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, (uint64_t)v17);
      if ((_DWORD)result != 3)
        return result;
    }
    v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
    v21 = *(__int16 *)(a5 + 176);
    *v20 = 2;
    v20[1] = v21;
    v25[0] = *(_OWORD *)(a5 + 28);
    *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a5 + 40);
    HIDWORD(v25[0]) = 3;
    result = sub_1C4C27C38((uint64_t)a1, a3, v14, (uint64_t)v25, 1);
    if ((_DWORD)result == 3)
    {
      v22 = *(int *)(a5 + 172);
      if (v22 > 4)
        v23 = 0;
      else
        v23 = qword_1C6A5FD00[v22];
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
      *v24 = 2;
      v24[1] = v23;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2D8EC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 140);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    v19 = *(int *)(a5 + 100);
    v20 = *(unsigned __int8 *)(a5 + 104);
    if (v19 > 6)
      v21 = 0;
    else
      v21 = qword_1C6A5FD50[v19];
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v22 = 2;
    v22[1] = v21;
    if (v20)
    {
      v23 = *(_QWORD *)(a3 + 16) + 16 * v11;
      *(_QWORD *)(v23 + 8) |= 0x10uLL;
    }
    result = sub_1C4C27704((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C27704((uint64_t)a1, a3, v13, a5 + 56);
  }
  return result;
}

uint64_t sub_1C4C2DA90(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 140);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    v19 = *(unsigned __int8 *)(a5 + 104);
    v20 = (*(_DWORD *)(a5 + 100) - 1);
    if (v20 < 7)
      v21 = v20 + 1;
    else
      v21 = 0;
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v22 = 2;
    v22[1] = v21;
    if (v19)
    {
      v23 = *(_QWORD *)(a3 + 16) + 16 * v11;
      *(_QWORD *)(v23 + 8) |= 0x10uLL;
    }
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 56);
  }
  return result;
}

uint64_t sub_1C4C2DC24(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 164);
    v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27704((uint64_t)a1, a3, v13, a5 + 84);
        if ((_DWORD)result == 3)
        {
          v20 = *(unsigned int *)(a5 + 160);
          if (v20 < 5)
            v21 = v20 + 1;
          else
            v21 = 0;
          v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
          *v22 = 2;
          v22[1] = v21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2DDC4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v29 = sub_1C4C2FD5C(v8);
  v28 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2E02C((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 228);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 180), (unsigned int *)(a5 + 188));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 88, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 116, 1);
      if ((_DWORD)result == 3)
      {
        v21 = *(_BYTE *)(a5 + 221) ? (4 * *(unsigned __int8 *)(a5 + 220)) | 2 : 4 * *(unsigned __int8 *)(a5 + 220);
        v22 = v21 | *(unsigned __int8 *)(a5 + 222);
        v23 = *(_QWORD *)(a3 + 16);
        v24 = (_QWORD *)(v23 + 16 * v13);
        if (*(_BYTE *)v24 == 2)
        {
          *(_QWORD *)(v23 + 16 * v13 + 8) |= v22;
        }
        else
        {
          *v24 = 2;
          v24[1] = v22;
        }
        result = sub_1C4C27704((uint64_t)a1, a3, v14, a5 + 144);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C2A160((uint64_t)a1, a3, v29, a5 + 32);
          if ((_DWORD)result == 3)
          {
            result = sub_1C4C2A160((uint64_t)a1, a3, v28, a5 + 60);
            if ((_DWORD)result == 3)
            {
              v25 = *(unsigned int *)(a5 + 224);
              if (v25 < 5)
                v26 = v25 + 1;
              else
                v26 = 0;
              v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
              *v27 = 2;
              v27[1] = v26;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2E02C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), 1);
  if ((_DWORD)result == 3)
  {
    v8 = *(unsigned __int8 *)(a4 + 28) | ((unint64_t)*(unsigned int *)(a4 + 20) << 20);
    if (*(_BYTE *)(a4 + 16))
      v8 |= 0x20uLL;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      return 0;
    }
    else
    {
      v9 = a3 + 1;
      v10 = *(_QWORD *)(a2 + 16);
      v11 = (_QWORD *)(v10 + 16 * v9);
      if (*(_BYTE *)v11 == 2)
      {
        v11 = (_QWORD *)(v10 + 16 * v9);
        v8 |= v11[1];
      }
      else
      {
        *v11 = 2;
      }
      v11[1] = v8;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2E0FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v33 = sub_1C4C2FD5C(v8);
  v32 = sub_1C4C2FD5C(v8);
  v31 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 236);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 184), (unsigned int *)(a5 + 196));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 92, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 120, 1);
      if ((_DWORD)result == 3)
      {
        v21 = *(_BYTE *)(a5 + 229) ? (4 * *(unsigned __int8 *)(a5 + 228)) | 2 : 4 * *(unsigned __int8 *)(a5 + 228);
        v22 = v21 | *(unsigned __int8 *)(a5 + 230);
        v23 = *(_QWORD *)(a3 + 16);
        v24 = (_QWORD *)(v23 + 16 * v13);
        if (*(_BYTE *)v24 == 2)
        {
          *(_QWORD *)(v23 + 16 * v13 + 8) |= v22;
        }
        else
        {
          *v24 = 2;
          v24[1] = v22;
        }
        result = sub_1C4C27704((uint64_t)a1, a3, v14, a5 + 148);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C2A160((uint64_t)a1, a3, v33, a5 + 36);
          if ((_DWORD)result == 3)
          {
            result = sub_1C4C2A160((uint64_t)a1, a3, v32, a5 + 64);
            if ((_DWORD)result == 3)
            {
              v25 = *(unsigned int *)(a5 + 192);
              v26 = *(_QWORD *)(a3 + 16);
              v27 = (_QWORD *)(v26 + 16 * v31);
              if (*(_BYTE *)v27 == 2)
              {
                *(_QWORD *)(v26 + 16 * v31 + 8) |= v25;
              }
              else
              {
                *v27 = 2;
                v27[1] = v25;
              }
              v28 = *(unsigned int *)(a5 + 232);
              if (v28 < 5)
                v29 = v28 + 1;
              else
                v29 = 0;
              v30 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
              *v30 = 2;
              v30[1] = v29;
              return 3;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2E3BC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 132);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    result = sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 56);
    if ((_DWORD)result == 3)
      return sub_1C4C27704((uint64_t)a1, a3, v12, a5 + 28);
  }
  return result;
}

uint64_t sub_1C4C2E4FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a5 + 28);
    if ((_DWORD)result == 3)
    {
      v13 = *(unsigned __int8 *)(a5 + 136);
      v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      v15 = *(_QWORD *)(a3 + 16);
      v16 = (_QWORD *)(v15 + 16 * v11);
      if (*(_BYTE *)v16 == 2)
      {
        v16 = (_QWORD *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        *v16 = 2;
      }
      v16[1] = v14;
      sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 104));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C4C2E604(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27704((uint64_t)a1, a3, v10, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v11, a5 + 84);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27704((uint64_t)a1, a3, v12, a5 + 56);
        if ((_DWORD)result == 3)
        {
          v15 = *(unsigned __int8 *)(a5 + 188);
          v16 = 32 * *(unsigned __int8 *)(a5 + 16);
          v17 = *(_QWORD *)(a3 + 16);
          v18 = (_QWORD *)(v17 + 16 * v13);
          if (*(_BYTE *)v18 == 2)
          {
            v18 = (_QWORD *)(v17 + 16 * v13);
            v16 |= v18[1];
          }
          else
          {
            *v18 = 2;
          }
          v18[1] = v16;
          sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v13, v15 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 156));
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2E76C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  result = (uint64_t)sub_1C4C2F9E4((_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3), *a4, *(_QWORD **)(a1 + 24), dword_1C6A5FD28[*((int *)a4 + 2)]);
  if ((_DWORD)result)
  {
    v8 = a3 + 1;
    if (*((_DWORD *)a4 + 2) == 4)
    {
      v9 = *(_QWORD *)(a2 + 16) + 16 * v8;
      if (*(_BYTE *)v9 == 2)
        *(_QWORD *)(v9 + 8) |= 0x800uLL;
      else
        *(_OWORD *)v9 = xmmword_1C6A5FBF0;
    }
    if (*((_BYTE *)a4 + 20))
      v10 = (32 * *((unsigned __int8 *)a4 + 12)) | 0x10;
    else
      v10 = 32 * *((unsigned __int8 *)a4 + 12);
    if (*((_DWORD *)a4 + 6) == 1)
      v10 |= 0x200000000000uLL;
    if (*((_DWORD *)a4 + 2))
      v11 = 0;
    else
      v11 = ((unint64_t)*((unsigned int *)a4 + 7) << 48) + 0x1000000000000;
    v12 = v11 | v10;
    v13 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v8);
    if (*(_BYTE *)v13 == 2)
      v12 |= v13[1];
    else
      *v13 = 2;
    v13[1] = v12;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C2E878(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a4;
  if ((v4 & 0xFFFFFE03) != 0)
    return 0;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 736) + ((v4 >> 1) & 0x7FFE));
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  *v7 = 1;
  v7[1] = v6;
  if (*((_BYTE *)a4 + 20))
    v8 = (32 * *((unsigned __int8 *)a4 + 12)) | 0x10;
  else
    v8 = 32 * *((unsigned __int8 *)a4 + 12);
  if (*((_DWORD *)a4 + 6) == 1)
    v8 |= 0x200000000000uLL;
  if (*((_BYTE *)a4 + 13))
    v8 |= 8uLL;
  v9 = a3 + 1;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = (_QWORD *)(v10 + 16 * v9);
  if (*(_BYTE *)v11 == 2)
  {
    v11 = (_QWORD *)(v10 + 16 * v9);
    v8 |= v11[1];
  }
  else
  {
    *v11 = 2;
  }
  v11[1] = v8;
  return 3;
}

double sub_1C4C2E928(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3)
{
  unsigned int v6;
  double result;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v6 = sub_1C4C2FD5C(*a2);
  if ((a3 & 0xFE0F) == 0)
  {
    v8 = (_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v6);
    v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2880) + 2 * (a3 >> 4));
    *v8 = 1;
    v8[1] = v9;
  }
  v10 = (_OWORD *)(*((_QWORD *)a2 + 2) + 16 * (v6 + 1));
  if (*(_BYTE *)v10 != 2)
  {
    *(_QWORD *)&result = 2;
    *v10 = xmmword_1C64169D0;
  }
  return result;
}

uint64_t sub_1C4C2E9B4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  result = (uint64_t)sub_1C4C2F9E4((_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3), *a4, *(_QWORD **)(a1 + 24), dword_1C6A5FD3C[*((int *)a4 + 2)]);
  if ((_DWORD)result)
  {
    v8 = a3 + 1;
    if (*((_DWORD *)a4 + 2) == 4)
    {
      v9 = *(_QWORD *)(a2 + 16) + 16 * v8;
      if (*(_BYTE *)v9 == 2)
        *(_QWORD *)(v9 + 8) |= 0x800uLL;
      else
        *(_OWORD *)v9 = xmmword_1C6A5FBF0;
    }
    if (*((_BYTE *)a4 + 20))
      v10 = (32 * *((unsigned __int8 *)a4 + 12)) | 0x10;
    else
      v10 = 32 * *((unsigned __int8 *)a4 + 12);
    if (*((_DWORD *)a4 + 6) == 1)
      v10 |= 0x200000000000uLL;
    if (*((_DWORD *)a4 + 2))
      v11 = 0;
    else
      v11 = ((unint64_t)*((unsigned int *)a4 + 7) << 48) + 0x1000000000000;
    v12 = v11 | v10;
    v13 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v8);
    if (*(_BYTE *)v13 == 2)
      v12 |= v13[1];
    else
      *v13 = 2;
    v13[1] = v12;
    return 3;
  }
  return result;
}

uint64_t sub_1C4C2EAC0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a4;
  if ((v4 & 0xFFFFFF01) != 0)
    return 0;
  v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 320) + ((unsigned __int16)v4 & 0xFFFE));
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  *v7 = 1;
  v7[1] = v6;
  if (*((_BYTE *)a4 + 20))
    v8 = (32 * *((unsigned __int8 *)a4 + 12)) | 0x10;
  else
    v8 = 32 * *((unsigned __int8 *)a4 + 12);
  if (*((_DWORD *)a4 + 6) == 1)
    v8 |= 0x200000000000uLL;
  if (*((_BYTE *)a4 + 13))
    v8 |= 8uLL;
  v9 = a3 + 1;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = (_QWORD *)(v10 + 16 * v9);
  if (*(_BYTE *)v11 == 2)
  {
    v11 = (_QWORD *)(v10 + 16 * v9);
    v8 |= v11[1];
  }
  else
  {
    *v11 = 2;
  }
  v11[1] = v8;
  return 3;
}

double sub_1C4C2EB6C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3)
{
  unsigned int v6;
  double result;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v6 = sub_1C4C2FD5C(*a2);
  if ((a3 & 0xFE07) == 0)
  {
    v8 = (_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v6);
    v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1824) + 2 * (a3 >> 3));
    *v8 = 1;
    v8[1] = v9;
  }
  v10 = (_OWORD *)(*((_QWORD *)a2 + 2) + 16 * (v6 + 1));
  if (*(_BYTE *)v10 != 2)
  {
    *(_QWORD *)&result = 2;
    *v10 = xmmword_1C64169D0;
  }
  return result;
}

double sub_1C4C2EBF8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  int v8;
  double result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;

  v8 = 1;
  if (a5)
    v8 = 2;
  if (sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, (int *)a4, *(_DWORD *)(a4 + 8), *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 24), v8) == 3)
  {
    if (*(_BYTE *)(a4 + 16))
      v10 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x20;
    else
      v10 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    if (*(_DWORD *)(a4 + 12) == 4)
      v10 |= 0x800uLL;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
      v11 = 2;
    else
      v11 = 1;
    v12 = v11 + a3;
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_QWORD *)(v13 + 16 * v12);
    if (*(_BYTE *)v14 == 2)
    {
      v14 = (_QWORD *)(v13 + 16 * v12);
      v10 |= v14[1];
    }
    else
    {
      *v14 = 2;
    }
    v14[1] = v10;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      v15 = (_OWORD *)(*(_QWORD *)(a2 + 16) + 16 * (a3 + 1));
      if (*(_BYTE *)v15 != 2)
      {
        *(_QWORD *)&result = 2;
        *v15 = xmmword_1C64169D0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2ED08(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v53 = sub_1C4C2FD5C(v7);
  v52 = sub_1C4C2FD5C(v7);
  v51 = sub_1C4C2FD5C(v7);
  v50 = sub_1C4C2FD5C(v7);
  v49 = sub_1C4C2FD5C(v7);
  v48 = sub_1C4C2FD5C(v7);
  v47 = sub_1C4C2FD5C(v7);
  v46 = sub_1C4C2FD5C(v7);
  v45 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 160);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 128));
    v20 = *(int *)(a4 + 164);
    if (v20 > 6)
      v21 = 0;
    else
      v21 = qword_1C6A5FD50[v20];
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    v23 = *(int *)(a4 + 168);
    if (v23 > 6)
      v24 = 0;
    else
      v24 = qword_1C6A5FD50[v23];
    v25 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v25 = 2;
    v25[1] = v24;
    v26 = *(int *)(a4 + 172);
    if (v26 > 6)
      v27 = 0;
    else
      v27 = qword_1C6A5FD50[v26];
    v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
    *v28 = 2;
    v28[1] = v27;
    result = sub_1C4C27704((uint64_t)a1, a3, v13, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v53, a4 + 56);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27704((uint64_t)a1, a3, v52, a4 + 84);
        if ((_DWORD)result == 3)
        {
          v29 = *(unsigned int *)(a4 + 176);
          v30 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v51);
          *v30 = 2;
          v30[1] = v29;
          v31 = *(unsigned int *)(a4 + 180);
          v32 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v50);
          *v32 = 2;
          v32[1] = v31;
          v33 = *(unsigned int *)(a4 + 184);
          v34 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v49);
          *v34 = 2;
          v34[1] = v33;
          v35 = *(unsigned int *)(a4 + 188);
          v36 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v48);
          *v36 = 2;
          v36[1] = v35;
          v37 = *(unsigned int *)(a4 + 192);
          v38 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v47);
          *v38 = 2;
          v38[1] = v37;
          v39 = *(unsigned int *)(a4 + 196);
          v40 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v46);
          *v40 = 2;
          v40[1] = v39;
          v41 = *(unsigned int *)(a4 + 200);
          v42 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v45);
          *v42 = 2;
          v42[1] = v41;
          v43 = *(unsigned int *)(a4 + 204);
          v44 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
          *v44 = 2;
          v44[1] = v43;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2F074(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v53 = sub_1C4C2FD5C(v8);
  v52 = sub_1C4C2FD5C(v8);
  v51 = sub_1C4C2FD5C(v8);
  v50 = sub_1C4C2FD5C(v8);
  v49 = sub_1C4C2FD5C(v8);
  v48 = sub_1C4C2FD5C(v8);
  v47 = sub_1C4C2FD5C(v8);
  v46 = sub_1C4C2FD5C(v8);
  v45 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v9);
  v17 = *(unsigned __int8 *)(a5 + 85);
  if ((_DWORD)v17 == 6)
  {
    v18 = 2;
  }
  else if ((_DWORD)v17 == 7)
  {
    v18 = 1;
  }
  else
  {
    v18 = v17 + 71;
  }
  *v16 = 1;
  v16[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 136), (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
  v19 = (*(_DWORD *)(a5 + 140) - 1);
  if (v19 < 7)
    v20 = v19 + 1;
  else
    v20 = 0;
  v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  *v21 = 2;
  v21[1] = v20;
  v22 = (*(_DWORD *)(a5 + 144) - 1);
  if (v22 < 7)
    v23 = v22 + 1;
  else
    v23 = 0;
  v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  *v24 = 2;
  v24[1] = v23;
  v25 = (*(_DWORD *)(a5 + 148) - 1);
  if (v25 < 7)
    v26 = v25 + 1;
  else
    v26 = 0;
  v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
  *v27 = 2;
  v27[1] = v26;
  result = sub_1C4C2A160((uint64_t)a1, a3, v14, a5);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2A160((uint64_t)a1, a3, v53, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v52, a5 + 56);
      if ((_DWORD)result == 3)
      {
        v29 = *(unsigned __int8 *)(a5 + 152);
        v30 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v51);
        *v30 = 2;
        v30[1] = v29;
        v31 = *(unsigned __int8 *)(a5 + 153);
        v32 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v50);
        *v32 = 2;
        v32[1] = v31;
        v33 = *(unsigned __int8 *)(a5 + 154);
        v34 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v49);
        *v34 = 2;
        v34[1] = v33;
        v35 = *(unsigned __int8 *)(a5 + 155);
        v36 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v48);
        *v36 = 2;
        v36[1] = v35;
        v37 = *(unsigned __int8 *)(a5 + 156);
        v38 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v47);
        *v38 = 2;
        v38[1] = v37;
        v39 = *(unsigned __int8 *)(a5 + 157);
        v40 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v46);
        *v40 = 2;
        v40[1] = v39;
        v41 = *(unsigned __int8 *)(a5 + 158);
        v42 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v45);
        *v42 = 2;
        v42[1] = v41;
        v43 = *(unsigned __int8 *)(a5 + 159);
        v44 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v44 = 2;
        v44[1] = v43;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2F384(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v53 = sub_1C4C2FD5C(v8);
  v52 = sub_1C4C2FD5C(v8);
  v51 = sub_1C4C2FD5C(v8);
  v50 = sub_1C4C2FD5C(v8);
  v49 = sub_1C4C2FD5C(v8);
  v48 = sub_1C4C2FD5C(v8);
  v47 = sub_1C4C2FD5C(v8);
  v46 = sub_1C4C2FD5C(v8);
  v45 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v9);
  v17 = *(unsigned __int8 *)(a5 + 85);
  if ((_DWORD)v17 == 6)
  {
    v18 = 2;
  }
  else if ((_DWORD)v17 == 7)
  {
    v18 = 1;
  }
  else
  {
    v18 = v17 + 71;
  }
  *v16 = 1;
  v16[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 136), (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
  v19 = *(int *)(a5 + 140);
  if (v19 > 6)
    v20 = 0;
  else
    v20 = qword_1C6A5FD50[v19];
  v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  *v21 = 2;
  v21[1] = v20;
  v22 = *(int *)(a5 + 144);
  if (v22 > 6)
    v23 = 0;
  else
    v23 = qword_1C6A5FD50[v22];
  v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  *v24 = 2;
  v24[1] = v23;
  v25 = *(int *)(a5 + 148);
  if (v25 > 6)
    v26 = 0;
  else
    v26 = qword_1C6A5FD50[v25];
  v27 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
  *v27 = 2;
  v27[1] = v26;
  result = sub_1C4C27704((uint64_t)a1, a3, v14, a5);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27704((uint64_t)a1, a3, v53, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27704((uint64_t)a1, a3, v52, a5 + 56);
      if ((_DWORD)result == 3)
      {
        v29 = *(unsigned __int8 *)(a5 + 152);
        v30 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v51);
        *v30 = 2;
        v30[1] = v29;
        v31 = *(unsigned __int8 *)(a5 + 153);
        v32 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v50);
        *v32 = 2;
        v32[1] = v31;
        v33 = *(unsigned __int8 *)(a5 + 154);
        v34 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v49);
        *v34 = 2;
        v34[1] = v33;
        v35 = *(unsigned __int8 *)(a5 + 155);
        v36 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v48);
        *v36 = 2;
        v36[1] = v35;
        v37 = *(unsigned __int8 *)(a5 + 156);
        v38 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v47);
        *v38 = 2;
        v38[1] = v37;
        v39 = *(unsigned __int8 *)(a5 + 157);
        v40 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v46);
        *v40 = 2;
        v40[1] = v39;
        v41 = *(unsigned __int8 *)(a5 + 158);
        v42 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v45);
        *v42 = 2;
        v42[1] = v41;
        v43 = *(unsigned __int8 *)(a5 + 159);
        v44 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
        *v44 = 2;
        v44[1] = v43;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C2F6C4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, unsigned int a6, int a7, unsigned int a8, int a9)
{
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v29;
  unint64_t v30;
  unint64_t v31;

  v12 = (uint64_t *)(a3 + 16 * a4);
  v13 = a6;
  v14 = 2;
  switch(a6)
  {
    case 0u:
      goto LABEL_27;
    case 1u:
      v13 = *(unsigned __int16 *)a5;
      goto LABEL_22;
    case 2u:
      switch(a7)
      {
        case 3:
          LODWORD(v25) = 21;
          goto LABEL_36;
        case 2:
          v15 = a9 - 1;
          if ((a9 - 1) >= 5)
            return 0;
          v16 = &unk_1C6A5FDAC;
          goto LABEL_32;
        case 1:
          v15 = a9 - 1;
          if ((a9 - 1) >= 9)
            return 0;
          v16 = &unk_1C6A5FD88;
LABEL_32:
          LODWORD(v25) = v16[v15];
          goto LABEL_36;
      }
      v25 = 0;
      if (a9 != 1)
      {
        if (a9 != 2)
          return v25;
        LODWORD(v25) = 8;
      }
LABEL_36:
      if ((sub_1C4C2F9E4(v12, *(unsigned __int16 *)a5, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24), v25) & 1) != 0)
        return 3;
      else
        return 0;
    case 3u:
      if ((a7 - 1) > 3)
        return 0;
      v17 = dword_1C6A5FC20[a7 - 1] * a9;
      v18 = *(unsigned __int16 *)a5;
      v19 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 24, 3);
      *(_BYTE *)v19 = 1;
      *(_DWORD *)(v19 + 1) = *(unsigned __int8 *)(v19 + 4) << 24;
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 16) = v18;
      v20 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 48, 3);
      *(_DWORD *)(v20 + 9) = *(unsigned __int8 *)(v20 + 12) << 24;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)v20 = &off_1E80BF520;
      *(_DWORD *)(v20 + 24) = 0;
      goto LABEL_25;
    case 4u:
      if (a4 || !sub_1C4C9179C(a2, *(_DWORD *)a1))
      {
        v13 = *a5;
LABEL_22:
        v14 = 2;
        goto LABEL_27;
      }
      v21 = *a5;
      if (a7 == 2)
      {
        v23 = 10;
        v22 = 4;
      }
      else
      {
        if (a7 != 1)
          return 0;
        v22 = 2;
        v23 = 9;
      }
      v29 = v22 * a9;
      v30 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 24, 3);
      *(_BYTE *)v30 = 1;
      *(_DWORD *)(v30 + 1) = *(unsigned __int8 *)(v30 + 4) << 24;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = v21;
      v31 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 48, 3);
      *(_DWORD *)(v31 + 9) = *(unsigned __int8 *)(v31 + 12) << 24;
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)v31 = &off_1E80BF520;
      *(_DWORD *)(v31 + 24) = v23;
      *(_QWORD *)(v31 + 32) = v30;
      *(_DWORD *)(v31 + 40) = v29;
      *(_BYTE *)(v31 + 8) = 4;
      v13 = v31 + 8;
      goto LABEL_26;
    case 7u:
      v13 = sub_1C61727F8(*a5);
      v14 = 1;
      goto LABEL_27;
    default:
      if (a8 >= 5)
        v24 = 0;
      else
        v24 = a8 + 4;
      if (a7 == 1)
      {
        v26 = 2;
      }
      else
      {
        v25 = 0;
        if (a7 != 2)
          return v25;
        v26 = 4;
      }
      v17 = v26 * a9;
      v27 = *(unsigned __int16 *)a5;
      v19 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 24, 3);
      *(_BYTE *)v19 = 1;
      *(_DWORD *)(v19 + 1) = *(unsigned __int8 *)(v19 + 4) << 24;
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 16) = v27;
      v20 = sub_1C484358C(*(_QWORD *)(a1 + 16) + 192, 48, 3);
      *(_DWORD *)(v20 + 9) = *(unsigned __int8 *)(v20 + 12) << 24;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)v20 = &off_1E80BF520;
      *(_DWORD *)(v20 + 24) = v24;
LABEL_25:
      *(_QWORD *)(v20 + 32) = v19;
      *(_DWORD *)(v20 + 40) = v17;
      *(_BYTE *)(v20 + 8) = 4;
      v13 = v20 + 8;
LABEL_26:
      v14 = 5;
LABEL_27:
      *v12 = v14;
      v12[1] = v13;
      return 3;
  }
}

_QWORD *sub_1C4C2F9E4(_QWORD *result, unsigned int a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  switch(a4)
  {
    case 0:
      if (a2 >= 0x100)
        return 0;
      goto LABEL_60;
    case 1:
      if ((a2 & 0xFFFFFF01) != 0)
        return 0;
      a2 >>= 1;
      a3 += 4;
      goto LABEL_60;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 13:
    case 14:
    case 17:
    case 18:
    case 19:
    case 22:
      __break(1u);
      return result;
    case 8:
      if (a2 > 0xFE)
        return 0;
      a3 += 32;
      goto LABEL_60;
    case 10:
      if ((a2 & 0xFFFFFF01) != 0)
        return 0;
      a2 >>= 1;
      a3 += 40;
      goto LABEL_60;
    case 12:
      if (a2 > 0xFF)
        return 0;
      a3 += 48;
      goto LABEL_60;
    case 15:
      if (a2 > 0xFD)
        return 0;
      a3 += 60;
      goto LABEL_60;
    case 16:
      v4 = 0;
      if (a2 > 0xFD || (a2 & 1) != 0)
        return (_QWORD *)v4;
      a2 >>= 1;
      a3 += 64;
      goto LABEL_60;
    case 20:
      if (a2 > 0xFC)
        return 0;
      a3 += 80;
      goto LABEL_60;
    case 21:
      v4 = 0;
      if (a2 > 0xFD || (a2 & 1) != 0)
        return (_QWORD *)v4;
      a2 >>= 1;
      a3 += 84;
      goto LABEL_60;
    case 23:
      if ((a2 & 0xFFFFFE03) != 0)
        return 0;
      a2 >>= 2;
      a3 += 92;
      goto LABEL_60;
    default:
      if (a4 > 56)
      {
        if (a4 > 75)
        {
          if (a4 == 76)
          {
            v4 = 0;
            if (a2 > 0xF3 || (a2 & 1) != 0)
              return (_QWORD *)v4;
            a2 >>= 1;
            a3 += 304;
            goto LABEL_60;
          }
          if (a4 == 83)
          {
            v4 = 0;
            if (a2 > 0xF1 || (a2 & 1) != 0)
              return (_QWORD *)v4;
            a2 >>= 1;
            a3 += 332;
            goto LABEL_60;
          }
          if ((a2 & 0xFFFFFE0F) == 0)
          {
            a2 >>= 4;
            a3 += 360;
            goto LABEL_60;
          }
        }
        else
        {
          if (a4 != 57)
          {
            if (a4 == 65)
            {
              v4 = 0;
              if (a2 > 0xF7 || (a2 & 1) != 0)
                return (_QWORD *)v4;
              a2 >>= 1;
              a3 += 260;
            }
            else
            {
              v4 = 0;
              if (a2 > 0xF5 || (a2 & 1) != 0)
                return (_QWORD *)v4;
              a2 >>= 1;
              a3 += 280;
            }
            goto LABEL_60;
          }
          if ((a2 & 0xFFFFFE07) == 0)
          {
            a2 >>= 3;
            a3 += 228;
            goto LABEL_60;
          }
        }
        return 0;
      }
      if (a4 <= 43)
        return (_QWORD *)((uint64_t (*)(void))((char *)&loc_1C4C2FA18 + 4 * byte_1C6A5FC89[a4 - 29]))();
      if (a4 == 44)
      {
        v4 = 0;
        if (a2 > 0xF9 || (a2 & 1) != 0)
          return (_QWORD *)v4;
        a2 >>= 1;
        a3 += 176;
        goto LABEL_60;
      }
      if (a4 == 50)
      {
        if (a2 <= 0xF8)
        {
          a3 += 200;
          goto LABEL_60;
        }
        return 0;
      }
      v4 = 0;
      if (a2 > 0xF9 || (a2 & 1) != 0)
        return (_QWORD *)v4;
      a2 >>= 1;
      a3 += 204;
LABEL_60:
      v5 = *(unsigned __int16 *)(*a3 + 2 * a2);
      v4 = 1;
      *result = 1;
      result[1] = v5;
      return (_QWORD *)v4;
  }
}

uint64_t sub_1C4C2FC84(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;

  if (a5 > 4)
    LODWORD(v8) = 0;
  else
    v8 = qword_1C6A5FDC0[a5];
  LOWORD(v14) = *(_WORD *)a4;
  result = sub_1C4C2F6C4(a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 16), a3, &v14, 5u, 2, a5, v8);
  if ((_DWORD)result == 3)
  {
    if (*(_BYTE *)(a4 + 24))
      v10 = ((unint64_t)*(unsigned int *)(a4 + 20) << 20) | 0x10;
    else
      v10 = (unint64_t)*(unsigned int *)(a4 + 20) << 20;
    v11 = a3 + 1;
    v12 = *(_QWORD *)(a2 + 16);
    v13 = (_QWORD *)(v12 + 16 * v11);
    if (*(_BYTE *)v13 == 2)
    {
      v13 = (_QWORD *)(v12 + 16 * v11);
      v10 |= v13[1];
    }
    else
    {
      *v13 = 2;
    }
    v13[1] = v10;
  }
  return result;
}

uint64_t sub_1C4C2FD5C(int a1)
{
  uint64_t v1;

  v1 = (a1 - 256);
  if (v1 >> 2 > 0x8D0)
    return 0xFFFFFFFFLL;
  else
    return ((uint64_t (*)(void))((char *)&loc_1C4C2FD84 + 4 * word_1C6A5FDE8[v1]))();
}

void sub_1C4C30DDC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30DEC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30E00()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30E14()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E28()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E3C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E50()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E64()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E78()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30E8C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30EA0()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30EB4()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30EC8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30EDC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30EF0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F04()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30F18()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F2C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F40()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F54()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F68()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F7C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30F90()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30FA8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30FC0()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C30FD4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30FE8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C30FFC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31010()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31024()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3103C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31050()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31068()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3107C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31090()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C310A4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C310B8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C310CC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C310E0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C310F4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31108()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3111C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31130()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31144()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3115C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31174()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3118C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C311A4()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C311BC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C311D4()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C311EC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31204()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3121C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31234()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3124C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31264()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3127C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31290()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C312A8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C312C0()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C312D8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C312F0()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31308()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31320()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31338()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31350()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31364()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31378()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3138C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C313A0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C313B4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C313C8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C313DC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C313F0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31404()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31418()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3142C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31440()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31454()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3146C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31480()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31494()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C314A8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C314BC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C314D0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C314E4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C314F8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31510()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31528()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3153C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31550()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31564()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C3157C()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31594()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C315AC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C315C4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C315D8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C315F0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31604()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31618()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3162C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31640()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31654()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31668()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3167C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31690()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C316A4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C316B8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C316CC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C316E0()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C316F4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31708()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3171C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31730()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31744()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31758()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3176C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31780()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C31794()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C317A8()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C317BC()
{
  JUMPOUT(0x1C4C2FD98);
}

void sub_1C4C317D0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C317E4()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C317F8()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3180C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31820()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31834()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31848()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C3185C()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31870()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31884()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C31898()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C318AC()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C318C0()
{
  JUMPOUT(0x1C4C2FD94);
}

void sub_1C4C318D4()
{
  JUMPOUT(0x1C4C2FD94);
}

uint64_t sub_1C4C318E8(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C31908 + 4 * word_1C6A64470[a1 - 2177]))();
}

uint64_t sub_1C4C31908@<X0>(uint64_t result@<X0>, int32x4_t *a2@<X1>, unsigned int a3@<W2>, int32x4_t *a4@<X8>)
{
  *a2 = a4[15];
  if (!a2[1].i8[4])
    a2[1].i8[4] = 1;
  a2[1].i32[0] = 6;
  a2[2].i64[0] = 0;
  a2[2].i64[1] = 0;
  a2[1].i64[1] = 0;
  a2[3].i64[1] = 0x200000002;
  a2[4].i16[0] = 0;
  a2[4].i8[2] = (result & 0xFFFFFFBF) == 2220;
  *a2 = vaddq_s32(vdupq_n_s32(a3), a4[15]);
  a2[1].i32[0] = a3 + 6;
  if (a2[3].i8[4])
    a2[3].i32[0] += a3;
  return result;
}

void sub_1C4C32050(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1C4C3194CLL);
}

void sub_1C4C320B4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x800000002;
  *(_WORD *)(a1 + 64) = 0;
  JUMPOUT(0x1C4C31960);
}

void sub_1C4C32130(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1C4C3194CLL);
}

void sub_1C4C32194(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 52);
  *(_DWORD *)(a2 + 48) = 6;
  if (!v2)
    *(_BYTE *)(a2 + 52) = 1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 56) = 1;
  *(_WORD *)(a2 + 64) = 1;
  JUMPOUT(0x1C4C31964);
}

void sub_1C4C3255C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 16) = 0;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x800000002;
  *(_WORD *)(a1 + 64) = 1;
  JUMPOUT(0x1C4C31964);
}

void sub_1C4C325D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 16) = 0;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x500000002;
  *(_WORD *)(a1 + 64) = 1;
  JUMPOUT(0x1C4C32640);
}

void sub_1C4C32650(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 7;
  *(_QWORD *)(a1 + 56) = 0x500000003;
  *(_WORD *)(a1 + 64) = 1;
  JUMPOUT(0x1C4C31960);
}

void sub_1C4C326DC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 7;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  JUMPOUT(0x1C4C3194CLL);
}

void sub_1C4C32740(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0x100000001;
  *(_WORD *)(a1 + 64) = 0;
  JUMPOUT(0x1C4C31960);
}

void sub_1C4C327B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 9;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 8;
  *(_QWORD *)(a1 + 56) = 0x100000001;
  JUMPOUT(0x1C4C31B54);
}

void sub_1C4C32848(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = 7;
  *(_QWORD *)(a1 + 56) = 1;
  JUMPOUT(0x1C4C31A2CLL);
}

uint64_t sub_1C4C328C4@<X0>(uint64_t result@<X0>, int32x4_t *a2@<X1>, unsigned int a3@<W2>, int32x4_t *a4@<X8>)
{
  int v4;

  v4 = a2[3].u8[4];
  a2[3].i32[0] = 7;
  if (!v4)
    a2[3].i8[4] = 1;
  return sub_1C4C31908(result, a2, a3, a4);
}

void sub_1C4C328E0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(a1 + 48) = 8;
  if (!v2)
    *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 240);
  if (!*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 16) = 6;
  if (!*(_BYTE *)(a1 + 36))
    *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 32) = 7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  JUMPOUT(0x1C4C32958);
}

uint64_t sub_1C4C32970(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 5;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 41;
      break;
    case 1:
      result = 14;
      break;
    case 2:
      result = 39;
      break;
    case 3:
      result = 37;
      break;
    case 4:
      result = 53;
      break;
    case 5:
      result = 52;
      break;
    case 6:
      result = 43;
      break;
    case 7:
      result = 44;
      break;
    case 8:
      result = 61;
      break;
    case 9:
      return result;
    case 10:
      result = 60;
      break;
    case 11:
      result = 46;
      break;
    case 12:
      result = 2;
      break;
    case 13:
      result = 12;
      break;
    case 14:
      result = 31;
      break;
    case 15:
      result = 32;
      break;
    case 16:
      result = 29;
      break;
    case 17:
      result = 30;
      break;
    case 18:
      result = 13;
      break;
    case 19:
      result = 9;
      break;
    case 20:
      result = 10;
      break;
    case 21:
      result = 11;
      break;
    case 22:
      result = 65;
      break;
    case 23:
      result = 64;
      break;
    case 24:
      result = 63;
      break;
    case 25:
      result = 62;
      break;
    case 26:
      result = 42;
      break;
    case 27:
      result = 47;
      break;
    case 28:
      result = 66;
      break;
    case 29:
      result = 15;
      break;
    case 30:
      result = 33;
      break;
    case 31:
      result = 34;
      break;
    case 32:
      result = 8;
      break;
    case 33:
      result = 58;
      break;
    case 34:
      result = 45;
      break;
    case 35:
      result = 67;
      break;
    case 36:
      result = 5;
      break;
    case 37:
      result = 16;
      break;
    case 38:
      result = 7;
      break;
    case 39:
      result = 6;
      break;
    case 40:
      result = 38;
      break;
    case 41:
      result = 48;
      break;
    case 42:
      result = 49;
      break;
    case 43:
      result = 50;
      break;
    case 44:
      result = 20;
      break;
    case 45:
      result = 21;
      break;
    case 46:
      result = 22;
      break;
    case 47:
      result = 26;
      break;
    case 48:
      result = 17;
      break;
    case 49:
      result = 27;
      break;
    case 50:
      result = 18;
      break;
    case 51:
      result = 28;
      break;
    case 52:
      result = 19;
      break;
    case 53:
      result = 57;
      break;
    case 54:
      result = 23;
      break;
    case 55:
      result = 24;
      break;
    case 56:
      result = 25;
      break;
    case 57:
      result = 40;
      break;
    case 58:
      result = 35;
      break;
    case 59:
      result = 36;
      break;
    case 60:
      result = 56;
      break;
    case 61:
      result = 55;
      break;
    case 62:
      result = 54;
      break;
    case 63:
      result = 51;
      break;
    case 64:
      result = 59;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Special register not implemented yet for G15", (const char *)1);
  }
  return result;
}

uint64_t sub_1C4C32BD0(int a1)
{
  return ((uint64_t (*)())((char *)sub_1C4C32BEC + 4 * byte_1C6A645F5[a1]))();
}

uint64_t sub_1C4C32BEC()
{
  return 58;
}

uint64_t sub_1C4C32BF4()
{
  return 80;
}

uint64_t sub_1C4C32BFC()
{
  return 59;
}

uint64_t sub_1C4C32C04()
{
  return 81;
}

uint64_t sub_1C4C32C0C()
{
  return 118;
}

uint64_t sub_1C4C32C14()
{
  return 48;
}

uint64_t sub_1C4C32C1C()
{
  return 23;
}

uint64_t sub_1C4C32C24()
{
  return 63;
}

uint64_t sub_1C4C32C2C()
{
  return 119;
}

uint64_t sub_1C4C32C34()
{
  return 8;
}

uint64_t sub_1C4C32C3C()
{
  return 9;
}

uint64_t sub_1C4C32C44()
{
  return 49;
}

uint64_t sub_1C4C32C4C()
{
  return 52;
}

uint64_t sub_1C4C32C54()
{
  return 112;
}

uint64_t sub_1C4C32C5C()
{
  return 62;
}

uint64_t sub_1C4C32C64()
{
  return 25;
}

uint64_t sub_1C4C32C6C()
{
  return 117;
}

uint64_t sub_1C4C32C74()
{
  return 105;
}

uint64_t sub_1C4C32C7C()
{
  return 51;
}

uint64_t sub_1C4C32C84()
{
  return 82;
}

uint64_t sub_1C4C32C8C()
{
  return 12;
}

uint64_t sub_1C4C32C94()
{
  return 13;
}

uint64_t sub_1C4C32C9C()
{
  return 50;
}

uint64_t sub_1C4C32CA4()
{
  return 53;
}

uint64_t sub_1C4C32CAC()
{
  return 100;
}

uint64_t sub_1C4C32CB4()
{
  return 101;
}

uint64_t sub_1C4C32CBC()
{
  return 115;
}

uint64_t sub_1C4C32CC4()
{
  return 114;
}

uint64_t sub_1C4C32CCC()
{
  return 113;
}

uint64_t sub_1C4C32CD4()
{
  return 56;
}

uint64_t sub_1C4C32CDC()
{
  return 120;
}

uint64_t sub_1C4C32CE4()
{
  return 103;
}

uint64_t sub_1C4C32CEC()
{
  return 102;
}

uint64_t sub_1C4C32CF4()
{
  return 10;
}

uint64_t sub_1C4C32CFC()
{
  return 57;
}

uint64_t sub_1C4C32D04()
{
  return 104;
}

uint64_t sub_1C4C32D0C()
{
  return 121;
}

uint64_t sub_1C4C32D14()
{
  return 60;
}

uint64_t sub_1C4C32D1C()
{
  return 124;
}

uint64_t sub_1C4C32D24()
{
  return 76;
}

uint64_t sub_1C4C32D2C()
{
  return 77;
}

uint64_t sub_1C4C32D34()
{
  return 78;
}

uint64_t sub_1C4C32D3C()
{
  return 79;
}

uint64_t sub_1C4C32D44()
{
  return 14;
}

uint64_t sub_1C4C32D4C()
{
  return 15;
}

uint64_t sub_1C4C32D58()
{
  return 32;
}

uint64_t sub_1C4C32D60()
{
  return 54;
}

uint64_t sub_1C4C32D68()
{
  return 18;
}

uint64_t sub_1C4C32D70()
{
  return 19;
}

uint64_t sub_1C4C32D78()
{
  return 20;
}

uint64_t sub_1C4C32D80()
{
  return 21;
}

uint64_t sub_1C4C32D88()
{
  return 24;
}

uint64_t sub_1C4C32D90()
{
  return 28;
}

uint64_t sub_1C4C32D98()
{
  return 30;
}

uint64_t sub_1C4C32DA0()
{
  return 31;
}

uint64_t sub_1C4C32DA8()
{
  return 96;
}

uint64_t sub_1C4C32DB0()
{
  return 97;
}

uint64_t sub_1C4C32DB8()
{
  return 98;
}

uint64_t sub_1C4C32DC0()
{
  return 146;
}

uint64_t sub_1C4C32DC8()
{
  return 147;
}

uint64_t sub_1C4C32DD0()
{
  return 144;
}

uint64_t sub_1C4C32DD8()
{
  return 116;
}

uint64_t sub_1C4C32DE0()
{
  return 17;
}

uint64_t sub_1C4C32DEC(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C32E08 + 4 * word_1C6A64646[a1 - 359]))();
}

uint64_t sub_1C4C32E08(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 41)
    v2 = 67;
  else
    v2 = 86;
  if (a2 == 5)
    v2 = 2;
  if (a2)
    return v2;
  else
    return 2;
}

uint64_t sub_1C4C33710(uint64_t a1, int a2)
{
  if (a2 == 8)
    return 12;
  else
    return 86;
}

uint64_t sub_1C4C33730(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 4)
    v2 = 5;
  else
    v2 = 86;
  if (a2 == 3)
    return 4;
  else
    return v2;
}

void sub_1C4C337A8()
{
  JUMPOUT(0x1C4C33624);
}

void sub_1C4C3380C()
{
  JUMPOUT(0x1C4C338C8);
}

void sub_1C4C34AB0()
{
  JUMPOUT(0x1C4C34ACCLL);
}

uint64_t sub_1C4C43AC4(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 86;
  else
    return 2;
}

uint64_t sub_1C4C48794(uint64_t a1, unsigned int a2)
{
  if (a2 >= 3)
    return 86;
  else
    return 0;
}

uint64_t sub_1C4C49F38(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 34)
    v2 = 55;
  else
    v2 = 86;
  if (a2 == 33)
    v3 = 64;
  else
    v3 = v2;
  if (a2 == 21)
    return 36;
  else
    return v3;
}

void sub_1C4C49F6C()
{
  JUMPOUT(0x1C4C62358);
}

uint64_t sub_1C4C4A54C(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 86;
  else
    return 2;
}

uint64_t sub_1C4C4A560(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = 86;
  else
    v2 = 64;
  if (a2 == 25)
    v2 = 0;
  if (a2 == 43)
    return 69;
  else
    return v2;
}

uint64_t sub_1C4C4A568(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = 86;
  else
    v2 = 65;
  if (a2 == 25)
    v2 = 0;
  if (a2 == 43)
    return 69;
  else
    return v2;
}

void sub_1C4C4A598()
{
  JUMPOUT(0x1C4C6266CLL);
}

uint64_t sub_1C4C526D4(uint64_t a1, int a2)
{
  if (a2 == 46)
    return 79;
  else
    return 86;
}

uint64_t sub_1C4C526E8(uint64_t a1, int a2)
{
  if (a2 == 46)
    return 79;
  else
    return 86;
}

void sub_1C4C530D8()
{
  JUMPOUT(0x1C4C3364CLL);
}

void sub_1C4C53118()
{
  JUMPOUT(0x1C4C33700);
}

uint64_t sub_1C4C53188(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 34)
    v2 = 57;
  else
    v2 = 86;
  if (a2 == 40)
    v3 = 66;
  else
    v3 = v2;
  if (a2 == 33)
    return 64;
  else
    return v3;
}

uint64_t sub_1C4C531DC(uint64_t a1, int a2)
{
  if (a2 == 48)
    return 82;
  else
    return 86;
}

uint64_t sub_1C4C531EC(uint64_t a1, int a2)
{
  if (a2 == 48)
    return 83;
  else
    return 86;
}

uint64_t sub_1C4C531FC(uint64_t a1, int a2)
{
  if (a2 == 48)
    return 84;
  else
    return 86;
}

uint64_t sub_1C4C5320C(uint64_t a1, int a2)
{
  if (a2 == 49)
    return 49;
  else
    return 86;
}

uint64_t sub_1C4C5321C(uint64_t a1, int a2)
{
  if (a2 == 49)
    return 85;
  else
    return 86;
}

uint64_t sub_1C4C5322C(uint64_t a1, int a2)
{
  if (a2 == 49)
    return 41;
  else
    return 86;
}

uint64_t sub_1C4C53368(uint64_t a1, int a2)
{
  if (a2 == 5)
    return 1;
  else
    return 86;
}

uint64_t sub_1C4C53378(uint64_t a1, int a2)
{
  if (a2 == 5)
    return 2;
  else
    return 86;
}

void sub_1C4C53964()
{
  JUMPOUT(0x1C4C33500);
}

void sub_1C4C5396C()
{
  JUMPOUT(0x1C4C332D8);
}

void sub_1C4C53974()
{
  JUMPOUT(0x1C4C33170);
}

uint64_t sub_1C4C5DBA8(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 86;
  else
    return 0;
}

uint64_t sub_1C4C5DBCC(uint64_t a1, int a2)
{
  if (a2 == 1)
    return 35;
  else
    return 86;
}

void sub_1C4C5DBF8()
{
  JUMPOUT(0x1C4C5DC50);
}

void sub_1C4C5DC00()
{
  JUMPOUT(0x1C4C5DC68);
}

void sub_1C4C5DC14()
{
  JUMPOUT(0x1C4C5DC24);
}

void sub_1C4C5DCAC()
{
  JUMPOUT(0x1C4C32FF4);
}

void sub_1C4C5DD98()
{
  JUMPOUT(0x1C4C33034);
}

uint64_t sub_1C4C5F2EC(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
    return 86;
  else
    return 2;
}

void sub_1C4C5F300()
{
  JUMPOUT(0x1C4C5F308);
}

void sub_1C4C5FBB0()
{
  JUMPOUT(0x1C4C5FBC0);
}

void sub_1C4C6002C()
{
  JUMPOUT(0x1C4C33170);
}

void sub_1C4C60690()
{
  JUMPOUT(0x1C4C606B4);
}

void sub_1C4C612C8()
{
  JUMPOUT(0x1C4C62374);
}

void sub_1C4C61338()
{
  JUMPOUT(0x1C4C62374);
}

void sub_1C4C62340()
{
  JUMPOUT(0x1C4C62374);
}

char *sub_1C4C640C0(int a1)
{
  return (char *)&unk_1C6ACE440 + 4 * qword_1C6AFB1E8[a1 - 359];
}

#error "1C4C640F8: too big function (funcsize=0)"

uint64_t sub_1C4C7CC74(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C7CC94 + 4 * word_1C6A72EA0[a1 - 360]))();
}

uint64_t sub_1C4C7CC94(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  if (a2 == 44)
    LODWORD(v2) = 5;
  else
    LODWORD(v2) = 6;
  if (a2 <= 43)
    LODWORD(v2) = a2 != 33;
  if (a2 == 7)
    v3 = 3;
  else
    v3 = 4;
  if (a2 == 6)
    v4 = 2;
  else
    v4 = v3;
  if (a2 <= 32)
    return v4;
  else
    return v2;
}

uint64_t sub_1C4C7CD00(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4C91598(int a1)
{
  uint64_t result;

  result = sub_1C4C915C4(a1);
  if ((result & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  return result;
}

uint64_t sub_1C4C915C4(int a1)
{
  if ((a1 - 359) > 0x22DC)
    return 0;
  else
    return qword_1C6B20E40[a1 - 359] | 0x100000000;
}

uint64_t sub_1C4C915F0(int a1, uint64_t a2, int a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v5 = sub_1C4C7CC74(a1);
  v6 = sub_1C4C640C0(a1);
  v12 = v14;
  v13 = 0x1000000000;
  sub_1C4C940F0((unsigned int *)&v12, v6, &v6[4 * v7]);
  v8 = v12;
  *((_DWORD *)v12 + v5) = a3;
  v9 = sub_1C4C915C4(a1);
  if ((v9 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  result = sub_1C4C640F8(v9, v13, v8);
  if (v8 != v14)
  {
    v11 = result;
    free(v8);
    return v11;
  }
  return result;
}

uint64_t sub_1C4C916E0(int a1)
{
  uint64_t v1;

  v1 = sub_1C4C915C4(a1);
  if ((v1 & 0xFF00000000) == 0)
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  return (v1 < 0x2A) & (0x30030000000uLL >> v1);
}

uint64_t sub_1C4C91724(int a1)
{
  if (a1 <= 63)
  {
    if (a1 != 32)
      goto LABEL_13;
    return 14;
  }
  else
  {
    if (a1 <= 127)
    {
      if (a1 == 64)
        return 28;
LABEL_13:
      llvm::report_fatal_error((llvm *)"Invalid size", (const char *)1);
    }
    switch(a1)
    {
      case 128:
        return 64;
      case 256:
        return 105;
      case 512:
        return 127;
      default:
        goto LABEL_13;
    }
  }
}

BOOL sub_1C4C9179C(int a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;

  v4 = sub_1C4C915C4(a1);
  if ((v4 & 0xFF00000000) == 0)
    return a1 == 19 || a1 == 263;
  v5 = v4 - 1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
    case 6:
    case 8:
    case 22:
    case 23:
    case 24:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 53:
    case 58:
    case 59:
    case 65:
    case 66:
    case 75:
    case 76:
    case 80:
    case 81:
    case 83:
    case 85:
    case 87:
    case 88:
    case 89:
    case 94:
    case 95:
    case 108:
    case 109:
    case 111:
    case 113:
    case 114:
    case 115:
    case 116:
    case 118:
    case 119:
    case 124:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 147:
    case 149:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 169:
    case 170:
    case 171:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 194:
    case 200:
    case 201:
    case 202:
      return result;
    case 27:
    case 28:
    case 39:
    case 40:
      result = a2 < 4;
      break;
    default:
      return a1 == 19 || a1 == 263;
  }
  return result;
}

uint64_t *sub_1C4C91810@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  switch(a2)
  {
    case 9:
    case 20:
    case 30:
    case 59:
    case 60:
      v3 = *result;
      goto LABEL_3;
    case 10:
      v16 = *((_OWORD *)result + 70);
      *(_OWORD *)a3 = *((_OWORD *)result + 69);
      *(_OWORD *)(a3 + 16) = v16;
      v5 = result[142];
      goto LABEL_6;
    case 11:
    case 21:
    case 31:
    case 57:
      v8 = *((_OWORD *)result + 12);
      *(_OWORD *)a3 = *((_OWORD *)result + 11);
      *(_OWORD *)(a3 + 16) = v8;
      v5 = result[26];
      goto LABEL_6;
    case 12:
      v19 = *((_OWORD *)result + 65);
      *(_OWORD *)a3 = *((_OWORD *)result + 64);
      *(_OWORD *)(a3 + 16) = v19;
      v5 = result[132];
      goto LABEL_6;
    case 13:
      v13 = result + 133;
      v14 = result[137];
      goto LABEL_14;
    case 14:
      v20 = *((_OWORD *)result + 60);
      *(_OWORD *)a3 = *((_OWORD *)result + 59);
      *(_OWORD *)(a3 + 16) = v20;
      v5 = result[122];
      goto LABEL_6;
    case 15:
      v13 = result + 123;
      v14 = result[127];
      goto LABEL_14;
    case 16:
    case 26:
    case 33:
    case 61:
      v10 = *((_OWORD *)result + 44);
      *(_OWORD *)a3 = *((_OWORD *)result + 43);
      *(_OWORD *)(a3 + 16) = v10;
      v5 = result[90];
      goto LABEL_6;
    case 17:
    case 27:
    case 34:
    case 62:
      v6 = *result;
      goto LABEL_5;
    case 18:
    case 28:
    case 35:
    case 64:
      v11 = *result;
      goto LABEL_11;
    case 19:
    case 29:
    case 32:
    case 65:
      v13 = result + 143;
      v14 = result[147];
      goto LABEL_14;
    case 22:
    case 36:
      v3 = result[96];
      goto LABEL_3;
    case 23:
    case 37:
      v6 = result[96];
      goto LABEL_5;
    case 24:
    case 38:
      v11 = result[96];
      goto LABEL_11;
    case 25:
    case 39:
      v17 = result[96];
      goto LABEL_20;
    case 54:
      v3 = result[64];
      goto LABEL_3;
    case 55:
      v6 = result[64];
      goto LABEL_5;
    case 56:
      v11 = result[64];
      goto LABEL_11;
    case 58:
      v9 = *(_OWORD *)(result + 29);
      *(_OWORD *)a3 = *(_OWORD *)(result + 27);
      *(_OWORD *)(a3 + 16) = v9;
      v5 = result[31];
      goto LABEL_6;
    case 63:
      v13 = result + 91;
      v14 = result[95];
      goto LABEL_14;
    case 66:
      v3 = result[32];
LABEL_3:
      v4 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v3;
      *(_OWORD *)(a3 + 16) = v4;
      v5 = *(_QWORD *)(v3 + 32);
      goto LABEL_6;
    case 67:
      v6 = result[32];
LABEL_5:
      v7 = *(_OWORD *)(v6 + 56);
      *(_OWORD *)a3 = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(a3 + 16) = v7;
      v5 = *(_QWORD *)(v6 + 72);
      goto LABEL_6;
    case 68:
      v11 = result[32];
LABEL_11:
      v12 = *(_OWORD *)(v11 + 96);
      *(_OWORD *)a3 = *(_OWORD *)(v11 + 80);
      *(_OWORD *)(a3 + 16) = v12;
      v5 = *(_QWORD *)(v11 + 112);
      goto LABEL_6;
    case 69:
      v17 = result[32];
LABEL_20:
      v18 = *(_OWORD *)(v17 + 136);
      *(_OWORD *)a3 = *(_OWORD *)(v17 + 120);
      *(_OWORD *)(a3 + 16) = v18;
      v5 = *(_QWORD *)(v17 + 152);
      goto LABEL_6;
    case 70:
      v21 = result[32];
      v22 = *(_OWORD *)(v21 + 176);
      *(_OWORD *)a3 = *(_OWORD *)(v21 + 160);
      *(_OWORD *)(a3 + 16) = v22;
      v5 = *(_QWORD *)(v21 + 192);
      goto LABEL_6;
    case 71:
      v23 = result[32];
      v24 = *(_OWORD *)(v23 + 216);
      *(_OWORD *)a3 = *(_OWORD *)(v23 + 200);
      *(_OWORD *)(a3 + 16) = v24;
      v5 = *(_QWORD *)(v23 + 232);
LABEL_6:
      *(_QWORD *)(a3 + 32) = v5;
      break;
    case 72:
      v13 = result + 81;
      v14 = result[85];
LABEL_14:
      *(_QWORD *)(a3 + 32) = v14;
      v15 = v13[1];
      *(_OWORD *)a3 = *v13;
      *(_OWORD *)(a3 + 16) = v15;
      break;
    default:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      break;
  }
  return result;
}

uint64_t sub_1C4C919CC(unint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BYTE *v10;
  _BYTE *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[2];

  v6 = a2;
  v15 = a2;
  v16 = a1;
  v13 = a4;
  v14 = a3;
  if (a5 == 5)
    v7 = 4;
  else
    v7 = a5;
  memset(v17, 0, 13);
  v8 = HIDWORD(a1);
  if (v7 <= 3)
  {
    sub_1C4C95FE0(v7 | 0x100000000, &v14, (uint64_t)v17);
    sub_1C4C96048(v7 | 0x100000000, (int *)&v16 + 1, (int *)&v15, v17);
    sub_1C4C960E0(v7 | 0x100000000, (int *)&v16, (int *)&v15, &v13, &v14, v17);
    goto LABEL_10;
  }
  if ((_DWORD)v7 == 4)
  {
    if (a3 == 2)
    {
      LOBYTE(v17[1]) = 1;
    }
    else if (a3 == 1)
    {
      HIBYTE(v17[0]) = 1;
    }
    if ((a2 - 1) >= 2)
    {
      if (!(_DWORD)a2 || (_DWORD)a2 == 5 || (a2 - 3) > 1)
        goto LABEL_31;
      v12 = (char *)v17 + 2;
    }
    else
    {
      v12 = v17;
      if (HIDWORD(a1))
      {
        if (HIDWORD(a1) == 1)
        {
          v12 = (char *)v17 + 1;
        }
        else if (HIDWORD(a1) != 2)
        {
          sub_1C4C9622C(v7 | 0x100000000, (int *)&v16, (int *)&v15, &v13, &v14, v17);
          v10 = (char *)&v17[1] + 1;
          goto LABEL_20;
        }
      }
    }
    *v12 = 1;
LABEL_31:
    sub_1C4C9622C(v7 | 0x100000000, (int *)&v16, (int *)&v15, &v13, &v14, v17);
LABEL_10:
    BYTE1(v17[1]) = 1;
    if ((_DWORD)v8 == 1)
      BYTE2(v17[1]) = 1;
    goto LABEL_13;
  }
  sub_1C4C9622C(v7 | 0x100000000, (int *)&v16, (int *)&v15, &v13, &v14, v17);
  BYTE1(v17[1]) = 1;
LABEL_13:
  v9 = (_DWORD)v7 == 4;
  if (v6 != 5)
    goto LABEL_21;
  if (v7 < 4)
  {
    BYTE3(v17[1]) = 1;
    if (a4 != 1)
      return v17[0];
    goto LABEL_25;
  }
  if ((_DWORD)v7 != 4)
  {
    v9 = 0;
    goto LABEL_21;
  }
  v10 = (char *)&v17[1] + 3;
LABEL_20:
  v9 = 1;
  *v10 = 1;
LABEL_21:
  if (v7 < 4)
    v9 = 1;
  if (a4 == 1 && v9)
LABEL_25:
    BYTE4(v17[1]) = 1;
  return v17[0];
}

void sub_1C4C91BF4(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, _BYTE *a6@<X5>, unsigned int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, __n128 a10@<Q0>)
{
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void **v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  unsigned int v48;
  _QWORD v49[194];

  v49[192] = *MEMORY[0x1E0C80C00];
  if ((a3 - 1) < 2 && a6[2] == 0)
    v12 = 0;
  else
    v12 = a3;
  if (a6[5])
    v13 = HIDWORD(a3);
  else
    v13 = 0;
  if (!a6[8])
    a4 = 0;
  if (a2 == 2 && v12 | a5 | a4 | v13)
    llvm::report_fatal_error((llvm *)"No sampler flags can be used with 2DMSAA samples", (const char *)1);
  *a9 = a9 + 2;
  a10.n128_u64[0] = 0x1000000000;
  a9[1] = 0x1000000000;
  if (a7 <= 4)
  {
    sub_1C4C980AC();
    sub_1C4C92B54((uint64_t)a9, (uint64_t)&v47);
    v14 = (char *)v47;
    if (!v48)
      goto LABEL_44;
    v15 = 96 * v48;
    do
    {
      v16 = *(char **)&v14[v15 - 72];
      if (&v14[v15 - 56] != v16)
        free(v16);
      v15 -= 96;
    }
    while (v15);
    goto LABEL_43;
  }
  if (a8 == 94)
  {
    sub_1C4C9971C();
    sub_1C4C92B54((uint64_t)a9, (uint64_t)&v47);
    v14 = (char *)v47;
    if (!v48)
      goto LABEL_44;
    v20 = 96 * v48;
    do
    {
      v21 = *(char **)&v14[v20 - 72];
      if (&v14[v20 - 56] != v21)
        free(v21);
      v20 -= 96;
    }
    while (v20);
    goto LABEL_43;
  }
  if (a8 != 61)
  {
    sub_1C4C99AF8((uint64_t)a6, a2, v12, (uint64_t *)&v47, a10);
    sub_1C4C92B54((uint64_t)a9, (uint64_t)&v47);
    v14 = (char *)v47;
    if (!v48)
      goto LABEL_44;
    v22 = 96 * v48;
    do
    {
      v23 = *(char **)&v14[v22 - 72];
      if (&v14[v22 - 56] != v23)
        free(v23);
      v22 -= 96;
    }
    while (v22);
    goto LABEL_43;
  }
  if (a1)
    v17 = 2;
  else
    v17 = 1;
  sub_1C4C99470((uint64_t)a6, a2, v12, v17, (uint64_t)&v47, a10);
  sub_1C4C92B54((uint64_t)a9, (uint64_t)&v47);
  v14 = (char *)v47;
  if (v48)
  {
    v18 = 96 * v48;
    do
    {
      v19 = *(char **)&v14[v18 - 72];
      if (&v14[v18 - 56] != v19)
        free(v19);
      v18 -= 96;
    }
    while (v18);
LABEL_43:
    v14 = (char *)v47;
  }
LABEL_44:
  if (v14 != (char *)v49)
    free(v14);
  if (v13 != 2)
  {
    v24 = *a9;
    v25 = *((unsigned int *)a9 + 2);
    if (!(_DWORD)v25)
    {
      v27 = *a9;
      goto LABEL_55;
    }
    v26 = 0;
    v27 = v24 + 96 * v25;
    while (*(_DWORD *)(v24 + v26) != 1
         || *(_DWORD *)(v24 + v26 + 32) != 1
         || *(_DWORD *)(*(_QWORD *)(v24 + v26 + 24) + 8) != 1)
    {
      v26 += 96;
      if (96 * v25 == v26)
        goto LABEL_55;
    }
    v29 = v24 + v26;
    if (96 * v25 - 96 != v26)
    {
      v30 = v29 + 96;
      v31 = 96 * v25 - 96;
      v27 = v24 + v26;
      while (1)
      {
        v32 = v30;
        v33 = v24 + v26;
        if (*(_DWORD *)(v24 + v26 + 96) == 1
          && *(_DWORD *)(v33 + 128) == 1
          && *(_DWORD *)(*(_QWORD *)(v24 + v26 + 120) + 8) == 1)
        {
          goto LABEL_74;
        }
        v34 = *(_OWORD *)(v24 + v26 + 96);
        *(_QWORD *)(v27 + 16) = *(_QWORD *)(v24 + v26 + 112);
        *(_OWORD *)v27 = v34;
        v35 = (void **)(v27 + 24);
        v36 = (const void **)(v33 + 120);
        if (v33 + 120 != v27 + 24)
          break;
LABEL_73:
        v27 += 96;
LABEL_74:
        v30 = v32 + 96;
        v26 += 96;
        v29 = v32;
        if (v31 == v26)
        {
          v24 = *a9;
          LODWORD(v25) = *((_DWORD *)a9 + 2);
          goto LABEL_55;
        }
      }
      v37 = *v36;
      v38 = v24 + v26;
      v39 = v24 + v26 + 136;
      if ((const void *)v39 != *v36)
      {
        v45 = *(void **)(v27 + 24);
        if (v45 != (void *)(v27 + 40))
        {
          free(v45);
          v37 = *v36;
        }
        *(_QWORD *)(v27 + 24) = v37;
        v41 = (_DWORD *)(v29 + 128);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v24 + v26 + 128);
        *v36 = (const void *)v39;
        *(_DWORD *)(v24 + v26 + 132) = 0;
        goto LABEL_72;
      }
      v42 = *(_DWORD *)(v38 + 128);
      v41 = (_DWORD *)(v38 + 128);
      v40 = v42;
      v43 = *(unsigned int *)(v27 + 32);
      if (v43 >= v42)
      {
        if ((_DWORD)v40)
          memmove(*v35, v37, 28 * v40);
        goto LABEL_71;
      }
      if (*(_DWORD *)(v27 + 36) < v40)
      {
        *(_DWORD *)(v27 + 32) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 24, v27 + 40, v40, 28);
        v35 = (void **)(v27 + 24);
      }
      else if ((_DWORD)v43)
      {
        memmove(*v35, v37, 28 * v43);
        v35 = (void **)(v27 + 24);
LABEL_69:
        v44 = *v41;
        if (v43 != v44)
          memcpy((char *)*v35 + 28 * v43, (char *)*v36 + 28 * v43, (_BYTE *)*v36 + 28 * v44 - ((_BYTE *)*v36 + 28 * v43));
LABEL_71:
        *(_DWORD *)(v27 + 32) = v40;
LABEL_72:
        *v41 = 0;
        goto LABEL_73;
      }
      v43 = 0;
      goto LABEL_69;
    }
    v27 = v24 + v26;
LABEL_55:
    v28 = v24 + 96 * v25;
    if (v28 != v27)
    {
      do
      {
        v46 = *(void **)(v28 - 72);
        if ((void *)(v28 - 56) != v46)
          free(v46);
        v28 -= 96;
      }
      while (v28 != v27);
      v24 = *a9;
    }
    *((_DWORD *)a9 + 2) = -1431655765 * ((unint64_t)(v27 - v24) >> 5);
  }
}

void sub_1C4C92114(unint64_t *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v5;

  v5 = *a1;
  sub_1C4C92144((4 * *a1) & 0x300000000 | (*a1 >> 2) & 7, (v5 >> 26) & 3, (v5 >> 23) & 7, (v5 >> 44) & 7, (v5 >> 38) & 7, (v5 >> 41) & 7, a2, a3, a4, a5);
}

void sub_1C4C92144(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, __n128 a10@<Q0>)
{
  char v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;

  if (!(a1 | a2))
  {
    if (!a6)
    {
      v13 = 0;
      v15 = 1;
      goto LABEL_12;
    }
LABEL_10:
    v15 = 0;
    v13 = 1;
    goto LABEL_12;
  }
  v13 = 0;
  v14 = (_DWORD)a1 != 4 && a1 > 1;
  v15 = 1;
  if (!v14 && HIDWORD(a1) == 2 && a6)
    goto LABEL_10;
LABEL_12:
  v16 = a7 - 1;
  v17 = a4 & 0xFFFFFF00;
  v18 = a5 >> 8;
  if ((_DWORD)a1 == 4)
    v19 = a5;
  else
    v19 = 0;
  if ((_DWORD)a1 == 3)
    v20 = 0;
  else
    v20 = HIDWORD(a1);
  v21 = v16 > 4;
  if (v16 <= 4)
    v22 = 0x100000000;
  else
    v22 = 0;
  if (v16 <= 4)
    v23 = a6;
  else
    v23 = 0;
  if (v16 <= 4)
    v24 = a6 >> 8;
  else
    v24 = v15;
  v25 = !v21 && (_DWORD)a1 == 4;
  if (v21)
    v26 = 0;
  else
    v26 = v19;
  if (v21)
  {
    v18 = v15;
    v27 = 0;
  }
  else
  {
    v27 = a4;
  }
  if (v21)
  {
    v17 = 0;
    v28 = HIDWORD(a1);
  }
  else
  {
    v28 = v20;
  }
  v29 = v21 || (_DWORD)a1 != 3;
  if (a7 <= 4)
  {
    if (v15)
      v30 = v23 | ((*(_QWORD *)&v24 & 0xFFFFFFLL) << 8) | v22;
    else
      v30 = 0x100000000;
    sub_1C4C9CF18(a1, v28 | (v29 << 32), a2, a3, v22 | v17 | v27, v26 | ((*(_QWORD *)&v18 & 0xFFFFFFLL) << 8) | (v25 << 32), v30, a7);
    sub_1C4C93174(v13, a9);
    goto LABEL_60;
  }
  if (a7 != 5)
  {
    if (a8 == 94)
      goto LABEL_71;
    if (a8 != 61)
    {
LABEL_59:
      sub_1C4C9BE04(0, v28 | (unint64_t)(v29 << 32), 0, a3, v17 | v27, v26 | ((*(_QWORD *)&v18 & 0xFFFFFFLL) << 8) | (v25 << 32), v23 | (v24 << 8), 3u, a9);
LABEL_60:
      sub_1C4C93464(a4, a9);
      return;
    }
LABEL_58:
    sub_1C4C9B77C(a2, a9, a10);
    return;
  }
  if (a8 == 61)
    goto LABEL_58;
  if (a8 != 94)
  {
    if (a8 == 95)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v25 = v25;
    }
    if (a8 == 95)
    {
      v26 = 0;
      v18 = 0;
      LODWORD(v28) = 0;
      v29 = 0;
    }
    else
    {
      v29 = v29;
    }
    goto LABEL_59;
  }
  if ((_DWORD)a1 == 4)
    v25 = v25;
  else
    v25 = 1;
  if ((_DWORD)a1 != 4)
  {
    v26 = 1;
    v18 = 0;
  }
  if ((_DWORD)a1 == 3)
    v29 = 1;
  else
    v29 = v29;
  if ((_DWORD)a1 == 3)
    LODWORD(v28) = 0;
LABEL_71:
  v31 = v23 | (v24 << 8);
  if (v15)
    v32 = v31;
  else
    v32 = 0;
  sub_1C4C9B888(a1, v28 | (unint64_t)(v29 << 32), a2, v26 | ((*(_QWORD *)&v18 & 0xFFFFFFLL) << 8) | (v25 << 32), v32, 3u, a9);
  sub_1C4C93174(v13, a9);
}

uint64_t sub_1C4C9237C(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4, unsigned int a5, __n128 a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  const void **v20;
  __int128 v21;
  void **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const void **v31;
  __int128 v32;
  char *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  const void **v46;
  __int128 v47;
  void **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *i;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[194];

  v8 = a1;
  v69[192] = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v10 = (void **)(a1 + 8);
  a6.n128_u64[0] = 0x1000000000;
  *(_QWORD *)(a1 + 16) = 0x1000000000;
  v67 = v69;
  v68 = 0x1000000000;
  *(_BYTE *)a1 = v9 != -1;
  if (v9 != -1)
  {
    sub_1C4C92144((4 * *a3) & 0x300000000 | (*a3 >> 2) & 7, (*a3 >> 26) & 3, (*a3 >> 23) & 7, (*a3 >> 44) & 7, (*a3 >> 38) & 7, (*a3 >> 41) & 7, a5, a8, (uint64_t *)&v64, a6);
    sub_1C4C92B54((uint64_t)&v67, (uint64_t)&v64);
    v11 = (char *)v64;
    if (!v65)
      goto LABEL_9;
    v56 = 96 * v65;
    do
    {
      v57 = *(char **)&v11[v56 - 72];
      if (&v11[v56 - 56] != v57)
        free(v57);
      v56 -= 96;
    }
    while (v56);
    goto LABEL_8;
  }
  sub_1C4C91BF4(*(unsigned __int8 *)(a2 + 2), (*a3 >> 2) & 7, *a3 & 0x300000000 | (*a3 >> 7) & 7, *a3 & 3, (*a3 >> 10) & 1, a4, a5, a8, &v64, a6);
  sub_1C4C92B54((uint64_t)&v67, (uint64_t)&v64);
  v11 = (char *)v64;
  if (v65)
  {
    v12 = 96 * v65;
    do
    {
      v13 = *(char **)&v11[v12 - 72];
      if (&v11[v12 - 56] != v13)
        free(v13);
      v12 -= 96;
    }
    while (v12);
LABEL_8:
    v11 = (char *)v64;
  }
LABEL_9:
  if (v11 != (char *)&v66)
    free(v11);
  v14 = v68;
  if (v10 == &v67)
    goto LABEL_38;
  v15 = *(unsigned int *)(v8 + 16);
  v63 = v68;
  if (v15 < v68)
  {
    if (*(_DWORD *)(v8 + 20) < v68)
    {
      if ((_DWORD)v15)
      {
        v58 = (char *)*v10;
        v59 = 96 * v15;
        do
        {
          v60 = *(char **)&v58[v59 - 72];
          if (&v58[v59 - 56] != v60)
            free(v60);
          v59 -= 96;
        }
        while (v59);
      }
      *(_DWORD *)(v8 + 16) = 0;
      sub_1C6151854((uint64_t)v10, v14);
    }
    else if ((_DWORD)v15)
    {
      v61 = v8;
      v16 = 0;
      v17 = (char *)v67;
      v18 = (char *)*v10;
      while (1)
      {
        v19 = &v18[v16];
        v20 = (const void **)&v17[v16];
        v21 = *(_OWORD *)&v17[v16];
        *((_QWORD *)v19 + 2) = *(_QWORD *)&v17[v16 + 16];
        *(_OWORD *)v19 = v21;
        if (v17 != v18)
          break;
LABEL_24:
        v16 += 96;
        if (96 * v15 == v16)
        {
          v8 = v61;
          goto LABEL_26;
        }
      }
      v22 = (void **)(v19 + 24);
      v23 = *((unsigned int *)v20 + 8);
      v24 = *((unsigned int *)v19 + 8);
      if (v24 >= v23)
      {
        if ((_DWORD)v23)
          memmove(*v22, v20[3], 28 * v23);
        goto LABEL_23;
      }
      if (*(_DWORD *)&v18[v16 + 36] < v23)
      {
        *((_DWORD *)v19 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 + 24), (uint64_t)&v18[v16 + 40], v23, 28);
        v22 = (void **)(v19 + 24);
      }
      else if ((_DWORD)v24)
      {
        memmove(*v22, v20[3], 28 * v24);
        v22 = (void **)(v19 + 24);
LABEL_21:
        v25 = *((unsigned int *)v20 + 8);
        if (v24 != v25)
          memcpy((char *)*v22 + 28 * v24, (char *)v20[3] + 28 * v24, 28 * v25 - 28 * v24);
LABEL_23:
        *((_DWORD *)v19 + 8) = v23;
        goto LABEL_24;
      }
      v24 = 0;
      goto LABEL_21;
    }
    v15 = 0;
LABEL_26:
    if (v15 == v68)
      goto LABEL_37;
    v26 = (char *)v67;
    v27 = (char *)*v10;
    v28 = 96 * v15;
    v29 = 96 * v68;
    while (1)
    {
      v30 = &v27[v28];
      v31 = (const void **)&v26[v28];
      v32 = *(_OWORD *)&v26[v28];
      *((_QWORD *)v30 + 2) = *(_QWORD *)&v26[v28 + 16];
      *(_OWORD *)v30 = v32;
      v33 = &v27[v28 + 40];
      *(_QWORD *)&v27[v28 + 24] = v33;
      *((_QWORD *)v30 + 4) = 0x200000000;
      v34 = *(_DWORD *)&v26[v28 + 32];
      if (v34)
        v35 = v31 == (const void **)v30;
      else
        v35 = 1;
      if (v35)
        goto LABEL_36;
      if (v34 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27[v28 + 24], (uint64_t)&v27[v28 + 40], *(unsigned int *)&v26[v28 + 32], 28);
        v36 = *((unsigned int *)v31 + 8);
        if (!(_DWORD)v36)
          goto LABEL_35;
        v33 = *(char **)&v27[v28 + 24];
      }
      else
      {
        v36 = *(unsigned int *)&v26[v28 + 32];
      }
      memcpy(v33, v31[3], 28 * v36);
LABEL_35:
      *((_DWORD *)v30 + 8) = v34;
LABEL_36:
      v27 += 96;
      v26 += 96;
      v29 -= 96;
      if (v28 == v29)
        goto LABEL_37;
    }
  }
  if (!(_DWORD)v68)
  {
    v52 = (char *)*v10;
    v53 = (char *)*v10;
    goto LABEL_59;
  }
  v62 = v8;
  v41 = 0;
  v42 = (char *)v67;
  v43 = (char *)*v10;
  v44 = 96 * v68;
  do
  {
    v45 = &v43[v41];
    v46 = (const void **)&v42[v41];
    v47 = *(_OWORD *)&v42[v41];
    *((_QWORD *)v45 + 2) = *(_QWORD *)&v42[v41 + 16];
    *(_OWORD *)v45 = v47;
    if (v42 == v43)
      goto LABEL_57;
    v48 = (void **)(v45 + 24);
    v49 = *((unsigned int *)v46 + 8);
    v50 = *((unsigned int *)v45 + 8);
    if (v50 >= v49)
    {
      if ((_DWORD)v49)
        memmove(*v48, v46[3], 28 * v49);
      goto LABEL_56;
    }
    if (*(_DWORD *)&v43[v41 + 36] < v49)
    {
      *((_DWORD *)v45 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v45 + 24), (uint64_t)&v43[v41 + 40], v49, 28);
LABEL_53:
      v50 = 0;
      goto LABEL_54;
    }
    if (!(_DWORD)v50)
      goto LABEL_53;
    memmove(*v48, v46[3], 28 * v50);
LABEL_54:
    v51 = *((unsigned int *)v46 + 8);
    if (v50 != v51)
      memcpy((char *)*v48 + 28 * v50, (char *)v46[3] + 28 * v50, 28 * v51 - 28 * v50);
LABEL_56:
    *((_DWORD *)v45 + 8) = v49;
LABEL_57:
    v41 += 96;
  }
  while (v44 != v41);
  v8 = v62;
  LODWORD(v15) = *(_DWORD *)(v62 + 16);
  v52 = *(char **)(v62 + 8);
  v53 = &v43[v41];
LABEL_59:
  for (i = &v52[96 * v15]; i != v53; i -= 96)
  {
    v55 = (char *)*((_QWORD *)i - 9);
    if (i - 56 != v55)
      free(v55);
  }
LABEL_37:
  *(_DWORD *)(v8 + 16) = v63;
  LODWORD(v14) = v68;
LABEL_38:
  v37 = (char *)v67;
  if ((_DWORD)v14)
  {
    v38 = 96 * v14;
    do
    {
      v39 = *(char **)&v37[v38 - 72];
      if (&v37[v38 - 56] != v39)
        free(v39);
      v38 -= 96;
    }
    while (v38);
    v37 = (char *)v67;
  }
  if (v37 != (char *)v69)
    free(v37);
  return v8;
}

uint64_t sub_1C4C92930(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v14;
  void *v15;
  unsigned int v16;
  _QWORD v17[193];

  v17[192] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 16) = 0x1000000000;
  v5 = (*a2 >> 5) & 3;
  v6 = (*a2 >> 22) & 1;
  v7 = (*a2 >> 7) & 7;
  v8 = (*a2 >> 23) & 3;
  if (a3 == 5)
    v9 = 4;
  else
    v9 = a3;
  sub_1C4C9CF00(v7, v8, v5, v6, &v15, v9);
  sub_1C4C92B54(v4, (uint64_t)&v15);
  v10 = (char *)v15;
  if (v16)
  {
    v11 = 96 * v16;
    do
    {
      v12 = *(char **)&v10[v11 - 72];
      if (&v10[v11 - 56] != v12)
      {
        v14 = v10;
        free(v12);
        v10 = v14;
      }
      v11 -= 96;
    }
    while (v11);
    v10 = (char *)v15;
  }
  if (v10 != (char *)v17)
    free(v10);
  return a1;
}

uint64_t sub_1C4C92A44(uint64_t a1, unsigned int a2, __n128 a3)
{
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  _QWORD v17[193];

  v17[192] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (!(v3 | *(unsigned __int8 *)(a1 + 49)))
    llvm::report_fatal_error((llvm *)"Expected at least one of depth or stencil.", (const char *)1);
  if (*(_BYTE *)(a1 + 49))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    v5 = 1;
  else
    v5 = 3;
  if (*(_BYTE *)(a1 + 48))
    v6 = v5;
  else
    v6 = 2;
  sub_1C61738D8(v6, &v15, a3, a2);
  result = sub_1C6172A44((uint64_t *)&v15);
  v8 = (char *)v15;
  if (v16)
  {
    v9 = 96 * v16;
    do
    {
      v10 = *(char **)&v8[v9 - 72];
      if (&v8[v9 - 56] != v10)
      {
        v14 = result;
        v12 = v9;
        v13 = v8;
        free(v10);
        v9 = v12;
        v8 = v13;
        result = v14;
      }
      v9 -= 96;
    }
    while (v9);
    v8 = (char *)v15;
  }
  if (v8 != (char *)v17)
  {
    v11 = result;
    free(v8);
    return v11;
  }
  return result;
}

uint64_t sub_1C4C92B54(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  void **v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  void **v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  void *v58;
  unsigned int v59;
  BOOL v60;
  const void *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void **v68;
  void **v69;
  uint64_t v70;
  void **v71;
  void **v72;
  unint64_t v77;

  i = a1;
  if (a1 == a2)
    return i;
  v3 = (_QWORD *)a2;
  v4 = *(char **)a2;
  if (*(_QWORD *)a2 != a2 + 16)
  {
    sub_1C6172F7C((char **)a1, (char **)a2);
    return i;
  }
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(unsigned int *)(a1 + 8);
  v77 = v5;
  if (v6 >= v5)
  {
    v22 = *(char **)a1;
    if (!(_DWORD)v5)
    {
      v37 = *(char **)a1;
      goto LABEL_48;
    }
    v23 = 0;
    v24 = 96 * v5;
    v25 = *(char **)a2;
    while (1)
    {
      v26 = &v22[v23];
      v27 = &v4[v23];
      v28 = *(_OWORD *)&v4[v23];
      *((_QWORD *)v26 + 2) = *(_QWORD *)&v4[v23 + 16];
      *(_OWORD *)v26 = v28;
      if (v4 != v22)
        break;
LABEL_38:
      v25 += 96;
      v23 += 96;
      if (v24 == v23)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v37 = &v22[v23];
        v22 = *(char **)a1;
LABEL_48:
        v39 = &v22[96 * v6];
        for (i = a1; v39 != v37; v39 -= 96)
        {
          v40 = (char *)*((_QWORD *)v39 - 9);
          if (v39 - 56 != v40)
            free(v40);
        }
        *(_DWORD *)(a1 + 8) = v77;
        v41 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v41)
        {
          v42 = *(char **)a2;
          v43 = 96 * v41;
          do
          {
            v44 = *(char **)&v42[v43 - 72];
            if (&v42[v43 - 56] != v44)
              free(v44);
            v43 -= 96;
          }
          while (v43);
        }
        *(_DWORD *)(a2 + 8) = 0;
        return i;
      }
    }
    v29 = (void **)(v26 + 24);
    v30 = (char *)*((_QWORD *)v27 + 3);
    if (v27 + 40 != v30)
    {
      v36 = v29;
      if (&v22[v23 + 40] != *v29)
      {
        free(*v29);
        v30 = (char *)*((_QWORD *)v27 + 3);
      }
      *v36 = v30;
      v32 = v25 + 32;
      *(_QWORD *)&v22[v23 + 32] = *(_QWORD *)&v4[v23 + 32];
      *((_QWORD *)v27 + 3) = v27 + 40;
      *(_DWORD *)&v4[v23 + 36] = 0;
      goto LABEL_37;
    }
    v32 = &v4[v23 + 32];
    v31 = *(unsigned int *)v32;
    v33 = &v22[v23];
    v34 = *(unsigned int *)&v22[v23 + 32];
    if (v34 >= v31)
    {
      if ((_DWORD)v31)
        memmove(*v29, v30, 28 * v31);
      goto LABEL_36;
    }
    if (*((_DWORD *)v33 + 9) < v31)
    {
      *((_DWORD *)v33 + 8) = 0;
      v71 = v29;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v29, (uint64_t)&v22[v23 + 40], v31, 28);
      v29 = v71;
    }
    else if ((_DWORD)v34)
    {
      v72 = v29;
      memmove(*v29, v30, 28 * v34);
      v29 = v72;
LABEL_34:
      v35 = *(unsigned int *)v32;
      if (v34 != v35)
        memcpy((char *)*v29 + 28 * v34, (const void *)(*((_QWORD *)v27 + 3) + 28 * v34), 28 * v35 - 28 * v34);
LABEL_36:
      *((_DWORD *)v33 + 8) = v31;
LABEL_37:
      *(_DWORD *)v32 = 0;
      goto LABEL_38;
    }
    v34 = 0;
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 12) < v5)
  {
    if ((_DWORD)v6)
    {
      v45 = *(char **)a1;
      v46 = 96 * v6;
      do
      {
        v47 = *(char **)&v45[v46 - 72];
        if (&v45[v46 - 56] != v47)
          free(v47);
        v46 -= 96;
      }
      while (v46);
    }
    *(_DWORD *)(i + 8) = 0;
    sub_1C6151854(i, v77);
  }
  else if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(char **)a1;
    v70 = *(unsigned int *)(a1 + 8);
    v9 = 96 * v6;
    v10 = *(char **)a2;
    while (1)
    {
      v11 = &v8[v7];
      v12 = &v4[v7];
      v13 = *(_OWORD *)&v4[v7];
      *((_QWORD *)v11 + 2) = *(_QWORD *)&v4[v7 + 16];
      *(_OWORD *)v11 = v13;
      if (v4 != v8)
        break;
LABEL_17:
      v10 += 96;
      v7 += 96;
      if (v9 == v7)
      {
        v3 = (_QWORD *)a2;
        i = a1;
        v38 = v70;
        goto LABEL_66;
      }
    }
    v14 = (void **)(v11 + 24);
    v15 = (char *)*((_QWORD *)v12 + 3);
    if (v12 + 40 != v15)
    {
      v21 = v14;
      if (&v8[v7 + 40] != *v14)
      {
        free(*v14);
        v15 = (char *)*((_QWORD *)v12 + 3);
      }
      *v21 = v15;
      v16 = v10 + 32;
      *(_QWORD *)&v8[v7 + 32] = *(_QWORD *)&v4[v7 + 32];
      *((_QWORD *)v12 + 3) = v12 + 40;
      *(_DWORD *)&v4[v7 + 36] = 0;
      goto LABEL_16;
    }
    v16 = &v4[v7 + 32];
    v17 = *(unsigned int *)v16;
    v18 = &v8[v7];
    v19 = *(unsigned int *)&v8[v7 + 32];
    if (v19 >= v17)
    {
      if ((_DWORD)v17)
        memmove(*v14, v15, 28 * v17);
      goto LABEL_15;
    }
    if (*((_DWORD *)v18 + 9) < v17)
    {
      *((_DWORD *)v18 + 8) = 0;
      v68 = v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, (uint64_t)&v8[v7 + 40], v17, 28);
      v14 = v68;
    }
    else if ((_DWORD)v19)
    {
      v69 = v14;
      memmove(*v14, v15, 28 * v19);
      v14 = v69;
LABEL_13:
      v20 = *(unsigned int *)v16;
      if (v19 != v20)
        memcpy((char *)*v14 + 28 * v19, (const void *)(*((_QWORD *)v12 + 3) + 28 * v19), 28 * v20 - 28 * v19);
LABEL_15:
      *((_DWORD *)v18 + 8) = v17;
LABEL_16:
      *(_DWORD *)v16 = 0;
      goto LABEL_17;
    }
    v19 = 0;
    goto LABEL_13;
  }
  v38 = 0;
LABEL_66:
  v48 = *v3;
  v49 = *((unsigned int *)v3 + 2);
  if (v38 == v49)
    goto LABEL_83;
  v50 = v3;
  v51 = i;
  v52 = *(_QWORD *)i;
  v53 = 96 * v38;
  v54 = 96 * v49;
  do
  {
    v55 = v52 + v53;
    v56 = v48 + v53;
    v57 = *(_OWORD *)(v48 + v53);
    *(_QWORD *)(v55 + 16) = *(_QWORD *)(v48 + v53 + 16);
    *(_OWORD *)v55 = v57;
    v58 = (void *)(v52 + v53 + 40);
    *(_QWORD *)(v52 + v53 + 24) = v58;
    *(_QWORD *)(v55 + 32) = 0x200000000;
    v59 = *(_DWORD *)(v48 + v53 + 32);
    if (v59)
      v60 = v56 == v55;
    else
      v60 = 1;
    if (!v60)
    {
      v61 = *(const void **)(v56 + 24);
      if ((const void *)(v56 + 40) != v61)
      {
        *(_QWORD *)(v55 + 24) = v61;
        v63 = *(_DWORD *)(v48 + v53 + 36);
        *(_DWORD *)(v55 + 32) = v59;
        *(_DWORD *)(v55 + 36) = v63;
        *(_QWORD *)(v56 + 24) = v56 + 40;
        *(_DWORD *)(v48 + v53 + 36) = 0;
        goto LABEL_77;
      }
      if (v59 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + v53 + 24, v52 + v53 + 40, *(unsigned int *)(v48 + v53 + 32), 28);
        v62 = *(unsigned int *)(v56 + 32);
        if (!(_DWORD)v62)
          goto LABEL_76;
        v61 = *(const void **)(v56 + 24);
        v58 = *(void **)(v52 + v53 + 24);
      }
      else
      {
        v62 = *(unsigned int *)(v48 + v53 + 32);
      }
      memcpy(v58, v61, 28 * v62);
LABEL_76:
      *(_DWORD *)(v55 + 32) = v59;
LABEL_77:
      *(_DWORD *)(v56 + 32) = 0;
    }
    v52 += 96;
    v48 += 96;
    v54 -= 96;
  }
  while (v53 != v54);
  v3 = v50;
  v48 = *v50;
  i = v51;
LABEL_83:
  *(_DWORD *)(i + 8) = v77;
  v64 = *((unsigned int *)v3 + 2);
  if ((_DWORD)v64)
  {
    v65 = 96 * v64;
    do
    {
      v66 = *(void **)(v48 + v65 - 72);
      if ((void *)(v48 + v65 - 56) != v66)
        free(v66);
      v65 -= 96;
    }
    while (v65);
  }
  *((_DWORD *)v3 + 2) = 0;
  return i;
}

char **sub_1C4C930EC(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 96 * v2;
    do
    {
      v4 = *(char **)&v1[v3 - 72];
      if (&v1[v3 - 56] != v4)
      {
        v8 = result;
        v5 = v3;
        v6 = v1;
        free(v4);
        v3 = v5;
        v1 = v6;
        result = v8;
      }
      v3 -= 96;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

void sub_1C4C93174(char a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  if (a1)
  {
    v3 = *a2;
    v4 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v4)
    {
      v6 = *a2;
      goto LABEL_13;
    }
    v5 = 0;
    v6 = v3 + 96 * v4;
    while (1)
    {
      if (*(_DWORD *)(v3 + v5) == 2 && *(_DWORD *)(v3 + v5 + 32) == 2)
      {
        v7 = *(_QWORD *)(v3 + v5 + 24);
        if (*(_DWORD *)(v7 + 8) == 7 && !*(_BYTE *)(v7 + 52))
          break;
        if (*(_DWORD *)(v7 + 36) == 7 && !*(_BYTE *)(v7 + 24))
          break;
      }
      v5 += 96;
      if (96 * v4 == v5)
        goto LABEL_13;
    }
    v9 = v3 + v5;
    if (96 * v4 - 96 != v5)
    {
      v10 = v9 + 96;
      v11 = 96 * v4 - 96;
      v6 = v3 + v5;
      while (1)
      {
        v12 = v9;
        v9 = v10;
        v13 = v3 + v5;
        if (*(_DWORD *)(v3 + v5 + 96) == 2 && *(_DWORD *)(v13 + 128) == 2)
        {
          v14 = *(_QWORD *)(v3 + v5 + 120);
          if (*(_DWORD *)(v14 + 8) == 7 && !*(_BYTE *)(v14 + 52))
            goto LABEL_35;
          if (*(_DWORD *)(v14 + 36) == 7 && !*(_BYTE *)(v14 + 24))
            goto LABEL_35;
        }
        v15 = *(_OWORD *)(v3 + v5 + 96);
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + v5 + 112);
        *(_OWORD *)v6 = v15;
        v16 = (void **)(v6 + 24);
        v17 = (const void **)(v13 + 120);
        if (v13 + 120 != v6 + 24)
          break;
LABEL_34:
        v6 += 96;
LABEL_35:
        v10 = v9 + 96;
        v5 += 96;
        if (v11 == v5)
        {
          v3 = *a2;
          LODWORD(v4) = *((_DWORD *)a2 + 2);
          goto LABEL_13;
        }
      }
      v18 = *v17;
      v19 = v3 + v5;
      v20 = v3 + v5 + 136;
      if ((const void *)v20 != *v17)
      {
        v26 = *(void **)(v6 + 24);
        if (v26 != (void *)(v6 + 40))
        {
          free(v26);
          v18 = *v17;
        }
        *(_QWORD *)(v6 + 24) = v18;
        v22 = (_DWORD *)(v12 + 128);
        *(_QWORD *)(v6 + 32) = *(_QWORD *)(v3 + v5 + 128);
        *v17 = (const void *)v20;
        *(_DWORD *)(v3 + v5 + 132) = 0;
        goto LABEL_33;
      }
      v23 = *(_DWORD *)(v19 + 128);
      v22 = (_DWORD *)(v19 + 128);
      v21 = v23;
      v24 = *(unsigned int *)(v6 + 32);
      if (v24 >= v23)
      {
        if ((_DWORD)v21)
          memmove(*v16, v18, 28 * v21);
        goto LABEL_32;
      }
      if (*(_DWORD *)(v6 + 36) < v21)
      {
        *(_DWORD *)(v6 + 32) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 24, v6 + 40, v21, 28);
        v16 = (void **)(v6 + 24);
      }
      else if ((_DWORD)v24)
      {
        memmove(*v16, v18, 28 * v24);
        v16 = (void **)(v6 + 24);
LABEL_30:
        v25 = *v22;
        if (v24 != v25)
          memcpy((char *)*v16 + 28 * v24, (char *)*v17 + 28 * v24, (_BYTE *)*v17 + 28 * v25 - ((_BYTE *)*v17 + 28 * v24));
LABEL_32:
        *(_DWORD *)(v6 + 32) = v21;
LABEL_33:
        *v22 = 0;
        goto LABEL_34;
      }
      v24 = 0;
      goto LABEL_30;
    }
    v6 = v3 + v5;
LABEL_13:
    v8 = v3 + 96 * v4;
    if (v8 != v6)
    {
      do
      {
        v27 = *(void **)(v8 - 72);
        if ((void *)(v8 - 56) != v27)
          free(v27);
        v8 -= 96;
      }
      while (v8 != v6);
      v3 = *a2;
    }
    *((_DWORD *)a2 + 2) = -1431655765 * ((unint64_t)(v6 - v3) >> 5);
  }
}

void sub_1C4C93464(unsigned int a1, uint64_t *a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v5;
  char v6;
  int v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  char v20;
  int v21;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  int v36;
  unsigned int v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _DWORD *v44;
  _DWORD *v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  _DWORD *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  _DWORD *v58;
  _DWORD *v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t *v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  _DWORD *v70;
  _DWORD *v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t *v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  int v79;
  _DWORD *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  _DWORD *v84;
  _DWORD *v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t *v89;
  int v90;
  unsigned int v91;
  _DWORD *v92;
  int v93;
  _DWORD *v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  _DWORD *v98;
  _DWORD *v99;
  int v100;
  unsigned int v101;
  int v102;
  uint64_t *v103;
  int v104;
  unsigned int v105;
  _DWORD *v106;
  int v107;
  _DWORD *v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  unsigned int v115;
  int v116;
  uint64_t *v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  BOOL v122;
  unsigned int v123;
  _DWORD *v124;
  _DWORD *v125;
  int v126;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  __int128 *v130;
  uint64_t *v131;
  int v132;
  __int128 *v133;
  BOOL v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  unsigned int v139;
  __int128 *v140;
  __int128 *v141;
  __int128 v142;
  const void **v143;
  char *v144;
  uint64_t v145;
  void **v146;
  unint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  char *v160;
  uint64_t v161;
  __int128 *v162;
  __int128 *v163;
  char *v164;
  uint64_t *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  _QWORD v172[3];

  v172[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v167 = 1;
  v168 = -1;
  v169 = -1;
  v170 = v172;
  v171 = 0x400000000;
  if (a1 > 7)
    goto LABEL_162;
  if (((1 << a1) & 0xC8) != 0)
  {
    v166 = 24;
    v17 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, &v168);
    *v17 = v166;
    v18 = v166;
    v19 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v19 = v171;
    }
    *((_DWORD *)v170 + v19) = v18;
    v20 = v167;
    LODWORD(v171) = v171 + 1;
    v166 = 25;
    if ((v167 & 1) != 0)
    {
      v21 = 4;
      v22 = &v168;
    }
    else
    {
      v21 = v169;
      if (!(_DWORD)v169)
      {
        v44 = 0;
        goto LABEL_51;
      }
      v22 = (uint64_t *)v168;
    }
    v23 = v21 - 1;
    v24 = v23 & 0x39D;
    v25 = (_DWORD *)v22 + (v23 & 0x39D);
    v26 = *v25;
    if (*v25 == 25)
      goto LABEL_54;
    v27 = 0;
    v28 = 1;
    while (v26 != -1)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -2;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_DWORD *)v22 + v24;
      v26 = *v25;
      if (*v25 == 25)
        goto LABEL_54;
    }
    if (v27)
      v44 = v27;
    else
      v44 = v25;
LABEL_51:
    v45 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v44);
    *v45 = v166;
    v46 = v166;
    v47 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v47 = v171;
    }
    *((_DWORD *)v170 + v47) = v46;
    v20 = v167;
    LODWORD(v171) = v171 + 1;
LABEL_54:
    v166 = 38;
    if ((v20 & 1) != 0)
    {
      v48 = 4;
      v49 = &v168;
    }
    else
    {
      v48 = v169;
      if (!(_DWORD)v169)
      {
        v58 = 0;
        goto LABEL_69;
      }
      v49 = (uint64_t *)v168;
    }
    v50 = v48 - 1;
    v51 = v50 & 0x57E;
    v52 = (_DWORD *)v49 + (v50 & 0x57E);
    v53 = *v52;
    if (*v52 == 38)
      goto LABEL_72;
    v54 = 0;
    v55 = 1;
    while (v53 != -1)
    {
      if (v54)
        v56 = 0;
      else
        v56 = v53 == -2;
      if (v56)
        v54 = v52;
      v57 = v51 + v55++;
      v51 = v57 & v50;
      v52 = (_DWORD *)v49 + v51;
      v53 = *v52;
      if (*v52 == 38)
        goto LABEL_72;
    }
    if (v54)
      v58 = v54;
    else
      v58 = v52;
LABEL_69:
    v59 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v58);
    *v59 = v166;
    v60 = v166;
    v61 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v61 = v171;
    }
    *((_DWORD *)v170 + v61) = v60;
    v20 = v167;
    LODWORD(v171) = v171 + 1;
LABEL_72:
    v166 = 39;
    if ((v20 & 1) != 0)
    {
      v62 = 4;
      v63 = &v168;
    }
    else
    {
      v62 = v169;
      if (!(_DWORD)v169)
        goto LABEL_235;
      v63 = (uint64_t *)v168;
    }
    v64 = v62 - 1;
    v65 = v64 & 0x5A3;
    v38 = (_DWORD *)v63 + (v64 & 0x5A3);
    v66 = *v38;
    if (*v38 != 39)
    {
      v40 = 0;
      v67 = 1;
      while (v66 != -1)
      {
        if (v40)
          v68 = 0;
        else
          v68 = v66 == -2;
        if (v68)
          v40 = v38;
        v69 = v65 + v67++;
        v65 = v69 & v64;
        v38 = (_DWORD *)v63 + v65;
        v66 = *v38;
        if (*v38 == 39)
          goto LABEL_162;
      }
      goto LABEL_156;
    }
    goto LABEL_162;
  }
  if (((1 << a1) & 6) == 0)
  {
    if (((1 << a1) & 0x30) == 0)
      goto LABEL_162;
    v166 = 23;
    v3 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, (_DWORD *)&v169 + 1);
    *v3 = v166;
    v4 = v166;
    v5 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v5 = v171;
    }
    *((_DWORD *)v170 + v5) = v4;
    v6 = v167;
    LODWORD(v171) = v171 + 1;
    v166 = 24;
    if ((v167 & 1) != 0)
    {
      v7 = 4;
      v8 = &v168;
    }
    else
    {
      v7 = v169;
      if (!(_DWORD)v169)
      {
        v70 = 0;
        goto LABEL_87;
      }
      v8 = (uint64_t *)v168;
    }
    v9 = v7 - 1;
    v10 = v9 & 0x378;
    v11 = (_DWORD *)v8 + (v9 & 0x378);
    v12 = *v11;
    if (*v11 == 24)
      goto LABEL_90;
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -2;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_DWORD *)v8 + v10;
      v12 = *v11;
      if (*v11 == 24)
        goto LABEL_90;
    }
    if (v13)
      v70 = v13;
    else
      v70 = v11;
LABEL_87:
    v71 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v70);
    *v71 = v166;
    v72 = v166;
    v73 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v73 = v171;
    }
    *((_DWORD *)v170 + v73) = v72;
    v6 = v167;
    LODWORD(v171) = v171 + 1;
LABEL_90:
    v166 = 25;
    if ((v6 & 1) != 0)
    {
      v74 = 4;
      v75 = &v168;
    }
    else
    {
      v74 = v169;
      if (!(_DWORD)v169)
      {
        v84 = 0;
        goto LABEL_105;
      }
      v75 = (uint64_t *)v168;
    }
    v76 = v74 - 1;
    v77 = v76 & 0x39D;
    v78 = (_DWORD *)v75 + (v76 & 0x39D);
    v79 = *v78;
    if (*v78 == 25)
      goto LABEL_108;
    v80 = 0;
    v81 = 1;
    while (v79 != -1)
    {
      if (v80)
        v82 = 0;
      else
        v82 = v79 == -2;
      if (v82)
        v80 = v78;
      v83 = v77 + v81++;
      v77 = v83 & v76;
      v78 = (_DWORD *)v75 + v77;
      v79 = *v78;
      if (*v78 == 25)
        goto LABEL_108;
    }
    if (v80)
      v84 = v80;
    else
      v84 = v78;
LABEL_105:
    v85 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v84);
    *v85 = v166;
    v86 = v166;
    v87 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v87 = v171;
    }
    *((_DWORD *)v170 + v87) = v86;
    v6 = v167;
    LODWORD(v171) = v171 + 1;
LABEL_108:
    v166 = 37;
    if ((v6 & 1) != 0)
    {
      v88 = 4;
      v89 = &v168;
    }
    else
    {
      v88 = v169;
      if (!(_DWORD)v169)
      {
        v98 = 0;
        goto LABEL_123;
      }
      v89 = (uint64_t *)v168;
    }
    v90 = v88 - 1;
    v91 = v90 & 0x559;
    v92 = (_DWORD *)v89 + (v90 & 0x559);
    v93 = *v92;
    if (*v92 == 37)
      goto LABEL_126;
    v94 = 0;
    v95 = 1;
    while (v93 != -1)
    {
      if (v94)
        v96 = 0;
      else
        v96 = v93 == -2;
      if (v96)
        v94 = v92;
      v97 = v91 + v95++;
      v91 = v97 & v90;
      v92 = (_DWORD *)v89 + v91;
      v93 = *v92;
      if (*v92 == 37)
        goto LABEL_126;
    }
    if (v94)
      v98 = v94;
    else
      v98 = v92;
LABEL_123:
    v99 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v98);
    *v99 = v166;
    v100 = v166;
    v101 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v101 = v171;
    }
    *((_DWORD *)v170 + v101) = v100;
    v6 = v167;
    LODWORD(v171) = v171 + 1;
LABEL_126:
    v166 = 38;
    if ((v6 & 1) != 0)
    {
      v102 = 4;
      v103 = &v168;
    }
    else
    {
      v102 = v169;
      if (!(_DWORD)v169)
      {
        v112 = 0;
        goto LABEL_141;
      }
      v103 = (uint64_t *)v168;
    }
    v104 = v102 - 1;
    v105 = v104 & 0x57E;
    v106 = (_DWORD *)v103 + (v104 & 0x57E);
    v107 = *v106;
    if (*v106 == 38)
    {
LABEL_144:
      v166 = 39;
      if ((v6 & 1) != 0)
      {
        v116 = 4;
        v117 = &v168;
        goto LABEL_146;
      }
      v116 = v169;
      if ((_DWORD)v169)
      {
        v117 = (uint64_t *)v168;
LABEL_146:
        v118 = v116 - 1;
        v119 = v118 & 0x5A3;
        v38 = (_DWORD *)v117 + (v118 & 0x5A3);
        v120 = *v38;
        if (*v38 != 39)
        {
          v40 = 0;
          v121 = 1;
          while (v120 != -1)
          {
            if (v40)
              v122 = 0;
            else
              v122 = v120 == -2;
            if (v122)
              v40 = v38;
            v123 = v119 + v121++;
            v119 = v123 & v118;
            v38 = (_DWORD *)v117 + v119;
            v120 = *v38;
            if (*v38 == 39)
              goto LABEL_162;
          }
LABEL_156:
          if (v40)
            v124 = v40;
          else
            v124 = v38;
          goto LABEL_159;
        }
        goto LABEL_162;
      }
LABEL_235:
      v124 = 0;
LABEL_159:
      v125 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v124);
      *v125 = v166;
      v126 = v166;
      v127 = v171;
      if (v171 >= HIDWORD(v171))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
        v127 = v171;
      }
      *((_DWORD *)v170 + v127) = v126;
      LODWORD(v171) = v171 + 1;
      goto LABEL_162;
    }
    v108 = 0;
    v109 = 1;
    while (v107 != -1)
    {
      if (v108)
        v110 = 0;
      else
        v110 = v107 == -2;
      if (v110)
        v108 = v106;
      v111 = v105 + v109++;
      v105 = v111 & v104;
      v106 = (_DWORD *)v103 + v105;
      v107 = *v106;
      if (*v106 == 38)
        goto LABEL_144;
    }
    if (v108)
      v112 = v108;
    else
      v112 = v106;
LABEL_141:
    v113 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, v112);
    *v113 = v166;
    v114 = v166;
    v115 = v171;
    if (v171 >= HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
      v115 = v171;
    }
    *((_DWORD *)v170 + v115) = v114;
    v6 = v167;
    LODWORD(v171) = v171 + 1;
    goto LABEL_144;
  }
  v166 = 25;
  v31 = sub_1C47686DC((uint64_t)&v167, (uint64_t)&v166, &v166, (_DWORD *)&v168 + 1);
  *v31 = v166;
  v32 = v166;
  v33 = v171;
  if (v171 >= HIDWORD(v171))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 4);
    v33 = v171;
  }
  *((_DWORD *)v170 + v33) = v32;
  LODWORD(v171) = v171 + 1;
  v166 = 39;
  if ((v167 & 1) != 0)
  {
    v34 = 4;
    v35 = &v168;
  }
  else
  {
    v34 = v169;
    if (!(_DWORD)v169)
      goto LABEL_235;
    v35 = (uint64_t *)v168;
  }
  v36 = v34 - 1;
  v37 = v36 & 0x5A3;
  v38 = (_DWORD *)v35 + (v36 & 0x5A3);
  v39 = *v38;
  if (*v38 != 39)
  {
    v40 = 0;
    v41 = 1;
    while (v39 != -1)
    {
      if (v40)
        v42 = 0;
      else
        v42 = v39 == -2;
      if (v42)
        v40 = v38;
      v43 = v37 + v41++;
      v37 = v43 & v36;
      v38 = (_DWORD *)v35 + v37;
      v39 = *v38;
      if (*v38 == 39)
        goto LABEL_162;
    }
    goto LABEL_156;
  }
LABEL_162:
  v128 = (char *)*a2;
  v129 = *((_DWORD *)a2 + 2);
  if (v129)
  {
    v130 = (__int128 *)&v128[96 * v129];
    v131 = (uint64_t *)v168;
    if ((v167 & 1) != 0)
    {
      v131 = &v168;
      v132 = 3;
    }
    else
    {
      v132 = v169 - 1;
    }
    v133 = (__int128 *)*a2;
    while (1)
    {
      if (*(_DWORD *)v133)
        v134 = 1;
      else
        v134 = (v167 & 1 | v169) == 0;
      if (v134)
        goto LABEL_171;
      v135 = *((_DWORD *)v133 + 5);
      v136 = (37 * v135) & v132;
      v137 = *((_DWORD *)v131 + v136);
      if (v135 == v137)
        break;
      v138 = 1;
      while (v137 != -1)
      {
        v139 = v136 + v138++;
        v136 = v139 & v132;
        v137 = *((_DWORD *)v131 + v136);
        if (v135 == v137)
          goto LABEL_177;
      }
LABEL_171:
      v133 += 6;
      if (v133 == v130)
      {
        v163 = (__int128 *)&v128[96 * v129];
        goto LABEL_211;
      }
    }
LABEL_177:
    v140 = v133 + 6;
    if (v133 + 6 != v130)
    {
      v165 = a2;
      v163 = v133;
      while (1)
      {
        v141 = v133;
        v133 = v140;
        if (*((_DWORD *)v141 + 24))
          goto LABEL_180;
        if ((v167 & 1) != 0)
        {
          v152 = 4;
          v153 = &v168;
        }
        else
        {
          v152 = v169;
          if (!(_DWORD)v169)
            goto LABEL_180;
          v153 = (uint64_t *)v168;
        }
        v154 = *((_DWORD *)v141 + 29);
        v155 = v152 - 1;
        v156 = (37 * v154) & v155;
        v157 = *((_DWORD *)v153 + v156);
        if (v154 == v157)
          goto LABEL_191;
        v158 = 1;
        while (v157 != -1)
        {
          v159 = v156 + v158++;
          v156 = v159 & v155;
          v157 = *((_DWORD *)v153 + v156);
          if (v154 == v157)
            goto LABEL_191;
        }
LABEL_180:
        v142 = *v133;
        *((_QWORD *)v163 + 2) = *((_QWORD *)v133 + 2);
        *v163 = v142;
        if (v163 != v141 + 6)
        {
          v143 = (const void **)v141 + 15;
          v144 = (char *)*((_QWORD *)v141 + 15);
          v145 = (uint64_t)v141 + 136;
          if (v144 == (char *)v141 + 136)
          {
            v146 = (void **)v163 + 3;
            v149 = *((_DWORD *)v141 + 32);
            v148 = (unsigned int *)(v141 + 8);
            v147 = v149;
            v150 = *((unsigned int *)v163 + 8);
            if (v150 >= v149)
            {
              if ((_DWORD)v147)
                memmove(*v146, v144, 28 * v147);
            }
            else
            {
              if (*((_DWORD *)v163 + 9) < v147)
              {
                *((_DWORD *)v163 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v163 + 24, (uint64_t)v163 + 40, v147, 28);
                v146 = (void **)v163 + 3;
LABEL_185:
                v150 = 0;
              }
              else
              {
                if (!(_DWORD)v150)
                  goto LABEL_185;
                memmove(*v146, v144, 28 * v150);
                v146 = (void **)v163 + 3;
              }
              v151 = *v148;
              if (v150 != v151)
                memcpy((char *)*v146 + 28 * v150, (char *)*v143 + 28 * v150, (_BYTE *)*v143 + 28 * v151 - ((_BYTE *)*v143 + 28 * v150));
            }
            *((_DWORD *)v163 + 8) = v147;
          }
          else
          {
            v160 = (char *)*((_QWORD *)v163 + 3);
            if (v160 != (char *)v163 + 40)
            {
              free(v160);
              v144 = (char *)*v143;
            }
            *((_QWORD *)v163 + 3) = v144;
            v161 = *((_QWORD *)v141 + 16);
            v148 = (unsigned int *)(v141 + 8);
            *((_QWORD *)v163 + 4) = v161;
            *((_QWORD *)v148 - 1) = v145;
            v148[1] = 0;
          }
          *v148 = 0;
        }
        v163 += 6;
LABEL_191:
        v140 = v133 + 6;
        if (v133 + 6 == v130)
        {
          a2 = v165;
          v128 = (char *)*v165;
          v129 = *((_DWORD *)v165 + 2);
          goto LABEL_211;
        }
      }
    }
    v163 = v133;
  }
  else
  {
    v163 = (__int128 *)*a2;
  }
LABEL_211:
  v162 = (__int128 *)&v128[96 * v129];
  if (v162 != v163)
  {
    do
    {
      v164 = (char *)*((_QWORD *)v162 - 9);
      if ((char *)v162 - 56 != v164)
        free(v164);
      v162 -= 6;
    }
    while (v162 != v163);
    v128 = (char *)*a2;
  }
  *((_DWORD *)a2 + 2) = -1431655765 * ((unint64_t)((char *)v163 - v128) >> 5);
  if (v170 != v172)
    free(v170);
  if ((v167 & 1) == 0)
    MEMORY[0x1CAA32FB4](v168, 4);
}

unsigned int *sub_1C4C940F0(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = v5 + ((a3 - a2) >> 2);
  if (v6 > result[3])
  {
    v7 = a3;
    v8 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 4);
    a3 = v7;
    a2 = v8;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 4 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 2);
  return result;
}

uint64_t sub_1C4C94178(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t (*v14)();
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  __int32 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  BOOL v33;
  char v34;
  int v35;
  char *v36;
  unsigned int *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  void *__dst;
  uint64_t v59;
  size_t v60;
  __int32 *v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v67[124];
  __int128 v68;
  uint64_t v69;
  _WORD __src[11];
  uint64_t v71;
  _QWORD v72[2];
  char *v73;
  uint64_t v74;
  _QWORD v75[18];

  v75[16] = *MEMORY[0x1E0C80C00];
  v69 = 0;
  v68 = 0u;
  v14 = sub_1C4C9CFD0(a3);
  ((void (*)(uint64_t, _QWORD *))v14)(a2, v67);
  v65 = a3;
  if ((dword_1C6B331A4[a3] & 0xFFF) == 0xFFF)
    return 0;
  v15 = (char *)&unk_1C6B32532 + (dword_1C6B331A4[a3] & 0xFFF);
  v63 = 2 * a1;
  if (!v15[v63 + 1])
    return 0;
  LODWORD(v16) = a1;
  __dst = a5;
  v17 = (unsigned __int8 *)&v15[v15[v63] + 12];
  v64 = &v17[v15[v63 + 1]];
  v62 = *(unsigned __int8 *)(a4 + 16);
  v60 = *(_QWORD *)(a4 + 8);
  v61 = *(__int32 **)a4;
  v59 = *(_QWORD *)a4 + 4 * v60;
  v66 = a1;
  while (1)
  {
    v18 = *v17;
    v19 = v17[1];
    if (v16 < 4 || v65 > 0x10 || ((1 << v65) & 0x18008) == 0 || *v17)
    {
      if (!v62)
        goto LABEL_12;
      v20 = wmemchr(v61, *v17, v60);
      LODWORD(v16) = v66;
      v21 = v59;
      if (v20)
        v21 = (uint64_t)v20;
      if (v60 != (v21 - (uint64_t)v61) >> 2)
      {
LABEL_12:
        if (v19 >= 2)
        {
          if (v19 >> 1 <= 1)
            v22 = 1;
          else
            v22 = v19 >> 1;
          bzero(__src, 2 * v22);
          LODWORD(v16) = v66;
        }
        v23 = (char *)&unk_1C6B33520 + 4 * (dword_1C6B37944[v65] & 0x1FFF);
        v24 = *(_DWORD *)&v23[4 * *(unsigned int *)&v23[4 * v63] + 48 + 4 * v18];
        v25 = sub_1C4C9466C(v16, v24);
        v16 = v66;
        if (v25)
        {
          v26 = 0;
          v73 = (char *)v75;
          v74 = 0x2000000000;
          v27 = 32;
          v28 = v24;
          while (1)
          {
            if (v26 >= v27)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, v26 + 1, 4);
              v16 = v66;
              v26 = v74;
            }
            *(_DWORD *)&v73[4 * v26] = v28;
            v26 = v74 + 1;
            LODWORD(v74) = v74 + 1;
            v29 = word_1C6D695B8[2 * v28];
            if ((_DWORD)v29 == 0xFFFF)
              break;
            v28 = dword_1C6D477A8[v29];
            v27 = HIDWORD(v74);
          }
          if (v26)
          {
            v30 = &v73[4 * v26 - 4];
            if (v73 < v30)
            {
              v31 = v73 + 4;
              do
              {
                v32 = *((_DWORD *)v31 - 1);
                *((_DWORD *)v31 - 1) = *(_DWORD *)v30;
                *(_DWORD *)v30 = v32;
                v30 -= 4;
                v33 = v31 >= v30;
                v31 += 4;
              }
              while (!v33);
            }
          }
          v34 = sub_1C4C949AC(v16, v24, (uint64_t)v67, (uint64_t)&v73, 0);
          v35 = 0;
          v36 = v73;
          if ((v34 & 1) != 0)
          {
            v72[0] = 0;
            v71 = 0;
            *(_QWORD *)((char *)v72 + 6) = 0;
            if (!(_DWORD)v74)
            {
LABEL_47:
              v35 = 1;
              goto LABEL_49;
            }
            v37 = (unsigned int *)&v73[4 * v74];
            v38 = v73;
            while (1)
            {
              v39 = dword_1C763F938[*(unsigned int *)v38] & 0xFFFFF;
              if ((_DWORD)v39 != 0xFFFFF)
              {
                v40 = (char *)&unk_1C74F4260 + 2 * v39;
                v41 = &v40[2 * v63];
                v42 = *((unsigned __int16 *)v41 + 1);
                if (*((_WORD *)v41 + 1))
                  break;
              }
LABEL_46:
              v38 += 4;
              if (v38 == (char *)v37)
                goto LABEL_47;
            }
            v43 = &v40[2 * *(unsigned __int16 *)v41 + 24];
            v44 = &v43[2 * v42];
            v45 = (uint64_t)v43;
            while (2)
            {
              v46 = *((unsigned __int16 *)v43 + 4);
              v48 = *(unsigned __int16 *)(v45 + 10);
              v45 += 10;
              v47 = v48;
              if (v46 <= 1)
              {
                if (((*(_QWORD *)((char *)&v68 + ((v47 >> 3) & 0x1FF8)) >> v47) & 1) == 0)
                  v47 = 156;
                v47 = v67[v47];
                if (*((_WORD *)v43 + 4))
                  v47 = *(unsigned __int16 *)&v43[2 * v47 + 14];
              }
              v49 = *((_WORD *)v43 + 1);
              v50 = *((_WORD *)v43 + 2);
              v51 = *((unsigned __int16 *)v43 + 3);
              v52 = ((v47 >> *(_WORD *)v43) & ~(-1 << v50)) << v49;
              v53 = ~(-1 << v50);
              v54 = (unsigned __int16)__src[v51];
              v55 = v53 << v49;
              v56 = *((unsigned __int16 *)&v72[-1] + v51);
              if (((v52 ^ v54) & v56 & v55) != 0)
              {
                v35 = 0;
                break;
              }
              __src[v51] = v54 | v52;
              *((_WORD *)&v72[-1] + v51) = v56 | v55;
              if (v46 >= 2)
              {
                if (v46 == 2)
                  goto LABEL_44;
              }
              else
              {
                if (v46)
                {
                  v45 = (uint64_t)&v43[2 * *((unsigned __int16 *)v43 + 6) + 14];
                  goto LABEL_45;
                }
LABEL_44:
                v45 = (uint64_t)(v43 + 12);
              }
LABEL_45:
              v43 = (char *)v45;
              if ((char *)v45 == v44)
                goto LABEL_46;
              continue;
            }
          }
LABEL_49:
          if (v36 != (char *)v75)
            free(v36);
          LODWORD(v16) = v66;
          if (v35)
            break;
        }
      }
    }
    v17 += 2;
    if (v17 == v64)
      return 0;
  }
  *a6 = v18;
  *a7 = v19;
  if (v19 >= 2)
    memcpy(__dst, __src, 2 * (v19 >> 1));
  return 1;
}

uint64_t sub_1C4C94664()
{
  return 11;
}

uint64_t sub_1C4C9466C(int a1, int a2)
{
  uint64_t v2;
  char *v3;
  char *v4;

  v2 = dword_1C6C48D90[a2] & 0xFFFFF;
  if ((_DWORD)v2 != 0xFFFFF)
  {
    v3 = (char *)&unk_1C6B37CC0 + 2 * v2;
    v4 = &v3[4 * a1];
    if (*((_WORD *)v4 + 1))
      __asm { BR              X3 }
  }
  return 1;
}

uint64_t sub_1C4C949AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;

  v5 = dword_1C6F74B84[a2] & 0x7FFFF;
  if ((_DWORD)v5 == 0x7FFFF)
    return 1;
  v7 = (char *)&unk_1C6E67FD0 + 4 * v5;
  v8 = (2 * a1);
  v9 = &v7[4 * v8];
  v10 = *((unsigned int *)v9 + 1);
  if (!(_DWORD)v10)
    return 1;
  v11 = &v7[4 * *(unsigned int *)v9 + 48];
  v12 = dword_1C74AF330[*(unsigned int *)v11] & 0x1FFFFF;
  if ((_DWORD)v12 == 0x1FFFFF)
    return 0;
  v15 = *(unsigned int *)(a4 + 8);
  v32 = a4 + 16;
  v16 = (char *)&unk_1C707359C + 4 * v12;
  v17 = &v16[4 * v8];
  v18 = *((unsigned int *)v17 + 1);
  v19 = *(_DWORD *)(a4 + 8);
  if ((_DWORD)v18)
  {
    v31 = (unsigned int *)&v11[4 * v10];
    v21 = (a5 + 2);
    v22 = (int *)&v16[4 * *(unsigned int *)v17 + 48];
    v23 = &v22[v18];
    do
    {
      while (1)
      {
        v24 = *v22;
        if (!sub_1C4C9466C(a1, *v22) || !sub_1C4C949AC(a1, v24, a3, a4, v21))
          break;
        v25 = *(unsigned int *)(a4 + 8);
        if (v25 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v32, v25 + 1, 4);
          v25 = *(unsigned int *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = v24;
        v19 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v19;
        v11 += 4;
        if (v11 == (char *)v31)
          return 1;
        v26 = dword_1C74AF330[*(unsigned int *)v11] & 0x1FFFFF;
        if ((_DWORD)v26 != 0x1FFFFF)
        {
          v27 = (char *)&unk_1C707359C + 4 * v26;
          v28 = &v27[4 * v8];
          v30 = *(unsigned int *)v28;
          v29 = *((unsigned int *)v28 + 1);
          v22 = (int *)&v27[4 * v30 + 48];
          v23 = &v22[v29];
          if ((_DWORD)v29)
            continue;
        }
        goto LABEL_18;
      }
      ++v22;
    }
    while (v22 != v23);
    v19 = *(_DWORD *)(a4 + 8);
  }
LABEL_18:
  if (v19 == (_DWORD)v15)
    return 0;
  if (v19 <= v15)
  {
    if (*(_DWORD *)(a4 + 12) < v15)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v32, v15, 4);
      v19 = *(_DWORD *)(a4 + 8);
    }
    if (v19 != (_DWORD)v15)
      bzero((void *)(*(_QWORD *)a4 + 4 * v19), 4 * (v15 - v19));
  }
  result = 0;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

uint64_t sub_1C4C94BE4(int a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  BOOL v51;
  _DWORD *v52;
  _DWORD *v53;
  _BYTE *v54;
  unint64_t v55;
  int v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v107;
  uint64_t v108;
  void *v112;
  uint64_t v113;
  _BYTE v114[128];
  void *v115;
  uint64_t v116;
  _DWORD v117[244];
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = v114;
  v113 = 0x2000000000;
  v115 = v117;
  v10 = 1;
  v117[0] = 1;
  v11 = &unk_1C791AC24;
  v12 = (2 * a1);
  v116 = 0x2000000001;
  v13 = &unk_1C7EEF8C8;
  v14 = v117;
  v15 = (unint64_t)&unk_1C7A5FD58;
  do
  {
    v16 = v14[v10 - 1];
    LODWORD(v116) = v10 - 1;
    v17 = v113;
    if (v113 >= (unint64_t)HIDWORD(v113))
    {
      v52 = v11;
      v53 = v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 4);
      v15 = (unint64_t)&unk_1C7A5FD58;
      v13 = v53;
      v11 = v52;
      v17 = v113;
    }
    *((_DWORD *)v112 + v17) = v16;
    LODWORD(v113) = v113 + 1;
    v18 = v11[v16] & 0x7FFFF;
    if ((_DWORD)v18 == 0x7FFFF
      || (v19 = (char *)&unk_1C773E358 + 4 * v18, v20 = &v19[4 * v12], v21 = *((unsigned int *)v20 + 1), !(_DWORD)v21))
    {
      v14 = v115;
    }
    else
    {
      v22 = (unsigned int *)&v19[4 * *(unsigned int *)v20 + 48];
      v23 = &v22[v21];
      v24 = (v21 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      do
      {
        v25 = *v22;
        LODWORD(v26) = dword_1C7A1AE28[v25] & 0x1FFF;
        v27 = (_DWORD)v26 == 0x1FFF;
        if ((_DWORD)v26 == 0x1FFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v26;
        if (v27)
          v28 = 0;
        else
          v28 = dword_1C7A1AE28[v25] >> 13;
        if (v27)
          v29 = 0;
        else
          v29 = (char *)&unk_1C7A1963C + v26;
        v30 = 0;
        if ((_DWORD)v28)
        {
          v31 = &v29[v28];
          do
          {
            if (*v29)
            {
              v32 = v29[3] << v29[1];
              if (*v29 == 1)
                v33 = 4;
              else
                v33 = 1;
            }
            else
            {
              v34 = (2 * v29[4]) | 1;
              if (a3 <= v34)
                goto LABEL_46;
              v32 = (((*(unsigned __int8 *)(a2 + 2 * v29[4]) | ((unint64_t)*(unsigned __int8 *)(a2 + v34) << 8)) >> v29[2]) & ~(-1 << v29[3])) << v29[1];
              v33 = 5;
            }
            v29 += v33;
            v30 |= v32;
          }
          while (v29 != v31);
        }
        v35 = v13[v25] & 0x1FFFFF;
        if ((_DWORD)v35 == 0x1FFFFF)
          goto LABEL_46;
        v36 = (char *)&unk_1C7A5FD58 + 4 * v35;
        v37 = &v36[4 * v12];
        v38 = *((unsigned int *)v37 + 1);
        if (!(_DWORD)v38)
          goto LABEL_46;
        v39 = 0;
        v40 = &v36[4 * *(unsigned int *)v37 + 48];
        v41 = &v40[4 * v38];
        do
        {
          v44 = *(_DWORD *)v40;
          v42 = v40 + 4;
          v43 = v44;
          if (v30 < v44 && v42[v30])
            v39 = v42[v30];
          v40 = (char *)&v42[v43];
        }
        while (v40 != v41);
        if (!v39)
        {
LABEL_46:
          v107 = 0;
          v14 = v115;
          goto LABEL_47;
        }
        v45 = v116;
        if (v116 >= (unint64_t)HIDWORD(v116))
        {
          v108 = v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 4);
          v24 = v108;
          v15 = (unint64_t)&unk_1C7A5FD58;
          v13 = &unk_1C7EEF8C8;
          v11 = &unk_1C791AC24;
          v45 = v116;
        }
        *((_DWORD *)v115 + v45) = v39;
        v10 = v116 + 1;
        LODWORD(v116) = v116 + 1;
        ++v22;
      }
      while (v22 != v23);
      v46 = v24;
      v14 = v115;
      if (!v46)
        continue;
      v47 = (char *)v115 + 4 * v10;
      v48 = v47 - 4;
      v49 = &v47[-4 * v46];
      do
      {
        v50 = *((_DWORD *)v49 - 1);
        *((_DWORD *)v49 - 1) = *(_DWORD *)v48;
        *(_DWORD *)v48 = v50;
        v48 -= 4;
        v51 = v49 >= v48;
        v49 += 4;
      }
      while (!v51);
    }
    v10 = v116;
  }
  while (v10);
  v107 = 1;
LABEL_47:
  if (v14 != v117)
    free(v14);
  v54 = v112;
  if (!v107)
    goto LABEL_97;
  v119 = 0;
  v118 = 0u;
  if ((_DWORD)v113)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = (unsigned int *)((char *)v112 + 4 * v113);
    v59 = a4 + 1248;
    v60 = (unsigned int *)v112;
    while (1)
    {
      v61 = *v60;
      v62 = dword_1C7F399F4[v61] & 0x7FFF;
      if ((dword_1C7F399F4[v61] & 0x7FFF) != 0x7FFF)
      {
        v63 = (unsigned __int8 *)&unk_1C7F347F8 + v62 + v12;
        v64 = v63[1];
        if (v63[1])
        {
          v65 = *v63;
          v66 = (char *)&unk_1C7F347F8 + v62 + v65 + v64 + 12;
          v67 = (unsigned __int8 *)&unk_1C7F347F8 + v65 + v62 + 14;
          do
          {
            v68 = v67 - 2;
            v69 = *(v67 - 2);
            if (v69 == 3)
            {
              v57 = *(v67 - 1);
            }
            else if (v69 == 2)
            {
              v55 = *(v67 - 1) | ((unint64_t)*v67 << 32);
            }
            else
            {
              v56 = *(v67 - 1);
            }
            v67 += 3;
          }
          while (v68 + 3 != (unsigned __int8 *)v66);
        }
      }
      v70 = dword_1C8100964[v61] & 0x7FFFF;
      if ((_DWORD)v70 != 0x7FFFF)
      {
        v71 = (char *)&unk_1C803840C + 2 * v70;
        v72 = &v71[2 * v12];
        if (*((_WORD *)v72 + 1))
        {
          v73 = (unsigned __int16 *)&v71[2 * *(unsigned __int16 *)v72 + 24];
          v74 = &v73[*((unsigned __int16 *)v72 + 1)];
          while (1)
          {
            v75 = *v73;
            v76 = v73[1];
            v77 = v73[2];
            v78 = v75 >> 6;
            v79 = 1 << v75;
            if (((1 << v75) & *(_QWORD *)(v59 + 8 * (v75 >> 6))) == 0)
            {
              *(_QWORD *)(a4 + 8 * v75) = 0;
              *(_QWORD *)(v59 + 8 * v78) |= v79;
            }
            if ((*((_QWORD *)&v118 + v78) & v79) == 0)
            {
              *(&v115 + v75) = 0;
              *((_QWORD *)&v118 + v78) |= v79;
            }
            v80 = v76 | (v77 << 32);
            v81 = *(_QWORD *)(a4 + 8 * v75);
            if (((v81 ^ v80) & (unint64_t)*(&v115 + v75)) != 0)
              break;
            *(_QWORD *)(a4 + 8 * v75) = v81 | v80;
            *(&v115 + v75) = (void *)-1;
            v73 += 3;
            if (v73 == v74)
              goto LABEL_70;
          }
LABEL_97:
          v105 = 0;
          goto LABEL_106;
        }
      }
LABEL_70:
      v82 = dword_1C821EFE4[v61] & 0x1FFFF;
      if ((_DWORD)v82 != 0x1FFFF)
      {
        v83 = (unsigned __int8 *)&unk_1C81FF37C + v82 + v12;
        if (v83[1])
          break;
      }
LABEL_95:
      if (++v60 == v58)
        goto LABEL_99;
    }
    v84 = (unsigned __int8 *)&unk_1C81FF37C + v82 + *v83 + 12;
    v85 = &v84[v83[1]];
    while (1)
    {
      v86 = v84[1];
      v87 = v84[4];
      v88 = v84[2] | ((unint64_t)v84[3] << 32);
      if (v84[1])
        v15 = v15 & 0xFFFFFFFF00000000 | v87;
      else
        v15 = v87 | ((unint64_t)v84[5] << 32);
      v89 = *v84;
      v90 = v89 >> 6;
      v91 = 1 << v89;
      if ((*(_QWORD *)(v59 + 8 * (v89 >> 6)) & (1 << v89)) != 0)
      {
        if (v84[1])
          goto LABEL_78;
      }
      else
      {
        *(_QWORD *)(a4 + 8 * v89) = 0;
        *(_QWORD *)(v59 + 8 * v90) |= v91;
        if (v86)
        {
LABEL_78:
          v92 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE4(v88);
          if (!HIDWORD(v88))
            v92 = 0;
          if ((*((_QWORD *)&v118 + v90) & v91) == 0)
          {
            *(&v115 + v89) = 0;
            *((_QWORD *)&v118 + v90) |= v91;
          }
          v93 = ((_DWORD)v15 << v88);
          v94 = *(_QWORD *)(a4 + 8 * v89);
          v95 = v92 << v88;
          v96 = (uint64_t)*(&v115 + v89);
          if (((v94 ^ v93) & v95 & v96) != 0)
            goto LABEL_97;
          *(_QWORD *)(a4 + 8 * v89) = v94 | v93;
          *(&v115 + v89) = (void *)(v96 | v95);
          if (v86 == 1)
            v84 += 5;
          else
            v84 += 2;
          goto LABEL_94;
        }
      }
      v97 = (v15 >> 31) & 0xFFFFFFFE;
      if (a3 <= (v97 | 1uLL))
        goto LABEL_97;
      v98 = *(unsigned __int8 *)(a2 + v97);
      v99 = *(unsigned __int8 *)(a2 + (v97 | 1));
      v100 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
      if (!(_DWORD)v15)
        v100 = 0;
      if ((*((_QWORD *)&v118 + v90) & v91) == 0)
      {
        *(&v115 + v89) = 0;
        *((_QWORD *)&v118 + v90) |= v91;
      }
      v101 = (((v98 | (unint64_t)(v99 << 8)) >> SBYTE4(v88)) & ~(-1 << v15)) << v88;
      v102 = *(_QWORD *)(a4 + 8 * v89);
      v103 = v100 << v88;
      v104 = (uint64_t)*(&v115 + v89);
      if (((v102 ^ v101) & v103 & v104) != 0)
        goto LABEL_97;
      *(&v115 + v89) = (void *)(v104 | v103);
      *(_QWORD *)(a4 + 8 * v89) = v102 | v101;
      v84 += 6;
LABEL_94:
      if (v84 == v85)
        goto LABEL_95;
    }
  }
  v57 = 0;
  v56 = 0;
  v55 = 0;
LABEL_99:
  if (a5)
    *a5 = v55;
  if (a7)
    *a7 = v57;
  if (a6)
    *a6 = v56;
  v105 = 1;
LABEL_106:
  if (v54 != v114)
    free(v54);
  return v105;
}

uint64_t sub_1C4C95358(int a1, uint64_t a2, unint64_t a3, unint64_t *a4, int *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v9;
  uint64_t (*v10)();
  _BYTE v12[993];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  v9 = sub_1C4C94BE4(a1, a2, a3, (uint64_t)v12, a4, a5, a7);
  if ((_DWORD)v9)
  {
    v10 = sub_1C4CD9DD0(*a5);
    ((void (*)(_BYTE *, uint64_t))v10)(v12, a6);
  }
  return v9;
}

uint64_t sub_1C4C953D0(int a1, unsigned int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2 >= 4)
        goto LABEL_9;
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      if (a2 - 1 >= 3)
        goto LABEL_9;
LABEL_3:
      result = a2 + 137;
      break;
    case 4:
    case 5:
      if (a2 == 2)
      {
        result = 139;
      }
      else
      {
        if (a2 != 3)
LABEL_9:
          llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for ldimm", (const char *)1);
        result = 140;
      }
      break;
    default:
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1C4C95448(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C95464 + 4 * byte_1C831DA06[a1 - 137]))();
}

void sub_1C4C95464(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  a2[1] |= a3 & 0x7F;
  a2[4] |= (a3 >> 6) & 0x1E;
  a2[5] |= (a3 >> 9) & 0xC;
  a2[6] |= a3 >> 13;
  a2[7] |= (a3 >> 21) & 0xF;
  a2[3] |= 2 * (a3 >> 25);
}

void sub_1C4C954CC(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  char v3;

  a2[1] |= a3 & 3;
  a2[8] |= a3 >> 2;
  a2[9] |= a3 >> 10;
  v3 = a2[5];
  a2[3] |= (a3 >> 14) & 0xE0;
  a2[6] |= (a3 >> 22) & 0xF;
  a2[4] |= (a3 >> 26) & 7;
  a2[5] = (a3 >> 26) & 8 | (a3 >> 11) & 0x80 | v3;
  a2[2] |= (a3 >> 26) & 0x20 | (a3 >> 28) & 4;
}

void sub_1C4C95568(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  a2[6] |= 4 * (_BYTE)a3;
  a2[7] |= a3 >> 6;
  a2[8] |= a3 >> 14;
  a2[9] |= a3 >> 22;
  a2[10] |= a3 >> 30;
}

uint64_t sub_1C4C955A8(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_7;
      return 141;
    case 1:
    case 2:
    case 3:
      if (a2)
      {
LABEL_7:
        if (a2 != 1)
LABEL_12:
          llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for b", (const char *)1);
LABEL_5:
        result = 144;
      }
      else
      {
        result = 142;
      }
      break;
    case 4:
    case 5:
      if (a2 == 1)
        goto LABEL_5;
      if (a2)
        goto LABEL_12;
      result = 143;
      break;
    default:
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_1C4C95624(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C95640 + 4 * byte_1C831DA14[a1 - 141]))();
}

void sub_1C4C95640(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  v3 = (uint64x2_t)vdupq_n_s64(a3);
  *(_BYTE *)(a2 + 3) |= a3 & 0xFE;
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 4);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 4) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 8) |= BYTE5(a3);
}

void sub_1C4C9569C(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= (a3 >> 10) & 0x10;
  a2[4] |= (a3 >> 15) & 0x1F;
  a2[6] |= a3 >> 20;
  a2[7] |= (a3 >> 25) & 0xC0 | (a3 >> 28) & 7;
  a2[8] |= a3 >> 33;
  a2[9] |= (a3 >> 41) & 0x7F;
}

void sub_1C4C95760(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  *(_BYTE *)(a2 + 2) |= (_BYTE)a3 << 6;
  v3 = (uint64x2_t)vdupq_n_s64(a3 << 6);
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 3) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 7) |= a3 >> 34;
  JUMPOUT(0x1C4C9568CLL);
}

void sub_1C4C957C0(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= ((a3 >> 30) | (a3 >> 29) | (a3 >> 31) | BYTE4(a3) | (a3 >> 33) | (a3 >> 34) | (a3 >> 35) | (a3 >> 36) | (a3 >> 37) | (a3 >> 38) | (a3 >> 39) | BYTE5(a3) | (a3 >> 41) | (a3 >> 42) | (a3 >> 43) | (a3 >> 25) | (a3 >> 10) | (a3 >> 11) | (a3 >> 12) | (a3 >> 13) | (a3 >> 14) | (a3 >> 15) | BYTE2(a3) | (a3 >> 17) | (a3 >> 18) | (a3 >> 19) | (a3 >> 20) | (a3 >> 21) | (a3 >> 22) | (a3 >> 23) | BYTE3(a3)) & 0x10;
}

uint64_t sub_1C4C95910(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_7;
      return 145;
    case 1:
    case 2:
    case 3:
      if (a2)
      {
LABEL_7:
        if (a2 != 1)
LABEL_11:
          llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for bl", (const char *)1);
LABEL_3:
        result = 148;
      }
      else
      {
        result = 146;
      }
      break;
    case 4:
    case 5:
      if (a2 == 1)
        goto LABEL_3;
      if (a2)
        goto LABEL_11;
      result = 147;
      break;
    default:
      goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C4C9598C(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C959A8 + 4 * byte_1C831DA1E[a1 - 145]))();
}

void sub_1C4C959A8(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= (a3 >> 10) & 0x10;
  a2[4] |= (a3 >> 15) & 0x1F;
  a2[6] |= a3 >> 20;
  a2[7] |= (a3 >> 25) & 0xC0 | (a3 >> 28) & 7;
  a2[8] |= a3 >> 33;
  a2[9] |= (a3 >> 41) & 0x7F;
}

void sub_1C4C95A6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  v3 = (uint64x2_t)vdupq_n_s64(a3);
  *(_BYTE *)(a2 + 3) |= a3 & 0xFE;
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 4);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 4) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 8) |= BYTE5(a3);
}

void sub_1C4C95AC8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  *(_BYTE *)(a2 + 2) |= (_BYTE)a3 << 6;
  v3 = (uint64x2_t)vdupq_n_s64(a3 << 6);
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 3) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 7) |= a3 >> 34;
  JUMPOUT(0x1C4C95AB8);
}

void sub_1C4C95B28(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= ((a3 >> 30) | (a3 >> 29) | (a3 >> 31) | BYTE4(a3) | (a3 >> 33) | (a3 >> 34) | (a3 >> 35) | (a3 >> 36) | (a3 >> 37) | (a3 >> 38) | (a3 >> 39) | BYTE5(a3) | (a3 >> 41) | (a3 >> 42) | (a3 >> 43) | (a3 >> 25) | (a3 >> 10) | (a3 >> 11) | (a3 >> 12) | (a3 >> 13) | (a3 >> 14) | (a3 >> 15) | BYTE2(a3) | (a3 >> 17) | (a3 >> 18) | (a3 >> 19) | (a3 >> 20) | (a3 >> 21) | (a3 >> 22) | (a3 >> 23) | BYTE3(a3)) & 0x10;
}

uint64_t sub_1C4C95C78(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_7;
      return 149;
    case 1:
    case 2:
    case 3:
      if (a2)
      {
LABEL_7:
        if (a2 != 1)
LABEL_12:
          llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for bn", (const char *)1);
LABEL_5:
        result = 152;
      }
      else
      {
        result = 150;
      }
      break;
    case 4:
    case 5:
      if (a2 == 1)
        goto LABEL_5;
      if (a2)
        goto LABEL_12;
      result = 151;
      break;
    default:
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_1C4C95CF4(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4C95D10 + 4 * byte_1C831DA28[a1 - 149]))();
}

void sub_1C4C95D10(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  v3 = (uint64x2_t)vdupq_n_s64(a3);
  *(_BYTE *)(a2 + 3) |= a3 & 0xFE;
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 4);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 4) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 8) |= BYTE5(a3);
}

void sub_1C4C95D6C(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= (a3 >> 10) & 0x10;
  a2[4] |= (a3 >> 15) & 0x1F;
  a2[6] |= a3 >> 20;
  a2[7] |= (a3 >> 25) & 0xC0 | (a3 >> 28) & 7;
  a2[8] |= a3 >> 33;
  a2[9] |= (a3 >> 41) & 0x7F;
}

void sub_1C4C95E30(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  *(_BYTE *)(a2 + 2) |= (_BYTE)a3 << 6;
  v3 = (uint64x2_t)vdupq_n_s64(a3 << 6);
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 3) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 7) |= a3 >> 34;
  JUMPOUT(0x1C4C95D5CLL);
}

void sub_1C4C95E90(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  char v3;

  *a2 |= ((_BYTE)a3 << 6) & 0x80;
  v3 = a2[1];
  a2[2] |= (a3 >> 3) & 8 | (a3 >> 4) & 2 | (a3 >> 2) & 0xE0;
  a2[1] = (a3 >> 10) & 0xF | (16 * ((a3 >> 2) & 7)) | v3;
  a2[3] |= ((a3 >> 30) | (a3 >> 29) | (a3 >> 31) | BYTE4(a3) | (a3 >> 33) | (a3 >> 34) | (a3 >> 35) | (a3 >> 36) | (a3 >> 37) | (a3 >> 38) | (a3 >> 39) | BYTE5(a3) | (a3 >> 41) | (a3 >> 42) | (a3 >> 43) | (a3 >> 25) | (a3 >> 10) | (a3 >> 11) | (a3 >> 12) | (a3 >> 13) | (a3 >> 14) | (a3 >> 15) | BYTE2(a3) | (a3 >> 17) | (a3 >> 18) | (a3 >> 19) | (a3 >> 20) | (a3 >> 21) | (a3 >> 22) | (a3 >> 23) | BYTE3(a3)) & 0x10;
}

uint64_t sub_1C4C95FE0(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v3 = a1;
  v4 = a1 & 0xFF00000000;
  if ((a1 & 0xFF00000000) != 0 && (_DWORD)a1 == 4 || v4 && (a1 & 0xFFFFFFFE) == 4)
  {
    result = 1;
LABEL_6:
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  result = 1;
  if (v4)
  {
    if (v3 <= 3)
    {
      v6 = *a2;
      if (*a2)
      {
        if (v6 == 2)
          goto LABEL_6;
        if (v6 == 1)
          *(_BYTE *)(a3 + 7) = 1;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C96048(uint64_t a1, int *a2, int *a3, _BYTE *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;

  v4 = a1;
  v5 = a1 & 0xFF00000000;
  if ((a1 & 0xFF00000000) != 0 && (_DWORD)a1 == 4 || v5 && (a1 & 0xFFFFFFFE) == 4)
    goto LABEL_5;
  result = 1;
  if (v5 && v4 <= 3)
  {
    v7 = *a3;
    if ((*a3 - 1) < 2)
    {
      v8 = *a2;
      if (!*a2 || v8 == 2)
        goto LABEL_6;
      if (v8 == 1)
      {
        ++a4;
        goto LABEL_6;
      }
      return 0;
    }
    if (v7 && v7 != 5)
    {
      if ((v7 - 3) <= 1)
      {
LABEL_5:
        a4 += 2;
LABEL_6:
        result = 1;
        *a4 = 1;
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4C960E0(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, _BYTE *a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v6 = a1;
  v7 = a1 & 0xFF00000000;
  if ((a1 & 0xFF00000000) != 0 && (_DWORD)a1 == 4 || v7 && (a1 & 0xFFFFFFFE) == 4)
  {
    result = 1;
LABEL_6:
    a6[5] = 1;
    return result;
  }
  result = 1;
  if (v7)
  {
    if (v6 <= 3)
    {
      v9 = a3[1];
      if (v9)
      {
        if (v9 != 2)
        {
          if (v9 == 1)
          {
            v10 = a2[1];
            switch(v10)
            {
              case 2:
                goto LABEL_15;
              case 1:
LABEL_29:
                a6[4] = 1;
                return result;
              case 0:
LABEL_15:
                switch(*a3)
                {
                  case 0:
                  case 3:
                  case 5:
                    a6[3] = 1;
                    break;
                  case 1:
                    goto LABEL_29;
                  default:
                    return 0;
                }
                return result;
            }
          }
          return 0;
        }
        v11 = a2[1];
        if (v11 > 1)
        {
          if (v11 != 2)
            return 0;
          v13 = *a2;
          v14 = *a4;
          if (!(*a2 | *a4))
            goto LABEL_6;
          if (v13 != 4 && v13 != 1)
            return 0;
          if (v14 != 1)
          {
            if (!v14)
              goto LABEL_6;
            return 0;
          }
        }
        else
        {
          v12 = *a2;
          if (*a2 < 2)
            goto LABEL_6;
          if (v12 != 3)
          {
            if (v12 == 4)
              goto LABEL_6;
            return 0;
          }
          if (*a5 < 2u)
            goto LABEL_6;
          if (*a5 != 2)
            return 0;
        }
        v15 = *a3;
        if (*a3 < 2)
          goto LABEL_6;
        if (v15 == 3)
        {
          a6[6] = 1;
          return result;
        }
        if (v15 == 5)
          goto LABEL_6;
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4C9622C(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t result;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  result = 1;
  if ((a1 & 0xFF00000000) == 0)
    return result;
  if (a1 != 4)
    return result;
  v8 = a3[1];
  if (!v8)
    return result;
  if (v8 == 2)
  {
    v9 = a2[1];
    if (v9 > 1)
    {
      if (v9 == 2)
      {
        v11 = *a2;
        v12 = *a4;
        if (!(*a2 | *a4))
          goto LABEL_8;
        if (v11 == 1 || v11 == 4)
        {
          if (!v12)
            goto LABEL_8;
          v13 = v12 == 1;
          goto LABEL_14;
        }
      }
    }
    else
    {
      v10 = *a2;
      if (*a2 < 2)
      {
LABEL_8:
        a6[5] = 1;
        return result;
      }
      if (v10 == 3)
      {
        v13 = *a5 == 2;
        if (*a5 < 2u)
          goto LABEL_8;
LABEL_14:
        if (v13)
        {
          v14 = *a3;
          if (*a3 < 2 || v14 == 3 || v14 == 5)
            goto LABEL_8;
        }
        return 0;
      }
      if (v10 == 4)
        goto LABEL_8;
    }
    return 0;
  }
  if (v8 != 1)
    return 0;
  v15 = a2[1];
  if (v15 != 2)
  {
    if (v15 == 1)
    {
LABEL_33:
      a6[4] = 1;
      return result;
    }
    if (v15)
      return 0;
  }
  switch(*a3)
  {
    case 0:
    case 3:
    case 5:
      a6[3] = 1;
      break;
    case 1:
      goto LABEL_33;
    default:
      return 0;
  }
  return result;
}

BOOL sub_1C4C96358()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  char *v12;
  int v13;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  int v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27[2];
  _BYTE v28[2944];
  void *v29;
  uint64_t v30;
  _BYTE v31[448];
  void *v32;
  uint64_t v33;
  _QWORD v34[960];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v34[957] = *MEMORY[0x1E0C80C00];
  v6 = dword_1C8472A34[(int)v1];
  v32 = v34;
  v33 = 0x13800000000;
  v7 = sub_1C4C0B354(v1);
  sub_1C4C971F4(v4, v2, v7, (uint64_t)&v32, 0);
  v8 = *((_DWORD *)v32 + 6 * v33 - 1);
  LODWORD(v33) = v33 - 1;
  v22 = v6 | 0x100000000;
  v23 = v33 - v8;
  v24 = v8;
  v25 = v8;
  v26 = 0;
  v29 = v31;
  v30 = 0x1000000000;
  sub_1C4C9747C((uint64_t)&v29, (unint64_t)&v22);
  v9 = word_1C831DAFE[2 * v6];
  v27[0] = v28;
  v27[1] = (void *)0x1000000000;
  v15 = v5;
  v16 = &v32;
  v17 = &v29;
  v18 = v27;
  v19 = v9;
  v20 = 0;
  v21 = 0;
  if ((_DWORD)v30)
  {
    v10 = dword_1C844C5A0[v19] & 0x3FFFF;
    v11 = v10 == 0x3FFFF;
    if (v10 == 0x3FFFF)
      v10 = -1;
    v12 = (char *)&unk_1C831EC28 + 8 * v10;
    if (v11)
      v12 = 0;
    __asm { BR              X12 }
  }
  v13 = v21;
  if (v27[0] != v28)
    free(v27[0]);
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  return v13 == 0;
}

uint64_t sub_1C4C971F4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  int v26;
  unsigned int v28;
  __n128 v29;
  char *v30;
  void *__src;
  uint64_t v32;
  _QWORD v33[49];

  v33[48] = *MEMORY[0x1E0C80C00];
  __src = v33;
  v32 = 0x1000000000;
  v10 = sub_1C4C0B364(a3);
  if ((v10 - 2) >= 3)
  {
    if (v10 == 5)
      llvm::report_fatal_error((llvm *)"Don't expect externs here.", (const char *)1);
    goto LABEL_17;
  }
  v12 = dword_1C6A5D66C[a3] & 0x1FFF;
  LODWORD(v13) = dword_1C6A5D66C[a3] >> 13;
  v14 = v12 == 0x1FFF;
  if (v12 == 0x1FFF)
  {
    v12 = -1;
    v13 = 0;
  }
  else
  {
    v13 = v13;
  }
  v11 = (char *)&unk_1C6A59E3E + 2 * v12;
  if (v14)
    v15 = 0;
  else
    v15 = (unsigned __int16 *)v11;
  if (!(_DWORD)v13)
    goto LABEL_17;
  v16 = 2 * v13;
  do
  {
    v17 = *v15++;
    a5 = sub_1C4C971F4(a1, a2, v17, a4, a5);
    v18 = *(_DWORD *)(a4 + 8);
    v19 = *(_QWORD *)a4 + 24 * v18;
    v20 = *(char **)(v19 - 8);
    v29 = *(__n128 *)(v19 - 24);
    v30 = v20;
    *(_DWORD *)(a4 + 8) = v18 - 1;
    sub_1C4AB8FDC((uint64_t)&__src, &v29);
    v16 -= 2;
  }
  while (v16);
  v21 = v32;
  if (!(_DWORD)v32)
  {
LABEL_17:
    v25 = 2;
    if ((_DWORD)a5 != 156)
    {
      v11 = (char *)(a1 + 8 * (a5 >> 6));
      if (((1 << a5) & *((_QWORD *)v11 + 156)) != 0)
      {
        v25 = 0;
        v11 = *(char **)(a1 + 8 * a5);
      }
    }
    v29.n128_u64[0] = __PAIR64__(v25, a3);
    v30 = v11;
    v26 = sub_1C4C0B374(a2);
    v29.n128_u8[12] = 1;
    v29.n128_u32[2] = v26 + a5;
    a5 = (a5 + 1);
    goto LABEL_21;
  }
  v22 = 0;
  v23 = *(unsigned int *)(a4 + 8);
  v24 = __src;
  while (*(_DWORD *)((char *)__src + v22 + 4) == 2)
  {
    v22 += 24;
    if (24 * v32 == v22)
    {
      v29.n128_u64[0] = a3 | 0x200000000;
      v29.n128_u8[8] = 0;
      v29.n128_u8[12] = 0;
      goto LABEL_21;
    }
  }
  v28 = *(_DWORD *)(a4 + 8);
  if (v23 + (unint64_t)v32 > *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v23 + v32, 24);
    v28 = *(_DWORD *)(a4 + 8);
  }
  memcpy((void *)(*(_QWORD *)a4 + 24 * v28), v24, 24 * v21);
  *(_DWORD *)(a4 + 8) += v21;
  v29.n128_u64[0] = a3 | 0x100000000;
  v29.n128_u8[8] = 0;
  v29.n128_u8[12] = 0;
  v30 = (char *)(v23 | (v21 << 32));
LABEL_21:
  sub_1C4AB8FDC(a4, &v29);
  if (__src != v33)
    free(__src);
  return a5;
}

__n128 sub_1C4C9747C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 28 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 28);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 28);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 28 * *(unsigned int *)(a1 + 8);
  result = *(__n128 *)v2;
  *(_OWORD *)(v6 + 12) = *(_OWORD *)(v2 + 12);
  *(__n128 *)v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C4C97524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **(_QWORD **)(a1 + 16) + 28 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8);
  v3 = *(_QWORD *)(v2 - 8);
  if ((v3 & 0xFF00000000) != 0)
    *(_DWORD *)(a1 + 32) = v3;
  sub_1C4C97794(*(_QWORD *)(a1 + 8), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - (unint64_t)*(unsigned int *)(v2 - 12));
  --*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
}

void *sub_1C4C97588(void *result, uint64_t a2, int a3, _OWORD *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  _DWORD v33[5];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _BYTE v45[164];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a4[7];
  *(_OWORD *)&v45[100] = a4[6];
  *(_OWORD *)&v45[116] = v5;
  v6 = a4[9];
  *(_OWORD *)&v45[132] = a4[8];
  *(_OWORD *)&v45[148] = v6;
  v7 = a4[3];
  *(_OWORD *)&v45[36] = a4[2];
  *(_OWORD *)&v45[52] = v7;
  v8 = a4[5];
  *(_OWORD *)&v45[68] = a4[4];
  *(_OWORD *)&v45[84] = v8;
  v9 = a4[1];
  *(_OWORD *)&v45[4] = *a4;
  *(_OWORD *)&v45[20] = v9;
  v10 = *(unsigned int *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    v41 = *(_OWORD *)&v45[112];
    v42 = *(_OWORD *)&v45[128];
    v43 = *(_OWORD *)&v45[144];
    v37 = *(_OWORD *)&v45[48];
    v38 = *(_OWORD *)&v45[64];
    v39 = *(_OWORD *)&v45[80];
    v40 = *(_OWORD *)&v45[96];
    v34 = *(_OWORD *)v45;
    v35 = *(_OWORD *)&v45[16];
    v33[0] = (_DWORD)result - 1;
    v33[2] = 0;
    v33[4] = a3;
    v17 = *(_QWORD *)a2;
    v18 = *(_QWORD *)a2 + 184 * v10;
    v19 = v10 + 1;
    v44 = *(_DWORD *)&v45[160];
    v36 = *(_OWORD *)&v45[32];
    if (v17 <= (unint64_t)v33 && v18 > (unint64_t)v33)
    {
      v32 = (char *)v33 - v17;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19, 184);
      v20 = *(_QWORD *)a2;
      v21 = &v32[*(_QWORD *)a2];
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19, 184);
      v20 = *(_QWORD *)a2;
      v21 = (char *)v33;
    }
    v22 = v20 + 184 * *(unsigned int *)(a2 + 8);
    v23 = *(_OWORD *)v21;
    v24 = *((_OWORD *)v21 + 1);
    v25 = *((_OWORD *)v21 + 3);
    *(_OWORD *)(v22 + 32) = *((_OWORD *)v21 + 2);
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    v26 = *((_OWORD *)v21 + 4);
    v27 = *((_OWORD *)v21 + 5);
    v28 = *((_OWORD *)v21 + 7);
    *(_OWORD *)(v22 + 96) = *((_OWORD *)v21 + 6);
    *(_OWORD *)(v22 + 112) = v28;
    *(_OWORD *)(v22 + 64) = v26;
    *(_OWORD *)(v22 + 80) = v27;
    v29 = *((_OWORD *)v21 + 8);
    v30 = *((_OWORD *)v21 + 9);
    v31 = *((_OWORD *)v21 + 10);
    *(_QWORD *)(v22 + 176) = *((_QWORD *)v21 + 22);
    *(_OWORD *)(v22 + 144) = v30;
    *(_OWORD *)(v22 + 160) = v31;
    *(_OWORD *)(v22 + 128) = v29;
  }
  else
  {
    v11 = *(_QWORD *)a2 + 184 * v10;
    v12 = *(_OWORD *)&v45[96];
    *(_OWORD *)(v11 + 132) = *(_OWORD *)&v45[112];
    v13 = *(_OWORD *)&v45[144];
    *(_OWORD *)(v11 + 148) = *(_OWORD *)&v45[128];
    *(_OWORD *)(v11 + 164) = v13;
    v14 = *(_OWORD *)&v45[32];
    *(_OWORD *)(v11 + 68) = *(_OWORD *)&v45[48];
    v15 = *(_OWORD *)&v45[80];
    *(_OWORD *)(v11 + 84) = *(_OWORD *)&v45[64];
    *(_OWORD *)(v11 + 100) = v15;
    *(_OWORD *)(v11 + 116) = v12;
    v16 = *(_OWORD *)&v45[16];
    *(_OWORD *)(v11 + 20) = *(_OWORD *)v45;
    *(_OWORD *)(v11 + 36) = v16;
    *(_DWORD *)v11 = (_DWORD)result - 1;
    *(_DWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = a3;
    *(_DWORD *)(v11 + 180) = *(_DWORD *)&v45[160];
    *(_OWORD *)(v11 + 52) = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_1C4C97794(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 24);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((-24 * v2 + 24 * a2 - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C4C9782C(uint64_t *a1, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v2 = 0;
  v3 = 0;
  v14[2] = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = 0;
  v14[0] = &v11;
  v14[1] = &v12;
  v13[0] = (char *)&v11 + 4;
  v13[1] = (char *)&v12 + 4;
  v4 = *a1;
  v5 = 1;
  while (1)
  {
    v6 = v5;
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (_BYTE *)(v4 + 12);
      v9 = 28 * v7;
      while (v3 != *((_DWORD *)v8 - 2))
      {
        v8 += 28;
        v9 -= 28;
        if (!v9)
          goto LABEL_6;
      }
      *(_DWORD *)v14[v3] = *((_DWORD *)v8 - 1);
      *(_BYTE *)v13[v3] = *v8 & 0x1F;
      v4 = *a1;
      goto LABEL_9;
    }
LABEL_6:
    if (a2 == 0 && (v2 & 1) != 0)
      break;
LABEL_9:
    v5 = 0;
    v2 = 1;
    v3 = 1;
    if ((v6 & 1) == 0)
      return v11;
  }
  *(_BYTE *)v13[v3] = 16;
  return v11;
}

void sub_1C4C97930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  const void *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  const void **v54;
  __int128 v55;
  _DWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v61;
  __int128 v62;
  BOOL v63;
  unint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  _BOOL4 v77;
  __int128 *v78;
  __int128 v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[56];
  _BYTE v84[32];
  unint64_t v85;
  _BYTE v86[64];
  char *v87;
  uint64_t v88;
  _QWORD v89[9];

  v89[7] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = 96 * v4;
    do
    {
      if (*(_DWORD *)v6 == 1)
        v5 |= (*(_DWORD *)(*(_QWORD *)(v6 + 24) + 8) & 0xFFFFFFFE) == 2;
      v6 += 96;
      v7 -= 96;
    }
    while (v7);
    if ((v5 & 1) != 0)
    {
      v8 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v8)
      {
        v9 = (_DWORD *)(*(_QWORD *)a2 + 32);
        v10 = 96 * v8;
        while (1)
        {
          if (*(v9 - 8) == 1 && *v9 == 2)
          {
            v11 = *((_QWORD *)v9 - 1);
            if (*(_DWORD *)(v11 + 8) == 4 && *(_DWORD *)(v11 + 36) == 10)
              break;
          }
LABEL_32:
          v9 += 24;
          v10 -= 96;
          if (!v10)
          {
            LODWORD(v4) = *(_DWORD *)(a1 + 8);
            goto LABEL_51;
          }
        }
        v87 = (char *)v89;
        v88 = 0x200000000;
        v12 = (__int128 *)sub_1C4C9CF58((uint64_t)&v87, v11);
        v13 = &v87[28 * v88];
        v14 = *v12;
        *(_OWORD *)(v13 + 12) = *(__int128 *)((char *)v12 + 12);
        *(_OWORD *)v13 = v14;
        v15 = v88;
        v16 = (v88 + 1);
        LODWORD(v88) = v88 + 1;
        v17 = *(v9 - 7);
        v81 = v83;
        v82 = 0x200000000;
        if (v15 == -1)
        {
          *(_DWORD *)v84 = *(v9 - 8);
          *(_DWORD *)&v84[4] = v17;
          *(_QWORD *)&v84[24] = v86;
          v85 = 0x200000000;
LABEL_23:
          v23 = sub_1C4A20CD0(a2, (unint64_t)v84, 1);
          v24 = *(_QWORD *)a2 + 96 * *(unsigned int *)(a2 + 8);
          v25 = *(_OWORD *)v23;
          *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
          *(_OWORD *)v24 = v25;
          v26 = (void *)(v24 + 40);
          *(_QWORD *)(v24 + 32) = 0x200000000;
          *(_QWORD *)(v24 + 24) = v24 + 40;
          v27 = v24 + 24;
          v28 = *(unsigned int *)(v23 + 32);
          if (!(_DWORD)v28 || v27 == v23 + 24)
            goto LABEL_24;
          v30 = *(const void **)(v23 + 24);
          if (v30 != (const void *)(v23 + 40))
          {
            if (v26 != (void *)(v27 + 16))
            {
              free(v26);
              v30 = *(const void **)(v23 + 24);
              LODWORD(v28) = *(_DWORD *)(v23 + 32);
            }
            *(_QWORD *)v27 = v30;
            *(_DWORD *)(v27 + 8) = v28;
            *(_DWORD *)(v27 + 12) = *(_DWORD *)(v23 + 36);
            *(_QWORD *)(v23 + 24) = v23 + 40;
            *(_DWORD *)(v23 + 36) = 0;
            goto LABEL_40;
          }
          if (v28 >= 3)
          {
            *(_DWORD *)(v27 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v27, v27 + 16, v28, 28);
            v31 = *(unsigned int *)(v23 + 32);
            if (!(_DWORD)v31)
              goto LABEL_39;
            v30 = *(const void **)(v23 + 24);
            v26 = *(void **)v27;
          }
          else
          {
            v31 = *(unsigned int *)(v23 + 32);
          }
          memcpy(v26, v30, 28 * v31);
LABEL_39:
          *(_DWORD *)(v27 + 8) = v28;
LABEL_40:
          *(_DWORD *)(v23 + 32) = 0;
LABEL_24:
          ++*(_DWORD *)(a2 + 8);
          if (*(_BYTE **)&v84[24] != v86)
            free(*(void **)&v84[24]);
          if (v81 != v83)
            free(v81);
          v29 = *v9;
          if (*v9 != 1)
          {
            memmove(*((void **)v9 - 1), (const void *)(*((_QWORD *)v9 - 1) + 28), 28 * v29 - 28);
            v29 = *v9;
          }
          *v9 = v29 - 1;
          *(_DWORD *)(*((_QWORD *)v9 - 1) + 4) = 0;
          if (v87 != (char *)v89)
            free(v87);
          goto LABEL_32;
        }
        v18 = v83;
        v19 = v15 + 1;
        if (v16 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v16, 28);
          v19 = v88;
          if (!(_DWORD)v88)
          {
LABEL_17:
            LODWORD(v82) = v16;
            *(_DWORD *)v84 = *(v9 - 8);
            *(_DWORD *)&v84[4] = v17;
            *(_QWORD *)&v84[24] = v86;
            v85 = 0x200000000;
            if (v81 != v83)
            {
              *(_QWORD *)&v84[24] = v81;
              v85 = __PAIR64__(HIDWORD(v82), v16);
              v81 = v83;
              HIDWORD(v82) = 0;
              goto LABEL_22;
            }
            if (v16 >= 3)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84[24], (uint64_t)v86, v16, 28);
              v22 = v82;
              if (!(_DWORD)v82)
                goto LABEL_21;
              v21 = v81;
              v20 = *(_BYTE **)&v84[24];
            }
            else
            {
              v20 = v86;
              v21 = v83;
              v22 = v16;
            }
            memcpy(v20, v21, 28 * v22);
LABEL_21:
            LODWORD(v85) = v16;
LABEL_22:
            LODWORD(v82) = 0;
            goto LABEL_23;
          }
          v18 = v81;
        }
        memcpy(v18, v87, 28 * v19);
        goto LABEL_17;
      }
    }
  }
LABEL_51:
  v32 = *(_DWORD *)(a2 + 8);
  if (v32)
  {
    v33 = *(_QWORD *)a2;
    v80 = v33 + 96 * v32;
    while (1)
    {
      if (*(_DWORD *)v33 != 1)
        goto LABEL_96;
      v34 = *(_DWORD *)(v33 + 32);
      if (!v34)
        goto LABEL_102;
      v35 = *(_OWORD **)(v33 + 24);
      v36 = v35;
      do
      {
        if ((_DWORD)v4)
        {
          v37 = 0;
          v38 = *(_QWORD *)a1;
          while (1)
          {
            v39 = (int *)(v38 + 96 * v37);
            v41 = *v39;
            v40 = v39[1];
            if (v41 == 1 && v40 == *(_DWORD *)(v33 + 4))
            {
              v43 = v38 + 96 * v37;
              v44 = *(unsigned int *)(v43 + 32);
              if ((_DWORD)v44)
                break;
            }
LABEL_69:
            if (++v37 == v4)
              goto LABEL_70;
          }
          v45 = (_BYTE *)(*(_QWORD *)(v43 + 24) + 24);
          v46 = 28 * v44;
          while (*((_DWORD *)v45 - 6) != *(_DWORD *)v36
               || *((_DWORD *)v45 - 4) != *((_DWORD *)v36 + 2)
               || *((_DWORD *)v45 - 3) != *((_DWORD *)v36 + 3))
          {
            v45 += 28;
            v46 -= 28;
            if (!v46)
              goto LABEL_69;
          }
          if (!*v45 && *((_BYTE *)v36 + 24))
          {
            *((_DWORD *)v45 - 1) = *((_DWORD *)v36 + 5);
            *v45 = 1;
            v34 = *(_DWORD *)(v33 + 32);
          }
          v47 = (char *)v35 + 28 * v34;
          if (v47 != (char *)v36 + 28)
          {
            memmove(v36, (char *)v36 + 28, v47 - ((char *)v36 + 28));
            v34 = *(_DWORD *)(v33 + 32);
            v35 = *(_OWORD **)(v33 + 24);
          }
          *(_DWORD *)(v33 + 32) = --v34;
        }
        else
        {
LABEL_70:
          v36 = (_OWORD *)((char *)v36 + 28);
        }
      }
      while (v36 != (_OWORD *)((char *)v35 + 28 * v34));
      if (!v34)
        goto LABEL_102;
      if (v34 != 2)
        break;
      v48 = sub_1C4A20CD0(a1, v33, 1);
      v49 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 8);
      v50 = *(_OWORD *)v48;
      *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 16);
      *(_OWORD *)v49 = v50;
      v51 = (void *)(v49 + 40);
      *(_QWORD *)(v49 + 32) = 0x200000000;
      *(_QWORD *)(v49 + 24) = v49 + 40;
      v52 = v49 + 24;
      v53 = *(unsigned int *)(v48 + 32);
      if (!(_DWORD)v53)
        goto LABEL_101;
      v54 = (const void **)(v48 + 24);
      if (v52 == v48 + 24)
        goto LABEL_101;
LABEL_104:
      if (v53 >= 3)
      {
        *(_DWORD *)(v52 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v52, v52 + 16, v53, 28);
        v64 = *(unsigned int *)(v48 + 32);
        if (!(_DWORD)v64)
          goto LABEL_107;
        v51 = *(void **)v52;
      }
      else
      {
        v64 = v53;
      }
      memcpy(v51, *v54, 28 * v64);
LABEL_107:
      *(_DWORD *)(v52 + 8) = v53;
LABEL_101:
      ++*(_DWORD *)(a1 + 8);
LABEL_102:
      v33 += 96;
      if (v33 == v80)
        return;
    }
    v55 = *v35;
    *(_OWORD *)&v84[12] = *(_OWORD *)((char *)v35 + 12);
    *(_OWORD *)v84 = v55;
    if ((_DWORD)v4)
    {
      v56 = (_DWORD *)(*(_QWORD *)a1 + 24);
      v57 = v4;
      while (1)
      {
        v58 = *(v56 - 6) == 1 && *(v56 - 5) == *(_DWORD *)(v33 + 4);
        if (v58 && v56[2] == 1)
        {
          v59 = *(_QWORD *)v56;
          if (*(_DWORD *)(*(_QWORD *)v56 + 8) != 5 || (*(_DWORD *)&v84[8] - 1) >= 3)
            break;
        }
        v56 += 24;
        if (!--v57)
          goto LABEL_96;
      }
      if (*(_DWORD *)(v59 + 12) >= *(_DWORD *)&v84[12])
      {
        *(_DWORD *)&v84[4] = 0;
        *(_DWORD *)(v59 + 4) = 1;
        v68 = sub_1C4C9CF58((uint64_t)v56, (unint64_t)v84);
        v69 = *(_OWORD **)v56;
        v70 = (_OWORD *)(*(_QWORD *)v56 + 28 * v56[2]);
        *(_OWORD *)((char *)v70 + 12) = *(v70 - 1);
        *v70 = *(_OWORD *)((char *)v70 - 28);
        v71 = *(_QWORD *)v56;
        v72 = v56[2];
        v73 = *(_QWORD *)v56 + 28 * v72 - 28;
        if ((_OWORD *)v73 != v69)
        {
          memmove((char *)v69 + 28, v69, v73 - (_QWORD)v69);
          v72 = v56[2];
          v71 = *(_QWORD *)v56;
        }
        v74 = v72 + 1;
        v56[2] = v74;
        v75 = v71 + 28 * v74;
        v77 = v68 >= (unint64_t)v69 && v68 < v75;
        v78 = (__int128 *)(v68 + 28 * v77);
        v79 = *v78;
        *(_OWORD *)((char *)v69 + 12) = *(__int128 *)((char *)v78 + 12);
        *v69 = v79;
      }
      else
      {
        *(_DWORD *)&v84[4] = 1;
        v65 = (__int128 *)sub_1C4C9CF58((uint64_t)v56, (unint64_t)v84);
        v66 = (_OWORD *)(*(_QWORD *)v56 + 28 * v56[2]);
        v67 = *v65;
        *(_OWORD *)((char *)v66 + 12) = *(__int128 *)((char *)v65 + 12);
        *v66 = v67;
        ++v56[2];
      }
      goto LABEL_102;
    }
LABEL_96:
    v48 = sub_1C4A20CD0(a1, v33, 1);
    v61 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 8);
    v62 = *(_OWORD *)v48;
    *(_QWORD *)(v61 + 16) = *(_QWORD *)(v48 + 16);
    *(_OWORD *)v61 = v62;
    v51 = (void *)(v61 + 40);
    *(_QWORD *)(v61 + 32) = 0x200000000;
    *(_QWORD *)(v61 + 24) = v61 + 40;
    v52 = v61 + 24;
    v53 = *(unsigned int *)(v48 + 32);
    v54 = (const void **)(v48 + 24);
    if ((_DWORD)v53)
      v63 = v52 == (_QWORD)v54;
    else
      v63 = 1;
    if (v63)
      goto LABEL_101;
    goto LABEL_104;
  }
}

void sub_1C4C980AC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unsigned int *v3;
  __n128 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned __int8 *v42[2];
  void *v43;
  uint64_t v44;
  _BYTE v45[1536];
  void *v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  unsigned int v59;
  _QWORD v60[194];

  v0 = MEMORY[0x1E0C80A78]();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v1;
  v14 = (_BYTE *)v0;
  v15 = v3;
  v60[192] = *MEMORY[0x1E0C80C00];
  if (v2 == 5)
    v16 = 4;
  else
    v16 = v2;
  *(_QWORD *)v3 = v3 + 4;
  *((_QWORD *)v3 + 1) = 0x1000000000;
  if (*(_BYTE *)(v0 + 8))
  {
    sub_1C4C98540(&v58, v1, v4);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v58);
    v17 = (char *)v58;
    if (v59)
    {
      v18 = 96 * v59;
      do
      {
        v19 = *(char **)&v17[v18 - 72];
        if (&v17[v18 - 56] != v19)
          free(v19);
        v18 -= 96;
      }
      while (v18);
      v17 = (char *)v58;
    }
    if (v17 != (char *)v60)
      free(v17);
  }
  v41 = HIDWORD(v12);
  if (v14[2])
    v20 = (_DWORD)v13 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    sub_1C4C98650(&v55, v6, v4);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v55);
    v21 = (char *)v55;
    if (v56)
    {
      v40 = v16;
      v22 = v12;
      v23 = v8;
      v24 = v10;
      v25 = 96 * v56;
      do
      {
        v26 = *(char **)&v21[v25 - 72];
        if (&v21[v25 - 56] != v26)
        {
          v39 = v21;
          free(v26);
          v21 = v39;
        }
        v25 -= 96;
      }
      while (v25);
      v21 = (char *)v55;
      v10 = v24;
      v8 = v23;
      LODWORD(v12) = v22;
      v16 = v40;
    }
    if (v21 != (char *)&v57)
      free(v21);
  }
  if (v14[5])
  {
    sub_1C4C9871C(&v52, v13, SHIDWORD(v13), v12, v41, v8, v10, v6, v16);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v52);
    v27 = (char *)v52;
    if (v53)
    {
      v28 = 96 * v53;
      do
      {
        v29 = *(char **)&v27[v28 - 72];
        if (&v27[v28 - 56] != v29)
          free(v29);
        v28 -= 96;
      }
      while (v28);
      v27 = (char *)v52;
    }
    if (v27 != (char *)&v54)
      free(v27);
  }
  if (v14[9])
  {
    if (v16 > 4)
      sub_1C4C9CCE0(&v49, v13, HIDWORD(v13), v12, v41);
    else
      sub_1C4C9CAC0(&v49, v13, HIDWORD(v13), v12, v41);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v49);
    v30 = (char *)v49;
    if (v50)
    {
      v31 = 96 * v50;
      do
      {
        v32 = *(char **)&v30[v31 - 72];
        if (&v30[v31 - 56] != v32)
          free(v32);
        v31 -= 96;
      }
      while (v31);
      v30 = (char *)v49;
    }
    if (v30 != (char *)&v51)
      free(v30);
  }
  if (v14[11])
  {
    sub_1C4C98A78(&v46, v13, v4);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v46);
    v33 = (char *)v46;
    if (v47)
    {
      v34 = 96 * v47;
      do
      {
        v35 = *(char **)&v33[v34 - 72];
        if (&v33[v34 - 56] != v35)
          free(v35);
        v34 -= 96;
      }
      while (v34);
      v33 = (char *)v46;
    }
    if (v33 != (char *)&v48)
      free(v33);
  }
  if (v14[12])
  {
    v44 = 0x1000000000;
    v42[0] = (unsigned __int8 *)&unk_1C8499936;
    v42[1] = (unsigned __int8 *)&unk_1C849993C;
    v43 = v45;
    sub_1C4C99D3C(v42, (uint64_t)&v43, v4);
    sub_1C4C97930((uint64_t)v15, (uint64_t)&v43);
    v36 = (char *)v43;
    if ((_DWORD)v44)
    {
      v37 = 96 * v44;
      do
      {
        v38 = *(char **)&v36[v37 - 72];
        if (&v36[v37 - 56] != v38)
          free(v38);
        v37 -= 96;
      }
      while (v37);
      v36 = (char *)v43;
    }
    if (v36 != v45)
      free(v36);
  }
  sub_1C4C98B88(v15, (_DWORD)v13 == 3, v12 == 5);
}

double sub_1C4C98540(_QWORD *a1, unsigned int a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 2;
  v4 = (uint64_t)&dword_1C848E010;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (unsigned int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a2)
        break;
      v4 = (uint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((_UNKNOWN *)v4 == &unk_1C848E018 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a2)
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  else
  {
    *a1 = a1 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v9 = word_1C849963A[((unint64_t)(v4 - (_QWORD)&dword_1C848E010) >> 2)];
    LODWORD(v4) = v9 & 0x1F;
    LODWORD(v10) = v9 >> 5;
    v11 = (_DWORD)v4 == 31;
    if ((_DWORD)v4 == 31)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C849960E + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a1, a3);
  }
  return result;
}

uint64_t sub_1C4C98650(_QWORD *a1, int a2, __n128 a3)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned __int8 *v13[2];

  *a1 = a1 + 2;
  a3.n128_u64[0] = 0x1000000000;
  a1[1] = 0x1000000000;
  v13[0] = (unsigned __int8 *)&unk_1C849963E;
  v13[1] = (unsigned __int8 *)&unk_1C8499648;
  result = sub_1C4C99D3C(v13, (uint64_t)a1, a3);
  v6 = *((_DWORD *)a1 + 2);
  if (v6)
  {
    v7 = *a1;
    v8 = *a1 + 96 * v6;
    if (a2)
      v9 = 3;
    else
      v9 = 2;
    do
    {
      if ((*(_DWORD *)v7 - 1) <= 1)
      {
        v10 = *(unsigned int *)(v7 + 32);
        if ((_DWORD)v10)
        {
          v11 = 28 * v10;
          v12 = (int *)(*(_QWORD *)(v7 + 24) + 8);
          do
          {
            if ((*v12 & 0xFFFFFFFE) == 2)
              *v12 = v9;
            v12 += 7;
            v11 -= 28;
          }
          while (v11);
        }
      }
      v7 += 96;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t sub_1C4C9871C(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9)
{
  uint64_t v11;
  __int16 *v12;
  uint64_t result;
  uint64_t v14;
  __int16 *v15;
  __n128 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  __n128 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  char v43;
  char v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  char v50;
  int v51;
  char v52;
  char v53;
  int v54;
  char v55;
  char v56;
  int v57;
  char v58;
  char v59;
  int v60;
  char v61;
  char v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;

  if (a9 > 3)
  {
    v11 = 0;
    v42 = a2;
    v45 = a3;
    v43 = 1;
    v44 = 0;
    v46 = 1;
    v47 = 0;
    v48 = a4;
    v49 = 1;
    v50 = 0;
    v51 = a5;
    v52 = 1;
    v53 = 0;
    v54 = a6;
    v55 = 1;
    v56 = 0;
    v57 = a7;
    v58 = 1;
    v59 = 0;
    v60 = a8;
    v61 = 1;
    v12 = &word_1C84996F0;
    v62 = 0;
    while (1)
    {
      sub_1C4C9B14C(&v63, (int *)((char *)&unk_1C848E210 + v11));
      result = sub_1C4C9C8B4((uint64_t)&v63, (uint64_t)&v42);
      if ((result & 1) != 0)
        break;
      ++v12;
      v11 += 28;
      if (v11 == 588)
        goto LABEL_5;
    }
    sub_1C4C9B14C(&v63, (int *)((char *)&unk_1C848E210 + v11));
    result = sub_1C4C9C8B4((uint64_t)&v63, (uint64_t)&v42);
    if ((result & 1) != 0)
    {
      *a1 = a1 + 2;
      v16.n128_u64[0] = 0x1000000000;
      a1[1] = 0x1000000000;
      v17 = (unsigned __int16)*v12;
      LODWORD(v18) = v17 & 0x3F;
      LODWORD(v19) = v17 >> 6;
      v20 = (_DWORD)v18 == 63;
      if ((_DWORD)v18 == 63)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = v18;
      if (v20)
        v19 = 0;
      else
        v19 = v19;
      v21 = (unsigned __int8 *)&unk_1C84996A6 + v18;
      if (v20)
        v21 = 0;
      v63 = v21;
      v64 = &v21[v19];
      result = sub_1C4C99D3C(&v63, (uint64_t)a1, v16);
      v22 = *((_DWORD *)a1 + 2);
      if (v22)
      {
        v23 = *a1;
        v24 = *a1 + 96 * v22;
        if (a8)
          v25 = 3;
        else
          v25 = 2;
        do
        {
          if ((*(_DWORD *)v23 - 1) <= 1)
          {
            v26 = *(unsigned int *)(v23 + 32);
            if ((_DWORD)v26)
            {
              v27 = 28 * v26;
              v28 = (int *)(*(_QWORD *)(v23 + 24) + 8);
              do
              {
                if ((*v28 & 0xFFFFFFFE) == 2)
                  *v28 = v25;
                v28 += 7;
                v27 -= 28;
              }
              while (v27);
            }
          }
          v23 += 96;
        }
        while (v23 != v24);
      }
      return result;
    }
LABEL_5:
    *a1 = a1 + 2;
    a1[1] = 0x1000000000;
    return result;
  }
  v14 = 0;
  v42 = a2;
  v45 = a3;
  v43 = 1;
  v44 = 0;
  v46 = 1;
  v47 = 0;
  v48 = a4;
  v49 = 1;
  v50 = 0;
  v51 = a5;
  v52 = 1;
  v53 = 0;
  v54 = a6;
  v55 = 1;
  v56 = 0;
  v57 = a7;
  v58 = 1;
  v59 = 0;
  v60 = a8;
  v61 = 1;
  v15 = &word_1C8499682;
  v62 = 0;
  while (1)
  {
    sub_1C4C9B14C(&v63, (int *)((char *)&unk_1C848E018 + v14));
    result = sub_1C4C9C8B4((uint64_t)&v63, (uint64_t)&v42);
    if ((result & 1) != 0)
      break;
    ++v15;
    v14 += 28;
    if (v14 == 504)
      goto LABEL_5;
  }
  sub_1C4C9B14C(&v63, (int *)((char *)&unk_1C848E018 + v14));
  result = sub_1C4C9C8B4((uint64_t)&v63, (uint64_t)&v42);
  if ((result & 1) == 0)
    goto LABEL_5;
  *a1 = a1 + 2;
  v29.n128_u64[0] = 0x1000000000;
  a1[1] = 0x1000000000;
  v30 = (unsigned __int16)*v15;
  LODWORD(v31) = v30 & 0x3F;
  LODWORD(v32) = v30 >> 6;
  v33 = (_DWORD)v31 == 63;
  if ((_DWORD)v31 == 63)
    v31 = 0xFFFFFFFFLL;
  else
    v31 = v31;
  if (v33)
    v32 = 0;
  else
    v32 = v32;
  v34 = (unsigned __int8 *)&unk_1C8499648 + v31;
  if (v33)
    v34 = 0;
  v63 = v34;
  v64 = &v34[v32];
  result = sub_1C4C99D3C(&v63, (uint64_t)a1, v29);
  v35 = *((_DWORD *)a1 + 2);
  if (v35)
  {
    v36 = *a1;
    v37 = *a1 + 96 * v35;
    if (a8)
      v38 = 3;
    else
      v38 = 2;
    do
    {
      if ((*(_DWORD *)v36 - 1) <= 1)
      {
        v39 = *(unsigned int *)(v36 + 32);
        if ((_DWORD)v39)
        {
          v40 = 28 * v39;
          v41 = (int *)(*(_QWORD *)(v36 + 24) + 8);
          do
          {
            if ((*v41 & 0xFFFFFFFE) == 2)
              *v41 = v38;
            v41 += 7;
            v40 -= 28;
          }
          while (v40);
        }
      }
      v36 += 96;
    }
    while (v36 != v37);
  }
  return result;
}

double sub_1C4C98A78(_QWORD *a1, unsigned int a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 3;
  v4 = (uint64_t)&dword_1C848E7A8;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (unsigned int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a2)
        break;
      v4 = (uint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((_UNKNOWN *)v4 == &unk_1C848E7B4 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a2)
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  else
  {
    *a1 = a1 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v9 = word_1C8499930[((unint64_t)(v4 - (_QWORD)&dword_1C848E7A8) >> 2)];
    LODWORD(v4) = v9 & 0x1F;
    LODWORD(v10) = v9 >> 5;
    v11 = (_DWORD)v4 == 31;
    if ((_DWORD)v4 == 31)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C84998F4 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a1, a3);
  }
  return result;
}

void sub_1C4C98B88(unsigned int *a1, char a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  __int128 *v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  int v28;
  BOOL v31;
  BOOL v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  __int128 *v59;
  _OWORD *v60;
  __int128 v61;
  BOOL v62;
  unint64_t v63;
  int v64;
  _BYTE *v65;
  unsigned int v66;
  _QWORD *v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  const void *v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t __src;
  void *v82;
  uint64_t v83;
  _BYTE v84[56];
  void *v85;
  uint64_t v86;
  _BYTE v87[56];
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  _QWORD v91[9];

  v91[7] = *MEMORY[0x1E0C80C00];
  v3 = a1[2];
  if (!(_DWORD)v3)
    return;
  v7 = 96 * v3;
  v8 = (int *)(*(_QWORD *)a1 + 32);
  do
  {
    if (*(v8 - 8) == 1)
    {
      v9 = *v8;
      v10 = *((_QWORD *)v8 - 1);
      if (*v8 != 2 || *(_DWORD *)(v10 + 8) != 1 || *(_BYTE *)(v10 + 52) && *(_DWORD *)(v10 + 48))
      {
        if (!*(_BYTE *)(v10 + 24) || !*(_DWORD *)(v10 + 20))
        {
          *(_DWORD *)(v10 + 32) = 0;
          if (v9 != 1)
          {
            memmove((void *)v10, (const void *)(v10 + 28), 28 * v9 - 28);
            v9 = *v8;
          }
          v11 = v9 - 1;
          goto LABEL_17;
        }
        if (v9 == 2 && (!*(_BYTE *)(v10 + 52) || !*(_DWORD *)(v10 + 48)))
        {
          v11 = 1;
LABEL_17:
          *v8 = v11;
        }
      }
    }
    v8 += 24;
    v7 -= 96;
  }
  while (v7);
  v12 = a1[2];
  if ((_DWORD)v12)
  {
    v13 = 96 * v12;
    v14 = (unsigned int *)(*(_QWORD *)a1 + 24);
    do
    {
      if (*(v14 - 6) == 1 && v14[2] == 1 && *(_DWORD *)(*(_QWORD *)v14 + 8) == 9)
      {
        v88 = xmmword_1C8472DB0;
        LODWORD(v89) = 10;
        *(_QWORD *)((char *)&v89 + 4) = 0;
        v15 = (__int128 *)sub_1C4C9CF58((uint64_t)v14, (unint64_t)&v88);
        v16 = (_OWORD *)(*(_QWORD *)v14 + 28 * v14[2]);
        v17 = *v15;
        *(_OWORD *)((char *)v16 + 12) = *(__int128 *)((char *)v15 + 12);
        *v16 = v17;
        ++v14[2];
      }
      v14 += 24;
      v13 -= 96;
    }
    while (v13);
    v18 = a1[2];
    if ((_DWORD)v18)
    {
      v80 = (uint64_t)a1;
      v19 = *(_QWORD *)a1;
      v78 = a3;
      v79 = a2;
      v20 = *(_QWORD *)a1;
      do
      {
        v21 = *(_DWORD *)v20 != 1 || v20 == v19 + 96 * v18;
        if (!v21)
        {
          v22 = 0;
          v23 = (void **)(v20 + 24);
          __src = v20 + 40;
          v24 = v20;
          while (1)
          {
            v25 = v20 + v22;
            if (*(_DWORD *)(v20 + v22) != 1)
              goto LABEL_91;
            v26 = (void **)(v20 + 24 + v22);
            v27 = *(_DWORD *)(*(_QWORD *)(v20 + 24) + 8);
            v28 = *((_DWORD *)*v26 + 2);
            if ((v27 != 5 || (v28 & 0xFFFFFFFE) != 2) && (v27 != 1 || v28 != 10))
            {
              v31 = v27 == 5;
              v33 = v27 == 1 || v27 == 10 || v27 == 5;
              if (v28 != 4)
                v33 = 0;
              if (v28 != 5)
                v31 = 0;
              if (!v33 && !v31)
              {
                v21 = v27 == 5;
                v34 = v79;
                if (!v21)
                  v34 = 1;
                if ((v34 & 1) != 0 || v28 != 1)
                  goto LABEL_91;
              }
            }
            v35 = *(_QWORD *)(v20 + 16);
            v88 = *(_OWORD *)v20;
            *(_QWORD *)&v89 = v35;
            *((_QWORD *)&v89 + 1) = v91;
            v90 = 0x200000000;
            v36 = *(unsigned int *)(v20 + 32);
            if (&v88 != (__int128 *)v20)
            {
              if (*(_DWORD *)(v20 + 32))
                break;
            }
LABEL_68:
            v40 = *(_OWORD *)v25;
            *(_QWORD *)(v20 + 16) = *(_QWORD *)(v25 + 16);
            *(_OWORD *)v20 = v40;
            if (v22)
            {
              v41 = *v26;
              v42 = v20 + v22;
              v43 = v20 + v22 + 40;
              if ((void *)v43 == *v26)
              {
                v46 = *(_DWORD *)(v42 + 32);
                v44 = (_DWORD *)(v42 + 32);
                v45 = v46;
                if (v36 >= v46)
                {
                  if (v45)
                    memmove(*v23, v41, 28 * v45);
                }
                else
                {
                  if (*(unsigned int *)(v20 + 36) < v45)
                  {
                    *(_DWORD *)(v20 + 32) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 24, __src, v45, 28);
                    v36 = 0;
                  }
                  else if (v36)
                  {
                    memmove(*v23, v41, 28 * v36);
                  }
                  v47 = *v44;
                  if (v36 != v47)
                    memcpy((char *)*v23 + 28 * v36, (char *)*v26 + 28 * v36, (_BYTE *)*v26 + 28 * v47 - ((_BYTE *)*v26 + 28 * v36));
                }
                *(_DWORD *)(v20 + 32) = v45;
              }
              else
              {
                if (*v23 != (void *)__src)
                {
                  free(*v23);
                  v41 = *v26;
                }
                *(_QWORD *)(v20 + 24) = v41;
                v44 = (_DWORD *)(v24 + 32);
                *(_QWORD *)(v20 + 32) = *(_QWORD *)(v20 + v22 + 32);
                *v26 = (void *)v43;
                *(_DWORD *)(v20 + v22 + 36) = 0;
              }
              *v44 = 0;
            }
            v48 = v88;
            *(_QWORD *)(v25 + 16) = v89;
            *(_OWORD *)v25 = v48;
            v49 = (_QWORD *)*((_QWORD *)&v89 + 1);
            if ((__int128 *)v25 == &v88)
              goto LABEL_88;
            if (*((_QWORD **)&v89 + 1) != v91)
            {
              if ((void *)(v20 + v22 + 40) != *v26)
              {
                free(*v26);
                v49 = (_QWORD *)*((_QWORD *)&v89 + 1);
              }
              *v26 = v49;
              *(_QWORD *)(v20 + v22 + 32) = v90;
              *((_QWORD *)&v89 + 1) = v91;
              HIDWORD(v90) = 0;
              goto LABEL_87;
            }
            v50 = v90;
            v51 = v20 + v22;
            v52 = *(unsigned int *)(v20 + v22 + 32);
            if (v52 >= v90)
            {
              if ((_DWORD)v90)
                memmove(*v26, v91, 28 * v90);
              goto LABEL_86;
            }
            if (*(_DWORD *)(v51 + 36) < v90)
            {
              *(_DWORD *)(v51 + 32) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v20 + 24 + v22, v20 + v22 + 40, v50, 28);
LABEL_83:
              v52 = 0;
              goto LABEL_84;
            }
            if (!(_DWORD)v52)
              goto LABEL_83;
            memmove(*v26, v91, 28 * v52);
LABEL_84:
            if (v52 != v90)
              memcpy((char *)*v26 + 28 * v52, (const void *)(*((_QWORD *)&v89 + 1) + 28 * v52), 28 * v90 - 28 * v52);
LABEL_86:
            *(_DWORD *)(v51 + 32) = v50;
LABEL_87:
            LODWORD(v90) = 0;
            v49 = (_QWORD *)*((_QWORD *)&v89 + 1);
LABEL_88:
            if (v49 != v91)
              free(v49);
            v19 = *(_QWORD *)v80;
            v18 = *(unsigned int *)(v80 + 8);
LABEL_91:
            v24 += 96;
            v22 += 96;
            if (v20 + v22 == v19 + 96 * v18)
              goto LABEL_33;
          }
          if (*v23 != (void *)__src)
          {
            *((_QWORD *)&v89 + 1) = *v23;
            v90 = __PAIR64__(*(_DWORD *)(v20 + 36), v36);
            *(_QWORD *)(v20 + 24) = __src;
            *(_DWORD *)(v20 + 36) = 0;
            goto LABEL_67;
          }
          if (v36 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89 + 8, (uint64_t)v91, *(unsigned int *)(v20 + 32), 28);
            v39 = *(unsigned int *)(v20 + 32);
            if (!(_DWORD)v39)
              goto LABEL_66;
            v38 = *v23;
            v37 = (_QWORD *)*((_QWORD *)&v89 + 1);
          }
          else
          {
            v37 = v91;
            v38 = (void *)(v20 + 40);
            v39 = *(unsigned int *)(v20 + 32);
          }
          memcpy(v37, v38, 28 * v39);
LABEL_66:
          LODWORD(v90) = v36;
LABEL_67:
          v36 = 0;
          *(_DWORD *)(v20 + 32) = 0;
          goto LABEL_68;
        }
LABEL_33:
        v20 += 96;
      }
      while (v20 != v19 + 96 * v18);
      v53 = v80;
      if (v18)
      {
        if (v78)
        {
          v54 = 0;
          v55 = 0;
          while (1)
          {
            v56 = *(_QWORD *)v53;
            if (*(_DWORD *)(*(_QWORD *)v53 + v54) == 1)
            {
              v57 = v56 + v54;
              if (*(_DWORD *)(v56 + v54 + 32) == 2)
              {
                v58 = *(_DWORD **)(v57 + 24);
                if (v58[2] == 10 && v58[9] == 1)
                  break;
              }
            }
LABEL_135:
            ++v55;
            v54 += 96;
            if (v55 >= v18)
              return;
          }
          v58[8] = 0;
          v85 = v87;
          v86 = 0x200000000;
          v59 = (__int128 *)sub_1C4C9CF58((uint64_t)&v85, *(_QWORD *)(v57 + 24) + 28);
          v60 = (char *)v85 + 28 * v86;
          v61 = *v59;
          *(_OWORD *)((char *)v60 + 12) = *(__int128 *)((char *)v59 + 12);
          *v60 = v61;
          v62 = __CFADD__((_DWORD)v86, 1);
          v63 = (v86 + 1);
          LODWORD(v86) = v86 + 1;
          v64 = *(_DWORD *)(v56 + v54 + 4);
          v82 = v84;
          v83 = 0x200000000;
          if (v62)
          {
            LODWORD(v88) = *(_DWORD *)(v56 + v54);
            DWORD1(v88) = v64;
            *((_QWORD *)&v89 + 1) = v91;
            v90 = 0x200000000;
          }
          else
          {
            v65 = v84;
            v66 = v63;
            if (v63 < 3)
              goto LABEL_120;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v63, 28);
            v66 = v86;
            if ((_DWORD)v86)
            {
              v65 = v82;
LABEL_120:
              memcpy(v65, v85, 28 * v66);
            }
            LODWORD(v83) = v63;
            LODWORD(v88) = *(_DWORD *)(v56 + v54);
            DWORD1(v88) = v64;
            *((_QWORD *)&v89 + 1) = v91;
            v90 = 0x200000000;
            if (v82 == v84)
            {
              if (v63 < 3)
              {
                v67 = v91;
                v68 = v84;
                v69 = v63;
                goto LABEL_124;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89 + 8, (uint64_t)v91, v63, 28);
              v69 = v83;
              if ((_DWORD)v83)
              {
                v68 = v82;
                v67 = (_QWORD *)*((_QWORD *)&v89 + 1);
LABEL_124:
                memcpy(v67, v68, 28 * v69);
              }
              LODWORD(v90) = v63;
            }
            else
            {
              *((_QWORD *)&v89 + 1) = v82;
              v90 = __PAIR64__(HIDWORD(v83), v63);
              v82 = v84;
              HIDWORD(v83) = 0;
            }
            LODWORD(v83) = 0;
          }
          v70 = sub_1C4A20CD0(v53, (unint64_t)&v88, 1);
          v71 = *(_QWORD *)v53 + 96 * *(unsigned int *)(v53 + 8);
          v72 = *(_OWORD *)v70;
          *(_QWORD *)(v71 + 16) = *(_QWORD *)(v70 + 16);
          *(_OWORD *)v71 = v72;
          v73 = (void *)(v71 + 40);
          *(_QWORD *)(v71 + 32) = 0x200000000;
          *(_QWORD *)(v71 + 24) = v71 + 40;
          v74 = v71 + 24;
          v75 = *(unsigned int *)(v70 + 32);
          if ((_DWORD)v75 && v74 != v70 + 24)
          {
            v76 = *(const void **)(v70 + 24);
            if (v76 == (const void *)(v70 + 40))
            {
              if (v75 < 3)
              {
                v77 = *(unsigned int *)(v70 + 32);
                v53 = v80;
                goto LABEL_141;
              }
              *(_DWORD *)(v74 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v74, v74 + 16, v75, 28);
              v77 = *(unsigned int *)(v70 + 32);
              v53 = v80;
              if ((_DWORD)v77)
              {
                v76 = *(const void **)(v70 + 24);
                v73 = *(void **)v74;
LABEL_141:
                memcpy(v73, v76, 28 * v77);
              }
              *(_DWORD *)(v74 + 8) = v75;
            }
            else
            {
              if (v73 != (void *)(v74 + 16))
              {
                free(v73);
                v76 = *(const void **)(v70 + 24);
                LODWORD(v75) = *(_DWORD *)(v70 + 32);
              }
              *(_QWORD *)v74 = v76;
              *(_DWORD *)(v74 + 8) = v75;
              *(_DWORD *)(v74 + 12) = *(_DWORD *)(v70 + 36);
              *(_QWORD *)(v70 + 24) = v70 + 40;
              *(_DWORD *)(v70 + 36) = 0;
              v53 = v80;
            }
            *(_DWORD *)(v70 + 32) = 0;
          }
          ++*(_DWORD *)(v53 + 8);
          if (*((_QWORD **)&v89 + 1) != v91)
            free(*((void **)&v89 + 1));
          if (v82 != v84)
            free(v82);
          --*(_DWORD *)(v57 + 32);
          if (v85 != v87)
            free(v85);
          v18 = *(unsigned int *)(v53 + 8);
          goto LABEL_135;
        }
      }
    }
  }
}

void sub_1C4C99470(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[193];

  v16[192] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a5 = a5 + 16;
  a6.n128_u64[0] = 0x1000000000;
  *(_QWORD *)(a5 + 8) = 0x1000000000;
  if (*(_BYTE *)(a1 + 9))
  {
    sub_1C4C99584(a4, &v14, a6);
    sub_1C4C97930(a5, (uint64_t)&v14);
    v9 = (char *)v14;
    if (v15)
    {
      v10 = 96 * v15;
      do
      {
        v11 = *(char **)&v9[v10 - 72];
        if (&v9[v10 - 56] != v11)
        {
          v12 = v10;
          v13 = v9;
          free(v11);
          v10 = v12;
          v9 = v13;
        }
        v10 -= 96;
      }
      while (v10);
      v9 = (char *)v14;
    }
    if (v9 != (char *)v16)
      free(v9);
  }
  sub_1C4C98B88((unsigned int *)a5, a2 == 3, a3 == 5);
}

double sub_1C4C99584@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 3;
  v4 = (uint64_t)&dword_1C848E45C;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (unsigned int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a1)
        break;
      v4 = (uint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((_UNKNOWN *)v4 == &unk_1C848E468 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a1)
  {
    *a2 = a2 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a2[1] = 0x1000000000;
  }
  else
  {
    *a2 = a2 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a2[1] = 0x1000000000;
    v9 = byte_1C8499726[((unint64_t)(v4 - (_QWORD)&dword_1C848E45C) >> 2)];
    LODWORD(v4) = v9 & 7;
    LODWORD(v10) = v9 >> 3;
    v11 = (_DWORD)v4 == 7;
    if ((_DWORD)v4 == 7)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C849971A + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a2, a3);
  }
  return result;
}

uint64_t *sub_1C4C99690(uint64_t *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = *((unsigned int *)result + 2);
  if (v3 >= 2)
  {
    v7 = v2 + 96;
    v8 = 96 * v3 - 96;
    v4 = *result;
    do
    {
      if (*(_DWORD *)(v7 + 4) < *(_DWORD *)(v4 + 4))
        v4 = v7;
      v7 += 96;
      v8 -= 96;
    }
    while (v8);
  }
  else
  {
    v4 = *result;
  }
  if (v4 != *result + 96 * v3 && (_DWORD)v3 && *(_DWORD *)(v4 + 4) >= a2)
  {
    v5 = 96 * v3;
    v6 = (_DWORD *)(v2 + 4);
    do
    {
      *v6 -= a2;
      v6 += 24;
      v5 -= 96;
    }
    while (v5);
  }
  return result;
}

void sub_1C4C9971C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t *v14;
  __n128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  unsigned int v50;
  _QWORD v51[194];

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v5 = v4;
  v36 = v6;
  v8 = v7;
  v10 = v9;
  v11 = v1;
  v12 = (_BYTE *)v0;
  v14 = v13;
  v51[192] = *MEMORY[0x1E0C80C00];
  *v13 = (uint64_t)(v13 + 2);
  v15.n128_u64[0] = 0x1000000000;
  v13[1] = 0x1000000000;
  if (*(_BYTE *)(v0 + 8))
  {
    sub_1C4C98540(&v49, v1, v15);
    sub_1C4C97930((uint64_t)v14, (uint64_t)&v49);
    v16 = (char *)v49;
    if (v50)
    {
      v17 = 96 * v50;
      do
      {
        v18 = *(char **)&v16[v17 - 72];
        if (&v16[v17 - 56] != v18)
          free(v18);
        v17 -= 96;
      }
      while (v17);
      v16 = (char *)v49;
    }
    if (v16 != (char *)v51)
      free(v16);
  }
  if (v12[2])
    v19 = (_DWORD)v11 == 0;
  else
    v19 = 1;
  if (!v19)
  {
    sub_1C4C98650(&v46, v5, v15);
    sub_1C4C97930((uint64_t)v14, (uint64_t)&v46);
    v20 = (char *)v46;
    if (v47)
    {
      v35 = v8;
      v21 = v3;
      v22 = 96 * v47;
      do
      {
        v23 = *(char **)&v20[v22 - 72];
        if (&v20[v22 - 56] != v23)
          free(v23);
        v22 -= 96;
      }
      while (v22);
      v20 = (char *)v46;
      v3 = v21;
      v8 = v35;
    }
    if (v20 != (char *)&v48)
      free(v20);
  }
  if (v12[5])
  {
    sub_1C4C9871C(&v43, v11, SHIDWORD(v11), v10, SHIDWORD(v10), v36, v8, v5, v3);
    sub_1C4C97930((uint64_t)v14, (uint64_t)&v43);
    v24 = (char *)v43;
    if (v44)
    {
      v25 = 96 * v44;
      do
      {
        v26 = *(char **)&v24[v25 - 72];
        if (&v24[v25 - 56] != v26)
          free(v26);
        v25 -= 96;
      }
      while (v25);
      v24 = (char *)v43;
    }
    if (v24 != (char *)&v45)
      free(v24);
  }
  if ((_DWORD)v11)
    v27 = 1;
  else
    v27 = HIDWORD(v11) == 2;
  v28 = v27;
  if (v12[9] && v28)
  {
    if (v3 > 4)
      sub_1C4C9CCE0(&v40, v11, HIDWORD(v11), v10, HIDWORD(v10));
    else
      sub_1C4C9CAC0(&v40, v11, HIDWORD(v11), v10, HIDWORD(v10));
    sub_1C4C97930((uint64_t)v14, (uint64_t)&v40);
    v29 = (char *)v40;
    if (v41)
    {
      v30 = 96 * v41;
      do
      {
        v31 = *(char **)&v29[v30 - 72];
        if (&v29[v30 - 56] != v31)
          free(v31);
        v30 -= 96;
      }
      while (v30);
      v29 = (char *)v40;
    }
    if (v29 != (char *)&v42)
      free(v29);
  }
  if (v12[11])
  {
    sub_1C4C98A78(&v37, v11, v15);
    sub_1C4C97930((uint64_t)v14, (uint64_t)&v37);
    v32 = (char *)v37;
    if (v38)
    {
      v33 = 96 * v38;
      do
      {
        v34 = *(char **)&v32[v33 - 72];
        if (&v32[v33 - 56] != v34)
          free(v34);
        v33 -= 96;
      }
      while (v33);
      v32 = (char *)v37;
    }
    if (v32 != (char *)&v39)
      free(v32);
  }
  sub_1C4C99690(v14, 1u);
  sub_1C4C98B88((unsigned int *)v14, (_DWORD)v11 == 3, v10 == 5);
}

void sub_1C4C99AF8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13[2];
  void *v14;
  uint64_t v15;
  _QWORD v16[193];

  v16[192] = *MEMORY[0x1E0C80C00];
  *a4 = (uint64_t)(a4 + 2);
  a5.n128_u64[0] = 0x1000000000;
  a4[1] = 0x1000000000;
  if (*(_BYTE *)(a1 + 12))
  {
    v15 = 0x1000000000;
    v13[0] = (unsigned __int8 *)&unk_1C8499936;
    v13[1] = (unsigned __int8 *)&unk_1C849993C;
    v14 = v16;
    sub_1C4C99D3C(v13, (uint64_t)&v14, a5);
    sub_1C4C97930((uint64_t)a4, (uint64_t)&v14);
    v8 = (char *)v14;
    if ((_DWORD)v15)
    {
      v9 = 96 * v15;
      do
      {
        v10 = *(char **)&v8[v9 - 72];
        if (&v8[v9 - 56] != v10)
        {
          v11 = v9;
          v12 = v8;
          free(v10);
          v9 = v11;
          v8 = v12;
        }
        v9 -= 96;
      }
      while (v9);
      v8 = (char *)v14;
    }
    if (v8 != (char *)v16)
      free(v8);
  }
  sub_1C4C99690(a4, 2u);
  sub_1C4C98B88((unsigned int *)a4, a2 == 3, a3 == 5);
}

double sub_1C4C99C30@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 4;
  v4 = (unint64_t)&dword_1C8472DCC;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a1)
        break;
      v4 = (unint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((int *)v4 == &dword_1C8472DDC || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a1)
  {
    *a2 = a2 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a2[1] = 0x1000000000;
  }
  else
  {
    *a2 = a2 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a2[1] = 0x1000000000;
    v9 = word_1C848E874[((v4 - (unint64_t)&dword_1C8472DCC) >> 2)];
    LODWORD(v4) = v9 & 0x7F;
    LODWORD(v10) = v9 >> 7;
    v11 = (_DWORD)v4 == 127;
    if ((_DWORD)v4 == 127)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C848E7B4 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a2, a3);
  }
  return result;
}

uint64_t sub_1C4C99D3C(unsigned __int8 **a1, uint64_t a2, __n128 a3)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v34;
  uint32x4_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  _BYTE v44[56];
  void *v45;
  uint64_t v46;
  _BYTE v47[56];
  char *v48;
  uint64_t v49;
  _QWORD v50[9];

  v50[7] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v34 = a1[1];
  if (*a1 != v34)
  {
    while (1)
    {
      v5 = *v4;
      v6 = v4 + 2;
      v7 = v4[1];
      if (!*v4)
      {
        v22 = v4[4] | ((unint64_t)v4[5] << 32);
        v23 = v4[2] | ((unint64_t)v4[3] << 32);
        v38 = 0;
        v39 = v7;
        v40 = v23;
        v41 = v22;
        v42 = v44;
        v43 = 0x200000000;
        goto LABEL_23;
      }
      v48 = (char *)v50;
      v49 = 0x200000000;
      v8 = *v6;
      if (!*v6)
        break;
      v9 = v4 + 3;
      do
      {
        if (v9[5])
        {
          v10 = v9 + 7;
          v11 = v9[6];
          v12 = 0x100000000;
        }
        else
        {
          v11 = 0;
          v12 = 0;
          v10 = v9 + 6;
        }
        a3.n128_u32[0] = *(_DWORD *)v9;
        v13 = v9[4];
        v35 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)a3.n128_u64[0]));
        v36 = v13;
        v37 = v12 | v11;
        v14 = sub_1C4C9CF58((uint64_t)&v48, (unint64_t)&v35);
        v15 = &v48[28 * v49];
        a3 = *(__n128 *)v14;
        *(_OWORD *)(v15 + 12) = *(_OWORD *)(v14 + 12);
        *(__n128 *)v15 = a3;
        v16 = (v49 + 1);
        LODWORD(v49) = v49 + 1;
        v9 = v10;
        --v8;
      }
      while (v8);
      v17 = v47;
      v45 = v47;
      v46 = 0x200000000;
      if (!(_DWORD)v16)
        goto LABEL_20;
      v18 = v16;
      if (v16 < 3
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v16, 28),
            v18 = v49,
            v17 = v45,
            (_DWORD)v49))
      {
        memcpy(v17, v48, 28 * v18);
        v17 = v45;
      }
      LODWORD(v46) = v16;
      v38 = v5;
      v39 = v7;
      v19 = v47;
      v42 = v44;
      v43 = 0x200000000;
      if (v17 == v47)
      {
        if (v16 < 3)
        {
          v20 = v44;
          v21 = v16;
          goto LABEL_15;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v16, 28);
        v21 = v46;
        v19 = v45;
        if ((_DWORD)v46)
        {
          v20 = v42;
LABEL_15:
          memcpy(v20, v19, 28 * v21);
          v19 = v45;
        }
        LODWORD(v43) = v16;
        LODWORD(v46) = 0;
        if (v19 != v47)
          free(v19);
        goto LABEL_21;
      }
      v42 = v17;
      v43 = __PAIR64__(HIDWORD(v46), v16);
      v45 = v47;
      v46 = 0;
LABEL_21:
      if (v48 != (char *)v50)
        free(v48);
LABEL_23:
      v24 = (__n128 *)sub_1C4A20CD0(a2, (unint64_t)&v38, 1);
      v25 = (__n128 *)(*(_QWORD *)a2 + 96 * *(unsigned int *)(a2 + 8));
      a3 = *v24;
      v25[1].n128_u64[0] = v24[1].n128_u64[0];
      *v25 = a3;
      v26 = &v25[2].n128_i8[8];
      v25[2].n128_u64[0] = 0x200000000;
      v25[1].n128_u64[1] = (unint64_t)&v25[2].n128_u64[1];
      v27 = (uint64_t)&v25[1].n128_i64[1];
      v28 = v24[2].n128_u32[0];
      if (!(_DWORD)v28 || (__int8 *)v27 == &v24[1].n128_i8[8])
        goto LABEL_24;
      v31 = (__int8 *)v24[1].n128_u64[1];
      if (v31 != &v24[2].n128_i8[8])
      {
        if (v26 != (__int8 *)(v27 + 16))
        {
          free(v26);
          v31 = (__int8 *)v24[1].n128_u64[1];
          LODWORD(v28) = v24[2].n128_u32[0];
        }
        *(_QWORD *)v27 = v31;
        *(_DWORD *)(v27 + 8) = v28;
        *(_DWORD *)(v27 + 12) = v24[2].n128_u32[1];
        v24[1].n128_u64[1] = (unint64_t)&v24[2].n128_u64[1];
        v24[2].n128_u32[1] = 0;
        goto LABEL_43;
      }
      if (v28 >= 3)
      {
        *(_DWORD *)(v27 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v27, v27 + 16, v28, 28);
        v32 = v24[2].n128_u32[0];
        if (!(_DWORD)v32)
          goto LABEL_42;
        v31 = (__int8 *)v24[1].n128_u64[1];
        v26 = *(__int8 **)v27;
      }
      else
      {
        v32 = v24[2].n128_u32[0];
      }
      memcpy(v26, v31, 28 * v32);
LABEL_42:
      *(_DWORD *)(v27 + 8) = v28;
LABEL_43:
      v24[2].n128_u32[0] = 0;
LABEL_24:
      ++*(_DWORD *)(a2 + 8);
      if (v42 != v44)
        free(v42);
      if (*v4 - 1 >= 2)
      {
        if (!*v4)
          v6 = v4 + 6;
      }
      else
      {
        v6 = v4 + 3;
        v29 = v4[2];
        if (v4[2])
        {
          do
          {
            if (v6[5])
              v30 = 7;
            else
              v30 = 6;
            v6 += v30;
            --v29;
          }
          while (v29);
        }
      }
      v4 = v6;
      if (v6 == v34)
        return a2;
    }
    v45 = v47;
    v46 = 0x200000000;
LABEL_20:
    v38 = v5;
    v39 = v7;
    v42 = v44;
    v43 = 0x200000000;
    goto LABEL_21;
  }
  return a2;
}

double sub_1C4C9A164@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 4;
  v4 = (uint64_t)&dword_1C8472DDC;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (unsigned int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a1)
        break;
      v4 = (uint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((_UNKNOWN *)v4 == &unk_1C8472DEC || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a1)
  {
    *a2 = a2 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a2[1] = 0x1000000000;
  }
  else
  {
    *a2 = a2 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a2[1] = 0x1000000000;
    v9 = word_1C848E874[((unint64_t)(v4 - (_QWORD)&dword_1C8472DDC) >> 2)];
    LODWORD(v4) = v9 & 0x7F;
    LODWORD(v10) = v9 >> 7;
    v11 = (_DWORD)v4 == 127;
    if ((_DWORD)v4 == 127)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C848E814 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a2, a3);
  }
  return result;
}

double sub_1C4C9A270@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  double result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  char v28;
  char v29;

  v10 = 36;
  v11 = (int *)&unk_1C8472DEC;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9A490((uint64_t)&v20, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v21)
      goto LABEL_18;
    if (BYTE4(v20))
      v13 = v20 >= a1;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v20 <= a1)
    {
LABEL_18:
      if (v23)
        goto LABEL_22;
      if (!v22 || HIDWORD(v21) < a2)
        goto LABEL_24;
      if (HIDWORD(v21) <= a2)
      {
LABEL_22:
        if (v26)
          goto LABEL_7;
        if (!v25 || v24 < a3)
          goto LABEL_24;
        if (v24 <= a3)
        {
LABEL_7:
          if (!v29 && (!v28 || a4 > v27))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != (int *)&unk_1C847302C
    && ((sub_1C4C9A490((uint64_t)&v20, v11), (_BYTE)v21) || BYTE4(v20) && (_DWORD)v20 == a1)
    && (v23 || v22 && HIDWORD(v21) == a2)
    && (v26 || v25 && v24 == a3)
    && (v29 || v28 && v27 == a4))
  {
    *a5 = a5 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a5[1] = 0x1000000000;
    LODWORD(v15) = dword_1C848EE48[((unint64_t)((char *)v11 - (char *)&unk_1C8472DEC) >> 4)] & 0x7FF;
    LODWORD(v16) = dword_1C848EE48[((unint64_t)((char *)v11 - (char *)&unk_1C8472DEC) >> 4)] >> 11;
    v17 = (_DWORD)v15 == 2047;
    if ((_DWORD)v15 == 2047)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v15;
    if (v17)
      v16 = 0;
    else
      v16 = v16;
    v18 = (unsigned __int8 *)&unk_1C848E87C + v15;
    if (v17)
      v18 = 0;
    v20 = v18;
    v21 = &v18[v16];
    sub_1C4C99D3C(&v20, (uint64_t)a5, v14);
  }
  else
  {
    *a5 = a5 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a5[1] = 0x1000000000;
  }
  return result;
}

uint64_t sub_1C4C9A490(uint64_t result, int *a2)
{
  int v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  BOOL v12;
  char v13;
  char v14;

  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 36) = 0;
  *(_BYTE *)(result + 38) = 0;
  v2 = *a2;
  if (*a2 == -2)
  {
    v3 = 0;
    v4 = 0;
    *(_BYTE *)result = 0;
  }
  else if (v2 == -1)
  {
    v3 = 0;
    *(_BYTE *)result = 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_DWORD *)result = v2;
    v3 = 1;
  }
  *(_BYTE *)(result + 4) = v3;
  *(_BYTE *)(result + 8) = v4;
  v5 = a2[1];
  if (v5 == -2)
  {
    v6 = 0;
    v7 = 0;
    *(_BYTE *)(result + 12) = 0;
  }
  else if (v5 == -1)
  {
    v6 = 0;
    *(_BYTE *)(result + 12) = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_DWORD *)(result + 12) = v5;
    v6 = 1;
  }
  *(_BYTE *)(result + 16) = v6;
  *(_BYTE *)(result + 20) = v7;
  v8 = a2[2];
  if (v8 == -2)
  {
    v9 = 0;
    v10 = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  else if (v8 == -1)
  {
    v9 = 0;
    *(_BYTE *)(result + 24) = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_DWORD *)(result + 24) = v8;
    v9 = 1;
  }
  *(_BYTE *)(result + 28) = v9;
  *(_BYTE *)(result + 32) = v10;
  v11 = a2[3];
  if (v11 == -1)
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
  }
  else if (v11 == -2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v12 = v11 != 0;
    v13 = 1;
  }
  *(_BYTE *)(result + 36) = v12;
  *(_BYTE *)(result + 37) = v13;
  *(_BYTE *)(result + 38) = v14;
  return result;
}

double sub_1C4C9A5D0@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  double result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  char v28;
  char v29;

  v10 = 36;
  v11 = (int *)&unk_1C847302C;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9A490((uint64_t)&v20, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v21)
      goto LABEL_18;
    if (BYTE4(v20))
      v13 = v20 >= a1;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v20 <= a1)
    {
LABEL_18:
      if (v23)
        goto LABEL_22;
      if (!v22 || HIDWORD(v21) < a2)
        goto LABEL_24;
      if (HIDWORD(v21) <= a2)
      {
LABEL_22:
        if (v26)
          goto LABEL_7;
        if (!v25 || v24 < a3)
          goto LABEL_24;
        if (v24 <= a3)
        {
LABEL_7:
          if (!v29 && (!v28 || a4 > v27))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != (int *)&unk_1C847326C
    && ((sub_1C4C9A490((uint64_t)&v20, v11), (_BYTE)v21) || BYTE4(v20) && (_DWORD)v20 == a1)
    && (v23 || v22 && HIDWORD(v21) == a2)
    && (v26 || v25 && v24 == a3)
    && (v29 || v28 && v27 == a4))
  {
    *a5 = a5 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a5[1] = 0x1000000000;
    LODWORD(v15) = dword_1C848F50C[((unint64_t)((char *)v11 - (char *)&unk_1C847302C) >> 4)] & 0x7FF;
    LODWORD(v16) = dword_1C848F50C[((unint64_t)((char *)v11 - (char *)&unk_1C847302C) >> 4)] >> 11;
    v17 = (_DWORD)v15 == 2047;
    if ((_DWORD)v15 == 2047)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v15;
    if (v17)
      v16 = 0;
    else
      v16 = v16;
    v18 = (unsigned __int8 *)&unk_1C848EED8 + v15;
    if (v17)
      v18 = 0;
    v20 = v18;
    v21 = &v18[v16];
    sub_1C4C99D3C(&v20, (uint64_t)a5, v14);
  }
  else
  {
    *a5 = a5 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a5[1] = 0x1000000000;
  }
  return result;
}

double sub_1C4C9A7F0@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  double result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  char v28;
  char v29;

  v10 = 20;
  v11 = (int *)&unk_1C847326C;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9A490((uint64_t)&v20, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v21)
      goto LABEL_18;
    if (BYTE4(v20))
      v13 = v20 >= a1;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v20 <= a1)
    {
LABEL_18:
      if (v23)
        goto LABEL_22;
      if (!v22 || HIDWORD(v21) < a2)
        goto LABEL_24;
      if (HIDWORD(v21) <= a2)
      {
LABEL_22:
        if (v26)
          goto LABEL_7;
        if (!v25 || v24 < a3)
          goto LABEL_24;
        if (v24 <= a3)
        {
LABEL_7:
          if (!v29 && (!v28 || a4 > v27))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != (int *)&unk_1C84733AC
    && ((sub_1C4C9A490((uint64_t)&v20, v11), (_BYTE)v21) || BYTE4(v20) && (_DWORD)v20 == a1)
    && (v23 || v22 && HIDWORD(v21) == a2)
    && (v26 || v25 && v24 == a3)
    && (v29 || v28 && v27 == a4))
  {
    *a5 = a5 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a5[1] = 0x1000000000;
    LODWORD(v15) = dword_1C848F8EC[((unint64_t)((char *)v11 - (char *)&unk_1C847326C) >> 4)] & 0x3FF;
    LODWORD(v16) = dword_1C848F8EC[((unint64_t)((char *)v11 - (char *)&unk_1C847326C) >> 4)] >> 10;
    v17 = (_DWORD)v15 == 1023;
    if ((_DWORD)v15 == 1023)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v15;
    if (v17)
      v16 = 0;
    else
      v16 = v16;
    v18 = (unsigned __int8 *)&unk_1C848F59C + v15;
    if (v17)
      v18 = 0;
    v20 = v18;
    v21 = &v18[v16];
    sub_1C4C99D3C(&v20, (uint64_t)a5, v14);
  }
  else
  {
    *a5 = a5 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a5[1] = 0x1000000000;
  }
  return result;
}

double sub_1C4C9AA10@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  double result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  unsigned int v27;
  char v28;
  char v29;

  v10 = 28;
  v11 = (int *)&unk_1C84733AC;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9AC30(&v20, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v21)
      goto LABEL_18;
    if (BYTE4(v20))
      v13 = v20 >= a1;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v20 <= a1)
    {
LABEL_18:
      if (v23)
        goto LABEL_22;
      if (!v22 || HIDWORD(v21) < a2)
        goto LABEL_24;
      if (HIDWORD(v21) <= a2)
      {
LABEL_22:
        if (v26)
          goto LABEL_7;
        if (!v25 || v24 < a3)
          goto LABEL_24;
        if (v24 <= a3)
        {
LABEL_7:
          if (!v29 && (!v28 || v27 < a4))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != (int *)&unk_1C847356C
    && ((sub_1C4C9AC30(&v20, v11), (_BYTE)v21) || BYTE4(v20) && (_DWORD)v20 == a1)
    && (v23 || v22 && HIDWORD(v21) == a2)
    && (v26 || v25 && v24 == a3)
    && (v29 || v28 && v27 == a4))
  {
    *a5 = a5 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a5[1] = 0x1000000000;
    LODWORD(v15) = dword_1C848FF90[((unint64_t)((char *)v11 - (char *)&unk_1C84733AC) >> 4)] & 0x7FF;
    LODWORD(v16) = dword_1C848FF90[((unint64_t)((char *)v11 - (char *)&unk_1C84733AC) >> 4)] >> 11;
    v17 = (_DWORD)v15 == 2047;
    if ((_DWORD)v15 == 2047)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v15;
    if (v17)
      v16 = 0;
    else
      v16 = v16;
    v18 = (unsigned __int8 *)&unk_1C848F93C + v15;
    if (v17)
      v18 = 0;
    v20 = v18;
    v21 = &v18[v16];
    sub_1C4C99D3C(&v20, (uint64_t)a5, v14);
  }
  else
  {
    *a5 = a5 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a5[1] = 0x1000000000;
  }
  return result;
}

_BYTE *sub_1C4C9AC30(_BYTE *result, int *a2)
{
  int v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  char v13;

  result[24] = 0;
  result[28] = 0;
  result[32] = 0;
  result[36] = 0;
  result[40] = 0;
  result[44] = 0;
  v2 = *a2;
  if (*a2 == -2)
  {
    v3 = 0;
    v4 = 0;
    *result = 0;
  }
  else if (v2 == -1)
  {
    v3 = 0;
    *result = 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_DWORD *)result = v2;
    v3 = 1;
  }
  result[4] = v3;
  result[8] = v4;
  v5 = a2[1];
  if (v5 == -2)
  {
    v6 = 0;
    v7 = 0;
    result[12] = 0;
  }
  else if (v5 == -1)
  {
    v6 = 0;
    result[12] = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *((_DWORD *)result + 3) = v5;
    v6 = 1;
  }
  result[16] = v6;
  result[20] = v7;
  v8 = a2[2];
  if (v8 == -2)
  {
    v9 = 0;
    v10 = 0;
    result[24] = 0;
  }
  else if (v8 == -1)
  {
    v9 = 0;
    result[24] = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *((_DWORD *)result + 6) = v8;
    v9 = 1;
  }
  result[28] = v9;
  result[32] = v10;
  v11 = a2[3];
  if (v11 == -2)
  {
    v12 = 0;
    v13 = 0;
    result[36] = 0;
  }
  else if (v11 == -1)
  {
    v12 = 0;
    result[36] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_DWORD *)result + 9) = v11;
    v12 = 1;
  }
  result[40] = v12;
  result[44] = v13;
  return result;
}

double sub_1C4C9AD6C@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v11;
  int v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  char v36;
  unsigned int v37;
  char v38;
  char v39;
  unsigned int v40;
  char v41;
  char v42;
  unsigned int v43;
  char v44;
  char v45;
  unsigned int v46;
  char v47;
  char v48;

  v11 = BYTE4(a2);
  v12 = BYTE4(a6);
  v13 = (int *)&unk_1C847356C;
  v14 = 1152;
  do
  {
    v15 = v14 >> 1;
    sub_1C4C9B14C(&v30, &v13[7 * (v14 >> 1)]);
    if ((_BYTE)v31)
      goto LABEL_3;
    if (BYTE4(v30))
      v16 = v30 >= a1;
    else
      v16 = 0;
    if (!v16)
    {
LABEL_50:
      v15 = v14 + ~v15;
      v13 += 7 * (v14 >> 1) + 7;
      goto LABEL_51;
    }
    if (v30 <= a1)
    {
LABEL_3:
      if (!v33)
      {
        if (v32 && v11)
        {
          if (HIDWORD(v31) < a2)
            goto LABEL_50;
        }
        else if (v11 && !v32)
        {
          goto LABEL_50;
        }
        if (v11 && v32)
        {
          if (HIDWORD(v31) > a2)
            goto LABEL_51;
        }
        else if (!v11 && v32)
        {
          goto LABEL_51;
        }
      }
      if (v36)
        goto LABEL_39;
      if (!v35 || v34 < a3)
        goto LABEL_50;
      if (v34 <= a3)
      {
LABEL_39:
        if (v39)
          goto LABEL_102;
        if (!v38 || v37 < a4)
          goto LABEL_50;
        if (v37 <= a4)
        {
LABEL_102:
          if (v42)
            goto LABEL_7;
          if (!v41 || v40 < a5)
            goto LABEL_50;
          if (v40 <= a5)
          {
LABEL_7:
            if (!v45)
            {
              if (v44 && v12)
              {
                if (v43 < a6)
                  goto LABEL_50;
              }
              else if (v12 && !v44)
              {
                goto LABEL_50;
              }
              if (v12 && v44)
              {
                if (v43 > a6)
                  goto LABEL_51;
              }
              else if (!v12 && v44)
              {
                goto LABEL_51;
              }
            }
            if (!v48 && (!v47 || v46 < a7))
              goto LABEL_50;
          }
        }
      }
    }
LABEL_51:
    v14 = v15;
  }
  while (v15);
  if (v13 == (int *)&unk_1C847B36C)
    goto LABEL_99;
  sub_1C4C9B14C(&v30, v13);
  if (!(_BYTE)v31 && (!BYTE4(v30) || (_DWORD)v30 != a1))
    goto LABEL_99;
  if (v33)
    goto LABEL_65;
  v23 = a2 & 0xFF00000000;
  if (!v32 || !v23)
  {
    if ((v23 != 0) != (v32 == 0))
      goto LABEL_65;
    goto LABEL_99;
  }
  if (HIDWORD(v31) != (_DWORD)a2)
    goto LABEL_99;
  if (!v36 && (!v35 || v34 != a3) || !v39 && (!v38 || v37 != a4) || !v42 && (!v41 || v40 != a5))
    goto LABEL_99;
LABEL_65:
  if (v45)
    goto LABEL_75;
  v24 = a6 & 0xFF00000000;
  if (v44 && v24)
  {
    if (v43 == (_DWORD)a6)
      goto LABEL_75;
    goto LABEL_99;
  }
  if ((v24 != 0) == (v44 == 0))
    goto LABEL_99;
LABEL_75:
  if (v48 || v47 && v46 == a7)
  {
    *a8 = a8 + 2;
    v17.n128_u64[0] = 0x1000000000;
    a8[1] = 0x1000000000;
    LODWORD(v18) = *((_DWORD *)&unk_1C8496B30
                   - 1227133513 * ((unint64_t)((char *)v13 - (char *)&unk_1C847356C) >> 2)) & 0x3FFF;
    LODWORD(v19) = *((_DWORD *)&unk_1C8496B30
                   - 1227133513 * ((unint64_t)((char *)v13 - (char *)&unk_1C847356C) >> 2)) >> 14;
    v20 = (_DWORD)v18 == 0x3FFF;
    if ((_DWORD)v18 == 0x3FFF)
      v18 = 0xFFFFFFFFLL;
    else
      v18 = v18;
    if (v20)
      v19 = 0;
    else
      v19 = v19;
    v21 = (unsigned __int8 *)&unk_1C8490000 + v18;
    if (v20)
      v21 = 0;
    v30 = v21;
    v31 = &v21[v19];
    sub_1C4C99D3C(&v30, (uint64_t)a8, v17);
  }
  else
  {
LABEL_99:
    *a8 = a8 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a8[1] = 0x1000000000;
  }
  return result;
}

_BYTE *sub_1C4C9B14C(_BYTE *result, int *a2)
{
  int v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  int v20;
  char v21;
  char v22;

  *result = 0;
  result[4] = 0;
  result[8] = 0;
  result[12] = 0;
  result[16] = 0;
  result[20] = 0;
  result[24] = 0;
  result[28] = 0;
  result[32] = 0;
  result[36] = 0;
  result[40] = 0;
  result[44] = 0;
  result[48] = 0;
  result[52] = 0;
  result[56] = 0;
  result[60] = 0;
  result[64] = 0;
  result[68] = 0;
  result[72] = 0;
  result[76] = 0;
  result[80] = 0;
  v2 = *a2;
  if (*a2 == -2)
  {
    v3 = 0;
    v4 = 0;
    *result = 0;
  }
  else if (v2 == -1)
  {
    v3 = 0;
    *result = 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_DWORD *)result = v2;
    v3 = 1;
  }
  result[4] = v3;
  result[8] = v4;
  v5 = a2[1];
  if (v5 == -2)
  {
    v6 = 0;
    v7 = 0;
    result[12] = 0;
  }
  else if (v5 == -1)
  {
    v6 = 0;
    result[12] = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *((_DWORD *)result + 3) = v5;
    v6 = 1;
  }
  result[16] = v6;
  result[20] = v7;
  v8 = a2[2];
  if (v8 == -2)
  {
    v9 = 0;
    v10 = 0;
    result[24] = 0;
  }
  else if (v8 == -1)
  {
    v9 = 0;
    result[24] = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *((_DWORD *)result + 6) = v8;
    v9 = 1;
  }
  result[28] = v9;
  result[32] = v10;
  v11 = a2[3];
  if (v11 == -2)
  {
    v12 = 0;
    v13 = 0;
    result[36] = 0;
  }
  else if (v11 == -1)
  {
    v12 = 0;
    result[36] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_DWORD *)result + 9) = v11;
    v12 = 1;
  }
  result[40] = v12;
  result[44] = v13;
  v14 = a2[4];
  if (v14 == -2)
  {
    v15 = 0;
    v16 = 0;
    result[48] = 0;
  }
  else if (v14 == -1)
  {
    v15 = 0;
    result[48] = 0;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *((_DWORD *)result + 12) = v14;
    v15 = 1;
  }
  result[52] = v15;
  result[56] = v16;
  v17 = a2[5];
  if (v17 == -2)
  {
    v18 = 0;
    v19 = 0;
    result[60] = 0;
  }
  else if (v17 == -1)
  {
    v18 = 0;
    result[60] = 0;
    v19 = 1;
  }
  else
  {
    v19 = 0;
    *((_DWORD *)result + 15) = v17;
    v18 = 1;
  }
  result[64] = v18;
  result[68] = v19;
  v20 = a2[6];
  if (v20 == -2)
  {
    v21 = 0;
    v22 = 0;
    result[72] = 0;
  }
  else if (v20 == -1)
  {
    v21 = 0;
    result[72] = 0;
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *((_DWORD *)result + 18) = v20;
    v21 = 1;
  }
  result[76] = v21;
  result[80] = v22;
  return result;
}

double sub_1C4C9B39C@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v11;
  int v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  char v32;
  char v33;
  unsigned int v34;
  char v35;
  char v36;
  unsigned int v37;
  char v38;
  char v39;
  unsigned int v40;
  char v41;
  char v42;
  unsigned int v43;
  char v44;
  char v45;
  unsigned int v46;
  char v47;
  char v48;

  v11 = BYTE4(a2);
  v12 = BYTE4(a6);
  v13 = (int *)&unk_1C847B36C;
  v14 = 1152;
  do
  {
    v15 = v14 >> 1;
    sub_1C4C9B14C(&v30, &v13[7 * (v14 >> 1)]);
    if ((_BYTE)v31)
      goto LABEL_3;
    if (BYTE4(v30))
      v16 = v30 >= a1;
    else
      v16 = 0;
    if (!v16)
    {
LABEL_50:
      v15 = v14 + ~v15;
      v13 += 7 * (v14 >> 1) + 7;
      goto LABEL_51;
    }
    if (v30 <= a1)
    {
LABEL_3:
      if (!v33)
      {
        if (v32 && v11)
        {
          if (HIDWORD(v31) < a2)
            goto LABEL_50;
        }
        else if (v11 && !v32)
        {
          goto LABEL_50;
        }
        if (v11 && v32)
        {
          if (HIDWORD(v31) > a2)
            goto LABEL_51;
        }
        else if (!v11 && v32)
        {
          goto LABEL_51;
        }
      }
      if (v36)
        goto LABEL_39;
      if (!v35 || v34 < a3)
        goto LABEL_50;
      if (v34 <= a3)
      {
LABEL_39:
        if (v39)
          goto LABEL_102;
        if (!v38 || v37 < a4)
          goto LABEL_50;
        if (v37 <= a4)
        {
LABEL_102:
          if (v42)
            goto LABEL_7;
          if (!v41 || v40 < a5)
            goto LABEL_50;
          if (v40 <= a5)
          {
LABEL_7:
            if (!v45)
            {
              if (v44 && v12)
              {
                if (v43 < a6)
                  goto LABEL_50;
              }
              else if (v12 && !v44)
              {
                goto LABEL_50;
              }
              if (v12 && v44)
              {
                if (v43 > a6)
                  goto LABEL_51;
              }
              else if (!v12 && v44)
              {
                goto LABEL_51;
              }
            }
            if (!v48 && (!v47 || v46 < a7))
              goto LABEL_50;
          }
        }
      }
    }
LABEL_51:
    v14 = v15;
  }
  while (v15);
  if (v13 == &dword_1C848316C)
    goto LABEL_99;
  sub_1C4C9B14C(&v30, v13);
  if (!(_BYTE)v31 && (!BYTE4(v30) || (_DWORD)v30 != a1))
    goto LABEL_99;
  if (v33)
    goto LABEL_65;
  v23 = a2 & 0xFF00000000;
  if (!v32 || !v23)
  {
    if ((v23 != 0) != (v32 == 0))
      goto LABEL_65;
    goto LABEL_99;
  }
  if (HIDWORD(v31) != (_DWORD)a2)
    goto LABEL_99;
  if (!v36 && (!v35 || v34 != a3) || !v39 && (!v38 || v37 != a4) || !v42 && (!v41 || v40 != a5))
    goto LABEL_99;
LABEL_65:
  if (v45)
    goto LABEL_75;
  v24 = a6 & 0xFF00000000;
  if (v44 && v24)
  {
    if (v43 == (_DWORD)a6)
      goto LABEL_75;
    goto LABEL_99;
  }
  if ((v24 != 0) == (v44 == 0))
    goto LABEL_99;
LABEL_75:
  if (v48 || v47 && v46 == a7)
  {
    *a8 = a8 + 2;
    v17.n128_u64[0] = 0x1000000000;
    a8[1] = 0x1000000000;
    LODWORD(v18) = *((_DWORD *)&unk_1C8496B30
                   - 1227133513 * ((unint64_t)((char *)v13 - (char *)&unk_1C847B36C) >> 2)) & 0x3FFF;
    LODWORD(v19) = *((_DWORD *)&unk_1C8496B30
                   - 1227133513 * ((unint64_t)((char *)v13 - (char *)&unk_1C847B36C) >> 2)) >> 14;
    v20 = (_DWORD)v18 == 0x3FFF;
    if ((_DWORD)v18 == 0x3FFF)
      v18 = 0xFFFFFFFFLL;
    else
      v18 = v18;
    if (v20)
      v19 = 0;
    else
      v19 = v19;
    v21 = (unsigned __int8 *)&unk_1C8493598 + v18;
    if (v20)
      v21 = 0;
    v30 = v21;
    v31 = &v21[v19];
    sub_1C4C99D3C(&v30, (uint64_t)a8, v17);
  }
  else
  {
LABEL_99:
    *a8 = a8 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a8[1] = 0x1000000000;
  }
  return result;
}

double sub_1C4C9B77C@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 3;
  v4 = (uint64_t)&dword_1C848316C;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (unsigned int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a1)
        break;
      v4 = (uint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((_UNKNOWN *)v4 == &unk_1C8483178 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a1)
  {
    *a2 = a2 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a2[1] = 0x1000000000;
  }
  else
  {
    *a2 = a2 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a2[1] = 0x1000000000;
    v9 = byte_1C8497D3C[((unint64_t)(v4 - (_QWORD)&dword_1C848316C) >> 2)];
    LODWORD(v4) = v9 & 7;
    LODWORD(v10) = v9 >> 3;
    v11 = (_DWORD)v4 == 7;
    if ((_DWORD)v4 == 7)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C8497D30 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a2, a3);
  }
  return result;
}

double sub_1C4C9B888@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned __int16 a6@<W5>, _QWORD *a7@<X8>)
{
  int v10;
  int v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  unsigned int v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  char v30;
  char v31;
  unsigned int v32;
  char v33;
  char v34;
  unsigned int v35;
  char v36;
  char v37;
  unsigned int v38;
  char v39;
  char v40;
  unsigned __int16 v41;
  char v42;
  char v43;

  v26 = a6;
  v10 = BYTE4(a2);
  v11 = BYTE4(a4);
  v12 = (int *)&unk_1C8483178;
  v13 = 304;
  do
  {
    v14 = v13 >> 1;
    sub_1C4C9BC20(&v28, &v12[6 * (v13 >> 1)]);
    if ((_BYTE)v29)
      goto LABEL_3;
    if (BYTE4(v28))
      v15 = v28 >= a1;
    else
      v15 = 0;
    if (!v15)
    {
LABEL_42:
      v14 = v13 + ~v14;
      v12 += 6 * (v13 >> 1) + 6;
      goto LABEL_43;
    }
    if (v28 <= a1)
    {
LABEL_3:
      if (!v31)
      {
        if (v30 && v10)
        {
          if (HIDWORD(v29) < a2)
            goto LABEL_42;
        }
        else if (v10 && !v30)
        {
          goto LABEL_42;
        }
        if (v10 && v30)
        {
          if (HIDWORD(v29) > a2)
            goto LABEL_43;
        }
        else if (!v10 && v30)
        {
          goto LABEL_43;
        }
      }
      if (v34)
        goto LABEL_5;
      if (!v33 || v32 < a3)
        goto LABEL_42;
      if (v32 <= a3)
      {
LABEL_5:
        if (!v37)
        {
          if (v36 && v11)
          {
            if (v35 < a4)
              goto LABEL_42;
          }
          else if (v11 && !v36)
          {
            goto LABEL_42;
          }
          if (v11 && v36)
          {
            if (v35 > a4)
              goto LABEL_43;
          }
          else if (!v11 && v36)
          {
            goto LABEL_43;
          }
        }
        if (v40)
          goto LABEL_9;
        if (!v39 || v38 < a5)
          goto LABEL_42;
        if (v38 <= a5)
        {
LABEL_9:
          if (!v43 && (!v42 || v41 < v26))
            goto LABEL_42;
        }
      }
    }
LABEL_43:
    v13 = v14;
  }
  while (v14);
  if (v12 == (int *)&unk_1C8484DF8 || (sub_1C4C9BC20(&v28, v12), !(_BYTE)v29) && (!BYTE4(v28) || (_DWORD)v28 != a1))
  {
LABEL_91:
    *a7 = a7 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a7[1] = 0x1000000000;
    return result;
  }
  if (!v31)
  {
    v22 = a2 & 0xFF00000000;
    if (v30 && v22)
    {
      if (HIDWORD(v29) == (_DWORD)a2)
        goto LABEL_60;
    }
    else if ((v22 != 0) != (v30 == 0))
    {
      goto LABEL_60;
    }
    goto LABEL_91;
  }
LABEL_60:
  if (!v34 && (!v33 || v32 != a3))
    goto LABEL_91;
  if (v37)
    goto LABEL_64;
  v23 = a4 & 0xFF00000000;
  if (v36 && v23)
  {
    if (v35 != (_DWORD)a4)
      goto LABEL_91;
  }
  else if ((v23 != 0) == (v36 == 0))
  {
    goto LABEL_91;
  }
LABEL_64:
  if (!v40 && (!v39 || v38 != a5) || !v43 && (!v42 || v41 != v26))
    goto LABEL_91;
  *a7 = a7 + 2;
  v16.n128_u64[0] = 0x1000000000;
  a7[1] = 0x1000000000;
  LODWORD(v17) = *((_DWORD *)&unk_1C84982EC
                 - 1431655765 * ((unint64_t)((char *)v12 - (char *)&unk_1C8483178) >> 3)) & 0x7FF;
  LODWORD(v18) = *((_DWORD *)&unk_1C84982EC
                 - 1431655765 * ((unint64_t)((char *)v12 - (char *)&unk_1C8483178) >> 3)) >> 11;
  v19 = (_DWORD)v17 == 2047;
  if ((_DWORD)v17 == 2047)
    v17 = 0xFFFFFFFFLL;
  else
    v17 = v17;
  if (v19)
    v18 = 0;
  else
    v18 = v18;
  v20 = (unsigned __int8 *)&unk_1C8497D3F + v17;
  if (v19)
    v20 = 0;
  v28 = v20;
  v29 = &v20[v18];
  sub_1C4C99D3C(&v28, (uint64_t)a7, v16);
  return result;
}

_BYTE *sub_1C4C9BC20(_BYTE *result, int *a2)
{
  int v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;

  result[24] = 0;
  result[28] = 0;
  result[32] = 0;
  result[36] = 0;
  result[40] = 0;
  result[44] = 0;
  result[48] = 0;
  result[52] = 0;
  result[56] = 0;
  result[60] = 0;
  result[62] = 0;
  result[64] = 0;
  v2 = *a2;
  if (*a2 == -2)
  {
    v3 = 0;
    v4 = 0;
    *result = 0;
  }
  else if (v2 == -1)
  {
    v3 = 0;
    *result = 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_DWORD *)result = v2;
    v3 = 1;
  }
  result[4] = v3;
  result[8] = v4;
  v5 = a2[1];
  if (v5 == -2)
  {
    v6 = 0;
    v7 = 0;
    result[12] = 0;
  }
  else if (v5 == -1)
  {
    v6 = 0;
    result[12] = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *((_DWORD *)result + 3) = v5;
    v6 = 1;
  }
  result[16] = v6;
  result[20] = v7;
  v8 = a2[2];
  if (v8 == -2)
  {
    v9 = 0;
    v10 = 0;
    result[24] = 0;
  }
  else if (v8 == -1)
  {
    v9 = 0;
    result[24] = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *((_DWORD *)result + 6) = v8;
    v9 = 1;
  }
  result[28] = v9;
  result[32] = v10;
  v11 = a2[3];
  if (v11 == -2)
  {
    v12 = 0;
    v13 = 0;
    result[36] = 0;
  }
  else if (v11 == -1)
  {
    v12 = 0;
    result[36] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_DWORD *)result + 9) = v11;
    v12 = 1;
  }
  result[40] = v12;
  result[44] = v13;
  v14 = a2[4];
  if (v14 == -2)
  {
    v15 = 0;
    v16 = 0;
    result[48] = 0;
  }
  else if (v14 == -1)
  {
    v15 = 0;
    result[48] = 0;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *((_DWORD *)result + 12) = v14;
    v15 = 1;
  }
  result[52] = v15;
  result[56] = v16;
  v17 = a2[5];
  if (v17 == -2)
  {
    v18 = 0;
    v19 = 0;
    result[60] = 0;
  }
  else if (v17 == -1)
  {
    v18 = 0;
    result[60] = 0;
    v19 = 1;
  }
  else
  {
    v19 = 0;
    *((_WORD *)result + 30) = v17;
    v18 = 1;
  }
  result[62] = v18;
  result[64] = v19;
  return result;
}

double sub_1C4C9BE04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, unsigned int a7@<W6>, unsigned __int16 a8@<W7>, _QWORD *a9@<X8>)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  __n128 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 *v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v32;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  char v39;
  char v40;
  unsigned int v41;
  char v42;
  char v43;
  unsigned int v44;
  char v45;
  char v46;
  unsigned int v47;
  char v48;
  char v49;
  unsigned int v50;
  char v51;
  char v52;
  unsigned int v53;
  char v54;
  char v55;
  unsigned __int16 v56;
  char v57;
  char v58;

  v32 = a8;
  v11 = BYTE4(a1);
  v12 = BYTE4(a2);
  v13 = BYTE4(a3);
  v14 = BYTE4(a6);
  v15 = (int *)&unk_1C8484DF8;
  v16 = 1168;
  do
  {
    v17 = v16 >> 1;
    sub_1C4C9C2E0(&v37, &v15[8 * (v16 >> 1)]);
    if (!(_BYTE)v38)
    {
      if (BYTE4(v37))
        v18 = v11 == 0;
      else
        v18 = 1;
      if (v18)
      {
        if (v11 && !BYTE4(v37))
        {
LABEL_73:
          v17 = v16 + ~v17;
          v15 += 8 * (v16 >> 1) + 8;
          goto LABEL_74;
        }
      }
      else if (v37 < a1)
      {
        goto LABEL_73;
      }
      if (v11 && BYTE4(v37))
      {
        if (v37 > a1)
          goto LABEL_74;
      }
      else if (!v11 && BYTE4(v37))
      {
        goto LABEL_74;
      }
    }
    if (!v40)
    {
      if (v39 && v12)
      {
        if (HIDWORD(v38) < a2)
          goto LABEL_73;
      }
      else if (v12 && !v39)
      {
        goto LABEL_73;
      }
      if (v12 && v39)
      {
        if (HIDWORD(v38) > a2)
          goto LABEL_74;
      }
      else if (!v12 && v39)
      {
        goto LABEL_74;
      }
    }
    if (!v43)
    {
      if (v42 && v13)
      {
        if (v41 < a3)
          goto LABEL_73;
      }
      else if (v13 && !v42)
      {
        goto LABEL_73;
      }
      if (v13 && v42)
      {
        if (v41 > a3)
          goto LABEL_74;
      }
      else if (!v13 && v42)
      {
        goto LABEL_74;
      }
    }
    if (v46)
      goto LABEL_46;
    if (!v45 || v44 < a4)
      goto LABEL_73;
    if (v44 <= a4)
    {
LABEL_46:
      if (v49)
        goto LABEL_7;
      if (!v48 || v47 < a5)
        goto LABEL_73;
      if (v47 <= a5)
      {
LABEL_7:
        if (!v52)
        {
          if (v51 && v14)
          {
            if (v50 < a6)
              goto LABEL_73;
          }
          else if (v14 && !v51)
          {
            goto LABEL_73;
          }
          if (v14 && v51)
          {
            if (v50 > a6)
              goto LABEL_74;
          }
          else if (!v14 && v51)
          {
            goto LABEL_74;
          }
        }
        if (v55)
          goto LABEL_11;
        if (!v54 || v53 < a7)
          goto LABEL_73;
        if (v53 <= a7)
        {
LABEL_11:
          if (!v58 && (!v57 || v56 < v32))
            goto LABEL_73;
        }
      }
    }
LABEL_74:
    v16 = v17;
  }
  while (v17);
  if (v15 == &dword_1C848DFF8)
    goto LABEL_133;
  sub_1C4C9C2E0(&v37, v15);
  if ((_BYTE)v38)
    goto LABEL_85;
  v26 = a1 & 0xFF00000000;
  if (!BYTE4(v37) || !v26)
  {
    if ((v26 != 0) != (BYTE4(v37) == 0))
      goto LABEL_85;
LABEL_133:
    *a9 = a9 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a9[1] = 0x1000000000;
    return result;
  }
  if ((_DWORD)v37 != (_DWORD)a1)
    goto LABEL_133;
LABEL_85:
  if (!v40)
  {
    v27 = a2 & 0xFF00000000;
    if (v39 && v27)
    {
      if (HIDWORD(v38) == (_DWORD)a2)
        goto LABEL_86;
    }
    else if ((v27 != 0) != (v39 == 0))
    {
      goto LABEL_86;
    }
    goto LABEL_133;
  }
LABEL_86:
  if (v43)
    goto LABEL_87;
  v28 = a3 & 0xFF00000000;
  if (!v42 || !v28)
  {
    if ((v28 != 0) != (v42 == 0))
      goto LABEL_87;
    goto LABEL_133;
  }
  if (v41 != (_DWORD)a3)
    goto LABEL_133;
LABEL_87:
  if (!v46 && (!v45 || v44 != a4) || !v49 && (!v48 || v47 != a5))
    goto LABEL_133;
  if (v52)
    goto LABEL_94;
  v29 = a6 & 0xFF00000000;
  if (v51 && v29)
  {
    if (v50 != (_DWORD)a6)
      goto LABEL_133;
  }
  else if ((v29 != 0) == (v51 == 0))
  {
    goto LABEL_133;
  }
LABEL_94:
  if (!v55 && (!v54 || v53 != a7) || !v58 && (!v57 || v56 != v32))
    goto LABEL_133;
  *a9 = a9 + 2;
  v19.n128_u64[0] = 0x1000000000;
  a9[1] = 0x1000000000;
  v20 = word_1C8498C74[((unint64_t)((char *)v15 - (char *)&unk_1C8484DF8) >> 5)];
  LODWORD(v21) = v20 & 0x7FF;
  LODWORD(v22) = v20 >> 11;
  v23 = (_DWORD)v21 == 2047;
  if ((_DWORD)v21 == 2047)
    v21 = 0xFFFFFFFFLL;
  else
    v21 = v21;
  if (v23)
    v22 = 0;
  else
    v22 = v22;
  v24 = (unsigned __int8 *)&unk_1C84987AC + v21;
  if (v23)
    v24 = 0;
  v37 = v24;
  v38 = &v24[v22];
  sub_1C4C99D3C(&v37, (uint64_t)a9, v19);
  return result;
}

_BYTE *sub_1C4C9C2E0(_BYTE *result, int *a2)
{
  int v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  int v20;
  char v21;
  char v22;
  int v23;
  char v24;
  char v25;

  *result = 0;
  result[4] = 0;
  result[8] = 0;
  result[12] = 0;
  result[16] = 0;
  result[20] = 0;
  result[24] = 0;
  result[28] = 0;
  result[32] = 0;
  result[36] = 0;
  result[40] = 0;
  result[44] = 0;
  result[48] = 0;
  result[52] = 0;
  result[56] = 0;
  result[60] = 0;
  result[64] = 0;
  result[68] = 0;
  result[72] = 0;
  result[76] = 0;
  result[80] = 0;
  result[84] = 0;
  result[86] = 0;
  result[88] = 0;
  v2 = *a2;
  if (*a2 == -2)
  {
    v3 = 0;
    v4 = 0;
    *result = 0;
  }
  else if (v2 == -1)
  {
    v3 = 0;
    *result = 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_DWORD *)result = v2;
    v3 = 1;
  }
  result[4] = v3;
  result[8] = v4;
  v5 = a2[1];
  if (v5 == -2)
  {
    v6 = 0;
    v7 = 0;
    result[12] = 0;
  }
  else if (v5 == -1)
  {
    v6 = 0;
    result[12] = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *((_DWORD *)result + 3) = v5;
    v6 = 1;
  }
  result[16] = v6;
  result[20] = v7;
  v8 = a2[2];
  if (v8 == -2)
  {
    v9 = 0;
    v10 = 0;
    result[24] = 0;
  }
  else if (v8 == -1)
  {
    v9 = 0;
    result[24] = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *((_DWORD *)result + 6) = v8;
    v9 = 1;
  }
  result[28] = v9;
  result[32] = v10;
  v11 = a2[3];
  if (v11 == -2)
  {
    v12 = 0;
    v13 = 0;
    result[36] = 0;
  }
  else if (v11 == -1)
  {
    v12 = 0;
    result[36] = 0;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    *((_DWORD *)result + 9) = v11;
    v12 = 1;
  }
  result[40] = v12;
  result[44] = v13;
  v14 = a2[4];
  if (v14 == -2)
  {
    v15 = 0;
    v16 = 0;
    result[48] = 0;
  }
  else if (v14 == -1)
  {
    v15 = 0;
    result[48] = 0;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    *((_DWORD *)result + 12) = v14;
    v15 = 1;
  }
  result[52] = v15;
  result[56] = v16;
  v17 = a2[5];
  if (v17 == -2)
  {
    v18 = 0;
    v19 = 0;
    result[60] = 0;
  }
  else if (v17 == -1)
  {
    v18 = 0;
    result[60] = 0;
    v19 = 1;
  }
  else
  {
    v19 = 0;
    *((_DWORD *)result + 15) = v17;
    v18 = 1;
  }
  result[64] = v18;
  result[68] = v19;
  v20 = a2[6];
  if (v20 == -2)
  {
    v21 = 0;
    v22 = 0;
    result[72] = 0;
  }
  else if (v20 == -1)
  {
    v21 = 0;
    result[72] = 0;
    v22 = 1;
  }
  else
  {
    v22 = 0;
    *((_DWORD *)result + 18) = v20;
    v21 = 1;
  }
  result[76] = v21;
  result[80] = v22;
  v23 = a2[7];
  if (v23 == -2)
  {
    v24 = 0;
    v25 = 0;
    result[84] = 0;
  }
  else if (v23 == -1)
  {
    v24 = 0;
    result[84] = 0;
    v25 = 1;
  }
  else
  {
    v25 = 0;
    *((_WORD *)result + 42) = v23;
    v24 = 1;
  }
  result[86] = v24;
  result[88] = v25;
  return result;
}

double sub_1C4C9C584(_QWORD *a1, unsigned int a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 2;
  v4 = (unint64_t)&dword_1C848DFF8;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a2)
        break;
      v4 = (unint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((int *)v4 == &dword_1C848E000 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a2)
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  else
  {
    *a1 = a1 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v9 = word_1C84995D0[((v4 - (unint64_t)&dword_1C848DFF8) >> 2)];
    LODWORD(v4) = v9 & 0x1F;
    LODWORD(v10) = v9 >> 5;
    v11 = (_DWORD)v4 == 31;
    if ((_DWORD)v4 == 31)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C8499594 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a1, a3);
  }
  return result;
}

double sub_1C4C9C694(_QWORD *a1, unsigned int a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 2;
  v4 = (unint64_t)&dword_1C848E000;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a2)
        break;
      v4 = (unint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((int *)v4 == &dword_1C848E008 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a2)
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  else
  {
    *a1 = a1 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v9 = word_1C84995D0[((v4 - (unint64_t)&dword_1C848E000) >> 2)];
    LODWORD(v4) = v9 & 0x1F;
    LODWORD(v10) = v9 >> 5;
    v11 = (_DWORD)v4 == 31;
    if ((_DWORD)v4 == 31)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C84995B2 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a1, a3);
  }
  return result;
}

double sub_1C4C9C7A4(_QWORD *a1, unsigned int a2, __n128 a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned __int8 *v12;
  double result;
  unsigned __int8 *v14[2];

  v3 = 2;
  v4 = (unint64_t)&dword_1C848E008;
  do
  {
    while (1)
    {
      v5 = v3 >> 1;
      v6 = (int *)(v4 + 4 * (v3 >> 1));
      v7 = *v6;
      if (*v6 == -1 || v7 != -2 && v7 >= a2)
        break;
      v4 = (unint64_t)(v6 + 1);
      v3 += ~v5;
      if (!v3)
        goto LABEL_8;
    }
    v3 >>= 1;
  }
  while (v5);
LABEL_8:
  if ((int *)v4 == &dword_1C848E010 || (v8 = *(_DWORD *)v4, *(_DWORD *)v4 == -2) || v8 != -1 && v8 != a2)
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  else
  {
    *a1 = a1 + 2;
    a3.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v9 = word_1C849960A[((v4 - (unint64_t)&dword_1C848E008) >> 2)];
    LODWORD(v4) = v9 & 0x3F;
    LODWORD(v10) = v9 >> 6;
    v11 = (_DWORD)v4 == 63;
    if ((_DWORD)v4 == 63)
      v4 = 0xFFFFFFFFLL;
    else
      v4 = v4;
    if (v11)
      v10 = 0;
    else
      v10 = v10;
    v12 = (unsigned __int8 *)&unk_1C84995D4 + v4;
    if (v11)
      v12 = 0;
    v14[0] = v12;
    v14[1] = &v12[v10];
    sub_1C4C99D3C(v14, (uint64_t)a1, a3);
  }
  return result;
}

uint64_t sub_1C4C9C8B4(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  int v5;
  BOOL v6;

  if (!*(_BYTE *)(a1 + 8))
  {
    v3 = *(unsigned __int8 *)(a2 + 4);
    if (*(_BYTE *)(a1 + 4))
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4)
    {
      if ((*(_BYTE *)(a1 + 4) == 0) == (v3 != 0))
        return 0;
    }
    else if (*(_DWORD *)a1 != *(_DWORD *)a2)
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 20))
  {
    v5 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a1 + 16))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (v6)
    {
      if ((*(_BYTE *)(a1 + 16) == 0) == (v5 != 0))
        return 0;
    }
    else if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 28) && *(_BYTE *)(a2 + 28))
    {
      if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 28) == 0) == (*(_BYTE *)(a2 + 28) != 0))
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 44))
  {
    if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(a2 + 40))
    {
      if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 40) == 0) == (*(_BYTE *)(a2 + 40) != 0))
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 52) && *(_BYTE *)(a2 + 52))
    {
      if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 52) == 0) == (*(_BYTE *)(a2 + 52) != 0))
    {
      return 0;
    }
  }
  if (!*(_BYTE *)(a1 + 68))
  {
    if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a2 + 64))
    {
      if (*(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
        return 0;
    }
    else if ((*(_BYTE *)(a1 + 64) == 0) == (*(_BYTE *)(a2 + 64) != 0))
    {
      return 0;
    }
  }
  if (*(_BYTE *)(a1 + 80))
    return 1;
  if (*(_BYTE *)(a1 + 76) && *(_BYTE *)(a2 + 76))
  {
    if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
      return 1;
  }
  else if ((*(_BYTE *)(a1 + 76) == 0) != (*(_BYTE *)(a2 + 76) != 0))
  {
    return 1;
  }
  return 0;
}

double sub_1C4C9CAC0(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  double result;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char v23;
  char v24;
  unsigned int v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  char v30;

  v10 = 27;
  v11 = (int *)&unk_1C848E468;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9AC30(&v21, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v22)
      goto LABEL_18;
    if (BYTE4(v21))
      v13 = v21 >= a2;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v21 <= a2)
    {
LABEL_18:
      if (v24)
        goto LABEL_22;
      if (!v23 || HIDWORD(v22) < a3)
        goto LABEL_24;
      if (HIDWORD(v22) <= a3)
      {
LABEL_22:
        if (v27)
          goto LABEL_7;
        if (!v26 || v25 < a4)
          goto LABEL_24;
        if (v25 <= a4)
        {
LABEL_7:
          if (!v30 && (!v29 || v28 < a5))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != (int *)&unk_1C848E618
    && ((sub_1C4C9AC30(&v21, v11), (_BYTE)v22) || BYTE4(v21) && (_DWORD)v21 == a2)
    && (v24 || v23 && HIDWORD(v22) == a3)
    && (v27 || v26 && v25 == a4)
    && (v30 || v29 && v28 == a5))
  {
    *a1 = a1 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v15 = word_1C84997F8[((unint64_t)((char *)v11 - (char *)&unk_1C848E468) >> 4)];
    LODWORD(v16) = HIBYTE(word_1C84997F8[((unint64_t)((char *)v11 - (char *)&unk_1C848E468) >> 4)]);
    v17 = v15 == 255;
    if (v15 == 255)
      v18 = 0xFFFFFFFFLL;
    else
      v18 = word_1C84997F8[((unint64_t)((char *)v11 - (char *)&unk_1C848E468) >> 4)];
    if (v17)
      v16 = 0;
    else
      v16 = v16;
    v19 = (unsigned __int8 *)&unk_1C8499729 + v18;
    if (v17)
      v19 = 0;
    v21 = v19;
    v22 = &v19[v16];
    sub_1C4C99D3C(&v21, (uint64_t)a1, v14);
  }
  else
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  return result;
}

double sub_1C4C9CCE0(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  __n128 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned __int8 *v19;
  double result;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char v23;
  char v24;
  unsigned int v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  char v30;

  v10 = 25;
  v11 = (int *)&unk_1C848E618;
  do
  {
    v12 = v10 >> 1;
    sub_1C4C9AC30(&v21, &v11[4 * (v10 >> 1)]);
    if ((_BYTE)v22)
      goto LABEL_18;
    if (BYTE4(v21))
      v13 = v21 >= a2;
    else
      v13 = 0;
    if (!v13)
    {
LABEL_24:
      v12 = v10 + ~v12;
      v11 += 4 * (v10 >> 1) + 4;
      goto LABEL_25;
    }
    if (v21 <= a2)
    {
LABEL_18:
      if (v24)
        goto LABEL_22;
      if (!v23 || HIDWORD(v22) < a3)
        goto LABEL_24;
      if (HIDWORD(v22) <= a3)
      {
LABEL_22:
        if (v27)
          goto LABEL_7;
        if (!v26 || v25 < a4)
          goto LABEL_24;
        if (v25 <= a4)
        {
LABEL_7:
          if (!v30 && (!v29 || v28 < a5))
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    v10 = v12;
  }
  while (v12);
  if (v11 != &dword_1C848E7A8
    && ((sub_1C4C9AC30(&v21, v11), (_BYTE)v22) || BYTE4(v21) && (_DWORD)v21 == a2)
    && (v24 || v23 && HIDWORD(v22) == a3)
    && (v27 || v26 && v25 == a4)
    && (v30 || v29 && v28 == a5))
  {
    *a1 = a1 + 2;
    v14.n128_u64[0] = 0x1000000000;
    a1[1] = 0x1000000000;
    v15 = word_1C84998C2[((unint64_t)((char *)v11 - (char *)&unk_1C848E618) >> 4)];
    LODWORD(v16) = v15 & 0x7F;
    LODWORD(v17) = v15 >> 7;
    v18 = (_DWORD)v16 == 127;
    if ((_DWORD)v16 == 127)
      v16 = 0xFFFFFFFFLL;
    else
      v16 = v16;
    if (v18)
      v17 = 0;
    else
      v17 = v17;
    v19 = (unsigned __int8 *)&unk_1C849982E + v16;
    if (v18)
      v19 = 0;
    v21 = v19;
    v22 = &v19[v17];
    sub_1C4C99D3C(&v21, (uint64_t)a1, v14);
  }
  else
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x1000000000;
    a1[1] = 0x1000000000;
  }
  return result;
}

double sub_1C4C9CF00@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X8>, unsigned int a6@<W4>)
{
  if (a6 == 4)
    return sub_1C4C9A5D0(a1, a2, a3, a4, a5);
  if (a6 >= 4)
    return sub_1C4C9A7F0(a1, a2, a3, a4, a5);
  return sub_1C4C9A270(a1, a2, a3, a4, a5);
}

uint64_t sub_1C4C9CF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)())((char *)sub_1C4C9CF34 + 4 * byte_1C8472DC0[a8]))();
}

void sub_1C4C9CF40()
{
  llvm::report_fatal_error((llvm *)"Unsupported GPU for pack sequence.", (const char *)1);
}

unint64_t sub_1C4C9CF58(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 28 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 28);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 28);
    }
  }
  return v2;
}

uint64_t (*sub_1C4C9CFD0(int a1))()
{
  return off_1E8131750[a1];
}

__n128 sub_1C4C9CFE0(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 result;
  uint64_t v38;

  *(_QWORD *)(a2 + 1264) = 0;
  *(_OWORD *)(a2 + 1248) = 0u;
  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v4 = *a1;
    v3 = 1;
    *(_QWORD *)(a2 + 1248) = 1;
    *(_QWORD *)a2 = v4;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 1)
  {
    v5 = *(unsigned __int16 *)a1;
    v3 |= 2uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 8) = v5;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 2)
  {
    v6 = *(unsigned __int16 *)a1;
    v3 |= 4uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 16) = v6;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 3)
  {
    v7 = *(unsigned __int16 *)a1;
    v3 |= 8uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 24) = v7;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 4)
  {
    v8 = *(unsigned int *)a1;
    v3 |= 0x10uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 32) = v8;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 5)
  {
    v9 = *(unsigned __int16 *)a1;
    v3 |= 0x20uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 40) = v9;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 6)
  {
    v10 = *a1;
    v3 |= 0x40uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 48) = v10;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 7)
  {
    v11 = *(unsigned int *)a1;
    *(_QWORD *)(a2 + 1248) = v3 | 0x80;
    *(_QWORD *)(a2 + 56) = v11;
    v2 = *((_DWORD *)a1 + 2);
    if (v2 == 7)
    {
      v3 |= 0x180uLL;
      *(_QWORD *)(a2 + 64) = a1[4];
      v2 = 7;
    }
    else
    {
      v3 |= 0x80uLL;
    }
  }
  v12 = *((unsigned int *)a1 + 3);
  *(_QWORD *)(a2 + 72) = v2;
  *(_QWORD *)(a2 + 80) = v12;
  v13 = *((unsigned int *)a1 + 5);
  *(_QWORD *)(a2 + 88) = a1[16];
  *(_QWORD *)(a2 + 96) = v13;
  v14 = a1[24];
  v15 = v3 | 0x3E00;
  *(_QWORD *)(a2 + 1248) = v3 | 0x3E00;
  *(_QWORD *)(a2 + 104) = v14;
  v16 = *((_DWORD *)a1 + 9);
  if (!v16)
  {
    v17 = a1[28];
    v15 = v3 | 0x7E00;
    *(_QWORD *)(a2 + 1248) = v3 | 0x7E00;
    *(_QWORD *)(a2 + 112) = v17;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 1)
  {
    v18 = *((unsigned __int16 *)a1 + 14);
    v15 |= 0x8000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 120) = v18;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 2)
  {
    v19 = *((unsigned __int16 *)a1 + 14);
    v15 |= 0x10000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 128) = v19;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 3)
  {
    v20 = *((unsigned __int16 *)a1 + 14);
    v15 |= 0x20000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 136) = v20;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 4)
  {
    v21 = *((unsigned int *)a1 + 7);
    v15 |= 0x40000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 144) = v21;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 5)
  {
    v22 = *((unsigned __int16 *)a1 + 14);
    v15 |= 0x80000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 152) = v22;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 6)
  {
    v23 = a1[28];
    v15 |= 0x100000uLL;
    *(_QWORD *)(a2 + 1248) = v15;
    *(_QWORD *)(a2 + 160) = v23;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 7)
  {
    v24 = *((unsigned int *)a1 + 7);
    *(_QWORD *)(a2 + 1248) = v15 | 0x200000;
    *(_QWORD *)(a2 + 168) = v24;
    v16 = *((_DWORD *)a1 + 9);
    if (v16 == 7)
    {
      v15 |= 0x600000uLL;
      *(_QWORD *)(a2 + 176) = a1[32];
    }
    else
    {
      v15 |= 0x200000uLL;
    }
  }
  v25 = *((unsigned int *)a1 + 10);
  *(_QWORD *)(a2 + 184) = v16;
  *(_QWORD *)(a2 + 192) = v25;
  v26 = *((unsigned int *)a1 + 12);
  *(_QWORD *)(a2 + 200) = a1[44];
  *(_QWORD *)(a2 + 208) = v26;
  *(_QWORD *)(a2 + 216) = a1[52];
  v27 = *((_QWORD *)a1 + 7);
  v28.n128_u64[0] = v27;
  v28.n128_u64[1] = HIDWORD(v27);
  *(__n128 *)(a2 + 224) = v28;
  v29 = a1[65];
  *(_QWORD *)(a2 + 240) = a1[64];
  *(_QWORD *)(a2 + 248) = v29;
  v30 = a1[67];
  *(_QWORD *)(a2 + 256) = a1[66];
  *(_QWORD *)(a2 + 264) = v30;
  v31 = a1[69];
  *(_QWORD *)(a2 + 272) = a1[68];
  *(_QWORD *)(a2 + 280) = v31;
  v32 = a1[71];
  *(_QWORD *)(a2 + 288) = a1[70];
  *(_QWORD *)(a2 + 296) = v32;
  v33 = *((_QWORD *)a1 + 9);
  v34 = *((_QWORD *)a1 + 10);
  v28.n128_u64[0] = v33;
  v28.n128_u64[1] = HIDWORD(v33);
  v35 = v28;
  v28.n128_u64[0] = v34;
  v28.n128_u64[1] = HIDWORD(v34);
  *(__n128 *)(a2 + 304) = v35;
  *(__n128 *)(a2 + 320) = v28;
  v35.n128_u64[0] = *((_QWORD *)a1 + 11);
  v36 = *((_QWORD *)a1 + 12);
  v28.n128_u64[0] = v35.n128_u32[0];
  v28.n128_u64[1] = v35.n128_u32[1];
  result = v28;
  v28.n128_u64[0] = v36;
  v28.n128_u64[1] = HIDWORD(v36);
  *(__n128 *)(a2 + 336) = result;
  *(__n128 *)(a2 + 352) = v28;
  v38 = a1[104];
  *(_QWORD *)(a2 + 1248) = v15 | 0x7FFFFF800000;
  *(_QWORD *)(a2 + 368) = v38;
  return result;
}

__n128 sub_1C4C9D2A8(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  __n128 v75;
  uint64_t v76;
  __n128 result;
  uint64_t v78;
  uint64_t v79;

  *(_QWORD *)(a2 + 1264) = 0;
  *(_OWORD *)(a2 + 1248) = 0u;
  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v4 = *a1;
    v3 = 1;
    *(_QWORD *)(a2 + 1248) = 1;
    *(_QWORD *)a2 = v4;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 1)
  {
    v5 = *(unsigned __int16 *)a1;
    v3 |= 2uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 8) = v5;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 2)
  {
    v6 = *(unsigned __int16 *)a1;
    v3 |= 4uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 16) = v6;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 3)
  {
    v7 = *(unsigned __int16 *)a1;
    v3 |= 8uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 24) = v7;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 4)
  {
    v8 = *(unsigned int *)a1;
    v3 |= 0x10uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 32) = v8;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 5)
  {
    v9 = *(unsigned __int16 *)a1;
    v3 |= 0x20uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 40) = v9;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 6)
  {
    v10 = *a1;
    v3 |= 0x40uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 48) = v10;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 7)
  {
    v11 = *(unsigned int *)a1;
    *(_QWORD *)(a2 + 1248) = v3 | 0x80;
    *(_QWORD *)(a2 + 56) = v11;
    v2 = *((_DWORD *)a1 + 2);
    if (v2 == 7)
    {
      v3 |= 0x180uLL;
      *(_QWORD *)(a2 + 64) = a1[4];
      v2 = 7;
    }
    else
    {
      v3 |= 0x80uLL;
    }
  }
  v12 = *((unsigned int *)a1 + 3);
  *(_QWORD *)(a2 + 72) = v2;
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = a1[16];
  v13 = v3 | 0x3E00;
  *(_QWORD *)(a2 + 1248) = v3 | 0x3E00;
  v14 = *(_QWORD *)(a1 + 20);
  *(_QWORD *)&v15 = v14;
  *((_QWORD *)&v15 + 1) = HIDWORD(v14);
  *(_OWORD *)(a2 + 96) = v15;
  v16 = *((_DWORD *)a1 + 9);
  if (!v16)
  {
    v17 = a1[28];
    v13 = v3 | 0x7E00;
    *(_QWORD *)(a2 + 1248) = v3 | 0x7E00;
    *(_QWORD *)(a2 + 112) = v17;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 1)
  {
    v18 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x8000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 120) = v18;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 2)
  {
    v19 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x10000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 128) = v19;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 3)
  {
    v20 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x20000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 136) = v20;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 4)
  {
    v21 = *((unsigned int *)a1 + 7);
    v13 |= 0x40000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 144) = v21;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 5)
  {
    v22 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x80000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 152) = v22;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 6)
  {
    v23 = a1[28];
    v13 |= 0x100000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 160) = v23;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 7)
  {
    v24 = *((unsigned int *)a1 + 7);
    *(_QWORD *)(a2 + 1248) = v13 | 0x200000;
    *(_QWORD *)(a2 + 168) = v24;
    v16 = *((_DWORD *)a1 + 9);
    if (v16 == 7)
    {
      v13 |= 0x600000uLL;
      *(_QWORD *)(a2 + 176) = a1[32];
    }
    else
    {
      v13 |= 0x200000uLL;
    }
  }
  v25 = v16;
  v26 = *((unsigned int *)a1 + 10);
  *(_QWORD *)(a2 + 184) = v25;
  *(_QWORD *)(a2 + 192) = v26;
  v27 = *((unsigned int *)a1 + 12);
  *(_QWORD *)(a2 + 200) = a1[44];
  *(_QWORD *)(a2 + 208) = v27;
  v28 = a1[52];
  v29 = v13 | 0xF800000;
  *(_QWORD *)(a2 + 1248) = v13 | 0xF800000;
  *(_QWORD *)(a2 + 216) = v28;
  v30 = *((_DWORD *)a1 + 16);
  if (!v30)
  {
    v31 = a1[56];
    v29 = v13 | 0x1F800000;
    *(_QWORD *)(a2 + 1248) = v13 | 0x1F800000;
    *(_QWORD *)(a2 + 224) = v31;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 1)
  {
    v32 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x20000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 232) = v32;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 2)
  {
    v33 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x40000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 240) = v33;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 3)
  {
    v34 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x80000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 248) = v34;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 4)
  {
    v35 = *((unsigned int *)a1 + 14);
    v29 |= 0x100000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 256) = v35;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 5)
  {
    v36 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x200000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 264) = v36;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 6)
  {
    v37 = a1[56];
    v29 |= 0x400000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 272) = v37;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 7)
  {
    v38 = *((unsigned int *)a1 + 14);
    *(_QWORD *)(a2 + 1248) = v29 | 0x800000000;
    *(_QWORD *)(a2 + 280) = v38;
    v30 = *((_DWORD *)a1 + 16);
    if (v30 == 7)
    {
      v29 |= 0x1800000000uLL;
      *(_QWORD *)(a2 + 288) = a1[60];
    }
    else
    {
      v29 |= 0x800000000uLL;
    }
  }
  v39 = v30;
  v40 = *((unsigned int *)a1 + 17);
  *(_QWORD *)(a2 + 296) = v39;
  *(_QWORD *)(a2 + 304) = v40;
  v41 = *((unsigned int *)a1 + 19);
  *(_QWORD *)(a2 + 312) = a1[72];
  *(_QWORD *)(a2 + 320) = v41;
  v42 = a1[80];
  v43 = a1[81];
  v44 = v29 | 0x7E000000000;
  *(_QWORD *)(a2 + 1248) = v29 | 0x7E000000000;
  *(_QWORD *)(a2 + 328) = v42;
  *(_QWORD *)(a2 + 336) = v43;
  v45 = *((_DWORD *)a1 + 23);
  if (!v45)
  {
    v46 = a1[84];
    v44 = v29 | 0xFE000000000;
    *(_QWORD *)(a2 + 1248) = v29 | 0xFE000000000;
    *(_QWORD *)(a2 + 344) = v46;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 1)
  {
    v47 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x100000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 352) = v47;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 2)
  {
    v48 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x200000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 360) = v48;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 3)
  {
    v49 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x400000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 368) = v49;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 4)
  {
    v50 = *((unsigned int *)a1 + 21);
    v44 |= 0x800000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 376) = v50;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 5)
  {
    v51 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x1000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 384) = v51;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 6)
  {
    v52 = a1[84];
    v44 |= 0x2000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 392) = v52;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 7)
  {
    v53 = *((unsigned int *)a1 + 21);
    *(_QWORD *)(a2 + 1248) = v44 | 0x4000000000000;
    *(_QWORD *)(a2 + 400) = v53;
    v45 = *((_DWORD *)a1 + 23);
    if (v45 == 7)
    {
      v44 |= 0xC000000000000uLL;
      *(_QWORD *)(a2 + 408) = a1[88];
    }
    else
    {
      v44 |= 0x4000000000000uLL;
    }
  }
  v54 = v45;
  v55 = *((unsigned int *)a1 + 24);
  *(_QWORD *)(a2 + 416) = v54;
  *(_QWORD *)(a2 + 424) = v55;
  v56 = *((unsigned int *)a1 + 26);
  *(_QWORD *)(a2 + 432) = a1[100];
  *(_QWORD *)(a2 + 440) = v56;
  v57 = a1[108];
  v58 = a1[112];
  v59 = v44 | 0x3F0000000000000;
  *(_QWORD *)(a2 + 1248) = v44 | 0x3F0000000000000;
  *(_QWORD *)(a2 + 448) = v57;
  *(_QWORD *)(a2 + 456) = v58;
  v60 = *((_DWORD *)a1 + 31);
  if (!v60)
  {
    v61 = a1[116];
    v59 = v44 | 0x7F0000000000000;
    *(_QWORD *)(a2 + 1248) = v44 | 0x7F0000000000000;
    *(_QWORD *)(a2 + 464) = v61;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 1)
  {
    v62 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x800000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 472) = v62;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 2)
  {
    v63 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x1000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 480) = v63;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 3)
  {
    v64 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x2000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 488) = v64;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 4)
  {
    v65 = *((unsigned int *)a1 + 29);
    v59 |= 0x4000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 496) = v65;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 5)
  {
    v66 = *((unsigned __int16 *)a1 + 58);
    *(_QWORD *)(a2 + 1248) = v59 | 0x8000000000000000;
    *(_QWORD *)(a2 + 504) = v66;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 6)
  {
    v67 = a1[116];
    v68 = 1;
    *(_QWORD *)(a2 + 1256) = 1;
    *(_QWORD *)(a2 + 512) = v67;
    v60 = *((_DWORD *)a1 + 31);
  }
  else
  {
    v68 = 0;
  }
  if (v60 == 7)
  {
    v69 = *((unsigned int *)a1 + 29);
    *(_QWORD *)(a2 + 1256) = v68 | 2;
    *(_QWORD *)(a2 + 520) = v69;
    v60 = *((_DWORD *)a1 + 31);
    if (v60 == 7)
    {
      v68 |= 6uLL;
      *(_QWORD *)(a2 + 528) = a1[120];
      v60 = 7;
    }
    else
    {
      v68 |= 2uLL;
    }
  }
  *(_QWORD *)(a2 + 536) = v60;
  *(_QWORD *)(a2 + 544) = *((unsigned int *)a1 + 32);
  *(_QWORD *)(a2 + 552) = a1[132];
  *(_QWORD *)(a2 + 560) = *((unsigned int *)a1 + 34);
  *(_QWORD *)(a2 + 568) = a1[140];
  v70 = *((_QWORD *)a1 + 18);
  *(_QWORD *)&v71 = v70;
  *((_QWORD *)&v71 + 1) = HIDWORD(v70);
  *(_OWORD *)(a2 + 576) = v71;
  *(_QWORD *)(a2 + 592) = a1[152];
  *(_QWORD *)(a2 + 600) = a1[153];
  *(_QWORD *)(a2 + 608) = a1[154];
  *(_QWORD *)(a2 + 616) = a1[155];
  *(_QWORD *)(a2 + 624) = a1[156];
  *(_QWORD *)(a2 + 632) = a1[157];
  *(_QWORD *)(a2 + 640) = a1[158];
  *(_QWORD *)(a2 + 648) = a1[159];
  *(_QWORD *)(a2 + 656) = a1[160];
  *(_QWORD *)(a2 + 664) = a1[161];
  *(_QWORD *)(a2 + 672) = *((unsigned int *)a1 + 41);
  *(_QWORD *)(a2 + 680) = a1[168];
  *(_QWORD *)(a2 + 688) = a1[169];
  *(_QWORD *)(a2 + 696) = *((unsigned int *)a1 + 43);
  v72 = *((unsigned __int16 *)a1 + 88);
  if ((v72 & 0x8000u) == 0)
    v72 = (__int16)v72;
  *(_QWORD *)(a2 + 704) = v72;
  v73 = *(_QWORD *)(a1 + 180);
  v74.n128_u64[0] = v73;
  v74.n128_u64[1] = HIDWORD(v73);
  v75 = v74;
  v76 = *(_QWORD *)(a1 + 188);
  v74.n128_u64[0] = v76;
  v74.n128_u64[1] = HIDWORD(v76);
  *(__n128 *)(a2 + 712) = v75;
  *(__n128 *)(a2 + 728) = v74;
  v75.n128_u64[0] = *(_QWORD *)(a1 + 196);
  v74.n128_u64[0] = v75.n128_u32[0];
  v74.n128_u64[1] = v75.n128_u32[1];
  result = v74;
  v78 = *(_QWORD *)(a1 + 204);
  v74.n128_u64[0] = v78;
  v74.n128_u64[1] = HIDWORD(v78);
  *(__n128 *)(a2 + 744) = result;
  *(__n128 *)(a2 + 760) = v74;
  *(_QWORD *)(a2 + 776) = a1[212];
  *(_QWORD *)(a2 + 784) = a1[213];
  v79 = *((unsigned int *)a1 + 54);
  *(_QWORD *)(a2 + 1256) = v68 | 0xFFFFFFFF8;
  *(_QWORD *)(a2 + 792) = v79;
  return result;
}

__n128 sub_1C4C9D96C(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  __n128 v75;
  uint64_t v76;
  __n128 result;
  uint64_t v78;
  uint64_t v79;

  *(_QWORD *)(a2 + 1264) = 0;
  *(_OWORD *)(a2 + 1248) = 0u;
  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v4 = *a1;
    v3 = 1;
    *(_QWORD *)(a2 + 1248) = 1;
    *(_QWORD *)a2 = v4;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 1)
  {
    v5 = *(unsigned __int16 *)a1;
    v3 |= 2uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 8) = v5;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 2)
  {
    v6 = *(unsigned __int16 *)a1;
    v3 |= 4uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 16) = v6;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 3)
  {
    v7 = *(unsigned __int16 *)a1;
    v3 |= 8uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 24) = v7;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 4)
  {
    v8 = *(unsigned int *)a1;
    v3 |= 0x10uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 32) = v8;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 5)
  {
    v9 = *(unsigned __int16 *)a1;
    v3 |= 0x20uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 40) = v9;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 6)
  {
    v10 = *a1;
    v3 |= 0x40uLL;
    *(_QWORD *)(a2 + 1248) = v3;
    *(_QWORD *)(a2 + 48) = v10;
    v2 = *((_DWORD *)a1 + 2);
  }
  if (v2 == 7)
  {
    v11 = *(unsigned int *)a1;
    *(_QWORD *)(a2 + 1248) = v3 | 0x80;
    *(_QWORD *)(a2 + 56) = v11;
    v2 = *((_DWORD *)a1 + 2);
    if (v2 == 7)
    {
      v3 |= 0x180uLL;
      *(_QWORD *)(a2 + 64) = a1[4];
      v2 = 7;
    }
    else
    {
      v3 |= 0x80uLL;
    }
  }
  v12 = *((unsigned int *)a1 + 3);
  *(_QWORD *)(a2 + 72) = v2;
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = a1[16];
  v13 = v3 | 0x3E00;
  *(_QWORD *)(a2 + 1248) = v3 | 0x3E00;
  v14 = *(_QWORD *)(a1 + 20);
  *(_QWORD *)&v15 = v14;
  *((_QWORD *)&v15 + 1) = HIDWORD(v14);
  *(_OWORD *)(a2 + 96) = v15;
  v16 = *((_DWORD *)a1 + 9);
  if (!v16)
  {
    v17 = a1[28];
    v13 = v3 | 0x7E00;
    *(_QWORD *)(a2 + 1248) = v3 | 0x7E00;
    *(_QWORD *)(a2 + 112) = v17;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 1)
  {
    v18 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x8000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 120) = v18;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 2)
  {
    v19 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x10000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 128) = v19;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 3)
  {
    v20 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x20000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 136) = v20;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 4)
  {
    v21 = *((unsigned int *)a1 + 7);
    v13 |= 0x40000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 144) = v21;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 5)
  {
    v22 = *((unsigned __int16 *)a1 + 14);
    v13 |= 0x80000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 152) = v22;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 6)
  {
    v23 = a1[28];
    v13 |= 0x100000uLL;
    *(_QWORD *)(a2 + 1248) = v13;
    *(_QWORD *)(a2 + 160) = v23;
    v16 = *((_DWORD *)a1 + 9);
  }
  if (v16 == 7)
  {
    v24 = *((unsigned int *)a1 + 7);
    *(_QWORD *)(a2 + 1248) = v13 | 0x200000;
    *(_QWORD *)(a2 + 168) = v24;
    v16 = *((_DWORD *)a1 + 9);
    if (v16 == 7)
    {
      v13 |= 0x600000uLL;
      *(_QWORD *)(a2 + 176) = a1[32];
    }
    else
    {
      v13 |= 0x200000uLL;
    }
  }
  v25 = v16;
  v26 = *((unsigned int *)a1 + 10);
  *(_QWORD *)(a2 + 184) = v25;
  *(_QWORD *)(a2 + 192) = v26;
  v27 = *((unsigned int *)a1 + 12);
  *(_QWORD *)(a2 + 200) = a1[44];
  *(_QWORD *)(a2 + 208) = v27;
  v28 = a1[52];
  v29 = v13 | 0xF800000;
  *(_QWORD *)(a2 + 1248) = v13 | 0xF800000;
  *(_QWORD *)(a2 + 216) = v28;
  v30 = *((_DWORD *)a1 + 16);
  if (!v30)
  {
    v31 = a1[56];
    v29 = v13 | 0x1F800000;
    *(_QWORD *)(a2 + 1248) = v13 | 0x1F800000;
    *(_QWORD *)(a2 + 224) = v31;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 1)
  {
    v32 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x20000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 232) = v32;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 2)
  {
    v33 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x40000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 240) = v33;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 3)
  {
    v34 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x80000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 248) = v34;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 4)
  {
    v35 = *((unsigned int *)a1 + 14);
    v29 |= 0x100000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 256) = v35;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 5)
  {
    v36 = *((unsigned __int16 *)a1 + 28);
    v29 |= 0x200000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 264) = v36;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 6)
  {
    v37 = a1[56];
    v29 |= 0x400000000uLL;
    *(_QWORD *)(a2 + 1248) = v29;
    *(_QWORD *)(a2 + 272) = v37;
    v30 = *((_DWORD *)a1 + 16);
  }
  if (v30 == 7)
  {
    v38 = *((unsigned int *)a1 + 14);
    *(_QWORD *)(a2 + 1248) = v29 | 0x800000000;
    *(_QWORD *)(a2 + 280) = v38;
    v30 = *((_DWORD *)a1 + 16);
    if (v30 == 7)
    {
      v29 |= 0x1800000000uLL;
      *(_QWORD *)(a2 + 288) = a1[60];
    }
    else
    {
      v29 |= 0x800000000uLL;
    }
  }
  v39 = v30;
  v40 = *((unsigned int *)a1 + 17);
  *(_QWORD *)(a2 + 296) = v39;
  *(_QWORD *)(a2 + 304) = v40;
  v41 = *((unsigned int *)a1 + 19);
  *(_QWORD *)(a2 + 312) = a1[72];
  *(_QWORD *)(a2 + 320) = v41;
  v42 = a1[80];
  v43 = a1[81];
  v44 = v29 | 0x7E000000000;
  *(_QWORD *)(a2 + 1248) = v29 | 0x7E000000000;
  *(_QWORD *)(a2 + 328) = v42;
  *(_QWORD *)(a2 + 336) = v43;
  v45 = *((_DWORD *)a1 + 23);
  if (!v45)
  {
    v46 = a1[84];
    v44 = v29 | 0xFE000000000;
    *(_QWORD *)(a2 + 1248) = v29 | 0xFE000000000;
    *(_QWORD *)(a2 + 344) = v46;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 1)
  {
    v47 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x100000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 352) = v47;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 2)
  {
    v48 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x200000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 360) = v48;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 3)
  {
    v49 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x400000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 368) = v49;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 4)
  {
    v50 = *((unsigned int *)a1 + 21);
    v44 |= 0x800000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 376) = v50;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 5)
  {
    v51 = *((unsigned __int16 *)a1 + 42);
    v44 |= 0x1000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 384) = v51;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 6)
  {
    v52 = a1[84];
    v44 |= 0x2000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v44;
    *(_QWORD *)(a2 + 392) = v52;
    v45 = *((_DWORD *)a1 + 23);
  }
  if (v45 == 7)
  {
    v53 = *((unsigned int *)a1 + 21);
    *(_QWORD *)(a2 + 1248) = v44 | 0x4000000000000;
    *(_QWORD *)(a2 + 400) = v53;
    v45 = *((_DWORD *)a1 + 23);
    if (v45 == 7)
    {
      v44 |= 0xC000000000000uLL;
      *(_QWORD *)(a2 + 408) = a1[88];
    }
    else
    {
      v44 |= 0x4000000000000uLL;
    }
  }
  v54 = v45;
  v55 = *((unsigned int *)a1 + 24);
  *(_QWORD *)(a2 + 416) = v54;
  *(_QWORD *)(a2 + 424) = v55;
  v56 = *((unsigned int *)a1 + 26);
  *(_QWORD *)(a2 + 432) = a1[100];
  *(_QWORD *)(a2 + 440) = v56;
  v57 = a1[108];
  v58 = a1[112];
  v59 = v44 | 0x3F0000000000000;
  *(_QWORD *)(a2 + 1248) = v44 | 0x3F0000000000000;
  *(_QWORD *)(a2 + 448) = v57;
  *(_QWORD *)(a2 + 456) = v58;
  v60 = *((_DWORD *)a1 + 31);
  if (!v60)
  {
    v61 = a1[116];
    v59 = v44 | 0x7F0000000000000;
    *(_QWORD *)(a2 + 1248) = v44 | 0x7F0000000000000;
    *(_QWORD *)(a2 + 464) = v61;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 1)
  {
    v62 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x800000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 472) = v62;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 2)
  {
    v63 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x1000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 480) = v63;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 3)
  {
    v64 = *((unsigned __int16 *)a1 + 58);
    v59 |= 0x2000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 488) = v64;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 4)
  {
    v65 = *((unsigned int *)a1 + 29);
    v59 |= 0x4000000000000000uLL;
    *(_QWORD *)(a2 + 1248) = v59;
    *(_QWORD *)(a2 + 496) = v65;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 5)
  {
    v66 = *((unsigned __int16 *)a1 + 58);
    *(_QWORD *)(a2 + 1248) = v59 | 0x8000000000000000;
    *(_QWORD *)(a2 + 504) = v66;
    v60 = *((_DWORD *)a1 + 31);
  }
  if (v60 == 6)
  {
    v67 = a1[116];
    v68 = 1;
    *(_QWORD *)(a2 + 1256) = 1;
    *(_QWORD *)(a2 + 512) = v67;
    v60 = *((_DWORD *)a1 + 31);
  }
  else
  {
    v68 = 0;
  }
  if (v60 == 7)
  {
    v69 = *((unsigned int *)a1 + 29);
    *(_QWORD *)(a2 + 1256) = v68 | 2;
    *(_QWORD *)(a2 + 520) = v69;
    v60 = *((_DWORD *)a1 + 31);
    if (v60 == 7)
    {
      v68 |= 6uLL;
      *(_QWORD *)(a2 + 528) = a1[120];
      v60 = 7;
    }
    else
    {
      v68 |= 2uLL;
    }
  }
  *(_QWORD *)(a2 + 536) = v60;
  *(_QWORD *)(a2 + 544) = *((unsigned int *)a1 + 32);
  *(_QWORD *)(a2 + 552) = a1[132];
  *(_QWORD *)(a2 + 560) = *((unsigned int *)a1 + 34);
  *(_QWORD *)(a2 + 568) = a1[140];
  v70 = *((_QWORD *)a1 + 18);
  *(_QWORD *)&v71 = v70;
  *((_QWORD *)&v71 + 1) = HIDWORD(v70);
  *(_OWORD *)(a2 + 576) = v71;
  *(_QWORD *)(a2 + 592) = a1[152];
  *(_QWORD *)(a2 + 600) = a1[153];
  *(_QWORD *)(a2 + 608) = a1[154];
  *(_QWORD *)(a2 + 616) = a1[155];
  *(_QWORD *)(a2 + 624) = a1[156];
  *(_QWORD *)(a2 + 632) = a1[157];
  *(_QWORD *)(a2 + 640) = a1[158];
  *(_QWORD *)(a2 + 648) = a1[159];
  *(_QWORD *)(a2 + 656) = a1[160];
  *(_QWORD *)(a2 + 664) = a1[161];
  *(_QWORD *)(a2 + 672) = *((unsigned int *)a1 + 41);
  *(_QWORD *)(a2 + 680) = a1[168];
  *(_QWORD *)(a2 + 688) = a1[169];
  *(_QWORD *)(a2 + 696) = *((unsigned int *)a1 + 43);
  v72 = *((unsigned __int16 *)a1 + 88);
  if ((v72 & 0x8000u) == 0)
    v72 = (__int16)v72;
  *(_QWORD *)(a2 + 704) = v72;
  v73 = *(_QWORD *)(a1 + 180);
  v74.n128_u64[0] = v73;
  v74.n128_u64[1] = HIDWORD(v73);
  v75 = v74;
  v76 = *(_QWORD *)(a1 + 188);
  v74.n128_u64[0] = v76;
  v74.n128_u64[1] = HIDWORD(v76);
  *(__n128 *)(a2 + 712) = v75;
  *(__n128 *)(a2 + 728) = v74;
  v75.n128_u64[0] = *(_QWORD *)(a1 + 196);
  v74.n128_u64[0] = v75.n128_u32[0];
  v74.n128_u64[1] = v75.n128_u32[1];
  result = v74;
  v78 = *(_QWORD *)(a1 + 204);
  v74.n128_u64[0] = v78;
  v74.n128_u64[1] = HIDWORD(v78);
  *(__n128 *)(a2 + 744) = result;
  *(__n128 *)(a2 + 760) = v74;
  *(_QWORD *)(a2 + 776) = a1[212];
  *(_QWORD *)(a2 + 784) = a1[213];
  v79 = *((unsigned int *)a1 + 54);
  *(_QWORD *)(a2 + 1256) = v68 | 0xFFFFFFFF8;
  *(_QWORD *)(a2 + 792) = v79;
  return result;
}

