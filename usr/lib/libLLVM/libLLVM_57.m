double sub_1C5EE4AEC(uint64_t **a1, _QWORD **a2, _QWORD **a3)
{
  _QWORD **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *j;
  uint64_t v15;
  _QWORD *v16;

  if (a2 == a3)
    return 0.0;
  v4 = a2;
  v5 = *a1;
  v6 = a1[1];
  if (v6 == *a1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      *(_QWORD *)(v8 + 40) = v7;
      v7 += *(_QWORD *)(v8 + 16);
    }
    while (v5 != v6);
  }
  v10 = a1[2];
  for (i = a1[3]; v10 != i; v7 += *(_QWORD *)(v12 + 16))
  {
    v12 = *v10++;
    *(_QWORD *)(v12 + 40) = v7;
  }
  v13 = a1[4];
  for (j = a1[5]; v13 != j; v7 += *(_QWORD *)(v15 + 16))
  {
    v15 = *v13++;
    *(_QWORD *)(v15 + 40) = v7;
  }
  v9 = 0.0;
  do
  {
    v16 = *v4++;
    v9 = v9 + sub_1C5EE3E6C(*(_QWORD *)(*v16 + 40), *(_QWORD *)(*v16 + 16), *(_QWORD *)(v16[1] + 40), v16[2]);
  }
  while (v4 != a3);
  return v9;
}

void sub_1C5EE4BCC(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;

  if (a4 - __src >= 1)
  {
    v4 = __src;
    v6 = (a4 - __src) >> 3;
    v7 = *(char **)a1;
    v8 = *(uint64_t **)(a1 + 8);
    v9 = a2 - *(_QWORD *)a1;
    v10 = (char *)(*(_QWORD *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
    v11 = *(_QWORD *)(a1 + 16);
    if (v6 <= (v11 - (uint64_t)v8) >> 3)
    {
      v17 = ((char *)v8 - v10) >> 3;
      if (v17 >= v6)
      {
        v18 = &__src[8 * v6];
        v20 = *(char **)(a1 + 8);
        v17 = (a4 - __src) >> 3;
      }
      else
      {
        v18 = &__src[8 * v17];
        v19 = a4 - v18;
        if (a4 != v18)
          memmove(*(void **)(a1 + 8), &__src[8 * v17], a4 - v18);
        v20 = (char *)v8 + v19;
        *(_QWORD *)(a1 + 8) = (char *)v8 + v19;
      }
      if (v17 >= 1)
      {
        v21 = &v10[8 * v6];
        v22 = (uint64_t *)&v20[-8 * v6];
        v23 = v20;
        if (v22 < v8)
        {
          v23 = v20;
          do
          {
            v24 = *v22++;
            *(_QWORD *)v23 = v24;
            v23 += 8;
          }
          while (v22 < v8);
        }
        *(_QWORD *)(a1 + 8) = v23;
        if (v20 != v21)
          memmove(&v20[-8 * ((v20 - v21) >> 3)], v10, v20 - v21);
        if (v18 != v4)
          memmove(v10, v4, v18 - v4);
      }
    }
    else
    {
      v12 = v6 + (((char *)v8 - v7) >> 3);
      if (v12 >> 61)
        abort();
      v13 = v11 - (_QWORD)v7;
      v14 = v13 >> 2;
      if (v13 >> 2 <= v12)
        v14 = v12;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 61)
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v25 = &v16[8 * (v9 >> 3)];
      v26 = &v25[8 * v6];
      v27 = 8 * v6;
      v28 = v25;
      do
      {
        v29 = *(_QWORD *)v4;
        v4 += 8;
        *(_QWORD *)v28 = v29;
        v28 += 8;
        v27 -= 8;
      }
      while (v27);
      v30 = *(char **)a1;
      if (v10 != *(char **)a1)
      {
        v31 = v10;
        do
        {
          v32 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *((_QWORD *)v25 - 1) = v32;
          v25 -= 8;
        }
        while (v31 != v30);
        v8 = *(uint64_t **)(a1 + 8);
      }
      v33 = &v16[8 * v15];
      if (v8 != (uint64_t *)v10)
        memmove(v26, v10, (char *)v8 - v10);
      v34 = *(char **)a1;
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 8) = &v26[(char *)v8 - v10];
      *(_QWORD *)(a1 + 16) = v33;
      if (v34)
        operator delete(v34);
    }
  }
}

void sub_1C5EE4DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  __asm { BR              X13 }
}

void sub_1C5EE4E20(_QWORD **a1@<X2>, uint64_t a2@<X3>, _QWORD **a3@<X4>, _QWORD **a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = a5;
  v11 = v5;
  v12 = a1;
  v13 = a2;
  v14 = 0;
  v15 = 0;
  if (*(_QWORD *)*a5 && **a1 || !*(_QWORD *)*a5)
  {
    *(double *)v7 = sub_1C5EE4AEC(&v10, a3, a4) - *(double *)(v9 + 8);
    *(_QWORD *)(v7 + 8) = v8;
    *(_DWORD *)(v7 + 16) = v6;
  }
  else
  {
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 0xBFF0000000000000;
  }
}

_QWORD *sub_1C5EE4ED4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        *v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = (uint64_t *)(v9 + 8);
      v19 = 16 * v6;
      do
      {
        v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1C49F21C0((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t *sub_1C5EE5094(uint64_t *result, double *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  double *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a4 < 2)
    return result;
  v8 = (double *)result;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v45 = *result;
    v10 = (_QWORD *)v45;
    v46 = v9;
    v11 = ***(_QWORD ***)(v9 + 16);
    if ((v11 == 0) != (***(_QWORD ***)(v45 + 16) == 0))
    {
      if (v11)
        return result;
    }
    else
    {
      v26 = *(double *)sub_1C5EE6048(*a3, &v46);
      result = sub_1C5EE6048(*a3, &v45);
      if (v26 == *(double *)result)
      {
        if (*(_QWORD *)v9 >= *v10)
          return result;
      }
      else if (v26 <= *(double *)result)
      {
        return result;
      }
    }
    v42 = *v8;
    *v8 = *(a2 - 1);
    *(a2 - 1) = v42;
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    v28 = a5;
    v29 = a4 >> 1;
    v30 = &result[a4 >> 1];
    v31 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1C5EE5094(result, v30, a3, v31, a5, a6);
      sub_1C5EE5094(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v28, a6);
      return (uint64_t *)sub_1C5EE58B8(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v28, a6);
    }
    sub_1C5EE54C4(result, v30, a3, v31, a5);
    v32 = &v28[v29];
    result = sub_1C5EE54C4((uint64_t *)&v8[a4 >> 1], (uint64_t *)a2, a3, a4 - (a4 >> 1), v32);
    v33 = &v28[a4];
    v34 = v32;
    while (1)
    {
      if (v34 == v33)
      {
        if (v28 != v32)
        {
          v43 = 0;
          do
          {
            *(_QWORD *)&v8[v43] = v28[v43];
            ++v43;
          }
          while (&v28[v43] != v32);
        }
        return result;
      }
      v35 = *v34;
      v45 = *v28;
      v36 = (_QWORD *)v45;
      v46 = v35;
      v37 = ***(_QWORD ***)(v35 + 16);
      if ((v37 == 0) != (***(_QWORD ***)(v45 + 16) == 0))
      {
        if (!v37)
          goto LABEL_45;
      }
      else
      {
        v40 = *(double *)sub_1C5EE6048(*a3, &v46);
        result = sub_1C5EE6048(*a3, &v45);
        if (v40 == *(double *)result)
        {
          if (*(_QWORD *)v35 < *v36)
          {
LABEL_45:
            v41 = *v34++;
            v38 = v41;
            goto LABEL_46;
          }
        }
        else if (v40 > *(double *)result)
        {
          goto LABEL_45;
        }
      }
      v39 = *v28++;
      v38 = v39;
LABEL_46:
      *(_QWORD *)v8++ = v38;
      if (v28 == v32)
      {
        if (v34 != v33)
        {
          v44 = 0;
          do
          {
            *(_QWORD *)&v8[v44] = v34[v44];
            ++v44;
          }
          while (&v34[v44] != v33);
        }
        return result;
      }
    }
  }
  if (result == (uint64_t *)a2)
    return result;
  v13 = result + 1;
  if (result + 1 == (uint64_t *)a2)
    return result;
  v14 = 0;
  v15 = result;
  do
  {
    v16 = v15;
    v15 = v13;
    v17 = *v13;
    v45 = *v16;
    v18 = (_QWORD *)v45;
    v46 = v17;
    v19 = ***(_QWORD ***)(v17 + 16);
    if ((v19 == 0) != (***(_QWORD ***)(v45 + 16) == 0))
    {
      if (v19)
        goto LABEL_30;
    }
    else
    {
      v20 = *(double *)sub_1C5EE6048(*a3, &v46);
      result = sub_1C5EE6048(*a3, &v45);
      if (v20 == *(double *)result)
      {
        if (*(_QWORD *)v17 >= *v18)
          goto LABEL_30;
      }
      else if (v20 <= *(double *)result)
      {
        goto LABEL_30;
      }
    }
    v21 = *v15;
    *v15 = *v16;
    if (v16 == (uint64_t *)v8)
    {
LABEL_28:
      v16 = (uint64_t *)v8;
      goto LABEL_29;
    }
    v22 = v14;
    while (1)
    {
      v45 = *(_QWORD *)((char *)v8 + v22 - 8);
      v23 = (_QWORD *)v45;
      v46 = v21;
      v24 = ***(_QWORD ***)(v21 + 16);
      if ((v24 == 0) != (***(_QWORD ***)(v45 + 16) == 0))
      {
        if (v24)
          goto LABEL_29;
        goto LABEL_27;
      }
      v25 = *(double *)sub_1C5EE6048(*a3, &v46);
      result = sub_1C5EE6048(*a3, &v45);
      if (v25 != *(double *)result)
      {
        if (v25 <= *(double *)result)
          goto LABEL_29;
        goto LABEL_27;
      }
      if (*(_QWORD *)v21 >= *v23)
        break;
LABEL_27:
      --v16;
      *(double *)((char *)v8 + v22) = *(double *)((char *)v8 + v22 - 8);
      v22 -= 8;
      if (!v22)
        goto LABEL_28;
    }
    v16 = (uint64_t *)((char *)v8 + v22);
LABEL_29:
    *v16 = v21;
LABEL_30:
    v13 = v15 + 1;
    v14 += 8;
  }
  while (v15 + 1 != (uint64_t *)a2);
  return result;
}

uint64_t *sub_1C5EE54C4(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  double v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v44;
  uint64_t v45;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
    v11 = result;
LABEL_39:
    *v5 = *v11;
    return result;
  }
  v9 = a2;
  if (a4 == 2)
  {
    v11 = a2 - 1;
    v10 = *(a2 - 1);
    v44 = *(double *)result;
    v12 = v44;
    v45 = v10;
    v13 = ***(_QWORD ***)(v10 + 16);
    if ((v13 == 0) != (***(_QWORD ***)(*(_QWORD *)&v44 + 16) == 0))
    {
      if (v13)
      {
LABEL_6:
        v14 = v7;
LABEL_38:
        *v5++ = *v14;
        goto LABEL_39;
      }
    }
    else
    {
      v31 = *(double *)sub_1C5EE6048(*a3, &v45);
      result = sub_1C5EE6048(*a3, (uint64_t *)&v44);
      if (v31 == *(double *)result)
      {
        if (*(_QWORD *)v10 >= **(_QWORD **)&v12)
          goto LABEL_6;
      }
      else if (v31 <= *(double *)result)
      {
        goto LABEL_6;
      }
    }
    v14 = v11;
    v11 = v7;
    goto LABEL_38;
  }
  if ((uint64_t)a4 > 8)
  {
    v32 = &result[a4 >> 1];
    sub_1C5EE5094(result, v32, a3, a4 >> 1, a5, a4 >> 1);
    result = (uint64_t *)sub_1C5EE5094(&v7[a4 >> 1], v9, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    v33 = &v7[a4 >> 1];
    while (1)
    {
      if (v33 == v9)
      {
        if (v7 != v32)
        {
          v41 = 0;
          do
          {
            v5[v41] = v7[v41];
            ++v41;
          }
          while (&v7[v41] != v32);
        }
        return result;
      }
      v34 = *v33;
      v44 = *(double *)v7;
      v35 = v44;
      v45 = v34;
      v36 = ***(_QWORD ***)(v34 + 16);
      if ((v36 == 0) != (***(_QWORD ***)(*(_QWORD *)&v44 + 16) == 0))
      {
        if (!v36)
          goto LABEL_48;
      }
      else
      {
        v39 = *(double *)sub_1C5EE6048(*a3, &v45);
        result = sub_1C5EE6048(*a3, (uint64_t *)&v44);
        if (v39 == *(double *)result)
        {
          if (*(_QWORD *)v34 < **(_QWORD **)&v35)
          {
LABEL_48:
            v40 = *(double *)v33++;
            v37 = v40;
            goto LABEL_49;
          }
        }
        else if (v39 > *(double *)result)
        {
          goto LABEL_48;
        }
      }
      v38 = *(double *)v7++;
      v37 = v38;
LABEL_49:
      *(double *)v5++ = v37;
      if (v7 == v32)
      {
        if (v33 != v9)
        {
          v42 = 0;
          do
          {
            v5[v42] = v33[v42];
            ++v42;
          }
          while (&v33[v42] != v9);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v15 = result + 1;
  *a5 = *result;
  if (result + 1 == a2)
    return result;
  v16 = 0;
  v17 = (double *)a5;
  do
  {
    v18 = v17;
    v20 = *v17++;
    v19 = v20;
    v21 = *v15;
    v44 = v20;
    v45 = v21;
    v22 = ***(_QWORD ***)(v21 + 16);
    if ((v22 == 0) != (***(_QWORD ***)(*(_QWORD *)&v20 + 16) == 0))
    {
      v23 = v17;
      if (v22)
        goto LABEL_32;
    }
    else
    {
      v24 = *(double *)sub_1C5EE6048(*a3, &v45);
      result = sub_1C5EE6048(*a3, (uint64_t *)&v44);
      if (v24 == *(double *)result)
      {
        v23 = v17;
        if (*(_QWORD *)v21 >= **(_QWORD **)&v19)
          goto LABEL_32;
      }
      else
      {
        v23 = v17;
        if (v24 <= *(double *)result)
          goto LABEL_32;
      }
    }
    v18[1] = *v18;
    v23 = (double *)v5;
    if (v18 == (double *)v5)
      goto LABEL_32;
    v25 = v16;
    while (1)
    {
      v26 = *v15;
      v44 = *(double *)((char *)v5 + v25 - 8);
      v27 = v44;
      v45 = v26;
      v28 = ***(_QWORD ***)(v26 + 16);
      if ((v28 == 0) != (***(_QWORD ***)(*(_QWORD *)&v44 + 16) == 0))
      {
        if (v28)
          goto LABEL_30;
        goto LABEL_28;
      }
      v29 = *(double *)sub_1C5EE6048(*a3, &v45);
      result = sub_1C5EE6048(*a3, (uint64_t *)&v44);
      if (v29 == *(double *)result)
        break;
      if (v29 <= *(double *)result)
      {
LABEL_30:
        v23 = v18;
        goto LABEL_31;
      }
LABEL_28:
      --v18;
      *(uint64_t *)((char *)v5 + v25) = *(uint64_t *)((char *)v5 + v25 - 8);
      v25 -= 8;
      if (!v25)
      {
        v23 = (double *)v5;
        goto LABEL_31;
      }
    }
    if (*(_QWORD *)v26 < **(_QWORD **)&v27)
      goto LABEL_28;
    v23 = (double *)((char *)v5 + v25);
LABEL_31:
    v9 = a2;
LABEL_32:
    v30 = *v15++;
    *(_QWORD *)v23 = v30;
    v16 += 8;
  }
  while (v15 != v9);
  return result;
}

double *sub_1C5EE58B8(double *result, double *a2, double *a3, uint64_t *a4, int64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _BOOL4 v31;
  double v32;
  double *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _BOOL4 v37;
  double v38;
  double *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  double *i;
  _QWORD *v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  double v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t *v88;
  double *v89;
  double *v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;

  v94 = a6;
  if (!a6)
    return result;
  v13 = result;
  do
  {
    if (a5 <= a8 || v94 <= a8)
    {
      if (a5 > v94)
      {
        if (a2 == a3)
          return result;
        v66 = 0;
        do
        {
          a7[v66] = *(_QWORD *)&a2[v66];
          ++v66;
        }
        while (&a2[v66] != a3);
        if (!(v66 * 8))
          return result;
        v67 = &a7[v66];
        for (i = a3 - 1; ; --i)
        {
          if (a2 == v13)
          {
            if (v67 != a7)
            {
              v87 = 0;
              do
              {
                *(_QWORD *)&i[v87] = v67[v87 - 1];
                --v87;
              }
              while (&v67[v87] != a7);
            }
            return result;
          }
          v70 = a2 - 1;
          v71 = *(v67 - 1);
          v98 = *((_QWORD *)a2 - 1);
          v69 = (_QWORD *)v98;
          v99 = v71;
          v72 = ***(_QWORD ***)(v71 + 16);
          if ((v72 == 0) == (***(_QWORD ***)(v98 + 16) == 0))
            break;
          result = a2 - 1;
          if (v72)
            goto LABEL_89;
LABEL_90:
          *i = *v70;
          a2 = result;
          if (v67 == a7)
            return result;
        }
        v73 = a2;
        v74 = *(double *)sub_1C5EE6048(*a4, &v99);
        v75 = *(double *)sub_1C5EE6048(*a4, &v98);
        if (v74 == v75)
        {
          result = v70;
          a2 = v73;
          if (*(_QWORD *)v71 < *v69)
            goto LABEL_90;
        }
        else
        {
          result = v70;
          a2 = v73;
          if (v74 > v75)
            goto LABEL_90;
        }
LABEL_89:
        v70 = (double *)(v67 - 1);
        result = a2;
        --v67;
        goto LABEL_90;
      }
      if (v13 == a2)
        return result;
      v76 = 0;
      do
      {
        a7[v76] = *(_QWORD *)&v13[v76];
        ++v76;
      }
      while (&v13[v76] != a2);
      if (!(v76 * 8))
        return result;
      v77 = a7;
      while (1)
      {
        if (a2 == a3)
          return (double *)memmove(v13, v77, (char *)a7 - (char *)v77 + v76 * 8);
        v78 = *(_QWORD *)a2;
        v98 = *v77;
        v79 = (_QWORD *)v98;
        v99 = v78;
        v80 = ***(_QWORD ***)(v78 + 16);
        if ((v80 == 0) != (***(_QWORD ***)(v98 + 16) == 0))
        {
          if (!v80)
            goto LABEL_108;
        }
        else
        {
          v83 = a2;
          v84 = *(double *)sub_1C5EE6048(*a4, &v99);
          result = (double *)sub_1C5EE6048(*a4, &v98);
          if (v84 == *result)
          {
            a2 = v83;
            if (*(_QWORD *)v78 < *v79)
            {
LABEL_108:
              v85 = *(_QWORD *)a2++;
              v81 = v85;
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v83;
            if (v84 > *result)
              goto LABEL_108;
          }
        }
        v82 = *v77++;
        v81 = v82;
LABEL_109:
        *(_QWORD *)v13++ = v81;
        if (&a7[v76] == v77)
          return result;
      }
    }
    if (!a5)
      return result;
    v14 = 0;
    v15 = -a5;
    v97 = a2;
    while (1)
    {
      v16 = *(_QWORD *)a2;
      v98 = *(_QWORD *)&v13[v14];
      v17 = (_QWORD *)v98;
      v99 = v16;
      v18 = ***(_QWORD ***)(v16 + 16);
      if ((v18 == 0) != (***(_QWORD ***)(v98 + 16) == 0))
      {
        if (!v18)
          goto LABEL_17;
        goto LABEL_14;
      }
      v19 = *(double *)sub_1C5EE6048(*a4, &v99);
      result = (double *)sub_1C5EE6048(*a4, &v98);
      if (v19 == *result)
        break;
      a2 = v97;
      if (v19 > *result)
        goto LABEL_17;
LABEL_14:
      ++v14;
      if (__CFADD__(v15++, 1))
        return result;
    }
    a2 = v97;
    if (*(_QWORD *)v16 >= *v17)
      goto LABEL_14;
LABEL_17:
    v21 = -v15;
    v22 = v94;
    v95 = a4;
    v90 = v13;
    v91 = a3;
    v92 = a8;
    v89 = &v13[v14];
    if (-v15 < v94)
    {
      if (v94 >= 0)
        v23 = v94;
      else
        v23 = v94 + 1;
      v96 = v23 >> 1;
      v24 = (uint64_t *)&a2[v23 >> 1];
      v25 = ((char *)a2 - (char *)v13 - v14 * 8) >> 3;
      if (&v13[v14] != a2)
      {
        v88 = a7;
        v26 = (uint64_t *)&v13[v14];
        v27 = v23 >> 1;
        do
        {
          v28 = &v26[v25 >> 1];
          v29 = *v24;
          v98 = *v28;
          v30 = (_QWORD *)v98;
          v99 = v29;
          v31 = ***(_QWORD ***)(v29 + 16) == 0;
          if (v31 == (***(_QWORD ***)(v98 + 16) == 0))
          {
            v32 = *(double *)sub_1C5EE6048(*v95, &v99);
            v33 = (double *)sub_1C5EE6048(*v95, &v98);
            if (v32 == *v33)
              v31 = *(_QWORD *)v29 < *v30;
            else
              v31 = v32 > *v33;
            v27 = v96;
            a2 = v97;
          }
          if (v31)
          {
            v25 >>= 1;
          }
          else
          {
            v26 = v28 + 1;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        v25 = ((char *)v26 - (char *)v90 - v14 * 8) >> 3;
        goto LABEL_50;
      }
      v26 = (uint64_t *)a2;
      v27 = v23 >> 1;
      goto LABEL_52;
    }
    if (v15 == -1)
    {
      v86 = v13[v14];
      v13[v14] = *a2;
      *a2 = v86;
      return result;
    }
    if (v15 > 0)
      v21 = 1 - v15;
    v24 = (uint64_t *)a3;
    v25 = v21 >> 1;
    v26 = (uint64_t *)&v13[(v21 >> 1) + v14];
    v27 = ((char *)v24 - (char *)a2) >> 3;
    if (v24 != (uint64_t *)a2)
    {
      v88 = a7;
      v93 = *v95;
      v24 = (uint64_t *)a2;
      do
      {
        v34 = &v24[v27 >> 1];
        v35 = *v34;
        v98 = *v26;
        v36 = (_QWORD *)v98;
        v99 = v35;
        v37 = ***(_QWORD ***)(v35 + 16) == 0;
        if (v37 == (***(_QWORD ***)(v98 + 16) == 0))
        {
          v38 = *(double *)sub_1C5EE6048(v93, &v99);
          v39 = (double *)sub_1C5EE6048(v93, &v98);
          if (v38 == *v39)
            v37 = *(_QWORD *)v35 < *v36;
          else
            v37 = v38 > *v39;
          a2 = v97;
        }
        if (v37)
          v27 += ~(v27 >> 1);
        else
          v27 >>= 1;
        if (v37)
          v24 = v34 + 1;
      }
      while (v27);
      v27 = ((char *)v24 - (char *)a2) >> 3;
LABEL_50:
      a7 = v88;
      v22 = v94;
    }
LABEL_52:
    v40 = v24;
    if (v26 != (uint64_t *)a2)
    {
      v40 = v26;
      if (a2 != (double *)v24)
      {
        v41 = v26 + 1;
        if (v26 + 1 == (uint64_t *)a2)
        {
          v47 = *v26;
          v48 = (char *)v24 - (char *)a2;
          memmove(v26, a2, (char *)v24 - (char *)a2);
          *(uint64_t *)((char *)v26 + v48) = v47;
          v40 = (uint64_t *)((char *)v26 + v48);
        }
        else
        {
          v42 = (uint64_t *)(a2 + 1);
          if (a2 + 1 == (double *)v24)
          {
            v49 = *(v24 - 1);
            if (v24 - 1 != v26)
              memmove(v26 + 1, v26, (char *)(v24 - 1) - (char *)v26);
            *v26 = v49;
            v40 = v26 + 1;
          }
          else
          {
            v43 = ((char *)a2 - (char *)v26) >> 3;
            v44 = (char *)v24 - (char *)a2;
            if (v43 == ((char *)v24 - (char *)a2) >> 3)
            {
              do
              {
                v45 = *(v41 - 1);
                *(v41 - 1) = *(v42 - 1);
                *(v42 - 1) = v45;
                if (v41 == (uint64_t *)a2)
                  break;
                ++v41;
              }
              while (v42++ != v24);
              v40 = (uint64_t *)a2;
            }
            else
            {
              v50 = v44 >> 3;
              v51 = v44 >> 3;
              v52 = ((char *)a2 - (char *)v26) >> 3;
              do
              {
                v53 = v52;
                v52 = v51;
                v51 = v53 % v51;
              }
              while (v51);
              if (v52)
              {
                v54 = &v26[v52];
                do
                {
                  v56 = *--v54;
                  v55 = v56;
                  v57 = &v54[v43];
                  v58 = v54;
                  do
                  {
                    v59 = v57;
                    *v58 = *v57;
                    v60 = &v57[v43];
                    v61 = __OFSUB__(v43, v24 - v57);
                    v63 = v43 - (v24 - v57);
                    v62 = (v63 < 0) ^ v61;
                    v57 = &v26[v63];
                    if (v62)
                      v57 = v60;
                    v58 = v59;
                  }
                  while (v57 != v54);
                  *v59 = v55;
                }
                while (v54 != v26);
              }
              v40 = &v26[v50];
            }
          }
        }
      }
    }
    a5 = -(uint64_t)(v25 + v15);
    if ((uint64_t)(v25 + v27) >= (uint64_t)(v22 - (v25 + v27) - v15))
    {
      result = (double *)sub_1C5EE58B8(v40, v24, v91, v95, -(uint64_t)(v25 + v15), v22 - v27, a7, v92);
      v24 = v26;
      a4 = v95;
      v65 = v27;
      a5 = v25;
      a3 = (double *)v40;
      v13 = v89;
    }
    else
    {
      v64 = v26;
      a4 = v95;
      result = (double *)sub_1C5EE58B8(&v90[v14], v64, v40, v95, v25, v27, a7, v92);
      v65 = v22 - v27;
      v13 = (double *)v40;
      a3 = v91;
    }
    v94 = v65;
    a2 = (double *)v24;
    a8 = v92;
  }
  while (v65);
  return result;
}

_QWORD *sub_1C5EE6048(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5EE4ED4(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

__n128 sub_1C5EE60AC(_WORD *a1, uint64_t **a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED826568, "ext-tsp-forward-weight", 0x16uLL);
  word_1ED826572 = (32 * (*a1 & 3)) | word_1ED826572 & 0xFF9F;
  v6 = *a2;
  *(_QWORD *)&xmmword_1ED8265E8 = **a2;
  byte_1ED826600 = 1;
  qword_1ED8265F8 = *v6;
  result = *a3;
  xmmword_1ED826588 = (__int128)*a3;
  return result;
}

__n128 sub_1C5EE6130(_WORD *a1, uint64_t **a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED826630, "ext-tsp-backward-weight", 0x17uLL);
  word_1ED82663A = (32 * (*a1 & 3)) | word_1ED82663A & 0xFF9F;
  v6 = *a2;
  *(_QWORD *)&xmmword_1ED8266B0 = **a2;
  byte_1ED8266C8 = 1;
  qword_1ED8266C0 = *v6;
  result = *a3;
  xmmword_1ED826650 = (__int128)*a3;
  return result;
}

__n128 sub_1C5EE61B4(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8264A8, "ext-tsp-enable-chain-split-along-jumps", 0x26uLL);
  word_1ED8264B2 = (32 * (*a1 & 3)) | word_1ED8264B2 & 0xFF9F;
  v6 = *a2;
  byte_1ED826528 = **a2;
  byte_1ED826539 = 1;
  byte_1ED826538 = *v6;
  result = *a3;
  xmmword_1ED8264C8 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5EE6238()
{
  char v1;
  uint64_t v2;
  int v3;
  __n128 v4;
  char *v5;

  LODWORD(v2) = 1;
  LOBYTE(v3) = 0;
  v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"Enable machine block placement based on the ext-tsp model, optimizing I-cache utilization.";
  v4.n128_u64[1] = 90;
  sub_1C4E5DE0C((llvm::cl::Option *)&EnableExtTspBlockPlacement, "enable-ext-tsp-block-placement", &v2, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &EnableExtTspBlockPlacement, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Whether to apply ext-tsp placement for instances w/o profile";
  v4.n128_u64[1] = 60;
  v1 = 1;
  v5 = &v1;
  LODWORD(v2) = 1;
  v3 = 1;
  sub_1C63A8EF4(&v4, &v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &ApplyExtTspWithoutProfile, &dword_1C475E000);
  v3 = 1;
  v2 = 0x3FB999999999999ALL;
  v4.n128_u64[0] = (unint64_t)"The weight of forward jumps for ExtTSP value";
  v4.n128_u64[1] = 44;
  v5 = (char *)&v2;
  sub_1C63A903C(&v3, (uint64_t **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED826568, &dword_1C475E000);
  v3 = 1;
  v2 = 0x3FB999999999999ALL;
  v4.n128_u64[0] = (unint64_t)"The weight of backward jumps for ExtTSP value";
  v4.n128_u64[1] = 45;
  v5 = (char *)&v2;
  sub_1C63A90E4(&v3, (uint64_t **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED826630, &dword_1C475E000);
  LODWORD(v2) = 1;
  v3 = 1024;
  v4.n128_u64[1] = 60;
  v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"The maximum distance (in bytes) of a forward jump for ExtTSP";
  sub_1C63A918C(&v2, (int **)&v5, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8261A8, &dword_1C475E000);
  LODWORD(v2) = 1;
  v3 = 640;
  v4.n128_u64[0] = (unint64_t)"The maximum distance (in bytes) of a backward jump for ExtTSP";
  v4.n128_u64[1] = 61;
  v5 = (char *)&v3;
  sub_1C61798D0((uint64_t)&unk_1ED826268, "ext-tsp-backward-distance", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED826268, &dword_1C475E000);
  LODWORD(v2) = 1;
  v3 = 4096;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to create.";
  v4.n128_u64[1] = 38;
  v5 = (char *)&v3;
  sub_1C61798D0((uint64_t)&unk_1ED826328, "ext-tsp-max-chain-size", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED826328, &dword_1C475E000);
  LODWORD(v2) = 1;
  v3 = 128;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to apply splitting";
  v4.n128_u64[1] = 46;
  v5 = (char *)&v3;
  sub_1C61798D0((uint64_t)&unk_1ED8263E8, "ext-tsp-chain-split-threshold", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8263E8, &dword_1C475E000);
  LODWORD(v2) = 1;
  LOBYTE(v3) = 1;
  v4.n128_u64[1] = 46;
  v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to apply splitting";
  sub_1C63A9268(&v2, &v5, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8264A8, &dword_1C475E000);
}

uint64_t llvm::isControlFlowEquivalent(llvm **this, const llvm::BasicBlock **a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  return llvm::isControlFlowEquivalent(this[5], a2[5], a3, a4, a5);
}

uint64_t llvm::isControlFlowEquivalent(llvm *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  uint64_t v9;
  uint64_t NearestCommonDominator;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  int v19;
  _BYTE v20[56];
  void *v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (this == a2
    || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a3, (uint64_t)this, (uint64_t)a2)
    && llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates((uint64_t)a4, (uint64_t)a2, (uint64_t)this)
    || llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates((uint64_t)a4, (uint64_t)this, (uint64_t)a2)
    && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a3, (uint64_t)a2, (uint64_t)this))
  {
    return 1;
  }
  NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator((uint64_t)a3, (uint64_t)this, (uint64_t)a2);
  sub_1C5EE6718((uint64_t)this, NearestCommonDominator, (uint64_t)a3, (uint64_t)a4, &v21);
  if (!v24)
    return 0;
  sub_1C5EE6718((uint64_t)a2, NearestCommonDominator, (uint64_t)a3, (uint64_t)a4, &v18);
  if (v20[48])
  {
    if (v22 | v19)
    {
      if (v22 != v19)
      {
LABEL_23:
        v9 = 0;
LABEL_24:
        if (v18 != v20)
          free(v18);
        goto LABEL_26;
      }
      if (v22)
      {
        v12 = (char *)v21;
        v13 = (char *)v21 + 8 * v22;
        v14 = (uint64_t *)v18;
        v15 = 8 * v22;
        do
        {
          v16 = v15;
          v17 = v14;
          while (!sub_1C5EE74C4(v12, v17))
          {
            ++v17;
            v16 -= 8;
            if (!v16)
              goto LABEL_23;
          }
          v12 += 8;
          v9 = 1;
        }
        while (v12 != v13);
        goto LABEL_24;
      }
    }
    v9 = 1;
    goto LABEL_24;
  }
  v9 = 0;
LABEL_26:
  if (v24 && v21 != &v23)
    free(v21);
  return v9;
}

void sub_1C5EE6718(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v6 = (uint64_t)a5;
  v35[6] = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v34 = 0x600000000;
  if (a2 == a1)
  {
    *a5 = a5 + 2;
    a5[1] = 0x600000000;
    v30 = 1;
    goto LABEL_44;
  }
  v10 = 0;
  do
  {
    v11 = *(_QWORD *)(a3 + 24);
    v12 = *(unsigned int *)(a3 + 40);
    if (!(_DWORD)v12)
      goto LABEL_9;
    LODWORD(v13) = ((a1 >> 4) ^ (a1 >> 9)) & (v12 - 1);
    v14 = (uint64_t *)(v11 + 16 * v13);
    v15 = *v14;
    if (a1 != *v14)
    {
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(_QWORD *)(v11 + 16 * v13);
        if (a1 == v15)
        {
          v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_10;
        }
      }
LABEL_9:
      v14 = (uint64_t *)(v11 + 16 * v12);
    }
LABEL_10:
    v18 = **(_QWORD **)(v14[1] + 8);
    v19 = *(_QWORD *)(v18 + 40);
    if (v19 == v18 + 40
      || (v19 ? (v20 = v19 - 24) : (v20 = 0),
          (v21 = *(unsigned __int8 *)(v20 + 16) - 40, v21 >= 0xFFFFFFF5) ? (v22 = v20) : (v22 = 0),
          !v19 || (*(_BYTE *)(v22 + 16) == 30 ? (v23 = v21 > 0xFFFFFFF4) : (v23 = 0), !v23)))
    {
LABEL_39:
      v30 = 0;
      v6 = (uint64_t)a5;
      *(_BYTE *)a5 = 0;
      goto LABEL_44;
    }
    if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(a4, a1, **(_QWORD **)(v14[1] + 8)))
      goto LABEL_24;
    if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(a4, a1, *(_QWORD *)(v22 - 32)))
    {
      v25 = *(_QWORD *)(v22 - 96) | 4;
    }
    else
    {
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(a4, a1, *(_QWORD *)(v22 - 64)))
        goto LABEL_39;
      v25 = *(_QWORD *)(v22 - 96) & 0xFFFFFFFFFFFFFFFBLL;
    }
    v32 = v25;
    v26 = v33;
    v27 = v34;
    if ((_DWORD)v34)
    {
      v28 = 8 * v34;
      v29 = (uint64_t *)v33;
      while ((sub_1C5EE74C4(&v32, v29) & 1) == 0)
      {
        ++v29;
        v28 -= 8;
        if (!v28)
          goto LABEL_33;
      }
LABEL_24:
      v24 = 0;
      goto LABEL_36;
    }
LABEL_33:
    if (v27 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v27 + 1, 8);
      v27 = v34;
      v26 = v33;
    }
    v26[v27] = v25;
    LODWORD(v34) = v34 + 1;
    v24 = 1;
LABEL_36:
    v10 += v24;
    if (v10 >= 7)
      goto LABEL_39;
    a1 = v18;
  }
  while (v18 != a2);
  v6 = (uint64_t)a5;
  *a5 = a5 + 2;
  a5[1] = 0x600000000;
  if ((_DWORD)v34)
    v6 = sub_1C614D378((uint64_t)a5, (uint64_t)&v33);
  v30 = 1;
LABEL_44:
  *(_BYTE *)(v6 + 64) = v30;
  if (v33 != v35)
    free(v33);
}

uint64_t llvm::isSafeToMoveBefore(const llvm::BasicBlock **this, const llvm::BasicBlock **a2, llvm::Instruction *a3, llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5, llvm::DependenceInfo *a6)
{
  uint64_t v6;
  llvm *v11;
  llvm *v12;
  int v15;
  int v16;
  const llvm::PostDominatorTree *v18;
  const llvm::BasicBlock *v19;
  llvm *v20;
  const llvm::PostDominatorTree *v21;
  const llvm::Use *v22;
  llvm::Instruction *v23;
  BOOL v24;
  const llvm::BasicBlock *v25;
  llvm *v26;
  int v27;
  uint64_t v28;
  const llvm::Value **v29;
  uint64_t v30;
  const llvm::Value *v31;
  BOOL v32;
  const llvm::BasicBlock *v33;
  const llvm::BasicBlock *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const llvm::BasicBlock **v38;
  const llvm::BasicBlock *v39;
  int v40;
  int v41;
  int v42;
  unsigned int *v43;
  unsigned int *v44;
  const llvm::BasicBlock **v45;
  const llvm::BasicBlock *v46;
  unsigned int v47;
  const llvm::BasicBlock **v48;
  const llvm::BasicBlock *v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  llvm *v54;
  llvm *v55;
  uint64_t v56;
  int v58;
  int v59;
  unsigned int i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char isSafeToSpeculativelyExecute;
  unint64_t *v65;
  unint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  llvm::Instruction **v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  char v78;
  uint64_t v79;
  int v81;
  int v82;
  unsigned int j;
  uint64_t v84;
  uint64_t v85;
  llvm::Instruction **v86;
  llvm::Instruction *v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  llvm::Instruction *v99;
  BOOL v100;
  llvm::Dependence *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v105;
  int v106;
  _QWORD *v107;
  unsigned int v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  _BYTE v113[128];
  llvm::Dependence *v114;
  llvm::Dependence *v115;
  uint64_t v116;
  int v117;
  _BYTE v118[136];

  v6 = 0;
  if (this != a2 && a4 && a5)
  {
    v11 = this[5];
    v12 = this[4];
    if (v12 != (llvm *)((char *)v11 + 40) && v12 != 0 && (const llvm::BasicBlock **)((char *)v12 - 24) == a2)
      return 1;
    v6 = 0;
    v15 = *((unsigned __int8 *)this + 16);
    if (v15 != 83 && *((_BYTE *)a2 + 16) != 83 && (v15 - 29) >= 0xB)
    {
      v16 = (int)a6;
      if (!llvm::isControlFlowEquivalent(v11, a2[5], a3, a4, a5))
        return 0;
      v19 = this[5];
      v20 = a2[5];
      if (v19 == v20)
      {
        if (!llvm::DominatorTree::dominates(a3, (const llvm::Value *)this, (const llvm::Instruction *)a2))
        {
LABEL_29:
          v25 = a2[5];
          v26 = this[5];
          if (v25 == v26)
          {
            if (!llvm::DominatorTree::dominates(a3, (const llvm::Value *)a2, (const llvm::Instruction *)this))
              goto LABEL_49;
          }
          else if (!llvm::nonStrictlyPostDominate(v26, v25, a3, a4, v21))
          {
            goto LABEL_49;
          }
          v27 = *((_DWORD *)this + 5);
          if ((v27 & 0x40000000) != 0)
          {
            v29 = (const llvm::Value **)*(this - 1);
            v28 = v27 & 0x7FFFFFF;
          }
          else
          {
            v28 = v27 & 0x7FFFFFF;
            v29 = &this[-4 * v28];
          }
          if (!v28)
          {
LABEL_49:
            llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers((uint64_t)a3);
            v33 = this[5];
            v34 = a2[5];
            if (v33 == v34)
            {
              v42 = *((__int16 *)v33 + 9);
              if ((v42 & 0x80000000) == 0)
              {
                v105 = (_QWORD *)*((_QWORD *)v33 + 6);
                if (v105 != (_QWORD *)((char *)v33 + 40))
                {
                  v106 = 0;
                  do
                  {
                    v107 = v105 - 3;
                    if (!v105)
                      v107 = 0;
                    *((_DWORD *)v107 + 14) = v106++;
                    v105 = (_QWORD *)v105[1];
                  }
                  while (v105 != (_QWORD *)((char *)v33 + 40));
                }
                *((_WORD *)v33 + 9) = v42 | 0x8000;
              }
              v43 = (unsigned int *)(this + 7);
              v44 = (unsigned int *)(a2 + 7);
LABEL_71:
              v52 = *v43;
              v53 = *v44;
              if (*v43 >= *v44)
                v54 = (llvm *)a2;
              else
                v54 = (llvm *)this;
              if (v52 >= v53)
                v55 = (llvm *)this;
              else
                v55 = (llvm *)a2;
              v109 = v113;
              v110 = v113;
              v111 = 16;
              v112 = 0;
              v114 = (llvm::Dependence *)v118;
              v115 = (llvm::Dependence *)v118;
              v116 = 16;
              v117 = 0;
              v56 = *((_QWORD *)v54 + 4);
              if (v56 == *((_QWORD *)v54 + 5) + 40 || v56 == 0)
              {
                v58 = *((unsigned __int8 *)v54 + 16);
                if (v58 != 30)
                  __asm { BR              X10 }
                if ((*((_DWORD *)v54 + 5) & 0x7FFFFFF) == 3)
                  v59 = 2;
                else
                  v59 = 1;
                for (i = 0; i != v59; ++i)
                {
                  v61 = *(_QWORD *)(llvm::Instruction::getSuccessor(v54, i) + 48);
                  if (v61)
                    v62 = v61 - 24;
                  else
                    v62 = 0;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v62);
                }
              }
              else
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v56 - 24);
              }
              v108 = v53;
              for (LODWORD(v63) = HIDWORD(v116); HIDWORD(v116) != v117; LODWORD(v63) = HIDWORD(v116))
              {
                v72 = (uint64_t *)v115;
                if (v115 == v114)
                  v63 = v63;
                else
                  v63 = v116;
                if ((_DWORD)v63)
                {
                  v73 = 8 * v63;
                  v74 = (uint64_t *)((char *)v115 + 8 * v63);
                  while ((unint64_t)*v72 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v72;
                    v73 -= 8;
                    if (!v73)
                    {
                      v72 = v74;
                      break;
                    }
                  }
                }
                v75 = *v72;
                v76 = sub_1C477672C((uint64_t)&v114, *v72);
                if (v115 == v114)
                  v77 = (uint64_t *)((char *)&v116 + 4);
                else
                  v77 = &v116;
                if (v76 != (_QWORD *)((char *)v115 + 8 * *(unsigned int *)v77))
                {
                  *v76 = -2;
                  ++v117;
                }
                if ((llvm *)v75 != v55)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v109, v75);
                  if (v78)
                  {
                    v79 = *(_QWORD *)(v75 + 32);
                    if (v79 == *(_QWORD *)(v75 + 40) + 40 || v79 == 0)
                    {
                      v81 = *(unsigned __int8 *)(v75 + 16);
                      if (v81 != 30)
                        __asm { BR              X9 }
                      if ((*(_DWORD *)(v75 + 20) & 0x7FFFFFF) == 3)
                        v82 = 2;
                      else
                        v82 = 1;
                      for (j = 0; j != v82; ++j)
                      {
                        v84 = *(_QWORD *)(llvm::Instruction::getSuccessor((llvm::Instruction *)v75, j) + 48);
                        if (v84)
                          v85 = v84 - 24;
                        else
                          v85 = 0;
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v85);
                      }
                    }
                    else
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, v79 - 24);
                    }
                  }
                }
              }
              if (v115 != v114)
                free(v115);
              if (v52 >= v108)
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v109, (uint64_t)a2);
              isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute((uint64_t)this, 0, 0, 0);
              v66 = (unint64_t *)v109;
              v65 = (unint64_t *)v110;
              v68 = v111;
              v67 = HIDWORD(v111);
              if ((isSafeToSpeculativelyExecute & 1) != 0)
                goto LABEL_157;
              if (v110 == v109)
                v69 = HIDWORD(v111);
              else
                v69 = v111;
              v70 = (llvm::Instruction **)v110;
              if ((_DWORD)v69)
              {
                v71 = 0;
                while (*(_QWORD *)&v110[v71] >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v71 += 8;
                  if (8 * v69 == v71)
                    goto LABEL_157;
                }
                v70 = (llvm::Instruction **)&v110[v71];
              }
              v86 = (llvm::Instruction **)&v110[8 * v69];
              if (v70 == v86)
              {
LABEL_157:
                if (v65 == v66)
                  v95 = v67;
                else
                  v95 = v68;
                v96 = v65;
                if ((_DWORD)v95)
                {
                  v97 = 8 * v95;
                  v96 = v65;
                  while (*v96 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v96;
                    v97 -= 8;
                    if (!v97)
                      goto LABEL_181;
                  }
                }
                v98 = &v65[v95];
                if (v96 != v98)
                {
                  v99 = (llvm::Instruction *)*v96;
LABEL_167:
                  llvm::DependenceInfo::depends((uint64_t)a5, (llvm::Instruction *)this, v99, 1, (uint64_t *)&v114);
                  v100 = v114
                      && ((llvm::Dependence::isOutput((llvm::Instruction **)v114) & 1) != 0
                       || (llvm::Dependence::isFlow((llvm::Instruction **)v114) & 1) != 0
                       || (llvm::Dependence::isAnti((llvm::Instruction **)v114) & 1) != 0);
                  v101 = v114;
                  v114 = 0;
                  if (v101)
                    (*(void (**)(llvm::Dependence *))(*(_QWORD *)v101 + 8))(v101);
                  if (v100)
                    goto LABEL_140;
                  v102 = v96 + 1;
                  while (v102 != v98)
                  {
                    v103 = *v102++;
                    v99 = (llvm::Instruction *)v103;
                    if (v103 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v96 = v102 - 1;
                      goto LABEL_167;
                    }
                  }
                }
LABEL_181:
                v6 = 1;
LABEL_182:
                if (v110 != v109)
                  free(v110);
                return v6;
              }
              v87 = *v70;
              if ((llvm::Instruction::mayThrow(*v70) & 1) != 0)
              {
LABEL_140:
                v6 = 0;
                goto LABEL_182;
              }
              while (2)
              {
                v88 = *((unsigned __int8 *)v87 + 16) - 33;
                v89 = v88 > 0x33;
                v90 = (1 << v88) & 0x8000000000041;
                if (!v89 && v90 != 0)
                {
                  v92 = *((_QWORD *)v87 + 8);
                  if (!v92 || (*(_BYTE *)(v92 + 20) & 2) == 0)
                  {
                    if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v87, 65))
                      goto LABEL_140;
                    v92 = *((_QWORD *)v87 + 8);
                    if (!v92)
                      goto LABEL_150;
                  }
                  if ((*(_BYTE *)(v92 + 16) & 8) == 0)
                  {
LABEL_150:
                    if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v87, 35))
                      goto LABEL_140;
                  }
                }
                v93 = (unint64_t *)(v70 + 1);
                do
                {
                  if (v93 == (unint64_t *)v86)
                  {
                    v66 = (unint64_t *)v109;
                    v65 = (unint64_t *)v110;
                    v68 = v111;
                    v67 = HIDWORD(v111);
                    goto LABEL_157;
                  }
                  v94 = *v93++;
                  v87 = (llvm::Instruction *)v94;
                }
                while (v94 > 0xFFFFFFFFFFFFFFFDLL);
                v6 = 0;
                v70 = (llvm::Instruction **)(v93 - 1);
                if ((llvm::Instruction::mayThrow(v87) & 1) == 0)
                  continue;
                goto LABEL_182;
              }
            }
            v35 = *((_QWORD *)a3 + 3);
            v36 = *((unsigned int *)a3 + 10);
            if ((_DWORD)v36)
            {
              LODWORD(v37) = (v36 - 1) & ((v33 >> 4) ^ (v33 >> 9));
              v38 = (const llvm::BasicBlock **)(v35 + 16 * v37);
              v39 = *v38;
              if (v33 == *v38)
                goto LABEL_60;
              v40 = 1;
              while (v39 != (const llvm::BasicBlock *)-4096)
              {
                v41 = v37 + v40++;
                v37 = v41 & (v36 - 1);
                v39 = *(const llvm::BasicBlock **)(v35 + 16 * v37);
                if (v33 == v39)
                {
                  v38 = (const llvm::BasicBlock **)(v35 + 16 * v37);
                  goto LABEL_60;
                }
              }
            }
            v38 = (const llvm::BasicBlock **)(v35 + 16 * v36);
LABEL_60:
            v45 = (const llvm::BasicBlock **)(v35 + 16 * v36);
            if (v38 == v45)
              v46 = 0;
            else
              v46 = v38[1];
            if ((_DWORD)v36)
            {
              v47 = v36 - 1;
              LODWORD(v36) = (v36 - 1) & ((v34 >> 4) ^ (v34 >> 9));
              v48 = (const llvm::BasicBlock **)(v35 + 16 * v36);
              v49 = *v48;
              if (v34 == *v48)
              {
LABEL_70:
                v43 = (unsigned int *)((char *)v46 + 16);
                v44 = (unsigned int *)((char *)v48[1] + 16);
                goto LABEL_71;
              }
              v50 = 1;
              while (v49 != (const llvm::BasicBlock *)-4096)
              {
                v51 = v36 + v50++;
                v36 = v51 & v47;
                v49 = *(const llvm::BasicBlock **)(v35 + 16 * v36);
                if (v34 == v49)
                {
                  v48 = (const llvm::BasicBlock **)(v35 + 16 * v36);
                  goto LABEL_70;
                }
              }
            }
            v48 = v45;
            goto LABEL_70;
          }
          v30 = 32 * v28;
          while (1)
          {
            v31 = *v29;
            v32 = *v29 && *((unsigned __int8 *)*v29 + 16) >= 0x1Cu;
            if (v32
              && (v31 == (const llvm::Value *)a2
               || (!v16
                || this[5] != *((const llvm::BasicBlock **)v31 + 5)
                || !llvm::DominatorTree::dominates(a3, *v29, (const llvm::Instruction *)this))
               && !llvm::DominatorTree::dominates(a3, v31, (const llvm::Instruction *)a2)))
            {
              return 0;
            }
            v29 += 4;
            v30 -= 32;
            if (!v30)
              goto LABEL_49;
          }
        }
      }
      else if (!llvm::nonStrictlyPostDominate(v20, v19, a3, a4, v18))
      {
        goto LABEL_29;
      }
      v22 = this[1];
      if (v22)
      {
        while (1)
        {
          v23 = (llvm::Instruction *)*((_QWORD *)v22 + 3);
          if (*((unsigned __int8 *)v23 + 16) <= 0x1Bu)
            v23 = 0;
          v24 = !v23 || v23 == (llvm::Instruction *)a2;
          if (!v24 && !llvm::DominatorTree::dominates(a3, (const llvm::Value *)a2, v22))
            return 0;
          v22 = (const llvm::Use *)*((_QWORD *)v22 + 1);
          if (!v22)
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    }
  }
  return v6;
}

void sub_1C5EE71C4()
{
  JUMPOUT(0x1C5EE7178);
}

void sub_1C5EE71D4()
{
  JUMPOUT(0x1C5EE7178);
}

void sub_1C5EE71E0()
{
  JUMPOUT(0x1C5EE6D2CLL);
}

void sub_1C5EE71E8()
{
  JUMPOUT(0x1C5EE7178);
}

BOOL llvm::isReachedBefore(llvm *this, const llvm::Instruction *a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  const llvm::BasicBlock *v7;
  llvm *v8;

  v7 = (const llvm::BasicBlock *)*((_QWORD *)this + 5);
  v8 = (llvm *)*((_QWORD *)a2 + 5);
  if (v7 == v8)
    return llvm::DominatorTree::dominates(a3, this, a2);
  else
    return llvm::nonStrictlyPostDominate(v8, v7, a3, a4, a5);
}

void llvm::moveInstructionsToTheBeginning(llvm *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5, llvm::DependenceInfo *a6)
{
  char *v6;
  llvm *v7;
  llvm::Instruction *v12;
  llvm *v13;
  llvm *v14;
  char *FirstNonPHIOrDbg;

  v6 = (char *)this + 40;
  v7 = (llvm *)**((_QWORD **)this + 5);
  if (v7 != (llvm *)((char *)this + 40))
  {
    do
    {
      v14 = *(llvm **)v7;
      v12 = (llvm *)((char *)v7 - 24);
      v13 = v14;
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(a2, 1);
      if (llvm::isSafeToMoveBefore((const llvm::BasicBlock **)v12, (const llvm::BasicBlock **)FirstNonPHIOrDbg, a3, a4, a5, 0))llvm::Instruction::moveBefore(v12, (llvm::Instruction *)FirstNonPHIOrDbg);
      v7 = v13;
    }
    while (v13 != (llvm *)v6);
  }
}

BOOL llvm::nonStrictlyPostDominate(llvm *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  uint64_t NearestCommonDominator;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  void *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator((uint64_t)a3, (uint64_t)this, (uint64_t)a2);
  if (!NearestCommonDominator)
    return 0;
  v9 = NearestCommonDominator;
  v31 = v34;
  v33 = 8;
  v26 = v30;
  v27 = v30;
  v28 = 8;
  v29 = 0;
  v34[0] = this;
  v10 = 1;
  do
  {
    v11 = *((_QWORD *)v31 + v10 - 1);
    v32 = v10 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v26, v11);
    v12 = llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates((uint64_t)a4, v11, (uint64_t)a2);
    if (v12)
      break;
    v13 = *(_QWORD *)(v11 + 8);
    if (v13)
    {
      while (1)
      {
        v14 = *(_QWORD *)(v13 + 24);
        v15 = *(unsigned __int8 *)(v14 + 16);
        v16 = v14 && v15 >= 0x1C;
        if (v16 && v15 - 29 <= 0xA)
          break;
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          goto LABEL_14;
      }
LABEL_16:
      v18 = *(_QWORD *)(v14 + 40);
      if (v18 != v9)
      {
        v19 = (char *)sub_1C477672C((uint64_t)&v26, *(_QWORD *)(v14 + 40));
        v20 = v27 == v26 ? (uint64_t *)((char *)&v28 + 4) : &v28;
        if (v19 == &v27[8 * *(unsigned int *)v20])
        {
          v21 = v32;
          if (v32 >= (unint64_t)v33)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v34, v32 + 1, 8);
            v21 = v32;
          }
          *((_QWORD *)v31 + v21) = v18;
          ++v32;
        }
      }
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          break;
        v14 = *(_QWORD *)(v13 + 24);
        v22 = *(unsigned __int8 *)(v14 + 16);
        if (v14)
          v23 = v22 >= 0x1C;
        else
          v23 = 0;
        if (v23 && v22 - 29 < 0xB)
          goto LABEL_16;
      }
    }
LABEL_14:
    v10 = v32;
  }
  while (v32);
  if (v27 != v26)
    free(v27);
  if (v31 != v34)
    free(v31);
  return v12;
}

uint64_t sub_1C5EE74C4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v6;
  unsigned int v7;

  v2 = *a2;
  v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (((*a1 >> 2) & 1) == (((unint64_t)*a2 >> 2) & 1))
  {
    if (v3 != (v2 & 0xFFFFFFFFFFFFFFF8))
      return 0;
  }
  else
  {
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 < 0x1C || v4 - 83 < 0xFFFFFFFE)
      return 0;
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 < 0x1C || v7 - 83 < 0xFFFFFFFE)
      return 0;
    if (dword_1C86748E4[*(_WORD *)(v6 + 18) & 0x3F] != (*(_WORD *)(v3 + 18) & 0x3F)
      || *(_QWORD *)(v3 - 64) != *(_QWORD *)(v6 - 64)
      || *(_QWORD *)(v3 - 32) != *(_QWORD *)(v6 - 32))
    {
      return ((uint64_t (*)(void))((char *)&loc_1C5EE7574 + 4 * byte_1C86748B9[*(_WORD *)(v6 + 18) & 0x3F]))();
    }
  }
  return 1;
}

void sub_1C5EE7598(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 37 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75A0(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 41 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 35 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75B0()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE75B8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 5 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 13 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75C8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 3 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75D0(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 11 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75D8()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE75E0(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 39 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75E8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 34 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 36 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE75F8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 10 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE7600()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7608(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 38 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE7610(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 12 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE7618(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (v2 == 2 && *(_QWORD *)(a1 - 64) == *(_QWORD *)(v1 - 32))
    JUMPOUT(0x1C5EE7580);
  JUMPOUT(0x1C5EE7588);
}

void sub_1C5EE7648()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7650()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7658()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7660()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7668()
{
  JUMPOUT(0x1C5EE7574);
}

void sub_1C5EE7674()
{
  JUMPOUT(0x1C5EE7574);
}

void llvm::ComputationExtractor::evaluate(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = a1;
  llvm::ComputationExtractor::evaluate(v4, 1, a2, a3, a4);
}

void llvm::ComputationExtractor::evaluate(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t *v8;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  void **v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  void **v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  char *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  void **v81;
  void **v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _QWORD v87[2];
  int v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int v92;
  _BYTE v93[32];
  _QWORD v94[2];
  int v95;
  void *__p[2];
  uint64_t v97;
  _QWORD v98[2];
  int v99;
  __int128 v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t *v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[56];
  void *v108;
  _BYTE v109[64];
  char v110;
  uint64_t v111;
  void *v112;
  _BYTE v113[72];
  uint64_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[64];
  uint64_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  void *v127;
  uint64_t v128;
  _QWORD v129[11];

  v8 = a1;
  v129[9] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_1C4DFE394((_QWORD *)a5, a1, (uint64_t)&a1[a2], (8 * a2) >> 3);
  v10 = 0;
  v11 = 0;
  v79 = a5 + 40;
  *(_QWORD *)(a5 + 24) = a5 + 40;
  *(_QWORD *)(a5 + 104) = a5 + 120;
  v81 = (void **)(a5 + 24);
  v82 = (void **)(a5 + 104);
  *(_QWORD *)(a5 + 32) = 0x800000000;
  *(_QWORD *)(a5 + 112) = 0x800000000;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_QWORD *)(a5 + 248) = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  if (8 * a4)
  {
    if (8 * a4 < 0)
      goto LABEL_165;
    v12 = (unint64_t *)operator new(8 * a4);
    v11 = v12;
    v10 = &v12[(8 * a4) >> 3];
    v102 = v12;
    v104 = v10;
    if (a4)
      memmove(v12, a3, 8 * a4);
    v103 = v10;
  }
  v78 = a5 + 120;
  v83 = a5;
  v13 = 126 - 2 * __clz(v10 - v11);
  if (v10 == v11)
    v14 = 0;
  else
    v14 = v13;
  v80 = v11;
  sub_1C5EEB710(v11, v10, v14, 1);
  v98[0] = 0;
  v98[1] = 0;
  v99 = 0;
  v101 = 0;
  v100 = 0uLL;
  v94[0] = 0;
  v94[1] = 0;
  v95 = 0;
  __p[1] = 0;
  v97 = 0;
  __p[0] = 0;
  v89 = v93;
  v90 = v93;
  v91 = 4;
  v92 = 0;
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  v114 = 1;
  v115 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v116 = v115;
  v117 = v115;
  v118 = v115;
  v119 = v121;
  v120 = 0x800000000;
  v122 = 1;
  v123 = v115;
  v124 = v115;
  v125 = v115;
  v126 = v115;
  v127 = v129;
  v128 = 0x800000000;
  v129[8] = 0;
  if (a2)
  {
    v15 = 8 * a2;
    do
    {
      if (*v8)
        v16 = *(unsigned __int8 *)(*v8 + 16) >= 0x1Cu;
      else
        v16 = 0;
      if (v16)
      {
        sub_1C5EE8304((uint64_t)&v105, *v8, &v102, (llvm::SmallPtrSetImplBase *)&v89, (uint64_t)v87, v98, v94);
        sub_1C5EE8260((_BOOL8)&v114, (uint64_t)&v105);
        if (v112 != v113)
          free(v112);
        if ((v110 & 1) == 0)
          MEMORY[0x1CAA32FB4](v111, 8);
        if (v108 != v109)
          free(v108);
        if ((v105 & 1) == 0)
          MEMORY[0x1CAA32FB4](v106, 8);
      }
      ++v8;
      v15 -= 8;
    }
    while (v15);
    if (HIDWORD(v91) != v92)
    {
      v17 = v90;
      if (v90 == v89)
        v18 = HIDWORD(v91);
      else
        v18 = v91;
      if ((_DWORD)v18)
      {
        v19 = 8 * v18;
        v20 = &v90[8 * v18];
        while (*(_QWORD *)v17 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v17 += 8;
          v19 -= 8;
          if (!v19)
          {
            v17 = v20;
            break;
          }
        }
      }
      v21 = *(_QWORD *)(*(_QWORD *)v17 + 56);
      v22 = v21 + 72;
      v23 = *(_QWORD *)(v21 + 80);
      if (v23 != v21 + 72)
      {
        v86 = v21 + 72;
        do
        {
          v63 = v23 - 24;
          if (!v23)
            v63 = 0;
          v64 = *(_QWORD *)(v63 + 40);
          if (v64 == v63 + 40)
            goto LABEL_147;
          v31 = (_BYTE *)(v64 - 24);
          if (v64)
            v65 = v64 - 24;
          else
            v65 = 0;
          v66 = *(unsigned __int8 *)(v65 + 16);
          v67 = v66 - 29;
          if (v66 == 30)
          {
            if ((*(_DWORD *)(v65 + 20) & 0x7FFFFFF) == 3)
              v68 = 2;
            else
              v68 = 1;
          }
          else
          {
            v68 = 2;
            switch(v67)
            {
              case 1:
                __break(1u);
                goto LABEL_167;
              case 2:
                v68 = (*(_DWORD *)(v65 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 3:
              case 9:
                v68 = (*(_DWORD *)(v65 + 20) & 0x7FFFFFF) - 1;
                break;
              case 4:
                goto LABEL_128;
              case 7:
                v68 = *(_WORD *)(v65 + 18) & 1;
                break;
              case 8:
                v68 = 1;
                goto LABEL_128;
              case 10:
                v68 = *(_DWORD *)(v65 + 80) + 1;
                break;
              default:
                goto LABEL_147;
            }
            if (!v68)
              goto LABEL_147;
          }
LABEL_128:
          v69 = 0;
          a3 = 0;
          v70 = 0;
          v71 = v64 - 88;
          v72 = (uint64_t *)v68;
          do
          {
            v73 = *(unsigned __int8 *)(v64 - 8);
            if (v73 != 30)
              __asm { BR              X9 }
            v74 = (char *)sub_1C477672C((uint64_t)&v89, *(_QWORD *)(v64 - 56 - 32 * (_QWORD)a3));
            if (v90 == v89)
              v75 = (uint64_t *)((char *)&v91 + 4);
            else
              v75 = &v91;
            if (v74 != &v90[8 * *(unsigned int *)v75])
              ++v70;
            a3 = (uint64_t *)((char *)a3 + 1);
            v69 += 2;
            v71 += 32;
          }
          while (v72 != a3);
          v16 = v70 >= 2;
          v22 = v86;
          if (v16)
          {
            sub_1C5EE8304((uint64_t)&v105, v64 - 24, &v102, (llvm::SmallPtrSetImplBase *)&v89, (uint64_t)v87, v98, v94);
            sub_1C5EE8260((_BOOL8)&v114, (uint64_t)&v105);
            if (v112 != v113)
              free(v112);
            if ((v110 & 1) == 0)
              MEMORY[0x1CAA32FB4](v111, 8);
            if (v108 != v109)
              free(v108);
            if ((v105 & 1) == 0)
              MEMORY[0x1CAA32FB4](v106, 8);
          }
LABEL_147:
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23 != v22);
      }
    }
  }
  sub_1C619D588(v98);
  v24 = v100;
  v25 = v101;
  v100 = 0uLL;
  v101 = 0;
  v26 = v83;
  v27 = *(void **)(v83 + 232);
  if (v27)
  {
    *(_QWORD *)(v83 + 240) = v27;
    v84 = v24;
    operator delete(v27);
    v24 = v84;
  }
  *(_OWORD *)(v83 + 232) = v24;
  *(_QWORD *)(v83 + 248) = v25;
  sub_1C619D588(v94);
  v28 = *(_OWORD *)__p;
  v29 = v97;
  __p[0] = 0;
  __p[1] = 0;
  v97 = 0;
  v30 = *(void **)(v83 + 184);
  if (v30)
  {
    *(_QWORD *)(v83 + 192) = v30;
    v85 = v28;
    operator delete(v30);
    v28 = v85;
  }
  *(_OWORD *)(v83 + 184) = v28;
  *(_QWORD *)(v83 + 200) = v29;
  sub_1C5EEB608(&v114);
  v31 = v107;
  v105 = v107;
  v106 = 0x800000000;
  v23 = v120;
  v32 = v107;
  v33 = v121;
  v34 = v81;
  if ((_DWORD)v120)
  {
    v32 = v119;
    if (v119 != v121)
    {
      v105 = v119;
      v106 = v120;
      v119 = v121;
      HIDWORD(v120) = 0;
      goto LABEL_44;
    }
    v35 = v120;
    v32 = v107;
    if (v120 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v120, 8);
      v35 = v120;
      v32 = v105;
      if (!(_DWORD)v120)
      {
        v26 = v83;
        v34 = v81;
        goto LABEL_43;
      }
      v33 = v119;
      v26 = v83;
      v34 = v81;
    }
    memcpy(v32, v33, 8 * v35);
    v32 = v105;
LABEL_43:
    LODWORD(v106) = v23;
LABEL_44:
    LODWORD(v120) = 0;
  }
  a3 = &v122;
  if (v34 == &v105)
    goto LABEL_55;
  if (v32 != v107)
  {
    if (*v34 != (void *)v79)
    {
      free(*v34);
      v32 = v105;
      LODWORD(v23) = v106;
    }
    *(_QWORD *)(v26 + 24) = v32;
    v76 = HIDWORD(v106);
    *(_DWORD *)(v26 + 32) = v23;
    *(_DWORD *)(v26 + 36) = v76;
    v105 = v107;
    HIDWORD(v106) = 0;
    goto LABEL_54;
  }
  v36 = *(unsigned int *)(v26 + 32);
  if (v36 >= v23)
  {
LABEL_167:
    if ((_DWORD)v23)
      memmove(*v81, v31, 8 * v23);
    v26 = v83;
    goto LABEL_53;
  }
  if (*(_DWORD *)(v26 + 36) < v23)
  {
    *(_DWORD *)(v26 + 32) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v34, v79, v23, 8);
    goto LABEL_50;
  }
  if (!(_DWORD)v36)
  {
LABEL_50:
    v36 = 0;
    goto LABEL_51;
  }
  memmove(*v34, v107, 8 * v36);
LABEL_51:
  if (v36 != v106)
    memcpy((char *)*v34 + 8 * v36, (char *)v105 + 8 * v36, 8 * v106 - 8 * v36);
LABEL_53:
  *(_DWORD *)(v26 + 32) = v23;
LABEL_54:
  LODWORD(v106) = 0;
  v32 = v105;
LABEL_55:
  if (v32 != v31)
    free(v32);
  sub_1C5EEB608(a3);
  v105 = v107;
  v106 = 0x800000000;
  v37 = v128;
  v38 = v107;
  v39 = v82;
  if ((_DWORD)v128)
  {
    v38 = v127;
    if (v127 != v129)
    {
      v105 = v127;
      v106 = v128;
      v127 = v129;
      HIDWORD(v128) = 0;
      goto LABEL_62;
    }
    v40 = v129;
    v41 = v128;
    v38 = v107;
    if (v128 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v128, 8);
      v41 = v128;
      v38 = v105;
      if (!(_DWORD)v128)
      {
        v26 = v83;
        v39 = v82;
        goto LABEL_61;
      }
      v40 = v127;
      v26 = v83;
      v39 = v82;
    }
    memcpy(v38, v40, 8 * v41);
    v38 = v105;
LABEL_61:
    LODWORD(v106) = v37;
LABEL_62:
    LODWORD(v128) = 0;
  }
  if (v39 == &v105)
    goto LABEL_73;
  if (v38 != v107)
  {
    if (*v39 != (void *)v78)
    {
      free(*v39);
      v38 = v105;
      LODWORD(v37) = v106;
    }
    *(_QWORD *)(v26 + 104) = v38;
    v77 = HIDWORD(v106);
    *(_DWORD *)(v26 + 112) = v37;
    *(_DWORD *)(v26 + 116) = v77;
    v105 = v107;
    HIDWORD(v106) = 0;
    goto LABEL_72;
  }
  v42 = *(unsigned int *)(v26 + 112);
  if (v42 >= v37)
  {
    if ((_DWORD)v37)
      memmove(*v82, v107, 8 * v37);
    *(_DWORD *)(v83 + 112) = v37;
    goto LABEL_72;
  }
  if (*(_DWORD *)(v26 + 116) < v37)
  {
    *(_DWORD *)(v26 + 112) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v39, v78, v37, 8);
  }
  else if ((_DWORD)v42)
  {
    memmove(*v39, v107, 8 * v42);
    goto LABEL_69;
  }
  v42 = 0;
LABEL_69:
  if (v42 != v106)
    memcpy((char *)*v39 + 8 * v42, (char *)v105 + 8 * v42, 8 * v106 - 8 * v42);
  *(_DWORD *)(v26 + 112) = v37;
LABEL_72:
  LODWORD(v106) = 0;
  v38 = v105;
LABEL_73:
  if (v38 != v107)
    free(v38);
  if (v90 == v89)
    v43 = (uint64_t *)((char *)&v91 + 4);
  else
    v43 = &v91;
  v44 = *(unsigned int *)v43;
  if ((_DWORD)v44)
  {
    v52 = 8 * v44;
    v45 = (unint64_t *)v90;
    while (*v45 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v45;
      v52 -= 8;
      if (!v52)
        goto LABEL_89;
    }
  }
  else
  {
    v45 = (unint64_t *)v90;
  }
  v46 = (unint64_t *)&v90[8 * v44];
  if (v45 == v46)
  {
LABEL_89:
    v53 = 0;
    v54 = 0;
    v55 = 0;
    goto LABEL_97;
  }
  v47 = 0;
  v48 = v45;
LABEL_82:
  v49 = v47 + 1;
  v50 = v48 + 1;
  while (v50 != v46)
  {
    v51 = *v50++;
    if (v51 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v48 = v50 - 1;
      ++v47;
      goto LABEL_82;
    }
  }
  if (v47 >= 0x1FFFFFFFFFFFFFFFLL)
LABEL_165:
    abort();
  v53 = (unint64_t *)operator new(8 * v49);
  v55 = &v53[v49];
  v56 = *v45;
  v57 = v53;
LABEL_92:
  *v57 = v56;
  v58 = v45 + 1;
  while (v58 != v46)
  {
    v59 = *v58++;
    v56 = v59;
    if (v59 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      ++v57;
      v45 = v58 - 1;
      goto LABEL_92;
    }
  }
  v54 = v57 + 1;
LABEL_97:
  v60 = *(void **)(v83 + 208);
  if (v60)
  {
    *(_QWORD *)(v83 + 216) = v60;
    operator delete(v60);
  }
  v61 = 126 - 2 * __clz(v54 - v53);
  *(_QWORD *)(v83 + 208) = v53;
  *(_QWORD *)(v83 + 216) = v54;
  *(_QWORD *)(v83 + 224) = v55;
  if (v54 == v53)
    v62 = 0;
  else
    v62 = v61;
  sub_1C5EEBE8C(v53, v54, v62, 1);
  if (v127 != v129)
    free(v127);
  if ((v122 & 1) == 0)
    MEMORY[0x1CAA32FB4](v123.i64[0], 8);
  if (v119 != v121)
    free(v119);
  if ((v114 & 1) == 0)
    MEMORY[0x1CAA32FB4](v115.i64[0], 8);
  MEMORY[0x1CAA32FB4](v87[0], 8);
  if (v90 != v89)
    free(v90);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  MEMORY[0x1CAA32FB4](v94[0], 8);
  sub_1C6176BF8(v98);
  if (v80)
    operator delete(v80);
}

BOOL sub_1C5EE8260(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 72);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v12 = v7;
      result = sub_1C56D2D50(v3, &v12);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a2 + 224);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      v12 = v11;
      result = sub_1C56D2D50(v3 + 152, &v12);
      v10 -= 8;
    }
    while (v10);
  }
  *(_QWORD *)(v3 + 304) += *(_QWORD *)(a2 + 304);
  return result;
}

void sub_1C5EE8304(uint64_t a1, unint64_t a2, unint64_t **a3, llvm::SmallPtrSetImplBase *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  const char *v46;
  char v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  const char *v57;
  char v58;
  unint64_t v59;
  int64x2_t v60;
  void *v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  int64x2_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[9];
  uint64_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  void *v90;
  uint64_t v91;
  _BYTE v92[64];
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  __int16 v96;
  _QWORD *v97;
  __int128 v98;
  _QWORD v99[2];
  void *v100;
  uint64_t v101;
  _BYTE v102[72];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD v109[19];
  _QWORD v110[6];

  v110[4] = *MEMORY[0x1E0C80C00];
  v75 = a2;
  sub_1C4774094(a4, *(_QWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 16) == 83)
  {
    v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = *(_QWORD *)(a2 - 8);
      v14 = v13 & 0x7FFFFFF;
      if (!v14)
        goto LABEL_8;
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = a2 - 32 * v14;
      if (!v14)
        goto LABEL_8;
    }
    v16 = (uint64_t *)(v15 + 32 * *(unsigned int *)(a2 + 60));
    v17 = 8 * v14;
    do
    {
      v18 = *v16++;
      sub_1C4774094(a4, v18);
      v17 -= 8;
    }
    while (v17);
  }
LABEL_8:
  v19 = *a3;
  v20 = a3[1];
  if (v20 != *a3)
  {
    v21 = v20 - *a3;
    do
    {
      v22 = v21 >> 1;
      v23 = &v19[v21 >> 1];
      v25 = *v23;
      v24 = v23 + 1;
      v21 += ~(v21 >> 1);
      if (v25 < a2)
        v19 = v24;
      else
        v21 = v22;
    }
    while (v21);
  }
  if (v19 != v20 && *v19 <= a2)
  {
    sub_1C5EEB454(a1, (uint64_t *)a2);
    return;
  }
  v72 = a7;
  v77 = 1;
  v78 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v79 = v78;
  v80 = v78;
  v81 = v78;
  v82 = v84;
  v83 = 0x800000000;
  v85 = 1;
  v86 = v78;
  v87 = v78;
  v88 = v78;
  v89 = v78;
  v90 = v92;
  v91 = 0x800000000;
  v93 = 0;
  *(_DWORD *)sub_1C56D136C(a5, (uint64_t *)&v75) = 1;
  v26 = (uint64_t *)v75;
  v27 = *(_DWORD *)(v75 + 20);
  if ((v27 & 0x40000000) != 0)
  {
    v29 = *(uint64_t ***)(v75 - 8);
    v28 = v27 & 0x7FFFFFF;
  }
  else
  {
    v28 = v27 & 0x7FFFFFF;
    v29 = (uint64_t **)(v75 - 32 * v28);
  }
  v30 = a6;
  if (v28)
  {
    v71 = a1;
    v31 = 32 * v28;
    v32 = v72;
    while (1)
    {
      v33 = *v29;
      v34 = *((unsigned __int8 *)*v29 + 16);
      if (v34 <= 0x1B)
        v35 = 0;
      else
        v35 = (uint64_t)*v29;
      v76 = v35;
      if (v35)
      {
        v36 = sub_1C5EEB4CC(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), v35);
        if (v36 == 1)
        {
          v37 = (_DWORD *)sub_1C56D136C(a5, &v76);
          v38 = 3;
LABEL_42:
          *v37 = v38;
          goto LABEL_43;
        }
        if (!v36)
        {
          sub_1C5EE8304(&v94, v35, a3, a4, a5, v30, v32);
          sub_1C5EE8260((_BOOL8)&v77, (uint64_t)&v94);
          if (v106 != &v108)
            free(v106);
          if ((v102[64] & 1) == 0)
            MEMORY[0x1CAA32FB4](v103, 8);
          if (v100 != v102)
            free(v100);
          if ((v94 & 1) == 0)
            MEMORY[0x1CAA32FB4](v95, 8);
          v37 = (_DWORD *)sub_1C56D136C(a5, &v76);
          v38 = 2;
          goto LABEL_42;
        }
      }
      else
      {
        if (v34 == 22)
        {
          v39 = *(unsigned __int8 *)(v75 + 16) - 29 >= 0xB;
LABEL_38:
          if (v39)
            sub_1C5EEB530((uint64_t)&v77, v33);
          goto LABEL_43;
        }
        if (v34 > 3)
        {
          v39 = v34 >= 0x15;
          if (v34 == 21)
          {
            v94 = v33;
            sub_1C56D2D50((uint64_t)&v77, (uint64_t *)&v94);
            v94 = v33;
            sub_1C56D2D50((uint64_t)&v85, (uint64_t *)&v94);
            v40 = *(_QWORD *)(v33[3] + 40) + 272;
            v41 = *v33;
            sub_1C4768AD0(v40, *v33);
            v43 = v42;
            v45 = v44 == 1;
            llvm::DataLayout::getAlignment(v40, v41);
            v48 = v47;
            if (v45)
            v93 += ((1 << v48) + ((unint64_t)(v43 + 7) >> 3) - 1) & -(1 << v48);
            v30 = a6;
            v32 = v72;
            goto LABEL_43;
          }
          goto LABEL_38;
        }
        v94 = v33;
        sub_1C4D954B8(v32, &v94);
      }
LABEL_43:
      v29 += 4;
      v31 -= 32;
      if (!v31)
      {
        v26 = (uint64_t *)v75;
        a1 = v71;
        break;
      }
    }
  }
  if (sub_1C5EEB4CC(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), (uint64_t)v26) != 3)
  {
    sub_1C509CEFC(v30, &v75);
    v49 = (uint64_t *)v75;
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 40) + 56) + 40) + 272;
    LOWORD(v95) = 0;
    v96 = 0;
    v97 = v99;
    v98 = xmmword_1C6464ED0;
    v99[1] = &v101;
    v100 = (void *)0x1000000000;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = v109;
    v108 = 0x800000000;
    v109[16] = 0;
    v109[17] = v110;
    v109[18] = 0x800000000;
    sub_1C48815D8((uint64_t)&v94, v50);
    v51 = *v49;
    v52 = *(unsigned __int8 *)(*v49 + 8);
    if (v52 > 0x11)
      goto LABEL_90;
    if (((1 << v52) & 0xAC7F) != 0)
    {
LABEL_55:
      sub_1C4768AD0((uint64_t)&v94, v51);
      v54 = (unint64_t)(v53 + 7) >> 3;
      v56 = v55 == 1;
      llvm::DataLayout::getAlignment((uint64_t)&v94, v51);
      v59 = ((1 << v58) + v54 - 1) & -(1 << v58);
      if (v56)
      if (v59 < v93)
      {
        sub_1C5EEB608(&v85);
        LODWORD(v91) = 0;
        v76 = (uint64_t)v49;
        sub_1C56D2D50((uint64_t)&v85, &v76);
        v93 = v59;
      }
LABEL_59:
      llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v94);
      *(_QWORD *)a1 = 1;
      v60 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      *(int64x2_t *)(a1 + 8) = v60;
      *(int64x2_t *)(a1 + 24) = v60;
      *(int64x2_t *)(a1 + 40) = v60;
      v74 = v60;
      *(int64x2_t *)(a1 + 56) = v60;
      sub_1C5B4C3DC((unsigned int *)a1, (unsigned int *)&v77);
      v61 = (void *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = a1 + 88;
      *(_QWORD *)(a1 + 80) = 0x800000000;
      v62 = v83;
      if (!(_DWORD)v83 || &v77 == (uint64_t *)a1)
      {
LABEL_67:
        *(_QWORD *)(a1 + 152) = 1;
        *(int64x2_t *)(a1 + 160) = v74;
        *(int64x2_t *)(a1 + 176) = v74;
        *(int64x2_t *)(a1 + 192) = v74;
        *(int64x2_t *)(a1 + 208) = v74;
        sub_1C5B4C3DC((unsigned int *)(a1 + 152), (unsigned int *)&v85);
        v65 = (void *)(a1 + 240);
        *(_QWORD *)(a1 + 224) = a1 + 240;
        *(_QWORD *)(a1 + 232) = 0x800000000;
        v66 = v91;
        if (!(_DWORD)v91 || &v77 == (uint64_t *)a1)
          goto LABEL_75;
        if (v90 != v92)
        {
          *(_QWORD *)(a1 + 224) = v90;
          v70 = HIDWORD(v91);
          *(_DWORD *)(a1 + 232) = v66;
          *(_DWORD *)(a1 + 236) = v70;
          v90 = v92;
          HIDWORD(v91) = 0;
          goto LABEL_74;
        }
        if (v91 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 224, a1 + 240, v91, 8);
          v68 = v91;
          if (!(_DWORD)v91)
            goto LABEL_73;
          v67 = v90;
          v65 = *(void **)(a1 + 224);
        }
        else
        {
          v67 = v92;
          v68 = v91;
        }
        memcpy(v65, v67, 8 * v68);
LABEL_73:
        *(_DWORD *)(a1 + 232) = v66;
LABEL_74:
        LODWORD(v91) = 0;
LABEL_75:
        *(_QWORD *)(a1 + 304) = v93;
        goto LABEL_76;
      }
      if (v82 != v84)
      {
        *(_QWORD *)(a1 + 72) = v82;
        v69 = HIDWORD(v83);
        *(_DWORD *)(a1 + 80) = v62;
        *(_DWORD *)(a1 + 84) = v69;
        v82 = v84;
        HIDWORD(v83) = 0;
        goto LABEL_66;
      }
      if (v83 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v83, 8);
        v64 = v83;
        if (!(_DWORD)v83)
          goto LABEL_65;
        v63 = v82;
        v61 = *(void **)(a1 + 72);
      }
      else
      {
        v63 = v84;
        v64 = v83;
      }
      memcpy(v61, v63, 8 * v64);
LABEL_65:
      *(_DWORD *)(a1 + 80) = v62;
LABEL_66:
      LODWORD(v83) = 0;
      goto LABEL_67;
    }
    if (((1 << v52) & 0x30000) == 0)
    {
LABEL_90:
      if ((v52 & 0xFE) != 0x12 && v52 != 21)
        goto LABEL_59;
    }
    if (!llvm::Type::isSizedDerivedType(*v49, 0))
      goto LABEL_59;
    goto LABEL_55;
  }
  sub_1C5EEB454(a1, v26);
LABEL_76:
  if (v90 != v92)
    free(v90);
  if ((v85 & 1) == 0)
    MEMORY[0x1CAA32FB4](v86.i64[0], 8);
  if (v82 != v84)
    free(v82);
  if ((v77 & 1) == 0)
    MEMORY[0x1CAA32FB4](v78.i64[0], 8);
}

void llvm::ComputationExtractor::getArgAndValueDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 3);
    v6 = &v5[v3];
    do
    {
      v7 = *v5;
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v8)
      {
        v10 = *a2;
        v11 = (v4 - *a2) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v7;
        v9 = v16 + 8;
        if (v4 != v10)
        {
          do
          {
            v17 = *((_QWORD *)v4 - 1);
            v4 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v4 != v10);
          v4 = *a2;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[8 * v14];
        if (v4)
          operator delete(v4);
      }
      else
      {
        *(_QWORD *)v4 = v7;
        v9 = v4 + 8;
      }
      a2[1] = v9;
      ++v5;
      v4 = v9;
    }
    while (v5 != v6);
  }
}

void llvm::ComputationExtractor::getGlobalDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 23);
  v3 = (uint64_t *)*((_QWORD *)this + 24);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        v12 = v7 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            sub_1C4764EE4();
          v14 = (char *)operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void llvm::ComputationExtractor::getNarrowestDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 13);
    v6 = &v5[v3];
    do
    {
      v7 = *v5;
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v8)
      {
        v10 = *a2;
        v11 = (v4 - *a2) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v7;
        v9 = v16 + 8;
        if (v4 != v10)
        {
          do
          {
            v17 = *((_QWORD *)v4 - 1);
            v4 -= 8;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v4 != v10);
          v4 = *a2;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[8 * v14];
        if (v4)
          operator delete(v4);
      }
      else
      {
        *(_QWORD *)v4 = v7;
        v9 = v4 + 8;
      }
      a2[1] = v9;
      ++v5;
      v4 = v9;
    }
    while (v5 != v6);
  }
}

void llvm::ComputationExtractor::extractFunction(int32x2_t ******a1@<X0>, uint64_t **a2@<X1>, int32x2_t *****a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int32x2_t ******v12;
  uint64_t ****v13;
  uint64_t ****v14;
  unsigned int v15;
  int32x2_t ****v16;
  uint64_t **v17;
  uint64_t **v18;
  unsigned int v19;
  llvm::PointerType *v20;
  char *v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int32x2_t *****v26;
  int32x2_t ***v27;
  int32x2_t **v28;
  _DWORD *v29;
  int32x2_t *****v30;
  int32x2_t *****v31;
  llvm::Instruction **v32;
  _DWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int32x2_t ****v37;
  int32x2_t ****v38;
  _QWORD *v40;
  unint64_t v42;
  int32x2_t ****v43;
  int32x2_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int32x2_t *****v49;
  int32x2_t ****v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  llvm::Value *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unsigned __int8 **v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  int32x2_t ****v68;
  int32x2_t ****v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int32x2_t ****v76;
  _QWORD *v78;
  unint64_t v79;
  int32x2_t ****v80;
  int32x2_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int32x2_t *****v86;
  int32x2_t ****v87;
  int v88;
  int v89;
  uint64_t v90;
  char *v91;
  char *v92;
  llvm::Value *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unsigned __int8 **v99;
  int v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int32x2_t *****v105;
  int32x2_t ***v106;
  uint64_t **v107;
  uint64_t v108;
  uint64_t v109;
  int32x2_t ****v110;
  _QWORD *v112;
  unint64_t v113;
  int32x2_t ****v114;
  int32x2_t *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int32x2_t *****v120;
  int32x2_t ****v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  int32x2_t *v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  int v136;
  int v137;
  int32x2_t ****v138;
  _QWORD *v140;
  unint64_t v141;
  int32x2_t ****v142;
  int32x2_t *v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  int32x2_t *****v148;
  int32x2_t ****v149;
  int v150;
  int v151;
  int32x2_t ****v152;
  unint64_t v153;
  unint64_t *v154;
  uint64_t v155;
  int32x2_t *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  llvm::Instruction *v165;
  int32x2_t ****v166;
  _QWORD *v168;
  unint64_t v170;
  int32x2_t ****v171;
  int32x2_t *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int32x2_t *****v177;
  int32x2_t ****v178;
  int v179;
  int v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  _QWORD *i;
  _QWORD *v189;
  unsigned __int8 *v190;
  unsigned __int8 *v191;
  unsigned __int8 **v192;
  unsigned __int8 **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  llvm::Instruction **v198;
  llvm::Instruction *v199;
  int v200;
  int v201;
  llvm::Instruction *v202;
  uint64_t v203;
  unsigned __int8 *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  unsigned __int8 **v208;
  int v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  int32x2_t ****v216;
  int32x2_t *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  int32x2_t *****v222;
  int32x2_t ****v223;
  int v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  uint64_t v229;
  int32x2_t *v230;
  unint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t *v239;
  int32x2_t ****v240;
  int32x2_t *****v241;
  int32x2_t *****v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  int32x2_t *****v246;
  unint64_t v247;
  int32x2_t *v248;
  int32x2_t v249;
  uint64_t v250;
  uint64_t v251;
  int32x2_t *****v252;
  int32x2_t ****v253;
  int v254;
  int v255;
  int32x2_t ****v256;
  uint64_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  _QWORD *v263;
  unint64_t v264;
  int32x2_t ****v265;
  int32x2_t *v266;
  unint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  int32x2_t *****v271;
  int32x2_t ****v272;
  int v273;
  int v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  uint64_t v278;
  int32x2_t *v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  int v286;
  int v287;
  unsigned __int8 *v288;
  uint64_t ****v289;
  uint64_t v290;
  uint64_t ***v291;
  llvm::LLVMContext *v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  unsigned int v299;
  _QWORD *v300;
  uint64_t *v301;
  uint64_t v302;
  char *v303;
  char *v304;
  llvm::Value *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  int32x2_t ****v309;
  _QWORD *v311;
  llvm::Type *v312;
  unint64_t v313;
  int32x2_t ****v314;
  int32x2_t *v315;
  unint64_t v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  int32x2_t *****v320;
  int32x2_t ****v321;
  int v322;
  int v323;
  llvm::Value *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int32x2_t ****v328;
  _QWORD *v330;
  unint64_t v332;
  int32x2_t ****v333;
  int32x2_t *v334;
  unint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  int32x2_t *****v339;
  int32x2_t ****v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  llvm::raw_ostream *v345;
  llvm::LLVMContext *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t *v349;
  _QWORD *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t *v355;
  uint64_t v356;
  int32x2_t *v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  int v364;
  int v365;
  unint64_t v367;
  unint64_t *v368;
  uint64_t v369;
  int32x2_t *v370;
  unint64_t v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  char *v379;
  char *v380;
  unsigned __int8 **v381;
  int v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  unsigned __int8 *v385;
  llvm::UndefValue *v386;
  uint64_t *v388;
  char *v389;
  llvm::Function *v390;
  int32x2_t ******v391;
  uint64_t v392;
  int v393;
  llvm::Instruction **v394;
  _DWORD *v395;
  char *v396;
  char *v397;
  uint64_t v398;
  int32x2_t ***v399;
  char v400[16];
  unsigned int v401;
  uint64_t v402[3];
  char v403;
  char *v404;
  uint64_t v405;
  unint64_t *v406;
  int32x2_t ****v407;
  _QWORD *v408;
  unsigned __int8 *v409;
  void *v410;
  uint64_t v411;
  _WORD v412[64];
  void *v413;
  uint64_t v414;
  _BYTE v415[32];
  uint64_t v416;
  _QWORD *v417;
  uint64_t *v418;
  void **v419;
  void **v420;
  uint64_t v421;
  int v422;
  __int16 v423;
  char v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  void *v428;
  int32x2_t ****v429;
  uint64_t v430;
  _QWORD v431[18];

  v12 = a1;
  v431[16] = *MEMORY[0x1E0C80C00];
  v388 = *a2;
  v429 = (int32x2_t ****)v431;
  v430 = 0x1000000000;
  v13 = (uint64_t ****)*a1;
  v14 = (uint64_t ****)a1[1];
  if ((unint64_t)((char *)v14 - (char *)*a1) < 9)
  {
    v17 = **v13;
  }
  else
  {
    if (v13 == v14)
    {
      v15 = 0;
      v16 = (int32x2_t ****)v431;
    }
    else
    {
      v15 = 0;
      do
      {
        v18 = **v13;
        if (v15 >= HIDWORD(v430))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v429, (uint64_t)v431, v15 + 1, 8);
          v15 = v430;
        }
        v429[v15] = (int32x2_t ***)v18;
        v15 = v430 + 1;
        LODWORD(v430) = v430 + 1;
        ++v13;
      }
      while (v13 != v14);
      v16 = v429;
    }
    v17 = (uint64_t **)llvm::StructType::get(v388, (uint64_t)v16, v15, 0);
  }
  v19 = 0;
  LODWORD(v430) = 0;
  v393 = a4;
  if (a4)
  {
    v19 = 0;
    v104 = 8 * a4;
    v105 = a3;
    do
    {
      v106 = **v105;
      if (v19 >= HIDWORD(v430))
      {
        v107 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v429, (uint64_t)v431, v19 + 1, 8);
        v17 = v107;
        v19 = v430;
      }
      v429[v19] = v106;
      v19 = v430 + 1;
      LODWORD(v430) = v430 + 1;
      ++v105;
      v104 -= 8;
    }
    while (v104);
  }
  v386 = (llvm::UndefValue *)v17;
  v20 = (llvm::PointerType *)llvm::FunctionType::get(v17, (uint64_t *)v429, v19, 0);
  v21 = "extracted_function";
  if (a6)
    v21 = a5;
  v22 = 18;
  v412[8] = 261;
  if (a6)
    v22 = a6;
  v410 = v21;
  v411 = v22;
  v23 = operator new(0x80uLL);
  v23[7] = v23[7] & 0x38000000 | 0x40000000;
  v395 = v23;
  *(_QWORD *)v23 = 0;
  v390 = (llvm::Function *)(v23 + 2);
  llvm::Function::Function((uint64_t *)v23 + 1, v20, 7, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v410, (uint64_t)a2);
  v413 = v415;
  v414 = 0x200000000;
  v418 = v388;
  v419 = &v427;
  v420 = &v428;
  v421 = 0;
  v422 = 0;
  v423 = 512;
  v424 = 7;
  v416 = 0;
  v417 = 0;
  v426 = 0;
  v425 = 0;
  v24 = (unint64_t)((char *)v12[30] - (char *)v12[29]) >> 3;
  v427 = &unk_1E8167888;
  v428 = &unk_1E8167A08;
  sub_1C55AF7E4((char *)v400, v24);
  LOBYTE(v402) = 0;
  v403 = 0;
  v410 = v412;
  v411 = 0x1000000000;
  v25 = (char *)v12[30] - (char *)v12[29];
  if ((unint64_t)v25 > 0x80)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v410, (uint64_t)v412, v25 >> 3, 8);
  v391 = v12;
  v392 = 0;
  v399 = 0;
  v26 = v12[26];
  if (v26 != v12[27])
  {
    v399 = (*v26)[7];
    v27 = v399 + 9;
    v28 = v399[10];
    if (v28 == (int32x2_t **)(v399 + 9))
    {
      v392 = 0;
      goto LABEL_21;
    }
    v392 = 0;
    v239 = (uint64_t *)(v395 + 20);
    while (1)
    {
      if (v28)
        v240 = (int32x2_t ****)(v28 - 3);
      else
        v240 = 0;
      v241 = v12[26];
      v242 = v12[27];
      if (v242 != v241)
      {
        v243 = v242 - v241;
        do
        {
          v244 = v243 >> 1;
          v245 = (unint64_t *)&v241[v243 >> 1];
          v247 = *v245;
          v246 = (int32x2_t *****)(v245 + 1);
          v243 += ~(v243 >> 1);
          if (v247 < (unint64_t)v240)
            v241 = v246;
          else
            v243 = v244;
        }
        while (v243);
      }
      if (v241 != v242 && v240 >= *v241)
        break;
LABEL_393:
      v28 = (int32x2_t **)v28[1];
      if (v28 == (int32x2_t **)v27)
        goto LABEL_21;
    }
    if ((*((_BYTE *)v240 + 23) & 0x10) == 0)
    {
      v257 = 0;
      v258 = (unsigned __int8 *)&byte_1C871356D;
LABEL_369:
      LOWORD(v408) = 261;
      v404 = (char *)v258;
      v405 = v257;
      v260 = operator new();
      *(_QWORD *)v260 = *v388 + 1600;
      *(_QWORD *)(v260 + 8) = 0;
      v261 = *(_DWORD *)(v260 + 20) & 0xC0000000;
      *(_DWORD *)(v260 + 16) = 22;
      *(_DWORD *)(v260 + 20) = v261;
      *(_QWORD *)(v260 + 24) = 0;
      *(_QWORD *)(v260 + 32) = 0;
      *(_QWORD *)(v260 + 40) = v260 + 40;
      *(_QWORD *)(v260 + 48) = v260 + 40;
      *(_QWORD *)(v260 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v239, (_QWORD *)v260);
      v262 = *v239;
      *(_QWORD *)(v260 + 32) = v239;
      *(_QWORD *)(v260 + 24) = v262;
      *(_QWORD *)(v262 + 8) = v260 + 24;
      *v239 = v260 + 24;
      v392 = v260;
      llvm::Value::setName((uint64_t ***)v260, (uint64_t)&v404);
      v405 = 2;
      v406 = 0;
      v407 = v240;
      if (v240 != (int32x2_t ****)-8192 && v240 != (int32x2_t ****)-4096 && v240)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
      v404 = (char *)&unk_1E814DA10;
      v408 = v400;
      v263 = sub_1C52E2ED8((uint64_t)v400, &v404);
      v12 = v391;
      if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
      {
        v264 = v405 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
        if (v406)
        {
          *v406 = *v406 & 7 | v264;
        }
        else
        {
          v265 = v407;
          v266 = ***v407;
          v267 = (unint64_t)v266[303];
          if (v267 <= v264)
          {
            v268 = v266[305].u32[0];
            if (v267 + 16 * v268 > v264)
            {
              v269 = v268 - 1;
              LODWORD(v270) = v269 & ((v407 >> 4) ^ (v407 >> 9));
              v271 = (int32x2_t *****)(v267 + 16 * v270);
              v272 = *v271;
              if (v407 == *v271)
              {
LABEL_384:
                *v271 = (int32x2_t ****)-8192;
                v266[304] = vadd_s32(v266[304], (int32x2_t)0x1FFFFFFFFLL);
                v265 = v407;
              }
              else
              {
                v273 = 1;
                while (v272 != (int32x2_t ****)-4096)
                {
                  v274 = v270 + v273++;
                  v270 = v274 & v269;
                  v272 = *(int32x2_t *****)(v267 + 16 * v270);
                  if (v407 == v272)
                  {
                    v271 = (int32x2_t *****)(v267 + 16 * v270);
                    goto LABEL_384;
                  }
                }
              }
              *((_BYTE *)v265 + 17) &= ~1u;
            }
          }
        }
      }
      v275 = v263[7];
      if (v275 != v392)
      {
        if (v275 && v275 != -8192 && v275 != -4096)
        {
          v276 = v263[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v276 = v263[6];
          v277 = (unint64_t *)v263[6];
          if (v277)
          {
            *v277 = *v277 & 7 | v276;
          }
          else
          {
            v278 = v263[7];
            v279 = ***(int32x2_t ****)v278;
            v280 = (unint64_t)v279[303];
            if (v280 <= v276)
            {
              v281 = v279[305].u32[0];
              if (v280 + 16 * v281 > v276)
              {
                v282 = v281 - 1;
                LODWORD(v283) = v282 & ((v278 >> 4) ^ (v278 >> 9));
                v284 = (uint64_t *)(v280 + 16 * v283);
                v285 = *v284;
                if (v278 == *v284)
                {
LABEL_405:
                  *v284 = -8192;
                  v279[304] = vadd_s32(v279[304], (int32x2_t)0x1FFFFFFFFLL);
                  v278 = v263[7];
                }
                else
                {
                  v286 = 1;
                  while (v285 != -4096)
                  {
                    v287 = v283 + v286++;
                    v283 = v287 & v282;
                    v285 = *(_QWORD *)(v280 + 16 * v283);
                    if (v278 == v285)
                    {
                      v284 = (uint64_t *)(v280 + 16 * v283);
                      goto LABEL_405;
                    }
                  }
                }
                *(_BYTE *)(v278 + 17) &= ~1u;
              }
            }
          }
        }
        v263[7] = v392;
        if (v392 != -8192 && v392 != -4096 && v392)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v263 + 5));
      }
      goto LABEL_393;
    }
    v248 = ***v240;
    v249 = v248[19];
    v250 = v248[21].u32[0];
    if ((_DWORD)v250)
    {
      LODWORD(v251) = (v250 - 1) & ((v240 >> 4) ^ (v240 >> 9));
      v252 = (int32x2_t *****)(*(_QWORD *)&v249 + 16 * v251);
      v253 = *v252;
      if (*v252 == v240)
      {
LABEL_368:
        v256 = v252[1];
        v259 = (uint64_t)*v256;
        v258 = (unsigned __int8 *)(v256 + 2);
        v257 = v259;
        goto LABEL_369;
      }
      v254 = 1;
      while (v253 != (int32x2_t ****)-4096)
      {
        v255 = v251 + v254++;
        v251 = v255 & (v250 - 1);
        v253 = *(int32x2_t *****)(*(_QWORD *)&v249 + 16 * v251);
        if (v253 == v240)
        {
          v252 = (int32x2_t *****)(*(_QWORD *)&v249 + 16 * v251);
          goto LABEL_368;
        }
      }
    }
    v252 = (int32x2_t *****)(*(_QWORD *)&v249 + 16 * v250);
    goto LABEL_368;
  }
LABEL_21:
  v29 = v395;
  if (v393)
  {
    v108 = 0;
    do
    {
      if ((*((_WORD *)v29 + 13) & 1) != 0)
        llvm::Function::BuildLazyArguments(v390);
      v109 = *((_QWORD *)v29 + 12);
      v110 = a3[v108];
      v405 = 2;
      v406 = 0;
      v407 = v110;
      if (v110 != (int32x2_t ****)-8192 && v110 != (int32x2_t ****)-4096 && v110 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
      v404 = (char *)&unk_1E814DA10;
      v408 = v400;
      v112 = sub_1C52E2ED8((uint64_t)v400, &v404);
      if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
      {
        v113 = v405 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
        if (v406)
        {
          *v406 = *v406 & 7 | v113;
        }
        else
        {
          v114 = v407;
          v115 = ***v407;
          v116 = (unint64_t)v115[303];
          if (v116 <= v113)
          {
            v117 = v115[305].u32[0];
            if (v116 + 16 * v117 > v113)
            {
              v118 = v117 - 1;
              LODWORD(v119) = v118 & ((v407 >> 4) ^ (v407 >> 9));
              v120 = (int32x2_t *****)(v116 + 16 * v119);
              v121 = *v120;
              if (v407 == *v120)
              {
LABEL_167:
                *v120 = (int32x2_t ****)-8192;
                v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                v114 = v407;
              }
              else
              {
                v122 = 1;
                while (v121 != (int32x2_t ****)-4096)
                {
                  v123 = v119 + v122++;
                  v119 = v123 & v118;
                  v121 = *(int32x2_t *****)(v116 + 16 * v119);
                  if (v407 == v121)
                  {
                    v120 = (int32x2_t *****)(v116 + 16 * v119);
                    goto LABEL_167;
                  }
                }
              }
              *((_BYTE *)v114 + 17) &= ~1u;
            }
          }
        }
      }
      v124 = v109 + 40 * v108;
      v125 = v112[7];
      v29 = v395;
      if (v125 != v124)
      {
        if (v125 && v125 != -8192 && v125 != -4096)
        {
          v126 = v112[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v126 = v112[6];
          v127 = (unint64_t *)v112[6];
          if (v127)
          {
            *v127 = *v127 & 7 | v126;
          }
          else
          {
            v128 = v112[7];
            v129 = ***(int32x2_t ****)v128;
            v130 = (unint64_t)v129[303];
            if (v130 <= v126)
            {
              v131 = v129[305].u32[0];
              if (v130 + 16 * v131 > v126)
              {
                v132 = v131 - 1;
                LODWORD(v133) = v132 & ((v128 >> 4) ^ (v128 >> 9));
                v134 = (uint64_t *)(v130 + 16 * v133);
                v135 = *v134;
                if (v128 == *v134)
                {
LABEL_188:
                  *v134 = -8192;
                  v129[304] = vadd_s32(v129[304], (int32x2_t)0x1FFFFFFFFLL);
                  v128 = v112[7];
                }
                else
                {
                  v136 = 1;
                  while (v135 != -4096)
                  {
                    v137 = v133 + v136++;
                    v133 = v137 & v132;
                    v135 = *(_QWORD *)(v130 + 16 * v133);
                    if (v128 == v135)
                    {
                      v134 = (uint64_t *)(v130 + 16 * v133);
                      goto LABEL_188;
                    }
                  }
                }
                *(_BYTE *)(v128 + 17) &= ~1u;
              }
            }
          }
        }
        v112[7] = v124;
        if (v124 != -8192 && v124 != -4096 && v124)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v112 + 5));
      }
      ++v108;
    }
    while (v108 != v393);
  }
  v30 = *v391;
  v31 = v391[1];
  if (*v391 != v31)
  {
    do
    {
      v138 = *v30;
      if (*((unsigned __int8 *)*v30 + 16) <= 0x14u)
      {
        v405 = 2;
        v406 = 0;
        v407 = v138;
        if (v138 != (int32x2_t ****)-8192 && v138 != (int32x2_t ****)-4096 && v138 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
        v404 = (char *)&unk_1E814DA10;
        v408 = v400;
        v140 = sub_1C52E2ED8((uint64_t)v400, &v404);
        if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
        {
          v141 = v405 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
          if (v406)
          {
            *v406 = *v406 & 7 | v141;
          }
          else
          {
            v142 = v407;
            v143 = ***v407;
            v144 = (unint64_t)v143[303];
            if (v144 <= v141)
            {
              v145 = v143[305].u32[0];
              if (v144 + 16 * v145 > v141)
              {
                v146 = v145 - 1;
                LODWORD(v147) = v146 & ((v407 >> 4) ^ (v407 >> 9));
                v148 = (int32x2_t *****)(v144 + 16 * v147);
                v149 = *v148;
                if (v407 == *v148)
                {
LABEL_209:
                  *v148 = (int32x2_t ****)-8192;
                  v143[304] = vadd_s32(v143[304], (int32x2_t)0x1FFFFFFFFLL);
                  v142 = v407;
                }
                else
                {
                  v150 = 1;
                  while (v149 != (int32x2_t ****)-4096)
                  {
                    v151 = v147 + v150++;
                    v147 = v151 & v146;
                    v149 = *(int32x2_t *****)(v144 + 16 * v147);
                    if (v407 == v149)
                    {
                      v148 = (int32x2_t *****)(v144 + 16 * v147);
                      goto LABEL_209;
                    }
                  }
                }
                *((_BYTE *)v142 + 17) &= ~1u;
              }
            }
          }
        }
        v152 = (int32x2_t ****)v140[7];
        if (v152 != v138)
        {
          if (v152 && v152 != (int32x2_t ****)-8192 && v152 != (int32x2_t ****)-4096)
          {
            v153 = v140[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v153 = v140[6];
            v154 = (unint64_t *)v140[6];
            if (v154)
            {
              *v154 = *v154 & 7 | v153;
            }
            else
            {
              v155 = v140[7];
              v156 = ***(int32x2_t ****)v155;
              v157 = (unint64_t)v156[303];
              if (v157 <= v153)
              {
                v158 = v156[305].u32[0];
                if (v157 + 16 * v158 > v153)
                {
                  v159 = v158 - 1;
                  LODWORD(v160) = v159 & ((v155 >> 4) ^ (v155 >> 9));
                  v161 = (uint64_t *)(v157 + 16 * v160);
                  v162 = *v161;
                  if (v155 == *v161)
                  {
LABEL_230:
                    *v161 = -8192;
                    v156[304] = vadd_s32(v156[304], (int32x2_t)0x1FFFFFFFFLL);
                    v155 = v140[7];
                  }
                  else
                  {
                    v163 = 1;
                    while (v162 != -4096)
                    {
                      v164 = v160 + v163++;
                      v160 = v164 & v159;
                      v162 = *(_QWORD *)(v157 + 16 * v160);
                      if (v155 == v162)
                      {
                        v161 = (uint64_t *)(v157 + 16 * v160);
                        goto LABEL_230;
                      }
                    }
                  }
                  *(_BYTE *)(v155 + 17) &= ~1u;
                }
              }
            }
          }
          v140[7] = v138;
          if (v138 != (int32x2_t ****)-8192 && v138 != (int32x2_t ****)-4096 && v138)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v140 + 5));
        }
      }
      ++v30;
    }
    while (v30 != v31);
  }
  v32 = (llvm::Instruction **)v391[29];
  v394 = (llvm::Instruction **)v391[30];
  if (v32 != v394)
  {
    while (1)
    {
      v165 = *v32;
      v166 = (int32x2_t ****)*((_QWORD *)*v32 + 5);
      v405 = 2;
      v406 = 0;
      v407 = v166;
      if (v166 != (int32x2_t ****)-8192 && v166 != (int32x2_t ****)-4096 && v166 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
      v404 = (char *)&unk_1E814DA10;
      v408 = v400;
      v168 = sub_1C52E2ED8((uint64_t)v400, &v404);
      if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407 != 0)
      {
        v170 = v405 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
        if (v406)
        {
          *v406 = *v406 & 7 | v170;
        }
        else
        {
          v171 = v407;
          v172 = ***v407;
          v173 = (unint64_t)v172[303];
          if (v173 <= v170)
          {
            v174 = v172[305].u32[0];
            if (v173 + 16 * v174 > v170)
            {
              v175 = v174 - 1;
              LODWORD(v176) = v175 & ((v407 >> 4) ^ (v407 >> 9));
              v177 = (int32x2_t *****)(v173 + 16 * v176);
              v178 = *v177;
              if (v407 == *v177)
              {
LABEL_252:
                *v177 = (int32x2_t ****)-8192;
                v172[304] = vadd_s32(v172[304], (int32x2_t)0x1FFFFFFFFLL);
                v171 = v407;
              }
              else
              {
                v179 = 1;
                while (v178 != (int32x2_t ****)-4096)
                {
                  v180 = v176 + v179++;
                  v176 = v180 & v175;
                  v178 = *(int32x2_t *****)(v173 + 16 * v176);
                  if (v407 == v178)
                  {
                    v177 = (int32x2_t *****)(v173 + 16 * v176);
                    goto LABEL_252;
                  }
                }
              }
              *((_BYTE *)v171 + 17) &= ~1u;
            }
          }
        }
      }
      v181 = v168[7];
      v184 = *(_QWORD **)(v181 + 40);
      v182 = (_QWORD *)(v181 + 40);
      v183 = v184;
      if (v184 == v182
        || (v183 ? (v185 = v183 - 3) : (v185 = 0), *((unsigned __int8 *)v185 + 16) - 29 > 0xA))
      {
        v416 = v168[7];
        v417 = v182;
      }
      else
      {
        v416 = v185[5];
        v417 = v185 + 3;
        v186 = (unsigned __int8 *)v185[6];
        v404 = (char *)v186;
        if (v186)
        {
          llvm::MetadataTracking::track((uint64_t)&v404, v186, 2);
          v187 = (unsigned __int8 *)v404;
        }
        else
        {
          v187 = 0;
        }
        sub_1C4774EF4((uint64_t)&v413, 0, (uint64_t)v187);
        if (v404)
          llvm::MetadataTracking::untrack((uint64_t)&v404, (unsigned __int8 *)v404);
      }
      if (*((_BYTE *)v165 + 16) == 83)
      {
        for (i = *(_QWORD **)(v416 + 48); i != (_QWORD *)(v416 + 40); i = (_QWORD *)i[1])
        {
          v189 = i - 3;
          if (!i)
            v189 = 0;
          if (*((_BYTE *)v189 + 16) != 83)
          {
            v416 = i[2];
            v417 = i;
            v190 = (unsigned __int8 *)i[3];
            v404 = (char *)v190;
            if (v190)
            {
              llvm::MetadataTracking::track((uint64_t)&v404, v190, 2);
              v191 = (unsigned __int8 *)v404;
            }
            else
            {
              v191 = 0;
            }
            sub_1C4774EF4((uint64_t)&v413, 0, (uint64_t)v191);
            if (v404)
              llvm::MetadataTracking::untrack((uint64_t)&v404, (unsigned __int8 *)v404);
            break;
          }
        }
      }
      llvm::Instruction::clone(v165);
      v193 = v192;
      if ((*((_BYTE *)v165 + 23) & 0x10) != 0)
        break;
      v203 = 0;
      v204 = (unsigned __int8 *)&byte_1C871356D;
LABEL_285:
      LOWORD(v408) = 261;
      v404 = (char *)v204;
      v405 = v203;
      (*((void (**)(void **, unsigned __int8 **, char **, uint64_t, _QWORD *))*v420 + 2))(v420, v192, &v404, v416, v417);
      if ((_DWORD)v414)
      {
        v206 = (char *)v413;
        v207 = (char *)v413 + 16 * v414;
        v208 = v193 + 6;
        do
        {
          v209 = *(_DWORD *)v206;
          v210 = (unsigned __int8 *)*((_QWORD *)v206 + 1);
          if (v210)
          {
            if (!v209)
            {
              v396 = (char *)*((_QWORD *)v206 + 1);
              llvm::MetadataTracking::track((uint64_t)&v396, v210, 2);
LABEL_297:
              if (&v396 == (char **)v208)
              {
                if (v396)
                  llvm::MetadataTracking::untrack((uint64_t)&v396, (unsigned __int8 *)v396);
              }
              else
              {
                if (*v208)
                  llvm::MetadataTracking::untrack((uint64_t)(v193 + 6), *v208);
                v211 = (unsigned __int8 *)v396;
                *v208 = (unsigned __int8 *)v396;
                if (v211)
                  llvm::MetadataTracking::retrack((uint64_t)&v396, v211, (uint64_t)(v193 + 6));
              }
              goto LABEL_294;
            }
          }
          else
          {
            if (!*v208 && (*((_BYTE *)v193 + 23) & 0x20) == 0)
              goto LABEL_294;
            if (!v209)
            {
              v396 = 0;
              goto LABEL_297;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v193, v209, (llvm::MDNode *)v210);
LABEL_294:
          v206 += 16;
        }
        while (v206 != v207);
      }
      v212 = v411;
      if (v411 >= (unint64_t)HIDWORD(v411))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v410, (uint64_t)v412, v411 + 1, 8);
        v212 = v411;
      }
      *((_QWORD *)v410 + v212) = v193;
      LODWORD(v411) = v411 + 1;
      v213 = *((_QWORD *)v410 + v411 - 1);
      v405 = 2;
      v406 = 0;
      v407 = (int32x2_t ****)v165;
      if (v165 != (llvm::Instruction *)-8192 && v165 != (llvm::Instruction *)-4096 && v165)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
      v404 = (char *)&unk_1E814DA10;
      v408 = v400;
      v214 = sub_1C52E2ED8((uint64_t)v400, &v404);
      if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
      {
        v215 = v405 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
        if (v406)
        {
          *v406 = *v406 & 7 | v215;
        }
        else
        {
          v216 = v407;
          v217 = ***v407;
          v218 = (unint64_t)v217[303];
          if (v218 <= v215)
          {
            v219 = v217[305].u32[0];
            if (v218 + 16 * v219 > v215)
            {
              v220 = v219 - 1;
              LODWORD(v221) = v220 & ((v407 >> 4) ^ (v407 >> 9));
              v222 = (int32x2_t *****)(v218 + 16 * v221);
              v223 = *v222;
              if (v407 == *v222)
              {
LABEL_321:
                *v222 = (int32x2_t ****)-8192;
                v217[304] = vadd_s32(v217[304], (int32x2_t)0x1FFFFFFFFLL);
                v216 = v407;
              }
              else
              {
                v224 = 1;
                while (v223 != (int32x2_t ****)-4096)
                {
                  v225 = v221 + v224++;
                  v221 = v225 & v220;
                  v223 = *(int32x2_t *****)(v218 + 16 * v221);
                  if (v407 == v223)
                  {
                    v222 = (int32x2_t *****)(v218 + 16 * v221);
                    goto LABEL_321;
                  }
                }
              }
              *((_BYTE *)v216 + 17) &= ~1u;
            }
          }
        }
      }
      v226 = v214[7];
      if (v226 != v213)
      {
        if (v226 && v226 != -8192 && v226 != -4096)
        {
          v227 = v214[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v227 = v214[6];
          v228 = (unint64_t *)v214[6];
          if (v228)
          {
            *v228 = *v228 & 7 | v227;
          }
          else
          {
            v229 = v214[7];
            v230 = ***(int32x2_t ****)v229;
            v231 = (unint64_t)v230[303];
            if (v231 <= v227)
            {
              v232 = v230[305].u32[0];
              if (v231 + 16 * v232 > v227)
              {
                v233 = v232 - 1;
                LODWORD(v234) = v233 & ((v229 >> 4) ^ (v229 >> 9));
                v235 = (uint64_t *)(v231 + 16 * v234);
                v236 = *v235;
                if (v229 == *v235)
                {
LABEL_342:
                  *v235 = -8192;
                  v230[304] = vadd_s32(v230[304], (int32x2_t)0x1FFFFFFFFLL);
                  v229 = v214[7];
                }
                else
                {
                  v237 = 1;
                  while (v236 != -4096)
                  {
                    v238 = v234 + v237++;
                    v234 = v238 & v233;
                    v236 = *(_QWORD *)(v231 + 16 * v234);
                    if (v229 == v236)
                    {
                      v235 = (uint64_t *)(v231 + 16 * v234);
                      goto LABEL_342;
                    }
                  }
                }
                *(_BYTE *)(v229 + 17) &= ~1u;
              }
            }
          }
        }
        v214[7] = v213;
        if (v213 != -8192 && v213 != -4096 && v213)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v214 + 5));
      }
      if (++v32 == v394)
        goto LABEL_24;
    }
    v194 = ***(_QWORD ***)v165;
    v195 = *(_QWORD *)(v194 + 152);
    v196 = *(unsigned int *)(v194 + 168);
    if ((_DWORD)v196)
    {
      LODWORD(v197) = (v196 - 1) & ((v165 >> 4) ^ (v165 >> 9));
      v198 = (llvm::Instruction **)(v195 + 16 * v197);
      v199 = *v198;
      if (*v198 == v165)
      {
LABEL_284:
        v202 = v198[1];
        v205 = *(_QWORD *)v202;
        v204 = (unsigned __int8 *)v202 + 16;
        v203 = v205;
        goto LABEL_285;
      }
      v200 = 1;
      while (v199 != (llvm::Instruction *)-4096)
      {
        v201 = v197 + v200++;
        v197 = v201 & (v196 - 1);
        v199 = *(llvm::Instruction **)(v195 + 16 * v197);
        if (v199 == v165)
        {
          v198 = (llvm::Instruction **)(v195 + 16 * v197);
          goto LABEL_284;
        }
      }
    }
    v198 = (llvm::Instruction **)(v195 + 16 * v196);
    goto LABEL_284;
  }
LABEL_24:
  v33 = v395;
  if (v399)
  {
    v396 = 0;
    v397 = 0;
    v398 = 0;
    sub_1C5643D14(&v396, (uint64_t)&v399);
    v34 = v396;
    v35 = v397;
    if (v397 != v396)
    {
      v36 = 0;
      v389 = v396;
      while (1)
      {
        v38 = (int32x2_t ****)*((_QWORD *)v35 - 1);
        v35 -= 8;
        v37 = v38;
        v405 = 2;
        v406 = 0;
        v407 = v38;
        if (v38 != (int32x2_t ****)-8192 && v37 != (int32x2_t ****)-4096 && v37 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
        v404 = (char *)&unk_1E814DA10;
        v408 = v400;
        v40 = sub_1C52E2ED8((uint64_t)v400, &v404);
        if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407 != 0)
        {
          v42 = v405 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
          if (v406)
          {
            *v406 = *v406 & 7 | v42;
          }
          else
          {
            v43 = v407;
            v44 = ***v407;
            v45 = (unint64_t)v44[303];
            if (v45 <= v42)
            {
              v46 = v44[305].u32[0];
              if (v45 + 16 * v46 > v42)
              {
                v47 = v46 - 1;
                LODWORD(v48) = v47 & ((v407 >> 4) ^ (v407 >> 9));
                v49 = (int32x2_t *****)(v45 + 16 * v48);
                v50 = *v49;
                if (v407 == *v49)
                {
LABEL_46:
                  *v49 = (int32x2_t ****)-8192;
                  v44[304] = vadd_s32(v44[304], (int32x2_t)0x1FFFFFFFFLL);
                  v43 = v407;
                }
                else
                {
                  v51 = 1;
                  while (v50 != (int32x2_t ****)-4096)
                  {
                    v52 = v48 + v51++;
                    v48 = v52 & v47;
                    v50 = *(int32x2_t *****)(v45 + 16 * v48);
                    if (v407 == v50)
                    {
                      v49 = (int32x2_t *****)(v45 + 16 * v48);
                      goto LABEL_46;
                    }
                  }
                }
                *((_BYTE *)v43 + 17) &= ~1u;
              }
            }
          }
        }
        v53 = v40[7];
        if (v53)
        {
          if (v36)
          {
            v416 = v36;
            v417 = (_QWORD *)(v36 + 40);
            v54 = (char *)operator new(0x60uLL);
            v55 = v54;
            *((_DWORD *)v54 + 13) = *((_DWORD *)v54 + 13) & 0x38000000 | 1;
            *(_QWORD *)v54 = 0;
            *((_QWORD *)v54 + 2) = 0;
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 4) = ***(_QWORD ***)v53 + 1576;
            v56 = (llvm::Value *)(v54 + 32);
            *((_QWORD *)v54 + 3) = v54 + 32;
            *((_QWORD *)v54 + 5) = 0;
            v54[48] = 30;
            v54[49] = 0;
            *((_WORD *)v54 + 25) = 0;
            *((_DWORD *)v54 + 13) = 1;
            *(_OWORD *)(v54 + 56) = 0u;
            *(_OWORD *)(v54 + 72) = 0u;
            *((_DWORD *)v54 + 22) = 0;
            *(_QWORD *)v54 = v53;
            v57 = (_QWORD *)(v53 + 8);
            v58 = *(_QWORD *)(v53 + 8);
            *((_QWORD *)v54 + 1) = v58;
            if (v58)
              *(_QWORD *)(v58 + 16) = v54 + 8;
            *((_QWORD *)v54 + 2) = v57;
            *v57 = v54;
            LOWORD(v408) = 257;
            v40 = (_QWORD *)(*((uint64_t (**)(void **, llvm::Value *, char **, uint64_t, _QWORD *))*v420 + 2))(v420, v56, &v404, v416, v417);
            if ((_DWORD)v414)
            {
              v59 = (char *)v413;
              v60 = (char *)v413 + 16 * v414;
              v61 = (unsigned __int8 **)(v55 + 80);
              do
              {
                v62 = *(_DWORD *)v59;
                v63 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
                if (v63)
                {
                  if (!v62)
                  {
                    v409 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
                    v40 = (_QWORD *)llvm::MetadataTracking::track((uint64_t)&v409, v63, 2);
                    v64 = *v61;
                    if (!*v61)
                    {
LABEL_66:
                      v65 = v409;
                      *v61 = v409;
                      if (v65)
                        v40 = (_QWORD *)llvm::MetadataTracking::retrack((uint64_t)&v409, v65, (uint64_t)(v55 + 80));
                      goto LABEL_63;
                    }
LABEL_60:
                    v40 = (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)(v55 + 80), v64);
                    goto LABEL_66;
                  }
                }
                else
                {
                  v64 = *v61;
                  if (!*v61 && (v55[55] & 0x20) == 0)
                    goto LABEL_63;
                  if (!v62)
                  {
                    v409 = 0;
                    if (!v64)
                      goto LABEL_66;
                    goto LABEL_60;
                  }
                }
                llvm::Value::setMetadata(v56, *(_DWORD *)v59, (llvm::MDNode *)v63);
LABEL_63:
                v59 += 16;
              }
              while (v59 != v60);
            }
            v34 = v389;
          }
          v66 = *(_QWORD *)(v53 + 40);
          if (v66 == v53 + 40)
          {
            v67 = 0;
          }
          else
          {
            if (v66)
              v67 = v66 - 24;
            else
              v67 = 0;
            if (*(unsigned __int8 *)(v67 + 16) - 29 >= 0xB)
              v67 = 0;
          }
          v36 = 0;
          if (!v67 && v53 != v392)
          {
            v68 = (int32x2_t ****)v37[5];
            if (v68 != v37 + 5)
            {
              if (v68)
                v69 = v68 - 3;
              else
                v69 = 0;
              v70 = *((unsigned __int8 *)v69 + 16);
              v71 = v70 - 29;
              if (v70 == 30)
              {
                if ((*((_DWORD *)v69 + 5) & 0x7FFFFFF) == 3)
                  v72 = 2;
                else
                  v72 = 1;
LABEL_87:
                v73 = 0;
                v74 = v72;
                while (1)
                {
                  v75 = *((unsigned __int8 *)v68 - 8);
                  if (v75 != 30)
                    __asm { BR              X9 }
                  v76 = (int32x2_t ****)v68[-4 * v73 - 7];
                  v405 = 2;
                  v406 = 0;
                  v407 = v76;
                  if (v76 != (int32x2_t ****)-8192 && v76 != (int32x2_t ****)-4096 && v76 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
                  v404 = (char *)&unk_1E814DA10;
                  v408 = v400;
                  v78 = sub_1C52E2ED8((uint64_t)v400, &v404);
                  if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
                  {
                    v79 = v405 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
                    if (v406)
                    {
                      *v406 = *v406 & 7 | v79;
                    }
                    else
                    {
                      v80 = v407;
                      v81 = ***v407;
                      v82 = (unint64_t)v81[303];
                      if (v82 <= v79)
                      {
                        v83 = v81[305].u32[0];
                        if (v82 + 16 * v83 > v79)
                        {
                          v84 = v83 - 1;
                          LODWORD(v85) = v84 & ((v407 >> 4) ^ (v407 >> 9));
                          v86 = (int32x2_t *****)(v82 + 16 * v85);
                          v87 = *v86;
                          if (v407 == *v86)
                          {
LABEL_107:
                            *v86 = (int32x2_t ****)-8192;
                            v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
                            v80 = v407;
                          }
                          else
                          {
                            v88 = 1;
                            while (v87 != (int32x2_t ****)-4096)
                            {
                              v89 = v85 + v88++;
                              v85 = v89 & v84;
                              v87 = *(int32x2_t *****)(v82 + 16 * v85);
                              if (v407 == v87)
                              {
                                v86 = (int32x2_t *****)(v82 + 16 * v85);
                                goto LABEL_107;
                              }
                            }
                          }
                          *((_BYTE *)v80 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v90 = v78[7];
                  if (v90)
                    break;
                  if (++v73 == v74)
                  {
                    v36 = v53;
                    goto LABEL_131;
                  }
                }
                v416 = v53;
                v417 = (_QWORD *)(v53 + 40);
                v91 = (char *)operator new(0x60uLL);
                v92 = v91;
                *((_DWORD *)v91 + 13) = *((_DWORD *)v91 + 13) & 0x38000000 | 1;
                *(_QWORD *)v91 = 0;
                *((_QWORD *)v91 + 2) = 0;
                *((_QWORD *)v91 + 1) = 0;
                *((_QWORD *)v91 + 4) = ***(_QWORD ***)v90 + 1576;
                v93 = (llvm::Value *)(v91 + 32);
                *((_QWORD *)v91 + 3) = v91 + 32;
                *((_QWORD *)v91 + 5) = 0;
                v91[48] = 30;
                v91[49] = 0;
                *((_WORD *)v91 + 25) = 0;
                *((_DWORD *)v91 + 13) = 1;
                *(_OWORD *)(v91 + 56) = 0u;
                *(_OWORD *)(v91 + 72) = 0u;
                *((_DWORD *)v91 + 22) = 0;
                *(_QWORD *)v91 = v90;
                v96 = *(_QWORD *)(v90 + 8);
                v95 = (_QWORD *)(v90 + 8);
                v94 = v96;
                *((_QWORD *)v91 + 1) = v96;
                if (v96)
                  *(_QWORD *)(v94 + 16) = v91 + 8;
                *((_QWORD *)v91 + 2) = v95;
                *v95 = v91;
                LOWORD(v408) = 257;
                (*((void (**)(void **, llvm::Value *, char **, uint64_t, _QWORD *))*v420 + 2))(v420, v93, &v404, v416, v417);
                if ((_DWORD)v414)
                {
                  v97 = (char *)v413;
                  v98 = (char *)v413 + 16 * v414;
                  v99 = (unsigned __int8 **)(v92 + 80);
                  do
                  {
                    v100 = *(_DWORD *)v97;
                    v101 = (unsigned __int8 *)*((_QWORD *)v97 + 1);
                    if (v101)
                    {
                      if (!v100)
                      {
                        v409 = (unsigned __int8 *)*((_QWORD *)v97 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v409, v101, 2);
                        v102 = *v99;
                        if (!*v99)
                        {
LABEL_128:
                          v103 = v409;
                          *v99 = v409;
                          if (v103)
                            llvm::MetadataTracking::retrack((uint64_t)&v409, v103, (uint64_t)(v92 + 80));
                          goto LABEL_125;
                        }
LABEL_122:
                        llvm::MetadataTracking::untrack((uint64_t)(v92 + 80), v102);
                        goto LABEL_128;
                      }
                    }
                    else
                    {
                      v102 = *v99;
                      if (!*v99 && (v92[55] & 0x20) == 0)
                        goto LABEL_125;
                      if (!v100)
                      {
                        v409 = 0;
                        if (!v102)
                          goto LABEL_128;
                        goto LABEL_122;
                      }
                    }
                    llvm::Value::setMetadata(v93, *(_DWORD *)v97, (llvm::MDNode *)v101);
LABEL_125:
                    v97 += 16;
                  }
                  while (v97 != v98);
                }
                v36 = 0;
LABEL_131:
                v34 = v389;
                goto LABEL_136;
              }
              v72 = 2;
              v36 = v53;
              switch(v71)
              {
                case 0:
                case 5:
                case 6:
                  goto LABEL_136;
                case 1:
                  __break(1u);
                  goto LABEL_538;
                case 2:
                  v72 = (*((_DWORD *)v69 + 5) >> 1) & 0x3FFFFFF;
                  break;
                case 3:
                case 9:
                  v72 = (*((_DWORD *)v69 + 5) & 0x7FFFFFF) - 1;
                  break;
                case 4:
                  goto LABEL_87;
                case 7:
                  v72 = *((_WORD *)v69 + 9) & 1;
                  break;
                case 8:
                  v72 = 1;
                  goto LABEL_87;
                case 10:
                  v72 = *((_DWORD *)v69 + 20) + 1;
                  break;
                default:
                  goto LABEL_135;
              }
              if (v72)
                goto LABEL_87;
            }
LABEL_135:
            v36 = v53;
          }
        }
LABEL_136:
        if (v35 == v34)
        {
          v33 = v395;
          v35 = v396;
          break;
        }
      }
    }
    if (v35)
    {
      v397 = v35;
      operator delete(v35);
    }
  }
  v288 = (unsigned __int8 *)operator new();
  *(_DWORD *)v288 = 3;
  *((_QWORD *)v288 + 1) = 0;
  *((_DWORD *)v288 + 4) = 0;
  *((_QWORD *)v288 + 5) = v400;
  *((_QWORD *)v288 + 3) = v288 + 40;
  *((_QWORD *)v288 + 6) = 0;
  *((_QWORD *)v288 + 4) = 0x200000001;
  *((_QWORD *)v288 + 9) = v288 + 88;
  *((_QWORD *)v288 + 10) = 0x400000000;
  *((_QWORD *)v288 + 23) = v288 + 200;
  *((_QWORD *)v288 + 24) = 0x100000000;
  *((_QWORD *)v288 + 27) = v288 + 232;
  *((_QWORD *)v288 + 28) = 0x1000000000;
  v409 = v288;
  if ((_DWORD)v411)
  {
    v289 = (uint64_t ****)v410;
    v290 = 8 * v411;
    do
    {
      v291 = *v289++;
      v404 = (char *)v409;
      sub_1C5FD706C((uint64_t)v409, v291);
      sub_1C5FD3718((uint64_t *)&v404, v292);
      v290 -= 8;
    }
    while (v290);
  }
  if (!v392)
  {
    v404 = "entry";
    LOWORD(v408) = 259;
    v293 = operator new();
    *(_QWORD *)v293 = *v388 + 1600;
    *(_QWORD *)(v293 + 8) = 0;
    v294 = *(_DWORD *)(v293 + 20) & 0xC0000000;
    *(_DWORD *)(v293 + 16) = 22;
    *(_DWORD *)(v293 + 20) = v294;
    *(_QWORD *)(v293 + 24) = 0;
    *(_QWORD *)(v293 + 32) = 0;
    *(_QWORD *)(v293 + 40) = v293 + 40;
    *(_QWORD *)(v293 + 48) = v293 + 40;
    *(_QWORD *)(v293 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v33 + 20), (_QWORD *)v293);
    v295 = *((_QWORD *)v33 + 10);
    *(_QWORD *)(v293 + 32) = v33 + 20;
    *(_QWORD *)(v293 + 24) = v295;
    *(_QWORD *)(v295 + 8) = v293 + 24;
    *((_QWORD *)v33 + 10) = v293 + 24;
    v392 = v293;
    llvm::Value::setName((uint64_t ***)v293, (uint64_t)&v404);
  }
  v296 = *((_QWORD *)v33 + 11);
  if (v296)
    v297 = (_QWORD *)(v296 - 24);
  else
    v297 = 0;
  if (llvm::BasicBlock::hasNPredecessorsOrMore((llvm::BasicBlock *)v297, 1))
  {
    v404 = "entry";
    LOWORD(v408) = 259;
    v298 = operator new();
    *(_QWORD *)v298 = *v388 + 1600;
    *(_QWORD *)(v298 + 8) = 0;
    v299 = *(_DWORD *)(v298 + 20) & 0xC0000000;
    *(_DWORD *)(v298 + 16) = 22;
    *(_DWORD *)(v298 + 20) = v299;
    *(_QWORD *)(v298 + 24) = 0;
    v300 = (_QWORD *)(v298 + 24);
    *(_QWORD *)(v298 + 32) = 0;
    *(_QWORD *)(v298 + 40) = v298 + 40;
    *(_QWORD *)(v298 + 48) = v298 + 40;
    *(_QWORD *)(v298 + 56) = 0;
    if (v296)
      v301 = v297 + 3;
    else
      v301 = (uint64_t *)(v33 + 20);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v33 + 20), (_QWORD *)v298);
    v302 = *v301;
    *(_QWORD *)(v298 + 32) = v301;
    *v300 = v302;
    *(_QWORD *)(v302 + 8) = v300;
    *v301 = (uint64_t)v300;
    llvm::Value::setName((uint64_t ***)v298, (uint64_t)&v404);
    v416 = v298;
    v417 = (_QWORD *)(v298 + 40);
    v303 = (char *)operator new(0x60uLL);
    v304 = v303;
    *((_DWORD *)v303 + 13) = *((_DWORD *)v303 + 13) & 0x38000000 | 1;
    *(_QWORD *)v303 = 0;
    *((_QWORD *)v303 + 2) = 0;
    *((_QWORD *)v303 + 1) = 0;
    *((_QWORD *)v303 + 4) = **(_QWORD **)*v297 + 1576;
    v305 = (llvm::Value *)(v303 + 32);
    *((_QWORD *)v303 + 3) = v303 + 32;
    *((_QWORD *)v303 + 5) = 0;
    v303[48] = 30;
    v303[49] = 0;
    *((_WORD *)v303 + 25) = 0;
    *((_DWORD *)v303 + 13) = 1;
    *(_OWORD *)(v303 + 56) = 0u;
    *(_OWORD *)(v303 + 72) = 0u;
    *((_DWORD *)v303 + 22) = 0;
    *(_QWORD *)v303 = v297;
    v308 = v297[1];
    v307 = v297 + 1;
    v306 = v308;
    *((_QWORD *)v303 + 1) = v308;
    if (v308)
      *(_QWORD *)(v306 + 16) = v303 + 8;
    *((_QWORD *)v303 + 2) = v307;
    *v307 = v303;
    LOWORD(v408) = 257;
    (*((void (**)(void **, llvm::Value *, char **, uint64_t, _QWORD *))*v420 + 2))(v420, v305, &v404, v416, v417);
    if ((_DWORD)v414)
    {
      v379 = (char *)v413;
      v380 = (char *)v413 + 16 * v414;
      v381 = (unsigned __int8 **)(v304 + 80);
      do
      {
        v382 = *(_DWORD *)v379;
        v383 = (unsigned __int8 *)*((_QWORD *)v379 + 1);
        if (v383)
        {
          if (!v382)
          {
            v396 = (char *)*((_QWORD *)v379 + 1);
            llvm::MetadataTracking::track((uint64_t)&v396, v383, 2);
            v384 = *v381;
            if (!*v381)
            {
LABEL_535:
              v385 = (unsigned __int8 *)v396;
              *v381 = (unsigned __int8 *)v396;
              if (v385)
                llvm::MetadataTracking::retrack((uint64_t)&v396, v385, (uint64_t)(v304 + 80));
              goto LABEL_532;
            }
LABEL_529:
            llvm::MetadataTracking::untrack((uint64_t)(v304 + 80), v384);
            goto LABEL_535;
          }
        }
        else
        {
          v384 = *v381;
          if (!*v381 && (v304[55] & 0x20) == 0)
            goto LABEL_532;
          if (!v382)
          {
            v396 = 0;
            if (!v384)
              goto LABEL_535;
            goto LABEL_529;
          }
        }
        llvm::Value::setMetadata(v305, *(_DWORD *)v379, (llvm::MDNode *)v383);
LABEL_532:
        v379 += 16;
      }
      while (v379 != v380);
    }
  }
  v416 = v392;
  v417 = (_QWORD *)(v392 + 40);
  v309 = **v391;
  v405 = 2;
  v406 = 0;
  v407 = v309;
  if (v309 != (int32x2_t ****)-8192 && v309 != (int32x2_t ****)-4096 && v309 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
  v404 = (char *)&unk_1E814DA10;
  v408 = v400;
  v311 = sub_1C52E2ED8((uint64_t)v400, &v404);
  if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407)
  {
    v313 = v405 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
    if (v406)
    {
      *v406 = *v406 & 7 | v313;
    }
    else
    {
      v314 = v407;
      v315 = ***v407;
      v316 = (unint64_t)v315[303];
      if (v316 <= v313)
      {
        v317 = v315[305].u32[0];
        if (v316 + 16 * v317 > v313)
        {
          v318 = v317 - 1;
          LODWORD(v319) = v318 & ((v407 >> 4) ^ (v407 >> 9));
          v320 = (int32x2_t *****)(v316 + 16 * v319);
          v321 = *v320;
          if (v407 == *v320)
          {
LABEL_443:
            *v320 = (int32x2_t ****)-8192;
            v315[304] = vadd_s32(v315[304], (int32x2_t)0x1FFFFFFFFLL);
            v314 = v407;
          }
          else
          {
            v322 = 1;
            while (v321 != (int32x2_t ****)-4096)
            {
              v323 = v319 + v322++;
              v319 = v323 & v318;
              v321 = *(int32x2_t *****)(v316 + 16 * v319);
              if (v407 == v321)
              {
                v320 = (int32x2_t *****)(v316 + 16 * v319);
                goto LABEL_443;
              }
            }
          }
          *((_BYTE *)v314 + 17) &= ~1u;
        }
      }
    }
  }
  if ((unint64_t)((char *)v391[1] - (char *)*v391) < 9)
  {
    v324 = (llvm::Value *)v311[7];
  }
  else
  {
    v324 = llvm::UndefValue::get(v386, v312);
    v325 = (char *)v391[1] - (char *)*v391;
    if ((v325 & 0x7FFFFFFF8) != 0)
    {
      v326 = 0;
      v327 = (v325 >> 3);
      do
      {
        v328 = (*v391)[v326];
        v405 = 2;
        v406 = 0;
        v407 = v328;
        if (v328 != (int32x2_t ****)-8192 && v328 != (int32x2_t ****)-4096 && v328 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v405);
        v404 = (char *)&unk_1E814DA10;
        v408 = v400;
        v330 = sub_1C52E2ED8((uint64_t)v400, &v404);
        if (v407 != (int32x2_t ****)-8192 && v407 != (int32x2_t ****)-4096 && v407 != 0)
        {
          v332 = v405 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v405 & 0xFFFFFFFFFFFFFFF8) = v406;
          if (v406)
          {
            *v406 = *v406 & 7 | v332;
          }
          else
          {
            v333 = v407;
            v334 = ***v407;
            v335 = (unint64_t)v334[303];
            if (v335 <= v332)
            {
              v336 = v334[305].u32[0];
              if (v335 + 16 * v336 > v332)
              {
                v337 = v336 - 1;
                LODWORD(v338) = v337 & ((v407 >> 4) ^ (v407 >> 9));
                v339 = (int32x2_t *****)(v335 + 16 * v338);
                v340 = *v339;
                if (v407 == *v339)
                {
LABEL_468:
                  *v339 = (int32x2_t ****)-8192;
                  v334[304] = vadd_s32(v334[304], (int32x2_t)0x1FFFFFFFFLL);
                  v333 = v407;
                }
                else
                {
                  v341 = 1;
                  while (v340 != (int32x2_t ****)-4096)
                  {
                    v342 = v338 + v341++;
                    v338 = v342 & v337;
                    v340 = *(int32x2_t *****)(v335 + 16 * v338);
                    if (v407 == v340)
                    {
                      v339 = (int32x2_t *****)(v335 + 16 * v338);
                      goto LABEL_468;
                    }
                  }
                }
                *((_BYTE *)v333 + 17) &= ~1u;
              }
            }
          }
        }
        v343 = v330[7];
        LODWORD(v396) = v326;
        LOWORD(v408) = 257;
        v324 = (llvm::Value *)sub_1C506D788((uint64_t)&v413, (uint64_t)v324, v343, &v396, 1, (uint64_t)&v404);
        ++v326;
      }
      while (v326 != v327);
    }
  }
  sub_1C538D7E4((uint64_t *)&v413, v324);
  v344 = (uint64_t)v390;
  if (llvm::verifyFunction((uint64_t ***)v390, 0, v345))
  {
    llvm::Function::eraseFromParent(v390);
    v347 = atomic_load(qword_1ED836B58);
    v68 = (int32x2_t ****)v431;
    if (!v347)
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v348 = qword_1ED836B58[0];
    v344 = operator new();
    v404 = "Function verification failed";
    LOWORD(v408) = 259;
    *(_QWORD *)v344 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v404, (_QWORD *)(v344 + 8));
    *(_QWORD *)(v344 + 32) = 3;
    *(_QWORD *)(v344 + 40) = v348;
    *(_BYTE *)(v344 + 48) = 1;
    v349 = (uint64_t *)a7;
    *(_BYTE *)(a7 + 8) |= 1u;
  }
  else
  {
    v349 = (uint64_t *)a7;
    *(_BYTE *)(a7 + 8) &= ~1u;
    v68 = (int32x2_t ****)v431;
  }
  *v349 = v344;
  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v409, v346);
  if (v410 != v412)
    free(v410);
  if (v403)
  {
    sub_1C4E43068((uint64_t)&v402);
    MEMORY[0x1CAA32FB4](v402, 8);
    v403 = 0;
  }
  v350 = (_QWORD *)v400[0];
  if (v401)
  {
    v351 = v400[0] + ((unint64_t)v401 << 6);
    do
    {
      v352 = v350[3];
      if ((v352 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v353 = v350[7];
        if (v353)
        {
          if (v353 != -8192 && v353 != -4096)
          {
            v354 = v350[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v354 = v350[6];
            v355 = (unint64_t *)v350[6];
            if (v355)
            {
              *v355 = *v355 & 7 | v354;
            }
            else
            {
              v356 = v350[7];
              v357 = ***(int32x2_t ****)v356;
              v358 = (unint64_t)v357[303];
              if (v358 <= v354)
              {
                v359 = v357[305].u32[0];
                if (v358 + 16 * v359 > v354)
                {
                  v360 = v359 - 1;
                  LODWORD(v361) = v360 & ((v356 >> 4) ^ (v356 >> 9));
                  v362 = (uint64_t *)(v358 + 16 * v361);
                  v363 = *v362;
                  if (v356 == *v362)
                  {
LABEL_497:
                    *v362 = -8192;
                    v357[304] = vadd_s32(v357[304], (int32x2_t)0x1FFFFFFFFLL);
                    v356 = v350[7];
                  }
                  else
                  {
                    v364 = 1;
                    while (v363 != -4096)
                    {
                      v365 = v361 + v364++;
                      v361 = v365 & v360;
                      v363 = *(_QWORD *)(v358 + 16 * v361);
                      if (v356 == v363)
                      {
                        v362 = (uint64_t *)(v358 + 16 * v361);
                        goto LABEL_497;
                      }
                    }
                  }
                  *(_BYTE *)(v356 + 17) &= ~1u;
                }
              }
            }
            v352 = v350[3];
          }
        }
      }
      if (v352 != -4096 && v352 != -8192 && v352 != 0)
      {
        v367 = v350[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v367 = v350[2];
        v368 = (unint64_t *)v350[2];
        if (v368)
        {
          *v368 = *v368 & 7 | v367;
        }
        else
        {
          v369 = v350[3];
          v370 = ***(int32x2_t ****)v369;
          v371 = (unint64_t)v370[303];
          if (v371 <= v367)
          {
            v372 = v370[305].u32[0];
            if (v371 + 16 * v372 > v367)
            {
              v373 = v372 - 1;
              LODWORD(v374) = v373 & ((v369 >> 4) ^ (v369 >> 9));
              v375 = (uint64_t *)(v371 + 16 * v374);
              v376 = *v375;
              if (v369 == *v375)
              {
LABEL_516:
                *v375 = -8192;
                v370[304] = vadd_s32(v370[304], (int32x2_t)0x1FFFFFFFFLL);
                v369 = v350[3];
              }
              else
              {
                v377 = 1;
                while (v376 != -4096)
                {
                  v378 = v374 + v377++;
                  v374 = v378 & v373;
                  v376 = *(_QWORD *)(v371 + 16 * v374);
                  if (v369 == v376)
                  {
                    v375 = (uint64_t *)(v371 + 16 * v374);
                    goto LABEL_516;
                  }
                }
              }
              *(_BYTE *)(v369 + 17) &= ~1u;
            }
          }
        }
      }
      v350 += 8;
    }
    while (v350 != (_QWORD *)v351);
    v350 = (_QWORD *)v400[0];
  }
  MEMORY[0x1CAA32FB4](v350, 8);
  v40 = v413;
  if (v413 != v415)
LABEL_538:
    free(v40);
  if (v429 != v68)
    free(v429);
}

uint64_t *llvm::ComputationExtractor::replaceExtractedInstsWithCall(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  llvm::Value *v19;
  unsigned int v21;
  _BYTE v22[32];
  __int16 v23;
  void *v24[2];
  _QWORD v25[16];

  v25[15] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v12 = *v8++;
      v11 = v12;
      if (*(unsigned __int8 *)(v12 + 16) <= 0x1Bu)
        v11 = 0;
      if (v11)
        v10 = v11;
    }
    while (v8 != v9);
  }
  sub_1C4773D54((uint64_t)v24, v10, 0, 0, 0);
  if (a2)
    v13 = *(uint64_t ***)(a2 + 24);
  else
    v13 = 0;
  v23 = 257;
  v14 = (uint64_t *)sub_1C4774778((uint64_t *)v24, v13, a2, a3, a4, (uint64_t)v22, 0);
  v15 = (char *)a1[1] - (char *)*a1;
  if ((v15 & 0x7FFFFFFF8) != 0)
  {
    v16 = 0;
    v17 = (v15 >> 3);
    do
    {
      v18 = *a1;
      v19 = (llvm::Value *)v14;
      if ((unint64_t)((char *)a1[1] - (char *)*a1) >= 9)
      {
        v21 = v16;
        v23 = 257;
        v19 = (llvm::Value *)sub_1C506DBC4((uint64_t)v24, v14, &v21, 1, (uint64_t)v22);
        v18 = *a1;
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18[v16++], v19, (llvm::Value *)1);
    }
    while (v17 != v16);
  }
  if (v24[0] != v25)
    free(v24[0]);
  return v14;
}

void llvm::ComputationExtractor::eraseDeadInstructions(llvm::ComputationExtractor *this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *((_QWORD *)this + 29);
  for (i = *((_QWORD *)this + 30); i != v2; i -= 8)
  {
    v4 = *(_QWORD *)(i - 8);
    v3 = v4;
    if (!*(_QWORD *)(v4 + 8) && *(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
      v5 = *(_QWORD *)(v3 + 24);
      v6 = *(_QWORD **)(v3 + 32);
      *v6 = v5;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v3);
    }
  }
}

_QWORD *sub_1C5EEB3D4(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

uint64_t sub_1C5EEB454(uint64_t a1, uint64_t *a2)
{
  int64x2_t v3;

  *(_QWORD *)a1 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  *(int64x2_t *)(a1 + 40) = v3;
  *(int64x2_t *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x800000000;
  *(_QWORD *)(a1 + 152) = 1;
  *(int64x2_t *)(a1 + 160) = v3;
  *(int64x2_t *)(a1 + 176) = v3;
  *(int64x2_t *)(a1 + 192) = v3;
  *(int64x2_t *)(a1 + 208) = v3;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x800000000;
  *(_QWORD *)(a1 + 304) = 0;
  sub_1C5EEB530(a1, a2);
  return a1;
}

uint64_t sub_1C5EEB4CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  if (a2)
  {
    v3 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = *(_QWORD *)(a1 + 16 * v3);
    if (v4 == a3)
      return *(unsigned int *)(a1 + 16 * v3 + 8);
    v6 = 1;
    while (v4 != -4096)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v4 = *(_QWORD *)(a1 + 16 * v3);
      if (v4 == a3)
        return *(unsigned int *)(a1 + 16 * v3 + 8);
    }
  }
  return 0;
}

void sub_1C5EEB530(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  char v10;
  const char *v11;
  char v12;
  uint64_t *v13;

  v13 = a2;
  sub_1C56D2D50(a1, (uint64_t *)&v13);
  v13 = a2;
  sub_1C56D2D50(a1 + 152, (uint64_t *)&v13);
  v4 = *(_QWORD *)(*(_QWORD *)(a2[5] + 56) + 40) + 272;
  v5 = *a2;
  sub_1C4768AD0(v4, v5);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  llvm::DataLayout::getAlignment(v4, v5);
  if (v9)
  {
    v12 = v10;
    v10 = v12;
  }
  *(_QWORD *)(a1 + 304) += ((1 << v10) + v7 - 1) & -(1 << v10);
}

_QWORD *sub_1C5EEB608(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = result;
  v2 = *(_DWORD *)result;
  if (*(_DWORD *)result <= 1u && !*((_DWORD *)result + 1))
    return result;
  if ((v2 & 1) != 0)
  {
    v5 = result + 1;
    v6 = result + 9;
    goto LABEL_11;
  }
  v3 = *((unsigned int *)result + 4);
  if (((2 * v2) & 0xFFFFFFFC) >= v3 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_13:
      *(_DWORD *)result = v3;
      *((_DWORD *)result + 1) = 0;
      return result;
    }
    v5 = (_QWORD *)result[1];
    v6 = &v5[v3];
    do
LABEL_11:
      *v5++ = -4096;
    while (v5 != v6);
    LODWORD(v3) = *(_DWORD *)result & 1;
    goto LABEL_13;
  }
  if (v2 < 2)
  {
    v4 = 0;
LABEL_22:
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C5EEB3D4(v1, v4);
  }
  v7 = __clz((v2 >> 1) - 1);
  if ((v7 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v7);
  if (v4 != (_DWORD)v3)
    goto LABEL_22;
  *result = 0;
  v8 = 8 * v3;
  v9 = (_QWORD *)result[1];
  do
  {
    *v9++ = -4096;
    v8 -= 8;
  }
  while (v8);
  return result;
}

unint64_t *sub_1C5EEB710(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v71;
  unint64_t v72;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F0A6C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F0C38(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F0CB4(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 8;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v46) = v45;
                    v47 = v46 - 8;
                    if (v46 == 8)
                      break;
                    v45 = *(unint64_t *)((char *)v8 + v46 - 16);
                    v46 -= 8;
                    if (v44 >= v45)
                    {
                      v48 = (unint64_t *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v7;
              v71 = v7[1];
              v7 = v39;
              if (v71 < v72)
              {
                do
                {
                  *v39 = v72;
                  v72 = *(v39 - 2);
                  --v39;
                }
                while (v71 < v72);
                *v39 = v71;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 < v54)
                    ++v53;
                  else
                    v54 = *v53;
                  if (!v55)
                    v52 = 2 * v51 + 2;
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unint64_t *)v53[1];
                      if (*v53 >= (unint64_t)result)
                      {
                        v52 = v58;
                      }
                      else
                      {
                        v54 = v53[1];
                        ++v53;
                      }
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  if (*v62 >= v62[1])
                  {
                    v59 = v63;
                  }
                  else
                  {
                    v64 = v62[1];
                    ++v62;
                  }
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v65 = (char *)v62 - (char *)v8 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v8[v66];
                  v68 = *v67;
                  v69 = *v62;
                  if (*v67 < *v62)
                  {
                    do
                    {
                      *v62 = v68;
                      v62 = v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v8[v66];
                      v68 = *v67;
                    }
                    while (*v67 < v69);
                    *v62 = v69;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49F0A6C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F0A6C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F0A6C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F0A6C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F0A6C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unint64_t *)sub_1C5EEB710(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C5EEBD30(v7, v26);
        v8 = v26 + 1;
        result = (unint64_t *)sub_1C5EEBD30(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5EEBD30(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F0A6C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F0C38(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F0CB4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F0A6C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t *sub_1C5EEBE8C(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v71;
  unint64_t v72;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F0A6C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F0C38(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F0CB4(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 8;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v46) = v45;
                    v47 = v46 - 8;
                    if (v46 == 8)
                      break;
                    v45 = *(unint64_t *)((char *)v8 + v46 - 16);
                    v46 -= 8;
                    if (v44 >= v45)
                    {
                      v48 = (unint64_t *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v7;
              v71 = v7[1];
              v7 = v39;
              if (v71 < v72)
              {
                do
                {
                  *v39 = v72;
                  v72 = *(v39 - 2);
                  --v39;
                }
                while (v71 < v72);
                *v39 = v71;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 < v54)
                    ++v53;
                  else
                    v54 = *v53;
                  if (!v55)
                    v52 = 2 * v51 + 2;
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unint64_t *)v53[1];
                      if (*v53 >= (unint64_t)result)
                      {
                        v52 = v58;
                      }
                      else
                      {
                        v54 = v53[1];
                        ++v53;
                      }
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  if (*v62 >= v62[1])
                  {
                    v59 = v63;
                  }
                  else
                  {
                    v64 = v62[1];
                    ++v62;
                  }
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v65 = (char *)v62 - (char *)v8 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v8[v66];
                  v68 = *v67;
                  v69 = *v62;
                  if (*v67 < *v62)
                  {
                    do
                    {
                      *v62 = v68;
                      v62 = v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v8[v66];
                      v68 = *v67;
                    }
                    while (*v67 < v69);
                    *v62 = v69;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49F0A6C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F0A6C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F0A6C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F0A6C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F0A6C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unint64_t *)sub_1C5EEBE8C(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C5EEC4AC(v7, v26);
        v8 = v26 + 1;
        result = (unint64_t *)sub_1C5EEC4AC(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5EEC4AC(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F0A6C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F0C38(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F0CB4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F0A6C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t llvm::optimizeGlobalCtorsList(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v12;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  llvm::PoisonValue *v55;
  llvm::Value **v56;
  _DWORD *v57;
  llvm::UndefValue *v58;
  llvm::PointerType *v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  llvm::ValueSymbolTable *v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  void *__p;
  char *v68;
  char *v69;
  char v70[32];
  __int16 v71;
  void *v72[2];
  _DWORD v73[14];
  void *v74;
  uint64_t v75;
  _QWORD v76[12];

  v76[10] = *MEMORY[0x1E0C80C00];
  v5 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.global_ctors", 0x11uLL);
  if (!v5)
    return 0;
  v8 = v5;
  if (*(_BYTE *)(v5 + 16) != 3)
    return 0;
  v9 = *(_DWORD *)(v5 + 32) & 0xF;
  if (v9 <= 8 && ((1 << v9) & 0x182) != 0)
    return 0;
  if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
    return 0;
  v11 = v9 - 2;
  if (v11 < 9 && ((0x18Fu >> v11) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(v5 + 80) & 2) != 0)
    return 0;
  v12 = *(_QWORD *)(v5 - 32);
  if (!v12 || *(_BYTE *)(v12 + 16) != 8)
    return 0;
  v14 = *(_DWORD *)(v12 + 20);
  if ((v14 & 0x40000000) != 0)
  {
    v16 = *(_QWORD *)(v12 - 8);
    v15 = v14 & 0x7FFFFFF;
  }
  else
  {
    v15 = v14 & 0x7FFFFFF;
    v16 = v12 - 32 * v15;
  }
  if (v15)
  {
    v17 = 32 * v15;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v16 + 16) != 13)
      {
        v18 = (_QWORD *)(*(_QWORD *)v16 - 32 * (*(_DWORD *)(*(_QWORD *)v16 + 20) & 0x7FFFFFF));
        if (*(_BYTE *)(v18[4] + 16) != 19)
        {
          if (*(_BYTE *)(v18[4] + 16))
            return 0;
          v19 = *v18;
          v20 = (_QWORD *)(*v18 + 24);
          if (*(_DWORD *)(v19 + 32) >= 0x41u)
            v20 = (_QWORD *)*v20;
          if (*v20 < 0xFFFFuLL)
            return 0;
        }
      }
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
  }
  __p = 0;
  v68 = 0;
  v69 = 0;
  sub_1C4DB1D18((uint64_t)&__p, v15);
  v21 = *(_DWORD *)(v12 + 20);
  if ((v21 & 0x40000000) != 0)
  {
    v23 = *(uint64_t **)(v12 - 8);
    v22 = v21 & 0x7FFFFFF;
  }
  else
  {
    v22 = v21 & 0x7FFFFFF;
    v23 = (uint64_t *)(v12 - 32 * v22);
  }
  if (v22)
  {
    v24 = &v23[4 * v22];
    v66 = v24;
    do
    {
      v25 = *v23;
      if (*(_BYTE *)(*(_QWORD *)(*v23 - 32 * (*(_DWORD *)(*v23 + 20) & 0x7FFFFFF) + 32) + 16))
        v26 = 0;
      else
        v26 = *(_QWORD *)(*v23 - 32 * (*(_DWORD *)(*v23 + 20) & 0x7FFFFFF) + 32);
      v27 = v68;
      if (v68 >= v69)
      {
        v29 = (char *)__p;
        v30 = (v68 - (_BYTE *)__p) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          abort();
        v32 = v69 - (_BYTE *)__p;
        if ((v69 - (_BYTE *)__p) >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 >> 61)
            sub_1C4764EE4();
          v34 = (char *)operator new(8 * v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[8 * v30];
        *(_QWORD *)v35 = v26;
        v28 = v35 + 8;
        if (v27 != v29)
        {
          do
          {
            v36 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v35 - 1) = v36;
            v35 -= 8;
          }
          while (v27 != v29);
          v27 = (char *)__p;
        }
        __p = v35;
        v68 = v28;
        v69 = &v34[8 * v33];
        if (v27)
          operator delete(v27);
        v24 = v66;
      }
      else
      {
        *(_QWORD *)v68 = v26;
        v28 = v27 + 8;
      }
      v68 = v28;
      v37 = *(_QWORD *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF));
      v38 = (_QWORD *)(v37 + 24);
      if (*(_DWORD *)(v37 + 32) >= 0x41u)
        v38 = (_QWORD *)*v38;
      if (*v38 != 0xFFFFLL)
        *((_QWORD *)v28 - 1) = 0;
      v23 += 4;
    }
    while (v23 != v24);
  }
  v39 = (char *)__p;
  if (__p == v68)
  {
    v6 = 0;
  }
  else
  {
    v40 = (unint64_t)(v68 - (_BYTE *)__p) >> 3;
    v72[0] = v73;
    v72[1] = (void *)0x600000000;
    sub_1C4765AA4((char *)v72, (v40 + 63) >> 6, 0);
    v6 = 0;
    v73[12] = v40;
    if ((_DWORD)v40)
    {
      v41 = (char *)__p;
      if (v68 != __p)
      {
        v42 = 0;
        v43 = 0;
        v44 = 1;
        do
        {
          v45 = *(_QWORD *)&v41[8 * v42];
          if (v45)
          {
            if (*(_QWORD *)(v45 + 72) != v45 + 72)
            {
              v46 = a2(a3);
              v41 = (char *)__p;
              if (v46)
              {
                *((_QWORD *)__p + v42) = 0;
                v43 = 1;
                *((_QWORD *)v72[0] + ((v44 - 1) >> 6)) |= 1 << (v44 - 1);
                LODWORD(v40) = v40 - 1;
                v41 = (char *)__p;
              }
            }
          }
          v42 = v44++;
        }
        while (v42 != (v68 - v41) >> 3 && (_DWORD)v40 != 0);
        if ((v43 & 1) != 0)
        {
          v48 = *(_DWORD **)(v8 - 32);
          v74 = v76;
          v75 = 0xA00000000;
          v49 = v48[5];
          v50 = v49 & 0x7FFFFFF;
          if ((v49 & 0x7FFFFFF) != 0)
          {
            v51 = 0;
            v52 = 0;
            v53 = v48;
            do
            {
              if (((*((_QWORD *)v72[0] + (v52 >> 6)) >> v52) & 1) == 0)
              {
                v54 = *(_QWORD *)&v53[-8 * (v48[5] & 0x7FFFFFF)];
                if (v51 >= HIDWORD(v75))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v51 + 1, 8);
                  v51 = v75;
                }
                *((_QWORD *)v74 + v51) = v54;
                v51 = v75 + 1;
                LODWORD(v75) = v75 + 1;
              }
              ++v52;
              v53 += 8;
            }
            while (v50 != v52);
          }
          else
          {
            v51 = 0;
          }
          llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)v48 + 24), (llvm::Type *)v51);
          v56 = llvm::ConstantArray::get(v55, (llvm::Type *)v74, v75);
          if (*v56 == *(llvm::Value **)v48)
          {
            llvm::GlobalVariable::setInitializer(v8, (llvm::Constant *)v56);
          }
          else
          {
            v57 = operator new(0x78uLL);
            v58 = (llvm::UndefValue *)(v57 + 8);
            v57[13] = v57[13] & 0x38000000 | 1;
            *(_QWORD *)v57 = 0;
            *((_QWORD *)v57 + 1) = 0;
            *((_QWORD *)v57 + 2) = 0;
            *((_QWORD *)v57 + 3) = v57 + 8;
            v59 = *v56;
            v60 = *(_BYTE *)(v8 + 80) & 1;
            v61 = *(_DWORD *)(v8 + 32);
            v71 = 257;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v57 + 8), v59, v60, v61 & 0xF, (uint64_t)v56, (uint64_t)v70, (v61 >> 10) & 7, 0, 0);
            v62 = *(_QWORD *)(v8 + 40);
            *((_QWORD *)v57 + 9) = v62;
            if ((*((_BYTE *)v57 + 55) & 0x10) != 0)
            {
              v63 = *(llvm::ValueSymbolTable **)(v62 + 112);
              if (v63)
                llvm::ValueSymbolTable::reinsertValue(v63, v58);
            }
            v64 = *(_QWORD *)(v8 + 56);
            *((_QWORD *)v57 + 11) = v64;
            *((_QWORD *)v57 + 12) = v8 + 56;
            v65 = (char *)(v57 + 22);
            *(_QWORD *)(v64 + 8) = v65;
            *(_QWORD *)(v8 + 56) = v65;
            llvm::Value::takeName(v58, (llvm::Value *)v8);
            if (*(_QWORD *)(v8 + 8))
            {
              if (*(_QWORD *)v58 != *(_QWORD *)v8)
                v58 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v58, *(llvm::Constant **)v8, 0);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v8, v58, (llvm::Value *)1);
            }
            llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v8);
          }
          if (v74 != v76)
            free(v74);
          v6 = 1;
        }
        else
        {
          v6 = 0;
        }
      }
    }
    if (v72[0] != v73)
      free(v72[0]);
    v39 = (char *)__p;
  }
  if (v39)
  {
    v68 = v39;
    operator delete(v39);
  }
  return v6;
}

_QWORD *sub_1C5EECBF0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81A9060;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81A90C8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

BOOL llvm::applyDebugifyMetadata(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, uint64_t a6)
{
  llvm *NamedMetadata;
  llvm *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  void *v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t *v20;
  char v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  llvm::GlobalValue *v24;
  uint64_t TypeArray;
  char *Impl;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  llvm::GlobalValue **v33;
  llvm::GlobalValue *v34;
  int v35;
  int v36;
  llvm::GlobalValue *v37;
  unsigned __int8 *v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  size_t v42;
  uint64_t v43;
  llvm::GlobalValue **v44;
  llvm::GlobalValue *v45;
  int v46;
  int v47;
  llvm::GlobalValue *v48;
  unsigned __int8 *v49;
  size_t v50;
  size_t v51;
  _QWORD **v52;
  llvm::BasicBlock *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  _QWORD **v83;
  llvm::BasicBlock *v84;
  uint64_t *v85;
  uint64_t v86;
  const llvm::APInt *v87;
  uint64_t inserted;
  uint64_t v89;
  llvm::ConstantInt *v90;
  unsigned int v91;
  unint64_t v92;
  llvm::Value *v93;
  llvm::ValueHandleBase *v94;
  unsigned __int8 *v95;
  const llvm::APInt *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 **v100;
  uint64_t v101;
  llvm::ConstantInt *v102;
  unsigned int v103;
  unint64_t v104;
  llvm::Value *v105;
  llvm::ValueHandleBase *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  _BYTE *CompileUnit;
  char v116;
  uint64_t v117;
  uint64_t v118[4];
  __int16 v119;
  void *__p[2];
  char v121;
  char v122;
  int v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  uint64_t *v126;
  const char **v127;
  llvm::DISubprogram **p_Function;
  llvm::MDNode **v129;
  _QWORD *v130;
  llvm::DISubprogram *Function;
  llvm::MDNode *v132;
  int v133;
  _QWORD v134[3];
  __int128 v135;
  int v136;
  uint64_t v137;
  const char *v138;
  uint64_t *v139;
  __int16 v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v138 = "llvm.dbg.cu";
  v140 = 259;
  NamedMetadata = (llvm *)llvm::Module::getNamedMetadata(a1, (uint64_t)&v138);
  v13 = NamedMetadata;
  if (NamedMetadata)
  {
    if (byte_1ED8268C0)
      v14 = (llvm::raw_ostream *)llvm::nulls(NamedMetadata);
    else
      v14 = (llvm::raw_ostream *)llvm::errs(NamedMetadata);
    v15 = v14;
    v17 = *((_QWORD *)v14 + 3);
    v16 = (void *)*((_QWORD *)v14 + 4);
    if (a5 <= v17 - (uint64_t)v16)
    {
      if (a5)
      {
        memcpy(v16, a4, a5);
        v16 = (void *)(*((_QWORD *)v15 + 4) + a5);
        *((_QWORD *)v15 + 4) = v16;
      }
    }
    else
    {
      v15 = llvm::raw_ostream::write(v15, (const char *)a4, a5);
      v16 = (void *)*((_QWORD *)v15 + 4);
    }
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0x1FuLL)
    {
      qmemcpy(v16, "Skipping module with debug info\n", 32);
      *((_QWORD *)v15 + 4) += 32;
    }
    else
    {
      llvm::raw_ostream::write(v15, "Skipping module with debug info\n", 0x20uLL);
    }
    return v13 == 0;
  }
  v19 = 1;
  llvm::DIBuilder::DIBuilder((uint64_t)&v138, (_QWORD *)a1, 1, 0);
  v20 = *(uint64_t **)a1;
  v137 = **(_QWORD **)a1 + 1960;
  v136 = 0;
  v135 = 0u;
  v134[0] = a1;
  v134[1] = &v135;
  v134[2] = &v138;
  v133 = 1;
  v21 = *(_BYTE *)(a1 + 191);
  if (v21 >= 0)
    v22 = (unsigned __int8 *)(a1 + 168);
  else
    v22 = *(unsigned __int8 **)(a1 + 168);
  if (v21 >= 0)
    v23 = (_QWORD *)(v21 & 0x7F);
  else
    v23 = *(_QWORD **)(a1 + 176);
  LOBYTE(v125) = 0;
  LOBYTE(p_Function) = 0;
  LOBYTE(__p[0]) = 0;
  v121 = 0;
  v132 = sub_1C5394260(v139, v22, v23, "/", (_QWORD *)1, (uint64_t)&v125, (uint64_t)__p, 0, 1u);
  CompileUnit = (_BYTE *)llvm::DIBuilder::createCompileUnit((uint64_t)&v138, 2, (uint64_t)v132, "debugify", 8uLL, 1, (unsigned __int8 *)&unk_1C877348F, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
                           0,
                           0);
  v114 = (uint64_t **)a1;
  if (a2 != a3)
  {
    v117 = a1 + 216;
    v19 = 1;
    v112 = a3;
    v113 = a6;
    while (1)
    {
      v24 = a2 ? (llvm::GlobalValue *)(a2 - 56) : 0;
      if ((sub_1C5EED688(v24) & 1) == 0)
        break;
LABEL_24:
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == a3)
        goto LABEL_131;
    }
    TypeArray = llvm::DIBuilder::getOrCreateTypeArray((uint64_t)&v138, 0, 0);
    Impl = llvm::DISubroutineType::getImpl(v139, 0, 0, TypeArray, 0, 1);
    if ((*((_DWORD *)v24 + 8) & 0xFu) - 7 >= 2)
      v27 = 24;
    else
      v27 = 28;
    Function = 0;
    if ((*((_BYTE *)v24 + 23) & 0x10) == 0)
    {
      v39 = 0;
      v50 = 0;
      v49 = (unsigned __int8 *)&byte_1C871356D;
      v38 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_46;
    }
    v28 = ***(_QWORD ***)v24;
    v29 = *(_QWORD *)(v28 + 152);
    v30 = *(unsigned int *)(v28 + 168);
    v31 = v24 >> 4;
    if ((_DWORD)v30)
    {
      LODWORD(v32) = (v30 - 1) & (v31 ^ (v24 >> 9));
      v33 = (llvm::GlobalValue **)(v29 + 16 * v32);
      v34 = *v33;
      if (*v33 == v24)
      {
        v37 = v33[1];
        v40 = *(_QWORD *)v37;
        v38 = (unsigned __int8 *)v37 + 16;
        v39 = v40;
LABEL_39:
        LODWORD(v43) = (v30 - 1) & (v31 ^ (v24 >> 9));
        v44 = (llvm::GlobalValue **)(v29 + 16 * v43);
        v45 = *v44;
        if (*v44 == v24)
        {
LABEL_45:
          v48 = v44[1];
          v51 = *(_QWORD *)v48;
          v49 = (unsigned __int8 *)v48 + 16;
          v50 = v51;
LABEL_46:
          Function = (llvm::DISubprogram *)llvm::DIBuilder::createFunction((uint64_t)&v138, CompileUnit, v38, v39, v49, v50, v132, v19, Impl, v19, 0, v27, 0, 0, 0, 0, (unsigned __int8 *)&unk_1C877348F, 0);
          llvm::Value::setMetadata(v24, 0, Function);
          v125 = (unsigned __int8 *)&v133;
          v126 = &v137;
          v127 = &v138;
          p_Function = &Function;
          v129 = &v132;
          v130 = v134;
          v52 = (_QWORD **)*((_QWORD *)v24 + 10);
          if (v52 == (_QWORD **)((char *)v24 + 72))
          {
            v116 = 0;
          }
          else
          {
            v116 = 0;
            do
            {
              if (v52)
                v53 = (llvm::BasicBlock *)(v52 - 3);
              else
                v53 = 0;
              v54 = (_QWORD *)((char *)v53 + 40);
              v55 = (_QWORD *)*((_QWORD *)v53 + 6);
              while (v55 != v54)
              {
                if (v55)
                  v56 = v55 - 3;
                else
                  v56 = 0;
                v57 = (unsigned __int8 *)llvm::DILocation::getImpl(v20, v19, 1u, (uint64_t)Function, 0, 0, 0, 1);
                v124 = v57;
                if (v57)
                  llvm::MetadataTracking::track((uint64_t)&v124, v57, 2);
                v58 = (unsigned __int8 **)(v56 + 6);
                if (&v124 == v58)
                {
                  if (v124)
                    llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
                }
                else
                {
                  if (*v58)
                    llvm::MetadataTracking::untrack((uint64_t)v58, *v58);
                  v59 = v124;
                  *v58 = v124;
                  if (v59)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v124, v59, (uint64_t)v58);
                    v124 = 0;
                  }
                }
                v55 = (_QWORD *)v55[1];
                ++v19;
              }
              if (dword_1ED826A48 >= 1)
              {
                v60 = (_QWORD *)*((_QWORD *)v53 + 6);
                if (v60)
                  v61 = v60 - 3;
                else
                  v61 = 0;
                v62 = *((_QWORD *)v53 + 6);
                if (*((_BYTE *)v61 + 16) == 83)
                {
                  v62 = *((_QWORD *)v53 + 6);
                  do
                  {
                    v62 = *(_QWORD *)(v62 + 8);
                    v63 = v62 - 24;
                    if (!v62)
                      v63 = 0;
                  }
                  while (*(_BYTE *)(v63 + 16) == 83);
                }
                v64 = *(unsigned __int8 *)(v62 - 8) - 38;
                v65 = v64 > 0x38;
                v66 = (1 << v64) & 0x100060000000001;
                if (v65 || v66 == 0)
                {
                  v68 = sub_1C5EED790(v53);
                  v69 = v68;
                  while (1)
                  {
                    v70 = v60 - 3;
                    if (!v60)
                      v70 = 0;
                    if (*((_BYTE *)v70 + 16) != 83)
                      break;
                    v60 = (_QWORD *)v60[1];
                    if (v60 == v54)
                    {
                      v60 = v54;
                      goto LABEL_92;
                    }
                  }
                  v71 = *((unsigned __int8 *)v60 - 8) - 38;
                  v65 = v71 > 0x38;
                  v72 = (1 << v71) & 0x100060000000001;
                  if (!v65 && v72 != 0)
                    v60 = (_QWORD *)v60[1];
LABEL_92:
                  if (v61 != (_QWORD *)v68)
                  {
                    if (v60)
                      v74 = (uint64_t)(v60 - 3);
                    else
                      v74 = 0;
                    do
                    {
                      if (*(_BYTE *)(*v61 + 8) != 7)
                      {
                        v119 = 260;
                        v118[0] = v117;
                        llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v118);
                        v75 = v123;
                        if (v122 < 0)
                          operator delete(__p[0]);
                        if ((v75 - 26) > 3 || (*(_DWORD *)(*v61 + 8) & 0xFC | 2) != 0x12)
                        {
                          v76 = *((unsigned __int8 *)v61 + 16) - 38;
                          v65 = v76 > 0x38;
                          v77 = (1 << v76) & 0x100260000000001;
                          if (v65 || v77 == 0)
                          {
                            v81 = v61[4];
                            if (v81)
                              v82 = v81 == v61[5] + 40;
                            else
                              v82 = 1;
                            if (v82)
                              v74 = 0;
                            else
                              v74 = v81 - 24;
                          }
                          sub_1C5EED870((unsigned int **)&v125, v61, v74);
                          v116 = 1;
                        }
                      }
                      v79 = v61[4];
                      if (v79)
                        v80 = v79 == v61[5] + 40;
                      else
                        v80 = 1;
                      if (v80)
                        v61 = 0;
                      else
                        v61 = (_QWORD *)(v79 - 24);
                    }
                    while (v61 != (_QWORD *)v69);
                  }
                }
              }
              v52 = (_QWORD **)v52[1];
            }
            while (v52 != (_QWORD **)((char *)v24 + 72));
          }
          if (dword_1ED826A48 == 1 && (v116 & 1) == 0)
          {
            v83 = (_QWORD **)*((_QWORD *)v24 + 10);
            if (v83)
              v84 = (llvm::BasicBlock *)(v83 - 3);
            else
              v84 = 0;
            v85 = (uint64_t *)sub_1C5EED790(v84);
            sub_1C5EED870((unsigned int **)&v125, v85, (uint64_t)v85);
          }
          a3 = v112;
          v86 = *(_QWORD *)(v113 + 24);
          if (v86)
            (*(void (**)(uint64_t, const char **, llvm::GlobalValue *))(*(_QWORD *)v86 + 48))(v86, &v138, v24);
          llvm::DIBuilder::finalizeSubprogram((llvm::DIBuilder *)&v138, Function);
          goto LABEL_24;
        }
        v46 = 1;
        while (v45 != (llvm::GlobalValue *)-4096)
        {
          v47 = v43 + v46++;
          v43 = v47 & (v30 - 1);
          v45 = *(llvm::GlobalValue **)(v29 + 16 * v43);
          if (v45 == v24)
          {
            v44 = (llvm::GlobalValue **)(v29 + 16 * v43);
            goto LABEL_45;
          }
        }
LABEL_44:
        v44 = (llvm::GlobalValue **)(v29 + 16 * v30);
        goto LABEL_45;
      }
      v35 = 1;
      while (v34 != (llvm::GlobalValue *)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v30 - 1);
        v34 = *(llvm::GlobalValue **)(v29 + 16 * v32);
        if (v34 == v24)
          goto LABEL_38;
      }
    }
    v32 = v30;
LABEL_38:
    v41 = *(_QWORD **)(v29 + 16 * v32 + 8);
    v42 = *v41;
    v38 = (unsigned __int8 *)(v41 + 2);
    v39 = v42;
    if (!(_DWORD)v30)
      goto LABEL_44;
    goto LABEL_39;
  }
LABEL_131:
  llvm::DIBuilder::finalize((llvm::DIBuilder *)&v138);
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v114, "llvm.debugify", 0xDuLL);
  v89 = v19 - 1;
  v90 = *(llvm::ConstantInt **)v137;
  v91 = *(_DWORD *)(v137 + 8);
  LODWORD(v126) = v91 >> 8;
  if (v91 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v125, v89, 0);
  }
  else
  {
    if (v91 <= 0xFF)
      v92 = 0;
    else
      v92 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v91);
    v125 = (unsigned __int8 *)(v92 & v89);
  }
  v13 = 0;
  v94 = llvm::ConstantInt::get(v90, (llvm::LLVMContext *)&v125, v87);
  if (v126 >= 0x41 && v125)
    MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
  __p[0] = llvm::ValueAsMetadata::get(v94, v93);
  v95 = (unsigned __int8 *)llvm::MDTuple::getImpl(v20, __p, 1, 0, 1);
  v125 = v95;
  v97 = *(_QWORD *)(inserted + 48);
  v98 = *(unsigned int *)(v97 + 8);
  if (v98 >= *(_DWORD *)(v97 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(inserted + 48), &v125);
  }
  else
  {
    v99 = v95;
    v100 = (unsigned __int8 **)(*(_QWORD *)v97 + 8 * v98);
    *v100 = v99;
    if (v99)
    {
      llvm::MetadataTracking::track((uint64_t)v100, v99, 2);
      LODWORD(v98) = *(_DWORD *)(v97 + 8);
    }
    *(_DWORD *)(v97 + 8) = v98 + 1;
  }
  v101 = (v133 - 1);
  v102 = *(llvm::ConstantInt **)v137;
  v103 = *(_DWORD *)(v137 + 8);
  LODWORD(v126) = v103 >> 8;
  if (v103 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v125, v101, 0);
  }
  else
  {
    if (v103 <= 0xFF)
      v104 = 0;
    else
      v104 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v103);
    v125 = (unsigned __int8 *)(v104 & v101);
  }
  v106 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v125, v96);
  if (v126 >= 0x41 && v125)
    MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
  __p[0] = llvm::ValueAsMetadata::get(v106, v105);
  v107 = (unsigned __int8 *)llvm::MDTuple::getImpl(v20, __p, 1, 0, 1);
  v125 = v107;
  v108 = *(_QWORD *)(inserted + 48);
  v109 = *(unsigned int *)(v108 + 8);
  if (v109 >= *(_DWORD *)(v108 + 12))
  {
    sub_1C5419FD8(*(_QWORD *)(inserted + 48), &v125);
  }
  else
  {
    v110 = v107;
    v111 = (unsigned __int8 **)(*(_QWORD *)v108 + 8 * v109);
    *v111 = v110;
    if (v110)
    {
      llvm::MetadataTracking::track((uint64_t)v111, v110, 2);
      LODWORD(v109) = *(_DWORD *)(v108 + 8);
    }
    *(_DWORD *)(v108 + 8) = v109 + 1;
  }
  if (!llvm::Module::getModuleFlag((uint64_t)v114, "Debug Info Version", 0x12uLL))
    llvm::Module::addModuleFlag(v114, (llvm::Type *)2, "Debug Info Version", 0x12uLL, (llvm::Type *)3);
  MEMORY[0x1CAA32FB4](v135, 8);
  sub_1C50F023C((uint64_t)&v138);
  return v13 == 0;
}

uint64_t sub_1C5EED688(llvm::GlobalValue *this)
{
  int v2;
  uint64_t result;
  llvm::GlobalValue *Section;
  uint64_t v5;

  v2 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    if (v2 == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 1;
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 1;
  }
  result = 1;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x7D5) != 0)
  {
    if (v2 == 3)
    {
      Section = llvm::GlobalValue::getSection(this);
      if (v5 == 12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        return 1;
      }
    }
    if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (result = 1, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
    {
      result = *((_QWORD *)this + 5);
      if (result)
      {
        result = llvm::Module::getSemanticInterposition((llvm::Module *)result);
        if ((_DWORD)result)
          return (*((_BYTE *)this + 33) & 0x40) == 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C5EED790(llvm::BasicBlock *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  result = llvm::BasicBlock::getTerminatingMustTailCall(a1);
  if (!result)
  {
    v3 = (_QWORD *)*((_QWORD *)a1 + 5);
    if (v3 == (_QWORD *)((char *)a1 + 40))
    {
      return 0;
    }
    else
    {
      v4 = v3 - 3;
      if (!v3)
        v4 = 0;
      v5 = *((unsigned __int8 *)v4 + 16);
      v6 = v5 == 29;
      if (v5 == 29)
        v7 = v4;
      else
        v7 = 0;
      if (v3
        && v6
        && ((v8 = *((_QWORD *)a1 + 6)) != 0 ? (v9 = (_QWORD *)(v8 - 24)) : (v9 = 0),
            v7 != v9
         && (v10 = v7 + 3, *(_QWORD **)(v7[5] + 48) != v7 + 3)
         && (v11 = *v10) != 0
         && *(_BYTE *)(v11 - 8) == 84
         && (v12 = *(_QWORD *)(v11 - 56)) != 0
         && !*(_BYTE *)(v12 + 16)
         && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 48)
         && *(_DWORD *)(v12 + 36) == 119))
      {
        return v11 - 24;
      }
      else if (*((unsigned __int8 *)v4 + 16) - 29 >= 0xB)
      {
        return 0;
      }
      else
      {
        return (uint64_t)v4;
      }
    }
  }
  return result;
}

void sub_1C5EED870(unsigned int **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  BOOL v8;
  const llvm::APInt *v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  llvm::ConstantInt *v13;
  uint64_t v14;
  unsigned int *v15;
  void **v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  llvm::MDNode *BasicType;
  char *v30;
  unint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  llvm::MDNode *Impl;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  size_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  void *v61[2];
  char v62;
  std::string v63;
  void *__p[2];
  _QWORD v65[2];

  v65[1] = *MEMORY[0x1E0C80C00];
  v6 = **a1;
  **a1 = v6 + 1;
  if ((_DWORD)v6)
  {
    v7 = (char *)v65 + 5;
    do
    {
      *--v7 = (v6 % 0xA) | 0x30;
      v8 = v6 > 9;
      v6 /= 0xAuLL;
    }
    while (v8);
  }
  else
  {
    v7 = (char *)v65 + 4;
    BYTE4(v65[0]) = 48;
  }
  sub_1C4E61270(v61, v7, (char *)v65 + 5, (char *)v65 + 5 - v7);
  v10 = *a2;
  v11 = (llvm::ValueHandleBase *)a2;
  if (*(_BYTE *)(*a2 + 8) == 7)
  {
    v12 = *(_QWORD *)a1[1];
    v13 = *(llvm::ConstantInt **)v12;
    LODWORD(__p[1]) = *(_DWORD *)(v12 + 8) >> 8;
    if (LODWORD(__p[1]) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
    else
      __p[0] = 0;
    v11 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)__p, v9);
    if (LODWORD(__p[1]) >= 0x41 && __p[0])
      MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
    v10 = *(_QWORD *)v11;
  }
  v14 = a2[6];
  v15 = a1[2];
  v16 = (void **)v61[0];
  if (v62 >= 0)
    v16 = v61;
  v59 = (unsigned __int8 *)v16;
  v60 = *(unsigned __int8 **)a1[3];
  v17 = (void *)(v62 & 0x7F);
  if (v62 < 0)
    v17 = v61[1];
  v58 = (size_t)v17;
  v18 = (uint64_t *)a1[5];
  v19 = *(_QWORD *)a1[4];
  v57 = *(_DWORD *)(v14 + 4);
  v20 = sub_1C5EF282C(*v18, v10);
  v21 = v20;
  v22 = v18[1];
  v23 = *(_DWORD *)(v22 + 16);
  if (v23)
  {
    v27 = (v23 - 1) & (37 * v20);
    v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v27);
    v28 = *v24;
    if (v20 == *v24)
      goto LABEL_23;
    v47 = 0;
    v48 = 1;
    while (v28 != -1)
    {
      if (v47)
        v49 = 0;
      else
        v49 = v28 == -2;
      if (v49)
        v47 = v24;
      v50 = v27 + v48++;
      v27 = v50 & (v23 - 1);
      v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v27);
      v28 = *v24;
      if (v20 == *v24)
        goto LABEL_23;
    }
    if (v47)
      v24 = v47;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_DWORD *)(v22 + 8);
  if (4 * v25 + 4 >= 3 * v23)
  {
    sub_1C53061CC(v18[1], 2 * v23);
    v40 = *(_DWORD *)(v22 + 16) - 1;
    v41 = v40 & (37 * v21);
    v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v41);
    v42 = *v24;
    if (v21 == *v24)
    {
LABEL_63:
      v26 = v21;
      goto LABEL_19;
    }
    v43 = 0;
    v44 = 1;
    while (v42 != -1)
    {
      if (v43)
        v45 = 0;
      else
        v45 = v42 == -2;
      if (v45)
        v43 = v24;
      v46 = v41 + v44++;
      v41 = v46 & v40;
      v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v41);
      v42 = *v24;
      if (v21 == *v24)
        goto LABEL_63;
    }
LABEL_79:
    if (v43)
      v24 = v43;
    goto LABEL_18;
  }
  if (v23 + ~v25 - *(_DWORD *)(v22 + 12) <= v23 >> 3)
  {
    sub_1C53061CC(v18[1], v23);
    v51 = *(_DWORD *)(v22 + 16) - 1;
    v52 = v51 & (37 * v21);
    v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v52);
    v53 = *v24;
    if (v21 == *v24)
      goto LABEL_63;
    v43 = 0;
    v54 = 1;
    while (v53 != -1)
    {
      if (v43)
        v55 = 0;
      else
        v55 = v53 == -2;
      if (v55)
        v43 = v24;
      v56 = v52 + v54++;
      v52 = v56 & v51;
      v24 = (uint64_t *)(*(_QWORD *)v22 + 16 * v52);
      v53 = *v24;
      if (v21 == *v24)
        goto LABEL_63;
    }
    goto LABEL_79;
  }
LABEL_18:
  v26 = *v24;
LABEL_19:
  ++*(_DWORD *)(v22 + 8);
  if (v26 != -1)
    --*(_DWORD *)(v22 + 12);
  *v24 = v21;
  v24[1] = 0;
LABEL_23:
  BasicType = (llvm::MDNode *)v24[1];
  if (!BasicType)
  {
    if (v21)
    {
      v30 = (char *)v65 + 5;
      v31 = v21;
      do
      {
        *--v30 = (v31 % 0xA) | 0x30;
        v8 = v31 > 9;
        v31 /= 0xAuLL;
      }
      while (v8);
    }
    else
    {
      v30 = (char *)v65 + 4;
      BYTE4(v65[0]) = 48;
    }
    sub_1C4E61270(&v63, v30, (char *)v65 + 5, (char *)v65 + 5 - v30);
    v32 = std::string::insert(&v63, 0, "ty");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65[0] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (v65[0] >= 0)
      v34 = (unsigned __int8 *)__p;
    else
      v34 = (unsigned __int8 *)__p[0];
    if (v65[0] >= 0)
      v35 = (_QWORD *)(HIBYTE(v65[0]) & 0x7F);
    else
      v35 = __p[1];
    BasicType = llvm::DIBuilder::createBasicType(v18[2], v34, v35, v21, 7, 0);
    v24[1] = (uint64_t)BasicType;
    if (SHIBYTE(v65[0]) < 0)
    {
      operator delete(__p[0]);
      BasicType = (llvm::MDNode *)v24[1];
    }
  }
  v36 = sub_1C5393B20(*((uint64_t **)v15 + 1), (uint64_t)(v15 + 100), v60, v59, v58, 0, v19, v57, (uint64_t)BasicType, 1u, 0, 0, 0);
  v37 = (uint64_t)a1[2];
  Impl = llvm::DIExpression::getImpl(*(_QWORD **)(v37 + 8), 0, 0, 0, 1);
  v39 = 0;
  if (a3)
    v39 = *(_QWORD *)(a3 + 40);
  llvm::DIBuilder::insertDbgValueIntrinsic(v37, v11, (uint64_t)v36, (uint64_t)Impl, v14, v39, a3);
  if (v62 < 0)
    operator delete(v61[0]);
}

uint64_t llvm::stripDebugifyMetadata(uint64_t **this, llvm::Module *a2)
{
  llvm::Module *v3;
  llvm::NamedMDNode *NamedMetadata;
  char v5;
  llvm::Function *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[16];
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = "llvm.debugify";
  v27 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v24);
  if (NamedMetadata)
    llvm::Module::eraseNamedMetadata((llvm::Module *)this, NamedMetadata);
  v5 = llvm::StripDebugInfo((llvm *)this, v3);
  v6 = (llvm::Function *)sub_1C4FB7E80(this[14], "llvm.dbg.value", 0xEuLL);
  if (v6 && !*((_BYTE *)v6 + 16))
  {
    llvm::Function::eraseFromParent(v6);
    v5 = 1;
  }
  v24 = "llvm.module.flags";
  v27 = 259;
  v7 = llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v24);
  if (v7)
  {
    v9 = v7;
    v10 = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 8);
    v24 = v26;
    v25 = 0x400000000;
    sub_1C63A9F68((unsigned int *)&v24, v9, 0, v9, v10);
    llvm::NamedMDNode::clearOperands(v9);
    if ((_DWORD)v25)
    {
      v11 = (unsigned __int8 **)v24;
      v12 = 8 * v25;
      do
      {
        v13 = *v11;
        v14 = *(_QWORD *)(*(_QWORD *)&(*v11)[-8 * *((unsigned int *)*v11 + 2) + 8] + 8);
        if (*(_QWORD *)v14 == 18
          && ((v15 = *(_QWORD *)(v14 + 24),
               v16 = *(_QWORD *)(v14 + 32),
               v17 = *(unsigned __int16 *)(v14 + 40),
               v15 == 0x6E49206775626544)
            ? (v18 = v16 == 0x6973726556206F66)
            : (v18 = 0),
              v18 ? (v19 = v17 == 28271) : (v19 = 0),
              v19))
        {
          v5 = 1;
        }
        else
        {
          v23 = *v11;
          v20 = *(_QWORD *)(v9 + 48);
          v21 = *(unsigned int *)(v20 + 8);
          if (v21 >= *(_DWORD *)(v20 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(v9 + 48), &v23);
          }
          else
          {
            v22 = (unsigned __int8 **)(*(_QWORD *)v20 + 8 * v21);
            *v22 = v13;
            llvm::MetadataTracking::track((uint64_t)v22, v13, 2);
            ++*(_DWORD *)(v20 + 8);
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    if (!*(_DWORD *)(*(_QWORD *)(v9 + 48) + 8))
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v9 + 40), (llvm::NamedMDNode *)v9);
    if (v24 != v26)
      free(v24);
  }
  return v5 & 1;
}

BOOL llvm::collectDebugInfoMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t NamedMetadata;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::GlobalValue *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::GlobalValue **v20;
  llvm::GlobalValue *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  llvm::GlobalValue **v29;
  llvm::GlobalValue *v30;
  llvm::GlobalValue **v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *i;
  uint64_t v47;
  int v48;
  llvm::DbgVariableIntrinsic *v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  int32x2_t ****v53;
  int32x2_t *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int32x2_t *****v59;
  int32x2_t ****v60;
  int v61;
  int v62;
  BOOL v63;
  llvm::GlobalValue **v64;
  llvm::GlobalValue *v65;
  llvm::raw_ostream *v66;
  llvm::raw_ostream *v67;
  void *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t *v76;
  int32x2_t ****v77;
  __int16 v78;

  *(_QWORD *)&v75 = "llvm.dbg.cu";
  v78 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&v75);
  v12 = NamedMetadata;
  if (NamedMetadata)
  {
    if (a2 != a3)
    {
      v13 = (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 4;
      v74 = a4 + 144;
      v14 = &unk_1ED826000;
      v71 = a3;
      v72 = NamedMetadata;
      do
      {
        if (a2)
          v15 = (llvm::GlobalValue *)(a2 - 56);
        else
          v15 = 0;
        v16 = *(unsigned int *)(a4 + 16);
        v17 = v15 >> 4;
        if ((_DWORD)v16)
        {
          v18 = *(_QWORD *)a4;
          LODWORD(v19) = (v17 ^ (v15 >> 9)) & (v16 - 1);
          v20 = (llvm::GlobalValue **)(*(_QWORD *)a4 + 16 * v19);
          v21 = *v20;
          if (v15 == *v20)
          {
LABEL_13:
            if (v20 != (llvm::GlobalValue **)(v18 + 16 * v16))
              goto LABEL_89;
          }
          else
          {
            v22 = 1;
            while (v21 != (llvm::GlobalValue *)-4096)
            {
              v23 = v19 + v22++;
              v19 = v23 & (v16 - 1);
              v21 = *(llvm::GlobalValue **)(v18 + 16 * v19);
              if (v15 == v21)
              {
                v20 = (llvm::GlobalValue **)(v18 + 16 * v19);
                goto LABEL_13;
              }
            }
          }
        }
        if ((sub_1C5EED688(v15) & 1) == 0)
        {
          if ((unint64_t)++v13 >= v14[304])
            return v12 != 0;
          if ((*((_BYTE *)v15 + 23) & 0x20) == 0)
            goto LABEL_32;
          v24 = ***(_QWORD ***)v15;
          *(_QWORD *)&v75 = v15;
          v25 = *(_DWORD *)(v24 + 2496);
          if (!v25)
          {
            v64 = 0;
            goto LABEL_95;
          }
          v26 = *(_QWORD *)(v24 + 2480);
          v27 = v25 - 1;
          v28 = v27 & (v17 ^ (v15 >> 9));
          v29 = (llvm::GlobalValue **)(v26 + 40 * v28);
          v30 = *v29;
          if (*v29 != v15)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != (llvm::GlobalValue *)-4096)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == (llvm::GlobalValue *)-8192;
              if (v33)
                v31 = v29;
              v34 = v28 + v32++;
              v28 = v34 & v27;
              v29 = (llvm::GlobalValue **)(v26 + 40 * v28);
              v30 = *v29;
              if (*v29 == v15)
                goto LABEL_27;
            }
            if (v31)
              v64 = v31;
            else
              v64 = v29;
LABEL_95:
            v29 = (llvm::GlobalValue **)sub_1C541AB24(v24 + 2480, (uint64_t)&v75, (uint64_t *)&v75, v64);
            v65 = (llvm::GlobalValue *)v75;
            v29[4] = 0;
            v29[3] = 0;
            *v29 = v65;
            v29[1] = (llvm::GlobalValue *)(v29 + 3);
            v29[2] = (llvm::GlobalValue *)0x100000000;
          }
LABEL_27:
          v35 = *((unsigned int *)v29 + 4);
          if ((_DWORD)v35)
          {
            v36 = (_QWORD *)((char *)v29[1] + 8);
            v37 = 16 * v35;
            while (*((_DWORD *)v36 - 2))
            {
              v38 = 0;
              v36 += 2;
              v37 -= 16;
              if (!v37)
                goto LABEL_33;
            }
            v38 = *v36;
          }
          else
          {
LABEL_32:
            v38 = 0;
          }
LABEL_33:
          *(_QWORD *)&v75 = v15;
          *((_QWORD *)&v75 + 1) = v38;
          sub_1C63A94AC(a4, &v75);
          if (v38)
          {
            v39 = *(_QWORD *)(v38 - 8 * *(unsigned int *)(v38 + 8) + 56);
            if (v39)
              v40 = (_QWORD *)(v39 - 8 * *(unsigned int *)(v39 + 8));
            else
              v40 = 0;
            while (v40 != (_QWORD *)v39)
            {
              v41 = (_BYTE *)*v40;
              if (*(_BYTE *)*v40 != 25)
                v41 = 0;
              *(_QWORD *)&v75 = v41;
              if (v41)
                *(_DWORD *)sub_1C6324830(v74, (uint64_t *)&v75) = 0;
              ++v40;
            }
          }
          v42 = (char *)v15 + 72;
          v43 = (char *)*((_QWORD *)v15 + 10);
          if (v43 != (char *)v15 + 72)
          {
            v73 = v13;
            do
            {
              v44 = v43 - 24;
              if (!v43)
                v44 = 0;
              v45 = v44 + 40;
              for (i = (_QWORD *)*((_QWORD *)v44 + 6); i != v45; i = (_QWORD *)i[1])
              {
                if (i)
                  v47 = (uint64_t)(i - 3);
                else
                  v47 = 0;
                if (*(_BYTE *)(v47 + 16) != 83)
                {
                  if (dword_1ED826A48 >= 1
                    && ((v48 = sub_1C53923FC(v47)) == 0 ? (v49 = 0) : (v49 = (llvm::DbgVariableIntrinsic *)v47),
                        i && v48))
                  {
                    if (v38)
                    {
                      v50 = *(_QWORD *)(v47 + 48);
                      if ((*(_DWORD *)(v50 + 8) != 2 || !*(_QWORD *)(v50 - 8)) && !sub_1C631CA9C(v49))
                      {
                        *(_QWORD *)&v75 = 0;
                        *(_QWORD *)&v75 = *(_QWORD *)(((_QWORD *)v49 - 4 * (*((_DWORD *)v49 + 5) & 0x7FFFFFF))[4] + 24);
                        v51 = (_DWORD *)sub_1C6324830(v74, (uint64_t *)&v75);
                        ++*v51;
                      }
                    }
                  }
                  else if (!sub_1C4D99D08(v47))
                  {
                    *(_QWORD *)&v75 = v47;
                    *((_QWORD *)&v75 + 1) = 4;
                    v76 = 0;
                    v77 = (int32x2_t ****)v47;
                    if (v47 != -8192 && v47 != -4096 && v47)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&v75 + 8));
                    sub_1C63A9548((_QWORD *)(a4 + 96), (uint64_t *)&v75);
                    if (v77 != (int32x2_t ****)-8192 && v77 != (int32x2_t ****)-4096 && v77)
                    {
                      v52 = *((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(*((_QWORD *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8) = v76;
                      if (v76)
                      {
                        *v76 = *v76 & 7 | v52;
                      }
                      else
                      {
                        v53 = v77;
                        v54 = ***v77;
                        v55 = (unint64_t)v54[303];
                        if (v55 <= v52)
                        {
                          v56 = v54[305].u32[0];
                          if (v55 + 16 * v56 > v52)
                          {
                            v57 = v56 - 1;
                            LODWORD(v58) = v57 & ((v77 >> 4) ^ (v77 >> 9));
                            v59 = (int32x2_t *****)(v55 + 16 * v58);
                            v60 = *v59;
                            if (v77 == *v59)
                            {
LABEL_82:
                              *v59 = (int32x2_t ****)-8192;
                              v54[304] = vadd_s32(v54[304], (int32x2_t)0x1FFFFFFFFLL);
                              v53 = v77;
                            }
                            else
                            {
                              v61 = 1;
                              while (v60 != (int32x2_t ****)-4096)
                              {
                                v62 = v58 + v61++;
                                v58 = v62 & v57;
                                v60 = *(int32x2_t *****)(v55 + 16 * v58);
                                if (v77 == v60)
                                {
                                  v59 = (int32x2_t *****)(v55 + 16 * v58);
                                  goto LABEL_82;
                                }
                              }
                            }
                            *((_BYTE *)v53 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v63 = *(_QWORD *)(v47 + 48) != 0;
                    *(_QWORD *)&v75 = v47;
                    BYTE8(v75) = v63;
                    sub_1C63A95E4(a4 + 48, &v75);
                  }
                }
              }
              v43 = (char *)*((_QWORD *)v43 + 1);
            }
            while (v43 != v42);
            a3 = v71;
            v12 = v72;
            v13 = v73;
          }
          v14 = (_QWORD *)&unk_1ED826000;
        }
LABEL_89:
        a2 = *(_QWORD *)(a2 + 8);
      }
      while (a2 != a3);
    }
  }
  else
  {
    if (byte_1ED8268C0)
      v66 = (llvm::raw_ostream *)llvm::nulls(0);
    else
      v66 = (llvm::raw_ostream *)llvm::errs(0);
    v67 = v66;
    v69 = *((_QWORD *)v66 + 3);
    v68 = (void *)*((_QWORD *)v66 + 4);
    if (a6 <= v69 - (uint64_t)v68)
    {
      if (a6)
      {
        memcpy(v68, a5, a6);
        v68 = (void *)(*((_QWORD *)v67 + 4) + a6);
        *((_QWORD *)v67 + 4) = v68;
      }
    }
    else
    {
      v67 = llvm::raw_ostream::write(v67, (const char *)a5, a6);
      v68 = (void *)*((_QWORD *)v67 + 4);
    }
    if (*((_QWORD *)v67 + 3) - (_QWORD)v68 > 0x24uLL)
    {
      qmemcpy(v68, ": Skipping module without debug info\n", 37);
      *((_QWORD *)v67 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v67, ": Skipping module without debug info\n", 0x25uLL);
    }
  }
  return v12 != 0;
}

uint64_t llvm::checkDebugInfoMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, void *a7, size_t a8, _BYTE *a9, size_t a10)
{
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  size_t v25;
  llvm::GlobalValue *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  llvm::GlobalValue **v31;
  llvm::GlobalValue *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  llvm::GlobalValue **v40;
  llvm::GlobalValue *v41;
  llvm::GlobalValue **v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  _QWORD ***v53;
  _QWORD **v54;
  _QWORD **v55;
  _QWORD **v56;
  _QWORD *k;
  uint64_t v58;
  int v59;
  llvm::DbgVariableIntrinsic *v60;
  uint64_t v61;
  _DWORD *v62;
  BOOL v63;
  llvm::GlobalValue **v64;
  llvm::GlobalValue *v65;
  size_t v66;
  char *v67;
  uint64_t v68;
  size_t *v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  size_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  size_t v90;
  _BYTE *v91;
  llvm *v92;
  _QWORD *v93;
  _QWORD *v94;
  llvm::raw_ostream *v95;
  void *v96;
  _QWORD *v97;
  llvm::raw_ostream *v98;
  llvm::raw_ostream *v99;
  llvm::raw_ostream *v100;
  _DWORD *v101;
  void *v102;
  uint64_t ***v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t ****v108;
  uint64_t ***v109;
  int v110;
  int v111;
  _DWORD *v112;
  void *v113;
  uint64_t ***v114;
  uint64_t v115;
  uint64_t ***v116;
  int v117;
  int v118;
  size_t *v119;
  const void *v120;
  size_t v121;
  size_t v122;
  _WORD *v123;
  uint64_t ***v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t ****v138;
  uint64_t ***v139;
  int v140;
  int v141;
  uint64_t ***v142;
  unsigned __int8 *v143;
  unint64_t v144;
  unint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t ***v150;
  unsigned __int8 *v151;
  unint64_t v152;
  unint64_t v153;
  __n128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t ***v159;
  uint64_t ***v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t ****v165;
  uint64_t ***v166;
  int v167;
  int v168;
  uint64_t ***v169;
  size_t v170;
  char *v171;
  size_t v172;
  size_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t ****v178;
  uint64_t ***v179;
  int v180;
  int v181;
  size_t *v182;
  llvm::raw_ostream *v183;
  llvm::raw_ostream *v184;
  llvm::raw_ostream *v185;
  uint64_t v186;
  void *v187;
  llvm::raw_ostream *v188;
  const char *v189;
  size_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  _WORD *v194;
  _QWORD *v195;
  void **v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  size_t v203;
  __n128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void **v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  size_t v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm::raw_ostream *v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  llvm::raw_ostream *v224;
  uint64_t v225;
  void *v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t i;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  uint64_t v233;
  size_t *v234;
  const void *v235;
  size_t v236;
  size_t v237;
  void *v238;
  _QWORD *v239;
  unint64_t v240;
  __n128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t j;
  uint64_t v247;
  size_t *v248;
  const void *v249;
  size_t v250;
  size_t v251;
  void *v252;
  _DWORD *v253;
  llvm::raw_ostream *v254;
  llvm::raw_ostream *v255;
  void *v256;
  std::string *v257;
  size_t size;
  llvm::raw_ostream *v259;
  llvm::raw_ostream *v260;
  _WORD *v261;
  void *v262;
  _BYTE *v263;
  uint64_t v264;
  BOOL v265;
  size_t v266;
  const char *v267;
  size_t v268;
  llvm::raw_ostream *v269;
  void *v270;
  uint64_t v271;
  llvm::raw_ostream *v272;
  llvm::raw_ostream *v273;
  llvm::raw_ostream *v274;
  llvm::raw_ostream *v275;
  int *v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  int v280;
  char v281;
  const void *v282;
  size_t v283;
  char *__s;
  char *v285;
  char *v286;
  void *__src;
  uint64_t v288;
  char v289;
  size_t __n;
  uint64_t v291;
  __int128 v292;
  unint64_t v293;
  _QWORD v294[2];
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD v299[2];
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD v304[2];
  int v305;
  char *v306;
  char *v307;
  char *v308;
  _QWORD v309[2];
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD v314[2];
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD v319[2];
  int v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  _QWORD v324[2];
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD v329[2];
  int v330;
  __int128 v331;
  _QWORD v332[4];
  __int128 v333;
  _BYTE v334[32];
  __int128 v335;
  _QWORD v336[4];
  _BYTE *v337;
  _BYTE *v338;
  uint64_t v339;
  void *__p[2];
  unint64_t v341;
  void **__dst[2];
  unint64_t v343;
  std::error_code v344;
  unint64_t v345;
  void *v346[2];
  unint64_t v347;
  __int128 v348;
  uint64_t v349;
  _QWORD v350[3];
  uint64_t v351[3];
  _BYTE v352[32];
  uint64_t v353[3];
  _BYTE v354[32];
  uint64_t v355[3];
  _BYTE v356[32];
  uint64_t v357[3];
  _BYTE v358[32];
  _BYTE v359[24];
  unint64_t v360;
  std::string v361;
  unint64_t v362;
  uint64_t v363;

  v363 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v348 = "llvm.dbg.cu";
  LOWORD(v350[0]) = 259;
  if (llvm::Module::getNamedMetadata(a1, (uint64_t)&v348))
  {
    __src = a7;
    v288 = a1;
    v282 = a5;
    v283 = a6;
    __n = a8;
    v329[1] = 0;
    v329[0] = 0;
    v330 = 0;
    v331 = 0u;
    memset(v332, 0, 28);
    v333 = 0u;
    memset(v334, 0, 28);
    v335 = 0u;
    memset(v336, 0, 28);
    v339 = 0;
    v337 = 0;
    v338 = 0;
    v291 = a4;
    if (a2 == a3)
    {
LABEL_13:
      *(_QWORD *)&v348 = "llvm.dbg.cu";
      LOWORD(v350[0]) = 259;
      v24 = ***(_QWORD ***)(llvm::Module::getNamedMetadata(v288, (uint64_t)&v348) + 48);
      if (*(_BYTE *)v24 == 15)
      {
        v25 = __n;
      }
      else
      {
        v24 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
        v25 = __n;
        if (!v24)
        {
          v66 = 0;
          v67 = (char *)&unk_1C877348F;
          goto LABEL_92;
        }
      }
      v68 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
      if (!v68)
      {
        v66 = 0;
        v286 = 0;
LABEL_93:
        v324[0] = 0;
        v324[1] = 0;
        v325 = 0;
        sub_1C4DFEB14((uint64_t)v324, a4);
        v326 = 0;
        v327 = 0;
        v328 = 0;
        sub_1C4EECB34(&v326, *(_BYTE **)(a4 + 24), *(_BYTE **)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 4);
        v319[0] = 0;
        v319[1] = 0;
        v320 = 0;
        sub_1C4DFEB14((uint64_t)v319, (uint64_t)v329);
        v321 = 0;
        v322 = 0;
        v323 = 0;
        sub_1C4EECB34(&v321, (_BYTE *)v331, *((_BYTE **)&v331 + 1), (uint64_t)(*((_QWORD *)&v331 + 1) - v331) >> 4);
        v314[0] = 0;
        v314[1] = 0;
        v315 = 0;
        sub_1C4DFEB14((uint64_t)v314, a4 + 48);
        v316 = 0;
        v317 = 0;
        v318 = 0;
        sub_1C4EECB34(&v316, *(_BYTE **)(a4 + 72), *(_BYTE **)(a4 + 80), (uint64_t)(*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 4);
        v309[0] = 0;
        v309[1] = 0;
        v310 = 0;
        sub_1C4DFEB14((uint64_t)v309, (uint64_t)&v332[1]);
        v311 = 0;
        v312 = 0;
        v313 = 0;
        sub_1C4EECB34(&v311, (_BYTE *)v333, *((_BYTE **)&v333 + 1), (uint64_t)(*((_QWORD *)&v333 + 1) - v333) >> 4);
        v304[0] = 0;
        v304[1] = 0;
        v305 = 0;
        sub_1C4DFEB14((uint64_t)v304, a4 + 96);
        v306 = 0;
        v307 = 0;
        v308 = 0;
        v71 = *(_QWORD *)(a4 + 120);
        v72 = *(_QWORD *)(a4 + 128);
        v73 = v72 - v71;
        if (v72 != v71)
        {
          if (v73 < 0)
LABEL_487:
            abort();
          v74 = v73 >> 5;
          v75 = (char *)operator new(v73);
          v76 = 0;
          v306 = v75;
          v307 = v75;
          v308 = &v75[32 * v74];
          do
          {
            sub_1C5EF28D4(&v75[v76], (_QWORD *)(v71 + v76));
            v76 += 32;
          }
          while (v71 + v76 != v72);
          v307 = &v75[v76];
        }
        v77 = a10;
        v299[0] = 0;
        v299[1] = 0;
        v300 = 0;
        sub_1C4DFEB14((uint64_t)v299, a4 + 144);
        v301 = 0;
        v302 = 0;
        v303 = 0;
        sub_1C4EECB34(&v301, *(_BYTE **)(a4 + 168), *(_BYTE **)(a4 + 176), (uint64_t)(*(_QWORD *)(a4 + 176) - *(_QWORD *)(a4 + 168)) >> 4);
        v294[0] = 0;
        v294[1] = 0;
        v295 = 0;
        sub_1C4DFEB14((uint64_t)v294, (uint64_t)&v336[1]);
        v296 = 0;
        v297 = 0;
        v298 = 0;
        v78 = (unint64_t)sub_1C4EECB34(&v296, v337, v338, (v338 - v337) >> 4);
        v292 = 0uLL;
        v293 = 0;
        v79 = v321;
        v80 = v322;
        v81 = &unk_1ED826000;
        if (v321 == v322)
        {
          v289 = 1;
LABEL_100:
          v82 = v311;
          v83 = v312;
          if (v311 == v312)
          {
            v84 = 1;
LABEL_102:
            v281 = v84;
            v85 = v301;
            v86 = v302;
            if (v301 == v302)
            {
              LOBYTE(v87) = 1;
              v88 = a10;
            }
            else
            {
              LOBYTE(v87) = 1;
              v88 = a10;
              do
              {
                v78 = sub_1C63A9B88((uint64_t)v294, *(_QWORD *)v85);
                if (v297 != v78 && *(_DWORD *)(v85 + 8) > *(_DWORD *)(v78 + 8))
                {
                  if (v88)
                  {
                    sub_1C4D655B0((uint64_t *)&v348, "metadata", 8uLL);
                    sub_1C4D67324((uint64_t)&v349, "dbg-var-intrinsic", 0x11uLL);
                    sub_1C4D655B0(v351, "name", 4uLL);
                    v221 = *(_QWORD *)(*(_QWORD *)v85 - 8 * *(unsigned int *)(*(_QWORD *)v85 + 8) + 8);
                    if (v221)
                    {
                      v227 = *(_QWORD **)(v221 + 8);
                      v228 = *v227;
                      v223 = (unsigned __int8 *)(v227 + 3);
                      v222 = v228;
                    }
                    else
                    {
                      v222 = 0;
                      v223 = 0;
                    }
                    sub_1C4D67324((uint64_t)v352, v223, v222);
                    sub_1C4D655B0(v353, "fn-name", 7uLL);
                    for (i = *(_QWORD *)(*(_QWORD *)v85 - 8 * *(unsigned int *)(*(_QWORD *)v85 + 8));
                          (*(_BYTE *)i & 0xFE) == 0x12;
                    v230 = *(_QWORD *)(i - 8 * *(unsigned int *)(i + 8) + 16);
                    if (v230)
                    {
                      v239 = *(_QWORD **)(v230 + 8);
                      v240 = *v239;
                      v232 = (unsigned __int8 *)(v239 + 3);
                      v231 = v240;
                    }
                    else
                    {
                      v231 = 0;
                      v232 = 0;
                    }
                    sub_1C4D67324((uint64_t)v354, v232, v231);
                    sub_1C4D655B0(v355, "action", 6uLL);
                    sub_1C4D67324((uint64_t)v356, "drop", 4uLL);
                    sub_1C6174C6C((uint64_t)v359, (uint64_t)&v348, 4);
                    LOWORD(v361.__r_.__value_.__l.__data_) = 7;
                    *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v359;
                    v241.n128_u64[0] = *(_QWORD *)&v359[8];
                    memset(v359, 0, 20);
                    LODWORD(v362) = *(_DWORD *)&v359[16];
                    v242 = *((_QWORD *)&v292 + 1);
                    if (*((_QWORD *)&v292 + 1) >= v293)
                    {
                      v243 = sub_1C4D6610C((unsigned __int16 **)&v292, (unsigned __int16 *)&v361, v241);
                    }
                    else
                    {
                      llvm::json::Value::moveFrom(*((uint64_t *)&v292 + 1), (unsigned __int16 *)&v361, v241);
                      v243 = v242 + 32;
                    }
                    *((_QWORD *)&v292 + 1) = v243;
                    llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
                    sub_1C4D65F7C((uint64_t *)v359);
                    MEMORY[0x1CAA32FB4](*(_QWORD *)v359, 8);
                    v87 = 224;
                    do
                    {
                      llvm::json::Value::destroy((void **)((char *)v346 + v87));
                      v78 = (unint64_t)sub_1C4765904((uint64_t *)((char *)&v344.__val_ + v87), 0);
                      v87 -= 56;
                    }
                    while (v87);
                  }
                  else
                  {
                    if (byte_1ED8268C0)
                      v220 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
                    else
                      v220 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
                    v224 = v220;
                    v225 = *((_QWORD *)v220 + 4);
                    if ((unint64_t)(*((_QWORD *)v220 + 3) - v225) > 8)
                    {
                      *(_BYTE *)(v225 + 8) = 32;
                      *(_QWORD *)v225 = *(_QWORD *)"WARNING: ";
                      v226 = (void *)(*((_QWORD *)v220 + 4) + 9);
                      *((_QWORD *)v224 + 4) = v226;
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v220, "WARNING: ", 9uLL);
                      v226 = (void *)*((_QWORD *)v224 + 4);
                    }
                    if (v25 <= *((_QWORD *)v224 + 3) - (_QWORD)v226)
                    {
                      if (v25)
                      {
                        memcpy(v226, __src, v25);
                        v226 = (void *)(*((_QWORD *)v224 + 4) + v25);
                        *((_QWORD *)v224 + 4) = v226;
                      }
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, (const char *)__src, v25);
                      v226 = (void *)*((_QWORD *)v224 + 4);
                    }
                    if (*((_QWORD *)v224 + 3) - (_QWORD)v226 > 0x24uLL)
                    {
                      qmemcpy(v226, " drops dbg.value()/dbg.declare() for ", 37);
                      *((_QWORD *)v224 + 4) += 37;
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, " drops dbg.value()/dbg.declare() for ", 0x25uLL);
                    }
                    v233 = *(_QWORD *)(*(_QWORD *)v85 - 8 * *(unsigned int *)(*(_QWORD *)v85 + 8) + 8);
                    if (v233)
                    {
                      v234 = *(size_t **)(v233 + 8);
                      v237 = *v234;
                      v235 = v234 + 3;
                      v236 = v237;
                      v238 = (void *)*((_QWORD *)v224 + 4);
                      if (v237 <= *((_QWORD *)v224 + 3) - (_QWORD)v238)
                      {
                        if (v236)
                        {
                          memcpy(v238, v235, v236);
                          *((_QWORD *)v224 + 4) += v236;
                        }
                      }
                      else
                      {
                        v224 = llvm::raw_ostream::write(v224, (const char *)v235, v236);
                      }
                      v88 = a10;
                    }
                    v244 = *((_QWORD *)v224 + 4);
                    if ((unint64_t)(*((_QWORD *)v224 + 3) - v244) > 5)
                    {
                      *(_WORD *)(v244 + 4) = 8301;
                      *(_DWORD *)v244 = 1869768224;
                      v245 = *((_QWORD *)v224 + 4) + 6;
                      *((_QWORD *)v224 + 4) = v245;
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, " from ", 6uLL);
                      v245 = *((_QWORD *)v224 + 4);
                    }
                    if ((unint64_t)(*((_QWORD *)v224 + 3) - v245) > 8)
                    {
                      *(_BYTE *)(v245 + 8) = 32;
                      *(_QWORD *)v245 = *(_QWORD *)"function ";
                      *((_QWORD *)v224 + 4) += 9;
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, "function ", 9uLL);
                    }
                    for (j = *(_QWORD *)(*(_QWORD *)v85 - 8 * *(unsigned int *)(*(_QWORD *)v85 + 8));
                          (*(_BYTE *)j & 0xFE) == 0x12;
                    v247 = *(_QWORD *)(j - 8 * *(unsigned int *)(j + 8) + 16);
                    if (v247)
                    {
                      v248 = *(size_t **)(v247 + 8);
                      v251 = *v248;
                      v249 = v248 + 3;
                      v250 = v251;
                      v252 = (void *)*((_QWORD *)v224 + 4);
                      if (v251 <= *((_QWORD *)v224 + 3) - (_QWORD)v252)
                      {
                        if (v250)
                        {
                          memcpy(v252, v249, v250);
                          *((_QWORD *)v224 + 4) += v250;
                        }
                      }
                      else
                      {
                        v224 = llvm::raw_ostream::write(v224, (const char *)v249, v250);
                      }
                      v88 = a10;
                    }
                    v253 = (_DWORD *)*((_QWORD *)v224 + 4);
                    if (*((_QWORD *)v224 + 3) - (_QWORD)v253 > 6uLL)
                    {
                      *(_DWORD *)((char *)v253 + 3) = 543517801;
                      *v253 = 1768302624;
                      v78 = *((_QWORD *)v224 + 4) + 7;
                      *((_QWORD *)v224 + 4) = v78;
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, " (file ", 7uLL);
                      v78 = *((_QWORD *)v224 + 4);
                    }
                    if (v66 <= *((_QWORD *)v224 + 3) - v78)
                    {
                      if (v66)
                      {
                        memcpy((void *)v78, v286, v66);
                        v78 = *((_QWORD *)v224 + 4) + v66;
                        *((_QWORD *)v224 + 4) = v78;
                      }
                    }
                    else
                    {
                      v224 = llvm::raw_ostream::write(v224, v286, v66);
                      v78 = *((_QWORD *)v224 + 4);
                    }
                    if (*((_QWORD *)v224 + 3) - v78 > 1)
                    {
                      LOBYTE(v87) = 0;
                      *(_WORD *)v78 = 2601;
                      *((_QWORD *)v224 + 4) += 2;
                    }
                    else
                    {
                      v78 = (unint64_t)llvm::raw_ostream::write(v224, ")\n", 2uLL);
                      LOBYTE(v87) = 0;
                    }
                  }
                }
                v85 += 16;
              }
              while (v85 != v86);
            }
            v22 = v289 & v281 & v87;
            if (v25)
              v89 = __src;
            else
              v89 = v282;
            if (v25)
              v90 = v25;
            else
              v90 = v283;
            v91 = (_BYTE *)&unk_1ED826000;
            if (v88 && (_QWORD)v292 != *((_QWORD *)&v292 + 1))
            {
              v344.__val_ = 0;
              v344.__cat_ = std::system_category();
              v92 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v348, a9, v88, (uint64_t)&v344, 7);
              if (v344.__val_)
              {
                v254 = (llvm::raw_ostream *)llvm::errs(v92);
                v255 = v254;
                v256 = (void *)*((_QWORD *)v254 + 4);
                if (*((_QWORD *)v254 + 3) - (_QWORD)v256 > 0x14uLL)
                {
                  qmemcpy(v256, "Could not open file: ", 21);
                  *((_QWORD *)v254 + 4) += 21;
                }
                else
                {
                  v255 = llvm::raw_ostream::write(v254, "Could not open file: ", 0x15uLL);
                }
                std::error_code::message(&v361, &v344);
                if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v257 = &v361;
                else
                  v257 = (std::string *)v361.__r_.__value_.__r.__words[0];
                if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = *((_BYTE *)&v361.__r_.__value_.__s + 23) & 0x7F;
                else
                  size = v361.__r_.__value_.__l.__size_;
                v259 = llvm::raw_ostream::write(v255, (const char *)v257, size);
                v260 = v259;
                v261 = (_WORD *)*((_QWORD *)v259 + 4);
                if (*((_QWORD *)v259 + 3) - (_QWORD)v261 > 1uLL)
                {
                  *v261 = 8236;
                  v262 = (void *)(*((_QWORD *)v259 + 4) + 2);
                  *((_QWORD *)v260 + 4) = v262;
                }
                else
                {
                  v260 = llvm::raw_ostream::write(v259, ", ", 2uLL);
                  v262 = (void *)*((_QWORD *)v260 + 4);
                }
                v91 = &unk_1ED826000;
                if (a10 <= *((_QWORD *)v260 + 3) - (_QWORD)v262)
                {
                  memcpy(v262, a9, a10);
                  v263 = (_BYTE *)(*((_QWORD *)v260 + 4) + a10);
                  *((_QWORD *)v260 + 4) = v263;
                }
                else
                {
                  v260 = llvm::raw_ostream::write(v260, a9, a10);
                  v263 = (_BYTE *)*((_QWORD *)v260 + 4);
                }
                if ((unint64_t)v263 >= *((_QWORD *)v260 + 3))
                {
                  llvm::raw_ostream::write(v260, 10);
                }
                else
                {
                  *((_QWORD *)v260 + 4) = v263 + 1;
                  *v263 = 10;
                }
                if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v361.__r_.__value_.__l.__data_);
              }
              else
              {
                v93 = v350;
                v94 = (_QWORD *)v350[0];
                if ((unint64_t)(v349 - v350[0]) > 8)
                {
                  *(_BYTE *)(v350[0] + 8) = 34;
                  *v94 = *(_QWORD *)"{\"file\":\"";
                  v96 = (void *)(v350[0] + 9);
                  v350[0] += 9;
                  v95 = (llvm::raw_ostream *)&v348;
                  v97 = v350;
                }
                else
                {
                  v95 = llvm::raw_ostream::write((llvm::raw_ostream *)&v348, "{\"file\":\"", 9uLL);
                  v97 = (_QWORD *)((char *)v95 + 32);
                  v96 = (void *)*((_QWORD *)v95 + 4);
                }
                if (v66 <= *((_QWORD *)v95 + 3) - (_QWORD)v96)
                {
                  if (v66)
                  {
                    memcpy(v96, v286, v66);
                    *v97 += v66;
                  }
                }
                else
                {
                  v95 = llvm::raw_ostream::write(v95, v286, v66);
                }
                v264 = *((_QWORD *)v95 + 4);
                if ((unint64_t)(*((_QWORD *)v95 + 3) - v264) > 2)
                {
                  *(_BYTE *)(v264 + 2) = 32;
                  *(_WORD *)v264 = 11298;
                  *((_QWORD *)v95 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v95, "\", ", 3uLL);
                }
                v265 = v25 == 0;
                v266 = v25;
                if (v25)
                  v267 = (const char *)__src;
                else
                  v267 = "no-name";
                if (v265)
                  v268 = 7;
                else
                  v268 = v266;
                if ((unint64_t)(v349 - v350[0]) > 7)
                {
                  *(_QWORD *)v350[0] = 0x223A227373617022;
                  v270 = (void *)(v350[0] + 8);
                  v350[0] += 8;
                  v269 = (llvm::raw_ostream *)&v348;
                }
                else
                {
                  v269 = llvm::raw_ostream::write((llvm::raw_ostream *)&v348, "\"pass\":\"", 8uLL);
                  v93 = (_QWORD *)((char *)v269 + 32);
                  v270 = (void *)*((_QWORD *)v269 + 4);
                }
                if (v268 <= *((_QWORD *)v269 + 3) - (_QWORD)v270)
                {
                  memcpy(v270, v267, v268);
                  *v93 += v268;
                }
                else
                {
                  v269 = llvm::raw_ostream::write(v269, v267, v268);
                }
                v271 = *((_QWORD *)v269 + 4);
                if ((unint64_t)(*((_QWORD *)v269 + 3) - v271) > 2)
                {
                  *(_BYTE *)(v271 + 2) = 32;
                  *(_WORD *)v271 = 11298;
                  *((_QWORD *)v269 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v269, "\", ", 3uLL);
                }
                strcpy(v359, "\b");
                *(_OWORD *)&v359[8] = v292;
                v360 = v293;
                v292 = 0uLL;
                v293 = 0;
                llvm::json::Array::Array((uint64_t)v346, (unsigned __int16 *)v359, 1uLL);
                LOWORD(v361.__r_.__value_.__l.__data_) = 8;
                *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v346;
                v362 = v347;
                v346[0] = 0;
                v346[1] = 0;
                v347 = 0;
                __dst[0] = v346;
                sub_1C4D66218(__dst);
                llvm::json::Value::destroy((void **)v359);
                if ((unint64_t)(v349 - v350[0]) > 7)
                {
                  *(_QWORD *)v350[0] = 0x203A227367756222;
                  v350[0] += 8;
                  v272 = (llvm::raw_ostream *)&v348;
                }
                else
                {
                  v272 = llvm::raw_ostream::write((llvm::raw_ostream *)&v348, "\"bugs\": ", 8uLL);
                }
                v91 = (_BYTE *)&unk_1ED826000;
                sub_1C6383434((uint64_t)v272, (uint64_t)&v361);
                if ((unint64_t)(v349 - v350[0]) > 1)
                {
                  *(_WORD *)v350[0] = 2685;
                  v350[0] += 2;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v348, "}\n", 2uLL);
                }
                llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
              }
              llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v348);
            }
            if ((v22 & 1) != 0)
            {
              if (v91[2240])
                v273 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
              else
                v273 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
              v275 = v273;
              v277 = *((_QWORD *)v273 + 3);
              v276 = (int *)*((_QWORD *)v273 + 4);
              if (v90 <= v277 - (uint64_t)v276)
              {
                if (v90)
                {
                  memcpy(v276, v89, v90);
                  v276 = (int *)(*((_QWORD *)v275 + 4) + v90);
                  *((_QWORD *)v275 + 4) = v276;
                }
              }
              else
              {
                v275 = llvm::raw_ostream::write(v275, (const char *)v89, v90);
                v276 = (int *)*((_QWORD *)v275 + 4);
              }
              if (*((_QWORD *)v275 + 3) - (_QWORD)v276 <= 6uLL)
              {
                v279 = ": PASS\n";
LABEL_474:
                llvm::raw_ostream::write(v275, v279, 7uLL);
LABEL_475:
                sub_1C63A9680(v291, (uint64_t)v329);
                *(_QWORD *)&v348 = &v292;
                sub_1C4D66218((void ***)&v348);
                sub_1C6176BF8(v294);
                sub_1C6176BF8(v299);
                sub_1C63A9DA0((uint64_t)v304);
                sub_1C6176BF8(v309);
                sub_1C6176BF8(v314);
                sub_1C6176BF8(v319);
                sub_1C6176BF8(v324);
                sub_1C6176BF8(&v336[1]);
                sub_1C63A9DA0((uint64_t)&v334[8]);
                sub_1C6176BF8(&v332[1]);
                sub_1C6176BF8(v329);
                return v22 & 1;
              }
              *(int *)((char *)v276 + 3) = 173232961;
              v280 = 1095770170;
            }
            else
            {
              if (v91[2240])
                v274 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
              else
                v274 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
              v275 = v274;
              v278 = *((_QWORD *)v274 + 3);
              v276 = (int *)*((_QWORD *)v274 + 4);
              if (v90 <= v278 - (uint64_t)v276)
              {
                if (v90)
                {
                  memcpy(v276, v89, v90);
                  v276 = (int *)(*((_QWORD *)v275 + 4) + v90);
                  *((_QWORD *)v275 + 4) = v276;
                }
              }
              else
              {
                v275 = llvm::raw_ostream::write(v275, (const char *)v89, v90);
                v276 = (int *)*((_QWORD *)v275 + 4);
              }
              if (*((_QWORD *)v275 + 3) - (_QWORD)v276 <= 6uLL)
              {
                v279 = ": FAIL\n";
                goto LABEL_474;
              }
              *(int *)((char *)v276 + 3) = 172771649;
              v280 = 1095114810;
            }
            *v276 = v280;
            *((_QWORD *)v275 + 4) += 7;
            goto LABEL_475;
          }
          v84 = 1;
          while (1)
          {
            if (*(_BYTE *)(v82 + 8))
              goto LABEL_216;
            v158 = *(_QWORD *)v82;
            v78 = sub_1C63A9AA0((uint64_t)v304, *(_QWORD *)v82);
            if (v307 != (char *)v78 && !*(_QWORD *)(v78 + 24))
              goto LABEL_216;
            v159 = *(uint64_t ****)(v158 + 40);
            v160 = (uint64_t ***)v159[7];
            if ((*((_BYTE *)v160 + 23) & 0x10) != 0)
              break;
            v170 = 0;
            v171 = &byte_1C871356D;
LABEL_229:
            if ((*((_BYTE *)v159 + 23) & 0x10) == 0)
            {
              v285 = "no-name";
              v173 = 7;
              goto LABEL_239;
            }
            v174 = ***v159;
            v175 = *(_QWORD *)(v174 + 152);
            v176 = *(unsigned int *)(v174 + 168);
            if (!(_DWORD)v176)
              goto LABEL_237;
            LODWORD(v177) = (v176 - 1) & ((v159 >> 4) ^ (v159 >> 9));
            v178 = (uint64_t ****)(v175 + 16 * v177);
            v179 = *v178;
            if (*v178 != v159)
            {
              v180 = 1;
              while (v179 != (uint64_t ***)-4096)
              {
                v181 = v177 + v180++;
                v177 = v181 & (v176 - 1);
                v179 = *(uint64_t ****)(v175 + 16 * v177);
                if (v179 == v159)
                {
                  v178 = (uint64_t ****)(v175 + 16 * v177);
                  goto LABEL_238;
                }
              }
LABEL_237:
              v178 = (uint64_t ****)(v175 + 16 * v176);
            }
LABEL_238:
            v182 = (size_t *)v178[1];
            v173 = *v182;
            v285 = (char *)(v182 + 2);
LABEL_239:
            __s = (char *)llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(v158 + 16)
                                                                               - 28));
            v78 = sub_1C63A9B14((uint64_t)v314, v158);
            if (v317 == v78)
            {
              if (!a10)
              {
                if (v81[2240])
                  v184 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
                else
                  v184 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
                v185 = v184;
                v191 = *((_QWORD *)v184 + 4);
                if ((unint64_t)(*((_QWORD *)v184 + 3) - v191) > 8)
                {
                  *(_BYTE *)(v191 + 8) = 32;
                  *(_QWORD *)v191 = *(_QWORD *)"WARNING: ";
                  v192 = (void *)(*((_QWORD *)v184 + 4) + 9);
                  *((_QWORD *)v185 + 4) = v192;
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v184, "WARNING: ", 9uLL);
                  v192 = (void *)*((_QWORD *)v185 + 4);
                }
                if (v25 <= *((_QWORD *)v185 + 3) - (_QWORD)v192)
                {
                  if (v25)
                  {
                    memcpy(v192, __src, v25);
                    v192 = (void *)(*((_QWORD *)v185 + 4) + v25);
                    *((_QWORD *)v185 + 4) = v192;
                  }
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, (const char *)__src, v25);
                  v192 = (void *)*((_QWORD *)v185 + 4);
                }
                if (*((_QWORD *)v185 + 3) - (_QWORD)v192 > 0x20uLL)
                {
                  qmemcpy(v192, " did not generate DILocation for ", 33);
                  v219 = *((_QWORD *)v185 + 4) + 33;
                  goto LABEL_347;
                }
                v188 = v185;
                v189 = " did not generate DILocation for ";
                v190 = 33;
LABEL_265:
                v185 = llvm::raw_ostream::write(v188, v189, v190);
LABEL_266:
                llvm::Value::print((llvm::Value *)v158, v185, 0);
                v193 = *((_QWORD *)v185 + 4);
                if ((unint64_t)(*((_QWORD *)v185 + 3) - v193) > 5)
                {
                  *(_WORD *)(v193 + 4) = 8250;
                  *(_DWORD *)v193 = 1111631904;
                  v194 = (_WORD *)(*((_QWORD *)v185 + 4) + 6);
                  *((_QWORD *)v185 + 4) = v194;
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, " (BB: ", 6uLL);
                  v194 = (_WORD *)*((_QWORD *)v185 + 4);
                }
                if (v173 <= *((_QWORD *)v185 + 3) - (_QWORD)v194)
                {
                  if (v173)
                  {
                    memcpy(v194, v285, v173);
                    v194 = (_WORD *)(*((_QWORD *)v185 + 4) + v173);
                    *((_QWORD *)v185 + 4) = v194;
                  }
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, v285, v173);
                  v194 = (_WORD *)*((_QWORD *)v185 + 4);
                }
                if (*((_QWORD *)v185 + 3) - (_QWORD)v194 > 5uLL)
                {
                  v194[2] = 8250;
                  *(_DWORD *)v194 = 1850089516;
                  v195 = (_QWORD *)(*((_QWORD *)v185 + 4) + 6);
                  *((_QWORD *)v185 + 4) = v195;
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, ", Fn: ", 6uLL);
                  v195 = (_QWORD *)*((_QWORD *)v185 + 4);
                }
                if (v170 <= *((_QWORD *)v185 + 3) - (_QWORD)v195)
                {
                  if (v170)
                  {
                    memcpy(v195, v171, v170);
                    v195 = (_QWORD *)(*((_QWORD *)v185 + 4) + v170);
                    *((_QWORD *)v185 + 4) = v195;
                  }
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, v171, v170);
                  v195 = (_QWORD *)*((_QWORD *)v185 + 4);
                }
                if (*((_QWORD *)v185 + 3) - (_QWORD)v195 > 7uLL)
                {
                  *v195 = 0x203A656C6946202CLL;
                  v78 = *((_QWORD *)v185 + 4) + 8;
                  *((_QWORD *)v185 + 4) = v78;
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, ", File: ", 8uLL);
                  v78 = *((_QWORD *)v185 + 4);
                }
                if (v66 <= *((_QWORD *)v185 + 3) - v78)
                {
                  if (v66)
                  {
                    memcpy((void *)v78, v286, v66);
                    v78 = *((_QWORD *)v185 + 4) + v66;
                    *((_QWORD *)v185 + 4) = v78;
                  }
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, v286, v66);
                  v78 = *((_QWORD *)v185 + 4);
                }
                if (*((_QWORD *)v185 + 3) - v78 > 1)
                {
                  *(_WORD *)v78 = 2601;
                  *((_QWORD *)v185 + 4) += 2;
                }
                else
                {
                  v78 = (unint64_t)llvm::raw_ostream::write(v185, ")\n", 2uLL);
                }
                goto LABEL_286;
              }
              sub_1C4D655B0((uint64_t *)&v348, "metadata", 8uLL);
              sub_1C4D67324((uint64_t)&v349, "DILocation", 0xAuLL);
              sub_1C4D655B0(v351, "fn-name", 7uLL);
              if (v170 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_487;
              if (v170 >= 0x17)
              {
                v209 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v170 | 7) != 0x17)
                  v209 = v170 | 7;
                v210 = v209 + 1;
                v197 = operator new(v209 + 1);
                v347 = v210 | 0x8000000000000000;
                v346[0] = v197;
                v346[1] = (void *)v170;
              }
              else
              {
                HIBYTE(v347) = v170;
                v197 = v346;
                if (!v170)
                {
LABEL_325:
                  *((_BYTE *)v197 + v170) = 0;
                  sub_1C4D673F4((uint64_t)v352, (unint64_t)v346);
                  sub_1C4D655B0(v353, "bb-name", 7uLL);
                  if (v173 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_487;
                  if (v173 >= 0x17)
                  {
                    v212 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v173 | 7) != 0x17)
                      v212 = v173 | 7;
                    v213 = v212 + 1;
                    v211 = operator new(v212 + 1);
                    v345 = v213 | 0x8000000000000000;
                    *(_QWORD *)&v344.__val_ = v211;
                    v344.__cat_ = (const std::error_category *)v173;
                  }
                  else
                  {
                    HIBYTE(v345) = v173;
                    v211 = &v344;
                    if (!v173)
                    {
LABEL_333:
                      v211[v173] = 0;
                      sub_1C4D673F4((uint64_t)v354, (unint64_t)&v344);
                      sub_1C4D655B0(v355, "instr", 5uLL);
                      v214 = strlen(__s);
                      sub_1C4D67324((uint64_t)v356, (unsigned __int8 *)__s, v214);
                      sub_1C4D655B0(v357, "action", 6uLL);
                      sub_1C4D67324((uint64_t)v358, "not-generate", 0xCuLL);
                      sub_1C6174C6C((uint64_t)v359, (uint64_t)&v348, 5);
                      LOWORD(v361.__r_.__value_.__l.__data_) = 7;
                      v215.n128_u64[0] = *(_QWORD *)&v359[8];
                      *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v359;
                      memset(v359, 0, 20);
                      LODWORD(v362) = *(_DWORD *)&v359[16];
                      v216 = *((_QWORD *)&v292 + 1);
                      if (*((_QWORD *)&v292 + 1) >= v293)
                      {
                        v217 = sub_1C4D6610C((unsigned __int16 **)&v292, (unsigned __int16 *)&v361, v215);
                      }
                      else
                      {
                        llvm::json::Value::moveFrom(*((uint64_t *)&v292 + 1), (unsigned __int16 *)&v361, v215);
                        v217 = v216 + 32;
                      }
                      *((_QWORD *)&v292 + 1) = v217;
                      llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
                      sub_1C4D65F7C((uint64_t *)v359);
                      MEMORY[0x1CAA32FB4](*(_QWORD *)v359, 8);
                      v218 = 35;
                      do
                      {
                        llvm::json::Value::destroy(&v346[v218]);
                        v78 = (unint64_t)sub_1C4765904((uint64_t *)((char *)&v344.__val_ + v218 * 8), 0);
                        v218 -= 7;
                      }
                      while (v218 * 8);
                      if (SHIBYTE(v345) < 0)
                        operator delete(*(void **)&v344.__val_);
                      v81 = (_BYTE *)&unk_1ED826000;
                      if (SHIBYTE(v347) < 0)
                      {
                        v208 = (void **)v346[0];
LABEL_342:
                        operator delete(v208);
                      }
LABEL_286:
                      v84 = 0;
                      goto LABEL_216;
                    }
                  }
                  memmove(v211, v285, v173);
                  goto LABEL_333;
                }
              }
              memmove(v197, v171, v170);
              goto LABEL_325;
            }
            if (*(_BYTE *)(v78 + 8))
            {
              if (!a10)
              {
                if (v81[2240])
                  v183 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
                else
                  v183 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
                v185 = v183;
                v186 = *((_QWORD *)v183 + 4);
                if ((unint64_t)(*((_QWORD *)v183 + 3) - v186) > 8)
                {
                  *(_BYTE *)(v186 + 8) = 32;
                  *(_QWORD *)v186 = *(_QWORD *)"WARNING: ";
                  v187 = (void *)(*((_QWORD *)v183 + 4) + 9);
                  *((_QWORD *)v185 + 4) = v187;
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v183, "WARNING: ", 9uLL);
                  v187 = (void *)*((_QWORD *)v185 + 4);
                }
                if (v25 <= *((_QWORD *)v185 + 3) - (_QWORD)v187)
                {
                  if (v25)
                  {
                    memcpy(v187, __src, v25);
                    v187 = (void *)(*((_QWORD *)v185 + 4) + v25);
                    *((_QWORD *)v185 + 4) = v187;
                  }
                }
                else
                {
                  v185 = llvm::raw_ostream::write(v185, (const char *)__src, v25);
                  v187 = (void *)*((_QWORD *)v185 + 4);
                }
                if (*((_QWORD *)v185 + 3) - (_QWORD)v187 <= 0x16uLL)
                {
                  v188 = v185;
                  v189 = " dropped DILocation of ";
                  v190 = 23;
                  goto LABEL_265;
                }
                qmemcpy(v187, " dropped DILocation of ", 23);
                v219 = *((_QWORD *)v185 + 4) + 23;
LABEL_347:
                *((_QWORD *)v185 + 4) = v219;
                goto LABEL_266;
              }
              sub_1C4D655B0((uint64_t *)&v348, "metadata", 8uLL);
              sub_1C4D67324((uint64_t)&v349, "DILocation", 0xAuLL);
              sub_1C4D655B0(v351, "fn-name", 7uLL);
              if (v170 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_487;
              if (v170 >= 0x17)
              {
                v198 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v170 | 7) != 0x17)
                  v198 = v170 | 7;
                v199 = v198 + 1;
                v196 = (void **)operator new(v198 + 1);
                v343 = v199 | 0x8000000000000000;
                __dst[0] = v196;
                __dst[1] = (void **)v170;
              }
              else
              {
                HIBYTE(v343) = v170;
                v196 = (void **)__dst;
                if (!v170)
                {
LABEL_304:
                  *((_BYTE *)v196 + v170) = 0;
                  sub_1C4D673F4((uint64_t)v352, (unint64_t)__dst);
                  sub_1C4D655B0(v353, "bb-name", 7uLL);
                  if (v173 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_487;
                  if (v173 >= 0x17)
                  {
                    v201 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v173 | 7) != 0x17)
                      v201 = v173 | 7;
                    v202 = v201 + 1;
                    v200 = operator new(v201 + 1);
                    v341 = v202 | 0x8000000000000000;
                    __p[0] = v200;
                    __p[1] = (void *)v173;
                  }
                  else
                  {
                    HIBYTE(v341) = v173;
                    v200 = __p;
                    if (!v173)
                    {
LABEL_312:
                      *((_BYTE *)v200 + v173) = 0;
                      sub_1C4D673F4((uint64_t)v354, (unint64_t)__p);
                      sub_1C4D655B0(v355, "instr", 5uLL);
                      v203 = strlen(__s);
                      sub_1C4D67324((uint64_t)v356, (unsigned __int8 *)__s, v203);
                      sub_1C4D655B0(v357, "action", 6uLL);
                      sub_1C4D67324((uint64_t)v358, "drop", 4uLL);
                      sub_1C6174C6C((uint64_t)v359, (uint64_t)&v348, 5);
                      LOWORD(v361.__r_.__value_.__l.__data_) = 7;
                      v204.n128_u64[0] = *(_QWORD *)&v359[8];
                      *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v359;
                      memset(v359, 0, 20);
                      LODWORD(v362) = *(_DWORD *)&v359[16];
                      v205 = *((_QWORD *)&v292 + 1);
                      if (*((_QWORD *)&v292 + 1) >= v293)
                      {
                        v206 = sub_1C4D6610C((unsigned __int16 **)&v292, (unsigned __int16 *)&v361, v204);
                      }
                      else
                      {
                        llvm::json::Value::moveFrom(*((uint64_t *)&v292 + 1), (unsigned __int16 *)&v361, v204);
                        v206 = v205 + 32;
                      }
                      *((_QWORD *)&v292 + 1) = v206;
                      llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
                      sub_1C4D65F7C((uint64_t *)v359);
                      MEMORY[0x1CAA32FB4](*(_QWORD *)v359, 8);
                      v207 = 35;
                      do
                      {
                        llvm::json::Value::destroy(&v346[v207]);
                        v78 = (unint64_t)sub_1C4765904((uint64_t *)((char *)&v344.__val_ + v207 * 8), 0);
                        v207 -= 7;
                      }
                      while (v207 * 8);
                      if (SHIBYTE(v341) < 0)
                        operator delete(__p[0]);
                      v81 = (_BYTE *)&unk_1ED826000;
                      if (SHIBYTE(v343) < 0)
                      {
                        v208 = __dst[0];
                        goto LABEL_342;
                      }
                      goto LABEL_286;
                    }
                  }
                  memmove(v200, v285, v173);
                  goto LABEL_312;
                }
              }
              memmove(v196, v171, v170);
              goto LABEL_304;
            }
LABEL_216:
            v82 += 16;
            if (v82 == v83)
              goto LABEL_102;
          }
          v161 = ***v160;
          v162 = *(_QWORD *)(v161 + 152);
          v163 = *(unsigned int *)(v161 + 168);
          if ((_DWORD)v163)
          {
            LODWORD(v164) = (v163 - 1) & ((v160 >> 4) ^ (v160 >> 9));
            v165 = (uint64_t ****)(v162 + 16 * v164);
            v166 = *v165;
            if (*v165 == v160)
            {
LABEL_228:
              v169 = v165[1];
              v172 = (size_t)*v169;
              v171 = (char *)(v169 + 2);
              v170 = v172;
              goto LABEL_229;
            }
            v167 = 1;
            while (v166 != (uint64_t ***)-4096)
            {
              v168 = v164 + v167++;
              v164 = v168 & (v163 - 1);
              v166 = *(uint64_t ****)(v162 + 16 * v164);
              if (v166 == v160)
              {
                v165 = (uint64_t ****)(v162 + 16 * v164);
                goto LABEL_228;
              }
            }
          }
          v165 = (uint64_t ****)(v162 + 16 * v163);
          goto LABEL_228;
        }
        v289 = 1;
        while (1)
        {
          if (!v79[1])
          {
            v78 = sub_1C63A9A2C((uint64_t)v324, *v79);
            if (v327 == v78)
            {
              if (!v77)
              {
                if (v81[2240])
                  v99 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
                else
                  v99 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
                v100 = v99;
                v112 = (_DWORD *)*((_QWORD *)v99 + 4);
                if (*((_QWORD *)v99 + 3) - (_QWORD)v112 > 6uLL)
                {
                  *(_DWORD *)((char *)v112 + 3) = 540693071;
                  *v112 = 1330795077;
                  v113 = (void *)(*((_QWORD *)v99 + 4) + 7);
                  *((_QWORD *)v100 + 4) = v113;
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v99, "ERROR: ", 7uLL);
                  v113 = (void *)*((_QWORD *)v100 + 4);
                }
                if (v25 <= *((_QWORD *)v100 + 3) - (_QWORD)v113)
                {
                  if (v25)
                  {
                    memcpy(v113, __src, v25);
                    v113 = (void *)(*((_QWORD *)v100 + 4) + v25);
                    *((_QWORD *)v100 + 4) = v113;
                  }
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v100, (const char *)__src, v25);
                  v113 = (void *)*((_QWORD *)v100 + 4);
                }
                if (*((_QWORD *)v100 + 3) - (_QWORD)v113 > 0x22uLL)
                {
                  qmemcpy(v113, " did not generate DISubprogram for ", 35);
                  *((_QWORD *)v100 + 4) += 35;
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v100, " did not generate DISubprogram for ", 0x23uLL);
                }
                v114 = (uint64_t ***)*v79;
                if ((*(_BYTE *)(*v79 + 23) & 0x10) != 0)
                {
                  v115 = ***v114;
                  v105 = *(_QWORD *)(v115 + 152);
                  v106 = *(unsigned int *)(v115 + 168);
                  if (!(_DWORD)v106)
                    goto LABEL_161;
                  LODWORD(v107) = (v106 - 1) & ((v114 >> 4) ^ (v114 >> 9));
                  v108 = (uint64_t ****)(v105 + 16 * v107);
                  v116 = *v108;
                  if (*v108 != v114)
                  {
                    v117 = 1;
                    while (v116 != (uint64_t ***)-4096)
                    {
                      v118 = v107 + v117++;
                      v107 = v118 & (v106 - 1);
                      v116 = *(uint64_t ****)(v105 + 16 * v107);
                      if (v116 == v114)
                      {
LABEL_160:
                        v108 = (uint64_t ****)(v105 + 16 * v107);
                        goto LABEL_162;
                      }
                    }
LABEL_161:
                    v108 = (uint64_t ****)(v105 + 16 * v106);
                  }
LABEL_162:
                  v119 = (size_t *)v108[1];
                  v122 = *v119;
                  v120 = v119 + 2;
                  v121 = v122;
                  v123 = (_WORD *)*((_QWORD *)v100 + 4);
                  if (v122 <= *((_QWORD *)v100 + 3) - (_QWORD)v123)
                  {
                    if (v121)
                    {
                      memcpy(v123, v120, v121);
                      v123 = (_WORD *)(*((_QWORD *)v100 + 4) + v121);
                      *((_QWORD *)v100 + 4) = v123;
                    }
                  }
                  else
                  {
                    v100 = llvm::raw_ostream::write(v100, (const char *)v120, v121);
                    v123 = (_WORD *)*((_QWORD *)v100 + 4);
                  }
                  v77 = a10;
LABEL_167:
                  if (*((_QWORD *)v100 + 3) - (_QWORD)v123 > 5uLL)
                  {
                    v123[2] = 8301;
                    *(_DWORD *)v123 = 1869768224;
                    v78 = *((_QWORD *)v100 + 4) + 6;
                    *((_QWORD *)v100 + 4) = v78;
                  }
                  else
                  {
                    v100 = llvm::raw_ostream::write(v100, " from ", 6uLL);
                    v78 = *((_QWORD *)v100 + 4);
                  }
                  if (v66 <= *((_QWORD *)v100 + 3) - v78)
                  {
                    if (v66)
                    {
                      memcpy((void *)v78, v286, v66);
                      v78 = *((_QWORD *)v100 + 4) + v66;
                      *((_QWORD *)v100 + 4) = v78;
                    }
                  }
                  else
                  {
                    v100 = llvm::raw_ostream::write(v100, v286, v66);
                    v78 = *((_QWORD *)v100 + 4);
                  }
                  if (v78 >= *((_QWORD *)v100 + 3))
                  {
                    v78 = (unint64_t)llvm::raw_ostream::write(v100, 10);
                    v289 = 0;
                  }
                  else
                  {
                    v289 = 0;
                    *((_QWORD *)v100 + 4) = v78 + 1;
                    *(_BYTE *)v78 = 10;
                  }
                  goto LABEL_119;
                }
LABEL_190:
                v123 = (_WORD *)*((_QWORD *)v100 + 4);
                goto LABEL_167;
              }
              sub_1C4D655B0((uint64_t *)&v348, "metadata", 8uLL);
              sub_1C4D67324((uint64_t)&v349, "DISubprogram", 0xCuLL);
              sub_1C4D655B0(v351, "name", 4uLL);
              v133 = (uint64_t ***)*v79;
              if ((*(_BYTE *)(*v79 + 23) & 0x10) != 0)
              {
                v134 = ***v133;
                v135 = *(_QWORD *)(v134 + 152);
                v136 = *(unsigned int *)(v134 + 168);
                if (!(_DWORD)v136)
                  goto LABEL_204;
                LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
                v138 = (uint64_t ****)(v135 + 16 * v137);
                v139 = *v138;
                if (*v138 != v133)
                {
                  v140 = 1;
                  while (v139 != (uint64_t ***)-4096)
                  {
                    v141 = v137 + v140++;
                    v137 = v141 & (v136 - 1);
                    v139 = *(uint64_t ****)(v135 + 16 * v137);
                    if (v139 == v133)
                    {
                      v138 = (uint64_t ****)(v135 + 16 * v137);
                      goto LABEL_205;
                    }
                  }
LABEL_204:
                  v138 = (uint64_t ****)(v135 + 16 * v136);
                }
LABEL_205:
                v150 = v138[1];
                v153 = (unint64_t)*v150;
                v151 = (unsigned __int8 *)(v150 + 2);
                v152 = v153;
              }
              else
              {
                v152 = 0;
                v151 = (unsigned __int8 *)&byte_1C871356D;
              }
              sub_1C4D67324((uint64_t)v352, v151, v152);
              sub_1C4D655B0(v353, "action", 6uLL);
              sub_1C4D67324((uint64_t)v354, "not-generate", 0xCuLL);
              sub_1C6174C6C((uint64_t)v359, (uint64_t)&v348, 3);
              LOWORD(v361.__r_.__value_.__l.__data_) = 7;
              v154.n128_u64[0] = *(_QWORD *)&v359[8];
              *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v359;
              memset(v359, 0, 20);
              LODWORD(v362) = *(_DWORD *)&v359[16];
              v155 = *((_QWORD *)&v292 + 1);
              if (*((_QWORD *)&v292 + 1) >= v293)
              {
                v156 = sub_1C4D6610C((unsigned __int16 **)&v292, (unsigned __int16 *)&v361, v154);
              }
              else
              {
                llvm::json::Value::moveFrom(*((uint64_t *)&v292 + 1), (unsigned __int16 *)&v361, v154);
                v156 = v155 + 32;
              }
              *((_QWORD *)&v292 + 1) = v156;
              llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
              sub_1C4D65F7C((uint64_t *)v359);
              MEMORY[0x1CAA32FB4](*(_QWORD *)v359, 8);
              v157 = 21;
              do
              {
                llvm::json::Value::destroy(&v346[v157]);
                v78 = (unint64_t)sub_1C4765904((uint64_t *)((char *)&v344.__val_ + v157 * 8), 0);
                v157 -= 7;
              }
              while (v157 * 8);
              goto LABEL_211;
            }
            if (*(_QWORD *)(v78 + 8))
            {
              if (!v77)
              {
                if (v81[2240])
                  v98 = (llvm::raw_ostream *)llvm::nulls((llvm *)v78);
                else
                  v98 = (llvm::raw_ostream *)llvm::errs((llvm *)v78);
                v100 = v98;
                v101 = (_DWORD *)*((_QWORD *)v98 + 4);
                if (*((_QWORD *)v98 + 3) - (_QWORD)v101 > 6uLL)
                {
                  *(_DWORD *)((char *)v101 + 3) = 540693071;
                  *v101 = 1330795077;
                  v102 = (void *)(*((_QWORD *)v98 + 4) + 7);
                  *((_QWORD *)v100 + 4) = v102;
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v98, "ERROR: ", 7uLL);
                  v102 = (void *)*((_QWORD *)v100 + 4);
                }
                if (v25 <= *((_QWORD *)v100 + 3) - (_QWORD)v102)
                {
                  if (v25)
                  {
                    memcpy(v102, __src, v25);
                    v102 = (void *)(*((_QWORD *)v100 + 4) + v25);
                    *((_QWORD *)v100 + 4) = v102;
                  }
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v100, (const char *)__src, v25);
                  v102 = (void *)*((_QWORD *)v100 + 4);
                }
                if (*((_QWORD *)v100 + 3) - (_QWORD)v102 > 0x18uLL)
                {
                  qmemcpy(v102, " dropped DISubprogram of ", 25);
                  *((_QWORD *)v100 + 4) += 25;
                }
                else
                {
                  v100 = llvm::raw_ostream::write(v100, " dropped DISubprogram of ", 0x19uLL);
                }
                v103 = (uint64_t ***)*v79;
                if ((*(_BYTE *)(*v79 + 23) & 0x10) != 0)
                {
                  v104 = ***v103;
                  v105 = *(_QWORD *)(v104 + 152);
                  v106 = *(unsigned int *)(v104 + 168);
                  if (!(_DWORD)v106)
                    goto LABEL_161;
                  LODWORD(v107) = (v106 - 1) & ((v103 >> 4) ^ (v103 >> 9));
                  v108 = (uint64_t ****)(v105 + 16 * v107);
                  v109 = *v108;
                  if (*v108 != v103)
                  {
                    v110 = 1;
                    while (v109 != (uint64_t ***)-4096)
                    {
                      v111 = v107 + v110++;
                      v107 = v111 & (v106 - 1);
                      v109 = *(uint64_t ****)(v105 + 16 * v107);
                      if (v109 == v103)
                        goto LABEL_160;
                    }
                    goto LABEL_161;
                  }
                  goto LABEL_162;
                }
                goto LABEL_190;
              }
              sub_1C4D655B0((uint64_t *)&v348, "metadata", 8uLL);
              sub_1C4D67324((uint64_t)&v349, "DISubprogram", 0xCuLL);
              sub_1C4D655B0(v351, "name", 4uLL);
              v124 = (uint64_t ***)*v79;
              if ((*(_BYTE *)(*v79 + 23) & 0x10) != 0)
              {
                v125 = ***v124;
                v126 = *(_QWORD *)(v125 + 152);
                v127 = *(unsigned int *)(v125 + 168);
                if (!(_DWORD)v127)
                  goto LABEL_196;
                LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
                v129 = (uint64_t ****)(v126 + 16 * v128);
                v130 = *v129;
                if (*v129 != v124)
                {
                  v131 = 1;
                  while (v130 != (uint64_t ***)-4096)
                  {
                    v132 = v128 + v131++;
                    v128 = v132 & (v127 - 1);
                    v130 = *(uint64_t ****)(v126 + 16 * v128);
                    if (v130 == v124)
                    {
                      v129 = (uint64_t ****)(v126 + 16 * v128);
                      goto LABEL_197;
                    }
                  }
LABEL_196:
                  v129 = (uint64_t ****)(v126 + 16 * v127);
                }
LABEL_197:
                v142 = v129[1];
                v145 = (unint64_t)*v142;
                v143 = (unsigned __int8 *)(v142 + 2);
                v144 = v145;
              }
              else
              {
                v144 = 0;
                v143 = (unsigned __int8 *)&byte_1C871356D;
              }
              sub_1C4D67324((uint64_t)v352, v143, v144);
              sub_1C4D655B0(v353, "action", 6uLL);
              sub_1C4D67324((uint64_t)v354, "drop", 4uLL);
              sub_1C6174C6C((uint64_t)v359, (uint64_t)&v348, 3);
              LOWORD(v361.__r_.__value_.__l.__data_) = 7;
              v146.n128_u64[0] = *(_QWORD *)&v359[8];
              *(_OWORD *)&v361.__r_.__value_.__r.__words[1] = *(_OWORD *)v359;
              memset(v359, 0, 20);
              LODWORD(v362) = *(_DWORD *)&v359[16];
              v147 = *((_QWORD *)&v292 + 1);
              if (*((_QWORD *)&v292 + 1) >= v293)
              {
                v148 = sub_1C4D6610C((unsigned __int16 **)&v292, (unsigned __int16 *)&v361, v146);
              }
              else
              {
                llvm::json::Value::moveFrom(*((uint64_t *)&v292 + 1), (unsigned __int16 *)&v361, v146);
                v148 = v147 + 32;
              }
              *((_QWORD *)&v292 + 1) = v148;
              llvm::json::Value::destroy((void **)&v361.__r_.__value_.__l.__data_);
              sub_1C4D65F7C((uint64_t *)v359);
              MEMORY[0x1CAA32FB4](*(_QWORD *)v359, 8);
              v149 = 21;
              do
              {
                llvm::json::Value::destroy(&v346[v149]);
                v78 = (unint64_t)sub_1C4765904((uint64_t *)((char *)&v344.__val_ + v149 * 8), 0);
                v149 -= 7;
              }
              while (v149 * 8);
LABEL_211:
              v289 = 0;
              v81 = (_BYTE *)&unk_1ED826000;
            }
          }
LABEL_119:
          v79 += 2;
          if (v79 == v80)
            goto LABEL_100;
        }
      }
      v69 = *(size_t **)(v68 + 8);
      v70 = *v69;
      v67 = (char *)(v69 + 3);
      v66 = v70;
LABEL_92:
      v286 = v67;
      goto LABEL_93;
    }
    while (1)
    {
      v26 = a2 ? (llvm::GlobalValue *)(a2 - 56) : 0;
      if ((sub_1C5EED688(v26) & 1) == 0)
      {
        v27 = *(unsigned int *)(a4 + 16);
        if ((_DWORD)v27)
        {
          v28 = *(_QWORD *)a4;
          v29 = (v26 >> 4) ^ (v26 >> 9);
          LODWORD(v30) = (v27 - 1) & v29;
          v31 = (llvm::GlobalValue **)(*(_QWORD *)a4 + 16 * v30);
          v32 = *v31;
          if (v26 != *v31)
          {
            v33 = 1;
            while (v32 != (llvm::GlobalValue *)-4096)
            {
              v34 = v30 + v33++;
              v30 = v34 & (v27 - 1);
              v32 = *(llvm::GlobalValue **)(v28 + 16 * v30);
              if (v26 == v32)
              {
                v31 = (llvm::GlobalValue **)(v28 + 16 * v30);
                goto LABEL_25;
              }
            }
            goto LABEL_26;
          }
LABEL_25:
          if (v31 != (llvm::GlobalValue **)(v28 + 16 * v27))
            break;
        }
      }
LABEL_26:
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == a3)
        goto LABEL_13;
    }
    if ((*((_BYTE *)v26 + 23) & 0x20) == 0)
      goto LABEL_44;
    v35 = ***(_QWORD ***)v26;
    *(_QWORD *)&v348 = v26;
    v36 = *(_DWORD *)(v35 + 2496);
    if (v36)
    {
      v37 = *(_QWORD *)(v35 + 2480);
      v38 = v36 - 1;
      v39 = v38 & v29;
      v40 = (llvm::GlobalValue **)(v37 + 40 * v39);
      v41 = *v40;
      if (*v40 == v26)
        goto LABEL_39;
      v42 = 0;
      v43 = 1;
      while (v41 != (llvm::GlobalValue *)-4096)
      {
        if (v42)
          v44 = 0;
        else
          v44 = v41 == (llvm::GlobalValue *)-8192;
        if (v44)
          v42 = v40;
        v45 = v39 + v43++;
        v39 = v45 & v38;
        v40 = (llvm::GlobalValue **)(v37 + 40 * v39);
        v41 = *v40;
        if (*v40 == v26)
          goto LABEL_39;
      }
      if (v42)
        v64 = v42;
      else
        v64 = v40;
    }
    else
    {
      v64 = 0;
    }
    v40 = (llvm::GlobalValue **)sub_1C541AB24(v35 + 2480, (uint64_t)&v348, (uint64_t *)&v348, v64);
    v65 = (llvm::GlobalValue *)v348;
    v40[4] = 0;
    v40[3] = 0;
    *v40 = v65;
    v40[1] = (llvm::GlobalValue *)(v40 + 3);
    v40[2] = (llvm::GlobalValue *)0x100000000;
LABEL_39:
    v46 = *((unsigned int *)v40 + 4);
    if ((_DWORD)v46)
    {
      v47 = (_QWORD *)((char *)v40[1] + 8);
      v48 = 16 * v46;
      while (*((_DWORD *)v47 - 2))
      {
        v49 = 0;
        v47 += 2;
        v48 -= 16;
        if (!v48)
          goto LABEL_45;
      }
      v49 = *v47;
      goto LABEL_45;
    }
LABEL_44:
    v49 = 0;
LABEL_45:
    *(_QWORD *)&v348 = v26;
    *((_QWORD *)&v348 + 1) = v49;
    sub_1C63A94AC((uint64_t)v329, &v348);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 - 8 * *(unsigned int *)(v49 + 8) + 56);
      if (v50)
        v51 = (_QWORD *)(v50 - 8 * *(unsigned int *)(v50 + 8));
      else
        v51 = 0;
      while (v51 != (_QWORD *)v50)
      {
        v52 = (_BYTE *)*v51;
        if (*(_BYTE *)*v51 != 25)
          v52 = 0;
        *(_QWORD *)&v348 = v52;
        if (v52)
          *(_DWORD *)sub_1C6324830((uint64_t)&v336[1], (uint64_t *)&v348) = 0;
        ++v51;
      }
    }
    v53 = (_QWORD ***)((char *)v26 + 72);
    v54 = (_QWORD **)*((_QWORD *)v26 + 10);
    if (v54 != (_QWORD **)((char *)v26 + 72))
    {
      do
      {
        v55 = v54 - 3;
        if (!v54)
          v55 = 0;
        v56 = v55 + 5;
        for (k = v55[6]; k != v56; k = (_QWORD *)k[1])
        {
          if (k)
            v58 = (uint64_t)(k - 3);
          else
            v58 = 0;
          if (*(_BYTE *)(v58 + 16) != 83)
          {
            if (dword_1ED826A48 >= 1
              && ((v59 = sub_1C53923FC(v58)) == 0 ? (v60 = 0) : (v60 = (llvm::DbgVariableIntrinsic *)v58), k && v59))
            {
              if (v49)
              {
                v61 = *(_QWORD *)(v58 + 48);
                if ((*(_DWORD *)(v61 + 8) != 2 || !*(_QWORD *)(v61 - 8)) && !sub_1C631CA9C(v60))
                {
                  *(_QWORD *)&v348 = 0;
                  *(_QWORD *)&v348 = *(_QWORD *)(((_QWORD *)v60 - 4 * (*((_DWORD *)v60 + 5) & 0x7FFFFFF))[4] + 24);
                  v62 = (_DWORD *)sub_1C6324830((uint64_t)&v336[1], (uint64_t *)&v348);
                  ++*v62;
                }
              }
            }
            else if (!sub_1C4D99D08(v58))
            {
              v63 = *(_QWORD *)(v58 + 48) != 0;
              *(_QWORD *)&v348 = v58;
              BYTE8(v348) = v63;
              sub_1C63A95E4((uint64_t)&v332[1], &v348);
            }
          }
        }
        v54 = (_QWORD **)v54[1];
        a4 = v291;
      }
      while (v54 != v53);
    }
    goto LABEL_26;
  }
  if (byte_1ED8268C0)
    v18 = (llvm::raw_ostream *)llvm::nulls(0);
  else
    v18 = (llvm::raw_ostream *)llvm::errs(0);
  v19 = v18;
  v21 = *((_QWORD *)v18 + 3);
  v20 = (void *)*((_QWORD *)v18 + 4);
  if (a6 <= v21 - (uint64_t)v20)
  {
    if (a6)
    {
      memcpy(v20, a5, a6);
      v20 = (void *)(*((_QWORD *)v19 + 4) + a6);
      *((_QWORD *)v19 + 4) = v20;
    }
  }
  else
  {
    v19 = llvm::raw_ostream::write(v19, (const char *)a5, a6);
    v20 = (void *)*((_QWORD *)v19 + 4);
  }
  if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 0x24uLL)
  {
    v22 = 0;
    qmemcpy(v20, ": Skipping module without debug info\n", 37);
    *((_QWORD *)v19 + 4) += 37;
  }
  else
  {
    llvm::raw_ostream::write(v19, ": Skipping module without debug info\n", 0x25uLL);
    v22 = 0;
  }
  return v22 & 1;
}

void llvm::exportDebugifyStats(_BYTE *a1, size_t a2, uint64_t a3)
{
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  void *v9;
  std::string *v10;
  size_t size;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  void **v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t i;
  const void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  void **v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  std::string v42;
  _BYTE v43[24];
  uint64_t v44;
  void *v45[8];
  std::error_code v46;

  v46.__val_ = 0;
  v46.__cat_ = std::system_category();
  v6 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v43, a1, a2, (uint64_t)&v46);
  if (v46.__val_)
  {
    v7 = (llvm::raw_ostream *)llvm::errs(v6);
    v8 = v7;
    v9 = (void *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0x14uLL)
    {
      qmemcpy(v9, "Could not open file: ", 21);
      *((_QWORD *)v7 + 4) += 21;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v7, "Could not open file: ", 0x15uLL);
    }
    std::error_code::message(&v42, &v46);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v42;
    else
      v10 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v42.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v42.__r_.__value_.__l.__size_;
    v12 = llvm::raw_ostream::write(v8, (const char *)v10, size);
    v13 = v12;
    v14 = (_WORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 1uLL)
    {
      *v14 = 8236;
      v15 = (_BYTE *)(*((_QWORD *)v12 + 4) + 2);
      *((_QWORD *)v13 + 4) = v15;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v12, ", ", 2uLL);
      v15 = (_BYTE *)*((_QWORD *)v13 + 4);
    }
    if (a2 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
    {
      if (a2)
      {
        memcpy(v15, a1, a2);
        v15 = (_BYTE *)(*((_QWORD *)v13 + 4) + a2);
        *((_QWORD *)v13 + 4) = v15;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, a1, a2);
      v15 = (_BYTE *)*((_QWORD *)v13 + 4);
    }
    if ((unint64_t)v15 >= *((_QWORD *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v15 + 1;
      *v15 = 10;
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v45[0];
    if (v44 - (unint64_t)v45[0] > 8)
    {
      *((_BYTE *)v45[0] + 8) = 101;
      *v16 = *(_QWORD *)"Pass Name";
      v18 = (char *)v45[0] + 9;
      v45[0] = (char *)v45[0] + 9;
      v17 = (llvm::raw_ostream *)v43;
      v19 = v45;
    }
    else
    {
      v17 = llvm::raw_ostream::write((llvm::raw_ostream *)v43, "Pass Name", 9uLL);
      v19 = (void **)((char *)v17 + 32);
      v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      v17 = llvm::raw_ostream::write(v17, 44);
    }
    else
    {
      *v19 = v18 + 1;
      *v18 = 44;
    }
    v20 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v20 > 0x18uLL)
    {
      qmemcpy(v20, "# of missing debug values", 25);
      v21 = (_BYTE *)(*((_QWORD *)v17 + 4) + 25);
      *((_QWORD *)v17 + 4) = v21;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, "# of missing debug values", 0x19uLL);
      v21 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if ((unint64_t)v21 >= *((_QWORD *)v17 + 3))
    {
      v17 = llvm::raw_ostream::write(v17, 44);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v21 + 1;
      *v21 = 44;
    }
    v22 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v22 > 0x15uLL)
    {
      qmemcpy(v22, "# of missing locations", 22);
      v23 = (_BYTE *)(*((_QWORD *)v17 + 4) + 22);
      *((_QWORD *)v17 + 4) = v23;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, "# of missing locations", 0x16uLL);
      v23 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if ((unint64_t)v23 >= *((_QWORD *)v17 + 3))
    {
      v17 = llvm::raw_ostream::write(v17, 44);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v23 + 1;
      *v23 = 44;
    }
    v24 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v24 > 0x1BuLL)
    {
      qmemcpy(v24, "Missing/Expected value ratio", 28);
      v25 = (_BYTE *)(*((_QWORD *)v17 + 4) + 28);
      *((_QWORD *)v17 + 4) = v25;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, "Missing/Expected value ratio", 0x1CuLL);
      v25 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if ((unint64_t)v25 >= *((_QWORD *)v17 + 3))
    {
      v17 = llvm::raw_ostream::write(v17, 44);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v25 + 1;
      *v25 = 44;
    }
    v26 = (void *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v26 > 0x1EuLL)
    {
      qmemcpy(v26, "Missing/Expected location ratio", 31);
      v27 = (_BYTE *)(*((_QWORD *)v17 + 4) + 31);
      *((_QWORD *)v17 + 4) = v27;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, "Missing/Expected location ratio", 0x1FuLL);
      v27 = (_BYTE *)*((_QWORD *)v17 + 4);
    }
    if ((unint64_t)v27 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17, 10);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v27 + 1;
      *v27 = 10;
    }
    v28 = *(_QWORD *)(a3 + 24);
    for (i = *(_QWORD *)(a3 + 32); v28 != i; v28 += 32)
    {
      v30 = *(const void **)v28;
      v31 = *(_QWORD *)(v28 + 8);
      v32 = *(unsigned int *)(v28 + 16);
      v33 = *(unsigned int *)(v28 + 24);
      v34 = *(_DWORD *)(v28 + 28);
      v35 = v45[0];
      if (v31 <= v44 - (unint64_t)v45[0])
      {
        if (v31)
        {
          memcpy(v45[0], v30, *(_QWORD *)(v28 + 8));
          v35 = (char *)v45[0] + v31;
          v45[0] = (char *)v45[0] + v31;
        }
        v36 = (llvm::raw_ostream *)v43;
        v37 = v45;
      }
      else
      {
        v36 = llvm::raw_ostream::write((llvm::raw_ostream *)v43, (const char *)v30, *(_QWORD *)(v28 + 8));
        v37 = (void **)((char *)v36 + 32);
        v35 = (_BYTE *)*((_QWORD *)v36 + 4);
      }
      if ((unint64_t)v35 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36, 44);
      }
      else
      {
        *v37 = v35 + 1;
        *v35 = 44;
      }
      sub_1C5E21910(v36, v32, 0, 0, 0);
      v38 = (_BYTE *)*((_QWORD *)v36 + 4);
      if ((unint64_t)v38 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36, 44);
      }
      else
      {
        *((_QWORD *)v36 + 4) = v38 + 1;
        *v38 = 44;
      }
      sub_1C5E21910(v36, v33, 0, 0, 0);
      v39 = (_BYTE *)*((_QWORD *)v36 + 4);
      if ((unint64_t)v39 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36, 44);
      }
      else
      {
        *((_QWORD *)v36 + 4) = v39 + 1;
        *v39 = 44;
      }
      llvm::write_double(v36, 0, 0, 0, (float)((float)v32 / (float)v34));
      v40 = (_BYTE *)*((_QWORD *)v36 + 4);
      if ((unint64_t)v40 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36, 44);
      }
      else
      {
        *((_QWORD *)v36 + 4) = v40 + 1;
        *v40 = 44;
      }
      llvm::write_double(v36, 0, 0, 0, (float)((float)v33 / (float)v34));
      v41 = (_BYTE *)*((_QWORD *)v36 + 4);
      if ((unint64_t)v41 >= *((_QWORD *)v36 + 3))
      {
        llvm::raw_ostream::write(v36, 10);
      }
      else
      {
        *((_QWORD *)v36 + 4) = v41 + 1;
        *v41 = 10;
      }
    }
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v43);
}

uint64_t sub_1C5EF11EC(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t NamedMetadata;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  int v22;
  unint64_t FragmentSizeInBits;
  llvm::GlobalValue *v24;
  _QWORD ***v25;
  _QWORD **i;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD **v29;
  _QWORD **v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream **v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::GlobalValue **v43;
  llvm::GlobalValue *v44;
  int v45;
  int v46;
  size_t *v47;
  const void *v48;
  size_t v49;
  size_t v50;
  llvm::raw_ostream *v51;
  llvm::raw_ostream *v52;
  llvm *v53;
  _BYTE *v54;
  _QWORD **v55;
  _QWORD **v56;
  _QWORD **v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  llvm::raw_ostream *v71;
  llvm::raw_ostream *v72;
  void *v73;
  void *v74;
  llvm *v75;
  _WORD *v76;
  llvm::raw_ostream *v77;
  llvm *v78;
  _BYTE *v79;
  char v80;
  uint64_t v81;
  llvm::DbgVariableIntrinsic *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  _BOOL4 v93;
  int v94;
  unsigned int v95;
  _QWORD **v96;
  _QWORD **v97;
  llvm::raw_ostream *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  int8x8_t *v116;
  uint64_t v117;
  int8x8_t v118;
  uint8x8_t v119;
  int v120;
  int v121;
  int8x8_t *v122;
  uint64_t v123;
  int8x8_t v124;
  uint8x8_t v125;
  llvm::raw_ostream *v126;
  llvm::raw_ostream *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  size_t v131;
  llvm::raw_ostream *v132;
  llvm::raw_ostream *v133;
  _WORD *v134;
  void *v135;
  _BYTE *v136;
  llvm::raw_ostream *v137;
  _WORD *v138;
  _DWORD *v139;
  char *v140;
  _BYTE *v141;
  llvm::raw_ostream *v142;
  void *v143;
  uint64_t v144;
  int v146;
  llvm::raw_ostream *v147;
  llvm::raw_ostream *v148;
  void *v149;
  unint64_t v150;
  _BYTE *v151;
  int v152;
  llvm::raw_ostream *v153;
  llvm::raw_ostream *v154;
  void *v155;
  unint64_t v156;
  _BYTE *v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  _DWORD *v162;
  size_t v163;
  unsigned int v164;
  char v167;
  unsigned __int8 *v168;
  __int128 v169;
  void *v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  void *v174;
  unsigned int v175;
  _WORD v176[24];
  int v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v169 = a4;
  *((_QWORD *)&v169 + 1) = a5;
  v174 = "llvm.debugify";
  v176[8] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a1, (uint64_t)&v174);
  if (NamedMetadata)
  {
    v15 = **(_QWORD ***)(NamedMetadata + 48);
    v16 = *(_QWORD *)(*(_QWORD *)(*v15 - 8 * *(unsigned int *)(*v15 + 8)) + 128);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = *(_DWORD *)v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v15[1] - 8 * *(unsigned int *)(v15[1] + 8)) + 128);
    v20 = (_QWORD *)(v19 + 24);
    if (*(_DWORD *)(v19 + 32) >= 0x41u)
      v20 = (_QWORD *)*v20;
    v21 = 0;
    v22 = *(_DWORD *)v20;
    if (a9 && a5)
    {
      v158 = v18;
      v159 = sub_1C63A9DE4(a9, &v169);
      v18 = v158;
      v21 = (_DWORD *)v159;
    }
    v162 = v21;
    v163 = a7;
    v160 = v18;
    sub_1C496F858((uint64_t)&v174, v18, 1);
    FragmentSizeInBits = sub_1C496F858((uint64_t)&v170, v22, 1);
    v164 = a8;
    v161 = v22;
    if (a2 == a3)
    {
      v167 = 0;
      goto LABEL_173;
    }
    v167 = 0;
LABEL_11:
    if (a2)
      v24 = (llvm::GlobalValue *)(a2 - 56);
    else
      v24 = 0;
    FragmentSizeInBits = sub_1C5EED688(v24);
    if ((FragmentSizeInBits & 1) != 0)
      goto LABEL_168;
    v25 = (_QWORD ***)((char *)v24 + 72);
    i = (_QWORD **)*((_QWORD *)v24 + 10);
    if (i == (_QWORD **)((char *)v24 + 72))
      goto LABEL_168;
    v27 = i - 3;
    if (!i)
      v27 = 0;
    v28 = v27[6];
    if (v28 != v27 + 5)
    {
      v29 = (_QWORD **)*((_QWORD *)v24 + 10);
      goto LABEL_25;
    }
    v29 = (_QWORD **)*((_QWORD *)v24 + 10);
    do
    {
      v29 = (_QWORD **)v29[1];
      if (v29 == v25)
        goto LABEL_80;
      v30 = v29 - 3;
      if (!v29)
        v30 = 0;
      v28 = v30[6];
    }
    while (v28 == v30 + 5);
LABEL_25:
    while (1)
    {
      v31 = v28 ? (uint64_t)(v28 - 3) : 0;
      FragmentSizeInBits = sub_1C50A0300(v31);
      if ((FragmentSizeInBits & 1) == 0)
        break;
LABEL_66:
      v28 = (_QWORD *)v28[1];
      v55 = v29 - 3;
      if (!v29)
        v55 = 0;
      if (v28 == v55 + 5)
      {
        while (1)
        {
          v29 = (_QWORD **)v29[1];
          if (v29 == v25)
            break;
          v56 = v29 - 3;
          if (!v29)
            v56 = 0;
          v28 = v56[6];
          if (v28 != v56 + 5)
            goto LABEL_73;
        }
LABEL_79:
        for (i = (_QWORD **)*((_QWORD *)v24 + 10); ; i = (_QWORD **)i[1])
        {
LABEL_80:
          if (i == v25)
            goto LABEL_168;
          v57 = i - 3;
          if (!i)
            v57 = 0;
          v58 = v57[6];
          if (v58 != v57 + 5)
            break;
        }
LABEL_126:
        if (v58)
          v81 = (uint64_t)(v58 - 3);
        else
          v81 = 0;
        FragmentSizeInBits = sub_1C50A0300(v81);
        if ((_DWORD)FragmentSizeInBits)
          v82 = (llvm::DbgVariableIntrinsic *)v81;
        else
          v82 = 0;
        if (!v58 || !(_DWORD)FragmentSizeInBits)
          goto LABEL_160;
        v83 = (_QWORD *)((char *)v82 - 32 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF));
        v84 = *(_QWORD *)(*(_QWORD *)(v83[4] + 24) - 8 * *(unsigned int *)(*(_QWORD *)(v83[4] + 24) + 8) + 8);
        if (!v84 || (v85 = *(_QWORD **)(v84 + 8), (v86 = *v85) == 0))
        {
          v93 = 1;
          v94 = -1;
          goto LABEL_154;
        }
        v87 = 0;
        v88 = (unsigned __int8 *)(v85 + 3);
        while (1)
        {
          v89 = *v88;
          if ((v89 - 48) >= 0xA)
          {
            if ((v89 - 97) >= 0x1A)
            {
              if ((v89 - 65) > 0x19)
              {
LABEL_149:
                v92 = v87;
LABEL_150:
                v93 = v86 != 0;
LABEL_151:
                if (HIDWORD(v92))
                  v94 = -2;
                else
                  v94 = v92 - 1;
LABEL_154:
                if (((*(_QWORD *)(*(_QWORD *)(v83[8] + 24) + 32) - *(_QWORD *)(*(_QWORD *)(v83[8] + 24) + 24)) & 0x7FFFFFFF8) == 0)
                {
                  v59 = *(unsigned __int8 **)(*v83 + 24);
                  v60 = *v59;
                  if (v60 <= 0x22)
                  {
                    if (v60 == 32)
                    {
                      v59 = (unsigned __int8 *)**((_QWORD **)v59 + 3);
                    }
                    else if (((1 << v60) & 0x6FFFFFFF0) != 0)
                    {
                      goto LABEL_155;
                    }
                  }
                  v61 = (uint64_t *)*((_QWORD *)v59 + 16);
                  if (v61)
                  {
                    v62 = *v61;
                    v63 = sub_1C5EF282C((uint64_t)a1, *v61);
                    FragmentSizeInBits = llvm::DbgVariableIntrinsic::getFragmentSizeInBits(v82);
                    if (v63 && v64 != 0)
                    {
                      if (*(_BYTE *)(v62 + 8) == 13)
                      {
                        v66 = *(_QWORD *)(((_QWORD *)v82 - 4 * (*((_DWORD *)v82 + 5) & 0x7FFFFFF))[4] + 24);
                        v67 = *(_QWORD *)(v66 - 8 * *(unsigned int *)(v66 + 8) + 24);
                        if (*(_BYTE *)v67 == 11 && (v68 = *(_DWORD *)(v67 + 52) - 5, v68 <= 3))
                          v69 = qword_1C86749E0[v68] | 0x100000000;
                        else
                          v69 = 0;
                        if ((v69 & 0xFF00000000) != 0 && !(_DWORD)v69 && v63 < FragmentSizeInBits)
                        {
LABEL_105:
                          v70 = FragmentSizeInBits;
                          if (byte_1ED8268C0)
                            v71 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
                          else
                            v71 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
                          v72 = v71;
                          v73 = (void *)*((_QWORD *)v71 + 4);
                          if (*((_QWORD *)v71 + 3) - (_QWORD)v73 > 0x21uLL)
                          {
                            qmemcpy(v73, "ERROR: dbg.value operand has size ", 34);
                            *((_QWORD *)v71 + 4) += 34;
                          }
                          else
                          {
                            v72 = llvm::raw_ostream::write(v71, "ERROR: dbg.value operand has size ", 0x22uLL);
                          }
                          sub_1C5E21910(v72, v63, 0, 0, 0);
                          v74 = (void *)*((_QWORD *)v72 + 4);
                          if (*((_QWORD *)v72 + 3) - (_QWORD)v74 > 0x1BuLL)
                          {
                            qmemcpy(v74, ", but its variable has size ", 28);
                            *((_QWORD *)v72 + 4) += 28;
                          }
                          else
                          {
                            v72 = llvm::raw_ostream::write(v72, ", but its variable has size ", 0x1CuLL);
                          }
                          v75 = sub_1C5E21910(v72, v70, 0, 0, 0);
                          v76 = (_WORD *)*((_QWORD *)v72 + 4);
                          if (*((_QWORD *)v72 + 3) - (_QWORD)v76 > 1uLL)
                          {
                            *v76 = 8250;
                            *((_QWORD *)v72 + 4) += 2;
                          }
                          else
                          {
                            v75 = llvm::raw_ostream::write(v72, ": ", 2uLL);
                          }
                          if (byte_1ED8268C0)
                            v77 = (llvm::raw_ostream *)llvm::nulls(v75);
                          else
                            v77 = (llvm::raw_ostream *)llvm::errs(v75);
                          llvm::Value::print(v82, v77, 0);
                          if (byte_1ED8268C0)
                            FragmentSizeInBits = (unint64_t)llvm::nulls(v78);
                          else
                            FragmentSizeInBits = (unint64_t)llvm::errs(v78);
                          v79 = *(_BYTE **)(FragmentSizeInBits + 32);
                          if (*(_BYTE **)(FragmentSizeInBits + 24) == v79)
                          {
                            v80 = 1;
                            FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)FragmentSizeInBits, "\n", 1uLL);
                          }
                          else
                          {
                            *v79 = 10;
                            ++*(_QWORD *)(FragmentSizeInBits + 32);
                            v80 = 1;
                          }
LABEL_159:
                          v167 |= v80;
LABEL_160:
                          v58 = (_QWORD *)v58[1];
                          v96 = i - 3;
                          if (!i)
                            v96 = 0;
                          if (v58 != v96 + 5)
                          {
LABEL_167:
                            if (i == v25)
                              goto LABEL_168;
                            goto LABEL_126;
                          }
                          while (1)
                          {
                            i = (_QWORD **)i[1];
                            if (i == v25)
                              break;
                            v97 = i - 3;
                            if (!i)
                              v97 = 0;
                            v58 = v97[6];
                            if (v58 != v97 + 5)
                              goto LABEL_167;
                          }
LABEL_168:
                          a2 = *(_QWORD *)(a2 + 8);
                          if (a2 == a3)
                          {
LABEL_173:
                            if (v177)
                            {
                              v99 = 0;
                              v100 = (uint64_t *)v174;
                              v101 = (v177 - 1) & 0xFFFFFFC0;
                              while (1)
                              {
                                v103 = *v100++;
                                v102 = v103;
                                v104 = v101 + v99 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v177;
                                v105 = v104 & v102;
                                if (v105)
                                  break;
                                v99 -= 64;
                                if (v101 + v99 == -64)
                                  goto LABEL_182;
                              }
                              v106 = __clz(__rbit64(v105));
                              if (v106 + 1 != (_DWORD)v99)
                              {
                                v146 = v106 - v99;
                                do
                                {
                                  if (byte_1ED8268C0)
                                    v147 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
                                  else
                                    v147 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
                                  v148 = v147;
                                  v149 = (void *)*((_QWORD *)v147 + 4);
                                  if (*((_QWORD *)v147 + 3) - (_QWORD)v149 > 0x15uLL)
                                  {
                                    qmemcpy(v149, "WARNING: Missing line ", 22);
                                    *((_QWORD *)v147 + 4) += 22;
                                  }
                                  else
                                  {
                                    v148 = llvm::raw_ostream::write(v147, "WARNING: Missing line ", 0x16uLL);
                                  }
                                  v150 = (v146 + 1);
                                  sub_1C5E21910(v148, v150, 0, 0, 0);
                                  v151 = (_BYTE *)*((_QWORD *)v148 + 4);
                                  if (*((_BYTE **)v148 + 3) == v151)
                                  {
                                    llvm::raw_ostream::write(v148, "\n", 1uLL);
                                  }
                                  else
                                  {
                                    *v151 = 10;
                                    ++*((_QWORD *)v148 + 4);
                                  }
                                  FragmentSizeInBits = sub_1C476BA0C(&v174, v150, v177, 1u);
                                  v146 = FragmentSizeInBits;
                                }
                                while ((_DWORD)FragmentSizeInBits != -1);
                              }
                            }
LABEL_182:
                            if (v173)
                            {
                              v107 = 0;
                              v108 = (uint64_t *)v170;
                              v109 = (v173 - 1) & 0xFFFFFFC0;
                              while (1)
                              {
                                v111 = *v108++;
                                v110 = v111;
                                v112 = v109 + v107 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
                                v113 = v112 & v110;
                                if (v113)
                                  break;
                                v107 -= 64;
                                if (v109 + v107 == -64)
                                  goto LABEL_191;
                              }
                              v114 = __clz(__rbit64(v113));
                              if (v114 + 1 != (_DWORD)v107)
                              {
                                v152 = v114 - v107;
                                do
                                {
                                  if (byte_1ED8268C0)
                                    v153 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
                                  else
                                    v153 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
                                  v154 = v153;
                                  v155 = (void *)*((_QWORD *)v153 + 4);
                                  if (*((_QWORD *)v153 + 3) - (_QWORD)v155 > 0x19uLL)
                                  {
                                    qmemcpy(v155, "WARNING: Missing variable ", 26);
                                    *((_QWORD *)v153 + 4) += 26;
                                  }
                                  else
                                  {
                                    v154 = llvm::raw_ostream::write(v153, "WARNING: Missing variable ", 0x1AuLL);
                                  }
                                  v156 = (v152 + 1);
                                  sub_1C5E21910(v154, v156, 0, 0, 0);
                                  v157 = (_BYTE *)*((_QWORD *)v154 + 4);
                                  if (*((_BYTE **)v154 + 3) == v157)
                                  {
                                    llvm::raw_ostream::write(v154, "\n", 1uLL);
                                  }
                                  else
                                  {
                                    *v157 = 10;
                                    ++*((_QWORD *)v154 + 4);
                                  }
                                  FragmentSizeInBits = sub_1C476BA0C(&v170, v156, v173, 1u);
                                  v152 = FragmentSizeInBits;
                                }
                                while ((_DWORD)FragmentSizeInBits != -1);
                              }
                            }
LABEL_191:
                            if (v162)
                            {
                              v162[3] += v160;
                              if (v175)
                              {
                                v115 = 0;
                                v116 = (int8x8_t *)v174;
                                v117 = 8 * v175;
                                do
                                {
                                  v118 = *v116++;
                                  v119 = (uint8x8_t)vcnt_s8(v118);
                                  v119.i16[0] = vaddlv_u8(v119);
                                  v115 += v119.i32[0];
                                  v117 -= 8;
                                }
                                while (v117);
                              }
                              else
                              {
                                v115 = 0;
                              }
                              v120 = v162[2] + v115;
                              v162[1] += v161;
                              v162[2] = v120;
                              if (v171)
                              {
                                v121 = 0;
                                v122 = (int8x8_t *)v170;
                                v123 = 8 * v171;
                                do
                                {
                                  v124 = *v122++;
                                  v125 = (uint8x8_t)vcnt_s8(v124);
                                  v125.i16[0] = vaddlv_u8(v125);
                                  v121 += v125.i32[0];
                                  v123 -= 8;
                                }
                                while (v123);
                              }
                              else
                              {
                                v121 = 0;
                              }
                              *v162 += v121;
                            }
                            if (byte_1ED8268C0)
                              v126 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
                            else
                              v126 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
                            v127 = v126;
                            v128 = v164;
                            v130 = *((_QWORD *)v126 + 3);
                            v129 = (_QWORD *)*((_QWORD *)v126 + 4);
                            if (v163 <= v130 - (uint64_t)v129)
                            {
                              if (v163)
                              {
                                v129 = memcpy(v129, a6, v163);
                                *((_QWORD *)v127 + 4) += v163;
                              }
                            }
                            else
                            {
                              v129 = llvm::raw_ostream::write(v127, (const char *)a6, v163);
                            }
                            v131 = *((_QWORD *)&v169 + 1);
                            if (*((_QWORD *)&v169 + 1))
                            {
                              if (byte_1ED8268C0)
                                v132 = (llvm::raw_ostream *)llvm::nulls((llvm *)v129);
                              else
                                v132 = (llvm::raw_ostream *)llvm::errs((llvm *)v129);
                              v133 = v132;
                              v134 = (_WORD *)*((_QWORD *)v132 + 4);
                              if (*((_QWORD *)v132 + 3) - (_QWORD)v134 > 1uLL)
                              {
                                *v134 = 23328;
                                v135 = (void *)(*((_QWORD *)v132 + 4) + 2);
                                *((_QWORD *)v133 + 4) = v135;
                              }
                              else
                              {
                                v133 = llvm::raw_ostream::write(v132, " [", 2uLL);
                                v135 = (void *)*((_QWORD *)v133 + 4);
                              }
                              if (v131 <= *((_QWORD *)v133 + 3) - (_QWORD)v135)
                              {
                                v129 = memcpy(v135, (const void *)v169, v131);
                                v136 = (_BYTE *)(*((_QWORD *)v133 + 4) + v131);
                                *((_QWORD *)v133 + 4) = v136;
                              }
                              else
                              {
                                v129 = llvm::raw_ostream::write(v133, (const char *)v169, v131);
                                v133 = (llvm::raw_ostream *)v129;
                                v136 = (_BYTE *)v129[4];
                              }
                              if (*((_BYTE **)v133 + 3) == v136)
                              {
                                v129 = llvm::raw_ostream::write(v133, "]", 1uLL);
                              }
                              else
                              {
                                *v136 = 93;
                                ++*((_QWORD *)v133 + 4);
                              }
                            }
                            if (byte_1ED8268C0)
                              v137 = (llvm::raw_ostream *)llvm::nulls((llvm *)v129);
                            else
                              v137 = (llvm::raw_ostream *)llvm::errs((llvm *)v129);
                            v138 = (_WORD *)*((_QWORD *)v137 + 4);
                            if (*((_QWORD *)v137 + 3) - (_QWORD)v138 > 1uLL)
                            {
                              *v138 = 8250;
                              v139 = (_DWORD *)(*((_QWORD *)v137 + 4) + 2);
                              *((_QWORD *)v137 + 4) = v139;
                            }
                            else
                            {
                              v137 = llvm::raw_ostream::write(v137, ": ", 2uLL);
                              v139 = (_DWORD *)*((_QWORD *)v137 + 4);
                            }
                            if ((v167 & 1) != 0)
                              v140 = "FAIL";
                            else
                              v140 = "PASS";
                            if (*((_QWORD *)v137 + 3) - (_QWORD)v139 > 3uLL)
                            {
                              *v139 = *(_DWORD *)v140;
                              v141 = (_BYTE *)(*((_QWORD *)v137 + 4) + 4);
                              *((_QWORD *)v137 + 4) = v141;
                            }
                            else
                            {
                              v137 = llvm::raw_ostream::write(v137, v140, 4uLL);
                              v141 = (_BYTE *)*((_QWORD *)v137 + 4);
                            }
                            if ((unint64_t)v141 >= *((_QWORD *)v137 + 3))
                            {
                              llvm::raw_ostream::write(v137, 10);
                              if (!v164)
                                goto LABEL_236;
                            }
                            else
                            {
                              *((_QWORD *)v137 + 4) = v141 + 1;
                              *v141 = 10;
                              if (!v164)
                              {
LABEL_236:
                                if (v170 != &v172)
                                  free(v170);
                                if (v174 != v176)
                                  free(v174);
                                return v128;
                              }
                            }
                            v128 = llvm::stripDebugifyMetadata(a1, (llvm::Module *)v140);
                            goto LABEL_236;
                          }
                          goto LABEL_11;
                        }
                      }
                      else if (v63 != FragmentSizeInBits)
                      {
                        goto LABEL_105;
                      }
                    }
                  }
                }
LABEL_155:
                v80 = 0;
                if (v93)
                  v95 = -2;
                else
                  v95 = v94;
                *((_QWORD *)v170 + (v95 >> 6)) &= ~(1 << v95);
                goto LABEL_159;
              }
              v90 = -55;
            }
            else
            {
              v90 = -87;
            }
          }
          else
          {
            v90 = -48;
          }
          v91 = v90 + v89;
          if (v91 > 9)
            goto LABEL_149;
          v92 = 10 * v87 + v91;
          if (v87 > v92 / 0xA)
          {
            v93 = 1;
            goto LABEL_151;
          }
          ++v88;
          v87 = v92;
          if (!--v86)
            goto LABEL_150;
        }
      }
LABEL_73:
      if (v29 == v25)
        goto LABEL_79;
    }
    v32 = *(unsigned __int8 **)(v31 + 48);
    v168 = v32;
    if (v32 && (FragmentSizeInBits = llvm::MetadataTracking::track((uint64_t)&v168, v32, 2), (v33 = v168) != 0))
    {
      v34 = *((_DWORD *)v168 + 1);
      if (!v34)
      {
LABEL_65:
        FragmentSizeInBits = llvm::MetadataTracking::untrack((uint64_t)&v168, v33);
        goto LABEL_66;
      }
      *((_QWORD *)v174 + ((v34 - 1) >> 6)) &= ~(1 << (v34 - 1));
    }
    else
    {
      if (*(_BYTE *)(v31 + 16) == 83)
        goto LABEL_66;
      if (byte_1ED8268C0)
        v35 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
      else
        v35 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
      v36 = (void *)*((_QWORD *)v35 + 4);
      if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x34uLL)
      {
        qmemcpy(v36, "WARNING: Instruction with empty DebugLoc in function ", 53);
        *((_QWORD *)v35 + 4) += 53;
      }
      else
      {
        v35 = llvm::raw_ostream::write(v35, "WARNING: Instruction with empty DebugLoc in function ", 0x35uLL);
      }
      if (byte_1ED8268C0)
        v37 = (llvm::raw_ostream **)llvm::nulls(v35);
      else
        v37 = (llvm::raw_ostream **)llvm::errs(v35);
      v38 = (llvm::raw_ostream *)v37;
      if ((*((_BYTE *)v24 + 23) & 0x10) != 0)
      {
        v39 = ***(_QWORD ***)v24;
        v40 = *(_QWORD *)(v39 + 152);
        v41 = *(unsigned int *)(v39 + 168);
        if ((_DWORD)v41)
        {
          LODWORD(v42) = (v41 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          v43 = (llvm::GlobalValue **)(v40 + 16 * v42);
          v44 = *v43;
          if (*v43 != v24)
          {
            v45 = 1;
            do
            {
              if (v44 == (llvm::GlobalValue *)-4096)
                goto LABEL_49;
              v46 = v42 + v45++;
              v42 = v46 & (v41 - 1);
              v44 = *(llvm::GlobalValue **)(v40 + 16 * v42);
            }
            while (v44 != v24);
            v43 = (llvm::GlobalValue **)(v40 + 16 * v42);
          }
        }
        else
        {
LABEL_49:
          v43 = (llvm::GlobalValue **)(v40 + 16 * v41);
        }
        v47 = (size_t *)v43[1];
        v50 = *v47;
        v48 = v47 + 2;
        v49 = v50;
        v51 = v37[4];
        if (v50 <= *((_QWORD *)v38 + 3) - (_QWORD)v51)
        {
          if (v49)
          {
            memcpy(v51, v48, v49);
            v51 = (llvm::raw_ostream *)(*((_QWORD *)v38 + 4) + v49);
            *((_QWORD *)v38 + 4) = v51;
          }
        }
        else
        {
          v38 = llvm::raw_ostream::write(v38, (const char *)v48, v49);
          v51 = (llvm::raw_ostream *)*((_QWORD *)v38 + 4);
        }
      }
      else
      {
        v51 = v37[4];
      }
      if (*((_QWORD *)v38 + 3) - (_QWORD)v51 > 2uLL)
      {
        *((_BYTE *)v51 + 2) = 45;
        *(_WORD *)v51 = 11552;
        *((_QWORD *)v38 + 4) += 3;
      }
      else
      {
        v51 = llvm::raw_ostream::write(v38, " --", 3uLL);
      }
      if (byte_1ED8268C0)
        v52 = (llvm::raw_ostream *)llvm::nulls(v51);
      else
        v52 = (llvm::raw_ostream *)llvm::errs(v51);
      llvm::Value::print((llvm::Value *)v31, v52, 0);
      if (byte_1ED8268C0)
        FragmentSizeInBits = (unint64_t)llvm::nulls(v53);
      else
        FragmentSizeInBits = (unint64_t)llvm::errs(v53);
      v54 = *(_BYTE **)(FragmentSizeInBits + 32);
      if (*(_BYTE **)(FragmentSizeInBits + 24) == v54)
      {
        FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)FragmentSizeInBits, "\n", 1uLL);
      }
      else
      {
        *v54 = 10;
        ++*(_QWORD *)(FragmentSizeInBits + 32);
      }
    }
    v33 = v168;
    if (!v168)
      goto LABEL_66;
    goto LABEL_65;
  }
  if (byte_1ED8268C0)
    v98 = (llvm::raw_ostream *)llvm::nulls(0);
  else
    v98 = (llvm::raw_ostream *)llvm::errs(0);
  v142 = v98;
  v144 = *((_QWORD *)v98 + 3);
  v143 = (void *)*((_QWORD *)v98 + 4);
  if (a7 <= v144 - (uint64_t)v143)
  {
    if (a7)
    {
      memcpy(v143, a6, a7);
      v143 = (void *)(*((_QWORD *)v142 + 4) + a7);
      *((_QWORD *)v142 + 4) = v143;
    }
  }
  else
  {
    v142 = llvm::raw_ostream::write(v142, (const char *)a6, a7);
    v143 = (void *)*((_QWORD *)v142 + 4);
  }
  if (*((_QWORD *)v142 + 3) - (_QWORD)v143 > 0x2BuLL)
  {
    v128 = 0;
    qmemcpy(v143, ": Skipping module without debugify metadata\n", 44);
    *((_QWORD *)v142 + 4) += 44;
  }
  else
  {
    llvm::raw_ostream::write(v142, ": Skipping module without debugify metadata\n", 0x2CuLL);
    return 0;
  }
  return v128;
}

void llvm::DebugifyEachInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  unint64_t v34;

  v4 = *(unsigned int *)(a2 + 296);
  if (v4 >= *(_DWORD *)(a2 + 300))
  {
    v34 = 0;
    v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, &v34);
    v10 = v9;
    v11 = *(unsigned int *)(a2 + 296);
    v9[4 * v11 + 3] = (char *)off_1EF8EEB10 + 2;
    v12 = *(_QWORD **)(a2 + 288);
    if ((_DWORD)v11)
    {
      v13 = 32 * v11;
      v14 = v9;
      do
      {
        v14[3] = 0;
        v15 = v12[3];
        v14[3] = v15;
        if (v12[3] >= 8uLL)
        {
          if ((v15 & 2) != 0 && (v15 & 4) != 0)
          {
            (*(void (**)(_QWORD *, _QWORD *))((v15 & 0xFFFFFFFFFFFFFFF8) + 8))(v14, v12);
          }
          else
          {
            v16 = *(_OWORD *)v12;
            v14[2] = v12[2];
            *(_OWORD *)v14 = v16;
          }
          v12[3] = 0;
        }
        v12 += 4;
        v14 += 4;
        v13 -= 32;
      }
      while (v13);
      v12 = *(_QWORD **)(a2 + 288);
      v17 = *(unsigned int *)(a2 + 296);
      if ((_DWORD)v17)
      {
        v18 = 32 * v17;
        v19 = (char *)(v12 - 4);
        do
        {
          sub_1C5052E10(&v19[v18]);
          v18 -= 32;
        }
        while (v18);
        v12 = *(_QWORD **)(a2 + 288);
      }
    }
    v20 = v34;
    if (v12 != (_QWORD *)(a2 + 304))
      free(v12);
    *(_QWORD *)(a2 + 288) = v10;
    *(_DWORD *)(a2 + 300) = v20;
    v5 = *(_DWORD *)(a2 + 296) + 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 288) + 32 * v4 + 24) = (char *)off_1EF8EEB10 + 2;
    v5 = v4 + 1;
  }
  *(_DWORD *)(a2 + 296) = v5;
  v6 = *(unsigned int *)(a2 + 440);
  if (v6 >= *(_DWORD *)(a2 + 444))
  {
    v34 = 0;
    v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v34);
    v22 = v21;
    v23 = *(unsigned int *)(a2 + 440);
    v24 = &v21[32 * v23];
    *(_QWORD *)v24 = a1;
    *((_QWORD *)v24 + 3) = (char *)&off_1EF8EEB18 + 2;
    v25 = *(_QWORD **)(a2 + 432);
    if ((_DWORD)v23)
    {
      v26 = 32 * v23;
      v27 = v21;
      do
      {
        *((_QWORD *)v27 + 3) = 0;
        v28 = v25[3];
        *((_QWORD *)v27 + 3) = v28;
        if (v25[3] >= 8uLL)
        {
          if ((v28 & 2) != 0 && (v28 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v28 & 0xFFFFFFFFFFFFFFF8) + 8))(v27, v25);
          }
          else
          {
            v29 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = v25[2];
            *(_OWORD *)v27 = v29;
          }
          v25[3] = 0;
        }
        v25 += 4;
        v27 += 32;
        v26 -= 32;
      }
      while (v26);
      v25 = *(_QWORD **)(a2 + 432);
      v30 = *(unsigned int *)(a2 + 440);
      if ((_DWORD)v30)
      {
        v31 = 32 * v30;
        v32 = (char *)(v25 - 4);
        do
        {
          sub_1C5052E10(&v32[v31]);
          v31 -= 32;
        }
        while (v31);
        v25 = *(_QWORD **)(a2 + 432);
      }
    }
    v33 = v34;
    if (v25 != (_QWORD *)(a2 + 448))
      free(v25);
    *(_QWORD *)(a2 + 432) = v22;
    *(_DWORD *)(a2 + 444) = v33;
    v8 = *(_DWORD *)(a2 + 440) + 1;
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v6);
    *v7 = a1;
    v7[3] = (char *)&off_1EF8EEB18 + 2;
    v8 = v6 + 1;
  }
  *(_DWORD *)(a2 + 440) = v8;
}

uint64_t sub_1C5EF2400(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C5EF2430(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C5EF2460(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1C5EF2490(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1C5EF24C0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81A90C8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C5EF2500(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C5EF2620(v17);
  }
}

uint64_t sub_1C5EF2620(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C5EF2638(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81A9060;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81A90C8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5EF26C8(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C5EF26D4(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C5EF26E4(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81A9118;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C5EF2750(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C5EF2764(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C5EF276C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81A90C8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5EF27BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C5EF27C4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C5EF27D8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C5EF27EC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C5EF2800(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C5EF282C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  const char *v5;
  int v6;
  uint64_t result;
  int isSizedDerivedType;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 > 0x11)
  {
LABEL_9:
    if ((v4 & 0xFE) != 0x12 && v4 != 21)
      return 0;
LABEL_7:
    isSizedDerivedType = llvm::Type::isSizedDerivedType(a2, 0);
    result = 0;
    if (!isSizedDerivedType)
      return result;
    goto LABEL_3;
  }
  if (((1 << v4) & 0xAC7F) == 0)
  {
    if (((1 << v4) & 0x30000) != 0)
      goto LABEL_7;
    goto LABEL_9;
  }
LABEL_3:
  v6 = sub_1C53E2F94(a1 + 272, a2);
  if ((_DWORD)v5 == 1)
  return v6;
}

_QWORD *sub_1C5EF28D4(_QWORD *result, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;

  *result = *a2;
  result[1] = 4;
  v2 = result + 1;
  result[2] = 0;
  v3 = (unint64_t)(result + 2);
  v4 = a2[3];
  result[3] = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
  {
    v6 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v3 = *(_QWORD *)v6;
    *(_QWORD *)v6 = v2;
    *v2 = v6 | 4;
    if (*(_QWORD *)v3)
      **(_QWORD **)v3 = **(_QWORD **)v3 & 7 | v3;
  }
  return result;
}

char *sub_1C5EF2948(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v16 = *(char **)(a1 + 8);
    v15 = (_QWORD *)(a1 + 8);
    v12 = v16;
    v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          v26 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)v25 = v26;
          v25 += 16;
          v24 += 16;
        }
        while (v6 != a3);
      }
      v14 = v24 - result;
      v12 = result;
    }
    else
    {
      v18 = &a2[16 * v17];
      if (v12 != result)
      {
        v19 = 16 * v17;
        do
        {
          v20 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)result = v20;
          result += 16;
          v19 -= 16;
        }
        while (v19);
      }
      v21 = v12;
      if (v18 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v18 != a3);
      }
      v14 = v21 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 60)
      goto LABEL_27;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_27:
      abort();
    result = (char *)operator new(16 * v11);
    v12 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v11];
    v13 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v14 = v13 - v12;
    v15 = (_QWORD *)(a1 + 8);
  }
  *v15 = &v12[v14];
  return result;
}

char *sub_1C5EF2AC4(char **a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v16 = a1[1];
    v15 = a1 + 1;
    v12 = v16;
    v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_QWORD *)v23 = *(_QWORD *)v6;
          v23[8] = v6[8];
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      v14 = v22 - result;
      v12 = result;
    }
    else
    {
      v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          result[8] = v6[8];
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      v19 = v12;
      if (v18 != a3)
      {
        v20 = v12;
        do
        {
          v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_26;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_26:
      abort();
    result = (char *)operator new(16 * v11);
    v12 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    v13 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v14 = v13 - v12;
    v15 = a1 + 1;
  }
  *v15 = &v12[v14];
  return result;
}

_QWORD *sub_1C5EF2C5C(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  int32x2_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;

  v6 = a2;
  v7 = result;
  v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 5)
  {
    sub_1C63A9D24((void **)result);
    if (a4 >> 59)
      goto LABEL_97;
    v64 = v7[2] - *v7;
    v65 = v64 >> 4;
    if (v64 >> 4 <= a4)
      v65 = a4;
    v66 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v65;
    if (v66 >> 59)
LABEL_97:
      abort();
    result = operator new(32 * v66);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * v66];
    while (v6 != a3)
    {
      v67 = sub_1C5EF28D4(result, v6);
      v6 += 4;
      result = v67 + 4;
    }
    v7[1] = result;
  }
  else
  {
    v9 = (char *)result[1];
    v10 = (v9 - v8) >> 5;
    if (v10 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          *(_QWORD *)v8 = *v6;
          v30 = *((_QWORD *)v8 + 3);
          v31 = v6[3];
          if (v30 != v31)
          {
            v32 = v30 == -4096 || v30 == 0;
            if (!v32 && v30 != -8192)
            {
              v36 = *((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v36 = *((_QWORD *)v8 + 2);
              v37 = (unint64_t *)*((_QWORD *)v8 + 2);
              if (v37)
              {
                *v37 = *v37 & 7 | v36;
              }
              else
              {
                v38 = *((_QWORD *)v8 + 3);
                v39 = ***(int32x2_t ****)v38;
                v40 = (unint64_t)v39[303];
                if (v40 <= v36)
                {
                  v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v36)
                  {
                    v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v38 >> 4) ^ (v38 >> 9));
                    v44 = (uint64_t *)(v40 + 16 * v43);
                    v45 = *v44;
                    if (v38 == *v44)
                    {
LABEL_57:
                      *v44 = -8192;
                      v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                      v38 = *((_QWORD *)v8 + 3);
                    }
                    else
                    {
                      v46 = 1;
                      while (v45 != -4096)
                      {
                        v47 = v43 + v46++;
                        v43 = v47 & v42;
                        v45 = *(_QWORD *)(v40 + 16 * v43);
                        if (v38 == v45)
                        {
                          v44 = (uint64_t *)(v40 + 16 * v43);
                          goto LABEL_57;
                        }
                      }
                    }
                    *(_BYTE *)(v38 + 17) &= ~1u;
                  }
                }
              }
              v31 = v6[3];
            }
            *((_QWORD *)v8 + 3) = v31;
            if (v31 != -4096 && v31 != -8192 && v31 != 0)
            {
              v34 = v6[1];
              *((_QWORD *)v8 + 2) = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF8) = v8 + 8;
              *((_QWORD *)v8 + 1) = v34 & 0xFFFFFFFFFFFFFFF8 | *((_QWORD *)v8 + 1) & 7;
              v35 = (unint64_t *)*((_QWORD *)v8 + 2);
              if (v35)
                *v35 = *v35 & 7 | (unint64_t)(v8 + 16);
            }
          }
          v6 += 4;
          v8 += 32;
        }
        while (v6 != a3);
        v9 = (char *)result[1];
      }
      for (; v9 != v8; v9 -= 32)
      {
        v50 = *((_QWORD *)v9 - 1);
        if (v50 != -8192 && v50 != -4096 && v50 != 0)
        {
          v52 = *((_QWORD *)v9 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v52 = *((_QWORD *)v9 - 2);
          v53 = (unint64_t *)*((_QWORD *)v9 - 2);
          if (v53)
          {
            *v53 = *v53 & 7 | v52;
          }
          else
          {
            v54 = *((_QWORD *)v9 - 1);
            v55 = ***(int32x2_t ****)v54;
            v56 = (unint64_t)v55[303];
            if (v56 <= v52)
            {
              v57 = v55[305].u32[0];
              if (v56 + 16 * v57 > v52)
              {
                v58 = v57 - 1;
                LODWORD(v59) = v58 & ((v54 >> 4) ^ (v54 >> 9));
                v60 = (uint64_t *)(v56 + 16 * v59);
                v61 = *v60;
                if (v54 == *v60)
                {
LABEL_82:
                  *v60 = -8192;
                  v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                  v54 = *((_QWORD *)v9 - 1);
                }
                else
                {
                  v62 = 1;
                  while (v61 != -4096)
                  {
                    v63 = v59 + v62++;
                    v59 = v63 & v58;
                    v61 = *(_QWORD *)(v56 + 16 * v59);
                    if (v54 == v61)
                    {
                      v60 = (uint64_t *)(v56 + 16 * v59);
                      goto LABEL_82;
                    }
                  }
                }
                *(_BYTE *)(v54 + 17) &= ~1u;
              }
            }
          }
        }
      }
      result[1] = v8;
    }
    else
    {
      v11 = &a2[4 * v10];
      if (v9 != v8)
      {
        do
        {
          *(_QWORD *)v8 = *v6;
          v12 = *((_QWORD *)v8 + 3);
          v13 = v6[3];
          if (v12 != v13)
          {
            v14 = v12 == -4096 || v12 == 0;
            if (!v14 && v12 != -8192)
            {
              v18 = *((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v18 = *((_QWORD *)v8 + 2);
              v19 = (unint64_t *)*((_QWORD *)v8 + 2);
              if (v19)
              {
                *v19 = *v19 & 7 | v18;
              }
              else
              {
                v20 = *((_QWORD *)v8 + 3);
                v21 = ***(int32x2_t ****)v20;
                v22 = (unint64_t)v21[303];
                if (v22 <= v18)
                {
                  v23 = v21[305].u32[0];
                  if (v22 + 16 * v23 > v18)
                  {
                    v24 = v23 - 1;
                    LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
                    v26 = (uint64_t *)(v22 + 16 * v25);
                    v27 = *v26;
                    if (v20 == *v26)
                    {
LABEL_28:
                      *v26 = -8192;
                      v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                      v20 = *((_QWORD *)v8 + 3);
                    }
                    else
                    {
                      v28 = 1;
                      while (v27 != -4096)
                      {
                        v29 = v25 + v28++;
                        v25 = v29 & v24;
                        v27 = *(_QWORD *)(v22 + 16 * v25);
                        if (v20 == v27)
                        {
                          v26 = (uint64_t *)(v22 + 16 * v25);
                          goto LABEL_28;
                        }
                      }
                    }
                    *(_BYTE *)(v20 + 17) &= ~1u;
                  }
                }
              }
              v13 = v6[3];
            }
            *((_QWORD *)v8 + 3) = v13;
            if (v13 != -4096 && v13 != -8192 && v13 != 0)
            {
              v16 = v6[1];
              *((_QWORD *)v8 + 2) = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = v8 + 8;
              *((_QWORD *)v8 + 1) = v16 & 0xFFFFFFFFFFFFFFF8 | *((_QWORD *)v8 + 1) & 7;
              v17 = (unint64_t *)*((_QWORD *)v8 + 2);
              if (v17)
                *v17 = *v17 & 7 | (unint64_t)(v8 + 16);
            }
          }
          v6 += 4;
          v8 += 32;
        }
        while (v6 != v11);
        v8 = (char *)result[1];
      }
      v48 = v8;
      if (v11 != a3)
      {
        v48 = v8;
        result = v8;
        do
        {
          v49 = sub_1C5EF28D4(result, v11);
          v11 += 4;
          result = v49 + 4;
          v48 += 32;
        }
        while (v11 != a3);
      }
      v7[1] = v48;
    }
  }
  return result;
}

char *sub_1C5EF3170(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v16 = *(char **)(a1 + 8);
    v15 = (_QWORD *)(a1 + 8);
    v12 = v16;
    v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_QWORD *)v23 = *(_QWORD *)v6;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      v14 = v22 - result;
      v12 = result;
    }
    else
    {
      v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      v19 = v12;
      if (v18 != a3)
      {
        v20 = v12;
        do
        {
          v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 60)
      goto LABEL_26;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_26:
      abort();
    result = (char *)operator new(16 * v11);
    v12 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v11];
    v13 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    v14 = v13 - v12;
    v15 = (_QWORD *)(a1 + 8);
  }
  *v15 = &v12[v14];
  return result;
}

void sub_1C5EF3308(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          v7 = *((_QWORD *)v3 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v7 = *((_QWORD *)v3 - 2);
          v8 = (unint64_t *)*((_QWORD *)v3 - 2);
          if (v8)
          {
            *v8 = *v8 & 7 | v7;
          }
          else
          {
            v9 = *((_QWORD *)v3 - 1);
            v10 = ***(int32x2_t ****)v9;
            v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                v15 = (uint64_t *)(v11 + 16 * v14);
                v16 = *v15;
                if (v9 == *v15)
                {
LABEL_19:
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = *((_QWORD *)v3 - 1);
                }
                else
                {
                  v17 = 1;
                  while (v16 != -4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(_QWORD *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_19;
                    }
                  }
                }
                *(_BYTE *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_1C5EF3438(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5EF345C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

BOOL sub_1C5EF3468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 56) != 1)
    return llvm::collectDebugInfoMetadata(a2, *(_QWORD *)(a2 + 32), v2, *(_QWORD *)(a1 + 48), "ModuleDebugify (original debuginfo)", 0x23uLL);
  v6 = 0;
  return llvm::applyDebugifyMetadata(a2, v3, v2, "ModuleDebugify: ", 0x10uLL, (uint64_t)v5);
}

void sub_1C5EF3520(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5EF3544(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

BOOL sub_1C5EF3550(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 40);
  if (v3 != 1)
    return llvm::collectDebugInfoMetadata(v4, *(_QWORD *)(v4 + 32), v4 + 24, *(_QWORD *)(a1 + 48), "FunctionDebugify (original debuginfo)", 0x25uLL);
  v5 = *(_QWORD *)(a2 + 64);
  v8 = 0;
  return llvm::applyDebugifyMetadata(v4, a2 + 56, v5, "FunctionDebugify: ", 0x12uLL, (uint64_t)v7);
}

void sub_1C5EF360C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5EF3630(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5EF363C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2 + 24;
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 80) == 1)
    return sub_1C5EF11EC((uint64_t **)a2, v4, v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), "CheckModuleDebugify", 0x13uLL, *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 64));
  else
    return llvm::checkDebugInfoMetadata(a2, v4, v3, *(_QWORD *)(a1 + 72), "CheckModuleDebugify (original debuginfo)", 0x28uLL, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE **)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1C5EF36BC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5EF36E0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5EF36EC(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t ***)(a2 + 40);
  v5 = a2 + 56;
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_DWORD *)(a1 + 80) == 1)
    return sub_1C5EF11EC(v4, v5, v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), "CheckFunctionDebugify", 0x15uLL, *(unsigned __int8 *)(a1 + 84), *(_QWORD *)(a1 + 64));
  else
    return llvm::checkDebugInfoMetadata((uint64_t)v4, v5, v6, *(_QWORD *)(a1 + 72), "CheckFunctionDebugify (original debuginfo)", 0x2AuLL, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE **)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1C5EF376C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5EF3780()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81A93D8;
  return result;
}

void sub_1C5EF37A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81A93D8;
}

char *sub_1C5EF37C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = (uint64_t)(a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v19 = a1 + 2;
  if (v7)
  {
    if (v7 >> 59)
      sub_1C4764EE4();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * v2];
  sub_1C5EF28D4(v9, a2);
  v11 = (_QWORD *)*a1;
  v10 = (_QWORD *)a1[1];
  if (v10 == (_QWORD *)*a1)
  {
    v12 = vdupq_n_s64((unint64_t)v10);
    v13 = v9;
  }
  else
  {
    v13 = v9;
    do
    {
      v10 -= 4;
      v13 = sub_1C5EF28D4(v13 - 4, v10);
    }
    while (v10 != v11);
    v12 = *(int64x2_t *)a1;
  }
  *a1 = v13;
  a1[1] = v9 + 32;
  v17 = v12;
  v14 = a1[2];
  a1[2] = &v8[32 * v7];
  v18 = v14;
  v16 = v12.i64[0];
  sub_1C63AA0A0((uint64_t)&v16);
  return v9 + 32;
}

uint64_t sub_1C5EF38D8(uint64_t a1, char *a2, size_t a3, _QWORD **a4)
{
  _QWORD *v4;
  uint64_t result;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *a4;
  *a4 = 0;
  result = sub_1C5EF3A28(a2, a3);
  if ((result & 1) != 0)
  {
    if (!v4)
      return result;
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  }
  if (v4)
  {
    v6 = (void *)(*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
    v7 = (void *)(*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
    if (v6 == &llvm::Any::TypeId<llvm::Function const*>::Id)
    {
      v13 = v4[1];
      v8 = *(_QWORD *)(v13 + 40);
      v10 = v13 + 56;
      v9 = *(_QWORD *)(v13 + 64);
      v15 = 0;
      v11 = "FunctionDebugify: ";
      v12 = 18;
    }
    else
    {
      if (v7 != &llvm::Any::TypeId<llvm::Module const*>::Id)
        return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
      (*(void (**)(_QWORD *))(*v4 + 24))(v4);
      v8 = v4[1];
      v9 = v8 + 24;
      v10 = *(_QWORD *)(v8 + 32);
      v15 = 0;
      v11 = "ModuleDebugify: ";
      v12 = 16;
    }
    llvm::applyDebugifyMetadata(v8, v10, v9, v11, v12, (uint64_t)v14);
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return result;
}

uint64_t sub_1C5EF3A28(char *a1, size_t a2)
{
  _OWORD *v4;
  uint64_t isSpecialPass;
  uint64_t v7[3];

  v4 = operator new(0x80uLL);
  v7[1] = (uint64_t)(v4 + 8);
  v7[2] = (uint64_t)(v4 + 8);
  v4[4] = xmmword_1E81A9450;
  v4[5] = *(_OWORD *)&off_1E81A9460;
  v4[6] = xmmword_1E81A9470;
  v4[7] = *(_OWORD *)&off_1E81A9480;
  *v4 = xmmword_1E81A9410;
  v4[1] = *(_OWORD *)&off_1E81A9420;
  v4[2] = xmmword_1E81A9430;
  v4[3] = *(_OWORD *)&off_1E81A9440;
  v7[0] = (uint64_t)v4;
  isSpecialPass = llvm::isSpecialPass(a1, a2, v7);
  operator delete(v4);
  return isSpecialPass;
}

uint64_t sub_1C5EF3AB8(uint64_t *a1, char *a2, size_t a3, uint64_t ****a4)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  void *v10;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  result = sub_1C5EF3A28(a2, a3);
  if ((result & 1) != 0)
  {
    if (!v6)
      return result;
    return ((uint64_t (*)(uint64_t ***))(*v6)[1])(v6);
  }
  if (v6)
  {
    v9 = (void *)((uint64_t (*)(uint64_t ***))(*v6)[3])(v6);
    v10 = (void *)((uint64_t (*)(uint64_t ***))(*v6)[3])(v6);
    if (v9 == &llvm::Any::TypeId<llvm::Function const*>::Id)
    {
      sub_1C5EF11EC((uint64_t **)v6[1][5], (uint64_t)(v6[1] + 7), (uint64_t)v6[1][8], (uint64_t)a2, a3, "CheckFunctionDebugify", 0x15uLL, 1u, v7);
    }
    else if (v10 == &llvm::Any::TypeId<llvm::Module const*>::Id)
    {
      ((void (*)(uint64_t ***))(*v6)[3])(v6);
      sub_1C5EF11EC(v6[1], (uint64_t)v6[1][4], (uint64_t)(v6[1] + 3), (uint64_t)a2, a3, "CheckModuleDebugify", 0x13uLL, 1u, v7);
    }
    return ((uint64_t (*)(uint64_t ***))(*v6)[1])(v6);
  }
  return result;
}

uint64_t sub_1C5EF3BE8()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7639;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81A9158;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = &unk_1C877348F;
  *(_DWORD *)(result + 56) = 1;
  return result;
}

uint64_t sub_1C5EF3C48()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1ED8266F9;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81A9298;
  *(_QWORD *)(result + 32) = &unk_1C877348F;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &unk_1C877348F;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 1;
  *(_BYTE *)(result + 84) = 0;
  return result;
}

uint64_t sub_1C5EF3CB0()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1ED8266F8;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E81A91F8;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = &unk_1C877348F;
  *(_DWORD *)(result + 56) = 1;
  return result;
}

uint64_t sub_1C5EF3D10()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1ED8266FA;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E81A9338;
  *(_QWORD *)(result + 32) = &unk_1C877348F;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &unk_1C877348F;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 1;
  *(_BYTE *)(result + 84) = 0;
  return result;
}

uint64_t sub_1C5EF3D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  __int128 v5;
  int v6;
  int v7;
  char *v8;
  unsigned int **v9;
  int *v10;
  char *v11;
  __int128 v12;
  int v13;
  _BOOL4 v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  int v21;
  int v22;
  int v28;
  unint64_t v29;
  _BOOL4 v30;
  unsigned int *v31[2];
  __int128 v32;
  uint64_t (**v33)();
  int v34;
  char v35;
  unint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  int v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v37 = "Suppress verbose debugify output";
  *((_QWORD *)&v37 + 1) = 32;
  sub_1C6136DA0((llvm::cl::Option *)&unk_1ED826840, "debugify-quiet", &v37);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED826840, &dword_1C475E000);
  *(_QWORD *)&v37 = "Set max number of processed functions per pass.";
  *((_QWORD *)&v37 + 1) = 47;
  LODWORD(v36) = -1;
  v31[0] = (unsigned int *)&v36;
  sub_1C63A9EA4(&v37, v31);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &qword_1ED826900, &dword_1C475E000);
  *(_QWORD *)&v37 = v38;
  v38[0] = "locations";
  v38[1] = 9;
  v39 = 0;
  v40 = "Locations only";
  v41 = 14;
  v42 = "location+variables";
  v43 = 18;
  v44 = 1;
  v45 = "Locations and Variables";
  v46 = 23;
  *((_QWORD *)&v37 + 1) = 0x400000002;
  v0 = sub_1C47AD050((uint64_t)qword_1ED8269C8, 0, 0);
  dword_1ED826A48 = 0;
  qword_1ED826A58 = 0;
  qword_1ED826A50 = (uint64_t)&off_1E81A9118;
  qword_1ED8269C8[0] = (uint64_t)off_1E81A9060;
  qword_1ED826A68 = v0;
  qword_1ED826A60 = (uint64_t)&off_1E81A90C8;
  qword_1ED826A70 = (uint64_t)&unk_1ED826A80;
  qword_1ED826A78 = 0x800000000;
  qword_1ED826C00 = (uint64_t)&off_1E81A93D8;
  qword_1ED826C18 = (uint64_t)&qword_1ED826C00;
  llvm::cl::Option::setArgStr(v0, "debugify-level", 0xEuLL);
  qword_1ED8269E8 = (uint64_t)"Kind of debug info to add";
  unk_1ED8269F0 = 25;
  if (DWORD2(v37))
  {
    v1 = v37;
    v2 = v37 + 40 * DWORD2(v37);
    do
    {
      v3 = *(unsigned int **)v1;
      v4 = *(unsigned int **)(v1 + 8);
      v5 = *(_OWORD *)(v1 + 24);
      v6 = *(_DWORD *)(v1 + 16);
      v31[0] = *(unsigned int **)v1;
      v31[1] = v4;
      v32 = v5;
      v33 = &off_1E81A9118;
      v35 = 1;
      v34 = v6;
      v7 = qword_1ED826A78;
      v8 = (char *)qword_1ED826A70;
      if (qword_1ED826A78 >= HIDWORD(qword_1ED826A78))
      {
        v15 = qword_1ED826A70 <= (unint64_t)v31
           && qword_1ED826A70 + 48 * (unint64_t)qword_1ED826A78 > (unint64_t)v31;
        v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - qword_1ED826A70) >> 4);
        v30 = v15;
        if (!v15)
          v16 = -1;
        v29 = v16;
        v36 = 0;
        v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED826A70, qword_1ED826A78 + 1, 48, &v36);
        v17 = (_OWORD *)qword_1ED826A70;
        if ((_DWORD)qword_1ED826A78)
        {
          v18 = qword_1ED826A70 + 48 * qword_1ED826A78;
          v19 = v8;
          do
          {
            v20 = v17[1];
            *(_OWORD *)v19 = *v17;
            *((_OWORD *)v19 + 1) = v20;
            *((_QWORD *)v19 + 4) = &off_1E81A9138;
            v21 = *((_DWORD *)v17 + 10);
            v19[44] = *((_BYTE *)v17 + 44);
            *((_DWORD *)v19 + 10) = v21;
            *((_QWORD *)v19 + 4) = &off_1E81A9118;
            v17 += 3;
            v19 += 48;
          }
          while (v17 != (_OWORD *)v18);
          v17 = (_OWORD *)qword_1ED826A70;
        }
        v22 = v36;
        if (v17 != (_OWORD *)&unk_1ED826A80)
        {
          v28 = v36;
          free(v17);
          v22 = v28;
        }
        qword_1ED826A70 = (uint64_t)v8;
        HIDWORD(qword_1ED826A78) = v22;
        v9 = v31;
        if (v30)
        {
          v9 = (unsigned int **)&v8[48 * v29];
          v10 = (int *)(v9 + 5);
        }
        else
        {
          v10 = &v34;
        }
        v7 = qword_1ED826A78;
      }
      else
      {
        v9 = v31;
        v10 = &v34;
      }
      v11 = &v8[48 * v7];
      v12 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v9;
      *((_OWORD *)v11 + 1) = v12;
      *((_QWORD *)v11 + 4) = &off_1E81A9138;
      v13 = *v10;
      v11[44] = *((_BYTE *)v10 + 4);
      *((_DWORD *)v11 + 10) = v13;
      *((_QWORD *)v11 + 4) = &off_1E81A9118;
      LODWORD(qword_1ED826A78) = qword_1ED826A78 + 1;
      llvm::cl::AddLiteralOption(qword_1ED826A68, (unsigned __int8 *)v3, (size_t)v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  dword_1ED826A48 = 1;
  BYTE4(qword_1ED826A58) = 1;
  LODWORD(qword_1ED826A58) = 1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED8269C8);
  if ((_QWORD *)v37 != v38)
    free((void *)v37);
  __cxa_atexit((void (*)(void *))sub_1C5EECBF0, qword_1ED8269C8, &dword_1C475E000);
  qword_1ED826700 = (uint64_t)"Attach debug info to everything";
  *(_QWORD *)algn_1ED826708 = 31;
  qword_1ED826710 = (uint64_t)"debugify";
  unk_1ED826718 = 8;
  qword_1ED826720 = (uint64_t)&unk_1EF8F7639;
  word_1ED826728 = 0;
  byte_1ED82672A = 0;
  qword_1ED826730 = 0;
  unk_1ED826738 = 0;
  qword_1ED826740 = 0;
  unk_1ED826748 = sub_1C5EF3BE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::registerPass(qword_1ED830BC0[0], &qword_1ED826700, 0);
  __cxa_atexit((void (*)(void *))sub_1C5EF2400, &qword_1ED826700, &dword_1C475E000);
  qword_1ED826750[0] = "Check debug info from -debugify";
  qword_1ED826750[1] = 31;
  qword_1ED826750[2] = "check-debugify";
  qword_1ED826750[3] = 14;
  qword_1ED826750[4] = &unk_1ED8266F9;
  unk_1ED826778 = 0;
  byte_1ED82677A = 0;
  unk_1ED826780 = 0;
  unk_1ED826790 = 0;
  unk_1ED826788 = 0;
  unk_1ED826798 = sub_1C5EF3C48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::registerPass(qword_1ED830BC0[0], qword_1ED826750, 0);
  __cxa_atexit((void (*)(void *))sub_1C5EF2430, qword_1ED826750, &dword_1C475E000);
  qword_1ED8267A0 = (uint64_t)"Attach debug info to a function";
  unk_1ED8267A8 = 31;
  qword_1ED8267B0 = (uint64_t)"debugify-function";
  unk_1ED8267B8 = 17;
  qword_1ED8267C0 = (uint64_t)&unk_1ED8266F8;
  word_1ED8267C8 = 0;
  byte_1ED8267CA = 0;
  qword_1ED8267D0 = 0;
  unk_1ED8267D8 = 0;
  qword_1ED8267E0 = 0;
  unk_1ED8267E8 = sub_1C5EF3CB0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::registerPass(qword_1ED830BC0[0], &qword_1ED8267A0, 0);
  __cxa_atexit((void (*)(void *))sub_1C5EF2460, &qword_1ED8267A0, &dword_1C475E000);
  qword_1ED8267F0[0] = "Check debug info from -debugify-function";
  qword_1ED8267F0[1] = 40;
  qword_1ED826800 = (uint64_t)"check-debugify-function";
  unk_1ED826808 = 23;
  qword_1ED826810 = (uint64_t)&unk_1ED8266FA;
  word_1ED826818 = 0;
  byte_1ED82681A = 0;
  qword_1ED826820 = 0;
  unk_1ED826828 = 0;
  qword_1ED826830 = 0;
  unk_1ED826838 = sub_1C5EF3D10;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::registerPass(qword_1ED830BC0[0], qword_1ED8267F0, 0);
  return __cxa_atexit((void (*)(void *))sub_1C5EF2490, qword_1ED8267F0, &dword_1C475E000);
}

llvm::Value *llvm::DemoteRegToStack(llvm *this, llvm::Instruction *a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  llvm::Value *v11;
  llvm::PointerType *v12;
  llvm::Type *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm *v30;
  int v31;
  int v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::BasicBlock *v46;
  unsigned int SuccessorNumber;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm *v67;
  int v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t Inst;
  _DWORD *v81;
  llvm::Value *v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm *v89;
  int v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  uint64_t v100;
  uint64_t *i;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;
  unsigned int v107;
  uint64_t v108;
  _DWORD *v110;
  llvm::Instruction *v111;
  _QWORD v113[2];
  int v114;
  __int16 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  char v119;

  v5 = *((_QWORD *)this + 5);
  if (!*((_QWORD *)this + 1))
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v5 + 40, (uint64_t ***)this);
    v23 = *((_QWORD *)this + 3);
    v24 = (_QWORD *)*((_QWORD *)this + 4);
    *v24 = v23;
    *(_QWORD *)(v23 + 8) = v24;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    llvm::Value::deleteValue(this);
    return 0;
  }
  v7 = (__int16)a2;
  v8 = *(_QWORD *)(v5 + 56);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = operator new(0x68uLL);
  v11 = (llvm::Value *)(v10 + 8);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  v12 = *(llvm::PointerType **)this;
  v13 = (llvm::Type *)*(unsigned int *)(v9 + 276);
  v14 = this >> 4;
  if (!a3)
  {
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v41 = 0;
      v40 = &byte_1C871356D;
      goto LABEL_23;
    }
    v25 = **(_QWORD **)v12;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & (v14 ^ (this >> 9));
      v29 = v26 + 16 * v28;
      v30 = *(llvm **)v29;
      if (*(llvm **)v29 == this)
      {
LABEL_22:
        v39 = *(_QWORD **)(v29 + 8);
        v42 = *v39;
        v40 = (char *)(v39 + 2);
        v41 = v42;
LABEL_23:
        LOWORD(v118) = 773;
        *(_QWORD *)&v116 = v40;
        *((_QWORD *)&v116 + 1) = v41;
        *(_QWORD *)&v117 = ".reg2mem";
        v43 = *(_QWORD *)(v8 + 80);
        if (v43)
          v44 = v43 - 24;
        else
          v44 = 0;
        v45 = *(_QWORD *)(v44 + 48);
        if (v45)
          v38 = v45 - 24;
        else
          v38 = 0;
        v37 = (uint64_t)(v10 + 8);
        goto LABEL_30;
      }
      v31 = 1;
      while (v30 != (llvm *)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(llvm **)(v26 + 16 * v28);
        if (v30 == this)
        {
          v29 = v26 + 16 * v28;
          goto LABEL_22;
        }
      }
    }
    v29 = v26 + 16 * v27;
    goto LABEL_22;
  }
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
    v35 = 0;
    v34 = &byte_1C871356D;
    goto LABEL_20;
  }
  v15 = **(_QWORD **)v12;
  v16 = *(_QWORD *)(v15 + 152);
  v17 = *(unsigned int *)(v15 + 168);
  if (!(_DWORD)v17)
    goto LABEL_18;
  LODWORD(v18) = (v17 - 1) & (v14 ^ (this >> 9));
  v19 = v16 + 16 * v18;
  v20 = *(llvm **)v19;
  if (*(llvm **)v19 != this)
  {
    v21 = 1;
    while (v20 != (llvm *)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = *(llvm **)(v16 + 16 * v18);
      if (v20 == this)
      {
        v19 = v16 + 16 * v18;
        goto LABEL_19;
      }
    }
LABEL_18:
    v19 = v16 + 16 * v17;
  }
LABEL_19:
  v33 = *(_QWORD **)(v19 + 8);
  v36 = *v33;
  v34 = (char *)(v33 + 2);
  v35 = v36;
LABEL_20:
  LOWORD(v118) = 773;
  *(_QWORD *)&v116 = v34;
  *((_QWORD *)&v116 + 1) = v35;
  *(_QWORD *)&v117 = ".reg2mem";
  v37 = (uint64_t)(v10 + 8);
  v38 = a3;
LABEL_30:
  llvm::AllocaInst::AllocaInst(v37, v12, v13, 0, (uint64_t)&v116, v38);
  if (*((_BYTE *)this + 16) == 33)
  {
    v46 = (llvm::BasicBlock *)*((_QWORD *)this - 12);
    if (!llvm::BasicBlock::getSinglePredecessor(v46))
    {
      SuccessorNumber = llvm::GetSuccessorNumber(*((_QWORD *)this + 5), (uint64_t)v46);
      v118 = 0;
      v116 = 0u;
      v117 = 0u;
      v119 = 1;
      v115 = 257;
      llvm::SplitCriticalEdge(this, SuccessorNumber, (uint64_t)&v116, (llvm::Twine *)v113);
    }
  }
  v48 = *((_QWORD *)this + 1);
  if (v48)
  {
    v49 = v14 ^ (this >> 9);
    while (1)
    {
      v50 = *(_QWORD *)(v48 + 24);
      if (!v50 || *(_BYTE *)(v50 + 16) != 83)
        break;
      v113[0] = 0;
      v113[1] = 0;
      v114 = 0;
      v51 = *(_DWORD *)(v50 + 20);
      v52 = v51 & 0x7FFFFFF;
      if ((v51 & 0x7FFFFFF) != 0)
      {
        v53 = 0;
        while (2)
        {
          v54 = *(_DWORD *)(v50 + 20);
          if ((v54 & 0x40000000) != 0)
            v55 = *(_QWORD *)(v50 - 8);
          else
            v55 = v50 - 32 * (v54 & 0x7FFFFFF);
          if (*(llvm **)(v55 + 32 * v53) != this)
            goto LABEL_43;
          *(_QWORD *)&v116 = *(_QWORD *)(v55 + 32 * *(unsigned int *)(v50 + 60) + 8 * v53);
          v56 = sub_1C63AA3E4((uint64_t)v113, (uint64_t *)&v116);
          v57 = v56[1];
          if (!v57)
          {
            v58 = v56;
            v59 = operator new(0x60uLL);
            v60 = (uint64_t)(v59 + 8);
            v59[13] = v59[13] & 0x38000000 | 1;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = 0;
            *((_QWORD *)v59 + 3) = v59 + 8;
            v61 = *(uint64_t ***)this;
            if ((*((_BYTE *)this + 23) & 0x10) != 0)
            {
              v62 = **v61;
              v63 = *(_QWORD *)(v62 + 152);
              v64 = *(unsigned int *)(v62 + 168);
              if (!(_DWORD)v64)
                goto LABEL_53;
              LODWORD(v65) = (v64 - 1) & v49;
              v66 = v63 + 16 * v65;
              v67 = *(llvm **)v66;
              if (*(llvm **)v66 != this)
              {
                v68 = 1;
                while (v67 != (llvm *)-4096)
                {
                  v69 = v65 + v68++;
                  v65 = v69 & (v64 - 1);
                  v67 = *(llvm **)(v63 + 16 * v65);
                  if (v67 == this)
                  {
                    v66 = v63 + 16 * v65;
                    goto LABEL_54;
                  }
                }
LABEL_53:
                v66 = v63 + 16 * v64;
              }
LABEL_54:
              v70 = *(_QWORD **)(v66 + 8);
              v73 = *v70;
              v72 = (char *)(v70 + 2);
              v71 = v73;
            }
            else
            {
              v71 = 0;
              v72 = &byte_1C871356D;
            }
            LOWORD(v118) = 773;
            *(_QWORD *)&v116 = v72;
            *((_QWORD *)&v116 + 1) = v71;
            *(_QWORD *)&v117 = ".reload";
            v74 = *(_DWORD *)(v50 + 20);
            if ((v74 & 0x40000000) != 0)
              v75 = *(_QWORD *)(v50 - 8);
            else
              v75 = v50 - 32 * (v74 & 0x7FFFFFF);
            v76 = *(_QWORD *)(v75 + 32 * *(unsigned int *)(v50 + 60) + 8 * v53);
            v77 = *(_QWORD *)(v76 + 40);
            if (v77 == v76 + 40)
            {
              v78 = 0;
            }
            else
            {
              if (v77)
                v79 = v77 - 24;
              else
                v79 = 0;
              if (*(unsigned __int8 *)(v79 + 16) - 29 >= 0xB)
                v78 = 0;
              else
                v78 = v79;
            }
            Inst = llvm::LoadInst::LoadInst(v60, (uint64_t)v61, (uint64_t)v11, (uint64_t)&v116, v7, v78);
            v58[1] = Inst;
            v57 = Inst;
          }
          sub_1C6125834(v50, v53, v57);
LABEL_43:
          if (++v53 == v52)
          {
            v92 = v113[0];
            goto LABEL_77;
          }
          continue;
        }
      }
      v92 = 0;
LABEL_77:
      MEMORY[0x1CAA32FB4](v92, 8);
LABEL_81:
      v48 = *((_QWORD *)this + 1);
      if (!v48)
        goto LABEL_84;
    }
    v81 = operator new(0x60uLL);
    v82 = (llvm::Value *)(v81 + 8);
    v81[13] = v81[13] & 0x38000000 | 1;
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 1) = 0;
    *((_QWORD *)v81 + 2) = 0;
    *((_QWORD *)v81 + 3) = v81 + 8;
    v83 = *(uint64_t ***)this;
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v94 = 0;
      v95 = &byte_1C871356D;
      goto LABEL_80;
    }
    v84 = **v83;
    v85 = *(_QWORD *)(v84 + 152);
    v86 = *(unsigned int *)(v84 + 168);
    if ((_DWORD)v86)
    {
      LODWORD(v87) = (v86 - 1) & v49;
      v88 = v85 + 16 * v87;
      v89 = *(llvm **)v88;
      if (*(llvm **)v88 == this)
      {
LABEL_79:
        v93 = *(_QWORD **)(v88 + 8);
        v96 = *v93;
        v95 = (char *)(v93 + 2);
        v94 = v96;
LABEL_80:
        LOWORD(v118) = 773;
        *(_QWORD *)&v116 = v95;
        *((_QWORD *)&v116 + 1) = v94;
        *(_QWORD *)&v117 = ".reload";
        llvm::LoadInst::LoadInst((uint64_t)(v81 + 8), (uint64_t)v83, (uint64_t)v11, (uint64_t)&v116, v7, v50);
        llvm::User::replaceUsesOfWith((llvm::User *)v50, this, v82);
        goto LABEL_81;
      }
      v90 = 1;
      while (v89 != (llvm *)-4096)
      {
        v91 = v87 + v90++;
        v87 = v91 & (v86 - 1);
        v89 = *(llvm **)(v85 + 16 * v87);
        if (v89 == this)
        {
          v88 = v85 + 16 * v87;
          goto LABEL_79;
        }
      }
    }
    v88 = v85 + 16 * v86;
    goto LABEL_79;
  }
LABEL_84:
  if (*((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    for (i = (uint64_t *)((char *)this + 32); ; i = (uint64_t *)(v98 + 8))
    {
      v98 = *i;
      v102 = *i - 24;
      if (!v98)
        v102 = 0;
      v103 = *(unsigned __int8 *)(v102 + 16) - 38;
      v104 = v103 > 0x38;
      v105 = (1 << v103) & 0x100260000000001;
      if (v104 || v105 == 0)
        break;
    }
  }
  else
  {
    v97 = *((_QWORD *)this - 12);
    v98 = v97 + 40;
    for (j = *(_QWORD *)(v97 + 48); j != v98; j = *(_QWORD *)(j + 8))
    {
      v100 = j - 24;
      if (!j)
        v100 = 0;
      if (*(_BYTE *)(v100 + 16) != 83)
      {
        v107 = *(unsigned __int8 *)(j - 8) - 38;
        v104 = v107 > 0x38;
        v108 = (1 << v107) & 0x100060000000001;
        if (v104 || v108 == 0)
          v98 = j;
        else
          v98 = *(_QWORD *)(j + 8);
        break;
      }
    }
  }
  v110 = operator new(0x80uLL);
  v110[21] = v110[21] & 0x38000000 | 2;
  *(_QWORD *)v110 = 0;
  *((_QWORD *)v110 + 1) = 0;
  *((_QWORD *)v110 + 2) = 0;
  *((_QWORD *)v110 + 3) = v110 + 16;
  *((_QWORD *)v110 + 4) = 0;
  *((_QWORD *)v110 + 5) = 0;
  *((_QWORD *)v110 + 6) = 0;
  *((_QWORD *)v110 + 7) = v110 + 16;
  if (v98)
    v111 = (llvm::Instruction *)(v98 - 24);
  else
    v111 = 0;
  llvm::StoreInst::StoreInst((llvm::StoreInst *)(v110 + 16), this, v11, 0, v111);
  return v11;
}

uint64_t llvm::DivergenceTracker::DivergenceTracker(uint64_t a1, llvm::Function *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v18)(void);
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x4000000000;
  *(_QWORD *)(a1 + 528) = a1 + 560;
  *(_QWORD *)(a1 + 536) = a1 + 560;
  *(_QWORD *)(a1 + 544) = 32;
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 816) = a1 + 848;
  *(_QWORD *)(a1 + 824) = a1 + 848;
  *(_QWORD *)(a1 + 832) = 16;
  *(_DWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 976) = a1 + 1008;
  *(_QWORD *)(a1 + 984) = a1 + 1008;
  *(_QWORD *)(a1 + 992) = 16;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1136) = a1 + 1152;
  *(_QWORD *)(a1 + 1144) = 0x1000000000;
  *(_QWORD *)(a1 + 1280) = a2;
  *(_QWORD *)(a1 + 1288) = a3;
  *(_QWORD *)(a1 + 1296) = a4;
  v14 = (_QWORD *)(a1 + 1304);
  v15 = *(_QWORD *)(a7 + 24);
  if (!v15)
  {
    *(_QWORD *)(a1 + 1328) = 0;
    *(_BYTE *)(a1 + 1336) = a8;
    *(_QWORD *)(a1 + 1344) = a9;
    goto LABEL_8;
  }
  if (v15 == a7)
  {
    *(_QWORD *)(a1 + 1328) = v14;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a7 + 24) + 24))(*(_QWORD *)(a7 + 24), v14);
    v16 = *(_QWORD *)(a1 + 1328);
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    *(_QWORD *)(a1 + 1328) = v16;
  }
  *(_BYTE *)(a1 + 1336) = a8;
  *(_QWORD *)(a1 + 1344) = a9;
  if (!v16)
  {
LABEL_8:
    v19[0] = &off_1E8170000;
    v19[1] = sub_1C5EF4C44;
    v20 = v19;
    sub_1C48AAFD8(v14, (uint64_t)v19);
    if (v20 == v19)
    {
      v18 = (void (**)(void))(v19[0] + 32);
    }
    else
    {
      if (!v20)
        goto LABEL_5;
      v18 = (void (**)(void))(*v20 + 40);
    }
    (*v18)();
  }
LABEL_5:
  llvm::DivergenceTracker::analyze((char *)a1, a2, a5, a6);
  return a1;
}

{
  return llvm::DivergenceTracker::DivergenceTracker(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1C5EF4C44(llvm::Instruction *this, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  __int32 v32;
  __int32 v33;

  v4 = *((unsigned __int8 *)this + 16);
  if (this && v4 >= 0x1C)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    if (*((unsigned __int8 *)this + 16) <= 0x3Au)
    {
      if (v4 != 37)
      {
        if (v4 != 33 && v4 != 39)
        {
LABEL_10:
          if ((llvm::Instruction::mayThrow(this) & 1) == 0 && llvm::Instruction::willReturn(this))
          {
            result = 0;
            v9 = *((unsigned __int8 *)this + 16) - 33;
            if (v9 > 0x37)
              return result;
            if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
            {
              v18 = *((_QWORD *)this + 8);
              if (v18 && ((*(_BYTE *)(v18 + 20) & 4) != 0 || (*(_BYTE *)(v18 + 17) & 0x10) != 0))
                return 0;
              v33 = 7;
              if ((!sub_1C53E4BBC((uint64_t)this, &v33, 1uLL)
                 || (v30 = *((_QWORD *)this - 4)) != 0
                 && !*(_BYTE *)(v30 + 16)
                 && *(_QWORD *)(v30 + 24) == *((_QWORD *)this + 9)
                 && *(_DWORD *)(v30 + 36) == 7)
                && ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) != 0
                 || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0))
              {
                return 0;
              }
            }
            else if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001C8000010) == 0)
            {
              if (v9 != 28)
                return result;
              if ((*((_WORD *)this + 9) & 0x301) == 0)
                return 0;
            }
          }
          return 1;
        }
LABEL_37:
        v16 = *((_QWORD *)this + 8);
        if (v16 && (*(_BYTE *)(v16 + 17) & 0x30) != 0)
          goto LABEL_10;
        v17 = *((_DWORD *)this + 5);
        if (v17 < 0
          && (v21 = (char *)this - 32 * (v17 & 0x7FFFFFF), v24 = *((_QWORD *)v21 - 1), v22 = v21 - 8, (v23 = v24) != 0))
        {
          v25 = -v23;
          while (1)
          {
            v26 = *(_DWORD *)(*(_QWORD *)&v22[v25] + 8);
            v27 = v26 > 7;
            v28 = (1 << v26) & 0x83;
            if (v27 || v28 == 0)
              break;
            v25 += 16;
            if (!v25)
              goto LABEL_40;
          }
        }
        else
        {
LABEL_40:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
            || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
          {
            goto LABEL_10;
          }
        }
      }
      return 1;
    }
    result = 1;
    switch(v4)
    {
      case ';':
        return result;
      case '<':
        v12 = **((_QWORD **)this - 4);
        v13 = *(_DWORD *)(v12 + 8);
        if ((v13 & 0xFE) == 0x12)
          v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
        v14 = v13 >> 8;
        if (v14 == 64)
          return 0;
        if (v7 != v5)
          return sub_1C5EA5854((uint64_t)this, a2, a3, 0) ^ 1;
        v11 = v14 == 2;
        break;
      case '=':
      case '?':
      case '@':
      case 'A':
        return 1;
      case '>':
        goto LABEL_10;
      default:
        switch(v4)
        {
          case 'P':
          case 'X':
            return 1;
          case 'S':
            return result;
          case 'T':
            v15 = *((_QWORD *)this - 4);
            if (!v15
              || *(_BYTE *)(v15 + 16)
              || *(_QWORD *)(v15 + 24) != *((_QWORD *)this + 9)
              || (*(_BYTE *)(v15 + 33) & 0x20) == 0)
            {
              goto LABEL_37;
            }
            if (v7 == v5)
              goto LABEL_64;
            v19 = *((_QWORD *)this + 8);
            if (!v19 || (*(_BYTE *)(v19 + 20) & 4) == 0 && (*(_BYTE *)(v19 + 17) & 0x10) == 0)
            {
              v32 = 7;
              if (sub_1C53E4BBC((uint64_t)this, &v32, 1uLL))
              {
                v31 = *((_QWORD *)this - 4);
                if (!v31
                  || *(_BYTE *)(v31 + 16)
                  || *(_QWORD *)(v31 + 24) != *((_QWORD *)this + 9)
                  || *(_DWORD *)(v31 + 36) != 7)
                {
                  return 1;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
              {
                return 1;
              }
            }
            v20 = *((_QWORD *)this + 8);
            if (v20)
            {
              if ((*(_BYTE *)(v20 + 12) & 0x40) != 0)
                return 1;
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 6) & 1) != 0)
              return 1;
            v15 = *((_QWORD *)this - 4);
LABEL_64:
            result = sub_1C5E9DC10(*(_DWORD *)(v15 + 36));
            break;
          default:
            goto LABEL_10;
        }
        return result;
    }
    return !v11;
  }
  result = 1;
  if (this && v4 <= 3)
  {
    v10 = *(_DWORD *)(*(_QWORD *)this + 8) >> 8;
    v11 = v10 == 64 || v10 == 2;
    return !v11;
  }
  return result;
}

char *llvm::DivergenceTracker::analyze(char *this, llvm::Function *a2, const llvm::DataLayout *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  llvm::SmallPtrSetImplBase *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (uint64_t)this;
  v8 = (uint64_t *)*((_QWORD *)this + 162);
  v9 = *((unsigned int *)v8 + 2);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *v8;
    v12 = 8 * v9;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
        v14 = 0;
      v15 = *(unsigned __int8 *)(v14 + 16);
      v16 = v10 != 0;
      if (v15 == 35)
        v16 = 3;
      if (v16 != 3 && v16 != 0)
        break;
      if (v15 != 35)
        v10 = 1;
      v11 += 8;
      v12 -= 8;
      if (!v12)
        goto LABEL_18;
    }
    v22 = (char *)a2 + 72;
    for (i = *((_QWORD *)a2 + 10); (char *)i != v22; i = *(_QWORD *)(i + 8))
    {
      v24 = i - 24;
      if (!i)
        v24 = 0;
      v25 = *(_QWORD *)(v24 + 48);
      if (v25 != v24 + 40)
      {
        v26 = (llvm::SmallPtrSetImplBase *)(this + 528);
        while (1)
        {
          if (v25)
            v27 = v25 - 24;
          else
            v27 = 0;
          this = (char *)sub_1C4774094(v26, v27);
          v25 = *(_QWORD *)(v25 + 8);
          v28 = i - 24;
          if (!i)
            v28 = 0;
          if (v25 == v28 + 40)
            break;
LABEL_40:
          if ((char *)i == v22)
            return this;
        }
        while (1)
        {
          i = *(_QWORD *)(i + 8);
          if ((char *)i == v22)
            return this;
          v29 = i - 24;
          if (!i)
            v29 = 0;
          v25 = *(_QWORD *)(v29 + 48);
          if (v25 != v29 + 40)
            goto LABEL_40;
        }
      }
    }
  }
  else
  {
LABEL_18:
    if (!this[1336])
      llvm::DivergenceTracker::collectMarkedUniform(this, a2, a3);
    llvm::DivergenceTracker::collectDivergenceSources(v7, a2, (uint64_t)a3, a4);
    v18 = *(unsigned int *)(v7 + 8);
    if ((_DWORD)v18)
    {
      v19 = *(uint64_t **)v7;
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v7 + 528), v21);
        v20 -= 8;
      }
      while (v20);
    }
    return llvm::DivergenceTracker::propagateDivergence((char *)v7, v7);
  }
  return this;
}

void llvm::DivergenceTracker::collectDivergenceSources(uint64_t a1, llvm::Function *this, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  llvm::DivergenceTracker *v29;
  llvm::Function *v30;
  const llvm::DataLayout *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = (char *)this + 72;
  for (i = *((_QWORD *)this + 10); (char *)i != v8; i = *(_QWORD *)(i + 8))
  {
    v10 = i - 24;
    if (!i)
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 != v10 + 40)
    {
      v32 = a1 + 16;
      while (1)
      {
        v12 = v11 ? v11 - 24 : 0;
        v33 = *(_QWORD *)(a1 + 1344);
        v34 = v12;
        v13 = *(_QWORD *)(a1 + 1328);
        if (!v13)
          goto LABEL_45;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v34, a3, a4, &v33))
        {
          v14 = sub_1C477672C(a1 + 816, v12);
          v15 = *(_QWORD *)(a1 + 824);
          v16 = 832;
          if (v15 == *(_QWORD *)(a1 + 816))
            v16 = 836;
          if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)(a1 + v16)))
          {
            v17 = *(unsigned int *)(a1 + 8);
            if (v17 >= *(unsigned int *)(a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v32, v17 + 1, 8);
              v17 = *(unsigned int *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v12;
            ++*(_DWORD *)(a1 + 8);
          }
        }
        v11 = *(_QWORD *)(v11 + 8);
        v18 = i - 24;
        if (!i)
          v18 = 0;
        if (v11 == v18 + 40)
        {
          do
          {
            i = *(_QWORD *)(i + 8);
            if ((char *)i == v8)
              goto LABEL_27;
            v19 = i - 24;
            if (!i)
              v19 = 0;
            v11 = *(_QWORD *)(v19 + 48);
          }
          while (v11 == v19 + 40);
        }
        if ((char *)i == v8)
          goto LABEL_27;
      }
    }
  }
LABEL_27:
  if ((*((_WORD *)this + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this);
    v20 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this);
      v21 = *((_QWORD *)this + 11);
      goto LABEL_30;
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 11);
  }
  v21 = v20;
LABEL_30:
  v22 = v21 + 40 * *((_QWORD *)this + 12);
  if (v20 == v22)
    return;
  for (j = v20; ; j += 40)
  {
    v33 = *(_QWORD *)(a1 + 1344);
    v34 = v20;
    v24 = *(_QWORD *)(a1 + 1328);
    if (!v24)
      break;
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v34, a3, a4, &v33))
    {
      v25 = sub_1C477672C(a1 + 816, v20);
      v26 = *(_QWORD *)(a1 + 824);
      v27 = v26 == *(_QWORD *)(a1 + 816) ? 836 : 832;
      if (v25 == (_QWORD *)(v26 + 8 * *(unsigned int *)(a1 + v27)))
      {
        v28 = *(unsigned int *)(a1 + 8);
        if (v28 >= *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v28 + 1, 8);
          v28 = *(unsigned int *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = j;
        ++*(_DWORD *)(a1 + 8);
      }
    }
    v20 += 40;
    if (v20 == v22)
      return;
  }
LABEL_45:
  sub_1C485C2F0();
  llvm::DivergenceTracker::collectMarkedUniform(v29, v30, v31);
}

_QWORD *llvm::DivergenceTracker::collectMarkedUniform(_QWORD *this, llvm::Function *a2, const llvm::DataLayout *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::SmallPtrSetImplBase *v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v4 = v3 + 24;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    v6 = (llvm::SmallPtrSetImplBase *)(this + 102);
    while (1)
    {
      v7 = v5 - 56;
      if (!v5)
        break;
      if (*(_BYTE *)(v5 - 40) != 3)
        goto LABEL_19;
      if ((*(_DWORD *)(v5 - 36) & 0x7FFFFFF) == 0)
      {
        v8 = *(_DWORD *)(v5 - 24);
LABEL_8:
        if ((v8 & 0x2000) != 0 && *(_DWORD *)(v7 + 36) == 1275)
        {
          for (i = *(_QWORD *)(v7 + 8); i; i = *(_QWORD *)(i + 8))
          {
            v10 = *(_QWORD *)(i + 24);
            if (*(_BYTE *)(v10 + 16) == 84)
            {
              v11 = *(_QWORD *)(v10 - 32);
              if (v11)
              {
                if (!*(_BYTE *)(v11 + 16)
                  && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v10 + 72)
                  && (*(_BYTE *)(v11 + 33) & 0x20) != 0)
                {
                  this = sub_1C4774094(v6, *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)));
                }
              }
            }
          }
        }
      }
LABEL_22:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        return this;
    }
    v7 = 0;
LABEL_19:
    if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 72) == v7 + 72)
    {
      v8 = *(_DWORD *)(v7 + 32);
      if ((v8 & 0x800000) == 0)
        goto LABEL_8;
    }
    goto LABEL_22;
  }
  return this;
}

void *llvm::DivergenceTracker::computeInfluenceRegion(llvm::DivergenceTracker *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  llvm::SmallPtrSetImplBase *v5;
  char *v6;
  llvm::BasicBlock *i;
  void *result;
  unsigned int v10;

  v5 = (llvm::DivergenceTracker *)((char *)this + 976);
  v6 = (char *)this + 1136;
  for (i = a3; ; i = a3)
  {
    result = sub_1C5EF55AC((uint64_t)a2, i, v5, (uint64_t)v6);
    v10 = *((_DWORD *)this + 286);
    if (!v10)
      break;
    a2 = *(llvm::BasicBlock **)(*((_QWORD *)this + 142) + 8 * v10 - 8);
    *((_DWORD *)this + 286) = v10 - 1;
  }
  return result;
}

void *sub_1C5EF55AC(uint64_t a1, void *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  void *result;
  void *v5;
  void *v6;
  uint64_t v7;
  int v11;
  unsigned int i;
  void *v13;
  char v14;
  unint64_t v15;

  v6 = *(void **)(a1 + 40);
  result = (void *)(a1 + 40);
  v5 = v6;
  if (v6 != result)
  {
    if (v5)
      v7 = (uint64_t)v5 - 24;
    else
      v7 = 0;
    if (*(_BYTE *)(v7 + 16) != 30)
    {
      v11 = 2;
      switch(*(_BYTE *)(v7 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_23;
        case 0x1F:
          v11 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_20;
        case 0x20:
        case 0x26:
LABEL_23:
          v11 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_20;
        case 0x21:
          goto LABEL_9;
        case 0x24:
          v11 = *(_WORD *)(v7 + 18) & 1;
          goto LABEL_20;
        case 0x25:
          v11 = 1;
          goto LABEL_9;
        case 0x27:
          v11 = *(_DWORD *)(v7 + 80) + 1;
LABEL_20:
          if (!v11)
            return result;
          goto LABEL_9;
        default:
          return result;
      }
    }
    if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3)
      v11 = 2;
    else
      v11 = 1;
LABEL_9:
    for (i = 0; i != v11; ++i)
    {
      result = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v7, i);
      if (result != a2)
      {
        v13 = result;
        result = sub_1C4774094(a3, (uint64_t)result);
        if (v14)
        {
          v15 = *(unsigned int *)(a4 + 8);
          if (v15 >= *(unsigned int *)(a4 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v15 + 1, 8);
            v15 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = v13;
          ++*(_DWORD *)(a4 + 8);
        }
      }
    }
  }
  return result;
}

char *llvm::DivergenceTracker::findUsersOutsideInfluenceRegion(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = result;
    v6 = (uint64_t)(result + 976);
    do
    {
      v7 = *(_QWORD *)(v3 + 24);
      result = (char *)sub_1C477672C(v6, *(_QWORD *)(v7 + 40));
      v8 = *((_QWORD *)v5 + 123);
      if (v8 == *((_QWORD *)v5 + 122))
        v9 = 996;
      else
        v9 = 992;
      if (result == (char *)(v8 + 8 * *(unsigned int *)&v5[v9]))
      {
        v13 = v7;
        v10 = *(_QWORD *)(a3 + 24);
        if (!v10)
        {
          sub_1C485C2F0();
          return llvm::DivergenceTracker::propagateDivergence(v11, v12);
        }
        result = (char *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v13);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

char *llvm::DivergenceTracker::propagateDivergence(char *result, uint64_t a2)
{
  unsigned int v2;
  char *v4;
  uint64_t v5;
  llvm::SmallPtrSetImplBase *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  llvm::SmallPtrSetImplBase *j;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t (**v53)();
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  int v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  void *v83;
  int v84;
  int v85;
  unsigned int v86;
  char *v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t m;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v106;
  int v107;
  unsigned int v108;
  void *v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  llvm::SmallPtrSetImplBase *v113;
  uint64_t v114;
  unsigned int *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return result;
  v4 = result;
  v5 = (uint64_t)(result + 816);
  v6 = (llvm::SmallPtrSetImplBase *)(result + 528);
  v7 = (uint64_t)(result + 976);
  v112 = (uint64_t)(result + 1136);
  v113 = (llvm::SmallPtrSetImplBase *)(result + 528);
  v114 = (uint64_t)(result + 816);
  v115 = (unsigned int *)(result + 996);
  v110 = a2 + 16;
  v111 = (unsigned int *)(result + 992);
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v2 - 8);
    *(_DWORD *)(a2 + 8) = v2 - 1;
    if (*(_BYTE *)(v8 + 16) != 30)
    {
      switch(*(_BYTE *)(v8 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
          goto LABEL_162;
        case 0x1E:
          goto LABEL_179;
        case 0x1F:
          v86 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_126;
        case 0x20:
        case 0x26:
          v86 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_126;
        case 0x21:
          goto LABEL_26;
        case 0x27:
          v86 = *(_DWORD *)(v8 + 80) + 1;
LABEL_126:
          if (v86 < 2)
            goto LABEL_162;
          goto LABEL_26;
        default:
          v9 = *(_QWORD *)(v8 + 8);
          if (!v9)
            goto LABEL_162;
          break;
      }
      while (1)
      {
        v10 = *(_QWORD *)(v9 + 24);
        v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10)
          v12 = v11 >= 0x1C;
        else
          v12 = 0;
        if (v12)
        {
          if (*(_QWORD *)(*(_QWORD *)(v10 + 40) + 56) == *((_QWORD *)v4 + 160))
            goto LABEL_15;
        }
        else
        {
          if (v10)
            v13 = v11 == 5;
          else
            v13 = 0;
          if (v13)
          {
LABEL_15:
            result = (char *)sub_1C477672C(v5, *(_QWORD *)(v9 + 24));
            v14 = *((_QWORD *)v4 + 103);
            v15 = 836;
            if (v14 != *((_QWORD *)v4 + 102))
              v15 = 832;
            if (result == (char *)(v14 + 8 * *(unsigned int *)&v4[v15]))
            {
              result = (char *)sub_1C4774094(v6, v10);
              if (v16)
              {
                v17 = *(unsigned int *)(a2 + 8);
                if (v17 >= *(unsigned int *)(a2 + 12))
                {
                  result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v110, v17 + 1, 8);
                  v17 = *(unsigned int *)(a2 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v10;
                ++*(_DWORD *)(a2 + 8);
              }
            }
          }
        }
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          goto LABEL_162;
      }
    }
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
      goto LABEL_162;
LABEL_26:
    v18 = *(_QWORD *)(v8 + 40);
    v19 = *((_QWORD *)v4 + 162);
    v20 = *(_QWORD *)(v19 + 48);
    v21 = *(unsigned int *)(v19 + 64);
    if (!(_DWORD)v21)
      goto LABEL_32;
    LODWORD(v22) = ((v18 >> 4) ^ (v18 >> 9)) & (v21 - 1);
    v23 = (uint64_t *)(v20 + 16 * v22);
    v24 = *v23;
    if (v18 != *v23)
    {
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(_QWORD *)(v20 + 16 * v22);
        if (v18 == v24)
        {
          v23 = (uint64_t *)(v20 + 16 * v22);
          goto LABEL_33;
        }
      }
LABEL_32:
      v23 = (uint64_t *)(v20 + 16 * v21);
    }
LABEL_33:
    v27 = **(_QWORD **)(v23[1] + 8);
    if (!v27)
      goto LABEL_162;
    v116 = **(void ***)(v23[1] + 8);
    v117 = v18;
    v28 = v27 + 40;
    for (i = *(_QWORD *)(v27 + 48); i != v28; i = *(_QWORD *)(i + 8))
    {
      v30 = i ? i - 24 : 0;
      if (*(_BYTE *)(v30 + 16) != 83)
        break;
      v31 = sub_1C477672C(v5, v30);
      v32 = *((_QWORD *)v4 + 103);
      v33 = 832;
      if (v32 == *((_QWORD *)v4 + 102))
        v33 = 836;
      if (v31 == (_QWORD *)(v32 + 8 * *(unsigned int *)&v4[v33]))
      {
        sub_1C4774094(v6, v30);
        if (v34)
        {
          v35 = *(unsigned int *)(a2 + 8);
          if (v35 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v110, v35 + 1, 8);
            v35 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v35) = v30;
          ++*(_DWORD *)(a2 + 8);
        }
      }
    }
    v36 = v117;
    v37 = v116;
    for (j = (llvm::SmallPtrSetImplBase *)v7; ; j = (llvm::SmallPtrSetImplBase *)v7)
    {
      sub_1C5EF55AC(v36, v37, j, v112);
      v39 = *((_DWORD *)v4 + 286);
      if (!v39)
        break;
      v36 = *(_QWORD *)(*((_QWORD *)v4 + 142) + 8 * v39 - 8);
      *((_DWORD *)v4 + 286) = v39 - 1;
      v37 = v116;
    }
    v40 = v117;
    v41 = sub_1C477672C(v7, v117);
    v42 = *((_QWORD *)v4 + 123);
    if (v42 == *((_QWORD *)v4 + 122))
      v43 = 996;
    else
      v43 = 992;
    if (v41 == (_QWORD *)(v42 + 8 * *(unsigned int *)&v4[v43]))
    {
LABEL_117:
      v71 = *((_QWORD *)v4 + 161);
      v70 = *(_QWORD *)(v71 + 24);
      LODWORD(v71) = *(_DWORD *)(v71 + 40);
      goto LABEL_118;
    }
    while (2)
    {
      for (k = *(_QWORD *)(v40 + 48); k != v40 + 40; k = *(_QWORD *)(k + 8))
      {
        if (k)
          v45 = k - 24;
        else
          v45 = 0;
        v46 = *(unsigned __int8 *)(v45 + 16) - 33;
        if (v46 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v45 + 16) - 33)) & 0x808001D0000010) != 0)
            goto LABEL_81;
          if (((1 << (*(_BYTE *)(v45 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v51 = *(_QWORD *)(v45 + 64);
            if (!v51 || (*(_BYTE *)(v51 + 17) & 0x30) == 0)
            {
              v52 = *(_DWORD *)(v45 + 20);
              if (v52 < 0)
              {
                v60 = v45 - 32 * (v52 & 0x7FFFFFF);
                v63 = *(_QWORD *)(v60 - 8);
                v61 = v60 - 8;
                v62 = v63;
                if (v63)
                {
                  v64 = -v62;
                  do
                  {
                    v65 = *(_DWORD *)(*(_QWORD *)(v61 + v64) + 8);
                    v66 = v65 > 7;
                    v67 = (1 << v65) & 0x83;
                    if (v66 || v67 == 0)
                      goto LABEL_81;
                    v64 += 16;
                  }
                  while (v64);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v45, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v45, 44))
              {
                goto LABEL_81;
              }
            }
          }
          else if (v46 == 27 && (*(_WORD *)(v45 + 18) & 0x301) != 0)
          {
            goto LABEL_81;
          }
        }
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v45) & 1) != 0
          || !llvm::Instruction::willReturn((llvm::Instruction *)v45))
        {
          goto LABEL_81;
        }
        v47 = *(_DWORD *)(v45 + 20);
        if ((v47 & 0x40000000) != 0)
        {
          v49 = *(_QWORD *)(v45 - 8);
          v48 = v47 & 0x7FFFFFF;
          if (!v48)
            continue;
LABEL_70:
          v50 = 32 * v48;
          while (*(unsigned __int8 *)(*(_QWORD *)v49 + 16) < 0x15u)
          {
            v49 += 32;
            v50 -= 32;
            if (!v50)
              goto LABEL_96;
          }
LABEL_81:
          v53 = &off_1E81A94A0;
          v119[0] = &off_1E81A94A0;
          v119[1] = v4;
          v119[2] = a2;
          v120 = v119;
          v54 = *(_QWORD *)(v45 + 8);
          if (v54)
          {
            do
            {
              v55 = *(_QWORD *)(v54 + 24);
              v56 = sub_1C477672C(v7, *(_QWORD *)(v55 + 40));
              v57 = *((_QWORD *)v4 + 123);
              if (v57 == *((_QWORD *)v4 + 122))
                v58 = 996;
              else
                v58 = 992;
              if (v56 == (_QWORD *)(v57 + 8 * *(unsigned int *)&v4[v58]))
              {
                v118 = v55;
                if (!v120)
                {
                  sub_1C485C2F0();
LABEL_179:
                  __break(1u);
LABEL_180:
                  llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                }
                (*(void (**)(_QWORD *, uint64_t *))(*v120 + 48))(v120, &v118);
              }
              v54 = *(_QWORD *)(v54 + 8);
            }
            while (v54);
            if (v120 != v119)
            {
              if (!v120)
                continue;
              v59 = (void (**)(void))(*v120 + 40);
              goto LABEL_95;
            }
            v53 = (uint64_t (**)())v119[0];
          }
          v59 = (void (**)(void))(v53 + 4);
LABEL_95:
          (*v59)();
          continue;
        }
        v48 = v47 & 0x7FFFFFF;
        v49 = v45 - 32 * v48;
        if (v48)
          goto LABEL_70;
LABEL_96:
        ;
      }
      v69 = *((_QWORD *)v4 + 161);
      v70 = *(_QWORD *)(v69 + 24);
      v71 = *(unsigned int *)(v69 + 40);
      if (!(_DWORD)v71)
        goto LABEL_111;
      LODWORD(v72) = (v71 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v73 = (uint64_t *)(v70 + 16 * v72);
      v74 = *v73;
      if (v40 != *v73)
      {
        v75 = 1;
        while (v74 != -4096)
        {
          v76 = v72 + v75++;
          v72 = v76 & (v71 - 1);
          v74 = *(_QWORD *)(v70 + 16 * v72);
          if (v40 == v74)
          {
            v73 = (uint64_t *)(v70 + 16 * v72);
            goto LABEL_112;
          }
        }
LABEL_111:
        v73 = (uint64_t *)(v70 + 16 * v71);
      }
LABEL_112:
      v77 = *(uint64_t **)(v73[1] + 8);
      if (v77)
      {
        v40 = *v77;
        v78 = sub_1C477672C(v7, *v77);
        v79 = *((_QWORD *)v4 + 123);
        if (v79 == *((_QWORD *)v4 + 122))
          v80 = 996;
        else
          v80 = 992;
        if (v78 == (_QWORD *)(v79 + 8 * *(unsigned int *)&v4[v80]))
          goto LABEL_117;
        continue;
      }
      break;
    }
LABEL_118:
    v6 = v113;
    v5 = v114;
    if ((_DWORD)v71)
    {
      LODWORD(v81) = (v71 - 1) & ((v116 >> 4) ^ (v116 >> 9));
      v82 = (void **)(v70 + 16 * v81);
      v83 = *v82;
      if (v116 != *v82)
      {
        v84 = 1;
        while (v83 != (void *)-4096)
        {
          v85 = v81 + v84++;
          v81 = v85 & (v71 - 1);
          v83 = *(void **)(v70 + 16 * v81);
          if (v116 == v83)
          {
            v82 = (void **)(v70 + 16 * v81);
            goto LABEL_129;
          }
        }
        goto LABEL_128;
      }
    }
    else
    {
LABEL_128:
      v82 = (void **)(v70 + 16 * v71);
    }
LABEL_129:
    result = (char *)*((_QWORD *)v4 + 123);
    v87 = (char *)*((_QWORD *)v4 + 122);
    if (**((_QWORD **)v82[1] + 1) != v117)
    {
      v88 = v115;
      if (result != v87)
        v88 = v111;
      v89 = *v88;
      v90 = (unint64_t *)*((_QWORD *)v4 + 123);
      if ((_DWORD)v89)
      {
        v91 = 0;
        while (*(_QWORD *)&result[v91] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v91 += 8;
          if (8 * v89 == v91)
            goto LABEL_160;
        }
        v90 = (unint64_t *)&result[v91];
      }
      v92 = (unint64_t *)&result[8 * v89];
      if (v90 != v92)
      {
        v93 = *v90;
LABEL_140:
        if (*(_QWORD *)(v93 + 40) != v93 + 40)
        {
          for (m = *(_QWORD *)(v93 + 48); ; m = *(_QWORD *)(v95 + 32))
          {
            v95 = m - 24;
            v96 = m ? m - 24 : 0;
            if (!m || *(_BYTE *)(v96 + 16) != 83)
              break;
            v97 = sub_1C477672C(v114, m - 24);
            v98 = *((_QWORD *)v4 + 103);
            v99 = 832;
            if (v98 == *((_QWORD *)v4 + 102))
              v99 = 836;
            if (v97 == (_QWORD *)(v98 + 8 * *(unsigned int *)&v4[v99]))
            {
              sub_1C4774094(v113, v95);
              if (v100)
              {
                v101 = *(unsigned int *)(a2 + 8);
                if (v101 >= *(unsigned int *)(a2 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v110, v101 + 1, 8);
                  v101 = *(unsigned int *)(a2 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a2 + 8 * v101) = v95;
                ++*(_DWORD *)(a2 + 8);
              }
            }
          }
        }
        v102 = v90 + 1;
        while (v102 != v92)
        {
          v103 = *v102++;
          v93 = v103;
          if (v103 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v90 = v102 - 1;
            goto LABEL_140;
          }
        }
        result = (char *)*((_QWORD *)v4 + 123);
        v87 = (char *)*((_QWORD *)v4 + 122);
      }
    }
LABEL_160:
    if (result == v87)
    {
LABEL_161:
      *(_QWORD *)v115 = 0;
    }
    else
    {
      v104 = *((unsigned int *)v4 + 248);
      if (v104 < 0x21 || 4 * (*((_DWORD *)v4 + 249) - *((_DWORD *)v4 + 250)) >= v104)
      {
        result = (char *)memset(result, 255, 8 * v104);
        goto LABEL_161;
      }
      free(result);
      v106 = *((_DWORD *)v4 + 249) - *((_DWORD *)v4 + 250);
      v107 = 1 << (33 - __clz(v106 - 1));
      if (v106 <= 0x10)
        v108 = 32;
      else
        v108 = v107;
      *((_DWORD *)v4 + 248) = v108;
      *(_QWORD *)v115 = 0;
      v109 = malloc_type_malloc(8 * v108, 0x4065EBACuLL);
      if (!v109)
        goto LABEL_180;
      *((_QWORD *)v4 + 123) = v109;
      result = (char *)memset(v109, 255, 8 * *((unsigned int *)v4 + 248));
    }
LABEL_162:
    v2 = *(_DWORD *)(a2 + 8);
  }
  while (v2);
  return result;
}

void sub_1C5EF60B8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5EF60CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81A94A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5EF6104(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81A94A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1C5EF6124(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 8);
  result = sub_1C477672C((uint64_t)(v4 + 102), *a2);
  v6 = v4[103];
  v7 = 832;
  if (v6 == v4[102])
    v7 = 836;
  if (result == (void *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
  {
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v4 + 66), v3);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(unsigned int *)(v9 + 8);
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v9 + 16, v10 + 1, 8);
        LODWORD(v10) = *(_DWORD *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v3;
      ++*(_DWORD *)(v9 + 8);
    }
  }
  return result;
}

uint64_t sub_1C5EF61D8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Instrument function entry/exit with calls to e.g. mcount() (pre inlining)";
  *(_QWORD *)(v2 + 8) = 73;
  *(_QWORD *)(v2 + 16) = "ee-instrument";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1ED826C20;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EF6C3C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EF626C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Instrument function entry/exit with calls to e.g. mcount() (post inlining)";
  *(_QWORD *)(v2 + 8) = 74;
  *(_QWORD *)(v2 + 16) = "post-inline-ee-instrument";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED826C21;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5EF6C64;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5EF6300(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED826C20;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A94E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED826C28);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EF61D8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED826C28, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5EF63C8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED826C21;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9588;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED826C30);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EF626C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED826C30, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C5EF6490(unsigned __int8 *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  _QWORD ***v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned __int8 *Impl;
  _QWORD **v56;
  _QWORD **v57;
  _QWORD **v58;
  _QWORD *j;
  _QWORD *v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  llvm::BasicBlock *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  unsigned __int8 **v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unsigned __int8 *v93;
  unsigned __int8 **v94;
  unsigned __int8 *v95;
  _QWORD *v97;
  unsigned __int8 *v98;
  size_t __n;
  size_t v100;
  char *v101;
  uint64_t *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;

  if (a2)
    v4 = 33;
  else
    v4 = 25;
  v5 = 24;
  if (a2)
    v5 = 32;
  __n = v4;
  v100 = v5;
  if (a2)
    v6 = "instrument-function-entry-inlined";
  else
    v6 = "instrument-function-entry";
  v7 = (_QWORD **)*((_QWORD *)a1 + 14);
  v102 = (uint64_t *)(a1 + 112);
  if (!v7)
    goto LABEL_25;
  if (!*((_DWORD *)v7 + 2))
    goto LABEL_25;
  v8 = v7[5];
  if (!v8)
    goto LABEL_25;
  v9 = *((_DWORD *)v8 + 10);
  if (!v9)
    goto LABEL_25;
  v10 = v8[3];
  v11 = sub_1C5E3DF4C(v6, (uint64_t)&v6[v4]);
  v12 = v9 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v10 + 24 * (v11 & v12);
    v16 = *(const void **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if (v6 == (char *)-1)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v16 != (const void *)-2)
      break;
    if (v6 == (char *)-2)
      goto LABEL_23;
LABEL_16:
    if (v16 == (const void *)-1)
      goto LABEL_25;
    v11 = i + v14;
  }
  if (__n != *(_QWORD *)(v15 + 8) || memcmp(v6, *(const void **)v15, __n))
    goto LABEL_16;
LABEL_23:
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 + 16);
    v19 = v17 + *(unsigned int *)(v17 + 12) + 25;
    goto LABEL_26;
  }
LABEL_25:
  v19 = 0;
  v18 = 0;
LABEL_26:
  v20 = "instrument-function-exit";
  if (a2)
    v20 = "instrument-function-exit-inlined";
  v101 = (char *)v20;
  v21 = *v102;
  if (!*v102 || !*(_DWORD *)(v21 + 8) || (v22 = *(_QWORD *)(v21 + 40)) == 0 || (v23 = *(_DWORD *)(v22 + 40)) == 0)
  {
    v36 = 0;
    v35 = 0;
    goto LABEL_47;
  }
  v24 = v18;
  v25 = v6;
  v26 = v19;
  v27 = *(_QWORD *)(v22 + 24);
  v28 = sub_1C5E3DF4C(v101, (uint64_t)&v101[v100]);
  v29 = v23 - 1;
  v30 = 1;
  while (2)
  {
    v31 = v28 & v29;
    v32 = v27 + 24 * (v28 & v29);
    v33 = *(const void **)v32;
    if (*(_QWORD *)v32 == -1)
    {
      if (v101 == (char *)-1)
        break;
      goto LABEL_35;
    }
    if (v33 == (const void *)-2)
    {
      if (v101 == (char *)-2)
        break;
      goto LABEL_35;
    }
    if (v100 != *(_QWORD *)(v32 + 8) || memcmp(v101, *(const void **)v32, v100))
    {
LABEL_35:
      if (v33 == (const void *)-1)
      {
        v36 = 0;
        v35 = 0;
        v19 = v26;
        goto LABEL_45;
      }
      v28 = v30 + v31;
      ++v30;
      continue;
    }
    break;
  }
  v34 = *(_QWORD *)(v32 + 16);
  v19 = v26;
  if (v34)
  {
    v35 = *(unsigned int *)(v34 + 16);
    v36 = v34 + *(unsigned int *)(v34 + 12) + 25;
  }
  else
  {
    v36 = 0;
    v35 = 0;
  }
LABEL_45:
  v6 = v25;
  v18 = v24;
LABEL_47:
  v37 = v18 != 0;
  if (v18)
  {
    v106 = 0;
    if ((a1[23] & 0x20) != 0)
    {
      v38 = ***(_QWORD ***)a1;
      v107 = a1;
      v39 = *(_DWORD *)(v38 + 2496);
      if (!v39)
      {
        v97 = 0;
        goto LABEL_167;
      }
      v40 = *(_QWORD *)(v38 + 2480);
      v41 = v39 - 1;
      v42 = v41 & ((a1 >> 4) ^ (a1 >> 9));
      v43 = (_QWORD *)(v40 + 40 * v42);
      v44 = (_QWORD ***)*v43;
      if ((unsigned __int8 *)*v43 != a1)
      {
        v45 = 0;
        v46 = 1;
        while (v44 != (_QWORD ***)-4096)
        {
          if (v45)
            v47 = 0;
          else
            v47 = v44 == (_QWORD ***)-8192;
          if (v47)
            v45 = v43;
          v48 = v42 + v46++;
          v42 = v48 & v41;
          v43 = (_QWORD *)(v40 + 40 * v42);
          v44 = (_QWORD ***)*v43;
          if ((unsigned __int8 *)*v43 == a1)
            goto LABEL_59;
        }
        if (v45)
          v97 = v45;
        else
          v97 = v43;
LABEL_167:
        v43 = sub_1C541AB24(v38 + 2480, (uint64_t)&v107, (uint64_t *)&v107, v97);
        v98 = v107;
        v43[3] = 0;
        v43[4] = 0;
        *v43 = v98;
        v43[1] = v43 + 3;
        v43[2] = 0x100000000;
      }
LABEL_59:
      v49 = *((unsigned int *)v43 + 4);
      if ((_DWORD)v49)
      {
        v50 = (uint64_t *)(v43[1] + 8);
        v51 = 16 * v49;
        while (*((_DWORD *)v50 - 2))
        {
          v50 += 2;
          v51 -= 16;
          if (!v51)
            goto LABEL_73;
        }
        v52 = *v50;
        if (*v50)
        {
          v53 = *(_QWORD *)(v52 + 16);
          v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFF8);
          if ((v53 & 4) != 0)
            v54 = (uint64_t *)*v54;
          Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v54, *(_DWORD *)(v52 + 28), 0, v52, 0, 0, 0, 1);
          v107 = Impl;
          if (Impl)
            llvm::MetadataTracking::track((uint64_t)&v107, Impl, 2);
          if (v106)
            llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
          v106 = v107;
          if (v107)
            llvm::MetadataTracking::retrack((uint64_t)&v107, v107, (uint64_t)&v106);
        }
      }
    }
LABEL_73:
    v56 = (_QWORD **)*((_QWORD *)a1 + 10);
    v57 = v56 - 3;
    if (!v56)
      v57 = 0;
    v58 = v57 + 5;
    for (j = v57[6]; j != v58; j = (_QWORD *)j[1])
    {
      v60 = j - 3;
      if (!j)
        v60 = 0;
      if (*((_BYTE *)v60 + 16) != 83)
      {
        v61 = *((unsigned __int8 *)j - 8) - 38;
        v62 = v61 > 0x38;
        v63 = (1 << v61) & 0x100060000000001;
        if (v62 || v63 == 0)
          v58 = (_QWORD **)j;
        else
          v58 = (_QWORD **)j[1];
        break;
      }
    }
    if (v58)
      v65 = (uint64_t *)(v58 - 3);
    else
      v65 = 0;
    v105 = v106;
    if (v106)
      llvm::MetadataTracking::track((uint64_t)&v105, v106, 2);
    sub_1C5EF6D7C((llvm::UndefValue *)a1, v19, v18, v65, &v105);
    if (v105)
      llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
    *((_QWORD *)a1 + 14) = llvm::AttributeList::removeAttributeAtIndex(v102, **(uint64_t ***)a1, -1, v6, __n);
    if (v106)
      llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
  }
  if (v35)
  {
    v66 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
    if (v66 != a1 + 72)
    {
      v67 = (a1 >> 4) ^ (a1 >> 9);
      while (1)
      {
        v68 = v66 ? (llvm::BasicBlock *)(v66 - 24) : 0;
        v69 = (_QWORD *)*((_QWORD *)v68 + 5);
        if (v69 == (_QWORD *)((char *)v68 + 40))
        {
          v71 = 0;
        }
        else
        {
          v70 = v69 ? (uint64_t)(v69 - 3) : 0;
          v71 = *(unsigned __int8 *)(v70 + 16) - 29 >= 0xB ? 0 : v70;
        }
        if (*(_BYTE *)(v71 + 16) == 29)
          break;
LABEL_152:
        v66 = (unsigned __int8 *)*((_QWORD *)v66 + 1);
        if (v66 == a1 + 72)
          goto LABEL_161;
      }
      v72 = llvm::BasicBlock::getTerminatingMustTailCall(v68);
      if (v72)
        v73 = (uint64_t *)v72;
      else
        v73 = (uint64_t *)v71;
      v106 = 0;
      v74 = (unsigned __int8 *)v73[6];
      v104 = v74;
      if (v74)
      {
        llvm::MetadataTracking::track((uint64_t)&v104, v74, 2);
        v75 = v104;
        if (v104)
        {
          if (v106)
          {
            llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
            v75 = v104;
            v106 = v104;
            if (!v104)
            {
              v103 = 0;
LABEL_147:
              sub_1C5EF6D7C((llvm::UndefValue *)a1, v36, v35, v73, &v103);
              if (v103)
                llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
              if (v106)
                llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
              v37 = 1;
              goto LABEL_152;
            }
          }
          else
          {
            v106 = v104;
          }
          llvm::MetadataTracking::track((uint64_t)&v106, v75, 2);
LABEL_143:
          if (v104)
            llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
          v103 = v106;
          if (v106)
            llvm::MetadataTracking::track((uint64_t)&v103, v106, 2);
          goto LABEL_147;
        }
      }
      if ((a1[23] & 0x20) == 0)
        goto LABEL_143;
      v76 = ***(_QWORD ***)a1;
      v107 = a1;
      v77 = *(_DWORD *)(v76 + 2496);
      if (v77)
      {
        v78 = *(_QWORD *)(v76 + 2480);
        v79 = v77 - 1;
        v80 = v79 & v67;
        v81 = (unsigned __int8 **)(v78 + 40 * (v79 & v67));
        v82 = *v81;
        if (*v81 == a1)
          goto LABEL_129;
        v83 = 0;
        v84 = 1;
        while (v82 != (unsigned __int8 *)-4096)
        {
          if (v83)
            v85 = 0;
          else
            v85 = v82 == (unsigned __int8 *)-8192;
          if (v85)
            v83 = v81;
          v86 = v80 + v84++;
          v80 = v86 & v79;
          v81 = (unsigned __int8 **)(v78 + 40 * v80);
          v82 = *v81;
          if (*v81 == a1)
            goto LABEL_129;
        }
        if (v83)
          v94 = v83;
        else
          v94 = v81;
      }
      else
      {
        v94 = 0;
      }
      v81 = (unsigned __int8 **)sub_1C541AB24(v76 + 2480, (uint64_t)&v107, (uint64_t *)&v107, v94);
      v95 = v107;
      v81[4] = 0;
      v81[3] = 0;
      *v81 = v95;
      v81[1] = (unsigned __int8 *)(v81 + 3);
      v81[2] = (unsigned __int8 *)0x100000000;
LABEL_129:
      v87 = *((unsigned int *)v81 + 4);
      if ((_DWORD)v87)
      {
        v88 = (uint64_t *)(v81[1] + 8);
        v89 = 16 * v87;
        while (*((_DWORD *)v88 - 2))
        {
          v88 += 2;
          v89 -= 16;
          if (!v89)
            goto LABEL_143;
        }
        v90 = *v88;
        if (*v88)
        {
          v91 = *(_QWORD *)(v90 + 16);
          v92 = (uint64_t *)(v91 & 0xFFFFFFFFFFFFFFF8);
          if ((v91 & 4) != 0)
            v92 = (uint64_t *)*v92;
          v93 = (unsigned __int8 *)llvm::DILocation::getImpl(v92, 0, 0, v90, 0, 0, 0, 1);
          v107 = v93;
          if (v93)
            llvm::MetadataTracking::track((uint64_t)&v107, v93, 2);
          if (v106)
            llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
          v106 = v107;
          if (v107)
            llvm::MetadataTracking::retrack((uint64_t)&v107, v107, (uint64_t)&v106);
        }
      }
      goto LABEL_143;
    }
LABEL_161:
    *((_QWORD *)a1 + 14) = llvm::AttributeList::removeAttributeAtIndex(v102, **(uint64_t ***)a1, -1, v101, v100);
  }
  return v37;
}

uint64_t sub_1C5EF6C3C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EF6300(v0);
}

uint64_t sub_1C5EF6C64()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EF63C8(v0);
}

void sub_1C5EF6C90(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EF6CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, v3, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5EF6CF8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1C5EF6490(a2, 0);
}

void sub_1C5EF6D08(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EF6D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, v3, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5EF6D70(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1C5EF6490(a2, 1);
}

void sub_1C5EF6D7C(llvm::UndefValue *a1, uint64_t a2, int64_t a3, uint64_t *a4, unsigned __int8 **a5)
{
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  llvm::PointerType *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Declaration;
  const llvm::APInt *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ConstantInt *v29;
  llvm::ValueHandleBase *v30;
  char *v31;
  llvm::Value *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  llvm::Constant *v46;
  llvm::UndefValue *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  llvm::Value *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 **v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 **v67;
  uint64_t v68;
  uint64_t v69;
  llvm::ValueSymbolTable *v70;
  uint64_t v71;
  llvm::ValueSymbolTable *v72;
  BOOL v73;
  BOOL v74;
  llvm::Type ***v76;
  llvm::Value *v77;
  llvm::Value *v78;
  char *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 **v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::PointerType *inserted;
  const char *v89;
  __int16 v90;
  uint64_t v91[4];
  __int16 v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  const char *v99;
  llvm::Value *v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103[7];

  v103[5] = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t **)a4[5];
  v10 = (uint64_t *)v9[7][5];
  v11 = **v9;
  if (a3 <= 22)
  {
    if (a3 == 6)
    {
      if (*(_DWORD *)a2 == 1970234221 && *(_WORD *)(a2 + 4) == 29806)
        goto LABEL_100;
    }
    else
    {
      if (a3 != 7)
      {
        if (a3 != 8 || *(_QWORD *)a2 != 0x746E756F636D5F01 && *(_QWORD *)a2 != 0x746E756F636D5F5FLL)
          goto LABEL_36;
LABEL_100:
        v76 = (llvm::Type ***)sub_1C6210688((uint64_t)v10, (unsigned __int8 *)a2, a3, 0, (uint64_t **)(*(_QWORD *)v11 + 1576));
        v78 = v77;
        v98 = 257;
        v79 = (char *)operator new(0x70uLL);
        *((_DWORD *)v79 + 13) = *((_DWORD *)v79 + 13) & 0x38000000 | 1;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
        *((_QWORD *)v79 + 2) = 0;
        *((_QWORD *)v79 + 3) = v79 + 32;
        llvm::CallInst::CallInst((llvm::CallInst *)(v79 + 32), v76, v78, (const llvm::Twine *)&v96, (llvm::Instruction *)a4);
        v80 = *a5;
        v95 = v80;
        if (v80)
          llvm::MetadataTracking::track((uint64_t)&v95, v80, 2);
        v83 = (unsigned __int8 *)*((_QWORD *)v79 + 10);
        v82 = (unsigned __int8 **)(v79 + 80);
        v81 = v83;
        if (v83)
          llvm::MetadataTracking::untrack((uint64_t)v82, v81);
        v66 = v95;
        *v82 = v95;
        if (v66)
        {
          v67 = &v95;
          v68 = (uint64_t)v82;
          goto LABEL_106;
        }
        return;
      }
      if (*(_DWORD *)a2 == 1868786990 && *(_DWORD *)(a2 + 3) == 1953396079)
        goto LABEL_100;
      if (*(_DWORD *)a2 == 1868786945 && *(_DWORD *)(a2 + 3) == 1953396079)
        goto LABEL_100;
      if (*(_DWORD *)a2 == 1868787039 && *(_DWORD *)(a2 + 3) == 1953396079)
        goto LABEL_100;
    }
LABEL_36:
    v99 = "Unknown instrumentation function: '";
    v102 = 259;
    v92 = 261;
    v91[0] = a2;
    v91[1] = a3;
    sub_1C6131AAC((uint64_t *)&v99, v91, (uint64_t)v103);
    v89 = "'";
    v90 = 259;
    sub_1C6131AAC(v103, (uint64_t *)&v89, (uint64_t)&v96);
    llvm::report_fatal_error((uint64_t)&v96, 1);
  }
  if (a3 == 23)
  {
    v14 = *(_QWORD *)(a2 + 15);
    v15 = *(_QWORD *)a2 == 0x72705F6779635F5FLL && *(_QWORD *)(a2 + 8) == 0x75665F656C69666FLL;
    v16 = 0x746978655F636E75;
  }
  else
  {
    if (a3 != 24)
    {
      if (a3 == 29)
      {
        v73 = *(_QWORD *)a2 == 0x72705F6779635F5FLL && *(_QWORD *)(a2 + 8) == 0x75665F656C69666FLL;
        v74 = v73 && *(_QWORD *)(a2 + 16) == 0x7265746E655F636ELL;
        if (v74 && *(_QWORD *)(a2 + 21) == 0x657261625F726574)
          goto LABEL_100;
      }
      goto LABEL_36;
    }
    if (*(_QWORD *)a2 == 0x6D72612E6D766C6CLL
      && *(_QWORD *)(a2 + 8) == 0x6261652E756E672ELL
      && *(_QWORD *)(a2 + 16) == 0x746E756F636D2E69)
    {
      goto LABEL_100;
    }
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)a2 == 0x72705F6779635F5FLL && *(_QWORD *)(a2 + 8) == 0x75665F656C69666FLL;
    v16 = 0x7265746E655F636ELL;
  }
  if (!v15 || v14 != v16)
    goto LABEL_36;
  v103[0] = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 1912), 0);
  v103[1] = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 1912), 0);
  v18 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v11 + 1576), v103, 2, 0);
  inserted = llvm::Module::getOrInsertFunction((uint64_t)v10, (unsigned __int8 *)a2, a3, v18, 0);
  v20 = v19;
  Declaration = llvm::Intrinsic::getDeclaration(v10, 257, 0, 0);
  v23 = Declaration;
  if (Declaration)
    v24 = *(_QWORD *)(Declaration + 24);
  else
    v24 = 0;
  v29 = *(llvm::ConstantInt **)(*(_QWORD *)v11 + 1960);
  v97 = *(_DWORD *)(*(_QWORD *)v11 + 1968) >> 8;
  if (v97 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v96, 0, 0);
  else
    v96 = 0;
  v30 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v96, v22);
  if (v97 >= 0x41 && v96)
    MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
  v99 = (const char *)v30;
  v98 = 257;
  v31 = (char *)operator new(0x90uLL);
  v32 = (llvm::Value *)(v31 + 64);
  *((_DWORD *)v31 + 21) = *((_DWORD *)v31 + 21) & 0x38000000 | 2;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = v31 + 64;
  *((_QWORD *)v31 + 4) = 0;
  v33 = (uint64_t *)(v31 + 32);
  *((_QWORD *)v31 + 5) = 0;
  *((_QWORD *)v31 + 6) = 0;
  *((_QWORD *)v31 + 7) = v31 + 64;
  *((_QWORD *)v31 + 8) = **(_QWORD **)(v24 + 16);
  *((_QWORD *)v31 + 9) = 0;
  v31[80] = 84;
  v31[81] = 0;
  *((_WORD *)v31 + 41) = 0;
  *((_DWORD *)v31 + 21) = 2;
  *(_OWORD *)(v31 + 88) = 0u;
  v34 = v31 + 88;
  *(_OWORD *)(v31 + 104) = 0u;
  *((_DWORD *)v31 + 30) = 0;
  v35 = a4[5];
  v36 = a4 + 3;
  *((_QWORD *)v31 + 13) = v35;
  *(_WORD *)(v35 + 18) &= ~0x8000u;
  if ((v31[87] & 0x10) != 0)
  {
    v69 = *(_QWORD *)(v35 + 56);
    if (v69)
    {
      v70 = *(llvm::ValueSymbolTable **)(v69 + 104);
      if (v70)
        llvm::ValueSymbolTable::reinsertValue(v70, v32);
    }
  }
  v37 = *v36;
  *((_QWORD *)v31 + 11) = *v36;
  *((_QWORD *)v31 + 12) = v36;
  *(_QWORD *)(v37 + 8) = v34;
  *v36 = (uint64_t)v34;
  LODWORD(v37) = *((_DWORD *)v31 + 21);
  *((_QWORD *)v31 + 16) = 0;
  *((_QWORD *)v31 + 17) = v24;
  sub_1C5382FD4((uint64_t)v91, (uint64_t *)&v99, (uint64_t *)&v100, (uint64_t)v32 - 32 * (v37 & 0x7FFFFFF));
  if (*((_QWORD *)v31 + 4))
  {
    **((_QWORD **)v31 + 6) = *((_QWORD *)v31 + 5);
    v84 = *((_QWORD *)v31 + 5);
    if (v84)
      *(_QWORD *)(v84 + 16) = *((_QWORD *)v31 + 6);
  }
  *v33 = v23;
  if (v23)
  {
    v40 = *(_QWORD *)(v23 + 8);
    v39 = (uint64_t **)(v23 + 8);
    v38 = v40;
    *((_QWORD *)v31 + 5) = v40;
    if (v40)
      *(_QWORD *)(v38 + 16) = v31 + 40;
    *((_QWORD *)v31 + 6) = v39;
    *v39 = v33;
  }
  llvm::CallBase::populateBundleOperandInfos((uint64_t)v32, 0, 0, 1u);
  llvm::Value::setName((uint64_t ***)v32, (uint64_t)&v96);
  v41 = *a5;
  v94 = v41;
  if (v41)
    llvm::MetadataTracking::track((uint64_t)&v94, v41, 2);
  v44 = (unsigned __int8 *)*((_QWORD *)v31 + 14);
  v43 = (unsigned __int8 **)(v31 + 112);
  v42 = v44;
  if (v44)
    llvm::MetadataTracking::untrack((uint64_t)v43, v42);
  v45 = v94;
  *v43 = v94;
  if (v45)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v94, v45, (uint64_t)v43);
    v94 = 0;
  }
  v46 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 1912), 0);
  v47 = a1;
  if (*(llvm::Constant **)a1 != v46)
    v47 = sub_1C537D3B8((llvm *)0x31, (uint64_t)a1, v46, 0);
  v99 = (const char *)v47;
  v100 = v32;
  v98 = 257;
  v48 = (char *)operator new(0xB0uLL);
  v49 = v48;
  v50 = 0;
  v51 = (llvm::Value *)(v48 + 96);
  *((_DWORD *)v48 + 29) = *((_DWORD *)v48 + 29) & 0x38000000 | 3;
  do
  {
    v52 = &v48[v50];
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = 0;
    *((_QWORD *)v52 + 2) = 0;
    *((_QWORD *)v52 + 3) = v51;
    v50 += 32;
  }
  while (v50 != 96);
  v53 = **((_QWORD **)inserted + 2);
  *(_OWORD *)(v48 + 120) = 0u;
  v54 = v48 + 120;
  *((_QWORD *)v48 + 12) = v53;
  *((_QWORD *)v48 + 13) = 0;
  v48[112] = 84;
  v48[113] = 0;
  *((_WORD *)v48 + 57) = 0;
  *((_DWORD *)v48 + 29) = *((_DWORD *)v48 + 29) & 0xC0000000 | 3;
  *(_OWORD *)(v48 + 136) = 0u;
  *((_DWORD *)v48 + 38) = 0;
  v55 = a4[5];
  *((_QWORD *)v48 + 17) = v55;
  *(_WORD *)(v55 + 18) &= ~0x8000u;
  if ((v48[119] & 0x10) != 0)
  {
    v71 = *(_QWORD *)(v55 + 56);
    if (v71)
    {
      v72 = *(llvm::ValueSymbolTable **)(v71 + 104);
      if (v72)
        llvm::ValueSymbolTable::reinsertValue(v72, v51);
    }
  }
  v56 = *v36;
  *((_QWORD *)v49 + 15) = *v36;
  *((_QWORD *)v49 + 16) = v36;
  *(_QWORD *)(v56 + 8) = v54;
  *v36 = (uint64_t)v54;
  v57 = *((_DWORD *)v49 + 29) & 0x7FFFFFF;
  *((_QWORD *)v49 + 20) = 0;
  *((_QWORD *)v49 + 21) = inserted;
  sub_1C5382FD4((uint64_t)v91, (uint64_t *)&v99, &v101, (uint64_t)v51 - 32 * v57);
  v58 = v49 + 64;
  if (*((_QWORD *)v49 + 8))
  {
    **((_QWORD **)v49 + 10) = *((_QWORD *)v49 + 9);
    v85 = *((_QWORD *)v49 + 9);
    if (v85)
      *(_QWORD *)(v85 + 16) = *((_QWORD *)v49 + 10);
  }
  *v58 = v20;
  if (v20)
  {
    v61 = *(_QWORD *)(v20 + 8);
    v60 = (_QWORD *)(v20 + 8);
    v59 = v61;
    *((_QWORD *)v49 + 9) = v61;
    if (v61)
      *(_QWORD *)(v59 + 16) = v49 + 72;
    *((_QWORD *)v49 + 10) = v60;
    *v60 = v58;
  }
  llvm::CallBase::populateBundleOperandInfos((uint64_t)v51, 0, 0, 2u);
  llvm::Value::setName((uint64_t ***)v51, (uint64_t)&v96);
  v62 = *a5;
  v93 = v62;
  if (v62)
    llvm::MetadataTracking::track((uint64_t)&v93, v62, 2);
  v65 = (unsigned __int8 *)*((_QWORD *)v49 + 18);
  v64 = (unsigned __int8 **)(v49 + 144);
  v63 = v65;
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)v64, v63);
  v66 = v93;
  *v64 = v93;
  if (v66)
  {
    v67 = &v93;
    v68 = (uint64_t)v64;
LABEL_106:
    llvm::MetadataTracking::retrack((uint64_t)v67, v66, v68);
  }
}

char *llvm::EscapeEnumerator::Next(uint64_t ***this)
{
  char *v1;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  llvm::BasicBlock *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t *v38;
  const llvm::Value *v39;
  llvm::LandingPadInst *v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  llvm::PointerType *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  int v48;
  llvm::Value **v49;
  unsigned int v50;
  llvm::BasicBlock *v51;
  llvm::LandingPadInst *v52;
  char *v53;
  llvm::DomTreeUpdater *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59[4];
  __int16 v60;
  void *__p;
  uint64_t v62;
  _BYTE v63[16];
  __int16 v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[17];

  v67[16] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 168))
    return 0;
  v4 = this[2];
  v3 = this[3];
  while (v4 != v3)
  {
    v5 = (uint64_t **)v4[1];
    this[2] = v5;
    if (v4)
      v6 = (llvm::BasicBlock *)(v4 - 3);
    else
      v6 = 0;
    v7 = (_QWORD *)*((_QWORD *)v6 + 5);
    if (v7 == (_QWORD *)((char *)v6 + 40))
    {
      v9 = 0;
    }
    else
    {
      if (v7)
        v8 = v7 - 3;
      else
        v8 = 0;
      if (*((unsigned __int8 *)v8 + 16) - 29 >= 0xB)
        v9 = 0;
      else
        v9 = (uint64_t)v8;
    }
    v10 = *(unsigned __int8 *)(v9 + 16);
    v11 = v10 == 34 || v10 == 29;
    v4 = v5;
    if (v11)
    {
      v12 = llvm::BasicBlock::getTerminatingMustTailCall(v6);
      if (v12)
        v13 = v12;
      else
        v13 = v9;
      v1 = (char *)(this + 4);
      this[10] = *(uint64_t ***)(v13 + 40);
      this[11] = (uint64_t **)(v13 + 24);
      v14 = *(void **)(v13 + 48);
      v65 = v14;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)&v65, (unsigned __int8 *)v14, 2);
        v15 = v65;
      }
      else
      {
        v15 = 0;
      }
      sub_1C4774EF4((uint64_t)(this + 4), 0, (uint64_t)v15);
      if (v65)
        llvm::MetadataTracking::untrack((uint64_t)&v65, (unsigned __int8 *)v65);
      return v1;
    }
  }
  *((_BYTE *)this + 168) = 1;
  if (!*((_BYTE *)this + 169))
    return 0;
  v17 = *this;
  v18 = (*this)[14];
  if (v18)
  {
    if ((v18[2] & 0x20) != 0)
      return 0;
  }
  v65 = v67;
  v66 = 0x1000000000;
  v19 = v17 + 9;
  v20 = v17[10];
  if (v20 == (uint64_t *)(v17 + 9))
    goto LABEL_54;
  do
  {
    v21 = v20 - 3;
    if (!v20)
      v21 = 0;
    v22 = v21 + 5;
    for (i = v21[6]; (uint64_t *)i != v22; i = *(_QWORD *)(i + 8))
    {
      v24 = i - 24;
      if (!i)
        v24 = 0;
      v25 = *(unsigned __int8 *)(v24 + 16);
      if (v25 == 84)
        v26 = v24;
      else
        v26 = 0;
      if (i)
      {
        if (v25 == 84)
        {
          v27 = *(_QWORD *)(v26 + 64);
          if ((!v27 || (*(_BYTE *)(v27 + 16) & 0x20) == 0)
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v26, 37) & 1) == 0
            && (*(_WORD *)(v26 + 18) & 3) != 2)
          {
            v28 = v66;
            if (v66 >= (unint64_t)HIDWORD(v66))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v66 + 1, 8);
              v28 = v66;
            }
            *((_QWORD *)v65 + v28) = v26;
            LODWORD(v66) = v66 + 1;
          }
        }
      }
    }
    v20 = (uint64_t *)v20[1];
  }
  while (v20 != (uint64_t *)v19);
  if ((_DWORD)v66)
  {
    v30 = *this;
    v29 = this[1];
    v31 = ***this;
    v32 = 1;
    HIBYTE(v64) = 1;
    if (*(_BYTE *)v29)
    {
      __p = v29;
      v32 = 3;
    }
    LOBYTE(v64) = v32;
    v33 = operator new();
    *(_QWORD *)v33 = *(_QWORD *)v31 + 1600;
    *(_QWORD *)(v33 + 8) = 0;
    v34 = *(_DWORD *)(v33 + 20) & 0xC0000000;
    *(_DWORD *)(v33 + 16) = 22;
    *(_DWORD *)(v33 + 20) = v34;
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = v33 + 40;
    *(_QWORD *)(v33 + 48) = v33 + 40;
    *(_QWORD *)(v33 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v30 + 9), (_QWORD *)v33);
    v35 = v30[9];
    *(_QWORD *)(v33 + 32) = v30 + 9;
    *(_QWORD *)(v33 + 24) = v35;
    v35[1] = v33 + 24;
    v30[9] = (uint64_t *)(v33 + 24);
    llvm::Value::setName((uint64_t ***)v33, (uint64_t)&__p);
    v36 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v31 + 1912), 0);
    v37 = *(_QWORD *)v31 + 1960;
    v38 = *v36;
    __p = v36;
    v62 = v37;
    v40 = (llvm::LandingPadInst *)llvm::StructType::get(v38, (uint64_t)&__p, 2, 0);
    v41 = *this;
    if ((*((_WORD *)*this + 9) & 8) == 0)
    {
      v42 = (uint64_t)v41[5];
      v43 = *(_QWORD *)v42;
      v60 = 260;
      v59[0] = (unsigned __int8 *)(v42 + 216);
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v59);
      v44 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v43 + 1960), 0, 0, 1);
      llvm::Module::getOrInsertFunction(v42, "__gcc_personality_v0", 0x14uLL, v44, 0);
      v46 = v45;
      if ((v63[7] & 0x80000000) != 0)
        operator delete(__p);
      v47 = *this;
      sub_1C53D1F60(*this, v46);
      *((_WORD *)v47 + 9) = *((_WORD *)v47 + 9) & 0xFFF7 | (8 * (v46 != 0));
      v41 = *this;
    }
    v48 = *((_DWORD *)v41 + 5);
    if ((v48 & 0x40000000) != 0)
      v49 = (llvm::Value **)*(v41 - 1);
    else
      v49 = (llvm::Value **)&v41[-4 * (v48 & 0x7FFFFFF)];
    v50 = llvm::classifyEHPersonality(*v49, v39);
    if (v50 <= 0xC && ((1 << v50) & 0x1780) != 0)
      llvm::report_fatal_error((llvm *)"Scoped EH not supported", (const char *)1);
    __p = "cleanup.lpad";
    v64 = 259;
    v52 = llvm::LandingPadInst::Create(v40, (llvm::Type *)1, (const llvm::Twine *)&__p, (const llvm::Twine *)v33, v51);
    *((_WORD *)v52 + 9) |= 1u;
    v53 = (char *)operator new(0x60uLL);
    *((_DWORD *)v53 + 13) = *((_DWORD *)v53 + 13) & 0x38000000 | 1;
    *(_QWORD *)v53 = 0;
    *((_QWORD *)v53 + 1) = 0;
    *((_QWORD *)v53 + 2) = 0;
    *((_QWORD *)v53 + 3) = v53 + 32;
    llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v53 + 32), v52, (llvm::BasicBlock *)v33);
    __p = v63;
    v62 = 0x1000000000;
    if ((_DWORD)v66)
    {
      v55 = v66 - 1;
      do
      {
        v56 = v55;
        llvm::changeToInvokeAndSplitBasicBlock(*((llvm **)v65 + v55--), v33, (llvm::BasicBlock *)this[22], v54);
      }
      while (v56);
    }
    v1 = (char *)(this + 4);
    v57 = (unsigned __int8 *)*((_QWORD *)v53 + 10);
    this[10] = (uint64_t **)*((_QWORD *)v53 + 9);
    this[11] = (uint64_t **)(v53 + 56);
    v59[0] = v57;
    if (v57)
    {
      llvm::MetadataTracking::track((uint64_t)v59, v57, 2);
      v58 = v59[0];
    }
    else
    {
      v58 = 0;
    }
    sub_1C4774EF4((uint64_t)(this + 4), 0, (uint64_t)v58);
    if (v59[0])
      llvm::MetadataTracking::untrack((uint64_t)v59, v59[0]);
    if (__p != v63)
      free(__p);
  }
  else
  {
LABEL_54:
    v1 = 0;
  }
  if (v65 != v67)
    free(v65);
  return v1;
}

_QWORD *llvm::Evaluator::MutableValue::clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = this;
  v2 = *this;
  if ((*this & 4) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v4 = *(char **)(v3 + 8);
      v5 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v5)
      {
        v6 = 8 * v5;
        v7 = v4 - 8;
        do
        {
          llvm::Evaluator::MutableValue::clear((llvm::Evaluator::MutableValue *)&v7[v6]);
          v6 -= 8;
        }
        while (v6);
        v4 = *(char **)(v3 + 8);
      }
      if (v4 != (char *)(v3 + 24))
        free(v4);
      this = (_QWORD *)MEMORY[0x1CAA32FC0](v3, 0x10A0C407008FD5DLL);
    }
  }
  *v1 = 0;
  return this;
}

uint64_t llvm::Evaluator::MutableValue::makeMutable(llvm::Evaluator::MutableValue *this)
{
  llvm::Constant *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  llvm::Type *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  unint64_t v21;

  v2 = (llvm::Constant *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)v2 + 8);
  if (*(_QWORD *)v2)
    v5 = v4 == 18;
  else
    v5 = 0;
  if (v5 || (v3 ? (v6 = v4 == 17) : (v6 = 0), v6))
  {
    v9 = *(_DWORD *)(v3 + 32);
  }
  else
  {
    if (v3)
      v7 = v4 == 16;
    else
      v7 = 0;
    if (!v7)
      return 0;
    v9 = *(_DWORD *)(v3 + 12);
  }
  v10 = (_QWORD *)operator new();
  v11 = (unint64_t)v10;
  *v10 = v3;
  v10[1] = v10 + 3;
  v12 = v10 + 1;
  v10[2] = 0x600000000;
  if (v9 >= 7)
  {
    sub_1C63AAE58((uint64_t)(v10 + 1), v9);
    goto LABEL_17;
  }
  if (v9)
  {
LABEL_17:
    v13 = 0;
    do
    {
      v21 = (unint64_t)llvm::Constant::getAggregateElement(v2, v13) & 0xFFFFFFFFFFFFFFFBLL;
      v14 = *(unsigned int *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 8);
      if (v14 >= *(_DWORD *)(v11 + 20))
      {
        v18 = v14 + 1;
        v19 = v15 + 8 * v14 > (unint64_t)&v21;
        if (v15 <= (unint64_t)&v21 && v19)
        {
          v20 = (char *)&v21 - v15;
          sub_1C63AAE58((uint64_t)v12, v18);
          v15 = *v12;
          v16 = (unint64_t *)&v20[*v12];
          goto LABEL_20;
        }
        sub_1C63AAE58((uint64_t)v12, v18);
        v15 = *v12;
      }
      v16 = &v21;
LABEL_20:
      v17 = *(unsigned int *)(v11 + 16);
      *(_QWORD *)(v15 + 8 * v17) = 0;
      *(_QWORD *)(v15 + 8 * v17) = *v16;
      *v16 = 0;
      ++*(_DWORD *)(v11 + 16);
      llvm::Evaluator::MutableValue::clear(&v21);
      v13 = (llvm::Type *)((_DWORD)v13 + 1);
    }
    while (v9 != (_DWORD)v13);
  }
  *(_QWORD *)this = v11 | 4;
  return 1;
}

uint64_t llvm::Evaluator::MutableValue::write(llvm::Evaluator::MutableValue *a1, llvm::Constant *a2, _DWORD *a3, llvm::Constant *a4)
{
  uint64_t v6;
  unsigned __int8 *v8;
  const llvm::DataLayout *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  llvm::FixedVectorType ***v19;
  int v20;
  int64_t v21;
  llvm::FixedVectorType *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v27;
  unsigned int v28;
  llvm::FixedVectorType ***v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t Impl;
  _QWORD **v35;
  unint64_t v36;
  llvm::Type *v37;
  llvm::Constant *v38[2];
  llvm::FixedVectorType ***AggregateElement;
  llvm::UndefValue *v40;
  llvm::UndefValue *v41;
  uint64_t v42;

  v6 = (uint64_t)a2;
  v42 = *MEMORY[0x1E0C80C00];
  v38[0] = a2;
  v38[1] = a4;
  v8 = *(unsigned __int8 **)a2;
  sub_1C4768AD0((uint64_t)a4, *(_QWORD *)a2);
  v11 = (unint64_t)(v10 + 7) >> 3;
  v13 = v12;
  while (1)
  {
    v14 = a3[2];
    v15 = a3;
    if (v14 >= 0x41)
    {
      if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) > 0x40)
        goto LABEL_8;
      v15 = *(_QWORD **)a3;
    }
    if (!*v15
      && (llvm::CastInst::isBitOrNoopPointerCastable((llvm::CastInst *)v8, *(llvm::Type **)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8), (__int32 **)a4, v9)|| sub_1C5EF8070(v38, *(_QWORD *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8))))
    {
      break;
    }
LABEL_8:
    v16 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 4) == 0)
    {
      result = llvm::Evaluator::MutableValue::makeMutable(a1);
      if (!(_DWORD)result)
        return result;
      v16 = *(_QWORD *)a1;
    }
    v18 = v16 & 0xFFFFFFFFFFFFFFF8;
    v37 = 0;
    v37 = *(llvm::Type **)(v16 & 0xFFFFFFFFFFFFFFF8);
    llvm::DataLayout::getGEPIndexForOffset(a4, &v37, (llvm::APInt *)a3, (uint64_t)&AggregateElement);
    if (!(_BYTE)v41)
      return 0;
    if (v40 >= 0x41)
    {
      v20 = 0;
      v19 = AggregateElement;
      v21 = ((unint64_t)v40 + 63) >> 6;
      do
      {
        v27 = v21-- < 1;
        if (v27)
          break;
        v22 = (llvm::FixedVectorType *)AggregateElement[v21];
        v20 += __clz((unint64_t)v22);
      }
      while (!v22);
      v23 = v40 | 0xFFFFFFC0;
      if ((v40 & 0x3F) == 0)
        v23 = 0;
      if ((_DWORD)v40 - v20 - v23 > 0x40)
        goto LABEL_35;
    }
    else
    {
      v19 = (llvm::FixedVectorType ***)&AggregateElement;
    }
    if ((unint64_t)*v19 >= *(unsigned int *)(v18 + 16))
      goto LABEL_35;
    sub_1C4768AD0((uint64_t)a4, (uint64_t)v37);
    v27 = v25 != 1 && v13 == 1 || v11 > (unint64_t)(v24 + 7) >> 3;
    if (v27 && !sub_1C5EF8070(v38, (uint64_t)v37))
    {
      if (!(_BYTE)v41)
        return 0;
LABEL_35:
      v30 = 0;
      v28 = v40;
      goto LABEL_36;
    }
    v28 = v40;
    v29 = AggregateElement;
    if (v40 < 0x41)
      v29 = (llvm::FixedVectorType ***)&AggregateElement;
    a1 = (llvm::Evaluator::MutableValue *)(*(_QWORD *)(v18 + 8) + 8 * (_QWORD)*v29);
    if ((_BYTE)v41)
    {
      v30 = 1;
LABEL_36:
      if (v28 >= 0x41)
      {
        if (AggregateElement)
          MEMORY[0x1CAA32F9C](AggregateElement, 0x1000C8000313F17);
      }
      if ((v30 & 1) == 0)
        return 0;
    }
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
  llvm::Evaluator::MutableValue::clear(a1);
  v32 = v8[8];
  if (v32 == 15)
  {
    if (v31[8] != 13)
      goto LABEL_48;
    v33 = 47;
LABEL_47:
    Impl = (uint64_t)sub_1C537D3B8((llvm *)v33, v6, (llvm::Constant *)v31, 0);
LABEL_51:
    v36 = Impl & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    if (v32 == 13 && v31[8] == 15)
    {
      v33 = 48;
      goto LABEL_47;
    }
LABEL_48:
    if (sub_1C5EF8070(v38, (uint64_t)v31))
    {
      AggregateElement = (llvm::FixedVectorType ***)llvm::Constant::getAggregateElement((llvm::Constant *)v6, 0);
      v40 = llvm::Constant::getAggregateElement((llvm::Constant *)v6, (llvm::Type *)1);
      v41 = llvm::Constant::getAggregateElement((llvm::Constant *)v6, (llvm::Type *)2);
      Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)&AggregateElement, (llvm::Type *)3);
      if (!Impl)
      {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)*AggregateElement, (llvm::Type *)3);
        Impl = sub_1C537B3A4(**v35 + 1288, (uint64_t)v35, &AggregateElement, 3);
      }
      goto LABEL_51;
    }
    if (v8 != v31 && *(unsigned __int8 **)v6 != v31)
      v6 = (uint64_t)sub_1C537D3B8((llvm *)0x31, v6, (llvm::Constant *)v31, 0);
    v36 = v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(_QWORD *)a1 = v36;
  return 1;
}

BOOL sub_1C5EF8070(llvm::Constant **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL4 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  _BOOL8 result;
  uint64_t v20;

  v4 = (uint64_t)a1[1];
  v5 = *(_QWORD *)*a1;
  sub_1C4768AD0(v4, v5);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  llvm::DataLayout::getAlignment(v4, v5);
  v11 = ((1 << v10) + v7 - 1) & -(1 << v10);
  v12 = (uint64_t)a1[1];
  sub_1C4768AD0(v12, a2);
  v14 = v13 == 1;
  v16 = (unint64_t)(v15 + 7) >> 3;
  llvm::DataLayout::getAlignment(v12, a2);
  v18 = v17;
  result = 0;
  if (v11 == (((1 << v18) + v16 - 1) & -(1 << v18)) && ((v9 ^ v14 ^ 1) & 1) != 0)
  {
    v20 = *(_QWORD *)*a1;
    return *(_BYTE *)(v20 + 8) == 18
        && *(_BYTE *)(a2 + 8) == 18
        && *(_DWORD *)(v20 + 32) == 4
        && *(_DWORD *)(a2 + 32) == 3
        && **(_QWORD **)(v20 + 16) == **(_QWORD **)(a2 + 16)
        && *((unsigned __int8 *)llvm::Constant::getAggregateElement(*a1, (llvm::Type *)3) + 16) - 11 < 2;
  }
  return result;
}

llvm::UndefValue *llvm::Evaluator::MutableAggregate::toConstant(llvm::Evaluator::MutableAggregate *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  llvm::ConstantAggregateZero *v7;
  int v8;
  BOOL v9;
  llvm::FixedVectorType ***v10;
  uint64_t v11;
  llvm::UndefValue *Impl;
  _QWORD **v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x2000000000;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2)
  {
    LODWORD(v3) = 0;
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = 8 * v2;
    do
    {
      v6 = *v4 & 0xFFFFFFFFFFFFFFF8;
      if ((*v4 & 4) != 0 || !v6)
      {
        v6 = llvm::Evaluator::MutableAggregate::toConstant((llvm::Evaluator::MutableAggregate *)(*v4 & 0xFFFFFFFFFFFFFFF8));
        LODWORD(v3) = v16;
      }
      if (v3 >= HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v3 + 1, 8);
        LODWORD(v3) = v16;
      }
      *((_QWORD *)v15 + v3) = v6;
      v3 = (v16 + 1);
      LODWORD(v16) = v16 + 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  v7 = *(llvm::ConstantAggregateZero **)this;
  v8 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (*(_QWORD *)this)
    v9 = v8 == 16;
  else
    v9 = 0;
  if (v9)
  {
    v11 = (uint64_t)llvm::ConstantStruct::get(v7, (llvm::Type *)v15, v3);
    goto LABEL_19;
  }
  v10 = (llvm::FixedVectorType ***)v15;
  if (v7 && v8 == 17)
  {
    v11 = (uint64_t)llvm::ConstantArray::get(v7, (llvm::Type *)v15, v3);
LABEL_19:
    Impl = (llvm::UndefValue *)v11;
    goto LABEL_20;
  }
  Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v15, (llvm::Type *)v3);
  if (!Impl)
  {
    llvm::FixedVectorType::get(**v10, (llvm::Type *)v3);
    v11 = sub_1C537B3A4(**v14 + 1288, (uint64_t)v14, v10, v3);
    goto LABEL_19;
  }
LABEL_20:
  if (v15 != v17)
    free(v15);
  return Impl;
}

llvm::UndefValue *llvm::Evaluator::ComputeLoadResult(llvm::Evaluator *this, llvm::Constant *a2, llvm::Constant ***a3)
{
  llvm::DataLayout *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  llvm::GlobalValue *Section;
  const llvm::DataLayout *v13;
  uint64_t v14;
  llvm::Module *v15;
  llvm::UndefValue *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v24;
  int v25;
  int v26;
  void *v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  void *__src;
  unsigned int IndexTypeSizeInBits;

  v6 = (llvm::DataLayout *)*((_QWORD *)this + 73);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v6, *(_QWORD *)a2);
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v6 = (llvm::DataLayout *)*((_QWORD *)this + 73);
  }
  else
  {
    __src = 0;
  }
  v8 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a2, v6, (const void **)&__src, 1, 0, 0, v7);
  v9 = llvm::DataLayout::getIndexTypeSizeInBits(*((_QWORD *)this + 73), *(_QWORD *)v8);
  if (IndexTypeSizeInBits < v9)
  {
    llvm::APInt::sext((llvm::APInt *)&__src, v9, (llvm::APInt *)&v29);
  }
  else if (IndexTypeSizeInBits > v9)
  {
    llvm::APInt::trunc((llvm::APInt *)&__src, v9, (llvm::APInt *)&v29);
  }
  else
  {
    v30 = IndexTypeSizeInBits;
    if (IndexTypeSizeInBits > 0x40)
    {
      v29 = (void *)operator new[]();
      memcpy(v29, __src, (((unint64_t)v30 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v29 = __src;
    }
  }
  if (IndexTypeSizeInBits >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v29;
  v10 = v30;
  IndexTypeSizeInBits = v30;
  if (*(_BYTE *)(v8 + 16) == 3)
  {
    v11 = *((unsigned int *)this + 28);
    if ((_DWORD)v11)
    {
      v17 = *((_QWORD *)this + 12);
      LODWORD(v18) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v19 = (uint64_t *)(v17 + 16 * v18);
      v20 = *v19;
      if (*v19 == v8)
      {
LABEL_27:
        if (v19 != (uint64_t *)(v17 + 16 * v11))
        {
          v21 = v19 + 1;
          v28 = v30;
          if (v30 > 0x40)
          {
            v24 = (((unint64_t)v30 + 63) >> 3) & 0x3FFFFFF8;
            v27 = (void *)operator new[]();
            memcpy(v27, __src, v24);
          }
          else
          {
            v27 = v29;
          }
          v16 = llvm::Evaluator::MutableValue::read(v21, a3, (const void **)&v27, *((const llvm::APInt **)this + 73));
          if (v28 >= 0x41 && v27)
            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
          goto LABEL_38;
        }
      }
      else
      {
        v25 = 1;
        while (v20 != -4096)
        {
          v26 = v18 + v25++;
          v18 = v26 & (v11 - 1);
          v20 = *(_QWORD *)(v17 + 16 * v18);
          if (v20 == v8)
          {
            v19 = (uint64_t *)(v17 + 16 * v18);
            goto LABEL_27;
          }
        }
      }
    }
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 0)
      goto LABEL_37;
    Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v8);
    if (v14 == 12
      && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
      && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
    {
      goto LABEL_37;
    }
    if ((*(_DWORD *)(v8 + 32) & 0xFu) - 5 >= 4)
    {
      v16 = 0;
      if (((1 << (*(_DWORD *)(v8 + 32) & 0xF)) & 0x614) != 0)
        goto LABEL_38;
    }
    if ((v15 = *(llvm::Module **)(v8 + 40)) != 0
      && llvm::Module::getSemanticInterposition(v15)
      && (*(_BYTE *)(v8 + 33) & 0x40) == 0
      || (*(_BYTE *)(v8 + 80) & 2) != 0)
    {
LABEL_37:
      v16 = 0;
    }
    else
    {
      v16 = llvm::ConstantFoldLoadFromConst(*(llvm::Type ***)(v8 - 32), a3, (const void **)&__src, *((const llvm::APInt **)this + 73), v13);
    }
LABEL_38:
    v10 = IndexTypeSizeInBits;
    goto LABEL_39;
  }
  v16 = 0;
LABEL_39:
  if (v10 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v16;
}

uint64_t llvm::Evaluator::getCalleeWithFormalArgs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v6 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32));
  v7 = sub_1C5EF8758(a1, (uint64_t)v6);
  v8 = v7;
  v9 = *(unsigned __int8 *)(v7 + 16);
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (!v10)
  {
    if (v9 != 1)
      return 0;
    v8 = *(_QWORD *)(v7 - 32);
    if (!v8 || *(_BYTE *)(v8 + 16) != 0)
      return 0;
  }
  if (llvm::Evaluator::getFormalParams((uint64_t)a1, a2, v8, a3))
    return v8;
  return 0;
}

uint64_t sub_1C5EF8758(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) >= 0x15u)
  {
    v3 = a1[5] + a1[4] - 1;
    v4 = (uint64_t *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    v6 = 0;
    v7 = a2;
    v5 = sub_1C4E5818C(v4, &v7, &v6);
    a2 = 0;
    if (v5)
      return *(_QWORD *)(v6 + 8);
  }
  return a2;
}

llvm::UndefValue *llvm::Evaluator::castCallResultIfNeeded(llvm::Type **this, llvm::Constant ***a2, llvm::Constant **a3, const llvm::DataLayout *a4)
{
  if (!a3 || *a3 == (llvm::Constant *)a2)
    return (llvm::UndefValue *)a3;
  else
    return llvm::ConstantFoldLoadThroughBitcast(a3, a2, this[73], a4);
}

uint64_t llvm::Evaluator::EvaluateBlock(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  llvm::SmallPtrSetImplBase *v7;
  llvm::Constant **v8;
  llvm::Value *v9;
  int v10;
  llvm::Value *v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::DataLayout *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int IndexTypeSizeInBits;
  llvm *v20;
  llvm::Constant *v21;
  llvm::Constant *v22;
  llvm::Constant *v23;
  llvm::Constant **ElementPtr;
  _QWORD **v25;
  uint64_t v26;
  uint64_t FCmp;
  llvm::ConstantExpr *v28;
  uint64_t ***v29;
  llvm::Constant *v30;
  uint64_t v31;
  int v32;
  int v33;
  llvm::ConstantExpr *v34;
  llvm::PoisonValue **v35;
  llvm::PoisonValue **v36;
  llvm::Type *v37;
  unsigned int v38;
  uint64_t ***v39;
  const llvm::Value *v40;
  char v41;
  int v42;
  llvm::UndefValue *v43;
  llvm::Constant *v44;
  uint64_t *v45;
  llvm::Value *v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  char *v50;
  llvm::UndefValue *v51;
  unint64_t v52;
  char *v53;
  llvm::Value *v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  llvm::UndefValue *v58;
  uint64_t result;
  int v60;
  llvm::Value *v61;
  llvm::Type *v62;
  llvm::UndefValue *v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Value **v69;
  llvm::Value *v70;
  int v71;
  int v72;
  unsigned int v73;
  llvm::Value *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::GlobalValue *CalleeWithFormalArgs;
  llvm::GlobalValue *v81;
  llvm::GlobalValue *Section;
  uint64_t v83;
  llvm::Module *v84;
  llvm::Value *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  void **v94;
  uint64_t v95;
  void *v96;
  const llvm::DataLayout *v97;
  char v98;
  llvm::Constant **v99;
  llvm::Constant *v100;
  llvm::APInt *v101;
  unsigned int v102;
  llvm::Value *v103;
  uint64_t v104;
  llvm::Constant *v105;
  llvm::Constant *v106;
  llvm::UndefValue *v107;
  int v108;
  llvm::Constant **v109;
  llvm::Constant *v110;
  llvm::Value *v111;
  llvm::Value *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t **v116;
  unint64_t v117;
  llvm::Value *v118;
  unint64_t v119;
  BOOL v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  BOOL v125;
  uint64_t *v126;
  uint64_t v127;
  llvm::Value *v128;
  uint64_t v129;
  int v130;
  uint64_t *v131;
  llvm::Value *v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  llvm::Value *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  llvm::Value *v143;
  uint64_t v144;
  llvm::UndefValue *v145;
  llvm::SmallPtrSetImplBase *v146;
  unint64_t *v147;
  uint64_t v149;
  void *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  void *v160;
  llvm::Constant *v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v7 = (llvm::SmallPtrSetImplBase *)(a1 + 488);
  v149 = a1 + 96;
  v146 = (llvm::SmallPtrSetImplBase *)(a1 + 392);
  v147 = (unint64_t *)(a1 + 120);
  while (1)
  {
    v8 = (llvm::Constant **)(a2 - 24);
    if (a2)
      v9 = (llvm::Value *)(a2 - 24);
    else
      v9 = 0;
    v10 = *((unsigned __int8 *)v9 + 16);
    if (v10 == 61)
      v11 = v9;
    else
      v11 = 0;
    if (a2 && v10 == 61)
    {
      v12 = *((unsigned __int8 *)v11 + 16);
      if (v12 == 60 || v12 == 61)
      {
        v13 = *((_WORD *)v11 + 9);
        if ((v13 & 0x380) != 0 || (v13 & 1) != 0)
          return 0;
      }
      else if ((v12 - 63) < 3 || (*((_WORD *)v11 + 9) & 1) != 0)
      {
        return 0;
      }
      v14 = sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v11 - 4));
      v15 = (uint64_t *)llvm::ConstantFoldConstant(v14, *(llvm::Type **)(a1 + 584), *(_QWORD *)(a1 + 592));
      v16 = *(llvm::DataLayout **)(a1 + 584);
      LODWORD(v161) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v16, *v15);
      if (v161 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v160, 0, 0);
        v16 = *(llvm::DataLayout **)(a1 + 584);
      }
      else
      {
        v160 = 0;
      }
      v18 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v15, v16, (const void **)&v160, 1, 0, 0, v17);
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)(a1 + 584), *(_QWORD *)v18);
      if (v161 < IndexTypeSizeInBits)
      {
        llvm::APInt::sext((llvm::APInt *)&v160, IndexTypeSizeInBits, (llvm::APInt *)&v154);
      }
      else if (v161 > IndexTypeSizeInBits)
      {
        llvm::APInt::trunc((llvm::APInt *)&v160, IndexTypeSizeInBits, (llvm::APInt *)&v154);
      }
      else
      {
        LODWORD(v155) = (_DWORD)v161;
        if (v161 > 0x40)
        {
          v154 = (void *)operator new[]();
          memcpy(v154, v160, (((unint64_t)v155 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v154 = v160;
        }
      }
      if (v161 >= 0x41 && v160)
        MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
      v160 = v154;
      LODWORD(v161) = v155;
      if (*(_BYTE *)(v18 + 16) == 3)
        v31 = v18;
      else
        v31 = 0;
      v153 = v31;
      if (!v31)
        goto LABEL_58;
      v32 = *(_DWORD *)(v31 + 32);
      if ((v32 & 0xF) == 1)
        goto LABEL_58;
      if (*(_BYTE *)(v31 + 16))
      {
        if (*(_BYTE *)(v31 + 16) == 3 && (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_58;
      }
      else if ((v32 & 0x800000) == 0 && *(_QWORD *)(v31 + 72) == v31 + 72)
      {
        goto LABEL_58;
      }
      v38 = (v32 & 0xF) - 2;
      if ((v38 >= 9 || ((0x18Fu >> v38) & 1) == 0) && (*(_BYTE *)(v31 + 80) & 2) == 0)
      {
        v39 = (uint64_t ***)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v11 - 8));
        llvm::GlobalPtrAuthInfo::analyze(v39, v40);
        if (v41 || sub_1C5EF97C0((uint64_t)v39, v7, *(_QWORD *)(a1 + 584)))
        {
          v152 = *(_QWORD *)(v31 - 32);
          sub_1C63AAD50((uint64_t)&v154, v149, &v153, &v152);
          v53 = (char *)v154;
          v151 = v161;
          if (v161 > 0x40)
          {
            v150 = (void *)operator new[]();
            memcpy(v150, v160, (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v150 = v160;
          }
          v60 = llvm::Evaluator::MutableValue::write((llvm::Evaluator::MutableValue *)(v53 + 8), (llvm::Constant *)v39, &v150, *(llvm::Constant **)(a1 + 584));
          if (v151 >= 0x41 && v150)
            MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
          v42 = v60 ^ 1;
LABEL_59:
          if (v161 >= 0x41)
          {
            if (v160)
              MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
          }
          if (v42)
            return 0;
          goto LABEL_63;
        }
      }
LABEL_58:
      v42 = 1;
      goto LABEL_59;
    }
    if (!a2 || (v10 - 59) < 0xFFFFFFEE)
      break;
    v20 = (llvm *)(v10 - 28);
    v21 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 8));
    v22 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    ElementPtr = (llvm::Constant **)llvm::ConstantFoldBinaryInstruction(v20, v21, v22, v23);
    if (!ElementPtr)
    {
      v25 = *(_QWORD ***)v21;
      if (!*(_QWORD *)v21)
      {
LABEL_63:
        ElementPtr = 0;
        goto LABEL_81;
      }
      v160 = v21;
      v161 = v22;
      v26 = **v25 + 1512;
      LODWORD(v154) = v20;
      v155 = (uint64_t)&v160;
      v156 = 2;
      v157 = 0u;
      v158 = 0u;
      v159 = 0;
      FCmp = sub_1C537D4FC(v26, (uint64_t)v25, (unsigned __int8 *)&v154);
LABEL_80:
      ElementPtr = (llvm::Constant **)FCmp;
    }
LABEL_81:
    if (*((_QWORD *)v9 + 1))
    {
      v51 = llvm::ConstantFoldConstant((uint64_t)ElementPtr, *(llvm::Type **)(a1 + 584), *(_QWORD *)(a1 + 592));
      v154 = v9;
      v52 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
      sub_1C4E58228((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v52 / 0xAA)) + 24 * (v52 % 0xAA)), &v154)[1] = v51;
      if (!a2)
        goto LABEL_84;
    }
    else if (!a2)
    {
      goto LABEL_84;
    }
    if (*((_BYTE *)v9 + 16) == 33)
    {
      v126 = (uint64_t *)((char *)v9 - 96);
      goto LABEL_223;
    }
LABEL_84:
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (a2 && (v10 - 83) >= 0xFFFFFFFE)
  {
    v28 = (llvm::ConstantExpr *)(*((_WORD *)v9 + 9) & 0x3F);
    v29 = (uint64_t ***)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 8));
    v30 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    if (v28 <= 0xF)
      FCmp = llvm::ConstantExpr::getFCmp(v28, v29, v30, 0);
    else
      FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v28, (unsigned __int8 *)v29, v30, 0);
    goto LABEL_80;
  }
  if (a2 && (v10 - 79) >= 0xFFFFFFF3)
  {
    v33 = v10 - 28;
    sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    FCmp = llvm::ConstantExpr::getCast(v33);
    goto LABEL_80;
  }
  if (a2 && v10 == 85)
  {
    v34 = (llvm::ConstantExpr *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 12));
    v35 = (llvm::PoisonValue **)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 8));
    v36 = (llvm::PoisonValue **)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    FCmp = (uint64_t)llvm::ConstantExpr::getSelect(v34, v35, v36, 0, v37);
    goto LABEL_80;
  }
  if (a2 && v10 == 92)
  {
    v43 = (llvm::UndefValue *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    FCmp = (uint64_t)llvm::ConstantExpr::getExtractValue(v43, *((unsigned int **)v9 + 8), *((unsigned int *)v9 + 18), 0);
    goto LABEL_80;
  }
  if (a2 && v10 == 93)
  {
    v44 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 8));
    v45 = (uint64_t *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v9 - 4));
    FCmp = (uint64_t)llvm::ConstantExpr::getInsertValue(v44, v45, *((_DWORD **)v9 + 8), *((unsigned int *)v9 + 18), 0);
    goto LABEL_80;
  }
  if (v10 == 62)
    v46 = v9;
  else
    v46 = 0;
  if (a2 && v10 == 62)
  {
    v47 = (uint64_t *)sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v46 - 4 * (*((_DWORD *)v46 + 5) & 0x7FFFFFF)));
    v154 = &v156;
    v155 = 0x800000000;
    v48 = *((_DWORD *)v46 + 5);
    if ((v48 & 0x40000000) != 0)
    {
      v50 = (char *)*((_QWORD *)v46 - 1);
      v49 = v48 & 0x7FFFFFF;
    }
    else
    {
      v49 = v48 & 0x7FFFFFF;
      v50 = (char *)v46 - 32 * v49;
    }
    if (v49 == 1)
    {
      v73 = 0;
      v74 = (llvm::Value *)&v156;
    }
    else
    {
      v75 = (uint64_t *)(v50 + 32);
      v76 = 32 * v49 - 32;
      do
      {
        v77 = sub_1C5EF8758((_QWORD *)a1, *v75);
        v78 = v155;
        if (v155 >= (unint64_t)HIDWORD(v155))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)&v156, v155 + 1, 8);
          v78 = v155;
        }
        *((_QWORD *)v154 + v78) = v77;
        v73 = v155 + 1;
        LODWORD(v155) = v155 + 1;
        v75 += 4;
        v76 -= 32;
      }
      while (v76);
      v74 = (llvm::Value *)v154;
    }
    ElementPtr = (llvm::Constant **)llvm::ConstantExpr::getGetElementPtr(*((llvm::GetElementPtrInst **)v46 + 8), v47, v74, v73, (*((_BYTE *)v46 + 17) & 2) != 0, 0, 0);
    if (v154 != &v156)
      free(v154);
    goto LABEL_81;
  }
  if (v10 == 60)
    v54 = v9;
  else
    v54 = 0;
  if (a2 && v10 == 60)
  {
    v55 = *((unsigned __int8 *)v54 + 16);
    if (v55 == 60 || v55 == 61)
    {
      v56 = *((_WORD *)v54 + 9);
      if ((v56 & 0x380) != 0 || (v56 & 1) != 0)
        return 0;
    }
    else if ((v55 - 63) < 3 || (*((_WORD *)v54 + 9) & 1) != 0)
    {
      return 0;
    }
    v57 = sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v54 - 4));
    v58 = llvm::ConstantFoldConstant(v57, *(llvm::Type **)(a1 + 584), *(_QWORD *)(a1 + 592));
    result = (uint64_t)llvm::Evaluator::ComputeLoadResult((llvm::Evaluator *)a1, v58, *(llvm::Constant ****)v54);
    ElementPtr = (llvm::Constant **)result;
    if (!result)
      return result;
    goto LABEL_81;
  }
  if (v10 == 59)
    v61 = v9;
  else
    v61 = 0;
  if (a2 && v10 == 59)
  {
    if ((llvm::AllocaInst::isArrayAllocation(v61) & 1) != 0)
      return 0;
    v63 = (llvm::UndefValue *)*((_QWORD *)v61 + 8);
    v145 = llvm::UndefValue::get(v63, v62);
    v64 = *(uint64_t ***)v61;
    if ((*((_BYTE *)v61 + 23) & 0x10) != 0)
    {
      v65 = **v64;
      v66 = *(_QWORD *)(v65 + 152);
      v67 = *(unsigned int *)(v65 + 168);
      if (!(_DWORD)v67)
        goto LABEL_149;
      LODWORD(v68) = (v67 - 1) & ((v61 >> 4) ^ (v61 >> 9));
      v69 = (llvm::Value **)(v66 + 16 * v68);
      v70 = *v69;
      if (*v69 != v61)
      {
        v71 = 1;
        while (v70 != (llvm::Value *)-4096)
        {
          v72 = v68 + v71++;
          v68 = v72 & (v67 - 1);
          v70 = *(llvm::Value **)(v66 + 16 * v68);
          if (v70 == v61)
          {
            v69 = (llvm::Value **)(v66 + 16 * v68);
            goto LABEL_150;
          }
        }
LABEL_149:
        v69 = (llvm::Value **)(v66 + 16 * v67);
      }
LABEL_150:
      v85 = v69[1];
      v88 = *(_QWORD *)v85;
      v87 = (char *)v85 + 16;
      v86 = v88;
    }
    else
    {
      v86 = 0;
      v87 = &byte_1C871356D;
    }
    v89 = *((_DWORD *)v64 + 2);
    if ((v89 & 0xFE) == 0x12)
      v89 = *(_DWORD *)(*v64[2] + 8);
    v90 = operator new(0x78uLL);
    v90[13] = v90[13] & 0x38000000 | 1;
    v91 = v90 + 8;
    *(_QWORD *)v90 = 0;
    *((_QWORD *)v90 + 1) = 0;
    *((_QWORD *)v90 + 2) = 0;
    *((_QWORD *)v90 + 3) = v90 + 8;
    WORD4(v157) = 261;
    v154 = v87;
    v155 = v86;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v90 + 8), v63, 0, 7, (uint64_t)v145, (uint64_t)&v154, 0, (llvm::Type *)(v89 >> 8), 0);
    v160 = v91;
    v92 = *(unsigned int *)(a1 + 128);
    v93 = *(_QWORD *)(a1 + 120);
    if (v92 >= *(_DWORD *)(a1 + 132))
    {
      v119 = v92 + 1;
      v120 = v93 + 8 * v92 > (unint64_t)&v160;
      if (v93 > (unint64_t)&v160 || !v120)
      {
        sub_1C63AB080((uint64_t)v147, v119);
        v93 = *v147;
        goto LABEL_154;
      }
      v124 = (char *)&v160 - v93;
      sub_1C63AB080((uint64_t)v147, v119);
      v93 = *v147;
      v94 = (void **)&v124[*v147];
    }
    else
    {
LABEL_154:
      v94 = &v160;
    }
    v95 = *(unsigned int *)(a1 + 128);
    v96 = *v94;
    *v94 = 0;
    *(_QWORD *)(v93 + 8 * v95) = v96;
    *(_DWORD *)(a1 + 128) = v95 + 1;
    sub_1C56EA3B4((uint64_t *)&v160, 0);
    ElementPtr = *(llvm::Constant ***)(*(_QWORD *)(a1 + 120) + 8 * *(unsigned int *)(a1 + 128) - 8);
    goto LABEL_81;
  }
  if (v10 == 84 || v10 == 33)
  {
    if (sub_1C4D99D08((uint64_t)v9))
      goto LABEL_84;
    v79 = *((_QWORD *)v9 - 4);
    if (*(_BYTE *)(v79 + 16) == 24)
      return 0;
    if (*(_BYTE *)(v79 + 16)
      || *((_BYTE *)v9 + 16) != 84
      || *(_QWORD *)(v79 + 24) != *((_QWORD *)v9 + 9)
      || (*(_BYTE *)(v79 + 33) & 0x20) == 0)
    {
      goto LABEL_135;
    }
    if (*(_DWORD *)(*(_QWORD *)(a2 - 56) + 36) == 199)
    {
      v99 = &v8[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF)];
      v100 = v99[12];
      v101 = (llvm::Constant *)((char *)v100 + 24);
      v102 = *((_DWORD *)v100 + 8);
      if (v102 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v101) != v102)
          return 0;
      }
      else if (*(_QWORD *)v101)
      {
        return 0;
      }
      v103 = llvm::Value::stripPointerCasts(*v99);
      v104 = sub_1C5EF8758((_QWORD *)a1, (uint64_t)v103);
      v105 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, (uint64_t)v8[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF) + 4]);
      v106 = (llvm::Constant *)sub_1C5EF8758((_QWORD *)a1, v104);
      v107 = llvm::Evaluator::ComputeLoadResult((llvm::Evaluator *)a1, v106, *(llvm::Constant ****)v8[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF) + 4]);
      if (llvm::Constant::isNullValue(v105))
      {
        if (v107 && (llvm::Constant::isNullValue(v107) & 1) != 0)
          goto LABEL_84;
      }
    }
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(a2 - 24)))
      goto LABEL_84;
    v108 = *(_DWORD *)(*(_QWORD *)(a2 - 56) + 36);
    if (v108 > 243)
    {
      if (v108 == 244 || v108 == 272)
        goto LABEL_84;
    }
    else
    {
      if (v108 == 7)
        goto LABEL_84;
      if (v108 == 164)
      {
        if (*(_QWORD *)(a2 - 16))
          return 0;
        v109 = &v8[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF)];
        v110 = *v109;
        v111 = (llvm::Value *)sub_1C5EF8758((_QWORD *)a1, (uint64_t)v109[4]);
        v112 = llvm::Value::stripPointerCasts(v111);
        if (v112)
        {
          v113 = (uint64_t)v112;
          if (*((_BYTE *)v112 + 16) == 3)
          {
            v114 = *((_DWORD *)v110 + 8);
            if (v114)
            {
              v115 = *((_QWORD *)v112 + 3);
              v116 = (unint64_t **)((char *)v110 + 24);
              if (v114 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)v110 + 24)) == v114)
                  goto LABEL_84;
                if (v114 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)v110 + 24)) <= 0x40)
                  v117 = **v116;
                else
                  v117 = -1;
              }
              else
              {
                v117 = (unint64_t)*v116;
                if (*v116 == (unint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v114))
                  goto LABEL_84;
              }
              sub_1C4768AD0(*(_QWORD *)(a1 + 584), v115);
              v123 = v122;
              if ((_DWORD)v121 == 1)
              if (v117 >= (unint64_t)(v123 + 7) >> 3)
                sub_1C4774094(v146, v113);
            }
          }
        }
        goto LABEL_84;
      }
    }
    v118 = llvm::Value::stripPointerCastsForAliasAnalysis(v9);
    if (v118 == v9)
      return 0;
    result = sub_1C5EF8758((_QWORD *)a1, (uint64_t)v118);
    if (!result)
      return result;
    ElementPtr = (llvm::Constant **)result;
    *a4 = 1;
    if (*(llvm::Constant **)result != *v8)
    {
      ElementPtr = (llvm::Constant **)sub_1C537D3B8((llvm *)0x31, result, *v8, 0);
      if (!ElementPtr)
      {
LABEL_135:
        v154 = &v156;
        v155 = 0x800000000;
        CalleeWithFormalArgs = (llvm::GlobalValue *)llvm::Evaluator::getCalleeWithFormalArgs((_QWORD *)a1, (uint64_t)v9, (uint64_t)&v154);
        if (!CalleeWithFormalArgs
          || (v81 = CalleeWithFormalArgs, *((_BYTE *)CalleeWithFormalArgs + 16) == 3)
          && (Section = llvm::GlobalValue::getSection(CalleeWithFormalArgs), v83 == 12)
          && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            ? (v125 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v125 = 0),
              v125))
        {
LABEL_164:
          v98 = 0;
          ElementPtr = 0;
        }
        else if ((*((_DWORD *)v81 + 8) & 0xFu) - 5 < 4
               || (ElementPtr = 0, v98 = 0, ((1 << (*((_DWORD *)v81 + 8) & 0xF)) & 0x614) == 0))
        {
          v84 = (llvm::Module *)*((_QWORD *)v81 + 5);
          if (v84 && llvm::Module::getSemanticInterposition(v84) && (*((_BYTE *)v81 + 33) & 0x40) == 0)
            goto LABEL_164;
          if (*((_BYTE *)v81 + 16))
          {
            if (*((_BYTE *)v81 + 16) == 3 && (*((_DWORD *)v81 + 5) & 0x7FFFFFF) == 0)
              goto LABEL_158;
LABEL_162:
            if (*(_DWORD *)(*((_QWORD *)v81 + 3) + 8) > 0xFFu)
              goto LABEL_164;
            v160 = 0;
            sub_1C56E9EF0((_QWORD *)a1);
            if ((llvm::Evaluator::EvaluateFunction(a1, v81) & 1) == 0)
              goto LABEL_164;
            sub_1C63AADEC((_QWORD *)a1);
            ElementPtr = (llvm::Constant **)v160;
            if (!v160)
            {
LABEL_161:
              v98 = 1;
              goto LABEL_165;
            }
LABEL_159:
            if (*ElementPtr == *(llvm::Constant **)v9)
              goto LABEL_161;
            ElementPtr = (llvm::Constant **)llvm::ConstantFoldLoadThroughBitcast(ElementPtr, *(llvm::Constant ****)v9, *(llvm::Type **)(a1 + 584), v97);
            if (ElementPtr)
              goto LABEL_161;
          }
          else
          {
            if (*((llvm::GlobalValue **)v81 + 9) != (llvm::GlobalValue *)((char *)v81 + 72)
              || (*((_BYTE *)v81 + 34) & 0x80) != 0)
            {
              goto LABEL_162;
            }
LABEL_158:
            ElementPtr = llvm::ConstantFoldCall((uint64_t)v9, (uint64_t ***)v81, (uint64_t)v154, v155, *(uint64_t **)(a1 + 592));
            if (ElementPtr)
              goto LABEL_159;
          }
          v98 = 0;
        }
LABEL_165:
        if (v154 != &v156)
          free(v154);
        if ((v98 & 1) == 0)
          return 0;
        goto LABEL_81;
      }
    }
    goto LABEL_81;
  }
  if ((v10 - 29) > 0xA)
    return 0;
  if (v10 == 30)
    v128 = v9;
  else
    v128 = 0;
  if (!a2 || v10 != 30)
  {
    if (v10 == 31)
      v129 = (uint64_t)v9;
    else
      v129 = 0;
    if (a2 && v10 == 31)
    {
      v130 = *(_DWORD *)(v129 + 20);
      if ((v130 & 0x40000000) != 0)
        v131 = *(uint64_t **)(v129 - 8);
      else
        v131 = (uint64_t *)(v129 - 32 * (v130 & 0x7FFFFFF));
      v139 = sub_1C5EF8758((_QWORD *)a1, *v131);
      result = 0;
      if (v139 && *(_BYTE *)(v139 + 16) == 16)
      {
        sub_1C4E5D490(v129, v139);
        v141 = *(_DWORD *)(v129 + 20);
        if ((v141 & 0x40000000) != 0)
          v142 = *(_QWORD *)(v129 - 8);
        else
          v142 = v129 - 32 * (v141 & 0x7FFFFFF);
        if (v140 == 4294967294)
          v144 = 1;
        else
          v144 = (2 * v140 + 3);
        v126 = (uint64_t *)(v142 + 32 * v144);
        goto LABEL_223;
      }
      return result;
    }
    if (v10 == 32)
      v132 = v9;
    else
      v132 = 0;
    if (a2 && v10 == 32)
    {
      v133 = *((_DWORD *)v132 + 5);
      if ((v133 & 0x40000000) != 0)
        v134 = (uint64_t *)*((_QWORD *)v132 - 1);
      else
        v134 = (uint64_t *)((char *)v132 - 32 * (v133 & 0x7FFFFFF));
      v143 = (llvm::Value *)sub_1C5EF8758((_QWORD *)a1, *v134);
      v138 = llvm::Value::stripPointerCasts(v143);
      result = 0;
      if (v138 && *((_BYTE *)v138 + 16) == 4)
        goto LABEL_267;
      return result;
    }
    if (v10 == 29)
    {
      v127 = 0;
      goto LABEL_224;
    }
    return 0;
  }
  if ((*((_DWORD *)v128 + 5) & 0x7FFFFFF) == 1)
  {
    v126 = (uint64_t *)((char *)v128 - 32);
    goto LABEL_223;
  }
  v135 = sub_1C5EF8758((_QWORD *)a1, *((_QWORD *)v128 - 12));
  result = 0;
  if (v135 && *(_BYTE *)(v135 + 16) == 16)
  {
    v136 = (_QWORD *)(v135 + 24);
    if (*(_DWORD *)(v135 + 32) >= 0x41u)
      v136 = (_QWORD *)*v136;
    if (*v136)
      v137 = 0;
    else
      v137 = -1;
    v138 = (llvm::Value *)((char *)v128 + 32 * v137);
LABEL_267:
    v126 = (uint64_t *)((char *)v138 - 32);
LABEL_223:
    v127 = *v126;
LABEL_224:
    *a3 = v127;
    return 1;
  }
  return result;
}

uint64_t sub_1C5EF97C0(uint64_t a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3)
{
  llvm::SmallPtrSetImplBase *i;
  const llvm::Value *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  for (i = a2; ; i = a2)
  {
    sub_1C4774094(i, a1);
    if (!(_BYTE)v7)
      return 1;
    v8 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v8 <= 3)
    {
      if ((*(_DWORD *)(a1 + 32) & 0x300) != 0x100 && (*(_DWORD *)(a1 + 32) & 0x1C00) == 0)
      {
        llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a1, v7);
        return v26 == 0;
      }
      return 0;
    }
    v9 = *(_DWORD *)(a1 + 20);
    v10 = v9 & 0x7FFFFFF;
    if (v8 == 4 || (_DWORD)v10 == 0)
      return 1;
    if (v8 - 8 <= 2)
      break;
    result = 0;
    v13 = *(unsigned __int16 *)(a1 + 18);
    if (v13 <= 0x2E)
    {
      if (v13 == 13)
      {
        v22 = (uint64_t *)(a1 - 32 * v10);
        if (*(_BYTE *)(v22[4] + 16) != 16)
          return 0;
        goto LABEL_31;
      }
      if (v13 != 34)
        return result;
      if ((_DWORD)v10 == 1)
      {
        v21 = -1;
LABEL_30:
        v22 = (uint64_t *)(a1 + 32 * v21);
        goto LABEL_31;
      }
      v21 = -(uint64_t)v10;
      v23 = 1;
      while (*(_BYTE *)(*(_QWORD *)(a1 - 32 * v10 + 32 * v23) + 16) == 16)
      {
        if ((_DWORD)v10 == ++v23)
          goto LABEL_30;
      }
      return 0;
    }
    if (v13 - 47 >= 2)
    {
      if (v13 != 49)
        return result;
      v10 = v10;
    }
    else
    {
      sub_1C4768AD0(a3, *(_QWORD *)a1);
      v15 = v14;
      v17 = v16;
      sub_1C4768AD0(a3, **(_QWORD **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
      if (v15 != v19 || v17 != v18)
        return 0;
      v10 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    }
    v22 = (uint64_t *)(a1 - 32 * v10);
LABEL_31:
    a1 = *v22;
  }
  if ((v9 & 0x40000000) != 0)
  {
    v25 = *(uint64_t **)(a1 - 8);
  }
  else
  {
    v10 = v10;
    v25 = (uint64_t *)(a1 - 32 * v10);
  }
  v27 = 32 * v10 - 32;
  do
  {
    v28 = *v25;
    v25 += 4;
    result = sub_1C5EF97C0(v28, a2, a3);
    if ((_DWORD)result)
      v29 = v27 == 0;
    else
      v29 = 1;
    v27 -= 32;
  }
  while (!v29);
  return result;
}

uint64_t llvm::Evaluator::EvaluateFunction(uint64_t a1, llvm::Function *this, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  llvm::Function **v8;
  llvm::Function **v9;
  uint64_t v10;
  llvm::Function **v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  _BYTE v48[256];
  uint64_t v49;

  v9 = *(llvm::Function ***)(a1 + 48);
  v7 = a1 + 48;
  v8 = v9;
  v10 = *(unsigned int *)(v7 + 8);
  v11 = v9;
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    v11 = v8;
    while (*v11 != this)
    {
      ++v11;
      v12 -= 8;
      if (!v12)
      {
        v11 = &v8[v10];
        break;
      }
    }
  }
  if (v10 != v11 - v8)
    return 0;
  if (v10 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, a1 + 64, v10 + 1, 8);
    v8 = *(llvm::Function ***)(a1 + 48);
    v10 = *(unsigned int *)(a1 + 56);
  }
  v8[v10] = this;
  ++*(_DWORD *)(a1 + 56);
  if ((*((_WORD *)this + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this);
    v13 = (_BYTE *)*((_QWORD *)this + 11);
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this);
      v15 = (_BYTE *)*((_QWORD *)this + 11);
      goto LABEL_15;
    }
  }
  else
  {
    v13 = (_BYTE *)*((_QWORD *)this + 11);
  }
  v15 = v13;
LABEL_15:
  v16 = &v15[40 * *((_QWORD *)this + 12)];
  if (v13 != v16)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(*a4 + 8 * v17);
      v44 = v13;
      v19 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
      sub_1C4E58228((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v19 / 0xAA)) + 24 * (v19 % 0xAA)), &v44)[1] = v18;
      v13 += 40;
      ++v17;
    }
    while (v13 != v16);
  }
  v44 = v48;
  v45 = v48;
  v46 = 32;
  v47 = 0;
  v20 = *((_QWORD *)this + 10);
  v21 = v20 - 24;
  if (v20)
    v22 = v20 - 24;
  else
    v22 = 0;
  v23 = *(_QWORD *)(v22 + 48);
  v43 = 0;
  v42 = 0;
  v14 = 0;
  if (llvm::Evaluator::EvaluateBlock(a1, v23, &v43, &v42))
  {
    while (1)
    {
      v24 = v21;
      v21 = v43;
      if (!v43)
        break;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v44, v43);
      if (v25)
      {
        for (i = *(_QWORD *)(v21 + 48); ; i = *(_QWORD *)(i + 8))
        {
          v27 = i - 24;
          v28 = i ? i - 24 : 0;
          if (!i || *(_BYTE *)(v28 + 16) != 83)
            break;
          v29 = *(_DWORD *)(i - 4);
          v30 = v29 & 0x7FFFFFF;
          if ((v29 & 0x7FFFFFF) != 0)
          {
            v31 = 0;
            while (1)
            {
              v32 = v27 - 32 * v30;
              if ((v29 & 0x40000000) != 0)
                v32 = *(_QWORD *)(i - 32);
              if (*(_QWORD *)(v32 + 32 * *(unsigned int *)(i + 36) + 8 * v31) == v24)
                break;
              if (v30 == ++v31)
                goto LABEL_36;
            }
          }
          else
          {
LABEL_36:
            LODWORD(v31) = -1;
          }
          if ((v29 & 0x40000000) != 0)
            v33 = *(_QWORD *)(i - 32);
          else
            v33 = v27 - 32 * v30;
          v34 = sub_1C5EF8758((_QWORD *)a1, *(_QWORD *)(v33 + 32 * v31));
          v49 = i - 24;
          v35 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
          sub_1C4E58228((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v35 / 0xAA)) + 24 * (v35 % 0xAA)), &v49)[1] = v34;
        }
        v43 = 0;
        v42 = 0;
        if ((llvm::Evaluator::EvaluateBlock(a1, i, &v43, &v42) & 1) != 0)
          continue;
      }
      goto LABEL_42;
    }
    v36 = *(_QWORD *)(v24 + 40);
    if (v36 == v24 + 40)
    {
      v37 = 0;
    }
    else
    {
      if (v36)
        v37 = v36 - 24;
      else
        v37 = 0;
      if (*(unsigned __int8 *)(v37 + 16) - 29 >= 0xB)
        v37 = 0;
    }
    v38 = *(_DWORD *)(v37 + 20) & 0x7FFFFFF;
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)(v37 - 32 * v38);
      if (v42 && *(_BYTE *)(*(_QWORD *)v39 + 8) != 7)
      {
LABEL_42:
        v14 = 0;
        goto LABEL_56;
      }
      *a3 = sub_1C5EF8758((_QWORD *)a1, v39);
    }
    --*(_DWORD *)(a1 + 56);
    v14 = 1;
  }
LABEL_56:
  if (v45 != v44)
    free(v45);
  return v14;
}

_QWORD *sub_1C5EF9D30(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63AAFB8((_QWORD *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5EF9DE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 170 * ((v1 - v2) >> 3) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x154)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t sub_1C5EF9E4C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5880;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9628;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8373E8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5EF9F74;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8373E8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeFixIrreduciblePass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8373E8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5EF9F74;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8373E8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5EF9F74(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLowerSwitchLegacyPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Convert irreducible control-flow into natural loops";
  *(_QWORD *)(v3 + 8) = 51;
  *(_QWORD *)(v3 + 16) = "fix-irreducible";
  *(_QWORD *)(v3 + 24) = 15;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5880;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5EFA794;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::FixIrreduciblePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  char v8;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v8 = sub_1C5EFA0E4(*(_QWORD *)(a1 + 80), v6, ResultImpl + 8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v8 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
}

uint64_t sub_1C5EFA0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int i;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[10];

  v78[8] = *MEMORY[0x1E0C80C00];
  v76 = v78;
  v77 = 0x800000000;
  LODWORD(v67) = 0;
  if (a1)
    v5 = a1 - 24;
  else
    v5 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0;
  sub_1C61896F4((int *)&v67, v5);
  sub_1C4DFE698(&v67);
  v6 = 0;
  v7 = (uint64_t *)*((_QWORD *)&v72 + 1);
  v8 = (uint64_t *)v73;
  if (*((_QWORD *)&v72 + 1) != (_QWORD)v73)
  {
    v6 = 0;
    do
    {
      if ((unint64_t)((char *)v8 - (char *)v7) >= 0x10)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v65 = 0;
        v66 = 0;
        v64 = 0;
        if (v7 == v8)
        {
          v27 = 0;
          v26 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v59 = 0;
          v60 = 0;
          v58 = 0;
        }
        else
        {
          do
          {
            v9 = *v7++;
            v55 = v9;
            sub_1C5ACED14((uint64_t)&v61, &v55);
          }
          while (v7 != v8);
          v11 = v64;
          v10 = v65;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v59 = 0;
          v60 = 0;
          v58 = 0;
          if (v65 == v64)
          {
            v27 = 0;
            v26 = 0;
          }
          else
          {
            do
            {
              v54 = 0;
              v12 = *(_QWORD *)(v10 - 8);
              v10 -= 8;
              v54 = v12;
              v13 = *(_QWORD *)(v12 + 8);
              if (v13)
              {
                while (1)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  v15 = *(unsigned __int8 *)(v14 + 16);
                  v16 = v14 && v15 >= 0x1C;
                  if (v16 && v15 - 29 <= 0xA)
                    break;
                  v13 = *(_QWORD *)(v13 + 8);
                  if (!v13)
                    goto LABEL_20;
                }
LABEL_36:
                v25 = *(_QWORD *)(v14 + 40);
                if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a3, v25))
                {
                  if (v63)
                  {
                    v18 = (v63 - 1) & ((v25 >> 4) ^ (v25 >> 9));
                    v19 = *(_QWORD *)(v61 + 8 * v18);
                    if (v25 == v19)
                      goto LABEL_23;
                    v23 = 1;
                    while (v19 != -4096)
                    {
                      v24 = v18 + v23++;
                      v18 = v24 & (v63 - 1);
                      v19 = *(_QWORD *)(v61 + 8 * v18);
                      if (v25 == v19)
                        goto LABEL_23;
                    }
                  }
                  sub_1C5ACED14((uint64_t)&v55, &v54);
                }
                else
                {
LABEL_23:
                  while (1)
                  {
                    v13 = *(_QWORD *)(v13 + 8);
                    if (!v13)
                      break;
                    v14 = *(_QWORD *)(v13 + 24);
                    v20 = *(unsigned __int8 *)(v14 + 16);
                    if (v14)
                      v21 = v20 >= 0x1C;
                    else
                      v21 = 0;
                    if (v21 && v20 - 29 < 0xB)
                      goto LABEL_36;
                  }
                }
              }
LABEL_20:
              ;
            }
            while (v10 != v11);
            v27 = v58;
            v26 = v59;
          }
        }
        if (v26 - v27 != 8)
        {
          sub_1C5EFA7BC(a2, a3, 0, (uint64_t)&v61, &v55);
          v6 = 1;
        }
        sub_1C5408A20(&v55);
        sub_1C5408A20(&v61);
      }
      sub_1C4DFE698(&v67);
      v7 = (uint64_t *)*((_QWORD *)&v72 + 1);
      v8 = (uint64_t *)v73;
    }
    while (*((_QWORD *)&v72 + 1) != (_QWORD)v73);
  }
  sub_1C617D7D4(&v67);
  sub_1C4F5F34C((unsigned int *)&v76, (uint64_t)&v76[v77], *(char **)(a2 + 24), *(char **)(a2 + 32));
  for (i = v77; (_DWORD)v77; i = v77)
  {
    v53 = v6;
    v29 = v76[i - 1];
    LODWORD(v77) = i - 1;
    v30 = **(_QWORD **)(v29 + 32);
    LODWORD(v67) = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0;
    sub_1C63AB150((int *)&v67, v29, v30);
    sub_1C5EFB0E8(&v67);
    v31 = 0;
    v32 = *((_QWORD *)&v72 + 1);
    v33 = v73;
    if (*((_QWORD *)&v72 + 1) != (_QWORD)v73)
    {
      v31 = 0;
      do
      {
        if ((unint64_t)(v33 - v32) >= 0x20)
        {
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v65 = 0;
          v66 = 0;
          v64 = 0;
          if (v32 == v33)
          {
            v51 = 0;
            v50 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v59 = 0;
            v60 = 0;
            v58 = 0;
          }
          else
          {
            do
            {
              v55 = *(_QWORD *)(v32 + 8);
              sub_1C5ACED14((uint64_t)&v61, &v55);
              v32 += 16;
            }
            while (v32 != v33);
            v35 = v64;
            v34 = v65;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v59 = 0;
            v60 = 0;
            v58 = 0;
            if (v65 == v64)
            {
              v51 = 0;
              v50 = 0;
            }
            else
            {
              do
              {
                v54 = 0;
                v36 = *(_QWORD *)(v34 - 8);
                v34 -= 8;
                v54 = v36;
                v37 = *(_QWORD *)(v36 + 8);
                if (v37)
                {
                  while (1)
                  {
                    v38 = *(_QWORD *)(v37 + 24);
                    v39 = *(unsigned __int8 *)(v38 + 16);
                    v40 = v38 && v39 >= 0x1C;
                    if (v40 && v39 - 29 <= 0xA)
                      break;
                    v37 = *(_QWORD *)(v37 + 8);
                    if (!v37)
                      goto LABEL_62;
                  }
LABEL_78:
                  v49 = *(_QWORD *)(v38 + 40);
                  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a3, v49))
                  {
                    if (v63)
                    {
                      v42 = (v63 - 1) & ((v49 >> 4) ^ (v49 >> 9));
                      v43 = *(_QWORD *)(v61 + 8 * v42);
                      if (v49 == v43)
                        goto LABEL_65;
                      v47 = 1;
                      while (v43 != -4096)
                      {
                        v48 = v42 + v47++;
                        v42 = v48 & (v63 - 1);
                        v43 = *(_QWORD *)(v61 + 8 * v42);
                        if (v49 == v43)
                          goto LABEL_65;
                      }
                    }
                    sub_1C5ACED14((uint64_t)&v55, &v54);
                  }
                  else
                  {
LABEL_65:
                    while (1)
                    {
                      v37 = *(_QWORD *)(v37 + 8);
                      if (!v37)
                        break;
                      v38 = *(_QWORD *)(v37 + 24);
                      v44 = *(unsigned __int8 *)(v38 + 16);
                      if (v38)
                        v45 = v44 >= 0x1C;
                      else
                        v45 = 0;
                      if (v45 && v44 - 29 < 0xB)
                        goto LABEL_78;
                    }
                  }
                }
LABEL_62:
                ;
              }
              while (v34 != v35);
              v51 = v58;
              v50 = v59;
            }
          }
          if (v50 - v51 != 8)
          {
            sub_1C5EFA7BC(a2, a3, (_QWORD *)v29, (uint64_t)&v61, &v55);
            v31 = 1;
          }
          sub_1C5408A20(&v55);
          sub_1C5408A20(&v61);
        }
        sub_1C5EFB0E8(&v67);
        v32 = *((_QWORD *)&v72 + 1);
        v33 = v73;
      }
      while (*((_QWORD *)&v72 + 1) != (_QWORD)v73);
    }
    sub_1C617D7D4(&v67);
    v6 = v53 | v31;
    sub_1C499C3FC((unsigned int *)&v76, *(char **)(v29 + 8), *(char **)(v29 + 16));
  }
  if (v76 != v78)
    free(v76);
  return v6 & 1;
}

void sub_1C5EFA634(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5EFA658(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7658);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&unk_1EF8F7658);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C5EFA6F8(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::LoopInfoWrapperPass::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::DominatorTreeWrapperPass::ID);
  v9 = v6 + 32;
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  return sub_1C5EFA0E4(*(_QWORD *)(a2 + 80), v9, v10);
}

uint64_t sub_1C5EFA794()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5EF9E4C(v0);
}

_QWORD *sub_1C5EFA7BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v16;
  BOOL v17;
  unint64_t v19;
  void **v20;
  llvm::SmallPtrSetImplBase *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void ***v48;
  void ***v49;
  _QWORD *i;
  char **v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  void **v56;
  void **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void **v85;
  unint64_t v86;
  void ***v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  void ***v93;
  void **v94;
  int v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  void **v99;
  void ***v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  void ***v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  void ***v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  unint64_t v123;
  uint64_t *v124;
  _QWORD v125[2];
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132[2];
  _QWORD v133[36];
  char v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  int v138;
  _BYTE v139[64];
  _QWORD v140[3];
  __int16 v141;
  void *v142;
  uint64_t v143;
  _BYTE v144[64];
  void **v145;
  uint64_t v146;
  _QWORD v147[10];

  v147[8] = *MEMORY[0x1E0C80C00];
  v125[0] = 0;
  v125[1] = 0;
  v126 = 0;
  v128 = 0;
  v129 = 0;
  v127 = 0;
  v9 = a5[3];
  v10 = a5[4];
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    if (v11)
    {
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 24);
        v13 = *(unsigned __int8 *)(v12 + 16);
        v14 = v12 && v13 >= 0x1C;
        if (v14 && v13 - 29 <= 0xA)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_13;
      }
LABEL_14:
      v132[0] = *(void **)(v12 + 40);
      sub_1C5ACED14((uint64_t)v125, v132);
      while (1)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          break;
        v12 = *(_QWORD *)(v11 + 24);
        v16 = *(unsigned __int8 *)(v12 + 16);
        if (v12)
          v17 = v16 >= 0x1C;
        else
          v17 = 0;
        if (v17 && v16 - 29 < 0xB)
          goto LABEL_14;
      }
    }
LABEL_13:
    v9 += 8;
  }
  v142 = v144;
  v143 = 0x800000000;
  v132[0] = v133;
  v132[1] = (void *)0x1000000000;
  v133[32] = 0;
  v133[33] = 0;
  v133[34] = a2;
  v133[35] = 0;
  v134 = 0;
  v135 = v139;
  v136 = v139;
  v137 = 8;
  v138 = 0;
  memset(v140, 0, sizeof(v140));
  v141 = 0;
  llvm::CreateControlFlowHub((uint64_t)v132, (uint64_t)&v142, (uint64_t)v125, a5, "irr", 3);
  v19 = sub_1C484358C(a1 + 48, 152, 3);
  v20 = (void **)v19;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_QWORD *)(v19 + 56) = v19 + 88;
  v21 = (llvm::SmallPtrSetImplBase *)(v19 + 56);
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_QWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 64) = v19 + 88;
  *(_DWORD *)(v19 + 72) = 8;
  v22 = a3;
  if (!a3)
  {
    v24 = *(unint64_t **)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v24 < v23)
    {
      *v24 = v19;
      v25 = v24 + 1;
LABEL_52:
      *(_QWORD *)(a1 + 32) = v25;
      goto LABEL_62;
    }
    v29 = *(_QWORD **)(a1 + 24);
    v30 = v24 - v29;
    v31 = v30 + 1;
    if (!((unint64_t)(v30 + 1) >> 61))
    {
      v32 = v23 - (_QWORD)v29;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (!v33)
      {
        v34 = 0;
LABEL_47:
        v41 = &v34[8 * v30];
        *(_QWORD *)v41 = v20;
        v25 = v41 + 8;
        if (v24 != v29)
        {
          do
          {
            v42 = *--v24;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          while (v24 != v29);
          v24 = *(unint64_t **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v41;
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a1 + 40) = &v34[8 * v33];
        if (v24)
          operator delete(v24);
        goto LABEL_52;
      }
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        goto LABEL_47;
      }
LABEL_189:
      sub_1C4764EE4();
    }
LABEL_188:
    abort();
  }
  *(_QWORD *)v19 = a3;
  v27 = (unint64_t *)a3[2];
  v26 = a3[3];
  if ((unint64_t)v27 >= v26)
  {
    v35 = (_QWORD *)a3[1];
    v36 = v27 - v35;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      goto LABEL_188;
    v38 = v26 - (_QWORD)v35;
    if (v38 >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 61)
        goto LABEL_189;
      v40 = (char *)operator new(8 * v39);
    }
    else
    {
      v40 = 0;
    }
    v43 = &v40[8 * v36];
    *(_QWORD *)v43 = v20;
    v28 = v43 + 8;
    if (v27 == v35)
    {
      v22 = a3;
    }
    else
    {
      do
      {
        v44 = *--v27;
        *((_QWORD *)v43 - 1) = v44;
        v43 -= 8;
      }
      while (v27 != v35);
      v22 = a3;
      v27 = (unint64_t *)a3[1];
    }
    v22[1] = v43;
    v22[2] = v28;
    v22[3] = &v40[8 * v39];
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v27 = v19;
    v28 = v27 + 1;
  }
  v22[2] = v28;
LABEL_62:
  v124 = a5;
  if ((_DWORD)v143)
  {
    v45 = (uint64_t *)v142;
    v46 = 8 * v143;
    do
    {
      v47 = *v45++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v20, v47, a1);
      v46 -= 8;
    }
    while (v46);
  }
  v48 = *(void ****)(a4 + 24);
  v49 = *(void ****)(a4 + 32);
  for (i = a3; v48 != v49; ++v48)
  {
    v85 = *v48;
    v87 = (void ***)v20[5];
    v86 = (unint64_t)v20[6];
    if ((unint64_t)v87 >= v86)
    {
      v105 = v20[4];
      v106 = v87 - (void ***)v105;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 61)
        goto LABEL_188;
      v108 = v86 - (_QWORD)v105;
      if (v108 >> 2 > v107)
        v107 = v108 >> 2;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
        v107 = 0x1FFFFFFFFFFFFFFFLL;
      v123 = v107;
      if (v107)
      {
        if (v107 >> 61)
          goto LABEL_189;
        v109 = (char *)operator new(8 * v107);
      }
      else
      {
        v109 = 0;
      }
      v110 = (void ***)&v109[8 * v106];
      *v110 = v85;
      v88 = v110 + 1;
      if (v87 != v105)
      {
        do
        {
          v111 = *--v87;
          *--v110 = v111;
        }
        while (v87 != v105);
        v87 = (void ***)v20[4];
      }
      i = a3;
      v20[4] = v110;
      v20[5] = v88;
      v20[6] = &v109[8 * v123];
      if (v87)
        operator delete(v87);
    }
    else
    {
      *v87 = v85;
      v88 = v87 + 1;
    }
    v20[5] = v88;
    sub_1C4774094(v21, (uint64_t)v85);
    v89 = *(_DWORD *)(a1 + 16);
    if (v89)
    {
      v90 = *(_QWORD *)a1;
      v91 = v89 - 1;
      v92 = v91 & ((v85 >> 4) ^ (v85 >> 9));
      v93 = (void ***)(*(_QWORD *)a1 + 16 * v92);
      v94 = *v93;
      if (v85 == *v93)
      {
        v96 = v91 & ((v85 >> 4) ^ (v85 >> 9));
LABEL_135:
        v98 = *(_QWORD **)(v90 + 16 * v96 + 8);
      }
      else
      {
        v95 = 1;
        LODWORD(v96) = v91 & ((v85 >> 4) ^ (v85 >> 9));
        while (v94 != (void **)-4096)
        {
          v97 = v96 + v95++;
          v96 = v97 & v91;
          v94 = *(void ***)(v90 + 16 * v96);
          if (v85 == v94)
            goto LABEL_135;
        }
        v98 = 0;
      }
      if (v98 != i)
        continue;
      v145 = v85;
      v99 = *v93;
      if (*v93 == v85)
        goto LABEL_151;
      v100 = 0;
      v101 = 1;
      while (v99 != (void **)-4096)
      {
        if (v100)
          v102 = 0;
        else
          v102 = v99 == (void **)-8192;
        if (v102)
          v100 = v93;
        v103 = v92 + v101++;
        v92 = v103 & v91;
        v93 = (void ***)(v90 + 16 * v92);
        v99 = *v93;
        if (*v93 == v85)
          goto LABEL_151;
      }
      if (v100)
        v104 = v100;
      else
        v104 = v93;
    }
    else
    {
      if (i)
        continue;
      v104 = 0;
      v145 = v85;
    }
    v93 = (void ***)sub_1C4EB6AAC(a1, (uint64_t)&v145, (uint64_t *)&v145, v104);
    *v93 = v145;
    v93[1] = 0;
LABEL_151:
    v93[1] = v20;
  }
  if (i)
    v51 = (char **)(i + 1);
  else
    v51 = (char **)(a1 + 24);
  v53 = *v51;
  v52 = v51[1];
  v54 = v124;
  if (*v51 == v52)
  {
LABEL_70:
    v52 = v53;
  }
  else
  {
    do
    {
      while (2)
      {
        if (v20 != *(void ***)v53)
        {
          v145 = **(void ****)(*(_QWORD *)v53 + 32);
          v131 = 0;
          if (sub_1C4E36498((uint64_t *)a4, &v145, &v131))
          {
            v112 = v131;
            v113 = *(_QWORD *)a4;
            v114 = *(unsigned int *)(a4 + 16);
          }
          else
          {
            v113 = *(_QWORD *)a4;
            v114 = *(unsigned int *)(a4 + 16);
            v112 = *(_QWORD *)a4 + 8 * v114;
          }
          if (v112 != v113 + 8 * v114)
          {
            v115 = v52 - 8;
            while (1)
            {
              if (v115 == v53)
                goto LABEL_70;
              v52 = v115;
              if (v20 == *(void ***)v115)
                break;
              v145 = **(void ****)(*(_QWORD *)v115 + 32);
              v131 = 0;
              if (sub_1C4E36498((uint64_t *)a4, &v145, &v131))
              {
                v116 = v131;
                v117 = *(_QWORD *)a4;
                v118 = *(unsigned int *)(a4 + 16);
              }
              else
              {
                v117 = *(_QWORD *)a4;
                v118 = *(unsigned int *)(a4 + 16);
                v116 = *(_QWORD *)a4 + 8 * v118;
              }
              v119 = v117 + 8 * v118;
              v115 = v52 - 8;
              if (v116 == v119)
              {
                v120 = *(void ***)v52;
                goto LABEL_186;
              }
            }
            v120 = v20;
LABEL_186:
            v121 = *(_QWORD *)v53;
            *(_QWORD *)v53 = v120;
            v53 += 8;
            *(_QWORD *)v52 = v121;
            if (v52 != v53)
              continue;
            goto LABEL_71;
          }
        }
        break;
      }
      v53 += 8;
    }
    while (v53 != v52);
  }
LABEL_71:
  v55 = v51[1];
  v145 = (void **)v147;
  v146 = 0x800000000;
  sub_1C6177054((unsigned int *)&v145, v52, v55);
  if (v52 != v51[1])
    v51[1] = v52;
  v56 = v145;
  if ((_DWORD)v146)
  {
    v57 = &v145[v146];
    do
    {
      v58 = *v56;
      v59 = **((_QWORD **)*v56 + 4);
      v130 = 0;
      v131 = v59;
      if (sub_1C4E36498(v54, &v131, &v130))
      {
        v60 = (uint64_t *)v58[4];
        v61 = (uint64_t *)v58[5];
        if (v61 != v60)
        {
          while (1)
          {
            v62 = *v60;
            v131 = *v60;
            v63 = *(_DWORD *)(a1 + 16);
            if (!v63)
              break;
            v64 = v63 - 1;
            v65 = v64 & ((v62 >> 4) ^ (v62 >> 9));
            v66 = (_QWORD *)(*(_QWORD *)a1 + 16 * v65);
            v67 = *v66;
            if (*v66 != v62)
            {
              v68 = 0;
              v69 = 1;
              while (v67 != -4096)
              {
                if (v68)
                  v70 = 0;
                else
                  v70 = v67 == -8192;
                if (v70)
                  v68 = v66;
                v71 = v65 + v69++;
                v65 = v71 & v64;
                v66 = (_QWORD *)(*(_QWORD *)a1 + 16 * v65);
                v67 = *v66;
                if (*v66 == v62)
                  goto LABEL_92;
              }
              if (v68)
                v72 = v68;
              else
                v72 = v66;
              goto LABEL_91;
            }
LABEL_92:
            v66[1] = v20;
            if (++v60 == v61)
              goto LABEL_97;
          }
          v72 = 0;
LABEL_91:
          v66 = sub_1C4EB6AAC(a1, (uint64_t)&v131, &v131, v72);
          *v66 = v131;
          v66[1] = 0;
          goto LABEL_92;
        }
LABEL_97:
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase((uint64_t)v58);
      }
      else
      {
        *v58 = v20;
        v74 = v20[2];
        v73 = (unint64_t)v20[3];
        if ((unint64_t)v74 >= v73)
        {
          v76 = v20[1];
          v77 = v74 - v76;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            goto LABEL_188;
          v79 = v73 - (_QWORD)v76;
          if (v79 >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 >> 61)
              goto LABEL_189;
            v81 = (char *)operator new(8 * v80);
          }
          else
          {
            v81 = 0;
          }
          v82 = &v81[8 * v77];
          *(_QWORD *)v82 = v58;
          v75 = v82 + 8;
          if (v74 != v76)
          {
            do
            {
              v83 = *--v74;
              *((_QWORD *)v82 - 1) = v83;
              v82 -= 8;
            }
            while (v74 != v76);
            v74 = v20[1];
          }
          v20[1] = v82;
          v20[2] = v75;
          v20[3] = &v81[8 * v80];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v74 = v58;
          v75 = v74 + 1;
        }
        v20[2] = v75;
        v54 = v124;
      }
      ++v56;
    }
    while (v56 != v57);
    v56 = v145;
  }
  if (v56 != v147)
    free(v56);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v132);
  v145 = (void **)v140;
  sub_1C50B10F0(&v145);
  if (v136 != v135)
    free(v136);
  if (v132[0] != v133)
    free(v132[0]);
  if (v142 != v144)
    free(v142);
  return sub_1C5408A20(v125);
}

_QWORD *sub_1C5EFB0E8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  __int128 v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v20;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = result;
    v2 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1C63AB420((uint64_t)v1);
      v4 = v1[10];
      v3 = v1[11];
      v20 = *(_OWORD *)(v3 - 80);
      v5 = *(_DWORD *)(v3 - 8);
      v1[11] = v3 - 80;
      if (v4 != v3 - 80 && *(_DWORD *)(v3 - 88) > v5)
        *(_DWORD *)(v3 - 88) = v5;
      result = sub_1C6328054(v2, (uint64_t *)&v20);
      if (v5 == *((_DWORD *)result + 4))
        break;
      if (v1[10] == v1[11])
        return result;
    }
    v6 = (uint64_t *)v1[8];
    v7 = v20;
    do
    {
      v8 = (_OWORD *)(v1[5] - 16);
      v9 = v1[9];
      if ((unint64_t)v6 >= v9)
      {
        v11 = (uint64_t *)v1[7];
        v12 = ((char *)v6 - (char *)v11) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          abort();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 60)
            sub_1C4764EE4();
          v16 = (char *)operator new(16 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[16 * v12];
        *(_OWORD *)v17 = *v8;
        v18 = v17;
        if (v6 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v6 - 1);
            v18 -= 16;
            v6 -= 2;
          }
          while (v6 != v11);
          v6 = (uint64_t *)v1[7];
        }
        v10 = (uint64_t *)(v17 + 16);
        v1[7] = v18;
        v1[8] = v17 + 16;
        v1[9] = &v16[16 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_OWORD *)v6 = *v8;
        v10 = v6 + 2;
      }
      v1[8] = v10;
      v1[5] -= 16;
      result = sub_1C6328054(v2, v10 - 2);
      *((_DWORD *)result + 4) = -1;
      v6 = (uint64_t *)v1[8];
    }
    while (*(v6 - 2) != (_QWORD)v7 || *(v6 - 1) != *((_QWORD *)&v7 + 1));
  }
  return result;
}

_OWORD *sub_1C5EFB2B8(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 4) >= 0x199999999999999)
    v8 = 0x333333333333333;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x333333333333333)
      sub_1C4764EE4();
    v9 = (char *)operator new(80 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[80 * v4];
  v11 = a2[3];
  *((_OWORD *)v10 + 2) = a2[2];
  *((_OWORD *)v10 + 3) = v11;
  *((_OWORD *)v10 + 4) = a2[4];
  v12 = a2[1];
  *(_OWORD *)v10 = *a2;
  *((_OWORD *)v10 + 1) = v12;
  v13 = v10 + 80;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v10 - 5) = *((_OWORD *)v2 - 5);
      v14 = *((_OWORD *)v2 - 4);
      v15 = *((_OWORD *)v2 - 3);
      v16 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v10 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v10 - 1) = v16;
      *((_OWORD *)v10 - 4) = v14;
      *((_OWORD *)v10 - 3) = v15;
      v10 -= 80;
      v2 -= 80;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = &v9[80 * v8];
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t llvm::FlattenCFG(llvm *this, llvm::BasicBlock *a2, llvm::AAResults *a3, llvm::BasicBlock **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  llvm::BasicBlock *v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t SinglePredecessor;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  llvm *v36;
  uint64_t v37;
  _BOOL4 v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  llvm::Instruction *v49;
  uint64_t Successor;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  llvm::Instruction *v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  llvm::Instruction *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *IfCondition;
  llvm::BasicBlock **v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  llvm::BasicBlock *v75;
  llvm::BasicBlock *v76;
  llvm::BasicBlock *v77;
  _BOOL4 v78;
  uint64_t v79;
  int v80;
  llvm::BasicBlock *v81;
  unsigned __int8 *v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  llvm::Instruction *v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  __int16 v93;
  __int16 v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char hasFnAttrOnCalledFunction;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  BOOL v115;
  int v116;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  unsigned int k;
  uint64_t v135;
  uint64_t m;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  llvm::BasicBlock *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD **v154;
  uint64_t v155;
  llvm::BasicBlock *v156;
  char *v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD **v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD **v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Value *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  llvm::User *v186;
  llvm::Value *v187;
  unsigned __int8 *v188;
  llvm::Value *v189;
  uint64_t j;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD **v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  llvm::ValueSymbolTable *v201;
  llvm::BasicBlock *v202;
  unsigned __int8 *v203;
  uint64_t v204;
  int v205;
  _BOOL4 v206;
  llvm::BasicBlock *v207;
  unsigned int v208;
  llvm::BasicBlock *v209;
  unsigned __int8 *v210[4];
  __int16 v211;
  llvm::BasicBlock *v212;
  __int128 v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  uint64_t v217;
  int v218;
  _WORD v219[64];
  llvm::BasicBlock *v220;
  llvm::BasicBlock *v221;
  void *v222[2];
  _BYTE v223[32];
  __int128 v224;
  uint64_t v225;
  void **v226;
  _QWORD *v227;
  uint64_t v228;
  int v229;
  __int16 v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  _QWORD v235[3];

  v235[1] = *MEMORY[0x1E0C80C00];
  v209 = a2;
  v5 = **(_QWORD **)this;
  v222[0] = v223;
  v222[1] = (void *)0x200000000;
  v225 = v5;
  v226 = &v234;
  v227 = v235;
  v228 = 0;
  v229 = 0;
  v230 = 512;
  v231 = 7;
  v232 = 0;
  v233 = 0;
  v234 = &unk_1E8167888;
  v235[0] = &unk_1E8167A08;
  *(_QWORD *)&v224 = this;
  *((_QWORD *)&v224 + 1) = (char *)this + 40;
  v6 = *((_QWORD *)this + 6);
  if (v6 && *(_BYTE *)(v6 - 8) == 83)
    goto LABEL_156;
  for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 8))
  {
    v8 = *(_QWORD *)(i + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8)
      v10 = v9 >= 0x1C;
    else
      v10 = 0;
    if (v10 && v9 - 29 < 0xB)
      break;
  }
  v215 = (unsigned __int8 *)v219;
  v216 = (unsigned __int8 *)v219;
  v217 = 16;
  v218 = 0;
  sub_1C4EE414C((llvm::SmallPtrSetImplBase *)&v215, i, 0);
  if (v216 == v215)
    v12 = (uint64_t *)((char *)&v217 + 4);
  else
    v12 = &v217;
  v13 = *(unsigned int *)v12;
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = v216;
    while (*(_QWORD *)v15 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v15 += 8;
      v14 -= 8;
      if (!v14)
        goto LABEL_151;
    }
  }
  else
  {
    v15 = v216;
  }
  v16 = &v216[8 * v13];
  if (v15 == v16)
    goto LABEL_151;
  v17 = *(_QWORD *)v15;
  v18 = *(_QWORD *)(*(_QWORD *)v15 + 40);
  if (v18 == *(_QWORD *)v15 + 40)
    goto LABEL_151;
  v19 = 0;
  v207 = 0;
  v20 = 0;
  v205 = -1;
LABEL_25:
  v21 = 0;
  if (v18)
    v22 = v18 - 24;
  else
    v22 = 0;
  v23 = *(unsigned __int8 *)(v22 + 16) - 40;
  if (v23 >= 0xFFFFFFF5)
    v24 = v22;
  else
    v24 = 0;
  if (!v18)
    goto LABEL_152;
  if (*(_BYTE *)(v24 + 16) != 30 || v23 < 0xFFFFFFF5)
    goto LABEL_152;
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v17);
  if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 1)
  {
    v21 = 0;
    if (v19 || !SinglePredecessor)
      goto LABEL_152;
    v27 = (unsigned __int8 *)sub_1C477672C((uint64_t)&v215, SinglePredecessor);
    if (v216 == v215)
      v28 = (uint64_t *)((char *)&v217 + 4);
    else
      v28 = &v217;
    if (v27 == &v216[8 * *(unsigned int *)v28])
      goto LABEL_151;
    v19 = v17;
    if ((*(_WORD *)(v17 + 18) & 0x7FFF) != 0)
      goto LABEL_151;
  }
  else
  {
    v29 = *(_QWORD *)(v24 - 96);
    if (!v29)
      goto LABEL_151;
    v30 = *(_QWORD *)(v29 + 8);
    if (!v30 || *(_QWORD *)(v30 + 8))
      goto LABEL_151;
    if (!SinglePredecessor
      || ((v31 = (unsigned __int8 *)sub_1C477672C((uint64_t)&v215, SinglePredecessor), v216 != v215)
        ? (v32 = &v217)
        : (v32 = (uint64_t *)((char *)&v217 + 4)),
          v31 == &v216[8 * *(unsigned int *)v32]))
    {
      v35 = (llvm::BasicBlock *)v17;
      if (v207)
        goto LABEL_151;
    }
    else
    {
      if ((*(_WORD *)(v17 + 18) & 0x7FFF) != 0)
        goto LABEL_151;
      v33 = *(_QWORD *)(v17 + 48);
      while (v33 != v24 + 24)
      {
        if (v33)
          v34 = v33 - 24;
        else
          v34 = 0;
        if (*(_BYTE *)(v34 + 16) == 83)
          goto LABEL_151;
        v33 = *(_QWORD *)(v33 + 8);
        v21 = 0;
        if ((llvm::isSafeToSpeculativelyExecute(v34, 0, 0, 0) & 1) == 0)
          goto LABEL_152;
      }
      v35 = v207;
    }
    v36 = *(llvm **)(v24 - 32);
    if (v36 == this)
      v37 = *(_QWORD *)(v24 - 64);
    else
      v37 = *(_QWORD *)(v24 - 32);
    v38 = v205;
    if (v205 == -1)
    {
      v38 = v36 != this;
    }
    else if (v205 != (v36 != this))
    {
      goto LABEL_151;
    }
    v39 = (unsigned __int8 *)sub_1C477672C((uint64_t)&v215, v37);
    if (v216 == v215)
      v40 = (uint64_t *)((char *)&v217 + 4);
    else
      v40 = &v217;
    v205 = v38;
    if (v39 == &v216[8 * *(unsigned int *)v40])
    {
      v207 = v35;
      v20 = (llvm::BasicBlock *)v17;
    }
    else
    {
      v41 = *(_QWORD *)(v37 + 40);
      if (v41 != v37 + 40)
      {
        v42 = v41 - 24;
        if (!v41)
          v42 = 0;
        v43 = *(unsigned __int8 *)(v42 + 16) - 40;
        if (v43 < 0xFFFFFFF5)
          v42 = 0;
        if (v41)
        {
          v44 = *(_BYTE *)(v42 + 16) == 30 && v43 >= 0xFFFFFFF5;
          if (v44 && (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) == 1)
            v20 = (llvm::BasicBlock *)v17;
        }
      }
      v207 = v35;
    }
  }
  v45 = (unint64_t *)(v15 + 8);
  while (v45 != (unint64_t *)v16)
  {
    v46 = *v45++;
    v17 = v46;
    if (v46 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v21 = 0;
      v18 = *(_QWORD *)(v17 + 40);
      v15 = (unsigned __int8 *)(v45 - 1);
      if (v18 == v17 + 40)
        goto LABEL_152;
      goto LABEL_25;
    }
  }
  v21 = 0;
  if (!v207 || !v20 || v207 == v20)
    goto LABEL_152;
  v47 = (_QWORD *)*((_QWORD *)v20 + 5);
  if (v47 == (_QWORD *)((char *)v20 + 40))
  {
    v49 = 0;
  }
  else
  {
    if (v47)
      v48 = (unsigned __int8 *)(v47 - 3);
    else
      v48 = 0;
    if (v48[16] - 29 >= 0xB)
      v49 = 0;
    else
      v49 = (llvm::Instruction *)v48;
  }
  Successor = llvm::Instruction::getSuccessor(v49, 0);
  v51 = llvm::Instruction::getSuccessor(v49, 1u);
  v52 = v51;
  v53 = *(_QWORD *)(Successor + 40);
  if (v53 == Successor + 40)
  {
    v54 = 0;
  }
  else
  {
    v54 = v53 - 24;
    if (!v53)
      v54 = 0;
    if (*(unsigned __int8 *)(v54 + 16) - 29 >= 0xB)
      v54 = 0;
  }
  if (*(_BYTE *)(v54 + 16) == 30)
    v55 = v54;
  else
    v55 = 0;
  v57 = (_QWORD *)(v51 + 40);
  v56 = *(_QWORD *)(v51 + 40);
  if (v56 == v51 + 40)
  {
    v58 = 0;
  }
  else
  {
    if (v56)
      v58 = v56 - 24;
    else
      v58 = 0;
    if (*(unsigned __int8 *)(v58 + 16) - 29 >= 0xB)
      v58 = 0;
  }
  if (*(_BYTE *)(v58 + 16) == 30)
    v59 = v58;
  else
    v59 = 0;
  if (!v55
    || (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) != 1
    || (v53 == Successor + 40
      ? (v61 = 0)
      : (v53 ? (v60 = (unsigned __int8 *)(v53 - 24)) : (v60 = 0),
         v60[16] - 29 >= 0xB ? (v61 = 0) : (v61 = (llvm::Instruction *)v60)),
        llvm::Instruction::getSuccessor(v61, 0) != v52))
  {
    if (v59 && (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) == 1)
    {
      v62 = (_QWORD *)*v57;
      if ((_QWORD *)*v57 == v57)
      {
        v64 = 0;
      }
      else
      {
        if (v62)
          v63 = (unsigned __int8 *)(v62 - 3);
        else
          v63 = 0;
        if (v63[16] - 29 >= 0xB)
          v64 = 0;
        else
          v64 = (llvm::Instruction *)v63;
      }
      v21 = 0;
      if (llvm::Instruction::getSuccessor(v64, 0) != Successor)
        goto LABEL_152;
      v21 = 0;
      while (1)
      {
        v86 = *((_QWORD *)v20 + 5);
        if (v86)
          v87 = (unsigned __int8 *)(v86 - 24);
        else
          v87 = 0;
        if (v87[16] - 29 >= 0xB)
          v88 = 0;
        else
          v88 = (llvm::Instruction *)v87;
        v89 = *((_QWORD *)v88 - 12);
        v90 = *(unsigned __int8 *)(v89 + 16);
        if (v89)
          v91 = v90 >= 0x1C;
        else
          v91 = 0;
        if (!v91 || v90 - 83 < 0xFFFFFFFE)
          goto LABEL_211;
        v93 = *(_WORD *)(v89 + 18);
        if ((v93 & 0x3F) == 0x21)
          break;
        if ((v93 & 0x3F) == 6)
        {
          v94 = 9;
LABEL_210:
          *(_WORD *)(v89 + 18) = v94 | v93 & 0xFFC0;
          llvm::BranchInst::swapSuccessors(v88);
          v21 = 1;
        }
LABEL_211:
        v20 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v20);
        if (v20 == v207)
          goto LABEL_152;
      }
      v94 = 32;
      goto LABEL_210;
    }
LABEL_151:
    v21 = 0;
    goto LABEL_152;
  }
  if ((*(_DWORD *)(v55 + 20) & 0x7FFFFFF) != 1)
    goto LABEL_151;
  v65 = *(_QWORD *)(v52 + 48);
  if (v65)
  {
    if (*(_BYTE *)(v65 - 8) == 83)
      goto LABEL_151;
  }
  v174 = (_QWORD *)*((_QWORD *)v207 + 5);
  v175 = (_QWORD *)((char *)v207 + 40);
  if (v174 == (_QWORD *)((char *)v207 + 40))
  {
    v177 = 0;
  }
  else
  {
    if (v174)
      v176 = (uint64_t)(v174 - 3);
    else
      v176 = 0;
    if (*(unsigned __int8 *)(v176 + 16) - 29 >= 0xB)
      v177 = 0;
    else
      v177 = v176;
  }
  v212 = (llvm::BasicBlock *)v222;
  v213 = v224;
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v222, &v214);
  v178 = *(llvm::Value **)(v177 - 96);
  do
  {
    v179 = *(_QWORD *)(v177 - 32 * (1 - v205) - 32);
    if (*v175)
      v180 = *v175 - 24;
    else
      v180 = 0;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v175, (uint64_t ***)v180);
    v181 = *(_QWORD *)(v180 + 24);
    v182 = *(_QWORD **)(v180 + 32);
    *v182 = v181;
    *(_QWORD *)(v181 + 8) = v182;
    *(_QWORD *)(v180 + 24) = 0;
    *(_QWORD *)(v180 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v180);
    v183 = v179 + 40;
    sub_1C5EBBDF4(v175, v175, (_QWORD *)(v179 + 40));
    v184 = 0;
    v177 = *v175 - 24;
    if (*v175)
      v185 = *v175 - 24;
    else
      v185 = 0;
    if (*(unsigned __int8 *)(v185 + 16) - 29 >= 0xB)
      v186 = 0;
    else
      v186 = (llvm::User *)v185;
    v187 = (llvm::Value *)*((_QWORD *)v186 - 12);
    *(_QWORD *)&v224 = *((_QWORD *)v186 + 5);
    *((_QWORD *)&v224 + 1) = (char *)v186 + 24;
    v188 = (unsigned __int8 *)*((_QWORD *)v186 + 6);
    v210[0] = v188;
    if (v188)
    {
      llvm::MetadataTracking::track((uint64_t)v210, v188, 2);
      v184 = v210[0];
    }
    sub_1C4774EF4((uint64_t)v222, 0, (uint64_t)v184);
    if (v210[0])
      llvm::MetadataTracking::untrack((uint64_t)v210, v210[0]);
    v211 = 257;
    if (v205)
      v189 = (llvm::Value *)sub_1C4D89BCC((uint64_t)v222, v178, (uint64_t)v187, (uint64_t)v210);
    else
      v189 = (llvm::Value *)sub_1C4773594((uint64_t)v222, v178, (uint64_t)v187, (uint64_t)v210);
    v178 = v189;
    llvm::User::replaceUsesOfWith(v186, v187, v189);
    for (j = *(_QWORD *)(v179 + 48); j != v183; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v191 = j - 24;
      else
        v191 = 0;
      v192 = *(_DWORD *)(v191 + 20);
      if ((v192 & 0x40000000) != 0)
      {
        v194 = *(_QWORD *)(v191 - 8);
        v193 = v192 & 0x7FFFFFF;
        if (!v193)
          continue;
      }
      else
      {
        v193 = v192 & 0x7FFFFFF;
        v194 = v191 - 32 * v193;
        if (!v193)
          continue;
      }
      v195 = 32 * v193;
      v196 = (_QWORD **)(v194 + 16);
      do
      {
        if (*(v196 - 2))
        {
          **v196 = *(v196 - 1);
          v197 = (uint64_t)*(v196 - 1);
          if (v197)
            *(_QWORD *)(v197 + 16) = *v196;
        }
        *(v196 - 2) = 0;
        v196 += 4;
        v195 -= 32;
      }
      while (v195);
    }
    v198 = (char *)operator new(0x40uLL);
    *((_DWORD *)v198 + 5) &= 0x38000000u;
    *(_QWORD *)v198 = ***(_QWORD ***)v179 + 1576;
    *((_QWORD *)v198 + 1) = 0;
    v198[16] = 35;
    *(_OWORD *)(v198 + 44) = 0u;
    *(_OWORD *)(v198 + 33) = 0u;
    *(_OWORD *)(v198 + 17) = 0u;
    *((_QWORD *)v198 + 5) = v179;
    *(_WORD *)(v179 + 18) &= ~0x8000u;
    if ((v198[23] & 0x10) != 0)
    {
      v200 = *(_QWORD *)(v179 + 56);
      if (v200)
      {
        v201 = *(llvm::ValueSymbolTable **)(v200 + 104);
        if (v201)
          llvm::ValueSymbolTable::reinsertValue(v201, (llvm::Value *)v198);
      }
    }
    v199 = *(_QWORD *)(v179 + 40);
    *((_QWORD *)v198 + 3) = v199;
    *((_QWORD *)v198 + 4) = v183;
    *(_QWORD *)(v199 + 8) = v198 + 24;
    *(_QWORD *)(v179 + 40) = v198 + 24;
  }
  while ((llvm::BasicBlock *)v179 != v20);
  v202 = v212;
  if ((_QWORD)v213)
  {
    sub_1C4D8AE2C((uint64_t)v212, v213, *((uint64_t *)&v213 + 1));
    v202 = v212;
  }
  else
  {
    *((_QWORD *)v212 + 6) = 0;
    *((_QWORD *)v202 + 7) = 0;
  }
  v210[0] = v214;
  if (v214)
  {
    llvm::MetadataTracking::track((uint64_t)v210, v214, 2);
    v203 = v210[0];
  }
  else
  {
    v203 = 0;
  }
  sub_1C4774EF4((uint64_t)v202, 0, (uint64_t)v203);
  if (v210[0])
    llvm::MetadataTracking::untrack((uint64_t)v210, v210[0]);
  if (v214)
    llvm::MetadataTracking::untrack((uint64_t)&v214, v214);
  v21 = 1;
LABEL_152:
  if (v216 != v215)
    free(v216);
  if ((v21 & 1) != 0)
  {
LABEL_155:
    v66 = 1;
    goto LABEL_161;
  }
LABEL_156:
  v210[0] = 0;
  v212 = 0;
  IfCondition = llvm::GetIfCondition(this, (llvm::BasicBlock *)v210, &v212, a4);
  if (!IfCondition)
    goto LABEL_160;
  v66 = 0;
  v69 = *(IfCondition - 12);
  if (!v69 || *(unsigned __int8 *)(v69 + 16) < 0x1Cu)
    goto LABEL_161;
  v70 = *(_QWORD *)(v69 + 40);
  if ((*(_WORD *)(v70 + 18) & 0x7FFF) != 0)
    goto LABEL_160;
  v220 = 0;
  v221 = 0;
  v72 = llvm::GetIfCondition((llvm *)v70, (llvm::BasicBlock *)&v221, &v220, v68);
  if (!v72)
    goto LABEL_160;
  v73 = *(v72 - 12);
  if (!v73 || *(unsigned __int8 *)(v73 + 16) < 0x1Cu)
    goto LABEL_160;
  v75 = *(llvm::BasicBlock **)(v73 + 40);
  if (v220 == v75)
  {
    v81 = v212;
    v82 = v210[0];
    v83 = v212 != (llvm::BasicBlock *)v70;
    if (v212 != (llvm::BasicBlock *)v70)
    {
      if (v210[0] != (unsigned __int8 *)v70)
        goto LABEL_160;
      v210[0] = (unsigned __int8 *)v212;
      v212 = (llvm::BasicBlock *)v70;
      v82 = (unsigned __int8 *)v81;
    }
    if ((sub_1C5EFC51C((uint64_t *)&v209, (uint64_t)v221, (uint64_t)v82, v70) & 1) == 0)
      goto LABEL_160;
    v206 = v83;
    v80 = 29;
LABEL_182:
    v208 = v80;
    v84 = *(_QWORD *)(v70 + 40);
    if (v84 == v70 + 40)
    {
      v85 = 0;
    }
    else
    {
      if (v84)
        v85 = v84 - 24;
      else
        v85 = 0;
      if (*(unsigned __int8 *)(v85 + 16) - 29 >= 0xB)
        v85 = 0;
    }
    v95 = *(_QWORD *)(v70 + 48);
    v96 = v95 == 0;
    if (v95)
      v97 = v95 - 24;
    else
      v97 = 0;
    v98 = v97 + 24;
    if (v96)
      v99 = 0;
    else
      v99 = v98;
    if (v85)
      v100 = v85 + 24;
    else
      v100 = 0;
    for (; v99 != v100; v79 = v108)
    {
      v66 = 0;
      if (v99)
        v101 = v99 - 24;
      else
        v101 = 0;
      v102 = *(unsigned __int8 *)(v101 + 16);
      if (v102 > 0x3E)
      {
        switch(*(_BYTE *)(v101 + 16))
        {
          case 'P':
          case 'S':
          case 'X':
            goto LABEL_161;
          case 'Q':
          case 'R':
          case 'U':
          case 'V':
          case 'W':
            goto LABEL_246;
          case 'T':
            goto LABEL_229;
          default:
            if (v102 - 63 >= 3)
              goto LABEL_246;
            break;
        }
        goto LABEL_161;
      }
      if (*(unsigned __int8 *)(v101 + 16) <= 0x3Cu)
      {
        if (*(unsigned __int8 *)(v101 + 16) <= 0x3Bu)
        {
          switch(v102)
          {
            case '!':
              goto LABEL_229;
            case '%':
              goto LABEL_161;
            case '\'':
LABEL_229:
              v103 = *(_QWORD *)(v101 + 64);
              if (!v103 || (*(_BYTE *)(v103 + 17) & 0x30) == 0)
              {
                v104 = v79;
                v105 = *(_DWORD *)(v101 + 20);
                if (v105 < 0)
                {
                  v109 = v101 - 32 * (v105 & 0x7FFFFFF);
                  v112 = *(_QWORD *)(v109 - 8);
                  v110 = v109 - 8;
                  v111 = v112;
                  if (v112)
                  {
                    v113 = -v111;
                    do
                    {
                      v114 = *(_DWORD *)(*(_QWORD *)(v110 + v113) + 8);
                      v115 = v114 > 7;
                      v116 = (1 << v114) & 0x83;
                      if (v115 || v116 == 0)
                        goto LABEL_160;
                      v113 += 16;
                    }
                    while (v113);
                  }
                }
                hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v101, 45);
                v79 = v104;
                if ((hasFnAttrOnCalledFunction & 1) == 0)
                {
                  v107 = llvm::CallBase::hasFnAttrOnCalledFunction(v101, 44);
                  v79 = v104;
                  if (!v107)
                    goto LABEL_160;
                }
              }
              break;
          }
        }
        else if ((*(_WORD *)(v101 + 18) & 0x301) != 0)
        {
          goto LABEL_160;
        }
      }
      else if (v102 == 61)
      {
        goto LABEL_161;
      }
LABEL_246:
      v108 = v79;
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v101) & 1) != 0
        || !llvm::Instruction::willReturn((llvm::Instruction *)v101)
        || !llvm::isSafeToSpeculativelyExecute(v101, 0, 0, 0))
      {
        goto LABEL_160;
      }
      v99 = *(_QWORD *)(v99 + 8);
    }
    v119 = (uint64_t *)((char *)v75 + 40);
    v118 = *((_QWORD *)v75 + 5);
    if (v118)
      v120 = v118 - 24;
    else
      v120 = 0;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v75 + 40, (uint64_t ***)v120);
    v121 = *(_QWORD *)(v120 + 24);
    v122 = *(_QWORD **)(v120 + 32);
    *v122 = v121;
    *(_QWORD *)(v121 + 8) = v122;
    *(_QWORD *)(v120 + 24) = 0;
    *(_QWORD *)(v120 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v120);
    sub_1C5EBBDF4((_QWORD *)v75 + 5, (_QWORD *)v75 + 5, (_QWORD *)(v70 + 40));
    v123 = 0;
    v124 = *v119;
    v125 = *v119 - 24;
    if (!*v119)
      v125 = 0;
    v126 = *(unsigned __int8 *)(v125 + 16) - 40;
    if (v126 >= 0xFFFFFFF5)
      v127 = v125;
    else
      v127 = 0;
    v128 = *((_QWORD *)&v224 + 1);
    v204 = v224;
    *(_QWORD *)&v224 = *(_QWORD *)(v127 + 40);
    *((_QWORD *)&v224 + 1) = v127 + 24;
    v129 = *(unsigned __int8 **)(v127 + 48);
    v215 = v129;
    if (v129)
    {
      llvm::MetadataTracking::track((uint64_t)&v215, v129, 2);
      v123 = v215;
    }
    sub_1C4774EF4((uint64_t)v222, 0, (uint64_t)v123);
    if (v215)
      llvm::MetadataTracking::untrack((uint64_t)&v215, v215);
    if (v206)
    {
      if (*(unsigned __int8 *)(v69 + 16) - 83 >= 0xFFFFFFFE
        && (v130 = *(_QWORD *)(v69 + 8)) != 0
        && !*(_QWORD *)(v130 + 8))
      {
        *(_WORD *)(v69 + 18) = word_1C8674A52[*(_WORD *)(v69 + 18) & 0x3FLL] | *(_WORD *)(v69 + 18) & 0xFFC0;
      }
      else
      {
        v219[0] = 257;
        v69 = sub_1C506EAA0((uint64_t)v222, v69, (uint64_t)&v215);
      }
      llvm::BranchInst::swapSuccessors((llvm::Instruction *)v127);
    }
    v219[0] = 257;
    v131 = sub_1C4773860((uint64_t)v222, v208, (_QWORD *)v73, v69, (uint64_t)&v215, 0);
    llvm::User::replaceUsesOfWith((llvm::User *)v127, (llvm::Value *)v69, (llvm::Value *)v131);
    sub_1C4D8AE2C((uint64_t)v222, v204, v128);
    if (v124 && v126 >= 0xFFFFFFF5)
    {
      v132 = *(unsigned __int8 *)(v127 + 16);
      if (v132 != 30)
        __asm { BR              X10 }
      if ((*(_DWORD *)(v127 + 20) & 0x7FFFFFF) == 3)
        v133 = 2;
      else
        v133 = 1;
      for (k = 0; k != v133; ++k)
      {
        v135 = llvm::Instruction::getSuccessor((llvm::Instruction *)v127, k);
        if (*(_QWORD *)(v135 + 40) != v135 + 40)
        {
          for (m = *(_QWORD *)(v135 + 48); ; m = *(_QWORD *)(v137 + 32))
          {
            v137 = m - 24;
            v138 = m ? m - 24 : 0;
            if (!m || *(_BYTE *)(v138 + 16) != 83)
              break;
            v139 = *(_DWORD *)(m - 4);
            v140 = v139 & 0x7FFFFFF;
            if ((v139 & 0x7FFFFFF) != 0)
            {
              v141 = 0;
              v142 = 8 * v140;
              do
              {
                v143 = *(_DWORD *)(v137 + 20);
                if ((v143 & 0x40000000) != 0)
                  v144 = *(_QWORD *)(v137 - 8);
                else
                  v144 = v137 - 32 * (v143 & 0x7FFFFFF);
                v145 = *(unsigned int *)(v137 + 60);
                if (*(_QWORD *)(v144 + 32 * v145 + v141) == v70)
                  *(_QWORD *)(v144 + 32 * v145 + v141) = v75;
                v141 += 8;
              }
              while (v142 != v141);
            }
          }
        }
      }
    }
    v146 = v221;
    if (v221 == v75)
      goto LABEL_318;
    v147 = (_QWORD *)((char *)v221 + 40);
    v148 = (_QWORD *)*((_QWORD *)v221 + 6);
    if (v148 == (_QWORD *)((char *)v221 + 40))
      goto LABEL_317;
    while (1)
    {
      if (v148)
        v149 = v148 - 3;
      else
        v149 = 0;
      v150 = *((_DWORD *)v149 + 5);
      if ((v150 & 0x40000000) != 0)
      {
        v152 = (_QWORD *)*(v149 - 1);
        v151 = v150 & 0x7FFFFFF;
        if (v151)
        {
LABEL_308:
          v153 = 32 * v151;
          v154 = (_QWORD **)(v152 + 2);
          do
          {
            if (*(v154 - 2))
            {
              **v154 = *(v154 - 1);
              v155 = (uint64_t)*(v154 - 1);
              if (v155)
                *(_QWORD *)(v155 + 16) = *v154;
            }
            *(v154 - 2) = 0;
            v154 += 4;
            v153 -= 32;
          }
          while (v153);
        }
      }
      else
      {
        v151 = v150 & 0x7FFFFFF;
        v152 = &v149[-4 * v151];
        if (v151)
          goto LABEL_308;
      }
      v148 = (_QWORD *)v148[1];
      if (v148 == v147)
      {
        v146 = v221;
LABEL_317:
        llvm::BasicBlock::eraseFromParent(v146);
LABEL_318:
        v156 = v220;
        if (v220 == v75)
          goto LABEL_335;
        v157 = (char *)v220 + 40;
        v158 = (char *)*((_QWORD *)v220 + 6);
        if (v158 == (char *)v220 + 40)
          goto LABEL_334;
        while (2)
        {
          if (v158)
            v159 = v158 - 24;
          else
            v159 = 0;
          v160 = *((_DWORD *)v159 + 5);
          if ((v160 & 0x40000000) != 0)
          {
            v162 = (char *)*((_QWORD *)v159 - 1);
            v161 = v160 & 0x7FFFFFF;
            if (v161)
              goto LABEL_325;
          }
          else
          {
            v161 = v160 & 0x7FFFFFF;
            v162 = &v159[-32 * v161];
            if (v161)
            {
LABEL_325:
              v163 = 32 * v161;
              v164 = (_QWORD **)(v162 + 16);
              do
              {
                if (*(v164 - 2))
                {
                  **v164 = *(v164 - 1);
                  v165 = (uint64_t)*(v164 - 1);
                  if (v165)
                    *(_QWORD *)(v165 + 16) = *v164;
                }
                *(v164 - 2) = 0;
                v164 += 4;
                v163 -= 32;
              }
              while (v163);
            }
          }
          v158 = (char *)*((_QWORD *)v158 + 1);
          if (v158 == v157)
          {
            v156 = v220;
LABEL_334:
            llvm::BasicBlock::eraseFromParent(v156);
LABEL_335:
            v166 = *(_QWORD *)(v70 + 48);
            while (2)
            {
              if (v166 == v70 + 40)
              {
                llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v70);
                goto LABEL_155;
              }
              if (v166)
                v167 = v166 - 24;
              else
                v167 = 0;
              v168 = *(_DWORD *)(v167 + 20);
              if ((v168 & 0x40000000) != 0)
              {
                v170 = *(_QWORD *)(v167 - 8);
                v169 = v168 & 0x7FFFFFF;
                if (v169)
                  goto LABEL_342;
              }
              else
              {
                v169 = v168 & 0x7FFFFFF;
                v170 = v167 - 32 * v169;
                if (v169)
                {
LABEL_342:
                  v171 = 32 * v169;
                  v172 = (_QWORD **)(v170 + 16);
                  do
                  {
                    if (*(v172 - 2))
                    {
                      **v172 = *(v172 - 1);
                      v173 = (uint64_t)*(v172 - 1);
                      if (v173)
                        *(_QWORD *)(v173 + 16) = *v172;
                    }
                    *(v172 - 2) = 0;
                    v172 += 4;
                    v171 -= 32;
                  }
                  while (v171);
                }
              }
              v166 = *(_QWORD *)(v166 + 8);
              continue;
            }
          }
          continue;
        }
      }
    }
  }
  if (v221 != v75)
    goto LABEL_160;
  v76 = (llvm::BasicBlock *)v210[0];
  v77 = v212;
  v78 = v210[0] != (unsigned __int8 *)v70;
  if (v210[0] != (unsigned __int8 *)v70)
  {
    if (v212 != (llvm::BasicBlock *)v70)
      goto LABEL_160;
    v210[0] = (unsigned __int8 *)v70;
    v212 = v76;
    v77 = v76;
  }
  if (sub_1C5EFC51C((uint64_t *)&v209, (uint64_t)v220, (uint64_t)v77, v70))
  {
    v206 = v78;
    v80 = 28;
    goto LABEL_182;
  }
LABEL_160:
  v66 = 0;
LABEL_161:
  if (v222[0] != v223)
    free(v222[0]);
  return v66;
}

void sub_1C5EFC4EC()
{
  JUMPOUT(0x1C5EFC4A8);
}

void sub_1C5EFC4FC()
{
  JUMPOUT(0x1C5EFC4A8);
}

void sub_1C5EFC508()
{
  JUMPOUT(0x1C5EFBED0);
}

void sub_1C5EFC510()
{
  JUMPOUT(0x1C5EFC4A8);
}

uint64_t sub_1C5EFC51C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;

  v5 = *(_QWORD *)(a4 + 40);
  if (v5 == a4 + 40)
  {
    v6 = 0;
  }
  else
  {
    if (v5)
      v6 = v5 - 24;
    else
      v6 = 0;
    if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
      v6 = 0;
  }
  v7 = *(_QWORD *)(a4 + 48);
  v8 = v7 - 24;
  if (!v7)
    v8 = 0;
  v11 = *(_QWORD *)(a2 + 40);
  v9 = a2 + 40;
  v10 = v11;
  if (v11 == v9)
  {
    v12 = 0;
  }
  else
  {
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
      v12 = 0;
  }
  v13 = *(_QWORD *)(v9 + 8);
  v14 = v12 + 24;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_QWORD *)(a3 + 48);
  if (v15 == a3 + 40)
  {
    v18 = 0;
  }
  else
  {
    if (v15)
      v17 = v15 - 24;
    else
      v17 = 0;
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      v18 = 0;
    else
      v18 = v17;
  }
  if (v13 != v14)
  {
    v19 = v8 + 24;
    if (v7)
      v20 = v19;
    else
      v20 = 0;
    if (v6)
      v21 = v6 + 24;
    else
      v21 = 0;
    do
    {
      if (v13)
        v22 = v13 - 24;
      else
        v22 = 0;
      if (v16)
        v23 = (unsigned __int8 *)(v16 - 24);
      else
        v23 = 0;
      result = llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v22, (const llvm::Instruction *)v23);
      if (!(_DWORD)result)
        return result;
      if ((v23[17] ^ *(unsigned __int8 *)(v22 + 17)) > 1)
        return 0;
      v25 = *(unsigned __int8 *)(v22 + 16) - 33;
      if (v25 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v22 + 16) - 33)) & 0x808001D0000010) != 0)
          goto LABEL_67;
        if (((1 << (*(_BYTE *)(v22 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v29 = *(_QWORD *)(v22 + 64);
          if (!v29 || (*(_BYTE *)(v29 + 17) & 0x30) == 0)
          {
            v30 = *(_DWORD *)(v22 + 20);
            if (v30 < 0)
            {
              v61 = v22 - 32 * (v30 & 0x7FFFFFF);
              v64 = *(_QWORD *)(v61 - 8);
              v62 = v61 - 8;
              v63 = v64;
              if (v64)
              {
                v65 = -v63;
                while (1)
                {
                  v66 = *(_DWORD *)(*(_QWORD *)(v62 + v65) + 8);
                  v42 = v66 > 7;
                  v67 = (1 << v66) & 0x83;
                  if (v42 || v67 == 0)
                    break;
                  v65 += 16;
                  if (!v65)
                    goto LABEL_63;
                }
LABEL_67:
                result = 0;
                if (!v13 || *(_BYTE *)(v22 + 16) != 61)
                  return result;
                if ((*(_WORD *)(v22 + 18) & 1) != 0)
                  return 0;
                goto LABEL_70;
              }
            }
LABEL_63:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44))
            {
              goto LABEL_67;
            }
          }
        }
        else if (v25 == 27 && (*(_WORD *)(v22 + 18) & 0x301) != 0)
        {
          goto LABEL_67;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v22) & 1) != 0
        || (llvm::Instruction::willReturn((llvm::Instruction *)v22) & 1) == 0)
      {
        goto LABEL_67;
      }
      v26 = *(unsigned __int8 *)(v22 + 16);
      v27 = (v26 - 33);
      if (v27 > 0x37)
        goto LABEL_72;
      if (((1 << (v26 - 33)) & 0x808001C8000010) != 0)
        return 0;
      if (((1 << (v26 - 33)) & 0x8000000000041) != 0)
      {
        v28 = *(_QWORD *)(v22 + 64);
        if (!v28 || (*(_BYTE *)(v28 + 20) & 4) == 0 && (*(_BYTE *)(v28 + 17) & 0x10) == 0)
        {
          LODWORD(v73[0]) = 7;
          if (sub_1C53E4BBC(v22, (__int32 *)v73, 1uLL))
          {
            v35 = *(_QWORD *)(v22 - 32);
            if (!v35
              || *(_BYTE *)(v35 + 16)
              || *(_QWORD *)(v35 + 24) != *(_QWORD *)(v22 + 72)
              || *(_DWORD *)(v35 + 36) != 7)
            {
              return 0;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 66) & 1) == 0)
          {
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44);
            if (!(_DWORD)result)
              return result;
          }
        }
        goto LABEL_71;
      }
      if (v27 != 28)
        goto LABEL_72;
LABEL_70:
      if ((*(_WORD *)(v22 + 18) & 0x301) != 0)
        return 0;
LABEL_71:
      v26 = *(unsigned __int8 *)(v22 + 16);
LABEL_72:
      v69 = v20;
      v31 = (v26 - 33);
      if (v31 <= 0x37)
      {
        if (((1 << v31) & 0x8000000000041) != 0)
        {
          v32 = *(_QWORD *)(v22 + 64);
          if (v32 && (*(_BYTE *)(v32 + 17) & 0x30) != 0)
            goto LABEL_76;
          v33 = *(_DWORD *)(v22 + 20);
          if (v33 < 0)
          {
            v36 = v22 - 32 * (v33 & 0x7FFFFFF);
            v39 = *(_QWORD *)(v36 - 8);
            v37 = v36 - 8;
            v38 = v39;
            if (v39)
            {
              v40 = -v38;
              while (1)
              {
                v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
                v42 = v41 > 7;
                v43 = (1 << v41) & 0x83;
                if (v42 || v43 == 0)
                  break;
                v40 += 16;
                if (!v40)
                  goto LABEL_81;
              }
LABEL_97:
              v34 = 1;
LABEL_98:
              if (!v34 || v20 == v21)
                goto LABEL_76;
              while (2)
              {
                if (v20)
                  v45 = v20 - 24;
                else
                  v45 = 0;
                v46 = *(unsigned __int8 *)(v45 + 16);
                v47 = (v46 - 33);
                if (v47 <= 0x37)
                {
                  if (((1 << (v46 - 33)) & 0x8000000000041) != 0)
                  {
                    v49 = *(_QWORD *)(v45 + 64);
                    if (!v49 || (*(_BYTE *)(v49 + 20) & 4) == 0 && (*(_BYTE *)(v49 + 17) & 0x10) == 0)
                    {
                      LODWORD(v73[0]) = 7;
                      if (sub_1C53E4BBC(v45, (__int32 *)v73, 1uLL))
                      {
                        v52 = *(_QWORD *)(v45 - 32);
                        if (!v52
                          || *(_BYTE *)(v52 + 16)
                          || *(_QWORD *)(v52 + 24) != *(_QWORD *)(v45 + 72)
                          || *(_DWORD *)(v52 + 36) != 7)
                        {
                          goto LABEL_128;
                        }
                      }
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v45, 66) & 1) == 0
                        && !llvm::CallBase::hasFnAttrOnCalledFunction(v45, 44))
                      {
                        goto LABEL_128;
                      }
                    }
                  }
                  else
                  {
                    if (((1 << (v46 - 33)) & 0x808001C8000010) != 0)
                      goto LABEL_128;
                    if (v47 != 28)
                      goto LABEL_107;
                    if ((*(_WORD *)(v45 + 18) & 0x301) != 0)
                      goto LABEL_128;
                  }
                  v46 = *(unsigned __int8 *)(v45 + 16);
                }
LABEL_107:
                v48 = (v46 - 33);
                if (v48 <= 0x37)
                {
                  if (((1 << v48) & 0x8000000000041) != 0)
                  {
                    v50 = *(_QWORD *)(v45 + 64);
                    if (!v50 || (*(_BYTE *)(v50 + 17) & 0x30) == 0)
                    {
                      v51 = *(_DWORD *)(v45 + 20);
                      if (v51 < 0)
                      {
                        v53 = v45 - 32 * (v51 & 0x7FFFFFF);
                        v56 = *(_QWORD *)(v53 - 8);
                        v54 = v53 - 8;
                        v55 = v56;
                        if (v56)
                        {
                          v57 = -v55;
                          do
                          {
                            v58 = *(_DWORD *)(*(_QWORD *)(v54 + v57) + 8);
                            v42 = v58 > 7;
                            v59 = (1 << v58) & 0x83;
                            if (v42 || v59 == 0)
                              goto LABEL_128;
                            v57 += 16;
                          }
                          while (v57);
                        }
                      }
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v45, 45) & 1) == 0
                        && (llvm::CallBase::hasFnAttrOnCalledFunction(v45, 44) & 1) == 0)
                      {
LABEL_128:
                        result = *a1;
                        if (!*a1)
                          return result;
                        v73[0] = v22;
                        v73[1] = -1;
                        v74 = 0u;
                        v75 = 0u;
                        v70[0] = v45;
                        v70[1] = -1;
                        v71 = 0u;
                        v72 = 0u;
                        if (llvm::AAResults::alias(result, (uint64_t)v73, (uint64_t)v70))
                          return 0;
                      }
                    }
                  }
                  else if (v48 == 27)
                  {
                    if ((*(_WORD *)(v45 + 18) & 0x301) != 0)
                      goto LABEL_128;
                  }
                  else if (((1 << v48) & 0x808001D0000010) != 0)
                  {
                    goto LABEL_128;
                  }
                }
                v20 = *(_QWORD *)(v20 + 8);
                if (v20 == v21)
                  goto LABEL_76;
                continue;
              }
            }
          }
LABEL_81:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 45) & 1) == 0)
          {
            v34 = llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44) ^ 1;
            goto LABEL_98;
          }
        }
        else
        {
          if (v31 == 27)
          {
            v34 = (*(_WORD *)(v22 + 18) & 0x301) != 0;
            goto LABEL_98;
          }
          if (((1 << v31) & 0x808001D0000010) != 0)
            goto LABEL_97;
        }
      }
LABEL_76:
      v13 = *(_QWORD *)(v13 + 8);
      v16 = *(_QWORD *)(v16 + 8);
      v20 = v69;
    }
    while (v13 != v14);
  }
  return v16 == v18 + 24;
}

uint64_t llvm::FunctionComparator::cmpNumbers(llvm::FunctionComparator *this, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
    return 0xFFFFFFFFLL;
  else
    return a2 > a3;
}

uint64_t llvm::FunctionComparator::cmpAligns(uint64_t a1, char a2, char a3)
{
  if (1 << a2 < (unint64_t)(1 << a3))
    return 0xFFFFFFFFLL;
  else
    return 1 << a2 > (unint64_t)(1 << a3);
}

uint64_t llvm::FunctionComparator::cmpOrderings(uint64_t a1, int a2, int a3)
{
  if (a2 < a3)
    return 0xFFFFFFFFLL;
  else
    return a2 > a3;
}

uint64_t llvm::FunctionComparator::cmpMem(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t result;
  int v6;

  if (a3 < a5)
    result = 0xFFFFFFFFLL;
  else
    result = a3 > a5;
  if (a3 == a5)
  {
    if (a3 && (v6 = memcmp(a2, a4, a3)) != 0)
      return (v6 >> 31) | 1u;
    else
      return 0;
  }
  return result;
}

uint64_t llvm::FunctionComparator::cmpAttrs(llvm::FunctionComparator *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  llvm::Type *v29;
  llvm::Type *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  llvm::FunctionComparator *v34;
  uint64_t v35;
  uint64_t v36;

  if (a2)
  {
    v6 = *(_DWORD *)(a2 + 8);
    if (!a3)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if (!a3)
    {
LABEL_3:
      v7 = 0;
      goto LABEL_6;
    }
  }
  v7 = *(_DWORD *)(a3 + 8);
LABEL_6:
  v8 = v6 > v7;
  if (v6 < v7)
    v8 = -1;
  if (v6 == v7)
    result = 0;
  else
    result = v8;
  if (a2 && v6 == v7)
  {
    v10 = *(_DWORD *)(a2 + 8);
    if (!v10)
      return 0;
    v33 = v10 - 2;
    v35 = a3 + 40;
    v36 = a2 + 40;
    v11 = -1;
    v34 = a1;
    do
    {
      v12 = v11 + 1;
      if ((v11 + 1) >= *(_DWORD *)(a2 + 8))
      {
        v13 = 0;
        if (!a3)
          goto LABEL_74;
      }
      else
      {
        v13 = *(_QWORD *)(v36 + 8 * v12);
        if (!a3)
          goto LABEL_74;
      }
      if (v12 < *(_DWORD *)(a3 + 8))
      {
        v14 = *(_QWORD *)(v35 + 8 * v12);
        goto LABEL_20;
      }
LABEL_74:
      v14 = 0;
LABEL_20:
      if (v13)
        v15 = v13 + 48;
      else
        v15 = 0;
      if (v13)
        v16 = v13 + 48 + 8 * *(unsigned int *)(v13 + 8);
      else
        v16 = 0;
      if (v14)
        v17 = v14 + 48;
      else
        v17 = 0;
      if (v14)
        v18 = v14 + 48 + 8 * *(unsigned int *)(v14 + 8);
      else
        v18 = 0;
      v19 = v17 != v18;
      v20 = v15 != v16;
      if (v15 != v16 && v17 != v18)
      {
        v21 = v17 + 8;
        v22 = v15 + 8;
        while (1)
        {
          v23 = *(_QWORD *)(v22 - 8);
          v24 = *(_QWORD *)(v21 - 8);
          if (!v23)
          {
            if (v24)
              result = 0xFFFFFFFFLL;
            else
              result = 1;
            if (v24)
              return result;
            goto LABEL_57;
          }
          v25 = *(_BYTE *)(v23 + 8) != 3 || v24 == 0;
          if (v25)
            break;
          if (*(_BYTE *)(v24 + 8) != 3)
            goto LABEL_55;
          v26 = *(_DWORD *)(v23 + 12);
          v27 = *(_DWORD *)(v24 + 12);
          v28 = v26 >= v27;
          if (v26 != v27)
          {
            v32 = v26 > v27;
            if (v28)
              return v32;
            else
              return 0xFFFFFFFFLL;
          }
          v29 = *(llvm::Type **)(v23 + 16);
          v30 = *(llvm::Type **)(v24 + 16);
          if (v29)
            v31 = v30 == 0;
          else
            v31 = 1;
          if (v31)
          {
            if (v29 < v30)
              result = 0xFFFFFFFFLL;
            else
              result = v29 > v30;
            if ((_DWORD)result)
              return result;
          }
          else
          {
            result = llvm::FunctionComparator::cmpTypes(v34, v29, v30);
            if ((_DWORD)result)
              return result;
          }
LABEL_57:
          v19 = v21 != v18;
          v20 = v22 != v16;
          if (v22 != v16)
          {
            v22 += 8;
            v25 = v21 == v18;
            v21 += 8;
            if (!v25)
              continue;
          }
          goto LABEL_68;
        }
        if (!v24)
          return 1;
LABEL_55:
        if ((llvm::AttributeImpl::operator<(*(_QWORD *)(v22 - 8), *(_QWORD *)(v21 - 8)) & 1) != 0)
          return 0xFFFFFFFFLL;
        if ((llvm::AttributeImpl::operator<(v24, v23) & 1) != 0)
          return 1;
        goto LABEL_57;
      }
LABEL_68:
      if (v20 || v19)
      {
        if (v20)
          return 1;
        else
          return 0xFFFFFFFFLL;
      }
      result = 0;
      v25 = v11++ == v33;
    }
    while (!v25);
  }
  return result;
}

uint64_t llvm::FunctionComparator::cmpTypes(llvm::FunctionComparator *this, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::Type *v5;
  llvm::Type *v6;
  llvm::DataLayout *v7;
  llvm::Type *v8;
  llvm::Type *v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v3 = a3;
  v4 = a2;
  if (*((_BYTE *)a2 + 8) == 15)
    v5 = a2;
  else
    v5 = 0;
  if (*((_BYTE *)a3 + 8) == 15)
    v6 = a3;
  else
    v6 = 0;
  v7 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)this + 40) + 272);
  if (v5 && *((_DWORD *)v5 + 2) <= 0xFFu)
  {
    llvm::DataLayout::getIntPtrType(v7, a2);
    v4 = v8;
  }
  if (v6 && *((_DWORD *)v6 + 2) <= 0xFFu)
  {
    llvm::DataLayout::getIntPtrType(v7, v3);
    v3 = v9;
  }
  if (v4 == v3)
    return 0;
  v10 = *((_DWORD *)v4 + 2);
  v11 = *((_DWORD *)v3 + 2);
  if (v10 < v11)
    result = 0xFFFFFFFFLL;
  else
    result = v10 > v11;
  if (!(_DWORD)result)
    __asm { BR              X13 }
  return result;
}

uint64_t llvm::FunctionComparator::cmpOperandBundlesSchema(llvm::FunctionComparator *this, const llvm::CallBase *a2, const llvm::CallBase *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t *v19;
  uint64_t v20;
  uint64_t v21;
  size_t *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  int v26;

  v3 = *((_DWORD *)a2 + 5);
  if (v3 < 0)
    v4 = *((_QWORD *)a2 - 4 * (v3 & 0x7FFFFFF) - 1) >> 4;
  else
    LODWORD(v4) = 0;
  v5 = *((_DWORD *)a3 + 5);
  if (v5 < 0)
    v6 = *((_QWORD *)a3 - 4 * (v5 & 0x7FFFFFF) - 1) >> 4;
  else
    LODWORD(v6) = 0;
  v7 = v4 >= v6;
  v8 = (_DWORD)v4 == (_DWORD)v6;
  v9 = v4 > v6;
  if (!v7)
    v9 = -1;
  if (v8)
    result = 0;
  else
    result = v9;
  if (v8 && v3 < 0)
  {
    v11 = v3 & 0x7FFFFFF;
    v12 = *((_QWORD *)a2 - 4 * v11 - 1);
    if ((v12 & 0xFFFFFFFF0) != 0)
    {
      v13 = 0;
      v14 = (v12 >> 4);
      v15 = (char *)a2 - v12 + -32 * v11;
      v16 = (char *)a3 - *((_QWORD *)a3 - 4 * (v5 & 0x7FFFFFF) - 1) + -32 * (v5 & 0x7FFFFFF);
      while (1)
      {
        v17 = *(unsigned int *)&v15[v13];
        v18 = *(unsigned int *)&v15[v13 + 4];
        v19 = *(size_t **)&v15[v13 - 8];
        v20 = *(unsigned int *)&v16[v13];
        v21 = *(unsigned int *)&v16[v13 + 4];
        v22 = *(size_t **)&v16[v13 - 8];
        v23 = *v19;
        v24 = *v22;
        if (*v22 >= *v19)
          v25 = *v19;
        else
          v25 = *v22;
        if (v25)
        {
          v26 = memcmp(v19 + 2, v22 + 2, v25);
          if (v26)
            return (v26 >> 31) | 1u;
        }
        if (v23 != v24)
          break;
        if (v18 - v17 < (unint64_t)(v21 - v20))
          result = 0xFFFFFFFFLL;
        else
          result = v18 - v17 > (unint64_t)(v21 - v20);
        if (!(_DWORD)result)
        {
          v13 += 16;
          if (--v14)
            continue;
        }
        return result;
      }
      if (v23 < v24)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::FunctionComparator::cmpConstants(llvm::FunctionComparator *this, llvm::Type **a2, llvm::Type **a3)
{
  llvm::Type *v6;
  llvm::Type *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v12;
  int v14;
  unsigned int PrimitiveSizeInBits;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  const void *RawDataValues;
  size_t v24;
  size_t v25;
  const void *v26;
  size_t v27;
  llvm::Type *v28;
  llvm::Type *v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  _BOOL4 v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;

  v6 = *a2;
  v7 = *a3;
  result = llvm::FunctionComparator::cmpTypes(this, *a2, *a3);
  v9 = result;
  if (!(_DWORD)result)
    goto LABEL_26;
  v10 = *((unsigned __int8 *)v6 + 8);
  if (v10 == 14 || v10 == 7)
  {
    v12 = *((unsigned __int8 *)v7 + 8);
    if (v12 == 7 || v12 == 14)
      return result;
    else
      return 0xFFFFFFFFLL;
  }
  v14 = *((unsigned __int8 *)v7 + 8);
  if (v14 == 7 || v14 == 14)
    return 1;
  if ((v10 & 0xFE) == 0x12)
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  else
    PrimitiveSizeInBits = 0;
  if ((v14 & 0xFE) == 0x12)
    v17 = llvm::Type::getPrimitiveSizeInBits(v7);
  else
    v17 = 0;
  v18 = PrimitiveSizeInBits >= v17;
  v19 = PrimitiveSizeInBits > v17;
  if (PrimitiveSizeInBits != v17)
    goto LABEL_63;
  if (PrimitiveSizeInBits)
  {
LABEL_26:
    if (llvm::Constant::isNullValue((llvm::Constant *)a2)
      && (llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) != 0)
    {
      return v9;
    }
    if (!llvm::Constant::isNullValue((llvm::Constant *)a2)
      || llvm::Constant::isNullValue((llvm::Constant *)a3))
    {
      if ((llvm::Constant::isNullValue((llvm::Constant *)a2) & 1) == 0
        && (llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) != 0)
      {
        return 0xFFFFFFFFLL;
      }
      v20 = *((unsigned __int8 *)a2 + 16);
      v21 = *((unsigned __int8 *)a3 + 16);
      if (v20 > 3 || v21 > 3)
      {
        v18 = v20 >= v21;
        v22 = v20 > v21;
        if (v18)
          result = v22;
        else
          result = 0xFFFFFFFFLL;
        if (!(_DWORD)result)
        {
          if ((v20 & 0xFE) != 0xE)
            __asm { BR              X10 }
          RawDataValues = (const void *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
          v25 = v24;
          v26 = (const void *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a3);
          return llvm::FunctionComparator::cmpMem((uint64_t)v26, RawDataValues, v25, v26, v27);
        }
        return result;
      }
      v35 = sub_1C63AB99C(*((_QWORD *)this + 8), (uint64_t)a2);
      v36 = sub_1C63AB99C(*((_QWORD *)this + 8), (uint64_t)a3);
      v18 = v35 >= v36;
      v19 = v35 > v36;
LABEL_63:
      v37 = v19;
      if (v18)
        return v37;
      else
        return 0xFFFFFFFFLL;
    }
    return 1;
  }
  if (v10 == 15)
    v28 = v6;
  else
    v28 = 0;
  if (v14 == 15)
    v29 = v7;
  else
    v29 = 0;
  if (v28)
    v30 = v29 == 0;
  else
    v30 = 1;
  if (v30
    || ((v31 = *((_DWORD *)v28 + 2) >> 8, v32 = *((_DWORD *)v29 + 2), v18 = v31 >= v32 >> 8, v33 = v31 > v32 >> 8, !v18)
      ? (result = 0xFFFFFFFFLL)
      : (result = v33),
        !(_DWORD)result))
  {
    if (v29)
      v34 = -1;
    else
      v34 = v9;
    if (v28)
      return 1;
    else
      return v34;
  }
  return result;
}

uint64_t sub_1C5EFD70C(llvm::FunctionComparator *a1)
{
  uint64_t v1;
  uint64_t v2;

  return llvm::FunctionComparator::cmpAPInts(a1, (const llvm::APInt *)(v2 + 24), (const llvm::APInt *)(v1 + 24));
}

uint64_t llvm::FunctionComparator::cmpGlobalValues(llvm::FunctionComparator *this, llvm::GlobalValue *a2, llvm::GlobalValue *a3)
{
  unint64_t v5;
  unint64_t v6;

  v5 = sub_1C63AB99C(*((_QWORD *)this + 8), (uint64_t)a2);
  v6 = sub_1C63AB99C(*((_QWORD *)this + 8), (uint64_t)a3);
  if (v5 < v6)
    return 0xFFFFFFFFLL;
  else
    return v5 > v6;
}

uint64_t llvm::FunctionComparator::cmpOperations(llvm::FunctionComparator *this, llvm::Type **a2, llvm::Type **a3, BOOL *a4)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const llvm::Instruction *v26;
  int v27;
  const llvm::Instruction *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unsigned int v46;
  unsigned int v47;
  _BOOL4 v48;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  const llvm::MDNode **v63;
  uint64_t v64;
  const llvm::MDNode *v65;
  _BOOL4 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  llvm::Type **v74;
  int v75;
  llvm::Type **v76;
  unsigned int v77;
  unsigned int v78;
  _BOOL4 v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  unsigned int v92;
  uint64_t v93;
  const llvm::MDNode **v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  _BOOL4 v103;
  llvm::Type *v104;
  llvm::Type *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  _BOOL4 v109;
  uint64_t v110;
  unsigned int v111;
  _BOOL4 v112;
  llvm::Type *v113;
  llvm::Type *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  _BOOL4 v118;
  uint64_t v119;
  unsigned int v120;
  _BOOL4 v121;
  llvm::Type *v122;
  llvm::Type *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  _BOOL4 v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  _BOOL4 v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  BOOL v144;
  unsigned int v145;
  uint64_t v146;
  const llvm::MDNode **v147;
  uint64_t v148;
  const llvm::MDNode *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  BOOL v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  llvm::Type **v163;
  _QWORD *v164;
  llvm::Type **v165;
  _QWORD *v166;
  llvm::Type **v167;
  _QWORD *v168;
  llvm::Type **v169;
  llvm::Type **v170;

  *a4 = 1;
  result = llvm::FunctionComparator::cmpValues(this, (const llvm::Value *)a2, a3);
  if ((_DWORD)result)
    return result;
  v9 = *((unsigned __int8 *)a2 + 16);
  v10 = (v9 - 28);
  v11 = *((unsigned __int8 *)a3 + 16) - 28;
  v32 = v10 >= v11;
  v12 = v10 == v11;
  v13 = v10 > v11;
  result = v32 ? v13 : 0xFFFFFFFFLL;
  if (!v12)
    return result;
  if (v9 == 62)
  {
    *a4 = 0;
    result = llvm::FunctionComparator::cmpValues(this, a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (llvm::Type **)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)]);
    if (!(_DWORD)result)
      return llvm::FunctionComparator::cmpGEPs(this, (const llvm::GEPOperator *)a2, (const llvm::GEPOperator *)a3);
    return result;
  }
  v14 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v15 = *((_DWORD *)a3 + 5) & 0x7FFFFFF;
  v32 = v14 >= v15;
  v16 = v14 == v15;
  v17 = v14 > v15;
  if (v32)
    result = v17;
  else
    result = 0xFFFFFFFFLL;
  if (!v16)
    return result;
  result = llvm::FunctionComparator::cmpTypes(this, *a2, *a3);
  if ((_DWORD)result)
    return result;
  v18 = *((unsigned __int8 *)a2 + 17) >> 1;
  v19 = *((unsigned __int8 *)a3 + 17);
  v32 = v18 >= v19 >> 1;
  v20 = v18 == v19 >> 1;
  v21 = v18 > v19 >> 1;
  result = v32 ? v21 : 0xFFFFFFFFLL;
  if (!v20)
    return result;
  v22 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  if (!(_DWORD)v22)
  {
LABEL_29:
    v29 = *((unsigned __int8 *)a2 + 16);
    if (v29 == 61)
    {
      v34 = *((unsigned __int16 *)a2 + 9);
      v35 = *((unsigned __int16 *)a3 + 9);
      if ((v34 & 1) < (v35 & 1))
        result = 0xFFFFFFFFLL;
      else
        result = (v34 & 1) > (v35 & 1);
      if ((_DWORD)result)
        return result;
      v36 = 1 << (v34 >> 1);
      v37 = 1 << (v35 >> 1);
      v32 = v36 >= v37;
      v38 = v36 > v37;
      result = v32 ? v38 : 0xFFFFFFFFLL;
      if ((_DWORD)result)
        return result;
      v39 = (v34 >> 7) & 7;
      v40 = (v35 >> 7) & 7;
      goto LABEL_83;
    }
    if (v29 != 60)
    {
      if (v29 == 59)
      {
        result = llvm::FunctionComparator::cmpTypes(this, a2[8], a3[8]);
        if ((_DWORD)result)
          return result;
        v30 = 1 << *((_WORD *)a2 + 9);
        v31 = 1 << *((_WORD *)a3 + 9);
        v32 = v30 >= v31;
        v33 = v30 > v31;
        goto LABEL_90;
      }
      if ((v29 - 83) >= 0xFFFFFFFE)
      {
        v67 = *((_WORD *)a2 + 9) & 0x3F;
        v68 = *((_WORD *)a3 + 9) & 0x3F;
LABEL_89:
        v32 = v67 >= v68;
        v33 = v67 > v68;
LABEL_90:
        v69 = v33;
        if (v32)
          return v69;
        else
          return 0xFFFFFFFFLL;
      }
      result = 0;
      if (*((unsigned __int8 *)a2 + 16) > 0x3Fu)
      {
        switch(*((_BYTE *)a2 + 16))
        {
          case 'S':
            v70 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
            if (!(_DWORD)v70)
              return 0;
            v71 = 0;
            v72 = 8 * v70;
            do
            {
              v73 = *((_DWORD *)a2 + 5);
              if ((v73 & 0x40000000) != 0)
                v74 = (llvm::Type **)*(a2 - 1);
              else
                v74 = &a2[-4 * (v73 & 0x7FFFFFF)];
              v75 = *((_DWORD *)a3 + 5);
              if ((v75 & 0x40000000) != 0)
                v76 = (llvm::Type **)*(a3 - 1);
              else
                v76 = &a3[-4 * (v75 & 0x7FFFFFF)];
              result = llvm::FunctionComparator::cmpValues(this, *(llvm::Type **)((char *)&v74[4 * *((unsigned int *)a2 + 15)] + v71), *(llvm::Type ***)((char *)&v76[4 * *((unsigned int *)a3 + 15)] + v71));
              if ((_DWORD)result)
                break;
              v71 += 8;
            }
            while (v72 != v71);
            return result;
          case 'T':
            goto LABEL_109;
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
            return result;
          case '[':
            v101 = *((unsigned int *)a2 + 18);
            v102 = *((_DWORD *)a3 + 18);
            v32 = v101 >= v102;
            v103 = v101 > v102;
            if (v32)
              result = v103;
            else
              result = 0xFFFFFFFFLL;
            if ((_DWORD)result)
              return result;
            if (!(_DWORD)v101)
              return 0;
            v104 = a2[8];
            v105 = a3[8];
            do
            {
              v107 = *(_DWORD *)v104;
              v104 = (llvm::Type *)((char *)v104 + 4);
              v106 = v107;
              v108 = *(_DWORD *)v105;
              v105 = (llvm::Type *)((char *)v105 + 4);
              v32 = v106 >= v108;
              v109 = v106 > v108;
              if (v32)
                result = v109;
              else
                result = 0xFFFFFFFFLL;
              if ((_DWORD)result)
                break;
              --v101;
            }
            while (v101);
            return result;
          case '\\':
            v110 = *((unsigned int *)a2 + 18);
            v111 = *((_DWORD *)a3 + 18);
            v32 = v110 >= v111;
            v112 = v110 > v111;
            if (v32)
              result = v112;
            else
              result = 0xFFFFFFFFLL;
            if ((_DWORD)result)
              return result;
            if (!(_DWORD)v110)
              return 0;
            v113 = a2[8];
            v114 = a3[8];
            do
            {
              v116 = *(_DWORD *)v113;
              v113 = (llvm::Type *)((char *)v113 + 4);
              v115 = v116;
              v117 = *(_DWORD *)v114;
              v114 = (llvm::Type *)((char *)v114 + 4);
              v32 = v115 >= v117;
              v118 = v115 > v117;
              if (v32)
                result = v118;
              else
                result = 0xFFFFFFFFLL;
              if ((_DWORD)result)
                break;
              --v110;
            }
            while (v110);
            return result;
          case ']':
            v119 = *((unsigned int *)a2 + 18);
            v120 = *((_DWORD *)a3 + 18);
            v32 = v119 >= v120;
            v121 = v119 > v120;
            if (v32)
              result = v121;
            else
              result = 0xFFFFFFFFLL;
            if ((_DWORD)result)
              return result;
            if (!(_DWORD)v119)
              return 0;
            v122 = a2[8];
            v123 = a3[8];
            do
            {
              v125 = *(_DWORD *)v122;
              v122 = (llvm::Type *)((char *)v122 + 4);
              v124 = v125;
              v126 = *(_DWORD *)v123;
              v123 = (llvm::Type *)((char *)v123 + 4);
              v32 = v124 >= v126;
              v127 = v124 > v126;
              if (v32)
                result = v127;
              else
                result = 0xFFFFFFFFLL;
              if ((_DWORD)result)
                break;
              --v119;
            }
            while (v119);
            return result;
          default:
            if (v29 == 64)
            {
              v128 = *((unsigned __int16 *)a2 + 9);
              v129 = *((unsigned __int16 *)a3 + 9);
              if ((v128 & 1) < (v129 & 1))
                result = 0xFFFFFFFFLL;
              else
                result = (v128 & 1) > (v129 & 1);
              if (!(_DWORD)result)
              {
                v130 = (v128 >> 1) & 1;
                v131 = (v129 >> 1) & 1;
                v32 = v130 >= v131;
                v132 = v130 > v131;
                result = v32 ? v132 : 0xFFFFFFFFLL;
                if (!(_DWORD)result)
                {
                  v133 = (v128 >> 2) & 7;
                  v134 = (v129 >> 2) & 7;
                  v32 = v133 >= v134;
                  v135 = v133 > v134;
                  result = v32 ? v135 : 0xFFFFFFFFLL;
                  if (!(_DWORD)result)
                  {
                    v39 = v128 >> 5;
                    v40 = v129 >> 5;
                    goto LABEL_83;
                  }
                }
              }
            }
            else if (v29 == 65)
            {
              v96 = *((unsigned __int16 *)a2 + 9);
              v97 = v96 >> 4;
              v98 = *((unsigned __int16 *)a3 + 9);
              v99 = v98 >> 4;
              v32 = v97 >= v99;
              v100 = v97 > v99;
              result = v32 ? v100 : 0xFFFFFFFFLL;
              if (!(_DWORD)result)
              {
                result = (v96 & 1) < (v98 & 1) ? 0xFFFFFFFFLL : (v96 & 1) > (v98 & 1);
                if (!(_DWORD)result)
                {
                  v39 = (v96 >> 1) & 7;
                  v40 = (v98 >> 1) & 7;
                  goto LABEL_83;
                }
              }
            }
            break;
        }
        return result;
      }
      if (v29 != 33 && v29 != 39)
      {
        if (v29 != 63)
          return result;
        v39 = *((_WORD *)a2 + 9) & 7;
        v40 = *((_WORD *)a3 + 9) & 7;
LABEL_83:
        v32 = v39 >= v40;
        v66 = v39 > v40;
        if (v32)
          result = v66;
        else
          result = 0xFFFFFFFFLL;
        if ((_DWORD)result)
          return result;
        v67 = *((unsigned __int8 *)a2 + 60);
        v68 = *((unsigned __int8 *)a3 + 60);
        goto LABEL_89;
      }
LABEL_109:
      v77 = (*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF;
      v78 = (*((unsigned __int16 *)a3 + 9) >> 2) & 0x3FF;
      v32 = v77 >= v78;
      v79 = v77 > v78;
      if (v32)
        result = v79;
      else
        result = 0xFFFFFFFFLL;
      if ((_DWORD)result)
        return result;
      result = llvm::FunctionComparator::cmpAttrs(this, (uint64_t)a2[8], (uint64_t)a3[8]);
      if ((_DWORD)result)
        return result;
      result = llvm::FunctionComparator::cmpOperandBundlesSchema((llvm::FunctionComparator *)result, (const llvm::CallBase *)a2, (const llvm::CallBase *)a3);
      if ((_DWORD)result)
        return result;
      if (*((_BYTE *)a2 + 16) == 84)
      {
        v80 = *((_WORD *)a2 + 9) & 3;
        v81 = *((_WORD *)a3 + 9) & 3;
        v32 = v80 >= v81;
        v82 = v80 > v81;
        result = v32 ? v82 : 0xFFFFFFFFLL;
        if ((_DWORD)result)
          return result;
      }
      if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
        goto LABEL_214;
      v83 = **(_QWORD **)*a2;
      v170 = a2;
      v84 = *(_DWORD *)(v83 + 2496);
      if (v84)
      {
        v85 = *(_QWORD *)(v83 + 2480);
        v86 = v84 - 1;
        v87 = v86 & ((a2 >> 4) ^ (a2 >> 9));
        result = v85 + 40 * v87;
        v88 = *(_QWORD *)result;
        if (*(llvm::Type ***)result == a2)
          goto LABEL_131;
        v89 = 0;
        v90 = 1;
        while (v88 != -4096)
        {
          if (v89)
            v91 = 0;
          else
            v91 = v88 == -8192;
          if (v91)
            v89 = result;
          v92 = v87 + v90++;
          v87 = v92 & v86;
          result = v85 + 40 * v87;
          v88 = *(_QWORD *)result;
          if (*(llvm::Type ***)result == a2)
            goto LABEL_131;
        }
        if (v89)
          v166 = (_QWORD *)v89;
        else
          v166 = (_QWORD *)result;
      }
      else
      {
        v166 = 0;
      }
      result = (uint64_t)sub_1C541AB24(v83 + 2480, (uint64_t)&v170, (uint64_t *)&v170, v166);
      v167 = v170;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)result = v167;
      *(_QWORD *)(result + 8) = result + 24;
      *(_QWORD *)(result + 16) = 0x100000000;
LABEL_131:
      v93 = *(unsigned int *)(result + 16);
      if ((_DWORD)v93)
      {
        v94 = (const llvm::MDNode **)(*(_QWORD *)(result + 8) + 8);
        v95 = 16 * v93;
        while (*((_DWORD *)v94 - 2) != 4)
        {
          v65 = 0;
          v94 += 2;
          v95 -= 16;
          if (!v95)
            goto LABEL_215;
        }
        v65 = *v94;
LABEL_215:
        if ((*((_BYTE *)a3 + 23) & 0x20) == 0)
          goto LABEL_231;
        v150 = **(_QWORD **)*a3;
        v170 = a3;
        v151 = *(_DWORD *)(v150 + 2496);
        if (v151)
        {
          v152 = *(_QWORD *)(v150 + 2480);
          v153 = v151 - 1;
          v154 = v153 & ((a3 >> 4) ^ (a3 >> 9));
          result = v152 + 40 * v154;
          v155 = *(_QWORD *)result;
          if (*(llvm::Type ***)result == a3)
            goto LABEL_226;
          v156 = 0;
          v157 = 1;
          while (v155 != -4096)
          {
            if (v156)
              v158 = 0;
            else
              v158 = v155 == -8192;
            if (v158)
              v156 = result;
            v159 = v154 + v157++;
            v154 = v159 & v153;
            result = v152 + 40 * v154;
            v155 = *(_QWORD *)result;
            if (*(llvm::Type ***)result == a3)
              goto LABEL_226;
          }
          if (v156)
            v168 = (_QWORD *)v156;
          else
            v168 = (_QWORD *)result;
        }
        else
        {
          v168 = 0;
        }
        result = (uint64_t)sub_1C541AB24(v150 + 2480, (uint64_t)&v170, (uint64_t *)&v170, v168);
        v169 = v170;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)result = v169;
        *(_QWORD *)(result + 8) = result + 24;
        *(_QWORD *)(result + 16) = 0x100000000;
LABEL_226:
        v160 = *(unsigned int *)(result + 16);
        if ((_DWORD)v160)
        {
          v147 = (const llvm::MDNode **)(*(_QWORD *)(result + 8) + 8);
          v161 = 16 * v160;
          while (*((_DWORD *)v147 - 2) != 4)
          {
            v149 = 0;
            v147 += 2;
            v161 -= 16;
            if (!v161)
              return llvm::FunctionComparator::cmpRangeMetadata((llvm::FunctionComparator *)result, v65, v149);
          }
LABEL_233:
          v149 = *v147;
          return llvm::FunctionComparator::cmpRangeMetadata((llvm::FunctionComparator *)result, v65, v149);
        }
        goto LABEL_231;
      }
LABEL_214:
      v65 = 0;
      goto LABEL_215;
    }
    v41 = *((unsigned __int16 *)a2 + 9);
    v42 = *((unsigned __int16 *)a3 + 9);
    if ((v41 & 1) < (v42 & 1))
      result = 0xFFFFFFFFLL;
    else
      result = (v41 & 1) > (v42 & 1);
    if ((_DWORD)result)
      return result;
    v43 = 1 << (v41 >> 1);
    v44 = 1 << (v42 >> 1);
    v32 = v43 >= v44;
    v45 = v43 > v44;
    result = v32 ? v45 : 0xFFFFFFFFLL;
    if ((_DWORD)result)
      return result;
    v46 = (v41 >> 7) & 7;
    v47 = (v42 >> 7) & 7;
    v32 = v46 >= v47;
    v48 = v46 > v47;
    result = v32 ? v48 : 0xFFFFFFFFLL;
    if ((_DWORD)result)
      return result;
    v49 = *((unsigned __int8 *)a2 + 60);
    v50 = *((unsigned __int8 *)a3 + 60);
    v32 = v49 >= v50;
    v51 = v49 > v50;
    result = v32 ? v51 : 0xFFFFFFFFLL;
    if ((_DWORD)result)
      return result;
    if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
      goto LABEL_197;
    v52 = **(_QWORD **)*a2;
    v170 = a2;
    v53 = *(_DWORD *)(v52 + 2496);
    if (v53)
    {
      v54 = *(_QWORD *)(v52 + 2480);
      v55 = v53 - 1;
      v56 = v55 & ((a2 >> 4) ^ (a2 >> 9));
      result = v54 + 40 * v56;
      v57 = *(_QWORD *)result;
      if (*(llvm::Type ***)result == a2)
        goto LABEL_72;
      v58 = 0;
      v59 = 1;
      while (v57 != -4096)
      {
        if (v58)
          v60 = 0;
        else
          v60 = v57 == -8192;
        if (v60)
          v58 = result;
        v61 = v56 + v59++;
        v56 = v61 & v55;
        result = v54 + 40 * v56;
        v57 = *(_QWORD *)result;
        if (*(llvm::Type ***)result == a2)
          goto LABEL_72;
      }
      if (v58)
        v162 = (_QWORD *)v58;
      else
        v162 = (_QWORD *)result;
    }
    else
    {
      v162 = 0;
    }
    result = (uint64_t)sub_1C541AB24(v52 + 2480, (uint64_t)&v170, (uint64_t *)&v170, v162);
    v163 = v170;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)result = v163;
    *(_QWORD *)(result + 8) = result + 24;
    *(_QWORD *)(result + 16) = 0x100000000;
LABEL_72:
    v62 = *(unsigned int *)(result + 16);
    if ((_DWORD)v62)
    {
      v63 = (const llvm::MDNode **)(*(_QWORD *)(result + 8) + 8);
      v64 = 16 * v62;
      while (*((_DWORD *)v63 - 2) != 4)
      {
        v65 = 0;
        v63 += 2;
        v64 -= 16;
        if (!v64)
          goto LABEL_198;
      }
      v65 = *v63;
LABEL_198:
      if ((*((_BYTE *)a3 + 23) & 0x20) == 0)
        goto LABEL_231;
      v136 = **(_QWORD **)*a3;
      v170 = a3;
      v137 = *(_DWORD *)(v136 + 2496);
      if (v137)
      {
        v138 = *(_QWORD *)(v136 + 2480);
        v139 = v137 - 1;
        v140 = v139 & ((a3 >> 4) ^ (a3 >> 9));
        result = v138 + 40 * v140;
        v141 = *(_QWORD *)result;
        if (*(llvm::Type ***)result == a3)
          goto LABEL_209;
        v142 = 0;
        v143 = 1;
        while (v141 != -4096)
        {
          if (v142)
            v144 = 0;
          else
            v144 = v141 == -8192;
          if (v144)
            v142 = result;
          v145 = v140 + v143++;
          v140 = v145 & v139;
          result = v138 + 40 * v140;
          v141 = *(_QWORD *)result;
          if (*(llvm::Type ***)result == a3)
            goto LABEL_209;
        }
        if (v142)
          v164 = (_QWORD *)v142;
        else
          v164 = (_QWORD *)result;
      }
      else
      {
        v164 = 0;
      }
      result = (uint64_t)sub_1C541AB24(v136 + 2480, (uint64_t)&v170, (uint64_t *)&v170, v164);
      v165 = v170;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)result = v165;
      *(_QWORD *)(result + 8) = result + 24;
      *(_QWORD *)(result + 16) = 0x100000000;
LABEL_209:
      v146 = *(unsigned int *)(result + 16);
      if ((_DWORD)v146)
      {
        v147 = (const llvm::MDNode **)(*(_QWORD *)(result + 8) + 8);
        v148 = 16 * v146;
        while (*((_DWORD *)v147 - 2) != 4)
        {
          v149 = 0;
          v147 += 2;
          v148 -= 16;
          if (!v148)
            return llvm::FunctionComparator::cmpRangeMetadata((llvm::FunctionComparator *)result, v65, v149);
        }
        goto LABEL_233;
      }
LABEL_231:
      v149 = 0;
      return llvm::FunctionComparator::cmpRangeMetadata((llvm::FunctionComparator *)result, v65, v149);
    }
LABEL_197:
    v65 = 0;
    goto LABEL_198;
  }
  v23 = 0;
  v24 = 32 * v22;
  while (1)
  {
    v25 = *((_DWORD *)a2 + 5);
    v26 = (v25 & 0x40000000) != 0 ? *(a2 - 1) : (const llvm::Instruction *)&a2[-4 * (v25 & 0x7FFFFFF)];
    v27 = *((_DWORD *)a3 + 5);
    v28 = (v27 & 0x40000000) != 0 ? *(a3 - 1) : (const llvm::Instruction *)&a3[-4 * (v27 & 0x7FFFFFF)];
    result = llvm::FunctionComparator::cmpTypes(this, **(llvm::Type ***)((char *)v26 + v23), **(llvm::Type ***)((char *)v28 + v23));
    if ((_DWORD)result)
      return result;
    v23 += 32;
    if (v24 == v23)
      goto LABEL_29;
  }
}

uint64_t llvm::FunctionComparator::cmpInlineAsm(llvm::FunctionComparator *this, llvm::Type **a2, llvm::Type **a3)
{
  uint64_t result;
  char v6;
  const llvm::InlineAsm *v7;
  size_t v8;
  char v9;
  const llvm::InlineAsm *v10;
  size_t v11;
  char v12;
  const llvm::InlineAsm *v13;
  size_t v14;
  char v15;
  const llvm::InlineAsm *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  _BOOL4 v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  _BOOL4 v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;

  if (a2 == a3)
    return 0;
  result = llvm::FunctionComparator::cmpTypes(this, a2[9], a3[9]);
  if (!(_DWORD)result)
  {
    v6 = *((_BYTE *)a2 + 47);
    v7 = v6 >= 0 ? (const llvm::InlineAsm *)(a2 + 3) : a2[3];
    v8 = v6 >= 0 ? v6 & 0x7F : (size_t)a2[4];
    v9 = *((_BYTE *)a3 + 47);
    v10 = v9 >= 0 ? (const llvm::InlineAsm *)(a3 + 3) : a3[3];
    v11 = v9 >= 0 ? v9 & 0x7F : (size_t)a3[4];
    result = llvm::FunctionComparator::cmpMem(result, v7, v8, v10, v11);
    if (!(_DWORD)result)
    {
      v12 = *((_BYTE *)a2 + 71);
      v13 = v12 >= 0 ? (const llvm::InlineAsm *)(a2 + 6) : a2[6];
      v14 = v12 >= 0 ? v12 & 0x7F : (size_t)a2[7];
      v15 = *((_BYTE *)a3 + 71);
      v16 = v15 >= 0 ? (const llvm::InlineAsm *)(a3 + 6) : a3[6];
      v17 = v15 >= 0 ? v15 & 0x7F : (size_t)a3[7];
      result = llvm::FunctionComparator::cmpMem(result, v13, v14, v16, v17);
      if (!(_DWORD)result)
      {
        v18 = *((unsigned __int8 *)a2 + 80);
        v19 = *((unsigned __int8 *)a3 + 80);
        v20 = v18 >= v19;
        v21 = v18 == v19;
        v22 = v18 > v19;
        result = v20 ? v22 : 0xFFFFFFFFLL;
        if (v21)
        {
          v23 = *((unsigned __int8 *)a2 + 81);
          v24 = *((unsigned __int8 *)a3 + 81);
          v20 = v23 >= v24;
          v25 = v23 == v24;
          v26 = v23 > v24;
          result = v20 ? v26 : 0xFFFFFFFFLL;
          if (v25)
          {
            v27 = *((_DWORD *)a2 + 21);
            v28 = *((_DWORD *)a3 + 21);
            v20 = v27 >= v28;
            v29 = v27 == v28;
            v30 = v27 > v28;
            if (!v20)
              v30 = -1;
            if (v29)
              return 0;
            else
              return v30;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::FunctionComparator::compareSignature(llvm::LLVMContext ****this)
{
  uint64_t result;
  llvm::LLVMContext ***v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  _BOOL4 v10;
  _QWORD *GC;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _QWORD *v17;
  char v18;
  BOOL v19;
  const void *v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  llvm::LLVMContext ****v34;
  llvm::LLVMContext ***v35;
  llvm::LLVMContext ***v36;
  size_t v37;
  llvm::LLVMContext ***v38;
  size_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  llvm::LLVMContext ***v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  llvm::Type *v49;
  unsigned int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  _BOOL4 v56;
  llvm::LLVMContext ***v57;
  const llvm::Value *v58;
  llvm::LLVMContext ***v59;
  llvm::Type **v60;
  llvm::LLVMContext ***v61;
  uint64_t v62;
  llvm::LLVMContext ****v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  llvm::LLVMContext ****v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  llvm::LLVMContext ****v71;
  uint64_t v72;
  llvm::LLVMContext ****v73;
  uint64_t v74;
  _QWORD ***v75;

  result = llvm::FunctionComparator::cmpAttrs((llvm::FunctionComparator *)this, (uint64_t)(*this)[14], (uint64_t)this[1][14]);
  if ((_DWORD)result)
    return result;
  v3 = *this;
  v4 = (uint64_t)this[1];
  v5 = *((unsigned __int16 *)*this + 9);
  v6 = (v5 >> 14) & 1;
  v7 = (*(unsigned __int16 *)(v4 + 18) >> 14) & 1;
  v8 = v6 >= v7;
  v9 = v6 == v7;
  v10 = v6 > v7;
  result = v8 ? v10 : 0xFFFFFFFFLL;
  if (!v9)
    return result;
  if ((v5 & 0x4000) != 0)
  {
    GC = llvm::LLVMContext::getGC(**v3, (const llvm::Function *)v3);
    v12 = *((_BYTE *)GC + 23);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = GC;
    else
      v14 = (const void *)*GC;
    v15 = v12 & 0x7F;
    if (v13)
      v16 = GC[1];
    else
      v16 = v15;
    v17 = llvm::LLVMContext::getGC(**this[1], (const llvm::Function *)this[1]);
    v18 = *((_BYTE *)v17 + 23);
    v19 = v18 < 0;
    if (v18 >= 0)
      v20 = v17;
    else
      v20 = (const void *)*v17;
    v21 = v18 & 0x7F;
    if (v19)
      v22 = v17[1];
    else
      v22 = v21;
    result = llvm::FunctionComparator::cmpMem((uint64_t)v17, v14, v16, v20, v22);
    if ((_DWORD)result)
      return result;
    v3 = *this;
    v4 = (uint64_t)this[1];
  }
  v23 = *((_DWORD *)v3 + 8);
  v24 = (v23 >> 22) & 1;
  v25 = *(_DWORD *)(v4 + 32);
  v26 = (v25 >> 22) & 1;
  v8 = v24 >= v26;
  v27 = v24 == v26;
  v28 = v24 > v26;
  if (v8)
    result = v28;
  else
    result = 0xFFFFFFFFLL;
  if (!v27)
    return result;
  if ((v23 & 0x400000) != 0)
  {
    v29 = *(_QWORD *)**v3;
    v75 = (_QWORD ***)v3;
    v30 = *(_DWORD *)(v29 + 2520);
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 2504);
      v32 = v30 - 1;
      v33 = v32 & ((v3 >> 4) ^ (v3 >> 9));
      v34 = (llvm::LLVMContext ****)(v31 + 24 * v33);
      v35 = *v34;
      if (*v34 == v3)
        goto LABEL_30;
      v63 = 0;
      v64 = 1;
      while (v35 != (llvm::LLVMContext ***)-4096)
      {
        if (v63)
          v65 = 0;
        else
          v65 = v35 == (llvm::LLVMContext ***)-8192;
        if (v65)
          v63 = v34;
        v66 = v33 + v64++;
        v33 = v66 & v32;
        v34 = (llvm::LLVMContext ****)(v31 + 24 * v33);
        v35 = *v34;
        if (*v34 == v3)
          goto LABEL_30;
      }
      if (v63)
        v71 = v63;
      else
        v71 = v34;
    }
    else
    {
      v71 = 0;
    }
    v34 = (llvm::LLVMContext ****)sub_1C53D65B8(v29 + 2504, (uint64_t)&v75, (uint64_t *)&v75, v71);
    v72 = (uint64_t)v75;
    v34[1] = 0;
    v34[2] = 0;
    *v34 = (llvm::LLVMContext ***)v72;
    v4 = (uint64_t)this[1];
    v25 = *(_DWORD *)(v4 + 32);
LABEL_30:
    v36 = v34[1];
    v37 = (size_t)v34[2];
    if ((v25 & 0x400000) == 0)
    {
      v38 = 0;
      v39 = 0;
LABEL_35:
      result = llvm::FunctionComparator::cmpMem((uint64_t)v34, v36, v37, v38, v39);
      if ((_DWORD)result)
        return result;
      v3 = *this;
      v4 = (uint64_t)this[1];
      goto LABEL_37;
    }
    v40 = ***(_QWORD ***)v4;
    v75 = (_QWORD ***)v4;
    v41 = *(_DWORD *)(v40 + 2520);
    if (v41)
    {
      v42 = *(_QWORD *)(v40 + 2504);
      v43 = v41 - 1;
      v44 = v43 & ((v4 >> 4) ^ (v4 >> 9));
      v34 = (llvm::LLVMContext ****)(v42 + 24 * v44);
      v45 = *v34;
      if (*v34 == (llvm::LLVMContext ***)v4)
      {
LABEL_34:
        v38 = v34[1];
        v39 = (size_t)v34[2];
        goto LABEL_35;
      }
      v67 = 0;
      v68 = 1;
      while (v45 != (llvm::LLVMContext ***)-4096)
      {
        if (v67)
          v69 = 0;
        else
          v69 = v45 == (llvm::LLVMContext ***)-8192;
        if (v69)
          v67 = v34;
        v70 = v44 + v68++;
        v44 = v70 & v43;
        v34 = (llvm::LLVMContext ****)(v42 + 24 * v44);
        v45 = *v34;
        if (*v34 == (llvm::LLVMContext ***)v4)
          goto LABEL_34;
      }
      if (v67)
        v73 = v67;
      else
        v73 = v34;
    }
    else
    {
      v73 = 0;
    }
    v34 = (llvm::LLVMContext ****)sub_1C53D65B8(v40 + 2504, (uint64_t)&v75, (uint64_t *)&v75, v73);
    v74 = (uint64_t)v75;
    v34[1] = 0;
    v34[2] = 0;
    *v34 = (llvm::LLVMContext ***)v74;
    goto LABEL_34;
  }
LABEL_37:
  v46 = *((_DWORD *)v3[3] + 2);
  v47 = v46 < 0x100;
  v48 = v46 > 0xFF;
  v49 = *(llvm::Type **)(v4 + 24);
  v50 = *((_DWORD *)v49 + 2);
  v51 = v50 > 0xFF;
  v52 = v50 < 0x100 && v48;
  if (v51 && v47)
    result = 0xFFFFFFFFLL;
  else
    result = v52;
  if (((v48 ^ v51) & 1) == 0)
  {
    v53 = (*((unsigned __int16 *)v3 + 9) >> 4) & 0x3FF;
    v54 = (*(unsigned __int16 *)(v4 + 18) >> 4) & 0x3FF;
    v8 = v53 >= v54;
    v55 = v53 == v54;
    v56 = v53 > v54;
    result = v8 ? v56 : 0xFFFFFFFFLL;
    if (v55)
    {
      result = llvm::FunctionComparator::cmpTypes((llvm::FunctionComparator *)this, (llvm::Type *)v3[3], v49);
      if (!(_DWORD)result)
      {
        v57 = *this;
        if ((*((_WORD *)*this + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)*this);
        v58 = (const llvm::Value *)v57[11];
        v59 = this[1];
        if ((*((_WORD *)v59 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)this[1]);
        v60 = v59[11];
        v61 = *this;
        if ((*((_WORD *)*this + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)*this);
        v62 = (uint64_t)&v61[11][5 * (_QWORD)v61[12]];
        if (v58 == (const llvm::Value *)v62)
        {
          return 0;
        }
        else
        {
          do
          {
            llvm::FunctionComparator::cmpValues((llvm::FunctionComparator *)this, v58, v60);
            result = 0;
            v58 = (const llvm::Value *)((char *)v58 + 40);
            v60 += 5;
          }
          while (v58 != (const llvm::Value *)v62);
        }
      }
    }
  }
  return result;
}

char *sub_1C5EFE624(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63AC5C0((uint64_t *)a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &unk_1E817B4C0;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::FunctionImportGlobalProcessing::doImportAsDefinition(llvm::FunctionImportGlobalProcessing *this, const llvm::GlobalValue *a2)
{
  uint64_t *result;
  uint64_t v3;
  const llvm::GlobalValue *v4;

  result = (uint64_t *)*((_QWORD *)this + 2);
  if (result)
  {
    v3 = 0;
    v4 = a2;
    return (uint64_t *)sub_1C56CA514(result, &v4, &v3);
  }
  return result;
}

uint64_t llvm::FunctionImportGlobalProcessing::getLinkage(llvm::FunctionImportGlobalProcessing *this, const llvm::GlobalValue *a2, unsigned __int8 a3)
{
  uint64_t v3;

  if (*((_BYTE *)this + 24))
  {
    LODWORD(v3) = *((_DWORD *)a2 + 8) & 0xF;
    if ((((v3 - 7) < 2) & a3) != 0)
      return 0;
    else
      return v3;
  }
  else
  {
    v3 = *((_DWORD *)a2 + 8) & 0xF;
    if (*((_QWORD *)this + 2))
      __asm { BR              X10 }
  }
  return v3;
}

void sub_1C5EFE7AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = 0;
  sub_1C56CA514(a1, &a10, &a9);
  JUMPOUT(0x1C5EFE770);
}

void llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(llvm::FunctionImportGlobalProcessing *this, llvm::GlobalValue *a2)
{
  unint64_t v4;
  int Linkage;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t ***v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  BOOL v33;
  char v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  llvm::GlobalValue **v51;
  llvm::GlobalValue *v52;
  llvm::GlobalValue *v53;
  uint64_t v54;
  int v55;
  llvm::Type *v57;
  llvm::Value **NullValue;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::GlobalValue *v64;
  int v65;
  int v66;
  int v67;
  unint64_t *v68;
  size_t v69;
  const void *v70;
  unint64_t v71;
  void **p_dst;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  llvm::GlobalValue *AliaseeObject;
  size_t **v82;
  const void *v83;
  size_t v84;
  char v85;
  void **v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::GlobalValue *v93;
  int v94;
  int v95;
  llvm::GlobalValue **v96;
  int v97;
  BOOL v98;
  unsigned int v99;
  llvm::GlobalValue **v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  size_t v104;
  size_t v105;
  char hasExternalWeakLinkage;
  size_t *inserted;
  void *__p[2];
  char v109;
  uint64_t v110[4];
  __int16 v111;
  void **__dst;
  size_t v113;
  int64_t v114;
  unint64_t v115;

  v4 = 0;
  v115 = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_2;
  v11 = *((_QWORD *)this + 1);
  v12 = sub_1C4EE9DE0(a2);
  v13 = (_QWORD *)(v11 + 8);
  v14 = *(_QWORD **)(v11 + 8);
  if (!v14)
    goto LABEL_25;
  v15 = (_QWORD *)(v11 + 8);
  do
  {
    v16 = v14[4];
    v17 = v16 >= v12;
    if (v16 >= v12)
      v18 = v14;
    else
      v18 = v14 + 1;
    if (v17)
      v15 = v14;
    v14 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == v13 || v15[4] > v12)
LABEL_25:
    v15 = (_QWORD *)(v11 + 8);
  v19 = *(unsigned __int8 *)(v11 + 133);
  if (v15 == v13)
    v20 = 0;
  else
    v20 = (uint64_t)(v15 + 4);
  v21 = v20 & 0xFFFFFFFFFFFFFFF8;
  v4 = v21 | v19;
  v115 = v21 | v19;
  if ((v21 | v19) >= 8 && *(_BYTE *)(*((_QWORD *)this + 1) + 131))
  {
    v22 = *((_BYTE *)a2 + 16) ? 0 : (uint64_t ***)a2;
    if (!*((_BYTE *)a2 + 16)
      && (*((llvm::GlobalValue **)a2 + 9) != (llvm::GlobalValue *)((char *)a2 + 72) || (*((_BYTE *)a2 + 34) & 0x80) != 0))
    {
      v23 = *(uint64_t **)(v21 + 24);
      v24 = *(_QWORD *)(v21 + 32) - (_QWORD)v23;
      if (v24)
      {
        v25 = v24 >> 3;
        v26 = *(_BYTE *)(*(_QWORD *)this + 191);
        if (v26 >= 0)
          v27 = (const void *)(*(_QWORD *)this + 168);
        else
          v27 = *(const void **)(*(_QWORD *)this + 168);
        if (v26 >= 0)
          v28 = v26 & 0x7F;
        else
          v28 = *(_QWORD *)(*(_QWORD *)this + 176);
        v29 = 8 * v25;
        while (1)
        {
          v30 = *v23;
          if (*v23)
            v31 = *(_DWORD *)(*v23 + 8) == 0;
          else
            v31 = 0;
          if (v31)
            v30 = *(_QWORD *)(v30 + 72);
          if (*(_QWORD *)(v30 + 32) == v28 && (!v28 || !memcmp(*(const void **)(v30 + 24), v27, v28)))
            break;
          ++v23;
          v29 -= 8;
          if (!v29)
            goto LABEL_55;
        }
        llvm::Function::setEntryCount(v22, *(_QWORD *)(v30 + 72), 1, 0);
      }
    }
  }
LABEL_55:
  v32 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v32 == 3)
    {
      v33 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
      goto LABEL_85;
    }
  }
  else if (*((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72))
  {
    v33 = (*((_BYTE *)a2 + 34) & 0x80) == 0;
LABEL_85:
    v34 = v33;
    goto LABEL_88;
  }
  v34 = 0;
LABEL_88:
  if (v4 < 8)
    goto LABEL_2;
  if ((v34 & 1) != 0)
    goto LABEL_2;
  if (v32 != 3)
    goto LABEL_2;
  v40 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v40 + 129))
    goto LABEL_2;
  v41 = *(_BYTE *)(*(_QWORD *)this + 191);
  v42 = v41 >= 0 ? (void *)(*(_QWORD *)this + 168) : *(void **)(*(_QWORD *)this + 168);
  v43 = v41 >= 0 ? v41 & 0x7F : *(_QWORD *)(*(_QWORD *)this + 176);
  v44 = sub_1C61CD658(v40, v4, v42, v43);
  if (!v44)
    goto LABEL_2;
  v45 = v44;
  if (*(_DWORD *)(v44 + 8) != 2)
    goto LABEL_2;
  if ((*((_BYTE *)a2 + 34) & 0x40) != 0)
  {
    v46 = ***(_QWORD ***)a2;
    v110[0] = (uint64_t)a2;
    v47 = *(_DWORD *)(v46 + 2520);
    if (v47)
    {
      v48 = *(_QWORD *)(v46 + 2504);
      v49 = v47 - 1;
      v50 = v49 & ((a2 >> 4) ^ (a2 >> 9));
      v51 = (llvm::GlobalValue **)(v48 + 24 * v50);
      v52 = *v51;
      if (*v51 == a2)
      {
LABEL_103:
        if (v51[2] == (llvm::GlobalValue *)12)
        {
          v53 = v51[1];
          v54 = *(_QWORD *)v53;
          v55 = *((_DWORD *)v53 + 2);
          if (v54 == 0x7274702E6D766C6CLL && v55 == 1752462689)
            goto LABEL_2;
        }
        goto LABEL_108;
      }
      v96 = 0;
      v97 = 1;
      while (v52 != (llvm::GlobalValue *)-4096)
      {
        if (v96)
          v98 = 0;
        else
          v98 = v52 == (llvm::GlobalValue *)-8192;
        if (v98)
          v96 = v51;
        v99 = v50 + v97++;
        v50 = v99 & v49;
        v51 = (llvm::GlobalValue **)(v48 + 24 * v50);
        v52 = *v51;
        if (*v51 == a2)
          goto LABEL_103;
      }
      if (v96)
        v100 = v96;
      else
        v100 = v51;
    }
    else
    {
      v100 = 0;
    }
    v51 = (llvm::GlobalValue **)sub_1C53D65B8(v46 + 2504, (uint64_t)v110, v110, v100);
    v101 = v110[0];
    v51[1] = 0;
    v51[2] = 0;
    *v51 = (llvm::GlobalValue *)v101;
    goto LABEL_103;
  }
LABEL_108:
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 129))
  {
    if ((*(_BYTE *)(v45 + 72) & 3) != 0)
    {
      *((_QWORD *)a2 + 9) = llvm::AttributeSet::addAttribute((uint64_t *)a2 + 9, **(uint64_t ***)a2, "thinlto-internalize", 0x13uLL, 0, 0);
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 129))
      {
        if ((*(_BYTE *)(v45 + 72) & 2) != 0)
        {
          NullValue = llvm::Constant::getNullValue(*((llvm::Constant **)a2 + 3), v57);
          llvm::GlobalVariable::setInitializer((uint64_t)a2, (llvm::Constant *)NullValue);
        }
      }
    }
  }
LABEL_2:
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 7 > 1
    || !llvm::FunctionImportGlobalProcessing::shouldPromoteLocalToGlobal((uint64_t)this, (uint64_t)a2, v4))
  {
    Linkage = llvm::FunctionImportGlobalProcessing::getLinkage(this, a2, 0);
    v6 = *((_DWORD *)a2 + 8);
    if ((Linkage - 7) >= 2)
      v7 = *((_DWORD *)a2 + 8);
    else
      v7 = v6 & 0xFFFFFFC0;
    v8 = v7 & 0xFFFFFFF0 | Linkage;
    *((_DWORD *)a2 + 8) = v8;
    if ((Linkage - 7) >= 2)
    {
      if ((v6 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(a2) & 1) != 0)
        goto LABEL_8;
      v8 = *((_DWORD *)a2 + 8);
    }
    *((_DWORD *)a2 + 8) = v8 | 0x4000;
    goto LABEL_8;
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v69 = 0;
    HIBYTE(v114) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_134;
  }
  v59 = ***(_QWORD ***)a2;
  v60 = *(_QWORD *)(v59 + 152);
  v61 = *(unsigned int *)(v59 + 168);
  if ((_DWORD)v61)
  {
    LODWORD(v62) = (v61 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v63 = v60 + 16 * v62;
    v64 = *(llvm::GlobalValue **)v63;
    if (*(llvm::GlobalValue **)v63 == a2)
      goto LABEL_126;
    v65 = 1;
    while (v64 != (llvm::GlobalValue *)-4096)
    {
      v66 = v62 + v65++;
      v62 = v66 & (v61 - 1);
      v64 = *(llvm::GlobalValue **)(v60 + 16 * v62);
      if (v64 == a2)
      {
        v63 = v60 + 16 * v62;
        goto LABEL_126;
      }
    }
  }
  v63 = v60 + 16 * v61;
LABEL_126:
  v68 = *(unint64_t **)(v63 + 8);
  v71 = *v68;
  v70 = v68 + 2;
  v69 = v71;
  if (v71 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v69 >= 0x17)
  {
    v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v73 = v69 | 7;
    v74 = v73 + 1;
    p_dst = (void **)operator new(v73 + 1);
    v113 = v69;
    v114 = v74 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_133;
  }
  HIBYTE(v114) = v69;
  p_dst = (void **)&__dst;
  if (v69)
LABEL_133:
    memmove(p_dst, v70, v69);
LABEL_134:
  *((_BYTE *)p_dst + v69) = 0;
  llvm::FunctionImportGlobalProcessing::getPromotedName(this, a2, __p);
  v111 = 260;
  v110[0] = (uint64_t)__p;
  llvm::Value::setName((uint64_t ***)a2, (uint64_t)v110);
  if (v109 < 0)
    operator delete(__p[0]);
  v75 = llvm::FunctionImportGlobalProcessing::getLinkage(this, a2, 1u);
  v76 = *((_DWORD *)a2 + 8);
  if ((v75 - 7) >= 2)
    v77 = *((_DWORD *)a2 + 8);
  else
    v77 = v76 & 0xFFFFFFC0;
  v78 = v77 & 0xFFFFFFF0 | v75;
  *((_DWORD *)a2 + 8) = v78;
  if ((v75 - 7) < 2
    || (v76 & 0x30) != 0
    && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(a2),
        v78 = *((_DWORD *)a2 + 8),
        (hasExternalWeakLinkage & 1) == 0))
  {
    v78 |= 0x4000u;
  }
  v79 = v78 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)a2 + 8) = v79;
  if ((v78 & 0xF) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(a2) & 1) != 0)
      goto LABEL_145;
    v79 = *((_DWORD *)a2 + 8);
  }
  *((_DWORD *)a2 + 8) = v79 | 0x4000;
LABEL_145:
  v80 = *((unsigned __int8 *)a2 + 16);
  if (v80 == 2
    || (AliaseeObject = a2, v80 == 1)
    && (AliaseeObject = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(a2)) == 0
    || (v82 = (size_t **)*((_QWORD *)AliaseeObject + 6), (__p[0] = v82) == 0))
  {
    v85 = HIBYTE(v114);
    goto LABEL_178;
  }
  v83 = *v82 + 9;
  v84 = **v82;
  v85 = HIBYTE(v114);
  if (v114 >= 0)
    v86 = (void **)&__dst;
  else
    v86 = __dst;
  v87 = HIBYTE(v114) & 0x7F;
  if (v114 < 0)
    v87 = v113;
  if (v84 != v87 || v84 && memcmp(v83, v86, v84))
  {
LABEL_178:
    if ((v85 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_179;
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v88 = ***(_QWORD ***)a2;
    v89 = *(_QWORD *)(v88 + 152);
    v90 = *(unsigned int *)(v88 + 168);
    if ((_DWORD)v90)
    {
      LODWORD(v91) = (v90 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v92 = v89 + 16 * v91;
      v93 = *(llvm::GlobalValue **)v92;
      if (*(llvm::GlobalValue **)v92 == a2)
      {
LABEL_183:
        v102 = *(_QWORD **)(v92 + 8);
        v105 = *v102;
        v103 = (unsigned __int8 *)(v102 + 2);
        v104 = v105;
        goto LABEL_184;
      }
      v94 = 1;
      while (v93 != (llvm::GlobalValue *)-4096)
      {
        v95 = v91 + v94++;
        v91 = v95 & (v90 - 1);
        v93 = *(llvm::GlobalValue **)(v89 + 16 * v91);
        if (v93 == a2)
        {
          v92 = v89 + 16 * v91;
          goto LABEL_183;
        }
      }
    }
    v92 = v89 + 16 * v90;
    goto LABEL_183;
  }
  v104 = 0;
  v103 = (unsigned __int8 *)&byte_1C871356D;
LABEL_184:
  inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)this, v103, v104);
  sub_1C62A5C7C((uint64_t)this + 96, __p, &inserted, (uint64_t)v110);
  if (v85 < 0)
LABEL_179:
    operator delete(__dst);
LABEL_8:
  if (!*((_BYTE *)this + 25))
    goto LABEL_71;
  v9 = *((_DWORD *)a2 + 8);
  v10 = v9 & 0xF;
  if (v10 == 1)
    goto LABEL_66;
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_65;
LABEL_62:
    v35 = (uint64_t *)*((_QWORD *)this + 2);
    if (!v35)
      goto LABEL_71;
    v110[0] = (uint64_t)a2;
    __dst = 0;
    if ((sub_1C56CA514(v35, v110, &__dst) & 1) != 0)
      goto LABEL_71;
    v9 = *((_DWORD *)a2 + 8);
    v10 = v9 & 0xF;
    goto LABEL_65;
  }
  if ((v9 & 0x800000) != 0 || *((llvm::GlobalValue **)a2 + 9) != (llvm::GlobalValue *)((char *)a2 + 72))
    goto LABEL_62;
LABEL_65:
  if ((v10 - 7) < 2)
    goto LABEL_71;
LABEL_66:
  if ((v9 & 0x30) == 0)
  {
LABEL_69:
    v36 = v9 & 0xFFFFBFFF;
LABEL_70:
    *((_DWORD *)a2 + 8) = v36;
    goto LABEL_72;
  }
  if (llvm::GlobalValue::hasExternalWeakLinkage(a2))
  {
    v9 = *((_DWORD *)a2 + 8);
    goto LABEL_69;
  }
LABEL_71:
  if (v115 >= 8)
  {
    if (llvm::ValueInfo::isDSOLocal((llvm::ValueInfo *)&v115, *(unsigned __int8 *)(*((_QWORD *)this + 1) + 130)))
    {
      v67 = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v67 | 0x4000;
      if ((v67 & 0x300) == 0x100)
      {
        v36 = v67 & 0xFFFFBCFF | 0x4000;
        goto LABEL_70;
      }
    }
  }
LABEL_72:
  v37 = *((unsigned __int8 *)a2 + 16);
  if (v37 <= 3 && v37 != 1)
  {
    v38 = *((_DWORD *)a2 + 8);
    if ((v38 & 0xF) == 1)
    {
LABEL_75:
      v39 = *((_QWORD *)a2 + 6);
      if (v39)
      {
        llvm::Comdat::removeUser(v39, (uint64_t)a2);
        *((_QWORD *)a2 + 6) = 0;
      }
      return;
    }
    if (*((_BYTE *)a2 + 16))
    {
      if (v37 == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_75;
    }
    else if ((v38 & 0x800000) == 0 && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72))
    {
      goto LABEL_75;
    }
  }
}

void llvm::FunctionImportGlobalProcessing::processGlobalsForThinLTO(llvm::FunctionImportGlobalProcessing *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::GlobalValue *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::GlobalValue *v8;
  uint64_t v9;
  uint64_t i;
  llvm::GlobalValue *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  llvm::GlobalObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (v4 != v3)
  {
    do
    {
      if (v4)
        v5 = (llvm::GlobalValue *)(v4 - 56);
      else
        v5 = 0;
      llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v5);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v2 = *(_QWORD *)this;
  }
  v6 = v2 + 24;
  v7 = *(_QWORD *)(v2 + 32);
  if (v7 != v2 + 24)
  {
    do
    {
      if (v7)
        v8 = (llvm::GlobalValue *)(v7 - 56);
      else
        v8 = 0;
      llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v8);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    v2 = *(_QWORD *)this;
  }
  v9 = v2 + 40;
  for (i = *(_QWORD *)(v2 + 48); i != v9; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v11 = (llvm::GlobalValue *)(i - 48);
    else
      v11 = 0;
    llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v11);
  }
  if (*((_DWORD *)this + 26))
  {
    v12 = *(_QWORD *)this + 24;
    v13 = *(_QWORD *)(*(_QWORD *)this + 32);
    v14 = *(_QWORD *)this + 8;
    v15 = *(_QWORD *)(*(_QWORD *)this + 16);
    v21 = v13;
    v22 = v15;
    v23 = v12;
    v24 = v14;
    while (1)
    {
      if (v13 == v12 && v15 == v14)
      {
        v16 = v23 == v12 && v24 == v14;
        if (v16)
          break;
      }
      v17 = 0;
      do
      {
        v18 = (*(uint64_t (**)(uint64_t *))((char *)&off_1E81A96D8 + v17))(&v21);
        v17 += 16;
      }
      while (!v18);
      v19 = (llvm::GlobalObject *)v18;
      if (*(_QWORD *)(v18 + 48))
      {
        v25 = *(_QWORD *)(v18 + 48);
        v26 = 0;
        if (sub_1C61252B8((uint64_t *)this + 12, &v25, &v26))
        {
          if (v26 != *((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 28))
            llvm::GlobalObject::setComdat(v19, *(llvm::Comdat **)(v26 + 8));
        }
      }
      v20 = 0;
      do
      {
        if (((*(uint64_t (**)(uint64_t *))((char *)&off_1E81A96B8 + v20))(&v21) & 1) != 0)
          break;
        v16 = v20 == 16;
        v20 += 16;
      }
      while (!v16);
      v13 = v21;
      v15 = v22;
    }
  }
}

uint64_t llvm::FunctionImportGlobalProcessing::run(llvm::FunctionImportGlobalProcessing *this)
{
  llvm::FunctionImportGlobalProcessing::processGlobalsForThinLTO(this);
  return 0;
}

uint64_t llvm::isSafeToDestroyConstant(llvm *this, const llvm::Constant *a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  void *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v18 = v21;
  v20 = 8;
  v13 = v17;
  v14 = v17;
  v15 = 8;
  v16 = 0;
  v21[0] = this;
  v2 = 1;
  while (1)
  {
    v3 = *((_QWORD *)v18 + v2 - 1);
    v19 = v2 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v13, v3);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v3 + 16);
      if (v5 < 4 || v5 - 11 < 0xA)
        goto LABEL_20;
      v7 = *(_QWORD *)(v3 + 8);
      if (v7)
        break;
    }
    v2 = v19;
LABEL_18:
    if (!v2)
    {
      v11 = 1;
      goto LABEL_21;
    }
  }
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8 || *(unsigned __int8 *)(v8 + 16) > 0x14u)
      break;
    v10 = v19;
    if (v19 >= (unint64_t)v20)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v21, v19 + 1, 8);
      v10 = v19;
    }
    *((_QWORD *)v18 + v10) = v8;
    v2 = ++v19;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      goto LABEL_18;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  if (v14 != v13)
    free(v14);
  if (v18 != v21)
    free(v18);
  return v11;
}

uint64_t llvm::GlobalStatus::GlobalStatus(uint64_t this)
{
  *(_WORD *)this = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 17) = 0;
  return this;
}

{
  *(_WORD *)this = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 17) = 0;
  return this;
}

uint64_t llvm::GlobalStatus::analyzeGlobal(llvm::GlobalStatus *this, const llvm::Value *a2, llvm::GlobalStatus *a3)
{
  uint64_t result;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  _BYTE v9[128];

  v5 = v9;
  v6 = v9;
  v7 = 16;
  v8 = 0;
  result = sub_1C5EFF444((uint64_t)this, (uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v5);
  if (v6 != v5)
  {
    v4 = result;
    free(v6);
    return v4;
  }
  return result;
}

uint64_t sub_1C5EFF444(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v23;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  llvm::APInt *v29;
  unsigned int v30;
  unsigned int v31;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::APInt *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;

  if (a1 && *(_BYTE *)(a1 + 16) == 3 && (*(_BYTE *)(a1 + 80) & 2) != 0)
    *(_DWORD *)(a2 + 4) = 2;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    return 0;
  while (1)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v9 = v8 > 0x14;
    else
      v9 = 1;
    if (!v9)
    {
      if (v8 == 5 && *(_BYTE *)(*(_QWORD *)v7 + 8) == 15)
        goto LABEL_24;
      if ((llvm::isSafeToDestroyConstant(*(llvm **)(v6 + 24), (const llvm::Constant *)a2) & 1) == 0)
        return 1;
      goto LABEL_27;
    }
    if (!v7 || v8 < 0x1C)
      return 1;
    if (!*(_BYTE *)(a2 + 24))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56);
      v13 = *(_QWORD *)(a2 + 16);
      if (v13)
      {
        if (v13 != v12)
          *(_BYTE *)(a2 + 24) = 1;
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v12;
      }
    }
    v11 = v8 - 61;
    if (v8 - 61 <= 0x18)
    {
      if (((1 << v11) & 0x30002) != 0)
        goto LABEL_24;
      if (((1 << v11) & 0x1400000) != 0)
      {
        sub_1C4774094(a3, v7);
        if (!(_BYTE)a2)
          goto LABEL_27;
LABEL_24:
        if ((sub_1C5EFF444(v7, a2, a3) & 1) != 0)
          return 1;
        goto LABEL_27;
      }
      if (v8 == 61)
      {
        if (*(_QWORD *)(v7 - 64) == a1)
          return 1;
        v14 = *(unsigned __int16 *)(v7 + 18);
        if ((v14 & 1) != 0)
          return 1;
        v15 = *(_DWORD *)(a2 + 28);
        v16 = (v14 >> 7) & 7;
        if (v16 == 5 && v15 == 4)
        {
          v17 = 6;
        }
        else
        {
          if (v15 <= v16)
            v31 = v16;
          else
            v31 = *(_DWORD *)(a2 + 28);
          if (v15 == 5 && v16 == 4)
            v17 = 6;
          else
            v17 = v31;
        }
        *(_DWORD *)(a2 + 28) = v17;
        if (*(_DWORD *)(a2 + 4) == 3)
          goto LABEL_27;
        v33 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v7 - 32));
        if (!v33)
          goto LABEL_111;
        v34 = v33;
        if (*((_BYTE *)v33 + 16) != 3)
          goto LABEL_111;
        v35 = *(_QWORD *)(v7 - 64);
        if (v35 && *(unsigned __int8 *)(v35 + 16) <= 0x14u)
        {
          if ((sub_1C53775E8(*(_QWORD *)(v7 - 64), (uint64_t (*)(uint64_t))sub_1C5381FC0) & 1) != 0)
            return 1;
          if (*((_BYTE *)v34 + 16))
          {
            if (*((_BYTE *)v34 + 16) == 3)
              goto LABEL_79;
LABEL_100:
            if (v35 == *((_QWORD *)v34 - 4))
              goto LABEL_105;
          }
          else if (*((llvm::Value **)v34 + 9) != (llvm::Value *)((char *)v34 + 72)
                 || (*((_BYTE *)v34 + 34) & 0x80) != 0)
          {
            goto LABEL_100;
          }
        }
        else
        {
LABEL_79:
          if ((*((_DWORD *)v34 + 5) & 0x7FFFFFF) != 0)
            goto LABEL_100;
        }
        if (*(_BYTE *)(v35 + 16) == 60 && *(llvm::Value **)(v35 - 32) == v34)
        {
LABEL_105:
          if (*(int *)(a2 + 4) <= 0)
            *(_DWORD *)(a2 + 4) = 1;
          goto LABEL_27;
        }
        v41 = *(_DWORD *)(a2 + 4);
        if (v41 > 1)
        {
          if (v41 == 2)
          {
            v42 = *(_QWORD *)(a2 + 8);
            if (v42)
              v42 = *(_QWORD *)(v42 - 64);
            if (v42 == v35)
              goto LABEL_27;
          }
          goto LABEL_111;
        }
        *(_DWORD *)(a2 + 4) = 2;
        *(_QWORD *)(a2 + 8) = v7;
        goto LABEL_27;
      }
    }
    if (v8 == 60)
    {
      result = 1;
      *(_BYTE *)(a2 + 1) = 1;
      v19 = *(unsigned __int16 *)(v7 + 18);
      if ((v19 & 1) != 0)
        return result;
      v20 = *(_DWORD *)(a2 + 28);
      v21 = (v19 >> 7) & 7;
      if (v21 == 5 && v20 == 4)
      {
        v25 = 6;
      }
      else
      {
        if (v20 <= v21)
          v23 = v21;
        else
          v23 = *(_DWORD *)(a2 + 28);
        if (v20 == 5 && v21 == 4)
          v25 = 6;
        else
          v25 = v23;
      }
      *(_DWORD *)(a2 + 28) = v25;
    }
    else if (v8 - 81 > 1)
    {
      if (!sub_1C56E895C(v7))
      {
        if (sub_1C5392540(v7))
        {
          v36 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 96);
          v37 = (llvm::APInt *)(v36 + 24);
          v38 = *(_DWORD *)(v36 + 32);
          if (v38 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v37) != v38)
              return 1;
          }
          else if (*(_QWORD *)v37)
          {
            return 1;
          }
LABEL_111:
          *(_DWORD *)(a2 + 4) = 3;
          goto LABEL_27;
        }
        result = 1;
        v40 = *(unsigned __int8 *)(v7 + 16) - 33;
        if (v40 > 0x33 || ((1 << v40) & 0x8000000000041) == 0 || v7 - 32 != v6)
          return result;
LABEL_95:
        *(_BYTE *)(a2 + 1) = 1;
        goto LABEL_27;
      }
      v26 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
      v27 = (_QWORD *)(v7 - 32 * v26);
      v28 = v27[12];
      v29 = (llvm::APInt *)(v28 + 24);
      v30 = *(_DWORD *)(v28 + 32);
      if (v30 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v29) != v30)
          return 1;
      }
      else if (*(_QWORD *)v29)
      {
        return 1;
      }
      if (*v27 == a1)
      {
        *(_DWORD *)(a2 + 4) = 3;
        v39 = -(uint64_t)(*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      }
      else
      {
        v39 = -v26;
      }
      if (*(_QWORD *)(v7 + 32 * v39 + 32) == a1)
        goto LABEL_95;
    }
    else
    {
      *(_BYTE *)a2 = 1;
    }
LABEL_27:
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      return 0;
  }
}

void llvm::makeGuardControlFlowExplicit(llvm *this, uint64_t ***a2, llvm::CallInst *a3)
{
  int v3;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t ***v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  char *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t ***v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  llvm::Function **v32;
  llvm::Function *v33;
  llvm::Function **v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  llvm::MDNode **v39;
  uint64_t v40;
  llvm::MDNode *v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t Intrinsic;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Function **v56;
  llvm::Function *v57;
  uint64_t v58;
  _QWORD v59[4];
  __int16 v60;
  uint64_t *v61;
  void *v62[2];
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  void *__dst[2];
  uint64_t v67;
  void *__p;
  void *v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  __int16 v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD v76[6];

  v3 = (int)a3;
  v76[4] = *MEMORY[0x1E0C80C00];
  sub_1C5062CEC((uint64_t)a2, 0, (uint64_t)v71);
  sub_1C5063174((uint64_t)v62, (uint64_t)v71);
  v6 = *((_DWORD *)a2 + 5);
  v7 = v6 & 0x7FFFFFF;
  v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 == 84)
  {
    v9 = 0;
  }
  else if (v8 == 39)
  {
    v9 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    v9 = 2;
  }
  v10 = &a2[-4 * v7];
  if (v6 < 0 && (v58 = (uint64_t)*(v10 - 1), (v58 & 0xFFFFFFFF0) != 0))
    v11 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v58));
  else
    v11 = 0;
  v12 = &(&a2[-4 * v9])[-4 * v11 - 4];
  v13 = v10 + 4;
  v74 = v76;
  v75 = 0x400000000;
  v14 = (char *)v12 - (char *)(v10 + 4);
  if ((unint64_t)v14 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v14 >> 5, 8);
    v15 = v75;
    v16 = v75;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  if (v13 != v12)
  {
    v17 = (char *)&v74[v15];
    v18 = 32 * v7 - 32 * v9 - 32 * v11 - 64;
    do
    {
      v19 = *v13;
      v13 += 4;
      *(_QWORD *)v17 = v19;
      v17 += 8;
      v18 -= 32;
    }
    while (v18);
  }
  LODWORD(v75) = v16 + ((unint64_t)v14 >> 5);
  v20 = a2[5];
  v21 = sub_1C5EBFBC0((llvm::Value *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (uint64_t *)a2, 1, 0, 0, 0, 0, 0);
  v22 = 0;
  v23 = (uint64_t **)v20[5];
  if (v23 != v20 + 5)
  {
    if (v23)
      v24 = (uint64_t)(v23 - 3);
    else
      v24 = 0;
    if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
      v22 = 0;
    else
      v22 = v24;
  }
  llvm::BranchInst::swapSuccessors((llvm::Instruction *)v22);
  v25 = *(uint64_t ****)(v22 - 32);
  v71[0] = "guarded";
  v73 = 259;
  llvm::Value::setName(v25, (uint64_t)v71);
  v26 = *(uint64_t ****)(v22 - 64);
  v71[0] = "deopt";
  v73 = 259;
  llvm::Value::setName(v26, (uint64_t)v71);
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_35;
  v27 = ***a2;
  v71[0] = a2;
  v28 = *(_DWORD *)(v27 + 2496);
  if (v28)
  {
    v29 = *(_QWORD *)(v27 + 2480);
    v30 = v28 - 1;
    v31 = v30 & ((a2 >> 4) ^ (a2 >> 9));
    v32 = (llvm::Function **)(v29 + 40 * v31);
    v33 = *v32;
    if (*v32 == (llvm::Function *)a2)
      goto LABEL_28;
    v34 = 0;
    v35 = 1;
    while (v33 != (llvm::Function *)-4096)
    {
      if (v34)
        v36 = 0;
      else
        v36 = v33 == (llvm::Function *)-8192;
      if (v36)
        v34 = v32;
      v37 = v31 + v35++;
      v31 = v37 & v30;
      v32 = (llvm::Function **)(v29 + 40 * v31);
      v33 = *v32;
      if (*v32 == (llvm::Function *)a2)
        goto LABEL_28;
    }
    if (v34)
      v56 = v34;
    else
      v56 = v32;
  }
  else
  {
    v56 = 0;
  }
  v32 = (llvm::Function **)sub_1C541AB24(v27 + 2480, (uint64_t)v71, (uint64_t *)v71, v56);
  v57 = (llvm::Function *)v71[0];
  v32[3] = 0;
  v32[4] = 0;
  *v32 = v57;
  v32[1] = (llvm::Function *)(v32 + 3);
  v32[2] = (llvm::Function *)0x100000000;
LABEL_28:
  v38 = *((unsigned int *)v32 + 4);
  if ((_DWORD)v38)
  {
    v39 = (llvm::MDNode **)((char *)v32[1] + 8);
    v40 = 16 * v38;
    while (*((_DWORD *)v39 - 2) != 14)
    {
      v39 += 2;
      v40 -= 16;
      if (!v40)
        goto LABEL_35;
    }
    if (*v39)
      llvm::Value::setMetadata((llvm::Value *)v22, 14, *v39);
  }
LABEL_35:
  v61 = **a2;
  v71[0] = (void *)(dword_1ED826CB8 | 0x100000000);
  v41 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v61, (uint64_t)v71, 2);
  if (v41 || *(_QWORD *)(v22 + 48) || (*(_BYTE *)(v22 + 23) & 0x20) != 0)
    llvm::Value::setMetadata((llvm::Value *)v22, 2, v41);
  sub_1C4773D54((uint64_t)v71, (uint64_t)v21, 0, 0, 0);
  if (this)
    v42 = (uint64_t **)*((_QWORD *)this + 3);
  else
    v42 = 0;
  v43 = v74;
  v44 = v75;
  if (SHIBYTE(v63) < 0)
  {
    sub_1C47EBC30(__dst, v62[0], (unint64_t)v62[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v62;
    v67 = v63;
  }
  __p = 0;
  v69 = 0;
  v70 = 0;
  sub_1C4DFE394(&__p, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 3);
  v60 = 257;
  v45 = sub_1C5062DD8((uint64_t *)v71, v42, (uint64_t)this, v43, v44, (uint64_t)__dst, 1, (uint64_t)v59, 0);
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v67) < 0)
    operator delete(__dst[0]);
  if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)this + 3) + 16) + 8) == 7)
  {
    LLVMBuildRetVoid_0((uint64_t *)v71);
  }
  else
  {
    __dst[0] = "deoptcall";
    LOWORD(v69) = 259;
    llvm::Value::setName((uint64_t ***)v45, (uint64_t)__dst);
    sub_1C538D7E4((uint64_t *)v71, (llvm::Value *)v45);
  }
  *(_WORD *)(v45 + 18) = *(_WORD *)(v45 + 18) & 0xF003 | *((_WORD *)a2 + 9) & 0xFFC;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v21 + 5) + 40, (uint64_t ***)v21);
  v46 = *((_QWORD *)v21 + 3);
  v47 = (_QWORD *)*((_QWORD *)v21 + 4);
  *v47 = v46;
  *(_QWORD *)(v46 + 8) = v47;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = 0;
  llvm::Value::deleteValue((llvm::Value *)v21);
  if (v3)
  {
    sub_1C4773D54((uint64_t)__dst, v22, 0, 0, 0);
    v59[0] = "widenable_cond";
    v60 = 259;
    Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)__dst, 138, 0, 0, 0, 0, 0, (uint64_t)v59);
    v50 = (uint64_t *)(v22 - 96);
    v49 = *(_QWORD **)(v22 - 96);
    v59[0] = "exiplicit_guard_cond";
    v60 = 259;
    v51 = sub_1C4D89BCC((uint64_t)__dst, v49, Intrinsic, (uint64_t)v59);
    if (*(_QWORD *)(v22 - 96))
    {
      **(_QWORD **)(v22 - 80) = *(_QWORD *)(v22 - 88);
      v52 = *(_QWORD *)(v22 - 88);
      if (v52)
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v22 - 80);
    }
    *v50 = v51;
    if (v51)
    {
      v55 = *(_QWORD *)(v51 + 8);
      v53 = (uint64_t **)(v51 + 8);
      v54 = v55;
      *(_QWORD *)(v22 - 88) = v55;
      if (v55)
        *(_QWORD *)(v54 + 16) = v22 - 88;
      *(_QWORD *)(v22 - 80) = v53;
      *v53 = v50;
    }
    if (__dst[0] != &v67)
      free(__dst[0]);
  }
  if (v71[0] != &v72)
    free(v71[0]);
  if (v74 != v76)
    free(v74);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (SHIBYTE(v63) < 0)
    operator delete(v62[0]);
}

uint64_t sub_1C5EFFE90()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 0x100000;
  v3 = &v2;
  *(_QWORD *)&v1 = "The probability of a guard failing is assumed to be the reciprocal of this value (default = 1 << 20)";
  *((_QWORD *)&v1 + 1) = 100;
  sub_1C61798D0((uint64_t)&unk_1ED826C38, "guards-predicate-pass-branch-weight", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED826C38, &dword_1C475E000);
}

void llvm::updateProfileCallee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  unint64_t v28;
  char v29;

  llvm::Function::getEntryCount((uint64_t ***)a1, 0, (uint64_t)&v28);
  if (v29)
  {
    v6 = v28;
    if (v28 < -a2 && a2 < 0)
      v8 = 0;
    else
      v8 = v28 + a2;
    if (a3)
    {
      v9 = sub_1C63AD0F8((uint64_t *)a3);
      v11 = *(_QWORD *)a3 + ((unint64_t)*(unsigned int *)(a3 + 16) << 6);
      if (v11 != v9)
      {
        v12 = v9;
        v13 = v10;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v12 + 24) + 16) == 84)
          {
            v14 = *(_QWORD *)(v12 + 56);
            if (v14)
            {
              if (*(_BYTE *)(v14 + 16) == 84)
                llvm::CallInst::updateProfWeight((uint64_t ***)v14, v6 - v8, v6);
            }
          }
          while (1)
          {
            v12 += 64;
            if (v12 == v13)
              break;
            if ((*(_QWORD *)(v12 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_21;
          }
          v12 = v13;
LABEL_21:
          ;
        }
        while (v12 != v11);
      }
    }
    if (a2)
    {
      llvm::Function::setEntryCount((uint64_t ***)a1, v8, 0, 0);
      v15 = a1 + 72;
      for (i = *(_QWORD *)(a1 + 80); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v15)
          return;
        v17 = i - 24;
        if (!i)
          v17 = 0;
        if (a3)
          break;
LABEL_36:
        v25 = v17 + 40;
        for (j = *(_QWORD *)(v17 + 48); j != v25; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v27 = j - 24;
          else
            v27 = 0;
          if (j)
          {
            if (*(_BYTE *)(v27 + 16) == 84)
              llvm::CallInst::updateProfWeight((uint64_t ***)v27, v8, v6);
          }
        }
LABEL_45:
        ;
      }
      v18 = *(_QWORD *)a3;
      v19 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v19)
      {
        v20 = ((_DWORD)v19 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v21 = v18 + (v20 << 6);
        v22 = *(_QWORD *)(v21 + 24);
        if (v17 == v22)
          goto LABEL_35;
        v23 = 1;
        while (v22 != -4096)
        {
          v24 = v20 + v23++;
          v20 = v24 & (v19 - 1);
          v21 = v18 + (v20 << 6);
          v22 = *(_QWORD *)(v21 + 24);
          if (v17 == v22)
            goto LABEL_35;
        }
      }
      v21 = v18 + (v19 << 6);
LABEL_35:
      if (v21 == v18 + (v19 << 6))
        goto LABEL_45;
      goto LABEL_36;
    }
  }
}

const char *llvm::InlineFunction(uint64_t ***a1, uint64_t a2, uint64_t a3, char a4, size_t a5)
{
  const char *v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int hasFnAttrOnCalledFunction;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  void **GC;
  void **v25;
  __int128 v26;
  _QWORD *v27;
  signed __int8 v28;
  uint64_t v29;
  void *v30;
  char v31;
  int v32;
  void *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  llvm::Value **v37;
  llvm::Value *v38;
  int v39;
  llvm::Value **v40;
  llvm::Value *v41;
  const llvm::Value *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t m;
  uint64_t ***v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t ****v58;
  uint64_t ***v59;
  uint64_t ****v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t ****v72;
  uint64_t ***v73;
  uint64_t ****v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t ****v82;
  uint64_t ***v83;
  uint64_t ****v84;
  uint64_t ***v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  int32x2_t *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  void *v118;
  __int16 ParamAlignment;
  unint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  int32x2_t *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  char v136;
  unsigned int v137;
  unsigned __int8 v138;
  _DWORD *v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  llvm::Value *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t (*v150)(_QWORD);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  llvm::Type *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unsigned __int8 *v165;
  char v166;
  uint64_t v167;
  char *v168;
  void **v169;
  char *v170;
  __int128 v171;
  unint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t (*v175)(_QWORD, _QWORD);
  char **v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  const llvm::DataLayout *v183;
  __int16 v184;
  uint64_t v185;
  llvm::Value *v186;
  uint64_t AlignmentAssumption;
  uint64_t (*v188)(_QWORD, _QWORD);
  uint64_t v189;
  char **v190;
  uint64_t v191;
  const llvm::Function *v192;
  llvm::DominatorTree *v193;
  _BOOL4 ArchAllowsMergeAttributes;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const llvm::Function *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  unsigned int v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v211;
  unint64_t *v212;
  uint64_t v213;
  int32x2_t *v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  int v221;
  int v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t i;
  uint64_t v241;
  uint64_t j;
  uint64_t v243;
  uint64_t k;
  uint64_t v245;
  unsigned int v246;
  BOOL v247;
  uint64_t v248;
  uint64_t *v250;
  uint64_t *v251;
  unint64_t v253;
  uint64_t v255;
  void *v256;
  llvm::ProfileSummaryInfo *v257;
  unint64_t v258;
  uint64_t **v259;
  uint64_t v260;
  char *v261;
  llvm::Value *v262;
  llvm::Value *v263;
  uint64_t v264;
  uint64_t v265;
  const char *v266;
  const llvm::APInt *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  llvm::ConstantInt *v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t ***v275;
  llvm::MDNode *v276;
  llvm *v277;
  uint64_t ***v278;
  uint64_t *v279;
  uint64_t *v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t v286;
  char *v288;
  uint64_t v289;
  char *v290;
  void *v291;
  int v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  unint64_t *v299;
  uint64_t v300;
  int32x2_t *v301;
  unint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  int v308;
  int v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t v317;
  char *v318;
  std::string::size_type v319;
  __int128 v320;
  int v321;
  char *v322;
  char *v323;
  std::string::size_type v324;
  __int128 v325;
  int v326;
  char *v327;
  uint64_t v328;
  char *v329;
  void *v330;
  uint64_t v331;
  uint64_t ****v332;
  unint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  unint64_t v339;
  BOOL v340;
  _QWORD *v341;
  llvm::CallGraphNode *v342;
  unint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  BOOL v346;
  _QWORD *v347;
  llvm::CallGraphNode *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v362;
  _QWORD *v363;
  unsigned int v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t *v369;
  unint64_t v370;
  uint64_t *v371;
  int32x2_t *v372;
  unint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t **v377;
  uint64_t *v378;
  int v379;
  int v380;
  uint64_t v381;
  unint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  unint64_t v385;
  BOOL v386;
  _QWORD *v387;
  char *v388;
  char *v389;
  void *v390;
  uint64_t v391;
  unint64_t v393;
  unint64_t *v394;
  uint64_t v395;
  int32x2_t *v396;
  unint64_t v397;
  uint64_t v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  int v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  llvm::Function **v410;
  llvm::Function *v411;
  llvm::Function **v412;
  int v413;
  BOOL v414;
  unsigned int v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  uint64_t v419;
  std::string::size_type v420;
  uint64_t *v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t **v427;
  uint64_t *v428;
  int v429;
  uint64_t v430;
  unsigned __int8 v431;
  uint64_t v432;
  unint64_t v433;
  unsigned int v434;
  int n;
  unsigned int v436;
  uint64_t v437;
  _QWORD *v438;
  BOOL v439;
  int v441;
  int v442;
  uint64_t *v443;
  uint64_t *v444;
  _QWORD *v445;
  _QWORD *ii;
  uint64_t v447;
  void *v448;
  unsigned __int8 **v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  void **v452;
  int v453;
  uint64_t v454;
  uint64_t **v455;
  unsigned __int8 **v456;
  unsigned __int8 *v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t **v462;
  uint64_t **v463;
  uint64_t v464;
  uint64_t *v465;
  llvm::MDNode *v466;
  _QWORD *v467;
  std::string *p_dst;
  uint64_t v469;
  std::string::size_type v470;
  llvm::MDNode *v471;
  uint64_t *v472;
  unint64_t v473;
  int64_t v474;
  std::string::size_type *v475;
  std::string::size_type *v476;
  std::string::size_type v477;
  uint64_t v478;
  unsigned int v479;
  uint64_t v480;
  unsigned __int8 *v481;
  uint64_t v482;
  uint64_t *v483;
  llvm::Metadata *Impl;
  uint64_t v485;
  char *v486;
  uint64_t *v487;
  uint64_t *v488;
  _QWORD *v489;
  _QWORD *jj;
  _BYTE *v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  int v495;
  unsigned int v496;
  _QWORD *v497;
  _BYTE *v498;
  _QWORD *v499;
  int v500;
  BOOL v501;
  unsigned int v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  int v509;
  unsigned int v510;
  _QWORD *v511;
  _BYTE *v512;
  _QWORD *v513;
  int v514;
  BOOL v515;
  unsigned int v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  _BOOL4 v520;
  _BYTE *v521;
  unsigned __int8 *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  _BYTE *v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;
  uint64_t **v531;
  uint64_t v532;
  uint64_t v533;
  _BYTE *v534;
  llvm::MDNode *v535;
  llvm::MDNode *v536;
  _QWORD *v537;
  void *v538;
  _QWORD *v539;
  void *v540;
  uint64_t ***v541;
  uint64_t ***v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  unsigned int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t ****v555;
  uint64_t ***v556;
  int v557;
  int v558;
  uint64_t ***v559;
  unsigned __int8 *v560;
  size_t v561;
  size_t v562;
  llvm::MDNode *v563;
  const llvm::Value *v564;
  llvm::AttributeList *v565;
  uint64_t v566;
  llvm::AttributeList *v567;
  char *v568;
  uint64_t v569;
  _BYTE *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t ****v575;
  uint64_t ***v576;
  int v577;
  int v578;
  unint64_t *v579;
  std::string::size_type v580;
  const void *v581;
  unint64_t v582;
  uint64_t ***v583;
  std::string *v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  llvm::AttributeList *v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  char *v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  void **v598;
  _BYTE *v599;
  int v600;
  int v601;
  const std::string::value_type *v602;
  std::string::size_type v603;
  _QWORD *v604;
  const std::string::value_type *v605;
  std::string::size_type v606;
  std::string::size_type v607;
  std::string *v608;
  size_t size;
  llvm::MDNode *v610;
  _QWORD *v611;
  uint64_t *v612;
  unsigned __int8 *v613;
  llvm::Value *v614;
  char *v615;
  unint64_t v616;
  char *v617;
  char *v618;
  uint64_t v619;
  int v620;
  BOOL v621;
  uint64_t ***v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t ***v625;
  uint64_t v626;
  uint64_t v627;
  _QWORD *v628;
  _QWORD *v629;
  int v630;
  _BOOL4 v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t *v634;
  uint64_t v635;
  uint64_t *v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t *v639;
  unint64_t *v640;
  uint64_t v641;
  unsigned int v642;
  unint64_t *v643;
  uint64_t v644;
  unint64_t *v645;
  int v646;
  int v647;
  unint64_t v648;
  unsigned int v649;
  BOOL v650;
  unint64_t *v651;
  unint64_t v652;
  llvm **v653;
  uint64_t v654;
  llvm *v655;
  _QWORD *v656;
  std::string::value_type *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  int v663;
  unsigned int v664;
  _QWORD *v665;
  _QWORD ***v666;
  _QWORD *v667;
  int v668;
  BOOL v669;
  unsigned int v670;
  uint64_t v671;
  llvm::MDNode **v672;
  uint64_t v673;
  llvm::MDNode *v674;
  llvm::MDNode *v675;
  llvm::MDNode *v676;
  llvm::MDNode *v677;
  char v678;
  void **v679;
  uint64_t v680;
  _QWORD *v681;
  std::string::value_type *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  int v688;
  unsigned int v689;
  _QWORD *v690;
  _QWORD ***v691;
  _QWORD *v692;
  int v693;
  BOOL v694;
  unsigned int v695;
  uint64_t v696;
  llvm::MDNode **v697;
  uint64_t v698;
  llvm::MDNode *v699;
  llvm::MDNode *v700;
  llvm::MDNode *v701;
  llvm::MDNode *v702;
  char *v703;
  int v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  _QWORD *v713;
  void *v714;
  _QWORD *v715;
  void *v716;
  int v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t **v721;
  char *v722;
  char *v723;
  uint64_t Attribute;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  llvm::LLVMContext *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  uint64_t v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v739;
  _QWORD *v740;
  uint64_t v741;
  int v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v747;
  unsigned int v748;
  unsigned int v749;
  uint64_t v750;
  BOOL v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  int32x2_t *v755;
  unint64_t v756;
  uint64_t v757;
  unsigned int v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  int v762;
  int v763;
  int v764;
  llvm::MDNode *v765;
  llvm::MDNode *v766;
  uint64_t v767;
  int v768;
  uint64_t v769;
  int v770;
  unsigned int v771;
  uint64_t ****v772;
  uint64_t ***v773;
  uint64_t ****v774;
  int v775;
  BOOL v776;
  unsigned int v777;
  uint64_t v778;
  llvm::MDNode **v779;
  uint64_t v780;
  int v781;
  llvm::MDNode *v782;
  uint64_t v783;
  int v784;
  uint64_t v785;
  int v786;
  unsigned int v787;
  uint64_t ****v788;
  uint64_t ***v789;
  uint64_t ****v790;
  int v791;
  BOOL v792;
  unsigned int v793;
  uint64_t v794;
  llvm::MDNode **v795;
  uint64_t v796;
  int v797;
  uint64_t v798;
  int v799;
  uint64_t v800;
  int v801;
  unsigned int v802;
  uint64_t ****v803;
  uint64_t ***v804;
  uint64_t ****v805;
  int v806;
  BOOL v807;
  unsigned int v808;
  uint64_t v809;
  llvm::MDNode **v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  int v815;
  unsigned int v816;
  uint64_t ****v817;
  uint64_t ***v818;
  uint64_t ****v819;
  int v820;
  BOOL v821;
  unsigned int v822;
  uint64_t v823;
  llvm::MDNode **v824;
  uint64_t v825;
  llvm::MDNode *v826;
  uint64_t *v827;
  uint64_t *v828;
  _QWORD *v829;
  _QWORD *kk;
  uint64_t ***v831;
  int v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t **v835;
  uint64_t **v836;
  int v837;
  uint64_t v838;
  int v839;
  uint64_t v840;
  int v841;
  unsigned int v842;
  uint64_t ****v843;
  uint64_t ***v844;
  uint64_t ****v845;
  int v846;
  BOOL v847;
  unsigned int v848;
  uint64_t v849;
  llvm::MDNode **v850;
  uint64_t v851;
  llvm::MDNode *v852;
  uint64_t v853;
  int v854;
  uint64_t v855;
  int v856;
  unsigned int v857;
  uint64_t ****v858;
  uint64_t ***v859;
  uint64_t ****v860;
  int v861;
  BOOL v862;
  unsigned int v863;
  uint64_t v864;
  llvm **v865;
  uint64_t v866;
  llvm *v867;
  uint64_t v868;
  int v869;
  uint64_t v870;
  int v871;
  unsigned int v872;
  uint64_t ****v873;
  uint64_t ***v874;
  uint64_t ****v875;
  int v876;
  BOOL v877;
  unsigned int v878;
  uint64_t v879;
  llvm::MDNode **v880;
  uint64_t v881;
  llvm::MDNode *v882;
  uint64_t v883;
  int v884;
  uint64_t v885;
  int v886;
  unsigned int v887;
  uint64_t ****v888;
  uint64_t ***v889;
  uint64_t ****v890;
  int v891;
  BOOL v892;
  unsigned int v893;
  uint64_t v894;
  llvm::MDNode **v895;
  uint64_t v896;
  llvm::MDNode *v897;
  uint64_t ****v898;
  uint64_t ***v899;
  uint64_t ****v900;
  uint64_t ***v901;
  uint64_t ****v902;
  uint64_t ***v903;
  uint64_t ****v904;
  uint64_t ***v905;
  uint64_t v906;
  uint64_t ***v907;
  uint64_t ***v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  unsigned int v912;
  int v913;
  llvm::AttributeFuncs *v915;
  uint64_t v916;
  uint64_t ***v917;
  uint64_t *v918;
  _QWORD *mm;
  _QWORD *v920;
  _QWORD *v921;
  _QWORD *nn;
  uint64_t v923;
  _BOOL4 v924;
  char **v925;
  uint64_t v926;
  uint64_t v927;
  unsigned __int8 **v928;
  char *v929;
  char *v930;
  uint64_t v931;
  uint64_t v932;
  unint64_t v933;
  unint64_t *v934;
  uint64_t v935;
  int32x2_t *v936;
  unint64_t v937;
  uint64_t v938;
  unsigned int v939;
  uint64_t v940;
  uint64_t *v941;
  uint64_t v942;
  int v943;
  int v944;
  unint64_t v946;
  unint64_t *v947;
  uint64_t v948;
  int32x2_t *v949;
  unint64_t v950;
  uint64_t v951;
  unsigned int v952;
  uint64_t v953;
  uint64_t *v954;
  uint64_t v955;
  int v956;
  int v957;
  llvm::LLVMContext *v958;
  llvm::MemorySSAUpdater *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t *v962;
  uint64_t *v963;
  uint64_t *v964;
  uint64_t *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t *v968;
  uint64_t *v969;
  int v970;
  uint64_t *v971;
  unint64_t v972;
  unsigned int v973;
  uint64_t v974;
  uint64_t v975;
  _QWORD *v976;
  uint64_t *v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  llvm::ValueSymbolTable *v981;
  uint64_t v982;
  llvm::ValueSymbolTable *v983;
  uint64_t *v984;
  uint64_t *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  llvm::Value *v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  llvm::Value **v994;
  llvm::Value *v995;
  int v996;
  int v997;
  uint64_t v998;
  size_t *v999;
  int v1000;
  size_t v1001;
  unsigned __int8 *v1002;
  int v1003;
  int v1004;
  _QWORD *v1005;
  int v1006;
  unint64_t v1007;
  uint64_t ***v1008;
  uint64_t ***v1009;
  unsigned int v1010;
  llvm::BasicBlock *v1011;
  int v1012;
  uint64_t v1013;
  int v1014;
  int v1015;
  uint64_t v1016;
  uint64_t **v1017;
  uint64_t v1018;
  uint64_t **v1019;
  uint64_t *v1020;
  uint64_t v1021;
  uint64_t v1022;
  unsigned int v1023;
  size_t v1024;
  int v1025;
  char v1026;
  int v1027;
  size_t v1028;
  size_t v1029;
  size_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  _QWORD *v1033;
  uint64_t v1034;
  int v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  BOOL v1040;
  unsigned int v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  __int16 v1045;
  unsigned int v1046;
  int v1047;
  __int16 v1048;
  int v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  int v1053;
  int v1054;
  uint64_t v1055;
  uint64_t v1056;
  _QWORD *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  _QWORD *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t **v1066;
  uint64_t v1067;
  uint64_t v1068;
  BOOL v1069;
  _QWORD *v1070;
  int v1071;
  _QWORD *v1072;
  uint64_t v1073;
  uint64_t v1074;
  unsigned __int8 *v1075;
  unsigned __int8 *v1076;
  unsigned __int8 *v1077;
  uint64_t v1078;
  _QWORD *v1079;
  uint64_t v1080;
  llvm::ValueSymbolTable *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t i1;
  uint64_t *v1087;
  _QWORD **v1088;
  unsigned int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  _QWORD *v1093;
  uint64_t v1094;
  BOOL v1095;
  llvm::ConstantInt *v1096;
  uint64_t *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  int v1103;
  BOOL v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  BOOL v1114;
  const llvm::APInt *v1115;
  char v1116;
  char v1117;
  llvm::APInt *v1118;
  unsigned int v1119;
  unint64_t v1120;
  unint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  llvm::ConstantInt *v1125;
  unint64_t v1126;
  unint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  uint64_t v1131;
  unsigned __int8 v1132;
  uint64_t v1133;
  unint64_t v1134;
  unsigned int v1135;
  int i2;
  unsigned int v1137;
  uint64_t *v1138;
  uint64_t v1139;
  BOOL v1140;
  uint64_t *v1142;
  uint64_t *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t **v1146;
  uint64_t *v1147;
  uint64_t *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  int v1154;
  BOOL v1155;
  uint64_t **v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  llvm::BasicBlock *v1161;
  uint64_t v1162;
  llvm::ValueAsMetadata *v1163;
  uint64_t v1164;
  int v1165;
  uint64_t v1166;
  uint64_t v1167;
  llvm::ConstantTokenNone ***v1168;
  unsigned int v1169;
  uint64_t **v1170;
  int v1171;
  uint64_t v1172;
  uint64_t v1173;
  char *v1174;
  char *v1175;
  uint64_t v1176;
  uint64_t v1177;
  llvm::BasicBlock *v1178;
  unsigned int v1180;
  int v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  __int8 *v1190;
  _QWORD *v1191;
  size_t v1192;
  unsigned int v1193;
  unsigned int v1194;
  __int8 *v1195;
  _QWORD *v1196;
  _QWORD *v1197;
  _QWORD *v1198;
  _QWORD *v1199;
  unsigned int v1200;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t i3;
  uint64_t v1205;
  uint64_t v1206;
  llvm::ConstantTokenNone ***v1207;
  llvm::ConstantTokenNone ***v1208;
  uint64_t v1209;
  llvm::ConstantTokenNone ***v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unsigned int v1214;
  uint64_t v1215;
  BOOL v1216;
  uint64_t i4;
  uint64_t ***v1218;
  uint64_t v1219;
  llvm::Value *v1220;
  llvm::CleanupReturnInst *v1221;
  llvm::CleanupReturnInst *v1222;
  uint64_t v1223;
  _QWORD *v1224;
  llvm::LLVMContext *v1225;
  uint64_t *v1226;
  uint64_t v1227;
  uint64_t *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  llvm::PHINode *v1233;
  _QWORD *v1234;
  int v1235;
  uint64_t *v1236;
  uint64_t v1237;
  unsigned int v1238;
  _QWORD *v1240;
  _QWORD *v1241;
  int v1242;
  int v1243;
  llvm::Type ***v1244;
  llvm::Type **v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t ****v1251;
  uint64_t ***v1252;
  int v1253;
  int v1254;
  uint64_t ***v1255;
  uint64_t v1256;
  char *v1257;
  uint64_t v1258;
  int v1259;
  _DWORD *v1260;
  llvm::CatchSwitchInst *v1261;
  int v1262;
  uint64_t v1263;
  uint64_t ***v1264;
  uint64_t v1265;
  llvm::BasicBlock **v1266;
  uint64_t v1267;
  llvm::BasicBlock *v1268;
  uint64_t **v1269;
  uint64_t **v1270;
  uint64_t *v1271;
  uint64_t v1272;
  uint64_t *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  llvm::PHINode *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t *v1282;
  uint64_t v1283;
  uint64_t *v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  llvm::PHINode *v1289;
  char *v1290;
  char *v1291;
  uint64_t *v1292;
  uint64_t v1293;
  char *v1294;
  uint64_t v1295;
  char *v1296;
  llvm::LandingPadInst *v1297;
  int v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  int v1302;
  char *v1303;
  unint64_t *v1304;
  unint64_t v1305;
  uint64_t ***v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  llvm::PHINode *v1315;
  _QWORD *v1316;
  _QWORD *v1317;
  uint64_t v1318;
  unsigned int v1319;
  uint64_t v1320;
  llvm::BasicBlock *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  void *v1328;
  int v1329;
  int v1330;
  _QWORD *v1331;
  uint64_t *v1332;
  uint64_t *v1333;
  uint64_t *v1334;
  uint64_t *v1335;
  uint64_t *v1336;
  int v1337;
  int v1338;
  uint64_t *v1339;
  uint64_t v1340;
  uint64_t v1341;
  llvm::ValueAsMetadata *v1342;
  uint64_t **v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  llvm::ValueAsMetadata **v1348;
  llvm::ValueAsMetadata *v1349;
  int v1350;
  int v1351;
  llvm::ValueAsMetadata *v1352;
  uint64_t *v1353;
  uint64_t *v1354;
  uint64_t *v1355;
  _QWORD *v1356;
  _QWORD *v1357;
  llvm::Value *v1358;
  char *v1359;
  uint64_t v1360;
  _QWORD *v1361;
  _QWORD *v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  llvm::ValueSymbolTable *v1366;
  uint64_t v1367;
  _QWORD *v1368;
  _QWORD *v1369;
  llvm::Value *v1370;
  char *v1371;
  uint64_t v1372;
  _QWORD *v1373;
  _QWORD *v1374;
  llvm::BasicBlock *v1375;
  _DWORD *v1376;
  uint64_t v1377;
  uint64_t *v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  llvm::PHINode *v1382;
  uint64_t v1383;
  _QWORD *v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  llvm::ValueSymbolTable *v1388;
  _QWORD *v1389;
  _QWORD *v1390;
  _QWORD *v1391;
  _QWORD *v1392;
  _QWORD *v1393;
  _QWORD *v1394;
  _QWORD *v1395;
  unsigned int v1396;
  uint64_t v1397;
  llvm::Value *v1399;
  BOOL v1400;
  uint64_t v1401;
  int v1402;
  char *v1403;
  uint64_t v1404;
  _QWORD *v1405;
  char *v1406;
  uint64_t v1407;
  char *v1408;
  void *v1409;
  unint64_t v1410;
  _QWORD *v1411;
  uint64_t v1412;
  _QWORD *v1413;
  char *v1414;
  uint64_t v1415;
  uint64_t v1416;
  llvm::ValueAsMetadata *v1417;
  _QWORD *v1418;
  uint64_t v1419;
  unsigned int v1420;
  uint64_t v1421;
  _BOOL4 v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  int v1428;
  uint64_t v1429;
  uint64_t *v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t *v1433;
  uint64_t v1434;
  _QWORD *v1435;
  uint64_t v1436;
  uint64_t **v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  _QWORD *v1441;
  uint64_t v1442;
  uint64_t **v1443;
  uint64_t v1444;
  uint64_t v1445;
  char *v1446;
  uint64_t v1447;
  char *v1448;
  void *v1449;
  uint64_t ***v1450;
  llvm::AttributeFuncs *v1451;
  uint64_t v1452;
  uint64_t *v1453;
  void **v1454;
  uint64_t *v1455;
  uint64_t v1456;
  uint64_t v1457;
  char *v1458;
  char *v1459;
  unsigned int *v1460;
  uint64_t **v1461;
  void **v1462;
  llvm::BasicBlock *v1463;
  char *v1464;
  uint64_t *v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  int v1470;
  BOOL v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t **v1475;
  uint64_t *v1476;
  uint64_t v1477;
  uint64_t v1478;
  _QWORD *v1479;
  int v1480;
  int v1481;
  uint64_t *v1482;
  uint64_t v1483;
  int v1484;
  _QWORD *v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  uint64_t v1489;
  _QWORD *v1490;
  uint64_t *v1491;
  uint64_t **v1492;
  uint64_t **v1493;
  void **v1494;
  char *v1495;
  uint64_t v1496;
  uint64_t *v1497;
  uint64_t v1498;
  uint64_t *v1499;
  void *v1500;
  uint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  char *v1504;
  uint64_t v1505;
  uint64_t ***v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  _BYTE *v1511;
  char *v1512;
  uint64_t v1513;
  char *v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  int v1518;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  int v1529;
  BOOL v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  BOOL v1536;
  int v1537;
  char *v1538;
  uint64_t v1539;
  uint64_t v1540;
  llvm::BasicBlock *v1541;
  uint64_t v1542;
  unsigned __int8 *v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  _QWORD *v1547;
  uint64_t v1548;
  uint64_t v1549;
  _QWORD *v1550;
  uint64_t *v1551;
  unsigned __int8 *v1552;
  uint64_t *i5;
  uint64_t *v1554;
  _QWORD *v1555;
  _QWORD *i6;
  _QWORD *v1557;
  unsigned int v1558;
  uint64_t v1559;
  uint64_t v1561;
  unint64_t v1562;
  uint64_t *v1563;
  uint64_t v1565;
  uint64_t *v1566;
  uint64_t v1567;
  char *v1568;
  unsigned __int8 **v1569;
  uint64_t *v1570;
  uint64_t **v1571;
  uint64_t **v1572;
  uint64_t *v1573;
  uint64_t v1574;
  _QWORD *v1575;
  uint64_t v1576;
  _QWORD *v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  llvm::Function **v1582;
  llvm::Function *v1583;
  int v1584;
  int v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  llvm::Function **v1590;
  llvm::Function *v1591;
  int v1592;
  int v1593;
  uint64_t *v1594;
  uint64_t *v1595;
  uint64_t v1597;
  llvm::ValueSymbolTable *v1598;
  uint64_t v1599;
  llvm::ValueSymbolTable *v1600;
  uint64_t *v1601;
  uint64_t *v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  llvm::BasicBlock *v1607;
  llvm::BasicBlock *v1608;
  llvm::LLVMContext *v1609;
  uint64_t v1610;
  _QWORD *v1611;
  uint64_t v1612;
  char *v1613;
  char *v1614;
  uint64_t **v1615;
  uint64_t v1616;
  uint64_t v1617;
  _QWORD *v1618;
  uint64_t v1619;
  unsigned __int8 *v1620;
  unsigned __int8 *v1621;
  unsigned __int8 **v1622;
  unsigned __int8 *v1623;
  unsigned __int8 *v1624;
  uint64_t v1625;
  llvm::UndefValue *v1626;
  llvm::Function *v1627;
  char *v1628;
  uint64_t v1629;
  uint64_t v1630;
  llvm::Type *v1631;
  uint64_t v1632;
  llvm::Function *v1633;
  char *v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t *v1637;
  uint64_t BlockFreq;
  _QWORD *v1639;
  llvm::BasicBlock *v1640;
  _QWORD *v1641;
  _QWORD *v1642;
  int v1643;
  uint64_t **v1644;
  uint64_t *v1645;
  uint64_t *v1646;
  uint64_t *v1647;
  uint64_t *v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  int v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t ****v1658;
  uint64_t ***v1659;
  int v1660;
  int v1661;
  uint64_t **v1662;
  uint64_t v1663;
  llvm::UndefValue *v1664;
  llvm::ValueAsMetadata *v1665;
  llvm::UndefValue *v1666;
  size_t v1667;
  unint64_t v1668;
  uint64_t *v1669;
  int32x2_t *v1670;
  unint64_t v1671;
  uint64_t v1672;
  unsigned int v1673;
  uint64_t v1674;
  uint64_t **v1675;
  uint64_t *v1676;
  int v1677;
  int v1678;
  llvm::ValueAsMetadata *v1679;
  unsigned __int8 *v1680;
  unsigned __int8 **v1681;
  unsigned __int8 *v1682;
  llvm::Value *v1683;
  uint64_t v1684;
  _QWORD *v1685;
  uint64_t v1686;
  char *v1687;
  llvm::MDNode *v1688;
  uint64_t ***v1689;
  char *v1690;
  uint64_t **v1691;
  uint64_t **v1692;
  uint64_t *v1693;
  _QWORD *v1694;
  _QWORD *v1695;
  llvm::Value *v1696;
  char *v1697;
  uint64_t v1698;
  _QWORD *v1699;
  _QWORD *v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  _QWORD *v1707;
  uint64_t v1708;
  char *v1709;
  char *v1710;
  llvm::Value *v1711;
  char *v1712;
  uint64_t v1713;
  void *v1714;
  unsigned __int8 *v1715;
  unsigned __int8 **v1716;
  unsigned __int8 *v1717;
  unsigned __int8 *v1718;
  uint64_t v1719;
  _QWORD *v1720;
  uint64_t v1721;
  uint64_t *v1722;
  uint64_t v1723;
  uint64_t v1724;
  llvm::ValueSymbolTable *v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  unsigned __int8 **v1729;
  unsigned __int8 *v1730;
  uint64_t **v1731;
  uint64_t **v1732;
  uint64_t v1733;
  uint64_t v1734;
  unsigned int v1735;
  BOOL v1736;
  uint64_t v1738;
  uint64_t v1739;
  llvm::BasicBlock *v1740;
  llvm::BasicBlock *v1741;
  _QWORD *v1742;
  uint64_t ***v1743;
  uint64_t ***v1744;
  uint64_t **v1745;
  uint64_t **v1746;
  int32x2_t v1747;
  int32x2_t v1748;
  int32x2_t v1749;
  __n128 v1750;
  uint64_t v1751;
  _QWORD *v1752;
  uint64_t (*v1753)(_QWORD, _QWORD, __n128);
  llvm::PHINode *v1754;
  int v1755;
  unint64_t v1756;
  uint64_t *v1757;
  int v1758;
  uint64_t v1759;
  char *v1760;
  uint64_t v1761;
  char *v1762;
  uint64_t v1763;
  char *v1764;
  llvm::UndefValue *v1765;
  uint64_t v1766;
  _QWORD *v1767;
  llvm::Value *v1768;
  uint64_t **v1769;
  uint64_t **v1770;
  uint64_t ***v1771;
  uint64_t **v1772;
  uint64_t **v1773;
  llvm::objcarc *v1774;
  _QWORD *v1775;
  llvm::Function **v1776;
  llvm::Function *v1777;
  uint64_t ****v1778;
  uint64_t ***v1779;
  uint64_t *v1780;
  llvm::ValueSymbolTable *v1781;
  uint64_t v1782;
  uint64_t *v1783;
  uint64_t v1784;
  _QWORD *v1785;
  uint64_t v1786;
  uint64_t ****v1787;
  uint64_t ***v1788;
  uint64_t ****v1789;
  uint64_t ***v1790;
  uint64_t ****v1791;
  uint64_t ***v1792;
  unint64_t v1793;
  unint64_t v1794;
  unint64_t v1795;
  uint64_t v1796;
  char *v1797;
  uint64_t v1798;
  char *v1799;
  uint64_t v1800;
  uint64_t v1801;
  unint64_t ProfileCount;
  char v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t *v1806;
  llvm::ValueSymbolTable *v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  llvm::ValueSymbolTable *v1812;
  unint64_t v1813;
  unint64_t v1814;
  uint64_t ***v1815;
  uint64_t ***v1816;
  unint64_t v1817;
  unint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  unsigned int v1821;
  int v1822;
  int FunctionClass;
  int v1825;
  uint64_t *v1826;
  llvm::AttributeList *v1827;
  uint64_t v1828;
  unsigned __int8 *v1829;
  uint64_t *v1830;
  uint64_t v1831;
  char *v1832;
  int v1833;
  uint64_t v1834;
  unsigned __int8 *v1835;
  uint64_t v1836;
  llvm::Function *Declaration;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t **v1840;
  char *v1841;
  _QWORD *v1842;
  llvm::Value *v1843;
  unsigned __int8 *v1844;
  uint64_t v1845;
  llvm::Function *v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t **v1849;
  uint64_t v1850;
  _QWORD *v1851;
  char *v1852;
  char *v1853;
  _QWORD *v1854;
  llvm::AttributeList *v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  llvm::AttributeList **v1860;
  llvm::AttributeList *v1861;
  int v1862;
  int v1863;
  uint64_t v1864;
  size_t *v1865;
  size_t v1866;
  int v1867;
  size_t v1868;
  unsigned __int8 *v1869;
  int v1870;
  unsigned int v1871;
  uint64_t v1872;
  int v1873;
  int v1874;
  uint64_t v1875;
  _QWORD *v1876;
  int64x2_t v1877;
  unsigned __int8 v1878;
  uint64_t v1879;
  uint64_t v1880;
  char *v1881;
  int v1882;
  uint64_t v1883;
  unsigned __int8 *__s1;
  int __s1a;
  unsigned int v1886;
  char v1887;
  uint64_t v1888;
  uint64_t *v1889;
  uint64_t ***v1890;
  uint64_t v1891;
  uint64_t v1892;
  _BOOL4 v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t *v1896;
  uint64_t *v1897;
  llvm::Function *v1898;
  uint64_t v1899;
  uint64_t *v1900;
  int v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  size_t __sz;
  uint64_t __sza;
  size_t __szb;
  llvm::Value *v1908;
  int v1909;
  llvm::Value *v1910;
  uint64_t *v1911;
  llvm::ConstantTokenNone ***v1912;
  uint64_t ***v1913;
  unsigned int *v1914;
  BOOL v1915;
  unsigned int v1916;
  uint64_t v1917;
  unsigned int v1918[2];
  unsigned int v1919[2];
  char *v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t *v1924;
  uint64_t *v1925;
  unsigned __int8 **v1926;
  size_t __n;
  size_t __na;
  size_t __nb;
  uint64_t *__nc;
  size_t __nf;
  size_t __nd;
  size_t __ne;
  llvm::BasicBlock *v1934;
  int v1935;
  llvm::BasicBlock *v1936;
  llvm::BasicBlock *v1937;
  llvm::BasicBlock *v1938;
  llvm::BasicBlock *v1939;
  llvm::BasicBlock *v1940;
  int v1941;
  unsigned __int8 *v1943;
  llvm::AttributeFuncs *v1944;
  uint64_t *v1945;
  llvm::PointerType *v1946;
  uint64_t v1947;
  uint64_t *v1948;
  int v1949;
  int v1950;
  unsigned int *v1951;
  unsigned int *v1952;
  _QWORD *v1953;
  uint64_t v1954;
  int v1955[2];
  llvm::AttributeList *v1956;
  llvm::AttributeList *v1957;
  int v1958;
  llvm::AttributeList *v1959;
  llvm::AttributeList *v1960;
  int v1961;
  llvm::AttributeList *v1962;
  llvm::AttributeList *v1963;
  unsigned __int8 *v1965;
  unsigned __int8 *v1966;
  unsigned __int8 *v1967;
  unsigned __int8 *v1968;
  unsigned __int8 *v1969;
  uint64_t *v1970;
  uint64_t v1971;
  char v1972;
  void *v1973[2];
  uint64_t v1974;
  __int16 v1975;
  _QWORD v1976[6];
  llvm::objcarc *v1977;
  __int128 __p;
  void *v1979;
  llvm *v1980;
  uint64_t *v1981;
  uint64_t v1982[2];
  int v1983;
  void *v1984;
  uint64_t v1985;
  llvm::ValueAsMetadata *v1986;
  llvm::PHINode *v1987;
  void *v1988;
  uint64_t v1989;
  _BYTE v1990[88];
  void *__src;
  uint64_t v1992;
  int v1993;
  __int128 v1994;
  uint64_t v1995[4];
  void *v1996;
  uint64_t v1997;
  unsigned int v1998;
  uint64_t v1999;
  char v2000;
  void *v2001;
  uint64_t v2002;
  _BYTE v2003[64];
  void *v2004;
  uint64_t v2005;
  uint64_t **v2006;
  __int16 v2007;
  char v2008;
  uint64_t v2009;
  void *v2010;
  uint64_t v2011;
  _BYTE v2012[32];
  void *v2013;
  uint64_t v2014;
  _BYTE v2015[4];
  char v2016;
  _BYTE v2017[3];
  std::string __dst;
  int v2019;
  _WORD v2020[16];
  void *v2021;
  uint64_t v2022;
  _QWORD v2023[2];
  void *v2024;
  uint64_t v2025;
  _WORD v2026[16];
  uint64_t *v2027[3];
  void *v2028;
  void *v2029;
  _QWORD *v2030;
  uint64_t v2031;
  uint64_t ***v2032;
  char v2033;
  int v2034;
  void *v2035;
  int64x2_t v2036;
  int64x2_t v2037;
  void *v2038;
  uint64_t v2039;
  char *v2040;
  uint64_t *v2041;
  void **v2042;
  llvm::BasicBlock *v2043;
  uint64_t v2044;
  int v2045;
  __int16 v2046;
  char v2047;
  uint64_t v2048;
  uint64_t v2049;
  void *v2050;
  _QWORD v2051[7];

  v2051[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a1 + 16) == 39)
    return "We don't inline callbr yet.";
  v9 = (uint64_t)a1;
  v11 = (unsigned int *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 56) = 0;
  v12 = *(_DWORD *)(a2 + 104);
  if (v12)
  {
    v208 = v10 + 24 * v12;
    do
    {
      v209 = *(_QWORD *)(v208 - 8);
      if (v209 != -8192 && v209 != -4096 && v209 != 0)
      {
        v211 = *(_QWORD *)(v208 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v211 = *(_QWORD *)(v208 - 16);
        v212 = *(unint64_t **)(v208 - 16);
        if (v212)
        {
          *v212 = *v212 & 7 | v211;
        }
        else
        {
          v213 = *(_QWORD *)(v208 - 8);
          v214 = ***(int32x2_t ****)v213;
          v215 = (unint64_t)v214[303];
          if (v215 <= v211)
          {
            v216 = v214[305].u32[0];
            if (v215 + 16 * v216 > v211)
            {
              v217 = v216 - 1;
              LODWORD(v218) = v217 & ((v213 >> 4) ^ (v213 >> 9));
              v219 = (uint64_t *)(v215 + 16 * v218);
              v220 = *v219;
              if (v213 == *v219)
              {
LABEL_315:
                *v219 = -8192;
                v214[304] = vadd_s32(v214[304], (int32x2_t)0x1FFFFFFFFLL);
                v213 = *(_QWORD *)(v208 - 8);
              }
              else
              {
                v221 = 1;
                while (v220 != -4096)
                {
                  v222 = v218 + v221++;
                  v218 = v222 & v217;
                  v220 = *(_QWORD *)(v215 + 16 * v218);
                  if (v213 == v220)
                  {
                    v219 = (uint64_t *)(v215 + 16 * v218);
                    goto LABEL_315;
                  }
                }
              }
              *(_BYTE *)(v213 + 17) &= ~1u;
            }
          }
        }
      }
      v208 -= 24;
    }
    while (v208 != v10);
  }
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 312) = 0;
  v14 = (uint64_t *)(a1 - 4);
  v13 = (uint64_t)*(a1 - 4);
  if (!v13)
    return "external or indirect";
  if (*(_BYTE *)(v13 + 16))
    return "external or indirect";
  if (*(uint64_t ***)(v13 + 24) != a1[9])
    return "external or indirect";
  v16 = v13 + 72;
  if (*(_QWORD *)(v13 + 72) == v13 + 72 && (*(_BYTE *)(v13 + 34) & 0x80) == 0)
    return "external or indirect";
  v17 = *((_DWORD *)a1 + 5);
  v1934 = (llvm::BasicBlock *)(a1 - 4);
  v1898 = (llvm::Function *)*(a1 - 4);
  if ((v17 & 0x80000000) == 0
    || (v1815 = &a1[-4 * (v17 & 0x7FFFFFF)],
        v1818 = (unint64_t)*(v1815 - 1),
        v1816 = v1815 - 1,
        v1817 = v1818,
        (v1818 & 0xFFFFFFFF0) == 0))
  {
LABEL_12:
    v18 = *(_QWORD *)(v9 + 64);
    if (v18 && (*(_BYTE *)(v18 + 16) & 0x20) != 0)
      hasFnAttrOnCalledFunction = 1;
    else
      hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 37);
    v20 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 56);
    v21 = *(_QWORD *)(v13 + 112);
    v1956 = (llvm::AttributeList *)(v13 + 112);
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 19) & 0x20) != 0)
      {
        v22 = *(_QWORD *)(v20 + 112);
        if (!v22 || (*(_BYTE *)(v22 + 19) & 0x20) == 0)
          return "incompatible strictfp attributes";
      }
    }
    v1895 = a3;
    v1901 = hasFnAttrOnCalledFunction;
    __sz = a5;
    v1892 = *(_QWORD *)(v9 + 40);
    if ((*(_WORD *)(v13 + 18) & 0x4000) == 0)
      goto LABEL_42;
    v23 = *(_WORD *)(v20 + 18);
    GC = (void **)llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)v13, (const llvm::Function *)v13);
    v25 = GC;
    if ((v23 & 0x4000) == 0)
    {
      if (*((char *)GC + 23) < 0)
      {
        sub_1C47EBC30(&__p, *GC, (unint64_t)GC[1]);
      }
      else
      {
        v26 = *(_OWORD *)GC;
        v1979 = GC[2];
        __p = v26;
      }
      llvm::Function::setGC(v20, (uint64_t)&__p);
      if (SHIBYTE(v1979) < 0)
        operator delete((void *)__p);
      goto LABEL_42;
    }
    v27 = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)v20, (const llvm::Function *)v20);
    v28 = *((_BYTE *)v25 + 23);
    v29 = v28 & 0x7F;
    if (v28 >= 0)
      v30 = (void *)(v28 & 0x7F);
    else
      v30 = v25[1];
    v31 = *((_BYTE *)v27 + 23);
    v32 = v31;
    v33 = (void *)(v31 & 0x7F);
    if (v32 < 0)
      v33 = (void *)v27[1];
    if (v30 == v33)
    {
      if (v32 >= 0)
        v34 = (unsigned __int8 *)v27;
      else
        v34 = (unsigned __int8 *)*v27;
      if ((*((_BYTE *)v25 + 23) & 0x80) == 0)
      {
        if ((v28 & 0x7F) != 0)
        {
          v5 = "incompatible GC";
          while (*(unsigned __int8 *)v25 == *v34)
          {
            v25 = (void **)((char *)v25 + 1);
            ++v34;
            if (!--v29)
              goto LABEL_42;
          }
          return v5;
        }
LABEL_42:
        if ((*(_WORD *)(v13 + 18) & 8) != 0)
        {
          v36 = *(_DWORD *)(v13 + 20);
          if ((v36 & 0x40000000) != 0)
            v37 = *(llvm::Value ***)(v13 - 8);
          else
            v37 = (llvm::Value **)(v13 - 32 * (v36 & 0x7FFFFFF));
          v38 = llvm::Value::stripPointerCasts(*v37);
          v35 = (uint64_t)v38;
          if ((*(_WORD *)(v20 + 18) & 8) == 0)
          {
            if (!v38)
              goto LABEL_59;
            goto LABEL_58;
          }
        }
        else
        {
          if ((*(_WORD *)(v20 + 18) & 8) == 0)
          {
LABEL_59:
            v1893 = 0;
            v1977 = 0;
            goto LABEL_60;
          }
          v35 = 0;
        }
        v39 = *(_DWORD *)(v20 + 20);
        if ((v39 & 0x40000000) != 0)
          v40 = *(llvm::Value ***)(v20 - 8);
        else
          v40 = (llvm::Value **)(v20 - 32 * (v39 & 0x7FFFFFF));
        v41 = llvm::Value::stripPointerCasts(*v40);
        if (!v35)
        {
          v1977 = 0;
          if (!v41)
          {
            v1893 = 0;
            goto LABEL_60;
          }
LABEL_339:
          v234 = llvm::classifyEHPersonality(v41, v42);
          v235 = v234 - 7;
          if (v234 - 7 < 4 || v234 == 12)
          {
            v237 = v234;
            sub_1C5062CEC(v9, 1, (uint64_t)&v2035);
            if (v2037.i8[0])
            {
              v1774 = *(llvm::objcarc **)v2035;
              v1977 = *(llvm::objcarc **)v2035;
            }
            else
            {
              v1774 = v1977;
            }
            if (v1774)
            {
              if (v237 == 9)
              {
                if (*((_BYTE *)v1774 + 16) == 79)
                {
                  v238 = *(_QWORD *)(v13 + 80);
                  if (v238 != v16)
                  {
                    v5 = "catch in cleanup funclet";
                    do
                    {
                      v239 = v238 - 24;
                      if (!v238)
                        v239 = 0;
                      for (i = *(_QWORD *)(v239 + 48); ; i = *(_QWORD *)(i + 8))
                      {
                        v241 = i - 24;
                        if (!i)
                          v241 = 0;
                        if (*(_BYTE *)(v241 + 16) != 83)
                          break;
                      }
                      if (*(_BYTE *)(i - 8) == 38)
                        return v5;
                      v238 = *(_QWORD *)(v238 + 8);
                    }
                    while (v238 != v16);
                  }
                }
              }
              else if (v235 <= 1)
              {
                for (j = *(_QWORD *)(v13 + 80); j != v16; j = *(_QWORD *)(j + 8))
                {
                  v243 = j - 24;
                  if (!j)
                    v243 = 0;
                  for (k = *(_QWORD *)(v243 + 48); ; k = *(_QWORD *)(k + 8))
                  {
                    v245 = k - 24;
                    if (!k)
                      v245 = 0;
                    if (*(_BYTE *)(v245 + 16) != 83)
                      break;
                  }
                  v246 = *(unsigned __int8 *)(k - 8) - 38;
                  v247 = v246 > 0x38;
                  v248 = (1 << v246) & 0x100060000000001;
                  if (!v247 && v248 != 0)
                    return "SEH in cleanup funclet";
                }
              }
            }
          }
          else
          {
            v1774 = v1977;
          }
          v1893 = 0;
          if (v1774 && *(_BYTE *)(v9 + 16) == 84)
          {
            v2036.i64[0] = 0;
            v2035 = 0;
            v2036.i32[2] = 0;
            v1775 = sub_1C5F09BD8((uint64_t)v1774, (uint64_t)&v2035);
            if (v1775)
              v1893 = *((unsigned __int8 *)v1775 + 16) != 20;
            else
              v1893 = 0;
            MEMORY[0x1CAA32FB4](v2035, 8);
          }
LABEL_60:
          v1914 = v11;
          v1887 = a4;
          v1944 = (llvm::AttributeFuncs *)v20;
          v1921 = *(_QWORD *)(v20 + 72);
          v2001 = v2003;
          v2002 = 0x800000000;
          v1975 = 0;
          memset(v1976, 0, 44);
          v1998 = 128;
          v43 = operator new(0x2000uLL, (std::align_val_t)8uLL);
          v1996 = v43;
          v1997 = 0;
          if (v1998)
          {
            v44 = (unint64_t)v1998 << 6;
            v45 = v43 + 2;
            do
            {
              *v45 = 0;
              v45[1] = -4096;
              *(v45 - 2) = &unk_1E814DA10;
              *(v45 - 1) = 2;
              v45[2] = 0;
              v45 += 8;
              v44 -= 64;
            }
            while (v44);
          }
          LOBYTE(v1999) = 0;
          v2000 = 0;
          v1984 = &v1986;
          v1985 = 0x400000000;
          v46 = *v14;
          if (!*v14 || *(_BYTE *)(v46 + 16) || *(_QWORD *)(v46 + 24) != *(_QWORD *)(v9 + 72))
            v46 = 0;
          v47 = v46 + 72;
          v1992 = 0;
          __src = 0;
          v1993 = 0;
          v1994 = 0u;
          memset(v1995, 0, 28);
          v48 = *(_QWORD *)(v46 + 80);
          if (v48 != v46 + 72)
          {
            while (1)
            {
              v49 = v48 - 24;
              if (!v48)
                v49 = 0;
              v50 = v49 + 40;
              for (m = *(_QWORD *)(v49 + 48); m != v50; m = *(_QWORD *)(m + 8))
              {
                if (m)
                  v52 = (uint64_t ***)(m - 24);
                else
                  v52 = 0;
                v2027[0] = 0;
                if ((*((_BYTE *)v52 + 23) & 0x20) == 0)
                  goto LABEL_93;
                v53 = ***v52;
                v2035 = v52;
                v54 = *(_DWORD *)(v53 + 2496);
                if (v54)
                {
                  v55 = *(_QWORD *)(v53 + 2480);
                  v56 = v54 - 1;
                  v57 = v56 & ((v52 >> 4) ^ (v52 >> 9));
                  v58 = (uint64_t ****)(v55 + 40 * v57);
                  v59 = *v58;
                  if (*v58 == v52)
                    goto LABEL_86;
                  v60 = 0;
                  v61 = 1;
                  while (v59 != (uint64_t ***)-4096)
                  {
                    if (v60)
                      v62 = 0;
                    else
                      v62 = v59 == (uint64_t ***)-8192;
                    if (v62)
                      v60 = v58;
                    v63 = v57 + v61++;
                    v57 = v63 & v56;
                    v58 = (uint64_t ****)(v55 + 40 * v57);
                    v59 = *v58;
                    if (*v58 == v52)
                      goto LABEL_86;
                  }
                  if (v60)
                    v82 = v60;
                  else
                    v82 = v58;
                }
                else
                {
                  v82 = 0;
                }
                v58 = (uint64_t ****)sub_1C541AB24(v53 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v82);
                v83 = (uint64_t ***)v2035;
                v58[4] = 0;
                v58[3] = 0;
                *v58 = v83;
                v58[1] = (uint64_t ***)(v58 + 3);
                v58[2] = (uint64_t ***)0x100000000;
LABEL_86:
                v64 = *((unsigned int *)v58 + 4);
                if ((_DWORD)v64)
                {
                  v65 = (uint64_t **)(v58[1] + 1);
                  v66 = 16 * v64;
                  while (*((_DWORD *)v65 - 2) != 7)
                  {
                    v65 += 2;
                    v66 -= 16;
                    if (!v66)
                      goto LABEL_93;
                  }
                  v2027[0] = *v65;
                  if (v2027[0])
                    sub_1C4A07D1C((uint64_t)&__src, v2027);
                }
LABEL_93:
                v2027[0] = 0;
                if ((*((_BYTE *)v52 + 23) & 0x20) == 0)
                  goto LABEL_111;
                v67 = ***v52;
                v2035 = v52;
                v68 = *(_DWORD *)(v67 + 2496);
                if (v68)
                {
                  v69 = *(_QWORD *)(v67 + 2480);
                  v70 = v68 - 1;
                  v71 = v70 & ((v52 >> 4) ^ (v52 >> 9));
                  v72 = (uint64_t ****)(v69 + 40 * v71);
                  v73 = *v72;
                  if (*v72 == v52)
                    goto LABEL_104;
                  v74 = 0;
                  v75 = 1;
                  while (v73 != (uint64_t ***)-4096)
                  {
                    if (v74)
                      v76 = 0;
                    else
                      v76 = v73 == (uint64_t ***)-8192;
                    if (v76)
                      v74 = v72;
                    v77 = v71 + v75++;
                    v71 = v77 & v70;
                    v72 = (uint64_t ****)(v69 + 40 * v71);
                    v73 = *v72;
                    if (*v72 == v52)
                      goto LABEL_104;
                  }
                  if (v74)
                    v84 = v74;
                  else
                    v84 = v72;
                }
                else
                {
                  v84 = 0;
                }
                v72 = (uint64_t ****)sub_1C541AB24(v67 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v84);
                v85 = (uint64_t ***)v2035;
                v72[4] = 0;
                v72[3] = 0;
                *v72 = v85;
                v72[1] = (uint64_t ***)(v72 + 3);
                v72[2] = (uint64_t ***)0x100000000;
LABEL_104:
                v78 = *((unsigned int *)v72 + 4);
                if ((_DWORD)v78)
                {
                  v79 = (uint64_t **)(v72[1] + 1);
                  v80 = 16 * v78;
                  while (*((_DWORD *)v79 - 2) != 8)
                  {
                    v79 += 2;
                    v80 -= 16;
                    if (!v80)
                      goto LABEL_111;
                  }
                  v2027[0] = *v79;
                  if (v2027[0])
                    sub_1C4A07D1C((uint64_t)&__src, v2027);
                }
LABEL_111:
                v81 = sub_1C5790664((uint64_t)v52);
                if (m && v81)
                {
                  v2035 = v52[-4 * (*((_DWORD *)v52 + 5) & 0x7FFFFFF)][3];
                  sub_1C4A07D1C((uint64_t)&__src, &v2035);
                }
              }
              v48 = *(_QWORD *)(v48 + 8);
              if (v48 == v47)
              {
                v87 = (char *)*((_QWORD *)&v1994 + 1);
                v86 = (char *)v1994;
                v9 = (uint64_t)a1;
                goto LABEL_128;
              }
            }
          }
          v87 = 0;
          v86 = 0;
LABEL_128:
          v2035 = &v2036.u64[1];
          v2036.i64[0] = 0x1000000000;
          v88 = v87 - v86;
          if ((unint64_t)(v87 - v86) >= 0x81)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2035, (uint64_t)&v2036.i64[1], v88 >> 3, 8);
            v89 = v2036.u32[0];
            v90 = v2036.i32[0];
          }
          else
          {
            v89 = 0;
            v90 = 0;
          }
          if (v86 != v87)
          {
            v1785 = (char *)v2035 + 8 * v89;
            do
            {
              v1786 = *(_QWORD *)v86;
              v86 += 8;
              *v1785++ = v1786;
            }
            while (v86 != v87);
          }
          v91 = v90 + ((unint64_t)v88 >> 3);
          v2036.i32[0] = v91;
          while (v91)
          {
            v92 = *((_QWORD *)v2035 + --v91);
            v2036.i32[0] = v91;
            v93 = *(unsigned int *)(v92 + 8);
            if ((_DWORD)v93)
            {
              v94 = -8 * v93;
              do
              {
                v95 = *(uint64_t **)(v92 + v94);
                v2027[0] = 0;
                if (*(unsigned __int8 *)v95 - 4 <= 0x1E)
                {
                  v2027[0] = v95;
                  if (sub_1C4A07D1C((uint64_t)&__src, v2027))
                  {
                    v96 = v2027[0];
                    v97 = v2036.u32[0];
                    if (v2036.u32[0] >= (unint64_t)v2036.u32[1])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2035, (uint64_t)&v2036.i64[1], v2036.u32[0] + 1, 8);
                      v97 = v2036.u32[0];
                    }
                    *((_QWORD *)v2035 + v97) = v96;
                    ++v2036.i32[0];
                  }
                }
                v94 += 8;
              }
              while (v94);
              v91 = v2036.i32[0];
            }
          }
          if (v2035 != &v2036.u64[1])
            free(v2035);
          v98 = *(_DWORD *)(v9 + 20);
          *(_QWORD *)v1955 = v20 + 72;
          if ((*(_WORD *)(v13 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v13);
            v99 = *(_QWORD *)(v13 + 88);
            if ((*(_WORD *)(v13 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v13);
              v100 = *(_QWORD *)(v13 + 88);
LABEL_149:
              v101 = v100 + 40 * *(_QWORD *)(v13 + 96);
              if (v99 != v101)
              {
                v102 = 0;
                v103 = (uint64_t *)(v9 - 32 * (v98 & 0x7FFFFFF));
                while (1)
                {
                  v104 = *v103;
                  if (llvm::CallBase::paramHasAttr(v9, v102, 69))
                    break;
                  v105 = (void *)v104;
LABEL_153:
                  v2036 = (int64x2_t)2uLL;
                  v2037.i64[0] = v99;
                  if (v99 != -8192 && v99 != -4096 && v99)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v2036);
                  v2035 = &unk_1E814DA10;
                  v2037.i64[1] = (uint64_t)&v1996;
                  v106 = sub_1C52E2ED8((uint64_t)&v1996, &v2035);
                  if (v2037.i64[0] != -8192 && v2037.i64[0] != -4096 && v2037.i64[0])
                  {
                    v107 = v2036.i64[0] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v2036.i64[0] & 0xFFFFFFFFFFFFFFF8) = v2036.i64[1];
                    if (v2036.i64[1])
                    {
                      *(_QWORD *)v2036.i64[1] = *(_QWORD *)v2036.i64[1] & 7 | v107;
                    }
                    else
                    {
                      v108 = v2037.i64[0];
                      v109 = ***(int32x2_t ****)v2037.i64[0];
                      v110 = (unint64_t)v109[303];
                      if (v110 <= v107)
                      {
                        v111 = v109[305].u32[0];
                        if (v110 + 16 * v111 > v107)
                        {
                          v112 = v111 - 1;
                          LODWORD(v113) = v112 & (((unsigned __int32)v2037.i32[0] >> 4) ^ ((unsigned __int32)v2037.i32[0] >> 9));
                          v114 = (uint64_t *)(v110 + 16 * v113);
                          v115 = *v114;
                          if (v2037.i64[0] == *v114)
                          {
LABEL_168:
                            *v114 = -8192;
                            v109[304] = vadd_s32(v109[304], (int32x2_t)0x1FFFFFFFFLL);
                            v108 = v2037.i64[0];
                          }
                          else
                          {
                            v116 = 1;
                            while (v115 != -4096)
                            {
                              v117 = v113 + v116++;
                              v113 = v117 & v112;
                              v115 = *(_QWORD *)(v110 + 16 * v113);
                              if (v2037.i64[0] == v115)
                              {
                                v114 = (uint64_t *)(v110 + 16 * v113);
                                goto LABEL_168;
                              }
                            }
                          }
                          *(_BYTE *)(v108 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v118 = (void *)v106[7];
                  if (v118 != v105)
                  {
                    if (v118 && v118 != (void *)-8192 && v118 != (void *)-4096)
                    {
                      v123 = v106[5] & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v123 = v106[6];
                      v124 = (unint64_t *)v106[6];
                      if (v124)
                      {
                        *v124 = *v124 & 7 | v123;
                      }
                      else
                      {
                        v125 = v106[7];
                        v126 = ***(int32x2_t ****)v125;
                        v127 = (unint64_t)v126[303];
                        if (v127 <= v123)
                        {
                          v128 = v126[305].u32[0];
                          if (v127 + 16 * v128 > v123)
                          {
                            v129 = v128 - 1;
                            LODWORD(v130) = v129 & ((v125 >> 4) ^ (v125 >> 9));
                            v131 = (uint64_t *)(v127 + 16 * v130);
                            v132 = *v131;
                            if (v125 == *v131)
                            {
LABEL_196:
                              *v131 = -8192;
                              v126[304] = vadd_s32(v126[304], (int32x2_t)0x1FFFFFFFFLL);
                              v125 = v106[7];
                            }
                            else
                            {
                              v133 = 1;
                              while (v132 != -4096)
                              {
                                v134 = v130 + v133++;
                                v130 = v134 & v129;
                                v132 = *(_QWORD *)(v127 + 16 * v130);
                                if (v125 == v132)
                                {
                                  v131 = (uint64_t *)(v127 + 16 * v130);
                                  goto LABEL_196;
                                }
                              }
                            }
                            *(_BYTE *)(v125 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v106[7] = v105;
                    if (v105 != (void *)-8192 && v105 != (void *)-4096 && v105)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v106 + 5));
                  }
                  v99 += 40;
                  v103 += 4;
                  ++v102;
                  if (v99 == v101)
                    goto LABEL_241;
                }
                v1946 = (llvm::PointerType *)sub_1C6199478(v9, v102);
                ParamAlignment = llvm::AttributeList::getParamAlignment(v1956, v102);
                if ((ParamAlignment & 0xFF00) != 0)
                  v120 = (1 << ParamAlignment);
                else
                  v120 = 0;
                v121 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 56);
                v122 = (unsigned __int8 *)(*(_QWORD *)(v121 + 40) + 272);
                if (*(_QWORD *)v1956 && (*(_BYTE *)(*(_QWORD *)v1956 + 17) & 0x30) != 0)
                {
                  if (v120 < 2)
                  {
                    v105 = (void *)v104;
                    goto LABEL_231;
                  }
                  v1899 = *(_QWORD *)(v121 + 40);
                  v150 = *(uint64_t (**)(_QWORD))(a2 + 8);
                  v1908 = *(llvm::Value **)(*(_QWORD *)(v9 + 40) + 56);
                  if (v150)
                  {
                    v151 = *(_QWORD *)(v121 + 40) + 272;
                    v152 = v150(*(_QWORD *)(a2 + 16));
                    v122 = (unsigned __int8 *)v151;
                    v153 = v152;
                  }
                  else
                  {
                    v153 = 0;
                  }
                  v164 = __clz(v120);
                  v135 = v164 ^ 0x13F;
                  v165 = v122;
                  v166 = llvm::getOrEnforceKnownAlignment(v104, (unsigned __int16)v164 ^ 0x13Fu, v122, v9, v153, 0);
                  v122 = v165;
                  if (1 << v166 >= (unint64_t)v120)
                  {
                    v105 = (void *)v104;
LABEL_231:
                    v167 = *v103;
                    if (v105 != (void *)*v103)
                    {
                      v2035 = v105;
                      v2036.i64[0] = v167;
                      v2036.i64[1] = sub_1C6199478(v9, v102);
                      v168 = (char *)v1984;
                      if (v1985 >= HIDWORD(v1985))
                      {
                        v172 = v1985 + 1;
                        if (v1984 <= &v2035 && (char *)v1984 + 24 * v1985 > (char *)&v2035)
                        {
                          v173 = (char *)&v2035 - (_BYTE *)v1984;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1984, (uint64_t)&v1986, v172, 24);
                          v168 = (char *)v1984;
                          v169 = (void **)((char *)v1984 + v173);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1984, (uint64_t)&v1986, v172, 24);
                          v169 = &v2035;
                          v168 = (char *)v1984;
                        }
                        v9 = (uint64_t)a1;
                      }
                      else
                      {
                        v169 = &v2035;
                      }
                      v170 = &v168[24 * v1985];
                      v171 = *(_OWORD *)v169;
                      *((_QWORD *)v170 + 2) = v169[2];
                      *(_OWORD *)v170 = v171;
                      LODWORD(v1985) = v1985 + 1;
                    }
                    goto LABEL_153;
                  }
                }
                else
                {
                  v1899 = *(_QWORD *)(v121 + 40);
                  v1908 = *(llvm::Value **)(*(_QWORD *)(v9 + 40) + 56);
                  v135 = __clz(v120) ^ 0x13F;
                }
                llvm::DataLayout::getAlignment((uint64_t)v122, (uint64_t)v1946);
                v137 = __clz(1 << v136) ^ 0x3F;
                if (!(_DWORD)v120)
                  v135 = 0;
                if ((v135 & 0x3F) <= v137)
                  v138 = v137;
                else
                  v138 = v135;
                v139 = operator new(0x68uLL);
                v105 = v139 + 8;
                v139[13] = v139[13] & 0x38000000 | 1;
                *(_QWORD *)v139 = 0;
                *((_QWORD *)v139 + 1) = 0;
                *((_QWORD *)v139 + 2) = 0;
                *((_QWORD *)v139 + 3) = v139 + 8;
                if (v135 >= 0x100)
                  v140 = v138;
                else
                  v140 = v137;
                if ((*(_BYTE *)(v104 + 23) & 0x10) == 0)
                {
                  v155 = 0;
                  v156 = &byte_1C871356D;
                  v9 = (uint64_t)a1;
                  v144 = v1908;
                  goto LABEL_219;
                }
                v141 = ***(_QWORD ***)v104;
                v142 = *(_QWORD *)(v141 + 152);
                v143 = *(unsigned int *)(v141 + 168);
                v9 = (uint64_t)a1;
                v144 = v1908;
                if ((_DWORD)v143)
                {
                  LODWORD(v145) = (v143 - 1) & ((v104 >> 4) ^ (v104 >> 9));
                  v146 = (uint64_t *)(v142 + 16 * v145);
                  v147 = *v146;
                  if (*v146 == v104)
                  {
LABEL_218:
                    v154 = (_QWORD *)v146[1];
                    v157 = *v154;
                    v156 = (char *)(v154 + 2);
                    v155 = v157;
LABEL_219:
                    v158 = (llvm::Type *)*(unsigned int *)(v1899 + 276);
                    v2037.i16[4] = 261;
                    v2035 = v156;
                    v2036.i64[0] = v155;
                    v159 = *((_QWORD *)v144 + 10);
                    if (v159)
                      v160 = v159 - 24;
                    else
                      v160 = 0;
                    v161 = *(_QWORD *)(v160 + 48);
                    if (v161)
                      v162 = v161 - 24;
                    else
                      v162 = 0;
                    llvm::AllocaInst::AllocaInst((uint64_t)(v139 + 8), v1946, v158, 0, v140, (uint64_t)&v2035, v162);
                    v163 = *(unsigned int *)(a2 + 56);
                    if (v163 >= *(unsigned int *)(a2 + 60))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 48, a2 + 64, v163 + 1, 8);
                      v163 = *(unsigned int *)(a2 + 56);
                    }
                    *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v163) = v105;
                    ++*(_DWORD *)(a2 + 56);
                    goto LABEL_231;
                  }
                  v148 = 1;
                  while (v147 != -4096)
                  {
                    v149 = v145 + v148++;
                    v145 = v149 & (v143 - 1);
                    v147 = *(_QWORD *)(v142 + 16 * v145);
                    if (v147 == v104)
                    {
                      v146 = (uint64_t *)(v142 + 16 * v145);
                      goto LABEL_218;
                    }
                  }
                }
                v146 = (uint64_t *)(v142 + 16 * v143);
                goto LABEL_218;
              }
LABEL_241:
              v174 = a2;
              if (!byte_1ED826EF8 || (v175 = *(uint64_t (**)(_QWORD, _QWORD))(a2 + 8)) == 0)
              {
LABEL_270:
                v188 = *(uint64_t (**)(_QWORD, _QWORD))(v174 + 8);
                v189 = (uint64_t)v1898;
                if (v188)
                  v190 = (char **)v188(*(_QWORD *)(v174 + 16), v1944);
                else
                  v190 = 0;
                v191 = *((_QWORD *)v1944 + 5);
                if (*(char *)(v191 + 239) < 0)
                {
                  sub_1C47EBC30(v1973, *(void **)(v191 + 216), *(_QWORD *)(v191 + 224));
                }
                else
                {
                  *(_OWORD *)v1973 = *(_OWORD *)(v191 + 216);
                  v1974 = *(_QWORD *)(v191 + 232);
                }
                ArchAllowsMergeAttributes = llvm::GPUBaseInfo::getArchAllowsMergeAttributes((uint64_t)v1973);
                if (SHIBYTE(v1974) < 0)
                  operator delete(v1973[0]);
                if (ArchAllowsMergeAttributes)
                  llvm::AttributeFuncs::mergeAttributesForOutlining(v1944, v1898, v192);
                llvm::salvageKnowledge((llvm *)v9, v190, 0, v193);
                v195 = *((_QWORD *)v1898 + 10);
                if (v195)
                  v196 = v195 - 24;
                else
                  v196 = 0;
                v197 = *(_QWORD *)(v196 + 48);
                if (v197)
                  v198 = v197 - 24;
                else
                  v198 = 0;
                llvm::CloneAndPruneIntoFromInst((uint64_t)v1944, (uint64_t)v1898, v198, (uint64_t)&v1996, 0, (uint64_t)&v2001, (uint64_t)".i", (uint64_t)&v1975);
                v1900 = *(uint64_t **)(v1921 + 8);
                sub_1C5062CEC(v9, 6, (uint64_t)&v2035);
                if (v2037.i8[0])
                {
                  FunctionClass = llvm::objcarc::GetFunctionClass(*(llvm::objcarc **)v2035, v199);
                  if (FunctionClass != 24)
                  {
                    if ((_DWORD)v2002)
                    {
                      v1825 = FunctionClass;
                      v1826 = (uint64_t *)a1[5][7][5];
                      v1827 = (llvm::AttributeList *)v2001;
                      v1962 = (llvm::AttributeList *)((char *)v2001 + 8 * v2002);
                      do
                      {
                        v1828 = *(_QWORD *)v1827;
                        v1829 = (unsigned __int8 *)sub_1C61AB204(*(llvm::Value **)(*(_QWORD *)v1827
                                                                                 - 32
                                                                                 * (*(_DWORD *)(*(_QWORD *)v1827 + 20) & 0x7FFFFFF)));
                        v1830 = **(uint64_t ***)v1828;
                        v2035 = &v2036.u64[1];
                        v2036.i64[0] = 0x200000000;
                        v2041 = v1830;
                        v2042 = &v2050;
                        v2043 = (llvm::BasicBlock *)v2051;
                        v2044 = 0;
                        v2045 = 0;
                        v2046 = 512;
                        v2047 = 7;
                        v2039 = 0;
                        v2040 = 0;
                        v2048 = 0;
                        v2049 = 0;
                        v2050 = &unk_1E8167888;
                        v2051[0] = &unk_1E8167A08;
                        v1831 = *(_QWORD *)(v1828 + 40);
                        v1832 = (char *)(v1828 + 24);
                        do
                        {
                          v1832 = *(char **)v1832;
                          if (v1832 == (char *)(v1831 + 40))
                          {
                            if (v1825 != 1)
                              goto LABEL_2780;
                            goto LABEL_2773;
                          }
                          v1833 = *(v1832 - 8);
                        }
                        while ((v1833 - 66) < 0xD);
                        if (v1833 == 84)
                        {
                          v1890 = (uint64_t ***)(v1832 - 24);
                          v1834 = *((_QWORD *)v1832 - 7);
                          if (v1834
                            && !*(_BYTE *)(v1834 + 16)
                            && *(_QWORD *)(v1834 + 24) == *((_QWORD *)v1832 + 6)
                            && (*(_BYTE *)(v1834 + 33) & 0x20) != 0)
                          {
                            if (*(_DWORD *)(v1834 + 36) == 211
                              && !*((_QWORD *)v1832 - 2)
                              && sub_1C61AB204((llvm::Value *)v1890[-4 * (*((_DWORD *)v1832 - 1) & 0x7FFFFFF)]) == (llvm::Value *)v1829)
                            {
                              if (v1825 != 1)
                              {
                                v2039 = *((_QWORD *)v1832 + 2);
                                v2040 = v1832;
                                v1835 = (unsigned __int8 *)*((_QWORD *)v1832 + 3);
                                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1835;
                                if (v1835)
                                {
                                  llvm::MetadataTracking::track((uint64_t)&__dst, v1835, 2);
                                  v1836 = __dst.__r_.__value_.__r.__words[0];
                                }
                                else
                                {
                                  v1836 = 0;
                                }
                                sub_1C4774EF4((uint64_t)&v2035, 0, v1836);
                                if (__dst.__r_.__value_.__r.__words[0])
                                  llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
                                Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v1826, 221, 0, 0);
                                v1838 = (uint64_t)Declaration;
                                v2024 = 0;
                                if ((*((_WORD *)Declaration + 9) & 1) != 0)
                                  llvm::Function::BuildLazyArguments(Declaration);
                                v1839 = **(_QWORD **)(v1838 + 88);
                                v2020[0] = 257;
                                v2024 = sub_1C4773E38((uint64_t *)&v2035, 49, v1829, v1839, (uint64_t)&__dst);
                                v1840 = *(uint64_t ***)(v1838 + 24);
                                v2020[0] = 257;
                                sub_1C4774778((uint64_t *)&v2035, v1840, v1838, (uint64_t *)&v2024, 1, (uint64_t)&__dst, 0);
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1832 + 2) + 40, v1890);
                              v1841 = *(char **)v1832;
                              v1842 = (_QWORD *)*((_QWORD *)v1832 + 1);
                              *v1842 = *(_QWORD *)v1832;
                              *((_QWORD *)v1841 + 1) = v1842;
                              *(_QWORD *)v1832 = 0;
                              *((_QWORD *)v1832 + 1) = 0;
                              v1843 = (llvm::Value *)(v1832 - 24);
LABEL_2793:
                              llvm::Value::deleteValue(v1843);
                              goto LABEL_2780;
                            }
                          }
                          else if (sub_1C61AB204((llvm::Value *)v1890) == (llvm::Value *)v1829)
                          {
                            if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v1832 + 6) + 16) + 8) == 7
                              || (sub_1C5062CEC((uint64_t)v1890, 6, (uint64_t)&__dst), !(_BYTE)v2019))
                            {
                              sub_1C5062CEC((uint64_t)a1, 6, (uint64_t)&__dst);
                              if ((_BYTE)v2019)
                                v1850 = *(_QWORD *)__dst.__r_.__value_.__l.__data_;
                              else
                                v1850 = 0;
                              strcpy((char *)v2027, "clang.arc.attachedcall");
                              HIBYTE(v2027[2]) = 22;
                              v1851 = operator new(8uLL);
                              v2028 = v1851;
                              *v1851 = v1850;
                              v2030 = v1851 + 1;
                              v2029 = v1851 + 1;
                              v1852 = llvm::CallBase::addOperandBundle((uint64_t)v1890, 6, (unint64_t)v2027, (llvm::Instruction *)v1890);
                              if (v2028)
                              {
                                v2029 = v2028;
                                operator delete(v2028);
                              }
                              if (SHIBYTE(v2027[2]) < 0)
                                operator delete(v2027[0]);
                              llvm::Instruction::copyMetadata((uint64_t)v1852, (uint64_t)v1890, 0, 0);
                              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1890, (llvm::Value *)v1852, (llvm::Value *)1);
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1832 + 2) + 40, v1890);
                              v1853 = *(char **)v1832;
                              v1854 = (_QWORD *)*((_QWORD *)v1832 + 1);
                              *v1854 = *(_QWORD *)v1832;
                              *((_QWORD *)v1853 + 1) = v1854;
                              *(_QWORD *)v1832 = 0;
                              *((_QWORD *)v1832 + 1) = 0;
                              v1843 = (llvm::Value *)(v1832 - 24);
                              goto LABEL_2793;
                            }
                          }
                        }
                        if (v1825 != 1)
                          goto LABEL_2780;
                        v1831 = *(_QWORD *)(v1828 + 40);
LABEL_2773:
                        v2039 = v1831;
                        v2040 = (char *)(v1828 + 24);
                        v1844 = *(unsigned __int8 **)(v1828 + 48);
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1844;
                        if (v1844)
                        {
                          llvm::MetadataTracking::track((uint64_t)&__dst, v1844, 2);
                          v1845 = __dst.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          v1845 = 0;
                        }
                        sub_1C4774EF4((uint64_t)&v2035, 0, v1845);
                        if (__dst.__r_.__value_.__r.__words[0])
                          llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
                        v1846 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v1826, 222, 0, 0);
                        v1847 = (uint64_t)v1846;
                        v2024 = 0;
                        if ((*((_WORD *)v1846 + 9) & 1) != 0)
                          llvm::Function::BuildLazyArguments(v1846);
                        v1848 = **(_QWORD **)(v1847 + 88);
                        v2020[0] = 257;
                        v2024 = sub_1C4773E38((uint64_t *)&v2035, 49, v1829, v1848, (uint64_t)&__dst);
                        v1849 = *(uint64_t ***)(v1847 + 24);
                        v2020[0] = 257;
                        sub_1C4774778((uint64_t *)&v2035, v1849, v1847, (uint64_t *)&v2024, 1, (uint64_t)&__dst, 0);
LABEL_2780:
                        if (v2035 != &v2036.u64[1])
                          free(v2035);
                        v1827 = (llvm::AttributeList *)((char *)v1827 + 8);
                      }
                      while (v1827 != v1962);
                    }
                    v9 = (uint64_t)a1;
                    v174 = a2;
                    v189 = (uint64_t)v1898;
                  }
                }
                if (!*(_BYTE *)(v174 + 384))
                {
LABEL_409:
                  if ((_DWORD)v1985)
                  {
                    if (v1900)
                      v259 = (uint64_t **)(v1900 - 3);
                    else
                      v259 = 0;
                    v260 = 24 * v1985;
                    v261 = (char *)v1984 + 8;
                    do
                    {
                      v263 = (llvm::Value *)*((_QWORD *)v261 - 1);
                      v262 = *(llvm::Value **)v261;
                      v264 = *((_QWORD *)v261 + 1);
                      v265 = *((_QWORD *)v1944 + 5);
                      sub_1C4D8ADA0((uint64_t)&v2035, v259, (uint64_t)v259[6], 0, 0, 0);
                      sub_1C4768AD0(v265 + 272, v264);
                      v269 = v268;
                      if ((_DWORD)v266 == 1)
                      v270 = (unint64_t)(v269 + 7) >> 3;
                      v271 = *(llvm::ConstantInt **)(*v2041 + 1984);
                      v272 = *(_DWORD *)(*v2041 + 1992);
                      LODWORD(v2027[1]) = v272 >> 8;
                      if (v272 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)v2027, v270, 0);
                      }
                      else
                      {
                        if (v272 <= 0xFF)
                          v273 = 0;
                        else
                          v273 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v272);
                        v2027[0] = (uint64_t *)(v273 & v270);
                      }
                      v274 = (uint64_t *)llvm::ConstantInt::get(v271, (llvm::LLVMContext *)v2027, v267);
                      if (LODWORD(v2027[1]) >= 0x41 && v2027[0])
                        MEMORY[0x1CAA32F9C](v2027[0], 0x1000C8000313F17);
                      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v2035, 194, v263, 256, v262, 256, v274, 0, 0, 0, 0, 0);
                      if (v2035 != &v2036.u64[1])
                        free(v2035);
                      v261 += 24;
                      v260 -= 24;
                    }
                    while (v260);
                  }
                  v275 = a1;
                  sub_1C5062CEC((uint64_t)a1, 0, (uint64_t)&v1970);
                  v279 = (uint64_t *)a2;
                  v278 = (uint64_t ***)v1944;
                  v280 = *(uint64_t **)v1955;
                  if (v1972)
                  {
                    v2035 = &v2036.u64[1];
                    v2036.i64[0] = 0x200000000;
                    v282 = (_QWORD *)v1976[1];
                    v281 = (_QWORD *)v1976[0];
                    if (v1976[0] != v1976[1])
                    {
                      do
                      {
                        v283 = v281[2];
                        if (v283)
                        {
                          v284 = *(unsigned __int8 *)(v283 + 16);
                          if (v284 >= 0x1C)
                          {
                            v285 = v284 - 33;
                            v247 = v285 > 0x33;
                            v286 = (1 << v285) & 0x8000000000041;
                            if (!v247 && v286 != 0)
                            {
                              if (v2036.i32[0])
                              {
                                v288 = (char *)v2035;
                                v289 = 48 * v2036.u32[0];
                                do
                                {
                                  v290 = &v288[v289];
                                  v291 = *(void **)&v288[v289 - 24];
                                  if (v291)
                                  {
                                    *((_QWORD *)v290 - 2) = v291;
                                    operator delete(v291);
                                  }
                                  if (*(v290 - 25) < 0)
                                    operator delete(*((void **)v290 - 6));
                                  v289 -= 48;
                                }
                                while (v289);
                              }
                              v2036.i32[0] = 0;
                              v292 = *(_DWORD *)(v283 + 20);
                              if (v292 < 0)
                                v293 = *(_QWORD *)(v283 - 32 * (v292 & 0x7FFFFFF) - 8);
                              else
                                v293 = 0;
                              if (v2036.i32[1] < (v293 >> 4))
                              {
                                sub_1C61D6438((uint64_t)&v2035, (v293 >> 4));
                                v292 = *(_DWORD *)(v283 + 20);
                              }
                              v279 = (uint64_t *)a2;
                              v280 = *(uint64_t **)v1955;
                              if (v292 < 0)
                              {
                                v310 = *(_QWORD *)(v283 - 32 * (v292 & 0x7FFFFFF) - 8);
                                if ((v310 & 0xFFFFFFFF0) != 0)
                                {
                                  v1947 = (v310 >> 4);
                                  v1957 = (llvm::AttributeList *)v283;
                                  do
                                  {
                                    v311 = *(_DWORD *)(v283 + 20) & 0x7FFFFFF;
                                    v312 = v283 - 32 * v311;
                                    v313 = (unsigned int *)((char *)v1957 - *(_QWORD *)(v312 - 8) + -32 * v311);
                                    v314 = *v313;
                                    v315 = (uint64_t *)(v312 + 32 * v314);
                                    v316 = (uint64_t *)(v313[1] - v314);
                                    v317 = *((_QWORD *)v313 - 1);
                                    v2027[0] = v315;
                                    v2027[1] = v316;
                                    v2027[2] = (uint64_t *)v317;
                                    if (*(_DWORD *)(v317 + 8))
                                    {
                                      sub_1C623D924((uint64_t)&v2035, (uint64_t)v2027);
                                    }
                                    else
                                    {
                                      memset(&__dst, 0, sizeof(__dst));
                                      sub_1C4DB1D18((uint64_t)&__dst, (unint64_t)v316 + v1971);
                                      sub_1C5063264(&__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, v1970, &v1970[4 * v1971], v1971);
                                      sub_1C5063264(&__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, v2027[0], &v2027[0][4 * (uint64_t)v2027[1]], (uint64_t)v2027[1]);
                                      if (v2036.i32[0] >= (unsigned __int32)v2036.i32[1])
                                      {
                                        v2024 = 0;
                                        v322 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v2035, 0, 48, (unint64_t *)&v2024);
                                        v323 = &v322[48 * v2036.u32[0]];
                                        v324 = __dst.__r_.__value_.__r.__words[2];
                                        v325 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                        memset(&__dst, 0, sizeof(__dst));
                                        *(_QWORD *)v323 = 0x74706F6564;
                                        v323[23] = 5;
                                        *(_OWORD *)(v323 + 24) = v325;
                                        *((_QWORD *)v323 + 5) = v324;
                                        sub_1C4FCE92C((uint64_t *)&v2035, (uint64_t)v322);
                                        v326 = (int)v2024;
                                        if (v2035 != &v2036.u64[1])
                                          free(v2035);
                                        v2035 = v322;
                                        v321 = v2036.i32[0] + 1;
                                        v2036.i32[1] = v326;
                                      }
                                      else
                                      {
                                        v318 = (char *)v2035 + 48 * v2036.u32[0];
                                        v319 = __dst.__r_.__value_.__r.__words[2];
                                        v320 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                        memset(&__dst, 0, sizeof(__dst));
                                        *(_QWORD *)v318 = 0x74706F6564;
                                        v318[23] = 5;
                                        *((_QWORD *)v318 + 4) = 0;
                                        *((_QWORD *)v318 + 5) = 0;
                                        *(_OWORD *)(v318 + 24) = v320;
                                        *((_QWORD *)v318 + 5) = v319;
                                        v321 = v2036.i32[0] + 1;
                                      }
                                      v2036.i32[0] = v321;
                                      if (__dst.__r_.__value_.__r.__words[0])
                                      {
                                        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
                                        operator delete(__dst.__r_.__value_.__l.__data_);
                                      }
                                    }
                                    v280 = *(uint64_t **)v1955;
                                    v1957 = (llvm::AttributeList *)((char *)v1957 + 16);
                                    v62 = v1947-- == 1;
                                    v279 = (uint64_t *)a2;
                                  }
                                  while (!v62);
                                }
                              }
                              v294 = llvm::CallBase::Create((uint64_t ***)v283, (uint64_t)v2035, v2036.u32[0], (llvm::Instruction *)v283);
                              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v283, (llvm::Value *)v294, (llvm::Value *)1);
                              v295 = v281[2];
                              if (v295)
                              {
                                if ((v295 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                {
                                  v298 = *v281 & 0xFFFFFFFFFFFFFFF8;
                                  *(_QWORD *)v298 = v281[1];
                                  v299 = (unint64_t *)v281[1];
                                  if (v299)
                                  {
                                    *v299 = *v299 & 7 | v298;
                                  }
                                  else
                                  {
                                    v300 = v281[2];
                                    v301 = ***(int32x2_t ****)v300;
                                    v302 = (unint64_t)v301[303];
                                    if (v302 <= v298)
                                    {
                                      v303 = v301[305].u32[0];
                                      if (v302 + 16 * v303 > v298)
                                      {
                                        v304 = v303 - 1;
                                        LODWORD(v305) = v304 & ((v300 >> 4) ^ (v300 >> 9));
                                        v306 = (uint64_t *)(v302 + 16 * v305);
                                        v307 = *v306;
                                        if (v300 == *v306)
                                        {
LABEL_464:
                                          *v306 = -8192;
                                          v301[304] = vadd_s32(v301[304], (int32x2_t)0x1FFFFFFFFLL);
                                          v300 = v281[2];
                                        }
                                        else
                                        {
                                          v308 = 1;
                                          while (v307 != -4096)
                                          {
                                            v309 = v305 + v308++;
                                            v305 = v309 & v304;
                                            v307 = *(_QWORD *)(v302 + 16 * v305);
                                            if (v300 == v307)
                                            {
                                              v306 = (uint64_t *)(v302 + 16 * v305);
                                              goto LABEL_464;
                                            }
                                          }
                                        }
                                        *(_BYTE *)(v300 + 17) &= ~1u;
                                      }
                                    }
                                  }
                                }
                                v281[2] = 0;
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v283 + 40) + 40, (uint64_t ***)v283);
                              v296 = *(_QWORD *)(v283 + 24);
                              v297 = *(_QWORD **)(v283 + 32);
                              *v297 = v296;
                              *(_QWORD *)(v296 + 8) = v297;
                              *(_QWORD *)(v283 + 24) = 0;
                              *(_QWORD *)(v283 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v283);
                            }
                          }
                        }
                        v281 += 3;
                      }
                      while (v281 != v282);
                      v327 = (char *)v2035;
                      if (v2036.i32[0])
                      {
                        v328 = 48 * v2036.u32[0];
                        v278 = (uint64_t ***)v1944;
                        do
                        {
                          v329 = &v327[v328];
                          v330 = *(void **)&v327[v328 - 24];
                          if (v330)
                          {
                            *((_QWORD *)v329 - 2) = v330;
                            operator delete(v330);
                          }
                          if (*(v329 - 25) < 0)
                            operator delete(*((void **)v329 - 6));
                          v328 -= 48;
                        }
                        while (v328);
                        v327 = (char *)v2035;
                      }
                      else
                      {
                        v278 = (uint64_t ***)v1944;
                      }
                      if (v327 != (char *)&v2036.u64[1])
                        free(v327);
                    }
                    v275 = a1;
                  }
                  v331 = *v279;
                  v332 = (uint64_t ****)v1934;
                  if (v331)
                  {
                    v333 = (unint64_t)*(v275 - 4);
                    if (!v333 || *(_BYTE *)(v333 + 16) || *(uint64_t ***)(v333 + 24) != v275[9])
                      v333 = 0;
                    v336 = *(_QWORD **)(v331 + 16);
                    v335 = (_QWORD *)(v331 + 16);
                    v334 = v336;
                    if (!v336)
                      goto LABEL_510;
                    v337 = v334;
                    v338 = v335;
                    do
                    {
                      v339 = v337[4];
                      v340 = v339 >= v333;
                      if (v339 >= v333)
                        v341 = v337;
                      else
                        v341 = v337 + 1;
                      if (v340)
                        v338 = v337;
                      v337 = (_QWORD *)*v341;
                    }
                    while (*v341);
                    if (v338 == v335 || v338[4] > v333)
LABEL_510:
                      v338 = v335;
                    v342 = (llvm::CallGraphNode *)v338[5];
                    if (!v334)
                      goto LABEL_522;
                    v343 = (unint64_t)v275[5][7];
                    v344 = v335;
                    do
                    {
                      v345 = v334[4];
                      v346 = v345 >= v343;
                      if (v345 >= v343)
                        v347 = v334;
                      else
                        v347 = v334 + 1;
                      if (v346)
                        v344 = v334;
                      v334 = (_QWORD *)*v347;
                    }
                    while (*v347);
                    if (v344 == v335 || v344[4] > v343)
LABEL_522:
                      v344 = v335;
                    v348 = (llvm::CallGraphNode *)v344[5];
                    v350 = (char *)*((_QWORD *)v342 + 2);
                    v349 = (char *)*((_QWORD *)v342 + 3);
                    v2036 = 0uLL;
                    v2035 = 0;
                    if (v342 == v348)
                    {
                      if (v349 == v350)
                      {
                        sub_1C4DDDF70((uint64_t)&v2035, 0);
                        v349 = (char *)v2036.i64[0];
                      }
                      else
                      {
                        v1793 = 0xCCCCCCCCCCCCCCCDLL * ((v349 - v350) >> 3);
                        sub_1C63ACD4C((uint64_t *)&v2035);
                        if (v1793 > 0x666666666666666)
                          goto LABEL_2726;
                        v1794 = 0x999999999999999ALL * ((v2036.i64[1] - (uint64_t)v2035) >> 3);
                        if (v1794 <= v1793)
                          v1794 = 0xCCCCCCCCCCCCCCCDLL * ((v349 - v350) >> 3);
                        v1795 = 0xCCCCCCCCCCCCCCCDLL * ((v2036.i64[1] - (uint64_t)v2035) >> 3) >= 0x333333333333333
                              ? 0x666666666666666
                              : v1794;
                        if (v1795 > 0x666666666666666)
LABEL_2726:
                          abort();
                        v1796 = 5 * v1795;
                        v1797 = (char *)operator new(40 * v1795);
                        v1798 = 0;
                        v2035 = v1797;
                        v2036.i64[0] = (uint64_t)v1797;
                        v2036.i64[1] = (uint64_t)&v1797[8 * v1796];
                        do
                        {
                          v1799 = &v1797[v1798];
                          *v1799 = 0;
                          v1799[24] = 0;
                          if (v350[v1798 + 24])
                            sub_1C4DDDCF8((llvm::ValueHandleBase *)&v1797[v1798], &v350[v1798]);
                          *((_QWORD *)v1799 + 4) = *(_QWORD *)&v350[v1798 + 32];
                          v1798 += 40;
                        }
                        while (&v350[v1798] != v349);
                        v349 = &v1797[v1798];
                        v2036.i64[0] = (uint64_t)&v1797[v1798];
                      }
                      v350 = (char *)v2035;
                    }
                    for (; v350 != v349; v350 += 40)
                    {
                      if (v350[24] && v1998)
                      {
                        v351 = *((_QWORD *)v350 + 2);
                        v352 = ((v351 >> 4) ^ (v351 >> 9)) & (v1998 - 1);
                        v353 = (char *)v1996 + 64 * v352;
                        v354 = v353[3];
                        if (v351 == v354)
                        {
LABEL_534:
                          if (v353 != (_QWORD *)((char *)v1996 + 64 * (unint64_t)v1998))
                          {
                            v357 = v353[7];
                            if (v357)
                            {
                              v358 = *(unsigned __int8 *)(v357 + 16);
                              if (v358 >= 0x1C)
                              {
                                v359 = v358 - 33;
                                v247 = v359 > 0x33;
                                v360 = (1 << v359) & 0x8000000000041;
                                if (!v247 && v360 != 0)
                                {
                                  v362 = *(_QWORD *)(v357 - 32);
                                  if (!v362
                                    || *(_BYTE *)(v362 + 16)
                                    || *(_QWORD *)(v362 + 24) != *(_QWORD *)(v357 + 72)
                                    || (*(_BYTE *)(v362 + 33) & 0x20) == 0)
                                  {
                                    v2027[0] = (uint64_t *)6;
                                    v2027[1] = 0;
                                    v2027[2] = (uint64_t *)v357;
                                    if (v357 != -8192 && v357 != -4096)
                                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v2027);
                                    v363 = (_QWORD *)sub_1C5087E70(v1914, (unint64_t)v2027, 1);
                                    v364 = *(_DWORD *)(a2 + 104);
                                    v365 = (unint64_t *)(*(_QWORD *)(a2 + 96) + 24 * v364);
                                    *v365 = 6;
                                    v365[1] = 0;
                                    v366 = (unint64_t)(v365 + 1);
                                    v367 = v363[2];
                                    v365[2] = v367;
                                    if (v367 != -8192 && v367 != -4096)
                                    {
                                      if (v367)
                                      {
                                        v368 = *v363 & 0xFFFFFFFFFFFFFFF8;
                                        v365[1] = *(_QWORD *)v368;
                                        *(_QWORD *)v368 = v365;
                                        *v365 = v368 | 6;
                                        v369 = (uint64_t *)v365[1];
                                        if (v369)
                                          *v369 = *v369 & 7 | v366;
                                      }
                                    }
                                    *(_DWORD *)(a2 + 104) = v364 + 1;
                                    if (v2027[2] != (uint64_t *)-8192 && v2027[2] != (uint64_t *)-4096 && v2027[2])
                                    {
                                      v370 = (unint64_t)v2027[0] & 0xFFFFFFFFFFFFFFF8;
                                      *(uint64_t **)((unint64_t)v2027[0] & 0xFFFFFFFFFFFFFFF8) = v2027[1];
                                      if (v2027[1])
                                      {
                                        *v2027[1] = *v2027[1] & 7 | v370;
                                      }
                                      else
                                      {
                                        v371 = v2027[2];
                                        v372 = ***(int32x2_t ****)v2027[2];
                                        v373 = (unint64_t)v372[303];
                                        if (v373 <= v370)
                                        {
                                          v374 = v372[305].u32[0];
                                          if (v373 + 16 * v374 > v370)
                                          {
                                            v375 = v374 - 1;
                                            LODWORD(v376) = v375 & ((LODWORD(v2027[2]) >> 4) ^ (LODWORD(v2027[2]) >> 9));
                                            v377 = (uint64_t **)(v373 + 16 * v376);
                                            v378 = *v377;
                                            if (v2027[2] == *v377)
                                            {
LABEL_564:
                                              *v377 = (uint64_t *)-8192;
                                              v372[304] = vadd_s32(v372[304], (int32x2_t)0x1FFFFFFFFLL);
                                              v371 = v2027[2];
                                            }
                                            else
                                            {
                                              v379 = 1;
                                              while (v378 != (uint64_t *)-4096)
                                              {
                                                v380 = v376 + v379++;
                                                v376 = v380 & v375;
                                                v378 = *(uint64_t **)(v373 + 16 * v376);
                                                if (v2027[2] == v378)
                                                {
                                                  v377 = (uint64_t **)(v373 + 16 * v376);
                                                  goto LABEL_564;
                                                }
                                              }
                                            }
                                            *((_BYTE *)v371 + 17) &= ~1u;
                                          }
                                        }
                                      }
                                    }
                                    v381 = *((_QWORD *)v350 + 4);
                                    if (!*(_QWORD *)(v381 + 8))
                                    {
                                      v382 = *(_QWORD *)(v357 - 32);
                                      if (v382)
                                      {
                                        if (!*(_BYTE *)(v382 + 16) && *(_QWORD *)(v382 + 24) == *(_QWORD *)(v357 + 72))
                                        {
                                          v383 = (_QWORD *)*v335;
                                          if (!*v335)
                                            goto LABEL_585;
                                          v384 = v335;
                                          do
                                          {
                                            v385 = v383[4];
                                            v386 = v385 >= v382;
                                            if (v385 >= v382)
                                              v387 = v383;
                                            else
                                              v387 = v383 + 1;
                                            if (v386)
                                              v384 = v383;
                                            v383 = (_QWORD *)*v387;
                                          }
                                          while (*v387);
                                          if (v384 == v335 || v384[4] > v382)
LABEL_585:
                                            v384 = v335;
                                          v381 = v384[5];
                                        }
                                      }
                                    }
                                    sub_1C4DDC318((uint64_t)v348, v357, v381);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          v355 = 1;
                          while (v354 != -4096)
                          {
                            v356 = v352 + v355++;
                            v352 = v356 & (v1998 - 1);
                            v353 = (char *)v1996 + 64 * v352;
                            v354 = v353[3];
                            if (v351 == v354)
                              goto LABEL_534;
                          }
                        }
                      }
                    }
                    v275 = a1;
                    llvm::CallGraphNode::removeCallEdgeFor(v348, (llvm::CallBase *)a1);
                    v388 = (char *)v2035;
                    v278 = (uint64_t ***)v1944;
                    v280 = *(uint64_t **)v1955;
                    v332 = (uint64_t ****)v1934;
                    if (v2035)
                    {
                      v389 = (char *)v2036.i64[0];
                      v390 = v2035;
                      if ((void *)v2036.i64[0] != v2035)
                      {
                        do
                        {
                          if (*(v389 - 16))
                          {
                            v391 = *((_QWORD *)v389 - 3);
                            if (v391 != -8192 && v391 != -4096 && v391 != 0)
                            {
                              v393 = *((_QWORD *)v389 - 5) & 0xFFFFFFFFFFFFFFF8;
                              *(_QWORD *)v393 = *((_QWORD *)v389 - 4);
                              v394 = (unint64_t *)*((_QWORD *)v389 - 4);
                              if (v394)
                              {
                                *v394 = *v394 & 7 | v393;
                              }
                              else
                              {
                                v395 = *((_QWORD *)v389 - 3);
                                v396 = ***(int32x2_t ****)v395;
                                v397 = (unint64_t)v396[303];
                                if (v397 <= v393)
                                {
                                  v398 = v396[305].u32[0];
                                  if (v397 + 16 * v398 > v393)
                                  {
                                    v399 = v398 - 1;
                                    LODWORD(v400) = v399 & ((v395 >> 4) ^ (v395 >> 9));
                                    v401 = (uint64_t *)(v397 + 16 * v400);
                                    v402 = *v401;
                                    if (v395 == *v401)
                                    {
LABEL_607:
                                      *v401 = -8192;
                                      v396[304] = vadd_s32(v396[304], (int32x2_t)0x1FFFFFFFFLL);
                                      v395 = *((_QWORD *)v389 - 3);
                                    }
                                    else
                                    {
                                      v403 = 1;
                                      while (v402 != -4096)
                                      {
                                        v404 = v400 + v403++;
                                        v400 = v404 & v399;
                                        v402 = *(_QWORD *)(v397 + 16 * v400);
                                        if (v395 == v402)
                                        {
                                          v401 = (uint64_t *)(v397 + 16 * v400);
                                          goto LABEL_607;
                                        }
                                      }
                                    }
                                    *(_BYTE *)(v395 + 17) &= ~1u;
                                  }
                                }
                              }
                            }
                            *(v389 - 16) = 0;
                          }
                          v389 -= 40;
                        }
                        while (v389 != v388);
                        v390 = v2035;
                      }
                      v2036.i64[0] = (uint64_t)v388;
                      operator delete(v390);
                    }
                  }
                  v1886 = v1898 >> 4;
                  if ((*((_BYTE *)v1898 + 23) & 0x20) == 0)
                    goto LABEL_627;
                  v405 = ***(_QWORD ***)v1898;
                  v2035 = v1898;
                  v406 = *(_DWORD *)(v405 + 2496);
                  if (v406)
                  {
                    v407 = *(_QWORD *)(v405 + 2480);
                    v408 = v406 - 1;
                    v409 = v408 & ((v1898 >> 4) ^ (v1898 >> 9));
                    v410 = (llvm::Function **)(v407 + 40 * v409);
                    v411 = *v410;
                    if (*v410 == v1898)
                      goto LABEL_622;
                    v412 = 0;
                    v413 = 1;
                    while (v411 != (llvm::Function *)-4096)
                    {
                      if (v412)
                        v414 = 0;
                      else
                        v414 = v411 == (llvm::Function *)-8192;
                      if (v414)
                        v412 = v410;
                      v415 = v409 + v413++;
                      v409 = v415 & v408;
                      v410 = (llvm::Function **)(v407 + 40 * v409);
                      v411 = *v410;
                      if (*v410 == v1898)
                        goto LABEL_622;
                    }
                    if (v412)
                      v1776 = v412;
                    else
                      v1776 = v410;
                  }
                  else
                  {
                    v1776 = 0;
                  }
                  v410 = (llvm::Function **)sub_1C541AB24(v405 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v1776);
                  v1777 = (llvm::Function *)v2035;
                  v410[3] = 0;
                  v410[4] = 0;
                  *v410 = v1777;
                  v410[1] = (llvm::Function *)(v410 + 3);
                  v410[2] = (llvm::Function *)0x100000000;
LABEL_622:
                  v416 = *((unsigned int *)v410 + 4);
                  if ((_DWORD)v416)
                  {
                    v417 = (_QWORD *)((char *)v410[1] + 8);
                    v418 = 16 * v416;
                    v419 = 0;
                    while (*((_DWORD *)v417 - 2))
                    {
                      v417 += 2;
                      v418 -= 16;
                      if (!v418)
                        goto LABEL_628;
                    }
                    v419 = *v417;
                    goto LABEL_628;
                  }
LABEL_627:
                  v419 = 0;
LABEL_628:
                  v420 = (std::string::size_type)v275[6];
                  if (!v420)
                    goto LABEL_716;
                  v421 = **v278;
                  __dst.__r_.__value_.__r.__words[0] = v420;
                  v422 = *(unsigned __int16 *)(v420 + 2);
                  v423 = *(_DWORD *)(v420 + 4);
                  v424 = *(unsigned int *)(v420 + 8);
                  v425 = (uint64_t *)(v420 - 8 * v424);
                  if ((_DWORD)v424 == 2)
                    v426 = v425[1];
                  else
                    v426 = 0;
                  __dst.__r_.__value_.__r.__words[0] = llvm::DILocation::getImpl(v421, v423, v422, *v425, v426, 0, 1, 1);
                  v2036.i64[0] = 0;
                  v2035 = 0;
                  v2036.i32[2] = 0;
                  v427 = v278[14];
                  if (v427)
                  {
                    if (*((_DWORD *)v427 + 2))
                    {
                      v428 = v427[5];
                      if (v428)
                      {
                        v429 = *((_DWORD *)v428 + 10);
                        if (v429)
                        {
                          v430 = v428[3];
                          v431 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                          if ((v431 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
                          {
                            v1813 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override)
                              v1813 = 0xFF51AFD7ED558CCDLL;
                            qword_1ED7EAC80 = v1813;
                            __cxa_guard_release(&qword_1ED7EAC88);
                          }
                          v432 = __ROR8__(qword_1ED7EAC80 ^ 0x36F778AF3203422BLL, 30);
                          v433 = 0x9DDFEA08EB382D69
                               * ((qword_1ED7EAC80 + 0x4FAD788D19365BF3) ^ ((0x9DDFEA08EB382D69
                                                                             * ((v432 + 0x7A30D13C836179FFLL) ^ (qword_1ED7EAC80 + 0x4FAD788D19365BF3))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v432 + 0x7A30D13C836179FFLL) ^ (qword_1ED7EAC80 + 0x4FAD788D19365BF3))));
                          v434 = -348639895 * ((v433 >> 47) ^ v433);
                          for (n = 1; ; ++n)
                          {
                            v436 = v434 & (v429 - 1);
                            v437 = v430 + 24 * v436;
                            v438 = *(_QWORD **)v437;
                            if (*(_QWORD *)v437 == -1)
                            {
                              if ("no-inline-line-tables" == (char *)-1)
                                goto LABEL_654;
                            }
                            else if (v438 == (_QWORD *)-2)
                            {
                              if ("no-inline-line-tables" == (char *)-2)
                                goto LABEL_654;
                            }
                            else if (*(_QWORD *)(v437 + 8) == 21)
                            {
                              v439 = *v438 == 0x6E696C6E692D6F6ELL && v438[1] == 0x742D656E696C2D65;
                              if (v439 && *(_QWORD *)((char *)v438 + 13) == 0x73656C6261742D65)
                              {
LABEL_654:
                                v441 = 1;
                                goto LABEL_656;
                              }
                            }
                            if (v438 == (_QWORD *)-1)
                              break;
                            v434 = n + v436;
                          }
                        }
                      }
                    }
                  }
                  v441 = 0;
LABEL_656:
                  if (v1900 == v280)
                    goto LABEL_715;
                  if (v419)
                    v442 = v441;
                  else
                    v442 = 1;
                  v1958 = v442;
                  v443 = v1900;
                  do
                  {
                    v444 = v443 - 3;
                    if (!v443)
                      v444 = 0;
                    v445 = v444 + 5;
                    v1948 = v444;
                    for (ii = (_QWORD *)v444[6]; ii != v445; ii = (_QWORD *)ii[1])
                    {
                      v2027[0] = v421;
                      v2027[1] = (uint64_t *)&__dst;
                      v2027[2] = (uint64_t *)&v2035;
                      if (ii)
                        v447 = (uint64_t)(ii - 3);
                      else
                        v447 = 0;
                      llvm::updateLoopMetadataDebugLocations(v447, (uint64_t (*)(uint64_t))sub_1C5F0A534, (uint64_t)v2027);
                      if ((v441 & 1) == 0)
                      {
                        v449 = (unsigned __int8 **)(v447 + 48);
                        v448 = *(void **)(v447 + 48);
                        v2024 = v448;
                        if (v448)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v2024, (unsigned __int8 *)v448, 2);
                          if (v2024)
                          {
                            v2010 = v2024;
                            llvm::MetadataTracking::track((uint64_t)&v2010, (unsigned __int8 *)v2024, 2);
                            sub_1C5F0A494((unsigned __int8 **)&v2013, (uint64_t)&v2010, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_, **(uint64_t ***)v447, (uint64_t)&v2035);
                            if (v2010)
                              llvm::MetadataTracking::untrack((uint64_t)&v2010, (unsigned __int8 *)v2010);
                            v2004 = v2013;
                            if (v2013)
                              llvm::MetadataTracking::track((uint64_t)&v2004, (unsigned __int8 *)v2013, 2);
                            if (&v2004 == (void **)v449)
                            {
                              if (v2004)
                                llvm::MetadataTracking::untrack((uint64_t)&v2004, (unsigned __int8 *)v2004);
                            }
                            else
                            {
                              if (*v449)
                                llvm::MetadataTracking::untrack(v447 + 48, *v449);
                              v450 = (unsigned __int8 *)v2004;
                              *v449 = (unsigned __int8 *)v2004;
                              if (v450)
                              {
                                llvm::MetadataTracking::retrack((uint64_t)&v2004, v450, v447 + 48);
                                v2004 = 0;
                              }
                            }
                            if (v2013)
                              llvm::MetadataTracking::untrack((uint64_t)&v2013, (unsigned __int8 *)v2013);
                            v451 = (unsigned __int8 *)v2024;
                            if (v2024)
                            {
                              v452 = &v2024;
LABEL_684:
                              llvm::MetadataTracking::untrack((uint64_t)v452, v451);
                              continue;
                            }
                            continue;
                          }
                        }
                        if (!v1958)
                          continue;
                      }
                      v453 = *(unsigned __int8 *)(v447 + 16);
                      if (v453 == 59)
                        v454 = v447;
                      else
                        v454 = 0;
                      if (!ii
                        || v453 != 59
                        || *(unsigned __int8 *)(*(_QWORD *)(v454 - 32) + 16) > 0x14u
                        || (*(_WORD *)(v454 + 18) & 0x40) != 0)
                      {
                        v455 = a1[6];
                        v2021 = v455;
                        if (v455)
                          llvm::MetadataTracking::track((uint64_t)&v2021, (unsigned __int8 *)v455, 2);
                        v456 = (unsigned __int8 **)(v447 + 48);
                        if (&v2021 == (void **)(v447 + 48))
                        {
                          v451 = (unsigned __int8 *)v2021;
                          if (v2021)
                          {
                            v452 = &v2021;
                            goto LABEL_684;
                          }
                        }
                        else
                        {
                          if (*v456)
                            llvm::MetadataTracking::untrack(v447 + 48, *v456);
                          v457 = (unsigned __int8 *)v2021;
                          *v456 = (unsigned __int8 *)v2021;
                          if (v457)
                          {
                            llvm::MetadataTracking::retrack((uint64_t)&v2021, v457, v447 + 48);
                            v2021 = 0;
                          }
                        }
                      }
                    }
                    if ((v441 & 1) != 0)
                    {
                      v458 = (_QWORD *)v1948[6];
                      while (v458 != v445)
                      {
                        if (v458)
                          v459 = (uint64_t)(v458 - 3);
                        else
                          v459 = 0;
                        if (sub_1C4D99D08(v459))
                        {
                          v458 = *(_QWORD **)(v459 + 32);
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v459 + 40) + 40, (uint64_t ***)v459);
                          v460 = *(_QWORD *)(v459 + 24);
                          v461 = *(_QWORD **)(v459 + 32);
                          *v461 = v460;
                          *(_QWORD *)(v460 + 8) = v461;
                          *(_QWORD *)(v459 + 24) = 0;
                          *(_QWORD *)(v459 + 32) = 0;
                          llvm::Value::deleteValue((llvm::Value *)v459);
                        }
                        else
                        {
                          v458 = (_QWORD *)v458[1];
                        }
                      }
                    }
                    v443 = (uint64_t *)v443[1];
                  }
                  while (v443 != *(uint64_t **)v1955);
LABEL_715:
                  MEMORY[0x1CAA32FB4](v2035, 8);
                  v280 = *(uint64_t **)v1955;
                  v332 = (uint64_t ****)v1934;
LABEL_716:
                  v2035 = &v2036.u64[1];
                  v2036.i64[0] = 0x1000000000;
                  v463 = (uint64_t **)*((_QWORD *)&v1994 + 1);
                  v462 = (uint64_t **)v1994;
                  if ((_QWORD)v1994 != *((_QWORD *)&v1994 + 1))
                  {
                    do
                    {
                      v2027[0] = *v462;
                      v464 = v2027[0][2];
                      v465 = (uint64_t *)(v464 & 0xFFFFFFFFFFFFFFF8);
                      if ((v464 & 4) != 0)
                        v465 = (uint64_t *)*v465;
                      __dst.__r_.__value_.__r.__words[0] = llvm::MDTuple::getImpl(v465, 0, 0, 2, 1);
                      v467 = v2035;
                      if (v2036.i32[0] >= (unsigned __int32)v2036.i32[1])
                      {
                        v473 = v2036.u32[0] + 1;
                        if (v2035 <= &__dst && (char *)v2035 + 8 * v2036.u32[0] > (char *)&__dst)
                        {
                          v474 = (char *)&__dst - (_BYTE *)v2035;
                          sub_1C5F0A5C0((uint64_t)&v2035, v473);
                          v467 = v2035;
                          p_dst = (std::string *)((char *)v2035 + v474);
                        }
                        else
                        {
                          sub_1C5F0A5C0((uint64_t)&v2035, v473);
                          p_dst = &__dst;
                          v467 = v2035;
                        }
                      }
                      else
                      {
                        p_dst = &__dst;
                      }
                      v469 = v2036.u32[0];
                      v470 = p_dst->__r_.__value_.__r.__words[0];
                      p_dst->__r_.__value_.__r.__words[0] = 0;
                      v467[v469] = v470;
                      v2036.i32[0] = v469 + 1;
                      v471 = (llvm::MDNode *)__dst.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = 0;
                      if (v471)
                        llvm::MDNode::deleteTemporary(v471, v466);
                      v472 = sub_1C5F0A67C((uint64_t)&v1995[1], (uint64_t *)v2027);
                      sub_1C4FCE378((unsigned __int8 **)v472 + 1, *((unsigned __int8 **)v2035 + v2036.u32[0] - 1));
                      ++v462;
                    }
                    while (v462 != v463);
                    v476 = (std::string::size_type *)*((_QWORD *)&v1994 + 1);
                    v475 = (std::string::size_type *)v1994;
                    v2027[0] = (uint64_t *)&v2027[2];
                    v2027[1] = (uint64_t *)0x400000000;
                    if ((_QWORD)v1994 != *((_QWORD *)&v1994 + 1))
                    {
                      do
                      {
                        v477 = *v475;
                        __dst.__r_.__value_.__r.__words[0] = v477;
                        v478 = *(unsigned int *)(v477 + 8);
                        if ((_DWORD)v478)
                        {
                          v479 = 0;
                          v480 = -8 * v478;
                          do
                          {
                            v481 = *(unsigned __int8 **)(v477 + v480);
                            if (*v481 - 4 <= 0x1E)
                            {
                              v2024 = *(void **)(v477 + v480);
                              v481 = (unsigned __int8 *)sub_1C5F0A67C((uint64_t)&v1995[1], (uint64_t *)&v2024)[1];
                              v479 = v2027[1];
                            }
                            if (v479 >= HIDWORD(v2027[1]))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2027, (uint64_t)&v2027[2], v479 + 1, 8);
                              v479 = v2027[1];
                            }
                            v2027[0][v479] = (uint64_t)v481;
                            v479 = ++LODWORD(v2027[1]);
                            v480 += 8;
                          }
                          while (v480);
                        }
                        else
                        {
                          v479 = 0;
                        }
                        v482 = *(_QWORD *)(v477 + 16);
                        v483 = (uint64_t *)(v482 & 0xFFFFFFFFFFFFFFF8);
                        if ((v482 & 4) != 0)
                          v483 = (uint64_t *)*v483;
                        Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(v483, v2027[0], v479, 0, 1);
                        v485 = *(_QWORD *)(sub_1C5F0A67C((uint64_t)&v1995[1], (uint64_t *)&__dst)[1] + 16);
                        if ((v485 & 4) != 0)
                          llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v485 & 0xFFFFFFFFFFFFFFF8), Impl);
                        LODWORD(v2027[1]) = 0;
                        ++v475;
                      }
                      while (v475 != v476);
                      if ((uint64_t **)v2027[0] != &v2027[2])
                        free(v2027[0]);
                    }
                  }
                  v486 = (char *)v2035;
                  if (v2036.i32[0])
                  {
                    v1686 = 8 * v2036.u32[0];
                    v1687 = (char *)v2035 - 8;
                    do
                    {
                      v1688 = *(llvm::MDNode **)&v1687[v1686];
                      *(_QWORD *)&v1687[v1686] = 0;
                      if (v1688)
                        llvm::MDNode::deleteTemporary(v1688, v276);
                      v1686 -= 8;
                    }
                    while (v1686);
                    v486 = (char *)v2035;
                  }
                  if (v486 != (char *)&v2036.u64[1])
                    free(v486);
                  if (LODWORD(v1995[2]) && v1900 != v280)
                  {
                    v487 = v1900;
                    do
                    {
                      v488 = v487 - 3;
                      if (!v487)
                        v488 = 0;
                      v489 = v488 + 5;
                      for (jj = (_QWORD *)v488[6]; jj != v489; jj = (_QWORD *)jj[1])
                      {
                        if (jj)
                          v491 = jj - 3;
                        else
                          v491 = 0;
                        if ((v491[23] & 0x20) == 0)
                          goto LABEL_774;
                        v492 = ***(_QWORD ***)v491;
                        v2035 = v491;
                        v493 = *(_DWORD *)(v492 + 2496);
                        if (v493)
                        {
                          v494 = *(_QWORD *)(v492 + 2480);
                          v495 = v493 - 1;
                          v496 = v495 & ((v491 >> 4) ^ (v491 >> 9));
                          v497 = (_QWORD *)(v494 + 40 * v496);
                          v498 = (_BYTE *)*v497;
                          if ((_BYTE *)*v497 == v491)
                            goto LABEL_770;
                          v499 = 0;
                          v500 = 1;
                          while (v498 != (_BYTE *)-4096)
                          {
                            if (v499)
                              v501 = 0;
                            else
                              v501 = v498 == (_BYTE *)-8192;
                            if (v501)
                              v499 = v497;
                            v502 = v496 + v500++;
                            v496 = v502 & v495;
                            v497 = (_QWORD *)(v494 + 40 * v496);
                            v498 = (_BYTE *)*v497;
                            if ((_BYTE *)*v497 == v491)
                              goto LABEL_770;
                          }
                          if (v499)
                            v537 = v499;
                          else
                            v537 = v497;
                        }
                        else
                        {
                          v537 = 0;
                        }
                        v497 = sub_1C541AB24(v492 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v537);
                        v538 = v2035;
                        v497[4] = 0;
                        v497[3] = 0;
                        *v497 = v538;
                        v497[1] = v497 + 3;
                        v497[2] = 0x100000000;
LABEL_770:
                        v503 = *((unsigned int *)v497 + 4);
                        if ((_DWORD)v503)
                        {
                          v504 = (uint64_t *)(v497[1] + 8);
                          v505 = 16 * v503;
                          while (*((_DWORD *)v504 - 2) != 7)
                          {
                            v504 += 2;
                            v505 -= 16;
                            if (!v505)
                              goto LABEL_774;
                          }
                          if (*v504)
                          {
                            sub_1C5F0A8DC((unsigned __int8 **)&v2035, v1995[1], v1995[3], *v504);
                            v535 = (llvm::MDNode *)v2035;
                            if (v2035)
                            {
                              llvm::MetadataTracking::untrack((uint64_t)&v2035, (unsigned __int8 *)v2035);
                              llvm::Value::setMetadata((llvm::Value *)v491, 7, v535);
                            }
                          }
                        }
LABEL_774:
                        if ((v491[23] & 0x20) == 0)
                          goto LABEL_789;
                        v506 = ***(_QWORD ***)v491;
                        v2035 = v491;
                        v507 = *(_DWORD *)(v506 + 2496);
                        if (v507)
                        {
                          v508 = *(_QWORD *)(v506 + 2480);
                          v509 = v507 - 1;
                          v510 = v509 & ((v491 >> 4) ^ (v491 >> 9));
                          v511 = (_QWORD *)(v508 + 40 * v510);
                          v512 = (_BYTE *)*v511;
                          if ((_BYTE *)*v511 == v491)
                            goto LABEL_785;
                          v513 = 0;
                          v514 = 1;
                          while (v512 != (_BYTE *)-4096)
                          {
                            if (v513)
                              v515 = 0;
                            else
                              v515 = v512 == (_BYTE *)-8192;
                            if (v515)
                              v513 = v511;
                            v516 = v510 + v514++;
                            v510 = v516 & v509;
                            v511 = (_QWORD *)(v508 + 40 * v510);
                            v512 = (_BYTE *)*v511;
                            if ((_BYTE *)*v511 == v491)
                              goto LABEL_785;
                          }
                          if (v513)
                            v539 = v513;
                          else
                            v539 = v511;
                        }
                        else
                        {
                          v539 = 0;
                        }
                        v511 = sub_1C541AB24(v506 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v539);
                        v540 = v2035;
                        v511[4] = 0;
                        v511[3] = 0;
                        *v511 = v540;
                        v511[1] = v511 + 3;
                        v511[2] = 0x100000000;
LABEL_785:
                        v517 = *((unsigned int *)v511 + 4);
                        if ((_DWORD)v517)
                        {
                          v518 = (uint64_t *)(v511[1] + 8);
                          v519 = 16 * v517;
                          while (*((_DWORD *)v518 - 2) != 8)
                          {
                            v518 += 2;
                            v519 -= 16;
                            if (!v519)
                              goto LABEL_789;
                          }
                          if (*v518)
                          {
                            sub_1C5F0A8DC((unsigned __int8 **)&v2035, v1995[1], v1995[3], *v518);
                            v536 = (llvm::MDNode *)v2035;
                            if (v2035)
                            {
                              llvm::MetadataTracking::untrack((uint64_t)&v2035, (unsigned __int8 *)v2035);
                              llvm::Value::setMetadata((llvm::Value *)v491, 8, v536);
                            }
                          }
                        }
LABEL_789:
                        v520 = sub_1C5790664((uint64_t)v491);
                        if (v520)
                          v521 = v491;
                        else
                          v521 = 0;
                        if (jj)
                        {
                          if (v520)
                          {
                            sub_1C5F0A8DC((unsigned __int8 **)&v2035, v1995[1], v1995[3], *(_QWORD *)(*(_QWORD *)&v521[-32 * (*((_DWORD *)v521 + 5) & 0x7FFFFFF)] + 24));
                            v522 = (unsigned __int8 *)v2035;
                            if (v2035)
                            {
                              llvm::MetadataTracking::untrack((uint64_t)&v2035, (unsigned __int8 *)v2035);
                              v523 = llvm::MetadataAsValue::get(**(uint64_t ***)v521, v522);
                              v524 = *((_DWORD *)v521 + 5) & 0x7FFFFFF;
                              v525 = -v524;
                              v526 = (uint64_t *)&v521[-32 * v524];
                              if (*v526)
                              {
                                v527 = &v521[32 * v525];
                                v529 = (_QWORD *)*((_QWORD *)v527 + 2);
                                v528 = v527 + 16;
                                *v529 = *(v528 - 1);
                                v530 = *(v528 - 1);
                                if (v530)
                                  *(_QWORD *)(v530 + 16) = *v528;
                              }
                              *v526 = v523;
                              if (v523)
                              {
                                v533 = *(_QWORD *)(v523 + 8);
                                v531 = (uint64_t **)(v523 + 8);
                                v532 = v533;
                                v534 = &v521[32 * v525];
                                *((_QWORD *)v534 + 1) = v533;
                                if (v533)
                                  *(_QWORD *)(v532 + 16) = v534 + 8;
                                *((_QWORD *)v534 + 2) = v531;
                                *v531 = v526;
                              }
                            }
                          }
                        }
                      }
                      v487 = (uint64_t *)v487[1];
                    }
                    while (v487 != v280);
                  }
                  v541 = a1;
                  if (!byte_1ED826D78)
                  {
LABEL_1117:
                    if (byte_1ED826FB8)
                    {
                      v721 = v541[8];
                      if (v721 && *((_DWORD *)v721 + 2) > 1u)
                      {
                        v1292 = v721[6];
                        v2035 = **v541;
                        v2036.i64[0] = (uint64_t)&v2037;
                        v2036.i64[1] = 0x800000000;
                        if (v1292)
                        {
                          v722 = (char *)(v1292 + 6);
                          v723 = (char *)&v1292[*((unsigned int *)v1292 + 2) + 6];
                        }
                        else
                        {
                          v722 = 0;
                          v723 = 0;
                        }
                      }
                      else
                      {
                        v722 = 0;
                        v723 = 0;
                        v2035 = **v541;
                        v2036.i64[0] = (uint64_t)&v2037;
                        v2036.i64[1] = 0x800000000;
                      }
                      sub_1C53321EC((unsigned int *)&v2036, (uint64_t)&v2037, v722, v723);
                      if (v2036.i32[2])
                      {
                        v2027[0] = **v541;
                        v2027[1] = (uint64_t *)&v2028;
                        v2027[2] = (uint64_t *)0x800000000;
                        Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v2035, 76);
                        if (Attribute)
                        {
                          v1800 = *(_QWORD *)(Attribute + 16);
                          if (v1800)
                            llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)v2027, v1800);
                        }
                        v725 = llvm::AttrBuilder::getAttribute((uint64_t)&v2035, 77);
                        if (v725)
                        {
                          v1801 = *(_QWORD *)(v725 + 16);
                          if (v1801)
                            llvm::AttrBuilder::addDereferenceableOrNullAttr(v2027, v1801);
                        }
                        if (llvm::AttrBuilder::getAttribute((uint64_t)&v2035, 19))
                          llvm::AttrBuilder::addAttribute((unsigned int *)v2027, 19);
                        if (llvm::AttrBuilder::getAttribute((uint64_t)&v2035, 39))
                          llvm::AttrBuilder::addAttribute((unsigned int *)v2027, 39);
                      }
                      else
                      {
                        v2027[0] = (uint64_t *)v2035;
                        v2027[1] = (uint64_t *)&v2028;
                        v2027[2] = (uint64_t *)0x800000000;
                      }
                      if ((int64x2_t *)v2036.i64[0] != &v2037)
                        free((void *)v2036.i64[0]);
                      if (LODWORD(v2027[2]))
                      {
                        v726 = *(_QWORD *)v1934 + 72;
                        v727 = *(_QWORD *)(*(_QWORD *)v1934 + 80);
                        if (v727 != v726)
                        {
                          v728 = ***(llvm::LLVMContext ****)v1934;
                          while (1)
                          {
                            v729 = v727 - 24;
                            if (!v727)
                              v729 = 0;
                            v730 = *(_QWORD *)(v729 + 40);
                            if (v730 != v729 + 40)
                            {
                              v731 = v730 - 24;
                              if (!v730)
                                v731 = 0;
                              v732 = *(unsigned __int8 *)(v731 + 16) - 40;
                              if (v732 < 0xFFFFFFF5)
                                v731 = 0;
                              if (v730)
                              {
                                if (*(_BYTE *)(v731 + 16) == 29 && v732 >= 0xFFFFFFF5)
                                {
                                  v734 = *(_QWORD *)(v731 - 32 * (*(_DWORD *)(v731 + 20) & 0x7FFFFFF));
                                  v735 = *(unsigned __int8 *)(v734 + 16);
                                  if (v735 >= 0x1C)
                                  {
                                    v736 = v735 - 33;
                                    v247 = v736 > 0x33;
                                    v737 = (1 << v736) & 0x8000000000041;
                                    if (!v247 && v737 != 0)
                                      break;
                                  }
                                }
                              }
                            }
LABEL_1195:
                            v727 = *(_QWORD *)(v727 + 8);
                            if (v727 == v726)
                              goto LABEL_1196;
                          }
                          if (v1998)
                          {
                            v739 = (v1998 - 1) & ((v734 >> 4) ^ (v734 >> 9));
                            v740 = (char *)v1996 + 64 * v739;
                            v741 = v740[3];
                            if (v734 == v741)
                            {
LABEL_1159:
                              v2035 = (void *)6;
                              if (v740 == (_QWORD *)((char *)v1996 + 64 * (unint64_t)v1998))
                              {
                                v744 = 0;
                                v745 = 0;
                                v752 = 0;
                                v2036 = 0uLL;
                              }
                              else
                              {
                                v744 = 0;
                                v745 = v740[7];
                                v2036.i64[0] = 0;
                                v2036.i64[1] = v745;
                                if (v745 != -8192 && v745 != -4096 && v745 != 0)
                                {
                                  v747 = v740[5] & 0xFFFFFFFFFFFFFFF8;
                                  v2036.i64[0] = *(_QWORD *)v747;
                                  *(_QWORD *)v747 = &v2035;
                                  v2035 = (void *)(v747 | 6);
                                  v744 = v2036.i64[0];
                                  if (v2036.i64[0])
                                    *(_QWORD *)v2036.i64[0] = *(_QWORD *)v2036.i64[0] & 7 | (unint64_t)&v2036;
                                  v745 = v2036.i64[1];
                                }
                                if (!v745
                                  || (v748 = *(unsigned __int8 *)(v745 + 16), v748 < 0x1C)
                                  || ((v749 = v748 - 33,
                                       v247 = v749 > 0x33,
                                       v750 = (1 << v749) & 0x8000000000041,
                                       !v247)
                                    ? (v751 = v750 == 0)
                                    : (v751 = 1),
                                      v751))
                                {
                                  v752 = 0;
                                }
                                else
                                {
                                  v752 = v745;
                                }
                              }
                              if (v745 != -8192 && v745 != -4096 && v745)
                              {
                                v753 = (unint64_t)v2035 & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)((unint64_t)v2035 & 0xFFFFFFFFFFFFFFF8) = v744;
                                if (v2036.i64[0])
                                {
                                  *(_QWORD *)v2036.i64[0] = *(_QWORD *)v2036.i64[0] & 7 | v753;
                                }
                                else
                                {
                                  v754 = v2036.i64[1];
                                  v755 = ***(int32x2_t ****)v2036.i64[1];
                                  v756 = (unint64_t)v755[303];
                                  if (v756 <= v753)
                                  {
                                    v757 = v755[305].u32[0];
                                    if (v756 + 16 * v757 > v753)
                                    {
                                      v758 = v757 - 1;
                                      LODWORD(v759) = v758 & (((unsigned __int32)v2036.i32[2] >> 4) ^ ((unsigned __int32)v2036.i32[2] >> 9));
                                      v760 = (uint64_t *)(v756 + 16 * v759);
                                      v761 = *v760;
                                      if (v2036.i64[1] == *v760)
                                      {
LABEL_1188:
                                        *v760 = -8192;
                                        v755[304] = vadd_s32(v755[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v754 = v2036.i64[1];
                                      }
                                      else
                                      {
                                        v762 = 1;
                                        while (v761 != -4096)
                                        {
                                          v763 = v759 + v762++;
                                          v759 = v763 & v758;
                                          v761 = *(_QWORD *)(v756 + 16 * v759);
                                          if (v2036.i64[1] == v761)
                                          {
                                            v760 = (uint64_t *)(v756 + 16 * v759);
                                            goto LABEL_1188;
                                          }
                                        }
                                      }
                                      *(_BYTE *)(v754 + 17) &= ~1u;
                                    }
                                  }
                                }
                              }
                              if (v752
                                && *(_QWORD *)(v731 + 40) == *(_QWORD *)(v734 + 40)
                                && llvm::isGuaranteedToTransferExecutionToSuccessor(v734 + 24, v731 + 24, dword_1ED827078 + 1))
                              {
                                v2035 = *(void **)(v752 + 64);
                                *(_QWORD *)(v752 + 64) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v2035, v728, 0, (const llvm::AttrBuilder *)v2027);
                              }
                              goto LABEL_1195;
                            }
                            v742 = 1;
                            while (v741 != -4096)
                            {
                              v743 = v739 + v742++;
                              v739 = v743 & (v1998 - 1);
                              v740 = (char *)v1996 + 64 * v739;
                              v741 = v740[3];
                              if (v734 == v741)
                                goto LABEL_1159;
                            }
                          }
                          v740 = (char *)v1996 + 64 * (unint64_t)v1998;
                          goto LABEL_1159;
                        }
                      }
LABEL_1196:
                      if ((void **)v2027[1] != &v2028)
                        free(v2027[1]);
                      v541 = a1;
                    }
                    v764 = *((_DWORD *)v541 + 5);
                    if (v541[6])
                    {
                      if ((v764 & 0x20000000) == 0)
                        goto LABEL_1219;
                    }
                    else if ((v764 & 0x20000000) == 0)
                    {
                      v765 = 0;
                      v766 = 0;
                      goto LABEL_1225;
                    }
                    v767 = ***v541;
                    v2035 = v541;
                    v768 = *(_DWORD *)(v767 + 2496);
                    if (v768)
                    {
                      v769 = *(_QWORD *)(v767 + 2480);
                      v770 = v768 - 1;
                      v771 = v770 & ((v541 >> 4) ^ (v541 >> 9));
                      v772 = (uint64_t ****)(v769 + 40 * v771);
                      v773 = *v772;
                      if (*v772 == v541)
                        goto LABEL_1214;
                      v774 = 0;
                      v775 = 1;
                      while (v773 != (uint64_t ***)-4096)
                      {
                        if (v774)
                          v776 = 0;
                        else
                          v776 = v773 == (uint64_t ***)-8192;
                        if (v776)
                          v774 = v772;
                        v777 = v771 + v775++;
                        v771 = v777 & v770;
                        v772 = (uint64_t ****)(v769 + 40 * v771);
                        v773 = *v772;
                        if (*v772 == v541)
                          goto LABEL_1214;
                      }
                      if (v774)
                        v1778 = v774;
                      else
                        v1778 = v772;
                    }
                    else
                    {
                      v1778 = 0;
                    }
                    v772 = (uint64_t ****)sub_1C541AB24(v767 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v1778);
                    v1779 = (uint64_t ***)v2035;
                    v772[3] = 0;
                    v772[4] = 0;
                    *v772 = v1779;
                    v772[1] = (uint64_t ***)(v772 + 3);
                    v772[2] = (uint64_t ***)0x100000000;
LABEL_1214:
                    v778 = *((unsigned int *)v772 + 4);
                    if ((_DWORD)v778)
                    {
                      v779 = (llvm::MDNode **)(v772[1] + 1);
                      v780 = 16 * v778;
                      while (*((_DWORD *)v779 - 2) != 10)
                      {
                        v766 = 0;
                        v779 += 2;
                        v780 -= 16;
                        if (!v780)
                          goto LABEL_1220;
                      }
                      v766 = *v779;
                      goto LABEL_1220;
                    }
LABEL_1219:
                    v766 = 0;
LABEL_1220:
                    v781 = *((_DWORD *)v541 + 5);
                    if (v541[6])
                    {
                      if ((v781 & 0x20000000) == 0)
                        goto LABEL_1241;
LABEL_1226:
                      v783 = ***v541;
                      v2035 = v541;
                      v784 = *(_DWORD *)(v783 + 2496);
                      if (v784)
                      {
                        v785 = *(_QWORD *)(v783 + 2480);
                        v786 = v784 - 1;
                        v787 = v786 & ((v541 >> 4) ^ (v541 >> 9));
                        v788 = (uint64_t ****)(v785 + 40 * v787);
                        v789 = *v788;
                        if (*v788 == v541)
                          goto LABEL_1236;
                        v790 = 0;
                        v791 = 1;
                        while (v789 != (uint64_t ***)-4096)
                        {
                          if (v790)
                            v792 = 0;
                          else
                            v792 = v789 == (uint64_t ***)-8192;
                          if (v792)
                            v790 = v788;
                          v793 = v787 + v791++;
                          v787 = v793 & v786;
                          v788 = (uint64_t ****)(v785 + 40 * v787);
                          v789 = *v788;
                          if (*v788 == v541)
                            goto LABEL_1236;
                        }
                        if (v790)
                          v1787 = v790;
                        else
                          v1787 = v788;
                      }
                      else
                      {
                        v1787 = 0;
                      }
                      v788 = (uint64_t ****)sub_1C541AB24(v783 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v1787);
                      v1788 = (uint64_t ***)v2035;
                      v788[3] = 0;
                      v788[4] = 0;
                      *v788 = v1788;
                      v788[1] = (uint64_t ***)(v788 + 3);
                      v788[2] = (uint64_t ***)0x100000000;
LABEL_1236:
                      v794 = *((unsigned int *)v788 + 4);
                      if ((_DWORD)v794)
                      {
                        v795 = (llvm::MDNode **)(v788[1] + 1);
                        v796 = 16 * v794;
                        while (*((_DWORD *)v795 - 2) != 25)
                        {
                          v782 = 0;
                          v795 += 2;
                          v796 -= 16;
                          if (!v796)
                            goto LABEL_1242;
                        }
                        v782 = *v795;
LABEL_1242:
                        v797 = *((_DWORD *)v541 + 5);
                        if (v541[6])
                        {
                          if ((v797 & 0x20000000) == 0)
                            goto LABEL_1262;
                        }
                        else if ((v797 & 0x20000000) == 0)
                        {
                          v765 = 0;
                          goto LABEL_1278;
                        }
                        v798 = ***v541;
                        v2035 = v541;
                        v799 = *(_DWORD *)(v798 + 2496);
                        if (v799)
                        {
                          v800 = *(_QWORD *)(v798 + 2480);
                          v801 = v799 - 1;
                          v802 = v801 & ((v541 >> 4) ^ (v541 >> 9));
                          v803 = (uint64_t ****)(v800 + 40 * v802);
                          v804 = *v803;
                          if (*v803 == v541)
                            goto LABEL_1257;
                          v805 = 0;
                          v806 = 1;
                          while (v804 != (uint64_t ***)-4096)
                          {
                            if (v805)
                              v807 = 0;
                            else
                              v807 = v804 == (uint64_t ***)-8192;
                            if (v807)
                              v805 = v803;
                            v808 = v802 + v806++;
                            v802 = v808 & v801;
                            v803 = (uint64_t ****)(v800 + 40 * v802);
                            v804 = *v803;
                            if (*v803 == v541)
                              goto LABEL_1257;
                          }
                          if (v805)
                            v1789 = v805;
                          else
                            v1789 = v803;
                        }
                        else
                        {
                          v1789 = 0;
                        }
                        v803 = (uint64_t ****)sub_1C541AB24(v798 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v1789);
                        v1790 = (uint64_t ***)v2035;
                        v803[3] = 0;
                        v803[4] = 0;
                        *v803 = v1790;
                        v803[1] = (uint64_t ***)(v803 + 3);
                        v803[2] = (uint64_t ***)0x100000000;
LABEL_1257:
                        v809 = *((unsigned int *)v803 + 4);
                        if ((_DWORD)v809)
                        {
                          v810 = (llvm::MDNode **)(v803[1] + 1);
                          v811 = 16 * v809;
                          while (*((_DWORD *)v810 - 2) != 7)
                          {
                            v765 = 0;
                            v810 += 2;
                            v811 -= 16;
                            if (!v811)
                              goto LABEL_1263;
                          }
                          v765 = *v810;
LABEL_1263:
                          if ((*((_BYTE *)v541 + 23) & 0x20) == 0)
                            goto LABEL_1278;
                          v812 = ***v541;
                          v2035 = v541;
                          v813 = *(_DWORD *)(v812 + 2496);
                          if (v813)
                          {
                            v814 = *(_QWORD *)(v812 + 2480);
                            v815 = v813 - 1;
                            v816 = v815 & ((v541 >> 4) ^ (v541 >> 9));
                            v817 = (uint64_t ****)(v814 + 40 * v816);
                            v818 = *v817;
                            if (*v817 == v541)
                              goto LABEL_1274;
                            v819 = 0;
                            v820 = 1;
                            while (v818 != (uint64_t ***)-4096)
                            {
                              if (v819)
                                v821 = 0;
                              else
                                v821 = v818 == (uint64_t ***)-8192;
                              if (v821)
                                v819 = v817;
                              v822 = v816 + v820++;
                              v816 = v822 & v815;
                              v817 = (uint64_t ****)(v814 + 40 * v816);
                              v818 = *v817;
                              if (*v817 == v541)
                                goto LABEL_1274;
                            }
                            if (v819)
                              v1791 = v819;
                            else
                              v1791 = v817;
                          }
                          else
                          {
                            v1791 = 0;
                          }
                          v817 = (uint64_t ****)sub_1C541AB24(v812 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v1791);
                          v1792 = (uint64_t ***)v2035;
                          v817[3] = 0;
                          v817[4] = 0;
                          *v817 = v1792;
                          v817[1] = (uint64_t ***)(v817 + 3);
                          v817[2] = (uint64_t ***)0x100000000;
LABEL_1274:
                          v823 = *((unsigned int *)v817 + 4);
                          if ((_DWORD)v823)
                          {
                            v824 = (llvm::MDNode **)(v817[1] + 1);
                            v825 = 16 * v823;
                            while (*((_DWORD *)v824 - 2) != 8)
                            {
                              v824 += 2;
                              v825 -= 16;
                              if (!v825)
                                goto LABEL_1278;
                            }
                            v826 = *v824;
LABEL_1279:
                            if ((unint64_t)v766 | (unint64_t)v782 | (unint64_t)v765 | (unint64_t)v826
                              && v1900 != *(uint64_t **)v1955)
                            {
                              v827 = v1900;
                              do
                              {
                                v828 = v827 - 3;
                                if (!v827)
                                  v828 = 0;
                                v829 = v828 + 5;
                                for (kk = (_QWORD *)v828[6]; kk != v829; kk = (_QWORD *)kk[1])
                                {
                                  if (kk)
                                    v831 = (uint64_t ***)(kk - 3);
                                  else
                                    v831 = 0;
                                  v832 = *((unsigned __int8 *)v831 + 16);
                                  v833 = (v832 - 33);
                                  if (v833 <= 0x37)
                                  {
                                    if (((1 << (v832 - 33)) & 0x8000000000041) != 0)
                                    {
                                      v835 = v831[8];
                                      if (!v835
                                        || (*((_BYTE *)v835 + 20) & 4) == 0 && (*((_BYTE *)v835 + 17) & 0x10) == 0)
                                      {
                                        LODWORD(v2035) = 7;
                                        if (sub_1C53E4BBC((uint64_t)v831, (__int32 *)&v2035, 1uLL))
                                        {
                                          v906 = (uint64_t)*(v831 - 4);
                                          if (!v906
                                            || *(_BYTE *)(v906 + 16)
                                            || *(uint64_t ***)(v906 + 24) != v831[9]
                                            || *(_DWORD *)(v906 + 36) != 7)
                                          {
                                            goto LABEL_1314;
                                          }
                                        }
                                        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v831, 66) & 1) == 0
                                          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v831, 44))
                                        {
                                          goto LABEL_1314;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      if (((1 << (v832 - 33)) & 0x808001C8000010) != 0)
                                        goto LABEL_1314;
                                      if (v833 != 28)
                                        goto LABEL_1293;
                                      if ((*((_WORD *)v831 + 9) & 0x301) != 0)
                                        goto LABEL_1314;
                                    }
                                    v832 = *((unsigned __int8 *)v831 + 16);
                                  }
LABEL_1293:
                                  v834 = (v832 - 33);
                                  if (v834 > 0x37)
                                    continue;
                                  if (((1 << v834) & 0x8000000000041) != 0)
                                  {
                                    v836 = v831[8];
                                    if (v836 && (*((_BYTE *)v836 + 17) & 0x30) != 0)
                                      continue;
                                    v837 = *((_DWORD *)v831 + 5);
                                    if (v837 < 0
                                      && (v907 = &v831[-4 * (v837 & 0x7FFFFFF)],
                                          v910 = (uint64_t)*(v907 - 1),
                                          v908 = v907 - 1,
                                          (v909 = v910) != 0))
                                    {
                                      v911 = -v909;
                                      while (1)
                                      {
                                        v912 = (*(_DWORD **)((char *)v908 + v911))[2];
                                        v247 = v912 > 7;
                                        v913 = (1 << v912) & 0x83;
                                        if (v247 || v913 == 0)
                                          break;
                                        v911 += 16;
                                        if (!v911)
                                          goto LABEL_1308;
                                      }
                                    }
                                    else
                                    {
LABEL_1308:
                                      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v831, 45) & 1) != 0
                                        || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v831, 44) & 1) != 0)
                                      {
                                        continue;
                                      }
                                    }
                                  }
                                  else if (v834 == 27)
                                  {
                                    if ((*((_WORD *)v831 + 9) & 0x301) == 0)
                                      continue;
                                  }
                                  else if (((1 << v834) & 0x808001D0000010) == 0)
                                  {
                                    continue;
                                  }
LABEL_1314:
                                  if (!v766)
                                    goto LABEL_1337;
                                  if ((*((_BYTE *)v831 + 23) & 0x20) == 0)
                                    goto LABEL_1331;
                                  v838 = ***v831;
                                  v2035 = v831;
                                  v839 = *(_DWORD *)(v838 + 2496);
                                  if (v839)
                                  {
                                    v840 = *(_QWORD *)(v838 + 2480);
                                    v841 = v839 - 1;
                                    v842 = v841 & ((v831 >> 4) ^ (v831 >> 9));
                                    v843 = (uint64_t ****)(v840 + 40 * v842);
                                    v844 = *v843;
                                    if (*v843 == v831)
                                      goto LABEL_1326;
                                    v845 = 0;
                                    v846 = 1;
                                    while (v844 != (uint64_t ***)-4096)
                                    {
                                      if (v845)
                                        v847 = 0;
                                      else
                                        v847 = v844 == (uint64_t ***)-8192;
                                      if (v847)
                                        v845 = v843;
                                      v848 = v842 + v846++;
                                      v842 = v848 & v841;
                                      v843 = (uint64_t ****)(v840 + 40 * v842);
                                      v844 = *v843;
                                      if (*v843 == v831)
                                        goto LABEL_1326;
                                    }
                                    if (v845)
                                      v898 = v845;
                                    else
                                      v898 = v843;
                                  }
                                  else
                                  {
                                    v898 = 0;
                                  }
                                  v843 = (uint64_t ****)sub_1C541AB24(v838 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v898);
                                  v899 = (uint64_t ***)v2035;
                                  v843[4] = 0;
                                  v843[3] = 0;
                                  *v843 = v899;
                                  v843[1] = (uint64_t ***)(v843 + 3);
                                  v843[2] = (uint64_t ***)0x100000000;
LABEL_1326:
                                  v849 = *((unsigned int *)v843 + 4);
                                  if ((_DWORD)v849)
                                  {
                                    v850 = (llvm::MDNode **)(v843[1] + 1);
                                    v851 = 16 * v849;
                                    while (*((_DWORD *)v850 - 2) != 10)
                                    {
                                      v852 = 0;
                                      v850 += 2;
                                      v851 -= 16;
                                      if (!v851)
                                        goto LABEL_1332;
                                    }
                                    v852 = *v850;
                                    goto LABEL_1332;
                                  }
LABEL_1331:
                                  v852 = 0;
LABEL_1332:
                                  v766 = llvm::MDNode::concatenate(v852, v766, v277);
                                  if (v766 || v831[6] || (*((_BYTE *)v831 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v831, 10, v766);
                                  else
                                    v766 = 0;
LABEL_1337:
                                  if (!v782)
                                    goto LABEL_1359;
                                  if ((*((_BYTE *)v831 + 23) & 0x20) == 0)
                                    goto LABEL_1354;
                                  v853 = ***v831;
                                  v2035 = v831;
                                  v854 = *(_DWORD *)(v853 + 2496);
                                  if (v854)
                                  {
                                    v855 = *(_QWORD *)(v853 + 2480);
                                    v856 = v854 - 1;
                                    v857 = v856 & ((v831 >> 4) ^ (v831 >> 9));
                                    v858 = (uint64_t ****)(v855 + 40 * v857);
                                    v859 = *v858;
                                    if (*v858 == v831)
                                      goto LABEL_1349;
                                    v860 = 0;
                                    v861 = 1;
                                    while (v859 != (uint64_t ***)-4096)
                                    {
                                      if (v860)
                                        v862 = 0;
                                      else
                                        v862 = v859 == (uint64_t ***)-8192;
                                      if (v862)
                                        v860 = v858;
                                      v863 = v857 + v861++;
                                      v857 = v863 & v856;
                                      v858 = (uint64_t ****)(v855 + 40 * v857);
                                      v859 = *v858;
                                      if (*v858 == v831)
                                        goto LABEL_1349;
                                    }
                                    if (v860)
                                      v900 = v860;
                                    else
                                      v900 = v858;
                                  }
                                  else
                                  {
                                    v900 = 0;
                                  }
                                  v858 = (uint64_t ****)sub_1C541AB24(v853 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v900);
                                  v901 = (uint64_t ***)v2035;
                                  v858[4] = 0;
                                  v858[3] = 0;
                                  *v858 = v901;
                                  v858[1] = (uint64_t ***)(v858 + 3);
                                  v858[2] = (uint64_t ***)0x100000000;
LABEL_1349:
                                  v864 = *((unsigned int *)v858 + 4);
                                  if ((_DWORD)v864)
                                  {
                                    v865 = (llvm **)(v858[1] + 1);
                                    v866 = 16 * v864;
                                    while (*((_DWORD *)v865 - 2) != 25)
                                    {
                                      v867 = 0;
                                      v865 += 2;
                                      v866 -= 16;
                                      if (!v866)
                                        goto LABEL_1355;
                                    }
                                    v867 = *v865;
                                    goto LABEL_1355;
                                  }
LABEL_1354:
                                  v867 = 0;
LABEL_1355:
                                  v277 = llvm::uniteAccessGroups(v867, v782, v277);
                                  if (v277 || v831[6] || (*((_BYTE *)v831 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v831, 25, v277);
LABEL_1359:
                                  if (!v765)
                                    goto LABEL_1381;
                                  if ((*((_BYTE *)v831 + 23) & 0x20) == 0)
                                    goto LABEL_1376;
                                  v868 = ***v831;
                                  v2035 = v831;
                                  v869 = *(_DWORD *)(v868 + 2496);
                                  if (v869)
                                  {
                                    v870 = *(_QWORD *)(v868 + 2480);
                                    v871 = v869 - 1;
                                    v872 = v871 & ((v831 >> 4) ^ (v831 >> 9));
                                    v873 = (uint64_t ****)(v870 + 40 * v872);
                                    v874 = *v873;
                                    if (*v873 == v831)
                                      goto LABEL_1371;
                                    v875 = 0;
                                    v876 = 1;
                                    while (v874 != (uint64_t ***)-4096)
                                    {
                                      if (v875)
                                        v877 = 0;
                                      else
                                        v877 = v874 == (uint64_t ***)-8192;
                                      if (v877)
                                        v875 = v873;
                                      v878 = v872 + v876++;
                                      v872 = v878 & v871;
                                      v873 = (uint64_t ****)(v870 + 40 * v872);
                                      v874 = *v873;
                                      if (*v873 == v831)
                                        goto LABEL_1371;
                                    }
                                    if (v875)
                                      v902 = v875;
                                    else
                                      v902 = v873;
                                  }
                                  else
                                  {
                                    v902 = 0;
                                  }
                                  v873 = (uint64_t ****)sub_1C541AB24(v868 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v902);
                                  v903 = (uint64_t ***)v2035;
                                  v873[4] = 0;
                                  v873[3] = 0;
                                  *v873 = v903;
                                  v873[1] = (uint64_t ***)(v873 + 3);
                                  v873[2] = (uint64_t ***)0x100000000;
LABEL_1371:
                                  v879 = *((unsigned int *)v873 + 4);
                                  if ((_DWORD)v879)
                                  {
                                    v880 = (llvm::MDNode **)(v873[1] + 1);
                                    v881 = 16 * v879;
                                    while (*((_DWORD *)v880 - 2) != 7)
                                    {
                                      v882 = 0;
                                      v880 += 2;
                                      v881 -= 16;
                                      if (!v881)
                                        goto LABEL_1377;
                                    }
                                    v882 = *v880;
                                    goto LABEL_1377;
                                  }
LABEL_1376:
                                  v882 = 0;
LABEL_1377:
                                  v277 = llvm::MDNode::concatenate(v882, v765, v277);
                                  if (v277 || v831[6] || (*((_BYTE *)v831 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v831, 7, v277);
LABEL_1381:
                                  if (!v826)
                                    continue;
                                  if ((*((_BYTE *)v831 + 23) & 0x20) == 0)
                                    goto LABEL_1398;
                                  v883 = ***v831;
                                  v2035 = v831;
                                  v884 = *(_DWORD *)(v883 + 2496);
                                  if (v884)
                                  {
                                    v885 = *(_QWORD *)(v883 + 2480);
                                    v886 = v884 - 1;
                                    v887 = v886 & ((v831 >> 4) ^ (v831 >> 9));
                                    v888 = (uint64_t ****)(v885 + 40 * v887);
                                    v889 = *v888;
                                    if (*v888 == v831)
                                      goto LABEL_1393;
                                    v890 = 0;
                                    v891 = 1;
                                    while (v889 != (uint64_t ***)-4096)
                                    {
                                      if (v890)
                                        v892 = 0;
                                      else
                                        v892 = v889 == (uint64_t ***)-8192;
                                      if (v892)
                                        v890 = v888;
                                      v893 = v887 + v891++;
                                      v887 = v893 & v886;
                                      v888 = (uint64_t ****)(v885 + 40 * v887);
                                      v889 = *v888;
                                      if (*v888 == v831)
                                        goto LABEL_1393;
                                    }
                                    if (v890)
                                      v904 = v890;
                                    else
                                      v904 = v888;
                                  }
                                  else
                                  {
                                    v904 = 0;
                                  }
                                  v888 = (uint64_t ****)sub_1C541AB24(v883 + 2480, (uint64_t)&v2035, (uint64_t *)&v2035, v904);
                                  v905 = (uint64_t ***)v2035;
                                  v888[4] = 0;
                                  v888[3] = 0;
                                  *v888 = v905;
                                  v888[1] = (uint64_t ***)(v888 + 3);
                                  v888[2] = (uint64_t ***)0x100000000;
LABEL_1393:
                                  v894 = *((unsigned int *)v888 + 4);
                                  if ((_DWORD)v894)
                                  {
                                    v895 = (llvm::MDNode **)(v888[1] + 1);
                                    v896 = 16 * v894;
                                    while (*((_DWORD *)v895 - 2) != 8)
                                    {
                                      v897 = 0;
                                      v895 += 2;
                                      v896 -= 16;
                                      if (!v896)
                                        goto LABEL_1399;
                                    }
                                    v897 = *v895;
                                    goto LABEL_1399;
                                  }
LABEL_1398:
                                  v897 = 0;
LABEL_1399:
                                  v277 = llvm::MDNode::concatenate(v897, v826, v277);
                                  if (v277 || v831[6] || (*((_BYTE *)v831 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v831, 8, v277);
                                }
                                v827 = (uint64_t *)v827[1];
                              }
                              while (v827 != *(uint64_t **)v1955);
                            }
                            v916 = a2;
                            v915 = v1944;
                            v917 = a1;
                            if (*(_QWORD *)(a2 + 8))
                            {
                              v918 = v1900 - 3;
                              if (!v1900)
                                v918 = 0;
                              for (mm = v918 + 3; mm != *(_QWORD **)v1955; mm = (_QWORD *)mm[1])
                              {
                                v920 = mm - 3;
                                if (!mm)
                                  v920 = 0;
                                v921 = v920 + 5;
                                for (nn = (_QWORD *)v920[6]; nn != v921; nn = (_QWORD *)nn[1])
                                {
                                  if (nn)
                                    v923 = (uint64_t)(nn - 3);
                                  else
                                    v923 = 0;
                                  v924 = sub_1C4D9F8B4(v923);
                                  if (nn && v924)
                                  {
                                    v925 = (char **)(*(uint64_t (**)(_QWORD, llvm::AttributeFuncs *))(a2 + 8))(*(_QWORD *)(a2 + 16), v1944);
                                    llvm::AssumptionCache::registerAssumption(v925, v923);
                                  }
                                }
                              }
                            }
                            v926 = v1995[1];
                            if (LODWORD(v1995[3]))
                            {
                              v927 = 16 * LODWORD(v1995[3]);
                              v928 = (unsigned __int8 **)(v1995[1] + 8);
                              do
                              {
                                if (((unint64_t)*(v928 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v928)
                                  llvm::MetadataTracking::untrack((uint64_t)v928, *v928);
                                v928 += 2;
                                v927 -= 16;
                              }
                              while (v927);
                              v926 = v1995[1];
                            }
                            MEMORY[0x1CAA32FB4](v926, 8);
                            if ((_QWORD)v1994)
                            {
                              *((_QWORD *)&v1994 + 1) = v1994;
                              operator delete((void *)v1994);
                            }
                            MEMORY[0x1CAA32FB4](__src, 8);
                            if (v1984 != &v1986)
                              free(v1984);
                            if (v2000)
                            {
                              sub_1C4E43068((uint64_t)&v1999);
                              MEMORY[0x1CAA32FB4](v1999, 8);
                              v2000 = 0;
                            }
                            v929 = (char *)v1996;
                            if (v1998)
                            {
                              v930 = (char *)v1996 + 64 * (unint64_t)v1998;
                              do
                              {
                                v931 = *((_QWORD *)v929 + 3);
                                if ((v931 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                {
                                  v932 = *((_QWORD *)v929 + 7);
                                  if (v932)
                                  {
                                    if (v932 != -8192 && v932 != -4096)
                                    {
                                      v933 = *((_QWORD *)v929 + 5) & 0xFFFFFFFFFFFFFFF8;
                                      *(_QWORD *)v933 = *((_QWORD *)v929 + 6);
                                      v934 = (unint64_t *)*((_QWORD *)v929 + 6);
                                      if (v934)
                                      {
                                        *v934 = *v934 & 7 | v933;
                                      }
                                      else
                                      {
                                        v935 = *((_QWORD *)v929 + 7);
                                        v936 = ***(int32x2_t ****)v935;
                                        v937 = (unint64_t)v936[303];
                                        if (v937 <= v933)
                                        {
                                          v938 = v936[305].u32[0];
                                          if (v937 + 16 * v938 > v933)
                                          {
                                            v939 = v938 - 1;
                                            LODWORD(v940) = v939 & ((v935 >> 4) ^ (v935 >> 9));
                                            v941 = (uint64_t *)(v937 + 16 * v940);
                                            v942 = *v941;
                                            if (v935 == *v941)
                                            {
LABEL_1486:
                                              *v941 = -8192;
                                              v936[304] = vadd_s32(v936[304], (int32x2_t)0x1FFFFFFFFLL);
                                              v935 = *((_QWORD *)v929 + 7);
                                            }
                                            else
                                            {
                                              v943 = 1;
                                              while (v942 != -4096)
                                              {
                                                v944 = v940 + v943++;
                                                v940 = v944 & v939;
                                                v942 = *(_QWORD *)(v937 + 16 * v940);
                                                if (v935 == v942)
                                                {
                                                  v941 = (uint64_t *)(v937 + 16 * v940);
                                                  goto LABEL_1486;
                                                }
                                              }
                                            }
                                            *(_BYTE *)(v935 + 17) &= ~1u;
                                          }
                                        }
                                      }
                                      v931 = *((_QWORD *)v929 + 3);
                                    }
                                  }
                                }
                                if (v931 != -4096 && v931 != -8192 && v931 != 0)
                                {
                                  v946 = *((_QWORD *)v929 + 1) & 0xFFFFFFFFFFFFFFF8;
                                  *(_QWORD *)v946 = *((_QWORD *)v929 + 2);
                                  v947 = (unint64_t *)*((_QWORD *)v929 + 2);
                                  if (v947)
                                  {
                                    *v947 = *v947 & 7 | v946;
                                  }
                                  else
                                  {
                                    v948 = *((_QWORD *)v929 + 3);
                                    v949 = ***(int32x2_t ****)v948;
                                    v950 = (unint64_t)v949[303];
                                    if (v950 <= v946)
                                    {
                                      v951 = v949[305].u32[0];
                                      if (v950 + 16 * v951 > v946)
                                      {
                                        v952 = v951 - 1;
                                        LODWORD(v953) = v952 & ((v948 >> 4) ^ (v948 >> 9));
                                        v954 = (uint64_t *)(v950 + 16 * v953);
                                        v955 = *v954;
                                        if (v948 == *v954)
                                        {
LABEL_1505:
                                          *v954 = -8192;
                                          v949[304] = vadd_s32(v949[304], (int32x2_t)0x1FFFFFFFFLL);
                                          v948 = *((_QWORD *)v929 + 3);
                                        }
                                        else
                                        {
                                          v956 = 1;
                                          while (v955 != -4096)
                                          {
                                            v957 = v953 + v956++;
                                            v953 = v957 & v952;
                                            v955 = *(_QWORD *)(v950 + 16 * v953);
                                            if (v948 == v955)
                                            {
                                              v954 = (uint64_t *)(v950 + 16 * v953);
                                              goto LABEL_1505;
                                            }
                                          }
                                        }
                                        *(_BYTE *)(v948 + 17) &= ~1u;
                                      }
                                    }
                                  }
                                }
                                v929 += 64;
                              }
                              while (v929 != v930);
                              v929 = (char *)v1996;
                            }
                            MEMORY[0x1CAA32FB4](v929, 8);
                            v960 = *((_QWORD *)v1944 + 10);
                            if (v960)
                              v961 = v960 - 24;
                            else
                              v961 = 0;
                            v962 = v1900 - 3;
                            if (!v1900)
                              v962 = 0;
                            v963 = v962 + 5;
                            v1896 = v962;
                            v1897 = v962 + 5;
                            v964 = (uint64_t *)v962[6];
                            if (v964 != v962 + 5)
                            {
                              v965 = *(uint64_t **)(v961 + 48);
                              v966 = a2 + 48;
                              v967 = a2 + 64;
                              while (1)
                              {
                                v968 = v964;
                                v964 = (uint64_t *)v964[1];
                                v969 = v968 - 3;
                                if (!v968)
                                  v969 = 0;
                                v970 = *((unsigned __int8 *)v969 + 16);
                                if (v970 == 59)
                                  v971 = v969;
                                else
                                  v971 = 0;
                                if (!v968 || v970 != 59)
                                  goto LABEL_1539;
                                if (v971[1])
                                  break;
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v971[5] + 40, (uint64_t ***)v971);
                                v975 = v971[3];
                                v976 = (_QWORD *)v971[4];
                                *v976 = v975;
                                *(_QWORD *)(v975 + 8) = v976;
                                v971[3] = 0;
                                v971[4] = 0;
                                llvm::Value::deleteValue((llvm::Value *)v971);
                                v963 = v1897;
LABEL_1539:
                                if (v964 == v963)
                                  goto LABEL_1589;
                              }
                              if (*(unsigned __int8 *)(*(v971 - 4) + 16) > 0x14u || (*((_WORD *)v971 + 9) & 0x40) != 0)
                                goto LABEL_1539;
                              v972 = *(unsigned int *)(v916 + 56);
                              if (v972 >= *(unsigned int *)(v916 + 60))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod(v966, v967, v972 + 1, 8);
                                v963 = v1897;
                                v972 = *(unsigned int *)(v916 + 56);
                              }
                              *(_QWORD *)(*(_QWORD *)(v916 + 48) + 8 * v972) = v971;
                              v973 = *(_DWORD *)(v916 + 56) + 1;
                              *(_DWORD *)(v916 + 56) = v973;
                              while (1)
                              {
                                v974 = v964 ? (uint64_t)(v964 - 3) : 0;
                                if (*(_BYTE *)(v974 + 16) != 59
                                  || !*(v964 - 2)
                                  || *(unsigned __int8 *)(*(v964 - 7) + 16) > 0x14u
                                  || (*((_WORD *)v964 - 3) & 0x40) != 0)
                                {
                                  break;
                                }
                                if (v973 >= *(_DWORD *)(v916 + 60))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod(v966, v967, v973 + 1, 8);
                                  v963 = v1897;
                                  v973 = *(_DWORD *)(v916 + 56);
                                }
                                *(_QWORD *)(*(_QWORD *)(v916 + 48) + 8 * v973) = v964 - 3;
                                v973 = *(_DWORD *)(v916 + 56) + 1;
                                *(_DWORD *)(v916 + 56) = v973;
                                v964 = (uint64_t *)v964[1];
                              }
                              v977 = v971 + 3;
                              if (v971 + 3 == v964 || v965 == v964)
                              {
                                v917 = a1;
                                v916 = a2;
                                goto LABEL_1539;
                              }
                              v978 = *((_QWORD *)v915 + 10);
                              if (v978)
                                v979 = v978 - 24;
                              else
                                v979 = 0;
                              *(_WORD *)(v979 + 18) &= ~0x8000u;
                              if ((uint64_t *)v979 == v1896)
                              {
LABEL_1555:
                                v986 = *v964;
                                v987 = *v977;
                                *(_QWORD *)(v987 + 8) = v964;
                                *v964 = v987;
                                v988 = *v965;
                                *(_QWORD *)(v986 + 8) = v965;
                                *v977 = v988;
                                *(_QWORD *)(v988 + 8) = v977;
                                *v965 = v986;
                                v917 = a1;
                                v916 = a2;
                                v915 = v1944;
                                goto LABEL_1539;
                              }
                              v980 = *(_QWORD *)(v979 + 56);
                              if (v980)
                                v981 = *(llvm::ValueSymbolTable **)(v980 + 104);
                              else
                                v981 = 0;
                              v982 = v1896[7];
                              if (v982)
                                v983 = *(llvm::ValueSymbolTable **)(v982 + 104);
                              else
                                v983 = 0;
                              v984 = v977;
                              if (v981 == v983)
                              {
                                do
                                {
                                  v985 = v984 - 3;
                                  if (!v984)
                                    v985 = 0;
                                  v985[5] = v979;
                                  v984 = (uint64_t *)v984[1];
                                }
                                while (v984 != v964);
                                goto LABEL_1555;
                              }
                              v1889 = v977;
                              while (1)
                              {
                                v989 = (llvm::Value *)(v1889 - 3);
                                if (!v1889)
                                  v989 = 0;
                                v1910 = v989;
                                v1882 = *((_DWORD *)v989 + 5) & 0x10000000;
                                if (v983)
                                {
                                  if (v1882)
                                    break;
                                }
LABEL_1584:
                                *((_QWORD *)v1910 + 5) = v979;
                                if (v981 && v1882)
                                  llvm::ValueSymbolTable::reinsertValue(v981, v1910);
                                v1889 = (uint64_t *)v1889[1];
                                v963 = v1897;
                                if (v1889 == v964)
                                  goto LABEL_1555;
                              }
                              v990 = ***(_QWORD ***)v989;
                              v991 = *(_QWORD *)(v990 + 152);
                              v992 = *(unsigned int *)(v990 + 168);
                              if ((_DWORD)v992)
                              {
                                LODWORD(v993) = (v992 - 1) & ((v1910 >> 4) ^ (v1910 >> 9));
                                v994 = (llvm::Value **)(v991 + 16 * v993);
                                v995 = *v994;
                                if (*v994 == v1910)
                                  goto LABEL_1571;
                                v996 = 1;
                                while (v995 != (llvm::Value *)-4096)
                                {
                                  v997 = v993 + v996++;
                                  v993 = v997 & (v992 - 1);
                                  v995 = *(llvm::Value **)(v991 + 16 * v993);
                                  if (v995 == v1910)
                                  {
                                    v994 = (llvm::Value **)(v991 + 16 * v993);
                                    goto LABEL_1571;
                                  }
                                }
                              }
                              v994 = (llvm::Value **)(v991 + 16 * v992);
LABEL_1571:
                              v998 = *((unsigned int *)v983 + 2);
                              if ((_DWORD)v998)
                              {
                                v999 = (size_t *)v994[1];
                                v1879 = *((unsigned int *)v983 + 5);
                                __s1 = (unsigned __int8 *)v999 + v1879;
                                __n = *v999;
                                v1000 = 0;
                                if (*v999)
                                {
                                  v1001 = *v999;
                                  v1002 = __s1;
                                  do
                                  {
                                    v1003 = *v1002++;
                                    v1000 = 33 * v1000 + v1003;
                                    --v1001;
                                  }
                                  while (v1001);
                                }
                                v1916 = v998 - 1;
                                v1922 = *(_QWORD *)v983;
                                v1891 = *(_QWORD *)v983 + 8 * v998 + 8;
                                v1949 = 1;
                                v1004 = v1000;
                                while (1)
                                {
                                  v1960 = (llvm::AttributeList *)(v1004 & v1916);
                                  v1005 = *(_QWORD **)(v1922 + 8 * v1960);
                                  if (v1005 != (_QWORD *)-8)
                                  {
                                    if (!v1005)
                                      goto LABEL_1584;
                                    if (*(_DWORD *)(v1891 + 4 * (_QWORD)v1960) == v1000
                                      && __n == *v1005
                                      && (!__n || !memcmp(__s1, (char *)v1005 + v1879, __n)))
                                    {
                                      break;
                                    }
                                  }
                                  v1004 = v1949 + (_DWORD)v1960;
                                  ++v1949;
                                }
                                *(_QWORD *)(v1922 + 8 * (int)v1960) = -8;
                                *(int32x2_t *)((char *)v983 + 12) = vadd_s32(*(int32x2_t *)((char *)v983 + 12), (int32x2_t)0x1FFFFFFFFLL);
                              }
                              goto LABEL_1584;
                            }
LABEL_1589:
                            __src = &v1993;
                            v1992 = 0x400000000;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
                            __dst.__r_.__value_.__l.__size_ = 0x400000000;
                            v1006 = *(_DWORD *)(*((_QWORD *)v1898 + 3) + 12);
                            v1007 = (v1006 - 1);
                            v1008 = v917 - 1;
                            v1009 = &v917[4 * v1007];
                            v1010 = v1006 + 1;
                            v1011 = v1934;
                            while (1)
                            {
                              v1012 = *((unsigned __int8 *)v917 + 16);
                              if (v1012 == 84)
                              {
                                v1013 = 0;
                              }
                              else
                              {
                                if (v1012 == 39)
                                {
                                  v917 = a1;
                                  v1013 = (*((_DWORD *)a1 + 20) + 1);
                                }
                                else
                                {
                                  v1013 = 2;
                                  v917 = a1;
                                }
                                v916 = a2;
                                v915 = v1944;
                                v1011 = v1934;
                              }
                              v1014 = *((_DWORD *)v917 + 5);
                              if (v1014 < 0
                                && (v1022 = v1014 & 0x7FFFFFF, ((unint64_t)v1008[-4 * v1022] & 0xFFFFFFFF0) != 0))
                              {
                                v1016 = -v1022;
                                v1015 = *((_DWORD *)&v917[-4 * v1022 - 1] - 1)
                                      - *(_DWORD *)((char *)&v917[-4 * v1022] - (char *)v917[-4 * v1022 - 1]);
                              }
                              else
                              {
                                v1015 = 0;
                                v1016 = -(uint64_t)(v1014 & 0x7FFFFFF);
                              }
                              if (v1007 >= ((unint64_t)((llvm::BasicBlock *)((char *)v1011
                                                                                                 + 32
                                                                                                 * -v1015
                                                                                                 + -32 * v1013)
                                                                            - (llvm::BasicBlock *)&v917[4 * v1016]) >> 5))
                                break;
                              v1017 = v1009[4 * v1016];
                              v1018 = v1992;
                              if (v1992 >= (unint64_t)HIDWORD(v1992))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1993, v1992 + 1, 8);
                                v1018 = v1992;
                              }
                              *((_QWORD *)__src + v1018) = v1017;
                              LODWORD(v1992) = v1992 + 1;
                              v1019 = v917[8];
                              if (v1019 && v1010 < *((_DWORD *)v1019 + 2))
                                v1020 = v1019[v1010 + 5];
                              else
                                v1020 = 0;
                              v1021 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                              if (LODWORD(__dst.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__dst.__r_.__value_.__r.__words[1]))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], LODWORD(__dst.__r_.__value_.__r.__words[1]) + 1, 8);
                                v1021 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                              }
                              *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v1021) = v1020;
                              ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
                              ++v1007;
                              v1009 += 4;
                              ++v1010;
                            }
                            if (!(_BYTE)v1975)
                            {
                              v1950 = 0;
                              v1961 = 0;
                              goto LABEL_1709;
                            }
                            if (v1012 == 84)
                            {
                              if ((*((_WORD *)v917 + 9) & 3) == 3)
                                v1023 = 0;
                              else
                                v1023 = *((_WORD *)v917 + 9) & 3;
                            }
                            else
                            {
                              v1023 = 0;
                            }
                            v1024 = __sz;
                            v1025 = v1901;
                            if (v1900 == *(uint64_t **)v1955)
                            {
                              LOBYTE(v1027) = 0;
                              v1026 = 0;
                              goto LABEL_1708;
                            }
                            v1026 = 0;
                            v1027 = 0;
                            v1028 = (size_t)v1900;
                            do
                            {
                              v1029 = v1028 - 24;
                              if (!v1028)
                                v1029 = 0;
                              v1030 = v1029 + 40;
                              v1031 = *(_QWORD *)(v1029 + 48);
                              while (v1031 != v1030)
                              {
                                v1032 = v1031;
                                v1031 = *(_QWORD *)(v1031 + 8);
                                v1033 = (_QWORD *)(v1032 - 24);
                                if (v1032)
                                  v1034 = v1032 - 24;
                                else
                                  v1034 = 0;
                                v1035 = *(unsigned __int8 *)(v1034 + 16);
                                if (v1035 == 84)
                                  v1036 = v1034;
                                else
                                  v1036 = 0;
                                if (v1032 && v1035 == 84)
                                {
                                  if (!(_DWORD)v1992)
                                  {
                                    v1033 = (_QWORD *)v1036;
                                    goto LABEL_1654;
                                  }
                                  if (v1024)
                                  {
                                    v1037 = *(_QWORD *)(v1036 - 32);
                                    if (!v1037
                                      || *(_BYTE *)(v1037 + 16)
                                      || *(_QWORD *)(v1037 + 24) != *(_QWORD *)(v1036 + 72))
                                    {
                                      v1037 = 0;
                                    }
                                    if (v1037 == v1024)
                                      goto LABEL_1639;
                                  }
                                  if ((*(_WORD *)(v1036 + 18) & 3) == 2)
                                  {
LABEL_1639:
                                    v1038 = *(_QWORD *)(v1036 + 64);
                                    v2035 = &v2036.u64[1];
                                    v2036.i64[0] = 0x800000000;
                                    v1039 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                                    if (v1038)
                                      v1040 = 0;
                                    else
                                      v1040 = LODWORD(__dst.__r_.__value_.__r.__words[1]) == 0;
                                    __na = v1028;
                                    if (v1040)
                                    {
                                      v1039 = 0;
                                    }
                                    else if (*(_DWORD *)(*(_QWORD *)(v1036 + 72) + 12) != 1)
                                    {
                                      v1041 = 0;
                                      v1042 = 0;
                                      do
                                      {
                                        if (v1038 && (v1042 + 2) < *(_DWORD *)(v1038 + 8))
                                          v1043 = *(_QWORD *)(v1038 + 40 + 8 * (v1042 + 2));
                                        else
                                          v1043 = 0;
                                        if (v1041 >= v2036.i32[1])
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2035, (uint64_t)&v2036.i64[1], v1041 + 1, 8);
                                          v1041 = v2036.i32[0];
                                        }
                                        *((_QWORD *)v2035 + v1041) = v1043;
                                        v1041 = ++v2036.i32[0];
                                        ++v1042;
                                      }
                                      while (v1042 < (*(_DWORD *)(*(_QWORD *)(v1036 + 72) + 12) - 1));
                                      v1039 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                                    }
                                    sub_1C618A450((unsigned int *)&v2035, __dst.__r_.__value_.__l.__data_, (_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 8 * v1039));
                                    if (v1038 && (v1050 = *(_DWORD *)(v1038 + 8)) != 0)
                                    {
                                      v1051 = *(_QWORD *)(v1038 + 40);
                                      if (v1050 != 1)
                                      {
                                        v1052 = *(_QWORD *)(v1038 + 48);
LABEL_1673:
                                        v1923 = llvm::AttributeList::get(**(uint64_t ***)v1036, v1051, v1052, v2035, v2036.u32[0]);
                                        v1053 = *(_DWORD *)(v1036 + 20);
                                        v1054 = *(unsigned __int8 *)(v1036 + 16);
                                        v1935 = v1027;
                                        if (v1054 == 84)
                                        {
                                          v1055 = 0;
                                        }
                                        else if (v1054 == 39)
                                        {
                                          v1055 = (*(_DWORD *)(v1036 + 80) + 1);
                                        }
                                        else
                                        {
                                          v1055 = 2;
                                        }
                                        v1056 = v1053 & 0x7FFFFFF;
                                        v1057 = (_QWORD *)(v1036 - 32 * v1056);
                                        if (v1053 < 0 && (v1082 = *(v1057 - 1), (v1082 & 0xFFFFFFFF0) != 0))
                                          v1058 = (*((_DWORD *)v1057 - 3)
                                                               - *(_DWORD *)((char *)v1057 - v1082));
                                        else
                                          v1058 = 0;
                                        v1059 = v1036 - 32 * v1055 - 32 * v1058 - 32;
                                        v1984 = &v1986;
                                        v1985 = 0x600000000;
                                        v1060 = v1059 - (_QWORD)v1057;
                                        if ((unint64_t)(v1059 - (_QWORD)v1057) >= 0xC1)
                                        {
                                          *(_QWORD *)v1918 = v1055;
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1984, (uint64_t)&v1986, v1060 >> 5, 8);
                                          v1055 = *(_QWORD *)v1918;
                                          v1061 = v1985;
                                          v1062 = v1985;
                                        }
                                        else
                                        {
                                          v1061 = 0;
                                          v1062 = 0;
                                        }
                                        if (v1057 != (_QWORD *)v1059)
                                        {
                                          v1063 = (char *)v1984 + 8 * v1061;
                                          v1064 = 32 * v1056 - 32 * v1055 - 32 * v1058 - 32;
                                          do
                                          {
                                            v1065 = *v1057;
                                            v1057 += 4;
                                            *v1063++ = v1065;
                                            v1064 -= 32;
                                          }
                                          while (v1064);
                                        }
                                        LODWORD(v1985) = v1062 + ((unint64_t)v1060 >> 5);
                                        sub_1C486AF08((unsigned int *)&v1984, __src, (_BYTE *)__src + 8 * v1992);
                                        v1066 = *(uint64_t ***)(v1036 + 72);
                                        v1911 = (uint64_t *)v1984;
                                        v1917 = *(_QWORD *)(v1036 - 32);
                                        v1067 = v1985;
                                        v1068 = (v1985 + 1);
                                        v1069 = (_DWORD)v1985 == -1;
                                        LOWORD(v2029) = 257;
                                        v1070 = operator new(32 * v1068 + 80);
                                        v1033 = &v1070[4 * v1068];
                                        v1071 = *((_DWORD *)v1033 + 5) & 0x38000000 | v1068 & 0x7FFFFFF;
                                        *((_DWORD *)v1033 + 5) = v1071;
                                        if (!v1069)
                                        {
                                          do
                                          {
                                            *v1070 = 0;
                                            v1070[1] = 0;
                                            v1070[2] = 0;
                                            v1070[3] = v1033;
                                            v1070 += 4;
                                          }
                                          while (v1070 != v1033);
                                          v1071 = *((_DWORD *)v1033 + 5);
                                        }
                                        *v1033 = *v1066[2];
                                        v1033[1] = 0;
                                        *((_BYTE *)v1033 + 16) = 84;
                                        *((_BYTE *)v1033 + 17) = 0;
                                        *((_WORD *)v1033 + 9) = 0;
                                        *((_DWORD *)v1033 + 5) = v1071 & 0xC0000000 | v1068 & 0x7FFFFFF;
                                        *(_OWORD *)(v1033 + 3) = 0u;
                                        v1072 = v1033 + 3;
                                        *(_OWORD *)(v1033 + 5) = 0u;
                                        *((_DWORD *)v1033 + 14) = 0;
                                        v1073 = *(_QWORD *)(v1036 + 40);
                                        v1033[5] = v1073;
                                        *(_WORD *)(v1073 + 18) &= ~0x8000u;
                                        if ((*((_BYTE *)v1033 + 23) & 0x10) != 0)
                                        {
                                          v1080 = *(_QWORD *)(v1073 + 56);
                                          if (v1080)
                                          {
                                            v1081 = *(llvm::ValueSymbolTable **)(v1080 + 104);
                                            if (v1081)
                                              llvm::ValueSymbolTable::reinsertValue(v1081, (llvm::Value *)v1033);
                                          }
                                        }
                                        v1074 = *(_QWORD *)(v1036 + 24);
                                        v1033[3] = v1074;
                                        v1033[4] = v1036 + 24;
                                        *(_QWORD *)(v1074 + 8) = v1072;
                                        *(_QWORD *)(v1036 + 24) = v1072;
                                        v1033[8] = 0;
                                        llvm::CallInst::init((uint64_t ***)v1033, v1066, v1917, v1911, v1067, 0, 0, (uint64_t)v2027);
                                        v1075 = *(unsigned __int8 **)(v1036 + 48);
                                        v1969 = v1075;
                                        if (v1075)
                                          llvm::MetadataTracking::track((uint64_t)&v1969, v1075, 2);
                                        v1076 = (unsigned __int8 *)v1033[6];
                                        v1028 = __na;
                                        if (v1076)
                                          llvm::MetadataTracking::untrack((uint64_t)(v1033 + 6), v1076);
                                        v1077 = v1969;
                                        v1033[6] = v1969;
                                        if (v1077)
                                        {
                                          llvm::MetadataTracking::retrack((uint64_t)&v1969, v1077, (uint64_t)(v1033 + 6));
                                          v1969 = 0;
                                        }
                                        v1033[8] = v1923;
                                        *((_WORD *)v1033 + 9) = *((_WORD *)v1033 + 9) & 0xF003 | *(_WORD *)(v1036 + 18) & 0xFFC;
                                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1036, (llvm::Value *)v1033, (llvm::Value *)1);
                                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1036 + 40) + 40, (uint64_t ***)v1036);
                                        v1078 = *(_QWORD *)(v1036 + 24);
                                        v1079 = *(_QWORD **)(v1036 + 32);
                                        *v1079 = v1078;
                                        *(_QWORD *)(v1078 + 8) = v1079;
                                        *(_QWORD *)(v1036 + 24) = 0;
                                        *(_QWORD *)(v1036 + 32) = 0;
                                        llvm::Value::deleteValue((llvm::Value *)v1036);
                                        if (v1984 != &v1986)
                                          free(v1984);
                                        v1024 = __sz;
                                        v1025 = v1901;
                                        v1027 = v1935;
                                        if (v2035 != &v2036.u64[1])
                                          free(v2035);
                                        goto LABEL_1654;
                                      }
                                    }
                                    else
                                    {
                                      v1051 = 0;
                                    }
                                    v1052 = 0;
                                    goto LABEL_1673;
                                  }
LABEL_1654:
                                  v1044 = *(v1033 - 4);
                                  if (v1044 && !*(_BYTE *)(v1044 + 16) && *(_QWORD *)(v1044 + 24) == v1033[9])
                                    v1027 = v1027 & 1 | (*(_DWORD *)(v1044 + 36) == 119);
                                  v1045 = *((_WORD *)v1033 + 9);
                                  v1046 = v1045 & 3;
                                  if (v1023 >= v1046)
                                    v1047 = v1045 & 3;
                                  else
                                    v1047 = v1023;
                                  v1048 = v1045 & 0xFFFC;
                                  if (v1046 == 3)
                                    v1049 = 3;
                                  else
                                    v1049 = v1047;
                                  *((_WORD *)v1033 + 9) = v1049 | v1048;
                                  v1026 = v1026 & 1 | (v1049 == 2);
                                  if (v1025)
                                    v1033[8] = llvm::AttributeList::addAttributeAtIndex(v1033 + 8, *(uint64_t **)*v1033, -1, 37);
                                }
                              }
                              v1028 = *(_QWORD *)(v1028 + 8);
                            }
                            while (v1028 != *(_QWORD *)v1955);
LABEL_1708:
                            v1950 = v1027 & 1;
                            v1961 = v1026 & 1;
                            v916 = a2;
                            v915 = v1944;
LABEL_1709:
                            if ((v1887 & 1) != 0)
                            {
LABEL_1710:
                              if (*(_DWORD *)(v916 + 56))
                              {
                                v1083 = v1896[6];
                                if (v1083)
                                  v1084 = v1083 - 24;
                                else
                                  v1084 = 0;
                                sub_1C4773D54((uint64_t)&v2035, v1084, 0, 0, 0);
                                v1085 = *(unsigned int *)(v916 + 56);
                                if ((_DWORD)v1085)
                                {
                                  for (i1 = 0; i1 != v1085; ++i1)
                                  {
                                    v1087 = *(uint64_t **)(*(_QWORD *)(v916 + 48) + 8 * i1);
                                    if ((*((_WORD *)v1087 + 9) & 0x80) == 0)
                                    {
                                      v1088 = (_QWORD **)*v1087;
                                      v1089 = *(_DWORD *)(*v1087 + 8);
                                      if ((v1089 & 0xFE) == 0x12)
                                        v1089 = *(_DWORD *)(*v1088[2] + 8);
                                      v1090 = llvm::PointerType::get((llvm::PointerType *)(**v1088 + 1912), (llvm::Type *)(v1089 >> 8));
                                      if (v1088 == (_QWORD **)v1090)
                                      {
                                        if ((sub_1C5F0AB20(v1087[1]) & 1) != 0)
                                          continue;
                                      }
                                      else
                                      {
                                        v1091 = v1087[1];
                                        if (v1091)
                                        {
                                          v1092 = v1090;
                                          do
                                          {
                                            v1093 = *(_QWORD **)(v1091 + 24);
                                            if (*v1093 == v1092
                                              && llvm::Value::stripPointerCasts(*(llvm::Value **)(v1091 + 24)) == (llvm::Value *)v1087
                                              && (sub_1C5F0AB20(v1093[1]) & 1) != 0)
                                            {
                                              goto LABEL_1780;
                                            }
                                            v1091 = *(_QWORD *)(v1091 + 8);
                                          }
                                          while (v1091);
                                        }
                                      }
                                      v1094 = *(v1087 - 4);
                                      if (v1094)
                                        v1095 = *(_BYTE *)(v1094 + 16) == 16;
                                      else
                                        v1095 = 0;
                                      if (!v1095)
                                      {
LABEL_1732:
                                        v1096 = 0;
                                        v916 = a2;
LABEL_1733:
                                        llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v2035, (llvm::Value *)v1087, v1096);
                                        if ((_DWORD)v2002)
                                        {
                                          v1097 = (uint64_t *)v2001;
                                          v1098 = 8 * v2002;
                                          do
                                          {
                                            v1099 = *v1097;
                                            if (!v1961
                                              || !llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(v1099 + 40)))
                                            {
                                              if (!v1950)
                                                goto LABEL_1747;
                                              v1100 = *(_QWORD *)(v1099 + 40);
                                              v1101 = *(_QWORD *)(v1100 + 40);
                                              if (v1101 == v1100 + 40)
                                                goto LABEL_1747;
                                              v1102 = v1101 - 24;
                                              if (!v1101)
                                                v1102 = 0;
                                              v1103 = *(unsigned __int8 *)(v1102 + 16);
                                              if (v1103 != 29)
                                                v1102 = 0;
                                              v1104 = v1101 && v1103 == 29;
                                              if (!v1104
                                                || ((v1105 = *(_QWORD *)(*(_QWORD *)(v1099 + 40) + 48)) != 0
                                                  ? (v1106 = v1105 - 24)
                                                  : (v1106 = 0),
                                                    v1102 == v1106
                                                 || *(_QWORD *)(*(_QWORD *)(v1102 + 40) + 48) == v1102 + 24
                                                 || (v1107 = *(_QWORD *)(v1102 + 24)) == 0
                                                 || *(_BYTE *)(v1107 - 8) != 84
                                                 || (v1108 = *(_QWORD *)(v1107 - 56)) == 0
                                                 || *(_BYTE *)(v1108 + 16)
                                                 || *(_QWORD *)(v1108 + 24) != *(_QWORD *)(v1107 + 48)
                                                 || *(_DWORD *)(v1108 + 36) != 119))
                                              {
LABEL_1747:
                                                sub_1C4773D54((uint64_t)&v1984, v1099, 0, 0, 0);
                                                llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v1984, (llvm::Value *)v1087, v1096);
                                                if (v1984 != &v1986)
                                                  free(v1984);
                                              }
                                            }
                                            ++v1097;
                                            v1098 -= 8;
                                          }
                                          while (v1098);
                                        }
                                        continue;
                                      }
                                      v1109 = *((_QWORD *)v1944 + 5) + 272;
                                      v1110 = v1087[8];
                                      sub_1C4768AD0(v1109, v1110);
                                      v1112 = v1111;
                                      v1114 = v1113 == 1;
                                      llvm::DataLayout::getAlignment(v1109, v1110);
                                      v1117 = v1116;
                                      v1118 = (llvm::APInt *)(v1094 + 24);
                                      v1119 = *(_DWORD *)(v1094 + 32);
                                      if (v1119 >= 0x41)
                                      {
                                        if (v1119 - llvm::APInt::countLeadingZerosSlowCase(v1118) > 0x40)
                                          goto LABEL_1732;
                                        v1118 = *(llvm::APInt **)v1118;
                                      }
                                      v916 = a2;
                                      v1120 = *(_QWORD *)v1118;
                                      if (*(_QWORD *)v1118)
                                      {
                                        v1096 = 0;
                                        if (!v1114 && v1120 != -1)
                                        {
                                          v1122 = ((1 << v1117) + ((unint64_t)(v1112 + 7) >> 3) - 1) & -(1 << v1117);
                                          if (is_mul_ok(v1120, v1122))
                                          {
                                            v1123 = v1120 * v1122;
                                            v1124 = **(_QWORD **)*v1087;
                                            v1125 = *(llvm::ConstantInt **)(v1124 + 1984);
                                            v1126 = *(unsigned int *)(v1124 + 1992);
                                            LODWORD(v1985) = v1126 >> 8;
                                            if (v1126 >> 8 > 0x40)
                                            {
                                              llvm::APInt::initSlowCase((llvm::APInt *)&v1984, v1123, 0);
                                            }
                                            else
                                            {
                                              v1127 = v1126 <= 0xFF
                                                    ? 0
                                                    : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1126);
                                              v1984 = (void *)(v1127 & v1123);
                                            }
                                            v1096 = llvm::ConstantInt::get(v1125, (llvm::LLVMContext *)&v1984, v1115);
                                            if (v1985 >= 0x41)
                                            {
                                              if (v1984)
                                                MEMORY[0x1CAA32F9C](v1984, 0x1000C8000313F17);
                                            }
                                          }
                                        }
                                        goto LABEL_1733;
                                      }
                                    }
LABEL_1780:
                                    ;
                                  }
                                }
                                if (v2035 != &v2036.u64[1])
                                  free(v2035);
                              }
                            }
                            else
                            {
                              v1128 = *((_QWORD *)v915 + 14);
                              if (v1128)
                              {
                                if (*(_DWORD *)(v1128 + 8))
                                {
                                  v1129 = *(_QWORD *)(v1128 + 40);
                                  if (v1129)
                                  {
                                    v1130 = *(_DWORD *)(v1129 + 40);
                                    if (v1130)
                                    {
                                      v1131 = *(_QWORD *)(v1129 + 24);
                                      v1132 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                                      if ((v1132 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
                                      {
                                        v1814 = llvm::hashing::detail::fixed_seed_override;
                                        if (!llvm::hashing::detail::fixed_seed_override)
                                          v1814 = 0xFF51AFD7ED558CCDLL;
                                        qword_1ED7EAC80 = v1814;
                                        __cxa_guard_release(&qword_1ED7EAC88);
                                      }
                                      v1133 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
                                      v1134 = 0x9DDFEA08EB382D69
                                            * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                                                          * ((v1133
                                                                                            - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v1133 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
                                      v1135 = -348639895 * ((v1134 >> 47) ^ v1134);
                                      for (i2 = 1; ; ++i2)
                                      {
                                        v1137 = v1135 & (v1130 - 1);
                                        v1138 = (uint64_t *)(v1131 + 24 * v1137);
                                        v1139 = *v1138;
                                        if (*v1138 == -1)
                                        {
                                          if ("coroutine.presplit" == (char *)-1)
                                            goto LABEL_1710;
                                        }
                                        else if (v1139 == -2)
                                        {
                                          if ("coroutine.presplit" == (char *)-2)
                                            goto LABEL_1710;
                                        }
                                        else if (v1138[1] == 18)
                                        {
                                          v958 = (llvm::LLVMContext *)*(unsigned __int16 *)(v1139 + 16);
                                          v1140 = *(_QWORD *)v1139 == 0x6E6974756F726F63
                                               && *(_QWORD *)(v1139 + 8) == 0x6C70736572702E65;
                                          if (v1140 && (_DWORD)v958 == 29801)
                                            goto LABEL_1710;
                                        }
                                        if (v1139 == -1)
                                          break;
                                        v1135 = i2 + v1137;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            v1142 = *(uint64_t **)v1955;
                            if (HIBYTE(v1975))
                            {
                              v1143 = (uint64_t *)*((_QWORD *)v1944 + 5);
                              v1144 = llvm::Intrinsic::getDeclaration(v1143, 288, 0, 0);
                              v1145 = llvm::Intrinsic::getDeclaration(v1143, 287, 0, 0);
                              sub_1C4D8ADA0((uint64_t)&v2035, (uint64_t **)v1896, v1896[6], 0, 0, 0);
                              if (v1144)
                                v1146 = *(uint64_t ***)(v1144 + 24);
                              else
                                v1146 = 0;
                              v1984 = "savedstack";
                              LOWORD(v1988) = 259;
                              v1147 = (uint64_t *)sub_1C4774778((uint64_t *)&v2035, v1146, v1144, 0, 0, (uint64_t)&v1984, 0);
                              if (v2035 != &v2036.u64[1])
                                free(v2035);
                              if ((_DWORD)v2002)
                              {
                                v1148 = (uint64_t *)v2001;
                                v1149 = 8 * v2002;
                                do
                                {
                                  v1150 = *v1148;
                                  if (!v1961
                                    || !llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(v1150 + 40)))
                                  {
                                    if (!v1950)
                                      goto LABEL_1828;
                                    v1151 = *(_QWORD *)(v1150 + 40);
                                    v1152 = *(_QWORD *)(v1151 + 40);
                                    if (v1152 == v1151 + 40)
                                      goto LABEL_1828;
                                    v1153 = v1152 - 24;
                                    if (!v1152)
                                      v1153 = 0;
                                    v1154 = *(unsigned __int8 *)(v1153 + 16);
                                    if (v1154 != 29)
                                      v1153 = 0;
                                    v1155 = v1152 && v1154 == 29;
                                    if (!v1155
                                      || ((v1157 = *(_QWORD *)(*(_QWORD *)(v1150 + 40) + 48)) != 0
                                        ? (v1158 = v1157 - 24)
                                        : (v1158 = 0),
                                          v1153 == v1158
                                       || *(_QWORD *)(*(_QWORD *)(v1153 + 40) + 48) == v1153 + 24
                                       || (v1159 = *(_QWORD *)(v1153 + 24)) == 0
                                       || *(_BYTE *)(v1159 - 8) != 84
                                       || (v1160 = *(_QWORD *)(v1159 - 56)) == 0
                                       || *(_BYTE *)(v1160 + 16)
                                       || *(_QWORD *)(v1160 + 24) != *(_QWORD *)(v1159 + 48)
                                       || *(_DWORD *)(v1160 + 36) != 119))
                                    {
LABEL_1828:
                                      sub_1C4773D54((uint64_t)&v2035, v1150, 0, 0, 0);
                                      if (v1145)
                                        v1156 = *(uint64_t ***)(v1145 + 24);
                                      else
                                        v1156 = 0;
                                      v2027[0] = v1147;
                                      LOWORD(v1988) = 257;
                                      sub_1C4774778((uint64_t *)&v2035, v1156, v1145, (uint64_t *)v2027, 1, (uint64_t)&v1984, 0);
                                      if (v2035 != &v2036.u64[1])
                                        free(v2035);
                                    }
                                  }
                                  ++v1148;
                                  v1149 -= 8;
                                }
                                while (v1149);
                              }
                            }
                            if (*((_BYTE *)a1 + 16) != 33)
                              goto LABEL_2141;
                            v1161 = (llvm::BasicBlock *)*(a1 - 8);
                            v1162 = *((_QWORD *)v1161 + 6);
                            v1163 = (llvm::ValueAsMetadata *)(v1162 - 24);
                            if (v1162)
                              v1164 = v1162 - 24;
                            else
                              v1164 = 0;
                            v1165 = *(unsigned __int8 *)(v1164 + 16);
                            v1166 = *((_QWORD *)v1161 + 6);
                            if (v1165 == 83)
                            {
                              v1166 = *((_QWORD *)v1161 + 6);
                              do
                              {
                                v1166 = *(_QWORD *)(v1166 + 8);
                                v1167 = v1166 - 24;
                                if (!v1166)
                                  v1167 = 0;
                              }
                              while (*(_BYTE *)(v1167 + 16) == 83);
                            }
                            v1168 = (llvm::ConstantTokenNone ***)v1896[7];
                            v1936 = (llvm::BasicBlock *)*(a1 - 8);
                            if (*(_BYTE *)(v1166 - 8) == 94)
                            {
                              v1987 = 0;
                              v1986 = 0;
                              v1984 = v1161;
                              v1985 = 0;
                              v1988 = v1990;
                              v1989 = 0x800000000;
                              if (*(_BYTE *)(v1164 + 16) == 83)
                              {
                                v1169 = 0;
                                v1170 = a1[5];
                                do
                                {
                                  v1171 = *((_DWORD *)v1163 + 5);
                                  v1172 = v1171 & 0x7FFFFFF;
                                  if ((v1171 & 0x7FFFFFF) != 0)
                                  {
                                    v1173 = 0;
                                    while (1)
                                    {
                                      v1174 = (char *)v1163 - 32 * v1172;
                                      if ((v1171 & 0x40000000) != 0)
                                        v1174 = (char *)*((_QWORD *)v1163 - 1);
                                      if (*(uint64_t ***)&v1174[32 * *((unsigned int *)v1163 + 15) + 8 * v1173] == v1170)
                                        break;
                                      if (v1172 == ++v1173)
                                        goto LABEL_1865;
                                    }
                                  }
                                  else
                                  {
LABEL_1865:
                                    LODWORD(v1173) = -1;
                                  }
                                  if ((v1171 & 0x40000000) != 0)
                                    v1175 = (char *)*((_QWORD *)v1163 - 1);
                                  else
                                    v1175 = (char *)v1163 - 32 * v1172;
                                  v1176 = *(_QWORD *)&v1175[32 * v1173];
                                  if (v1169 >= HIDWORD(v1989))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1988, (uint64_t)v1990, v1169 + 1, 8);
                                    v1169 = v1989;
                                  }
                                  *((_QWORD *)v1988 + v1169) = v1176;
                                  v1169 = v1989 + 1;
                                  LODWORD(v1989) = v1989 + 1;
                                  v1162 = *(_QWORD *)(v1162 + 8);
                                  v1163 = (llvm::ValueAsMetadata *)(v1162 - 24);
                                  if (v1162)
                                    v1177 = v1162 - 24;
                                  else
                                    v1177 = 0;
                                }
                                while (*(_BYTE *)(v1177 + 16) == 83);
                              }
                              v1986 = v1163;
                              v1190 = &v2037.i8[8];
                              v2035 = &v2037.u64[1];
                              v2036.i64[0] = (uint64_t)&v2037.i64[1];
                              v2036.i64[1] = 16;
                              v2037.i32[0] = 0;
                              v1191 = v1896 + 3;
                              v1192 = (size_t)(v1168 + 9);
                              if (v1896 + 3 == (uint64_t *)(v1168 + 9))
                              {
                                v1193 = 0;
                                v1194 = 16;
                                v1195 = &v2037.i8[8];
                              }
                              else
                              {
                                v1193 = 0;
                                v1194 = 16;
                                v1195 = &v2037.i8[8];
                                v1196 = v1896 + 3;
                                do
                                {
                                  v1197 = v1196 - 3;
                                  if (!v1196)
                                    v1197 = 0;
                                  v1198 = (_QWORD *)v1197[5];
                                  if (v1198 != v1197 + 5)
                                  {
                                    v1199 = v1198 - 3;
                                    if (!v1198)
                                      v1199 = 0;
                                    v1200 = *((unsigned __int8 *)v1199 + 16) - 40;
                                    if (v1200 < 0xFFFFFFF5)
                                      v1199 = 0;
                                    if (v1198)
                                    {
                                      if (*((_BYTE *)v1199 + 16) == 33 && v1200 >= 0xFFFFFFF5)
                                      {
                                        v1202 = *(v1199 - 8);
                                        v1203 = v1202 + 40;
                                        for (i3 = *(_QWORD *)(v1202 + 48); i3 != v1203; i3 = *(_QWORD *)(i3 + 8))
                                        {
                                          v1205 = i3 - 24;
                                          if (i3)
                                            v1206 = i3 - 24;
                                          else
                                            v1206 = 0;
                                          if (*(_BYTE *)(v1206 + 16) != 83)
                                            goto LABEL_1925;
                                        }
                                        v1205 = 0;
LABEL_1925:
                                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v2035, v1205);
                                        v1195 = (__int8 *)v2036.i64[0];
                                        v1190 = (__int8 *)v2035;
                                        v1193 = v2036.u32[3];
                                        v1194 = v2036.u32[2];
                                      }
                                    }
                                  }
                                  v1196 = (_QWORD *)v1196[1];
                                }
                                while (v1196 != (_QWORD *)v1192);
                                v1163 = v1986;
                              }
                              if (v1195 == v1190)
                                v1293 = v1193;
                              else
                                v1293 = v1194;
                              v1294 = v1195;
                              if ((_DWORD)v1293)
                              {
                                v1295 = 8 * v1293;
                                v1294 = v1195;
                                while (*(_QWORD *)v1294 >= 0xFFFFFFFFFFFFFFFELL)
                                {
                                  v1294 += 8;
                                  v1295 -= 8;
                                  if (!v1295)
                                    goto LABEL_2051;
                                }
                              }
                              v1296 = &v1195[8 * v1293];
                              if (v1294 != v1296)
                              {
                                v1297 = *(llvm::LandingPadInst **)v1294;
LABEL_2039:
                                v1298 = *((_DWORD *)v1163 + 5);
                                v1299 = v1298 & 0x7FFFFFF;
                                llvm::LandingPadInst::growOperands(v1297, v1298 & 0x7FFFFFF);
                                if ((_DWORD)v1299)
                                {
                                  v1300 = 0;
                                  v1301 = 32 * v1299;
                                  do
                                  {
                                    v1302 = *((_DWORD *)v1163 + 5);
                                    if ((v1302 & 0x40000000) != 0)
                                      v1303 = (char *)*((_QWORD *)v1163 - 1);
                                    else
                                      v1303 = (char *)v1163 - 32 * (v1302 & 0x7FFFFFF);
                                    llvm::LandingPadInst::addClause(v1297, *(llvm::Constant **)&v1303[v1300]);
                                    v1300 += 32;
                                  }
                                  while (v1301 != v1300);
                                }
                                if ((*((_WORD *)v1163 + 9) & 1) != 0)
                                  *((_WORD *)v1297 + 9) |= 1u;
                                v1304 = (unint64_t *)(v1294 + 8);
                                while (v1304 != (unint64_t *)v1296)
                                {
                                  v1305 = *v1304++;
                                  v1297 = (llvm::LandingPadInst *)v1305;
                                  if (v1305 <= 0xFFFFFFFFFFFFFFFDLL)
                                  {
                                    v1294 = (char *)(v1304 - 1);
                                    goto LABEL_2039;
                                  }
                                }
                              }
LABEL_2051:
                              v1306 = a1;
                              if (v1191 == (_QWORD *)v1192)
                              {
LABEL_2136:
                                llvm::BasicBlock::removePredecessor(v1161, (llvm::BasicBlock *)v1306[5], 0);
                                if ((void *)v2036.i64[0] != v2035)
                                  free((void *)v2036.i64[0]);
                                v1290 = (char *)v1988;
                                v1291 = v1990;
                                goto LABEL_2139;
                              }
                              __nb = v1192;
                              while (1)
                              {
                                if ((_BYTE)v1975)
                                {
                                  v1307 = v1191 ? (uint64_t)(v1191 - 3) : 0;
                                  v1308 = sub_1C5F0AB94(v1307, (uint64_t)v1984, 0);
                                  if (v1308)
                                  {
                                    if ((_DWORD)v1989)
                                    {
                                      v1309 = v1308;
                                      v1310 = 0;
                                      v1311 = (uint64_t *)((char *)v1984 + 48);
                                      v1312 = 8 * v1989;
                                      do
                                      {
                                        v1313 = *v1311;
                                        v1314 = *v1311 - 24;
                                        if (v1313)
                                          v1315 = (llvm::PHINode *)v1314;
                                        else
                                          v1315 = 0;
                                        sub_1C477667C(v1315, *(_QWORD *)((char *)v1988 + v1310), v1309);
                                        v1311 = (uint64_t *)(v1313 + 8);
                                        v1310 += 8;
                                      }
                                      while (v1312 != v1310);
                                    }
                                  }
                                }
                                if (v1191)
                                  v1316 = v1191 - 3;
                                else
                                  v1316 = 0;
                                v1317 = (_QWORD *)v1316[5];
                                if (v1317 == v1316 + 5)
                                  goto LABEL_2128;
                                v1318 = v1317 ? (uint64_t)(v1317 - 3) : 0;
                                v1319 = *(unsigned __int8 *)(v1318 + 16) - 40;
                                v1320 = v1319 >= 0xFFFFFFF5 ? v1318 : 0;
                                if (!v1317)
                                  goto LABEL_2128;
                                if (*(_BYTE *)(v1320 + 16) != 34 || v1319 < 0xFFFFFFF5)
                                  goto LABEL_2128;
                                v1322 = (llvm::BasicBlock *)v1985;
                                if (v1985)
                                  goto LABEL_2121;
                                if ((*((_BYTE *)v1984 + 23) & 0x10) == 0)
                                {
                                  v1332 = 0;
                                  v1333 = (uint64_t *)&byte_1C871356D;
                                  goto LABEL_2090;
                                }
                                v1323 = ***(_QWORD ***)v1984;
                                v1324 = *(_QWORD *)(v1323 + 152);
                                v1325 = *(unsigned int *)(v1323 + 168);
                                if (!(_DWORD)v1325)
                                  goto LABEL_2088;
                                LODWORD(v1326) = (v1325 - 1) & ((v1984 >> 4) ^ (v1984 >> 9));
                                v1327 = v1324 + 16 * v1326;
                                v1328 = *(void **)v1327;
                                if (*(void **)v1327 != v1984)
                                  break;
LABEL_2089:
                                v1331 = *(_QWORD **)(v1327 + 8);
                                v1334 = (uint64_t *)*v1331;
                                v1333 = v1331 + 2;
                                v1332 = v1334;
LABEL_2090:
                                v1335 = (uint64_t *)*((_QWORD *)v1986 + 4);
                                LOWORD(v2029) = 773;
                                v2027[0] = v1333;
                                v2027[1] = v1332;
                                v2027[2] = (uint64_t *)".body";
                                v1985 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v1984, v1335, (uint64_t)v2027, 0);
                                v1336 = *(uint64_t **)(v1985 + 48);
                                v1337 = v1989;
                                if ((_DWORD)v1989)
                                {
                                  v1338 = 0;
                                  v1339 = (uint64_t *)((char *)v1984 + 48);
                                  while (1)
                                  {
                                    v1340 = *v1339;
                                    v1341 = *v1339 - 24;
                                    if (v1340)
                                      v1342 = (llvm::ValueAsMetadata *)v1341;
                                    else
                                      v1342 = 0;
                                    v1343 = *(uint64_t ***)v1342;
                                    if ((*((_BYTE *)v1342 + 23) & 0x10) == 0)
                                    {
                                      v1353 = 0;
                                      v1354 = (uint64_t *)&byte_1C871356D;
                                      goto LABEL_2104;
                                    }
                                    v1344 = **v1343;
                                    v1345 = *(_QWORD *)(v1344 + 152);
                                    v1346 = *(unsigned int *)(v1344 + 168);
                                    if (!(_DWORD)v1346)
                                      goto LABEL_2102;
                                    LODWORD(v1347) = (v1346 - 1) & ((v1342 >> 4) ^ (v1342 >> 9));
                                    v1348 = (llvm::ValueAsMetadata **)(v1345 + 16 * v1347);
                                    v1349 = *v1348;
                                    if (*v1348 != v1342)
                                      break;
LABEL_2103:
                                    v1352 = v1348[1];
                                    v1355 = *(uint64_t **)v1352;
                                    v1354 = (uint64_t *)((char *)v1352 + 16);
                                    v1353 = v1355;
LABEL_2104:
                                    LOWORD(v2029) = 773;
                                    v2027[0] = v1354;
                                    v2027[1] = v1353;
                                    v2027[2] = (uint64_t *)".lpad-body";
                                    v1356 = operator new(0x48uLL);
                                    v1357 = v1356;
                                    v1356[1] = v1343;
                                    v1358 = (llvm::Value *)(v1356 + 1);
                                    *v1356 = 0;
                                    v1356[2] = 0;
                                    v1356[3] = 0x4000000000000053;
                                    *((_OWORD *)v1356 + 2) = 0u;
                                    v1359 = (char *)(v1356 + 4);
                                    *((_OWORD *)v1356 + 3) = 0u;
                                    *((_DWORD *)v1356 + 16) = 0;
                                    if (v1336)
                                    {
                                      v1363 = v1336[2];
                                      v1356[6] = v1363;
                                      *(_WORD *)(v1363 + 18) &= ~0x8000u;
                                      if ((*((_BYTE *)v1356 + 31) & 0x10) != 0)
                                      {
                                        v1365 = *(_QWORD *)(v1363 + 56);
                                        if (v1365)
                                        {
                                          v1366 = *(llvm::ValueSymbolTable **)(v1365 + 104);
                                          if (v1366)
                                            llvm::ValueSymbolTable::reinsertValue(v1366, v1358);
                                        }
                                      }
                                      v1364 = *v1336;
                                      v1357[4] = *v1336;
                                      v1357[5] = v1336;
                                      *(_QWORD *)(v1364 + 8) = v1359;
                                      *v1336 = (uint64_t)v1359;
                                    }
                                    *((_DWORD *)v1357 + 17) = 2;
                                    llvm::Value::setName((uint64_t ***)v1358, (uint64_t)v2027);
                                    v1360 = *((unsigned int *)v1357 + 17);
                                    v1361 = operator new(40 * v1360);
                                    *v1357 = v1361;
                                    if ((_DWORD)v1360)
                                    {
                                      v1362 = &v1361[4 * v1360];
                                      do
                                      {
                                        *v1361 = 0;
                                        v1361[1] = 0;
                                        v1361[2] = 0;
                                        v1361[3] = v1358;
                                        v1361 += 4;
                                      }
                                      while (v1361 != v1362);
                                    }
                                    llvm::Value::doRAUW(v1342, v1358, (llvm::Value *)1);
                                    sub_1C477667C(v1358, (uint64_t)v1342, (uint64_t)v1984);
                                    ++v1338;
                                    v1339 = (uint64_t *)(v1340 + 8);
                                    if (v1338 == v1337)
                                      goto LABEL_2116;
                                  }
                                  v1350 = 1;
                                  while (v1349 != (llvm::ValueAsMetadata *)-4096)
                                  {
                                    v1351 = v1347 + v1350++;
                                    v1347 = v1351 & (v1346 - 1);
                                    v1349 = *(llvm::ValueAsMetadata **)(v1345 + 16 * v1347);
                                    if (v1349 == v1342)
                                    {
                                      v1348 = (llvm::ValueAsMetadata **)(v1345 + 16 * v1347);
                                      goto LABEL_2103;
                                    }
                                  }
LABEL_2102:
                                  v1348 = (llvm::ValueAsMetadata **)(v1345 + 16 * v1346);
                                  goto LABEL_2103;
                                }
LABEL_2116:
                                v1367 = *(_QWORD *)v1986;
                                v2027[0] = (uint64_t *)"eh.lpad-body";
                                LOWORD(v2029) = 259;
                                v1368 = operator new(0x48uLL);
                                v1369 = v1368;
                                v1368[1] = v1367;
                                v1370 = (llvm::Value *)(v1368 + 1);
                                *v1368 = 0;
                                v1368[2] = 0;
                                v1368[3] = 0x4000000000000053;
                                *((_OWORD *)v1368 + 2) = 0u;
                                v1371 = (char *)(v1368 + 4);
                                *((_OWORD *)v1368 + 3) = 0u;
                                *((_DWORD *)v1368 + 16) = 0;
                                v1192 = __nb;
                                v1161 = v1936;
                                if (v1336)
                                {
                                  v1385 = v1336[2];
                                  v1368[6] = v1385;
                                  *(_WORD *)(v1385 + 18) &= ~0x8000u;
                                  if ((*((_BYTE *)v1368 + 31) & 0x10) != 0)
                                  {
                                    v1387 = *(_QWORD *)(v1385 + 56);
                                    if (v1387)
                                    {
                                      v1388 = *(llvm::ValueSymbolTable **)(v1387 + 104);
                                      if (v1388)
                                        llvm::ValueSymbolTable::reinsertValue(v1388, v1370);
                                    }
                                  }
                                  v1386 = *v1336;
                                  v1369[4] = *v1336;
                                  v1369[5] = v1336;
                                  *(_QWORD *)(v1386 + 8) = v1371;
                                  *v1336 = (uint64_t)v1371;
                                }
                                *((_DWORD *)v1369 + 17) = 2;
                                llvm::Value::setName((uint64_t ***)v1370, (uint64_t)v2027);
                                v1372 = *((unsigned int *)v1369 + 17);
                                v1373 = operator new(40 * v1372);
                                *v1369 = v1373;
                                if ((_DWORD)v1372)
                                {
                                  v1374 = &v1373[4 * v1372];
                                  do
                                  {
                                    *v1373 = 0;
                                    v1373[1] = 0;
                                    v1373[2] = 0;
                                    v1373[3] = v1370;
                                    v1373 += 4;
                                  }
                                  while (v1373 != v1374);
                                }
                                v1987 = v1370;
                                llvm::Value::doRAUW(v1986, v1370, (llvm::Value *)1);
                                sub_1C477667C(v1987, (uint64_t)v1986, (uint64_t)v1984);
                                v1322 = (llvm::BasicBlock *)v1985;
                                v1142 = *(uint64_t **)v1955;
LABEL_2121:
                                v1375 = *(llvm::BasicBlock **)(v1320 + 40);
                                v1376 = operator new(0x60uLL);
                                v1376[13] = v1376[13] & 0x38000000 | 1;
                                *(_QWORD *)v1376 = 0;
                                *((_QWORD *)v1376 + 1) = 0;
                                *((_QWORD *)v1376 + 2) = 0;
                                *((_QWORD *)v1376 + 3) = v1376 + 8;
                                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v1376 + 8), v1322, v1375);
                                if ((_DWORD)v1989)
                                {
                                  v1377 = 0;
                                  v1378 = (uint64_t *)((char *)v1322 + 48);
                                  v1379 = 8 * v1989;
                                  do
                                  {
                                    v1380 = *v1378;
                                    v1381 = *v1378 - 24;
                                    if (v1380)
                                      v1382 = (llvm::PHINode *)v1381;
                                    else
                                      v1382 = 0;
                                    sub_1C477667C(v1382, *(_QWORD *)((char *)v1988 + v1377), (uint64_t)v1375);
                                    v1378 = (uint64_t *)(v1380 + 8);
                                    v1377 += 8;
                                  }
                                  while (v1379 != v1377);
                                }
                                sub_1C477667C(v1987, *(_QWORD *)(v1320 - 32), (uint64_t)v1375);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1320 + 40) + 40, (uint64_t ***)v1320);
                                v1383 = *(_QWORD *)(v1320 + 24);
                                v1384 = *(_QWORD **)(v1320 + 32);
                                *v1384 = v1383;
                                *(_QWORD *)(v1383 + 8) = v1384;
                                *(_QWORD *)(v1320 + 24) = 0;
                                *(_QWORD *)(v1320 + 32) = 0;
                                llvm::Value::deleteValue((llvm::Value *)v1320);
                                v1306 = a1;
LABEL_2128:
                                v1191 = (_QWORD *)v1191[1];
                                if (v1191 == (_QWORD *)v1192)
                                  goto LABEL_2136;
                              }
                              v1329 = 1;
                              while (v1328 != (void *)-4096)
                              {
                                v1330 = v1326 + v1329++;
                                v1326 = v1330 & (v1325 - 1);
                                v1328 = *(void **)(v1324 + 16 * v1326);
                                if (v1328 == v1984)
                                {
                                  v1327 = v1324 + 16 * v1326;
                                  goto LABEL_2089;
                                }
                              }
LABEL_2088:
                              v1327 = v1324 + 16 * v1325;
                              goto LABEL_2089;
                            }
                            v2035 = &v2036.u64[1];
                            v2036.i64[0] = 0x800000000;
                            v1178 = (llvm::BasicBlock *)a1[5];
                            if (v1165 == 83
                              && *((llvm::BasicBlock **)v1161 + 5) != (llvm::BasicBlock *)((char *)v1161 + 40)
                              && v1162 != 0)
                            {
                              v1180 = 0;
                              do
                              {
                                v1181 = *(_DWORD *)(v1164 + 20);
                                v1182 = v1181 & 0x7FFFFFF;
                                if ((v1181 & 0x7FFFFFF) != 0)
                                {
                                  v1183 = 0;
                                  while (1)
                                  {
                                    v1184 = v1164 - 32 * v1182;
                                    if ((v1181 & 0x40000000) != 0)
                                      v1184 = *(_QWORD *)(v1164 - 8);
                                    if (*(llvm::BasicBlock **)(v1184 + 32 * *(unsigned int *)(v1164 + 60) + 8 * v1183) == v1178)
                                      break;
                                    if (v1182 == ++v1183)
                                      goto LABEL_1888;
                                  }
                                }
                                else
                                {
LABEL_1888:
                                  LODWORD(v1183) = -1;
                                }
                                if ((v1181 & 0x40000000) != 0)
                                  v1185 = *(_QWORD *)(v1164 - 8);
                                else
                                  v1185 = v1164 - 32 * v1182;
                                v1186 = *(_QWORD *)(v1185 + 32 * v1183);
                                if (v1180 >= v2036.i32[1])
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2035, (uint64_t)&v2036.i64[1], v1180 + 1, 8);
                                  v1180 = v2036.i32[0];
                                }
                                *((_QWORD *)v2035 + v1180) = v1186;
                                v1180 = ++v2036.i32[0];
                                v1187 = v1164 + 24;
                                if (!v1164)
                                  v1187 = 0;
                                v1188 = *(_QWORD *)(v1187 + 8);
                                v1164 = v1188 - 24;
                                if (v1188)
                                  v1189 = v1188 - 24;
                                else
                                  v1189 = 0;
                              }
                              while (v1188 && *(_BYTE *)(v1189 + 16) == 83);
                            }
                            v1207 = (llvm::ConstantTokenNone ***)(v1896 + 3);
                            v1208 = v1168 + 9;
                            memset(v2027, 0, 20);
                            if (v1896 + 3 == (uint64_t *)(v1168 + 9))
                              goto LABEL_2024;
                            if (v1161)
                              v1209 = 2;
                            else
                              v1209 = 1;
                            *(_QWORD *)v1919 = v1209;
                            v1924 = (uint64_t *)((char *)v1161 + 48);
                            __sza = 32 * v1209 + 64;
                            v1912 = v1168;
                            v1210 = (llvm::ConstantTokenNone ***)(v1896 + 3);
                            while (1)
                            {
                              if (v1210)
                                v1211 = (uint64_t)(v1210 - 3);
                              else
                                v1211 = 0;
                              v1212 = *(_QWORD *)(v1211 + 40);
                              if (v1212 != v1211 + 40)
                              {
                                v1213 = v1212 ? v1212 - 24 : 0;
                                v1214 = *(unsigned __int8 *)(v1213 + 16) - 40;
                                v1215 = v1214 >= 0xFFFFFFF5 ? v1213 : 0;
                                if (v1212)
                                {
                                  v1216 = *(_BYTE *)(v1215 + 16) == 36 && v1214 >= 0xFFFFFFF5;
                                  if (v1216 && (*(_WORD *)(v1215 + 18) & 1) == 0)
                                  {
                                    v1220 = *(llvm::Value **)(v1215 - 32 * (*(_DWORD *)(v1215 + 20) & 0x7FFFFFF));
                                    v1221 = (llvm::CleanupReturnInst *)operator new(__sza);
                                    v1222 = (llvm::CleanupReturnInst *)((char *)v1221 + 32 * *(_QWORD *)v1919);
                                    *((_DWORD *)v1222 + 5) = *((_DWORD *)v1222 + 5) & 0x38000000 | v1919[0];
                                    do
                                    {
                                      *(_QWORD *)v1221 = 0;
                                      *((_QWORD *)v1221 + 1) = 0;
                                      *((_QWORD *)v1221 + 2) = 0;
                                      *((_QWORD *)v1221 + 3) = v1222;
                                      v1221 = (llvm::CleanupReturnInst *)((char *)v1221 + 32);
                                    }
                                    while (v1221 != v1222);
                                    llvm::CleanupReturnInst::CleanupReturnInst(v1222, v1220, v1936, v1919[0], (llvm::Instruction *)v1215);
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1215 + 40) + 40, (uint64_t ***)v1215);
                                    v1223 = *(_QWORD *)(v1215 + 24);
                                    v1224 = *(_QWORD **)(v1215 + 32);
                                    *v1224 = v1223;
                                    *(_QWORD *)(v1223 + 8) = v1224;
                                    *(_QWORD *)(v1215 + 24) = 0;
                                    *(_QWORD *)(v1215 + 32) = 0;
                                    llvm::Value::deleteValue((llvm::Value *)v1215);
                                    if (v2036.i32[0])
                                    {
                                      v1226 = (uint64_t *)v2035;
                                      v1227 = 8 * v2036.u32[0];
                                      v1228 = v1924;
                                      do
                                      {
                                        v1229 = *v1228;
                                        v1231 = *v1226++;
                                        v1230 = v1231;
                                        v1232 = *v1228 - 24;
                                        if (v1229)
                                          v1233 = (llvm::PHINode *)v1232;
                                        else
                                          v1233 = 0;
                                        sub_1C477667C(v1233, v1230, v1211);
                                        v1228 = (uint64_t *)(v1229 + 8);
                                        v1227 -= 8;
                                      }
                                      while (v1227);
                                    }
                                    v1234 = llvm::ConstantTokenNone::get(**v1912, v1225);
                                    v1984 = v1220;
                                    sub_1C5667838((uint64_t *)v2027, &v1984)[1] = v1234;
                                  }
                                }
                              }
                              for (i4 = *(_QWORD *)(v1211 + 48); i4 != v1211 + 40; i4 = *(_QWORD *)(i4 + 8))
                              {
                                v1218 = (uint64_t ***)(i4 - 24);
                                if (i4)
                                  v1219 = i4 - 24;
                                else
                                  v1219 = 0;
                                if (*(_BYTE *)(v1219 + 16) != 83)
                                  goto LABEL_1967;
                              }
                              v1218 = 0;
LABEL_1967:
                              if (*((_BYTE *)v1218 + 16) != 38 || (*((_WORD *)v1218 + 9) & 1) != 0)
                                goto LABEL_1979;
                              v1235 = *((_DWORD *)v1218 + 5);
                              v1236 = (v1235 & 0x40000000) != 0
                                    ? (uint64_t *)*(v1218 - 1)
                                    : (uint64_t *)&v1218[-4 * (v1235 & 0x7FFFFFF)];
                              v1237 = *v1236;
                              v1238 = *(unsigned __int8 *)(*v1236 + 16);
                              if (!v1237 || v1238 < 0x1C)
                                break;
                              v1240 = sub_1C5F09BD8(v1237, (uint64_t)v2027);
                              v1241 = v1240;
                              if (!v1240 || *((_BYTE *)v1240 + 16) == 20)
                                goto LABEL_1981;
LABEL_1979:
                              v1210 = (llvm::ConstantTokenNone ***)v1210[1];
                              if (v1210 == v1208)
                              {
                                v1142 = *(uint64_t **)v1955;
                                v1161 = v1936;
                                if ((_BYTE)v1975)
                                {
                                  do
                                  {
                                    if (v1207)
                                      v1279 = (uint64_t)(v1207 - 3);
                                    else
                                      v1279 = 0;
                                    v1280 = sub_1C5F0AB94(v1279, (uint64_t)v1936, (uint64_t)v2027);
                                    if (v1280 && v2036.i32[0])
                                    {
                                      v1281 = v1280;
                                      v1282 = (uint64_t *)v2035;
                                      v1283 = 8 * v2036.u32[0];
                                      v1284 = v1924;
                                      do
                                      {
                                        v1285 = *v1284;
                                        v1287 = *v1282++;
                                        v1286 = v1287;
                                        v1288 = *v1284 - 24;
                                        if (v1285)
                                          v1289 = (llvm::PHINode *)v1288;
                                        else
                                          v1289 = 0;
                                        sub_1C477667C(v1289, v1286, v1281);
                                        v1284 = (uint64_t *)(v1285 + 8);
                                        v1283 -= 8;
                                      }
                                      while (v1283);
                                    }
                                    v1207 = (llvm::ConstantTokenNone ***)v1207[1];
                                  }
                                  while (v1207 != v1208);
                                }
LABEL_2024:
                                llvm::BasicBlock::removePredecessor(v1161, v1178, 0);
                                MEMORY[0x1CAA32FB4](v2027[0], 8);
                                v1290 = (char *)v2035;
                                v1291 = &v2036.i8[8];
LABEL_2139:
                                if (v1290 != v1291)
                                  free(v1290);
LABEL_2141:
                                if (v1977)
                                {
                                  v1389 = v1896 + 3;
                                  if (v1896 + 3 != v1142)
                                  {
                                    do
                                    {
                                      v2035 = &v2036.u64[1];
                                      v2036.i64[0] = 0x100000000;
                                      if (v1389)
                                        v1390 = v1389 - 3;
                                      else
                                        v1390 = 0;
                                      v1391 = v1390 + 5;
                                      v1392 = (_QWORD *)v1390[6];
                                      if (v1392 != v1390 + 5)
                                      {
                                        do
                                        {
                                          v1393 = (_QWORD *)v1392[1];
                                          v1394 = v1392 - 3;
                                          if (v1392)
                                            v1395 = v1392 - 3;
                                          else
                                            v1395 = 0;
                                          v1396 = *((unsigned __int8 *)v1395 + 16) - 33;
                                          v247 = v1396 > 0x33;
                                          v1397 = (1 << v1396) & 0x8000000000041;
                                          if (!v247 && v1397 != 0)
                                          {
                                            v1399 = llvm::Value::stripPointerCasts((llvm::Value *)*(v1392 - 7));
                                            v1400 = v1399 && *((_BYTE *)v1399 + 16) == 0;
                                            if (!v1400
                                              || (*((_BYTE *)v1399 + 33) & 0x20) == 0
                                              || ((v1401 = v1392[5]) == 0 || (*(_BYTE *)(v1401 + 16) & 0x20) == 0)
                                              && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v1392 - 3), 37) & 1) == 0)
                                            {
                                              sub_1C5062CEC((uint64_t)(v1392 - 3), 1, (uint64_t)&v1984);
                                              if (!(_BYTE)v1987)
                                              {
                                                v1402 = *((_DWORD *)v1392 - 1);
                                                if (v1402 < 0)
                                                {
                                                  v1410 = v1394[-4 * (v1402 & 0x7FFFFFF) - 1];
                                                  if ((v1410 & 0xFFFFFFFF0) != 0)
                                                  {
                                                    v1937 = (llvm::BasicBlock *)(v1410 >> 4);
                                                    v1411 = v1392;
                                                    do
                                                    {
                                                      v1412 = *((_DWORD *)v1392 - 1) & 0x7FFFFFF;
                                                      v1413 = &v1394[-4 * v1412];
                                                      v1414 = (char *)v1411 - *(v1413 - 1) + -32 * v1412;
                                                      v1415 = *((unsigned int *)v1414 - 6);
                                                      v1416 = *((unsigned int *)v1414 - 5);
                                                      v1417 = (llvm::ValueAsMetadata *)*((_QWORD *)v1414 - 4);
                                                      v1984 = &v1413[4 * v1415];
                                                      v1985 = v1416 - v1415;
                                                      v1986 = v1417;
                                                      sub_1C623D924((uint64_t)&v2035, (uint64_t)&v1984);
                                                      v1411 += 2;
                                                      v1937 = (llvm::BasicBlock *)((char *)v1937 - 1);
                                                    }
                                                    while (v1937);
                                                  }
                                                }
                                                sub_1C58C6FD8((uint64_t)&v2035, "funclet", (uint64_t *)&v1977);
                                                v1403 = llvm::CallBase::Create((uint64_t ***)v1392 - 3, (uint64_t)v2035, v2036.u32[0], (llvm::Instruction *)(v1392 - 3));
                                                llvm::Value::takeName((llvm::Value *)v1403, (llvm::Value *)(v1392 - 3));
                                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v1392 - 3), (llvm::Value *)v1403, (llvm::Value *)1);
                                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v1392[2] + 40, (uint64_t ***)v1392 - 3);
                                                v1404 = *v1392;
                                                v1405 = (_QWORD *)v1392[1];
                                                *v1405 = *v1392;
                                                *(_QWORD *)(v1404 + 8) = v1405;
                                                *v1392 = 0;
                                                v1392[1] = 0;
                                                llvm::Value::deleteValue((llvm::Value *)(v1392 - 3));
                                                if (v2036.i32[0])
                                                {
                                                  v1406 = (char *)v2035;
                                                  v1407 = 48 * v2036.u32[0];
                                                  do
                                                  {
                                                    v1408 = &v1406[v1407];
                                                    v1409 = *(void **)&v1406[v1407 - 24];
                                                    if (v1409)
                                                    {
                                                      *((_QWORD *)v1408 - 2) = v1409;
                                                      operator delete(v1409);
                                                    }
                                                    if (*(v1408 - 25) < 0)
                                                      operator delete(*((void **)v1408 - 6));
                                                    v1407 -= 48;
                                                  }
                                                  while (v1407);
                                                }
                                                v2036.i32[0] = 0;
                                              }
                                            }
                                          }
                                          v1392 = v1393;
                                        }
                                        while (v1393 != v1391);
                                      }
                                      v1418 = (_QWORD *)*v1391;
                                      if ((_QWORD *)*v1391 != v1391)
                                      {
                                        v1419 = v1418 ? (uint64_t)(v1418 - 3) : 0;
                                        v1420 = *(unsigned __int8 *)(v1419 + 16) - 40;
                                        v1421 = v1420 >= 0xFFFFFFF5 ? v1419 : 0;
                                        if (v1418)
                                        {
                                          if (*(_BYTE *)(v1421 + 16) == 36 && v1420 >= 0xFFFFFFF5)
                                          {
                                            v1423 = v1893;
                                            if ((*(_WORD *)(v1421 + 18) & 1) != 0)
                                              v1423 = 0;
                                            if (v1423)
                                              llvm::changeToUnreachable((llvm *)v1421, 0, 0, 0, v959);
                                          }
                                        }
                                      }
                                      v1424 = v1390[6];
                                      v1425 = v1424 - 24;
                                      if (!v1424)
                                        v1425 = 0;
                                      v1142 = *(uint64_t **)v1955;
                                      if (*(_BYTE *)(v1425 + 16) == 83)
                                      {
                                        do
                                        {
                                          v1424 = *(_QWORD *)(v1424 + 8);
                                          v1426 = v1424 - 24;
                                          if (!v1424)
                                            v1426 = 0;
                                        }
                                        while (*(_BYTE *)(v1426 + 16) == 83);
                                      }
                                      v1427 = *(unsigned __int8 *)(v1424 - 8);
                                      if ((v1427 - 79) < 2 || v1427 == 94)
                                      {
                                        v1433 = (uint64_t *)(v1424 - 56);
                                        if (*(_BYTE *)(*(_QWORD *)(v1424 - 56) + 16) == 20)
                                        {
                                          v1434 = (uint64_t)v1977;
                                          v1435 = (_QWORD *)(v1424 - 48);
                                          **(_QWORD **)(v1424 - 40) = *(_QWORD *)(v1424 - 48);
                                          v1436 = *(_QWORD *)(v1424 - 48);
                                          if (v1436)
                                            *(_QWORD *)(v1436 + 16) = *(_QWORD *)(v1424 - 40);
                                          *v1433 = v1434;
                                          if (v1434)
                                          {
                                            v1439 = *(_QWORD *)(v1434 + 8);
                                            v1437 = (uint64_t **)(v1434 + 8);
                                            v1438 = v1439;
                                            *v1435 = v1439;
                                            if (v1439)
                                              *(_QWORD *)(v1438 + 16) = v1435;
                                            *(_QWORD *)(v1424 - 40) = v1437;
                                            *v1437 = v1433;
                                          }
                                        }
                                      }
                                      else if (v1427 == 38)
                                      {
                                        v1428 = *(_DWORD *)(v1424 - 4);
                                        if ((v1428 & 0x40000000) != 0)
                                        {
                                          v1430 = *(uint64_t **)(v1424 - 32);
                                          v1431 = *v1430;
                                        }
                                        else
                                        {
                                          v1429 = v1424 - 32 * (v1428 & 0x7FFFFFF);
                                          v1432 = *(_QWORD *)(v1429 - 24);
                                          v1430 = (uint64_t *)(v1429 - 24);
                                          v1431 = v1432;
                                        }
                                        if (*(_BYTE *)(v1431 + 16) == 20)
                                        {
                                          v1440 = (uint64_t)v1977;
                                          v1441 = v1430 + 1;
                                          *(_QWORD *)v1430[2] = v1430[1];
                                          v1442 = v1430[1];
                                          if (v1442)
                                            *(_QWORD *)(v1442 + 16) = v1430[2];
                                          *v1430 = v1440;
                                          if (v1440)
                                          {
                                            v1445 = *(_QWORD *)(v1440 + 8);
                                            v1443 = (uint64_t **)(v1440 + 8);
                                            v1444 = v1445;
                                            *v1441 = v1445;
                                            if (v1445)
                                              *(_QWORD *)(v1444 + 16) = v1441;
                                            v1430[2] = (uint64_t)v1443;
                                            *v1443 = v1430;
                                          }
                                        }
                                      }
                                      v1446 = (char *)v2035;
                                      if (v2036.i32[0])
                                      {
                                        v1447 = 48 * v2036.u32[0];
                                        do
                                        {
                                          v1448 = &v1446[v1447];
                                          v1449 = *(void **)&v1446[v1447 - 24];
                                          if (v1449)
                                          {
                                            *((_QWORD *)v1448 - 2) = v1449;
                                            operator delete(v1449);
                                          }
                                          if (*(v1448 - 25) < 0)
                                            operator delete(*((void **)v1448 - 6));
                                          v1447 -= 48;
                                        }
                                        while (v1447);
                                        v1446 = (char *)v2035;
                                      }
                                      if (v1446 != (char *)&v2036.u64[1])
                                        free(v1446);
                                      v1389 = (_QWORD *)v1389[1];
                                    }
                                    while (v1389 != *(_QWORD **)v1955);
                                  }
                                }
                                v1450 = a1;
                                v1452 = a2;
                                v1451 = v1944;
                                v1453 = v1897;
                                if (v1950)
                                {
                                  v1454 = *(void ***)(*((_QWORD *)v1944 + 3) + 16);
                                  if (*v1454 == *a1)
                                  {
                                    v1511 = v2001;
                                    if ((_DWORD)v2002)
                                    {
                                      v1512 = (char *)v2001 + 8 * v2002;
                                      v1513 = 8 * v2002 - 8;
                                      v1514 = (char *)v2001;
                                      while (1)
                                      {
                                        v1515 = *(_QWORD *)(*(_QWORD *)v1514 + 40);
                                        v1516 = *(_QWORD *)(v1515 + 40);
                                        if (v1516 != v1515 + 40)
                                        {
                                          v1517 = v1516 - 24;
                                          if (!v1516)
                                            v1517 = 0;
                                          v1518 = *(unsigned __int8 *)(v1517 + 16);
                                          if (v1518 != 29)
                                            v1517 = 0;
                                          if (v1516 && v1518 == 29)
                                          {
                                            v1520 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1514 + 40) + 48);
                                            v1521 = v1520 ? v1520 - 24 : 0;
                                            if (v1517 != v1521
                                              && *(_QWORD *)(*(_QWORD *)(v1517 + 40) + 48) != v1517 + 24)
                                            {
                                              v1522 = *(_QWORD *)(v1517 + 24);
                                              if (v1522)
                                              {
                                                if (*(_BYTE *)(v1522 - 8) == 84)
                                                {
                                                  v1523 = *(_QWORD *)(v1522 - 56);
                                                  if (v1523)
                                                  {
                                                    if (!*(_BYTE *)(v1523 + 16)
                                                      && *(_QWORD *)(v1523 + 24) == *(_QWORD *)(v1522 + 48)
                                                      && *(_DWORD *)(v1523 + 36) == 119)
                                                    {
                                                      break;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        v1514 += 8;
                                        v1513 -= 8;
                                        if (v1514 == v1512)
                                          goto LABEL_2358;
                                      }
                                      if (v1514 + 8 == v1512)
                                      {
                                        v1512 = v1514;
                                      }
                                      else
                                      {
                                        v1524 = 8;
                                        v1512 = v1514;
                                        do
                                        {
                                          v1525 = *(_QWORD *)&v1514[v1524];
                                          v1526 = *(_QWORD *)(v1525 + 40);
                                          v1527 = *(_QWORD *)(v1526 + 40);
                                          if (v1527 == v1526 + 40)
                                            goto LABEL_2341;
                                          v1528 = v1527 - 24;
                                          if (!v1527)
                                            v1528 = 0;
                                          v1529 = *(unsigned __int8 *)(v1528 + 16);
                                          if (v1529 != 29)
                                            v1528 = 0;
                                          v1530 = v1527 && v1529 == 29;
                                          if (!v1530
                                            || ((v1531 = *(_QWORD *)(*(_QWORD *)(v1525 + 40) + 48)) != 0
                                              ? (v1532 = v1531 - 24)
                                              : (v1532 = 0),
                                                v1528 == v1532
                                             || *(_QWORD *)(*(_QWORD *)(v1528 + 40) + 48) == v1528 + 24
                                             || (v1533 = *(_QWORD *)(v1528 + 24)) == 0
                                             || *(_BYTE *)(v1533 - 8) != 84
                                             || (v1534 = *(_QWORD *)(v1533 - 56)) == 0
                                             || *(_BYTE *)(v1534 + 16)
                                             || *(_QWORD *)(v1534 + 24) != *(_QWORD *)(v1533 + 48)
                                             || *(_DWORD *)(v1534 + 36) != 119))
                                          {
LABEL_2341:
                                            *(_QWORD *)v1512 = v1525;
                                            v1512 += 8;
                                          }
                                          v1524 += 8;
                                          v1513 -= 8;
                                        }
                                        while (v1513);
                                        v1511 = v2001;
                                      }
                                      v1450 = a1;
                                      v1452 = a2;
                                      v1451 = v1944;
                                      v1142 = *(uint64_t **)v1955;
                                      v1453 = v1897;
                                    }
                                    else
                                    {
                                      v1512 = (char *)v2001;
                                    }
LABEL_2358:
                                    LODWORD(v2002) = (unint64_t)(v1512 - v1511) >> 3;
                                  }
                                  else
                                  {
                                    v1984 = &v1986;
                                    v1985 = 0x800000000;
                                    v1455 = (uint64_t *)*((_QWORD *)v1944 + 5);
                                    v2035 = *v1454;
                                    v1456 = llvm::Intrinsic::getDeclaration(v1455, 119, (uint64_t *)&v2035, 1);
                                    if ((_DWORD)v2002)
                                    {
                                      v1457 = v1456;
                                      v1458 = (char *)v2001;
                                      v1459 = (char *)v2001 + 8 * v2002;
                                      v1460 = &v1998;
                                      v1461 = &v2027[2];
                                      v1462 = &v2050;
                                      v1463 = (llvm::BasicBlock *)v2051;
                                      v1464 = &v2036.i8[8];
                                      v1465 = &v2048;
                                      do
                                      {
                                        v1466 = *(_QWORD *)v1458;
                                        v1467 = *(_QWORD *)(*(_QWORD *)v1458 + 40);
                                        v1468 = *(_QWORD *)(v1467 + 40);
                                        if (v1468 == v1467 + 40)
                                          goto LABEL_2246;
                                        v1469 = v1468 - 24;
                                        if (!v1468)
                                          v1469 = 0;
                                        v1470 = *(unsigned __int8 *)(v1469 + 16);
                                        if (v1470 != 29)
                                          v1469 = 0;
                                        v1471 = v1468 && v1470 == 29;
                                        if (v1471
                                          && ((v1473 = *(_QWORD *)(v1467 + 48)) != 0
                                            ? (v1474 = v1473 - 24)
                                            : (v1474 = 0),
                                              v1469 != v1474
                                           && (v1475 = (uint64_t **)(v1469 + 24),
                                               *(_QWORD *)(*(_QWORD *)(v1469 + 40) + 48) != v1469 + 24)
                                           && (v1476 = *v1475) != 0
                                           && *((_BYTE *)v1476 - 8) == 84
                                           && (v1477 = *(v1476 - 7)) != 0
                                           && !*(_BYTE *)(v1477 + 16)
                                           && *(_QWORD *)(v1477 + 24) == v1476[6]
                                           && *(_DWORD *)(v1477 + 36) == 119))
                                        {
                                          __nc = v1465;
                                          v1938 = v1463;
                                          v1920 = v1464;
                                          v1925 = (uint64_t *)v1461;
                                          __szb = (size_t)v1462;
                                          v1951 = v1460;
                                          __s1a = (*(unsigned __int16 *)(v1477 + 18) >> 4) & 0x3FF;
                                          *(_WORD *)(v1457 + 18) = *(_WORD *)(v1457 + 18) & 0xC00F | (16 * __s1a);
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v1467 + 40, (uint64_t ***)v1466);
                                          v1478 = *(_QWORD *)(v1466 + 24);
                                          v1479 = *(_QWORD **)(v1466 + 32);
                                          *v1479 = v1478;
                                          *(_QWORD *)(v1478 + 8) = v1479;
                                          *(_QWORD *)(v1466 + 24) = 0;
                                          *(_QWORD *)(v1466 + 32) = 0;
                                          llvm::Value::deleteValue((llvm::Value *)v1466);
                                          v1902 = 0;
                                          v1480 = *((unsigned __int8 *)v1476 - 8);
                                          if (v1480 != 84)
                                          {
                                            if (v1480 == 39)
                                              v1501 = (*((_DWORD *)v1476 + 14) + 1);
                                            else
                                              v1501 = 2;
                                            v1902 = v1501;
                                          }
                                          v1481 = *((_DWORD *)v1476 - 1);
                                          v1913 = (uint64_t ***)(v1476 - 3);
                                          v1880 = v1481 & 0x7FFFFFF;
                                          v1482 = &v1476[-4 * v1880 - 3];
                                          if (v1481 < 0 && (v1502 = *(v1482 - 1), (v1502 & 0xFFFFFFFF0) != 0))
                                            v1894 = (*((_DWORD *)v1482 - 3)
                                                                 - *(_DWORD *)((char *)v1482 - v1502));
                                          else
                                            v1894 = 0;
                                          v1996 = v1951;
                                          v1997 = 0x400000000;
                                          v1883 = (uint64_t)&(&v1913[-4 * v1902])[-4 * v1894 - 4];
                                          v1888 = v1883 - (_QWORD)v1482;
                                          if ((unint64_t)(v1883 - (_QWORD)v1482) >= 0x81)
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1996, (uint64_t)v1951, v1888 >> 5, 8);
                                            v1483 = v1997;
                                            v1484 = v1997;
                                          }
                                          else
                                          {
                                            v1483 = 0;
                                            v1484 = 0;
                                          }
                                          if (v1482 != (uint64_t *)v1883)
                                          {
                                            v1485 = (char *)v1996 + 8 * v1483;
                                            v1486 = 32 * v1880 - 32 * v1902 - 32 * v1894 - 32;
                                            do
                                            {
                                              v1487 = *v1482;
                                              v1482 += 4;
                                              *v1485++ = v1487;
                                              v1486 -= 32;
                                            }
                                            while (v1486);
                                          }
                                          LODWORD(v1997) = v1484 + ((unint64_t)v1888 >> 5);
                                          v2027[0] = v1925;
                                          v2027[1] = (uint64_t *)0x100000000;
                                          v1488 = *((_DWORD *)v1476 - 1);
                                          if (v1488 < 0)
                                          {
                                            v1503 = (unint64_t)v1913[-4 * (v1488 & 0x7FFFFFF) - 1];
                                            if ((v1503 & 0xFFFFFFFF0) != 0)
                                            {
                                              v1904 = (v1503 >> 4);
                                              v1504 = (char *)v1476;
                                              do
                                              {
                                                v1505 = *((_DWORD *)v1476 - 1) & 0x7FFFFFF;
                                                v1506 = &v1913[-4 * v1505];
                                                v1507 = v1504 - (char *)&(*(v1506 - 1))[4 * v1505];
                                                v1508 = *(unsigned int *)(v1507 - 24);
                                                v1509 = *(unsigned int *)(v1507 - 20);
                                                v1510 = *(_QWORD *)(v1507 - 32);
                                                v2035 = &v1506[4 * v1508];
                                                v2036.i64[0] = v1509 - v1508;
                                                v2036.i64[1] = v1510;
                                                sub_1C623D924((uint64_t)v2027, (uint64_t)&v2035);
                                                v1504 += 16;
                                                --v1904;
                                              }
                                              while (v1904);
                                            }
                                          }
                                          v1903 = v1476[5];
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v1476[2] + 40, v1913);
                                          v1489 = *v1476;
                                          v1490 = (_QWORD *)v1476[1];
                                          *v1490 = *v1476;
                                          *(_QWORD *)(v1489 + 8) = v1490;
                                          *v1476 = 0;
                                          v1476[1] = 0;
                                          llvm::Value::deleteValue((llvm::Value *)v1913);
                                          v1491 = **(uint64_t ***)v1467;
                                          v2035 = v1920;
                                          v2036.i64[0] = 0x200000000;
                                          v2041 = v1491;
                                          v2042 = (void **)__szb;
                                          v2043 = v1938;
                                          v2044 = 0;
                                          v2045 = 0;
                                          v2046 = 512;
                                          v2047 = 7;
                                          *__nc = 0;
                                          __nc[1] = 0;
                                          v2050 = &unk_1E8167888;
                                          v2051[0] = &unk_1E8167A08;
                                          v2039 = v1467;
                                          v2040 = (char *)(v1467 + 40);
                                          if (v1457)
                                            v1492 = *(uint64_t ***)(v1457 + 24);
                                          else
                                            v1492 = 0;
                                          v2026[8] = 257;
                                          v1496 = sub_1C5062DD8((uint64_t *)&v2035, v1492, v1457, (uint64_t *)v1996, v1997, (uint64_t)v2027[0], LODWORD(v2027[1]), (uint64_t)&v2024, 0);
                                          *(_WORD *)(v1496 + 18) = *(_WORD *)(v1496 + 18) & 0xF003 | (4 * __s1a);
                                          *(_QWORD *)(v1496 + 64) = v1903;
                                          if (*(_BYTE *)(*(_QWORD *)v1496 + 8) == 7)
                                            LLVMBuildRetVoid_0((uint64_t *)&v2035);
                                          else
                                            sub_1C538D7E4((uint64_t *)&v2035, (llvm::Value *)v1496);
                                          if (v2035 != v1920)
                                            free(v2035);
                                          v1497 = v2027[0];
                                          if (LODWORD(v2027[1]))
                                          {
                                            v1498 = 6 * LODWORD(v2027[1]);
                                            do
                                            {
                                              v1499 = &v1497[v1498];
                                              v1500 = (void *)v1497[v1498 - 3];
                                              if (v1500)
                                              {
                                                *(v1499 - 2) = (uint64_t)v1500;
                                                operator delete(v1500);
                                              }
                                              if (*((char *)v1499 - 25) < 0)
                                                operator delete((void *)*(v1499 - 6));
                                              v1498 -= 6;
                                            }
                                            while (v1498 * 8);
                                            v1497 = v2027[0];
                                          }
                                          if (v1497 != v1925)
                                            free(v1497);
                                          if (v1996 != v1951)
                                            free(v1996);
                                          v1451 = v1944;
                                          v1460 = v1951;
                                          v1464 = v1920;
                                          v1461 = (uint64_t **)v1925;
                                          v1462 = (void **)__szb;
                                          v1465 = __nc;
                                          v1463 = v1938;
                                        }
                                        else
                                        {
LABEL_2246:
                                          v1472 = v1985;
                                          if (v1985 >= (unint64_t)HIDWORD(v1985))
                                          {
                                            v1952 = v1460;
                                            v1493 = v1461;
                                            v1494 = v1462;
                                            __nf = (size_t)v1465;
                                            v1939 = v1463;
                                            v1495 = v1464;
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1984, (uint64_t)&v1986, v1985 + 1, 8);
                                            v1465 = (uint64_t *)__nf;
                                            v1463 = v1939;
                                            v1464 = v1495;
                                            v1462 = v1494;
                                            v1461 = v1493;
                                            v1460 = v1952;
                                            v1472 = v1985;
                                          }
                                          v1451 = v1944;
                                          *((_QWORD *)v1984 + v1472) = v1466;
                                          LODWORD(v1985) = v1985 + 1;
                                        }
                                        v1458 += 8;
                                      }
                                      while (v1458 != v1459);
                                    }
                                    sub_1C5F0AD54(&v2001, (uint64_t)&v1984);
                                    if (v1984 != &v1986)
                                      free(v1984);
                                    v1450 = a1;
                                    v1452 = a2;
                                    v1142 = *(uint64_t **)v1955;
                                    v1453 = v1897;
                                  }
                                }
                                if (v1961)
                                {
                                  v1535 = **(_QWORD **)(*((_QWORD *)v1451 + 3) + 16);
                                  if (v1450[1])
                                    v1536 = *v1450 == (uint64_t **)v1535;
                                  else
                                    v1536 = 1;
                                  v1537 = !v1536;
                                  v1984 = &v1986;
                                  v1985 = 0x800000000;
                                  if ((_DWORD)v2002)
                                  {
                                    v1538 = (char *)v2001;
                                    v1539 = 8 * v2002;
                                    do
                                    {
                                      v1540 = *(_QWORD *)v1538;
                                      v1541 = *(llvm::BasicBlock **)(*(_QWORD *)v1538 + 40);
                                      v1542 = llvm::BasicBlock::getTerminatingMustTailCall(v1541);
                                      if (v1542)
                                      {
                                        if (v1537)
                                        {
                                          v1543 = (unsigned __int8 *)v1542;
                                          v1544 = *(_DWORD *)(v1540 + 20) & 0x7FFFFFF;
                                          if ((_DWORD)v1544
                                            && (v1545 = *(_QWORD *)(v1540 - 32 * v1544)) != 0
                                            && *(_BYTE *)(v1545 + 16) == 77)
                                          {
                                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v1541 + 40, (uint64_t ***)v1540);
                                            v1546 = *(_QWORD *)(v1540 + 24);
                                            v1547 = *(_QWORD **)(v1540 + 32);
                                            *v1547 = v1546;
                                            *(_QWORD *)(v1546 + 8) = v1547;
                                            *(_QWORD *)(v1540 + 24) = 0;
                                            *(_QWORD *)(v1540 + 32) = 0;
                                            llvm::Value::deleteValue((llvm::Value *)v1540);
                                          }
                                          else
                                          {
                                            v1545 = v1540;
                                          }
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1545 + 40) + 40, (uint64_t ***)v1545);
                                          v1549 = *(_QWORD *)(v1545 + 24);
                                          v1550 = *(_QWORD **)(v1545 + 32);
                                          *v1550 = v1549;
                                          *(_QWORD *)(v1549 + 8) = v1550;
                                          *(_QWORD *)(v1545 + 24) = 0;
                                          *(_QWORD *)(v1545 + 32) = 0;
                                          llvm::Value::deleteValue((llvm::Value *)v1545);
                                          v1551 = **(uint64_t ***)v1541;
                                          v2035 = &v2036.u64[1];
                                          v2036.i64[0] = 0x200000000;
                                          v2041 = v1551;
                                          v2042 = &v2050;
                                          v2043 = (llvm::BasicBlock *)v2051;
                                          v2044 = 0;
                                          v2045 = 0;
                                          v2046 = 512;
                                          v2047 = 7;
                                          v2048 = 0;
                                          v2049 = 0;
                                          v2050 = &unk_1E8167888;
                                          v2051[0] = &unk_1E8167A08;
                                          v2039 = (uint64_t)v1541;
                                          v2040 = (char *)v1541 + 40;
                                          LOWORD(v2029) = 257;
                                          v1552 = sub_1C4773E38((uint64_t *)&v2035, 49, v1543, v1535, (uint64_t)v2027);
                                          sub_1C538D7E4((uint64_t *)&v2035, (llvm::Value *)v1552);
                                          if (v2035 != &v2036.u64[1])
                                            free(v2035);
                                        }
                                      }
                                      else
                                      {
                                        v1548 = v1985;
                                        if (v1985 >= (unint64_t)HIDWORD(v1985))
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1984, (uint64_t)&v1986, v1985 + 1, 8);
                                          v1548 = v1985;
                                        }
                                        *((_QWORD *)v1984 + v1548) = v1540;
                                        LODWORD(v1985) = v1985 + 1;
                                      }
                                      v1538 += 8;
                                      v1539 -= 8;
                                    }
                                    while (v1539);
                                  }
                                  sub_1C5F0AD54(&v2001, (uint64_t)&v1984);
                                  if (v1984 != &v1986)
                                    free(v1984);
                                  v1452 = a2;
                                  v1142 = *(uint64_t **)v1955;
                                  v1453 = v1897;
                                }
                                if ((_BYTE)v1975)
                                {
                                  if (!*(_QWORD *)v1452)
                                  {
                                    for (i5 = v1896 + 3; i5 != v1142; i5 = (uint64_t *)i5[1])
                                    {
                                      v1554 = i5 - 3;
                                      if (!i5)
                                        v1554 = 0;
                                      v1555 = v1554 + 5;
                                      for (i6 = (_QWORD *)v1554[6]; i6 != v1555; i6 = (_QWORD *)i6[1])
                                      {
                                        if (i6)
                                          v1557 = i6 - 3;
                                        else
                                          v1557 = 0;
                                        v1558 = *((unsigned __int8 *)v1557 + 16) - 33;
                                        v247 = v1558 > 0x33;
                                        v1559 = (1 << v1558) & 0x8000000000041;
                                        if (!v247 && v1559 != 0)
                                        {
                                          v1561 = *(i6 - 7);
                                          if (!v1561
                                            || *(_BYTE *)(v1561 + 16)
                                            || *(_QWORD *)(v1561 + 24) != i6[6]
                                            || (*(_BYTE *)(v1561 + 33) & 0x20) == 0)
                                          {
                                            v1562 = *(unsigned int *)(v1452 + 312);
                                            if (v1562 >= *(unsigned int *)(v1452 + 316))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod(v1452 + 304, v1452 + 320, v1562 + 1, 8);
                                              v1453 = v1897;
                                              v1562 = *(unsigned int *)(v1452 + 312);
                                            }
                                            *(_QWORD *)(*(_QWORD *)(v1452 + 304) + 8 * v1562) = i6 - 3;
                                            ++*(_DWORD *)(v1452 + 312);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                v1563 = v1900;
                                if ((_DWORD)v2002 != 1 || v1900 == v1142)
                                  goto LABEL_2414;
                                v1565 = 1;
                                v1566 = v1900;
                                do
                                {
                                  v1566 = (uint64_t *)v1566[1];
                                  --v1565;
                                }
                                while (v1566 != v1142);
                                if (v1565)
                                {
LABEL_2414:
                                  if (*((_BYTE *)a1 + 16) == 33)
                                  {
                                    v1567 = (uint64_t)*(a1 - 12);
                                    v1568 = (char *)operator new(0x60uLL);
                                    *((_DWORD *)v1568 + 13) = *((_DWORD *)v1568 + 13) & 0x38000000 | 1;
                                    *((_QWORD *)v1568 + 1) = 0;
                                    *((_QWORD *)v1568 + 2) = 0;
                                    *(_QWORD *)v1568 = 0;
                                    *((_QWORD *)v1568 + 4) = ***(_QWORD ***)v1567 + 1576;
                                    v1569 = (unsigned __int8 **)(v1568 + 32);
                                    *((_QWORD *)v1568 + 3) = v1568 + 32;
                                    *((_QWORD *)v1568 + 5) = 0;
                                    v1568[48] = 30;
                                    v1568[49] = 0;
                                    *((_WORD *)v1568 + 25) = 0;
                                    *((_DWORD *)v1568 + 13) = 1;
                                    *(_OWORD *)(v1568 + 56) = 0u;
                                    v1570 = (uint64_t *)(v1568 + 56);
                                    *(_OWORD *)(v1568 + 72) = 0u;
                                    *((_DWORD *)v1568 + 22) = 0;
                                    v1571 = a1[5];
                                    v1572 = (uint64_t **)(a1 + 3);
                                    *((_QWORD *)v1568 + 9) = v1571;
                                    *((_WORD *)v1571 + 9) &= ~0x8000u;
                                    if ((v1568[55] & 0x10) != 0
                                      && (v1780 = v1571[7]) != 0
                                      && (v1781 = (llvm::ValueSymbolTable *)v1780[13]) != 0)
                                    {
                                      llvm::ValueSymbolTable::reinsertValue(v1781, (llvm::Value *)v1569);
                                      v1782 = *(_QWORD *)v1568;
                                      v1783 = *v1572;
                                      *((_QWORD *)v1568 + 7) = *v1572;
                                      *((_QWORD *)v1568 + 8) = v1572;
                                      v1783[1] = (uint64_t)v1570;
                                      *v1572 = v1570;
                                      if (v1782)
                                      {
                                        **((_QWORD **)v1568 + 2) = *((_QWORD *)v1568 + 1);
                                        v1784 = *((_QWORD *)v1568 + 1);
                                        if (v1784)
                                          *(_QWORD *)(v1784 + 16) = *((_QWORD *)v1568 + 2);
                                      }
                                    }
                                    else
                                    {
                                      v1573 = *v1572;
                                      *((_QWORD *)v1568 + 7) = *v1572;
                                      *((_QWORD *)v1568 + 8) = v1572;
                                      v1573[1] = (uint64_t)v1570;
                                      *v1572 = v1570;
                                    }
                                    *(_QWORD *)v1568 = v1567;
                                    v1576 = *(_QWORD *)(v1567 + 8);
                                    v1575 = (_QWORD *)(v1567 + 8);
                                    v1574 = v1576;
                                    *((_QWORD *)v1568 + 1) = v1576;
                                    v1577 = (_QWORD *)v1892;
                                    if (v1576)
                                      *(_QWORD *)(v1574 + 16) = v1568 + 8;
                                    *((_QWORD *)v1568 + 2) = v1575;
                                    *v1575 = v1568;
                                    if ((*((_BYTE *)v1898 + 23) & 0x10) != 0)
                                    {
                                      v1578 = ***(_QWORD ***)v1898;
                                      v1579 = *(_QWORD *)(v1578 + 152);
                                      v1580 = *(unsigned int *)(v1578 + 168);
                                      v1563 = v1900;
                                      if (!(_DWORD)v1580)
                                        goto LABEL_2468;
                                      LODWORD(v1581) = (v1580 - 1) & (v1886 ^ (v1898 >> 9));
                                      v1582 = (llvm::Function **)(v1579 + 16 * v1581);
                                      v1583 = *v1582;
                                      if (*v1582 != v1898)
                                      {
                                        v1584 = 1;
                                        while (v1583 != (llvm::Function *)-4096)
                                        {
                                          v1585 = v1581 + v1584++;
                                          v1581 = v1585 & (v1580 - 1);
                                          v1583 = *(llvm::Function **)(v1579 + 16 * v1581);
                                          if (v1583 == v1898)
                                          {
                                            v1582 = (llvm::Function **)(v1579 + 16 * v1581);
                                            goto LABEL_2469;
                                          }
                                        }
LABEL_2468:
                                        v1582 = (llvm::Function **)(v1579 + 16 * v1580);
                                      }
LABEL_2469:
                                      v1627 = v1582[1];
                                      v1630 = *(_QWORD *)v1627;
                                      v1628 = (char *)v1627 + 16;
                                      v1629 = v1630;
                                    }
                                    else
                                    {
                                      v1629 = 0;
                                      v1628 = &byte_1C871356D;
                                      v1563 = v1900;
                                    }
                                    v2037.i16[4] = 773;
                                    v2035 = v1628;
                                    v2036.i64[0] = v1629;
                                    v2036.i64[1] = (uint64_t)".exit";
                                    v1632 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v1892, v1570, (uint64_t)&v2035, 0);
LABEL_2474:
                                    v1637 = *(uint64_t **)(v1452 + 32);
                                    if (v1637)
                                    {
                                      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v1452 + 32), (uint64_t)v1577);
                                      sub_1C4DAD074(*v1637, v1632, BlockFreq);
                                    }
                                    v1640 = (llvm::BasicBlock *)(v1577 + 5);
                                    v1639 = (_QWORD *)v1577[5];
                                    if (v1639 == v1577 + 5)
                                    {
                                      v1642 = 0;
                                    }
                                    else
                                    {
                                      if (v1639)
                                        v1641 = v1639 - 3;
                                      else
                                        v1641 = 0;
                                      if (*((unsigned __int8 *)v1641 + 16) - 29 >= 0xB)
                                        v1642 = 0;
                                      else
                                        v1642 = v1641;
                                    }
                                    v1643 = *((_DWORD *)v1642 + 5);
                                    v1953 = v1642;
                                    if ((v1643 & 0x40000000) != 0)
                                      v1644 = (uint64_t **)*(v1642 - 1);
                                    else
                                      v1644 = (uint64_t **)&v1642[-4 * (v1643 & 0x7FFFFFF)];
                                    if (*v1644)
                                    {
                                      *v1644[2] = (uint64_t)v1644[1];
                                      v1645 = (uint64_t)v1644[1];
                                      if (v1645)
                                        *(_QWORD *)(v1645 + 16) = v1644[2];
                                    }
                                    *v1644 = v1896;
                                    if (v1563)
                                    {
                                      v1646 = v1563 - 2;
                                      v1647 = *(v1563 - 2);
                                      v1644[1] = (uint64_t *)v1647;
                                      if (v1647)
                                        *(_QWORD *)(v1647 + 16) = v1644 + 1;
                                      v1644[2] = v1646;
                                      *v1646 = (uint64_t)v1644;
                                    }
                                    if (v1563 != v1142)
                                    {
                                      v1648 = (uint64_t *)(v1632 + 24);
                                      if ((uint64_t *)(v1632 + 24) != v1142)
                                      {
                                        v1649 = *v1142;
                                        v1650 = *v1563;
                                        *(_QWORD *)(v1650 + 8) = v1142;
                                        *v1142 = v1650;
                                        v1651 = *v1648;
                                        *(_QWORD *)(v1649 + 8) = v1648;
                                        *v1563 = v1651;
                                        *(_QWORD *)(v1651 + 8) = v1563;
                                        *v1648 = v1649;
                                      }
                                    }
                                    v1652 = v2002;
                                    if (v2002 < 2)
                                    {
                                      v1662 = a1[1];
                                      if ((_DWORD)v2002)
                                      {
                                        if (v1662)
                                        {
                                          v1663 = *(_DWORD *)(*(_QWORD *)v2001 + 20) & 0x7FFFFFF;
                                          if ((_DWORD)v1663)
                                          {
                                            v1664 = *(llvm::UndefValue **)(*(_QWORD *)v2001 - 32 * v1663);
                                            v1665 = (llvm::ValueAsMetadata *)a1;
                                            if (v1664 == (llvm::UndefValue *)a1)
                                              v1664 = llvm::UndefValue::get((llvm::UndefValue *)*a1, v1664);
                                          }
                                          else
                                          {
                                            v1664 = 0;
                                            v1665 = (llvm::ValueAsMetadata *)a1;
                                          }
                                          llvm::Value::doRAUW(v1665, v1664, (llvm::Value *)1);
                                        }
                                        v1679 = *(llvm::ValueAsMetadata **)(*(_QWORD *)v2001 + 40);
                                        llvm::Value::doRAUW(v1679, (llvm::Value *)v1632, (llvm::Value *)1);
                                        sub_1C5EBBDF4((_QWORD *)(v1632 + 40), *(_QWORD **)(v1632 + 48), (_QWORD *)v1679 + 5);
                                        if (v1569)
                                        {
                                          v1680 = *(unsigned __int8 **)(*(_QWORD *)v2001 + 48);
                                          v1965 = v1680;
                                          if (v1680)
                                            llvm::MetadataTracking::track((uint64_t)&v1965, v1680, 2);
                                          v1681 = v1569 + 6;
                                          if (&v1965 == v1569 + 6)
                                          {
                                            if (v1965)
                                              llvm::MetadataTracking::untrack((uint64_t)&v1965, v1965);
                                          }
                                          else
                                          {
                                            if (*v1681)
                                              llvm::MetadataTracking::untrack((uint64_t)(v1569 + 6), *v1681);
                                            v1682 = v1965;
                                            *v1681 = v1965;
                                            if (v1682)
                                            {
                                              llvm::MetadataTracking::retrack((uint64_t)&v1965, v1682, (uint64_t)(v1569 + 6));
                                              v1965 = 0;
                                            }
                                          }
                                        }
                                        v1683 = *(llvm::Value **)v2001;
                                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(*(_QWORD *)v2001 + 40) + 40, *(uint64_t ****)v2001);
                                        v1684 = *((_QWORD *)v1683 + 3);
                                        v1685 = (_QWORD *)*((_QWORD *)v1683 + 4);
                                        *v1685 = v1684;
                                        *(_QWORD *)(v1684 + 8) = v1685;
                                        *((_QWORD *)v1683 + 3) = 0;
                                        *((_QWORD *)v1683 + 4) = 0;
                                        llvm::Value::deleteValue(v1683);
                                        llvm::BasicBlock::eraseFromParent(v1679);
                                        v1667 = 0;
                                        v1577 = (_QWORD *)v1892;
                                      }
                                      else
                                      {
                                        if (v1662)
                                        {
                                          v1666 = llvm::UndefValue::get((llvm::UndefValue *)*a1, v1631);
                                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v1666, (llvm::Value *)1);
                                        }
                                        v1667 = 0;
                                      }
                                    }
                                    else
                                    {
                                      v1940 = (llvm::BasicBlock *)(v1577 + 5);
                                      if (!a1[1])
                                      {
                                        __nd = 0;
                                        v2035 = 0;
                                        goto LABEL_2556;
                                      }
                                      v1653 = **(_QWORD **)(*((_QWORD *)v1898 + 3) + 16);
                                      if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                                      {
                                        v1654 = ***a1;
                                        v1655 = *(_QWORD *)(v1654 + 152);
                                        v1656 = *(unsigned int *)(v1654 + 168);
                                        if (!(_DWORD)v1656)
                                          goto LABEL_2543;
                                        LODWORD(v1657) = (v1656 - 1) & ((a1 >> 4) ^ (a1 >> 9));
                                        v1658 = (uint64_t ****)(v1655 + 16 * v1657);
                                        v1659 = *v1658;
                                        if (*v1658 != a1)
                                        {
                                          v1660 = 1;
                                          while (v1659 != (uint64_t ***)-4096)
                                          {
                                            v1661 = v1657 + v1660++;
                                            v1657 = v1661 & (v1656 - 1);
                                            v1659 = *(uint64_t ****)(v1655 + 16 * v1657);
                                            if (v1659 == a1)
                                            {
                                              v1658 = (uint64_t ****)(v1655 + 16 * v1657);
                                              goto LABEL_2544;
                                            }
                                          }
LABEL_2543:
                                          v1658 = (uint64_t ****)(v1655 + 16 * v1656);
                                        }
LABEL_2544:
                                        v1689 = v1658[1];
                                        v1692 = *v1689;
                                        v1690 = (char *)(v1689 + 2);
                                        v1691 = v1692;
                                      }
                                      else
                                      {
                                        v1691 = 0;
                                        v1690 = &byte_1C871356D;
                                      }
                                      v2037.i16[4] = 261;
                                      v2035 = v1690;
                                      v2036.i64[0] = (uint64_t)v1691;
                                      v1693 = *(uint64_t **)(v1632 + 48);
                                      v1694 = operator new(0x48uLL);
                                      v1695 = v1694;
                                      v1694[1] = v1653;
                                      v1696 = (llvm::Value *)(v1694 + 1);
                                      *v1694 = 0;
                                      v1694[2] = 0;
                                      v1694[3] = 0x4000000000000053;
                                      *((_OWORD *)v1694 + 2) = 0u;
                                      v1697 = (char *)(v1694 + 4);
                                      *((_OWORD *)v1694 + 3) = 0u;
                                      *((_DWORD *)v1694 + 16) = 0;
                                      if (v1693)
                                      {
                                        v1804 = v1693[2];
                                        v1694[6] = v1804;
                                        *(_WORD *)(v1804 + 18) &= ~0x8000u;
                                        if ((*((_BYTE *)v1694 + 31) & 0x10) != 0)
                                        {
                                          v1811 = *(_QWORD *)(v1804 + 56);
                                          if (v1811)
                                          {
                                            v1812 = *(llvm::ValueSymbolTable **)(v1811 + 104);
                                            if (v1812)
                                              llvm::ValueSymbolTable::reinsertValue(v1812, v1696);
                                          }
                                        }
                                        v1805 = *v1693;
                                        v1695[4] = *v1693;
                                        v1695[5] = v1693;
                                        *(_QWORD *)(v1805 + 8) = v1697;
                                        *v1693 = (uint64_t)v1697;
                                      }
                                      *((_DWORD *)v1695 + 17) = v1652;
                                      llvm::Value::setName((uint64_t ***)v1696, (uint64_t)&v2035);
                                      v1698 = *((unsigned int *)v1695 + 17);
                                      v1699 = operator new(40 * v1698);
                                      *v1695 = v1699;
                                      if ((_DWORD)v1698)
                                      {
                                        v1700 = &v1699[4 * v1698];
                                        do
                                        {
                                          *v1699 = 0;
                                          v1699[1] = 0;
                                          v1699[2] = 0;
                                          v1699[3] = v1696;
                                          v1699 += 4;
                                        }
                                        while (v1699 != v1700);
                                      }
                                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v1696, (llvm::Value *)1);
                                      v1640 = (llvm::BasicBlock *)(v1577 + 5);
                                      __nd = (size_t)v1696;
                                      if ((_DWORD)v2002)
                                      {
                                        v1701 = 0;
                                        v1702 = 8 * v2002;
                                        do
                                        {
                                          v1703 = *(_QWORD *)((char *)v2001 + v1701);
                                          v1704 = *(_DWORD *)(v1703 + 20) & 0x7FFFFFF;
                                          if ((_DWORD)v1704)
                                            v1705 = *(_QWORD *)(v1703 - 32 * v1704);
                                          else
                                            v1705 = 0;
                                          sub_1C477667C(v1696, v1705, *(_QWORD *)(v1703 + 40));
                                          v1701 += 8;
                                        }
                                        while (v1702 != v1701);
                                        v1652 = v2002;
                                        v2035 = 0;
                                        if ((_DWORD)v2002)
                                        {
LABEL_2556:
                                          v1926 = v1569;
                                          v1706 = 0;
                                          v1707 = (_QWORD *)(v1632 + 8);
                                          while (1)
                                          {
                                            v1708 = *((_QWORD *)v2001 + v1706);
                                            v1709 = (char *)operator new(0x60uLL);
                                            v1710 = v1709;
                                            *((_DWORD *)v1709 + 13) = *((_DWORD *)v1709 + 13) & 0x38000000 | 1;
                                            *((_QWORD *)v1709 + 1) = 0;
                                            *((_QWORD *)v1709 + 2) = 0;
                                            *(_QWORD *)v1709 = 0;
                                            *((_QWORD *)v1709 + 4) = ***(_QWORD ***)v1632 + 1576;
                                            v1711 = (llvm::Value *)(v1709 + 32);
                                            *((_QWORD *)v1709 + 3) = v1709 + 32;
                                            *((_QWORD *)v1709 + 5) = 0;
                                            *((_WORD *)v1709 + 24) = 30;
                                            *((_WORD *)v1709 + 25) = 0;
                                            *((_DWORD *)v1709 + 13) = 1;
                                            *(_OWORD *)(v1709 + 56) = 0u;
                                            v1712 = v1709 + 56;
                                            *(_OWORD *)(v1709 + 72) = 0u;
                                            *((_DWORD *)v1709 + 22) = 0;
                                            if (v1708)
                                            {
                                              v1721 = *(_QWORD *)(v1708 + 40);
                                              v1722 = (uint64_t *)(v1708 + 24);
                                              *((_QWORD *)v1709 + 9) = v1721;
                                              *(_WORD *)(v1721 + 18) &= ~0x8000u;
                                              if ((v1709[55] & 0x10) != 0
                                                && (v1724 = *(_QWORD *)(v1721 + 56)) != 0
                                                && (v1725 = *(llvm::ValueSymbolTable **)(v1724 + 104)) != 0)
                                              {
                                                llvm::ValueSymbolTable::reinsertValue(v1725, v1711);
                                                v1726 = *(_QWORD *)v1710;
                                                v1727 = *(_QWORD *)(v1708 + 24);
                                                *((_QWORD *)v1710 + 7) = v1727;
                                                *((_QWORD *)v1710 + 8) = v1708 + 24;
                                                *(_QWORD *)(v1727 + 8) = v1712;
                                                *(_QWORD *)(v1708 + 24) = v1712;
                                                if (v1726)
                                                {
                                                  **((_QWORD **)v1710 + 2) = *((_QWORD *)v1710 + 1);
                                                  v1728 = *((_QWORD *)v1710 + 1);
                                                  if (v1728)
                                                    *(_QWORD *)(v1728 + 16) = *((_QWORD *)v1710 + 2);
                                                }
                                              }
                                              else
                                              {
                                                v1723 = *v1722;
                                                *((_QWORD *)v1710 + 7) = *v1722;
                                                *((_QWORD *)v1710 + 8) = v1722;
                                                *(_QWORD *)(v1723 + 8) = v1712;
                                                *v1722 = (uint64_t)v1712;
                                              }
                                            }
                                            *(_QWORD *)v1710 = v1632;
                                            v1713 = *(_QWORD *)(v1632 + 8);
                                            *((_QWORD *)v1710 + 1) = v1713;
                                            if (v1713)
                                              *(_QWORD *)(v1713 + 16) = v1710 + 8;
                                            *((_QWORD *)v1710 + 2) = v1707;
                                            *v1707 = v1710;
                                            if ((void **)(v1708 + 48) == &v2035)
                                              goto LABEL_2572;
                                            if (v2035)
                                              llvm::MetadataTracking::untrack((uint64_t)&v2035, (unsigned __int8 *)v2035);
                                            v1714 = *(void **)(v1708 + 48);
                                            v2035 = v1714;
                                            if (v1714)
                                              break;
                                            v1967 = 0;
LABEL_2565:
                                            v1717 = (unsigned __int8 *)*((_QWORD *)v1710 + 10);
                                            v1716 = (unsigned __int8 **)(v1710 + 80);
                                            v1715 = v1717;
                                            if (v1717)
                                              llvm::MetadataTracking::untrack((uint64_t)v1716, v1715);
                                            v1718 = v1967;
                                            *v1716 = v1967;
                                            if (v1718)
                                            {
                                              llvm::MetadataTracking::retrack((uint64_t)&v1967, v1718, (uint64_t)v1716);
                                              v1967 = 0;
                                            }
                                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1708 + 40) + 40, (uint64_t ***)v1708);
                                            v1719 = *(_QWORD *)(v1708 + 24);
                                            v1720 = *(_QWORD **)(v1708 + 32);
                                            *v1720 = v1719;
                                            *(_QWORD *)(v1719 + 8) = v1720;
                                            *(_QWORD *)(v1708 + 24) = 0;
                                            *(_QWORD *)(v1708 + 32) = 0;
                                            llvm::Value::deleteValue((llvm::Value *)v1708);
                                            if (v1652 == ++v1706)
                                            {
                                              v1640 = v1940;
                                              v1452 = a2;
                                              v1577 = (_QWORD *)v1892;
                                              v1142 = *(uint64_t **)v1955;
                                              v1569 = v1926;
                                              goto LABEL_2582;
                                            }
                                          }
                                          llvm::MetadataTracking::track((uint64_t)&v2035, (unsigned __int8 *)v1714, 2);
LABEL_2572:
                                          v1967 = (unsigned __int8 *)v2035;
                                          if (v2035)
                                            llvm::MetadataTracking::track((uint64_t)&v1967, (unsigned __int8 *)v2035, 2);
                                          goto LABEL_2565;
                                        }
                                      }
                                      else
                                      {
                                        v2035 = 0;
                                      }
LABEL_2582:
                                      if (v1569)
                                      {
                                        v1966 = (unsigned __int8 *)v2035;
                                        if (v2035)
                                          llvm::MetadataTracking::track((uint64_t)&v1966, (unsigned __int8 *)v2035, 2);
                                        v1729 = v1569 + 6;
                                        if (&v1966 == v1569 + 6)
                                        {
                                          if (v1966)
                                            llvm::MetadataTracking::untrack((uint64_t)&v1966, v1966);
                                        }
                                        else
                                        {
                                          if (*v1729)
                                            llvm::MetadataTracking::untrack((uint64_t)(v1569 + 6), *v1729);
                                          v1730 = v1966;
                                          *v1729 = v1966;
                                          if (v1730)
                                          {
                                            llvm::MetadataTracking::retrack((uint64_t)&v1966, v1730, (uint64_t)(v1569 + 6));
                                            v1966 = 0;
                                          }
                                        }
                                      }
                                      if (v2035)
                                        llvm::MetadataTracking::untrack((uint64_t)&v2035, (unsigned __int8 *)v2035);
                                      v1667 = __nd;
                                    }
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(a1[5] + 5), a1);
                                    v1731 = a1[3];
                                    v1732 = a1[4];
                                    *v1732 = (uint64_t *)v1731;
                                    v1731[1] = (uint64_t *)v1732;
                                    a1[3] = 0;
                                    a1[4] = 0;
                                    llvm::Value::deleteValue((llvm::Value *)a1);
                                    if (v1961)
                                    {
                                      v1733 = *(_QWORD *)(v1632 + 8);
                                      if (v1733)
                                      {
                                        while (1)
                                        {
                                          v1734 = *(_QWORD *)(v1733 + 24);
                                          v1735 = *(unsigned __int8 *)(v1734 + 16);
                                          v1736 = v1734 && v1735 >= 0x1C;
                                          if (v1736 && v1735 - 29 < 0xB)
                                            break;
                                          v1733 = *(_QWORD *)(v1733 + 8);
                                          if (!v1733)
                                            goto LABEL_2604;
                                        }
                                      }
                                      else
                                      {
LABEL_2604:
                                        llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v1632);
                                      }
                                    }
                                    v1738 = *(v1953 - 4);
                                    v1739 = v1738 + 24;
                                    if (!v1738)
                                      v1739 = 0;
                                    v1740 = (llvm::BasicBlock *)(v1739 - 24);
                                    if (v1738)
                                      v1741 = (llvm::BasicBlock *)(v1739 - 24);
                                    else
                                      v1741 = 0;
                                    if (v1953)
                                      v1742 = v1953 + 3;
                                    else
                                      v1742 = 0;
                                    v1743 = (uint64_t ***)(v1742 - 3);
                                    if (v1953)
                                      v1744 = v1743;
                                    else
                                      v1744 = 0;
                                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)*(v1953 - 4), (llvm::Value *)v1577, (llvm::Value *)1);
                                    sub_1C5EBBDF4(v1640, v1953 + 3, (_QWORD *)(v1738 + 40));
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v1640, v1744);
                                    v1745 = v1744[3];
                                    v1746 = v1744[4];
                                    *v1746 = (uint64_t *)v1745;
                                    v1745[1] = (uint64_t *)v1746;
                                    v1744[3] = 0;
                                    v1744[4] = 0;
                                    llvm::Value::deleteValue((llvm::Value *)v1744);
                                    v1750.n128_u64[0] = (unint64_t)llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList((uint64_t)v1142, v1741);
                                    v1751 = *((_QWORD *)v1741 + 3);
                                    v1752 = (_QWORD *)*((_QWORD *)v1741 + 4);
                                    *v1752 = v1751;
                                    *(_QWORD *)(v1751 + 8) = v1752;
                                    *((_QWORD *)v1741 + 3) = 0;
                                    *((_QWORD *)v1741 + 4) = 0;
                                    if (v1738)
                                    {
                                      llvm::BasicBlock::~BasicBlock(v1740, *(llvm::LLVMContext **)&v1747);
                                      MEMORY[0x1CAA32FC0]();
                                    }
                                    if (!v1667)
                                      goto LABEL_2639;
                                    v1753 = *(uint64_t (**)(_QWORD, _QWORD, __n128))(v1452 + 8);
                                    if (v1753)
                                      v1754 = (llvm::PHINode *)v1753(*(_QWORD *)(v1452 + 16), v1944, v1750);
                                    else
                                      v1754 = 0;
                                    v1984 = (void *)(*((_QWORD *)v1944 + 5) + 272);
                                    v1985 = 0;
                                    v1986 = 0;
                                    v1987 = v1754;
                                    v1988 = 0;
                                    LOWORD(v1989) = 257;
                                    v1755 = *(_DWORD *)(v1667 + 20);
                                    if ((v1755 & 0x40000000) != 0)
                                    {
                                      v1757 = *(uint64_t **)(v1667 - 8);
                                      v1756 = v1755 & 0x7FFFFFF;
                                    }
                                    else
                                    {
                                      v1756 = v1755 & 0x7FFFFFF;
                                      v1757 = (uint64_t *)(v1667 - 32 * v1756);
                                    }
                                    v2035 = &v2036.u64[1];
                                    v2036.i64[0] = 0x800000000;
                                    if (v1756 >= 9)
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2035, (uint64_t)&v2036.i64[1], v1756, 8);
                                      v1758 = v2036.i32[0];
                                      v1760 = (char *)v2035;
                                      v1759 = v2036.u32[0];
                                      goto LABEL_2627;
                                    }
                                    v1758 = 0;
                                    if (v1756)
                                    {
                                      v1759 = 0;
                                      v1760 = &v2036.i8[8];
LABEL_2627:
                                      v1761 = 32 * v1756;
                                      v1762 = &v1760[8 * v1759];
                                      do
                                      {
                                        v1763 = *v1757;
                                        v1757 += 4;
                                        *(_QWORD *)v1762 = v1763;
                                        v1762 += 8;
                                        v1761 -= 32;
                                      }
                                      while (v1761);
                                      v1764 = (char *)v2035;
                                    }
                                    else
                                    {
                                      v1764 = &v2036.i8[8];
                                    }
                                    v2036.i32[0] = v1758 + v1756;
                                    v1765 = llvm::SimplifyInstructionWithOperands((llvm *)v1667, (uint64_t)v1764, (v1758 + v1756), (uint64_t)&v1984, *(llvm::Type **)&v1748, *(llvm::DSOLocalEquivalent ***)&v1749);
                                    if (v2035 == &v2036.u64[1])
                                    {
                                      if (v1765)
                                        goto LABEL_2633;
LABEL_2639:
                                      if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
                                        free(__dst.__r_.__value_.__l.__data_);
                                      if (__src != &v1993)
                                        free(__src);
                                      MEMORY[0x1CAA32FB4](v1976[3], 8);
                                      v2035 = v1976;
                                      sub_1C4D99900((void ***)&v2035);
                                      if (v2001 != v2003)
                                        free(v2001);
                                      return 0;
                                    }
                                    free(v2035);
                                    if (!v1765)
                                      goto LABEL_2639;
LABEL_2633:
                                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1667, v1765, (llvm::Value *)1);
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1667 + 40) + 40, (uint64_t ***)v1667);
                                    v1766 = *(_QWORD *)(v1667 + 24);
                                    v1767 = *(_QWORD **)(v1667 + 32);
                                    *v1767 = v1766;
                                    *(_QWORD *)(v1766 + 8) = v1767;
                                    *(_QWORD *)(v1667 + 24) = 0;
                                    *(_QWORD *)(v1667 + 32) = 0;
                                    v1768 = (llvm::Value *)v1667;
LABEL_2638:
                                    llvm::Value::deleteValue(v1768);
                                    goto LABEL_2639;
                                  }
                                  if ((*((_BYTE *)v1898 + 23) & 0x10) != 0)
                                  {
                                    v1586 = ***(_QWORD ***)v1898;
                                    v1587 = *(_QWORD *)(v1586 + 152);
                                    v1588 = *(unsigned int *)(v1586 + 168);
                                    v1577 = (_QWORD *)v1892;
                                    if (!(_DWORD)v1588)
                                      goto LABEL_2471;
                                    LODWORD(v1589) = (v1588 - 1) & (v1886 ^ (v1898 >> 9));
                                    v1590 = (llvm::Function **)(v1587 + 16 * v1589);
                                    v1591 = *v1590;
                                    if (*v1590 != v1898)
                                    {
                                      v1592 = 1;
                                      while (v1591 != (llvm::Function *)-4096)
                                      {
                                        v1593 = v1589 + v1592++;
                                        v1589 = v1593 & (v1588 - 1);
                                        v1591 = *(llvm::Function **)(v1587 + 16 * v1589);
                                        if (v1591 == v1898)
                                        {
                                          v1590 = (llvm::Function **)(v1587 + 16 * v1589);
                                          goto LABEL_2472;
                                        }
                                      }
LABEL_2471:
                                      v1590 = (llvm::Function **)(v1587 + 16 * v1588);
                                    }
LABEL_2472:
                                    v1633 = v1590[1];
                                    v1636 = *(_QWORD *)v1633;
                                    v1634 = (char *)v1633 + 16;
                                    v1635 = v1636;
                                  }
                                  else
                                  {
                                    v1635 = 0;
                                    v1634 = &byte_1C871356D;
                                    v1577 = (_QWORD *)v1892;
                                  }
                                  v2037.i16[4] = 773;
                                  v2035 = v1634;
                                  v2036.i64[0] = v1635;
                                  v2036.i64[1] = (uint64_t)".exit";
                                  v1632 = llvm::BasicBlock::splitBasicBlock(v1577, (uint64_t *)a1 + 3, (uint64_t)&v2035, 0);
                                  v1569 = 0;
                                  goto LABEL_2474;
                                }
                                v1594 = (uint64_t *)(a1 + 3);
                                v1595 = (uint64_t *)v1896[6];
                                if (v1595 == v1453 || v1594 == v1453)
                                  goto LABEL_2448;
                                *(_WORD *)(v1892 + 18) &= ~0x8000u;
                                if ((uint64_t *)v1892 == v1896)
                                  goto LABEL_2447;
                                v1597 = *(_QWORD *)(v1892 + 56);
                                if (v1597)
                                  v1598 = *(llvm::ValueSymbolTable **)(v1597 + 104);
                                else
                                  v1598 = 0;
                                v1599 = v1896[7];
                                if (v1599)
                                  v1600 = *(llvm::ValueSymbolTable **)(v1599 + 104);
                                else
                                  v1600 = 0;
                                if (v1598 == v1600)
                                {
                                  v1601 = v1595;
                                  do
                                  {
                                    v1602 = v1601 - 3;
                                    if (!v1601)
                                      v1602 = 0;
                                    v1602[5] = v1892;
                                    v1601 = (uint64_t *)v1601[1];
                                  }
                                  while (v1601 != v1453);
LABEL_2447:
                                  v1603 = *v1453;
                                  v1604 = *v1595;
                                  *(_QWORD *)(v1604 + 8) = v1453;
                                  *v1453 = v1604;
                                  v1605 = *v1594;
                                  *(_QWORD *)(v1603 + 8) = v1594;
                                  *v1595 = v1605;
                                  *(_QWORD *)(v1605 + 8) = v1595;
                                  *v1594 = v1603;
LABEL_2448:
                                  v1606 = *v1142;
                                  v1607 = (llvm::BasicBlock *)(*v1142 - 24);
                                  if (*v1142)
                                    v1608 = (llvm::BasicBlock *)(*v1142 - 24);
                                  else
                                    v1608 = 0;
                                  llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList((uint64_t)v1142, v1608);
                                  v1610 = *((_QWORD *)v1608 + 3);
                                  v1611 = (_QWORD *)*((_QWORD *)v1608 + 4);
                                  *v1611 = v1610;
                                  *(_QWORD *)(v1610 + 8) = v1611;
                                  *((_QWORD *)v1608 + 3) = 0;
                                  *((_QWORD *)v1608 + 4) = 0;
                                  if (v1606)
                                  {
                                    llvm::BasicBlock::~BasicBlock(v1607, v1609);
                                    MEMORY[0x1CAA32FC0]();
                                  }
                                  if (*((_BYTE *)a1 + 16) == 33)
                                  {
                                    v1612 = (uint64_t)*(a1 - 12);
                                    v1613 = (char *)operator new(0x60uLL);
                                    *((_DWORD *)v1613 + 13) = *((_DWORD *)v1613 + 13) & 0x38000000 | 1;
                                    *((_QWORD *)v1613 + 1) = 0;
                                    *((_QWORD *)v1613 + 2) = 0;
                                    *(_QWORD *)v1613 = 0;
                                    *((_QWORD *)v1613 + 4) = ***(_QWORD ***)v1612 + 1576;
                                    *((_QWORD *)v1613 + 3) = v1613 + 32;
                                    *((_QWORD *)v1613 + 5) = 0;
                                    v1613[48] = 30;
                                    v1613[49] = 0;
                                    *((_WORD *)v1613 + 25) = 0;
                                    *((_DWORD *)v1613 + 13) = 1;
                                    *(_OWORD *)(v1613 + 56) = 0u;
                                    v1614 = v1613 + 56;
                                    *(_OWORD *)(v1613 + 72) = 0u;
                                    *((_DWORD *)v1613 + 22) = 0;
                                    v1615 = a1[5];
                                    *((_QWORD *)v1613 + 9) = v1615;
                                    *((_WORD *)v1615 + 9) &= ~0x8000u;
                                    if ((v1613[55] & 0x10) != 0
                                      && (v1806 = v1615[7]) != 0
                                      && (v1807 = (llvm::ValueSymbolTable *)v1806[13]) != 0)
                                    {
                                      llvm::ValueSymbolTable::reinsertValue(v1807, (llvm::Value *)(v1613 + 32));
                                      v1808 = *(_QWORD *)v1613;
                                      v1809 = *v1594;
                                      *((_QWORD *)v1613 + 7) = *v1594;
                                      *((_QWORD *)v1613 + 8) = v1594;
                                      *(_QWORD *)(v1809 + 8) = v1614;
                                      *v1594 = (uint64_t)v1614;
                                      if (v1808)
                                      {
                                        **((_QWORD **)v1613 + 2) = *((_QWORD *)v1613 + 1);
                                        v1810 = *((_QWORD *)v1613 + 1);
                                        if (v1810)
                                          *(_QWORD *)(v1810 + 16) = *((_QWORD *)v1613 + 2);
                                      }
                                    }
                                    else
                                    {
                                      v1616 = *v1594;
                                      *((_QWORD *)v1613 + 7) = *v1594;
                                      *((_QWORD *)v1613 + 8) = v1594;
                                      *(_QWORD *)(v1616 + 8) = v1614;
                                      *v1594 = (uint64_t)v1614;
                                    }
                                    *(_QWORD *)v1613 = v1612;
                                    v1619 = *(_QWORD *)(v1612 + 8);
                                    v1618 = (_QWORD *)(v1612 + 8);
                                    v1617 = v1619;
                                    *((_QWORD *)v1613 + 1) = v1619;
                                    if (v1619)
                                      *(_QWORD *)(v1617 + 16) = v1613 + 8;
                                    *((_QWORD *)v1613 + 2) = v1618;
                                    *v1618 = v1613;
                                    v1620 = *(unsigned __int8 **)(*(_QWORD *)v2001 + 48);
                                    v1968 = v1620;
                                    if (v1620)
                                      llvm::MetadataTracking::track((uint64_t)&v1968, v1620, 2);
                                    v1623 = (unsigned __int8 *)*((_QWORD *)v1613 + 10);
                                    v1622 = (unsigned __int8 **)(v1613 + 80);
                                    v1621 = v1623;
                                    if (v1623)
                                      llvm::MetadataTracking::untrack((uint64_t)v1622, v1621);
                                    v1624 = v1968;
                                    *v1622 = v1968;
                                    if (v1624)
                                    {
                                      llvm::MetadataTracking::retrack((uint64_t)&v1968, v1624, (uint64_t)v1622);
                                      v1968 = 0;
                                    }
                                  }
                                  if (a1[1])
                                  {
                                    v1625 = *(_DWORD *)(*(_QWORD *)v2001 + 20) & 0x7FFFFFF;
                                    if ((_DWORD)v1625)
                                    {
                                      v1626 = *(llvm::UndefValue **)(*(_QWORD *)v2001 - 32 * v1625);
                                      if (v1626 == (llvm::UndefValue *)a1)
                                        v1626 = llvm::UndefValue::get((llvm::UndefValue *)*a1, v1626);
                                    }
                                    else
                                    {
                                      v1626 = 0;
                                    }
                                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v1626, (llvm::Value *)1);
                                  }
                                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(a1[5] + 5), a1);
                                  v1769 = a1[3];
                                  v1770 = a1[4];
                                  *v1770 = (uint64_t *)v1769;
                                  v1769[1] = (uint64_t *)v1770;
                                  *v1594 = 0;
                                  a1[4] = 0;
                                  llvm::Value::deleteValue((llvm::Value *)a1);
                                  v1771 = *(uint64_t ****)v2001;
                                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(*(_QWORD *)v2001 + 40) + 40, *(uint64_t ****)v2001);
                                  v1772 = v1771[3];
                                  v1773 = v1771[4];
                                  *v1773 = (uint64_t *)v1772;
                                  v1772[1] = (uint64_t *)v1773;
                                  v1771[3] = 0;
                                  v1771[4] = 0;
                                  v1768 = (llvm::Value *)v1771;
                                  goto LABEL_2638;
                                }
                                v1945 = v1595;
                                while (2)
                                {
                                  v1855 = (llvm::AttributeList *)(v1945 - 3);
                                  if (!v1945)
                                    v1855 = 0;
                                  v1963 = v1855;
                                  v1941 = *((_DWORD *)v1855 + 5) & 0x10000000;
                                  if (v1600 && v1941)
                                  {
                                    v1856 = ***(_QWORD ***)v1855;
                                    v1857 = *(_QWORD *)(v1856 + 152);
                                    v1858 = *(unsigned int *)(v1856 + 168);
                                    if (!(_DWORD)v1858)
                                      goto LABEL_2816;
                                    LODWORD(v1859) = (v1858 - 1) & ((v1963 >> 4) ^ (v1963 >> 9));
                                    v1860 = (llvm::AttributeList **)(v1857 + 16 * v1859);
                                    v1861 = *v1860;
                                    if (*v1860 != v1963)
                                    {
                                      v1862 = 1;
                                      while (v1861 != (llvm::AttributeList *)-4096)
                                      {
                                        v1863 = v1859 + v1862++;
                                        v1859 = v1863 & (v1858 - 1);
                                        v1861 = *(llvm::AttributeList **)(v1857 + 16 * v1859);
                                        if (v1861 == v1963)
                                        {
                                          v1860 = (llvm::AttributeList **)(v1857 + 16 * v1859);
                                          goto LABEL_2817;
                                        }
                                      }
LABEL_2816:
                                      v1860 = (llvm::AttributeList **)(v1857 + 16 * v1858);
                                    }
LABEL_2817:
                                    v1864 = *((unsigned int *)v1600 + 2);
                                    if ((_DWORD)v1864)
                                    {
                                      v1865 = (size_t *)v1860[1];
                                      __ne = *((unsigned int *)v1600 + 5);
                                      v1943 = (unsigned __int8 *)v1865 + __ne;
                                      v1866 = *v1865;
                                      if (*v1865)
                                      {
                                        v1867 = 0;
                                        v1868 = *v1865;
                                        v1869 = v1943;
                                        do
                                        {
                                          v1870 = *v1869++;
                                          v1867 = 33 * v1867 + v1870;
                                          --v1868;
                                        }
                                        while (v1868);
                                      }
                                      else
                                      {
                                        v1867 = 0;
                                      }
                                      v1871 = v1864 - 1;
                                      v1872 = *(_QWORD *)v1600;
                                      v1954 = *(_QWORD *)v1600 + 8 * v1864 + 8;
                                      v1873 = 1;
                                      v1874 = v1867;
                                      while (1)
                                      {
                                        v1875 = v1874 & v1871;
                                        v1876 = *(_QWORD **)(v1872 + 8 * v1875);
                                        if (v1876 != (_QWORD *)-8)
                                        {
                                          if (!v1876)
                                            goto LABEL_2830;
                                          if (*(_DWORD *)(v1954 + 4 * v1875) == v1867
                                            && v1866 == *v1876
                                            && (!v1866 || !memcmp(v1943, (char *)v1876 + __ne, v1866)))
                                          {
                                            break;
                                          }
                                        }
                                        v1874 = v1873 + v1875;
                                        ++v1873;
                                      }
                                      *(_QWORD *)(v1872 + 8 * (int)v1875) = -8;
                                      *(int32x2_t *)((char *)v1600 + 12) = vadd_s32(*(int32x2_t *)((char *)v1600 + 12), (int32x2_t)0x1FFFFFFFFLL);
                                    }
                                  }
LABEL_2830:
                                  *((_QWORD *)v1963 + 5) = v1892;
                                  if (v1598 && v1941)
                                    llvm::ValueSymbolTable::reinsertValue(v1598, v1963);
                                  v1453 = v1897;
                                  v1945 = (uint64_t *)v1945[1];
                                  v1142 = *(uint64_t **)v1955;
                                  if (v1945 == v1897)
                                    goto LABEL_2447;
                                  continue;
                                }
                              }
                            }
                            v1241 = llvm::ConstantTokenNone::get(**v1912, v958);
LABEL_1981:
                            v1242 = *((_DWORD *)v1218 + 5);
                            if ((v1242 & 0x40000000) != 0)
                            {
                              v1244 = (llvm::Type ***)*(v1218 - 1);
                              v1243 = v1242 & 0x7FFFFFF;
                            }
                            else
                            {
                              v1243 = v1242 & 0x7FFFFFF;
                              v1244 = (llvm::Type ***)&v1218[-4 * (v1242 & 0x7FFFFFF)];
                            }
                            v1245 = *v1244;
                            if ((*((_WORD *)v1218 + 9) & 1) != 0)
                              v1246 = -2;
                            else
                              v1246 = -1;
                            if ((v1242 & 0x10000000) == 0)
                            {
                              v1256 = 0;
                              v1257 = &byte_1C871356D;
                              goto LABEL_1996;
                            }
                            v1247 = ***v1218;
                            v1248 = *(_QWORD *)(v1247 + 152);
                            v1249 = *(unsigned int *)(v1247 + 168);
                            if ((_DWORD)v1249)
                            {
                              LODWORD(v1250) = (v1249 - 1) & ((v1218 >> 4) ^ (v1218 >> 9));
                              v1251 = (uint64_t ****)(v1248 + 16 * v1250);
                              v1252 = *v1251;
                              if (*v1251 == v1218)
                              {
LABEL_1995:
                                v1255 = v1251[1];
                                v1258 = (uint64_t)*v1255;
                                v1257 = (char *)(v1255 + 2);
                                v1256 = v1258;
LABEL_1996:
                                v1259 = v1246 + v1243;
                                LOWORD(v1988) = 261;
                                v1984 = v1257;
                                v1985 = v1256;
                                v1260 = operator new(0x48uLL);
                                v1261 = (llvm::CatchSwitchInst *)(v1260 + 2);
                                v1260[7] = v1260[7] & 0x38000000 | 0x40000000;
                                *(_QWORD *)v1260 = 0;
                                llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v1260 + 2), v1245, v1936, v1259, (const llvm::Twine *)&v1984, (llvm::Instruction *)v1218);
                                v1262 = *((_DWORD *)v1218 + 5);
                                if ((v1262 & 0x40000000) != 0)
                                {
                                  v1264 = (uint64_t ***)*(v1218 - 1);
                                  v1263 = v1262 & 0x7FFFFFF;
                                }
                                else
                                {
                                  v1263 = v1262 & 0x7FFFFFF;
                                  v1264 = &v1218[-4 * v1263];
                                }
                                v1265 = 1;
                                if ((*((_WORD *)v1218 + 9) & 1) != 0)
                                  v1265 = 2;
                                if (v1265 != v1263)
                                {
                                  v1266 = (llvm::BasicBlock **)&v1264[4 * v1265];
                                  v1267 = 32 * v1263 - 32 * v1265;
                                  do
                                  {
                                    v1268 = *v1266;
                                    v1266 += 4;
                                    llvm::CatchSwitchInst::addHandler(v1261, v1268);
                                    v1267 -= 32;
                                  }
                                  while (v1267);
                                }
                                v1984 = v1261;
                                sub_1C5667838((uint64_t *)v2027, &v1984)[1] = v1241;
                                llvm::Value::takeName(v1261, (llvm::Value *)v1218);
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1218, v1261, (llvm::Value *)1);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v1218[5] + 5), v1218);
                                v1269 = v1218[3];
                                v1270 = v1218[4];
                                *v1270 = (uint64_t *)v1269;
                                v1269[1] = (uint64_t *)v1270;
                                v1218[3] = 0;
                                v1218[4] = 0;
                                llvm::Value::deleteValue((llvm::Value *)v1218);
                                if (v2036.i32[0])
                                {
                                  v1271 = (uint64_t *)v2035;
                                  v1272 = 8 * v2036.u32[0];
                                  v1273 = v1924;
                                  do
                                  {
                                    v1274 = *v1273;
                                    v1276 = *v1271++;
                                    v1275 = v1276;
                                    v1277 = *v1273 - 24;
                                    if (v1274)
                                      v1278 = (llvm::PHINode *)v1277;
                                    else
                                      v1278 = 0;
                                    sub_1C477667C(v1278, v1275, v1211);
                                    v1273 = (uint64_t *)(v1274 + 8);
                                    v1272 -= 8;
                                  }
                                  while (v1272);
                                }
                                goto LABEL_1979;
                              }
                              v1253 = 1;
                              while (v1252 != (uint64_t ***)-4096)
                              {
                                v1254 = v1250 + v1253++;
                                v1250 = v1254 & (v1249 - 1);
                                v1252 = *(uint64_t ****)(v1248 + 16 * v1250);
                                if (v1252 == v1218)
                                {
                                  v1251 = (uint64_t ****)(v1248 + 16 * v1250);
                                  goto LABEL_1995;
                                }
                              }
                            }
                            v1251 = (uint64_t ****)(v1248 + 16 * v1249);
                            goto LABEL_1995;
                          }
LABEL_1278:
                          v826 = 0;
                          goto LABEL_1279;
                        }
LABEL_1262:
                        v765 = 0;
                        goto LABEL_1263;
                      }
LABEL_1241:
                      v782 = 0;
                      goto LABEL_1242;
                    }
                    if ((v781 & 0x20000000) != 0)
                      goto LABEL_1226;
                    v765 = 0;
LABEL_1225:
                    v782 = 0;
                    goto LABEL_1278;
                  }
                  v542 = *v332;
                  if (!v542 || *((_BYTE *)v542 + 16) || v542[3] != a1[9])
                    v542 = 0;
                  v2024 = v2026;
                  v2025 = 0x400000000;
                  v543 = sub_1C485F330((uint64_t)v542);
                  if (v543 != v544)
                  {
                    v545 = v543;
                    v546 = v544;
                    v547 = v543;
                    do
                    {
                      if (llvm::CallBase::paramHasAttr((uint64_t)a1, *(_DWORD *)(v547 + 32), 19)
                        && *(_QWORD *)(v547 + 8))
                      {
                        v548 = v2025;
                        if (v2025 >= (unint64_t)HIDWORD(v2025))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2024, (uint64_t)v2026, v2025 + 1, 8);
                          v548 = v2025;
                        }
                        *((_QWORD *)v2024 + v548) = v545;
                        LODWORD(v2025) = v2025 + 1;
                      }
                      v547 += 40;
                      v545 += 40;
                    }
                    while (v547 != v546);
                  }
                  if (!(_DWORD)v2025)
                  {
LABEL_1115:
                    if (v2024 != v2026)
                      free(v2024);
                    goto LABEL_1117;
                  }
                  v2027[0] = (uint64_t *)&v2027[2];
                  v2027[1] = (uint64_t *)0x100000000;
                  v2034 = 0;
                  v2029 = 0;
                  v2028 = 0;
                  LODWORD(v2030) = 0;
                  v2033 = 0;
                  v2031 = 0;
                  v2032 = v542;
                  sub_1C53BA620((uint64_t)v2027, 0);
                  v1982[0] = 0;
                  v1982[1] = 0;
                  v1983 = 0;
                  v549 = **v542;
                  v1981 = v549;
                  v550 = v542 >> 4;
                  if ((*((_BYTE *)v542 + 23) & 0x10) == 0)
                  {
                    v561 = 0;
                    v560 = (unsigned __int8 *)&byte_1C871356D;
                    goto LABEL_844;
                  }
                  v551 = *v549;
                  v552 = *(_QWORD *)(*v549 + 152);
                  v553 = *(unsigned int *)(v551 + 168);
                  if ((_DWORD)v553)
                  {
                    LODWORD(v554) = (v553 - 1) & (v550 ^ (v542 >> 9));
                    v555 = (uint64_t ****)(v552 + 16 * v554);
                    v556 = *v555;
                    if (*v555 == v542)
                    {
LABEL_843:
                      v559 = v555[1];
                      v562 = (size_t)*v559;
                      v560 = (unsigned __int8 *)(v559 + 2);
                      v561 = v562;
LABEL_844:
                      v563 = llvm::MDBuilder::createAnonymousAARoot(&v1981, v560, v561, 0);
                      v565 = (llvm::AttributeList *)v2025;
                      if ((_DWORD)v2025)
                      {
                        v566 = (uint64_t)v563;
                        v567 = 0;
                        v568 = v2017;
                        v569 = v550 ^ (v542 >> 9);
                        while (1)
                        {
                          v570 = (_BYTE *)*((_QWORD *)v2024 + (_QWORD)v567);
                          if ((*((_BYTE *)v542 + 23) & 0x10) == 0)
                          {
                            v583 = v542;
                            v580 = 0;
                            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
                            v584 = &__dst;
                            goto LABEL_862;
                          }
                          v571 = ***v542;
                          v572 = *(_QWORD *)(v571 + 152);
                          v573 = *(unsigned int *)(v571 + 168);
                          if (!(_DWORD)v573)
                            goto LABEL_853;
                          LODWORD(v574) = (v573 - 1) & v569;
                          v575 = (uint64_t ****)(v572 + 16 * v574);
                          v576 = *v575;
                          if (*v575 != v542)
                            break;
LABEL_854:
                          v579 = (unint64_t *)v575[1];
                          v582 = *v579;
                          v581 = v579 + 2;
                          v580 = v582;
                          if (v582 >= 0x7FFFFFFFFFFFFFF8)
                            goto LABEL_2726;
                          if (v580 >= 0x17)
                          {
                            v585 = (v580 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v580 | 7) != 0x17)
                              v585 = v580 | 7;
                            v1959 = v567;
                            v586 = v569;
                            v587 = v568;
                            v588 = v565;
                            v583 = v542;
                            v589 = v566;
                            v590 = v585 + 1;
                            v584 = (std::string *)operator new(v585 + 1);
                            v591 = v590 | 0x8000000000000000;
                            v566 = v589;
                            v565 = v588;
                            v568 = v587;
                            v569 = v586;
                            v567 = v1959;
                            __dst.__r_.__value_.__r.__words[2] = v591;
                            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v584;
                            __dst.__r_.__value_.__l.__size_ = v580;
LABEL_861:
                            memmove(v584, v581, v580);
                            goto LABEL_862;
                          }
                          v583 = v542;
                          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v580;
                          v584 = &__dst;
                          if (v580)
                            goto LABEL_861;
LABEL_862:
                          v584->__r_.__value_.__s.__data_[v580] = 0;
                          if ((v570[23] & 0x10) == 0)
                          {
                            std::string::append(&__dst, ": argument ");
                            v592 = v568;
                            v593 = (unint64_t)v567;
                            v542 = v583;
                            if (v567)
                            {
                              do
                              {
                                *--v592 = (v593 % 0xA) | 0x30;
                                v247 = v593 > 9;
                                v593 /= 0xAuLL;
                              }
                              while (v247);
                            }
                            else
                            {
                              v2016 = 48;
                              v592 = &v2016;
                            }
                            sub_1C4E61270(&v2035, v592, v568, v568 - v592);
                            if (v2036.i8[15] >= 0)
                              v602 = (const std::string::value_type *)&v2035;
                            else
                              v602 = (const std::string::value_type *)v2035;
                            if (v2036.i8[15] >= 0)
                              v603 = v2036.i8[15] & 0x7F;
                            else
                              v603 = v2036.i64[0];
                            std::string::append(&__dst, v602, v603);
                            if (v2036.i8[15] < 0)
                              operator delete(v2035);
                            goto LABEL_885;
                          }
                          std::string::append(&__dst, ": %");
                          v542 = v583;
                          if ((v570[23] & 0x10) == 0)
                          {
                            v606 = 0;
                            v605 = &byte_1C871356D;
                            goto LABEL_884;
                          }
                          v594 = ***(_QWORD ***)v570;
                          v595 = *(_QWORD *)(v594 + 152);
                          v596 = *(unsigned int *)(v594 + 168);
                          if (!(_DWORD)v596)
                            goto LABEL_882;
                          LODWORD(v597) = (v596 - 1) & ((v570 >> 4) ^ (v570 >> 9));
                          v598 = (void **)(v595 + 16 * v597);
                          v599 = *v598;
                          if (*v598 != v570)
                          {
                            v600 = 1;
                            while (v599 != (_BYTE *)-4096)
                            {
                              v601 = v597 + v600++;
                              v597 = v601 & (v596 - 1);
                              v599 = *(_BYTE **)(v595 + 16 * v597);
                              if (v599 == v570)
                              {
                                v598 = (void **)(v595 + 16 * v597);
                                goto LABEL_883;
                              }
                            }
LABEL_882:
                            v598 = (void **)(v595 + 16 * v596);
                          }
LABEL_883:
                          v604 = v598[1];
                          v607 = *v604;
                          v605 = (const std::string::value_type *)(v604 + 2);
                          v606 = v607;
LABEL_884:
                          std::string::append(&__dst, v605, v606);
LABEL_885:
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v608 = &__dst;
                          else
                            v608 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                          else
                            size = __dst.__r_.__value_.__l.__size_;
                          v610 = llvm::MDBuilder::createAnonymousAARoot(&v1981, (unsigned __int8 *)v608, size, v566);
                          v2035 = v570;
                          v2036.i64[0] = (uint64_t)v610;
                          v2013 = 0;
                          if ((sub_1C500AA94(v1982[0], v1983, (uint64_t)v570, &v2013) & 1) == 0)
                          {
                            v611 = sub_1C5F0A94C((uint64_t)v1982, (uint64_t *)&v2035, v2013);
                            *v611 = v570;
                            v611[1] = v610;
                          }
                          if (byte_1ED826E38)
                          {
                            v612 = **v542;
                            v2035 = v610;
                            v613 = (unsigned __int8 *)llvm::MDTuple::getImpl(v612, &v2035, 1, 0, 1);
                            sub_1C4773D54((uint64_t)&v2035, (uint64_t)a1, 0, 0, 0);
                            v614 = (llvm::Value *)llvm::MetadataAsValue::get(v2041, v613);
                            llvm::IRBuilderBase::CreateNoAliasScopeDeclaration((llvm::IRBuilderBase *)&v2035, v614);
                            if (v2035 != &v2036.u64[1])
                              free(v2035);
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          v567 = (llvm::AttributeList *)((char *)v567 + 1);
                          if (v567 == v565)
                            goto LABEL_902;
                        }
                        v577 = 1;
                        while (v576 != (uint64_t ***)-4096)
                        {
                          v578 = v574 + v577++;
                          v574 = v578 & (v573 - 1);
                          v576 = *(uint64_t ****)(v572 + 16 * v574);
                          if (v576 == v542)
                          {
                            v575 = (uint64_t ****)(v572 + 16 * v574);
                            goto LABEL_854;
                          }
                        }
LABEL_853:
                        v575 = (uint64_t ****)(v572 + 16 * v573);
                        goto LABEL_854;
                      }
LABEL_902:
                      v615 = (char *)v1996 + 64 * (unint64_t)v1998;
                      if ((_DWORD)v1997)
                      {
                        if (v1998)
                        {
                          v616 = (unint64_t)v1998 << 6;
                          v617 = (char *)v1996;
                          while ((*((_QWORD *)v617 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v617 += 64;
                            v616 -= 64;
                            if (!v616)
                              goto LABEL_907;
                          }
                        }
                        else
                        {
                          v617 = (char *)v1996;
                        }
                      }
                      else
                      {
LABEL_907:
                        v617 = (char *)v1996 + 64 * (unint64_t)v1998;
                      }
                      v618 = (char *)v1996 + 64 * (unint64_t)v1998;
                      if (v617 != v618)
                      {
                        v1877 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                        v1881 = (char *)v1996 + 64 * (unint64_t)v1998;
                        do
                        {
                          v619 = *((_QWORD *)v617 + 3);
                          v620 = *(unsigned __int8 *)(v619 + 16);
                          if (v619)
                            v621 = v620 >= 0x1C;
                          else
                            v621 = 0;
                          if (!v621)
                            goto LABEL_1064;
                          v622 = (uint64_t ***)*((_QWORD *)v617 + 7);
                          if (!v622 || *((unsigned __int8 *)v622 + 16) < 0x1Cu)
                            goto LABEL_1064;
                          if (LODWORD(v1976[5]))
                          {
                            v623 = (LODWORD(v1976[5]) - 1) & ((v619 >> 4) ^ (v619 >> 9));
                            v624 = *(_QWORD *)(v1976[3] + 16 * v623);
                            if (v619 == v624)
                            {
LABEL_919:
                              v625 = *(uint64_t ****)(v1976[3] + 16 * v623 + 8);
                            }
                            else
                            {
                              v717 = 1;
                              while (v624 != -4096)
                              {
                                v718 = v623 + v717++;
                                v623 = v718 & (LODWORD(v1976[5]) - 1);
                                v624 = *(_QWORD *)(v1976[3] + 16 * v623);
                                v618 = v1881;
                                if (v619 == v624)
                                  goto LABEL_919;
                              }
                              v625 = 0;
                              v618 = v1881;
                            }
                          }
                          else
                          {
                            v625 = 0;
                          }
                          if (v625 != v622)
                            goto LABEL_1064;
                          v2021 = v2023;
                          v2022 = 0x200000000;
                          if (v620 > 59)
                          {
                            switch(v620)
                            {
                              case '<':
                              case '=':
                                goto LABEL_930;
                              case '>':
                              case '?':
                                goto LABEL_1061;
                              case '@':
                                v1915 = 0;
                                v1909 = 0;
                                v626 = *(_QWORD *)(v619 - 96);
                                goto LABEL_943;
                              case 'A':
                                v1915 = 0;
                                v1909 = 0;
                                v626 = *(_QWORD *)(v619 - 64);
                                goto LABEL_943;
                              default:
                                if (v620 == 84)
                                  goto LABEL_931;
                                if (v620 != 88)
                                  goto LABEL_1061;
LABEL_930:
                                v1915 = 0;
                                v1909 = 0;
                                v626 = *(_QWORD *)(v619 - 32);
LABEL_943:
                                v2023[0] = v626;
                                LODWORD(v2022) = 1;
                                v632 = 1;
                                break;
                            }
                            goto LABEL_944;
                          }
                          if (v620 == 33 || v620 == 39)
                          {
LABEL_931:
                            v627 = *(_QWORD *)(v619 + 64);
                            if (!v627 || (*(_BYTE *)(v627 + 17) & 0x10) == 0)
                            {
                              if ((LODWORD(v2035) = 7, sub_1C53E4BBC(v619, (__int32 *)&v2035, 1uLL))
                                && ((v719 = *(_QWORD *)(v619 - 32)) == 0
                                 || *(_BYTE *)(v719 + 16)
                                 || *(_QWORD *)(v719 + 24) != *(_QWORD *)(v619 + 72)
                                 || *(_DWORD *)(v719 + 36) != 7)
                                || (llvm::CallBase::hasFnAttrOnCalledFunction(v619, 44) & 1) == 0)
                              {
                                if (v1895)
                                {
                                  v628 = *(_QWORD **)(v1895 + 8);
                                  v629 = *(_QWORD **)(v1895 + 16);
                                  if (v628 != v629)
                                  {
                                    v630 = 63;
                                    while (1)
                                    {
                                      v630 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v628 + 48))(*v628, v619);
                                      if (v630 == 4)
                                        goto LABEL_1061;
                                      if (++v628 == v629)
                                      {
                                        v631 = (v630 & 0x38) == 8;
                                        if ((v630 & 0x28) != 0)
                                          goto LABEL_1072;
                                        goto LABEL_1061;
                                      }
                                    }
                                  }
                                }
                                v631 = 0;
LABEL_1072:
                                v704 = *(unsigned __int8 *)(v619 + 16);
                                if (v704 == 84)
                                {
                                  v705 = 0;
                                }
                                else if (v704 == 39)
                                {
                                  v705 = (*(_DWORD *)(v619 + 80) + 1);
                                }
                                else
                                {
                                  v705 = 2;
                                }
                                v706 = *(_DWORD *)(v619 + 20);
                                v707 = v706 & 0x7FFFFFF;
                                v708 = (_QWORD *)(v619 - 32 * v707);
                                if (v706 < 0 && (v720 = *(v708 - 1), (v720 & 0xFFFFFFFF0) != 0))
                                  v709 = (*((_DWORD *)v708 - 3) - *(_DWORD *)((char *)v708 - v720));
                                else
                                  v709 = 0;
                                if (v708 != (_QWORD *)(v619 - 32 * v705 - 32 * v709 - 32))
                                {
                                  v710 = 32 * v707 - 32 * v705 - 32 * v709 - 32;
                                  do
                                  {
                                    v711 = *v708;
                                    if (!v631 || *(_BYTE *)(*(_QWORD *)v711 + 8) == 15)
                                    {
                                      v712 = v2022;
                                      if (v2022 >= (unint64_t)HIDWORD(v2022))
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2021, (uint64_t)v2023, v2022 + 1, 8);
                                        v712 = v2022;
                                      }
                                      *((_QWORD *)v2021 + v712) = v711;
                                      LODWORD(v2022) = v2022 + 1;
                                    }
                                    v708 += 4;
                                    v710 -= 32;
                                  }
                                  while (v710);
                                }
                                v1915 = v631;
                                v632 = v2022;
                                v1909 = 1;
LABEL_944:
                                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v2020;
                                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v2020;
                                __dst.__r_.__value_.__r.__words[2] = 4;
                                v2019 = 0;
                                v2013 = v2015;
                                v2014 = 0x400000000;
                                v2010 = v2012;
                                v2011 = 0x400000000;
                                v2035 = (void *)1;
                                v2036 = v1877;
                                v2037 = v1877;
                                v2038 = &v2040;
                                v2039 = 0x400000000;
                                if (v632)
                                {
                                  v633 = (uint64_t *)v2021;
                                  v634 = (uint64_t *)((char *)v2021 + 8 * v632);
                                  do
                                  {
                                    v635 = *v633;
                                    v2004 = &v2006;
                                    v2005 = 0x400000000;
                                    llvm::getUnderlyingObjects(v635, (uint64_t)&v2004, 0, (llvm::Value *)6);
                                    v636 = (uint64_t *)v2004;
                                    if ((_DWORD)v2005)
                                    {
                                      v637 = 8 * v2005;
                                      do
                                      {
                                        v638 = *v636++;
                                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, v638);
                                        v637 -= 8;
                                      }
                                      while (v637);
                                      v636 = (uint64_t *)v2004;
                                    }
                                    if (v636 != (uint64_t *)&v2006)
                                      free(v636);
                                    ++v633;
                                  }
                                  while (v633 != v634);
                                  v639 = (unint64_t *)__dst.__r_.__value_.__l.__size_;
                                  v640 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
                                  LODWORD(v641) = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                  v642 = __dst.__r_.__value_.__r.__words[2];
                                }
                                else
                                {
                                  LODWORD(v641) = 0;
                                  v642 = 4;
                                  v640 = (unint64_t *)v2020;
                                  v639 = (unint64_t *)v2020;
                                }
                                if (v639 == v640)
                                  v641 = v641;
                                else
                                  v641 = v642;
                                v643 = v639;
                                if ((_DWORD)v641)
                                {
                                  v644 = 8 * v641;
                                  v643 = v639;
                                  while (*v643 >= 0xFFFFFFFFFFFFFFFELL)
                                  {
                                    ++v643;
                                    v644 -= 8;
                                    if (!v644)
                                      goto LABEL_979;
                                  }
                                }
                                v645 = &v639[v641];
                                if (v643 == v645)
                                {
LABEL_979:
                                  LOBYTE(v647) = 0;
                                  v1878 = 0;
                                }
                                else
                                {
                                  v646 = 0;
                                  v647 = 0;
                                  v648 = *v643;
LABEL_965:
                                  v649 = *(unsigned __int8 *)(v648 + 16);
                                  v650 = v649 > 0x13 || ((1 << v649) & 0xB8000) == 0;
                                  if (v650 && v649 - 11 >= 2)
                                  {
                                    if (v649 == 21)
                                    {
                                      v646 |= llvm::CallBase::paramHasAttr((uint64_t)a1, *(_DWORD *)(v648 + 32), 19) ^ 1;
                                      v649 = *(unsigned __int8 *)(v648 + 16);
                                    }
                                    else
                                    {
                                      v646 = 1;
                                    }
                                    if (v649 != 21)
                                      v647 |= llvm::isIdentifiedFunctionLocal((llvm *)v648, v564) ^ 1;
                                  }
                                  v651 = v643 + 1;
                                  while (v651 != v645)
                                  {
                                    v652 = *v651++;
                                    v648 = v652;
                                    if (v652 <= 0xFFFFFFFFFFFFFFFDLL)
                                    {
                                      v643 = v651 - 1;
                                      goto LABEL_965;
                                    }
                                  }
                                  v1878 = v646;
                                }
                                if ((_DWORD)v2025)
                                {
                                  v653 = (llvm **)v2024;
                                  v654 = 8 * v2025;
                                  do
                                  {
                                    v655 = *v653;
                                    v1980 = v655;
                                    v656 = sub_1C477672C((uint64_t)&__dst, (uint64_t)v655);
                                    if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
                                      v657 = &__dst.__r_.__value_.__s.__data_[20];
                                    else
                                      v657 = &__dst.__r_.__value_.__s.__data_[16];
                                    if (v656 == (_QWORD *)(__dst.__r_.__value_.__l.__size_ + 8
                                                                                            * *(unsigned int *)v657))
                                    {
                                      if (((v1909 & !v1915 | v647) & 1) == 0
                                        || (v2004 = &off_1E81359B0,
                                            v2005 = v619,
                                            v2006 = v2027,
                                            v2007 = 0,
                                            v2008 = 0,
                                            v2009 = 0,
                                            llvm::PointerMayBeCaptured(v655, (const llvm::Value *)&v2004, 0),
                                            !v2008))
                                      {
                                        v658 = sub_1C5F0AAB8((uint64_t)v1982, (uint64_t *)&v1980)[1];
                                        v659 = v2011;
                                        if (v2011 >= (unint64_t)HIDWORD(v2011))
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2010, (uint64_t)v2012, v2011 + 1, 8);
                                          v659 = v2011;
                                        }
                                        *((_QWORD *)v2010 + v659) = v658;
                                        LODWORD(v2011) = v2011 + 1;
                                      }
                                    }
                                    ++v653;
                                    v654 -= 8;
                                  }
                                  while (v654);
                                }
                                if ((_DWORD)v2011)
                                {
                                  if ((*((_BYTE *)v622 + 23) & 0x20) == 0)
                                    goto LABEL_1010;
                                  v660 = ***v622;
                                  v2004 = v622;
                                  v661 = *(_DWORD *)(v660 + 2496);
                                  if (!v661)
                                  {
                                    v713 = 0;
                                    goto LABEL_1090;
                                  }
                                  v662 = *(_QWORD *)(v660 + 2480);
                                  v663 = v661 - 1;
                                  v664 = v663 & ((v622 >> 4) ^ (v622 >> 9));
                                  v665 = (_QWORD *)(v662 + 40 * v664);
                                  v666 = (_QWORD ***)*v665;
                                  if ((uint64_t ***)*v665 != v622)
                                  {
                                    v667 = 0;
                                    v668 = 1;
                                    while (v666 != (_QWORD ***)-4096)
                                    {
                                      if (v667)
                                        v669 = 0;
                                      else
                                        v669 = v666 == (_QWORD ***)-8192;
                                      if (v669)
                                        v667 = v665;
                                      v670 = v664 + v668++;
                                      v664 = v670 & v663;
                                      v665 = (_QWORD *)(v662 + 40 * v664);
                                      v666 = (_QWORD ***)*v665;
                                      if ((uint64_t ***)*v665 == v622)
                                        goto LABEL_1005;
                                    }
                                    if (v667)
                                      v713 = v667;
                                    else
                                      v713 = v665;
LABEL_1090:
                                    v665 = sub_1C541AB24(v660 + 2480, (uint64_t)&v2004, (uint64_t *)&v2004, v713);
                                    v714 = v2004;
                                    v665[4] = 0;
                                    v665[3] = 0;
                                    *v665 = v714;
                                    v665[1] = v665 + 3;
                                    v665[2] = 0x100000000;
                                  }
LABEL_1005:
                                  v671 = *((unsigned int *)v665 + 4);
                                  if ((_DWORD)v671)
                                  {
                                    v672 = (llvm::MDNode **)(v665[1] + 8);
                                    v673 = 16 * v671;
                                    while (*((_DWORD *)v672 - 2) != 8)
                                    {
                                      v674 = 0;
                                      v672 += 2;
                                      v673 -= 16;
                                      if (!v673)
                                        goto LABEL_1011;
                                    }
                                    v674 = *v672;
                                  }
                                  else
                                  {
LABEL_1010:
                                    v674 = 0;
                                  }
LABEL_1011:
                                  v675 = (llvm::MDNode *)llvm::MDTuple::getImpl(**v542, v2010, v2011, 0, 1);
                                  v677 = llvm::MDNode::concatenate(v674, v675, v676);
                                  if (v677 || v622[6] || (*((_BYTE *)v622 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v622, 8, v677);
                                }
                                v678 = v1915;
                                if (!v1909)
                                  v678 = v1878 ^ 1;
                                if ((v678 & 1) != 0 && ((v1878 ^ 1) & 1) != 0 && (_DWORD)v2025)
                                {
                                  v679 = (void **)v2024;
                                  v680 = 8 * v2025;
                                  do
                                  {
                                    v2004 = *v679;
                                    v681 = sub_1C477672C((uint64_t)&__dst, (uint64_t)v2004);
                                    if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
                                      v682 = &__dst.__r_.__value_.__s.__data_[20];
                                    else
                                      v682 = &__dst.__r_.__value_.__s.__data_[16];
                                    if (v681 != (_QWORD *)(__dst.__r_.__value_.__l.__size_ + 8
                                                                                            * *(unsigned int *)v682))
                                    {
                                      v683 = sub_1C5F0AAB8((uint64_t)v1982, (uint64_t *)&v2004)[1];
                                      v684 = v2014;
                                      if (v2014 >= (unint64_t)HIDWORD(v2014))
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2013, (uint64_t)v2015, v2014 + 1, 8);
                                        v684 = v2014;
                                      }
                                      *((_QWORD *)v2013 + v684) = v683;
                                      LODWORD(v2014) = v2014 + 1;
                                    }
                                    ++v679;
                                    v680 -= 8;
                                  }
                                  while (v680);
                                }
                                if ((_DWORD)v2014)
                                {
                                  if ((*((_BYTE *)v622 + 23) & 0x20) == 0)
                                    goto LABEL_1046;
                                  v685 = ***v622;
                                  v2004 = v622;
                                  v686 = *(_DWORD *)(v685 + 2496);
                                  if (!v686)
                                  {
                                    v715 = 0;
                                    goto LABEL_1094;
                                  }
                                  v687 = *(_QWORD *)(v685 + 2480);
                                  v688 = v686 - 1;
                                  v689 = v688 & ((v622 >> 4) ^ (v622 >> 9));
                                  v690 = (_QWORD *)(v687 + 40 * v689);
                                  v691 = (_QWORD ***)*v690;
                                  if ((uint64_t ***)*v690 != v622)
                                  {
                                    v692 = 0;
                                    v693 = 1;
                                    while (v691 != (_QWORD ***)-4096)
                                    {
                                      if (v692)
                                        v694 = 0;
                                      else
                                        v694 = v691 == (_QWORD ***)-8192;
                                      if (v694)
                                        v692 = v690;
                                      v695 = v689 + v693++;
                                      v689 = v695 & v688;
                                      v690 = (_QWORD *)(v687 + 40 * v689);
                                      v691 = (_QWORD ***)*v690;
                                      if ((uint64_t ***)*v690 == v622)
                                        goto LABEL_1041;
                                    }
                                    if (v692)
                                      v715 = v692;
                                    else
                                      v715 = v690;
LABEL_1094:
                                    v690 = sub_1C541AB24(v685 + 2480, (uint64_t)&v2004, (uint64_t *)&v2004, v715);
                                    v716 = v2004;
                                    v690[4] = 0;
                                    v690[3] = 0;
                                    *v690 = v716;
                                    v690[1] = v690 + 3;
                                    v690[2] = 0x100000000;
                                  }
LABEL_1041:
                                  v696 = *((unsigned int *)v690 + 4);
                                  if ((_DWORD)v696)
                                  {
                                    v697 = (llvm::MDNode **)(v690[1] + 8);
                                    v698 = 16 * v696;
                                    while (*((_DWORD *)v697 - 2) != 7)
                                    {
                                      v699 = 0;
                                      v697 += 2;
                                      v698 -= 16;
                                      if (!v698)
                                        goto LABEL_1047;
                                    }
                                    v699 = *v697;
                                  }
                                  else
                                  {
LABEL_1046:
                                    v699 = 0;
                                  }
LABEL_1047:
                                  v700 = (llvm::MDNode *)llvm::MDTuple::getImpl(**v542, v2013, v2014, 0, 1);
                                  v702 = llvm::MDNode::concatenate(v699, v700, v701);
                                  if (v702 || v622[6] || (*((_BYTE *)v622 + 23) & 0x20) != 0)
                                    llvm::Value::setMetadata((llvm::Value *)v622, 7, v702);
                                }
                                if (v2038 != &v2040)
                                  free(v2038);
                                if ((v2035 & 1) == 0)
                                  MEMORY[0x1CAA32FB4](v2036.i64[0], 8);
                                if (v2010 != v2012)
                                  free(v2010);
                                if (v2013 != v2015)
                                  free(v2013);
                                if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
                                  free((void *)__dst.__r_.__value_.__l.__size_);
                              }
                            }
                          }
LABEL_1061:
                          if (v2021 != v2023)
                            free(v2021);
                          v618 = v1881;
LABEL_1064:
                          v703 = v617 + 64;
                          v617 = v615;
                          if (v703 != v615)
                          {
                            v617 = v703;
                            while ((*((_QWORD *)v617 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                            {
                              v617 += 64;
                              if (v617 == v615)
                              {
                                v617 = v615;
                                break;
                              }
                            }
                          }
                        }
                        while (v617 != v618);
                      }
                      MEMORY[0x1CAA32FB4](v1982[0], 8);
                      sub_1C4DC4E38((uint64_t *)&v2028);
                      if ((uint64_t **)v2027[0] != &v2027[2])
                        free(v2027[0]);
                      v541 = a1;
                      goto LABEL_1115;
                    }
                    v557 = 1;
                    while (v556 != (uint64_t ***)-4096)
                    {
                      v558 = v554 + v557++;
                      v554 = v558 & (v553 - 1);
                      v556 = *(uint64_t ****)(v552 + 16 * v554);
                      if (v556 == v542)
                      {
                        v555 = (uint64_t ****)(v552 + 16 * v554);
                        goto LABEL_843;
                      }
                    }
                  }
                  v555 = (uint64_t ****)(v552 + 16 * v553);
                  goto LABEL_843;
                }
                v200 = *(uint64_t **)(v174 + 32);
                if (!v200 || (v201 = *(uint64_t **)(v174 + 40)) == 0)
                {
LABEL_401:
                  llvm::Function::getEntryCount((uint64_t ***)v189, 0, (uint64_t)&v2035);
                  if (v2036.i8[8])
                  {
                    if (v2036.i32[0] != 1)
                    {
                      v256 = v2035;
                      if (v2035)
                      {
                        v257 = *(llvm::ProfileSummaryInfo **)(v174 + 24);
                        if (v257)
                        {
                          ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(v257, (const llvm::BasicBlock **)v9, *(uint64_t ***)(v174 + 32), 0);
                          if (v1803)
                            v258 = ProfileCount;
                          else
                            v258 = 0;
                        }
                        else
                        {
                          v258 = 0;
                        }
                        if ((unint64_t)v256 < v258)
                          v258 = (unint64_t)v256;
                        llvm::updateProfileCallee(v189, -(uint64_t)v258, (uint64_t)&v1996);
                      }
                    }
                  }
                  goto LABEL_409;
                }
                v202 = *(_QWORD *)(v189 + 80);
                if (v202)
                  v203 = v202 - 24;
                else
                  v203 = 0;
                v2035 = &v2037.u64[1];
                v2036.i64[0] = (uint64_t)&v2037.i64[1];
                v2036.i64[1] = 16;
                v2037.i32[0] = 0;
                v204 = (char *)v1996;
                v205 = v1998;
                if ((_DWORD)v1997)
                {
                  v206 = (char *)v1996;
                  if (v1998)
                  {
                    v207 = 0;
                    while (1)
                    {
                      v206 = (char *)v1996 + v207;
                      if ((*(_QWORD *)((char *)v1996 + v207 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
                        break;
                      v207 += 64;
                      if ((unint64_t)v1998 << 6 == v207)
                        goto LABEL_332;
                    }
                  }
                  v223 = (char *)v1996 + 64 * (unint64_t)v1998;
                  if (v223 != v206)
                  {
                    v224 = *((_QWORD *)v206 + 3);
                    v9 = (uint64_t)a1;
LABEL_322:
                    if (*(_BYTE *)(v224 + 16) == 22)
                    {
                      v225 = *((_QWORD *)v206 + 7);
                      if (v225)
                      {
                        v226 = llvm::BlockFrequencyInfo::getBlockFreq(v201, v224);
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v2035, v225);
                        if (!v227)
                        {
                          v228 = llvm::BlockFrequencyInfo::getBlockFreq(v200, v225);
                          if (v228 > v226)
                            v226 = v228;
                        }
                        sub_1C4DAD074(*v200, v225, v226);
                        v189 = (uint64_t)v1898;
                      }
                    }
                    while (1)
                    {
                      v206 += 64;
                      if (v206 == v223)
                        break;
                      v224 = *((_QWORD *)v206 + 3);
                      if ((v224 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        if (v206 != v223)
                          goto LABEL_322;
                        break;
                      }
                    }
                    v204 = (char *)v1996;
                    v205 = v1998;
                  }
                }
LABEL_332:
                if (v205)
                {
                  v229 = (v205 - 1) & ((v203 >> 4) ^ (v203 >> 9));
                  v230 = &v204[64 * v229];
                  v231 = *((_QWORD *)v230 + 3);
                  if (v231 == v203)
                  {
LABEL_383:
                    v2027[0] = (uint64_t *)6;
                    if (v230 == &v204[64 * (unint64_t)v205])
                    {
                      v250 = 0;
                      v251 = 0;
                      v2027[1] = 0;
                      v2027[2] = 0;
                    }
                    else
                    {
                      v250 = 0;
                      v251 = (uint64_t *)*((_QWORD *)v230 + 7);
                      v2027[1] = 0;
                      v2027[2] = v251;
                      if (v251 != (uint64_t *)-8192 && v251 != (uint64_t *)-4096 && v251 != 0)
                      {
                        v253 = *((_QWORD *)v230 + 5) & 0xFFFFFFFFFFFFFFF8;
                        v2027[1] = *(uint64_t **)v253;
                        *(_QWORD *)v253 = v2027;
                        v2027[0] = (uint64_t *)(v253 | 6);
                        v250 = v2027[1];
                        if (v2027[1])
                          *v2027[1] = *v2027[1] & 7 | (unint64_t)&v2027[1];
                        v251 = v2027[2];
                      }
                    }
                    if (v251 != (uint64_t *)-8192 && v251 != (uint64_t *)-4096 && v251 != 0)
                    {
                      v1668 = (unint64_t)v2027[0] & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)((unint64_t)v2027[0] & 0xFFFFFFFFFFFFFFF8) = v250;
                      if (v2027[1])
                      {
                        *v2027[1] = *v2027[1] & 7 | v1668;
                      }
                      else
                      {
                        v1669 = v2027[2];
                        v1670 = ***(int32x2_t ****)v2027[2];
                        v1671 = (unint64_t)v1670[303];
                        if (v1671 <= v1668)
                        {
                          v1672 = v1670[305].u32[0];
                          if (v1671 + 16 * v1672 > v1668)
                          {
                            v1673 = v1672 - 1;
                            LODWORD(v1674) = v1673 & ((LODWORD(v2027[2]) >> 4) ^ (LODWORD(v2027[2]) >> 9));
                            v1675 = (uint64_t **)(v1671 + 16 * v1674);
                            v1676 = *v1675;
                            if (v2027[2] == *v1675)
                            {
LABEL_2525:
                              *v1675 = (uint64_t *)-8192;
                              v1670[304] = vadd_s32(v1670[304], (int32x2_t)0x1FFFFFFFFLL);
                              v1669 = v2027[2];
                            }
                            else
                            {
                              v1677 = 1;
                              while (v1676 != (uint64_t *)-4096)
                              {
                                v1678 = v1674 + v1677++;
                                v1674 = v1678 & v1673;
                                v1676 = *(uint64_t **)(v1671 + 16 * v1674);
                                if (v2027[2] == v1676)
                                {
                                  v1675 = (uint64_t **)(v1671 + 16 * v1674);
                                  goto LABEL_2525;
                                }
                              }
                            }
                            *((_BYTE *)v1669 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v255 = llvm::BlockFrequencyInfo::getBlockFreq(v200, v1892);
                    llvm::BlockFrequencyInfo::setBlockFreqAndScale(v200, (uint64_t)v251, v255, &v2035);
                    if ((void *)v2036.i64[0] != v2035)
                      free((void *)v2036.i64[0]);
                    goto LABEL_401;
                  }
                  v232 = 1;
                  while (v231 != -4096)
                  {
                    v233 = v229 + v232++;
                    v229 = v233 & (v205 - 1);
                    v230 = &v204[64 * v229];
                    v231 = *((_QWORD *)v230 + 3);
                    if (v231 == v203)
                      goto LABEL_383;
                  }
                }
                v230 = &v204[64 * (unint64_t)v205];
                goto LABEL_383;
              }
              v176 = (char **)v175(*(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(v9 + 40) + 56));
              v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 56) + 40);
              v2027[0] = (uint64_t *)&v2027[2];
              v2027[1] = (uint64_t *)0x100000000;
              v2034 = 0;
              v2029 = 0;
              v2028 = 0;
              LODWORD(v2030) = 0;
              v2032 = 0;
              v2031 = 0;
              v2033 = 0;
              v178 = *(_QWORD *)(v9 - 32);
              if (!v178 || *(_BYTE *)(v178 + 16) || *(_QWORD *)(v178 + 24) != *(_QWORD *)(v9 + 72))
                v178 = 0;
              if ((*(_WORD *)(v178 + 18) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v178);
                v179 = *(_QWORD *)(v178 + 88);
                if ((*(_WORD *)(v178 + 18) & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments((llvm::Function *)v178);
                  v180 = *(_QWORD *)(v178 + 88);
                  goto LABEL_250;
                }
              }
              else
              {
                v179 = *(_QWORD *)(v178 + 88);
              }
              v180 = v179;
LABEL_250:
              v181 = v180 + 40 * *(_QWORD *)(v178 + 96);
              if (v179 != v181)
              {
                v182 = 0;
                v183 = (const llvm::DataLayout *)(v177 + 272);
                do
                {
                  if (*(_BYTE *)(*(_QWORD *)v179 + 8) == 15)
                  {
                    v184 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*(_QWORD *)(v179 + 24) + 112), *(_DWORD *)(v179 + 32));
                    if ((v184 & 0xFF00) != 0)
                      v185 = 1 << v184;
                    else
                      LODWORD(v185) = 0;
                    if ((_DWORD)v185
                      && (llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v179) & 1) == 0
                      && *(_QWORD *)(v179 + 8))
                    {
                      if ((v182 & 1) == 0)
                      {
                        v2032 = (uint64_t ***)a1[5][7];
                        sub_1C53BA620((uint64_t)v2027, 0);
                      }
                      v186 = (llvm::Value *)(&a1[4 * *(unsigned int *)(v179 + 32)])[-4
                                                                                  * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                      v182 = 1;
                      if (1 << llvm::getOrEnforceKnownAlignment((uint64_t)v186, 0, (unsigned __int8 *)v183, (uint64_t)a1, (uint64_t)v176, (uint64_t)v2027) < (unint64_t)v185)
                      {
                        sub_1C4773D54((uint64_t)&v2035, (uint64_t)a1, 0, 0, 0);
                        AlignmentAssumption = llvm::IRBuilderBase::CreateAlignmentAssumption((llvm::LLVMContext **)&v2035, v183, v186, v185, 0);
                        if (v2035 != &v2036.u64[1])
                          free(v2035);
                        llvm::AssumptionCache::registerAssumption(v176, AlignmentAssumption);
                        v182 = 1;
                      }
                    }
                  }
                  v179 += 40;
                }
                while (v179 != v181);
              }
              sub_1C4DC4E38((uint64_t *)&v2028);
              if ((uint64_t **)v2027[0] != &v2027[2])
                free(v2027[0]);
              v9 = (uint64_t)a1;
              v174 = a2;
              goto LABEL_270;
            }
          }
          else
          {
            v99 = *(_QWORD *)(v13 + 88);
          }
          v100 = v99;
          goto LABEL_149;
        }
        if (v41)
        {
          if ((llvm::Value *)v35 != v41)
            return "incompatible personality";
          v1977 = 0;
          goto LABEL_339;
        }
LABEL_58:
        sub_1C53D1F60((_QWORD *)v20, v35);
        *(_WORD *)(v20 + 18) |= 8u;
        goto LABEL_59;
      }
      if (!memcmp(*v25, v34, (size_t)v25[1]))
        goto LABEL_42;
    }
    return "incompatible GC";
  }
  v1819 = (uint64_t)v1816 - v1817;
  v1820 = (v1817 >> 4);
  v9 = (uint64_t)a1;
  v14 = (uint64_t *)(a1 - 4);
  while (1)
  {
    v1821 = *(_DWORD *)(*(_QWORD *)v1819 + 8);
    v247 = v1821 > 6;
    v1822 = (1 << v1821) & 0x43;
    if (v247 || v1822 == 0)
      return "unsupported operand bundle";
    v1819 += 16;
    if (!--v1820)
      goto LABEL_12;
  }
}

_QWORD *sub_1C5F09BD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  BOOL v12;
  uint64_t *v13;
  int v14;
  unsigned int i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t m;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t k;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[9];

  v41[8] = *MEMORY[0x1E0C80C00];
  v36 = a1;
  if (a1 && *(_BYTE *)(a1 + 16) == 80)
  {
    a1 = *(_QWORD *)(a1 - 32);
    v36 = a1;
  }
  v38 = a1;
  v39 = 0;
  if (sub_1C5667944((uint64_t *)a2, &v38, &v39)
    && v39 != (void *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16)))
  {
    return (_QWORD *)*((_QWORD *)v39 + 1);
  }
  v3 = sub_1C5F09FD8(v36, a2);
  if (v3)
    return v3;
  sub_1C5667838((uint64_t *)a2, &v36)[1] = 0;
  v4 = v36;
  v35 = v36;
  if (v36 && ((v5 = *(unsigned __int8 *)(v36 + 16), v5 >= 0x1C) ? (v6 = v5 - 81 >= 0xFFFFFFFE) : (v6 = 0), v6))
  {
    v7 = (uint64_t *)(v36 - 32);
  }
  else
  {
    v8 = *(_DWORD *)(v36 + 20);
    if ((v8 & 0x40000000) != 0)
      v7 = *(uint64_t **)(v36 - 8);
    else
      v7 = (uint64_t *)(v36 - 32 * (v8 & 0x7FFFFFF));
  }
  v9 = *v7;
  v11 = (unsigned __int8 *)(*v7 + 16);
  v10 = *v11;
  if (v9)
    v12 = v10 >= 0x1C;
  else
    v12 = 0;
  if (!v12)
  {
    v3 = 0;
    goto LABEL_39;
  }
  while (1)
  {
    if (v10 == 80)
      goto LABEL_30;
    v38 = v9;
    v39 = 0;
    if (!sub_1C5667944((uint64_t *)a2, &v38, &v39)
      || v39 == (void *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16)))
    {
      v3 = sub_1C5F09FD8(v9, a2);
    }
    else
    {
      v3 = (_QWORD *)*((_QWORD *)v39 + 1);
    }
    if (v3)
      break;
    v35 = v9;
    sub_1C5667838((uint64_t *)a2, &v35)[1] = 0;
    v10 = *v11;
LABEL_30:
    if (v10 < 0x1C || v10 - 81 < 0xFFFFFFFE)
    {
      v14 = *(_DWORD *)(v9 + 20);
      if ((v14 & 0x40000000) != 0)
        v13 = *(uint64_t **)(v9 - 8);
      else
        v13 = (uint64_t *)(v9 - 32 * (v14 & 0x7FFFFFF));
    }
    else
    {
      v13 = (uint64_t *)(v9 - 32);
    }
    v3 = 0;
    v9 = *v13;
    if (*v13)
    {
      v11 = (unsigned __int8 *)(v9 + 16);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 > 0x1B)
        continue;
    }
    break;
  }
  v4 = v35;
LABEL_39:
  v39 = v41;
  v40 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v39, 1uLL, v4);
  for (i = v40; (_DWORD)v40; i = v40)
  {
    v34 = 0;
    v16 = *((_QWORD *)v39 + i - 1);
    LODWORD(v40) = i - 1;
    v34 = v16;
    v37 = v16;
    v38 = 0;
    if (!sub_1C5667944((uint64_t *)a2, &v37, &v38)
      || v38 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16)
      || !*(_QWORD *)(v38 + 8))
    {
      sub_1C5667838((uint64_t *)a2, &v34)[1] = v3;
      if (v34 && *(_BYTE *)(v34 + 16) == 38)
      {
        v17 = *(_DWORD *)(v34 + 20);
        if ((v17 & 0x40000000) != 0)
        {
          v19 = *(_QWORD *)(v34 - 8);
          v18 = v17 & 0x7FFFFFF;
        }
        else
        {
          v18 = v17 & 0x7FFFFFF;
          v19 = v34 - 32 * v18;
        }
        if ((*(_WORD *)(v34 + 18) & 1) != 0)
          v24 = 2;
        else
          v24 = 1;
        if (v24 != v18)
        {
          v25 = v19 + 32 * v18;
          v26 = v19 + 32 * v24;
          do
          {
            for (j = *(_QWORD *)(*(_QWORD *)v26 + 48); ; j = *(_QWORD *)(j + 8))
            {
              v28 = j - 24;
              if (!j)
                v28 = 0;
              if (*(_BYTE *)(v28 + 16) != 83)
                break;
            }
            for (k = *(_QWORD *)(j - 16); k; k = *(_QWORD *)(k + 8))
            {
              v30 = *(_QWORD *)(k + 24);
              v31 = *(unsigned __int8 *)(v30 + 16);
              if (v31 == 79 || v31 == 38)
              {
                v32 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
                  v32 = v40;
                }
                *((_QWORD *)v39 + v32) = v30;
                LODWORD(v40) = v40 + 1;
              }
            }
            v26 += 32;
          }
          while (v26 != v25);
        }
      }
      else
      {
        for (m = *(_QWORD *)(v34 + 8); m; m = *(_QWORD *)(m + 8))
        {
          v21 = *(_QWORD *)(m + 24);
          v22 = *(unsigned __int8 *)(v21 + 16);
          if (v22 == 79 || v22 == 38)
          {
            v23 = v40;
            if (v40 >= (unint64_t)HIDWORD(v40))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
              v23 = v40;
            }
            *((_QWORD *)v39 + v23) = v21;
            LODWORD(v40) = v40 + 1;
          }
        }
      }
    }
  }
  if (v39 != v41)
    free(v39);
  return v3;
}

_QWORD *sub_1C5F09FD8(uint64_t a1, uint64_t a2)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t m;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t k;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t n;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  char v43;
  unsigned int v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[9];

  v54[8] = *MEMORY[0x1E0C80C00];
  v52 = v54;
  v53 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v52, 1uLL, a1);
  do
  {
    while (1)
    {
LABEL_2:
      if (!(_DWORD)v53)
      {
        v15 = 0;
        goto LABEL_111;
      }
      v5 = *((_QWORD *)v52 + v53 - 1);
      LODWORD(v53) = v53 - 1;
      if (!v5 || *(_BYTE *)(v5 + 16) != 38)
        break;
      v6 = *(_DWORD *)(v5 + 20);
      if ((*(_WORD *)(v5 + 18) & 1) != 0)
      {
        if ((v6 & 0x40000000) != 0)
          v22 = *(_QWORD *)(v5 - 8);
        else
          v22 = v5 - 32 * (v6 & 0x7FFFFFF);
        v31 = *(_QWORD *)(v22 + 32);
        v32 = v31 + 40;
        for (i = *(_QWORD *)(v31 + 48); i != v32; i = *(_QWORD *)(i + 8))
        {
          v15 = (_QWORD *)(i - 24);
          if (i)
            v34 = i - 24;
          else
            v34 = 0;
          if (*(_BYTE *)(v34 + 16) != 83)
            goto LABEL_80;
        }
      }
      else
      {
        if ((v6 & 0x40000000) != 0)
        {
          v8 = *(_QWORD *)(v5 - 8);
          v7 = v6 & 0x7FFFFFF;
        }
        else
        {
          v7 = v6 & 0x7FFFFFF;
          v8 = v5 - 32 * v7;
        }
        if (v7 != 1)
        {
          v23 = v8 + 32 * v7;
          v24 = v8 + 32;
          do
          {
            for (j = *(_QWORD *)(*(_QWORD *)v24 + 48); ; j = *(_QWORD *)(j + 8))
            {
              v26 = j - 24;
              if (!j)
                v26 = 0;
              if (*(_BYTE *)(v26 + 16) != 83)
                break;
            }
            for (k = *(_QWORD *)(j - 16); k; k = *(_QWORD *)(k + 8))
            {
              v28 = *(_QWORD *)(k + 24);
              v29 = *(unsigned __int8 *)(v28 + 16);
              if (v29 == 79 || v29 == 38)
              {
                v50 = *(_QWORD *)(k + 24);
                v51 = 0;
                if (!sub_1C5667944((uint64_t *)a2, &v50, &v51)
                  || v51 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
                {
                  v30 = v53;
                  if (v53 >= (unint64_t)HIDWORD(v53))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 8);
                    v30 = v53;
                  }
                  *((_QWORD *)v52 + v30) = v28;
                  LODWORD(v53) = v53 + 1;
                }
                else
                {
                  v15 = *(_QWORD **)(v51 + 8);
                  if (v15 && *((_BYTE *)v15 + 16) == 20)
                    goto LABEL_80;
                }
              }
            }
            v24 += 32;
          }
          while (v24 != v23);
        }
      }
    }
    v9 = *(_QWORD *)(v5 + 8);
  }
  while (!v9);
  while (1)
  {
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v10)
    {
      if (v11 == 36)
        break;
    }
    if (v10 && v11 == 33)
    {
      v12 = *(_QWORD *)(v10 - 64);
      v13 = v12 + 40;
      for (m = *(_QWORD *)(v12 + 48); m != v13; m = *(_QWORD *)(m + 8))
      {
        v15 = (_QWORD *)(m - 24);
        if (m)
          v16 = m - 24;
        else
          v16 = 0;
        if (*(_BYTE *)(v16 + 16) != 83)
          goto LABEL_25;
      }
      v15 = 0;
LABEL_25:
      v17 = *((unsigned __int8 *)v15 + 16);
      if (v17 < 0x1C)
        goto LABEL_81;
      v18 = v17 - 81;
      if (v18 >= 0xFFFFFFFE)
      {
        v20 = v15 - 4;
      }
      else
      {
        v19 = *((_DWORD *)v15 + 5);
        if ((v19 & 0x40000000) != 0)
          v20 = (_QWORD *)*(v15 - 1);
        else
          v20 = &v15[-4 * (v19 & 0x7FFFFFF)];
      }
      if (*v20 != v5)
        goto LABEL_83;
      goto LABEL_35;
    }
    if (v11 == 79 || v11 == 38)
    {
      v50 = *(_QWORD *)(v9 + 24);
      v51 = 0;
      if (!sub_1C5667944((uint64_t *)a2, &v50, &v51)
        || v51 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
      {
        v21 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 8);
          v21 = v53;
        }
        *((_QWORD *)v52 + v21) = v10;
        LODWORD(v53) = v53 + 1;
        goto LABEL_35;
      }
      v15 = *(_QWORD **)(v51 + 8);
      if (v15)
        goto LABEL_25;
    }
LABEL_35:
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_2;
  }
  if ((*(_WORD *)(v10 + 18) & 1) != 0)
  {
    v35 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
    if (v35)
    {
      v36 = v35 + 40;
      for (n = *(_QWORD *)(v35 + 48); n != v36; n = *(_QWORD *)(n + 8))
      {
        v15 = (_QWORD *)(n - 24);
        if (n)
          v38 = n - 24;
        else
          v38 = 0;
        if (*(_BYTE *)(v38 + 16) != 83)
          goto LABEL_80;
      }
      goto LABEL_2;
    }
  }
  v15 = llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v5, v4);
  if (!v15)
    goto LABEL_2;
LABEL_80:
  v39 = *((unsigned __int8 *)v15 + 16);
  if (v39 < 0x1C)
  {
LABEL_81:
    v40 = 0;
    goto LABEL_89;
  }
  v18 = v39 - 81;
LABEL_83:
  if (v18 >= 0xFFFFFFFE)
  {
    v42 = v15 - 4;
  }
  else
  {
    v41 = *((_DWORD *)v15 + 5);
    if ((v41 & 0x40000000) != 0)
      v42 = (uint64_t *)*(v15 - 1);
    else
      v42 = &v15[-4 * (v41 & 0x7FFFFFF)];
  }
  v40 = *v42;
LABEL_89:
  v51 = v5;
  if (!v5 || v5 == v40)
    goto LABEL_2;
  v43 = 0;
  v44 = *(unsigned __int8 *)(v5 + 16);
  do
  {
    if (v44 != 80)
    {
      sub_1C5667838((uint64_t *)a2, &v51)[1] = v15;
      v5 = v51;
      v43 |= v51 == a1;
      v44 = *(unsigned __int8 *)(v51 + 16);
    }
    if (v44 < 0x1C || v44 - 81 < 0xFFFFFFFE)
    {
      v46 = *(_DWORD *)(v5 + 20);
      if ((v46 & 0x40000000) != 0)
        v45 = *(uint64_t **)(v5 - 8);
      else
        v45 = (uint64_t *)(v5 - 32 * (v46 & 0x7FFFFFF));
    }
    else
    {
      v45 = (uint64_t *)(v5 - 32);
    }
    v5 = *v45;
    v44 = *(unsigned __int8 *)(*v45 + 16);
    if (v44 <= 0x1B)
      v47 = 0;
    else
      v47 = v5;
    v51 = v47;
    if (v47)
      v48 = v47 == v40;
    else
      v48 = 1;
  }
  while (!v48);
  if ((v43 & 1) == 0)
    goto LABEL_2;
LABEL_111:
  if (v52 != v54)
    free(v52);
  return v15;
}

unsigned __int8 *sub_1C5F0A494(unsigned __int8 **a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 *result;
  unsigned __int8 *v9;

  llvm::DebugLoc::appendInlinedAt(a2, a3, a4, a5, &v9);
  result = (unsigned __int8 *)llvm::DILocation::getImpl(a4, *(_DWORD *)(*(_QWORD *)a2 + 4), *(unsigned __int16 *)(*(_QWORD *)a2 + 2), *(_QWORD *)(*(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8)), (uint64_t)v9, 0, 0, 1);
  *a1 = result;
  if (result)
    result = (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a1, result, 2);
  if (v9)
    return (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  return result;
}

unsigned __int8 *sub_1C5F0A534(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v2 = a2;
  if (a2 && *a2 == 5)
  {
    v5 = a2;
    llvm::MetadataTracking::track((uint64_t)&v5, a2, 2);
    sub_1C5F0A494(&v6, (uint64_t)&v5, **(unsigned __int8 ***)(a1 + 8), *(uint64_t **)a1, *(_QWORD *)(a1 + 16));
    v2 = v6;
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
    if (v5)
      llvm::MetadataTracking::untrack((uint64_t)&v5, v5);
  }
  return v2;
}

void sub_1C5F0A5C0(uint64_t a1, unint64_t a2)
{
  llvm::MDNode *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::MDNode *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  v15 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v15);
  v5 = *(uint64_t **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = v7;
    v9 = v4;
    do
    {
      v10 = *v5;
      *v5++ = 0;
      *v9++ = v10;
      v8 -= 8;
    }
    while (v8);
    v11 = *(_QWORD *)a1 - 8;
    do
    {
      v12 = *(llvm::MDNode **)(v11 + v7);
      *(_QWORD *)(v11 + v7) = 0;
      if (v12)
      {
        v14 = v7;
        llvm::MDNode::deleteTemporary(v12, v3);
        v7 = v14;
      }
      v7 -= 8;
    }
    while (v7);
    v5 = *(uint64_t **)a1;
  }
  v13 = v15;
  if (v5 != (uint64_t *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t *sub_1C5F0A67C(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C5F0A75C(a1, v7);
    v8 = 0;
    sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_1C5F0A75C(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int8 ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5F0A814(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5F0A814(uint64_t result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  _QWORD *v13;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      v9 = (uint64_t)*(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        result = sub_1C4F763D4(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(v8 - 1);
        v10[1] = *v8;
        v11 = (uint64_t)(v10 + 1);
        if (*v8)
        {
          result = llvm::MetadataTracking::retrack((uint64_t)v8, *v8, v11);
          *v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      v12 = v8 + 1;
      v8 += 2;
    }
    while (v12 != a3);
  }
  return result;
}

uint64_t sub_1C5F0A8DC(unsigned __int8 **a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;

  v7 = 0;
  result = sub_1C4F763D4(a2, a3, a4, &v7);
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 **)(v7 + 8);
    *a1 = v6;
    if (v6)
      return llvm::MetadataTracking::track((uint64_t)a1, v6, 2);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

_QWORD *sub_1C5F0A94C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1C5F0AA00(a1, v6);
    v8 = 0;
    sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5F0AA00(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63ACD84(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5F0AAB8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5F0A94C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C5F0AB20(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 24);
      if (*(_BYTE *)(v2 + 16) == 84)
      {
        v3 = *(_QWORD *)(v2 - 32);
        if (v3)
        {
          if (!*(_BYTE *)(v3 + 16)
            && *(_QWORD *)(v3 + 24) == *(_QWORD *)(v2 + 72)
            && (*(_BYTE *)(v3 + 33) & 0x20) != 0
            && llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v2))
          {
            break;
          }
        }
      }
      v1 = *(_QWORD *)(v1 + 8);
      if (!v1)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1C5F0AB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  llvm *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::DomTreeUpdater *v14;
  _QWORD *v15;
  int v16;
  uint64_t *v18;
  char v19;

  v3 = a1 + 40;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 != a1 + 40)
  {
    v7 = a1;
    do
    {
      v8 = v4;
      v4 = *(_QWORD *)(v4 + 8);
      v9 = (unsigned __int8 *)(v8 - 24);
      if (!v8)
        v9 = 0;
      v10 = v9[16];
      if (v10 == 84)
        v11 = (llvm *)v9;
      else
        v11 = 0;
      if (!v8)
        continue;
      if (v10 != 84)
        continue;
      v12 = *((_QWORD *)v11 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 16) & 0x20) != 0)
          continue;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v11, 37) & 1) != 0)
        continue;
      v13 = *((_QWORD *)v11 - 4);
      if (*(_BYTE *)(v13 + 16))
      {
        if (*(_BYTE *)(v13 + 16) == 24 && !*(_BYTE *)(v13 + 88))
          continue;
      }
      else if (*(_QWORD *)(v13 + 24) == *((_QWORD *)v11 + 9))
      {
        v16 = *(_DWORD *)(v13 + 36);
        if (v16 == 119 || v16 == 125)
          continue;
      }
      sub_1C5062CEC((uint64_t)v11, 1, (uint64_t)&v18);
      if (!v19 || (v15 = sub_1C5F09BD8(*v18, a3)) == 0 || *((_BYTE *)v15 + 16) == 20)
      {
        llvm::changeToInvokeAndSplitBasicBlock(v11, a2, 0, v14);
        return v7;
      }
    }
    while (v4 != v3);
  }
  return 0;
}

__n128 sub_1C5F0ACD0(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED826E78, "preserve-alignment-assumptions-during-inlining", 0x2EuLL);
  v6 = *a1;
  byte_1ED826EF8 = **a1;
  byte_1ED826F09 = 1;
  byte_1ED826F08 = *v6;
  word_1ED826E82 = (32 * (*a2 & 3)) | word_1ED826E82 & 0xFF9F;
  result = *a3;
  xmmword_1ED826E98 = (__int128)*a3;
  return result;
}

_DWORD *sub_1C5F0AD54(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (result != (_DWORD *)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_DWORD **)result == result + 4 || *(_QWORD *)a2 == a2 + 16)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if (result[3] < v7)
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 8);
      v8 = v3[2];
      if (*(_DWORD *)(a2 + 12) < v8)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8, 8);
        LODWORD(v8) = v3[2];
      }
      v9 = *(unsigned int *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if ((_DWORD)v10)
      {
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)a2;
          v13 = *(_QWORD *)(*(_QWORD *)v3 + v11);
          *(_QWORD *)(*(_QWORD *)v3 + v11) = *(_QWORD *)(*(_QWORD *)a2 + v11);
          *(_QWORD *)(v12 + v11) = v13;
          v11 += 8;
        }
        while (8 * v10 != v11);
      }
      if (v9 >= v8)
      {
        if (v9 > v8)
        {
          v15 = v9 - v8;
          result = memcpy((void *)(*(_QWORD *)v3 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v10));
          v3[2] += v15;
          *(_DWORD *)(a2 + 8) = v10;
        }
      }
      else
      {
        v14 = v8 - v9;
        result = memcpy((void *)(*(_QWORD *)a2 + 8 * v9), (const void *)(*(_QWORD *)v3 + 8 * v10), *(_QWORD *)v3 + 8 * v8 - (*(_QWORD *)v3 + 8 * v10));
        *(_DWORD *)(a2 + 8) += v14;
        v3[2] = v10;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = result[2];
      result[2] = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = result[3];
      result[3] = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

uint64_t sub_1C5F0AEC4()
{
  char v1;
  int v2;
  char *v3;
  __n128 v4;
  int v5;

  LOBYTE(v2) = 1;
  v3 = (char *)&v2;
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Convert noalias attributes to metadata during inlining.";
  v4.n128_u64[1] = 55;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED826CF8, "enable-noalias-to-md-conversion", &v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED826CF8, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v1 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Use the llvm.experimental.noalias.scope.decl intrinsic during inlining.";
  v4.n128_u64[1] = 71;
  sub_1C63ACE30(&v5, &v2, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED826DB8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = 1;
  v3 = (char *)&v2;
  v4.n128_u64[0] = (unint64_t)"Convert align attributes to assumptions during inlining.";
  v4.n128_u64[1] = 56;
  sub_1C63ACF78(&v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED826E78, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v5 = 1;
  v3 = (char *)&v2;
  v4.n128_u64[0] = (unint64_t)"Update return attributes on calls within inlined body";
  v4.n128_u64[1] = 53;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED826F38, "update-return-attrs", &v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED826F38, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"the maximum number of instructions analyzed for may throw during attribute inferenc"
                                     "e in inlined body";
  v4.n128_u64[1] = 100;
  v2 = 4;
  v3 = (char *)&v2;
  sub_1C63AD01C(&v5, (__int128 *)&v4, (int **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED826FF8, &dword_1C475E000);
}

uint64_t sub_1C5F0B074(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  size_t v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  size_t v28;
  _BYTE *VectorizedFunction;
  unint64_t v30;
  const void *v31;
  size_t v32;
  void **p_dst;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  size_t v38;
  void **v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  void **v45;
  size_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  const void *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  uint64_t v56;
  llvm::UndefValue *v57;
  llvm::UndefValue *v58;
  uint64_t **v59;
  uint64_t **v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ****v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v72;
  uint64_t v73;
  uint64_t **v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t **v79;
  uint64_t **v80;
  uint64_t *v81;
  llvm::PointerType *v82;
  uint64_t *v83;
  llvm::Function *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::UndefValue *v89;
  uint64_t **v90;
  uint64_t **v91;
  uint64_t j;
  llvm::UndefValue *v93;
  size_t v94;
  uint64_t *v95;
  char *v96;
  int v97;
  llvm::Type *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  int v104;
  void *v105;
  void *v106;
  uint64_t v107;
  void *__p[2];
  char v109;
  void **__dst;
  size_t v111;
  int64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  llvm::UndefValue *v116[4];
  __int16 v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD v120[6];

  v99 = (uint64_t *)result;
  v120[4] = *MEMORY[0x1E0C80C00];
  v2 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v2)
      return result;
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5 != v4 + 40)
      break;
  }
  v6 = v120;
  while (1)
  {
    v7 = v5 - 24;
    if (!v5)
      v7 = 0;
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 84)
      v9 = v7;
    else
      v9 = 0;
    if (v5 && v8 == 84)
    {
      v10 = *(_QWORD *)(v9 + 64);
      if (!v10 || (*(_BYTE *)(v10 + 14) & 0x10) == 0)
      {
        result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 20);
        if (!(_DWORD)result)
          goto LABEL_21;
        v10 = *(_QWORD *)(v9 + 64);
        if (!v10)
          goto LABEL_20;
      }
      if ((*(_BYTE *)(v10 + 12) & 0x10) == 0)
      {
LABEL_20:
        result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 4);
        if (!(_DWORD)result)
          goto LABEL_34;
      }
LABEL_21:
      v12 = (uint64_t *)(v9 - 32);
      v11 = *(uint64_t ****)(v9 - 32);
      if (!v11 || *((_BYTE *)v11 + 16) || v11[3] != *(uint64_t ***)(v9 + 72))
        goto LABEL_34;
      if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
      {
        v13 = ***v11;
        v14 = *(_QWORD *)(v13 + 152);
        v15 = *(unsigned int *)(v13 + 168);
        if ((_DWORD)v15)
        {
          LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          v17 = (uint64_t ****)(v14 + 16 * v16);
          v18 = *v17;
          if (*v17 != v11)
          {
            v19 = 1;
            do
            {
              if (v18 == (uint64_t ***)-4096)
                goto LABEL_31;
              v20 = v16 + v19++;
              v16 = v20 & (v15 - 1);
              v18 = *(uint64_t ****)(v14 + 16 * v16);
            }
            while (v18 != v11);
            v17 = (uint64_t ****)(v14 + 16 * v16);
          }
        }
        else
        {
LABEL_31:
          v17 = (uint64_t ****)(v14 + 16 * v15);
        }
        v21 = v17[1];
        v24 = (size_t)*v21;
        v23 = (char *)(v21 + 2);
        v22 = v24;
      }
      else
      {
        v22 = 0;
        v23 = &byte_1C871356D;
      }
      result = llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v99, v23, v22);
      if (!(_DWORD)result)
        goto LABEL_34;
      v113 = (char *)&v115;
      v114 = 0x800000000;
      llvm::VFABI::getVectorVariantNames(v9, (uint64_t)&v113);
      v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 56) + 40);
      v103[0] = 0;
      v103[1] = 0;
      v104 = 0;
      v106 = 0;
      v107 = 0;
      v105 = 0;
      sub_1C63AD35C((uint64_t)v103, (uint64_t *)v113, (uint64_t *)&v113[24 * v114]);
      v101 = 0;
      v102 = 0;
      v96 = v23;
      llvm::TargetLibraryInfoImpl::getWidestVF(*v99, v23, v22, &v102, &v101);
      v27 = 2;
      v100 = 2;
      v28 = v22;
      v94 = v22;
      v95 = v6;
      while (1)
      {
        if (v27 > v102)
        {
LABEL_165:
          llvm::VFABI::setVectorVariantNames(v9, (uint64_t)v113, v114);
          if (v105)
          {
            v106 = v105;
            operator delete(v105);
          }
          MEMORY[0x1CAA32FB4](v103[0], 8);
          result = (uint64_t)sub_1C4E01820(&v113);
          break;
        }
        VectorizedFunction = llvm::TargetLibraryInfoImpl::getVectorizedFunction(*v99, v96, v28, (int *)&v100);
        if (v30 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v31 = VectorizedFunction;
        v32 = v30;
        if (v30 >= 0x17)
        {
          v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v34 = v30 | 7;
          v35 = v34 + 1;
          p_dst = (void **)operator new(v34 + 1);
          v36 = v35 | 0x8000000000000000;
          v28 = v94;
          v111 = v32;
          v112 = v36;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v112) = v30;
          p_dst = (void **)&__dst;
          if (!v30)
            goto LABEL_53;
        }
        memmove(p_dst, v31, v32);
LABEL_53:
        *((_BYTE *)p_dst + v32) = 0;
        v37 = HIBYTE(v112);
        if (v112 >= 0)
          v38 = HIBYTE(v112) & 0x7F;
        else
          v38 = v111;
        if (v38)
        {
          if (v112 >= 0)
            v39 = (void **)&__dst;
          else
            v39 = __dst;
          v40 = *(unsigned __int8 *)(v9 + 16);
          if (v40 == 84)
          {
            v41 = 0;
          }
          else
          {
            if (v40 == 39)
              v41 = (*(_DWORD *)(v9 + 80) + 1);
            else
              v41 = 2;
            v28 = v94;
          }
          v42 = *(_DWORD *)(v9 + 20);
          if (v42 < 0 && (v86 = v42 & 0x7FFFFFF, (*(_QWORD *)(v9 - 8 - 32 * v86) & 0xFFFFFFFF0) != 0))
          {
            v44 = -v86;
            v43 = *(_DWORD *)(v9 - 32 * v86 - 12) - *(_DWORD *)(v9 - 32 * v86 - *(_QWORD *)(v9 - 32 * v86 - 8));
          }
          else
          {
            v43 = 0;
            v44 = -(uint64_t)(v42 & 0x7FFFFFF);
          }
          llvm::VFABI::mangleTLIVectorName(v39, v38, v96, v28, (-32 - 32 * v41 + 32 * (unint64_t)-v43 - 32 * v44) >> 5, v100, __p);
          if (v109 >= 0)
            v45 = __p;
          else
            v45 = (void **)__p[0];
          if (v109 >= 0)
            v46 = v109 & 0x7F;
          else
            v46 = (size_t)__p[1];
          v47 = v104;
          if (v104)
          {
            v48 = v103[0];
            v49 = sub_1C5E3DF4C(v45, (uint64_t)v45 + v46);
            v50 = v47 - 1;
            v97 = 1;
            for (j = v48; ; v48 = j)
            {
              v51 = v49 & v50;
              v52 = v48 + 16 * (v49 & v50);
              v53 = *(const void **)v52;
              if (*(_QWORD *)v52 == -1)
              {
                if (v45 == (void **)-1)
                  goto LABEL_85;
              }
              else if (v53 == (const void *)-2)
              {
                if (v45 == (void **)-2)
                  goto LABEL_85;
              }
              else if (v46 == *(_QWORD *)(v52 + 8) && (!v46 || !memcmp(v45, v53, v46)))
              {
                goto LABEL_85;
              }
              if (v53 == (const void *)-1)
                break;
              v49 = v97 + v51;
              ++v97;
            }
          }
          sub_1C505C3A0((uint64_t)&v113, (unint64_t)__p);
LABEL_85:
          if (v112 >= 0)
            v54 = (unsigned __int8 *)&__dst;
          else
            v54 = (unsigned __int8 *)__dst;
          if (v112 >= 0)
            v55 = HIBYTE(v112) & 0x7F;
          else
            v55 = v111;
          v56 = sub_1C4FB7E80(*(uint64_t **)(v88 + 112), v54, v55);
          v28 = v94;
          v6 = v95;
          if (!v56 || *(_BYTE *)(v56 + 16))
          {
            v57 = (llvm::UndefValue *)v111;
            if (v112 >= 0)
              v58 = (llvm::UndefValue *)&__dst;
            else
              v58 = (llvm::UndefValue *)__dst;
            if (v112 >= 0)
              v57 = (llvm::UndefValue *)(HIBYTE(v112) & 0x7F);
            v59 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 56) + 40);
            v60 = *(uint64_t ***)v9;
            v61 = v100;
            v62 = *(unsigned __int8 *)(*(_QWORD *)v9 + 8);
            v63 = v62 == 7 || v62 == 9;
            v98 = (llvm::Type *)v100;
            v93 = v57;
            if (!v63 && ((v100 & 0xFFFFFFFF00000000) == 0x100000000 || v100 != 1))
            {
              if ((v100 & 0xFFFFFFFF00000000) == 0x100000000)
                llvm::ScalableVectorType::get(v60, (llvm::Type *)v100);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v60, (llvm::Type *)v100);
              v61 = (unint64_t)v98;
            }
            v118 = v95;
            v119 = 0x400000000;
            v64 = *(_DWORD *)(v9 + 20);
            v65 = *(unsigned __int8 *)(v9 + 16);
            v91 = v60;
            if (v65 == 84)
            {
              v66 = 0;
            }
            else
            {
              if (v65 == 39)
                v66 = (*(_DWORD *)(v9 + 80) + 1);
              else
                v66 = 2;
              v28 = v94;
              v6 = v95;
              v61 = (unint64_t)v98;
            }
            v67 = v64 & 0x7FFFFFF;
            v68 = (uint64_t ****)(v9 - 32 * v67);
            if (v64 < 0)
            {
              v87 = (uint64_t)*(v68 - 1);
              if ((v87 & 0xFFFFFFFF0) != 0)
                v69 = (*((_DWORD *)v68 - 3) - *(_DWORD *)((char *)v68 - v87));
              else
                v69 = 0;
              v28 = v94;
              v6 = v95;
              v61 = (unint64_t)v98;
            }
            else
            {
              v69 = 0;
            }
            if (v68 == (uint64_t ****)&v12[-4 * v66 + -4 * v69])
            {
              v78 = 0;
              v81 = v6;
            }
            else
            {
              v89 = v58;
              v90 = v59;
              v70 = v61 & 0xFFFFFFFF00000000;
              v72 = (v61 & 0xFFFFFFFF00000000) != 0x100000000 && (_DWORD)v61 == 1;
              v73 = 32 * v67 - 32 * v66 - 32 * v69 - 32;
              do
              {
                v74 = **v68;
                v75 = *((unsigned __int8 *)v74 + 8);
                v76 = v75 == 7 || v75 == 9;
                if (!v76 && !v72)
                {
                  v79 = **v68;
                  if (v70 == 0x100000000)
                    llvm::ScalableVectorType::get(v79, v98);
                  else
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v79, v98);
                  v74 = v80;
                }
                v77 = v119;
                if (v119 >= (unint64_t)HIDWORD(v119))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v95, v119 + 1, 8);
                  v77 = v119;
                }
                v118[v77] = (uint64_t)v74;
                v78 = v119 + 1;
                LODWORD(v119) = v119 + 1;
                v68 += 4;
                v73 -= 32;
              }
              while (v73);
              v81 = v118;
              v28 = v94;
              v58 = v89;
              v59 = v90;
            }
            v82 = (llvm::PointerType *)llvm::FunctionType::get(v91, v81, v78, 0);
            v117 = 261;
            v116[0] = v58;
            v116[1] = v93;
            v83 = (uint64_t *)operator new(0x80uLL);
            v84 = (llvm::Function *)(v83 + 1);
            *((_DWORD *)v83 + 7) = *((_DWORD *)v83 + 7) & 0x38000000 | 0x40000000;
            *v83 = 0;
            llvm::Function::Function(v83 + 1, v82, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v116, (uint64_t)v59);
            v85 = *v12;
            if (!*v12 || *(_BYTE *)(v85 + 16) || *(_QWORD *)(v85 + 24) != *(_QWORD *)(v9 + 72))
              v85 = 0;
            llvm::Function::copyAttributesFrom(v84, (const llvm::Function *)v85);
            v116[0] = v84;
            sub_1C5F50CB4(v59, "llvm.compiler.used", 0x12uLL, v116, 1);
            v6 = v95;
            if (v118 != v95)
              free(v118);
          }
          if (v109 < 0)
            operator delete(__p[0]);
          v37 = HIBYTE(v112);
        }
        else
        {
          v6 = v95;
        }
        if (v37 < 0)
          operator delete(__dst);
        v27 = 2 * v100;
        LODWORD(v100) = 2 * v100;
        if (HIDWORD(v100) == 1 && HIDWORD(v102) != 1)
          goto LABEL_165;
      }
    }
LABEL_34:
    v5 = *(_QWORD *)(v5 + 8);
    v25 = i - 24;
    if (!i)
      v25 = 0;
    if (v5 == v25 + 40)
      break;
LABEL_41:
    if (i == v2)
      return result;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v2)
      return result;
    v26 = i - 24;
    if (!i)
      v26 = 0;
    v5 = *(_QWORD *)(v26 + 48);
    if (v5 != v26 + 40)
      goto LABEL_41;
  }
}

uint64_t sub_1C5F0B938(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Inject TLI Mappings";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "inject-tli-mappings";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::InjectTLIMappingsLegacy::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::InjectTLIMappingsLegacy>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeInstNamerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8373F8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F0BA28;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8373F8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F0BA28(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Assign names to anonymous instructions";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "instnamer";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5881;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F0BCDC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F0BAB8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5881;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A97B0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8373F8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F0BA28;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8373F8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5F0BB80(llvm::Function *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char *v5;
  char *v6;
  uint64_t ***v7;
  uint64_t **v8;
  uint64_t **j;
  uint64_t **v10;
  _QWORD v11[4];
  __int16 v12;

  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 11);
LABEL_3:
    v3 = v2;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  v2 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_3;
  llvm::Function::BuildLazyArguments(this);
  v3 = *((_QWORD *)this + 11);
LABEL_4:
  for (i = v3 + 40 * *((_QWORD *)this + 12); v2 != i; v2 += 40)
  {
    if ((*(_BYTE *)(v2 + 23) & 0x10) == 0)
    {
      v11[0] = "arg";
      v12 = 259;
      llvm::Value::setName((uint64_t ***)v2, (uint64_t)v11);
    }
  }
  v5 = (char *)this + 72;
  v6 = (char *)*((_QWORD *)this + 10);
  if (v6 != (char *)this + 72)
  {
    do
    {
      if (v6)
        v7 = (uint64_t ***)(v6 - 24);
      else
        v7 = 0;
      if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
      {
        v11[0] = "bb";
        v12 = 259;
        llvm::Value::setName(v7, (uint64_t)v11);
      }
      v8 = (uint64_t **)(v7 + 5);
      for (j = v7[6]; j != v8; j = (uint64_t **)j[1])
      {
        if (j)
          v10 = j - 3;
        else
          v10 = 0;
        if ((*((_BYTE *)v10 + 23) & 0x10) == 0 && *((_BYTE *)*v10 + 8) != 7)
        {
          v11[0] = "i";
          v12 = 259;
          llvm::Value::setName((uint64_t ***)v10, (uint64_t)v11);
        }
      }
      v6 = (char *)*((_QWORD *)v6 + 1);
    }
    while (v6 != v5);
  }
}

uint64_t sub_1C5F0BCDC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F0BAB8(v0);
}

void sub_1C5F0BD08(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5F0BD2C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5F0BD38(int a1, llvm::Function *this)
{
  sub_1C5F0BB80(this);
  return 1;
}

uint64_t llvm::expandRemainder(llvm *this, llvm::BinaryOperator *a2)
{
  llvm *v2;
  const llvm::APInt *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::ConstantInt *v7;
  unint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  llvm::Value *v22;
  BOOL v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  BOOL v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD **v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  llvm::BinaryOperator *v53;
  unsigned __int8 *v54;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  __int16 v59;
  void *v60[2];
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  uint64_t v65;

  v2 = this;
  v65 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v60, (uint64_t)this, 0, 0, 0);
  if (*((_BYTE *)v2 + 16) != 51)
    goto LABEL_38;
  v4 = (_QWORD *)*((_QWORD *)v2 - 8);
  v5 = (_QWORD *)*((_QWORD *)v2 - 4);
  v6 = *v64;
  if ((*(_DWORD *)(*v4 + 8) & 0xFFFFFF00) != 0x4000)
  {
    v7 = *(llvm::ConstantInt **)(v6 + 1960);
    v11 = *(unsigned int *)(v6 + 1968);
    v58 = v11 >> 8;
    if (v11 >> 8 <= 0x40)
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v10 = (unsigned __int8 *)(v12 & 0x1F);
      goto LABEL_13;
    }
    v56 = 31;
LABEL_71:
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v56, 0);
    goto LABEL_14;
  }
  v7 = *(llvm::ConstantInt **)(v6 + 1984);
  v8 = *(unsigned int *)(v6 + 1992);
  v58 = v8 >> 8;
  if (v8 >> 8 > 0x40)
  {
    v56 = 63;
    goto LABEL_71;
  }
  if (v8 <= 0xFF)
    v9 = 0;
  else
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8);
  v10 = (unsigned __int8 *)(v9 & 0x3F);
LABEL_13:
  v57 = v10;
LABEL_14:
  v13 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v57, v3);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v59 = 257;
  v14 = sub_1C534E5D8((uint64_t)v60, (uint64_t)v4, (uint64_t)v13, (uint64_t)&v57, 0);
  v59 = 257;
  v15 = sub_1C534E5D8((uint64_t)v60, (uint64_t)v5, (uint64_t)v13, (uint64_t)&v57, 0);
  v59 = 257;
  v16 = sub_1C506EC1C((uint64_t *)v60, v4, v14, (uint64_t)&v57);
  v59 = 257;
  v17 = sub_1C506EC1C((uint64_t *)v60, v5, v15, (uint64_t)&v57);
  v59 = 257;
  v18 = (_QWORD *)sub_1C47733F8((uint64_t)v60, (uint64_t)v16, v14, (uint64_t)&v57, 0, 0);
  v59 = 257;
  v19 = sub_1C47733F8((uint64_t)v60, (uint64_t)v17, v15, (uint64_t)&v57, 0, 0);
  v59 = 257;
  v20 = sub_1C538EDCC((uint64_t *)v60, v18, v19, (uint64_t)&v57);
  v59 = 257;
  v21 = sub_1C506EC1C((uint64_t *)v60, v20, v14, (uint64_t)&v57);
  v59 = 257;
  v22 = (llvm::Value *)sub_1C47733F8((uint64_t)v60, (uint64_t)v21, v14, (uint64_t)&v57, 0, 0);
  if (v20)
    v23 = v20[16] >= 0x1Cu;
  else
    v23 = 0;
  if (v23)
  {
    v62 = *((_QWORD *)v20 + 5);
    v63 = v20 + 24;
    v24 = (unsigned __int8 *)*((_QWORD *)v20 + 6);
    v57 = v24;
    if (v24)
    {
      llvm::MetadataTracking::track((uint64_t)&v57, v24, 2);
      v25 = v57;
    }
    else
    {
      v25 = 0;
    }
    sub_1C4774EF4((uint64_t)v60, 0, (uint64_t)v25);
    if (v57)
      llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  }
  v26 = (unsigned __int8 *)v2 + 24;
  v27 = v63;
  llvm::Value::doRAUW(v2, v22, (llvm::Value *)1);
  v28 = *((_DWORD *)v2 + 5);
  if ((v28 & 0x40000000) != 0)
  {
    v30 = (char *)*((_QWORD *)v2 - 1);
    v29 = v28 & 0x7FFFFFF;
    if (v29)
    {
LABEL_26:
      v31 = 32 * v29;
      v32 = (_QWORD **)(v30 + 16);
      do
      {
        if (*(v32 - 2))
        {
          **v32 = *(v32 - 1);
          v33 = (uint64_t)*(v32 - 1);
          if (v33)
            *(_QWORD *)(v33 + 16) = *v32;
        }
        *(v32 - 2) = 0;
        v32 += 4;
        v31 -= 32;
      }
      while (v31);
    }
  }
  else
  {
    v29 = v28 & 0x7FFFFFF;
    v30 = (char *)v2 - 32 * v29;
    if (v29)
      goto LABEL_26;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v2 + 5) + 40, (uint64_t ***)v2);
  v34 = *((_QWORD *)v2 + 3);
  v35 = (_QWORD *)*((_QWORD *)v2 + 4);
  *v35 = v34;
  *(_QWORD *)(v34 + 8) = v35;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v2 + 4) = 0;
  llvm::Value::deleteValue(v2);
  if (v26 == v27)
    goto LABEL_60;
  if (v63)
    v36 = v63 - 24;
  else
    v36 = 0;
  if (v36[16] - 41 >= 0x12)
    v2 = 0;
  else
    v2 = (llvm *)v36;
LABEL_38:
  v37 = *((_QWORD *)v2 - 8);
  v38 = *((_QWORD *)v2 - 4);
  v59 = 257;
  v39 = sub_1C538E6F8((uint64_t)v60, v37, v38, (uint64_t)&v57, 0);
  v59 = 257;
  v40 = sub_1C4EC4040((uint64_t)v60, v38, v39, (uint64_t)&v57, 0, 0);
  v59 = 257;
  v41 = (llvm::Value *)sub_1C47733F8((uint64_t)v60, v37, v40, (uint64_t)&v57, 0, 0);
  if (v39)
    v42 = *(unsigned __int8 *)(v39 + 16) >= 0x1Cu;
  else
    v42 = 0;
  if (v42)
  {
    v62 = *(_QWORD *)(v39 + 40);
    v63 = (unsigned __int8 *)(v39 + 24);
    v43 = *(unsigned __int8 **)(v39 + 48);
    v57 = v43;
    if (v43)
    {
      llvm::MetadataTracking::track((uint64_t)&v57, v43, 2);
      v44 = v57;
    }
    else
    {
      v44 = 0;
    }
    sub_1C4774EF4((uint64_t)v60, 0, (uint64_t)v44);
    if (v57)
      llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  }
  llvm::Value::doRAUW(v2, v41, (llvm::Value *)1);
  v45 = *((_DWORD *)v2 + 5);
  if ((v45 & 0x40000000) != 0)
  {
    v47 = (char *)*((_QWORD *)v2 - 1);
    v46 = v45 & 0x7FFFFFF;
    if (v46)
    {
LABEL_49:
      v48 = 32 * v46;
      v49 = (_QWORD **)(v47 + 16);
      do
      {
        if (*(v49 - 2))
        {
          **v49 = *(v49 - 1);
          v50 = (uint64_t)*(v49 - 1);
          if (v50)
            *(_QWORD *)(v50 + 16) = *v49;
        }
        *(v49 - 2) = 0;
        v49 += 4;
        v48 -= 32;
      }
      while (v48);
    }
  }
  else
  {
    v46 = v45 & 0x7FFFFFF;
    v47 = (char *)v2 - 32 * v46;
    if (v46)
      goto LABEL_49;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v2 + 5) + 40, (uint64_t ***)v2);
  v51 = *((_QWORD *)v2 + 3);
  v52 = (_QWORD *)*((_QWORD *)v2 + 4);
  *v52 = v51;
  *(_QWORD *)(v51 + 8) = v52;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  llvm::Value::deleteValue(v2);
  if (v63)
    v54 = v63 - 24;
  else
    v54 = 0;
  if (v63 && v54[16] - 59 >= 0xFFFFFFEE)
    llvm::expandDivision((llvm *)v54, v53);
LABEL_60:
  if (v60[0] != &v61)
    free(v60[0]);
  return 1;
}

uint64_t llvm::expandDivision(llvm *this, llvm::BinaryOperator *a2)
{
  llvm *v2;
  const llvm::APInt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ConstantInt *v7;
  unint64_t v8;
  char v9;
  char *v10;
  unint64_t v11;
  char v12;
  llvm::ValueHandleBase *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  llvm::Value *v23;
  BOOL v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD **v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  llvm::ConstantInt **v38;
  uint64_t v39;
  llvm::ConstantInt *v40;
  const llvm::APInt *v41;
  llvm::ConstantInt *v42;
  unsigned int v43;
  char v44;
  const llvm::APInt *v45;
  const llvm::APInt *v46;
  llvm::ConstantInt *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  llvm::ConstantInt *v51;
  const llvm::APInt *v52;
  llvm::ConstantInt *v53;
  unsigned int v54;
  char v55;
  const llvm::APInt *v56;
  unsigned int v57;
  unint64_t v58;
  const llvm::APInt *v59;
  uint64_t v60;
  llvm::ValueHandleBase *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t Declaration;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t ***v71;
  int v72;
  int v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t **v114;
  uint64_t v115;
  uint64_t **v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  llvm::Value *v122;
  _DWORD *v123;
  _DWORD *v124;
  uint64_t v125;
  llvm::Value *v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  unsigned __int8 **v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  llvm::Value *v135;
  uint64_t v136;
  llvm::Value *v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  llvm::Value *v141;
  _QWORD *v142;
  char *v143;
  char *v144;
  unsigned __int8 **v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  llvm::Value *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  llvm::Value *v154;
  char *v155;
  char *v156;
  unsigned __int8 **v157;
  int v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  llvm::PHINode *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  llvm::Value *v173;
  llvm::Value *v174;
  _DWORD *v175;
  _DWORD *v176;
  uint64_t v177;
  llvm::Value *v178;
  _QWORD *v179;
  char *v180;
  char *v181;
  unsigned __int8 **v182;
  int v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  llvm::PHINode *v187;
  llvm::PHINode *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  llvm::Value *v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  unsigned __int8 **v197;
  int v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  llvm::PHINode *v202;
  int v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  _QWORD **v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v212;
  char *v213;
  llvm::ValueHandleBase **v214;
  _QWORD *v215;
  uint64_t v216;
  llvm::ValueHandleBase ***v217;
  uint64_t v218;
  char *v219;
  char *v220;
  unsigned __int8 **v221;
  int v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  char *v226;
  char *v227;
  llvm::ValueHandleBase **v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  llvm::ValueHandleBase ***v232;
  char *v233;
  char *v234;
  unsigned __int8 **v235;
  int v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  char *v240;
  char *v241;
  llvm::ValueHandleBase **v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  llvm::ValueHandleBase ***v246;
  char *v247;
  char *v248;
  unsigned __int8 **v249;
  int v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  llvm::ConstantInt *v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  llvm::PHINode *v264;
  uint64_t v265;
  _QWORD *v266;
  llvm::PHINode *v267;
  llvm::PHINode *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  llvm::Value *Select;
  uint64_t *v273;
  llvm::ValueAsMetadata *v274;
  llvm::ValueHandleBase *Signed;
  uint64_t ***v276;
  uint64_t v277;
  llvm::ValueHandleBase *v278;
  uint64_t v279;
  llvm::BasicBlock *v280;
  llvm::ValueHandleBase *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  llvm::BasicBlock *v285;
  llvm::PHINode *v286;
  llvm::PHINode *v287;
  _QWORD *v288;
  uint64_t *v289;
  char *v290;
  uint64_t v291;
  const char *v292;
  __int16 v293;
  unsigned __int8 *v294;
  void *v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t ***v298;
  uint64_t *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 *v303;
  llvm::ValueHandleBase *v304;
  __int16 v305;
  uint64_t v306;

  v2 = this;
  v306 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v295, (uint64_t)this, 0, 0, 0);
  if (*((_BYTE *)v2 + 16) != 48)
    goto LABEL_38;
  v4 = *((_QWORD *)v2 - 8);
  v5 = *((_QWORD *)v2 - 4);
  v6 = *v300;
  if ((*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFF00) != 0x4000)
  {
    v7 = *(llvm::ConstantInt **)(v6 + 1960);
    v11 = *(unsigned int *)(v6 + 1968);
    LODWORD(v291) = v11 >> 8;
    if (v11 >> 8 <= 0x40)
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v10 = (char *)(v12 & 0x1F);
      goto LABEL_13;
    }
    v258 = 31;
LABEL_299:
    llvm::APInt::initSlowCase((llvm::APInt *)&v290, v258, 0);
    goto LABEL_14;
  }
  v7 = *(llvm::ConstantInt **)(v6 + 1984);
  v8 = *(unsigned int *)(v6 + 1992);
  LODWORD(v291) = v8 >> 8;
  if (v8 >> 8 > 0x40)
  {
    v258 = 63;
    goto LABEL_299;
  }
  if (v8 <= 0xFF)
    v9 = 0;
  else
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8);
  v10 = (char *)(v9 & 0x3F);
LABEL_13:
  v290 = v10;
LABEL_14:
  v13 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v290, v3);
  if (v291 >= 0x41 && v290)
    MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
  v293 = 257;
  v14 = (_QWORD *)sub_1C534E5D8((uint64_t)&v295, v4, (uint64_t)v13, (uint64_t)&v290, 0);
  v293 = 257;
  v15 = (_QWORD *)sub_1C534E5D8((uint64_t)&v295, v5, (uint64_t)v13, (uint64_t)&v290, 0);
  v293 = 257;
  v16 = sub_1C506EC1C((uint64_t *)&v295, v14, v4, (uint64_t)&v290);
  v293 = 257;
  v17 = sub_1C47733F8((uint64_t)&v295, (uint64_t)v16, (uint64_t)v14, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v18 = sub_1C506EC1C((uint64_t *)&v295, v15, v5, (uint64_t)&v290);
  v293 = 257;
  v19 = sub_1C47733F8((uint64_t)&v295, (uint64_t)v18, (uint64_t)v15, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v20 = sub_1C506EC1C((uint64_t *)&v295, v15, (uint64_t)v14, (uint64_t)&v290);
  v293 = 257;
  v21 = sub_1C538E6F8((uint64_t)&v295, v17, v19, (uint64_t)&v290, 0);
  v293 = 257;
  v22 = sub_1C506EC1C((uint64_t *)&v295, (_QWORD *)v21, (uint64_t)v20, (uint64_t)&v290);
  v293 = 257;
  v23 = (llvm::Value *)sub_1C47733F8((uint64_t)&v295, (uint64_t)v22, (uint64_t)v20, (uint64_t)&v290, 0, 0);
  if (v21)
    v24 = *(unsigned __int8 *)(v21 + 16) >= 0x1Cu;
  else
    v24 = 0;
  if (v24)
  {
    v298 = *(uint64_t ****)(v21 + 40);
    v299 = (uint64_t *)(v21 + 24);
    v25 = *(unsigned __int8 **)(v21 + 48);
    v290 = (char *)v25;
    if (v25)
    {
      llvm::MetadataTracking::track((uint64_t)&v290, v25, 2);
      v26 = (unsigned __int8 *)v290;
    }
    else
    {
      v26 = 0;
    }
    sub_1C4774EF4((uint64_t)&v295, 0, (uint64_t)v26);
    if (v290)
      llvm::MetadataTracking::untrack((uint64_t)&v290, (unsigned __int8 *)v290);
  }
  v27 = (uint64_t *)((char *)v2 + 24);
  v28 = v299;
  llvm::Value::doRAUW(v2, v23, (llvm::Value *)1);
  v29 = *((_DWORD *)v2 + 5);
  if ((v29 & 0x40000000) != 0)
  {
    v31 = (char *)*((_QWORD *)v2 - 1);
    v30 = v29 & 0x7FFFFFF;
    if (v30)
    {
LABEL_26:
      v32 = 32 * v30;
      v33 = (_QWORD **)(v31 + 16);
      do
      {
        if (*(v33 - 2))
        {
          **v33 = *(v33 - 1);
          v34 = (uint64_t)*(v33 - 1);
          if (v34)
            *(_QWORD *)(v34 + 16) = *v33;
        }
        *(v33 - 2) = 0;
        v33 += 4;
        v32 -= 32;
      }
      while (v32);
    }
  }
  else
  {
    v30 = v29 & 0x7FFFFFF;
    v31 = (char *)v2 - 32 * v30;
    if (v30)
      goto LABEL_26;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v2 + 5) + 40, (uint64_t ***)v2);
  v35 = *((_QWORD *)v2 + 3);
  v36 = (_QWORD *)*((_QWORD *)v2 + 4);
  *v36 = v35;
  *(_QWORD *)(v35 + 8) = v36;
  *v27 = 0;
  *((_QWORD *)v2 + 4) = 0;
  llvm::Value::deleteValue(v2);
  if (v27 == v28)
    goto LABEL_207;
  if (v299)
    v37 = v299 - 3;
  else
    v37 = 0;
  if (*((unsigned __int8 *)v37 + 16) - 41 >= 0x12)
    v2 = 0;
  else
    v2 = (llvm *)v37;
LABEL_38:
  v286 = (llvm::PHINode *)*((_QWORD *)v2 - 4);
  v283 = *((_QWORD *)v2 - 8);
  v38 = *(llvm::ConstantInt ***)v283;
  v39 = *v300;
  if ((*(_DWORD *)(*(_QWORD *)v283 + 8) & 0xFFFFFF00) != 0x4000)
  {
    v51 = *(llvm::ConstantInt **)(v39 + 1960);
    LODWORD(v291) = *(_DWORD *)(v39 + 1968) >> 8;
    if (v291 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v290, 0, 0);
    else
      v290 = 0;
    v289 = (uint64_t *)llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v290, v3);
    if (v291 >= 0x41 && v290)
      MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
    v53 = *(llvm::ConstantInt **)(*v300 + 1960);
    v54 = *(_DWORD *)(*v300 + 1968);
    LODWORD(v291) = v54 >> 8;
    if (v54 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v290, 1, 0);
    }
    else
    {
      if (v54 <= 0xFF)
        v55 = 0;
      else
        v55 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v54);
      v290 = (char *)(v55 & 1);
    }
    v281 = llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v290, v52);
    if (v291 >= 0x41 && v290)
      MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
    Signed = llvm::ConstantInt::getSigned(v38, -1, v56);
    v47 = *(llvm::ConstantInt **)(*v300 + 1960);
    v57 = *(_DWORD *)(*v300 + 1968);
    LODWORD(v291) = v57 >> 8;
    if (v57 >> 8 <= 0x40)
    {
      if (v57 <= 0xFF)
        LOBYTE(v58) = 0;
      else
        v58 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v57);
      v50 = (unsigned __int8 *)(v58 & 0x1F);
      goto LABEL_65;
    }
    v257 = 31;
LABEL_294:
    llvm::APInt::initSlowCase((llvm::APInt *)&v290, v257, 0);
    goto LABEL_66;
  }
  v40 = *(llvm::ConstantInt **)(v39 + 1984);
  LODWORD(v291) = *(_DWORD *)(v39 + 1992) >> 8;
  if (v291 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v290, 0, 0);
  else
    v290 = 0;
  v289 = (uint64_t *)llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v290, v3);
  if (v291 >= 0x41 && v290)
    MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
  v42 = *(llvm::ConstantInt **)(*v300 + 1984);
  v43 = *(_DWORD *)(*v300 + 1992);
  LODWORD(v291) = v43 >> 8;
  if (v43 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v290, 1, 0);
  }
  else
  {
    if (v43 <= 0xFF)
      v44 = 0;
    else
      v44 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v43);
    v290 = (char *)(v44 & 1);
  }
  v281 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v290, v41);
  if (v291 >= 0x41 && v290)
    MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
  Signed = llvm::ConstantInt::getSigned(v38, -1, v45);
  v47 = *(llvm::ConstantInt **)(*v300 + 1984);
  v48 = *(_DWORD *)(*v300 + 1992);
  LODWORD(v291) = v48 >> 8;
  if (v48 >> 8 > 0x40)
  {
    v257 = 63;
    goto LABEL_294;
  }
  if (v48 <= 0xFF)
    LOBYTE(v49) = 0;
  else
    v49 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v48);
  v50 = (unsigned __int8 *)(v49 & 0x3F);
LABEL_65:
  v290 = (char *)v50;
LABEL_66:
  v278 = llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v290, v46);
  if (v291 >= 0x41 && v290)
    MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
  v60 = *v300;
  v61 = *(llvm::ValueHandleBase **)(*v300 + 1560);
  if (!v61)
  {
    v254 = *(llvm::ConstantInt **)(v60 + 1888);
    v255 = *(_DWORD *)(v60 + 1896);
    LODWORD(v291) = v255 >> 8;
    if (v255 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v290, 1, 0);
    }
    else
    {
      if (v255 <= 0xFF)
        LOBYTE(v256) = 0;
      else
        v256 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v255);
      v290 = (char *)(v256 & 1);
    }
    v61 = llvm::ConstantInt::get(v254, (llvm::LLVMContext *)&v290, v59);
    if (v291 >= 0x41 && v290)
      MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
    *(_QWORD *)(v60 + 1560) = v61;
  }
  v62 = v298[7];
  v63 = v62[5];
  v290 = (char *)v38;
  Declaration = llvm::Intrinsic::getDeclaration(v63, 52, (uint64_t *)&v290, 1);
  v65 = (uint64_t *)v298;
  v274 = v2;
  if ((*((_BYTE *)v298 + 23) & 0x10) != 0)
  {
    v66 = ***v298;
    v67 = *(_QWORD *)(v66 + 152);
    v68 = *(unsigned int *)(v66 + 168);
    if ((_DWORD)v68)
    {
      LODWORD(v69) = (v68 - 1) & ((v298 >> 4) ^ (v298 >> 9));
      v70 = v67 + 16 * v69;
      v71 = *(uint64_t ****)v70;
      if (*(uint64_t ****)v70 == v298)
      {
LABEL_76:
        v74 = *(_QWORD **)(v70 + 8);
        v77 = *v74;
        v75 = (unsigned __int8 *)(v74 + 2);
        v76 = v77;
        goto LABEL_77;
      }
      v72 = 1;
      while (v71 != (uint64_t ***)-4096)
      {
        v73 = v69 + v72++;
        v69 = v73 & (v68 - 1);
        v71 = *(uint64_t ****)(v67 + 16 * v69);
        if (v71 == v298)
        {
          v70 = v67 + 16 * v69;
          goto LABEL_76;
        }
      }
    }
    v70 = v67 + 16 * v68;
    goto LABEL_76;
  }
  v76 = 0;
  v75 = (unsigned __int8 *)&byte_1C871356D;
LABEL_77:
  v293 = 773;
  v290 = (char *)v75;
  v291 = v76;
  v292 = "_udiv-special-cases";
  llvm::Value::setName(v298, (uint64_t)&v290);
  v290 = "udiv-end";
  v293 = 259;
  v78 = llvm::BasicBlock::splitBasicBlock(v65, v299, (uint64_t)&v290, 0);
  v79 = v300;
  v290 = "udiv-loop-exit";
  v293 = 259;
  v80 = operator new();
  *(_QWORD *)v80 = *v79 + 1600;
  *(_QWORD *)(v80 + 8) = 0;
  v81 = *(_DWORD *)(v80 + 20) & 0xC0000000;
  *(_QWORD *)(v80 + 24) = 0;
  v82 = v80 + 24;
  *(_DWORD *)(v80 + 16) = 22;
  *(_DWORD *)(v80 + 20) = v81;
  *(_QWORD *)(v80 + 32) = 0;
  *(_QWORD *)(v80 + 40) = v80 + 40;
  v273 = (uint64_t *)(v80 + 40);
  *(_QWORD *)(v80 + 48) = v80 + 40;
  *(_QWORD *)(v80 + 56) = 0;
  v277 = (uint64_t)v65;
  if (v62)
  {
    if (v78)
      v83 = (uint64_t *)(v78 + 24);
    else
      v83 = (uint64_t *)(v62 + 9);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v62 + 9), (_QWORD *)v80);
    v84 = *v83;
    *(_QWORD *)(v80 + 24) = *v83;
    *(_QWORD *)(v80 + 32) = v83;
    *(_QWORD *)(v84 + 8) = v82;
    *v83 = v82;
    v65 = (uint64_t *)v277;
  }
  v288 = (_QWORD *)v78;
  v285 = (llvm::BasicBlock *)v80;
  llvm::Value::setName((uint64_t ***)v80, (uint64_t)&v290);
  v85 = v300;
  v290 = "udiv-do-while";
  v293 = 259;
  v86 = operator new();
  *(_QWORD *)v86 = *v85 + 1600;
  *(_QWORD *)(v86 + 8) = 0;
  v266 = (_QWORD *)(v86 + 8);
  v87 = *(_DWORD *)(v86 + 20) & 0xC0000000;
  *(_QWORD *)(v86 + 24) = 0;
  v88 = v86 + 24;
  *(_DWORD *)(v86 + 16) = 22;
  *(_DWORD *)(v86 + 20) = v87;
  *(_QWORD *)(v86 + 32) = 0;
  *(_QWORD *)(v86 + 40) = v86 + 40;
  *(_QWORD *)(v86 + 48) = v86 + 40;
  *(_QWORD *)(v86 + 56) = 0;
  if (v62)
  {
    if (v78)
      v89 = (uint64_t *)(v78 + 24);
    else
      v89 = (uint64_t *)(v62 + 9);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v62 + 9), (_QWORD *)v86);
    v90 = *v89;
    *(_QWORD *)(v86 + 24) = *v89;
    *(_QWORD *)(v86 + 32) = v89;
    *(_QWORD *)(v90 + 8) = v88;
    *v89 = v88;
  }
  llvm::Value::setName((uint64_t ***)v86, (uint64_t)&v290);
  v91 = v300;
  v290 = "udiv-preheader";
  v293 = 259;
  v92 = operator new();
  *(_QWORD *)v92 = *v91 + 1600;
  *(_QWORD *)(v92 + 8) = 0;
  v93 = *(_DWORD *)(v92 + 20) & 0xC0000000;
  *(_QWORD *)(v92 + 24) = 0;
  v94 = v92 + 24;
  *(_DWORD *)(v92 + 16) = 22;
  *(_DWORD *)(v92 + 20) = v93;
  *(_QWORD *)(v92 + 32) = 0;
  *(_QWORD *)(v92 + 40) = v92 + 40;
  v270 = (uint64_t *)(v92 + 40);
  *(_QWORD *)(v92 + 48) = v92 + 40;
  *(_QWORD *)(v92 + 56) = 0;
  v95 = (uint64_t)v38;
  v280 = (llvm::BasicBlock *)v92;
  if (v62)
  {
    if (v288)
      v96 = v288 + 3;
    else
      v96 = (uint64_t *)(v62 + 9);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v62 + 9), (_QWORD *)v92);
    v92 = (uint64_t)v280;
    v97 = *v96;
    *((_QWORD *)v280 + 3) = *v96;
    *((_QWORD *)v280 + 4) = v96;
    *(_QWORD *)(v97 + 8) = v94;
    *v96 = v94;
    v65 = (uint64_t *)v277;
  }
  llvm::Value::setName((uint64_t ***)v92, (uint64_t)&v290);
  v98 = v300;
  v290 = "udiv-bb1";
  v293 = 259;
  v99 = operator new();
  *(_QWORD *)v99 = *v98 + 1600;
  *(_QWORD *)(v99 + 8) = 0;
  v100 = *(_DWORD *)(v99 + 20) & 0xC0000000;
  *(_QWORD *)(v99 + 24) = 0;
  v101 = v99 + 24;
  *(_DWORD *)(v99 + 16) = 22;
  *(_DWORD *)(v99 + 20) = v100;
  *(_QWORD *)(v99 + 32) = 0;
  *(_QWORD *)(v99 + 40) = v99 + 40;
  *(_QWORD *)(v99 + 48) = v99 + 40;
  *(_QWORD *)(v99 + 56) = 0;
  if (v62)
  {
    v103 = (uint64_t)(v62 + 9);
    if (v288)
      v104 = v288 + 3;
    else
      v104 = (uint64_t *)(v62 + 9);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v103, (_QWORD *)v99);
    v105 = *v104;
    *(_QWORD *)(v99 + 24) = *v104;
    *(_QWORD *)(v99 + 32) = v104;
    *(_QWORD *)(v105 + 8) = v101;
    *v104 = v101;
  }
  llvm::Value::setName((uint64_t ***)v99, (uint64_t)&v290);
  v106 = (uint64_t *)v65[5];
  v102 = (uint64_t *)(v99 + 40);
  if (v106 == v65 + 5)
  {
    v108 = 0;
  }
  else
  {
    if (v106)
      v107 = v106 - 3;
    else
      v107 = 0;
    if (*((unsigned __int8 *)v107 + 16) - 29 >= 0xB)
      v108 = 0;
    else
      v108 = v107;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v108[5] + 40, (uint64_t ***)v108);
  v109 = v108[3];
  v110 = (_QWORD *)v108[4];
  *v110 = v109;
  *(_QWORD *)(v109 + 8) = v110;
  v108[3] = 0;
  v108[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v108);
  v298 = (uint64_t ***)v65;
  v299 = v65 + 5;
  v293 = 257;
  v111 = (_QWORD *)sub_1C4774B48((uint64_t)&v295, 32, (uint64_t)v286, (uint64_t)v289, (uint64_t)&v290);
  v293 = 257;
  v112 = sub_1C4774B48((uint64_t)&v295, 32, v283, (uint64_t)v289, (uint64_t)&v290);
  v293 = 257;
  v113 = (_QWORD *)sub_1C4773594((uint64_t)&v295, v111, v112, (uint64_t)&v290);
  if (Declaration)
    v114 = *(uint64_t ***)(Declaration + 24);
  else
    v114 = 0;
  v303 = (unsigned __int8 *)v286;
  v304 = v61;
  v293 = 257;
  v115 = sub_1C4774778((uint64_t *)&v295, v114, Declaration, (uint64_t *)&v303, 2, (uint64_t)&v290, 0);
  if (Declaration)
    v116 = *(uint64_t ***)(Declaration + 24);
  else
    v116 = 0;
  v303 = (unsigned __int8 *)v283;
  v304 = v61;
  v293 = 257;
  v117 = sub_1C4774778((uint64_t *)&v295, v116, Declaration, (uint64_t *)&v303, 2, (uint64_t)&v290, 0);
  v293 = 257;
  v118 = (_QWORD *)sub_1C47733F8((uint64_t)&v295, v115, v117, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v119 = sub_1C4774B48((uint64_t)&v295, 34, (uint64_t)v118, (uint64_t)v278, (uint64_t)&v290);
  v293 = 257;
  v120 = (_QWORD *)sub_1C4773594((uint64_t)&v295, v113, v119, (uint64_t)&v290);
  v293 = 257;
  v121 = sub_1C4774B48((uint64_t)&v295, 32, v115, (uint64_t)v278, (uint64_t)&v290);
  v293 = 257;
  Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v295, (uint64_t)v120, v289, v283, (uint64_t)&v290, 0);
  v293 = 257;
  v122 = (llvm::Value *)sub_1C4773594((uint64_t)&v295, v120, v121, (uint64_t)&v290);
  v123 = operator new(0xA0uLL);
  v124 = v123;
  v125 = 0;
  v126 = (llvm::Value *)(v123 + 24);
  v123[29] = v123[29] & 0x38000000 | 3;
  do
  {
    v127 = &v123[v125];
    *v127 = 0;
    v127[1] = 0;
    v127[2] = 0;
    v127[3] = v126;
    v125 += 8;
  }
  while (v125 != 24);
  v276 = (uint64_t ***)v99;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v123 + 24), (llvm::BasicBlock *)v288, (llvm::BasicBlock *)v99, v122, 0);
  v293 = 257;
  (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v126, &v290, v298, v299);
  if (v296)
  {
    v128 = (char *)v295;
    v129 = (char *)v295 + 16 * v296;
    v130 = (unsigned __int8 **)(v124 + 36);
    do
    {
      v131 = *(_DWORD *)v128;
      v132 = (unsigned __int8 *)*((_QWORD *)v128 + 1);
      if (v132)
      {
        if (!v131)
        {
          v303 = (unsigned __int8 *)*((_QWORD *)v128 + 1);
          llvm::MetadataTracking::track((uint64_t)&v303, v132, 2);
          v133 = *v130;
          if (!*v130)
          {
LABEL_126:
            v134 = v303;
            *v130 = v303;
            if (v134)
              llvm::MetadataTracking::retrack((uint64_t)&v303, v134, (uint64_t)(v124 + 36));
            goto LABEL_123;
          }
LABEL_120:
          llvm::MetadataTracking::untrack((uint64_t)(v124 + 36), v133);
          goto LABEL_126;
        }
      }
      else
      {
        v133 = *v130;
        if (!*v130 && (*((_BYTE *)v124 + 119) & 0x20) == 0)
          goto LABEL_123;
        if (!v131)
        {
          v303 = 0;
          if (!v133)
            goto LABEL_126;
          goto LABEL_120;
        }
      }
      llvm::Value::setMetadata(v126, *(_DWORD *)v128, (llvm::MDNode *)v132);
LABEL_123:
      v128 += 16;
    }
    while (v128 != v129);
  }
  v298 = v276;
  v299 = v102;
  v305 = 257;
  v135 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v301 + 16))(v301, v118, v281, 0, 0);
  if (!v135)
  {
    v293 = 257;
    v212 = (char *)operator new(0x80uLL);
    v213 = v212;
    *(_QWORD *)v212 = 0;
    *((_QWORD *)v212 + 2) = 0;
    *((_QWORD *)v212 + 1) = 0;
    *((_QWORD *)v212 + 5) = 0;
    *((_QWORD *)v212 + 6) = 0;
    *((_QWORD *)v212 + 4) = 0;
    v214 = (llvm::ValueHandleBase **)(v212 + 32);
    *((_QWORD *)v212 + 8) = *v118;
    v135 = (llvm::Value *)(v212 + 64);
    *((_QWORD *)v212 + 3) = v212 + 64;
    *((_QWORD *)v212 + 7) = v212 + 64;
    *((_QWORD *)v212 + 9) = 0;
    v212[80] = 41;
    v212[81] = 0;
    *((_WORD *)v212 + 41) = 0;
    *((_DWORD *)v212 + 21) = 2;
    *((_DWORD *)v212 + 30) = 0;
    *(_OWORD *)(v212 + 104) = 0u;
    *(_OWORD *)(v212 + 88) = 0u;
    *(_QWORD *)v212 = v118;
    v215 = v118 + 1;
    v216 = v118[1];
    *((_QWORD *)v212 + 1) = v216;
    if (v216)
      *(_QWORD *)(v216 + 16) = v212 + 8;
    *((_QWORD *)v212 + 2) = v215;
    *v215 = v212;
    if (*((_QWORD *)v212 + 4))
    {
      **((_QWORD **)v212 + 6) = *((_QWORD *)v212 + 5);
      v259 = *((_QWORD *)v212 + 5);
      if (v259)
        *(_QWORD *)(v259 + 16) = *((_QWORD *)v212 + 6);
    }
    *v214 = v281;
    if (v281)
    {
      v217 = (llvm::ValueHandleBase ***)((char *)v281 + 8);
      v218 = *((_QWORD *)v281 + 1);
      *((_QWORD *)v212 + 5) = v218;
      if (v218)
        *(_QWORD *)(v218 + 16) = v212 + 40;
      *((_QWORD *)v212 + 6) = v217;
      *v217 = v214;
    }
    llvm::Value::setName((uint64_t ***)v212 + 8, (uint64_t)&v290);
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v135, &v303, v298, v299);
    if (v296)
    {
      v219 = (char *)v295;
      v220 = (char *)v295 + 16 * v296;
      v221 = (unsigned __int8 **)(v213 + 112);
      do
      {
        v222 = *(_DWORD *)v219;
        v223 = (unsigned __int8 *)*((_QWORD *)v219 + 1);
        if (v223)
        {
          if (!v222)
          {
            v294 = (unsigned __int8 *)*((_QWORD *)v219 + 1);
            llvm::MetadataTracking::track((uint64_t)&v294, v223, 2);
            v224 = *v221;
            if (!*v221)
            {
LABEL_230:
              v225 = v294;
              *v221 = v294;
              if (v225)
                llvm::MetadataTracking::retrack((uint64_t)&v294, v225, (uint64_t)(v213 + 112));
              goto LABEL_227;
            }
LABEL_224:
            llvm::MetadataTracking::untrack((uint64_t)(v213 + 112), v224);
            goto LABEL_230;
          }
        }
        else
        {
          v224 = *v221;
          if (!*v221 && (v213[87] & 0x20) == 0)
            goto LABEL_227;
          if (!v222)
          {
            v294 = 0;
            if (!v224)
              goto LABEL_230;
            goto LABEL_224;
          }
        }
        llvm::Value::setMetadata(v135, *(_DWORD *)v219, (llvm::MDNode *)v223);
LABEL_227:
        v219 += 16;
      }
      while (v219 != v220);
    }
  }
  v293 = 257;
  v136 = sub_1C47733F8((uint64_t)&v295, (uint64_t)v278, (uint64_t)v118, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v269 = sub_1C506E874((uint64_t)&v295, v283, v136, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v137 = (llvm::Value *)sub_1C4774B48((uint64_t)&v295, 32, (uint64_t)v135, (uint64_t)v289, (uint64_t)&v290);
  v138 = operator new(0xA0uLL);
  v139 = v138;
  v140 = 0;
  v141 = (llvm::Value *)(v138 + 24);
  v138[29] = v138[29] & 0x38000000 | 3;
  do
  {
    v142 = &v138[v140];
    *v142 = 0;
    v142[1] = 0;
    v142[2] = 0;
    v142[3] = v141;
    v140 += 8;
  }
  while (v140 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v138 + 24), v285, v280, v137, 0);
  v293 = 257;
  (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v141, &v290, v298, v299);
  if (v296)
  {
    v143 = (char *)v295;
    v144 = (char *)v295 + 16 * v296;
    v145 = (unsigned __int8 **)(v139 + 36);
    do
    {
      v146 = *(_DWORD *)v143;
      v147 = (unsigned __int8 *)*((_QWORD *)v143 + 1);
      if (v147)
      {
        if (!v146)
        {
          v303 = (unsigned __int8 *)*((_QWORD *)v143 + 1);
          llvm::MetadataTracking::track((uint64_t)&v303, v147, 2);
          v148 = *v145;
          if (!*v145)
          {
LABEL_144:
            v149 = v303;
            *v145 = v303;
            if (v149)
              llvm::MetadataTracking::retrack((uint64_t)&v303, v149, (uint64_t)(v139 + 36));
            goto LABEL_141;
          }
LABEL_138:
          llvm::MetadataTracking::untrack((uint64_t)(v139 + 36), v148);
          goto LABEL_144;
        }
      }
      else
      {
        v148 = *v145;
        if (!*v145 && (*((_BYTE *)v139 + 119) & 0x20) == 0)
          goto LABEL_141;
        if (!v146)
        {
          v303 = 0;
          if (!v148)
            goto LABEL_144;
          goto LABEL_138;
        }
      }
      llvm::Value::setMetadata(v141, *(_DWORD *)v143, (llvm::MDNode *)v147);
LABEL_141:
      v143 += 16;
    }
    while (v143 != v144);
  }
  v298 = (uint64_t ***)v280;
  v299 = v270;
  v293 = 257;
  v265 = sub_1C506ED1C((uint64_t)&v295, v283, (uint64_t)v135, (uint64_t)&v290, 0);
  v305 = 257;
  v150 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::PHINode *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v301 + 16))(v301, v286, Signed, 0, 0);
  if (!v150)
  {
    v293 = 257;
    v226 = (char *)operator new(0x80uLL);
    v227 = v226;
    *(_QWORD *)v226 = 0;
    *((_QWORD *)v226 + 2) = 0;
    *((_QWORD *)v226 + 1) = 0;
    *((_QWORD *)v226 + 5) = 0;
    *((_QWORD *)v226 + 6) = 0;
    *((_QWORD *)v226 + 4) = 0;
    v228 = (llvm::ValueHandleBase **)(v226 + 32);
    *((_QWORD *)v226 + 8) = *(_QWORD *)v286;
    v150 = (llvm::Value *)(v226 + 64);
    *((_QWORD *)v226 + 3) = v226 + 64;
    *((_QWORD *)v226 + 7) = v226 + 64;
    *((_QWORD *)v226 + 9) = 0;
    v226[80] = 41;
    v226[81] = 0;
    *((_WORD *)v226 + 41) = 0;
    *((_DWORD *)v226 + 21) = 2;
    *((_DWORD *)v226 + 30) = 0;
    *(_OWORD *)(v226 + 104) = 0u;
    *(_OWORD *)(v226 + 88) = 0u;
    *(_QWORD *)v226 = v286;
    v229 = (_QWORD *)((char *)v286 + 8);
    v230 = *((_QWORD *)v286 + 1);
    *((_QWORD *)v226 + 1) = v230;
    if (v230)
      *(_QWORD *)(v230 + 16) = v226 + 8;
    *((_QWORD *)v226 + 2) = v229;
    *v229 = v226;
    if (*((_QWORD *)v226 + 4))
    {
      **((_QWORD **)v226 + 6) = *((_QWORD *)v226 + 5);
      v260 = *((_QWORD *)v226 + 5);
      if (v260)
        *(_QWORD *)(v260 + 16) = *((_QWORD *)v226 + 6);
    }
    *v228 = Signed;
    if (Signed)
    {
      v232 = (llvm::ValueHandleBase ***)((char *)Signed + 8);
      v231 = *((_QWORD *)Signed + 1);
      *((_QWORD *)v226 + 5) = v231;
      if (v231)
        *(_QWORD *)(v231 + 16) = v226 + 40;
      *((_QWORD *)v226 + 6) = v232;
      *v232 = v228;
    }
    llvm::Value::setName((uint64_t ***)v226 + 8, (uint64_t)&v290);
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v150, &v303, v298, v299);
    if (v296)
    {
      v233 = (char *)v295;
      v234 = (char *)v295 + 16 * v296;
      v235 = (unsigned __int8 **)(v227 + 112);
      do
      {
        v236 = *(_DWORD *)v233;
        v237 = (unsigned __int8 *)*((_QWORD *)v233 + 1);
        if (v237)
        {
          if (!v236)
          {
            v294 = (unsigned __int8 *)*((_QWORD *)v233 + 1);
            llvm::MetadataTracking::track((uint64_t)&v294, v237, 2);
            v238 = *v235;
            if (!*v235)
            {
LABEL_252:
              v239 = v294;
              *v235 = v294;
              if (v239)
                llvm::MetadataTracking::retrack((uint64_t)&v294, v239, (uint64_t)(v227 + 112));
              goto LABEL_249;
            }
LABEL_246:
            llvm::MetadataTracking::untrack((uint64_t)(v227 + 112), v238);
            goto LABEL_252;
          }
        }
        else
        {
          v238 = *v235;
          if (!*v235 && (v227[87] & 0x20) == 0)
            goto LABEL_249;
          if (!v236)
          {
            v294 = 0;
            if (!v238)
              goto LABEL_252;
            goto LABEL_246;
          }
        }
        llvm::Value::setMetadata(v150, *(_DWORD *)v233, (llvm::MDNode *)v237);
LABEL_249:
        v233 += 16;
      }
      while (v233 != v234);
    }
  }
  v271 = (uint64_t)v135;
  v151 = (char *)operator new(0x60uLL);
  v152 = v151;
  *((_DWORD *)v151 + 13) = *((_DWORD *)v151 + 13) & 0x38000000 | 1;
  *(_QWORD *)v151 = 0;
  *((_QWORD *)v151 + 2) = 0;
  *((_QWORD *)v151 + 1) = 0;
  v153 = *(_QWORD *)(v86 + 8);
  *((_QWORD *)v151 + 4) = ***(_QWORD ***)v86 + 1576;
  v154 = (llvm::Value *)(v151 + 32);
  v151[48] = 30;
  *((_DWORD *)v151 + 13) = 1;
  *((_QWORD *)v151 + 3) = v151 + 32;
  *((_QWORD *)v151 + 5) = 0;
  v151[49] = 0;
  *((_WORD *)v151 + 25) = 0;
  *((_DWORD *)v151 + 22) = 0;
  *(_OWORD *)(v151 + 72) = 0u;
  *(_OWORD *)(v151 + 56) = 0u;
  *(_QWORD *)v151 = v86;
  *((_QWORD *)v151 + 1) = v153;
  if (v153)
    *(_QWORD *)(v153 + 16) = v151 + 8;
  *((_QWORD *)v151 + 2) = v266;
  *v266 = v151;
  v293 = 257;
  (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v154, &v290, v298, v299);
  if (v296)
  {
    v155 = (char *)v295;
    v156 = (char *)v295 + 16 * v296;
    v157 = (unsigned __int8 **)(v152 + 80);
    do
    {
      v158 = *(_DWORD *)v155;
      v159 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
      if (v159)
      {
        if (!v158)
        {
          v303 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
          llvm::MetadataTracking::track((uint64_t)&v303, v159, 2);
          v160 = *v157;
          if (!*v157)
          {
LABEL_162:
            v161 = v303;
            *v157 = v303;
            if (v161)
              llvm::MetadataTracking::retrack((uint64_t)&v303, v161, (uint64_t)(v152 + 80));
            goto LABEL_159;
          }
LABEL_156:
          llvm::MetadataTracking::untrack((uint64_t)(v152 + 80), v160);
          goto LABEL_162;
        }
      }
      else
      {
        v160 = *v157;
        if (!*v157 && (v152[55] & 0x20) == 0)
          goto LABEL_159;
        if (!v158)
        {
          v303 = 0;
          if (!v160)
            goto LABEL_162;
          goto LABEL_156;
        }
      }
      llvm::Value::setMetadata(v154, *(_DWORD *)v155, (llvm::MDNode *)v159);
LABEL_159:
      v155 += 16;
    }
    while (v155 != v156);
  }
  v298 = (uint64_t ***)v86;
  v299 = (uint64_t *)(v86 + 40);
  v293 = 257;
  v162 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v163 = (_QWORD *)sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v164 = sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v165 = sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v267 = (llvm::PHINode *)v164;
  v166 = (_QWORD *)sub_1C506E874((uint64_t)&v295, v164, (uint64_t)v281, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v167 = sub_1C506ED1C((uint64_t)&v295, v165, (uint64_t)v278, (uint64_t)&v290, 0);
  v293 = 257;
  v168 = sub_1C4773594((uint64_t)&v295, v166, v167, (uint64_t)&v290);
  v293 = 257;
  v268 = (llvm::PHINode *)v165;
  v169 = sub_1C506E874((uint64_t)&v295, v165, (uint64_t)v281, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v264 = v162;
  v263 = sub_1C4773594((uint64_t)&v295, v162, v169, (uint64_t)&v290);
  v293 = 257;
  v170 = sub_1C47733F8((uint64_t)&v295, (uint64_t)v150, v168, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v171 = (_QWORD *)sub_1C534E5D8((uint64_t)&v295, v170, (uint64_t)v278, (uint64_t)&v290, 0);
  v293 = 257;
  v279 = sub_1C4D89BCC((uint64_t)&v295, v171, (uint64_t)v281, (uint64_t)&v290);
  v293 = 257;
  v172 = sub_1C4D89BCC((uint64_t)&v295, v171, (uint64_t)v286, (uint64_t)&v290);
  v293 = 257;
  v262 = sub_1C47733F8((uint64_t)&v295, v168, v172, (uint64_t)&v290, 0, 0);
  v305 = 257;
  v287 = (llvm::PHINode *)v163;
  v173 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v301 + 16))(v301, v163, Signed, 0, 0);
  if (!v173)
  {
    v293 = 257;
    v240 = (char *)operator new(0x80uLL);
    v241 = v240;
    *(_QWORD *)v240 = 0;
    *((_QWORD *)v240 + 2) = 0;
    *((_QWORD *)v240 + 1) = 0;
    *((_QWORD *)v240 + 5) = 0;
    *((_QWORD *)v240 + 6) = 0;
    *((_QWORD *)v240 + 4) = 0;
    v242 = (llvm::ValueHandleBase **)(v240 + 32);
    *((_QWORD *)v240 + 8) = *v163;
    v173 = (llvm::Value *)(v240 + 64);
    *((_QWORD *)v240 + 3) = v240 + 64;
    *((_QWORD *)v240 + 7) = v240 + 64;
    *((_QWORD *)v240 + 9) = 0;
    v240[80] = 41;
    v240[81] = 0;
    *((_WORD *)v240 + 41) = 0;
    *((_DWORD *)v240 + 21) = 2;
    *((_DWORD *)v240 + 30) = 0;
    *(_OWORD *)(v240 + 104) = 0u;
    *(_OWORD *)(v240 + 88) = 0u;
    *(_QWORD *)v240 = v163;
    v243 = v163 + 1;
    v244 = v163[1];
    *((_QWORD *)v240 + 1) = v244;
    if (v244)
      *(_QWORD *)(v244 + 16) = v240 + 8;
    *((_QWORD *)v240 + 2) = v243;
    *v243 = v240;
    if (*((_QWORD *)v240 + 4))
    {
      **((_QWORD **)v240 + 6) = *((_QWORD *)v240 + 5);
      v261 = *((_QWORD *)v240 + 5);
      if (v261)
        *(_QWORD *)(v261 + 16) = *((_QWORD *)v240 + 6);
    }
    *v242 = Signed;
    if (Signed)
    {
      v246 = (llvm::ValueHandleBase ***)((char *)Signed + 8);
      v245 = *((_QWORD *)Signed + 1);
      *((_QWORD *)v240 + 5) = v245;
      if (v245)
        *(_QWORD *)(v245 + 16) = v240 + 40;
      *((_QWORD *)v240 + 6) = v246;
      *v246 = v242;
    }
    llvm::Value::setName((uint64_t ***)v240 + 8, (uint64_t)&v290);
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v173, &v303, v298, v299);
    if (v296)
    {
      v247 = (char *)v295;
      v248 = (char *)v295 + 16 * v296;
      v249 = (unsigned __int8 **)(v241 + 112);
      do
      {
        v250 = *(_DWORD *)v247;
        v251 = (unsigned __int8 *)*((_QWORD *)v247 + 1);
        if (v251)
        {
          if (!v250)
          {
            v294 = (unsigned __int8 *)*((_QWORD *)v247 + 1);
            llvm::MetadataTracking::track((uint64_t)&v294, v251, 2);
            v252 = *v249;
            if (!*v249)
            {
LABEL_274:
              v253 = v294;
              *v249 = v294;
              if (v253)
                llvm::MetadataTracking::retrack((uint64_t)&v294, v253, (uint64_t)(v241 + 112));
              goto LABEL_271;
            }
LABEL_268:
            llvm::MetadataTracking::untrack((uint64_t)(v241 + 112), v252);
            goto LABEL_274;
          }
        }
        else
        {
          v252 = *v249;
          if (!*v249 && (v241[87] & 0x20) == 0)
            goto LABEL_271;
          if (!v250)
          {
            v294 = 0;
            if (!v252)
              goto LABEL_274;
            goto LABEL_268;
          }
        }
        llvm::Value::setMetadata(v173, *(_DWORD *)v247, (llvm::MDNode *)v251);
LABEL_271:
        v247 += 16;
      }
      while (v247 != v248);
    }
  }
  v293 = 257;
  v174 = (llvm::Value *)sub_1C4774B48((uint64_t)&v295, 32, (uint64_t)v173, (uint64_t)v289, (uint64_t)&v290);
  v175 = operator new(0xA0uLL);
  v176 = v175;
  v177 = 0;
  v178 = (llvm::Value *)(v175 + 24);
  v175[29] = v175[29] & 0x38000000 | 3;
  do
  {
    v179 = &v175[v177];
    *v179 = 0;
    v179[1] = 0;
    v179[2] = 0;
    v179[3] = v178;
    v177 += 8;
  }
  while (v177 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v175 + 24), v285, (llvm::BasicBlock *)v86, v174, 0);
  v293 = 257;
  (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v178, &v290, v298, v299);
  if (v296)
  {
    v180 = (char *)v295;
    v181 = (char *)v295 + 16 * v296;
    v182 = (unsigned __int8 **)(v176 + 36);
    do
    {
      v183 = *(_DWORD *)v180;
      v184 = (unsigned __int8 *)*((_QWORD *)v180 + 1);
      if (v184)
      {
        if (!v183)
        {
          v303 = (unsigned __int8 *)*((_QWORD *)v180 + 1);
          llvm::MetadataTracking::track((uint64_t)&v303, v184, 2);
          v185 = *v182;
          if (!*v182)
          {
LABEL_180:
            v186 = v303;
            *v182 = v303;
            if (v186)
              llvm::MetadataTracking::retrack((uint64_t)&v303, v186, (uint64_t)(v176 + 36));
            goto LABEL_177;
          }
LABEL_174:
          llvm::MetadataTracking::untrack((uint64_t)(v176 + 36), v185);
          goto LABEL_180;
        }
      }
      else
      {
        v185 = *v182;
        if (!*v182 && (*((_BYTE *)v176 + 119) & 0x20) == 0)
          goto LABEL_177;
        if (!v183)
        {
          v303 = 0;
          if (!v185)
            goto LABEL_180;
          goto LABEL_174;
        }
      }
      llvm::Value::setMetadata(v178, *(_DWORD *)v180, (llvm::MDNode *)v184);
LABEL_177:
      v180 += 16;
    }
    while (v180 != v181);
  }
  v298 = (uint64_t ***)v285;
  v299 = v273;
  v293 = 257;
  v187 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v284 = v95;
  v188 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v295, v95, 2, (uint64_t)&v290);
  v293 = 257;
  v189 = sub_1C506E874((uint64_t)&v295, (uint64_t)v188, (uint64_t)v281, (uint64_t)&v290, 0, 0);
  v293 = 257;
  v282 = sub_1C4773594((uint64_t)&v295, v187, v189, (uint64_t)&v290);
  v190 = (char *)operator new(0x60uLL);
  v191 = v190;
  *((_DWORD *)v190 + 13) = *((_DWORD *)v190 + 13) & 0x38000000 | 1;
  *(_QWORD *)v190 = 0;
  *((_QWORD *)v190 + 2) = 0;
  *((_QWORD *)v190 + 1) = 0;
  *((_QWORD *)v190 + 4) = **(_QWORD **)*v288 + 1576;
  v192 = (llvm::Value *)(v190 + 32);
  *((_QWORD *)v190 + 3) = v190 + 32;
  *((_QWORD *)v190 + 5) = 0;
  v190[48] = 30;
  v190[49] = 0;
  *((_WORD *)v190 + 25) = 0;
  *((_DWORD *)v190 + 13) = 1;
  *(_OWORD *)(v190 + 56) = 0u;
  *(_OWORD *)(v190 + 72) = 0u;
  *((_DWORD *)v190 + 22) = 0;
  *(_QWORD *)v190 = v288;
  v193 = v288 + 1;
  v194 = v288[1];
  *((_QWORD *)v190 + 1) = v194;
  if (v194)
    *(_QWORD *)(v194 + 16) = v190 + 8;
  *((_QWORD *)v190 + 2) = v193;
  *v193 = v190;
  v293 = 257;
  (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t ***, uint64_t *))(*(_QWORD *)v302 + 16))(v302, v192, &v290, v298, v299);
  if (v296)
  {
    v195 = (char *)v295;
    v196 = (char *)v295 + 16 * v296;
    v197 = (unsigned __int8 **)(v191 + 80);
    do
    {
      v198 = *(_DWORD *)v195;
      v199 = (unsigned __int8 *)*((_QWORD *)v195 + 1);
      if (v199)
      {
        if (!v198)
        {
          v303 = (unsigned __int8 *)*((_QWORD *)v195 + 1);
          llvm::MetadataTracking::track((uint64_t)&v303, v199, 2);
          v200 = *v197;
          if (!*v197)
          {
LABEL_197:
            v201 = v303;
            *v197 = v303;
            if (v201)
              llvm::MetadataTracking::retrack((uint64_t)&v303, v201, (uint64_t)(v191 + 80));
            goto LABEL_194;
          }
LABEL_191:
          llvm::MetadataTracking::untrack((uint64_t)(v191 + 80), v200);
          goto LABEL_197;
        }
      }
      else
      {
        v200 = *v197;
        if (!*v197 && (v191[55] & 0x20) == 0)
          goto LABEL_194;
        if (!v198)
        {
          v303 = 0;
          if (!v200)
            goto LABEL_197;
          goto LABEL_191;
        }
      }
      llvm::Value::setMetadata(v192, *(_DWORD *)v195, (llvm::MDNode *)v199);
LABEL_194:
      v195 += 16;
    }
    while (v195 != v196);
  }
  sub_1C4D8AE2C((uint64_t)&v295, (uint64_t)v288, v288[6]);
  v293 = 257;
  v202 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v295, v284, 2, (uint64_t)&v290);
  sub_1C477667C(v264, (uint64_t)v289, (uint64_t)v280);
  sub_1C477667C(v264, v279, v86);
  sub_1C477667C(v287, v271, (uint64_t)v280);
  sub_1C477667C(v287, (uint64_t)v173, v86);
  sub_1C477667C(v267, v265, (uint64_t)v280);
  sub_1C477667C(v267, v262, v86);
  sub_1C477667C(v268, v269, (uint64_t)v280);
  sub_1C477667C(v268, v263, v86);
  sub_1C477667C(v187, (uint64_t)v289, (uint64_t)v276);
  sub_1C477667C(v187, v279, v86);
  sub_1C477667C(v188, v269, (uint64_t)v276);
  sub_1C477667C(v188, v263, v86);
  sub_1C477667C(v202, v282, (uint64_t)v285);
  sub_1C477667C(v202, (uint64_t)Select, v277);
  llvm::Value::doRAUW(v274, v202, (llvm::Value *)1);
  v203 = *((_DWORD *)v274 + 5);
  if ((v203 & 0x40000000) != 0)
  {
    v205 = (char *)*((_QWORD *)v274 - 1);
    v204 = v203 & 0x7FFFFFF;
    if (v204)
    {
LABEL_201:
      v206 = 32 * v204;
      v207 = (_QWORD **)(v205 + 16);
      do
      {
        if (*(v207 - 2))
        {
          **v207 = *(v207 - 1);
          v208 = (uint64_t)*(v207 - 1);
          if (v208)
            *(_QWORD *)(v208 + 16) = *v207;
        }
        *(v207 - 2) = 0;
        v207 += 4;
        v206 -= 32;
      }
      while (v206);
    }
  }
  else
  {
    v204 = v203 & 0x7FFFFFF;
    v205 = (char *)v274 - 32 * v204;
    if (v204)
      goto LABEL_201;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v274 + 5) + 40, (uint64_t ***)v274);
  v209 = *((_QWORD *)v274 + 3);
  v210 = (_QWORD *)*((_QWORD *)v274 + 4);
  *v210 = v209;
  *(_QWORD *)(v209 + 8) = v210;
  *((_QWORD *)v274 + 3) = 0;
  *((_QWORD *)v274 + 4) = 0;
  llvm::Value::deleteValue(v274);
LABEL_207:
  if (v295 != &v297)
    free(v295);
  return 1;
}

uint64_t llvm::formLCSSAForInstructions(uint64_t a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, llvm::IRBuilderBase *this, unsigned int *a6)
{
  uint64_t v11;
  int64x2_t v12;
  _QWORD *v13;
  uint64_t i;
  unsigned int v15;
  char v16;
  uint64_t ***v17;
  uint64_t **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t **v23;
  int v24;
  int v25;
  _QWORD *v26;
  char v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *j;
  _QWORD *v41;
  uint64_t *v42;
  int v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ***v54;
  uint64_t **v55;
  int v56;
  int v57;
  uint64_t **v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ****v64;
  uint64_t ***v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  _QWORD *v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t ***v74;
  char *v75;
  size_t v76;
  size_t v77;
  uint64_t **v78;
  uint64_t v79;
  _QWORD **v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t ****v106;
  uint64_t ***v107;
  int v108;
  int v109;
  uint64_t ***v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 **v116;
  unsigned __int8 *v117;
  uint64_t *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  int v147;
  _QWORD *v148;
  BOOL v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  llvm::Value *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  llvm::DbgVariableIntrinsic **v173;
  uint64_t k;
  llvm::DbgVariableIntrinsic *v175;
  uint64_t *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  llvm::Value *v181;
  int v182;
  char *v183;
  char *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  _QWORD *v195;
  BOOL v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  _QWORD *v209;
  int v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  int v217;
  BOOL v218;
  int v219;
  _QWORD *v220;
  uint64_t ****v221;
  uint64_t v222;
  uint64_t ***v223;
  uint64_t **v224;
  uint64_t **v225;
  char v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  llvm::IRBuilderBase *v232;
  void *v233;
  uint64_t v235;
  uint64_t v237;
  int32x2_t *v238;
  llvm::IRBuilderBase *v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t **v242;
  _QWORD *v243;
  uint64_t *v244;
  _QWORD **v245;
  unsigned int v246;
  uint64_t **v247;
  unsigned __int8 *v248;
  _OWORD v249[2];
  uint64_t v250;
  void **v251;
  _QWORD *v252;
  llvm::IRBuilderBase *v253;
  __int128 v254;
  unsigned __int8 *v255;
  uint64_t v256;
  uint64_t *v257;
  void *v258;
  uint64_t v259;
  _QWORD v260[2];
  __int16 v261;
  void *v262;
  uint64_t v263;
  _BYTE v264[32];
  void *v265;
  uint64_t v266;
  _BYTE v267[64];
  void *v268;
  uint64_t v269;
  _BYTE v270[128];
  uint64_t v271;
  _QWORD *v272;
  unsigned int v273;
  _QWORD v274[2];
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _QWORD v279[4];
  _QWORD v280[6];
  _QWORD v281[2];
  _QWORD v282[2];
  unsigned int v283;
  void *__src;
  uint64_t v285;
  _BYTE v286[128];
  void *v287;
  uint64_t v288;
  _QWORD v289[18];

  v289[16] = *MEMORY[0x1E0C80C00];
  v287 = v289;
  v288 = 0x1000000000;
  v282[0] = 1;
  v11 = 1;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v282[v11] = v12;
    v11 += 2;
  }
  while (v11 != 17);
  __src = v286;
  v285 = 0x1000000000;
  v274[1] = 0;
  v274[0] = 0;
  v275 = 0;
  v277 = 0;
  v276 = 0;
  v278 = 0;
  v279[1] = 0;
  v279[0] = 0;
  v279[2] = v280;
  v279[3] = 0x400000000;
  v280[4] = v281;
  v280[5] = 0;
  v281[0] = 0;
  v281[1] = 1;
  v253 = this;
  v254 = *((_OWORD *)this + 3);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)this, &v255);
  v271 = 1;
  v13 = &v272;
  for (i = 8; i != 136; i += 32)
    *(uint64_t *)((char *)&v271 + i) = -4096;
  v15 = *(_DWORD *)(a1 + 8);
  if (v15)
  {
    v16 = 0;
    v235 = a1 + 16;
    v239 = this;
    v238 = a4;
    v244 = a3;
    v241 = a2;
    v237 = a1;
    while (1)
    {
      LODWORD(v288) = 0;
      v17 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v15 - 8);
      *(_DWORD *)(a1 + 8) = v15 - 1;
      v18 = v17[5];
      v19 = *((_DWORD *)a3 + 4);
      if (v19)
      {
        v20 = *a3;
        v21 = v19 - 1;
        v22 = (v19 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        v23 = *(uint64_t ***)(*a3 + 16 * v22);
        if (v18 == v23)
        {
LABEL_12:
          v26 = *(_QWORD **)(v20 + 16 * v22 + 8);
          goto LABEL_14;
        }
        v24 = 1;
        while (v23 != (uint64_t **)-4096)
        {
          v25 = v22 + v24++;
          v22 = v25 & v21;
          v23 = *(uint64_t ***)(v20 + 16 * v22);
          if (v18 == v23)
            goto LABEL_12;
        }
      }
      v26 = 0;
LABEL_14:
      v252 = v26;
      v27 = v271;
      v247 = v18;
      if ((v271 & 1) != 0)
      {
        v28 = 4;
        v29 = &v272;
      }
      else
      {
        v28 = v273;
        if (!v273)
          goto LABEL_308;
        v29 = v272;
      }
      v30 = (v26 >> 4) ^ (v26 >> 9);
      v31 = v28 - 1;
      v32 = v31 & v30;
      v33 = (_QWORD *)v29[4 * (v31 & v30)];
      if (v26 == v33)
        goto LABEL_17;
      v68 = 1;
      while (v33 != (_QWORD *)-4096)
      {
        v69 = v32 + v68++;
        v32 = v69 & v31;
        v33 = (_QWORD *)v29[4 * v32];
        if (v26 == v33)
          goto LABEL_17;
      }
      if ((v271 & 1) != 0)
      {
        v208 = 4;
        v209 = &v272;
      }
      else
      {
        v208 = v273;
        if (!v273)
        {
LABEL_308:
          v220 = 0;
LABEL_304:
          v212 = sub_1C5F0FF00((uint64_t)&v271, (uint64_t *)&v252, v220);
          *v212 = v26;
          v212[1] = v212 + 3;
          v212[2] = 0x100000000;
          goto LABEL_282;
        }
        v209 = v272;
      }
      v210 = v208 - 1;
      v211 = v210 & v30;
      v212 = &v209[4 * v211];
      v213 = (_QWORD *)*v212;
      if (v26 != (_QWORD *)*v212)
      {
        v216 = 0;
        v217 = 1;
        while (v213 != (_QWORD *)-4096)
        {
          if (v216)
            v218 = 0;
          else
            v218 = v213 == (_QWORD *)-8192;
          if (v218)
            v216 = v212;
          v219 = v211 + v217++;
          v211 = v219 & v210;
          v212 = &v209[4 * v211];
          v213 = (_QWORD *)*v212;
          if (v26 == (_QWORD *)*v212)
            goto LABEL_282;
        }
        if (v216)
          v220 = v216;
        else
          v220 = v212;
        goto LABEL_304;
      }
LABEL_282:
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v26, (uint64_t)(v212 + 1));
      v27 = v271;
      v18 = v247;
LABEL_17:
      if ((v27 & 1) != 0)
      {
        v34 = 4;
        v35 = (uint64_t)v252;
        v36 = &v272;
      }
      else
      {
        v34 = v273;
        v35 = (uint64_t)v252;
        if (!v273)
        {
          v214 = 0;
LABEL_286:
          v215 = sub_1C5F0FF00((uint64_t)&v271, (uint64_t *)&v252, v214);
          *v215 = v35;
          v215[1] = v215 + 3;
          v243 = v215;
          v215[2] = 0x100000000;
          v18 = v247;
          goto LABEL_20;
        }
        v36 = v272;
      }
      v37 = v34 - 1;
      v38 = ((v35 >> 4) ^ (v35 >> 9)) & v37;
      v243 = &v36[4 * v38];
      v39 = *v243;
      if (v35 != *v243)
      {
        v70 = 0;
        v71 = 1;
        while (v39 != -4096)
        {
          if (v70)
            v72 = 0;
          else
            v72 = v39 == -8192;
          if (v72)
            v70 = v243;
          v73 = v38 + v71++;
          v38 = v73 & v37;
          v243 = &v36[4 * v38];
          v39 = *v243;
          if (v35 == *v243)
            goto LABEL_20;
        }
        if (v70)
          v214 = v70;
        else
          v214 = v243;
        goto LABEL_286;
      }
LABEL_20:
      if (!*((_DWORD *)v243 + 4))
        goto LABEL_277;
      for (j = (char *)v17[1]; j; j = (char *)*((_QWORD *)j + 1))
      {
        v41 = (_QWORD *)*((_QWORD *)j + 3);
        v42 = v41 + 5;
        if (v41 && *((_BYTE *)v41 + 16) == 83)
        {
          v43 = *((_DWORD *)v41 + 5);
          if ((v43 & 0x40000000) != 0)
            v44 = (char *)*(v41 - 1);
          else
            v44 = (char *)&v41[-4 * (v43 & 0x7FFFFFF)];
          v42 = (uint64_t *)&v44[32 * *((unsigned int *)v41 + 15) + 8 * ((unint64_t)(j - v44) >> 5)];
        }
        if (v18 != (uint64_t **)*v42)
        {
          v45 = sub_1C477672C(v35 + 56, *v42);
          v18 = v247;
          v46 = *(_QWORD *)(v35 + 64);
          v47 = 76;
          if (v46 != *(_QWORD *)(v35 + 56))
            v47 = 72;
          if (v45 == (_QWORD *)(v46 + 8 * *(unsigned int *)(v35 + v47)))
          {
            v48 = v288;
            if (v288 >= (unint64_t)HIDWORD(v288))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v287, (uint64_t)v289, v288 + 1, 8);
              v18 = v247;
              v48 = v288;
            }
            *((_QWORD *)v287 + v48) = j;
            LODWORD(v288) = v288 + 1;
          }
        }
      }
      v49 = v241;
      if (!(_DWORD)v288)
        goto LABEL_277;
      if (v17)
      {
        v50 = v18;
        if (*((_BYTE *)v17 + 16) == 33)
          v50 = *(v17 - 12);
      }
      else
      {
        v50 = v18;
      }
      v51 = *(unsigned int *)(v241 + 40);
      if ((_DWORD)v51)
      {
        v52 = *(_QWORD *)(v241 + 24);
        LODWORD(v53) = ((v50 >> 4) ^ (v50 >> 9)) & (v51 - 1);
        v54 = (uint64_t ***)(v52 + 16 * v53);
        v55 = *v54;
        if (v50 == *v54)
        {
LABEL_47:
          if (v54 != (uint64_t ***)(v52 + 16 * v51))
          {
            v242 = v54[1];
            goto LABEL_50;
          }
        }
        else
        {
          v56 = 1;
          while (v55 != (uint64_t **)-4096)
          {
            v57 = v53 + v56++;
            v53 = v57 & (v51 - 1);
            v55 = *(uint64_t ***)(v52 + 16 * v53);
            if (v50 == v55)
            {
              v54 = (uint64_t ***)(v52 + 16 * v53);
              goto LABEL_47;
            }
          }
        }
      }
      v242 = 0;
LABEL_50:
      v268 = v270;
      v269 = 0x1000000000;
      v265 = v267;
      v266 = 0x800000000;
      v262 = v264;
      v263 = 0x400000000;
      memset(v249, 0, sizeof(v249));
      v250 = 0;
      v251 = &v262;
      v58 = *v17;
      v59 = v17 >> 4;
      if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
      {
        v76 = 0;
        v75 = &byte_1C871356D;
        goto LABEL_72;
      }
      v60 = **v58;
      v61 = *(_QWORD *)(v60 + 152);
      v62 = *(unsigned int *)(v60 + 168);
      if (!(_DWORD)v62)
        goto LABEL_70;
      LODWORD(v63) = (v62 - 1) & (v59 ^ (v17 >> 9));
      v64 = (uint64_t ****)(v61 + 16 * v63);
      v65 = *v64;
      if (*v64 != v17)
      {
        v66 = 1;
        while (v65 != (uint64_t ***)-4096)
        {
          v67 = v63 + v66++;
          v63 = v67 & (v62 - 1);
          v65 = *(uint64_t ****)(v61 + 16 * v63);
          if (v65 == v17)
          {
            v64 = (uint64_t ****)(v61 + 16 * v63);
            goto LABEL_71;
          }
        }
LABEL_70:
        v64 = (uint64_t ****)(v61 + 16 * v62);
      }
LABEL_71:
      v74 = v64[1];
      v77 = (size_t)*v74;
      v75 = (char *)(v74 + 2);
      v76 = v77;
LABEL_72:
      llvm::SSAUpdater::Initialize((uint64_t)v249, (uint64_t)v58, v75, v76);
      if (a4)
        llvm::ScalarEvolution::forgetValue(a4, (llvm::Value *)v17);
      v78 = (uint64_t)v242;
      v79 = *((unsigned int *)v243 + 4);
      if ((_DWORD)v79)
      {
        v80 = (_QWORD **)v243[1];
        v245 = &v80[v79];
        v240 = v59 ^ (v17 >> 9);
        v81 = (uint64_t)v252;
        v82 = (uint64_t)(v252 + 7);
        do
        {
          v83 = *v80;
          v84 = *(unsigned int *)(v49 + 40);
          v246 = *v80 >> 4;
          if ((_DWORD)v84)
          {
            v85 = *(_QWORD *)(v49 + 24);
            LODWORD(v86) = ((*v80 >> 4) ^ (v83 >> 9)) & (v84 - 1);
            v87 = (_QWORD *)(v85 + 16 * v86);
            v88 = (_QWORD *)*v87;
            if (v83 == (_QWORD *)*v87)
            {
LABEL_82:
              if (v87 != (_QWORD *)(v85 + 16 * v84))
              {
                v91 = v87[1];
                if (v91 != v78 && v91 != 0)
                {
                  if (!v78)
                    goto LABEL_162;
                  if (*(_QWORD *)(v91 + 8) != v78)
                  {
                    if (*(_QWORD *)(v78 + 8) == v91)
                      goto LABEL_162;
                    v93 = *(_DWORD *)(v78 + 16);
                    if (v93 >= *(_DWORD *)(v91 + 16))
                      goto LABEL_162;
                    if (*(_BYTE *)(v49 + 64))
                      goto LABEL_92;
                    v94 = *(_DWORD *)(v49 + 68) + 1;
                    *(_DWORD *)(v49 + 68) = v94;
                    if (v94 > 0x20)
                    {
                      llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(v49);
LABEL_92:
                      if (*(_DWORD *)(v91 + 72) < *(_DWORD *)(v78 + 72)
                        || *(_DWORD *)(v91 + 76) > *(_DWORD *)(v78 + 76))
                      {
                        goto LABEL_162;
                      }
                      goto LABEL_99;
                    }
                    do
                    {
                      v95 = v91;
                      v91 = *(_QWORD *)(v91 + 8);
                    }
                    while (v91 && *(_DWORD *)(v91 + 16) >= v93);
                    if (v95 != v78)
                      goto LABEL_162;
                  }
                }
              }
            }
            else
            {
              v89 = 1;
              while (v88 != (_QWORD *)-4096)
              {
                v90 = v86 + v89++;
                v86 = v90 & (v84 - 1);
                v88 = *(_QWORD **)(v85 + 16 * v86);
                if (v83 == v88)
                {
                  v87 = (_QWORD *)(v85 + 16 * v86);
                  goto LABEL_82;
                }
              }
            }
          }
LABEL_99:
          if (!llvm::SSAUpdater::HasValueForBlock((uint64_t **)v249, (llvm::BasicBlock *)v83))
          {
            v96 = 0;
            v97 = v83[6];
            if (v97)
              v98 = v97 - 24;
            else
              v98 = 0;
            *((_QWORD *)v239 + 6) = *(_QWORD *)(v98 + 40);
            *((_QWORD *)v239 + 7) = v98 + 24;
            v99 = *(void **)(v98 + 48);
            v258 = v99;
            if (v99)
            {
              llvm::MetadataTracking::track((uint64_t)&v258, (unsigned __int8 *)v99, 2);
              v96 = v258;
            }
            sub_1C4774EF4((uint64_t)v239, 0, (uint64_t)v96);
            if (v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            v100 = (uint64_t)*v17;
            v101 = sub_1C4ECA658((uint64_t)v274, (uint64_t)v83);
            if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
            {
              v102 = ***v17;
              v103 = *(_QWORD *)(v102 + 152);
              v104 = *(unsigned int *)(v102 + 168);
              if (!(_DWORD)v104)
                goto LABEL_114;
              LODWORD(v105) = (v104 - 1) & v240;
              v106 = (uint64_t ****)(v103 + 16 * v105);
              v107 = *v106;
              if (*v106 != v17)
              {
                v108 = 1;
                while (v107 != (uint64_t ***)-4096)
                {
                  v109 = v105 + v108++;
                  v105 = v109 & (v104 - 1);
                  v107 = *(uint64_t ****)(v103 + 16 * v105);
                  if (v107 == v17)
                  {
                    v106 = (uint64_t ****)(v103 + 16 * v105);
                    goto LABEL_115;
                  }
                }
LABEL_114:
                v106 = (uint64_t ****)(v103 + 16 * v104);
              }
LABEL_115:
              v110 = v106[1];
              v113 = (uint64_t)*v110;
              v112 = (char *)(v110 + 2);
              v111 = v113;
            }
            else
            {
              v111 = 0;
              v112 = &byte_1C871356D;
            }
            v261 = 773;
            v258 = v112;
            v259 = v111;
            v260[0] = ".lcssa";
            v114 = sub_1C4867E94((uint64_t)v239, v100, v101, (uint64_t)&v258);
            v115 = (unsigned __int8 *)v17[6];
            v248 = v115;
            if (v115)
              llvm::MetadataTracking::track((uint64_t)&v248, v115, 2);
            v116 = (unsigned __int8 **)(v114 + 48);
            if (&v248 == (unsigned __int8 **)(v114 + 48))
            {
              if (v248)
                llvm::MetadataTracking::untrack((uint64_t)&v248, v248);
            }
            else
            {
              if (*v116)
                llvm::MetadataTracking::untrack(v114 + 48, *v116);
              v117 = v248;
              *v116 = v248;
              if (v117)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v248, v117, v114 + 48);
                v248 = 0;
              }
            }
            v118 = (uint64_t *)sub_1C4ECA3D4((uint64_t)v274, (uint64_t)v83);
            v119 = sub_1C4ECA658((uint64_t)v274, (uint64_t)v83);
            if (v119)
            {
              v120 = 8 * v119;
              do
              {
                v121 = *v118;
                sub_1C477667C((llvm::PHINode *)v114, (uint64_t)v17, *v118);
                v122 = sub_1C477672C(v82, v121);
                v123 = *(_QWORD *)(v81 + 64);
                v124 = 76;
                if (v123 != *(_QWORD *)(v81 + 56))
                  v124 = 72;
                if (v122 == (_QWORD *)(v123 + 8 * *(unsigned int *)(v81 + v124)))
                {
                  v125 = *(_DWORD *)(v114 + 20);
                  v126 = v125 & 0x7FFFFFF;
                  if ((v125 & 0x40000000) != 0)
                    v127 = *(_QWORD *)(v114 - 8);
                  else
                    v127 = v114 - 32 * v126;
                  v128 = v288;
                  if (v288 >= (unint64_t)HIDWORD(v288))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v287, (uint64_t)v289, v288 + 1, 8);
                    v128 = v288;
                  }
                  *((_QWORD *)v287 + v128) = v127 + 32 * (v126 - 1);
                  LODWORD(v288) = v288 + 1;
                }
                ++v118;
                v120 -= 8;
              }
              while (v120);
            }
            v129 = v269;
            if (v269 >= (unint64_t)HIDWORD(v269))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v269 + 1, 8);
              v129 = v269;
            }
            v49 = v241;
            v78 = (uint64_t)v242;
            *((_QWORD *)v268 + v129) = v114;
            LODWORD(v269) = v269 + 1;
            v258 = v83;
            v130 = *(_DWORD *)(*(_QWORD *)&v249[0] + 16);
            v131 = v246;
            if (v130)
            {
              v132 = v130 - 1;
              v133 = (v130 - 1) & (v246 ^ (v83 >> 9));
              v134 = (_QWORD *)(**(_QWORD **)&v249[0] + 16 * v133);
              v135 = (_QWORD *)*v134;
              if ((_QWORD *)*v134 != v83)
              {
                v136 = 0;
                v137 = 1;
                while (v135 != (_QWORD *)-4096)
                {
                  if (v136)
                    v138 = 0;
                  else
                    v138 = v135 == (_QWORD *)-8192;
                  if (v138)
                    v136 = v134;
                  v139 = v133 + v137++;
                  v133 = v139 & v132;
                  v134 = (_QWORD *)(**(_QWORD **)&v249[0] + 16 * (v139 & v132));
                  v135 = (_QWORD *)*v134;
                  if ((_QWORD *)*v134 == v83)
                    goto LABEL_152;
                }
                if (v136)
                  v140 = v136;
                else
                  v140 = v134;
LABEL_151:
                v134 = sub_1C4ECCA58(*(uint64_t *)&v249[0], (uint64_t)&v258, (uint64_t *)&v258, v140);
                *v134 = v258;
                v134[1] = 0;
                v131 = v246;
              }
LABEL_152:
              v134[1] = v114;
              v141 = *((_DWORD *)v244 + 4);
              if (v141)
              {
                v142 = *v244;
                v143 = v141 - 1;
                v144 = (v141 - 1) & (v131 ^ (v83 >> 9));
                v145 = *(_QWORD **)(*v244 + 16 * v144);
                if (v83 == v145)
                {
LABEL_157:
                  v148 = *(_QWORD **)(v142 + 16 * v144 + 8);
                  if (v148)
                    v149 = v148 == (_QWORD *)v81;
                  else
                    v149 = 1;
                  if (!v149)
                  {
                    while (v148)
                    {
                      v148 = (_QWORD *)*v148;
                      if (v148 == (_QWORD *)v81)
                        goto LABEL_162;
                    }
                    v150 = v266;
                    if (v266 >= (unint64_t)HIDWORD(v266))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, (uint64_t)v267, v266 + 1, 8);
                      v150 = v266;
                    }
                    *((_QWORD *)v265 + v150) = v114;
                    LODWORD(v266) = v266 + 1;
                  }
                }
                else
                {
                  v146 = 1;
                  while (v145 != (_QWORD *)-4096)
                  {
                    v147 = v144 + v146++;
                    v144 = v147 & v143;
                    v145 = *(_QWORD **)(v142 + 16 * v144);
                    if (v83 == v145)
                      goto LABEL_157;
                  }
                }
              }
              goto LABEL_162;
            }
            v140 = 0;
            goto LABEL_151;
          }
LABEL_162:
          ++v80;
        }
        while (v80 != v245);
      }
      a3 = v244;
      a1 = v237;
      if ((_DWORD)v288)
      {
        v151 = (char *)v287;
        v152 = (char *)v287 + 8 * v288;
        while (1)
        {
          v153 = *(_QWORD *)v151;
          v154 = *(_QWORD *)(*(_QWORD *)v151 + 24);
          v155 = v154 + 40;
          if (v154 && *(_BYTE *)(v154 + 16) == 83)
          {
            v156 = *(_DWORD *)(v154 + 20);
            if ((v156 & 0x40000000) != 0)
              v157 = *(_QWORD *)(v154 - 8);
            else
              v157 = v154 - 32 * (v156 & 0x7FFFFFF);
            v155 = v157
                 + 32 * *(unsigned int *)(v154 + 60)
                 + 8 * ((unint64_t)(v153 - v157) >> 5);
          }
          v158 = *(_QWORD *)v155;
          v159 = *(_QWORD *)(*(_QWORD *)v155 + 48);
          v160 = v159 - 24;
          if (!v159)
            v160 = 0;
          if (*(_BYTE *)(v160 + 16) == 83)
          {
            v161 = v243[1];
            v162 = *((unsigned int *)v243 + 4);
            if ((_DWORD)v162)
            {
              v163 = 8 * v162;
              v164 = (_QWORD *)v243[1];
              while (*v164 != v158)
              {
                ++v164;
                v163 -= 8;
                if (!v163)
                {
                  v164 = (_QWORD *)(v161 + 8 * v162);
                  break;
                }
              }
            }
            else
            {
              v164 = (_QWORD *)v243[1];
            }
            if (v162 != ((uint64_t)v164 - v161) >> 3)
              break;
          }
          if ((_DWORD)v269 == 1)
          {
            v165 = *(llvm::Value **)v268;
            if (*(_QWORD *)v153)
            {
              **(_QWORD **)(v153 + 16) = *(_QWORD *)(v153 + 8);
              v166 = *(_QWORD *)(v153 + 8);
              if (v166)
                *(_QWORD *)(v166 + 16) = *(_QWORD *)(v153 + 16);
            }
            *(_QWORD *)v153 = v165;
            if (!v165)
              goto LABEL_208;
            v169 = *((_QWORD *)v165 + 1);
            v167 = (_QWORD *)((char *)v165 + 8);
            v168 = v169;
            goto LABEL_205;
          }
          llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)v249, (llvm::Use *)v153);
LABEL_208:
          v151 += 8;
          if (v151 == v152)
            goto LABEL_209;
        }
        if (*(_QWORD *)v153)
        {
          **(_QWORD **)(v153 + 16) = *(_QWORD *)(v153 + 8);
          v170 = *(_QWORD *)(v153 + 8);
          if (v170)
            *(_QWORD *)(v170 + 16) = *(_QWORD *)(v153 + 16);
        }
        *(_QWORD *)v153 = v160;
        if (!v159)
          goto LABEL_208;
        v171 = *(_QWORD *)(v159 - 16);
        v167 = (_QWORD *)(v159 - 16);
        v168 = v171;
LABEL_205:
        *(_QWORD *)(v153 + 8) = v168;
        if (v168)
          *(_QWORD *)(v168 + 16) = v153 + 8;
        *(_QWORD *)(v153 + 16) = v167;
        *v167 = v153;
        goto LABEL_208;
      }
LABEL_209:
      v258 = v260;
      v259 = 0x400000000;
      llvm::findDbgValues((uint64_t)&v258, (uint64_t)v17);
      v13 = &v272;
      v172 = (uint64_t *)v247;
      if ((_DWORD)v259)
      {
        v173 = (llvm::DbgVariableIntrinsic **)v258;
        for (k = 8 * v259; k; k -= 8)
        {
          v175 = *v173;
          v176 = (uint64_t *)*((_QWORD *)*v173 + 5);
          if (v172 == v176)
            goto LABEL_222;
          v177 = (uint64_t)v252;
          v178 = sub_1C477672C((uint64_t)(v252 + 7), *((_QWORD *)*v173 + 5));
          v172 = (uint64_t *)v247;
          v179 = *(_QWORD *)(v177 + 64);
          v180 = 76;
          if (v179 != *(_QWORD *)(v177 + 56))
            v180 = 72;
          if (v178 != (_QWORD *)(v179 + 8 * *(unsigned int *)(v177 + v180)))
            goto LABEL_222;
          if ((_DWORD)v269 == 1)
          {
            v181 = *(llvm::Value **)v268;
            if (!*(_QWORD *)v268)
              goto LABEL_222;
          }
          else
          {
            v256 = 0;
            v257 = v176;
            v182 = sub_1C5667944(*(uint64_t **)&v249[0], &v257, &v256);
            v181 = 0;
            if (v182)
              v181 = *(llvm::Value **)(v256 + 8);
            v172 = (uint64_t *)v247;
            if (!v181)
              goto LABEL_222;
          }
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v175, (llvm::Value *)v17, v181);
          v172 = (uint64_t *)v247;
LABEL_222:
          ++v173;
        }
      }
      a4 = v238;
      if ((_DWORD)v263)
      {
        v183 = (char *)v262;
        v184 = (char *)v262 + 8 * v263;
        v185 = (uint64_t)v252;
        do
        {
          v186 = *((_DWORD *)v244 + 4);
          if (v186)
          {
            v187 = *(_QWORD *)v183;
            v188 = *(_QWORD *)(*(_QWORD *)v183 + 40);
            v189 = *v244;
            v190 = v186 - 1;
            v191 = ((v188 >> 4) ^ (v188 >> 9)) & (v186 - 1);
            v192 = *(_QWORD *)(*v244 + 16 * v191);
            if (v188 == v192)
            {
LABEL_230:
              v195 = *(_QWORD **)(v189 + 16 * v191 + 8);
              if (v195)
                v196 = v195 == (_QWORD *)v185;
              else
                v196 = 1;
              if (!v196)
              {
                while (v195)
                {
                  v195 = (_QWORD *)*v195;
                  if (v195 == (_QWORD *)v185)
                    goto LABEL_235;
                }
                v197 = v266;
                if (v266 >= (unint64_t)HIDWORD(v266))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, (uint64_t)v267, v266 + 1, 8);
                  v197 = v266;
                }
                *((_QWORD *)v265 + v197) = v187;
                LODWORD(v266) = v266 + 1;
              }
            }
            else
            {
              v193 = 1;
              while (v192 != -4096)
              {
                v194 = v191 + v193++;
                v191 = v194 & v190;
                v192 = *(_QWORD *)(v189 + 16 * v191);
                if (v188 == v192)
                  goto LABEL_230;
              }
            }
          }
LABEL_235:
          v183 += 8;
        }
        while (v183 != v184);
      }
      if ((_DWORD)v266)
      {
        v198 = (char *)v265;
        v199 = 8 * v266;
        do
        {
          v200 = *(_QWORD *)v198;
          if (*(_QWORD *)(*(_QWORD *)v198 + 8))
          {
            v201 = *(unsigned int *)(v237 + 8);
            if (v201 >= *(unsigned int *)(v237 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v237, v235, v201 + 1, 8);
              v201 = *(unsigned int *)(v237 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v237 + 8 * v201) = v200;
            ++*(_DWORD *)(v237 + 8);
          }
          v198 += 8;
          v199 -= 8;
        }
        while (v199);
      }
      if ((_DWORD)v269)
      {
        v202 = (uint64_t *)v268;
        v203 = 8 * v269;
        while (1)
        {
          v204 = *v202;
          if (!*(_QWORD *)(*v202 + 8))
          {
            v257 = 0;
            if ((sub_1C5F104D0((uint64_t)v282, v204, &v257) & 1) == 0)
              break;
          }
LABEL_264:
          ++v202;
          v203 -= 8;
          if (!v203)
            goto LABEL_268;
        }
        v205 = LODWORD(v282[0]) >> 1;
        if ((v282[0] & 1) != 0)
          v206 = 16;
        else
          v206 = v283;
        if (4 * v205 + 4 >= 3 * v206)
        {
          v206 *= 2;
        }
        else if (v206 + ~v205 - HIDWORD(v282[0]) > v206 >> 3)
        {
LABEL_259:
          LODWORD(v282[0]) += 2;
          if (*v257 != -4096)
            --HIDWORD(v282[0]);
          *v257 = v204;
          v207 = v285;
          if (v285 >= (unint64_t)HIDWORD(v285))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v286, v285 + 1, 8);
            v207 = v285;
          }
          *((_QWORD *)__src + v207) = v204;
          LODWORD(v285) = v285 + 1;
          goto LABEL_264;
        }
        sub_1C5F10574((uint64_t)v282, v206);
        v257 = 0;
        sub_1C5F104D0((uint64_t)v282, v204, &v257);
        goto LABEL_259;
      }
LABEL_268:
      if (v258 != v260)
        free(v258);
      llvm::SSAUpdater::~SSAUpdater((void **)v249);
      if (v262 != v264)
        free(v262);
      if (v265 != v267)
        free(v265);
      if (v268 != v270)
        free(v268);
      v16 = 1;
LABEL_277:
      v15 = *(_DWORD *)(a1 + 8);
      if (!v15)
        goto LABEL_310;
    }
  }
  v16 = 0;
LABEL_310:
  v221 = (uint64_t ****)__src;
  if (a6)
  {
    sub_1C618A450(a6, __src, (_BYTE *)__src + 8 * v285);
  }
  else if ((_DWORD)v285)
  {
    v222 = 8 * v285;
    do
    {
      v223 = *v221;
      if (!(*v221)[1])
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v223[5] + 5), *v221);
        v224 = v223[3];
        v225 = v223[4];
        *v225 = (uint64_t *)v224;
        v224[1] = (uint64_t *)v225;
        v223[3] = 0;
        v223[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v223);
      }
      ++v221;
      v222 -= 8;
    }
    while (v222);
  }
  v226 = v271;
  if ((v271 & 1) != 0)
  {
    v227 = 4;
  }
  else
  {
    v227 = v273;
    if (!v273)
      goto LABEL_325;
    v13 = v272;
  }
  v228 = v13 + 3;
  v229 = 32 * v227;
  do
  {
    v230 = *(v228 - 3);
    if (v230 != -4096 && v230 != -8192)
    {
      v231 = (_QWORD *)*(v228 - 2);
      if (v228 != v231)
        free(v231);
    }
    v228 += 4;
    v229 -= 32;
  }
  while (v229);
  v226 = v271;
LABEL_325:
  if ((v226 & 1) == 0)
    MEMORY[0x1CAA32FB4](v272, 8);
  v232 = v253;
  if ((_QWORD)v254)
  {
    sub_1C4D8AE2C((uint64_t)v253, v254, *((uint64_t *)&v254 + 1));
    v232 = v253;
  }
  else
  {
    *((_QWORD *)v253 + 6) = 0;
    *((_QWORD *)v232 + 7) = 0;
  }
  v268 = v255;
  if (v255)
  {
    llvm::MetadataTracking::track((uint64_t)&v268, v255, 2);
    v233 = v268;
  }
  else
  {
    v233 = 0;
  }
  sub_1C4774EF4((uint64_t)v232, 0, (uint64_t)v233);
  if (v268)
    llvm::MetadataTracking::untrack((uint64_t)&v268, (unsigned __int8 *)v268);
  if (v255)
    llvm::MetadataTracking::untrack((uint64_t)&v255, v255);
  sub_1C4926AE8((uint64_t)v279);
  MEMORY[0x1CAA32FB4](v276, 8);
  MEMORY[0x1CAA32FB4](v274[0], 8);
  if (__src != v286)
    free(__src);
  if ((v282[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v282[1], 8);
  if (v287 != v289)
    free(v287);
  return v16 & 1;
}

uint64_t llvm::formLCSSA(llvm *this, llvm::Loop *a2, const llvm::DominatorTree *a3, int32x2_t *a4, llvm::ScalarEvolution *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  void *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t i;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v42;
  uint64_t v43;
  _QWORD v44[10];
  int v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  uint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[64];
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[10];

  v65[8] = *MEMORY[0x1E0C80C00];
  v63 = v65;
  v64 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(this, (uint64_t)&v63);
  if ((_DWORD)v64)
  {
    v55 = 1;
    v56 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v57 = v56;
    v58 = v56;
    v59 = v56;
    v60 = v62;
    v61 = 0x800000000;
    v42 = v44;
    v43 = 0x800000000;
    sub_1C49EEBE4((uint64_t)&v42, (uint64_t)&v63);
    v9 = v43;
    while ((_DWORD)v43)
    {
      while (1)
      {
        v10 = *((_QWORD *)v42 + --v9);
        LODWORD(v43) = v9;
        if (**((_QWORD **)this + 4) != v10)
          break;
LABEL_19:
        if (!v9)
          goto LABEL_22;
      }
      v52 = 0;
      v11 = *((_QWORD *)a2 + 3);
      v12 = *((unsigned int *)a2 + 10);
      if ((_DWORD)v12)
      {
        LODWORD(v13) = (v12 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        v14 = (uint64_t *)(v11 + 16 * v13);
        v15 = *v14;
        if (v10 == *v14)
          goto LABEL_11;
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v12 - 1);
          v15 = *(_QWORD *)(v11 + 16 * v13);
          if (v10 == v15)
          {
            v14 = (uint64_t *)(v11 + 16 * v13);
            goto LABEL_11;
          }
        }
      }
      v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_11:
      v52 = **(void ***)(v14[1] + 8);
      v18 = sub_1C477672C((uint64_t)this + 56, (uint64_t)v52);
      v19 = *((_QWORD *)this + 8);
      if (v19 == *((_QWORD *)this + 7))
        v20 = (char *)this + 76;
      else
        v20 = (char *)this + 72;
      if (v18 != (_QWORD *)(v19 + 8 * *(unsigned int *)v20))
      {
        v21 = sub_1C50878C8((uint64_t)&v55, (uint64_t *)&v52);
        v9 = v43;
        if (v21)
        {
          v22 = v52;
          if (v43 >= HIDWORD(v43))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
            v9 = v43;
          }
          *((_QWORD *)v42 + v9) = v22;
          v9 = v43 + 1;
          LODWORD(v43) = v43 + 1;
        }
        goto LABEL_19;
      }
      v9 = v43;
    }
LABEL_22:
    if (v42 != v44)
      free(v42);
    v52 = v54;
    v53 = 0x800000000;
    if ((_DWORD)v61)
    {
      v23 = 0;
      v24 = (char *)v60;
      v25 = (char *)v60 + 8 * v61;
      do
      {
        v26 = *((_DWORD *)a3 + 4);
        if (v26)
        {
          v27 = *(_QWORD *)v24;
          v28 = *(_QWORD *)a3;
          v29 = v26 - 1;
          v30 = ((*(_QWORD *)v24 >> 4) ^ (*(_QWORD *)v24 >> 9)) & (v26 - 1);
          v31 = *(_QWORD *)(*(_QWORD *)a3
                          + 16 * (((*(_QWORD *)v24 >> 4) ^ (*(_QWORD *)v24 >> 9)) & v29));
          if (*(_QWORD *)v24 == v31)
          {
LABEL_31:
            if (*(llvm **)(v28 + 16 * v30 + 8) == this)
            {
              for (i = *(_QWORD *)(v27 + 48); i != v27 + 40; i = *(_QWORD *)(i + 8))
              {
                if (i)
                  v35 = (_QWORD *)(i - 24);
                else
                  v35 = 0;
                v36 = v35[1];
                if (v36)
                {
                  if (*(_QWORD *)(v36 + 8)
                    || (v37 = *(_QWORD *)(v36 + 24), *(_QWORD *)(v37 + 40) != v27)
                    || *(_BYTE *)(v37 + 16) == 83)
                  {
                    if (*(_BYTE *)(*v35 + 8) != 12)
                    {
                      if (v23 >= HIDWORD(v53))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v23 + 1, 8);
                        v23 = v53;
                      }
                      *((_QWORD *)v52 + v23) = v35;
                      v23 = v53 + 1;
                      LODWORD(v53) = v53 + 1;
                    }
                  }
                }
              }
            }
          }
          else
          {
            v32 = 1;
            while (v31 != -4096)
            {
              v33 = v30 + v32++;
              v30 = v33 & v29;
              v31 = *(_QWORD *)(v28 + 16 * v30);
              if (v27 == v31)
                goto LABEL_31;
            }
          }
        }
        v24 += 8;
      }
      while (v24 != v25);
    }
    v38 = ****((_QWORD ****)this + 4);
    v42 = v44;
    v43 = 0x200000000;
    v44[6] = v38;
    v44[7] = &v50;
    v44[8] = &v51;
    v44[9] = 0;
    v45 = 0;
    v46 = 512;
    v47 = 7;
    v44[4] = 0;
    v44[5] = 0;
    v48 = 0;
    v49 = 0;
    v50 = &unk_1E8167888;
    v51 = &unk_1E8167A08;
    v39 = llvm::formLCSSAForInstructions((uint64_t)&v52, (uint64_t)a2, (uint64_t *)a3, a4, (llvm::IRBuilderBase *)&v42, 0);
    v40 = v39;
    if (a4 && (v39 & 1) != 0)
      llvm::ScalarEvolution::forgetLoop(a4, this);
    if (v42 != v44)
      free(v42);
    if (v52 != v54)
      free(v52);
    if (v60 != v62)
      free(v60);
    if ((v55 & 1) == 0)
      MEMORY[0x1CAA32FB4](v56.i64[0], 8);
  }
  else
  {
    v40 = 0;
  }
  if (v63 != v65)
    free(v63);
  return v40;
}

uint64_t llvm::formLCSSARecursively(llvm *this, llvm::Loop *a2, const llvm::DominatorTree *a3, const llvm::LoopInfo *a4, llvm::ScalarEvolution *a5)
{
  llvm **v9;
  llvm **v10;
  int v11;
  llvm *v13;

  v9 = (llvm **)*((_QWORD *)this + 1);
  v10 = (llvm **)*((_QWORD *)this + 2);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = *v9++;
      v11 |= llvm::formLCSSARecursively(v13, a2, a3, a4, a5);
    }
    while (v9 != v10);
  }
  return (v11 | llvm::formLCSSA(this, a2, a3, (int32x2_t *)a4, a5)) & 1;
}

uint64_t sub_1C5F0F8E4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLCSSAVerificationPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Loop-Closed SSA Form Pass";
  *(_QWORD *)(v3 + 8) = 25;
  *(_QWORD *)(v3 + 16) = "lcssa";
  *(_QWORD *)(v3 + 24) = 5;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F7648;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5F0FBC8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5F0F988(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7648;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9850;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837400);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F0F8E4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837400, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LCSSAPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v7;
  uint64_t CachedResultImpl;
  llvm::ScalarEvolution *v9;
  const llvm::LoopInfo *v10;
  llvm **v11;
  llvm **v12;
  int v13;
  const llvm::DominatorTree *v14;
  llvm::Loop *v15;
  llvm *v16;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key, a1);
  if (CachedResultImpl)
    v10 = (const llvm::LoopInfo *)(CachedResultImpl + 8);
  else
    v10 = 0;
  v11 = *(llvm ***)(ResultImpl + 32);
  v12 = *(llvm ***)(ResultImpl + 40);
  if (v11 == v12)
    goto LABEL_9;
  v13 = 0;
  v14 = (const llvm::DominatorTree *)(ResultImpl + 8);
  v15 = (llvm::Loop *)(v7 + 8);
  do
  {
    v16 = *v11++;
    v13 |= llvm::formLCSSARecursively(v16, v15, v14, v10, v9);
  }
  while (v11 != v12);
  if ((v13 & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
    sub_1C4DDB144(a3, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::BranchProbabilityAnalysis::Key);
    return sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
}

uint64_t sub_1C5F0FBC8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F0F988(v0);
}

void sub_1C5F0FBF4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F0FC18(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LCSSAVerificationPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LCSSAVerificationPass::ID);
}

uint64_t sub_1C5F0FD38(uint64_t a1)
{
  char **v2;
  char *v3;
  char **v4;
  char *v5;
  uint64_t AnalysisPass;
  llvm::ScalarEvolution *v7;
  uint64_t v8;
  const llvm::LoopInfo *v9;
  const llvm::DominatorTree *v10;
  llvm **v11;
  llvm **v12;
  int v13;
  llvm::Loop *v14;
  llvm *v15;

  v2 = **(char ****)(a1 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass
    && (v8 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID)) != 0)
  {
    v9 = *(const llvm::LoopInfo **)(v8 + 32);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(const llvm::DominatorTree **)(a1 + 40);
  v11 = (llvm **)*((_QWORD *)v10 + 3);
  v12 = (llvm **)*((_QWORD *)v10 + 4);
  if (v11 == v12)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    v13 = 0;
    v14 = *(llvm::Loop **)(a1 + 32);
    do
    {
      v15 = *v11++;
      v13 |= llvm::formLCSSARecursively(v15, v14, v10, v9, v7);
    }
    while (v11 != v12);
  }
  return v13 & 1;
}

uint64_t sub_1C5F0FE64(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_4;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_4;
    }
    if (v9)
      v7 = v9;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5F0FF00(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 4;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5F10074(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 32 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 32 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C5F10074(a1, v7);
      v19 = 0;
      sub_1C5F0FE64(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

void sub_1C5F10074(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[17];

  v2 = a2;
  v20[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5F102D0((int *)a1, v7, &v7[4 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 3;
    v10[1] = (uint64_t)(v10 + 3);
    *v10 = v12;
    v10[2] = 0x100000000;
    v14 = *(unsigned int *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if ((_DWORD)v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        v10[1] = (uint64_t)v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 1), (uint64_t)(v10 + 3), v14, 8);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)v10[1];
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 8 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 4;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C5F102D0((int *)a1, v20, v10);
}

void sub_1C5F102D0(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = a1 + 34;
    v9 = a1 + 2;
  }
  else
  {
    v8 = a1[4];
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (_QWORD *)*((_QWORD *)a1 + 1);
    v10 = &v9[4 * v8];
  }
  do
  {
    *v9 = -4096;
    v9 += 4;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_22:
      v4 += 4;
      if (v4 == a3)
        return;
    }
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v12 = 4;
      v13 = v7;
    }
    else
    {
      v13 = (int *)*((_QWORD *)a1 + 1);
      v12 = a1[4];
    }
    v14 = v12 - 1;
    v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
    v16 = (uint64_t *)&v13[8 * v15];
    v17 = *v16;
    if (v11 != *v16)
    {
      v24 = 0;
      v25 = 1;
      while (v17 != -4096)
      {
        if (v24)
          v27 = 0;
        else
          v27 = v17 == -8192;
        if (v27)
          v24 = v16;
        v28 = v15 + v25++;
        v15 = v28 & v14;
        v16 = (uint64_t *)&v13[8 * v15];
        v17 = *v16;
        if (v11 == *v16)
          goto LABEL_10;
      }
      if (v24)
        v16 = v24;
    }
LABEL_10:
    *v16 = v11;
    v18 = v16 + 3;
    v16[1] = (uint64_t)(v16 + 3);
    v16[2] = 0x100000000;
    v19 = *((unsigned int *)v4 + 4);
    if (v16 == v4 || (_DWORD)v19 == 0)
    {
LABEL_20:
      *a1 += 2;
      v23 = (uint64_t *)v4[1];
      if (v23 != v4 + 3)
        free(v23);
      goto LABEL_22;
    }
    v21 = (uint64_t *)v4[1];
    if (v21 != v4 + 3)
    {
      v16[1] = (uint64_t)v21;
      v26 = *((_DWORD *)v4 + 5);
      *((_DWORD *)v16 + 4) = v19;
      *((_DWORD *)v16 + 5) = v26;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      goto LABEL_19;
    }
    if (v19 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 1), (uint64_t)(v16 + 3), v19, 8);
      v22 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v22)
        goto LABEL_18;
      v21 = (uint64_t *)v4[1];
      v18 = (void *)v16[1];
    }
    else
    {
      v22 = *((unsigned int *)v4 + 4);
    }
    memcpy(v18, v21, 8 * v22);
LABEL_18:
    *((_DWORD *)v16 + 4) = v19;
LABEL_19:
    *((_DWORD *)v4 + 4) = 0;
    goto LABEL_20;
  }
}

uint64_t sub_1C5F104D0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5F10574(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5F106DC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5F106DC(a1, v14, v8);
}

uint64_t sub_1C5F106DC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5F104D0((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C5F10794()
{
  __n128 v1;
  int v2;
  _BYTE *v3;

  v3 = &unk_1ED8270B8;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop lcssa form (time consuming)";
  v1.n128_u64[1] = 39;
  sub_1C63ADD00(&v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED8270C0, &dword_1C475E000);
}

void llvm::initializeLibCallsShrinkWrapLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837408);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F1085C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837408, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F1085C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Conditionally eliminate dead library calls";
  *(_QWORD *)(v2 + 8) = 42;
  *(_QWORD *)(v2 + 16) = "libcalls-shrinkwrap";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5882;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F11784;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F108F0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5882;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9900;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837408);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F1085C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837408, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LibCallsShrinkWrapPass::run@<X0>(llvm::ValueSymbolTable *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t CachedResultImpl;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1)+ 8);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, (uint64_t)a1);
  if (CachedResultImpl)
    v8 = CachedResultImpl + 8;
  else
    v8 = 0;
  v9 = sub_1C5F10AB4(a1, v6, v8);
  v10 = a3 + 80;
  if ((v9 & 1) != 0)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = v10;
    *(_QWORD *)(a3 + 56) = v10;
    *(_DWORD *)(a3 + 64) = 2;
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = v10;
    *(_QWORD *)(a3 + 56) = v10;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
}

uint64_t sub_1C5F10AB4(llvm::ValueSymbolTable *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  char *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  char v40;
  uint64_t ****v41;
  uint64_t ***v42;
  uint64_t ***v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ****v48;
  uint64_t ***v49;
  int v50;
  int v51;
  uint64_t ***v52;
  char *v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t ***v64;
  uint64_t *v65;
  llvm::Constant **v66;
  unsigned int v67;
  BOOL v68;
  llvm::Value *FCmpHelper;
  double v72;
  llvm::ConstantFP *v73;
  const llvm::APFloat *v74;
  llvm::APFloatBase *v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  llvm::Type ***v82;
  const char *v83;
  int PrimitiveSizeInBits;
  uint64_t v85;
  uint64_t v86;
  llvm::MDNode *v87;
  uint64_t v88;
  uint64_t ***SingleSuccessor;
  uint64_t **v90;
  uint64_t **v91;
  uint64_t ***v92;
  uint64_t **v93;
  uint64_t **i;
  uint64_t **v95;
  unsigned int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v100;
  uint64_t v101;
  llvm::ConstantFP *v102;
  const llvm::APFloat *v103;
  llvm::APFloatBase *v104;
  llvm::ConstantFP *v105;
  const llvm::APFloat *v106;
  llvm::APFloatBase *v107;
  uint64_t v108;
  _QWORD *v109;
  llvm::UndefValue *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _BYTE v123[128];
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char v128;
  __int16 v129;
  void *v130[2];
  uint64_t v131;
  __int16 v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 14);
  if (v3 && (*(_BYTE *)(v3 + 17) & 4) != 0
    || (v119 = a2,
        v120 = a3,
        v121 = v123,
        v122 = 0x1000000000,
        v4 = (_QWORD *)((char *)a1 + 72),
        v5 = (_QWORD *)*((_QWORD *)a1 + 10),
        v5 == (_QWORD *)((char *)a1 + 72)))
  {
    v40 = 0;
    return v40 & 1;
  }
  do
  {
    v6 = v5 - 3;
    v68 = v5 == 0;
    v5 = (_QWORD *)v5[1];
    if (v68)
      v6 = 0;
    v7 = v6 + 5;
    v8 = (_QWORD *)v6[6];
    while (v8 != v7)
    {
      v9 = (uint64_t)(v8 - 3);
      v68 = v8 == 0;
      v8 = (_QWORD *)v8[1];
      if (v68)
        v10 = 0;
      else
        v10 = v9;
      if (*(_BYTE *)(v10 + 16) == 84)
      {
        v11 = *(_QWORD *)(v10 + 64);
        if (!v11 || (*(_BYTE *)(v11 + 14) & 0x10) == 0)
        {
          LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction(v10, 20);
          if (!(_DWORD)a1)
            goto LABEL_18;
          v11 = *(_QWORD *)(v10 + 64);
          if (!v11)
            goto LABEL_17;
        }
        if ((*(_BYTE *)(v11 + 12) & 0x10) != 0)
        {
          LODWORD(a1) = 1;
LABEL_18:
          if (!*(_QWORD *)(v10 + 8))
          {
            LODWORD(v130[0]) = 0;
            v12 = *(uint64_t ****)(v10 - 32);
            if (v12)
            {
              if (!*((_BYTE *)v12 + 16))
              {
                v13 = (uint64_t)v12[3];
                if (v13 == *(_QWORD *)(v10 + 72) && (*((_BYTE *)v12 + 33) & 0x20) == 0)
                {
                  if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
                  {
                    v14 = ***v12;
                    v15 = *(_QWORD *)(v14 + 152);
                    v16 = *(unsigned int *)(v14 + 168);
                    if (!(_DWORD)v16)
                      goto LABEL_31;
                    LODWORD(v17) = (v16 - 1) & ((v12 >> 4) ^ (v12 >> 9));
                    v18 = (uint64_t ****)(v15 + 16 * v17);
                    v19 = *v18;
                    if (*v18 != v12)
                    {
                      v20 = 1;
                      while (v19 != (uint64_t ***)-4096)
                      {
                        v21 = v17 + v20++;
                        v17 = v21 & (v16 - 1);
                        v19 = *(uint64_t ****)(v15 + 16 * v17);
                        if (v19 == v12)
                        {
                          v18 = (uint64_t ****)(v15 + 16 * v17);
                          goto LABEL_32;
                        }
                      }
LABEL_31:
                      v18 = (uint64_t ****)(v15 + 16 * v16);
                    }
LABEL_32:
                    v22 = v18[1];
                    v25 = (size_t)*v22;
                    v23 = (char *)(v22 + 2);
                    v24 = v25;
                    goto LABEL_33;
                  }
                  v24 = 0;
                  v23 = &byte_1C871356D;
LABEL_33:
                  v26 = *v119;
                  LODWORD(a1) = llvm::TargetLibraryInfoImpl::getLibFunc((int)a1, v23, v24, v130);
                  if ((_DWORD)a1)
                  {
                    v27 = v13;
                    v28 = LODWORD(v130[0]);
                    LODWORD(a1) = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v26, v27, (int)v130[0]);
                    if ((_DWORD)a1)
                    {
                      if (((*(_QWORD *)(v119[1] + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0
                        && ((*(unsigned __int8 *)(*v119 + (v28 >> 2)) >> (2 * (v28 & 3))) & 3) != 0)
                      {
                        v29 = *(unsigned __int8 *)(v10 + 16);
                        if (v29 == 84)
                        {
                          v30 = 0;
                        }
                        else if (v29 == 39)
                        {
                          v30 = (*(_DWORD *)(v10 + 80) + 1);
                        }
                        else
                        {
                          v30 = 2;
                        }
                        v31 = 0;
                        v32 = *(_DWORD *)(v10 + 20);
                        v33 = -(uint64_t)(v32 & 0x7FFFFFF);
                        if (v32 < 0)
                        {
                          v37 = v10 - 32 * (v32 & 0x7FFFFFF);
                          v38 = *(_QWORD *)(v37 - 8);
                          if ((v38 & 0xFFFFFFFF0) != 0)
                            v31 = (*(_DWORD *)(v37 - 12) - *(_DWORD *)(v37 - v38));
                          else
                            v31 = 0;
                        }
                        v34 = v10 - 32 * v30 - 32 * v31 - 32;
                        v35 = v10 + 32 * v33;
                        if (v34 != v35 && *(unsigned __int8 *)(**(_QWORD **)v35 + 8) - 2 <= 2)
                        {
                          v36 = v122;
                          if (v122 >= (unint64_t)HIDWORD(v122))
                          {
                            LODWORD(a1) = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
                            v36 = v122;
                          }
                          *((_QWORD *)v121 + v36) = v10;
                          LODWORD(v122) = v122 + 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_17:
          LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction(v10, 4);
          if ((_DWORD)a1)
            goto LABEL_18;
        }
      }
    }
  }
  while (v5 != v4);
  v39 = (uint64_t ****)v121;
  if (!(_DWORD)v122)
  {
    v40 = 0;
    goto LABEL_175;
  }
  v40 = 0;
  v41 = (uint64_t ****)((char *)v121 + 8 * v122);
  while (2)
  {
    v42 = *v39;
    v112 = 0;
    v43 = (uint64_t ***)*(v42 - 4);
    if ((*((_BYTE *)v43 + 33) & 0x20) == 0)
    {
      if ((*((_BYTE *)v43 + 23) & 0x10) == 0)
      {
        v54 = 0;
        v53 = &byte_1C871356D;
LABEL_67:
        v56 = (uint64_t)v43[3];
        v57 = *v119;
        LODWORD(a1) = llvm::TargetLibraryInfoImpl::getLibFunc((int)a1, v53, v54, &v112);
        v58 = v112;
        if ((_DWORD)a1)
          LODWORD(a1) = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v57, v56, v112);
        v59 = (v58 - 300);
        if (v59 > 0x2F)
        {
LABEL_70:
          v60 = 709.0;
          switch(v58)
          {
            case 142:
            case 143:
            case 147:
            case 149:
            case 150:
            case 154:
              v76 = -1.0;
              v77 = 1.0;
              v78 = (uint64_t)v42;
              v79 = 4;
              v80 = 2;
              goto LABEL_128;
            case 144:
            case 145:
            case 146:
              v60 = 1.0;
              goto LABEL_110;
            case 148:
            case 151:
            case 152:
            case 153:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
              goto LABEL_56;
            case 160:
            case 161:
            case 162:
              v76 = -1.0;
              v77 = 1.0;
              v78 = (uint64_t)v42;
              v79 = 5;
              v80 = 3;
              goto LABEL_128;
            case 188:
            case 189:
            case 193:
              goto LABEL_105;
            case 190:
            case 191:
            case 192:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
              goto LABEL_71;
            case 212:
              goto LABEL_125;
            case 213:
              v60 = 88.0;
              goto LABEL_125;
            case 214:
              v60 = 11356.0;
LABEL_125:
              v61 = (uint64_t)v42;
              v62 = 2;
              goto LABEL_126;
            default:
              if ((v58 - 384) > 0xB)
                goto LABEL_56;
              v63 = 1 << (v58 + 0x80);
              if ((v63 & 0x1C) != 0)
              {
LABEL_71:
                if (v58 <= 385)
                  __asm { BR              X9 }
                v76 = 710.0;
                v77 = -710.0;
                if (v58 != 386)
                {
                  if (v58 == 388)
                  {
                    v76 = 11357.0;
                    v77 = -11357.0;
                  }
                  else
                  {
                    v77 = -89.0;
                    v76 = 89.0;
                  }
                }
                v78 = (uint64_t)v42;
                v79 = 2;
                v80 = 4;
                goto LABEL_128;
              }
              if ((v63 & 0x23) != 0)
              {
LABEL_105:
                v76 = INFINITY;
                v77 = -INFINITY;
                v78 = (uint64_t)v42;
                v79 = 1;
                v80 = 1;
LABEL_128:
                v86 = sub_1C5F11AC8(v78, v79, v80, v76, v77);
                goto LABEL_129;
              }
              if ((v63 & 0xE00) == 0)
                goto LABEL_56;
              v60 = 0.0;
LABEL_110:
              v61 = (uint64_t)v42;
              v62 = 4;
              break;
          }
          goto LABEL_126;
        }
        if (v59 != 47)
        {
          if (((1 << (v58 - 44)) & 0x7F8F) != 0)
          {
            v60 = 0.0;
          }
          else
          {
            if (((1 << (v58 - 44)) & 0x70) == 0)
              goto LABEL_70;
            v60 = -1.0;
          }
          v61 = (uint64_t)v42;
          v62 = 5;
LABEL_126:
          v86 = sub_1C5F11BD8(v61, v62, v60);
LABEL_129:
          FCmpHelper = (llvm::Value *)v86;
LABEL_130:
          v124 = **v42;
          v130[0] = (void *)0x7D000000001;
          v87 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v124, (uint64_t)v130, 2);
          v88 = *((_QWORD *)sub_1C5EBFBC0(FCmpHelper, (uint64_t *)v42, 0, v87, 0, v120, 0, 0) + 5);
          v130[0] = "cdce.call";
          v132 = 259;
          llvm::Value::setName((uint64_t ***)v88, (uint64_t)v130);
          SingleSuccessor = (uint64_t ***)llvm::BasicBlock::getSingleSuccessor((llvm::BasicBlock *)v88);
          v130[0] = "cdce.end";
          v132 = 259;
          llvm::Value::setName(SingleSuccessor, (uint64_t)v130);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v42[5] + 5), v42);
          v90 = v42[3];
          v91 = v42[4];
          v92 = v42 + 3;
          *v91 = (uint64_t *)v90;
          v90[1] = (uint64_t *)v91;
          v42[3] = 0;
          v42[4] = 0;
          v93 = (uint64_t **)(v88 + 40);
          for (i = *(uint64_t ***)(v88 + 48); i != v93; i = (uint64_t **)i[1])
          {
            v95 = i - 3;
            if (!i)
              v95 = 0;
            if (*((_BYTE *)v95 + 16) != 83)
            {
              v96 = *((unsigned __int8 *)i - 8) - 38;
              v97 = v96 > 0x38;
              v98 = (1 << v96) & 0x100060000000001;
              if (v97 || v98 == 0)
                v93 = i;
              else
                v93 = (uint64_t **)i[1];
              break;
            }
          }
          v42[5] = (uint64_t **)v88;
          *(_WORD *)(v88 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v42 + 23) & 0x10) != 0)
          {
            v101 = *(_QWORD *)(v88 + 56);
            if (v101)
            {
              a1 = *(llvm::ValueSymbolTable **)(v101 + 104);
              if (a1)
                llvm::ValueSymbolTable::reinsertValue(a1, (llvm::Value *)v42);
            }
          }
          v100 = *v93;
          v42[3] = (uint64_t **)*v93;
          v42[4] = v93;
          v100[1] = (uint64_t)v92;
          *v93 = (uint64_t *)v92;
          v40 = 1;
          goto LABEL_56;
        }
        v64 = &v42[-4 * (*((_DWORD *)v42 + 5) & 0x7FFFFFF)];
        v65 = (uint64_t *)*v64;
        v66 = (llvm::Constant **)v64[4];
        sub_1C4773D54((uint64_t)v130, (uint64_t)v42, 0, 0, 0);
        v67 = *((unsigned __int8 *)v65 + 16);
        v68 = v67 != 17 || v65 == 0;
        if (!v68)
        {
          v72 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v65 + 3));
          FCmpHelper = 0;
          if (v72 >= 1.0 && v72 <= 255.0)
          {
            v73 = (llvm::ConstantFP *)**v42;
            v118 = 32;
            v117 = 1123942400;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v113, (const llvm::APInt **)&v117);
            v125 = v113;
            v126 = v114;
            v127 = v115;
            v128 = v128 & 0xF0 | v116 & 0xF;
            v75 = llvm::ConstantFP::get(v73, (llvm::LLVMContext *)&v124, v74);
            if ((_UNKNOWN *)v125 == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v126);
            }
            else if ((*(_DWORD *)(v125 + 8) - 64) <= 0xFFFFFF7F && v126)
            {
              MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
            }
            if (*((_BYTE *)*v66 + 8) != 2)
              v75 = sub_1C537D3B8((llvm *)0x2E, (uint64_t)v75, *v66, 0);
            v129 = 257;
            FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v130, 2, (uint64_t *)v66, (uint64_t)v75, (uint64_t)&v124, 0, 0);
          }
          goto LABEL_159;
        }
        if (v67 < 0x1C || v65 == 0 || v67 - 73 < 0xFFFFFFFE)
        {
LABEL_94:
          FCmpHelper = 0;
          goto LABEL_159;
        }
        v81 = *((_DWORD *)v65 + 5);
        if ((v81 & 0x40000000) != 0)
          v82 = (llvm::Type ***)*(v65 - 1);
        else
          v82 = (llvm::Type ***)&v65[-4 * (v81 & 0x7FFFFFF)];
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**v82);
        if ((_DWORD)v83 == 1)
        switch(PrimitiveSizeInBits)
        {
          case 8:
            v85 = 1124073472;
            break;
          case 32:
            v85 = 1107296256;
            break;
          case 16:
            v85 = 1115684864;
            break;
          default:
            goto LABEL_94;
        }
        v102 = (llvm::ConstantFP *)**v42;
        v118 = 32;
        v117 = v85;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v113, (const llvm::APInt **)&v117);
        v125 = v113;
        v126 = v114;
        v127 = v115;
        v128 = v128 & 0xF0 | v116 & 0xF;
        v104 = llvm::ConstantFP::get(v102, (llvm::LLVMContext *)&v124, v103);
        if ((_UNKNOWN *)v125 == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v126);
        }
        else if ((*(_DWORD *)(v125 + 8) - 64) <= 0xFFFFFF7F && v126)
        {
          MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
        }
        v105 = (llvm::ConstantFP *)**v42;
        v118 = 32;
        v117 = 0;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v113, (const llvm::APInt **)&v117);
        v125 = v113;
        v126 = v114;
        v127 = v115;
        v128 = v128 & 0xF0 | v116 & 0xF;
        v107 = llvm::ConstantFP::get(v105, (llvm::LLVMContext *)&v124, v106);
        if ((_UNKNOWN *)v125 == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v126);
        }
        else if ((*(_DWORD *)(v125 + 8) - 64) <= 0xFFFFFF7F && v126)
        {
          MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
        }
        if (*((_BYTE *)*v66 + 8) != 2)
          v104 = sub_1C537D3B8((llvm *)0x2E, (uint64_t)v104, *v66, 0);
        if (*(_BYTE *)(*v65 + 8) == 2)
          v111 = v107;
        else
          v111 = sub_1C537D3B8((llvm *)0x2E, (uint64_t)v107, *v66, 0);
        v129 = 257;
        v108 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v130, 2, (uint64_t *)v66, (uint64_t)v104, (uint64_t)&v124, 0, 0);
        v129 = 257;
        v109 = (_QWORD *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v130, 5, v65, (uint64_t)v111, (uint64_t)&v124, 0, 0);
        v129 = 257;
        FCmpHelper = (llvm::Value *)sub_1C4773594((uint64_t)v130, v109, v108, (uint64_t)&v124);
LABEL_159:
        LODWORD(a1) = v130[0];
        if (v130[0] == &v131)
        {
          if (!FCmpHelper)
            goto LABEL_56;
        }
        else
        {
          free(v130[0]);
          if (!FCmpHelper)
            goto LABEL_56;
        }
        goto LABEL_130;
      }
      v44 = ***v43;
      v45 = *(_QWORD *)(v44 + 152);
      v46 = *(unsigned int *)(v44 + 168);
      if ((_DWORD)v46)
      {
        LODWORD(v47) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        v48 = (uint64_t ****)(v45 + 16 * v47);
        v49 = *v48;
        if (*v48 == v43)
        {
LABEL_66:
          v52 = v48[1];
          v55 = (size_t)*v52;
          v53 = (char *)(v52 + 2);
          v54 = v55;
          goto LABEL_67;
        }
        v50 = 1;
        while (v49 != (uint64_t ***)-4096)
        {
          v51 = v47 + v50++;
          v47 = v51 & (v46 - 1);
          v49 = *(uint64_t ****)(v45 + 16 * v47);
          if (v49 == v43)
          {
            v48 = (uint64_t ****)(v45 + 16 * v47);
            goto LABEL_66;
          }
        }
      }
      v48 = (uint64_t ****)(v45 + 16 * v46);
      goto LABEL_66;
    }
LABEL_56:
    if (++v39 != v41)
      continue;
    break;
  }
  v39 = (uint64_t ****)v121;
LABEL_175:
  if (v39 != (uint64_t ****)v123)
    free(v39);
  return v40 & 1;
}

uint64_t sub_1C5F11784()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F108F0(v0);
}

void sub_1C5F117B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F117D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5F1182C(uint64_t a1, llvm::ValueSymbolTable *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AnalysisPass;
  uint64_t v11;
  void *v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *__src;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, (uint64_t)a2, (uint64_t)&v24);
  *(_QWORD *)(v6 + 240) = v24;
  if (*(_BYTE *)(v6 + 320))
  {
    if ((uint64_t *)(v6 + 240) == &v24)
    {
LABEL_16:
      *(_DWORD *)(v6 + 312) = v28;
      goto LABEL_17;
    }
    v7 = (void **)(v6 + 248);
    v8 = v26;
    v9 = *(unsigned int *)(v6 + 256);
    if (v9 >= v26)
    {
      if (v26)
        memmove(*v7, __src, 8 * v26);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 260) < v26)
    {
      *(_DWORD *)(v6 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      memmove(*v7, __src, 8 * v9);
      goto LABEL_13;
    }
    v9 = 0;
LABEL_13:
    if (v9 != v26)
      memcpy((char *)*v7 + 8 * v9, (char *)__src + 8 * v9, 8 * v26 - 8 * v9);
LABEL_15:
    *(_DWORD *)(v6 + 256) = v8;
    goto LABEL_16;
  }
  v13 = (void *)(v6 + 264);
  *(_QWORD *)(v6 + 248) = v6 + 264;
  v14 = (void **)(v6 + 248);
  *(_QWORD *)(v6 + 256) = 0x600000000;
  v15 = v26;
  if (v26 && v14 != &__src)
  {
    if (v26 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v26, 8);
      v16 = v26;
      if (!v26)
      {
LABEL_32:
        *(_DWORD *)(v6 + 256) = v15;
        goto LABEL_33;
      }
      v13 = *v14;
    }
    else
    {
      v16 = v26;
    }
    memcpy(v13, __src, 8 * v16);
    goto LABEL_32;
  }
LABEL_33:
  *(_DWORD *)(v6 + 312) = v28;
  *(_BYTE *)(v6 + 320) = 1;
LABEL_17:
  if (__src != &v27)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v19);
  sub_1C4D8B52C(v17);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v11 = AnalysisPass + 32;
  else
    v11 = 0;
  return sub_1C5F10AB4(a2, (uint64_t *)(v6 + 240), v11);
}

uint64_t sub_1C5F11AC8(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  llvm::Constant **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[32];
  __int16 v16;
  void *v17[2];
  _QWORD v18[16];

  v18[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a1, 0, 0, 0);
  v10 = *(llvm::Constant ***)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v11 = sub_1C5F11CA0((uint64_t)v17, v10, a3, a5);
  v12 = (_QWORD *)sub_1C5F11CA0((uint64_t)v17, v10, a2, a4);
  v16 = 257;
  result = sub_1C4773594((uint64_t)v17, v12, v11, (uint64_t)v15);
  if (v17[0] != v18)
  {
    v14 = result;
    free(v17[0]);
    return v14;
  }
  return result;
}

uint64_t sub_1C5F11BD8(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[16];

  v9[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v8, a1, 0, 0, 0);
  result = sub_1C5F11CA0((uint64_t)v8, *(llvm::Constant ***)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, a3);
  if (v8[0] != v9)
  {
    v7 = result;
    free(v8[0]);
    return v7;
  }
  return result;
}

uint64_t sub_1C5F11CA0(uint64_t a1, llvm::Constant **a2, uint64_t a3, float a4)
{
  llvm::ConstantFP *v7;
  const llvm::APFloat *v8;
  llvm::APFloatBase *v9;
  llvm::APFloatBase *v11;
  _QWORD v12[2];
  int v13;
  char v14;
  const llvm::APInt *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = *(llvm::ConstantFP **)(a1 + 64);
  LODWORD(v16) = 32;
  v15 = (const llvm::APInt *)LODWORD(a4);
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v12, &v15);
  v16 = v12[0];
  v17 = v12[1];
  v18 = v13;
  v19 = v14 & 0xF;
  v9 = llvm::ConstantFP::get(v7, (llvm::LLVMContext *)&v15, v8);
  if ((_UNKNOWN *)v16 == &unk_1C866F1C0)
  {
    v11 = v9;
    sub_1C4773C74(&v17);
LABEL_9:
    v9 = v11;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17)
  {
    v11 = v9;
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    goto LABEL_9;
  }
LABEL_3:
  if (*((_BYTE *)*a2 + 8) != 2)
    v9 = sub_1C537D3B8((llvm *)0x2E, (uint64_t)v9, *a2, 0);
  v20 = 257;
  return llvm::IRBuilderBase::CreateFCmpHelper(a1, a3, (uint64_t *)a2, (uint64_t)v9, (uint64_t)&v15, 0, 0);
}

uint64_t llvm::ConstantFoldTerminator(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t ***v11;
  int v12;
  char v13;
  int v14;
  uint64_t ***v15;
  int v16;
  llvm::Value **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  llvm::BasicBlock *v21;
  llvm::BasicBlock *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  llvm::Value *v26;
  _QWORD *v27;
  uint64_t v28;
  llvm::BasicBlock *v29;
  char *v30;
  char *v31;
  unsigned __int8 **v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t **v37;
  llvm::BasicBlock *v38;
  char *FirstNonPHIOrDbg;
  unsigned int v40;
  BOOL v41;
  llvm::BasicBlock *v42;
  uint64_t ***v43;
  char *v44;
  char *v45;
  llvm::Value *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unsigned __int8 **v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t **v58;
  void (*v59)(void);
  uint64_t **v60;
  uint64_t **v61;
  llvm::Value *v62;
  llvm::BasicBlock *v63;
  char *v64;
  char *v65;
  llvm::Value *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unsigned __int8 **v71;
  int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t ****v92;
  uint64_t ***v93;
  uint64_t ****v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t ****v108;
  uint64_t ***v109;
  _DWORD *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  _DWORD *v118;
  int v119;
  llvm::MDNode *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  llvm::BasicBlock *v124;
  int v125;
  uint64_t ***v126;
  uint64_t ***v127;
  llvm::BasicBlock *v128;
  uint64_t ***v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t ***v132;
  char *v133;
  char *v134;
  llvm::Value *v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  unsigned __int8 **v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  llvm::BasicBlock *v145;
  int v146;
  int v147;
  unsigned int v148;
  llvm::BasicBlock *v149;
  uint64_t Successor;
  llvm::BasicBlock *v151;
  int v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t **v157;
  void (**v158)(void);
  uint64_t v159;
  uint64_t **v160;
  uint64_t **v161;
  void (**v162)(void);
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  llvm::BasicBlock **v177;
  char *v178;
  void *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  llvm::Value *v184;
  int v185;
  uint64_t ***v186;
  llvm::BasicBlock *v187;
  llvm::BasicBlock *v188;
  _DWORD *v189;
  _DWORD *v190;
  uint64_t v191;
  llvm::Value *v192;
  _QWORD *v193;
  char *v194;
  char *v195;
  unsigned __int8 **v196;
  int v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  uint64_t ****v206;
  uint64_t ***v207;
  uint64_t ****v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t ***v216;
  uint64_t ***v217;
  uint64_t **v218;
  uint64_t **v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  void *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  uint64_t ****v247;
  uint64_t ***v248;
  uint64_t ****v249;
  int v250;
  BOOL v251;
  unsigned int v252;
  uint64_t v253;
  llvm::MDNode **v254;
  uint64_t v255;
  uint64_t **v256;
  uint64_t **v257;
  uint64_t ****v259;
  uint64_t ***v260;
  uint64_t ****v261;
  uint64_t ***v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unsigned int v268;
  _QWORD *v269;
  llvm::MDNode *BranchWeights;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  llvm::Constant *v274;
  unsigned int v275;
  char v276;
  char v277;
  uint64_t *v278;
  uint64_t *v279;
  void *__p;
  char *v281;
  char *v282;
  __int16 v283;
  unsigned __int8 *v284;
  _QWORD v285[3];
  _QWORD *v286;
  _QWORD v287[3];
  _QWORD *v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  _WORD v293[32];
  _QWORD v294[3];
  _QWORD *v295;
  char *v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;

  v7 = a1;
  v302 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 == a1 + 40)
  {
    v11 = 0;
  }
  else
  {
    if (v8)
      v10 = v8 - 24;
    else
      v10 = 0;
    if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
      v11 = 0;
    else
      v11 = (uint64_t ***)v10;
  }
  sub_1C4773D54((uint64_t)&v296, (uint64_t)v11, 0, 0, 0);
  v12 = *((unsigned __int8 *)v11 + 16);
  if (!v11 || v12 != 30)
  {
    if (v11 && v12 == 31)
    {
      v14 = *((_DWORD *)v11 + 5);
      v278 = a3;
      v276 = a2;
      if ((v14 & 0x40000000) != 0)
        v15 = (uint64_t ***)*(v11 - 1);
      else
        v15 = &v11[-4 * (v14 & 0x7FFFFFF)];
      if (*((_BYTE *)*v15 + 16) == 16)
        v37 = *v15;
      else
        v37 = 0;
      v38 = (llvm::BasicBlock *)v15[4];
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v38, 1);
      v40 = *((_DWORD *)v11 + 5);
      v41 = FirstNonPHIOrDbg[16] != 35 || (v40 & 0x7FFFFFE) == 2;
      v42 = v38;
      if (!v41)
      {
        if ((v40 & 0x40000000) != 0)
          v43 = (uint64_t ***)*(v11 - 1);
        else
          v43 = &v11[-4 * (v40 & 0x7FFFFFF)];
        v42 = (llvm::BasicBlock *)v43[12];
      }
      v13 = 0;
      v76 = ((v40 >> 1) & 0x3FFFFFF) - 1;
      if (((v40 >> 1) & 0x3FFFFFF) == 1)
        goto LABEL_191;
      v77 = 0;
      v78 = &v291;
      v79 = (uint64_t)v11;
      v275 = (v11 >> 4) ^ (v11 >> 9);
      while (2)
      {
        v80 = *(_DWORD *)(v79 + 20);
        v81 = 2 * v77;
        while (1)
        {
          if ((v80 & 0x40000000) != 0)
          {
            v83 = *(_QWORD *)(v79 - 8);
            v82 = v81;
            if (*(uint64_t ***)(v83 + 32 * ((v81 + 2) & 0xFFFFFFFE)) == v37)
              goto LABEL_188;
          }
          else
          {
            if (*(uint64_t ***)(v79 - 32 * (v80 & 0x7FFFFFF) + 32 * ((v81 + 2) & 0xFFFFFFFE)) == v37)
            {
              v83 = v79 - 32 * (v80 & 0x7FFFFFF);
LABEL_188:
              v131 = (v81 + 3);
              if ((_DWORD)v77 == -2)
                v131 = 1;
              v42 = *(llvm::BasicBlock **)(v83 + 32 * v131);
              goto LABEL_191;
            }
            v82 = 2 * v77;
            v83 = v79 - 32 * (v80 & 0x7FFFFFF);
          }
          v84 = (v82 + 3);
          if ((_DWORD)v77 == -2)
            v84 = 1;
          v85 = 32 * v84;
          if (*(llvm::BasicBlock **)(v83 + v85) == v38)
            break;
          v86 = v79 - 32 * (v80 & 0x7FFFFFF);
          if ((v80 & 0x40000000) != 0)
            v86 = *(_QWORD *)(v79 - 8);
          if (*(llvm::BasicBlock **)(v86 + v85) != v42)
            v42 = 0;
          ++v77;
          v81 += 2;
          if (v76 == v77)
            goto LABEL_191;
        }
        if (!v11[6] && (v40 & 0x20000000) == 0)
        {
LABEL_147:
          llvm::BasicBlock::removePredecessor(v38, (llvm::BasicBlock *)v11[5], 0);
          v79 = llvm::SwitchInst::removeCase((uint64_t)v11, v79, v77);
          v77 = v107;
          v40 = *((_DWORD *)v11 + 5);
          v76 = ((v40 >> 1) & 0x3FFFFFF) - 1;
          v13 = 1;
          if (v107 != v76)
            continue;
LABEL_191:
          if (v37 && !v42)
          {
            if ((v40 & 0x40000000) != 0)
              v132 = (uint64_t ***)*(v11 - 1);
            else
              v132 = &v11[-4 * (v40 & 0x7FFFFFF)];
            v42 = (llvm::BasicBlock *)v132[4];
          }
          if (v42)
          {
            v133 = (char *)operator new(0x60uLL);
            v134 = v133;
            *((_DWORD *)v133 + 13) = *((_DWORD *)v133 + 13) & 0x38000000 | 1;
            *(_QWORD *)v133 = 0;
            *((_QWORD *)v133 + 2) = 0;
            *((_QWORD *)v133 + 1) = 0;
            *((_QWORD *)v133 + 4) = ***(_QWORD ***)v42 + 1576;
            v135 = (llvm::Value *)(v133 + 32);
            *((_QWORD *)v133 + 3) = v133 + 32;
            *((_QWORD *)v133 + 5) = 0;
            v133[48] = 30;
            v133[49] = 0;
            *((_WORD *)v133 + 25) = 0;
            *((_DWORD *)v133 + 13) = 1;
            *(_OWORD *)(v133 + 56) = 0u;
            *(_OWORD *)(v133 + 72) = 0u;
            *((_DWORD *)v133 + 22) = 0;
            *(_QWORD *)v133 = v42;
            v136 = (_QWORD *)((char *)v42 + 8);
            v137 = *((_QWORD *)v42 + 1);
            *((_QWORD *)v133 + 1) = v137;
            if (v137)
              *(_QWORD *)(v137 + 16) = v133 + 8;
            *((_QWORD *)v133 + 2) = v136;
            *v136 = v133;
            v293[0] = 257;
            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v135, &v289, v299, v300);
            if (v297)
            {
              v138 = v296;
              v139 = &v296[16 * v297];
              v140 = (unsigned __int8 **)(v134 + 80);
              do
              {
                v141 = *(_DWORD *)v138;
                v142 = (unsigned __int8 *)*((_QWORD *)v138 + 1);
                if (v142)
                {
                  if (!v141)
                  {
                    __p = (void *)*((_QWORD *)v138 + 1);
                    llvm::MetadataTracking::track((uint64_t)&__p, v142, 2);
                    v143 = *v140;
                    if (!*v140)
                    {
LABEL_213:
                      v144 = (unsigned __int8 *)__p;
                      *v140 = (unsigned __int8 *)__p;
                      if (v144)
                        llvm::MetadataTracking::retrack((uint64_t)&__p, v144, (uint64_t)(v134 + 80));
                      goto LABEL_210;
                    }
LABEL_207:
                    llvm::MetadataTracking::untrack((uint64_t)(v134 + 80), v143);
                    goto LABEL_213;
                  }
                }
                else
                {
                  v143 = *v140;
                  if (!*v140 && (v134[55] & 0x20) == 0)
                    goto LABEL_210;
                  if (!v141)
                  {
                    __p = 0;
                    if (!v143)
                      goto LABEL_213;
                    goto LABEL_207;
                  }
                }
                llvm::Value::setMetadata(v135, *(_DWORD *)v138, (llvm::MDNode *)v142);
LABEL_210:
                v138 += 16;
              }
              while (v138 != v139);
            }
            v145 = (llvm::BasicBlock *)v11[5];
            v289 = v293;
            v290 = (uint64_t)v293;
            v291 = 8;
            v292 = 0;
            v146 = *((unsigned __int8 *)v11 + 16);
            if (v146 != 30)
              __asm { BR              X10 }
            if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3)
              v147 = 2;
            else
              v147 = 1;
            v148 = 0;
            v149 = v42;
            do
            {
              Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v11, v148);
              v151 = (llvm::BasicBlock *)Successor;
              if (a4 && (llvm::BasicBlock *)Successor != v42)
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v289, Successor);
              if (v151 == v149)
                v149 = 0;
              else
                llvm::BasicBlock::removePredecessor(v151, v145, 0);
              ++v148;
            }
            while (v147 != v148);
            v152 = *((_DWORD *)v11 + 5);
            if ((v152 & 0x40000000) != 0)
              v153 = (uint64_t *)*(v11 - 1);
            else
              v153 = (uint64_t *)&v11[-4 * (v152 & 0x7FFFFFF)];
            v155 = *v153;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
            v156 = v11[3];
            v157 = v11[4];
            *v157 = (uint64_t *)v156;
            v156[1] = (uint64_t *)v157;
            v11[3] = 0;
            v11[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v11);
            if ((v276 & 1) == 0)
              goto LABEL_244;
            v288 = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions(v155, v278, 0, v287);
            if (v288 == v287)
            {
              v158 = (void (**)(void))(v287[0] + 32);
            }
            else
            {
              if (!v288)
              {
LABEL_244:
                if (!a4)
                {
LABEL_344:
                  if ((void *)v290 != v289)
                    free((void *)v290);
                  goto LABEL_394;
                }
                __p = 0;
                v281 = 0;
                v282 = 0;
                sub_1C501881C((uint64_t)&__p, (HIDWORD(v291) - v292));
                if ((void *)v290 == v289)
                  v163 = (uint64_t *)((char *)&v291 + 4);
                else
                  v163 = &v291;
                v164 = *(unsigned int *)v163;
                if ((_DWORD)v164)
                {
                  v165 = 8 * v164;
                  v166 = (unint64_t *)v290;
                  while (*v166 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v166;
                    v165 -= 8;
                    if (!v165)
                      goto LABEL_341;
                  }
                }
                else
                {
                  v166 = (unint64_t *)v290;
                }
                v167 = (unint64_t *)(v290 + 8 * v164);
                v168 = v281;
                if (v166 != v167)
                {
                  v169 = *v166;
                  while (1)
                  {
                    v170 = v169 | 4;
                    if (v168 >= v282)
                    {
                      v171 = (char *)__p;
                      v172 = (v168 - (_BYTE *)__p) >> 4;
                      v173 = v172 + 1;
                      if ((unint64_t)(v172 + 1) >> 60)
                        goto LABEL_426;
                      v174 = v282 - (_BYTE *)__p;
                      if ((v282 - (_BYTE *)__p) >> 3 > v173)
                        v173 = v174 >> 3;
                      if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF0)
                        v175 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v175 = v173;
                      if (v175)
                      {
                        if (v175 >> 60)
                          goto LABEL_427;
                        v176 = (char *)operator new(16 * v175);
                      }
                      else
                      {
                        v176 = 0;
                      }
                      v177 = (llvm::BasicBlock **)&v176[16 * v172];
                      *v177 = v145;
                      v177[1] = (llvm::BasicBlock *)v170;
                      if (v168 == v171)
                      {
                        v179 = v168;
                        v178 = &v176[16 * v172];
                      }
                      else
                      {
                        v178 = &v176[16 * v172];
                        do
                        {
                          *((_OWORD *)v178 - 1) = *((_OWORD *)v168 - 1);
                          v178 -= 16;
                          v168 -= 16;
                        }
                        while (v168 != v171);
                        v179 = __p;
                      }
                      v168 = (char *)(v177 + 2);
                      __p = v178;
                      v281 = (char *)(v177 + 2);
                      v282 = &v176[16 * v175];
                      if (v179)
                        operator delete(v179);
                    }
                    else
                    {
                      *(_QWORD *)v168 = v145;
                      *((_QWORD *)v168 + 1) = v170;
                      v168 += 16;
                    }
                    v281 = v168;
                    v180 = v166 + 1;
                    do
                    {
                      if (v180 == v167)
                        goto LABEL_342;
                      v181 = *v180++;
                      v169 = v181;
                    }
                    while (v181 > 0xFFFFFFFFFFFFFFFDLL);
                    v166 = v180 - 1;
                  }
                }
LABEL_342:
                llvm::DomTreeUpdater::applyUpdates(a4, (unint64_t *)__p, (v168 - (_BYTE *)__p) >> 4);
                if (__p)
                {
                  v281 = (char *)__p;
                  operator delete(__p);
                }
                goto LABEL_344;
              }
              v158 = (void (**)(void))(*v288 + 40);
            }
            (*v158)();
            goto LABEL_244;
          }
          if ((v40 & 0x7FFFFFE) != 4)
            goto LABEL_395;
          if ((v40 & 0x40000000) != 0)
            v154 = (uint64_t *)*(v11 - 1);
          else
            v154 = (uint64_t *)&v11[-4 * (v40 & 0x7FFFFFF)];
          v182 = *v154;
          v183 = v154[8];
          v289 = "cond";
          v293[0] = 259;
          v184 = (llvm::Value *)sub_1C4774B48((uint64_t)&v296, 32, v182, v183, (uint64_t)&v289);
          v185 = *((_DWORD *)v11 + 5);
          if ((v185 & 0x40000000) != 0)
            v186 = (uint64_t ***)*(v11 - 1);
          else
            v186 = &v11[-4 * (v185 & 0x7FFFFFF)];
          v187 = (llvm::BasicBlock *)v186[12];
          v188 = (llvm::BasicBlock *)v186[4];
          v189 = operator new(0xA0uLL);
          v190 = v189;
          v191 = 0;
          v192 = (llvm::Value *)(v189 + 24);
          v189[29] = v189[29] & 0x38000000 | 3;
          do
          {
            v193 = &v189[v191];
            *v193 = 0;
            v193[1] = 0;
            v193[2] = 0;
            v193[3] = v192;
            v191 += 8;
          }
          while (v191 != 24);
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v189 + 24), v187, v188, v184, 0);
          v293[0] = 257;
          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v192, &v289, v299, v300);
          if (v297)
          {
            v194 = v296;
            v195 = &v296[16 * v297];
            v196 = (unsigned __int8 **)(v190 + 36);
            do
            {
              v197 = *(_DWORD *)v194;
              v198 = (unsigned __int8 *)*((_QWORD *)v194 + 1);
              if (v198)
              {
                if (!v197)
                {
                  __p = (void *)*((_QWORD *)v194 + 1);
                  llvm::MetadataTracking::track((uint64_t)&__p, v198, 2);
                  v199 = *v196;
                  goto LABEL_297;
                }
              }
              else
              {
                v199 = *v196;
                if (!*v196 && (*((_BYTE *)v190 + 119) & 0x20) == 0)
                  goto LABEL_294;
                if (!v197)
                {
                  __p = 0;
LABEL_297:
                  if (v199)
                    llvm::MetadataTracking::untrack((uint64_t)(v190 + 36), v199);
                  v200 = (unsigned __int8 *)__p;
                  *v196 = (unsigned __int8 *)__p;
                  if (v200)
                    llvm::MetadataTracking::retrack((uint64_t)&__p, v200, (uint64_t)(v190 + 36));
                  goto LABEL_294;
                }
              }
              llvm::Value::setMetadata(v192, *(_DWORD *)v194, (llvm::MDNode *)v198);
LABEL_294:
              v194 += 16;
            }
            while (v194 != v195);
          }
          if ((*((_BYTE *)v11 + 23) & 0x20) == 0)
          {
LABEL_375:
            if ((*((_BYTE *)v11 + 23) & 0x20) == 0)
            {
LABEL_393:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
              v256 = v11[3];
              v257 = v11[4];
              *v257 = (uint64_t *)v256;
              v256[1] = (uint64_t *)v257;
              v11[3] = 0;
              v11[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v11);
              goto LABEL_394;
            }
            v242 = ***v11;
            v289 = v11;
            v243 = *(_DWORD *)(v242 + 2496);
            if (v243)
            {
              v244 = *(_QWORD *)(v242 + 2480);
              v245 = v243 - 1;
              v246 = v245 & ((v11 >> 4) ^ (v11 >> 9));
              v247 = (uint64_t ****)(v244 + 40 * v246);
              v248 = *v247;
              if (*v247 == v11)
                goto LABEL_386;
              v249 = 0;
              v250 = 1;
              while (v248 != (uint64_t ***)-4096)
              {
                if (v249)
                  v251 = 0;
                else
                  v251 = v248 == (uint64_t ***)-8192;
                if (v251)
                  v249 = v247;
                v252 = v246 + v250++;
                v246 = v252 & v245;
                v247 = (uint64_t ****)(v244 + 40 * v246);
                v248 = *v247;
                if (*v247 == v11)
                  goto LABEL_386;
              }
              if (v249)
                v261 = v249;
              else
                v261 = v247;
            }
            else
            {
              v261 = 0;
            }
            v247 = (uint64_t ****)sub_1C541AB24(v242 + 2480, (uint64_t)&v289, (uint64_t *)&v289, v261);
            v262 = (uint64_t ***)v289;
            v247[3] = 0;
            v247[4] = 0;
            *v247 = v262;
            v247[1] = (uint64_t ***)(v247 + 3);
            v247[2] = (uint64_t ***)0x100000000;
LABEL_386:
            v253 = *((unsigned int *)v247 + 4);
            if ((_DWORD)v253)
            {
              v254 = (llvm::MDNode **)(v247[1] + 1);
              v255 = 16 * v253;
              while (*((_DWORD *)v254 - 2) != 14)
              {
                v254 += 2;
                v255 -= 16;
                if (!v255)
                  goto LABEL_393;
              }
              if (*v254)
                llvm::Value::setMetadata(v192, 14, *v254);
            }
            goto LABEL_393;
          }
          v201 = ***v11;
          v289 = v11;
          v202 = *(_DWORD *)(v201 + 2496);
          if (v202)
          {
            v203 = *(_QWORD *)(v201 + 2480);
            v204 = v202 - 1;
            v205 = v204 & ((v11 >> 4) ^ (v11 >> 9));
            v206 = (uint64_t ****)(v203 + 40 * v205);
            v207 = *v206;
            if (*v206 == v11)
              goto LABEL_312;
            v208 = 0;
            v209 = 1;
            while (v207 != (uint64_t ***)-4096)
            {
              if (v208)
                v210 = 0;
              else
                v210 = v207 == (uint64_t ***)-8192;
              if (v210)
                v208 = v206;
              v211 = v205 + v209++;
              v205 = v211 & v204;
              v206 = (uint64_t ****)(v203 + 40 * v205);
              v207 = *v206;
              if (*v206 == v11)
                goto LABEL_312;
            }
            if (v208)
              v259 = v208;
            else
              v259 = v206;
          }
          else
          {
            v259 = 0;
          }
          v206 = (uint64_t ****)sub_1C541AB24(v201 + 2480, (uint64_t)&v289, (uint64_t *)&v289, v259);
          v260 = (uint64_t ***)v289;
          v206[3] = 0;
          v206[4] = 0;
          *v206 = v260;
          v206[1] = (uint64_t ***)(v206 + 3);
          v206[2] = (uint64_t ***)0x100000000;
LABEL_312:
          v212 = *((unsigned int *)v206 + 4);
          if ((_DWORD)v212)
          {
            v213 = v206[1] + 1;
            v214 = 16 * v212;
            while (*((_DWORD *)v213 - 2) != 2)
            {
              v213 += 2;
              v214 -= 16;
              if (!v214)
                goto LABEL_375;
            }
            v241 = *v213;
            if (*v213 && *(_DWORD *)(v241 + 8) == 3)
            {
              v263 = *(_QWORD *)(v241 - 8);
              if (*(_BYTE *)v263 == 1)
              {
                v264 = *(_QWORD *)(v263 + 128);
                if (*(_BYTE *)(v264 + 16) != 16)
                  v264 = 0;
              }
              else
              {
                v264 = 0;
              }
              v265 = *(_QWORD *)(v241 - 16);
              if (*(_BYTE *)v265 == 1)
              {
                v266 = *(_QWORD *)(v265 + 128);
                if (*(_BYTE *)(v266 + 16) != 16)
                  v266 = 0;
              }
              else
              {
                v266 = 0;
              }
              __p = **(void ***)v7;
              v267 = (_QWORD *)(v264 + 24);
              if (*(_DWORD *)(v264 + 32) >= 0x41u)
                v267 = (_QWORD *)*v267;
              v268 = *(_DWORD *)v267;
              v269 = (_QWORD *)(v266 + 24);
              if (*(_DWORD *)(v266 + 32) >= 0x41u)
                v269 = (_QWORD *)*v269;
              v289 = (void *)__PAIR64__(*v269, v268);
              BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&__p, (uint64_t)&v289, 2);
              if (BranchWeights || *((_QWORD *)v190 + 18) || (*((_BYTE *)v190 + 119) & 0x20) != 0)
                llvm::Value::setMetadata(v192, 2, BranchWeights);
            }
          }
          goto LABEL_375;
        }
        break;
      }
      if ((v40 & 0x20000000) == 0)
        goto LABEL_141;
      v87 = ***v11;
      v289 = v11;
      v88 = *(_DWORD *)(v87 + 2496);
      if (v88)
      {
        v89 = *(_QWORD *)(v87 + 2480);
        v90 = v88 - 1;
        v91 = v90 & v275;
        v92 = (uint64_t ****)(v89 + 40 * (v90 & v275));
        v93 = *v92;
        if (*v92 == v11)
          goto LABEL_136;
        v94 = 0;
        v95 = 1;
        while (v93 != (uint64_t ***)-4096)
        {
          if (v94)
            v96 = 0;
          else
            v96 = v93 == (uint64_t ***)-8192;
          if (v96)
            v94 = v92;
          v97 = v91 + v95++;
          v91 = v97 & v90;
          v92 = (uint64_t ****)(v89 + 40 * v91);
          v93 = *v92;
          if (*v92 == v11)
            goto LABEL_136;
        }
        if (v94)
          v108 = v94;
        else
          v108 = v92;
      }
      else
      {
        v108 = 0;
      }
      v92 = (uint64_t ****)sub_1C541AB24(v87 + 2480, (uint64_t)&v289, (uint64_t *)&v289, v108);
      v109 = (uint64_t ***)v289;
      v92[4] = 0;
      v92[3] = 0;
      *v92 = v109;
      v92[1] = (uint64_t ***)(v92 + 3);
      v92[2] = (uint64_t ***)0x100000000;
LABEL_136:
      v98 = *((unsigned int *)v92 + 4);
      if ((_DWORD)v98)
      {
        v99 = v92[1] + 1;
        v100 = 16 * v98;
        while (*((_DWORD *)v99 - 2) != 2)
        {
          v101 = 0;
          v99 += 2;
          v100 -= 16;
          if (!v100)
            goto LABEL_142;
        }
        v101 = *v99;
        goto LABEL_142;
      }
LABEL_141:
      v101 = 0;
LABEL_142:
      v102 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
      if ((v102 - 3) <= 0xFFFFFFFD && v101 != 0)
      {
        v106 = *(_DWORD *)(v101 + 8);
        v105 = (unsigned int *)(v101 + 8);
        v104 = v106;
        if (v106 == v102 + 1)
        {
          v289 = v78;
          v290 = 0x800000000;
          v110 = v78;
          if (v104 >= 2)
          {
            v272 = a4;
            v273 = (uint64_t)v78;
            v111 = 0;
            v112 = v104 - 1;
            v113 = v105;
            do
            {
              v114 = *(_QWORD *)(*(_QWORD *)&v113[-2 * *v105] + 128);
              v115 = (_QWORD *)(v114 + 24);
              v116 = v7;
              if (*(_DWORD *)(v114 + 32) >= 0x41u)
                v115 = (_QWORD *)*v115;
              v117 = *(_DWORD *)v115;
              if (v111 >= HIDWORD(v290))
              {
                v271 = v105;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v289, v273, v111 + 1, 4);
                v105 = v271;
                v111 = v290;
              }
              *((_DWORD *)v289 + v111) = v117;
              v111 = v290 + 1;
              LODWORD(v290) = v290 + 1;
              v113 += 2;
              --v112;
              v7 = v116;
            }
            while (v112);
            v110 = v289;
            a4 = v272;
            v78 = (uint64_t *)v273;
          }
          *v110 += v110[(v77 + 1)];
          v118 = &v110[v290];
          v119 = v110[(v77 + 1)];
          v110[(v77 + 1)] = *(v118 - 1);
          *(v118 - 1) = v119;
          LODWORD(v290) = v290 - 1;
          __p = **(void ***)v7;
          v120 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&__p, (uint64_t)v110, v290);
          if (v120 || v11[6] || (*((_BYTE *)v11 + 23) & 0x20) != 0)
            llvm::Value::setMetadata((llvm::Value *)v11, 2, v120);
          if (v289 != v78)
            free(v289);
        }
      }
      goto LABEL_147;
    }
    v13 = 0;
    if (!v11 || v12 != 32)
      goto LABEL_395;
    v16 = *((_DWORD *)v11 + 5);
    v17 = (v16 & 0x40000000) != 0 ? (llvm::Value **)*(v11 - 1) : (llvm::Value **)&v11[-4 * (v16 & 0x7FFFFFF)];
    v62 = llvm::Value::stripPointerCasts(*v17);
    v13 = 0;
    if (!v62 || *((_BYTE *)v62 + 16) != 4)
      goto LABEL_395;
    v277 = a2;
    v279 = a3;
    v274 = v62;
    v63 = (llvm::BasicBlock *)*((_QWORD *)v62 - 4);
    v289 = v293;
    v290 = (uint64_t)v293;
    v291 = 8;
    v292 = 0;
    v64 = (char *)operator new(0x60uLL);
    v65 = v64;
    *((_DWORD *)v64 + 13) = *((_DWORD *)v64 + 13) & 0x38000000 | 1;
    *(_QWORD *)v64 = 0;
    *((_QWORD *)v64 + 2) = 0;
    *((_QWORD *)v64 + 1) = 0;
    *((_QWORD *)v64 + 4) = ***(_QWORD ***)v63 + 1576;
    v66 = (llvm::Value *)(v64 + 32);
    *((_QWORD *)v64 + 3) = v64 + 32;
    *((_QWORD *)v64 + 5) = 0;
    v64[48] = 30;
    v64[49] = 0;
    *((_WORD *)v64 + 25) = 0;
    *((_DWORD *)v64 + 13) = 1;
    *(_OWORD *)(v64 + 56) = 0u;
    *(_OWORD *)(v64 + 72) = 0u;
    *((_DWORD *)v64 + 22) = 0;
    *(_QWORD *)v64 = v63;
    v67 = (_QWORD *)((char *)v63 + 8);
    v68 = *((_QWORD *)v63 + 1);
    *((_QWORD *)v64 + 1) = v68;
    if (v68)
      *(_QWORD *)(v68 + 16) = v64 + 8;
    *((_QWORD *)v64 + 2) = v67;
    *v67 = v64;
    v283 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v66, &__p, v299, v300);
    if (v297)
    {
      v69 = v296;
      v70 = &v296[16 * v297];
      v71 = (unsigned __int8 **)(v65 + 80);
      do
      {
        v72 = *(_DWORD *)v69;
        v73 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
        if (v73)
        {
          if (!v72)
          {
            v284 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
            llvm::MetadataTracking::track((uint64_t)&v284, v73, 2);
            v74 = *v71;
            goto LABEL_101;
          }
        }
        else
        {
          v74 = *v71;
          if (!*v71 && (v65[55] & 0x20) == 0)
            goto LABEL_98;
          if (!v72)
          {
            v284 = 0;
LABEL_101:
            if (v74)
              llvm::MetadataTracking::untrack((uint64_t)(v65 + 80), v74);
            v75 = v284;
            *v71 = v284;
            if (v75)
              llvm::MetadataTracking::retrack((uint64_t)&v284, v75, (uint64_t)(v65 + 80));
            goto LABEL_98;
          }
        }
        llvm::Value::setMetadata(v66, *(_DWORD *)v69, (llvm::MDNode *)v73);
LABEL_98:
        v69 += 16;
      }
      while (v69 != v70);
    }
    v121 = *((_DWORD *)v11 + 5);
    if ((v121 & 0x7FFFFFF) != 1)
    {
      v122 = 0;
      v123 = 32 * ((v121 & 0x7FFFFFFu) - 1);
      v124 = v63;
      do
      {
        v125 = *((_DWORD *)v11 + 5);
        if ((v125 & 0x40000000) != 0)
          v126 = (uint64_t ***)*(v11 - 1);
        else
          v126 = &v11[-4 * (v125 & 0x7FFFFFF)];
        v127 = &v126[v122 / 8];
        v128 = (llvm::BasicBlock *)v127[4];
        if (a4 && v128 != v63)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v289, (uint64_t)v127[4]);
          v125 = *((_DWORD *)v11 + 5);
        }
        if ((v125 & 0x40000000) != 0)
          v129 = (uint64_t ***)*(v11 - 1);
        else
          v129 = &v11[-4 * (v125 & 0x7FFFFFF)];
        if (v129[v122 / 8 + 4] == (uint64_t **)v124)
          v124 = 0;
        else
          llvm::BasicBlock::removePredecessor(v128, (llvm::BasicBlock *)v7, 0);
        v122 += 32;
      }
      while (v123 != v122);
      v121 = *((_DWORD *)v11 + 5);
      v63 = v124;
    }
    if ((v121 & 0x40000000) != 0)
      v130 = (uint64_t *)*(v11 - 1);
    else
      v130 = (uint64_t *)&v11[-4 * (v121 & 0x7FFFFFF)];
    v159 = *v130;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
    v160 = v11[3];
    v161 = v11[4];
    *v161 = (uint64_t *)v160;
    v160[1] = (uint64_t *)v161;
    v11[3] = 0;
    v11[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v11);
    if ((v277 & 1) != 0)
    {
      v286 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v159, v279, 0, v285);
      if (v286 == v285)
      {
        v162 = (void (**)(void))(v285[0] + 32);
        goto LABEL_320;
      }
      if (v286)
      {
        v162 = (void (**)(void))(*v286 + 40);
LABEL_320:
        (*v162)();
      }
    }
    if (!*((_QWORD *)v274 + 1))
      llvm::Constant::destroyConstant((int32x2_t ****)v274);
    if (v63)
    {
      v215 = (_QWORD *)*v9;
      if ((_QWORD *)*v9 == v9)
      {
        v217 = 0;
      }
      else
      {
        if (v215)
          v216 = (uint64_t ***)(v215 - 3);
        else
          v216 = 0;
        if (*((unsigned __int8 *)v216 + 16) - 29 >= 0xB)
          v217 = 0;
        else
          v217 = v216;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v217[5] + 5), v217);
      v218 = v217[3];
      v219 = v217[4];
      *v219 = (uint64_t *)v218;
      v218[1] = (uint64_t *)v219;
      v217[3] = 0;
      v217[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v217);
      v220 = (char *)operator new(0x40uLL);
      *(_QWORD *)v220 = ***(_QWORD ***)v7 + 1576;
      *((_QWORD *)v220 + 1) = 0;
      v220[16] = 35;
      *(_OWORD *)(v220 + 44) = 0u;
      *(_OWORD *)(v220 + 33) = 0u;
      *(_OWORD *)(v220 + 17) = 0u;
      *(_WORD *)(v7 + 18) &= ~0x8000u;
      v221 = *(_QWORD *)(v7 + 40);
      *((_QWORD *)v220 + 4) = v9;
      *((_QWORD *)v220 + 5) = v7;
      *((_QWORD *)v220 + 3) = v221;
      v220 += 24;
      *(_QWORD *)(v221 + 8) = v220;
      *(_QWORD *)(v7 + 40) = v220;
    }
    if (!a4)
      goto LABEL_344;
    v222 = v7;
    __p = 0;
    v281 = 0;
    v282 = 0;
    sub_1C501881C((uint64_t)&__p, (HIDWORD(v291) - v292));
    if ((void *)v290 == v289)
      v223 = (uint64_t *)((char *)&v291 + 4);
    else
      v223 = &v291;
    v224 = *(unsigned int *)v223;
    if ((_DWORD)v224)
    {
      v225 = 8 * v224;
      v226 = (unint64_t *)v290;
      while (*v226 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v226;
        v225 -= 8;
        if (!v225)
        {
LABEL_341:
          v168 = v281;
          goto LABEL_342;
        }
      }
    }
    else
    {
      v226 = (unint64_t *)v290;
    }
    v227 = (unint64_t *)(v290 + 8 * v224);
    v168 = v281;
    if (v226 != v227)
    {
      v228 = *v226;
LABEL_349:
      v229 = v228 | 4;
      if (v168 >= v282)
      {
        v230 = (char *)__p;
        v231 = (v168 - (_BYTE *)__p) >> 4;
        v232 = v231 + 1;
        if ((unint64_t)(v231 + 1) >> 60)
LABEL_426:
          abort();
        v233 = v282 - (_BYTE *)__p;
        if ((v282 - (_BYTE *)__p) >> 3 > v232)
          v232 = v233 >> 3;
        if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF0)
          v234 = 0xFFFFFFFFFFFFFFFLL;
        else
          v234 = v232;
        if (v234)
        {
          if (v234 >> 60)
LABEL_427:
            sub_1C4764EE4();
          v235 = (char *)operator new(16 * v234);
        }
        else
        {
          v235 = 0;
        }
        v236 = &v235[16 * v231];
        *(_QWORD *)v236 = v222;
        *((_QWORD *)v236 + 1) = v229;
        if (v168 == v230)
        {
          v238 = v168;
          v237 = &v235[16 * v231];
        }
        else
        {
          v237 = &v235[16 * v231];
          do
          {
            *((_OWORD *)v237 - 1) = *((_OWORD *)v168 - 1);
            v237 -= 16;
            v168 -= 16;
          }
          while (v168 != v230);
          v238 = __p;
        }
        v168 = v236 + 16;
        __p = v237;
        v281 = v236 + 16;
        v282 = &v235[16 * v234];
        v7 = v222;
        if (v238)
          operator delete(v238);
      }
      else
      {
        *(_QWORD *)v168 = v7;
        *((_QWORD *)v168 + 1) = v229;
        v168 += 16;
      }
      v281 = v168;
      v239 = v226 + 1;
      while (v239 != v227)
      {
        v240 = *v239++;
        v228 = v240;
        if (v240 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v226 = v239 - 1;
          goto LABEL_349;
        }
      }
    }
    goto LABEL_342;
  }
  if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 1)
  {
    v13 = 0;
    goto LABEL_395;
  }
  v18 = (uint64_t)*(v11 - 4);
  if (*(v11 - 8) == (uint64_t **)v18)
  {
    llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)*(v11 - 4), (llvm::BasicBlock *)v11[5], 0);
    v44 = (char *)operator new(0x60uLL);
    v45 = v44;
    *((_DWORD *)v44 + 13) = *((_DWORD *)v44 + 13) & 0x38000000 | 1;
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 2) = 0;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 4) = ***(_QWORD ***)v18 + 1576;
    v46 = (llvm::Value *)(v44 + 32);
    *((_QWORD *)v44 + 3) = v44 + 32;
    *((_QWORD *)v44 + 5) = 0;
    v44[48] = 30;
    v44[49] = 0;
    *((_WORD *)v44 + 25) = 0;
    *((_DWORD *)v44 + 13) = 1;
    *(_OWORD *)(v44 + 56) = 0u;
    *(_OWORD *)(v44 + 72) = 0u;
    *((_DWORD *)v44 + 22) = 0;
    v47 = (_QWORD *)(v18 + 8);
    v48 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v44 = v18;
    *((_QWORD *)v44 + 1) = v48;
    if (v48)
      *(_QWORD *)(v48 + 16) = v44 + 8;
    *((_QWORD *)v44 + 2) = v47;
    *v47 = v44;
    v293[0] = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v46, &v289, v299, v300);
    if (v297)
    {
      v49 = v296;
      v50 = &v296[16 * v297];
      v51 = (unsigned __int8 **)(v45 + 80);
      do
      {
        v52 = *(_DWORD *)v49;
        v53 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
        if (v53)
        {
          if (!v52)
          {
            __p = (void *)*((_QWORD *)v49 + 1);
            llvm::MetadataTracking::track((uint64_t)&__p, v53, 2);
            v54 = *v51;
            goto LABEL_74;
          }
        }
        else
        {
          v54 = *v51;
          if (!*v51 && (v45[55] & 0x20) == 0)
            goto LABEL_71;
          if (!v52)
          {
            __p = 0;
LABEL_74:
            if (v54)
              llvm::MetadataTracking::untrack((uint64_t)(v45 + 80), v54);
            v55 = (unsigned __int8 *)__p;
            *v51 = (unsigned __int8 *)__p;
            if (v55)
              llvm::MetadataTracking::retrack((uint64_t)&__p, v55, (uint64_t)(v45 + 80));
            goto LABEL_71;
          }
        }
        llvm::Value::setMetadata(v46, *(_DWORD *)v49, (llvm::MDNode *)v53);
LABEL_71:
        v49 += 16;
      }
      while (v49 != v50);
    }
    v289 = (void *)18;
    LODWORD(v290) = 30;
    llvm::Instruction::copyMetadata((uint64_t)v46, (uint64_t)v11, (int *)&v289, 3);
    v56 = (uint64_t)*(v11 - 12);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
    v57 = v11[3];
    v58 = v11[4];
    *v58 = (uint64_t *)v57;
    v57[1] = (uint64_t *)v58;
    v11[3] = 0;
    v11[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v11);
    if (a2)
    {
      v295 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v56, a3, 0, v294);
      if (v295 == v294)
      {
        v59 = *(void (**)(void))(v294[0] + 32);
        goto LABEL_318;
      }
      if (v295)
      {
        v59 = *(void (**)(void))(*v295 + 40);
LABEL_318:
        v59();
      }
    }
LABEL_394:
    v13 = 1;
    goto LABEL_395;
  }
  v13 = 0;
  v19 = (uint64_t)*(v11 - 12);
  if (v19 && *(_BYTE *)(v19 + 16) == 16)
  {
    v20 = (_QWORD *)(v19 + 24);
    v21 = (llvm::BasicBlock *)v7;
    if (*(_DWORD *)(v19 + 32) >= 0x41u)
      v20 = (_QWORD *)*v20;
    if (*v20)
      v22 = (llvm::BasicBlock *)*(v11 - 8);
    else
      v22 = (llvm::BasicBlock *)*(v11 - 4);
    if (*v20)
      v23 = (uint64_t)*(v11 - 4);
    else
      v23 = (uint64_t)*(v11 - 8);
    llvm::BasicBlock::removePredecessor(v22, v21, 0);
    v24 = (char *)operator new(0x60uLL);
    v25 = v24;
    *((_DWORD *)v24 + 13) = *((_DWORD *)v24 + 13) & 0x38000000 | 1;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 4) = ***(_QWORD ***)v23 + 1576;
    v26 = (llvm::Value *)(v24 + 32);
    *((_QWORD *)v24 + 3) = v24 + 32;
    *((_QWORD *)v24 + 5) = 0;
    v24[48] = 30;
    v24[49] = 0;
    *((_WORD *)v24 + 25) = 0;
    *((_DWORD *)v24 + 13) = 1;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *((_DWORD *)v24 + 22) = 0;
    v27 = (_QWORD *)(v23 + 8);
    v28 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)v24 = v23;
    *((_QWORD *)v24 + 1) = v28;
    if (v28)
      *(_QWORD *)(v28 + 16) = v24 + 8;
    *((_QWORD *)v24 + 2) = v27;
    *v27 = v24;
    v293[0] = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v26, &v289, v299, v300);
    v29 = v21;
    if (v297)
    {
      v30 = v296;
      v31 = &v296[16 * v297];
      v32 = (unsigned __int8 **)(v25 + 80);
      do
      {
        v33 = *(_DWORD *)v30;
        v34 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
        if (v34)
        {
          if (!v33)
          {
            __p = (void *)*((_QWORD *)v30 + 1);
            llvm::MetadataTracking::track((uint64_t)&__p, v34, 2);
            v35 = *v32;
            goto LABEL_46;
          }
        }
        else
        {
          v35 = *v32;
          if (!*v32 && (v25[55] & 0x20) == 0)
            goto LABEL_43;
          if (!v33)
          {
            __p = 0;
LABEL_46:
            if (v35)
              llvm::MetadataTracking::untrack((uint64_t)(v25 + 80), v35);
            v36 = (unsigned __int8 *)__p;
            *v32 = (unsigned __int8 *)__p;
            if (v36)
              llvm::MetadataTracking::retrack((uint64_t)&__p, v36, (uint64_t)(v25 + 80));
            goto LABEL_43;
          }
        }
        llvm::Value::setMetadata(v26, *(_DWORD *)v30, (llvm::MDNode *)v34);
LABEL_43:
        v30 += 16;
      }
      while (v30 != v31);
    }
    v289 = (void *)18;
    LODWORD(v290) = 30;
    llvm::Instruction::copyMetadata((uint64_t)v26, (uint64_t)v11, (int *)&v289, 3);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v11[5] + 5), v11);
    v60 = v11[3];
    v61 = v11[4];
    *v61 = (uint64_t *)v60;
    v60[1] = (uint64_t *)v61;
    v11[3] = 0;
    v11[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v11);
    if (a4)
    {
      v289 = v29;
      v290 = (unint64_t)v22 | 4;
      v13 = 1;
      llvm::DomTreeUpdater::applyUpdates(a4, (unint64_t *)&v289, 1);
      goto LABEL_395;
    }
    goto LABEL_394;
  }
LABEL_395:
  if (v296 != (char *)&v298)
    free(v296);
  return v13 & 1;
}

void sub_1C5F135E0()
{
  JUMPOUT(0x1C5F13314);
}

void sub_1C5F135F0()
{
  JUMPOUT(0x1C5F13314);
}

void sub_1C5F135FC()
{
  JUMPOUT(0x1C5F12B4CLL);
}

void sub_1C5F13604()
{
  JUMPOUT(0x1C5F13314);
}

uint64_t llvm::RecursivelyDeleteTriviallyDeadInstructions(uint64_t a1, uint64_t *a2, int32x2_t **a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int32x2_t ****v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t *****v23;
  int32x2_t ****v24;
  int v25;
  int v26;
  _QWORD *v27;
  void (**v28)(void);
  uint64_t v29;
  unint64_t *v30;
  int32x2_t ****v31;
  _QWORD v32[3];
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[49];

  result = 0;
  v36[48] = *MEMORY[0x1E0C80C00];
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if (*(_QWORD *)(a1 + 8))
      return 0;
    result = llvm::wouldInstructionBeTriviallyDead(a1, a2);
    if ((_DWORD)result)
    {
      v34 = (char *)v36;
      v35 = 0x1000000000;
      v29 = 6;
      v30 = 0;
      v31 = (int32x2_t ****)a1;
      if (a1 != -8192 && a1 != -4096)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v29);
      v9 = (_QWORD *)sub_1C5087E70((unsigned int *)&v34, (unint64_t)&v29, 1);
      v10 = v35;
      v11 = &v34[24 * v35];
      *(_QWORD *)v11 = 6;
      *((_QWORD *)v11 + 1) = 0;
      v12 = (unint64_t)(v11 + 8);
      v13 = v9[2];
      *((_QWORD *)v11 + 2) = v13;
      if (v13 != -8192 && v13 != -4096)
      {
        if (v13)
        {
          v14 = *v9 & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v11 + 1) = *(_QWORD *)v14;
          *(_QWORD *)v14 = v11;
          *(_QWORD *)v11 = v14 | 6;
          v15 = (uint64_t *)*((_QWORD *)v11 + 1);
          if (v15)
            *v15 = *v15 & 7 | v12;
        }
      }
      LODWORD(v35) = v10 + 1;
      if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31)
      {
        v16 = v29 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = v30;
        if (v30)
        {
          *v30 = *v30 & 7 | v16;
        }
        else
        {
          v17 = v31;
          v18 = ***v31;
          v19 = (unint64_t)v18[303];
          if (v19 <= v16)
          {
            v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v16)
            {
              v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v31 >> 4) ^ (v31 >> 9));
              v23 = (int32x2_t *****)(v19 + 16 * v22);
              v24 = *v23;
              if (v31 == *v23)
              {
LABEL_25:
                *v23 = (int32x2_t ****)-8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                v17 = v31;
              }
              else
              {
                v25 = 1;
                while (v24 != (int32x2_t ****)-4096)
                {
                  v26 = v22 + v25++;
                  v22 = v26 & v21;
                  v24 = *(int32x2_t *****)(v19 + 16 * v22);
                  if (v31 == v24)
                  {
                    v23 = (int32x2_t *****)(v19 + 16 * v22);
                    goto LABEL_25;
                  }
                }
              }
              *((_BYTE *)v17 + 17) &= ~1u;
            }
          }
        }
      }
      v27 = (_QWORD *)a4[3];
      if (v27)
      {
        if (v27 == a4)
        {
          v33 = v32;
          (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v32);
        }
        else
        {
          v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
        }
      }
      else
      {
        v33 = 0;
      }
      llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v34, a2, a3, (uint64_t)v32);
      if (v33 == v32)
      {
        v28 = (void (**)(void))(v32[0] + 32);
      }
      else
      {
        if (!v33)
        {
LABEL_38:
          sub_1C50880D4(&v34);
          return 1;
        }
        v28 = (void (**)(void))(*v33 + 40);
      }
      (*v28)();
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t llvm::isInstructionTriviallyDead(uint64_t a1, uint64_t *a2)
{
  if (*(_QWORD *)(a1 + 8))
    return 0;
  else
    return llvm::wouldInstructionBeTriviallyDead(a1, a2);
}

uint64_t llvm::wouldInstructionBeTriviallyDead(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t result;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  char isNullValue;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::APInt *v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  _BYTE v43[24];
  char v44;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 29) < 0xB)
    return 0;
  v6 = v2 - 38;
  if (v6 < 0x39 && ((0x100060000000001uLL >> v6) & 1) != 0)
    return 0;
  if (sub_1C5021D50(a1))
  {
    v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
    v8 = *v7;
    if (v8 > 0x22)
    {
LABEL_9:
      v9 = *((_QWORD *)v7 + 16);
      return v9 == 0;
    }
    if (v8 == 32)
    {
      v7 = (unsigned __int8 *)**((_QWORD **)v7 + 3);
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if (sub_1C50A0300(a1))
  {
    v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
    v8 = *v7;
    if (v8 > 0x22)
      goto LABEL_9;
    if (v8 != 32)
    {
LABEL_13:
      if (((1 << v8) & 0x6FFFFFFF0) == 0)
        goto LABEL_9;
      return 1;
    }
    return 0;
  }
  if (sub_1C5392454(a1))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
    return v9 == 0;
  }
  result = llvm::Instruction::willReturn((llvm::Instruction *)a1);
  if (!(_DWORD)result)
    return result;
  v10 = *(unsigned __int8 *)(a1 + 16);
  v11 = (v10 - 33);
  if (v11 > 0x37)
    goto LABEL_24;
  if (((1 << (v10 - 33)) & 0x808001D0000010) == 0)
  {
    if (((1 << (v10 - 33)) & 0x8000000000041) != 0)
    {
      v20 = *(_QWORD *)(a1 + 64);
      if (!v20 || (*(_BYTE *)(v20 + 17) & 0x30) == 0)
      {
        v21 = *(_DWORD *)(a1 + 20);
        if (v21 < 0)
        {
          v35 = a1 - 32 * (v21 & 0x7FFFFFF);
          v38 = *(_QWORD *)(v35 - 8);
          v36 = v35 - 8;
          v37 = v38;
          if (v38)
          {
            v39 = -v37;
            do
            {
              v40 = *(_DWORD *)(*(_QWORD *)(v36 + v39) + 8);
              v17 = v40 > 7;
              v41 = (1 << v40) & 0x83;
              if (v17 || v41 == 0)
                goto LABEL_26;
              v39 += 16;
            }
            while (v39);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
        {
LABEL_26:
          v10 = *(unsigned __int8 *)(a1 + 16);
          goto LABEL_27;
        }
      }
    }
    else if (v11 == 27 && (*(_WORD *)(a1 + 18) & 0x301) != 0)
    {
      goto LABEL_26;
    }
LABEL_24:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)a1) & 1) == 0
      && (llvm::Instruction::willReturn((llvm::Instruction *)a1) & 1) != 0)
    {
      return 1;
    }
    goto LABEL_26;
  }
LABEL_27:
  if (v10 != 84
    || (v12 = *(_QWORD *)(a1 - 32)) == 0
    || *(_BYTE *)(v12 + 16)
    || *(_QWORD *)(v12 + 24) != *(_QWORD *)(a1 + 72)
    || (*(_BYTE *)(v12 + 33) & 0x20) == 0)
  {
LABEL_32:
    if (byte_1ED82E438)
      v13 = 59;
    else
      v13 = 63;
    sub_1C4EBF808(a1, v13, a2, v43);
    if (v44)
    {
      v14 = byte_1ED82E438 ? 43 : 47;
      sub_1C4EBF808(a1, v14, a2, v43);
      if (v44)
        return 1;
    }
    v15 = llvm::isFreeCall(a1, a2);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
      v17 = !v16 || *(unsigned __int8 *)(v16 + 16) > 0x14u;
      if (!v17)
      {
        isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)));
        if ((isNullValue & 1) == 0)
          return *(unsigned __int8 *)(v16 + 16) - 11 < 2;
        return 1;
      }
    }
    v18 = *(unsigned __int8 *)(a1 + 16) - 33;
    return v18 <= 0x33 && ((1 << v18) & 0x8000000000041) != 0 && (llvm::isMathLibCallNoop(a1, a2) & 1) != 0;
  }
  v22 = *(_DWORD *)(v12 + 36);
  result = 1;
  if (v22 != 166 && v22 != 288)
  {
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)a1))
    {
      v23 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      v24 = *(unsigned __int8 *)(v23 + 16);
      if (v24 - 11 < 2)
        return 1;
      v17 = v24 > 0x3B;
      v25 = (1 << v24) & 0x80000000020000FLL;
      if (!v17 && v25 != 0)
      {
        v27 = *(_QWORD *)(v23 + 8);
        if (!v27)
          return 1;
        while (1)
        {
          v28 = *(_QWORD *)(v27 + 24);
          if (*(_BYTE *)(v28 + 16) != 84)
            break;
          v29 = *(_QWORD *)(v28 - 32);
          if (!v29
            || *(_BYTE *)(v29 + 16)
            || *(_QWORD *)(v29 + 24) != *(_QWORD *)(v28 + 72)
            || (*(_BYTE *)(v29 + 33) & 0x20) == 0
            || !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v28))
          {
            break;
          }
          v27 = *(_QWORD *)(v27 + 8);
          result = 1;
          if (!v27)
            return result;
        }
      }
      return 0;
    }
    if (v22 == 7)
    {
      if ((llvm::isAssumeWithEmptyBundle(a1) & 1) != 0)
      {
LABEL_81:
        result = 0;
        v30 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
        if (v30 && *(_BYTE *)(v30 + 16) == 16)
        {
          v31 = (llvm::APInt *)(v30 + 24);
          v32 = *(_DWORD *)(v30 + 32);
          if (v32 > 0x40)
            v33 = llvm::APInt::countLeadingZerosSlowCase(v31) == v32;
          else
            v33 = *(_QWORD *)v31 == 0;
          v34 = v33;
          return v34 ^ 1u;
        }
        return result;
      }
      v22 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
    }
    if (v22 != 125)
    {
      if (sub_1C4DF8FCC(a1))
        return llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)a1) != 2;
      goto LABEL_32;
    }
    goto LABEL_81;
  }
  return result;
}

uint64_t llvm::wouldInstructionBeTriviallyDeadOnUnusedPaths(llvm::Instruction *this, uint64_t *a2)
{
  uint64_t v4;
  int v6;

  if (*((_BYTE *)this + 16) == 84
    && (v4 = *((_QWORD *)this - 4)) != 0
    && !*(_BYTE *)(v4 + 16)
    && *(_QWORD *)(v4 + 24) == *((_QWORD *)this + 9)
    && (*(_BYTE *)(v4 + 33) & 0x20) != 0
    && ((v6 = *(_DWORD *)(v4 + 36), v6 == 166) || v6 == 288 || llvm::Instruction::isLifetimeStartOrEnd(this)))
  {
    return 0;
  }
  else
  {
    return llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a2);
  }
}

void llvm::RecursivelyDeleteTriviallyDeadInstructions(unsigned int *a1, uint64_t *a2, int32x2_t **a3, uint64_t a4)
{
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  __int32 v55;
  int32x2_t v56;
  __int32 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  llvm::MemoryAccess *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  int32x2_t *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  void *v77;
  uint64_t v78;
  _QWORD v79[2];

  v79[1] = *MEMORY[0x1E0C80C00];
  for (i = a1[2]; i; i = a1[2])
  {
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)a1 + 24 * i;
    v77 = (void *)6;
    v78 = 0;
    v10 = *(_QWORD *)(v9 - 8);
    v79[0] = v10;
    if (v10 && v10 != -8192 && v10 != -4096)
    {
      v11 = *(_QWORD *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8;
      v78 = *(_QWORD *)v11;
      *(_QWORD *)v11 = &v77;
      v77 = (void *)(v11 | 6);
      if (v78)
        *(_QWORD *)v78 = *(_QWORD *)v78 & 7 | (unint64_t)&v78;
      v8 = *(_QWORD *)a1;
    }
    v12 = i - 1;
    a1[2] = v12;
    v13 = (_QWORD *)(v8 + 24 * v12);
    v14 = v13[2];
    if (v14 && v14 != -8192 && v14 != -4096)
    {
      v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v15 = v13[1];
      v16 = (unint64_t *)v13[1];
      if (v16)
      {
        *v16 = *v16 & 7 | v15;
      }
      else
      {
        v17 = v13[2];
        v18 = ***(int32x2_t ****)v17;
        v19 = (unint64_t)v18[303];
        if (v19 <= v15)
        {
          v20 = v18[305].u32[0];
          if (v19 + 16 * v20 > v15)
          {
            v21 = v20 - 1;
            LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
            v23 = (uint64_t *)(v19 + 16 * v22);
            v24 = *v23;
            if (v17 == *v23)
            {
LABEL_19:
              *v23 = -8192;
              v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
              v17 = v13[2];
            }
            else
            {
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & v21;
                v24 = *(_QWORD *)(v19 + 16 * v22);
                if (v17 == v24)
                {
                  v23 = (uint64_t *)(v19 + 16 * v22);
                  goto LABEL_19;
                }
              }
            }
            *(_BYTE *)(v17 + 17) &= ~1u;
          }
        }
      }
    }
    v27 = v79[0];
    if (v79[0] != -8192 && v79[0] != -4096 && v79[0] != 0)
    {
      v65 = (unint64_t)v77 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v77 & 0xFFFFFFFFFFFFFFF8) = v78;
      if (v78)
      {
        *(_QWORD *)v78 = *(_QWORD *)v78 & 7 | v65;
      }
      else
      {
        v66 = v79[0];
        v67 = ***(int32x2_t ****)v79[0];
        v68 = (unint64_t)v67[303];
        if (v68 <= v65)
        {
          v69 = v67[305].u32[0];
          if (v68 + 16 * v69 > v65)
          {
            v70 = v69 - 1;
            LODWORD(v71) = v70 & ((LODWORD(v79[0]) >> 4) ^ (LODWORD(v79[0]) >> 9));
            v72 = (uint64_t *)(v68 + 16 * v71);
            v73 = *v72;
            if (v79[0] == *v72)
            {
LABEL_90:
              *v72 = -8192;
              v67[304] = vadd_s32(v67[304], (int32x2_t)0x1FFFFFFFFLL);
              v66 = v79[0];
            }
            else
            {
              v74 = 1;
              while (v73 != -4096)
              {
                v75 = v71 + v74++;
                v71 = v75 & v70;
                v73 = *(_QWORD *)(v68 + 16 * v71);
                if (v79[0] == v73)
                {
                  v72 = (uint64_t *)(v68 + 16 * v71);
                  goto LABEL_90;
                }
              }
            }
            *(_BYTE *)(v66 + 17) &= ~1u;
          }
        }
      }
    }
    if (v27)
    {
      v77 = v79;
      v78 = 0x100000000;
      llvm::findDbgUsers((uint64_t)&v77, v27);
      llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v27, (uint64_t *)v77, v78);
      if (v77 != v79)
        free(v77);
      v29 = *(_QWORD *)(a4 + 24);
      if (v29)
      {
        v77 = (void *)v27;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, &v77);
      }
      v30 = *(_DWORD *)(v27 + 20);
      if ((v30 & 0x40000000) != 0)
      {
        v32 = *(_QWORD *)(v27 - 8);
        v31 = v30 & 0x7FFFFFF;
      }
      else
      {
        v31 = v30 & 0x7FFFFFF;
        v32 = v27 - 32 * v31;
      }
      v33 = v32 + 32 * v31;
      if (v31)
      {
        do
        {
          v34 = *(_QWORD *)v32;
          if (*(_QWORD *)v32)
          {
            **(_QWORD **)(v32 + 16) = *(_QWORD *)(v32 + 8);
            v35 = *(_QWORD *)(v32 + 8);
            if (v35)
              *(_QWORD *)(v35 + 16) = *(_QWORD *)(v32 + 16);
          }
          *(_QWORD *)v32 = 0;
          if (!*(_QWORD *)(v34 + 8))
          {
            v36 = v34 && *(unsigned __int8 *)(v34 + 16) >= 0x1Cu;
            if (v36 && llvm::wouldInstructionBeTriviallyDead(v34, a2))
            {
              v77 = (void *)6;
              v78 = 0;
              v79[0] = v34;
              if (v34 != -8192 && v34 != -4096 && v34)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v77);
              v37 = (_QWORD *)sub_1C5087E70(a1, (unint64_t)&v77, 1);
              v38 = a1[2];
              v39 = (unint64_t *)(*(_QWORD *)a1 + 24 * v38);
              *v39 = 6;
              v39[1] = 0;
              v40 = (unint64_t)(v39 + 1);
              v41 = v37[2];
              v39[2] = v41;
              if (v41 != -8192 && v41 != -4096)
              {
                if (v41)
                {
                  v42 = *v37 & 0xFFFFFFFFFFFFFFF8;
                  v39[1] = *(_QWORD *)v42;
                  *(_QWORD *)v42 = v39;
                  *v39 = v42 | 6;
                  v43 = (uint64_t *)v39[1];
                  if (v43)
                    *v43 = *v43 & 7 | v40;
                }
              }
              a1[2] = v38 + 1;
              if (v79[0] != -8192 && v79[0] != -4096 && v79[0])
              {
                v44 = (unint64_t)v77 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v77 & 0xFFFFFFFFFFFFFFF8) = v78;
                if (v78)
                {
                  *(_QWORD *)v78 = *(_QWORD *)v78 & 7 | v44;
                }
                else
                {
                  v45 = v79[0];
                  v46 = ***(int32x2_t ****)v79[0];
                  v47 = (unint64_t)v46[303];
                  if (v47 <= v44)
                  {
                    v48 = v46[305].u32[0];
                    if (v47 + 16 * v48 > v44)
                    {
                      v49 = v48 - 1;
                      LODWORD(v50) = v49 & ((LODWORD(v79[0]) >> 4) ^ (LODWORD(v79[0]) >> 9));
                      v51 = (uint64_t *)(v47 + 16 * v50);
                      v52 = *v51;
                      if (v79[0] == *v51)
                      {
LABEL_67:
                        *v51 = -8192;
                        v46[304] = vadd_s32(v46[304], (int32x2_t)0x1FFFFFFFFLL);
                        v45 = v79[0];
                      }
                      else
                      {
                        v53 = 1;
                        while (v52 != -4096)
                        {
                          v54 = v50 + v53++;
                          v50 = v54 & v49;
                          v52 = *(_QWORD *)(v47 + 16 * v50);
                          if (v79[0] == v52)
                          {
                            v51 = (uint64_t *)(v47 + 16 * v50);
                            goto LABEL_67;
                          }
                        }
                      }
                      *(_BYTE *)(v45 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
          }
          v32 += 32;
        }
        while (v32 != v33);
      }
      if (a3)
      {
        v55 = (*a3)[5].i32[0];
        if (v55)
        {
          v56 = (*a3)[3];
          v57 = v55 - 1;
          v58 = (v55 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          v59 = *(_QWORD *)(*(_QWORD *)&v56 + 16 * v58);
          if (v59 == v27)
          {
LABEL_77:
            v62 = *(llvm::MemoryAccess **)(*(_QWORD *)&v56 + 16 * v58 + 8);
            if (v62)
              llvm::MemorySSAUpdater::removeMemoryAccess(a3, v62, 0);
          }
          else
          {
            v60 = 1;
            while (v59 != -4096)
            {
              v61 = v58 + v60++;
              v58 = v61 & v57;
              v59 = *(_QWORD *)(*(_QWORD *)&v56 + 16 * v58);
              if (v59 == v27)
                goto LABEL_77;
            }
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v27 + 40) + 40, (uint64_t ***)v27);
      v63 = *(_QWORD *)(v27 + 24);
      v64 = *(_QWORD **)(v27 + 32);
      *v64 = v63;
      *(_QWORD *)(v63 + 8) = v64;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v27);
    }
  }
}

BOOL llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive(unsigned int *a1, uint64_t *a2, int32x2_t **a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  int32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  void (**v29)(void);
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = a1[2];
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)a1;
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 24 * v9 + 16);
      if (v12)
        v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
      else
        v13 = 0;
      if (!v13 || *(_QWORD *)(v12 + 8))
        goto LABEL_11;
      if ((llvm::wouldInstructionBeTriviallyDead(v12, 0) & 1) == 0)
        break;
LABEL_15:
      if (++v9 == v8)
        goto LABEL_29;
    }
    v11 = *(_QWORD *)a1;
LABEL_11:
    v14 = (_QWORD *)(v11 + 24 * v9);
    v15 = v14[2];
    if (v15)
    {
      if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *v14 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v16 = v14[1];
        v17 = (unint64_t *)v14[1];
        if (v17)
        {
          *v17 = *v17 & 7 | v16;
        }
        else
        {
          v18 = v14[2];
          v19 = ***(int32x2_t ****)v18;
          v20 = (unint64_t)v19[303];
          if (v20 <= v16)
          {
            v21 = v19[305].u32[0];
            if (v20 + 16 * v21 > v16)
            {
              v22 = v21 - 1;
              LODWORD(v23) = v22 & ((v18 >> 4) ^ (v18 >> 9));
              v24 = (uint64_t *)(v20 + 16 * v23);
              v25 = *v24;
              if (v18 == *v24)
              {
LABEL_25:
                *v24 = -8192;
                v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
                v18 = v14[2];
              }
              else
              {
                v26 = 1;
                while (v25 != -4096)
                {
                  v27 = v23 + v26++;
                  v23 = v27 & v22;
                  v25 = *(_QWORD *)(v20 + 16 * v23);
                  if (v18 == v25)
                  {
                    v24 = (uint64_t *)(v20 + 16 * v23);
                    goto LABEL_25;
                  }
                }
              }
              *(_BYTE *)(v18 + 17) &= ~1u;
            }
          }
        }
      }
      v14[2] = 0;
    }
    ++v10;
    goto LABEL_15;
  }
  v10 = 0;
LABEL_29:
  if (v10 != (_DWORD)v8)
  {
    v28 = (_QWORD *)a4[3];
    if (v28)
    {
      if (v28 == a4)
      {
        v32 = v31;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v31);
      }
      else
      {
        v32 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
      }
    }
    else
    {
      v32 = 0;
    }
    llvm::RecursivelyDeleteTriviallyDeadInstructions(a1, a2, a3, (uint64_t)v31);
    if (v32 == v31)
    {
      v29 = (void (**)(void))(v31[0] + 32);
      goto LABEL_39;
    }
    if (v32)
    {
      v29 = (void (**)(void))(*v32 + 40);
LABEL_39:
      (*v29)();
    }
  }
  return v10 != (_DWORD)v8;
}

void llvm::salvageDebugInfo(llvm *this, llvm::Instruction *a2)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = v5;
  v4 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v3, (uint64_t)this);
  llvm::salvageDebugInfoForDbgValues(this, (uint64_t *)v3, v4);
  if (v3 != v5)
    free(v3);
}

BOOL llvm::replaceDbgUsesWithUndef(llvm::UndefValue **this, llvm::Instruction *a2)
{
  llvm::Type *v3;
  _QWORD *v4;
  int v5;
  llvm::DbgVariableIntrinsic **v7;
  uint64_t v8;
  llvm::DbgVariableIntrinsic *v9;
  llvm::UndefValue *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v11, (uint64_t)this);
  v4 = v11;
  if ((_DWORD)v12)
  {
    v7 = (llvm::DbgVariableIntrinsic **)v11;
    v8 = 8 * v12;
    do
    {
      v9 = *v7++;
      v10 = llvm::UndefValue::get(*this, v3);
      llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v9, (llvm::Value *)this, v10);
      v8 -= 8;
    }
    while (v8);
    v5 = v12;
    v4 = v11;
  }
  else
  {
    v5 = 0;
  }
  if (v4 != v13)
    free(v4);
  return v5 != 0;
}

uint64_t llvm::RecursivelyDeleteDeadPHINode(llvm::Instruction *this, uint64_t *a2, int32x2_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;
  llvm::UndefValue *v10;
  uint64_t v11;
  void (**v12)(void);
  uint64_t v13;
  int v14;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v26 = v29;
  v27 = 4;
  v28 = 0;
  while (1)
  {
    v6 = *((_QWORD *)this + 1);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          break;
        if (*(_QWORD *)(v6 + 24) != v7)
          goto LABEL_29;
      }
    }
    v8 = *((unsigned __int8 *)this + 16) - 33;
    if (v8 <= 0x37)
    {
      if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001D0000010) != 0)
        goto LABEL_29;
      if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
      {
        v13 = *((_QWORD *)this + 8);
        if (!v13 || (*(_BYTE *)(v13 + 17) & 0x30) == 0)
        {
          v14 = *((_DWORD *)this + 5);
          if (v14 < 0)
          {
            v16 = (char *)this - 32 * (v14 & 0x7FFFFFF);
            v19 = *((_QWORD *)v16 - 1);
            v17 = v16 - 8;
            v18 = v19;
            if (v19)
            {
              v20 = -v18;
              while (1)
              {
                v21 = *(_DWORD *)(*(_QWORD *)&v17[v20] + 8);
                v22 = v21 > 7;
                v23 = (1 << v21) & 0x83;
                if (v22 || v23 == 0)
                  break;
                v20 += 16;
                if (!v20)
                  goto LABEL_25;
              }
LABEL_29:
              v11 = 0;
              goto LABEL_30;
            }
          }
LABEL_25:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
          {
            goto LABEL_29;
          }
        }
      }
      else if (v8 == 27 && (*((_WORD *)this + 9) & 0x301) != 0)
      {
        goto LABEL_29;
      }
    }
    if ((llvm::Instruction::mayThrow(this) & 1) != 0 || !llvm::Instruction::willReturn(this))
      goto LABEL_29;
    if (!*((_QWORD *)this + 1))
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, (uint64_t)this);
    if (!(_BYTE)v9)
    {
      v10 = llvm::UndefValue::get(*(llvm::UndefValue **)this, v9);
      llvm::Value::doRAUW(this, v10, (llvm::Value *)1);
      v31 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)this, a2, a3, v30);
      if (v31 == v30)
      {
        v12 = (void (**)(void))(v30[0] + 32);
        v11 = 1;
      }
      else
      {
        if (!v31)
        {
          v11 = 1;
          goto LABEL_30;
        }
        v12 = (void (**)(void))(*v31 + 40);
        v11 = 1;
      }
      goto LABEL_35;
    }
    this = *(llvm::Instruction **)(*((_QWORD *)this + 1) + 24);
  }
  v33 = 0;
  v11 = llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)this, a2, a3, v32);
  if (v33 == v32)
  {
    v12 = (void (**)(void))(v32[0] + 32);
  }
  else
  {
    if (!v33)
      goto LABEL_30;
    v12 = (void (**)(void))(*v33 + 40);
  }
LABEL_35:
  (*v12)();
LABEL_30:
  if (v26 != v25)
    free(v26);
  return v11;
}

uint64_t llvm::SimplifyInstructionsInBlock(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm *v14;
  int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  llvm *v19;
  int v20;
  unsigned int v21;
  char *v22;
  llvm *v23;
  llvm::Type *v24;
  llvm::DSOLocalEquivalent **v25;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1[7] + 40);
  v27 = 1;
  v8 = 8;
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v27 + v8) = v9;
    v8 += 16;
  }
  while (v8 != 136);
  v30 = v32;
  v31 = 0x1000000000;
  v11 = a1[5];
  v10 = a1[6];
  if (v10 == v11)
  {
    LOBYTE(v12) = 0;
    goto LABEL_24;
  }
  v12 = 0;
  v13 = v7 + 272;
  do
  {
    if (v10)
      v14 = (llvm *)(v10 - 24);
    else
      v14 = 0;
    v10 = *(_QWORD *)(v10 + 8);
    if ((v27 & 1) != 0)
    {
      v15 = 16;
      v16 = &v28;
    }
    else
    {
      v15 = v29;
      if (!v29)
        goto LABEL_17;
      v16 = v28;
    }
    v17 = v15 - 1;
    v18 = v17 & ((v14 >> 4) ^ (v14 >> 9));
    v19 = (llvm *)v16[v18];
    if (v14 == v19)
      continue;
    v20 = 1;
    while (v19 != (llvm *)-4096)
    {
      v21 = v18 + v20++;
      v18 = v21 & v17;
      v19 = (llvm *)v16[v18];
      if (v14 == v19)
        goto LABEL_18;
    }
LABEL_17:
    v12 |= sub_1C5F14C90(v14, (uint64_t)&v27, v13, a2, a5, a6);
LABEL_18:
    ;
  }
  while (v10 != v11);
  while ((_DWORD)v31)
  {
    v22 = (char *)v30 + 8 * v31;
    v23 = (llvm *)*((_QWORD *)v22 - 1);
    sub_1C4E094A8((uint64_t)&v27, (_QWORD *)v22 - 1);
    LODWORD(v31) = v31 - 1;
    v12 |= sub_1C5F14C90(v23, (uint64_t)&v27, v13, a2, v24, v25);
  }
LABEL_24:
  if (v30 != v32)
    free(v30);
  if ((v27 & 1) == 0)
    MEMORY[0x1CAA32FB4](v28, 8);
  return v12 & 1;
}

uint64_t sub_1C5F14C90(llvm *this, uint64_t a2, uint64_t a3, uint64_t *a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  llvm::UndefValue *v44;
  uint64_t v45;
  llvm *v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  llvm **v51;
  llvm *v52;
  llvm **v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  llvm **v57;
  _QWORD *v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int16 v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[9];

  v72[8] = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a4))
  {
    v70 = v72;
    v71 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v70, (uint64_t)this);
    llvm::salvageDebugInfoForDbgValues(this, (uint64_t *)v70, v71);
    if (v70 != v72)
      free(v70);
    v10 = *((_DWORD *)this + 5);
    v11 = v10 & 0x7FFFFFF;
    if ((v10 & 0x7FFFFFF) == 0)
    {
LABEL_89:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
      v63 = *((_QWORD *)this + 3);
      v64 = (_QWORD *)*((_QWORD *)this + 4);
      *v64 = v63;
      *(_QWORD *)(v63 + 8) = v64;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      llvm::Value::deleteValue(this);
      return 1;
    }
    v12 = 0;
    while (1)
    {
      v13 = *((_DWORD *)this + 5);
      if ((v13 & 0x40000000) != 0)
        v14 = (char *)*((_QWORD *)this - 1);
      else
        v14 = (char *)this - 32 * (v13 & 0x7FFFFFF);
      v15 = &v14[32 * v12];
      v16 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
        v17 = *((_QWORD *)v15 + 1);
        if (v17)
          *(_QWORD *)(v17 + 16) = *((_QWORD *)v15 + 2);
      }
      *(_QWORD *)v15 = 0;
      if ((llvm *)v16 == this || *(_QWORD *)(v16 + 8) != 0)
        goto LABEL_43;
      v19 = *(unsigned __int8 *)(v16 + 16) <= 0x1Bu ? 0 : (_QWORD *)v16;
      v70 = v19;
      if (!v19 || v19[1] || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v19, a4))
        goto LABEL_43;
      if ((*(_BYTE *)a2 & 1) != 0)
      {
        v20 = 16;
        v21 = a2 + 8;
      }
      else
      {
        v20 = *(_DWORD *)(a2 + 16);
        if (!v20)
        {
          v30 = 0;
LABEL_40:
          v31 = sub_1C4E08FFC(a2, (uint64_t)&v70, &v70, v30);
          *v31 = v70;
          v32 = v70;
          v33 = *(unsigned int *)(a2 + 144);
          if (v33 >= *(unsigned int *)(a2 + 148))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 136, a2 + 152, v33 + 1, 8);
            v33 = *(unsigned int *)(a2 + 144);
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v33) = v32;
          ++*(_DWORD *)(a2 + 144);
          goto LABEL_43;
        }
        v21 = *(_QWORD *)(a2 + 8);
      }
      v22 = v20 - 1;
      v23 = ((v70 >> 4) ^ (v70 >> 9)) & v22;
      v24 = (_QWORD *)(v21 + 8 * v23);
      v25 = (void *)*v24;
      if (v70 != (void *)*v24)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != (void *)-4096)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v25 == (void *)-8192;
          if (v28)
            v26 = v24;
          v29 = v23 + v27++;
          v23 = v29 & v22;
          v24 = (_QWORD *)(v21 + 8 * v23);
          v25 = (void *)*v24;
          if (v70 == (void *)*v24)
            goto LABEL_43;
        }
        if (v26)
          v30 = v26;
        else
          v30 = v24;
        goto LABEL_40;
      }
LABEL_43:
      if (++v12 == v11)
        goto LABEL_89;
    }
  }
  v66 = a3;
  v67 = 0u;
  v68 = 0u;
  v69 = 257;
  v34 = *((_DWORD *)this + 5);
  if ((v34 & 0x40000000) != 0)
  {
    v36 = (uint64_t *)*((_QWORD *)this - 1);
    v35 = v34 & 0x7FFFFFF;
  }
  else
  {
    v35 = v34 & 0x7FFFFFF;
    v36 = (uint64_t *)((char *)this - 32 * v35);
  }
  v70 = v72;
  v71 = 0x800000000;
  if (v35 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v35, 8);
    v37 = v71;
    v39 = v70;
    v38 = v71;
  }
  else
  {
    v37 = 0;
    if (!v35)
    {
      v43 = v72;
      goto LABEL_56;
    }
    v38 = 0;
    v39 = v72;
  }
  v40 = 32 * v35;
  v41 = &v39[v38];
  do
  {
    v42 = *v36;
    v36 += 4;
    *v41++ = v42;
    v40 -= 32;
  }
  while (v40);
  v43 = v70;
LABEL_56:
  LODWORD(v71) = v37 + v35;
  v44 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v43, (v37 + v35), (uint64_t)&v66, a5, a6);
  if (v70 == v72)
  {
    if (!v44)
      return (v44 != 0) & a2;
  }
  else
  {
    free(v70);
    if (!v44)
      return (v44 != 0) & a2;
  }
  v45 = *((_QWORD *)this + 1);
  if (!v45)
    goto LABEL_86;
  do
  {
    v46 = *(llvm **)(v45 + 24);
    if (v46 == this)
      goto LABEL_79;
    v70 = *(void **)(v45 + 24);
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v47 = 16;
      v48 = a2 + 8;
    }
    else
    {
      v47 = *(_DWORD *)(a2 + 16);
      if (!v47)
      {
        v57 = 0;
        goto LABEL_76;
      }
      v48 = *(_QWORD *)(a2 + 8);
    }
    v49 = v47 - 1;
    v50 = v49 & ((v46 >> 4) ^ (v46 >> 9));
    v51 = (llvm **)(v48 + 8 * v50);
    v52 = *v51;
    if (v46 == *v51)
      goto LABEL_79;
    v53 = 0;
    v54 = 1;
    while (v52 != (llvm *)-4096)
    {
      if (v53)
        v55 = 0;
      else
        v55 = v52 == (llvm *)-8192;
      if (v55)
        v53 = v51;
      v56 = v50 + v54++;
      v50 = v56 & v49;
      v51 = (llvm **)(v48 + 8 * v50);
      v52 = *v51;
      if (v46 == *v51)
        goto LABEL_79;
    }
    if (v53)
      v57 = v53;
    else
      v57 = v51;
LABEL_76:
    v58 = sub_1C4E08FFC(a2, (uint64_t)&v70, &v70, v57);
    *v58 = v70;
    v59 = v70;
    v60 = *(unsigned int *)(a2 + 144);
    if (v60 >= *(unsigned int *)(a2 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 136, a2 + 152, v60 + 1, 8);
      v60 = *(unsigned int *)(a2 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v60) = v59;
    ++*(_DWORD *)(a2 + 144);
LABEL_79:
    v45 = *(_QWORD *)(v45 + 8);
  }
  while (v45);
  if (*((_QWORD *)this + 1))
  {
    LOBYTE(a2) = 1;
    llvm::Value::doRAUW(this, v44, (llvm::Value *)1);
    if (!*((_QWORD *)this + 1))
      goto LABEL_87;
    return (v44 != 0) & a2;
  }
LABEL_86:
  LOBYTE(a2) = 0;
LABEL_87:
  if (llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a4))
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
    v61 = *((_QWORD *)this + 3);
    v62 = (_QWORD *)*((_QWORD *)this + 4);
    *v62 = v61;
    *(_QWORD *)(v61 + 8) = v62;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    llvm::Value::deleteValue(this);
    LOBYTE(a2) = 1;
  }
  return (v44 != 0) & a2;
}

void llvm::MergeBasicBlockIntoOnlyPred(unint64_t this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::UndefValue **v9;
  llvm::UndefValue *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  BOOL v62;
  const llvm::APInt *v65;
  llvm::Constant **v66;
  uint64_t v67;
  llvm::ConstantInt *v68;
  unint64_t v69;
  char v70;
  llvm::ValueHandleBase *v71;
  llvm::UndefValue *v72;
  int v73;
  unsigned int v74;
  _BYTE *v75;
  llvm::ConstantInt *v76;
  llvm::ValueHandleBase *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[16];
  void *v83;
  uint64_t v84;
  _QWORD v85[65];

  v85[64] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(this + 48);
  v6 = v5 - 24;
  if (v5)
    v7 = v5 - 24;
  else
    v7 = 0;
  if (v5 && *(_BYTE *)(v7 + 16) == 83)
  {
    do
    {
      v8 = *(_DWORD *)(v6 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(llvm::UndefValue ***)(v6 - 8);
      else
        v9 = (llvm::UndefValue **)(v6 - 32 * (v8 & 0x7FFFFFF));
      v10 = *v9;
      if (*v9 == (llvm::UndefValue *)v6)
        v10 = llvm::UndefValue::get(*(llvm::UndefValue **)v6, v10);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v10, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v6 + 40) + 40, (uint64_t ***)v6);
      v11 = *(_QWORD *)(v6 + 24);
      v12 = *(_QWORD **)(v6 + 32);
      *v12 = v11;
      *(_QWORD *)(v11 + 8) = v12;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v6);
      v13 = *(_QWORD *)(this + 48);
      v14 = v13 - 24;
      if (!v13)
        v14 = 0;
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v15 == 83)
        v6 = v14;
      else
        v6 = 0;
    }
    while (v13 && v15 == 83);
  }
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)this);
  v18 = SinglePredecessor;
  v19 = *(_QWORD *)(*(_QWORD *)(SinglePredecessor + 56) + 80);
  if (v19)
    v20 = v19 - 24;
  else
    v20 = 0;
  v83 = v85;
  v84 = 0x2000000000;
  if (!a2)
    goto LABEL_72;
  v78 = v82;
  v79 = v82;
  v80 = 2;
  v81 = 0;
  v21 = *(_QWORD *)(SinglePredecessor + 8);
  if (v21)
  {
    v22 = *(_QWORD *)(SinglePredecessor + 8);
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(unsigned __int8 *)(v23 + 16);
      v25 = v23 && v24 >= 0x1C;
      v26 = !v25 || v24 - 29 > 0xA;
      if (!v26)
        break;
      v22 = *(_QWORD *)(v22 + 8);
      if (!v22)
        goto LABEL_46;
    }
    v27 = 0;
LABEL_34:
    ++v27;
    while (1)
    {
      v22 = *(_QWORD *)(v22 + 8);
      if (!v22)
        break;
      v28 = *(_QWORD *)(v22 + 24);
      v29 = *(unsigned __int8 *)(v28 + 16);
      if (v28)
        v30 = v29 >= 0x1C;
      else
        v30 = 0;
      if (v30 && v29 - 29 < 0xB)
        goto LABEL_34;
    }
    if ((2 * v27) >= 0x20)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, (2 * v27) | 1u, 16);
      v21 = *(_QWORD *)(v18 + 8);
    }
LABEL_46:
    if (v21)
    {
      while (1)
      {
        v32 = *(_QWORD *)(v21 + 24);
        v33 = *(unsigned __int8 *)(v32 + 16);
        v34 = v32 && v33 >= 0x1C;
        if (v34 && v33 - 29 < 0xB)
          break;
        v21 = *(_QWORD *)(v21 + 8);
        if (!v21)
          goto LABEL_56;
      }
LABEL_104:
      v57 = *(_QWORD *)(v32 + 40);
      if (v57 != v18)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v78, *(_QWORD *)(v32 + 40));
        if (v58)
        {
          v59 = v84;
          if (v84 >= (unint64_t)HIDWORD(v84))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
            v59 = v84;
          }
          v60 = (char *)v83 + 16 * v59;
          *v60 = v57;
          v60[1] = this & 0xFFFFFFFFFFFFFFFBLL;
          LODWORD(v84) = v84 + 1;
        }
      }
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8);
        if (!v21)
          break;
        v32 = *(_QWORD *)(v21 + 24);
        v61 = *(unsigned __int8 *)(v32 + 16);
        if (v32)
          v62 = v61 >= 0x1C;
        else
          v62 = 0;
        if (v62 && v61 - 29 < 0xB)
          goto LABEL_104;
      }
    }
  }
LABEL_56:
  if (v79 != v78)
  {
    if (v80 >= 0x21 && 4 * (HIDWORD(v80) - v81) < v80)
    {
      free(v79);
      v73 = 1 << (33 - __clz(HIDWORD(v80) - v81 - 1));
      v26 = (HIDWORD(v80) - v81) > 0x10;
      HIDWORD(v80) = 0;
      v81 = 0;
      if (v26)
        v74 = v73;
      else
        v74 = 32;
      LODWORD(v80) = v74;
      v75 = malloc_type_malloc(8 * v74, 0x4065EBACuLL);
      if (!v75)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v79 = v75;
      memset(v75, 255, 8 * v80);
      goto LABEL_58;
    }
    memset(v79, 255, 8 * v80);
  }
  HIDWORD(v80) = 0;
  v81 = 0;
LABEL_58:
  v36 = *(_QWORD *)(v18 + 8);
  if (v36)
  {
    while (1)
    {
      v37 = *(_QWORD *)(v36 + 24);
      v38 = *(unsigned __int8 *)(v37 + 16);
      v39 = v37 && v38 >= 0x1C;
      if (v39 && v38 - 29 < 0xB)
        break;
      v36 = *(_QWORD *)(v36 + 8);
      if (!v36)
        goto LABEL_68;
    }
LABEL_91:
    v50 = *(_QWORD *)(v37 + 40);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v78, v50);
    if (v51)
    {
      v52 = v84;
      if (v84 >= (unint64_t)HIDWORD(v84))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
        v52 = v84;
      }
      v53 = (uint64_t *)((char *)v83 + 16 * v52);
      *v53 = v50;
      v53[1] = v18 | 4;
      LODWORD(v84) = v84 + 1;
    }
    while (1)
    {
      v36 = *(_QWORD *)(v36 + 8);
      if (!v36)
        break;
      v37 = *(_QWORD *)(v36 + 24);
      v54 = *(unsigned __int8 *)(v37 + 16);
      if (v37)
        v55 = v54 >= 0x1C;
      else
        v55 = 0;
      if (v55 && v54 - 29 < 0xB)
        goto LABEL_91;
    }
  }
LABEL_68:
  v41 = v84;
  if (v84 >= HIDWORD(v84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
    v41 = v84;
  }
  v42 = (uint64_t *)((char *)v83 + 16 * v41);
  *v42 = v18;
  v42[1] = this | 4;
  LODWORD(v84) = v84 + 1;
  if (v79 != v78)
    free(v79);
LABEL_72:
  if ((*(_WORD *)(this + 18) & 0x7FFF) != 0)
  {
    v66 = (llvm::Constant **)llvm::BlockAddress::get(*(llvm::BlockAddress **)(this + 56), (llvm::Function *)this, v17);
    v67 = **(_QWORD **)*v66;
    v68 = *(llvm::ConstantInt **)(v67 + 1960);
    v69 = *(unsigned int *)(v67 + 1968);
    LODWORD(v79) = v69 >> 8;
    if (v69 >> 8 > 0x40)
    {
      v76 = v68;
      llvm::APInt::initSlowCase((llvm::APInt *)&v78, 1, 0);
      v68 = v76;
    }
    else
    {
      if (v69 <= 0xFF)
        v70 = 0;
      else
        v70 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v69);
      v78 = (_BYTE *)(v70 & 1);
    }
    v71 = llvm::ConstantInt::get(v68, (llvm::LLVMContext *)&v78, v65);
    if (v79 >= 0x41 && v78)
    {
      v77 = v71;
      MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
      v71 = v77;
    }
    v72 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v71, *v66, 0);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v66, v72, (llvm::Value *)1);
    llvm::Constant::destroyConstant((int32x2_t ****)v66);
  }
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, (llvm::Value *)this, (llvm::Value *)1);
  v43 = *(_QWORD *)(v18 + 40);
  if (v43 == v18 + 40)
  {
    v45 = 0;
  }
  else
  {
    if (v43)
      v44 = v43 - 24;
    else
      v44 = 0;
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
      v45 = 0;
    else
      v45 = v44;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v45 + 40) + 40, (uint64_t ***)v45);
  v46 = *(_QWORD *)(v45 + 24);
  v47 = *(_QWORD **)(v45 + 32);
  *v47 = v46;
  *(_QWORD *)(v46 + 8) = v47;
  *(_QWORD *)(v45 + 24) = 0;
  *(_QWORD *)(v45 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v45);
  sub_1C5EBBDF4((_QWORD *)(this + 40), *(_QWORD **)(this + 48), (_QWORD *)(v18 + 40));
  v48 = (char *)operator new(0x40uLL);
  *(_QWORD *)v48 = ***(_QWORD ***)v18 + 1576;
  *((_QWORD *)v48 + 1) = 0;
  v48[16] = 35;
  *(_OWORD *)(v48 + 44) = 0u;
  *(_OWORD *)(v48 + 33) = 0u;
  *(_OWORD *)(v48 + 17) = 0u;
  *((_QWORD *)v48 + 5) = v18;
  *(_WORD *)(v18 + 18) &= ~0x8000u;
  v49 = *(_QWORD *)(v18 + 40);
  *((_QWORD *)v48 + 4) = v18 + 40;
  *((_QWORD *)v48 + 3) = v49;
  v48 += 24;
  *(_QWORD *)(v49 + 8) = v48;
  *(_QWORD *)(v18 + 40) = v48;
  if (v20 == v18)
  {
    sub_1C4FCEAA0(*(_QWORD *)(v18 + 56) + 72, *(uint64_t **)(v18 + 32), *(_QWORD *)(this + 56) + 72, (uint64_t *)(this + 24));
    if (a2)
      goto LABEL_83;
LABEL_87:
    llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v18);
    goto LABEL_88;
  }
  if (!a2)
    goto LABEL_87;
LABEL_83:
  llvm::DomTreeUpdater::applyUpdatesPermissive(a2, (uint64_t *)v83, v84);
  llvm::DomTreeUpdater::deleteBB(a2, (llvm::BasicBlock *)v18);
  if (v20 == v18 && *((_QWORD *)a2 + 36))
    llvm::DomTreeUpdater::recalculate(a2, *(llvm::Function **)(this + 56));
LABEL_88:
  if (v83 != v85)
    free(v83);
}

uint64_t llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  uint64_t i;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  BOOL v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  unsigned __int8 **v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t j;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  BOOL v92;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t k;
  uint64_t v104;
  unsigned int v105;
  BOOL v106;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  llvm::Type *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _DWORD *v121;
  unsigned __int8 *v122;
  void *v123;
  unsigned int v124;
  _QWORD *v125;
  void *v126;
  _QWORD *v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unsigned int *v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  _DWORD *v153;
  BOOL v154;
  unsigned int v155;
  llvm::UndefValue *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t ***v167;
  uint64_t ***v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  llvm::Value *v172;
  uint64_t v173;
  uint64_t n;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t **v181;
  _QWORD *v182;
  _QWORD *m;
  _QWORD *v184;
  _QWORD *v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  BOOL v189;
  uint64_t v191;
  _QWORD *v192;
  uint64_t *v193;
  char v194;
  uint64_t v195;
  uint64_t *v196;
  unsigned int v197;
  BOOL v198;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t *v203;
  unsigned int v204;
  BOOL v205;
  llvm::BasicBlock **v207;
  uint64_t v208;
  unsigned int v209;
  BOOL v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v217;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  BOOL v222;
  unsigned __int8 **v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  unsigned __int8 **v234;
  unsigned __int8 *v235;
  unsigned __int8 **v236;
  int v237;
  BOOL v238;
  unsigned int v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  unsigned __int8 **v246;
  unsigned __int8 *v247;
  int v248;
  unsigned int v249;
  void *v250;
  int MDKindID;
  _QWORD *v252;
  unsigned __int8 *v253;
  int v254;
  llvm::MDNode *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unsigned __int8 **v261;
  unsigned __int8 *v262;
  unsigned __int8 **v263;
  int v264;
  BOOL v265;
  unsigned int v266;
  uint64_t v267;
  llvm::MDNode **v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  BOOL v273;
  uint64_t ***v275;
  uint64_t v276;
  uint64_t **v277;
  uint64_t *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  llvm::Value *v284;
  unsigned int v285;
  BOOL v286;
  unsigned __int8 **v288;
  unsigned __int8 *v289;
  unsigned __int8 **v290;
  unsigned __int8 *v291;
  _QWORD *v293;
  llvm::BasicBlock *v294;
  _QWORD v295[2];
  int v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  _BYTE v301[112];
  void *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  _BYTE v306[64];
  void *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  _QWORD v311[64];

  v311[62] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)this + 40);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v5 = v3 - 24;
  else
    v5 = 0;
  if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
    v5 = 0;
  v6 = *(llvm::BasicBlock **)(v5 - 32);
  if (v6 == this)
    return 0;
  v7 = a2;
  v293 = (_QWORD *)((char *)this + 40);
  v294 = *(llvm::BasicBlock **)(v5 - 32);
  if (llvm::BasicBlock::getSinglePredecessor(v294))
    goto LABEL_98;
  for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 8))
  {
    v10 = *(_QWORD *)(i + 24);
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v10)
      v12 = v11 >= 0x1C;
    else
      v12 = 0;
    if (v12 && v11 - 29 < 0xB)
      break;
  }
  v307 = v311;
  v308 = (uint64_t)v311;
  v309 = 16;
  v310 = 0;
  sub_1C4EE414C((llvm::SmallPtrSetImplBase *)&v307, i, 0);
  v14 = 0;
  v15 = *((_QWORD *)v6 + 6);
  v16 = v15 - 24;
  if (v15)
    v17 = v15 - 24;
  else
    v17 = 0;
  if (*(_BYTE *)(v17 + 16) != 83)
    goto LABEL_94;
  while (1)
  {
    v18 = *(_DWORD *)(v16 + 20);
    v19 = v18 & 0x7FFFFFF;
    if ((v18 & 0x7FFFFFF) != 0)
    {
      v20 = 0;
      while (1)
      {
        v21 = v16 - 32 * v19;
        if ((v18 & 0x40000000) != 0)
          v21 = *(_QWORD *)(v16 - 8);
        if (*(llvm **)(v21 + 32 * *(unsigned int *)(v16 + 60) + 8 * v20) == this)
          break;
        if (v19 == ++v20)
          goto LABEL_28;
      }
    }
    else
    {
LABEL_28:
      LODWORD(v20) = -1;
    }
    v22 = (v18 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * v19;
    v23 = *(_QWORD *)(v22 + 32 * v20);
    if (v23)
    {
      if (*(_BYTE *)(v23 + 16) == 83 && *(llvm **)(v23 + 40) == this)
        break;
    }
    if ((_DWORD)v19)
    {
      v24 = 0;
      while (1)
      {
        v25 = v16 - 32 * v19;
        if ((v18 & 0x40000000) != 0)
          v25 = *(_QWORD *)(v16 - 8);
        if (*(llvm **)(v25 + 32 * *(unsigned int *)(v16 + 60) + 8 * v24) == this)
          break;
        if (v19 == ++v24)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_40:
      LODWORD(v24) = -1;
    }
    if ((v18 & 0x40000000) != 0)
    {
      v26 = *(_QWORD *)(v16 - 8);
      if ((_DWORD)v19)
        goto LABEL_43;
    }
    else
    {
      v26 = v16 - 32 * v19;
      if ((_DWORD)v19)
      {
LABEL_43:
        v27 = 0;
        v28 = 0;
        v29 = *(_QWORD *)(v26 + 32 * v24);
        v30 = 8 * v19;
        do
        {
          v31 = *(_DWORD *)(v16 + 20);
          v32 = (v31 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v31 & 0x7FFFFFF);
          v33 = sub_1C477672C((uint64_t)&v307, *(_QWORD *)(v32 + 32 * *(unsigned int *)(v16 + 60) + v28));
          v34 = (void *)v308 == v307 ? (uint64_t *)((char *)&v309 + 4) : &v309;
          if (v33 != (_QWORD *)(v308 + 8 * *(unsigned int *)v34))
          {
            v35 = *(_DWORD *)(v16 + 20);
            v36 = (v35 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v35 & 0x7FFFFFF);
            v37 = *(_QWORD *)(v36 + v27);
            if (v29 != v37
              && *(unsigned __int8 *)(v29 + 16) - 11 >= 2
              && *(unsigned __int8 *)(v37 + 16) - 11 > 1)
            {
              goto LABEL_93;
            }
          }
          v28 += 8;
          v27 += 32;
        }
        while (v30 != v28);
      }
    }
LABEL_58:
    v15 = *(_QWORD *)(v15 + 8);
    v16 = v15 - 24;
    if (v15)
      v38 = v15 - 24;
    else
      v38 = 0;
    if (*(_BYTE *)(v38 + 16) != 83)
    {
      v14 = 0;
      goto LABEL_94;
    }
  }
  if (!(_DWORD)v19)
    goto LABEL_58;
  v39 = 0;
  v40 = v19;
  while (1)
  {
    v41 = *(_DWORD *)(v16 + 20);
    v42 = (v41 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v41 & 0x7FFFFFF);
    v43 = *(_QWORD *)(v42 + 32 * *(unsigned int *)(v16 + 60) + 8 * v39);
    v44 = sub_1C477672C((uint64_t)&v307, v43);
    v45 = (void *)v308 == v307 ? (uint64_t *)((char *)&v309 + 4) : &v309;
    if (v44 != (_QWORD *)(v308 + 8 * *(unsigned int *)v45))
    {
      v46 = *(_DWORD *)(v23 + 20);
      v47 = v46 & 0x7FFFFFF;
      if ((v46 & 0x7FFFFFF) != 0)
      {
        v48 = 0;
        while (1)
        {
          v49 = v23 - 32 * v47;
          if ((v46 & 0x40000000) != 0)
            v49 = *(_QWORD *)(v23 - 8);
          if (*(_QWORD *)(v49 + 32 * *(unsigned int *)(v23 + 60) + 8 * v48) == v43)
            break;
          if (v47 == ++v48)
            goto LABEL_78;
        }
      }
      else
      {
LABEL_78:
        LODWORD(v48) = -1;
      }
      v50 = (v46 & 0x40000000) != 0 ? *(_QWORD *)(v23 - 8) : v23 - 32 * v47;
      v51 = *(_DWORD *)(v16 + 20);
      v52 = (v51 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v51 & 0x7FFFFFF);
      v53 = *(_QWORD *)(v50 + 32 * v48);
      v54 = *(_QWORD *)(v52 + 32 * v39);
      if (v53 != v54
        && *(unsigned __int8 *)(v53 + 16) - 11 >= 2
        && *(unsigned __int8 *)(v54 + 16) - 11 > 1)
      {
        break;
      }
    }
    if (++v39 == v40)
      goto LABEL_58;
  }
LABEL_93:
  v14 = 1;
LABEL_94:
  if ((void *)v308 != v307)
    free((void *)v308);
  v7 = a2;
  v4 = v293;
  v6 = v294;
  if ((v14 & 1) != 0)
    return 0;
LABEL_98:
  if (llvm::BasicBlock::getSinglePredecessor(v6))
  {
LABEL_99:
    v56 = *((_QWORD *)this + 1);
    if (v56)
    {
      while (1)
      {
        v57 = *(_QWORD *)(v56 + 24);
        v58 = *(unsigned __int8 *)(v57 + 16);
        v59 = v57 && v58 >= 0x1C;
        v60 = !v59 || v58 - 29 > 0xA;
        if (!v60)
          break;
        v56 = *(_QWORD *)(v56 + 8);
        if (!v56)
          goto LABEL_109;
      }
LABEL_373:
      v212 = *(_QWORD *)(v57 + 40);
      v213 = *(_QWORD *)(v212 + 40);
      if (v213 != v212 + 40)
      {
        v214 = v213 - 24;
        if (!v213)
          v214 = 0;
        v215 = *(unsigned __int8 *)(v214 + 16) - 40;
        if (v215 < 0xFFFFFFF5)
          v214 = 0;
        if (v213)
        {
          if (*(_BYTE *)(v214 + 16) == 39 && v215 >= 0xFFFFFFF5)
          {
            v208 = *(unsigned int *)(v214 + 80);
            v217 = v214 - 32 * v208;
            if (v6 != *(llvm::BasicBlock **)(v217 - 64))
            {
              if (!(_DWORD)v208)
                goto LABEL_365;
              v207 = (llvm::BasicBlock **)(v217 - 32);
              while (v6 != *v207)
              {
                v207 += 4;
                if (!--v208)
                  goto LABEL_365;
              }
            }
            return 0;
          }
        }
      }
LABEL_365:
      while (1)
      {
        v56 = *(_QWORD *)(v56 + 8);
        if (!v56)
          break;
        v57 = *(_QWORD *)(v56 + 24);
        v209 = *(unsigned __int8 *)(v57 + 16);
        if (v57)
          v210 = v209 >= 0x1C;
        else
          v210 = 0;
        if (v210 && v209 - 29 < 0xB)
          goto LABEL_373;
      }
    }
LABEL_109:
    v61 = (_QWORD *)*v4;
    if ((_QWORD *)*v4 != v4)
    {
      v62 = v61 ? (unsigned __int8 *)(v61 - 3) : 0;
      if (v62[16] - 29 <= 0xA && (v62[23] & 0x20) != 0)
      {
        v63 = ***(_QWORD ***)v62;
        v307 = v62;
        v64 = *(_DWORD *)(v63 + 2496);
        if (!v64)
        {
          v224 = 0;
          goto LABEL_407;
        }
        v65 = *(_QWORD *)(v63 + 2480);
        v66 = v64 - 1;
        v67 = v66 & ((v62 >> 4) ^ (v62 >> 9));
        v68 = (unsigned __int8 **)(v65 + 40 * v67);
        v69 = *v68;
        if (*v68 != v62)
        {
          v70 = 0;
          v71 = 1;
          while (v69 != (unsigned __int8 *)-4096)
          {
            if (v70)
              v72 = 0;
            else
              v72 = v69 == (unsigned __int8 *)-8192;
            if (v72)
              v70 = v68;
            v73 = v67 + v71++;
            v67 = v73 & v66;
            v68 = (unsigned __int8 **)(v65 + 40 * v67);
            v69 = *v68;
            if (*v68 == v62)
              goto LABEL_125;
          }
          if (v70)
            v224 = v70;
          else
            v224 = v68;
LABEL_407:
          v68 = (unsigned __int8 **)sub_1C541AB24(v63 + 2480, (uint64_t)&v307, (uint64_t *)&v307, v224);
          v225 = (unsigned __int8 *)v307;
          v68[3] = 0;
          v68[4] = 0;
          *v68 = v225;
          v68[1] = (unsigned __int8 *)(v68 + 3);
          v68[2] = (unsigned __int8 *)0x100000000;
        }
LABEL_125:
        v74 = *((unsigned int *)v68 + 4);
        if ((_DWORD)v74)
        {
          v75 = v68[1] + 8;
          v76 = 16 * v74;
          while (*((_DWORD *)v75 - 2) != 18)
          {
            v75 += 2;
            v76 -= 16;
            if (!v76)
              goto LABEL_129;
          }
          if (*v75)
          {
            v219 = *((_QWORD *)this + 1);
            if (v219)
            {
              while (1)
              {
                v220 = *(_QWORD *)(v219 + 24);
                v221 = *(unsigned __int8 *)(v220 + 16);
                v222 = v220 && v221 >= 0x1C;
                if (v222 && v221 - 29 <= 0xA)
                  break;
                v219 = *(_QWORD *)(v219 + 8);
                if (!v219)
                  goto LABEL_129;
              }
LABEL_408:
              v226 = *(_QWORD *)(v220 + 40);
              v227 = *(_QWORD *)(v226 + 40);
              if (v227 != v226 + 40)
              {
                v228 = v227 ? (unsigned __int8 *)(v227 - 24) : 0;
                if (v228[16] - 29 <= 0xA && (v228[23] & 0x20) != 0)
                {
                  v229 = ***(_QWORD ***)v228;
                  v307 = v228;
                  v230 = *(_DWORD *)(v229 + 2496);
                  if (v230)
                  {
                    v231 = *(_QWORD *)(v229 + 2480);
                    v232 = v230 - 1;
                    v233 = v232 & ((v228 >> 4) ^ (v228 >> 9));
                    v234 = (unsigned __int8 **)(v231 + 40 * v233);
                    v235 = *v234;
                    if (*v234 != v228)
                    {
                      v236 = 0;
                      v237 = 1;
                      while (v235 != (unsigned __int8 *)-4096)
                      {
                        if (v236)
                          v238 = 0;
                        else
                          v238 = v235 == (unsigned __int8 *)-8192;
                        if (v238)
                          v236 = v234;
                        v239 = v233 + v237++;
                        v233 = v239 & v232;
                        v234 = (unsigned __int8 **)(v231 + 40 * v233);
                        v235 = *v234;
                        if (*v234 == v228)
                          goto LABEL_424;
                      }
                      if (v236)
                        v246 = v236;
                      else
                        v246 = v234;
LABEL_442:
                      v234 = (unsigned __int8 **)sub_1C541AB24(v229 + 2480, (uint64_t)&v307, (uint64_t *)&v307, v246);
                      v247 = (unsigned __int8 *)v307;
                      v234[4] = 0;
                      v234[3] = 0;
                      *v234 = v247;
                      v234[1] = (unsigned __int8 *)(v234 + 3);
                      v234[2] = (unsigned __int8 *)0x100000000;
                      v7 = a2;
                      v4 = v293;
                    }
LABEL_424:
                    v240 = *((unsigned int *)v234 + 4);
                    if (!(_DWORD)v240)
                      goto LABEL_430;
                    v241 = v234[1] + 8;
                    v242 = 16 * v240;
                    while (*((_DWORD *)v241 - 2) != 18)
                    {
                      v241 += 2;
                      v242 -= 16;
                      if (!v242)
                        goto LABEL_430;
                    }
                    if (!*v241)
                      goto LABEL_430;
                    return 0;
                  }
                  v246 = 0;
                  goto LABEL_442;
                }
              }
LABEL_430:
              while (1)
              {
                v219 = *(_QWORD *)(v219 + 8);
                if (!v219)
                  break;
                v220 = *(_QWORD *)(v219 + 24);
                v243 = *(unsigned __int8 *)(v220 + 16);
                if (v220)
                  v244 = v243 >= 0x1C;
                else
                  v244 = 0;
                if (v244 && v243 - 29 < 0xB)
                  goto LABEL_408;
              }
            }
          }
        }
      }
    }
LABEL_129:
    v307 = &v309;
    v308 = 0x2000000000;
    v77 = (unint64_t)v294;
    if (v7)
    {
      v297 = v301;
      v298 = (uint64_t)v301;
      v299 = 8;
      v300 = 0;
      for (j = *((_QWORD *)v294 + 1); j; j = *(_QWORD *)(j + 8))
      {
        v79 = *(_QWORD *)(j + 24);
        v80 = *(unsigned __int8 *)(v79 + 16);
        if (v79)
          v81 = v80 >= 0x1C;
        else
          v81 = 0;
        if (v81 && v80 - 29 < 0xB)
          break;
      }
      v302 = v306;
      v303 = (uint64_t)v306;
      v304 = 8;
      v305 = 0;
      sub_1C4EE414C((llvm::SmallPtrSetImplBase *)&v302, j, 0);
      v83 = *((_QWORD *)this + 1);
      if (v83)
      {
        v84 = *((_QWORD *)this + 1);
        while (1)
        {
          v85 = *(_QWORD *)(v84 + 24);
          v86 = *(unsigned __int8 *)(v85 + 16);
          v87 = v85 && v86 >= 0x1C;
          if (v87 && v86 - 29 <= 0xA)
            break;
          v84 = *(_QWORD *)(v84 + 8);
          if (!v84)
            goto LABEL_151;
        }
        v186 = 0;
LABEL_321:
        ++v186;
        while (1)
        {
          v84 = *(_QWORD *)(v84 + 8);
          if (!v84)
            break;
          v187 = *(_QWORD *)(v84 + 24);
          v188 = *(unsigned __int8 *)(v187 + 16);
          if (v187)
            v189 = v188 >= 0x1C;
          else
            v189 = 0;
          if (v189 && v188 - 29 < 0xB)
            goto LABEL_321;
        }
      }
      else
      {
LABEL_151:
        v186 = 0;
      }
      v89 = (2 * v186) + (unint64_t)v308;
      if (v89 >= HIDWORD(v308))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v307, (uint64_t)&v309, v89 + 1, 16);
        v83 = *((_QWORD *)this + 1);
      }
      if (v83)
      {
        while (1)
        {
          v90 = *(_QWORD *)(v83 + 24);
          v91 = *(unsigned __int8 *)(v90 + 16);
          v92 = v90 && v91 >= 0x1C;
          if (v92 && v91 - 29 < 0xB)
            break;
          v83 = *(_QWORD *)(v83 + 8);
          if (!v83)
            goto LABEL_164;
        }
        v77 = (unint64_t)v294;
LABEL_331:
        v191 = *(_QWORD *)(v90 + 40);
        v192 = sub_1C477672C((uint64_t)&v302, v191);
        if ((void *)v303 == v302)
          v193 = (uint64_t *)((char *)&v304 + 4);
        else
          v193 = &v304;
        if (v192 == (_QWORD *)(v303 + 8 * *(unsigned int *)v193))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v297, v191);
          if (v194)
          {
            v195 = v308;
            if (v308 >= (unint64_t)HIDWORD(v308))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v307, (uint64_t)&v309, v308 + 1, 16);
              v195 = v308;
            }
            v196 = (uint64_t *)((char *)v307 + 16 * v195);
            *v196 = v191;
            v196[1] = (unint64_t)v294 & 0xFFFFFFFFFFFFFFFBLL;
            LODWORD(v308) = v308 + 1;
          }
        }
        while (1)
        {
          v83 = *(_QWORD *)(v83 + 8);
          if (!v83)
            break;
          v90 = *(_QWORD *)(v83 + 24);
          v197 = *(unsigned __int8 *)(v90 + 16);
          if (v90)
            v198 = v197 >= 0x1C;
          else
            v198 = 0;
          if (v198 && v197 - 29 < 0xB)
            goto LABEL_331;
        }
      }
LABEL_164:
      if ((void *)v298 == v297)
      {
LABEL_165:
        HIDWORD(v299) = 0;
        v300 = 0;
        v4 = v293;
      }
      else
      {
        if (v299 < 0x21 || 4 * (HIDWORD(v299) - v300) >= v299)
        {
          memset((void *)v298, 255, 8 * v299);
          goto LABEL_165;
        }
        free((void *)v298);
        v248 = 1 << (33 - __clz(HIDWORD(v299) - v300 - 1));
        v60 = (HIDWORD(v299) - v300) > 0x10;
        HIDWORD(v299) = 0;
        v300 = 0;
        if (v60)
          v249 = v248;
        else
          v249 = 32;
        LODWORD(v299) = v249;
        v250 = malloc_type_malloc(8 * v249, 0x4065EBACuLL);
        v4 = v293;
        if (!v250)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v298 = (uint64_t)v250;
        memset(v250, 255, 8 * v299);
      }
      v94 = *((_QWORD *)this + 1);
      if (v94)
      {
        while (1)
        {
          v95 = *(_QWORD *)(v94 + 24);
          v96 = *(unsigned __int8 *)(v95 + 16);
          v97 = v95 && v96 >= 0x1C;
          if (v97 && v96 - 29 < 0xB)
            break;
          v94 = *(_QWORD *)(v94 + 8);
          if (!v94)
            goto LABEL_176;
        }
        v77 = (unint64_t)v294;
LABEL_348:
        v200 = *(_QWORD *)(v95 + 40);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v297, v200);
        if (v201)
        {
          v202 = v308;
          if (v308 >= (unint64_t)HIDWORD(v308))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v307, (uint64_t)&v309, v308 + 1, 16);
            v202 = v308;
          }
          v203 = (uint64_t *)((char *)v307 + 16 * v202);
          *v203 = v200;
          v203[1] = (unint64_t)this | 4;
          LODWORD(v308) = v308 + 1;
        }
        while (1)
        {
          v94 = *(_QWORD *)(v94 + 8);
          if (!v94)
            break;
          v95 = *(_QWORD *)(v94 + 24);
          v204 = *(unsigned __int8 *)(v95 + 16);
          if (v95)
            v205 = v204 >= 0x1C;
          else
            v205 = 0;
          if (v205 && v204 - 29 < 0xB)
            goto LABEL_348;
        }
      }
LABEL_176:
      v99 = v308;
      if (v308 >= HIDWORD(v308))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v307, (uint64_t)&v309, v308 + 1, 16);
        v99 = v308;
      }
      v100 = (char *)v307 + 16 * v99;
      *v100 = this;
      v100[1] = v77 | 4;
      LODWORD(v308) = v308 + 1;
      if ((void *)v303 != v302)
        free((void *)v303);
      if ((void *)v298 != v297)
        free((void *)v298);
    }
    v101 = *(_QWORD *)(v77 + 48);
    if (v101)
      v102 = v101 - 24;
    else
      v102 = 0;
    if (*(_BYTE *)(v102 + 16) == 83)
    {
      for (k = *((_QWORD *)this + 1); k; k = *(_QWORD *)(k + 8))
      {
        v104 = *(_QWORD *)(k + 24);
        v105 = *(unsigned __int8 *)(v104 + 16);
        if (v104)
          v106 = v105 >= 0x1C;
        else
          v106 = 0;
        if (v106 && v105 - 29 < 0xB)
          break;
      }
      v297 = &v299;
      v298 = 0x1000000000;
      sub_1C4DBBCC0((unsigned int *)&v297, k, 0);
      v108 = *(_QWORD *)(v77 + 48);
      v109 = (_DWORD *)(v108 - 24);
      if (v108)
        v110 = v108 - 24;
      else
        v110 = 0;
      if (*(_BYTE *)(v110 + 16) == 83)
      {
        while (1)
        {
          v111 = v109[5];
          v112 = v111 & 0x7FFFFFF;
          if ((v111 & 0x7FFFFFF) != 0)
          {
            v113 = 0;
            while (1)
            {
              v114 = &v109[-8 * v112];
              if ((v111 & 0x40000000) != 0)
                v114 = (_DWORD *)*((_QWORD *)v109 - 1);
              if (*(llvm **)&v114[8 * v109[15] + 2 * v113] == this)
                break;
              if (v112 == ++v113)
                goto LABEL_206;
            }
          }
          else
          {
LABEL_206:
            LODWORD(v113) = -1;
          }
          v116 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v109, v113, 0);
          v295[0] = 0;
          v295[1] = 0;
          v296 = 0;
          v117 = v109[5];
          v118 = v117 & 0x7FFFFFF;
          if ((v117 & 0x7FFFFFF) != 0)
          {
            v119 = 0;
            while (1)
            {
              v120 = v109[5];
              if ((v120 & 0x40000000) != 0)
                v121 = (_DWORD *)*((_QWORD *)v109 - 1);
              else
                v121 = &v109[-8 * (v120 & 0x7FFFFFF)];
              v122 = *(unsigned __int8 **)&v121[8 * v119];
              if (v122[16] - 11 < 2)
                goto LABEL_228;
              v123 = *(void **)&v121[8 * v109[15] + 2 * v119];
              v302 = v123;
              v303 = (uint64_t)v122;
              if (!v296)
                break;
              v124 = (v296 - 1) & ((v123 >> 4) ^ (v123 >> 9));
              v125 = (_QWORD *)(v295[0] + 16 * v124);
              v126 = (void *)*v125;
              if (v123 != (void *)*v125)
              {
                v127 = 0;
                v128 = 1;
                while (v126 != (void *)-4096)
                {
                  if (v127)
                    v129 = 0;
                  else
                    v129 = v126 == (void *)-8192;
                  if (v129)
                    v127 = v125;
                  v130 = v124 + v128++;
                  v124 = v130 & (v296 - 1);
                  v125 = (_QWORD *)(v295[0] + 16 * v124);
                  v126 = (void *)*v125;
                  if (v123 == (void *)*v125)
                    goto LABEL_228;
                }
                if (v127)
                  v131 = v127;
                else
                  v131 = v125;
                goto LABEL_227;
              }
LABEL_228:
              if (++v119 == v118)
                goto LABEL_231;
            }
            v131 = 0;
LABEL_227:
            v132 = sub_1C4ECCA58((uint64_t)v295, (uint64_t)&v302, (uint64_t *)&v302, v131);
            *v132 = v302;
            v132[1] = v303;
            goto LABEL_228;
          }
LABEL_231:
          if (*(_BYTE *)(v116 + 16) == 83 && *(llvm **)(v116 + 40) == this)
          {
            v158 = *(_DWORD *)(v116 + 20) & 0x7FFFFFF;
            if ((_DWORD)v158)
            {
              v159 = 0;
              v160 = 0;
              v161 = 8 * v158;
              do
              {
                v162 = *(_DWORD *)(v116 + 20);
                if ((v162 & 0x40000000) != 0)
                  v163 = *(_QWORD *)(v116 - 8);
                else
                  v163 = v116 - 32 * (v162 & 0x7FFFFFF);
                v164 = *(_QWORD *)(v163 + 32 * *(unsigned int *)(v116 + 60) + v160);
                v165 = sub_1C5F1D7E8(*(_QWORD *)(v163 + v159), v164, (uint64_t)v295);
                sub_1C477667C((llvm::PHINode *)v109, v165, v164);
                v160 += 8;
                v159 += 32;
              }
              while (v161 != v160);
            }
          }
          else if ((_DWORD)v298)
          {
            v133 = 0;
            v134 = 8 * v298;
            do
            {
              v135 = *(_QWORD *)((char *)v297 + v133);
              v136 = sub_1C5F1D7E8(v116, v135, (uint64_t)v295);
              sub_1C477667C((llvm::PHINode *)v109, v136, v135);
              v133 += 8;
            }
            while (v134 != v133);
          }
          v302 = &v304;
          v303 = 0xC00000000;
          v137 = v109[5];
          v138 = v137 & 0x7FFFFFF;
          if ((v137 & 0x7FFFFFF) != 0)
            break;
LABEL_270:
          MEMORY[0x1CAA32FB4](v295[0], 8);
          v108 = *(_QWORD *)(v108 + 8);
          v109 = (_DWORD *)(v108 - 24);
          if (v108)
            v157 = v108 - 24;
          else
            v157 = 0;
          if (*(_BYTE *)(v157 + 16) != 83)
            goto LABEL_282;
        }
        v139 = 0;
        while (1)
        {
          v140 = v109[5];
          if ((v140 & 0x40000000) != 0)
          {
            v141 = (_DWORD *)*((_QWORD *)v109 - 1);
            if (*(unsigned __int8 *)(*(_QWORD *)&v141[8 * v139] + 16) - 11 > 1)
              goto LABEL_248;
          }
          else
          {
            v141 = &v109[-8 * (v140 & 0x7FFFFFF)];
            if (*(unsigned __int8 *)(*(_QWORD *)&v141[8 * v139] + 16) - 11 >= 2)
              goto LABEL_248;
          }
          if (!v296)
            goto LABEL_245;
          v142 = *(_QWORD *)&v141[8 * v109[15] + 2 * v139];
          v143 = ((v142 >> 4) ^ (v142 >> 9)) & (v296 - 1);
          v144 = *(_QWORD *)(v295[0] + 16 * v143);
          if (v142 != v144)
          {
            v146 = 1;
            while (v144 != -4096)
            {
              v147 = v143 + v146++;
              v143 = v147 & (v296 - 1);
              v144 = *(_QWORD *)(v295[0] + 16 * v143);
              if (v142 == v144)
                goto LABEL_244;
            }
LABEL_245:
            v145 = v303;
            if (v303 >= (unint64_t)HIDWORD(v303))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v302, (uint64_t)&v304, v303 + 1, 4);
              v145 = v303;
            }
            *((_DWORD *)v302 + v145) = v139;
            LODWORD(v303) = v303 + 1;
            goto LABEL_248;
          }
LABEL_244:
          if ((_DWORD)v143 == v296)
            goto LABEL_245;
          sub_1C6125834((uint64_t)v109, v139, *(_QWORD *)(v295[0] + 16 * v143 + 8));
LABEL_248:
          if (++v139 == v138)
          {
            v148 = (unsigned int *)v302;
            if ((_DWORD)v303)
            {
              v149 = 0;
              v150 = 0;
              v151 = v109[5];
              v152 = 4 * v303;
              do
              {
                v153 = &v109[-8 * (v151 & 0x7FFFFFF)];
                if ((v151 & 0x40000000) != 0)
                  v153 = (_DWORD *)*((_QWORD *)v109 - 1);
                if (*(_BYTE *)(*(_QWORD *)&v153[8 * *(unsigned int *)((char *)v302 + v149)] + 16) == 12)
                  ++v150;
                v149 += 4;
              }
              while (v152 != v149);
              if (v150)
                v154 = v150 == (unint64_t)v303;
              else
                v154 = 1;
              if (!v154)
              {
                do
                {
                  v155 = *v148++;
                  v156 = llvm::UndefValue::get(*(llvm::UndefValue **)v109, v115);
                  sub_1C6125834((uint64_t)v109, v155, (uint64_t)v156);
                  v152 -= 4;
                }
                while (v152);
                v148 = (unsigned int *)v302;
              }
            }
            if (v148 != (unsigned int *)&v304)
              free(v148);
            goto LABEL_270;
          }
        }
      }
LABEL_282:
      if (v297 != &v299)
        free(v297);
      v4 = v293;
      v77 = (unint64_t)v294;
    }
    if (llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v77))
    {
      v166 = (_QWORD *)*v4;
      if ((_QWORD *)*v4 == v4)
      {
        v168 = 0;
      }
      else
      {
        if (v166)
          v167 = (uint64_t ***)(v166 - 3);
        else
          v167 = 0;
        if (*((unsigned __int8 *)v167 + 16) - 29 >= 0xB)
          v168 = 0;
        else
          v168 = v167;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v168[5] + 5), v168);
      v180 = v168[3];
      v181 = v168[4];
      *v181 = (uint64_t *)v180;
      v180[1] = (uint64_t *)v181;
      v168[3] = 0;
      v168[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v168);
      v182 = (_QWORD *)((char *)v294 + 40);
      for (m = (_QWORD *)*((_QWORD *)v294 + 6); m != v182; m = (_QWORD *)m[1])
      {
        v184 = m - 3;
        if (m)
          v185 = m - 3;
        else
          v185 = 0;
        if (*((_BYTE *)v185 + 16) != 83)
          goto LABEL_450;
      }
      v184 = 0;
LABEL_450:
      sub_1C5EBBDF4(v182, v184 + 3, v4);
    }
    else
    {
      while (1)
      {
        v171 = *((_QWORD *)this + 6);
        v172 = (llvm::Value *)(v171 - 24);
        v173 = v171 ? v171 - 24 : 0;
        if (!v171 || *(_BYTE *)(v173 + 16) != 83)
          break;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v171 + 16) + 40, (uint64_t ***)(v171 - 24));
        v169 = *((_QWORD *)v172 + 3);
        v170 = (_QWORD *)*((_QWORD *)v172 + 4);
        *v170 = v169;
        *(_QWORD *)(v169 + 8) = v170;
        *((_QWORD *)v172 + 3) = 0;
        *((_QWORD *)v172 + 4) = 0;
        llvm::Value::deleteValue(v172);
      }
    }
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)this, "llvm.loop", 9uLL);
    v252 = (_QWORD *)*((_QWORD *)this + 5);
    if (v252 == v4)
      goto LABEL_487;
    v253 = v252 ? (unsigned __int8 *)(v252 - 3) : 0;
    if (v253[16] - 29 > 0xA)
      goto LABEL_487;
    v254 = MDKindID;
    v255 = (llvm::MDNode *)*((_QWORD *)v253 + 6);
    if (!v255 && (v253[23] & 0x20) == 0)
      goto LABEL_487;
    if (!MDKindID)
      goto LABEL_476;
    if ((v253[23] & 0x20) == 0)
    {
LABEL_487:
      llvm::Value::doRAUW(this, v294, (llvm::Value *)1);
      if ((*((_BYTE *)v294 + 23) & 0x10) == 0)
        llvm::Value::takeName(v294, this);
      v275 = (uint64_t ***)*v293;
      if ((_QWORD *)*v293 != v293)
      {
        v276 = v275 ? (uint64_t)(v275 - 3) : 0;
        if (v275 && *(unsigned __int8 *)(v276 + 16) - 40 >= 0xFFFFFFF5)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v293, v275 - 3);
          v277 = *v275;
          v278 = (uint64_t *)v275[1];
          *v278 = (uint64_t)*v275;
          v277[1] = v278;
          *v275 = 0;
          v275[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)(v275 - 3));
        }
      }
      v279 = (char *)operator new(0x40uLL);
      *(_QWORD *)v279 = ***(_QWORD ***)this + 1576;
      *((_QWORD *)v279 + 1) = 0;
      v279[16] = 35;
      *(_OWORD *)(v279 + 44) = 0u;
      *(_OWORD *)(v279 + 33) = 0u;
      *(_OWORD *)(v279 + 17) = 0u;
      *((_WORD *)this + 9) &= ~0x8000u;
      v280 = *((_QWORD *)this + 5);
      *((_QWORD *)v279 + 4) = v293;
      *((_QWORD *)v279 + 5) = this;
      *((_QWORD *)v279 + 3) = v280;
      v279 += 24;
      *(_QWORD *)(v280 + 8) = v279;
      *((_QWORD *)this + 5) = v279;
      if (a2)
        llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v307, v308);
      llvm::DeleteDeadBlock(this, a2, 0);
      if (v307 != &v309)
        free(v307);
      return 1;
    }
    v256 = ***(_QWORD ***)v253;
    v297 = v253;
    v257 = *(_DWORD *)(v256 + 2496);
    if (v257)
    {
      v258 = *(_QWORD *)(v256 + 2480);
      v259 = v257 - 1;
      v260 = v259 & ((v253 >> 4) ^ (v253 >> 9));
      v261 = (unsigned __int8 **)(v258 + 40 * v260);
      v262 = *v261;
      if (*v261 == v253)
        goto LABEL_470;
      v263 = 0;
      v264 = 1;
      while (v262 != (unsigned __int8 *)-4096)
      {
        if (v263)
          v265 = 0;
        else
          v265 = v262 == (unsigned __int8 *)-8192;
        if (v265)
          v263 = v261;
        v266 = v260 + v264++;
        v260 = v266 & v259;
        v261 = (unsigned __int8 **)(v258 + 40 * v260);
        v262 = *v261;
        if (*v261 == v253)
          goto LABEL_470;
      }
      if (v263)
        v290 = v263;
      else
        v290 = v261;
    }
    else
    {
      v290 = 0;
    }
    v261 = (unsigned __int8 **)sub_1C541AB24(v256 + 2480, (uint64_t)&v297, (uint64_t *)&v297, v290);
    v291 = (unsigned __int8 *)v297;
    v261[3] = 0;
    v261[4] = 0;
    *v261 = v291;
    v261[1] = (unsigned __int8 *)(v261 + 3);
    v261[2] = (unsigned __int8 *)0x100000000;
LABEL_470:
    v267 = *((unsigned int *)v261 + 4);
    if ((_DWORD)v267)
    {
      v268 = (llvm::MDNode **)(v261[1] + 8);
      v269 = 16 * v267;
      while (*((_DWORD *)v268 - 2) != v254)
      {
        v268 += 2;
        v269 -= 16;
        if (!v269)
          goto LABEL_487;
      }
      v255 = *v268;
LABEL_476:
      if (v255)
      {
        v270 = *((_QWORD *)this + 1);
        if (v270)
        {
          while (1)
          {
            v271 = *(_QWORD *)(v270 + 24);
            v272 = *(unsigned __int8 *)(v271 + 16);
            v273 = v271 && v272 >= 0x1C;
            if (v273 && v272 - 29 <= 0xA)
              break;
            v270 = *(_QWORD *)(v270 + 8);
            if (!v270)
              goto LABEL_487;
          }
LABEL_502:
          v281 = *(_QWORD *)(v271 + 40);
          v282 = *(_QWORD *)(v281 + 40);
          if (v282 == v281 + 40)
          {
            v284 = 0;
          }
          else
          {
            if (v282)
              v283 = (unsigned __int8 *)(v282 - 24);
            else
              v283 = 0;
            if (v283[16] - 29 >= 0xB)
              v284 = 0;
            else
              v284 = (llvm::Value *)v283;
          }
          if (v254)
          {
            llvm::Value::setMetadata(v284, v254, v255);
          }
          else
          {
            v297 = v255;
            llvm::MetadataTracking::track((uint64_t)&v297, (unsigned __int8 *)v255, 2);
            v288 = (unsigned __int8 **)((char *)v284 + 48);
            if (&v297 == (void **)v288)
            {
              if (v297)
                llvm::MetadataTracking::untrack((uint64_t)&v297, (unsigned __int8 *)v297);
            }
            else
            {
              if (*v288)
                llvm::MetadataTracking::untrack((uint64_t)v288, *v288);
              v289 = (unsigned __int8 *)v297;
              *v288 = (unsigned __int8 *)v297;
              if (v289)
                llvm::MetadataTracking::retrack((uint64_t)&v297, v289, (uint64_t)v288);
            }
          }
          while (1)
          {
            v270 = *(_QWORD *)(v270 + 8);
            if (!v270)
              break;
            v271 = *(_QWORD *)(v270 + 24);
            v285 = *(unsigned __int8 *)(v271 + 16);
            if (v271)
              v286 = v285 >= 0x1C;
            else
              v286 = 0;
            if (v286 && v285 - 29 < 0xB)
              goto LABEL_502;
          }
        }
      }
      goto LABEL_487;
    }
    goto LABEL_487;
  }
  for (n = *((_QWORD *)this + 6); ; n = *(_QWORD *)(n + 8))
  {
    v175 = n - 24;
    if (!n)
      v175 = 0;
    if (*(_BYTE *)(v175 + 16) != 83)
      goto LABEL_99;
    v176 = *(_QWORD *)(n - 16);
    if (v176)
      break;
LABEL_312:
    ;
  }
  while (1)
  {
    result = 0;
    v177 = *(_QWORD *)(v176 + 24);
    if (!v177 || *(_BYTE *)(v177 + 16) != 83)
      return result;
    v178 = *(_DWORD *)(v177 + 20);
    if ((v178 & 0x40000000) != 0)
      v179 = *(_QWORD *)(v177 - 8);
    else
      v179 = v177 - 32 * (v178 & 0x7FFFFFF);
    if (*(llvm **)(v179
                  + 32 * *(unsigned int *)(v177 + 60)
                  + 8 * ((unint64_t)(v176 - v179) >> 5)) != this)
      return 0;
    v176 = *(_QWORD *)(v176 + 8);
    if (!v176)
      goto LABEL_312;
  }
}

uint64_t llvm::EliminateDuplicatePHINodes(llvm **this, llvm::BasicBlock *a2)
{
  llvm *v3;
  char *v4;
  int v5;
  _BOOL4 v6;
  char v8;
  llvm *v9;
  const llvm::Instruction *v10;
  char *v11;
  llvm::Instruction *v12;
  char *v13;
  llvm *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  llvm *v28;
  llvm *v29;
  unsigned __int8 *v30;
  int v31;
  llvm::Instruction *v32;
  char v33;
  const llvm::Instruction **v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  llvm *v50;
  unsigned __int8 *v51;
  int v52;
  llvm::Instruction *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  const llvm::Instruction **v58;
  const llvm::Instruction **v59;

  if (this[5] == (llvm *)(this + 5))
  {
    v5 = dword_1ED8272C0;
    if (dword_1ED8272C0 != -1)
      goto LABEL_13;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    goto LABEL_55;
  }
  v3 = this[6];
  if (v3)
    v4 = (char *)v3 - 24;
  else
    v4 = 0;
  if (v4[16] != 83)
    v4 = 0;
  v5 = dword_1ED8272C0;
  v6 = dword_1ED8272C0 != -1;
  if (dword_1ED8272C0 != -1 && v4 != 0)
  {
    v21 = dword_1ED8272C0;
    do
    {
      v22 = *((_QWORD *)v4 + 4);
      v4 = (char *)(v22 - 24);
      if (v22)
        v23 = v22 - 24;
      else
        v23 = 0;
      v24 = v21-- != 0;
      v6 = v24;
    }
    while (v24 && v22 && *(_BYTE *)(v23 + 16) == 83);
  }
  if (!v6)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    if ((dword_1ED8272C0 & 0x3FFFFFFF) == 0)
    {
      v27 = 0;
      goto LABEL_57;
    }
LABEL_55:
    v25 = (16 * v5 / 3u + 1) | ((unint64_t)(16 * v5 / 3u + 1) >> 1);
    v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
    sub_1C5F1D930((uint64_t)&v55, (((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8)) + 1);
    v27 = v55;
LABEL_57:
    v8 = 0;
    v28 = this[6];
    v29 = (llvm *)*((_QWORD *)v28 + 1);
    if (v28)
      v30 = (unsigned __int8 *)v28 - 24;
    else
      v30 = 0;
    v31 = v30[16];
    if (v31 == 83)
      v32 = (llvm::Instruction *)v30;
    else
      v32 = 0;
    v54 = v32;
    if (!v28 || v31 != 83)
    {
LABEL_103:
      MEMORY[0x1CAA32FB4](v27, 8);
      return v8 & 1;
    }
    v8 = 0;
    while (1)
    {
      v58 = 0;
      v33 = sub_1C5F1DA5C(v27, v57, &v54, &v58);
      v34 = v58;
      if ((v33 & 1) == 0)
        break;
      llvm::Value::doRAUW(v32, *v58, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v32 + 5) + 40, (uint64_t ***)v32);
      v35 = *((_QWORD *)v32 + 3);
      v36 = (_QWORD *)*((_QWORD *)v32 + 4);
      *v36 = v35;
      *(_QWORD *)(v35 + 8) = v36;
      *((_QWORD *)v32 + 3) = 0;
      *((_QWORD *)v32 + 4) = 0;
      llvm::Value::deleteValue(v32);
      if (v56)
      {
        if (v57 <= 4 * (int)v56 || v57 < 0x41)
        {
          if (v57)
          {
            v43 = 8 * v57;
            v44 = (_QWORD *)v27;
            do
            {
              *v44++ = -4096;
              v43 -= 8;
            }
            while (v43);
          }
          v56 = 0;
        }
        else if ((_DWORD)v56)
        {
          v37 = 1 << (33 - __clz(v56 - 1));
          if (v37 <= 64)
            v38 = 64;
          else
            v38 = v37;
          if (v38 == v57)
          {
            v39 = 0;
            v56 = 0;
            v40 = 8 * v57;
            do
            {
              *(_QWORD *)(v27 + v39) = -4096;
              v39 += 8;
            }
            while (v40 != v39);
          }
          else
          {
            MEMORY[0x1CAA32FB4](v27, 8);
            v45 = (4 * v38 / 3u + 1) | ((unint64_t)(4 * v38 / 3u + 1) >> 1) | (((4 * v38 / 3u + 1) | ((unint64_t)(4 * v38 / 3u + 1) >> 1)) >> 2);
            v46 = v45 | (v45 >> 4) | ((v45 | (v45 >> 4)) >> 8);
            v47 = (v46 >> 16) | v46;
            v57 = v47 + 1;
            v48 = (char *)operator new(8 * (v47 + 1), (std::align_val_t)8uLL);
            v27 = (uint64_t)v48;
            v49 = 0;
            v55 = (uint64_t)v48;
            v56 = 0;
            do
            {
              *(_QWORD *)&v48[v49] = -4096;
              v49 += 8;
            }
            while (8 * v47 + 8 != v49);
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](v27, 8);
          v27 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
        }
      }
      v29 = this[6];
      v8 = 1;
LABEL_91:
      v50 = (llvm *)*((_QWORD *)v29 + 1);
      if (v29)
        v51 = (unsigned __int8 *)v29 - 24;
      else
        v51 = 0;
      v52 = v51[16];
      if (v52 == 83)
        v32 = (llvm::Instruction *)v51;
      else
        v32 = 0;
      v54 = v32;
      if (v29)
      {
        v29 = v50;
        if (v52 == 83)
          continue;
      }
      v27 = v55;
      goto LABEL_103;
    }
    v59 = v58;
    v41 = v56;
    v42 = v57;
    if (4 * (int)v56 + 4 >= 3 * v57)
    {
      v42 = 2 * v57;
    }
    else if (v57 + ~(_DWORD)v56 - HIDWORD(v56) > v57 >> 3)
    {
LABEL_80:
      LODWORD(v56) = v41 + 1;
      if (*v34 != (const llvm::Instruction *)-4096)
        --HIDWORD(v56);
      *v34 = v32;
      goto LABEL_91;
    }
    sub_1C5F1D930((uint64_t)&v55, v42);
    v27 = v55;
    sub_1C5F1DA5C(v55, v57, &v54, &v59);
    v41 = v56;
    v34 = v59;
    goto LABEL_80;
  }
LABEL_13:
  v8 = 0;
  v9 = this[6];
  v10 = (llvm *)((char *)v9 - 24);
  if (v9)
    v11 = (char *)v9 - 24;
  else
    v11 = 0;
  if (v9 && v11[16] == 83)
  {
    v8 = 0;
    do
    {
      v9 = (llvm *)*((_QWORD *)v9 + 1);
      v12 = (llvm *)((char *)v9 - 24);
      if (v9)
        v13 = (char *)v9 - 24;
      else
        v13 = 0;
      if (v9 && v13[16] == 83)
      {
        v14 = v9;
        while (!llvm::Instruction::isIdenticalToWhenDefined(v12, v10))
        {
          v14 = (llvm *)*((_QWORD *)v14 + 1);
          v15 = (unsigned __int8 *)v14 - 24;
          if (!v14)
            v15 = 0;
          v16 = v15[16];
          if (v16 == 83)
            v12 = (llvm::Instruction *)v15;
          else
            v12 = 0;
          if (!v14 || v16 != 83)
            goto LABEL_35;
        }
        v8 = 1;
        llvm::Value::doRAUW(v12, v10, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v12 + 5) + 40, (uint64_t ***)v12);
        v17 = *((_QWORD *)v12 + 3);
        v18 = (_QWORD *)*((_QWORD *)v12 + 4);
        *v18 = v17;
        *(_QWORD *)(v17 + 8) = v18;
        *((_QWORD *)v12 + 3) = 0;
        *((_QWORD *)v12 + 4) = 0;
        llvm::Value::deleteValue(v12);
        v9 = this[6];
      }
LABEL_35:
      v19 = (unsigned __int8 *)v9 - 24;
      if (!v9)
        v19 = 0;
      v20 = v19[16];
      if (v20 == 83)
        v10 = (const llvm::Instruction *)v19;
      else
        v10 = 0;
    }
    while (v9 && v20 == 83);
  }
  return v8 & 1;
}

uint64_t llvm::getOrEnforceKnownAlignment(uint64_t a1, __int16 a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned __int8 v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24[5];
  char v25;

  if (!a4 || !*(_QWORD *)(a4 + 40))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (a4 = a1, !*(_QWORD *)(a1 + 40)))
      a4 = 0;
  }
  v24[0] = (uint64_t)a3;
  v24[1] = a5;
  v24[2] = a4;
  v24[3] = a6;
  v24[4] = 0;
  v25 = 1;
  sub_1C4F83784(a1, 0, v24, &v20);
  v9 = v21;
  if (v21 > 0x40)
    v10 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v20);
  else
    v10 = __clz(__rbit64(~v20));
  v11 = v9 - 1;
  if (v10 < v9 - 1)
    v11 = v10;
  if (v11 >= 0x20)
    LOBYTE(v11) = 32;
  v12 = __clz(1 << v11) ^ 0x3F;
  if ((a2 & 0xFF00) != 0 && a2 > v12)
  {
    v13 = llvm::Value::stripPointerCasts((llvm::Value *)a1);
    v14 = v13;
    v15 = *((unsigned __int8 *)v13 + 16);
    if (v13 && v15 == 59)
    {
      v16 = *((_WORD *)v13 + 9);
      v17 = __clz(1 << v16) ^ 0x3F;
      if (a2 <= v17 || a3[9] && a2 > a3[8])
        goto LABEL_24;
      *((_WORD *)v13 + 9) = v16 & 0xFFC0 | a2;
    }
    else
    {
      LOBYTE(v17) = 0;
      if (v15 > 3)
        goto LABEL_24;
      if (v15 == 1)
        goto LABEL_24;
      llvm::Value::getPointerAlignment(v13, (const llvm::DataLayout *)a3);
      LOBYTE(v17) = v18;
      if (a2 <= v18 || !llvm::GlobalObject::canIncreaseAlignment(v14))
        goto LABEL_24;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v14 + 8) & 0xFFC0FFFF | ((a2 << 16) + 0x10000);
    }
    LOBYTE(v17) = a2;
LABEL_24:
    if (v12 <= v17)
      v12 = v17;
    else
      v12 = v12;
  }
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  return v12;
}

unsigned __int8 *sub_1C5F17450@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v4 == 2)
    v5 = *(_QWORD *)(v3 - 8);
  else
    v5 = 0;
  result = (unsigned __int8 *)llvm::DILocation::getImpl(**(uint64_t ***)a1, 0, 0, *(_QWORD *)(v3 - 8 * v4), v5, 0, 0, 1);
  *a2 = result;
  if (result)
    return (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a2, result, 2);
  return result;
}

llvm::MDNode *sub_1C5F174D0(llvm::MDNode *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)*((_QWORD *)result + 3);
  v2 = *((_QWORD *)result + 4) - (_QWORD)v1;
  if ((v2 & 0x7FFFFFFE0) != 0 && *v1 == 16 && v1[2] == 22 && v1[3] == 24)
  {
    v3 = *((_QWORD *)result + 2);
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0)
      v4 = (_QWORD *)*v4;
    return llvm::DIExpression::getImpl(v4, v1 + 4, (v2 >> 3) - 4, 0, 1);
  }
  return result;
}

unint64_t sub_1C5F17530(uint64_t a1, uint64_t a2)
{
  const llvm::DataLayout *v3;
  unint64_t v4;
  int v5;
  int v6;
  unint64_t result;
  char v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v12;
  int v13;
  char v14;

  v3 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272);
  v4 = sub_1C53E2F94((uint64_t)v3, a1);
  v6 = v5;
  result = v4 >= llvm::DbgVariableIntrinsic::getFragmentSizeInBits((llvm::DbgVariableIntrinsic *)a2);
  if (!v8)
  {
    if (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) != 58)
    {
      v9 = *(unsigned __int8 **)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
      v10 = *v9;
      if (v10 > 0x22)
        goto LABEL_6;
      if (v10 == 32)
      {
        v9 = (unsigned __int8 *)**((_QWORD **)v9 + 3);
        goto LABEL_6;
      }
      if (((1 << v10) & 0x6FFFFFFF0) == 0)
      {
LABEL_6:
        result = *((_QWORD *)v9 + 16);
        if (!result)
          return result;
        if (*(_BYTE *)(result + 16) == 59)
        {
          llvm::AllocaInst::getAllocationSizeInBits((llvm::AllocaInst *)result, v3, (uint64_t)&v12);
          if (v14)
          {
            if (v6 == 1 || v13 != 1)
              return v4 >= v12;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::LowerDbgDeclare(llvm *this, llvm::Function *a2)
{
  llvm::BasicBlock *v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::DIBuilder *v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  llvm::MDNode *v32;
  llvm::MDNode *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  llvm *v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[8];
  void *v47;
  uint64_t v48;
  _BYTE v49[32];
  _BYTE v50[448];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  llvm::DIBuilder::DIBuilder((uint64_t)v50, *((_QWORD **)this + 5), 0, 0);
  v47 = v49;
  v48 = 0x400000000;
  v4 = (char *)this + 72;
  v5 = (char *)*((_QWORD *)this + 10);
  if (v5 == (char *)this + 72)
    goto LABEL_71;
  do
  {
    v6 = v5 - 24;
    if (!v5)
      v6 = 0;
    v7 = v6 + 40;
    for (i = (_QWORD *)*((_QWORD *)v6 + 6); i != v7; i = (_QWORD *)i[1])
    {
      if (i)
        v9 = (uint64_t)(i - 3);
      else
        v9 = 0;
      v10 = sub_1C5021D50(v9);
      if (i && v10)
      {
        v11 = v48;
        if (v48 >= (unint64_t)HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 8);
          v11 = v48;
        }
        *((_QWORD *)v47 + v11) = v9;
        LODWORD(v48) = v48 + 1;
      }
    }
    v5 = (char *)*((_QWORD *)v5 + 1);
  }
  while (v5 != v4);
  if (!(_DWORD)v48)
  {
LABEL_71:
    v39 = 0;
    goto LABEL_74;
  }
  v12 = 0;
  v13 = (uint64_t *)v47;
  v14 = (uint64_t *)((char *)v47 + 8 * v48);
  do
  {
    while (1)
    {
      v15 = *v13;
      v16 = *(unsigned __int8 **)(*(_QWORD *)(*v13 - 32 * (*(_DWORD *)(*v13 + 20) & 0x7FFFFFF)) + 24);
      v17 = *v16;
      if (v17 <= 0x22)
      {
        if (v17 == 32)
        {
          v16 = (unsigned __int8 *)**((_QWORD **)v16 + 3);
        }
        else if (((1 << v17) & 0x6FFFFFFF0) != 0)
        {
          break;
        }
      }
      v18 = *((_QWORD *)v16 + 16);
      if (!v18)
        break;
      if (*(_BYTE *)(v18 + 16) != 59)
        break;
      if ((llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v18) & 1) != 0)
        break;
      v20 = *(_QWORD *)(v18 + 64);
      if (v20)
      {
        if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x10)
          break;
      }
      for (j = *(_QWORD *)(v18 + 8); j; j = *(_QWORD *)(j + 8))
      {
        if ((v22 = *(_QWORD *)(j + 24), v23 = *(unsigned __int8 *)(v22 + 16), v22) && v23 == 60 || v23 == 61)
        {
          if ((*(_WORD *)(v22 + 18) & 1) != 0)
            goto LABEL_63;
        }
      }
      v43 = v46;
      v45 = 8;
      v24 = 1;
      v46[0] = v18;
      do
      {
        v25 = *((_QWORD *)v43 + --v24);
        v44 = v24;
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          do
          {
            v27 = *(_QWORD *)(v26 + 24);
            v28 = *(unsigned __int8 *)(v27 + 16);
            if (v27 && v28 == 61)
            {
              v29 = *(_DWORD *)(v27 + 20);
              if ((v29 & 0x40000000) != 0)
                v30 = *(_QWORD *)(v27 - 8);
              else
                v30 = v27 - 32 * (v29 & 0x7FFFFFF);
              if (((v26 - v30) & 0x1FFFFFFFE0) == 0x20)
                llvm::ConvertDebugDeclareToDebugValue((llvm *)v15, *(llvm::DbgVariableIntrinsic **)(v26 + 24), (llvm::StoreInst *)v50, v19);
            }
            else if (v27 && v28 == 60)
            {
              llvm::ConvertDebugDeclareToDebugValue((llvm *)v15, *(llvm::DbgVariableIntrinsic **)(v26 + 24), (llvm::LoadInst *)v50, v19);
            }
            else if (v27 && v28 == 84)
            {
              if (!llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v26 + 24)))
              {
                sub_1C5F17450(v15, &v42);
                v31 = *(_QWORD **)(*(_QWORD *)(v15 + 64 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
                v41 = 6;
                v32 = llvm::DIExpression::append(v31, &v41, 1);
                v33 = sub_1C5F174D0(v32);
                llvm::DIBuilder::insertDbgValueIntrinsic((uint64_t)v50, (llvm::ValueAsMetadata *)v18, *(_QWORD *)(*(_QWORD *)(v15 + 32 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24), (uint64_t)v33, (uint64_t)v42, *(_QWORD *)(v27 + 40), v27);
                if (v42)
                  llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
              }
            }
            else if (v27 && v28 == 77 && *(_BYTE *)(*(_QWORD *)v27 + 8) == 15)
            {
              v34 = v44;
              if (v44 >= (unint64_t)v45)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v46, v44 + 1, 8);
                v34 = v44;
              }
              *((_QWORD *)v43 + v34) = v27;
              ++v44;
            }
            v26 = *(_QWORD *)(v26 + 8);
          }
          while (v26);
          v24 = v44;
        }
      }
      while (v24);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v15 + 40) + 40, (uint64_t ***)v15);
      v35 = *(_QWORD *)(v15 + 24);
      v36 = *(_QWORD **)(v15 + 32);
      *v36 = v35;
      *(_QWORD *)(v35 + 8) = v36;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v15);
      if (v43 != v46)
        free(v43);
      ++v13;
      v12 = 1;
      if (v13 == v14)
        goto LABEL_65;
    }
LABEL_63:
    ++v13;
  }
  while (v13 != v14);
  if ((v12 & 1) == 0)
  {
    v39 = 0;
    goto LABEL_74;
  }
LABEL_65:
  v37 = *((_QWORD *)this + 10);
  if ((char *)v37 == v4)
  {
    v39 = 1;
  }
  else
  {
    do
    {
      if (v37)
        v38 = (llvm *)(v37 - 24);
      else
        v38 = 0;
      llvm::RemoveRedundantDbgInstrs(v38, v3);
      v37 = *(_QWORD *)(v37 + 8);
    }
    while ((char *)v37 != v4);
    v39 = 1;
  }
LABEL_74:
  if (v47 != v49)
    free(v47);
  sub_1C50F023C((uint64_t)v50);
  return v39;
}

uint64_t llvm::insertDebugValuesForPHIs(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int32x2_t ****v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t *****v23;
  int32x2_t ****v24;
  int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  int32x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  llvm::Value **v69;
  llvm::Value **v70;
  llvm::Value *v71;
  uint64_t v72;
  _QWORD *v73;
  llvm::Value *v74;
  int v75;
  int v76;
  llvm::Instruction *v77;
  uint64_t v78;
  llvm::DbgVariableIntrinsic *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  int32x2_t ****v86;
  int32x2_t ****j;
  uint64_t v88;
  uint64_t k;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int32x2_t ***v94;
  uint64_t v95;
  uint64_t v96;
  int32x2_t **v97;
  uint64_t v98;
  int32x2_t ***v99;
  uint64_t v100;
  llvm::ValueSymbolTable *v101;
  int32x2_t ****v102;
  uint64_t v103;
  unint64_t *v104;
  int32x2_t ****v105;
  int32x2_t ****v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Instruction *v109;
  uint64_t v110;
  _QWORD v111[2];
  _QWORD *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115[3];
  char v116;

  if (!*((_DWORD *)a2 + 2))
    return result;
  v3 = result;
  v114 = 128;
  v4 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v5 = 0;
  v112 = v4;
  v113 = 0;
  do
  {
    v6 = &v4[v5];
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = -4096;
    *(_QWORD *)v6 = &unk_1E814DA10;
    *((_QWORD *)v6 + 1) = 2;
    v5 += 64;
    *((_QWORD *)v6 + 4) = 0;
  }
  while (v5 != 0x2000);
  LOBYTE(v115[0]) = 0;
  v116 = 0;
  v7 = v3 + 40;
  v8 = *(_QWORD *)(v3 + 48);
  if (v8 == v3 + 40)
    goto LABEL_43;
  do
  {
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    v10 = sub_1C53923FC(v9);
    if (!v10)
      v9 = 0;
    if (v8 && v10)
    {
      llvm::DbgVariableIntrinsic::location_ops(v9, v111);
      v12 = v111[0];
      v11 = v111[1];
      while (v12 != v11)
      {
        v13 = (unint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
        v14 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v14 = *v13;
        v15 = *(_QWORD *)(v14 + 128);
        if (v15 && *(_BYTE *)(v15 + 16) == 83)
        {
          v102 = (int32x2_t ****)v15;
          v103 = 6;
          v104 = 0;
          v105 = (int32x2_t ****)v9;
          if (v9 != -8192 && v9 != -4096 && v9)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v103);
          sub_1C52E21BC((uint64_t)&v112, &v102, (uint64_t)&v108);
          if (v105 != (int32x2_t ****)-8192 && v105 != (int32x2_t ****)-4096 && v105)
          {
            v16 = v103 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v103 & 0xFFFFFFFFFFFFFFF8) = v104;
            if (v104)
            {
              *v104 = *v104 & 7 | v16;
            }
            else
            {
              v17 = v105;
              v18 = ***v105;
              v19 = (unint64_t)v18[303];
              if (v19 <= v16)
              {
                v20 = v18[305].u32[0];
                if (v19 + 16 * v20 > v16)
                {
                  v21 = v20 - 1;
                  LODWORD(v22) = v21 & ((v105 >> 4) ^ (v105 >> 9));
                  v23 = (int32x2_t *****)(v19 + 16 * v22);
                  v24 = *v23;
                  if (v105 == *v23)
                  {
LABEL_33:
                    *v23 = (int32x2_t ****)-8192;
                    v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                    v17 = v105;
                  }
                  else
                  {
                    v25 = 1;
                    while (v24 != (int32x2_t ****)-4096)
                    {
                      v26 = v22 + v25++;
                      v22 = v26 & v21;
                      v24 = *(int32x2_t *****)(v19 + 16 * v22);
                      if (v105 == v24)
                      {
                        v23 = (int32x2_t *****)(v19 + 16 * v22);
                        goto LABEL_33;
                      }
                    }
                  }
                  *((_BYTE *)v17 + 17) &= ~1u;
                }
              }
            }
          }
        }
        if ((v12 & 4) != 0)
          v12 = (unint64_t)(v13 + 1) | 4;
        else
          v12 = (uint64_t)(v13 + 17);
      }
    }
    v8 = *(_QWORD *)(v8 + 8);
  }
  while (v8 != v7);
  if (!(_DWORD)v113)
    goto LABEL_41;
  v102 = 0;
  v103 = 0;
  LODWORD(v104) = 0;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v56 = *((unsigned int *)a2 + 2);
  if (!(_DWORD)v56)
    goto LABEL_119;
  v57 = *a2;
  v58 = *a2 + 8 * v56;
  do
  {
    v59 = *(_DWORD **)v57;
    v60 = *(_QWORD *)(*(_QWORD *)v57 + 40);
    for (i = *(_QWORD *)(v60 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v62 = i - 24;
      if (!i)
        v62 = 0;
      if (*(_BYTE *)(v62 + 16) != 83)
        break;
    }
    v63 = *(unsigned __int8 *)(i - 8) - 38;
    v64 = v63 > 0x38;
    v65 = (1 << v63) & 0x100060000000001;
    if (v64 || v65 == 0)
    {
      v67 = v59[5];
      if ((v67 & 0x40000000) != 0)
      {
        v69 = (llvm::Value **)*((_QWORD *)v59 - 1);
        v68 = v67 & 0x7FFFFFF;
        if (!v68)
          goto LABEL_92;
      }
      else
      {
        v68 = v67 & 0x7FFFFFF;
        v69 = (llvm::Value **)&v59[-8 * v68];
        if (!v68)
          goto LABEL_92;
      }
      v70 = &v69[4 * v68];
      do
      {
        if (v114)
        {
          v71 = *v69;
          v72 = ((*v69 >> 4) ^ (*v69 >> 9)) & (v114 - 1);
          v73 = &v112[8 * v72];
          v74 = (llvm::Value *)v73[3];
          if (*v69 == v74)
          {
LABEL_104:
            if (v73 != &v112[8 * (unint64_t)v114])
            {
              v77 = (llvm::Instruction *)v73[7];
              v78 = sub_1C63AE174((uint64_t)&v102, v60, (uint64_t)v77);
              if (v106 == (int32x2_t ****)v78)
              {
                llvm::Instruction::clone(v77);
                v108 = v60;
                v109 = v77;
                v110 = v85;
                v78 = sub_1C63AE1EC(&v102, (uint64_t)&v108);
              }
              v79 = *(llvm::DbgVariableIntrinsic **)(v78 + 16);
              llvm::DbgVariableIntrinsic::location_ops((uint64_t)v79, &v108);
              v80 = v108;
              while ((llvm::Instruction *)v80 != v109)
              {
                v81 = (unint64_t *)(v80 & 0xFFFFFFFFFFFFFFF8);
                v82 = v80 & 0xFFFFFFFFFFFFFFF8;
                if ((v80 & 4) != 0)
                  v82 = *v81;
                if (*(llvm::Value **)(v82 + 128) == v71)
                {
                  llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v79, v71, (llvm::Value *)v59);
                  break;
                }
                v83 = (unint64_t)(v81 + 1) | 4;
                v84 = v81 + 17;
                if ((v80 & 4) != 0)
                  v80 = v83;
                else
                  v80 = (uint64_t)v84;
              }
            }
          }
          else
          {
            v75 = 1;
            while (v74 != (llvm::Value *)-4096)
            {
              v76 = v72 + v75++;
              v72 = v76 & (v114 - 1);
              v73 = &v112[8 * v72];
              v74 = (llvm::Value *)v73[3];
              if (v71 == v74)
                goto LABEL_104;
            }
          }
        }
        v69 += 4;
      }
      while (v69 != v70);
    }
LABEL_92:
    v57 += 8;
  }
  while (v57 != v58);
  v86 = v105;
  for (j = v106; v86 != j; v86 += 3)
  {
    v88 = (uint64_t)(*v86 + 5);
    for (k = (uint64_t)(*v86)[6]; k != v88; k = *(_QWORD *)(k + 8))
    {
      v90 = k - 24;
      if (!k)
        v90 = 0;
      if (*(_BYTE *)(v90 + 16) != 83)
      {
        v91 = *(unsigned __int8 *)(k - 8) - 38;
        v64 = v91 > 0x38;
        v92 = (1 << v91) & 0x100060000000001;
        if (v64 || v92 == 0)
          v88 = k;
        else
          v88 = *(_QWORD *)(k + 8);
        break;
      }
    }
    v94 = v86[2];
    if (v88)
      v95 = v88 - 24;
    else
      v95 = 0;
    v96 = *(_QWORD *)(v95 + 40);
    v94[5] = (int32x2_t **)v96;
    *(_WORD *)(v96 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v94 + 23) & 0x10) != 0)
    {
      v100 = *(_QWORD *)(v96 + 56);
      if (v100)
      {
        v101 = *(llvm::ValueSymbolTable **)(v100 + 104);
        if (v101)
          llvm::ValueSymbolTable::reinsertValue(v101, (llvm::Value *)v94);
      }
    }
    v98 = *(_QWORD *)(v95 + 24);
    v97 = (int32x2_t **)(v95 + 24);
    v94[3] = (int32x2_t **)v98;
    v94[4] = v97;
    v99 = v94 + 3;
    *(_QWORD *)(v98 + 8) = v99;
    *v97 = (int32x2_t *)v99;
  }
LABEL_119:
  sub_1C6176BF8(&v102);
LABEL_41:
  if (v116)
  {
    sub_1C4E43068((uint64_t)v115);
    MEMORY[0x1CAA32FB4](v115[0], 8);
    v116 = 0;
  }
LABEL_43:
  v27 = v112;
  if (v114)
  {
    v28 = &v112[8 * (unint64_t)v114];
    do
    {
      v29 = v27[3];
      if ((v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v30 = v27[7];
        if (v30)
        {
          if (v30 != -8192 && v30 != -4096)
          {
            v31 = v27[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v27[6];
            v32 = (unint64_t *)v27[6];
            if (v32)
            {
              *v32 = *v32 & 7 | v31;
            }
            else
            {
              v33 = v27[7];
              v34 = ***(int32x2_t ****)v33;
              v35 = (unint64_t)v34[303];
              if (v35 <= v31)
              {
                v36 = v34[305].u32[0];
                if (v35 + 16 * v36 > v31)
                {
                  v37 = v36 - 1;
                  LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
                  v39 = (uint64_t *)(v35 + 16 * v38);
                  v40 = *v39;
                  if (v33 == *v39)
                  {
LABEL_57:
                    *v39 = -8192;
                    v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                    v33 = v27[7];
                  }
                  else
                  {
                    v41 = 1;
                    while (v40 != -4096)
                    {
                      v42 = v38 + v41++;
                      v38 = v42 & v37;
                      v40 = *(_QWORD *)(v35 + 16 * v38);
                      if (v33 == v40)
                      {
                        v39 = (uint64_t *)(v35 + 16 * v38);
                        goto LABEL_57;
                      }
                    }
                  }
                  *(_BYTE *)(v33 + 17) &= ~1u;
                }
              }
            }
            v29 = v27[3];
          }
        }
      }
      if (v29 != -4096 && v29 != -8192 && v29 != 0)
      {
        v44 = v27[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v44 = v27[2];
        v45 = (unint64_t *)v27[2];
        if (v45)
        {
          *v45 = *v45 & 7 | v44;
        }
        else
        {
          v46 = v27[3];
          v47 = ***(int32x2_t ****)v46;
          v48 = (unint64_t)v47[303];
          if (v48 <= v44)
          {
            v49 = v47[305].u32[0];
            if (v48 + 16 * v49 > v44)
            {
              v50 = v49 - 1;
              LODWORD(v51) = v50 & ((v46 >> 4) ^ (v46 >> 9));
              v52 = (uint64_t *)(v48 + 16 * v51);
              v53 = *v52;
              if (v46 == *v52)
              {
LABEL_76:
                *v52 = -8192;
                v47[304] = vadd_s32(v47[304], (int32x2_t)0x1FFFFFFFFLL);
                v46 = v27[3];
              }
              else
              {
                v54 = 1;
                while (v53 != -4096)
                {
                  v55 = v51 + v54++;
                  v51 = v55 & v50;
                  v53 = *(_QWORD *)(v48 + 16 * v51);
                  if (v46 == v53)
                  {
                    v52 = (uint64_t *)(v48 + 16 * v51);
                    goto LABEL_76;
                  }
                }
              }
              *(_BYTE *)(v46 + 17) &= ~1u;
            }
          }
        }
      }
      v27 += 8;
    }
    while (v27 != v28);
    v27 = v112;
  }
  return MEMORY[0x1CAA32FB4](v27, 8);
}

BOOL llvm::replaceDbgDeclare(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DIBuilder *a4, int a5)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MDNode *v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v22;

  v9 = &v22;
  llvm::FindDbgAddrUses((uint64_t)this, &v22);
  v10 = v22;
  if ((v22 & 4) != 0)
  {
    v9 = *(unint64_t **)(v22 & 0xFFFFFFFFFFFFFFF8);
    v11 = &v9[*(unsigned int *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v11 = &v22 + (v22 > 7);
  }
  if (v9 != v11)
  {
    do
    {
      v13 = *v9++;
      v12 = v13;
      v14 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 24);
      v16 = llvm::DIExpression::prepend(*(llvm::DIExpression **)(*(_QWORD *)(v14 + 64) + 24), a4, a5);
      llvm::DIBuilder::insertDeclare((uint64_t)a3, a2, v15, (uint64_t)v16, *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 40), v12);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v12 + 40) + 40, (uint64_t ***)v12);
      v17 = *(_QWORD *)(v13 + 24);
      v18 = *(_QWORD **)(v13 + 32);
      *v18 = v17;
      *(_QWORD *)(v17 + 8) = v18;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v13);
    }
    while (v9 != v11);
    v10 = v22;
  }
  if (v10 >= 8)
  {
    v19 = 1;
    if ((v10 & 4) != 0)
    {
      v20 = v10 & 0xFFFFFFFFFFFFFFF8;
      if (v20)
        v19 = *(_DWORD *)(v20 + 8) != 0;
    }
  }
  else
  {
    v19 = 0;
  }
  sub_1C4DDA878(&v22);
  return v19;
}

void llvm::replaceDbgValueForAlloca(uint64_t ***this, llvm::AllocaInst *a2, llvm::Value *a3, llvm::DIBuilder *a4)
{
  int v4;
  unsigned __int8 *IfExists;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v14;
  llvm::MDNode *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = (int)a4;
  IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists(this);
  if (IfExists)
  {
    v9 = llvm::MetadataAsValue::getIfExists(**this, IfExists);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      while (v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 24);
          v10 = *(_QWORD *)(v10 + 8);
          v12 = sub_1C50A0300(v11);
          if (v11 && v12)
          {
            v14 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
            v15 = *(llvm::MDNode **)(*(_QWORD *)(v14 + 64) + 24);
            if (v15)
            {
              v16 = (_QWORD *)*((_QWORD *)v15 + 3);
              if (((*((_QWORD *)v15 + 4) - (_QWORD)v16) & 0x7FFFFFFF8) != 0 && *v16 == 6)
                break;
            }
          }
          if (!v10)
            return;
        }
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 24);
        if (v4)
          v15 = llvm::DIExpression::prepend(v15, 0, v4);
        llvm::DIBuilder::insertDbgValueIntrinsic((uint64_t)a3, a2, v17, (uint64_t)v15, *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 40), v11);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
        v18 = *(_QWORD *)(v11 + 24);
        v19 = *(_QWORD **)(v11 + 32);
        *v19 = v18;
        *(_QWORD *)(v18 + 8) = v19;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v11);
      }
    }
  }
}

void llvm::salvageDebugInfoForDbgValues(llvm::CastInst *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  llvm::DbgVariableIntrinsic *v5;
  int v6;
  llvm::Type *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::MDNode *appended;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t NumLocationOperands;
  llvm::Type **v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  llvm::Type *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  llvm::UndefValue ***v30;
  llvm::UndefValue *v31;
  int v32;
  llvm::Value **v33;
  int v34;
  llvm::DbgVariableIntrinsic **v35;
  uint64_t v36;
  llvm::DbgVariableIntrinsic *v37;
  llvm::UndefValue *v38;
  char v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  llvm::ValueAsMetadata **v48;
  uint64_t v49;
  _QWORD v50[6];

  v50[4] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v41 = 0;
    v4 = a2;
    v42 = &a2[a3];
    do
    {
      v5 = (llvm::DbgVariableIntrinsic *)*v4;
      v6 = *(_DWORD *)(*(_QWORD *)(*v4 - 32) + 36);
      llvm::DbgVariableIntrinsic::location_ops(*v4, &v43);
      v48 = (llvm::ValueAsMetadata **)v50;
      v49 = 0x400000000;
      v9 = v43;
      v8 = v44;
      while (v9 != v44)
      {
        v10 = (unint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        v11 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v11 = *v10;
        if (*(llvm::CastInst **)(v11 + 128) == a1)
          break;
        v12 = (unint64_t)(v10 + 1) | 4;
        v13 = v10 + 17;
        if ((v9 & 4) != 0)
          v9 = v12;
        else
          v9 = (unint64_t)v13;
      }
      appended = *(llvm::MDNode **)(((_QWORD *)v5 - 4 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF))[8] + 24);
      if (appended)
        v15 = v9 == v44;
      else
        v15 = 1;
      if (v15)
      {
        v16 = 1;
      }
      else
      {
        do
        {
          v45 = v47;
          v46 = 0x1000000000;
          v17 = v43;
          if (v9 == v43)
          {
            v18 = 0;
          }
          else
          {
            v18 = 0;
            do
            {
              ++v18;
              if ((v17 & 4) != 0)
                v17 = (v17 & 0xFFFFFFFFFFFFFFF8) + 12;
              else
                v17 = (v17 & 0xFFFFFFFFFFFFFFF8) + 136;
            }
            while (v9 != v17);
          }
          NumLocationOperands = llvm::DIExpression::getNumLocationOperands(appended);
          v20 = llvm::salvageDebugInfoImpl(a1, NumLocationOperands, (unsigned int *)&v45, (uint64_t)&v48);
          if (v20)
          {
            appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v45, v46, v18, v6 == 58);
            if ((v9 & 4) != 0)
              v9 = (v9 & 0xFFFFFFFFFFFFFFF8) + 12;
            else
              v9 = (v9 & 0xFFFFFFFFFFFFFFF8) + 136;
            v8 = v44;
            while (v9 != v44)
            {
              v21 = (unint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
              v22 = v9 & 0xFFFFFFFFFFFFFFF8;
              if ((v9 & 4) != 0)
                v22 = *v21;
              if (*(llvm::CastInst **)(v22 + 128) == a1)
                break;
              v23 = (unint64_t)(v21 + 1) | 4;
              v24 = v21 + 17;
              if ((v9 & 4) != 0)
                v9 = v23;
              else
                v9 = (unint64_t)v24;
            }
          }
          if (v45 != v47)
            free(v45);
          if (!v20)
          {
            v16 = 1;
            goto LABEL_60;
          }
        }
        while (appended && v9 != v8);
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v5, a1, (llvm::Value *)v20);
        v26 = (*((_QWORD *)appended + 4) - *((_QWORD *)appended + 3)) >> 3;
        if ((_DWORD)v49 || v26 > 0x80)
        {
          if (*(_DWORD *)(*((_QWORD *)v5 - 4) + 36) == 58
            && v26 <= 0x80
            && ((v27 = *(_QWORD *)(*((_QWORD *)v5 - 4 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)) + 24), *(_BYTE *)v27 != 32)
              ? (v28 = 1)
              : (v28 = *(unsigned int *)(v27 + 32)),
                v28 + (unint64_t)v49 <= 0x10))
          {
            llvm::DbgVariableIntrinsic::addVariableLocationOps((uint64_t ***)v5, v48, v49, (unsigned __int8 *)appended);
          }
          else
          {
            v29 = *((_DWORD *)a1 + 5);
            if ((v29 & 0x40000000) != 0)
              v30 = (llvm::UndefValue ***)*((_QWORD *)a1 - 1);
            else
              v30 = (llvm::UndefValue ***)((char *)a1 - 32 * (v29 & 0x7FFFFFF));
            v31 = llvm::UndefValue::get(**v30, v25);
            v32 = *((_DWORD *)a1 + 5);
            if ((v32 & 0x40000000) != 0)
              v33 = (llvm::Value **)*((_QWORD *)a1 - 1);
            else
              v33 = (llvm::Value **)((char *)a1 - 32 * (v32 & 0x7FFFFFF));
            llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v5, *v33, v31);
          }
          v16 = 0;
          v41 = 1;
        }
        else
        {
          sub_1C61D279C((uint64_t)v5, (uint64_t)appended);
          v16 = 0;
          v41 = 1;
        }
      }
LABEL_60:
      if (v48 != v50)
        free(v48);
      if (++v4 == v42)
        v34 = 1;
      else
        v34 = v16;
    }
    while (v34 != 1);
    v35 = (llvm::DbgVariableIntrinsic **)a2;
    if ((v41 & 1) == 0)
    {
      v36 = 8 * a3;
      do
      {
        v37 = *v35++;
        v38 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, v7);
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v37, a1, v38);
        v36 -= 8;
      }
      while (v36);
    }
  }
}

llvm::Type **llvm::salvageDebugInfoImpl(llvm::CastInst *this, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  llvm::DataLayout *v6;
  int v7;
  llvm::Type **v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  llvm::Type *v16;
  int v17;
  llvm::Type *v18;
  unsigned int PrimitiveSizeInBits;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272);
  v7 = *((unsigned __int8 *)this + 16);
  if ((v7 - 79) >= 0xFFFFFFF3)
  {
    v9 = (llvm::Type **)*((_QWORD *)this - 4);
    llvm::CastInst::isNoopCast(this, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272));
    if ((v10 & 1) != 0)
      return v9;
    v11 = *(_QWORD *)this;
    v12 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (v12 == 15)
    {
      llvm::DataLayout::getIntPtrType(v6, *(llvm::Type **)this);
      v11 = v13;
      v12 = *(_DWORD *)(v13 + 8);
    }
    if ((v12 & 0xFE) != 0x12)
    {
      v14 = *((unsigned __int8 *)this + 16);
      if ((v14 - 66) <= 0xA && ((1 << (v14 - 66)) & 0x607) != 0)
      {
        v16 = *v9;
        v17 = *((unsigned __int8 *)*v9 + 8);
        if (v17 == 15)
        {
          llvm::DataLayout::getIntPtrType(v6, v16);
          v16 = v18;
          v14 = *((unsigned __int8 *)this + 16);
          v17 = *((_DWORD *)v18 + 2);
        }
        if ((v17 & 0xFE) == 0x12)
          v16 = (llvm::Type *)**((_QWORD **)v16 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v16);
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
          v11 = **(_QWORD **)(v11 + 16);
        v20 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        if (v14 == 68)
          v21 = 5;
        else
          v21 = 7;
        v22 = v20;
        v23 = a3[2];
        if (v23 + 6 > (unint64_t)a3[3])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v23 + 6, 8);
          v23 = a3[2];
        }
        v24 = (_QWORD *)(*(_QWORD *)a3 + 8 * v23);
        *v24 = 4097;
        v24[1] = PrimitiveSizeInBits;
        v24[2] = v21;
        v24[3] = 4097;
        v24[4] = v22;
        v24[5] = v21;
        a3[2] += 6;
        return v9;
      }
    }
    return 0;
  }
  if (v7 == 62)
    return (llvm::Type **)getSalvageOpsForGEP((uint64_t)this, (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272), a2, a3, a4);
  if ((v7 - 59) < 0xFFFFFFEE)
  {
    if (v7 == 84)
    {
      v25 = *((_QWORD *)this - 4);
      if (v25)
      {
        if (!*(_BYTE *)(v25 + 16)
          && *(_QWORD *)(v25 + 24) == *((_QWORD *)this + 9)
          && (*(_BYTE *)(v25 + 33) & 0x20) != 0
          && *(_DWORD *)(v25 + 36) == 246)
        {
          return (llvm::Type **)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        }
      }
    }
    return 0;
  }
  return (llvm::Type **)getSalvageOpsForBinOp((uint64_t)this, a2, (uint64_t)a3, a4);
}

uint64_t getSalvageOpsForGEP(uint64_t a1, llvm::DataLayout *this, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 __src;
  uint64_t v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v10 = **(_QWORD **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v11 = *(_DWORD *)(v10 + 8);
  if ((v11 & 0xFE) == 0x12)
    v11 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
  v12 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(this, v11 >> 8) + 12);
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v30 = v12;
  if (v12 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, 0, 0);
  else
    v29 = 0;
  if (llvm::GEPOperator::collectOffset(a1, this, v12, (uint64_t)v31, (unsigned int *)&v29))
  {
    v13 = v33;
    v14 = v34;
    v28 = a1;
    if (!a3 && v33 != v34)
    {
      v15 = *(_QWORD *)a4;
      __src = xmmword_1C8674D40;
      sub_1C622F29C(a4, v15, (uint64_t *)&__src, v37);
      a3 = 1;
      v13 = v33;
      v14 = v34;
    }
    if (v13 != v14)
    {
      v18 = v13 + 8;
      do
      {
        v20 = v18 - 8;
        v19 = *(_QWORD *)(v18 - 8);
        v21 = *(unsigned int *)(v18 + 8);
        if (v21 > 0x40)
        {
          v22 = (_QWORD *)operator new[]();
          memcpy(v22, *(const void **)v18, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v22 = *(_QWORD **)v18;
        }
        v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v23 + 1, 8);
          v23 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v23) = v19;
        ++*(_DWORD *)(a5 + 8);
        v24 = v22;
        if (v21 >= 0x41)
          v24 = (_QWORD *)*v22;
        v25 = a4[2];
        if (v25 + 6 > (unint64_t)a4[3])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, (uint64_t)(a4 + 4), v25 + 6, 8);
          v25 = a4[2];
        }
        v26 = *(_QWORD *)a4 + 8 * v25;
        *(_QWORD *)v26 = 4101;
        *(_QWORD *)(v26 + 8) = a3;
        *(_QWORD *)(v26 + 16) = 16;
        *(_QWORD *)(v26 + 24) = v24;
        *(_OWORD *)(v26 + 32) = xmmword_1C8674D50;
        a4[2] += 6;
        if (v21 >= 0x41 && v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
        v18 += 24;
        ++a3;
      }
      while (v20 + 24 != v14);
    }
    if (v30 > 0x40)
      v16 = *v29;
    else
      v16 = (uint64_t)((_QWORD)v29 << -(uint64_t)v30) >> -(uint64_t)v30;
    llvm::DIExpression::appendOffset((uint64_t)a4, v16);
    v17 = *(_QWORD *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
  }
  else
  {
    v17 = 0;
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  sub_1C6311868((uint64_t)v31);
  return v17;
}

uint64_t getSalvageOpsForBinOp(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = result;
  v6 = *(_QWORD *)(result - 32);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 16;
  else
    v7 = 0;
  if (!v7)
  {
    v15 = a2;
    v16 = *(unsigned __int8 *)(result + 16);
    v17 = *(unsigned int *)(a3 + 8);
    if (!a2)
    {
      if (v17 + 2 > (unint64_t)*(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 2, 8);
        v17 = *(unsigned int *)(a3 + 8);
      }
      v17 = *(_QWORD *)a3 + 8 * v17;
      *(_QWORD *)v17 = 4101;
      *(_QWORD *)(v17 + 8) = 0;
      LODWORD(v17) = *(_DWORD *)(a3 + 8) + 2;
      *(_DWORD *)(a3 + 8) = v17;
      v15 = 1;
    }
    v17 = v17;
    v18 = v17 + 2;
    if (v18 > *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18, 8);
      v17 = *(unsigned int *)(a3 + 8);
    }
    v10 = v16 - 28;
    v19 = (_QWORD *)(*(_QWORD *)a3 + 8 * v17);
    *v19 = 4101;
    v19[1] = v15;
    *(_DWORD *)(a3 + 8) += 2;
    v20 = *(_QWORD *)(v5 - 32);
    v21 = *(unsigned int *)(a4 + 8);
    if (v21 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v21) = v20;
    ++*(_DWORD *)(a4 + 8);
LABEL_23:
    result = getDwarfOpForBinOp(v10);
    if (result)
    {
      v22 = result;
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
        LODWORD(v23) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      return *(_QWORD *)(v5 - 64);
    }
    return result;
  }
  v8 = *(_DWORD *)(v6 + 32);
  if (v8 > 0x40)
    return 0;
  v9 = *(unsigned __int8 *)(result + 16);
  v10 = v9 - 28;
  v11 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v8) >> -(char)v8;
  if ((v9 | 2) == 0x2B)
  {
    if (v9 == 41)
      v24 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v8) >> -(char)v8;
    else
      v24 = -v11;
    llvm::DIExpression::appendOffset(a3, v24);
    result = *(_QWORD *)(v5 - 64);
  }
  else
  {
    v12 = *(unsigned int *)(a3 + 8);
    if (v12 + 2 > (unint64_t)*(unsigned int *)(a3 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 2, 8);
      v12 = *(unsigned int *)(a3 + 8);
    }
    v13 = (_QWORD *)(*(_QWORD *)a3 + 8 * v12);
    *v13 = 16;
    v13[1] = v11;
    *(_DWORD *)(a3 + 8) += 2;
  }
  if ((v9 | 2) != 0x2B)
    goto LABEL_23;
  return result;
}

uint64_t llvm::replaceAllDbgUsesWith(llvm *this, llvm::Instruction *a2, llvm::Value *a3, llvm::Instruction *a4, llvm::DominatorTree *a5)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const char *v19;
  unint64_t PrimitiveSizeInBits;
  const char *v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t, llvm::DbgVariableIntrinsic *);
  BOOL v25;
  BOOL v26;
  int v27;
  _QWORD v28[2];
  unint64_t v29;
  unint64_t v30;

  if ((*((_BYTE *)this + 23) & 8) == 0)
    return 0;
  v9 = *(_DWORD **)this;
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)this == *(_QWORD *)a2)
    goto LABEL_21;
  if ((v9[2] & 0xFD) == 0xD && (v10[2] & 0xFD) == 0xD)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272;
    sub_1C4768AD0(v11, (uint64_t)v9);
    v13 = v12;
    v27 = v14;
    sub_1C4768AD0(v11, (uint64_t)v10);
    v16 = v15;
    v18 = v17;
    if (!sub_1C4DEB33C(v11, (uint64_t)v9))
    {
      v25 = sub_1C4DEB33C(v11, (uint64_t)v10);
      v26 = v13 == v16 && v27 == v18;
      if (v26 && !v25)
      {
LABEL_21:
        v23 = (uint64_t (*)(uint64_t, llvm::DbgVariableIntrinsic *))sub_1C5F1EA74;
        return sub_1C5F19134(this, (unsigned __int8 *)a2, a3, a4, v23, (uint64_t)v28);
      }
    }
  }
  if (*((_BYTE *)v9 + 8) != 13 || *((_BYTE *)v10 + 8) != 13)
    return 0;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9);
  if ((_DWORD)v19 == 1)
  v30 = PrimitiveSizeInBits;
  v22 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
  if ((_DWORD)v21 == 1)
  v29 = v22;
  if (PrimitiveSizeInBits < v22)
    goto LABEL_21;
  v28[0] = &v29;
  v28[1] = &v30;
  v23 = (uint64_t (*)(uint64_t, llvm::DbgVariableIntrinsic *))sub_1C5F1EA90;
  return sub_1C5F19134(this, (unsigned __int8 *)a2, a3, a4, v23, (uint64_t)v28);
}

uint64_t sub_1C5F19134(llvm::Value *a1, unsigned __int8 *a2, llvm::Instruction *a3, llvm::DominatorTree *a4, uint64_t (*a5)(uint64_t, llvm::DbgVariableIntrinsic *), uint64_t a6)
{
  uint64_t NextNonDebugInstruction;
  llvm::Instruction *v13;
  char v14;
  llvm::Instruction **v15;
  uint64_t v16;
  llvm::Instruction *v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  llvm::DbgVariableIntrinsic *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  llvm::Value *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v34 = &v36;
  v35 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v34, (uint64_t)a1);
  if (!(_DWORD)v35)
  {
    v18 = 0;
    goto LABEL_30;
  }
  v29 = (char *)&v33;
  v30 = (char *)&v33;
  v31 = 1;
  v32 = 0;
  if (a2[16] <= 0x1Bu)
  {
    v28 = (llvm::Value *)a2;
    v18 = 0;
    v19 = (uint64_t *)v34;
    v20 = (uint64_t *)((char *)v34 + 8 * v35);
    do
    {
LABEL_15:
      v21 = (llvm::DbgVariableIntrinsic *)*v19;
      v22 = (char *)sub_1C477672C((uint64_t)&v29, *v19);
      if (v30 == v29)
        v23 = (uint64_t *)((char *)&v31 + 4);
      else
        v23 = &v31;
      if (v22 == &v30[8 * *(unsigned int *)v23])
      {
        v24 = a5(a6, v21);
        if (v25)
        {
          v26 = v24;
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v21, a1, v28);
          sub_1C61D279C((uint64_t)v21, v26);
          v18 = 1;
        }
      }
      ++v19;
    }
    while (v19 != v20);
    goto LABEL_24;
  }
  NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(a1, 0);
  if ((_DWORD)v35)
  {
    v13 = (llvm::Instruction *)NextNonDebugInstruction;
    v28 = (llvm::Value *)a2;
    v14 = 0;
    v15 = (llvm::Instruction **)v34;
    v16 = 8 * v35;
    do
    {
      v17 = *v15;
      if (v13 == a3 && (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(*v15, 0) == a3)
      {
        llvm::Instruction::moveAfter(v17, a3);
        v14 = 1;
      }
      else if (!llvm::DominatorTree::dominates(a4, a3, v17))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v29, (uint64_t)v17);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
    v18 = v14;
    if (!(_DWORD)v35)
      goto LABEL_24;
    v19 = (uint64_t *)v34;
    v20 = (uint64_t *)((char *)v34 + 8 * v35);
    goto LABEL_15;
  }
  v18 = 0;
LABEL_24:
  if (HIDWORD(v31) != v32)
  {
    v37 = v39;
    v38 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v37, (uint64_t)a1);
    llvm::salvageDebugInfoForDbgValues(a1, (uint64_t *)v37, v38);
    if (v37 != v39)
      free(v37);
    v18 = 1;
  }
  if (v30 != v29)
    free(v30);
LABEL_30:
  if (v34 != &v36)
    free(v34);
  return v18 & 1;
}

unint64_t llvm::removeAllNonTerminatorAndEHPadInstructions(llvm *this, llvm::BasicBlock *a2)
{
  llvm *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  llvm::UndefValue *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  _BOOL4 v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = (llvm *)*((_QWORD *)this + 5);
  if (v3 == (llvm *)((char *)this + 40))
  {
    v5 = 0;
  }
  else
  {
    if (v3)
      v4 = (char *)v3 - 24;
    else
      v4 = 0;
    if (v4[16] - 29 >= 0xB)
      v5 = 0;
    else
      v5 = v4;
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    v7 = (char *)(v6 - 24);
  else
    v7 = 0;
  if (v5 == v7)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *((_QWORD *)v5 + 3);
      v11 = (char *)(v10 - 24);
      if (v10)
        v12 = v10 - 24;
      else
        v12 = 0;
      if (*(_QWORD *)(v12 + 8) && *(_BYTE *)(*(_QWORD *)v12 + 8) != 12)
      {
        v13 = llvm::UndefValue::get(*(llvm::UndefValue **)v12, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v13, (llvm::Value *)1);
      }
      v14 = *(unsigned __int8 *)(v12 + 16) - 38;
      v15 = v14 > 0x38;
      v16 = (1 << v14) & 0x100060000000001;
      v17 = v15 || v16 == 0;
      if (!v17 || *(_BYTE *)(*(_QWORD *)v12 + 8) == 12)
      {
        v5 = v11;
      }
      else
      {
        v20 = sub_1C4D99D08(v12);
        v9 = (v9 + v20);
        v8 += !v20;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v12 + 40) + 40, (uint64_t ***)v12);
        v21 = *(_QWORD *)(v12 + 24);
        v22 = *(_QWORD **)(v12 + 32);
        *v22 = v21;
        *(_QWORD *)(v21 + 8) = v22;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v12);
      }
      v18 = *((_QWORD *)this + 6);
      if (v18)
        v19 = (char *)(v18 - 24);
      else
        v19 = 0;
    }
    while (v5 != v19);
  }
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t llvm::changeToUnreachable(llvm *this, llvm::Instruction *a2, uint64_t a3, int32x2_t **a4, llvm::MemorySSAUpdater *a5)
{
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  llvm *v10;
  _QWORD *v11;
  int v12;
  unsigned int i;
  llvm::BasicBlock *Successor;
  char *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  llvm *v21;
  uint64_t v22;
  char *v23;
  llvm::UndefValue *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[64];
  void *v44;
  uint64_t v45;
  _QWORD v46[17];

  v6 = (int)a2;
  v46[16] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  if (a4)
    llvm::MemorySSAUpdater::changeToUnreachable(a4, this);
  v39 = v43;
  v40 = v43;
  v41 = 8;
  v42 = 0;
  v10 = (llvm *)(v8 + 5);
  v9 = (_QWORD *)v8[5];
  if (v9 != v8 + 5)
  {
    if (v9)
      v11 = v9 - 3;
    else
      v11 = 0;
    if (*((_BYTE *)v11 + 16) != 30)
    {
      v12 = 2;
      switch(*((_BYTE *)v11 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_61;
        case 0x1F:
          v12 = (*((_DWORD *)v11 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_58;
        case 0x20:
        case 0x26:
LABEL_61:
          v12 = (*((_DWORD *)v11 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_58;
        case 0x21:
          goto LABEL_11;
        case 0x24:
          v12 = *((_WORD *)v11 + 9) & 1;
          goto LABEL_58;
        case 0x25:
          v12 = 1;
          goto LABEL_11;
        case 0x27:
          v12 = *((_DWORD *)v11 + 20) + 1;
LABEL_58:
          if (!v12)
            goto LABEL_15;
          goto LABEL_11;
        default:
          goto LABEL_15;
      }
    }
    if ((*((_DWORD *)v11 + 5) & 0x7FFFFFF) == 3)
      v12 = 2;
    else
      v12 = 1;
LABEL_11:
    for (i = 0; i != v12; ++i)
    {
      Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v11, i);
      llvm::BasicBlock::removePredecessor(Successor, (llvm::BasicBlock *)v8, v6);
      if (a3)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, (uint64_t)Successor);
    }
  }
LABEL_15:
  v15 = (char *)operator new(0x40uLL);
  *((_DWORD *)v15 + 5) &= 0x38000000u;
  llvm::UnreachableInst::UnreachableInst((llvm::UnreachableInst *)v15, **(llvm::LLVMContext ***)this, this);
  v16 = (unsigned __int8 *)*((_QWORD *)this + 6);
  v38 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v38, v16, 2);
  v19 = (unsigned __int8 *)*((_QWORD *)v15 + 6);
  v18 = (unsigned __int8 **)(v15 + 48);
  v17 = v19;
  if (v19)
    llvm::MetadataTracking::untrack((uint64_t)v18, v17);
  v20 = v38;
  *v18 = v38;
  if (v20)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v38, v20, (uint64_t)v18);
    v38 = 0;
  }
  v21 = (llvm *)((char *)this + 24);
  if ((llvm *)((char *)this + 24) == v10)
  {
    v22 = 0;
    if (!a3)
      goto LABEL_53;
  }
  else
  {
    LODWORD(v22) = 0;
    do
    {
      if (v21)
        v23 = (char *)v21 - 24;
      else
        v23 = 0;
      if (*((_QWORD *)v23 + 1))
      {
        v24 = llvm::UndefValue::get(*(llvm::UndefValue **)v23, (llvm::Type *)v20);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, v24, (llvm::Value *)1);
      }
      v21 = (llvm *)*((_QWORD *)v21 + 1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v8 + 5), (uint64_t ***)v23);
      v25 = *((_QWORD *)v23 + 3);
      v26 = (_QWORD *)*((_QWORD *)v23 + 4);
      *v26 = v25;
      *(_QWORD *)(v25 + 8) = v26;
      *((_QWORD *)v23 + 3) = 0;
      *((_QWORD *)v23 + 4) = 0;
      llvm::Value::deleteValue((llvm::Value *)v23);
      v22 = (v22 + 1);
    }
    while (v21 != v10);
    if (!a3)
      goto LABEL_53;
  }
  v44 = v46;
  v45 = 0x800000000;
  LODWORD(v27) = HIDWORD(v41);
  v28 = (HIDWORD(v41) - v42);
  if (v28 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v28, 16);
    LODWORD(v27) = HIDWORD(v41);
  }
  if (v40 == v39)
    v27 = v27;
  else
    v27 = v41;
  if ((_DWORD)v27)
  {
    v29 = 8 * v27;
    v30 = (unint64_t *)v40;
    while (*v30 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v30;
      v29 -= 8;
      if (!v29)
      {
        v31 = v45;
        goto LABEL_51;
      }
    }
  }
  else
  {
    v30 = (unint64_t *)v40;
  }
  v32 = &v40[8 * v27];
  v31 = v45;
  if (v30 != (unint64_t *)v32)
  {
    v33 = *v30;
LABEL_45:
    if (v31 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v31 + 1, 16);
      v31 = v45;
    }
    v34 = (char *)v44 + 16 * v31;
    *v34 = v8;
    v34[1] = v33 | 4;
    v31 = v45 + 1;
    LODWORD(v45) = v45 + 1;
    v35 = v30 + 1;
    while (v35 != (unint64_t *)v32)
    {
      v36 = *v35++;
      v33 = v36;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v30 = v35 - 1;
        goto LABEL_45;
      }
    }
  }
LABEL_51:
  llvm::DomTreeUpdater::applyUpdates(a3, (unint64_t *)v44, v31);
  if (v44 != v46)
    free(v44);
LABEL_53:
  if (v40 != v39)
    free(v40);
  return v22;
}

void llvm::removeUnwindEdge(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  llvm *v5;
  uint64_t ***v6;
  int v7;
  BOOL v8;
  llvm::BasicBlock **v9;
  unsigned int v10;
  llvm::BasicBlock **v11;
  uint64_t ***v12;
  int v13;
  int v14;
  llvm::Type ***v15;
  llvm::Type **v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  llvm::Value *v27;
  char *v28;
  llvm::CatchSwitchInst *v29;
  char *v30;
  uint64_t ***v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t ***v38;
  int v39;
  uint64_t v40;
  llvm::BasicBlock **v41;
  uint64_t v42;
  llvm::BasicBlock *v43;
  int v44;
  llvm::BasicBlock *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t **v49;
  uint64_t **v50;
  unsigned __int8 *v51;
  llvm *v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = (llvm *)*((_QWORD *)this + 5);
  if (v5 == (llvm *)((char *)this + 40))
  {
    v6 = 0;
    v7 = MEMORY[0x10];
    goto LABEL_17;
  }
  v6 = (uint64_t ***)((char *)v5 - 24);
  v8 = v5 == 0;
  if (v5)
    v9 = (llvm::BasicBlock **)((char *)v5 - 24);
  else
    v9 = 0;
  v10 = *((unsigned __int8 *)v9 + 16) - 40;
  if (v10 >= 0xFFFFFFF5)
    v11 = v9;
  else
    v11 = 0;
  v7 = *((unsigned __int8 *)v11 + 16);
  if (v10 < 0xFFFFFFF5)
    v8 = 1;
  if (v7 == 33 && !v8)
  {
    llvm::changeToCall(v11, a2, a3);
    return;
  }
  if (v7 != 36)
    v8 = 1;
  if (v8)
  {
LABEL_17:
    if (v7 == 38)
      v12 = v6;
    else
      v12 = 0;
    v13 = *((_DWORD *)v12 + 5);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = (llvm::Type ***)*(v12 - 1);
      v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (llvm::Type ***)&v12[-4 * (v13 & 0x7FFFFFF)];
    }
    v16 = *v15;
    if ((*((_WORD *)v12 + 9) & 1) != 0)
      v17 = -2;
    else
      v17 = -1;
    v18 = v17 + v14;
    if ((v13 & 0x10000000) == 0)
    {
      v33 = 0;
      v32 = &byte_1C871356D;
LABEL_37:
      v54 = 261;
      v52 = (llvm *)v32;
      v53 = v33;
      v35 = (char *)operator new(0x48uLL);
      v29 = (llvm::CatchSwitchInst *)(v35 + 8);
      *((_DWORD *)v35 + 7) = *((_DWORD *)v35 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v35 = 0;
      llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v35 + 8), v16, 0, v18, (const llvm::Twine *)&v52, (llvm::Instruction *)v12);
      v36 = *((_DWORD *)v12 + 5);
      if ((v36 & 0x40000000) != 0)
      {
        v38 = (uint64_t ***)*(v12 - 1);
        v37 = v36 & 0x7FFFFFF;
      }
      else
      {
        v37 = v36 & 0x7FFFFFF;
        v38 = &v12[-4 * v37];
      }
      v39 = *((_WORD *)v12 + 9) & 1;
      v40 = 1;
      if ((*((_WORD *)v12 + 9) & 1) != 0)
        v40 = 2;
      if (v40 != v37)
      {
        v41 = (llvm::BasicBlock **)&v38[4 * v40];
        v42 = 32 * v37 - 32 * v40;
        do
        {
          v43 = *v41;
          v41 += 4;
          llvm::CatchSwitchInst::addHandler(v29, v43);
          v42 -= 32;
        }
        while (v42);
        v39 = *((_WORD *)v12 + 9) & 1;
      }
      if (v39)
      {
        v44 = *((_DWORD *)v12 + 5);
        if ((v44 & 0x40000000) != 0)
          v30 = (char *)*(v12 - 1);
        else
          v30 = (char *)&v12[-4 * (v44 & 0x7FFFFFF)];
        goto LABEL_51;
      }
      goto LABEL_49;
    }
    v19 = ***v12;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == v12)
      {
LABEL_36:
        v31 = v23[1];
        v34 = (uint64_t)*v31;
        v32 = (char *)(v31 + 2);
        v33 = v34;
        goto LABEL_37;
      }
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v12)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_36;
        }
      }
    }
    v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_36;
  }
  v27 = v11[-4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
  v28 = (char *)operator new(0x60uLL);
  *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
  v29 = (llvm::CatchSwitchInst *)(v28 + 32);
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = v28 + 32;
  llvm::CleanupReturnInst::CleanupReturnInst((llvm::CleanupReturnInst *)(v28 + 32), v27, 0, 1u, (llvm::Instruction *)v11);
  if ((*((_WORD *)v11 + 9) & 1) != 0)
  {
    v30 = (char *)&v11[-4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
LABEL_51:
    v45 = (llvm::BasicBlock *)*((_QWORD *)v30 + 4);
    goto LABEL_52;
  }
LABEL_49:
  v45 = 0;
LABEL_52:
  llvm::Value::takeName(v29, (llvm::Value *)v6);
  v46 = (unsigned __int8 *)v6[6];
  v51 = v46;
  if (v46)
    llvm::MetadataTracking::track((uint64_t)&v51, v46, 2);
  v47 = (unsigned __int8 *)*((_QWORD *)v29 + 6);
  if (v47)
    llvm::MetadataTracking::untrack((uint64_t)v29 + 48, v47);
  v48 = v51;
  *((_QWORD *)v29 + 6) = v51;
  if (v48)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v51, v48, (uint64_t)v29 + 48);
    v51 = 0;
  }
  llvm::BasicBlock::removePredecessor(v45, this, 0);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v29, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v6[5] + 5), v6);
  v49 = v6[3];
  v50 = v6[4];
  *v50 = (uint64_t *)v49;
  v49[1] = (uint64_t *)v50;
  v6[3] = 0;
  v6[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v6);
  if (a2)
  {
    v52 = this;
    v53 = (unint64_t)v45 | 4;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)&v52, 1);
  }
}

uint64_t llvm::removeUnreachableBlocks(llvm *this, llvm::Function *a2, llvm::DomTreeUpdater *a3, llvm::MemorySSAUpdater *a4)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Function *v8;
  llvm::MemorySSAUpdater *v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  llvm *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  BOOL v33;
  unsigned __int8 *v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t *v47;
  int v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t j;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t k;
  llvm::Instruction *v77;
  uint64_t v78;
  _QWORD *v79;
  const llvm::Instruction **v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  llvm::Instruction **v90;
  uint64_t m;
  llvm::Instruction *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int *v96;
  uint64_t *v97;
  unsigned int v98;
  int *v99;
  int *v100;
  int *v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t *v113;
  unint64_t *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  char v134;
  _QWORD *v135;
  void **v136;
  int v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t Successor;
  uint64_t v142;
  llvm::DomTreeUpdater *v143;
  _QWORD *v144;
  int v145;
  uint64_t v146;
  llvm::BasicBlock *v147;
  char *v148;
  char *v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  llvm::ValueSymbolTable *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  void *v174;
  char *v175;
  uint64_t *v176;
  unsigned int v177;
  llvm::Type *v178;
  llvm::BasicBlock **v179;
  void *v180;
  unsigned int v181;
  void **v182;
  uint64_t v183;
  unsigned int v185;
  int *v187;
  uint64_t *v188;
  llvm::Instruction **v189;
  unint64_t v190;
  int64x2_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  int v196;
  _BYTE v197[128];
  llvm::Instruction *v198[2];
  uint64_t v199;
  const llvm::Instruction **v200;
  const llvm::Instruction **v201;
  void *v202;
  _OWORD v203[4];
  void *v204;
  uint64_t v205;
  _QWORD v206[2];
  __int16 v207;
  void *v208;
  _OWORD v209[4];
  void *v210;
  uint64_t v211;
  _BYTE v212[952];
  llvm::Instruction *v213[6];

  v5 = &v202;
  v213[4] = *(llvm::Instruction **)MEMORY[0x1E0C80C00];
  v193 = v197;
  v194 = v197;
  v195 = 16;
  v196 = 0;
  v208 = (char *)v209 + 8;
  v6 = *((_QWORD *)this + 10);
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  *((_QWORD *)&v209[0] + 1) = v7;
  *(_QWORD *)&v209[0] = 0x8000000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v193, v7);
  v10 = 0;
  v11 = v209[0];
  v12 = 1;
  v192 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v13 = (_QWORD *)*((_QWORD *)v208 + v11 - 1);
    LODWORD(v209[0]) = v11 - 1;
    v14 = v13 + 5;
    for (i = (_QWORD *)v13[6]; i != v14; i = (_QWORD *)i[1])
    {
      v16 = (llvm *)(i - 3);
      if (i)
        v17 = (uint64_t)(i - 3);
      else
        v17 = 0;
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (v18 == 84)
        v19 = v17;
      else
        v19 = 0;
      if (i && v18 == 84)
      {
        v20 = *(_QWORD *)(v19 - 32);
        v21 = *(unsigned __int8 *)(v20 + 16);
        if (v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          v31 = *(_DWORD *)(v20 + 36);
          if (v31 == 125)
          {
            v34 = *(unsigned __int8 **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
            if (v34)
              v35 = v34[16] > 0x14u;
            else
              v35 = 1;
            if (!v35
              && ((llvm::Constant::isNullValue(*(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))) & 1) != 0
               || (sub_1C4E71060((uint64_t)&v204, (llvm::Constant *)v34) & 1) != 0))
            {
              v36 = *(_QWORD *)(v19 + 32);
              v16 = (llvm *)(v36 - 24);
              v37 = !v36 || v36 == *(_QWORD *)(v19 + 40) + 40;
              v38 = v37 ? 0 : v36 - 24;
              if (*(_BYTE *)(v38 + 16) != 35)
                goto LABEL_77;
            }
          }
          else if (v31 == 7)
          {
            v32 = *(unsigned __int8 **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
            v33 = !v32 || v32[16] > 0x14u;
            if (!v33
              && ((llvm::Constant::isNullValue(*(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))) & 1) != 0
               || (sub_1C4E71060((uint64_t)&v204, (llvm::Constant *)v32) & 1) != 0)
              || (sub_1C4E7B480((uint64_t)v32) & 1) != 0)
            {
              goto LABEL_77;
            }
          }
        }
        else if (v21 == 19)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 56);
          if (!v23)
            goto LABEL_77;
          v24 = *(_QWORD *)(v23 + 112);
          if (!v24 || (*(_BYTE *)(v24 + 17) & 1) == 0)
            goto LABEL_77;
        }
        else if ((v21 - 11) < 2)
        {
          goto LABEL_77;
        }
        v39 = *(_QWORD *)(v19 + 64);
        if ((v39 && (*(_BYTE *)(v39 + 16) & 1) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v19, 32))
          && (*(_WORD *)(v19 + 18) & 3) != 2)
        {
          v40 = *(_QWORD *)(v19 + 32);
          v16 = (llvm *)(v40 - 24);
          if (v40)
            v41 = v40 == *(_QWORD *)(v19 + 40) + 40;
          else
            v41 = 1;
          if (v41)
            v42 = 0;
          else
            v42 = v40 - 24;
          if (*(_BYTE *)(v42 + 16) != 35)
          {
LABEL_77:
            llvm::changeToUnreachable(v16, 0, (uint64_t)a2, 0, v9);
            v10 = 1;
            break;
          }
          break;
        }
      }
      else
      {
        if (v18 != 61)
          v17 = 0;
        if (i && v18 == 61 && (*(_WORD *)(v17 + 18) & 1) == 0)
        {
          v25 = *(unsigned __int8 **)(v17 - 32);
          v26 = v25[16];
          if ((v26 - 11) < 2)
            goto LABEL_77;
          if (v26 == 19)
          {
            v27 = *(_QWORD *)v25;
            v28 = *(_DWORD *)(*(_QWORD *)v25 + 8);
            if ((v28 & 0xFE) == 0x12)
              v28 = *(_DWORD *)(**(_QWORD **)(v27 + 16) + 8);
            v29 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 56);
            if (v29 && (v30 = *(_QWORD *)(v29 + 112)) != 0)
            {
              if ((*(_BYTE *)(v30 + 17) & 1) == 0 && v28 <= 0xFF)
                goto LABEL_77;
            }
            else if (v28 < 0x100)
            {
              goto LABEL_77;
            }
          }
        }
      }
    }
    v43 = (_QWORD *)*v14;
    if ((_QWORD *)*v14 == v14)
      goto LABEL_223;
    v44 = v43 == 0;
    if (v43)
      v45 = v43 - 3;
    else
      v45 = 0;
    v46 = *((unsigned __int8 *)v45 + 16) - 40;
    if (v46 >= 0xFFFFFFF5)
      v47 = v45;
    else
      v47 = 0;
    v48 = *((unsigned __int8 *)v47 + 16);
    v49 = v46 < 0xFFFFFFF5 || v44;
    if (v48 == 33 && (v49 & 1) == 0)
    {
      v50 = *(unsigned __int8 *)(*(v47 - 4) + 16);
      if (v50 == 19)
      {
        v51 = v13[7];
        if (!v51)
          goto LABEL_94;
        v52 = *(_QWORD *)(v51 + 112);
        if (!v52 || (*(_BYTE *)(v52 + 17) & 1) == 0)
          goto LABEL_94;
      }
      else if ((v50 - 11) <= 1)
      {
LABEL_94:
        llvm::changeToUnreachable((llvm *)v47, 0, (uint64_t)a2, 0, v9);
LABEL_95:
        v10 = 1;
        goto LABEL_223;
      }
      v60 = (_QWORD *)v47[8];
      if ((!v60 || (v60[2] & 1) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v47, 32)
        || ((v61 = *(v47 - 12), (v62 = *(_QWORD *)(v61 + 48)) != 0) ? (v63 = v62 - 24) : (v63 = 0),
            *(_BYTE *)(v63 + 16) == 35))
      {
LABEL_220:
        v133 = (_QWORD *)v47[8];
        if ((!v133 || (v133[2] & 0x20) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v47, 37)
          || !llvm::canSimplifyInvokeNoUnwind(this, v8))
        {
          goto LABEL_223;
        }
        if (v47[1])
          goto LABEL_279;
        v144 = (_QWORD *)v47[8];
        if (!v144 || (*((_BYTE *)v144 + 17) & 0x30) == 0)
        {
          v145 = *((_DWORD *)v47 + 5);
          if (v145 < 0)
          {
            v163 = &v47[-4 * (v145 & 0x7FFFFFF)];
            v166 = *(v163 - 1);
            v164 = v163 - 1;
            v165 = v166;
            if (v166)
            {
              v167 = -v165;
              do
              {
                v168 = *(_DWORD *)(*(uint64_t *)((char *)v164 + v167) + 8);
                if (v168 >= 2 && v168 != 7)
                  goto LABEL_279;
                v167 += 16;
              }
              while (v167);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v47, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v47, 44))
          {
LABEL_279:
            llvm::changeToCall((llvm::BasicBlock **)v47, a2, v143);
            goto LABEL_95;
          }
        }
        v146 = *(v47 - 12);
        v147 = (llvm::BasicBlock *)*(v47 - 8);
        v148 = (char *)operator new(0x60uLL);
        *((_DWORD *)v148 + 13) = *((_DWORD *)v148 + 13) & 0x38000000 | 1;
        *((_QWORD *)v148 + 1) = 0;
        *((_QWORD *)v148 + 2) = 0;
        *(_QWORD *)v148 = 0;
        *((_QWORD *)v148 + 4) = ***(_QWORD ***)v146 + 1576;
        *((_QWORD *)v148 + 3) = v148 + 32;
        *((_QWORD *)v148 + 5) = 0;
        v148[48] = 30;
        v148[49] = 0;
        *((_WORD *)v148 + 25) = 0;
        *((_DWORD *)v148 + 13) = 1;
        *(_OWORD *)(v148 + 56) = 0u;
        v149 = v148 + 56;
        *(_OWORD *)(v148 + 72) = 0u;
        *((_DWORD *)v148 + 22) = 0;
        v150 = (_QWORD *)v47[5];
        v151 = v47 + 3;
        *((_QWORD *)v148 + 9) = v150;
        *((_WORD *)v150 + 9) &= ~0x8000u;
        if ((v148[55] & 0x10) != 0 && (v158 = v150[7]) != 0 && (v159 = *(llvm::ValueSymbolTable **)(v158 + 104)) != 0)
        {
          llvm::ValueSymbolTable::reinsertValue(v159, (llvm::Value *)(v148 + 32));
          v160 = *(_QWORD *)v148;
          v161 = *v151;
          *((_QWORD *)v148 + 7) = *v151;
          *((_QWORD *)v148 + 8) = v151;
          *(_QWORD *)(v161 + 8) = v149;
          *v151 = (uint64_t)v149;
          if (v160)
          {
            **((_QWORD **)v148 + 2) = *((_QWORD *)v148 + 1);
            v162 = *((_QWORD *)v148 + 1);
            if (v162)
              *(_QWORD *)(v162 + 16) = *((_QWORD *)v148 + 2);
          }
        }
        else
        {
          v152 = *v151;
          *((_QWORD *)v148 + 7) = *v151;
          *((_QWORD *)v148 + 8) = v151;
          *(_QWORD *)(v152 + 8) = v149;
          *v151 = (uint64_t)v149;
        }
        *(_QWORD *)v148 = v146;
        v155 = *(_QWORD *)(v146 + 8);
        v154 = (_QWORD *)(v146 + 8);
        v153 = v155;
        *((_QWORD *)v148 + 1) = v155;
        v5 = &v202;
        if (v155)
          *(_QWORD *)(v153 + 16) = v148 + 8;
        *((_QWORD *)v148 + 2) = v154;
        *v154 = v148;
        llvm::BasicBlock::removePredecessor(v147, (llvm::BasicBlock *)v47[5], 0);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v47[5] + 40, (uint64_t ***)v47);
        v156 = (_QWORD *)v47[3];
        v157 = (_QWORD *)v47[4];
        *v157 = v156;
        v156[1] = v157;
        *v151 = 0;
        v47[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v47);
        if (a2)
        {
          v204 = v13;
          v205 = (unint64_t)v147 | 4;
          llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)&v204, 1);
        }
        goto LABEL_95;
      }
      llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)*(v47 - 12), (llvm::BasicBlock *)v47[5], 0);
      v188 = v47 - 12;
      if ((*(_BYTE *)(v61 + 23) & 0x10) == 0)
      {
        v117 = 0;
        v118 = &byte_1C871356D;
        goto LABEL_207;
      }
      v64 = ***(_QWORD ***)v61;
      v65 = *(_QWORD *)(v64 + 152);
      v66 = *(unsigned int *)(v64 + 168);
      if ((_DWORD)v66)
      {
        LODWORD(v67) = (v66 - 1) & ((v61 >> 4) ^ (v61 >> 9));
        v68 = (uint64_t *)(v65 + 16 * v67);
        v69 = *v68;
        if (*v68 == v61)
        {
LABEL_206:
          v116 = (_QWORD *)v68[1];
          v119 = *v116;
          v118 = (char *)(v116 + 2);
          v117 = v119;
LABEL_207:
          v120 = *(_QWORD **)*v47;
          v207 = 773;
          v204 = v118;
          v205 = v117;
          v206[0] = ".unreachable";
          v121 = *(_QWORD *)(v47[5] + 56);
          v122 = operator new();
          *(_QWORD *)v122 = *v120 + 1600;
          *(_QWORD *)(v122 + 8) = 0;
          v123 = (uint64_t **)(v122 + 8);
          v124 = *(_DWORD *)(v122 + 20) & 0xC0000000;
          *(_QWORD *)(v122 + 24) = 0;
          v125 = v122 + 24;
          *(_DWORD *)(v122 + 16) = 22;
          *(_DWORD *)(v122 + 20) = v124;
          *(_QWORD *)(v122 + 32) = 0;
          *(_QWORD *)(v122 + 40) = v122 + 40;
          *(_QWORD *)(v122 + 48) = v122 + 40;
          *(_QWORD *)(v122 + 56) = 0;
          if (v121)
          {
            v126 = v121 + 72;
            if (v61)
              v127 = (uint64_t *)(v61 + 24);
            else
              v127 = (uint64_t *)(v121 + 72);
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v126, (_QWORD *)v122);
            v128 = *v127;
            *(_QWORD *)(v122 + 24) = *v127;
            *(_QWORD *)(v122 + 32) = v127;
            *(_QWORD *)(v128 + 8) = v125;
            *v127 = v125;
          }
          llvm::Value::setName((uint64_t ***)v122, (uint64_t)&v204);
          v129 = (char *)operator new(0x40uLL);
          *((_DWORD *)v129 + 5) &= 0x38000000u;
          *(_QWORD *)v129 = *v120 + 1576;
          *((_QWORD *)v129 + 1) = 0;
          v129[16] = 35;
          *(_OWORD *)(v129 + 44) = 0u;
          *(_OWORD *)(v129 + 33) = 0u;
          *(_OWORD *)(v129 + 17) = 0u;
          *(_WORD *)(v122 + 18) &= ~0x8000u;
          v130 = *(_QWORD *)(v122 + 40);
          *((_QWORD *)v129 + 4) = v122 + 40;
          *((_QWORD *)v129 + 5) = v122;
          *((_QWORD *)v129 + 3) = v130;
          v129 += 24;
          *(_QWORD *)(v130 + 8) = v129;
          *(_QWORD *)(v122 + 40) = v129;
          if (*v188)
          {
            *(_QWORD *)*(v47 - 10) = *(v47 - 11);
            v131 = *(v47 - 11);
            if (v131)
              *(_QWORD *)(v131 + 16) = *(v47 - 10);
          }
          *(v47 - 12) = v122;
          v132 = *(_QWORD **)(v122 + 8);
          *(v47 - 11) = (uint64_t)v132;
          v5 = &v202;
          if (v132)
            v132[2] = v47 - 11;
          *(v47 - 10) = (uint64_t)v123;
          *v123 = v188;
          if (a2)
          {
            v204 = v13;
            v205 = v61 | 4;
            v206[0] = v13;
            v206[1] = v122 & 0xFFFFFFFFFFFFFFFBLL;
            llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)&v204, 2);
          }
          v10 = 1;
          goto LABEL_220;
        }
        v70 = 1;
        while (v69 != -4096)
        {
          v71 = v67 + v70++;
          v67 = v71 & (v66 - 1);
          v69 = *(_QWORD *)(v65 + 16 * v67);
          if (v69 == v61)
          {
            v68 = (uint64_t *)(v65 + 16 * v67);
            goto LABEL_206;
          }
        }
      }
      v68 = (uint64_t *)(v65 + 16 * v66);
      goto LABEL_206;
    }
    if (v48 == 38)
      v53 = v49;
    else
      v53 = 1;
    if ((v53 & 1) != 0)
      goto LABEL_223;
    v204 = (void *)1;
    for (j = 8; j != 136; j += 16)
      *(void **)((char *)&v204 + j) = (void *)-4096;
    v202 = (void *)1;
    v203[0] = v192;
    v203[1] = v192;
    v55 = *((_DWORD *)v47 + 5);
    if ((v55 & 0x40000000) != 0)
    {
      v57 = (uint64_t *)*(v47 - 1);
      v72 = 8;
      if ((*((_WORD *)v47 + 9) & 1) == 0)
        v72 = 4;
      v59 = &v57[v72];
      v56 = v55 & 0x7FFFFFF;
    }
    else
    {
      v56 = v55 & 0x7FFFFFF;
      v57 = &v47[-4 * v56];
      v58 = 8;
      if ((*((_WORD *)v47 + 9) & 1) == 0)
        v58 = 4;
      v59 = &v57[v58];
    }
    v73 = &v57[4 * v56];
    while (v59 != v73)
    {
      v199 = 0;
      v74 = *v59;
      v199 = *v59;
      if (a2)
      {
        v79 = sub_1C63AED90(&v204, &v199);
        ++*((_DWORD *)v79 + 2);
        v74 = v199;
      }
      v75 = v74 + 40;
      for (k = *(_QWORD *)(v74 + 48); k != v75; k = *(_QWORD *)(k + 8))
      {
        v77 = (llvm::Instruction *)(k - 24);
        if (k)
          v78 = k - 24;
        else
          v78 = 0;
        if (*(_BYTE *)(v78 + 16) != 83)
          goto LABEL_136;
      }
      v77 = 0;
LABEL_136:
      v198[0] = v77;
      v200 = 0;
      if ((sub_1C5F1E0E8((uint64_t)&v202, v198, &v200) & 1) == 0)
      {
        v80 = v200;
        v201 = v200;
        v81 = (int)v202;
        v82 = DWORD2(v203[0]);
        v83 = v202 >> 1;
        v84 = v202 & 1;
        if ((v202 & 1) != 0)
          v85 = 4;
        else
          v85 = DWORD2(v203[0]);
        if (4 * v83 + 4 >= 3 * v85)
        {
          v85 *= 2;
        }
        else if (v85 + ~v83 - HIDWORD(v202) > v85 >> 3)
        {
LABEL_142:
          LODWORD(v202) = ((v81 & 0xFFFFFFFE) + 2) | v84;
          if (*v80 != (const llvm::Instruction *)-4096)
            --HIDWORD(v202);
          *v80 = v77;
          goto LABEL_145;
        }
        if (v85 >= 5)
        {
          v87 = (v85 - 1) | ((unint64_t)(v85 - 1) >> 1);
          v88 = v87 | (v87 >> 2) | ((v87 | (v87 >> 2)) >> 4);
          v89 = ((v88 | (v88 >> 8)) >> 16) | v88 | (v88 >> 8);
          if ((v89 + 1) > 0x40)
            v85 = v89 + 1;
          else
            v85 = 64;
        }
        if ((v202 & 1) != 0)
        {
          v90 = v213;
          for (m = 8; m != 40; m += 8)
          {
            v92 = *(llvm::Instruction **)((char *)&v202 + m);
            if (((unint64_t)v92 | 0x1000) != 0xFFFFFFFFFFFFF000)
              *v90++ = v92;
          }
          if (v85 > 4)
          {
            LODWORD(v202) = v202 & 0xFFFFFFFE;
            v93 = v85;
            *(_QWORD *)&v203[0] = operator new(8 * v85, (std::align_val_t)8uLL);
            *((_QWORD *)&v203[0] + 1) = v93;
            v5 = &v202;
          }
          sub_1C5F1E230((uint64_t)&v202, v213, v90);
        }
        else
        {
          v189 = *(llvm::Instruction ***)&v203[0];
          if (v85 > 4)
          {
            v94 = v85;
            *(_QWORD *)&v203[0] = operator new(8 * v85, (std::align_val_t)8uLL);
            *((_QWORD *)&v203[0] + 1) = v94;
            v5 = &v202;
          }
          else
          {
            LODWORD(v202) = v202 | 1;
          }
          sub_1C5F1E230((uint64_t)&v202, v189, &v189[v82]);
          MEMORY[0x1CAA32FB4](v189, 8);
        }
        sub_1C5F1E0E8((uint64_t)&v202, v198, &v201);
        v81 = (int)v202;
        v80 = v201;
        v84 = v202 & 1;
        goto LABEL_142;
      }
      if (a2)
      {
        v86 = sub_1C63AED90(&v204, &v199);
        --*((_DWORD *)v86 + 2);
      }
      llvm::CatchSwitchInst::removeHandler((uint64_t)v47, v59);
      v59 -= 4;
      v73 -= 4;
      v10 = 1;
LABEL_145:
      v59 += 4;
    }
    if (a2)
    {
      v95 = sub_1C617D0CC((int *)&v204);
      v97 = &v205;
      if ((v204 & 1) == 0)
        v97 = (uint64_t *)v205;
      v98 = v206[0];
      if ((v204 & 1) != 0)
        v98 = 8;
      v99 = (int *)&v97[2 * v98];
      if (v99 == v95)
      {
        v104 = 0;
        v103 = 0;
      }
      else
      {
        v100 = v95;
        v101 = v96;
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v187 = v99;
        do
        {
          if (!v100[2])
          {
            v105 = *(_QWORD *)v100 | 4;
            if (v103 >= v102)
            {
              v106 = ((char *)v103 - (char *)v104) >> 4;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 60)
                abort();
              v108 = (char *)v102 - (char *)v104;
              v109 = v102 - v104;
              if (v109 > v107)
                v107 = v109;
              if (v108 >= 0x7FFFFFFFFFFFFFF0)
                v110 = 0xFFFFFFFFFFFFFFFLL;
              else
                v110 = v107;
              if (v110)
              {
                if (v110 >> 60)
                  sub_1C4764EE4();
                v190 = v110;
                v111 = (char *)operator new(16 * v110);
                v110 = v190;
              }
              else
              {
                v111 = 0;
              }
              v112 = &v111[16 * v106];
              *(_QWORD *)v112 = v13;
              *((_QWORD *)v112 + 1) = v105;
              if (v103 == v104)
              {
                v114 = v103;
                v104 = (unint64_t *)&v111[16 * v106];
                v5 = &v202;
              }
              else
              {
                v113 = (unint64_t *)&v111[16 * v106];
                v5 = &v202;
                do
                {
                  *((_OWORD *)v113 - 1) = *((_OWORD *)v103 - 1);
                  v113 -= 2;
                  v103 -= 2;
                }
                while (v103 != v104);
                v114 = v104;
                v104 = v113;
              }
              v102 = (unint64_t *)&v111[16 * v110];
              v103 = (unint64_t *)(v112 + 16);
              if (v114)
              {
                v115 = &v111[16 * v110];
                operator delete(v114);
                v102 = (unint64_t *)v115;
              }
              v99 = v187;
            }
            else
            {
              *v103 = (unint64_t)v13;
              v103[1] = v105;
              v103 += 2;
              v5 = &v202;
            }
          }
          while (1)
          {
            v100 += 4;
            if (v100 == v101)
              break;
            if ((*(_QWORD *)v100 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_203;
          }
          v100 = v101;
LABEL_203:
          ;
        }
        while (v100 != v99);
      }
      llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, v104, ((char *)v103 - (char *)v104) >> 4);
      if (v104)
        operator delete(v104);
    }
    if ((v202 & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v203[0], 8);
    if ((v204 & 1) == 0)
      MEMORY[0x1CAA32FB4](v205, 8);
LABEL_223:
    v134 = llvm::ConstantFoldTerminator((uint64_t)v13, 1, 0, (uint64_t)a2);
    v135 = (_QWORD *)v13[5];
    if (v135 != v14)
    {
      if (v135)
        v136 = (void **)(v135 - 3);
      else
        v136 = 0;
      v137 = *((unsigned __int8 *)v136 + 16);
      v138 = v137 - 29;
      if (v137 != 30)
      {
        v139 = 2;
        switch(*((_BYTE *)v136 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_348;
          case 0x1F:
            LODWORD(v139) = (*((_DWORD *)v136 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_242;
          case 0x20:
          case 0x26:
            LODWORD(v139) = (*((_DWORD *)v136 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_242;
          case 0x21:
            goto LABEL_231;
          case 0x24:
            LODWORD(v139) = *((_WORD *)v136 + 9) & 1;
            goto LABEL_242;
          case 0x25:
            LODWORD(v139) = 1;
            goto LABEL_231;
          case 0x27:
            LODWORD(v139) = *((_DWORD *)v136 + 20) + 1;
LABEL_242:
            if (!(_DWORD)v139)
              goto LABEL_239;
            goto LABEL_231;
          default:
            goto LABEL_239;
        }
      }
      if ((*((_DWORD *)v136 + 5) & 0x7FFFFFF) == 3)
        LODWORD(v139) = 2;
      else
        LODWORD(v139) = 1;
LABEL_231:
      v140 = 0;
      do
      {
        Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v136, v140);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v193, Successor);
        if ((_BYTE)v8)
        {
          v142 = LODWORD(v209[0]);
          if (LODWORD(v209[0]) >= (unint64_t)DWORD1(v209[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v208, (uint64_t)v209 + 8, LODWORD(v209[0]) + 1, 8);
            v142 = LODWORD(v209[0]);
          }
          *((_QWORD *)v208 + v142) = Successor;
          ++LODWORD(v209[0]);
        }
        ++v140;
      }
      while ((_DWORD)v139 != v140);
    }
LABEL_239:
    v10 |= v134;
    v11 = v209[0];
  }
  while (LODWORD(v209[0]));
  if (v208 != (char *)v209 + 8)
    free(v208);
  v170 = (char *)this + 72;
  v171 = (HIDWORD(v195) - v196) + 1;
  v172 = (char *)this + 72;
  do
  {
    v172 = (char *)*((_QWORD *)v172 + 1);
    --v171;
  }
  while (v172 != v170);
  if (v171)
  {
    v208 = (void *)1;
    v209[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v209[1] = v209[0];
    v209[2] = v209[0];
    v209[3] = v209[0];
    v5 = (void **)v212;
    v210 = v212;
    v12 = 0x800000000;
    v211 = 0x800000000;
    v173 = *((_QWORD *)this + 10);
    if ((char *)v173 != v170)
    {
      v139 = (uint64_t)v209;
      v136 = &v210;
      do
      {
        if (v173)
          v174 = (void *)(v173 - 24);
        else
          v174 = 0;
        v175 = (char *)sub_1C477672C((uint64_t)&v193, (uint64_t)v174);
        if (v194 == v193)
          v176 = (uint64_t *)((char *)&v195 + 4);
        else
          v176 = &v195;
        if (v175 == &v194[8 * *(unsigned int *)v176]
          && (!a2 || !llvm::DomTreeUpdater::isBBPendingDeletion(a2, (llvm::BasicBlock *)v174)))
        {
          v204 = v174;
          sub_1C50878C8((uint64_t)&v208, (uint64_t *)&v204);
        }
        v173 = *(_QWORD *)(v173 + 8);
      }
      while ((char *)v173 != v170);
      if ((_DWORD)v211)
      {
        if (a3)
          llvm::MemorySSAUpdater::removeBlocks((uint64_t)a3, (uint64_t)&v208);
        v138 = (int)v208;
        if (v208 <= 1)
        {
LABEL_348:
          if (HIDWORD(v208))
            goto LABEL_304;
        }
        else
        {
LABEL_304:
          if ((v138 & 1) != 0)
            goto LABEL_305;
          v185 = (2 * v138) & 0xFFFFFFFC;
          v177 = DWORD2(v209[0]);
          if (v185 < DWORD2(v209[0]) && DWORD2(v209[0]) >= 0x41)
          {
            sub_1C61F8D34(&v208);
          }
          else
          {
            if (DWORD2(v209[0]))
            {
              v139 = *(_QWORD *)&v209[0];
              v136 = (void **)(*(_QWORD *)&v209[0] + 8 * DWORD2(v209[0]));
              do
              {
LABEL_305:
                *(_QWORD *)v139 = -4096;
                v139 += 8;
              }
              while ((void **)v139 != v136);
              v177 = v208 & 1;
            }
            v208 = (void *)v177;
          }
        }
        v202 = (char *)v203 + 8;
        *(_QWORD *)&v203[0] = v12;
        v178 = (llvm::Type *)v211;
        if ((_DWORD)v211)
        {
          v179 = (llvm::BasicBlock **)v210;
          if (v210 == v5)
          {
            if (v211 < 9)
            {
              v180 = v5;
              v181 = v211;
              v179 = (llvm::BasicBlock **)v203 + 1;
              goto LABEL_312;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v202, (uint64_t)v203 + 8, v211, 8);
            v181 = v211;
            v179 = (llvm::BasicBlock **)v202;
            if ((_DWORD)v211)
            {
              v180 = v210;
LABEL_312:
              memcpy(v179, v180, 8 * v181);
              v179 = (llvm::BasicBlock **)v202;
            }
            LODWORD(v203[0]) = (_DWORD)v178;
          }
          else
          {
            v202 = v210;
            *(_QWORD *)&v203[0] = v211;
            v210 = v5;
            HIDWORD(v211) = 0;
          }
          LODWORD(v211) = 0;
        }
        else
        {
          v178 = 0;
          v179 = (llvm::BasicBlock **)v203 + 1;
        }
        v204 = v206;
        v205 = 0x400000000;
        if (a2)
          v182 = &v204;
        else
          v182 = 0;
        llvm::detachDeadBlocks(v179, v178, (uint64_t)v182, 0);
        if (a2)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v204, v205);
          if (v178)
          {
LABEL_323:
            v183 = 8 * (_QWORD)v178;
            do
            {
              if (a2)
                llvm::DomTreeUpdater::deleteBB(a2, *v179);
              else
                llvm::BasicBlock::eraseFromParent(*v179);
              ++v179;
              v183 -= 8;
            }
            while (v183);
          }
        }
        else if (v178)
        {
          goto LABEL_323;
        }
        if (v204 != v206)
          free(v204);
        if (v202 != (char *)v203 + 8)
          free(v202);
        v10 = 1;
      }
    }
    if (v210 != v5)
      free(v210);
    if ((v208 & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v209[0], 8);
  }
  if (v194 != v193)
    free(v194);
  return v10 & 1;
}

void llvm::combineMetadata(uint64_t a1, _BYTE *a2, unsigned int *a3, uint64_t a4, int a5)
{
  llvm::MDNode *MostGenericRange;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  llvm::MDNode **v20;
  uint64_t v21;
  llvm::MDNode *v22;
  llvm::MDNode *v23;
  llvm::Value *v24;
  int v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  llvm::MDNode **v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned __int8 **v44;
  int v45;
  llvm::MDNode *MostGenericFPMath;
  _QWORD *v47;
  llvm::MDNode *v48;
  _QWORD *v49;
  llvm::MDNode *v50;
  llvm::MDNode *MostGenericAlignmentOrDereferenceable;
  llvm::MDNode *v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x1E0C80C00];
  v53 = v55;
  v54 = 0x400000000;
  llvm::Instruction::dropUnknownNonDebugMetadata((_QWORD **)a1, a3, a4);
  llvm::Value::getAllMetadata((_BYTE *)a1, (uint64_t)&v53);
  if ((_DWORD)v54)
  {
    v9 = (char *)v53;
    v10 = (char *)v53 + 16 * v54;
    while (1)
    {
      v11 = *(_DWORD *)v9;
      if (!*((_QWORD *)a2 + 6) && (a2[23] & 0x20) == 0)
        goto LABEL_18;
      if (v11)
        break;
LABEL_61:
      v44 = (unsigned __int8 **)a1;
      v45 = v11;
      MostGenericFPMath = 0;
LABEL_40:
      llvm::Instruction::setMetadata(v44, v45, MostGenericFPMath);
LABEL_25:
      v9 += 16;
      if (v9 == v10)
        goto LABEL_2;
    }
    if ((a2[23] & 0x20) == 0)
      goto LABEL_18;
    v12 = ***(_QWORD ***)a2;
    v52 = (llvm::MDNode *)a2;
    v13 = *(_DWORD *)(v12 + 2496);
    if (v13)
    {
      v14 = *(_QWORD *)(v12 + 2480);
      v15 = v13 - 1;
      v16 = v15 & ((a2 >> 4) ^ (a2 >> 9));
      v17 = (_QWORD *)(v14 + 40 * v16);
      v18 = (_BYTE *)*v17;
      if ((_BYTE *)*v17 == a2)
        goto LABEL_13;
      v26 = 0;
      v27 = 1;
      while (v18 != (_BYTE *)-4096)
      {
        if (v26)
          v28 = 0;
        else
          v28 = v18 == (_BYTE *)-8192;
        if (v28)
          v26 = v17;
        v29 = v16 + v27++;
        v16 = v29 & v15;
        v17 = (_QWORD *)(v14 + 40 * v16);
        v18 = (_BYTE *)*v17;
        if ((_BYTE *)*v17 == a2)
          goto LABEL_13;
      }
      if (v26)
        v49 = v26;
      else
        v49 = v17;
    }
    else
    {
      v49 = 0;
    }
    v17 = sub_1C541AB24(v12 + 2480, (uint64_t)&v52, (uint64_t *)&v52, v49);
    v50 = v52;
    v17[4] = 0;
    v17[3] = 0;
    *v17 = v50;
    v17[1] = v17 + 3;
    v17[2] = 0x100000000;
LABEL_13:
    v19 = *((unsigned int *)v17 + 4);
    if ((_DWORD)v19)
    {
      v20 = (llvm::MDNode **)(v17[1] + 8);
      v21 = 16 * v19;
      while (*((_DWORD *)v20 - 2) != v11)
      {
        v22 = 0;
        v20 += 2;
        v21 -= 16;
        if (!v21)
          goto LABEL_19;
      }
      v22 = *v20;
LABEL_19:
      v23 = (llvm::MDNode *)*((_QWORD *)v9 + 1);
      switch(v11)
      {
        case 1:
          v52 = 0;
          sub_1C4F7FD38((uint64_t)v22, (uint64_t)v23, (uint64_t *)&v52);
          MostGenericRange = v52;
          if (!v52 && !*(_QWORD *)(a1 + 48) && (*(_BYTE *)(a1 + 23) & 0x20) == 0)
            goto LABEL_25;
          v24 = (llvm::Value *)a1;
          v25 = 1;
          goto LABEL_24;
        case 3:
          MostGenericFPMath = llvm::MDNode::getMostGenericFPMath(v22, v23, MostGenericRange);
          v44 = (unsigned __int8 **)a1;
          v45 = 3;
          goto LABEL_40;
        case 4:
          if (!a5)
            goto LABEL_25;
          MostGenericRange = llvm::MDNode::getMostGenericRange(v22, v23, MostGenericRange);
          if (!MostGenericRange && !*(_QWORD *)(a1 + 48) && (*(_BYTE *)(a1 + 23) & 0x20) == 0)
            goto LABEL_25;
          v24 = (llvm::Value *)a1;
          v25 = 4;
          goto LABEL_24;
        case 6:
          v44 = (unsigned __int8 **)a1;
          v45 = 6;
          goto LABEL_80;
        case 7:
          MostGenericRange = (llvm::MDNode *)llvm::MDNode::getMostGenericAliasScope(v22, v23, MostGenericRange);
          if (!MostGenericRange && !*(_QWORD *)(a1 + 48) && (*(_BYTE *)(a1 + 23) & 0x20) == 0)
            goto LABEL_25;
          v24 = (llvm::Value *)a1;
          v25 = 7;
LABEL_24:
          llvm::Value::setMetadata(v24, v25, MostGenericRange);
          goto LABEL_25;
        case 8:
        case 10:
          MostGenericAlignmentOrDereferenceable = (llvm::MDNode *)llvm::MDNode::intersect(v22, v23, MostGenericRange);
          goto LABEL_76;
        case 11:
          if (!a5)
            goto LABEL_25;
          v44 = (unsigned __int8 **)a1;
          v45 = 11;
LABEL_80:
          MostGenericFPMath = v22;
          goto LABEL_40;
        case 12:
        case 13:
          MostGenericAlignmentOrDereferenceable = llvm::MDNode::getMostGenericAlignmentOrDereferenceable(v22, v23, MostGenericRange);
LABEL_76:
          MostGenericFPMath = MostGenericAlignmentOrDereferenceable;
          v44 = (unsigned __int8 **)a1;
          v45 = v11;
          goto LABEL_40;
        case 16:
        case 27:
          goto LABEL_25;
        case 17:
          MostGenericFPMath = llvm::MDNode::getMostGenericAlignmentOrDereferenceable(v22, v23, MostGenericRange);
          v44 = (unsigned __int8 **)a1;
          v45 = 17;
          goto LABEL_40;
        case 25:
          MostGenericFPMath = (llvm::MDNode *)llvm::intersectAccessGroups((llvm *)a1, (const llvm::Instruction *)a2, MostGenericRange);
          v44 = (unsigned __int8 **)a1;
          v45 = 25;
          goto LABEL_40;
        default:
          goto LABEL_61;
      }
    }
LABEL_18:
    v22 = 0;
    goto LABEL_19;
  }
LABEL_2:
  if ((a2[23] & 0x20) == 0)
    goto LABEL_3;
  v30 = ***(_QWORD ***)a2;
  v52 = (llvm::MDNode *)a2;
  v31 = *(_DWORD *)(v30 + 2496);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 2480);
    v33 = v31 - 1;
    v34 = v33 & ((a2 >> 4) ^ (a2 >> 9));
    v35 = (_QWORD *)(v32 + 40 * v34);
    v36 = (_BYTE *)*v35;
    if ((_BYTE *)*v35 == a2)
      goto LABEL_44;
    v40 = 0;
    v41 = 1;
    while (v36 != (_BYTE *)-4096)
    {
      if (v40)
        v42 = 0;
      else
        v42 = v36 == (_BYTE *)-8192;
      if (v42)
        v40 = v35;
      v43 = v34 + v41++;
      v34 = v43 & v33;
      v35 = (_QWORD *)(v32 + 40 * v34);
      v36 = (_BYTE *)*v35;
      if ((_BYTE *)*v35 == a2)
        goto LABEL_44;
    }
    if (v40)
      v47 = v40;
    else
      v47 = v35;
  }
  else
  {
    v47 = 0;
  }
  v35 = sub_1C541AB24(v30 + 2480, (uint64_t)&v52, (uint64_t *)&v52, v47);
  v48 = v52;
  v35[3] = 0;
  v35[4] = 0;
  *v35 = v48;
  v35[1] = v35 + 3;
  v35[2] = 0x100000000;
LABEL_44:
  v37 = *((unsigned int *)v35 + 4);
  if ((_DWORD)v37)
  {
    v38 = (llvm::MDNode **)(v35[1] + 8);
    v39 = 16 * v37;
    while (*((_DWORD *)v38 - 2) != 16)
    {
      v38 += 2;
      v39 -= 16;
      if (!v39)
        goto LABEL_3;
    }
    if (*v38 && (*(_BYTE *)(a1 + 16) & 0xFE) == 0x3C)
      llvm::Value::setMetadata((llvm::Value *)a1, 16, *v38);
  }
LABEL_3:
  if (v53 != v55)
    free(v53);
}

void llvm::combineMetadataForCSE(llvm *this, llvm::Instruction *a2, const llvm::Instruction *a3)
{
  _OWORD v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = xmmword_1C8674C34;
  v3[1] = unk_1C8674C44;
  v3[2] = xmmword_1C8674C54;
  llvm::combineMetadata((uint64_t)this, a2, (unsigned int *)v3, 12, (int)a3);
}

void llvm::copyMetadataForLoad(llvm *this, llvm::LoadInst *a2, const llvm::LoadInst *a3)
{
  llvm::LoadInst *v5;
  llvm::LoadInst *v6;
  const llvm::LoadInst **v7;
  llvm *v8;
  const llvm::LoadInst **v9;
  unsigned __int8 **v10;
  uint64_t v11;
  int v12;
  const llvm::LoadInst *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[18];

  v18[16] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (uint64_t)&v16);
    v7 = (const llvm::LoadInst **)v16;
    if (!(_DWORD)v17)
    {
LABEL_19:
      if (v7 != v18)
        free(v7);
      return;
    }
    v8 = (llvm *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272);
    v9 = (const llvm::LoadInst **)((char *)v16 + 16 * v17);
    v10 = (unsigned __int8 **)((char *)this + 48);
    v11 = *(_QWORD *)this;
    while (1)
    {
      v12 = *(_DWORD *)v7;
      v13 = v7[1];
      if (*(_DWORD *)v7 >= 4u)
      {
        switch(*(_DWORD *)v7)
        {
          case 4:
            llvm::copyRangeMetadata(v8, (uint64_t ***)a2, v13, this, v6);
            break;
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0x19:
            goto LABEL_7;
          case 0xB:
            llvm::copyNonnullMetadata((llvm::ConstantPointerNull ***)a2, v7[1], (unsigned __int8 **)this, v5);
            break;
          case 0xC:
          case 0xD:
          case 0x11:
            if (*(_BYTE *)(v11 + 8) == 15)
              llvm::Instruction::setMetadata((unsigned __int8 **)this, v12, v13);
            break;
          default:
            goto LABEL_14;
        }
        goto LABEL_14;
      }
LABEL_7:
      if (v13)
      {
        if (!v12)
        {
          v15 = (unsigned __int8 *)v7[1];
          llvm::MetadataTracking::track((uint64_t)&v15, (unsigned __int8 *)v13, 2);
LABEL_22:
          if (&v15 == v10)
          {
            if (v15)
              llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
          }
          else
          {
            if (*v10)
              llvm::MetadataTracking::untrack((uint64_t)this + 48, *v10);
            v14 = v15;
            *v10 = v15;
            if (v14)
              llvm::MetadataTracking::retrack((uint64_t)&v15, v14, (uint64_t)this + 48);
          }
          goto LABEL_14;
        }
      }
      else
      {
        if (!*v10 && (*((_BYTE *)this + 23) & 0x20) == 0)
          goto LABEL_14;
        if (!v12)
        {
          v15 = 0;
          goto LABEL_22;
        }
      }
      llvm::Value::setMetadata(this, v12, v13);
LABEL_14:
      v7 += 2;
      if (v7 == v9)
      {
        v7 = (const llvm::LoadInst **)v16;
        goto LABEL_19;
      }
    }
  }
}

void llvm::patchReplacementInstruction(llvm *this, llvm::Instruction *a2, llvm::Value *a3)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    if (*((_BYTE *)this + 16) != 60)
      llvm::Instruction::andIRFlags((uint64_t)a2, (uint64_t)this);
    llvm::combineMetadata((uint64_t)a2, this, dword_1C8674C64, 10, 0);
  }
}

uint64_t llvm::replaceDominatedUsesWith(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DominatorTree *a4, const llvm::BasicBlockEdge *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *((_QWORD *)this + 1);
  if (!v5)
    return 0;
  v9 = 0;
  do
  {
    v11 = (_QWORD *)(v5 + 8);
    v10 = *(_QWORD *)(v5 + 8);
    if (llvm::DominatorTree::dominates(a3, a4, (const llvm::Use *)v5))
    {
      if (*(_QWORD *)v5)
      {
        **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
        v13 = *(_QWORD *)(v5 + 8);
        if (v13)
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v5 + 16);
      }
      *(_QWORD *)v5 = a2;
      if (a2)
      {
        v14 = (_QWORD *)((char *)a2 + 8);
        v15 = *((_QWORD *)a2 + 1);
        *v11 = v15;
        if (v15)
          *(_QWORD *)(v15 + 16) = v11;
        *(_QWORD *)(v5 + 16) = v14;
        *v14 = v5;
      }
      v9 = (v9 + 1);
    }
    v5 = v10;
  }
  while (v10);
  return v9;
}

uint64_t llvm::replaceDominatedUsesWith(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::DominatorTree *a4, const llvm::BasicBlock *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *((_QWORD *)this + 1);
  if (!v5)
    return 0;
  v9 = 0;
  do
  {
    v11 = (_QWORD *)(v5 + 8);
    v10 = *(_QWORD *)(v5 + 8);
    if (llvm::DominatorTree::dominates(a3, a4, (const llvm::Use *)v5))
    {
      if (*(_QWORD *)v5)
      {
        **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
        v13 = *(_QWORD *)(v5 + 8);
        if (v13)
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v5 + 16);
      }
      *(_QWORD *)v5 = a2;
      if (a2)
      {
        v14 = (_QWORD *)((char *)a2 + 8);
        v15 = *((_QWORD *)a2 + 1);
        *v11 = v15;
        if (v15)
          *(_QWORD *)(v15 + 16) = v11;
        *(_QWORD *)(v5 + 16) = v14;
        *v14 = v5;
      }
      v9 = (v9 + 1);
    }
    v5 = v10;
  }
  while (v10);
  return v9;
}

void llvm::hoistAllInstructionsInto(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::BasicBlock *a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t *v19;
  llvm::ValueSymbolTable *v20;
  llvm::ValueSymbolTable *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  llvm::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value **v33;
  llvm::Value *v34;
  int v35;
  int v36;
  uint64_t v37;
  size_t *v38;
  size_t v39;
  int v40;
  size_t v41;
  unsigned __int8 *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  char *v52;
  llvm::ValueSymbolTable *v53;
  uint64_t v54;
  int v55;
  llvm::ValueSymbolTable *v56;
  char *__s1;
  llvm::Value *v58;
  unsigned __int8 *v59;

  v7 = (unsigned __int8 *)a3 + 40;
  v8 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  if (v8 != (unsigned __int8 *)((char *)a3 + 40))
  {
    do
    {
      if (v8)
        v9 = (uint64_t)(v8 - 24);
      else
        v9 = 0;
      llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata((uint64_t ***)v9, 0, 0);
      if ((*(_BYTE *)(v9 + 23) & 8) != 0)
        llvm::dropDebugUsers((llvm *)v9, v10);
      if (sub_1C4D99D08(v9) || sub_1C509DDB0(v9))
      {
        v8 = *(unsigned __int8 **)(v9 + 32);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v9 + 40) + 40, (uint64_t ***)v9);
        v11 = *(_QWORD *)(v9 + 24);
        v12 = *(_QWORD **)(v9 + 32);
        *v12 = v11;
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v9);
      }
      else
      {
        v13 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
        v59 = v13;
        if (v13)
          llvm::MetadataTracking::track((uint64_t)&v59, v13, 2);
        v14 = (unsigned __int8 **)(v9 + 48);
        if (&v59 == v14)
        {
          if (v59)
            llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
        }
        else
        {
          if (*v14)
            llvm::MetadataTracking::untrack((uint64_t)v14, *v14);
          v15 = v59;
          *v14 = v59;
          if (v15)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v59, v15, (uint64_t)v14);
            v59 = 0;
          }
        }
        v8 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      }
    }
    while (v8 != v7);
    v8 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  }
  v16 = *(_QWORD **)v7;
  if (*(unsigned __int8 **)v7 == v7)
  {
    v17 = 0;
  }
  else
  {
    if (v16)
      v17 = (unsigned __int8 *)(v16 - 3);
    else
      v17 = 0;
    if (v17[16] - 29 >= 0xB)
      v17 = 0;
  }
  if (v17 != (unsigned __int8 *)a2)
  {
    v18 = v17 + 24;
    if (v8 != v17 + 24)
    {
      v19 = (uint64_t *)((char *)a2 + 24);
      *((_WORD *)this + 9) &= ~0x8000u;
      if (this == a3)
      {
LABEL_42:
        v24 = *(_QWORD *)v18;
        v25 = *(_QWORD *)v8;
        *(_QWORD *)(v25 + 8) = v18;
        *(_QWORD *)v18 = v25;
        v26 = *v19;
        *(_QWORD *)(v24 + 8) = v19;
        *(_QWORD *)v8 = v26;
        *(_QWORD *)(v26 + 8) = v8;
        *v19 = v24;
        return;
      }
      v20 = (llvm::ValueSymbolTable *)*((_QWORD *)this + 7);
      if (v20)
        v20 = (llvm::ValueSymbolTable *)*((_QWORD *)v20 + 13);
      v21 = (llvm::ValueSymbolTable *)*((_QWORD *)a3 + 7);
      if (v21)
        v21 = (llvm::ValueSymbolTable *)*((_QWORD *)v21 + 13);
      if (v20 == v21)
      {
        v22 = v8;
        do
        {
          v23 = v22 - 24;
          if (!v22)
            v23 = 0;
          *((_QWORD *)v23 + 5) = this;
          v22 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
        }
        while (v22 != v18);
        goto LABEL_42;
      }
      v56 = v21;
      v53 = v20;
      v27 = v8;
      v51 = v18;
      v52 = (char *)a2 + 24;
      while (1)
      {
        v28 = (llvm::Value *)(v27 - 24);
        if (!v27)
          v28 = 0;
        v58 = v28;
        v55 = *((_DWORD *)v28 + 5) & 0x10000000;
        if (v56)
        {
          if (v55)
            break;
        }
LABEL_69:
        *((_QWORD *)v58 + 5) = this;
        if (v53 && v55)
          llvm::ValueSymbolTable::reinsertValue(v53, v58);
        v27 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
        v18 = v51;
        v19 = (uint64_t *)v52;
        if (v27 == v51)
          goto LABEL_42;
      }
      v29 = ***(_QWORD ***)v28;
      v30 = *(_QWORD *)(v29 + 152);
      v31 = *(unsigned int *)(v29 + 168);
      if ((_DWORD)v31)
      {
        LODWORD(v32) = (v31 - 1) & ((v58 >> 4) ^ (v58 >> 9));
        v33 = (llvm::Value **)(v30 + 16 * v32);
        v34 = *v33;
        if (*v33 == v58)
          goto LABEL_56;
        v35 = 1;
        while (v34 != (llvm::Value *)-4096)
        {
          v36 = v32 + v35++;
          v32 = v36 & (v31 - 1);
          v34 = *(llvm::Value **)(v30 + 16 * v32);
          if (v34 == v58)
          {
            v33 = (llvm::Value **)(v30 + 16 * v32);
            goto LABEL_56;
          }
        }
      }
      v33 = (llvm::Value **)(v30 + 16 * v31);
LABEL_56:
      v37 = *((unsigned int *)v56 + 2);
      if ((_DWORD)v37)
      {
        v38 = (size_t *)v33[1];
        v54 = *((unsigned int *)v56 + 5);
        __s1 = (char *)v38 + v54;
        v39 = *v38;
        if (*v38)
        {
          v40 = 0;
          v41 = *v38;
          v42 = (unsigned __int8 *)v38 + v54;
          do
          {
            v43 = *v42++;
            v40 = 33 * v40 + v43;
            --v41;
          }
          while (v41);
        }
        else
        {
          v40 = 0;
        }
        v44 = v37 - 1;
        v45 = *(_QWORD *)v56;
        v46 = *(_QWORD *)v56 + 8 * v37 + 8;
        v47 = 1;
        v48 = v40;
        while (1)
        {
          v49 = v48 & v44;
          v50 = *(_QWORD **)(v45 + 8 * v49);
          if (v50 != (_QWORD *)-8)
          {
            if (!v50)
              goto LABEL_69;
            if (*(_DWORD *)(v46 + 4 * v49) == v40 && v39 == *v50 && (!v39 || !memcmp(__s1, (char *)v50 + v54, v39)))
              break;
          }
          v48 = v47 + v49;
          ++v47;
        }
        *(_QWORD *)(v45 + 8 * (int)v49) = -8;
        *(int32x2_t *)((char *)v56 + 12) = vadd_s32(*(int32x2_t *)((char *)v56 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_69;
    }
  }
}

uint64_t llvm::recognizeBSwapOrBitReverseIdiom(_QWORD **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t Declaration;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  int v41;
  char *v42;
  llvm::Value *v43;
  char *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  const llvm::APInt *v48;
  uint64_t v49;
  unsigned int v50;
  llvm::Value **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Type *v56;
  uint64_t v57;
  llvm::ValueSymbolTable *v58;
  _DWORD *v59;
  int v60;
  char *v61;
  _BYTE v62[24];
  __int16 v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  llvm::ConstantInt *v67;
  uint64_t *v68;
  _QWORD *v69[2];
  char v70[17];

  v5 = a3;
  v8 = *((unsigned __int8 *)a1 + 16);
  if (v8 == 57)
    goto LABEL_12;
  if (v8 == 5)
  {
    LOBYTE(v9) = 0;
    if ((a2 | a3) != 1 || *((_WORD *)a1 + 9) != 29)
      return v9 & 1;
LABEL_13:
    v11 = (uint64_t)*a1;
    if (((*a1)[1] & 0xFE) == 0x12)
    {
      v12 = **(unsigned __int8 ***)(v11 + 16);
      v13 = v12[8];
    }
    else
    {
      v13 = *((_DWORD *)*a1 + 2);
      v12 = (unsigned __int8 *)*a1;
    }
    if (v13 != 13 || llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v12) > 0x80)
      goto LABEL_18;
    v70[0] = 0;
    v69[0] = 0;
    v69[1] = 0;
    v68 = (uint64_t *)v69;
    v15 = sub_1C5F1C250((llvm::Type **)a1, v5, &v68, 0, v70);
    if (!*(_BYTE *)(v15 + 64))
      goto LABEL_27;
    v16 = (uint64_t **)v15;
    v18 = *(_QWORD *)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
    v67 = (llvm::ConstantInt *)v11;
    v19 = v11;
    if (*(unsigned __int8 *)(v17 + v18 - 1) != 255)
    {
LABEL_22:
      if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
        v19 = **(_QWORD **)(v19 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v19);
      v21 = (llvm::Type *)v11;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v21 = **(llvm::Type ***)(v11 + 16);
      if (PrimitiveSizeInBits > llvm::Type::getPrimitiveSizeInBits(v21))
      {
LABEL_27:
        LOBYTE(v9) = 0;
LABEL_28:
        sub_1C5F1EBB8(v69[0]);
        return v9 & 1;
      }
      v66 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v65, -1, 1);
      }
      else
      {
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
        if (!PrimitiveSizeInBits)
          v22 = 0;
        v65 = v22;
      }
      if ((PrimitiveSizeInBits & 0xF) != 0)
        v23 = 0;
      else
        v23 = a2;
      v9 = v23 | v5;
      if (PrimitiveSizeInBits)
        v24 = v9 == 0;
      else
        v24 = 1;
      if (!v24)
      {
        v25 = 0;
        v26 = v66;
        v27 = PrimitiveSizeInBits - 1;
        do
        {
          v28 = *(char *)(v18 + v25);
          if (v28 == -1)
          {
            v30 = ~(1 << v25);
            if (v26 > 0x40)
              *(_QWORD *)(v65 + 8 * (v25 >> 6)) &= v30;
            else
              v65 &= v30;
          }
          else
          {
            v29 = ((v28 ^ v25) & 7) == 0
               && (PrimitiveSizeInBits >> 3) + ~(v25 >> 3) == v28 >> 3;
            LOBYTE(v23) = v23 & v29;
            LOBYTE(v5) = v5 & (v27 == v28);
          }
          ++v25;
          LOBYTE(v9) = v23 | v5;
          if (v25 >= PrimitiveSizeInBits)
            break;
          --v27;
        }
        while (((v23 | v5) & 1) != 0);
      }
      if ((v9 & 1) == 0)
      {
LABEL_86:
        if (v66 >= 0x41 && v65)
          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        goto LABEL_28;
      }
      if ((v23 & 1) != 0)
        v31 = 9;
      else
        v31 = 8;
      Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1[5][7] + 40), v31, (uint64_t *)&v67, 1);
      v33 = *v16;
      v64 = (uint64_t)v33;
      if (v67 != (llvm::ConstantInt *)*v33)
      {
        *(_QWORD *)v62 = "trunc";
        v63 = 259;
        llvm::CastInst::CreateIntegerCast(v33, (uint64_t)v67, 0);
        v35 = v34;
        v36 = *(unsigned int *)(a4 + 8);
        if (v36 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v36 + 1, 8);
          LODWORD(v36) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v36) = v35;
        ++*(_DWORD *)(a4 + 8);
        v64 = v35;
      }
      if (Declaration)
        v37 = *(uint64_t ***)(Declaration + 24);
      else
        v37 = 0;
      *(_QWORD *)v62 = "rev";
      v63 = 259;
      v42 = (char *)operator new(0x90uLL);
      v43 = (llvm::Value *)(v42 + 64);
      *((_DWORD *)v42 + 21) = *((_DWORD *)v42 + 21) & 0x38000000 | 2;
      *(_QWORD *)v42 = 0;
      *((_QWORD *)v42 + 1) = 0;
      *((_QWORD *)v42 + 2) = 0;
      *((_QWORD *)v42 + 3) = v42 + 64;
      *((_QWORD *)v42 + 4) = 0;
      *((_QWORD *)v42 + 5) = 0;
      *((_QWORD *)v42 + 6) = 0;
      *((_QWORD *)v42 + 7) = v42 + 64;
      *((_QWORD *)v42 + 8) = *v37[2];
      *((_QWORD *)v42 + 9) = 0;
      v42[80] = 84;
      v42[81] = 0;
      *((_WORD *)v42 + 41) = 0;
      *((_DWORD *)v42 + 21) = 2;
      *(_OWORD *)(v42 + 88) = 0u;
      v44 = v42 + 88;
      *(_OWORD *)(v42 + 104) = 0u;
      *((_DWORD *)v42 + 30) = 0;
      v45 = a1[5];
      v46 = (uint64_t *)(a1 + 3);
      *((_QWORD *)v42 + 13) = v45;
      *((_WORD *)v45 + 9) &= ~0x8000u;
      if ((v42[87] & 0x10) != 0)
      {
        v57 = v45[7];
        if (v57)
        {
          v58 = *(llvm::ValueSymbolTable **)(v57 + 104);
          if (v58)
          {
            v61 = v42;
            llvm::ValueSymbolTable::reinsertValue(v58, v43);
            v42 = v61;
          }
        }
      }
      v47 = *v46;
      *((_QWORD *)v42 + 11) = *v46;
      *((_QWORD *)v42 + 12) = v46;
      *(_QWORD *)(v47 + 8) = v44;
      *v46 = (uint64_t)v44;
      *((_QWORD *)v42 + 16) = 0;
      llvm::CallInst::init((uint64_t ***)v43, v37, Declaration, &v64, 1, 0, 0, (uint64_t)v62);
      v49 = *(unsigned int *)(a4 + 8);
      if (v49 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v49 + 1, 8);
        LODWORD(v49) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v49) = v43;
      ++*(_DWORD *)(a4 + 8);
      v50 = v66;
      if (v66)
      {
        if (v66 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v65) == v50)
            goto LABEL_82;
        }
        else if (v65 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v66)
        {
          goto LABEL_82;
        }
        v51 = llvm::ConstantInt::get((llvm::ConstantInt **)v67, (llvm::Type *)&v65, v48);
        *(_QWORD *)v62 = "mask";
        v63 = 259;
        v43 = llvm::BinaryOperator::Create(28, v43, (uint64_t)v51, (uint64_t)v62, (uint64_t)a1);
        v52 = *(unsigned int *)(a4 + 8);
        if (v52 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v52 + 1, 8);
          LODWORD(v52) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v52) = v43;
        ++*(_DWORD *)(a4 + 8);
      }
LABEL_82:
      if (v11 != *(_QWORD *)v43)
      {
        *(_QWORD *)v62 = "zext";
        v63 = 259;
        llvm::CastInst::CreateIntegerCast((uint64_t *)v43, v11, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a4 + 8);
        if (v55 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v55 + 1, 8);
          LODWORD(v55) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v55) = v54;
        ++*(_DWORD *)(a4 + 8);
      }
      goto LABEL_86;
    }
    v38 = 0;
    do
    {
      if (!(v17 + v38))
        goto LABEL_27;
      v39 = *(unsigned __int8 *)(v18 + v17 - 1 + v38--);
    }
    while (v39 == 255);
    v40 = (_QWORD *)**a1;
    v41 = v17 + v38 + 1;
    *(_DWORD *)v62 = v41;
    if (v41 <= 63)
    {
      if (v41 <= 31)
      {
        switch(v41)
        {
          case 16:
            v19 = *v40 + 1936;
            goto LABEL_94;
          case 8:
            v19 = *v40 + 1912;
            goto LABEL_94;
          case 1:
            v19 = *v40 + 1888;
            goto LABEL_94;
        }
      }
      else if (v41 == 32)
      {
        v19 = *v40 + 1960;
        goto LABEL_94;
      }
    }
    else
    {
      if (v41 == 64)
      {
        v19 = *v40 + 1984;
LABEL_94:
        v67 = (llvm::ConstantInt *)v19;
        if (v11 && (*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        {
          v56 = (llvm::Type *)*(unsigned int *)(v11 + 32);
          if (*(_DWORD *)(v11 + 8) == 19)
            llvm::ScalableVectorType::get((uint64_t **)v19, v56);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v56);
          v67 = (llvm::ConstantInt *)v19;
        }
        goto LABEL_22;
      }
      if (v41 == 128)
      {
        v19 = *v40 + 2008;
        goto LABEL_94;
      }
    }
    v59 = sub_1C5270984(*v40 + 2168, v62);
    v19 = *((_QWORD *)v59 + 1);
    if (!v19)
    {
      v19 = sub_1C484358C(*v40 + 2040, 24, 3);
      v60 = *(_DWORD *)v62;
      *(_QWORD *)v19 = v40;
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 8) = (v60 << 8) | 0xDu;
      *((_QWORD *)v59 + 1) = v19;
    }
    goto LABEL_94;
  }
  *(_DWORD *)v62 = 148;
  *(_QWORD *)&v62[4] = 0;
  if (v8 != 84 || (v10 = (uint64_t)*(a1 - 4)) == 0 || *(_BYTE *)(v10 + 16) || *(_QWORD **)(v10 + 24) != a1[9])
  {
LABEL_18:
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  if (*(_DWORD *)(v10 + 36) == *(_DWORD *)v62)
  {
LABEL_12:
    if ((a2 & 1) != 0 || (_DWORD)a3)
      goto LABEL_13;
    goto LABEL_18;
  }
  LOBYTE(v9) = 0;
  if ((a2 | a3) == 1 && *(_DWORD *)(v10 + 36) == 149)
    goto LABEL_13;
  return v9 & 1;
}

uint64_t sub_1C5F1C250(llvm::Type **a1, uint64_t a2, uint64_t **a3, int a4, _BYTE *a5)
{
  char *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  unint64_t v14;
  BOOL v15;
  uint64_t **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::Type *v23;
  unint64_t PrimitiveSizeInBits;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  int v41;
  llvm::Type *v42;
  llvm::Type **v43;
  int v44;
  llvm::Type **v45;
  llvm::Type ***v46;
  llvm::APInt *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Type *v53;
  unsigned int v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  llvm::APInt *v66;
  unsigned int v67;
  llvm::APInt *v68;
  llvm::APInt *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t j;
  unint64_t v80;
  int8x8_t *v81;
  int8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::APInt *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t k;
  unsigned int v96;
  llvm::APInt *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  llvm::Type ***v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  llvm::APInt **v111;
  uint64_t v112;
  llvm::APInt *v113;
  uint64_t v114;
  llvm::Type **v115;
  _QWORD *v116;
  void *v117;
  __int128 v118;
  uint64_t *v119;
  int v120;
  llvm::APInt **v121;
  uint64_t v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v11 = a3 + 1;
  v10 = (char *)a3[1];
  if (v10)
  {
    v12 = a3[1];
    v13 = a3 + 1;
    do
    {
      v14 = v12[4];
      v15 = v14 >= (unint64_t)a1;
      if (v14 >= (unint64_t)a1)
        v16 = (uint64_t **)v12;
      else
        v16 = (uint64_t **)(v12 + 1);
      if (v15)
        v13 = (uint64_t **)v12;
      v12 = *v16;
    }
    while (*v16);
    if (v13 != v11 && v13[4] <= (uint64_t *)a1)
      return (uint64_t)(v13 + 5);
    LOBYTE(v116) = 0;
    v123 = 0;
    while (1)
    {
      while (1)
      {
        v17 = v10;
        v18 = *((_QWORD *)v10 + 4);
        if (v18 <= (unint64_t)a1)
          break;
        v10 = *(char **)v17;
        v11 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_20;
      }
      if (v18 >= (unint64_t)a1)
        break;
      v10 = (char *)*((_QWORD *)v17 + 1);
      if (!v10)
      {
        v11 = (uint64_t **)(v17 + 8);
        goto LABEL_20;
      }
    }
  }
  else
  {
    LOBYTE(v116) = 0;
    v123 = 0;
    v17 = (char *)(a3 + 1);
LABEL_20:
    v19 = v17;
    v17 = (char *)operator new(0x70uLL);
    *((_QWORD *)v17 + 4) = a1;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *((_QWORD *)v17 + 13) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v11 = (uint64_t *)v17;
    v20 = (uint64_t *)**a3;
    v21 = (uint64_t *)v17;
    if (v20)
    {
      *a3 = v20;
      v21 = *v11;
    }
    sub_1C4768E74(a3[1], v21);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  v22 = (uint64_t)(v17 + 40);
  sub_1C5F1E2EC((uint64_t)(v17 + 40), (uint64_t)&v116);
  if (v123)
  {
    if (v117 != &v119)
      free(v117);
    v123 = 0;
  }
  v23 = *a1;
  if ((*((_DWORD *)*a1 + 2) & 0xFE) == 0x12)
    v23 = (llvm::Type *)**((_QWORD **)v23 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v23);
  if (a4 == 48)
    return v22;
  v25 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x80)
    return v22;
  v26 = *((unsigned __int8 *)a1 + 16);
  if (v26 < 0x1C)
    goto LABEL_32;
  v114 = 0;
  v115 = 0;
  v113 = 0;
  if (v26 == 57)
  {
    v29 = (uint64_t)*(a1 - 8);
    if (v29)
    {
      v115 = (llvm::Type **)*(a1 - 8);
      if (*(a1 - 4))
      {
        v114 = (uint64_t)*(a1 - 4);
        v30 = (a4 + 1);
        v31 = sub_1C5F1C250(v29, a2, a3, v30, a5);
        if (*(_BYTE *)(v31 + 64))
        {
          v32 = v31;
          if (*(_QWORD *)v31)
          {
            v33 = sub_1C5F1C250(v114, a2, a3, v30, a5);
            if (*(_BYTE *)(v33 + 64))
            {
              v34 = v33;
              if (*(_QWORD *)v32 == *(_QWORD *)v33)
              {
                v116 = *(_QWORD **)v32;
                v117 = &v119;
                v118 = xmmword_1C677F680;
                if ((_DWORD)v25)
                {
                  if (v25 >= 0x21)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
                    v35 = v118;
                  }
                  else
                  {
                    v35 = 0;
                  }
                  if (v25 != v35)
                    bzero((char *)v117 + v35, v25 - v35);
                  *(_QWORD *)&v118 = v25;
                }
                sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
                if (v117 != &v119)
                  free(v117);
                if ((_DWORD)v25)
                {
                  v36 = 0;
                  while (1)
                  {
                    v37 = *(unsigned __int8 *)(*(_QWORD *)(v32 + 8) + v36);
                    v38 = *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + v36);
                    if (v37 != 255)
                    {
                      v39 = v38 == 255 || v37 == v38;
                      LOBYTE(v38) = *(_BYTE *)(*(_QWORD *)(v32 + 8) + v36);
                      if (!v39)
                        break;
                    }
                    *(_BYTE *)(*((_QWORD *)v17 + 6) + v36++) = v38;
                    if (v25 == v36)
                      return v22;
                  }
                  LOBYTE(v116) = 0;
                  v123 = 0;
                  sub_1C5F1E2EC(v22, (uint64_t)&v116);
                  if (v123 && v117 != &v119)
                    free(v117);
                }
              }
            }
          }
        }
        return v22;
      }
    }
  }
  else
  {
    v116 = &v115;
    v117 = &v113;
    *(_QWORD *)&v118 = 0;
    if (v26 - 53 <= 1)
    {
      v41 = *((_DWORD *)a1 + 5);
      v42 = (v41 & 0x40000000) != 0 ? *(a1 - 1) : (llvm::Type *)&a1[-4 * (v41 & 0x7FFFFFF)];
      v43 = *(llvm::Type ***)v42;
      if (v43)
      {
        v115 = v43;
        v44 = *((_DWORD *)a1 + 5);
        if ((v44 & 0x40000000) != 0)
          v45 = (llvm::Type **)*(a1 - 1);
        else
          v45 = &a1[-4 * (v44 & 0x7FFFFFF)];
        if ((sub_1C4D89F84((uint64_t)&v117, (unsigned __int8 *)v45[4]) & 1) != 0)
        {
          v66 = v113;
          v67 = *((_DWORD *)v113 + 2);
          v68 = v113;
          if (v67 >= 0x41)
          {
            if (v67 - llvm::APInt::countLeadingZerosSlowCase(v113) > 0x40)
              return v22;
            v68 = *(llvm::APInt **)v66;
          }
          if (*(_QWORD *)v68 < (unint64_t)v25)
          {
            if ((a2 & 1) != 0)
              goto LABEL_146;
            v69 = v66;
            if (v67 >= 0x41)
              v69 = *(llvm::APInt **)v66;
            if ((*(_BYTE *)v69 & 7) == 0)
            {
LABEL_146:
              v70 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
              if (*(_BYTE *)(v70 + 64))
              {
                sub_1C5F1E6E4((uint64_t)(v17 + 40), v70);
                v71 = *((_QWORD *)v17 + 6);
                if (*((_BYTE *)a1 + 16) == 53)
                {
                  if (*((_DWORD *)v66 + 2) > 0x40u)
                  {
                    *((_QWORD *)v17 + 7) -= **(_QWORD **)v66;
                    v66 = *(llvm::APInt **)v66;
                  }
                  else
                  {
                    *((_QWORD *)v17 + 7) -= *(_QWORD *)v66;
                  }
                  v102 = *(_QWORD *)v66;
                  v103 = (uint64_t *)(v17 + 48);
                  v104 = v71;
                }
                else
                {
                  v96 = *((_DWORD *)v66 + 2);
                  v97 = v66;
                  if (v96 >= 0x41)
                    v97 = *(llvm::APInt **)v66;
                  v98 = *(_QWORD *)v97;
                  v99 = *((_QWORD *)v17 + 7);
                  v100 = v99 - v98;
                  if (v99 == v98)
                  {
                    v101 = *((_QWORD *)v17 + 6);
                  }
                  else
                  {
                    memmove(*((void **)v17 + 6), (const void *)(v71 + v98), v99 - v98);
                    v101 = *((_QWORD *)v17 + 6);
                    v96 = *((_DWORD *)v66 + 2);
                  }
                  v104 = v71 + v100;
                  *((_QWORD *)v17 + 7) = v71 + v100 - v101;
                  if (v96 >= 0x41)
                    v66 = *(llvm::APInt **)v66;
                  v102 = *(_QWORD *)v66;
                  v103 = (uint64_t *)(v17 + 48);
                }
                sub_1C5F1E86C(v103, v104, v102);
              }
            }
          }
          return v22;
        }
        v26 = *((unsigned __int8 *)a1 + 16);
      }
    }
  }
  v116 = &v115;
  v117 = &v113;
  *(_QWORD *)&v118 = 0;
  if (v26 != 5)
  {
    if (v26 != 56)
      goto LABEL_89;
    if (!*(a1 - 8))
      goto LABEL_89;
    v115 = (llvm::Type **)*(a1 - 8);
    if (!sub_1C4D89F84((uint64_t)&v117, (unsigned __int8 *)*(a1 - 4)))
      goto LABEL_89;
LABEL_87:
    v47 = v113;
    v48 = *((unsigned int *)v113 + 2);
    if (v48 > 0x40)
    {
      v49 = 0;
      v80 = (unint64_t)(v48 + 63) >> 6;
      v81 = *(int8x8_t **)v113;
      do
      {
        v82 = *v81++;
        v49 += vaddlv_u8((uint8x8_t)vcnt_s8(v82));
        --v80;
      }
      while (v80);
    }
    else
    {
      v49 = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v113));
    }
    if ((a2 & 1) != 0 || (v49 & 7) == 0)
    {
      v83 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
      if (*(_BYTE *)(v83 + 64))
      {
        sub_1C5F1E6E4((uint64_t)(v17 + 40), v83);
        if ((_DWORD)v25)
        {
          v84 = 0;
          do
          {
            v85 = v47;
            if (*((_DWORD *)v47 + 2) >= 0x41u)
              v85 = (llvm::APInt *)(*(_QWORD *)v47 + 8 * (v84 >> 6));
            if (((*(_QWORD *)v85 >> v84) & 1) == 0)
              *(_BYTE *)(*((_QWORD *)v17 + 6) + v84) = -1;
            ++v84;
          }
          while (v25 != v84);
        }
      }
    }
    return v22;
  }
  if (*((_WORD *)a1 + 9) == 28)
  {
    v46 = (llvm::Type ***)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    if (*v46)
    {
      v115 = *v46;
      if ((sub_1C4D8A004((uint64_t)&v117, (llvm::Constant *)v46[4]) & 1) != 0)
        goto LABEL_87;
    }
  }
LABEL_89:
  v116 = &v115;
  if (sub_1C4B0378C(&v116, (uint64_t)a1))
  {
    v50 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
    if (*(_BYTE *)(v50 + 64))
    {
      v51 = v50;
      v116 = *(_QWORD **)v50;
      v117 = &v119;
      v118 = xmmword_1C677F680;
      if ((_DWORD)v25)
      {
        if (v25 >= 0x21)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
          v52 = v118;
        }
        else
        {
          v52 = 0;
        }
        if (v25 != v52)
          bzero((char *)v117 + v52, v25 - v52);
        *(_QWORD *)&v118 = v25;
      }
      sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
      if (v117 != &v119)
        free(v117);
      v53 = *v115;
      if ((*((_DWORD *)*v115 + 2) & 0xFE) == 0x12)
        v53 = (llvm::Type *)**((_QWORD **)v53 + 2);
      v54 = llvm::Type::getPrimitiveSizeInBits(v53);
      if (v54)
      {
        for (i = 0; i != v54; ++i)
          *(_BYTE *)(*((_QWORD *)v17 + 6) + i) = *(_BYTE *)(*(_QWORD *)(v51 + 8) + i);
      }
      if (v54 < v25)
      {
        v56 = v54;
        do
          *(_BYTE *)(*((_QWORD *)v17 + 6) + v56++) = -1;
        while (v25 != v56);
      }
    }
  }
  else
  {
    v116 = &v115;
    if (sub_1C4B03864(&v116, (uint64_t)a1))
    {
      v57 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
      if (*(_BYTE *)(v57 + 64))
      {
        v58 = v57;
        v116 = *(_QWORD **)v57;
        v117 = &v119;
        v118 = xmmword_1C677F680;
        if ((_DWORD)v25)
        {
          if (v25 >= 0x21)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
            v59 = v118;
          }
          else
          {
            v59 = 0;
          }
          if (v25 != v59)
            bzero((char *)v117 + v59, v25 - v59);
          *(_QWORD *)&v118 = v25;
        }
        sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
        if (v117 != &v119)
          free(v117);
        if ((_DWORD)v25)
        {
          v60 = 0;
          do
          {
            *(_BYTE *)(*((_QWORD *)v17 + 6) + v60) = *(_BYTE *)(*(_QWORD *)(v58 + 8) + v60);
            ++v60;
          }
          while (v25 != v60);
        }
      }
    }
    else
    {
      LODWORD(v116) = 8;
      v117 = 0;
      *(_QWORD *)&v118 = &v115;
      if (sub_1C4E75A6C((uint64_t)&v116, (uint64_t)a1))
      {
        v61 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
        if (*(_BYTE *)(v61 + 64))
        {
          v62 = v61;
          v116 = *(_QWORD **)v61;
          v117 = &v119;
          v118 = xmmword_1C677F680;
          if ((_DWORD)v25)
          {
            if (v25 >= 0x21)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
              v63 = v118;
            }
            else
            {
              v63 = 0;
            }
            if (v25 != v63)
              bzero((char *)v117 + v63, v25 - v63);
            *(_QWORD *)&v118 = v25;
          }
          sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
          if (v117 != &v119)
            free(v117);
          if ((_DWORD)v25)
          {
            v64 = 0;
            v65 = v25 - 1;
            do
              *(_BYTE *)(*((_QWORD *)v17 + 6) + v65--) = *(_BYTE *)(*(_QWORD *)(v62 + 8) + v64++);
            while (v25 != v64);
          }
        }
      }
      else
      {
        LODWORD(v116) = 9;
        v117 = 0;
        *(_QWORD *)&v118 = &v115;
        if (sub_1C4E75A6C((uint64_t)&v116, (uint64_t)a1))
        {
          v72 = sub_1C5F1C250(v115, a2, a3, (a4 + 1), a5);
          if (*(_BYTE *)(v72 + 64))
          {
            v73 = v72;
            v116 = *(_QWORD **)v72;
            v117 = &v119;
            v118 = xmmword_1C677F680;
            if ((_DWORD)v25)
            {
              if (v25 >= 0x21)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
                v74 = v118;
              }
              else
              {
                v74 = 0;
              }
              if (v25 != v74)
                bzero((char *)v117 + v74, v25 - v74);
              *(_QWORD *)&v118 = v25;
            }
            sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
            if (v117 != &v119)
              free(v117);
            if (v25 >= 8)
            {
              v75 = 0;
              v76 = 0;
              LODWORD(v77) = v25 >> 3;
              v78 = v25 - 8;
              if (v25 >> 3 <= 1)
                v77 = 1;
              else
                v77 = v77;
              do
              {
                for (j = 0; j != 8; ++j)
                  *(_BYTE *)(*((_QWORD *)v17 + 6) + (v78 + j)) = *(_BYTE *)(*(_QWORD *)(v73 + 8) + v75 + j);
                ++v76;
                v78 -= 8;
                v75 += 8;
              }
              while (v76 != v77);
            }
          }
        }
        else
        {
          LODWORD(v116) = 148;
          v117 = 0;
          *(_QWORD *)&v118 = &v115;
          *((_QWORD *)&v118 + 1) = 1;
          v119 = &v114;
          v120 = 2;
          v121 = &v113;
          v122 = 0;
          if (!sub_1C5F1EA0C((uint64_t)&v116, (uint64_t)a1))
          {
            v105 = 149;
            v106 = 0;
            v107 = &v115;
            v108 = 1;
            v109 = &v114;
            v110 = 2;
            v111 = &v113;
            v112 = 0;
            if (!sub_1C5F1EA0C((uint64_t)&v105, (uint64_t)a1))
            {
LABEL_32:
              if (!*a5)
              {
                *a5 = 1;
                v116 = a1;
                v117 = &v119;
                v118 = xmmword_1C677F680;
                if ((_DWORD)v25)
                {
                  if (v25 >= 0x21)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
                    v27 = v118;
                  }
                  else
                  {
                    v27 = 0;
                  }
                  if (v25 != v27)
                    bzero((char *)v117 + v27, v25 - v27);
                  *(_QWORD *)&v118 = v25;
                }
                sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
                if (v117 != &v119)
                  free(v117);
                if ((_DWORD)v25)
                {
                  v28 = 0;
                  do
                  {
                    *(_BYTE *)(*((_QWORD *)v17 + 6) + v28) = v28;
                    ++v28;
                  }
                  while (v25 != v28);
                }
              }
              return v22;
            }
          }
          v86 = llvm::APInt::urem((uint64_t **)v113, v25);
          if (*((_DWORD *)*(a1 - 4) + 9) == 149)
            v87 = v25 - v86;
          else
            v87 = v86;
          if ((a2 & 1) != 0 || (v87 & 7) == 0)
          {
            v88 = (a4 + 1);
            v89 = sub_1C5F1C250(v115, a2, a3, v88, a5);
            if (*(_BYTE *)(v89 + 64))
            {
              v90 = v89;
              if (*(_QWORD *)v89)
              {
                v91 = sub_1C5F1C250(v114, a2, a3, v88, a5);
                if (*(_BYTE *)(v91 + 64))
                {
                  v92 = v91;
                  if (*(_QWORD *)v90 == *(_QWORD *)v91)
                  {
                    v116 = *(_QWORD **)v90;
                    v117 = &v119;
                    v118 = xmmword_1C677F680;
                    if ((_DWORD)v25)
                    {
                      if (v25 >= 0x21)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v117, &v119, v25, 1);
                        v93 = v118;
                      }
                      else
                      {
                        v93 = 0;
                      }
                      if (v25 != v93)
                        bzero((char *)v117 + v93, v25 - v93);
                      *(_QWORD *)&v118 = v25;
                    }
                    sub_1C5F1E4FC((_QWORD *)v17 + 5, &v116);
                    if (v117 != &v119)
                      free(v117);
                    if ((_DWORD)v25 != (_DWORD)v87)
                    {
                      v94 = 0;
                      do
                      {
                        *(_BYTE *)(*((_QWORD *)v17 + 6) + (v87 + v94)) = *(_BYTE *)(*(_QWORD *)(v90 + 8)
                                                                                                + v94);
                        ++v94;
                      }
                      while ((_DWORD)v25 - (_DWORD)v87 != v94);
                    }
                    if ((_DWORD)v87)
                    {
                      for (k = 0; k != v87; ++k)
                        *(_BYTE *)(*((_QWORD *)v17 + 6) + k) = *(_BYTE *)(*(_QWORD *)(v92 + 8)
                                                                        + (v25 - v87 + k));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v22;
}

uint64_t llvm::canReplaceOperandWithVariable(llvm *this, const llvm::Instruction *a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t ***v20;
  int v21;
  char *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  llvm *v40;
  void *v41;
  unint64_t v42;
  char *v43;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  __int16 v51;
  void *__p[2];
  char v53;
  int v54;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 216;
  v51 = 260;
  v49 = (char *)v4;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v49);
  if ((v54 - 48) >= 2)
  {
    if (v54 != 27)
      goto LABEL_25;
    v18 = *((unsigned __int8 *)this + 16);
    if ((v2 != 1 || v18 != 89) && (v2 != 2 || v18 != 90))
      goto LABEL_25;
LABEL_21:
    v19 = 0;
    goto LABEL_26;
  }
  v5 = *((unsigned __int8 *)this + 16) - 33;
  v6 = v5 > 0x33;
  v7 = (1 << v5) & 0x8000000000041;
  if (v6 || v7 == 0)
    goto LABEL_25;
  v9 = (uint64_t ***)*((_QWORD *)this - 4);
  if (!v9 || *((_BYTE *)v9 + 16) || v9[3] != *((uint64_t ***)this + 9) || (*((_BYTE *)v9 + 23) & 0x10) == 0)
    goto LABEL_25;
  v10 = ***v9;
  v11 = *(_QWORD *)(v10 + 152);
  v12 = *(unsigned int *)(v10 + 168);
  if (!(_DWORD)v12)
    goto LABEL_22;
  LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  v14 = (uint64_t ****)(v11 + 16 * v13);
  v15 = *v14;
  if (*v14 != v9)
  {
    v16 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(uint64_t ****)(v11 + 16 * v13);
      if (v15 == v9)
      {
        v14 = (uint64_t ****)(v11 + 16 * v13);
        goto LABEL_23;
      }
    }
LABEL_22:
    v14 = (uint64_t ****)(v11 + 16 * v12);
  }
LABEL_23:
  v20 = v14[1];
  if ((unint64_t)*v20 >= 4 && *((_DWORD *)v20 + 4) == 779250017)
    goto LABEL_21;
LABEL_25:
  v19 = 1;
LABEL_26:
  if (v53 < 0)
    operator delete(__p[0]);
  if ((_DWORD)v19)
  {
    v21 = *((_DWORD *)this + 5);
    if ((v21 & 0x40000000) != 0)
      v22 = (char *)*((_QWORD *)this - 1);
    else
      v22 = (char *)this - 32 * (v21 & 0x7FFFFFF);
    v23 = *(unsigned __int8 **)&v22[32 * v2];
    if (*(_BYTE *)(*(_QWORD *)v23 + 8) == 9)
      return 0;
    if (v23[16] > 0x14u)
      return 1;
    v24 = *((unsigned __int8 *)this + 16);
    v19 = 1;
    if (v24 <= 0x3D)
    {
      if (v24 == 31)
        return v2 == 0;
      if (v24 != 33)
      {
        if (v24 != 59)
          return v19;
        if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) == 16)
        {
          v25 = *((_QWORD *)this + 5);
          v26 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 80);
          v27 = v26 ? v26 - 24 : 0;
          if (v25 == v27)
            return (*((unsigned __int16 *)this + 9) >> 6) & 1;
        }
        return 1;
      }
LABEL_46:
      v28 = *((_QWORD *)this - 4);
      v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 24)
        return 0;
      if (v21 < 0)
      {
        v45 = (char *)this - 32 * (v21 & 0x7FFFFFF);
        v46 = *((_QWORD *)v45 - 1);
        if ((v46 & 0xFFFFFFFF0) != 0 && *(_DWORD *)&v45[-v46] <= v2 && *((_DWORD *)v45 - 3) > v2)
          return 0;
      }
      if (v24 == 84)
        v30 = 0;
      else
        v30 = 2;
      v31 = 0;
      v32 = -(uint64_t)(v21 & 0x7FFFFFF);
      if (v21 < 0)
      {
        v47 = (char *)this - 32 * (v21 & 0x7FFFFFF);
        v48 = *((_QWORD *)v47 - 1);
        if ((v48 & 0xFFFFFFFF0) != 0)
          v31 = *((_DWORD *)v47 - 3) - *(_DWORD *)&v47[-v48];
        else
          v31 = 0;
      }
      v33 = (-32 * v30 + 32 * (unint64_t)-v31 - 32 * v32 - 32) >> 5;
      v35 = v24 == 84 && v29 == 0;
      if (v33 <= v2)
      {
        if (!v35 || *(_QWORD *)(v28 + 24) != *((_QWORD *)this + 9))
          return 1;
        return (*(_BYTE *)(v28 + 33) & 0x20) == 0;
      }
      if (v35)
      {
        v36 = *(_QWORD *)(v28 + 24);
        v37 = *((_QWORD *)this + 9);
        if (v36 == v37)
        {
          if ((*(_BYTE *)(v28 + 33) & 0x20) != 0 && *(_DWORD *)(v36 + 12) - 1 <= v2)
            return *(_DWORD *)(v28 + 36) == 129;
LABEL_79:
          if (*(_DWORD *)(v28 + 36) != 151)
            return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
          return 0;
        }
      }
      else
      {
        if (*(_BYTE *)(v28 + 16))
          return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
        v36 = *(_QWORD *)(v28 + 24);
        v37 = *((_QWORD *)this + 9);
      }
      if (v36 == v37)
        goto LABEL_79;
      return llvm::CallBase::paramHasAttr((uint64_t)this, v2, 9) ^ 1;
    }
    switch(*((_BYTE *)this + 16))
    {
      case 'T':
        goto LABEL_46;
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return v19;
      case '[':
        return v2 != 2;
      case '\\':
        return v2 == 0;
      case ']':
        return v2 < 2;
      default:
        if (v24 != 62)
          return v19;
        if (!v2)
          return 1;
        v39 = *((_QWORD *)this + 8);
        v40 = (v21 & 0x40000000) != 0 ? (llvm *)*((_QWORD *)this - 1) : (llvm *)((char *)this - 32 * (v21 & 0x7FFFFFF));
        v41 = (char *)v40 + 32;
        v49 = (char *)v40 + 32;
        v50 = v39 | 4;
        __p[0] = (char *)v40 + 32;
        __p[1] = (void *)(v39 | 4);
        v42 = v2 + 1;
        do
        {
          sub_1C4774E38((uint64_t)__p);
          --v42;
        }
        while (v42 > 1);
        v43 = (char *)__p[0];
        if (v41 == __p[0])
          return 1;
        do
        {
          v19 = (v50 >> 2) & 1;
          if ((v50 & 4) == 0)
            break;
          sub_1C4774E38((uint64_t)&v49);
        }
        while (v49 != v43);
        break;
    }
  }
  return v19;
}

llvm::Value *llvm::invertCondition(llvm *this, llvm::Value *a2)
{
  llvm::Value *v4;
  unsigned int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unsigned int v10;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm *v18;
  int v19;
  int v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *Not;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::ValueSymbolTable *v38;
  char *v39;
  _QWORD v40[3];
  __int16 v41;
  uint64_t v42;

  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
    return (llvm::Value *)llvm::ConstantExpr::getNot((llvm::Constant **)this, a2);
  v42 = 0;
  v39 = (char *)&v42;
  if (!sub_1C4D9EC28((_QWORD **)&v39, 30, (uint64_t)this))
  {
    v5 = *((unsigned __int8 *)this + 16);
    if (v5 <= 0x1B)
      v6 = 0;
    else
      v6 = this;
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 5);
    }
    else
    {
      v7 = 0;
      if (this && v5 == 21)
      {
        v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 80);
        if (v8)
          v7 = v8 - 24;
        else
          v7 = 0;
      }
    }
    for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 8))
    {
      v4 = *(llvm::Value **)(i + 24);
      v10 = *((unsigned __int8 *)v4 + 16);
      if (v4 && v10 >= 0x1C && *((_QWORD *)v4 + 5) == v7)
      {
        v39 = (char *)this;
        if (v10 == 58)
        {
          v12 = this;
          if (*((llvm **)v4 - 8) == this)
          {
            if ((sub_1C4D9ED34((uint64_t)v40, *((llvm::Constant **)v4 - 4)) & 1) != 0)
              return v4;
            v12 = (llvm *)v39;
          }
          if (v12 == *((llvm **)v4 - 4) && (sub_1C4D9ED34((uint64_t)v40, *((llvm::Constant **)v4 - 8)) & 1) != 0)
            return v4;
        }
      }
    }
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v23 = 0;
      v22 = &byte_1C871356D;
      goto LABEL_39;
    }
    v13 = ***(_QWORD ***)this;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((this >> 4) ^ (this >> 9));
      v17 = v14 + 16 * v16;
      v18 = *(llvm **)v17;
      if (*(llvm **)v17 == this)
      {
LABEL_38:
        v21 = *(_QWORD **)(v17 + 8);
        v24 = *v21;
        v22 = (char *)(v21 + 2);
        v23 = v24;
LABEL_39:
        v41 = 773;
        v39 = v22;
        v40[0] = v23;
        v40[1] = ".inv";
        Not = llvm::BinaryOperator::CreateNot((uint64_t)this, (llvm::Type *)&v39, 0);
        v4 = Not;
        if (v6 && *((_BYTE *)v6 + 16) != 83)
        {
          sub_1C53DF664((_QWORD *)(*((_QWORD *)v6 + 5) + 40), (uint64_t)v6 + 24, (uint64_t)Not);
        }
        else
        {
          v26 = v7 + 40;
          for (j = *(_QWORD *)(v7 + 48); j != v26; j = *(_QWORD *)(j + 8))
          {
            v28 = j - 24;
            if (!j)
              v28 = 0;
            if (*(_BYTE *)(v28 + 16) != 83)
            {
              v29 = *(unsigned __int8 *)(j - 8) - 38;
              v30 = v29 > 0x38;
              v31 = (1 << v29) & 0x100060000000001;
              if (v30 || v31 == 0)
                v26 = j;
              else
                v26 = *(_QWORD *)(j + 8);
              break;
            }
          }
          if (v26)
            v33 = v26 - 24;
          else
            v33 = 0;
          v34 = *(_QWORD *)(v33 + 40);
          *((_QWORD *)Not + 5) = v34;
          *(_WORD *)(v34 + 18) &= ~0x8000u;
          if ((*((_BYTE *)Not + 23) & 0x10) != 0)
          {
            v37 = *(_QWORD *)(v34 + 56);
            if (v37)
            {
              v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
              if (v38)
                llvm::ValueSymbolTable::reinsertValue(v38, v4);
            }
          }
          v36 = *(_QWORD *)(v33 + 24);
          v35 = (_QWORD *)(v33 + 24);
          *((_QWORD *)v4 + 3) = v36;
          *((_QWORD *)v4 + 4) = v35;
          *(_QWORD *)(v36 + 8) = (char *)v4 + 24;
          *v35 = (char *)v4 + 24;
        }
        return v4;
      }
      v19 = 1;
      while (v18 != (llvm *)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(llvm **)(v14 + 16 * v16);
        if (v18 == this)
        {
          v17 = v14 + 16 * v16;
          goto LABEL_38;
        }
      }
    }
    v17 = v14 + 16 * v15;
    goto LABEL_38;
  }
  return (llvm::Value *)v42;
}

uint64_t llvm::inferAttributesFromOthers(llvm *this, llvm::Function *a2)
{
  _BYTE *v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)((char *)this + 112);
  v3 = (_BYTE *)*((_QWORD *)this + 14);
  if (!v3)
    return 0;
  if ((v3[16] & 8) != 0 || (v3[17] & 0x10) == 0 || (v3[12] & 0x40) != 0)
  {
    v5 = 0;
  }
  else
  {
    v3 = (_BYTE *)llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 35);
    *((_QWORD *)this + 14) = v3;
    v5 = 1;
    if (!v3)
      return v5;
  }
  if ((v3[15] & 2) != 0
    || (v3[17] & 0x30) == 0
    || (v3 = (_BYTE *)llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 25),
        *((_QWORD *)this + 14) = v3,
        v5 = 1,
        v3))
  {
    if ((v3[14] & 1) == 0 && (v3[20] & 2) != 0)
    {
      *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)this, -1, 16);
      return 1;
    }
  }
  return v5;
}

uint64_t sub_1C5F1D7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v3 = a1;
  if (*(unsigned __int8 *)(a1 + 16) - 11 >= 2)
  {
    v23 = a2;
    v24 = a1;
    v11 = *(_DWORD *)(a3 + 16);
    if (v11)
    {
      v12 = v11 - 1;
      v13 = v12 & ((a2 >> 4) ^ (a2 >> 9));
      v14 = (_QWORD *)(*(_QWORD *)a3 + 16 * v13);
      v15 = *v14;
      if (*v14 == a2)
        return v3;
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = v14;
        v19 = v13 + v17++;
        v13 = v19 & v12;
        v14 = (_QWORD *)(*(_QWORD *)a3 + 16 * v13);
        v15 = *v14;
        if (*v14 == a2)
          return v3;
      }
      if (v16)
        v20 = v16;
      else
        v20 = v14;
    }
    else
    {
      v20 = 0;
    }
    v21 = sub_1C4ECCA58(a3, (uint64_t)&v23, &v23, v20);
    *v21 = v23;
    v21[1] = v24;
    return v3;
  }
  v4 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a3;
    LODWORD(v6) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(*(_QWORD *)a3 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
    {
LABEL_8:
      if (v7 != (uint64_t *)(v5 + 16 * v4))
        return v7[1];
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v4 - 1);
        v8 = *(_QWORD *)(v5 + 16 * v6);
        if (v8 == a2)
        {
          v7 = (uint64_t *)(v5 + 16 * v6);
          goto LABEL_8;
        }
      }
    }
  }
  return v3;
}

_QWORD *sub_1C5F1D930(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Instruction **v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::Instruction **v16;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (llvm::Instruction **)v4;
      do
      {
        if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = 0;
          sub_1C5F1DA5C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v16);
          *v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_1C5F1DA5C(uint64_t a1, int a2, llvm::Instruction **a3, const llvm::Instruction ***a4)
{
  llvm::Instruction *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  const llvm::Instruction **v11;
  uint64_t result;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  const llvm::Instruction **v21;
  int v22;
  unsigned int v23;
  int i;
  unsigned __int8 *v25;
  const llvm::Instruction *v26;
  BOOL v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v95;
  unint64_t v96;

  if (a2)
  {
    v7 = *a3;
    v8 = *((_DWORD *)*a3 + 5);
    if ((v8 & 0x40000000) != 0)
    {
      v10 = (uint64_t *)*((_QWORD *)v7 - 1);
      v9 = v8 & 0x7FFFFFF;
    }
    else
    {
      v9 = v8 & 0x7FFFFFF;
      v10 = (uint64_t *)((char *)v7 - 32 * v9);
    }
    v96 = sub_1C564700C(v10, &v10[4 * v9]);
    v13 = *((_DWORD *)v7 + 5);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = (char *)*((_QWORD *)v7 - 1);
      v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (char *)v7 - 32 * v14;
    }
    v16 = *((unsigned int *)v7 + 15);
    v17 = &v15[32 * v16];
    v18 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v18 & 1) == 0)
    {
      v88 = &v15[32 * v16];
      v89 = v15;
      v90 = *((unsigned int *)v7 + 15);
      v91 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v16 = v90;
      v15 = v89;
      v92 = v91;
      v17 = v88;
      if (v92)
      {
        v93 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v93 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v93;
        __cxa_guard_release(&qword_1ED7EAC88);
        v16 = v90;
        v15 = v89;
        v17 = v88;
      }
    }
    v19 = 8 * v14;
    if (v14 > 8)
    {
      v29 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                 * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v30 = __ROR8__(qword_1ED7EAC80 ^ 0xB492B66FBE98F273, 49);
      v31 = qword_1ED7EAC80 ^ ((unint64_t)qword_1ED7EAC80 >> 47);
      v32 = qword_1ED7EAC80 ^ (((0x9DDFEA08EB382D69 * (v31 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80))) ^ qword_1ED7EAC80) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80)));
      v33 = *((_QWORD *)v17 + 6);
      v34 = *((_QWORD *)v17 + 7);
      v35 = *((_QWORD *)v17 + 1);
      v36 = v30 + qword_1ED7EAC80 + v35;
      v37 = *((_QWORD *)v17 + 5);
      v38 = v37 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v33 - 0x4B6D499041670D8CLL * qword_1ED7EAC80, 42);
      v39 = *(_QWORD *)v17 - 0x6D8ED9027DD26057 * qword_1ED7EAC80;
      v41 = *((_QWORD *)v17 + 2);
      v40 = *((_QWORD *)v17 + 3);
      v42 = v39 + v35 + v41;
      v43 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v32) ^ ((0x9DDFEA08EB382D69 * v32) >> 47));
      v44 = (0xB492B66FBE98F273 * __ROR8__(v36, 37)) ^ v43;
      v45 = __ROR8__(v42, 44) + v39 + __ROR8__(v44 + v31 + v39 + v40, 21);
      v46 = __ROR8__(v31 - 0x622015F714C7D297 * (v29 ^ (v29 >> 47)), 33);
      v47 = 0xB492B66FBE98F273 * v46;
      v48 = v42 + v40;
      v49 = v43 + *((_QWORD *)v17 + 4) - 0x4B6D499041670D8DLL * v46;
      v50 = v37 + v33 + v49;
      v51 = __ROR8__(v50, 44) + v49 + __ROR8__(v41 + v38 + v34 + v49, 21);
      v52 = v50 + v34;
      v53 = (v19 & 0x3FFFFFC0) - 64;
      if (v53)
      {
        v74 = &v15[32 * v16 + 120];
        do
        {
          v75 = v38 + v48 + v47;
          v76 = *((_QWORD *)v74 - 6);
          v78 = *((_QWORD *)v74 - 2);
          v77 = *((_QWORD *)v74 - 1);
          v38 = v78 + v48 - 0x4B6D499041670D8DLL * __ROR8__(v38 + v45 + v77, 42);
          v79 = v44 + v52;
          v80 = *((_QWORD *)v74 - 7) - 0x4B6D499041670D8DLL * v45;
          v81 = *((_QWORD *)v74 - 4);
          v82 = *((_QWORD *)v74 - 5);
          v83 = v80 + v76 + v82;
          v54 = (0xB492B66FBE98F273 * __ROR8__(v75 + v76, 37)) ^ v51;
          v47 = 0xB492B66FBE98F273 * __ROR8__(v79, 33);
          v45 = __ROR8__(v83, 44) + v80 + __ROR8__(v54 + v52 + v80 + v81, 21);
          v48 = v83 + v81;
          v84 = v47 + v51 + *((_QWORD *)v74 - 3);
          v85 = *(_QWORD *)v74;
          v74 += 64;
          v86 = __ROR8__(v38 + v82 + v84 + v85, 21);
          v87 = v78 + v77 + v84;
          v51 = v86 + v84 + __ROR8__(v87, 44);
          v52 = v87 + v85;
          v44 = v54;
          v53 -= 64;
        }
        while (v53);
      }
      else
      {
        v54 = v44;
      }
      if ((v14 & 7) != 0)
      {
        v55 = &v17[8 * v14];
        v56 = *((_QWORD *)v55 - 7);
        v57 = *((_QWORD *)v55 - 2);
        v58 = *((_QWORD *)v55 - 1);
        v59 = v52 + v54;
        v60 = (0xB492B66FBE98F273 * __ROR8__(v38 + v47 + v48 + v56, 37)) ^ v51;
        v62 = *((_QWORD *)v55 - 4);
        v61 = *((_QWORD *)v55 - 3);
        v38 = v61 + v48 - 0x4B6D499041670D8DLL * __ROR8__(v38 + v45 + v57, 42);
        v63 = v60 + v52;
        v64 = *((_QWORD *)v55 - 8) - 0x4B6D499041670D8DLL * v45;
        v67 = v55 - 48;
        v66 = *((_QWORD *)v55 - 6);
        v65 = *((_QWORD *)v67 + 1);
        v68 = v64 + v56 + v66;
        v47 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
        v45 = __ROR8__(v68, 44) + v64 + __ROR8__(v63 + v64 + v65, 21);
        v48 = v68 + v65;
        v69 = v47 + v51 + v62;
        v70 = v61 + v57 + v69;
        v51 = __ROR8__(v70, 44) + v69 + __ROR8__(v38 + v66 + v69 + v58, 21);
        v52 = v70 + v58;
        v54 = v60;
      }
      v71 = 0x9DDFEA08EB382D69
          * (v51 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v51)));
      v72 = v47 - 0x5B6A4C820B386C68 * v14 - 0x622015F714C7D297 * (v71 ^ (v71 >> 47));
      v73 = 0x9DDFEA08EB382D69
          * ((v54
            - 0x4B6D499041670D8DLL * (v38 ^ (v38 >> 47))
            - 0x622015F714C7D297
            * ((0x9DDFEA08EB382D69
              * (v52 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v52)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v52)))) ^ ((0x9DDFEA08EB382D69 * (v52 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v52)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v52)))) >> 47))) ^ v72);
      v20 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) ^ ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) >> 47));
    }
    else
    {
      v20 = sub_1C49CE808(v17, v19, qword_1ED7EAC80);
    }
    v95 = v20;
    v21 = 0;
    v22 = a2 - 1;
    v23 = (a2 - 1) & sub_1C5BE8AA8((uint64_t *)&v96, (uint64_t *)&v95);
    for (i = 1; ; ++i)
    {
      v11 = (const llvm::Instruction **)(a1 + 8 * v23);
      v25 = (unsigned __int8 *)*a3;
      v26 = *v11;
      if (((unint64_t)*a3 | 0x1000) == 0xFFFFFFFFFFFFF000
        || ((unint64_t)v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (v25 == (unsigned __int8 *)v26)
          goto LABEL_27;
      }
      else
      {
        if (llvm::Instruction::isIdenticalToWhenDefined(*a3, *v11)
          && (*((unsigned __int8 *)v26 + 17) ^ v25[17]) < 2)
        {
LABEL_27:
          result = 1;
          goto LABEL_28;
        }
        v26 = *v11;
      }
      if (v26 == (const llvm::Instruction *)-4096)
        break;
      if (v21)
        v27 = 0;
      else
        v27 = v26 == (const llvm::Instruction *)-8192;
      if (v27)
        v21 = (const llvm::Instruction **)(a1 + 8 * v23);
      v28 = v23 + i;
      v23 = v28 & v22;
    }
    result = 0;
    if (v21)
      v11 = v21;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_28:
  *a4 = v11;
  return result;
}

uint64_t sub_1C5F1DF70(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63AEF60(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C63AEF60(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5F1E0E8(uint64_t a1, llvm::Instruction **a2, const llvm::Instruction ***a3)
{
  uint64_t v5;
  int v6;
  llvm::Instruction *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  const llvm::Instruction **v11;
  int v12;
  unsigned int v13;
  int i;
  const llvm::Instruction **v15;
  unsigned __int8 *v16;
  const llvm::Instruction *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v15 = 0;
      result = 0;
      goto LABEL_30;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = *a2;
  v8 = *((_DWORD *)*a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)v7 - 1);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)((char *)v7 - 32 * v9);
  }
  v11 = 0;
  v12 = v6 - 1;
  v13 = (v6 - 1) & sub_1C564700C(v10, &v10[4 * v9]);
  for (i = 1; ; ++i)
  {
    v15 = (const llvm::Instruction **)(v5 + 8 * v13);
    v16 = (unsigned __int8 *)*a2;
    v17 = *v15;
    if (*v15 == (const llvm::Instruction *)-8192
      || v16 == (unsigned __int8 *)-4096
      || v16 == (unsigned __int8 *)-8192
      || v17 == (const llvm::Instruction *)-4096)
    {
      if (v16 == (unsigned __int8 *)v17)
        goto LABEL_25;
    }
    else
    {
      if (llvm::Instruction::isIdenticalToWhenDefined(*a2, *v15)
        && (*((unsigned __int8 *)v17 + 17) ^ v16[17]) < 2)
      {
LABEL_25:
        result = 1;
        goto LABEL_30;
      }
      v17 = *v15;
    }
    if (v17 == (const llvm::Instruction *)-4096)
      break;
    if (v11)
      v18 = 0;
    else
      v18 = v17 == (const llvm::Instruction *)-8192;
    if (v18)
      v11 = (const llvm::Instruction **)(v5 + 8 * v13);
    v19 = v13 + i;
    v13 = v19 & v12;
  }
  result = 0;
  if (v11)
    v15 = v11;
LABEL_30:
  *a3 = v15;
  return result;
}

uint64_t sub_1C5F1E230(uint64_t result, llvm::Instruction **a2, llvm::Instruction **a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const llvm::Instruction **v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5F1E0E8((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C5F1E2EC(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  size_t *v13;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  void *v19;
  void **v20;
  size_t v21;
  void **v22;

  v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = (void **)(a1 + 8);
    if (v3)
    {
      if (a1 != a2)
      {
        v6 = *(const void **)(a2 + 8);
        if (v6 == (const void *)(a2 + 32))
        {
          v7 = *(_QWORD *)(a2 + 16);
          v8 = *(_QWORD *)(a1 + 16);
          if (v8 >= v7)
          {
            if (v7)
              memmove(*v5, v6, *(_QWORD *)(a2 + 16));
          }
          else
          {
            if (*(_QWORD *)(a1 + 24) < v7)
            {
              *(_QWORD *)(a1 + 16) = 0;
              v20 = (void **)(a1 + 8);
              llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 8, (void *)(a1 + 32), v7, 1);
              v5 = v20;
              v8 = 0;
            }
            else if (v8)
            {
              v21 = *(_QWORD *)(a1 + 16);
              memmove(*v5, v6, v8);
              v8 = v21;
              v5 = (void **)(a1 + 8);
            }
            v9 = *(_QWORD *)(a2 + 16);
            if (v8 != v9)
              memcpy((char *)*v5 + v8, (const void *)(*(_QWORD *)(a2 + 8) + v8), v9 - v8);
          }
          *(_QWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a2 + 16) = 0;
        }
        else
        {
          v19 = *(void **)(a1 + 8);
          if (v19 != (void *)(a1 + 32))
          {
            free(v19);
            v6 = *(const void **)(a2 + 8);
          }
          *(_QWORD *)(a1 + 8) = v6;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 8) = a2 + 32;
        }
      }
      return a1;
    }
    v11 = (void *)(a1 + 32);
    *(_QWORD *)(a1 + 8) = a1 + 32;
    *(_OWORD *)(a1 + 16) = xmmword_1C677F680;
    v13 = (size_t *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 16);
    if (v12)
      v14 = a1 == a2;
    else
      v14 = 1;
    if (v14)
    {
LABEL_26:
      *(_BYTE *)(a1 + 64) = 1;
      return a1;
    }
    v15 = *(_QWORD *)(a2 + 8);
    v16 = (const void *)(a2 + 32);
    if (v15 != a2 + 32)
    {
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = v16;
      *(_QWORD *)(a2 + 24) = 0;
      goto LABEL_25;
    }
    if (v12 >= 0x21)
    {
      v22 = (void **)(a1 + 8);
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 8, (void *)(a1 + 32), v12, 1);
      v17 = *v13;
      if (!*v13)
        goto LABEL_24;
      v16 = *(const void **)(a2 + 8);
      v11 = *v22;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 16);
    }
    memcpy(v11, v16, v17);
LABEL_24:
    *(_QWORD *)(a1 + 16) = v12;
LABEL_25:
    *v13 = 0;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v10 = *(void **)(a1 + 8);
    if (v10 != (void *)(a1 + 32))
      free(v10);
    *(_BYTE *)(a1 + 64) = 0;
  }
  return a1;
}

_QWORD *sub_1C5F1E4FC(_QWORD *a1, _QWORD *a2)
{
  int v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  size_t *v12;
  BOOL v13;
  _QWORD *v14;
  const void *v15;
  size_t v16;
  _QWORD *v18;
  void **v19;
  void **v20;
  size_t v21;
  void **v22;

  v4 = *((unsigned __int8 *)a1 + 64);
  *a1 = *a2;
  v5 = (void **)(a1 + 1);
  if (!v4)
  {
    v10 = a1 + 4;
    a1[1] = a1 + 4;
    *((_OWORD *)a1 + 1) = xmmword_1C677F680;
    v12 = a2 + 2;
    v11 = a2[2];
    if (v11)
      v13 = a1 == a2;
    else
      v13 = 1;
    if (v13)
      goto LABEL_21;
    v14 = (_QWORD *)a2[1];
    v15 = a2 + 4;
    if (v14 != a2 + 4)
    {
      a1[1] = v14;
      a1[2] = v11;
      a1[3] = a2[3];
      a2[1] = v15;
      a2[3] = 0;
      goto LABEL_20;
    }
    if (v11 >= 0x21)
    {
      v22 = (void **)(a1 + 1);
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(a1 + 1), a1 + 4, v11, 1);
      v16 = *v12;
      if (!*v12)
        goto LABEL_19;
      v15 = (const void *)a2[1];
      v10 = *v22;
    }
    else
    {
      v16 = a2[2];
    }
    memcpy(v10, v15, v16);
LABEL_19:
    a1[2] = v11;
LABEL_20:
    *v12 = 0;
LABEL_21:
    *((_BYTE *)a1 + 64) = 1;
    return a1;
  }
  if (a1 != a2)
  {
    v6 = (_QWORD *)a2[1];
    if (v6 == a2 + 4)
    {
      v7 = a2[2];
      v8 = a1[2];
      if (v8 >= v7)
      {
        if (v7)
          memmove(*v5, v6, a2[2]);
      }
      else
      {
        if (a1[3] < v7)
        {
          a1[2] = 0;
          v20 = (void **)(a1 + 1);
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(a1 + 1), a1 + 4, v7, 1);
          v5 = v20;
          v8 = 0;
        }
        else if (v8)
        {
          v19 = (void **)(a1 + 1);
          v21 = a1[2];
          memmove(*v5, v6, v8);
          v8 = v21;
          v5 = v19;
        }
        v9 = a2[2];
        if (v8 != v9)
          memcpy((char *)*v5 + v8, (const void *)(a2[1] + v8), v9 - v8);
      }
      a1[2] = v7;
      a2[2] = 0;
    }
    else
    {
      v18 = (_QWORD *)a1[1];
      if (v18 != a1 + 4)
      {
        free(v18);
        v6 = (_QWORD *)a2[1];
      }
      a1[1] = v6;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a2[2] = 0;
      a2[3] = 0;
      a2[1] = a2 + 4;
    }
  }
  return a1;
}

uint64_t sub_1C5F1E6E4(uint64_t a1, uint64_t a2)
{
  int v3;
  void **v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  size_t v15;

  v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = (void **)(a1 + 8);
    if (v3)
    {
      if (a1 != a2)
      {
        v6 = *(_QWORD *)(a2 + 16);
        v7 = *(_QWORD *)(a1 + 16);
        if (v7 >= v6)
        {
          if (v6)
            memmove(*v5, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16));
        }
        else
        {
          if (*(_QWORD *)(a1 + 24) < v6)
          {
            *(_QWORD *)(a1 + 16) = 0;
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 8, (void *)(a1 + 32), v6, 1);
            v7 = 0;
          }
          else if (v7)
          {
            v15 = *(_QWORD *)(a1 + 16);
            memmove(*v5, *(const void **)(a2 + 8), v7);
            v7 = v15;
          }
          v8 = *(_QWORD *)(a2 + 16);
          if (v7 != v8)
            memcpy((char *)*v5 + v7, (const void *)(*(_QWORD *)(a2 + 8) + v7), v8 - v7);
        }
        *(_QWORD *)(a1 + 16) = v6;
      }
      return a1;
    }
    v10 = (void *)(a1 + 32);
    *(_QWORD *)(a1 + 8) = a1 + 32;
    *(_OWORD *)(a1 + 16) = xmmword_1C677F680;
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
      v12 = a1 == a2;
    else
      v12 = 1;
    if (v12)
    {
LABEL_23:
      *(_BYTE *)(a1 + 64) = 1;
      return a1;
    }
    if (v11 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 8, (void *)(a1 + 32), *(_QWORD *)(a2 + 16), 1);
      v13 = *(_QWORD *)(a2 + 16);
      if (!v13)
        goto LABEL_22;
      v10 = *v5;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 16);
    }
    memcpy(v10, *(const void **)(a2 + 8), v13);
LABEL_22:
    *(_QWORD *)(a1 + 16) = v11;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = *(void **)(a1 + 8);
    if (v9 != (void *)(a1 + 32))
      free(v9);
    *(_BYTE *)(a1 + 64) = 0;
  }
  return a1;
}

uint64_t *sub_1C5F1E86C(uint64_t *result, uint64_t a2, size_t __len)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;

  v4 = result;
  v6 = *result;
  v5 = result[1];
  v7 = v5 + __len;
  v8 = result[2];
  if (*result + v5 == a2)
  {
    if (v7 > v8)
    {
      result = (uint64_t *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v7, 1);
      v6 = *v4;
      v5 = v4[1];
    }
    if (__len)
    {
      result = (uint64_t *)memset((void *)(v6 + v5), 255, __len);
      v5 = v4[1];
    }
    v4[1] = v5 + __len;
  }
  else
  {
    v9 = a2 - v6;
    if (v7 > v8)
    {
      v17 = a2 - v6;
      result = (uint64_t *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v7, 1);
      v9 = v17;
      v6 = *v4;
      v5 = v4[1];
    }
    v10 = (char *)(v6 + v9);
    v11 = (char *)(v6 + v5);
    v12 = v5 - v9;
    if (__len > v5 - v9)
    {
      v4[1] = v5 + __len;
      if (v9 != v5)
      {
        memcpy((void *)(v6 + __len + v9), (const void *)(v6 + v9), v5 - v9);
        result = (uint64_t *)memset(v10, 255, v12);
      }
      v16 = __len - v12;
      if (__len != v12)
      {
        v15 = v11;
        return (uint64_t *)memset(v15, 255, v16);
      }
    }
    else
    {
      if (v4[2] < v5 + __len)
      {
        result = (uint64_t *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v4, v4 + 3, v5 + __len, 1);
        v5 = v4[1];
      }
      if (__len)
      {
        v13 = -(uint64_t)__len;
        v14 = (_BYTE *)(*v4 + v5);
        do
          *v14++ = v11[v13++];
        while (v13);
        v5 = v4[1];
      }
      v4[1] = v5 + __len;
      if (&v11[-__len] != v10)
        result = (uint64_t *)memmove(&v10[__len], v10, &v11[-__len] - v10);
      if (__len)
      {
        v15 = v10;
        v16 = __len;
        return (uint64_t *)memset(v15, 255, v16);
      }
    }
  }
  return result;
}

BOOL sub_1C5F1EA0C(uint64_t a1, uint64_t a2)
{
  return sub_1C57A1C20(a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && (sub_1C4D89F84(a1 + 48, *(unsigned __int8 **)(a2- 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)+ 32 * *(unsigned int *)(a1 + 40))) & 1) != 0;
}

uint64_t sub_1C5F1EA74(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64) + 24);
}

llvm::MDNode *sub_1C5F1EA90(unsigned int **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];

  v2 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 24)
                 - 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 24) + 8)
                 + 24);
  if (*(_BYTE *)v3 != 11)
    return 0;
  v4 = *(_DWORD *)(v3 + 52) - 5;
  if (v4 > 3)
    return 0;
  v6 = qword_1C8674D20[v4];
  v7 = *(_QWORD **)(*(_QWORD *)(v2 + 64) + 24);
  v8 = **a1;
  v9 = *a1[1];
  v10[0] = 4097;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = 4097;
  v10[4] = v9;
  v10[5] = v6;
  return llvm::DIExpression::appendToStack(v7, v10, 6);
}

unsigned int *sub_1C5F1EB34(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 32;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 5);
  return result;
}

void sub_1C5F1EBB8(_QWORD *a1)
{
  char *v2;

  if (a1)
  {
    sub_1C5F1EBB8(*a1);
    sub_1C5F1EBB8(a1[1]);
    if (*((_BYTE *)a1 + 104))
    {
      v2 = (char *)a1[6];
      if (v2 != (char *)(a1 + 9))
        free(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_1C5F1EC0C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Perform extra assertion checking to verify that PHINodes's hash function is well-be"
                                     "haved w.r.t. its isEqual predicate";
  v1.n128_u64[1] = 117;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827180, "phicse-debug-hash", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827180, &dword_1C475E000);
  v2 = 1;
  v3 = 32;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"When the basic block contains not more than this number of PHI nodes, perform a (fa"
                                     "ster!) exhaustive search instead of set-driven one.";
  v1.n128_u64[1] = 134;
  sub_1C4DB1928((uint64_t)&unk_1ED827240, "phicse-num-phi-smallsize", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED827240, &dword_1C475E000);
}

uint64_t llvm::canPeel(llvm *this, llvm::Loop *a2)
{
  uint64_t result;
  uint64_t LoopLatch;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::BasicBlock *v8;
  llvm **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  result = llvm::Loop::isLoopSimplifyForm(this);
  if ((_DWORD)result)
  {
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)this, LoopLatch);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(LoopLatch + 40);
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
        v6 = 0;
      if (*(_BYTE *)(v6 + 16) == 30)
      {
        v12 = v14;
        v13 = 0x400000000;
        v7 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
        sub_1C4EAEE28(this, (uint64_t)&v12, v7);
        v9 = (llvm **)v12;
        if ((_DWORD)v13)
        {
          v10 = 8 * v13;
          do
          {
            result = llvm::IsBlockFollowedByDeoptOrUnreachable(*v9, v8);
            if ((result & 1) == 0)
              break;
            ++v9;
            v10 -= 8;
          }
          while (v10);
          v9 = (llvm **)v12;
        }
        else
        {
          result = 1;
        }
        if (v9 != v14)
        {
          v11 = result;
          free(v9);
          return v11;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void llvm::computePeelCount(llvm::Loop *a1, llvm::Loop *a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7)
{
  unsigned int v12;
  unsigned int v14;
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  uint64_t v17;
  uint64_t i;
  uint64_t LoopLatch;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  __int16 v47;
  const llvm::SCEV *SCEVIter;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  const llvm::SCEV *v56;
  unint64_t v57;
  const llvm::SCEV *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  const llvm::SCEV *v62;
  uint64_t v63;
  uint64_t MonotonicPredicateTypeImpl;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t j;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  uint64_t k;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t m;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t LoopEstimatedTripCount;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  const llvm::DataLayout *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  _BYTE v141[48];
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[64];
  _QWORD *v147;
  uint64_t v148;
  _QWORD v149[6];

  v12 = a2;
  v149[4] = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)a3;
  *(_DWORD *)a3 = 0;
  if (llvm::canPeel(a1, a2) && (*(_BYTE *)(a3 + 5) || *((_QWORD *)a1 + 1) == *((_QWORD *)a1 + 2)))
  {
    if (word_1ED8273C8)
    {
      *(_DWORD *)a3 = dword_1ED827440;
      *(_BYTE *)(a3 + 6) = 1;
      return;
    }
    if (*(_BYTE *)(a3 + 4))
    {
      LoopID = llvm::Loop::getLoopID(a1);
      OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.peeled.count", 0x16uLL);
      if (OptionMDForLoopID
        && (v120 = *((unsigned int *)OptionMDForLoopID + 2), (_DWORD)v120 != 1)
        && (v121 = *(_QWORD *)&OptionMDForLoopID[-8 * v120 + 8]) != 0
        && (v122 = *(_QWORD *)(v121 + 128)) != 0)
      {
        v123 = *(_DWORD *)(v122 + 32);
        v17 = v123 > 0x40 ? **(_QWORD **)(v122 + 24) : (uint64_t)(*(_QWORD *)(v122 + 24) << -(char)v123) >> -(char)v123;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      if (v17 < dword_1ED827380)
      {
        if (a7 < 2 * v12)
          goto LABEL_99;
        v131 = v17;
        v132 = a7;
        v137 = 1;
        for (i = 8; i != 72; i += 16)
          *(uint64_t *)((char *)&v137 + i) = -4096;
        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
        v20 = (uint64_t *)*((_QWORD *)a1 + 4);
        v21 = *(_QWORD *)(*v20 + 48);
        v22 = v21 - 24;
        if (v21)
          v23 = v21 - 24;
        else
          v23 = 0;
        if (*(_BYTE *)(v23 + 16) == 83)
        {
          do
          {
            v24 = sub_1C5F1FDB8(v22, (uint64_t)a1, LoopLatch, (int *)&v137);
            if (v14 <= v24)
              v25 = v24;
            else
              v25 = v14;
            if ((v24 & 0xFF00000000) != 0)
              v14 = v25;
            v21 = *(_QWORD *)(v21 + 8);
            v22 = v21 - 24;
            if (v21)
              v26 = v21 - 24;
            else
              v26 = 0;
          }
          while (*(_BYTE *)(v26 + 16) == 83);
          v20 = (uint64_t *)*((_QWORD *)a1 + 4);
        }
        v27 = dword_1ED827380;
        if (v132 / v12 - 1 < dword_1ED827380)
          v27 = v132 / v12 - 1;
        v129 = v27;
        v28 = (uint64_t *)*((_QWORD *)a1 + 5);
        if (v28 == v20)
        {
          v29 = 0;
LABEL_86:
          if (v14 <= v29)
            v65 = v29;
          else
            v65 = v14;
          LODWORD(v17) = v131;
          if (v65)
          {
LABEL_90:
            if (v129 < v65)
              v65 = v129;
            if (v65 + v17 > dword_1ED827380)
              goto LABEL_96;
            *(_DWORD *)a3 = v65;
            *(_BYTE *)(a3 + 6) = 0;
            if ((v137 & 1) == 0)
              MEMORY[0x1CAA32FB4](v138, 8);
            return;
          }
          if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a1))
            goto LABEL_96;
          v147 = v149;
          v148 = 0x400000000;
          v84 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
          sub_1C4EAEE28(a1, (uint64_t)&v147, v84);
          if ((_DWORD)v148)
          {
            v85 = 0;
            v86 = v147;
            do
            {
              v87 = *(_QWORD *)(v147[v85] + 40);
              if (v87)
                v88 = v87 - 24;
              else
                v88 = 0;
              if (*(unsigned __int8 *)(v88 + 16) - 29 >= 0xB)
                v88 = 0;
              if (*(_BYTE *)(v88 + 16) != 35)
              {
                LODWORD(v113) = 0;
                goto LABEL_228;
              }
              ++v85;
            }
            while (v148 != v85);
          }
          v130 = **((_QWORD **)a1 + 4);
          v128 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
          v142 = v146;
          v143 = (uint64_t)v146;
          v144 = 8;
          LODWORD(v145) = 0;
          v89 = (uint64_t *)*((_QWORD *)a1 + 4);
          v125 = (uint64_t *)*((_QWORD *)a1 + 5);
          if (v125 != v89)
          {
            v124 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*v89 + 56) + 40) + 272);
            do
            {
              v126 = v89;
              v134 = *v89 + 40;
              v136 = *v89;
              for (j = *(_QWORD *)(*v89 + 48); j != v134; j = *(_QWORD *)(j + 8))
              {
                if (j)
                  v91 = j - 24;
                else
                  v91 = 0;
                v92 = *(unsigned __int8 *)(v91 + 16) - 33;
                if (v92 <= 0x37)
                {
                  if (((1 << (*(_BYTE *)(v91 + 16) - 33)) & 0x8000000000041) != 0)
                  {
                    v101 = *(_QWORD *)(v91 + 64);
                    if (!v101 || (*(_BYTE *)(v101 + 17) & 0x30) == 0)
                    {
                      v102 = *(_DWORD *)(v91 + 20);
                      if (v102 < 0)
                      {
                        v103 = v91 - 32 * (v102 & 0x7FFFFFF);
                        v106 = *(_QWORD *)(v103 - 8);
                        v104 = v103 - 8;
                        v105 = v106;
                        if (v106)
                        {
                          v107 = -v105;
                          while (1)
                          {
                            v108 = *(_DWORD *)(*(_QWORD *)(v104 + v107) + 8);
                            v109 = v108 > 7;
                            v110 = (1 << v108) & 0x83;
                            if (v109 || v110 == 0)
                              break;
                            v107 += 16;
                            if (!v107)
                              goto LABEL_186;
                          }
LABEL_216:
                          LODWORD(v113) = 0;
                          LODWORD(v17) = v131;
LABEL_225:
                          if ((void *)v143 != v142)
                            free((void *)v143);
                          v86 = v147;
LABEL_228:
                          if (v86 != v149)
                            free(v86);
                          if ((_DWORD)v113)
                          {
                            v65 = 1;
                            goto LABEL_90;
                          }
LABEL_96:
                          if ((v137 & 1) == 0)
                            MEMORY[0x1CAA32FB4](v138, 8);
                          a7 = v132;
LABEL_99:
                          if (!a4)
                          {
                            if (*(_BYTE *)(a3 + 6))
                            {
                              llvm::Function::getEntryCount(*(uint64_t ****)(**((_QWORD **)a1 + 4) + 56), 0, (uint64_t)&v142);
                              if ((_BYTE)v144)
                              {
                                v66 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
                                if (v66)
                                {
                                  v67 = *(_QWORD *)(v66 + 40);
                                  if (v67 != v66 + 40)
                                  {
                                    v68 = v67 - 24;
                                    if (!v67)
                                      v68 = 0;
                                    v69 = *(unsigned __int8 *)(v68 + 16) - 40;
                                    if (v69 < 0xFFFFFFF5)
                                      v68 = 0;
                                    if (v67)
                                    {
                                      v70 = *(_BYTE *)(v68 + 16) == 30 && v69 >= 0xFFFFFFF5;
                                      if (v70
                                        && (*(_DWORD *)(v68 + 20) & 0x7FFFFFF) == 3
                                        && llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)a1, v66))
                                      {
                                        v142 = &v144;
                                        v143 = 0x400000000;
                                        v71 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
                                        sub_1C4EAEE28(a1, (uint64_t)&v142, v71);
                                        if ((_DWORD)v143)
                                        {
                                          v73 = 8 * v143;
                                          v74 = (char *)v142;
                                          while (1)
                                          {
                                            v75 = *(_QWORD *)(*(_QWORD *)v74 + 40);
                                            if (v75 == *(_QWORD *)v74 + 40)
                                              break;
                                            v76 = v75 - 24;
                                            if (!v75)
                                              v76 = 0;
                                            v77 = *(unsigned __int8 *)(v76 + 16);
                                            if (v77 != 29)
                                              v76 = 0;
                                            if (!v75 || v77 != 29)
                                              break;
                                            v79 = *(_QWORD *)(*(_QWORD *)v74 + 48);
                                            v80 = v79 ? v79 - 24 : 0;
                                            if (v76 == v80)
                                              break;
                                            if (*(_QWORD *)(*(_QWORD *)(v76 + 40) + 48) == v76 + 24)
                                              break;
                                            v81 = *(_QWORD *)(v76 + 24);
                                            if (!v81)
                                              break;
                                            if (*(_BYTE *)(v81 - 8) != 84)
                                              break;
                                            v82 = *(_QWORD *)(v81 - 56);
                                            if (!v82
                                              || *(_BYTE *)(v82 + 16)
                                              || *(_QWORD *)(v82 + 24) != *(_QWORD *)(v81 + 48)
                                              || *(_DWORD *)(v82 + 36) != 119)
                                            {
                                              break;
                                            }
                                            v83 = 0;
                                            v74 += 8;
                                            v73 -= 8;
                                            if (!v73)
                                              goto LABEL_233;
                                          }
                                          v83 = 1;
                                        }
                                        else
                                        {
                                          v83 = 0;
                                        }
LABEL_233:
                                        if (v142 != &v144)
                                          free(v142);
                                        if ((v83 & 1) == 0)
                                        {
                                          LoopEstimatedTripCount = llvm::getLoopEstimatedTripCount(a1, 0, v72);
                                          if ((LoopEstimatedTripCount & 0xFF00000000) != 0
                                            && (_DWORD)LoopEstimatedTripCount
                                            && (int)v17 + (int)LoopEstimatedTripCount <= dword_1ED827380
                                            && v12 + v12 * (_DWORD)LoopEstimatedTripCount <= a7)
                                          {
                                            *(_DWORD *)a3 = LoopEstimatedTripCount;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          return;
                        }
                      }
LABEL_186:
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v91, 45) & 1) == 0
                        && !llvm::CallBase::hasFnAttrOnCalledFunction(v91, 44))
                      {
                        goto LABEL_216;
                      }
                    }
                  }
                  else if (v92 == 27)
                  {
                    if ((*(_WORD *)(v91 + 18) & 0x301) != 0)
                      goto LABEL_216;
                  }
                  else if (((1 << (*(_BYTE *)(v91 + 16) - 33)) & 0x808001D0000010) != 0)
                  {
                    goto LABEL_216;
                  }
                }
                v93 = (char *)sub_1C477672C((uint64_t)&v142, v91);
                if ((void *)v143 == v142)
                  v94 = (uint64_t *)((char *)&v144 + 4);
                else
                  v94 = &v144;
                v95 = (char *)(v143 + 8 * *(unsigned int *)v94);
                if (v93 != v95)
                {
                  while (*(_QWORD *)v93 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    v93 += 8;
                    if (v93 == v95)
                      goto LABEL_170;
                  }
                }
                if (v93 != v95)
                {
                  for (k = *(_QWORD *)(v91 + 8); k; k = *(_QWORD *)(k + 8))
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v142, *(_QWORD *)(k + 24));
                }
LABEL_170:
                if (v136 != v130)
                {
                  v97 = *(unsigned __int8 *)(v91 + 16);
                  v98 = v97 == 60 ? (uint64_t *)v91 : 0;
                  if (j)
                  {
                    if (v97 == 60)
                    {
                      v99 = (uint64_t *)*(v98 - 4);
                      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a5, v136, v128)
                        && llvm::Loop::isLoopInvariant((uint64_t)a1, (uint64_t)v99)
                        && (llvm::isDereferenceableAndAlignedPointer(v99, *v98, 0, v124, (unint64_t *)v98, a5, 0) & 1) == 0)
                      {
                        for (m = *(_QWORD *)(v91 + 8); m; m = *(_QWORD *)(m + 8))
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v142, *(_QWORD *)(m + 24));
                      }
                    }
                  }
                }
              }
              v89 = v126 + 1;
            }
            while (v126 + 1 != v125);
          }
          v139 = v141;
          v140 = 0x600000000;
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a1, (uint64_t)&v139);
          v112 = (char *)v139;
          if ((_DWORD)v140)
          {
            v113 = 8 * v140;
            while (1)
            {
              v114 = *(_QWORD *)(*(_QWORD *)v112 + 40);
              if (v114 == *(_QWORD *)v112 + 40)
              {
                v116 = 0;
              }
              else
              {
                v115 = v114 ? v114 - 24 : 0;
                v116 = *(unsigned __int8 *)(v115 + 16) - 29 >= 0xB ? 0 : v115;
              }
              v117 = sub_1C477672C((uint64_t)&v142, v116);
              v118 = (void *)v143 == v142 ? (uint64_t *)((char *)&v144 + 4) : &v144;
              if (v117 != (_QWORD *)(v143 + 8 * *(unsigned int *)v118))
                break;
              v112 += 8;
              v113 -= 8;
              if (!v113)
                goto LABEL_221;
            }
            LODWORD(v113) = 1;
LABEL_221:
            v112 = (char *)v139;
          }
          else
          {
            LODWORD(v113) = 0;
          }
          if (v112 != v141)
            free(v112);
          LODWORD(v17) = v131;
          goto LABEL_225;
        }
        v29 = 0;
        v133 = (uint64_t *)*((_QWORD *)a1 + 5);
        while (1)
        {
          v31 = *(_QWORD *)(*v20 + 40);
          if (v31 == *v20 + 40)
            goto LABEL_83;
          v32 = v31 ? v31 - 24 : 0;
          v33 = *(unsigned __int8 *)(v32 + 16) - 40;
          v34 = v33 >= 0xFFFFFFF5 ? v32 : 0;
          if (!v31)
            goto LABEL_83;
          v35 = *(_BYTE *)(v34 + 16) == 30 && v33 >= 0xFFFFFFF5;
          if (!v35 || (*(_DWORD *)(v34 + 20) & 0x7FFFFFF) == 1)
            goto LABEL_83;
          v135 = v29;
          v30 = *v20;
          if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1) == v30)
            goto LABEL_82;
          v36 = *(_QWORD *)(v34 - 96);
          v29 = v135;
          v28 = v133;
          if (!v36)
            goto LABEL_83;
          if (*(_BYTE *)(v36 + 16) != 81)
            goto LABEL_83;
          v37 = *(_QWORD *)(v36 - 64);
          if (!v37)
            goto LABEL_83;
          v38 = *(_QWORD *)(v36 - 32);
          if (!v38)
            goto LABEL_83;
          v39 = *(_QWORD *)(a6 + 104);
          v40 = *(_DWORD *)(a6 + 120);
          if (v40)
          {
            v41 = v40 - 1;
            v42 = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
            v43 = v39 + 48 * v42;
            v44 = *(_QWORD *)(v43 + 24);
            if (v44 == v37)
              goto LABEL_58;
            v45 = 1;
            while (v44 != -4096)
            {
              v46 = v42 + v45++;
              v42 = v46 & v41;
              v43 = v39 + 48 * (v46 & v41);
              v44 = *(_QWORD *)(v43 + 24);
              if (v44 == v37)
                goto LABEL_58;
            }
          }
          v43 = v39 + 48 * v40;
LABEL_58:
          v47 = *(_WORD *)(v36 + 18);
          if (v43 == v39 + 48 * v40 || (SCEVIter = *(const llvm::SCEV **)(v43 + 40)) == 0)
          {
            SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, v37);
            v39 = *(_QWORD *)(a6 + 104);
            v40 = *(_DWORD *)(a6 + 120);
          }
          v49 = v39 + 48 * v40;
          if (!v40)
            goto LABEL_67;
          v50 = v40 - 1;
          v51 = v50 & ((v38 >> 4) ^ (v38 >> 9));
          v52 = v39 + 48 * v51;
          v53 = *(_QWORD *)(v52 + 24);
          if (v53 != v38)
          {
            v54 = 1;
            while (v53 != -4096)
            {
              v55 = v51 + v54++;
              v51 = v55 & v50;
              v52 = v39 + 48 * v51;
              v53 = *(_QWORD *)(v52 + 24);
              if (v53 == v38)
                goto LABEL_68;
            }
LABEL_67:
            v52 = v49;
          }
LABEL_68:
          if (v52 == v49 || (v56 = *(const llvm::SCEV **)(v52 + 40)) == 0)
          {
            v57 = v38;
            v58 = SCEVIter;
            v59 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, v57);
            SCEVIter = v58;
            v56 = (const llvm::SCEV *)v59;
          }
          v60 = v47 & 0x3F;
          v127 = v47 & 0x3F;
          v61 = (uint64_t)SCEVIter;
          v62 = v56;
          if ((unsigned __int16)llvm::ScalarEvolution::evaluatePredicate((uint64_t ****)a6, v60, SCEVIter, v56) <= 0xFFu)
          {
            if (*(_WORD *)(v61 + 24) == 7)
            {
              v63 = v61;
              v29 = v135;
              v28 = v133;
              if (*(_QWORD *)(v61 + 40) == 2 && *(llvm::Loop **)(v61 + 48) == a1)
              {
                if ((v127 & 0x3E) == 0x20 && (*(_WORD *)(v61 + 28) & 1) != 0
                  || (MonotonicPredicateTypeImpl = llvm::ScalarEvolution::getMonotonicPredicateTypeImpl((uint64_t *)a6, v61, v127), v63 = v61, v28 = v133, v29 = v135, (MonotonicPredicateTypeImpl & 0xFF00000000) != 0))
                {
                  __asm { BR              X10 }
                }
              }
            }
            else
            {
              v29 = v135;
              v28 = v133;
              if (*((_WORD *)v62 + 12) == 7)
                __asm { BR              X8 }
            }
            goto LABEL_83;
          }
LABEL_82:
          v29 = v135;
          v28 = v133;
LABEL_83:
          if (++v20 == v28)
            goto LABEL_86;
        }
      }
    }
  }
}

uint64_t sub_1C5F1FDB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int *v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v7 = a4 + 2;
  v8 = *a4;
  if ((*a4 & 1) != 0)
  {
    v9 = 4;
    v10 = a4 + 2;
  }
  else
  {
    v10 = (int *)*((_QWORD *)a4 + 1);
    v9 = a4[4];
    if (!v9)
    {
      v12 = 0;
      goto LABEL_12;
    }
  }
  v11 = v9 - 1;
  LODWORD(v12) = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v13 = (uint64_t *)&v10[4 * v12];
  v14 = *v13;
  if (*v13 == a1)
    goto LABEL_13;
  v15 = 1;
  while (v14 != -4096)
  {
    v16 = v12 + v15++;
    v12 = v16 & v11;
    v14 = *(_QWORD *)&v10[4 * v12];
    if (v14 == a1)
      goto LABEL_12;
  }
  if ((v8 & 1) != 0)
  {
    v12 = 4;
    v10 = a4 + 2;
  }
  else
  {
    v10 = (int *)*((_QWORD *)a4 + 1);
    v12 = a4[4];
  }
LABEL_12:
  v13 = (uint64_t *)&v10[4 * v12];
LABEL_13:
  if ((v8 & 1) == 0)
    v7 = (int *)*((_QWORD *)a4 + 1);
  v17 = a4[4];
  if ((*a4 & 1) != 0)
    v17 = 4;
  if (&v7[4 * v17] == (int *)v13)
  {
    v22 = *(_DWORD *)(a1 + 20);
    v23 = v22 & 0x7FFFFFF;
    if ((v22 & 0x7FFFFFF) != 0)
    {
      v24 = 0;
      while (1)
      {
        v25 = a1 - 32 * v23;
        if ((v22 & 0x40000000) != 0)
          v25 = *(_QWORD *)(a1 - 8);
        if (*(_QWORD *)(v25 + 32 * *(unsigned int *)(a1 + 60) + 8 * v24) == a3)
          break;
        if (v23 == ++v24)
          goto LABEL_25;
      }
    }
    else
    {
LABEL_25:
      LODWORD(v24) = -1;
    }
    if ((v22 & 0x40000000) != 0)
      v26 = *(_QWORD *)(a1 - 8);
    else
      v26 = a1 - 32 * v23;
    v27 = *(_QWORD *)(v26 + 32 * v24);
    sub_1C5F23120(a4, &v33)[1] = 0;
    if (llvm::Loop::isLoopInvariant(a2, v27))
    {
      v28 = 0;
      v29 = 1;
    }
    else
    {
      if (*(_BYTE *)(v27 + 16) != 83 || v27 == 0)
        goto LABEL_36;
      if (*(_QWORD *)(v27 + 40) != **(_QWORD **)(a2 + 32))
      {
        LOBYTE(v18) = 0;
        v20 = 0;
        v21 = 0;
        v19 = 0;
        return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
      }
      v32 = sub_1C5F1FDB8(v27, a2, a3, a4);
      if ((v32 & 0xFF00000000) == 0)
      {
LABEL_36:
        v28 = 0;
        v20 = 0;
        v29 = 0;
        goto LABEL_37;
      }
      v28 = (v32 + 1) & 0xFFFFFF00;
      v29 = (v32 + 1);
    }
    sub_1C5F23120(a4, &v33)[1] = v29 | v28 | 0x100000000;
    v20 = 0x100000000;
LABEL_37:
    v21 = 0;
    LODWORD(v18) = v20 | v29 | v28;
    v19 = v18 & 0xFFFFFF00;
    return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
  }
  v18 = v13[1];
  v19 = v18 & 0xFFFFFF00;
  v20 = v18 & 0xFFFFFFFF00000000;
  v21 = v18 & 0xFFFFFF0000000000;
  return v20 & 0xFF00000000 | v18 | v21 | v19 & 0xFFFFFF00;
}

uint64_t llvm::gatherPeelingPreferences(uint64_t a1, uint64_t a2, _QWORD *a3, __int16 a4, __int16 a5, int a6)
{
  uint64_t v10;

  LODWORD(v10) = 0;
  WORD2(v10) = 1;
  BYTE6(v10) = 1;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)*a3 + 192))(*a3, a1, a2, &v10);
  if (a6)
  {
    if (word_1ED837418)
      LODWORD(v10) = dword_1ED837490;
    if (word_1ED8374D8)
      BYTE4(v10) = byte_1ED837550;
    if (word_1ED837598)
      BYTE5(v10) = byte_1ED837610;
  }
  if ((a4 & 0xFF00) != 0)
    BYTE4(v10) = a4;
  if ((a5 & 0xFF00) != 0)
    BYTE6(v10) = a5;
  return v10;
}

uint64_t llvm::peelLoop(llvm *this, llvm::Loop *a2, llvm::LoopInfo *a3, int32x2_t *a4, llvm::ScalarEvolution *a5, llvm::DominatorTree *a6, char **a7)
{
  uint64_t LoopPredecessor;
  uint64_t v12;
  uint64_t v13;
  llvm *v14;
  int v15;
  const llvm::Twine *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t NearestCommonDominator;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  llvm::BasicBlock *v43;
  uint64_t ***v44;
  uint64_t ***v45;
  uint64_t ***v46;
  unsigned __int8 *v47;
  llvm::BasicBlock *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::BasicBlock **v54;
  llvm::BasicBlock *v55;
  int v56;
  int v57;
  llvm::BasicBlock *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::BasicBlock **v66;
  llvm::BasicBlock *v67;
  int v68;
  int v69;
  llvm::BasicBlock *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm **v78;
  llvm *v79;
  int v80;
  int v81;
  llvm *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  llvm::Instruction *v91;
  llvm::BasicBlock *v92;
  BOOL v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int32x2_t *****v105;
  _QWORD *v106;
  int32x2_t *****v107;
  uint64_t ***v108;
  uint64_t v109;
  uint64_t v110;
  int32x2_t ****v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int32x2_t ****v116;
  int v117;
  int v118;
  llvm *v119;
  _QWORD *v120;
  unint64_t v121;
  int32x2_t ****v122;
  int32x2_t *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  int32x2_t *****v128;
  int32x2_t ****v129;
  int v130;
  int v131;
  uint64_t v132;
  int32x2_t ****v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int32x2_t *****v138;
  int32x2_t ****v139;
  int v140;
  int v141;
  int32x2_t ****v142;
  _QWORD *v144;
  unint64_t v145;
  int32x2_t ****v146;
  int32x2_t *v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  int32x2_t *****v152;
  int32x2_t ****v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  int32x2_t *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  void **v168;
  size_t v169;
  _QWORD **v170;
  _QWORD **v171;
  _QWORD *v172;
  _QWORD *v173;
  unsigned __int8 *v174;
  llvm::Instruction *v175;
  _QWORD *v176;
  unint64_t v177;
  int32x2_t ****v178;
  int32x2_t *v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  int32x2_t *****v184;
  int32x2_t ****v185;
  int v186;
  int v187;
  _QWORD *v188;
  unint64_t v189;
  int32x2_t ****v190;
  int32x2_t *v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  int32x2_t *****v196;
  int32x2_t ****v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t i;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v211;
  int32x2_t ****v212;
  int32x2_t *v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  int32x2_t *****v218;
  int32x2_t ****v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v234;
  unint64_t v235;
  int32x2_t ****v236;
  int32x2_t *v237;
  unint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  int32x2_t *****v242;
  int32x2_t ****v243;
  int v244;
  int v245;
  _QWORD *v246;
  unint64_t v247;
  int32x2_t ****v248;
  int32x2_t *v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  int32x2_t *****v254;
  int32x2_t ****v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int32x2_t ****v262;
  int32x2_t *v263;
  unint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  int32x2_t *****v268;
  int32x2_t ****v269;
  int v270;
  int v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t *v274;
  uint64_t v275;
  int32x2_t *v276;
  unint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  int32x2_t ****v288;
  int32x2_t *v289;
  unint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  int32x2_t *****v294;
  int32x2_t ****v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  unint64_t v305;
  int32x2_t ****v306;
  int32x2_t *v307;
  unint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  int32x2_t *****v312;
  int32x2_t ****v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  BOOL v318;
  _QWORD *v320;
  unint64_t v321;
  unint64_t **v322;
  unint64_t v323;
  unint64_t *v324;
  uint64_t v325;
  int32x2_t *v326;
  unint64_t v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  int v333;
  int v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  int v338;
  int v339;
  char *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int32x2_t ****v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  BOOL v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v357;
  unint64_t v358;
  int32x2_t ****v359;
  int32x2_t *v360;
  unint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  int32x2_t *****v365;
  int32x2_t ****v366;
  int v367;
  int v368;
  _QWORD *v369;
  unint64_t v370;
  int32x2_t ****v371;
  int32x2_t *v372;
  unint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  int32x2_t *****v377;
  int32x2_t ****v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  llvm::BasicBlock *v384;
  unint64_t v385;
  uint64_t *v386;
  uint64_t *v387;
  int32x2_t ****v388;
  _QWORD *v390;
  unint64_t v392;
  int32x2_t ****v393;
  int32x2_t *v394;
  unint64_t v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v398;
  int32x2_t *****v399;
  int32x2_t ****v400;
  int v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  BOOL v405;
  _QWORD *v407;
  unint64_t v408;
  unint64_t **v409;
  uint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  int32x2_t *v414;
  unint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  int v421;
  int v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  int32x2_t ****v426;
  int32x2_t *v427;
  unint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  int32x2_t *****v432;
  int32x2_t ****v433;
  int v434;
  int v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t *v438;
  void ***v439;
  uint64_t ***v440;
  unsigned __int8 *v441;
  llvm::BasicBlock *v442;
  uint64_t ***v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  llvm::BasicBlock **v448;
  llvm::BasicBlock *v449;
  int v450;
  int v451;
  llvm::BasicBlock *v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t *v457;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t *v467;
  uint64_t v468;
  int32x2_t *v469;
  unint64_t v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  int v476;
  int v477;
  unint64_t v479;
  unint64_t *v480;
  uint64_t v481;
  int32x2_t *v482;
  unint64_t v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  int v489;
  int v490;
  uint64_t *v491;
  int32x2_t ****v492;
  uint64_t v493;
  _QWORD *v495;
  unint64_t v497;
  int32x2_t ****v498;
  int32x2_t *v499;
  unint64_t v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  int32x2_t *****v504;
  int32x2_t ****v505;
  int v506;
  int v507;
  uint64_t *v508;
  uint64_t ***v509;
  llvm::MDNode *BranchWeights;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t **j;
  int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  BOOL v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  _QWORD *v526;
  unint64_t v527;
  int32x2_t ****v528;
  int32x2_t *v529;
  unint64_t v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  int32x2_t *****v534;
  int32x2_t ****v535;
  int v536;
  int v537;
  uint64_t v538;
  unint64_t **v539;
  uint64_t LoopID;
  uint64_t v541;
  llvm *v542;
  llvm *v543;
  const llvm::Loop *v544;
  _QWORD *v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t *v550;
  uint64_t v551;
  int32x2_t *v552;
  unint64_t v553;
  uint64_t v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t *v557;
  uint64_t v558;
  int v559;
  int v560;
  unint64_t v562;
  unint64_t *v563;
  uint64_t v564;
  int32x2_t *v565;
  unint64_t v566;
  uint64_t v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  int v572;
  int v573;
  llvm::BasicBlock *v575;
  BOOL v576;
  unsigned int v577;
  unsigned int v578;
  llvm::MDNode *v579;
  uint64_t v580;
  unsigned int v581;
  _BYTE *v582;
  llvm::DominatorTree *v584;
  unsigned int v585;
  llvm::MemorySSAUpdater *v586;
  int v587;
  _BYTE *v588;
  uint64_t ***v589;
  unsigned int v590;
  uint64_t ***v591;
  llvm::BasicBlock *v592;
  uint64_t *v593;
  uint64_t *v594;
  uint64_t v595;
  unint64_t v596;
  _BYTE *v597;
  uint64_t ***v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t LoopLatch;
  uint64_t v602;
  int v603[2];
  llvm *v604;
  uint64_t v605;
  llvm *v606;
  uint64_t *v608;
  char *v609;
  uint64_t *v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613[3];
  char v614;
  _QWORD v615[2];
  unsigned int v616;
  uint64_t v617;
  char v618;
  uint64_t *v619;
  uint64_t v620;
  unsigned int v621;
  char v622[8];
  uint64_t v623;
  void *v624;
  int32x2_t *****v625;
  void *__p[2];
  char v627;
  void *v628;
  uint64_t v629;
  _BYTE v630[48];
  void *v631;
  int v632[2];
  char *v633;
  int32x2_t ****v634;
  _QWORD *v635;
  llvm::MemorySSAUpdater *v636;
  uint64_t v637;
  _BYTE v638[64];
  const char *v639;
  uint64_t v640;
  char *v641;
  int32x2_t ****v642;
  uint64_t **v643;
  uint64_t v644;

  v587 = (int)a2;
  v644 = *MEMORY[0x1E0C80C00];
  sub_1C4DFE414((uint64_t)v622, (uint64_t)this);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v622, a3);
  v592 = (llvm::BasicBlock *)**((_QWORD **)this + 4);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!LoopPredecessor)
    goto LABEL_8;
  v12 = *(_QWORD *)(LoopPredecessor + 40);
  if (v12 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v12)
    v13 = v12 - 24;
  else
    v13 = 0;
  if (*(_BYTE *)(v13 + 16) == 30)
  {
    if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v14 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v14 = 0;
    switch(*(_BYTE *)(v13 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
LABEL_863:
        __break(1u);
        goto LABEL_864;
      case 0x1F:
        v15 = (*(_DWORD *)(v13 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v15 = (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v15 = *(_DWORD *)(v13 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v15 != 1)
      goto LABEL_8;
  }
  v14 = (llvm *)LoopPredecessor;
LABEL_13:
  *(_QWORD *)v603 = a3;
  v604 = v14;
  v584 = a6;
  v585 = a7;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
  v586 = (llvm::MemorySSAUpdater *)v638;
  v636 = (llvm::MemorySSAUpdater *)v638;
  v637 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges((uint64_t)this, (uint64_t)&v636);
  v619 = 0;
  v620 = 0;
  v621 = 0;
  v17 = (uint64_t *)*((_QWORD *)this + 4);
  v608 = (uint64_t *)*((_QWORD *)this + 5);
  if (v608 != v17)
  {
    while (1)
    {
      v18 = *v17;
      v19 = *((_QWORD *)a5 + 3);
      v20 = *((unsigned int *)a5 + 10);
      if (!(_DWORD)v20)
        goto LABEL_20;
      LODWORD(v21) = ((v18 >> 4) ^ (v18 >> 9)) & (v20 - 1);
      v22 = (uint64_t *)(v19 + 16 * v21);
      v23 = *v22;
      if (v18 != *v22)
        break;
LABEL_21:
      v26 = v22[1];
      v631 = &v633;
      *(_QWORD *)v632 = 0x1000000000;
      v27 = *(unsigned int *)(v26 + 32);
      if ((_DWORD)v27)
      {
        v28 = *(uint64_t ***)(v26 + 24);
        v29 = 8 * v27;
        do
        {
          v30 = **v28;
          v31 = sub_1C477672C((uint64_t)this + 56, v30);
          v32 = *((_QWORD *)this + 8);
          if (v32 == *((_QWORD *)this + 7))
            v33 = 76;
          else
            v33 = 72;
          if (v31 == (_QWORD *)(v32 + 8 * *(unsigned int *)((char *)this + v33)))
          {
            v34 = v632[0];
            if (v632[0] >= (unint64_t)v632[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v631, (uint64_t)&v633, v632[0] + 1, 8);
              v34 = v632[0];
            }
            *((_QWORD *)v631 + v34) = v30;
            ++v632[0];
          }
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator((uint64_t)a5, v18, LoopLatch);
      v36 = (char **)v631;
      if (v632[0])
      {
        v37 = NearestCommonDominator;
        v38 = 8 * v632[0];
        do
        {
          v615[0] = 0;
          v39 = (uint64_t)*v36++;
          v615[0] = v39;
          sub_1C4E5D0EC((uint64_t *)&v619, v615)[1] = v37;
          v38 -= 8;
        }
        while (v38);
        v36 = (char **)v631;
      }
      if (v36 != &v633)
        free(v36);
      if (++v17 == v608)
        goto LABEL_38;
    }
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(_QWORD *)(v19 + 16 * v21);
      if (v18 == v23)
      {
        v22 = (uint64_t *)(v19 + 16 * v21);
        goto LABEL_21;
      }
    }
LABEL_20:
    v22 = (uint64_t *)(v19 + 16 * v20);
    goto LABEL_21;
  }
LABEL_38:
  v40 = *((_QWORD *)v592 + 7);
  LOWORD(v635) = 257;
  v606 = (llvm *)llvm::SplitEdge(v604, v592, a5, a3, 0, (llvm::MemorySSAUpdater *)&v631, v16);
  v41 = (_QWORD *)*((_QWORD *)v606 + 5);
  if (v41 == (_QWORD *)((char *)v606 + 40))
  {
    v43 = 0;
  }
  else
  {
    if (v41)
      v42 = (unsigned __int8 *)(v41 - 3);
    else
      v42 = 0;
    if (v42[16] - 29 >= 0xB)
      v43 = 0;
    else
      v43 = (llvm::BasicBlock *)v42;
  }
  LOWORD(v635) = 257;
  v44 = (uint64_t ***)sub_1C5EBD70C(v606, v43, 0, (uint64_t)a5, a3, 0, (llvm::Twine *)&v631, 0);
  v45 = v44;
  v46 = (uint64_t ***)v44[5];
  if (v46 == v44 + 5)
  {
    v48 = 0;
  }
  else
  {
    if (v46)
      v47 = (unsigned __int8 *)(v46 - 3);
    else
      v47 = 0;
    if (v47[16] - 29 >= 0xB)
      v48 = 0;
    else
      v48 = (llvm::BasicBlock *)v47;
  }
  LOWORD(v635) = 257;
  v589 = (uint64_t ***)sub_1C5EBD70C((llvm *)v44, v48, 0, (uint64_t)a5, a3, 0, (llvm::Twine *)&v631, 0);
  v49 = v592 >> 4;
  if ((*((_BYTE *)v592 + 23) & 0x10) != 0)
  {
    v50 = ***(_QWORD ***)v592;
    v51 = *(_QWORD *)(v50 + 152);
    v52 = *(unsigned int *)(v50 + 168);
    if ((_DWORD)v52)
    {
      LODWORD(v53) = (v52 - 1) & (v49 ^ (v592 >> 9));
      v54 = (llvm::BasicBlock **)(v51 + 16 * v53);
      v55 = *v54;
      if (*v54 == v592)
      {
LABEL_62:
        v58 = v54[1];
        v61 = *(_QWORD *)v58;
        v59 = (char *)v58 + 16;
        v60 = v61;
        goto LABEL_63;
      }
      v56 = 1;
      while (v55 != (llvm::BasicBlock *)-4096)
      {
        v57 = v53 + v56++;
        v53 = v57 & (v52 - 1);
        v55 = *(llvm::BasicBlock **)(v51 + 16 * v53);
        if (v55 == v592)
        {
          v54 = (llvm::BasicBlock **)(v51 + 16 * v53);
          goto LABEL_62;
        }
      }
    }
    v54 = (llvm::BasicBlock **)(v51 + 16 * v52);
    goto LABEL_62;
  }
  v60 = 0;
  v59 = &byte_1C871356D;
LABEL_63:
  LOWORD(v635) = 773;
  v631 = v59;
  *(_QWORD *)v632 = v60;
  v633 = ".peel.begin";
  llvm::Value::setName((uint64_t ***)v606, (uint64_t)&v631);
  if ((*((_BYTE *)v592 + 23) & 0x10) != 0)
  {
    v62 = ***(_QWORD ***)v592;
    v63 = *(_QWORD *)(v62 + 152);
    v64 = *(unsigned int *)(v62 + 168);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = (v64 - 1) & (v49 ^ (v592 >> 9));
      v66 = (llvm::BasicBlock **)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 == v592)
      {
LABEL_71:
        v70 = v66[1];
        v73 = *(_QWORD *)v70;
        v71 = (char *)v70 + 16;
        v72 = v73;
        goto LABEL_72;
      }
      v68 = 1;
      while (v67 != (llvm::BasicBlock *)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(llvm::BasicBlock **)(v63 + 16 * v65);
        if (v67 == v592)
        {
          v66 = (llvm::BasicBlock **)(v63 + 16 * v65);
          goto LABEL_71;
        }
      }
    }
    v66 = (llvm::BasicBlock **)(v63 + 16 * v64);
    goto LABEL_71;
  }
  v72 = 0;
  v71 = &byte_1C871356D;
LABEL_72:
  LOWORD(v635) = 773;
  v631 = v71;
  *(_QWORD *)v632 = v72;
  v633 = ".peel.next";
  llvm::Value::setName(v45, (uint64_t)&v631);
  if ((*((_BYTE *)v604 + 23) & 0x10) == 0)
  {
    v84 = 0;
    v83 = &byte_1C871356D;
    goto LABEL_81;
  }
  v74 = ***(_QWORD ***)v604;
  v75 = *(_QWORD *)(v74 + 152);
  v76 = *(unsigned int *)(v74 + 168);
  if (!(_DWORD)v76)
    goto LABEL_79;
  LODWORD(v77) = (v76 - 1) & ((v604 >> 4) ^ (v604 >> 9));
  v78 = (llvm **)(v75 + 16 * v77);
  v79 = *v78;
  if (*v78 != v604)
  {
    v80 = 1;
    while (v79 != (llvm *)-4096)
    {
      v81 = v77 + v80++;
      v77 = v81 & (v76 - 1);
      v79 = *(llvm **)(v75 + 16 * v77);
      if (v79 == v604)
      {
        v78 = (llvm **)(v75 + 16 * v77);
        goto LABEL_80;
      }
    }
LABEL_79:
    v78 = (llvm **)(v75 + 16 * v76);
  }
LABEL_80:
  v82 = v78[1];
  v85 = *(_QWORD *)v82;
  v83 = (char *)v82 + 16;
  v84 = v85;
LABEL_81:
  LOWORD(v635) = 773;
  v631 = v83;
  *(_QWORD *)v632 = v84;
  v633 = ".peel.newph";
  llvm::Value::setName(v589, (uint64_t)&v631);
  v616 = 128;
  v86 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v615[0] = v86;
  v615[1] = 0;
  if (v616)
  {
    v87 = (unint64_t)v616 << 6;
    v88 = v86 + 16;
    do
    {
      *v88 = 0;
      v88[1] = -4096;
      *(v88 - 2) = &unk_1E814DA10;
      *(v88 - 1) = 2;
      v88[2] = 0;
      v88 += 8;
      v87 -= 64;
    }
    while (v87);
  }
  LOBYTE(v617) = 0;
  v618 = 0;
  v89 = *(_QWORD *)(LoopLatch + 40);
  if (v89 == LoopLatch + 40)
  {
    v91 = 0;
  }
  else
  {
    if (v89)
      v90 = (unsigned __int8 *)(v89 - 24);
    else
      v90 = 0;
    if (v90[16] - 29 >= 0xB)
      v91 = 0;
    else
      v91 = (llvm::Instruction *)v90;
  }
  v631 = 0;
  v628 = 0;
  v591 = (uint64_t ***)v91;
  v597 = 0;
  v588 = 0;
  if (llvm::Instruction::extractProfMetadata(v91, (unint64_t *)&v631, (unint64_t *)&v628))
  {
    v92 = (llvm::BasicBlock *)*(v591 - 4);
    v93 = v92 == v592;
    if (v92 == v592)
      v94 = v628;
    else
      v94 = v631;
    v588 = v94;
    if (v93)
      v95 = v631;
    else
      v95 = v628;
    v597 = v95;
  }
  v582 = v630;
  v628 = v630;
  v629 = 0x600000000;
  llvm::identifyNoAliasScopesToClone(*((char **)this + 4), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3, (uint64_t)&v628);
  if (!v587)
  {
    v384 = v592;
    goto LABEL_748;
  }
  v602 = 0;
  a7 = &v633;
  v609 = (char *)this + 56;
  v593 = (uint64_t *)(v40 + 72);
  v590 = v49 ^ (v592 >> 9);
  do
  {
    v598 = v45;
    v631 = &v633;
    *(_QWORD *)v632 = 0x800000000;
    v612 = 128;
    v96 = (uint64_t *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v610 = v96;
    v611 = 0;
    if (v612)
    {
      v97 = (unint64_t)v612 << 6;
      v98 = v96 + 2;
      do
      {
        *v98 = 0;
        v98[1] = -4096;
        *(v98 - 2) = &unk_1E814DA10;
        *(v98 - 1) = 2;
        v98[2] = 0;
        v98 += 8;
        v97 -= 64;
      }
      while (v97);
    }
    LOBYTE(v613[0]) = 0;
    v614 = 0;
    v99 = (uint64_t *)v628;
    v100 = v629;
    v101 = **((_QWORD **)this + 4);
    v600 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
    v594 = v99;
    v595 = v100;
    if (LoopPredecessor)
    {
      v102 = *(_QWORD *)(LoopPredecessor + 40);
      if (v102 != LoopPredecessor + 40)
      {
        if (v102)
          v103 = v102 - 24;
        else
          v103 = 0;
        if (*(_BYTE *)(v103 + 16) == 30)
        {
          if ((*(_DWORD *)(v103 + 20) & 0x7FFFFFF) != 3)
            goto LABEL_116;
        }
        else
        {
          v599 = 0;
          switch(*(_BYTE *)(v103 + 16))
          {
            case 0x1D:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
              goto LABEL_117;
            case 0x1E:
              goto LABEL_863;
            case 0x1F:
              v104 = (*(_DWORD *)(v103 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
              v104 = (*(_DWORD *)(v103 + 20) & 0x7FFFFFF) - 1;
              break;
            case 0x27:
              v104 = *(_DWORD *)(v103 + 80) + 1;
              break;
            default:
              goto LABEL_112;
          }
          if (v104 == 1)
          {
LABEL_116:
            v599 = LoopPredecessor;
            goto LABEL_117;
          }
        }
      }
    }
LABEL_112:
    v599 = 0;
LABEL_117:
    v105 = v625;
    v106 = *(_QWORD **)this;
    if (v625 != v624)
    {
      v107 = (int32x2_t *****)v624;
      v605 = *(_QWORD *)(v101 + 56);
      while (1)
      {
        v108 = (uint64_t ***)*--v105;
        v639 = ".peel";
        LOWORD(v643) = 259;
        v109 = llvm::CloneBasicBlock(v108, (uint64_t)&v610, (uint64_t)&v639, v605, 0, 0);
        v110 = v632[0];
        if (v632[0] >= (unint64_t)v632[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v631, (uint64_t)&v633, v632[0] + 1, 8);
          v110 = v632[0];
        }
        *((_QWORD *)v631 + v110) = v109;
        ++v632[0];
        v111 = *v105;
        if (v106)
          break;
LABEL_131:
        v640 = 2;
        v641 = 0;
        v642 = v111;
        if (v111 != (int32x2_t ****)-8192 && v111 != (int32x2_t ****)-4096 && v111)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
        v639 = (const char *)&unk_1E814DA10;
        v643 = &v610;
        v120 = sub_1C52E2ED8((uint64_t)&v610, &v639);
        if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
        {
          v121 = v640 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
          if (v641)
          {
            *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v121;
          }
          else
          {
            v122 = v642;
            v123 = ***v642;
            v124 = (unint64_t)v123[303];
            if (v124 <= v121)
            {
              v125 = v123[305].u32[0];
              if (v124 + 16 * v125 > v121)
              {
                v126 = v125 - 1;
                LODWORD(v127) = v126 & ((v642 >> 4) ^ (v642 >> 9));
                v128 = (int32x2_t *****)(v124 + 16 * v127);
                v129 = *v128;
                if (v642 == *v128)
                {
LABEL_146:
                  *v128 = (int32x2_t ****)-8192;
                  v123[304] = vadd_s32(v123[304], (int32x2_t)0x1FFFFFFFFLL);
                  v122 = v642;
                }
                else
                {
                  v130 = 1;
                  while (v129 != (int32x2_t ****)-4096)
                  {
                    v131 = v127 + v130++;
                    v127 = v131 & v126;
                    v129 = *(int32x2_t *****)(v124 + 16 * v127);
                    if (v642 == v129)
                    {
                      v128 = (int32x2_t *****)(v124 + 16 * v127);
                      goto LABEL_146;
                    }
                  }
                }
                *((_BYTE *)v122 + 17) &= ~1u;
              }
            }
          }
        }
        v132 = v120[7];
        if (v132 != v109)
        {
          if (v132 && v132 != -8192 && v132 != -4096)
          {
            v156 = v120[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v156 = v120[6];
            v157 = (unint64_t *)v120[6];
            if (v157)
            {
              *v157 = *v157 & 7 | v156;
            }
            else
            {
              v158 = v120[7];
              v159 = ***(int32x2_t ****)v158;
              v160 = (unint64_t)v159[303];
              if (v160 <= v156)
              {
                v161 = v159[305].u32[0];
                if (v160 + 16 * v161 > v156)
                {
                  v162 = v161 - 1;
                  LODWORD(v163) = v162 & ((v158 >> 4) ^ (v158 >> 9));
                  v164 = (uint64_t *)(v160 + 16 * v163);
                  v165 = *v164;
                  if (v158 == *v164)
                  {
LABEL_196:
                    *v164 = -8192;
                    v159[304] = vadd_s32(v159[304], (int32x2_t)0x1FFFFFFFFLL);
                    v158 = v120[7];
                  }
                  else
                  {
                    v166 = 1;
                    while (v165 != -4096)
                    {
                      v167 = v163 + v166++;
                      v163 = v167 & v162;
                      v165 = *(_QWORD *)(v160 + 16 * v163);
                      if (v158 == v165)
                      {
                        v164 = (uint64_t *)(v160 + 16 * v163);
                        goto LABEL_196;
                      }
                    }
                  }
                  *(_BYTE *)(v158 + 17) &= ~1u;
                }
              }
            }
          }
          v120[7] = v109;
          if (v109 != -8192 && v109 != -4096 && v109)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v120 + 5));
        }
        v133 = *v105;
        v134 = (uint64_t)v606;
        if ((int32x2_t ****)v101 == *v105)
          goto LABEL_184;
        v135 = *((_QWORD *)a5 + 3);
        v136 = *((unsigned int *)a5 + 10);
        if ((_DWORD)v136)
        {
          LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
          v138 = (int32x2_t *****)(v135 + 16 * v137);
          v139 = *v138;
          if (v133 == *v138)
            goto LABEL_163;
          v140 = 1;
          while (v139 != (int32x2_t ****)-4096)
          {
            v141 = v137 + v140++;
            v137 = v141 & (v136 - 1);
            v139 = *(int32x2_t *****)(v135 + 16 * v137);
            if (v133 == v139)
            {
              v138 = (int32x2_t *****)(v135 + 16 * v137);
              goto LABEL_163;
            }
          }
        }
        v138 = (int32x2_t *****)(v135 + 16 * v136);
LABEL_163:
        v142 = (int32x2_t ****)*v138[1][1];
        v640 = 2;
        v641 = 0;
        v642 = v142;
        if (v142 != (int32x2_t ****)-8192 && v142 != (int32x2_t ****)-4096 && v142 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
        v639 = (const char *)&unk_1E814DA10;
        v643 = &v610;
        v144 = sub_1C52E2ED8((uint64_t)&v610, &v639);
        if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
        {
          v145 = v640 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
          if (v641)
          {
            *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v145;
          }
          else
          {
            v146 = v642;
            v147 = ***v642;
            v148 = (unint64_t)v147[303];
            if (v148 <= v145)
            {
              v149 = v147[305].u32[0];
              if (v148 + 16 * v149 > v145)
              {
                v150 = v149 - 1;
                LODWORD(v151) = v150 & ((v642 >> 4) ^ (v642 >> 9));
                v152 = (int32x2_t *****)(v148 + 16 * v151);
                v153 = *v152;
                if (v642 == *v152)
                {
LABEL_180:
                  *v152 = (int32x2_t ****)-8192;
                  v147[304] = vadd_s32(v147[304], (int32x2_t)0x1FFFFFFFFLL);
                  v146 = v642;
                }
                else
                {
                  v154 = 1;
                  while (v153 != (int32x2_t ****)-4096)
                  {
                    v155 = v151 + v154++;
                    v151 = v155 & v150;
                    v153 = *(int32x2_t *****)(v148 + 16 * v151);
                    if (v642 == v153)
                    {
                      v152 = (int32x2_t *****)(v148 + 16 * v151);
                      goto LABEL_180;
                    }
                  }
                }
                *((_BYTE *)v146 + 17) &= ~1u;
              }
            }
          }
        }
        v134 = v144[7];
LABEL_184:
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock((uint64_t)a5, v109, v134);
        if (v105 == v107)
          goto LABEL_199;
      }
      v112 = *((_DWORD *)a3 + 4);
      if (v112)
      {
        v113 = *(_QWORD *)a3;
        v114 = v112 - 1;
        v115 = (v112 - 1) & ((v111 >> 4) ^ (v111 >> 9));
        v116 = *(int32x2_t *****)(*(_QWORD *)a3 + 16 * v115);
        if (v111 == v116)
        {
LABEL_127:
          v119 = *(llvm **)(v113 + 16 * v115 + 8);
          goto LABEL_129;
        }
        v117 = 1;
        while (v116 != (int32x2_t ****)-4096)
        {
          v118 = v115 + v117++;
          v115 = v118 & v114;
          v116 = *(int32x2_t *****)(v113 + 16 * v115);
          if (v111 == v116)
            goto LABEL_127;
        }
      }
      v119 = 0;
LABEL_129:
      if (v119 == this)
      {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v106, v109, (uint64_t)a3);
        v111 = *v105;
      }
      goto LABEL_131;
    }
LABEL_199:
    v639 = "Peel";
    v596 = v596 & 0xFFFFFFFF00000000 | v602;
    v641 = (char *)v596;
    LOWORD(v643) = 2051;
    llvm::Twine::str((llvm::Twine *)&v639, __p);
    if (v627 >= 0)
      v168 = __p;
    else
      v168 = (void **)__p[0];
    if (v627 >= 0)
      v169 = v627 & 0x7F;
    else
      v169 = (size_t)__p[1];
    llvm::cloneAndAdaptNoAliasScopes(v594, v595, (uint64_t)v631, v632[0], **(uint64_t ***)v101, v168, v169);
    if (v627 < 0)
      operator delete(__p[0]);
    v170 = (_QWORD **)*((_QWORD *)this + 1);
    v171 = (_QWORD **)*((_QWORD *)this + 2);
    while (v170 != v171)
    {
      v172 = *v170++;
      llvm::cloneLoop(v172, (uint64_t)v106, (uint64_t)&v610, (uint64_t)a3, 0);
    }
    v173 = (_QWORD *)*((_QWORD *)v606 + 5);
    if (v173 == (_QWORD *)((char *)v606 + 40))
    {
      v175 = 0;
    }
    else
    {
      if (v173)
        v174 = (unsigned __int8 *)(v173 - 3);
      else
        v174 = 0;
      if (v174[16] - 29 >= 0xB)
        v175 = 0;
      else
        v175 = (llvm::Instruction *)v174;
    }
    v640 = 2;
    v641 = 0;
    v642 = (int32x2_t ****)v101;
    if (v101 != -8192 && v101 != -4096 && v101)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
    v639 = (const char *)&unk_1E814DA10;
    v643 = &v610;
    v176 = sub_1C52E2ED8((uint64_t)&v610, &v639);
    if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
    {
      v177 = v640 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
      if (v641)
      {
        *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v177;
      }
      else
      {
        v178 = v642;
        v179 = ***v642;
        v180 = (unint64_t)v179[303];
        if (v180 <= v177)
        {
          v181 = v179[305].u32[0];
          if (v180 + 16 * v181 > v177)
          {
            v182 = v181 - 1;
            LODWORD(v183) = v182 & ((v642 >> 4) ^ (v642 >> 9));
            v184 = (int32x2_t *****)(v180 + 16 * v183);
            v185 = *v184;
            if (v642 == *v184)
            {
LABEL_232:
              *v184 = (int32x2_t ****)-8192;
              v179[304] = vadd_s32(v179[304], (int32x2_t)0x1FFFFFFFFLL);
              v178 = v642;
            }
            else
            {
              v186 = 1;
              while (v185 != (int32x2_t ****)-4096)
              {
                v187 = v183 + v186++;
                v183 = v187 & v182;
                v185 = *(int32x2_t *****)(v180 + 16 * v183);
                if (v642 == v185)
                {
                  v184 = (int32x2_t *****)(v180 + 16 * v183);
                  goto LABEL_232;
                }
              }
            }
            *((_BYTE *)v178 + 17) &= ~1u;
          }
        }
      }
    }
    llvm::Instruction::setSuccessor(v175, 0, (llvm::BasicBlock *)v176[7]);
    v640 = 2;
    v641 = 0;
    v642 = (int32x2_t ****)v600;
    if (v600 != -8192 && v600 != -4096 && v600)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
    v639 = (const char *)&unk_1E814DA10;
    v643 = &v610;
    v188 = sub_1C52E2ED8((uint64_t)&v610, &v639);
    if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
    {
      v189 = v640 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
      if (v641)
      {
        *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v189;
      }
      else
      {
        v190 = v642;
        v191 = ***v642;
        v192 = (unint64_t)v191[303];
        if (v192 <= v189)
        {
          v193 = v191[305].u32[0];
          if (v192 + 16 * v193 > v189)
          {
            v194 = v193 - 1;
            LODWORD(v195) = v194 & ((v642 >> 4) ^ (v642 >> 9));
            v196 = (int32x2_t *****)(v192 + 16 * v195);
            v197 = *v196;
            if (v642 == *v196)
            {
LABEL_250:
              *v196 = (int32x2_t ****)-8192;
              v191[304] = vadd_s32(v191[304], (int32x2_t)0x1FFFFFFFFLL);
              v190 = v642;
            }
            else
            {
              v198 = 1;
              while (v197 != (int32x2_t ****)-4096)
              {
                v199 = v195 + v198++;
                v195 = v199 & v194;
                v197 = *(int32x2_t *****)(v192 + 16 * v195);
                if (v642 == v197)
                {
                  v196 = (int32x2_t *****)(v192 + 16 * v195);
                  goto LABEL_250;
                }
              }
            }
            *((_BYTE *)v190 + 17) &= ~1u;
          }
        }
      }
    }
    v200 = v188[7];
    v201 = *(_QWORD *)(v200 + 40);
    if (v201 == v200 + 40)
    {
      v203 = 0;
    }
    else
    {
      if (v201)
        v202 = v201 - 24;
      else
        v202 = 0;
      if (*(unsigned __int8 *)(v202 + 16) - 29 >= 0xB)
        v203 = 0;
      else
        v203 = v202;
    }
    v204 = 0;
    v205 = 1;
    while (*(_QWORD *)(v203 - 32 - 32 * v204) != v101)
    {
      v206 = ((*(_DWORD *)(v203 + 20) & 0x7FFFFFF) == 3) & v205;
      v204 = 1;
      v205 = 0;
      if ((v206 & 1) == 0)
        goto LABEL_266;
    }
    sub_1C53E1B14(v203, v204, (uint64_t)v598);
LABEL_266:
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator((uint64_t)a5, (uint64_t)v598, v200);
    for (i = *(_QWORD *)(v101 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v208 = i ? i - 24 : 0;
      if (*(_BYTE *)(v208 + 16) != 83)
        break;
      v640 = 2;
      v641 = 0;
      v642 = (int32x2_t ****)(i - 24);
      if (i != -8168 && i != -4072 && i != 24)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
      v639 = (const char *)&unk_1E814DA10;
      v643 = &v610;
      v209 = sub_1C52E2ED8((uint64_t)&v610, &v639);
      if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642 != 0)
      {
        v211 = v640 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
        if (v641)
        {
          *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v211;
        }
        else
        {
          v212 = v642;
          v213 = ***v642;
          v214 = (unint64_t)v213[303];
          if (v214 <= v211)
          {
            v215 = v213[305].u32[0];
            if (v214 + 16 * v215 > v211)
            {
              v216 = v215 - 1;
              LODWORD(v217) = v216 & ((v642 >> 4) ^ (v642 >> 9));
              v218 = (int32x2_t *****)(v214 + 16 * v217);
              v219 = *v218;
              if (v642 == *v218)
              {
LABEL_288:
                *v218 = (int32x2_t ****)-8192;
                v213[304] = vadd_s32(v213[304], (int32x2_t)0x1FFFFFFFFLL);
                v212 = v642;
              }
              else
              {
                v220 = 1;
                while (v219 != (int32x2_t ****)-4096)
                {
                  v221 = v217 + v220++;
                  v217 = v221 & v216;
                  v219 = *(int32x2_t *****)(v214 + 16 * v217);
                  if (v642 == v219)
                  {
                    v218 = (int32x2_t *****)(v214 + 16 * v217);
                    goto LABEL_288;
                  }
                }
              }
              *((_BYTE *)v212 + 17) &= ~1u;
            }
          }
        }
      }
      v222 = v209[7];
      v223 = *(_DWORD *)(v222 + 20);
      v224 = v223 & 0x7FFFFFF;
      if (v602)
      {
        if ((_DWORD)v224)
        {
          v225 = 0;
          while (1)
          {
            v226 = v222 - 32 * v224;
            if ((v223 & 0x40000000) != 0)
              v226 = *(_QWORD *)(v222 - 8);
            if (*(_QWORD *)(v226 + 32 * *(unsigned int *)(v222 + 60) + 8 * v225) == v600)
              break;
            if (v224 == ++v225)
              goto LABEL_298;
          }
        }
        else
        {
LABEL_298:
          LODWORD(v225) = -1;
        }
        if ((v223 & 0x40000000) != 0)
          v227 = *(_QWORD *)(v222 - 8);
        else
          v227 = v222 - 32 * v224;
        v228 = *(_QWORD *)(v227 + 32 * v225);
        if (v228)
          v229 = *(unsigned __int8 *)(v228 + 16) >= 0x1Cu;
        else
          v229 = 0;
        if (!v229)
          goto LABEL_328;
        v230 = sub_1C477672C((uint64_t)v609, *(_QWORD *)(v228 + 40));
        v231 = *((_QWORD *)this + 8);
        v232 = 72;
        if (v231 == *((_QWORD *)this + 7))
          v232 = 76;
        if (v230 == (_QWORD *)(v231 + 8 * *(unsigned int *)((char *)this + v232)))
        {
LABEL_328:
          v640 = 2;
          v641 = 0;
          v642 = (int32x2_t ****)(i - 24);
          if (i != -8168 && i != -4072 && i != 24)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
          v639 = (const char *)&unk_1E814DA10;
          v643 = &v610;
          v246 = sub_1C52E2ED8((uint64_t)&v610, &v639);
          if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
          {
            v247 = v640 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
            if (v641)
            {
              *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v247;
            }
            else
            {
              v248 = v642;
              v249 = ***v642;
              v250 = (unint64_t)v249[303];
              if (v250 <= v247)
              {
                v251 = v249[305].u32[0];
                if (v250 + 16 * v251 > v247)
                {
                  v252 = v251 - 1;
                  LODWORD(v253) = v252 & ((v642 >> 4) ^ (v642 >> 9));
                  v254 = (int32x2_t *****)(v250 + 16 * v253);
                  v255 = *v254;
                  if (v642 == *v254)
                  {
LABEL_343:
                    *v254 = (int32x2_t ****)-8192;
                    v249[304] = vadd_s32(v249[304], (int32x2_t)0x1FFFFFFFFLL);
                    v248 = v642;
                  }
                  else
                  {
                    v256 = 1;
                    while (v255 != (int32x2_t ****)-4096)
                    {
                      v257 = v253 + v256++;
                      v253 = v257 & v252;
                      v255 = *(int32x2_t *****)(v250 + 16 * v253);
                      if (v642 == v255)
                      {
                        v254 = (int32x2_t *****)(v250 + 16 * v253);
                        goto LABEL_343;
                      }
                    }
                  }
                  *((_BYTE *)v248 + 17) &= ~1u;
                }
              }
            }
          }
          v272 = v246[7];
          if (v272 != v228)
          {
            if (!v272 || v272 == -8192 || v272 == -4096)
              goto LABEL_387;
            v273 = v246[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v273 = v246[6];
            v274 = (unint64_t *)v246[6];
            if (!v274)
            {
              v275 = v246[7];
              v276 = ***(int32x2_t ****)v275;
              v277 = (unint64_t)v276[303];
              if (v277 > v273)
                goto LABEL_387;
              v278 = v276[305].u32[0];
              if (v277 + 16 * v278 <= v273)
                goto LABEL_387;
              v279 = v278 - 1;
              LODWORD(v280) = v279 & ((v275 >> 4) ^ (v275 >> 9));
              v281 = (uint64_t *)(v277 + 16 * v280);
              v282 = *v281;
              if (v275 != *v281)
              {
                v283 = 1;
                while (v282 != -4096)
                {
                  v284 = v280 + v283++;
                  v280 = v284 & v279;
                  v282 = *(_QWORD *)(v277 + 16 * v280);
                  if (v275 == v282)
                    goto LABEL_467;
                }
                goto LABEL_469;
              }
              goto LABEL_468;
            }
            goto LABEL_470;
          }
        }
        else
        {
          v640 = 2;
          v641 = 0;
          v642 = (int32x2_t ****)v228;
          if (v228 != -8192 && v228 != -4096 && v228 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
          v639 = (const char *)&unk_1E814DA10;
          v643 = (uint64_t **)v615;
          v234 = sub_1C52E2ED8((uint64_t)v615, &v639);
          if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
          {
            v235 = v640 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
            if (v641)
            {
              *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v235;
            }
            else
            {
              v236 = v642;
              v237 = ***v642;
              v238 = (unint64_t)v237[303];
              if (v238 <= v235)
              {
                v239 = v237[305].u32[0];
                if (v238 + 16 * v239 > v235)
                {
                  v240 = v239 - 1;
                  LODWORD(v241) = v240 & ((v642 >> 4) ^ (v642 >> 9));
                  v242 = (int32x2_t *****)(v238 + 16 * v241);
                  v243 = *v242;
                  if (v642 == *v242)
                  {
LABEL_326:
                    *v242 = (int32x2_t ****)-8192;
                    v237[304] = vadd_s32(v237[304], (int32x2_t)0x1FFFFFFFFLL);
                    v236 = v642;
                  }
                  else
                  {
                    v244 = 1;
                    while (v243 != (int32x2_t ****)-4096)
                    {
                      v245 = v241 + v244++;
                      v241 = v245 & v240;
                      v243 = *(int32x2_t *****)(v238 + 16 * v241);
                      if (v642 == v243)
                      {
                        v242 = (int32x2_t *****)(v238 + 16 * v241);
                        goto LABEL_326;
                      }
                    }
                  }
                  *((_BYTE *)v236 + 17) &= ~1u;
                }
              }
            }
          }
          v640 = 2;
          v641 = 0;
          v642 = (int32x2_t ****)(i - 24);
          if (i != -8168 && i != -4072 && i != 24)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
          v639 = (const char *)&unk_1E814DA10;
          v643 = &v610;
          v304 = sub_1C52E2ED8((uint64_t)&v610, &v639);
          if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
          {
            v305 = v640 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
            if (v641)
            {
              *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v305;
            }
            else
            {
              v306 = v642;
              v307 = ***v642;
              v308 = (unint64_t)v307[303];
              if (v308 <= v305)
              {
                v309 = v307[305].u32[0];
                if (v308 + 16 * v309 > v305)
                {
                  v310 = v309 - 1;
                  LODWORD(v311) = v310 & ((v642 >> 4) ^ (v642 >> 9));
                  v312 = (int32x2_t *****)(v308 + 16 * v311);
                  v313 = *v312;
                  if (v642 == *v312)
                  {
LABEL_431:
                    *v312 = (int32x2_t ****)-8192;
                    v307[304] = vadd_s32(v307[304], (int32x2_t)0x1FFFFFFFFLL);
                    v306 = v642;
                  }
                  else
                  {
                    v314 = 1;
                    while (v313 != (int32x2_t ****)-4096)
                    {
                      v315 = v311 + v314++;
                      v311 = v315 & v310;
                      v313 = *(int32x2_t *****)(v308 + 16 * v311);
                      if (v642 == v313)
                      {
                        v312 = (int32x2_t *****)(v308 + 16 * v311);
                        goto LABEL_431;
                      }
                    }
                  }
                  *((_BYTE *)v306 + 17) &= ~1u;
                }
              }
            }
          }
          v316 = v304[7];
          v317 = v234[7];
          if (v316 != v317)
          {
            v318 = v316 == -4096 || v316 == 0;
            if (!v318 && v316 != -8192)
            {
              v323 = v304[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v323 = v304[6];
              v324 = (unint64_t *)v304[6];
              if (v324)
              {
                *v324 = *v324 & 7 | v323;
              }
              else
              {
                v325 = v304[7];
                v326 = ***(int32x2_t ****)v325;
                v327 = (unint64_t)v326[303];
                if (v327 <= v323)
                {
                  v328 = v326[305].u32[0];
                  if (v327 + 16 * v328 > v323)
                  {
                    v329 = v328 - 1;
                    LODWORD(v330) = v329 & ((v325 >> 4) ^ (v325 >> 9));
                    v331 = (uint64_t *)(v327 + 16 * v330);
                    v332 = *v331;
                    if (v325 == *v331)
                    {
LABEL_456:
                      *v331 = -8192;
                      v326[304] = vadd_s32(v326[304], (int32x2_t)0x1FFFFFFFFLL);
                      v325 = v304[7];
                    }
                    else
                    {
                      v333 = 1;
                      while (v332 != -4096)
                      {
                        v334 = v330 + v333++;
                        v330 = v334 & v329;
                        v332 = *(_QWORD *)(v327 + 16 * v330);
                        if (v325 == v332)
                        {
                          v331 = (uint64_t *)(v327 + 16 * v330);
                          goto LABEL_456;
                        }
                      }
                    }
                    *(_BYTE *)(v325 + 17) &= ~1u;
                  }
                }
              }
              v317 = v234[7];
            }
            v304[7] = v317;
            if (v317 != -4096 && v317 != -8192 && v317 != 0)
            {
              v320 = v304 + 5;
              v321 = v234[5] & 0xFFFFFFFFFFFFFFF8;
              v304[6] = *(_QWORD *)v321;
              v322 = (unint64_t **)(v304 + 6);
              *(_QWORD *)v321 = v320;
              *(v322 - 1) = (unint64_t *)(v321 | (unint64_t)*(v322 - 1) & 7);
              if (*v322)
                **v322 = **v322 & 7 | (unint64_t)v322;
            }
          }
        }
      }
      else
      {
        if ((_DWORD)v224)
        {
          v258 = 0;
          while (1)
          {
            v259 = v222 - 32 * v224;
            if ((v223 & 0x40000000) != 0)
              v259 = *(_QWORD *)(v222 - 8);
            if (*(_QWORD *)(v259 + 32 * *(unsigned int *)(v222 + 60) + 8 * v258) == v599)
              break;
            if (v224 == ++v258)
              goto LABEL_351;
          }
        }
        else
        {
LABEL_351:
          LODWORD(v258) = -1;
        }
        if ((v223 & 0x40000000) != 0)
          v260 = *(_QWORD *)(v222 - 8);
        else
          v260 = v222 - 32 * v224;
        v228 = *(_QWORD *)(v260 + 32 * v258);
        v640 = 2;
        v641 = 0;
        v642 = (int32x2_t ****)(i - 24);
        if (i != -8168 && i != -4072 && i != 24)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
        v639 = (const char *)&unk_1E814DA10;
        v643 = &v610;
        v246 = sub_1C52E2ED8((uint64_t)&v610, &v639);
        if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
        {
          v261 = v640 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
          if (v641)
          {
            *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v261;
          }
          else
          {
            v262 = v642;
            v263 = ***v642;
            v264 = (unint64_t)v263[303];
            if (v264 <= v261)
            {
              v265 = v263[305].u32[0];
              if (v264 + 16 * v265 > v261)
              {
                v266 = v265 - 1;
                LODWORD(v267) = v266 & ((v642 >> 4) ^ (v642 >> 9));
                v268 = (int32x2_t *****)(v264 + 16 * v267);
                v269 = *v268;
                if (v642 == *v268)
                {
LABEL_369:
                  *v268 = (int32x2_t ****)-8192;
                  v263[304] = vadd_s32(v263[304], (int32x2_t)0x1FFFFFFFFLL);
                  v262 = v642;
                }
                else
                {
                  v270 = 1;
                  while (v269 != (int32x2_t ****)-4096)
                  {
                    v271 = v267 + v270++;
                    v267 = v271 & v266;
                    v269 = *(int32x2_t *****)(v264 + 16 * v267);
                    if (v642 == v269)
                    {
                      v268 = (int32x2_t *****)(v264 + 16 * v267);
                      goto LABEL_369;
                    }
                  }
                }
                *((_BYTE *)v262 + 17) &= ~1u;
              }
            }
          }
        }
        v285 = v246[7];
        if (v285 != v228)
        {
          if (!v285 || v285 == -8192 || v285 == -4096)
            goto LABEL_387;
          v273 = v246[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v273 = v246[6];
          v274 = (unint64_t *)v246[6];
          if (!v274)
          {
            v275 = v246[7];
            v276 = ***(int32x2_t ****)v275;
            v277 = (unint64_t)v276[303];
            if (v277 > v273)
              goto LABEL_387;
            v335 = v276[305].u32[0];
            if (v277 + 16 * v335 <= v273)
              goto LABEL_387;
            v336 = v335 - 1;
            LODWORD(v280) = v336 & ((v275 >> 4) ^ (v275 >> 9));
            v281 = (uint64_t *)(v277 + 16 * v280);
            v337 = *v281;
            if (v275 != *v281)
            {
              v338 = 1;
              while (v337 != -4096)
              {
                v339 = v280 + v338++;
                v280 = v339 & v336;
                v337 = *(_QWORD *)(v277 + 16 * v280);
                if (v275 == v337)
                {
LABEL_467:
                  v281 = (uint64_t *)(v277 + 16 * v280);
                  goto LABEL_468;
                }
              }
LABEL_469:
              *(_BYTE *)(v275 + 17) &= ~1u;
LABEL_387:
              v246[7] = v228;
              if (v228 != -8192 && v228 != -4096 && v228)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v246 + 5));
              goto LABEL_391;
            }
LABEL_468:
            *v281 = -8192;
            v276[304] = vadd_s32(v276[304], (int32x2_t)0x1FFFFFFFFLL);
            v275 = v246[7];
            goto LABEL_469;
          }
LABEL_470:
          *v274 = *v274 & 7 | v273;
          goto LABEL_387;
        }
      }
LABEL_391:
      v640 = 2;
      v641 = 0;
      v642 = (int32x2_t ****)v101;
      if (v101 != -8192 && v101 != -4096 && v101)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
      v639 = (const char *)&unk_1E814DA10;
      v643 = &v610;
      v286 = sub_1C52E2ED8((uint64_t)&v610, &v639);
      if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
      {
        v287 = v640 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
        if (v641)
        {
          *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v287;
        }
        else
        {
          v288 = v642;
          v289 = ***v642;
          v290 = (unint64_t)v289[303];
          if (v290 <= v287)
          {
            v291 = v289[305].u32[0];
            if (v290 + 16 * v291 > v287)
            {
              v292 = v291 - 1;
              LODWORD(v293) = v292 & ((v642 >> 4) ^ (v642 >> 9));
              v294 = (int32x2_t *****)(v290 + 16 * v293);
              v295 = *v294;
              if (v642 == *v294)
              {
LABEL_406:
                *v294 = (int32x2_t ****)-8192;
                v289[304] = vadd_s32(v289[304], (int32x2_t)0x1FFFFFFFFLL);
                v288 = v642;
              }
              else
              {
                v296 = 1;
                while (v295 != (int32x2_t ****)-4096)
                {
                  v297 = v293 + v296++;
                  v293 = v297 & v292;
                  v295 = *(int32x2_t *****)(v290 + 16 * v293);
                  if (v642 == v295)
                  {
                    v294 = (int32x2_t *****)(v290 + 16 * v293);
                    goto LABEL_406;
                  }
                }
              }
              *((_BYTE *)v288 + 17) &= ~1u;
            }
          }
        }
      }
      v298 = v222 + 24;
      if (!v222)
        v298 = 0;
      v299 = v298 - 24;
      v300 = v286[7] + 40;
      if (v222)
        v301 = v299;
      else
        v301 = 0;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v300, (uint64_t ***)v301);
      v302 = *(_QWORD *)(v301 + 24);
      v303 = *(_QWORD **)(v301 + 32);
      *v303 = v302;
      *(_QWORD *)(v302 + 8) = v303;
      *(_QWORD *)(v301 + 24) = 0;
      *(_QWORD *)(v301 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v301);
    }
    if ((_DWORD)v637)
    {
      v340 = (char *)v636;
      v341 = (char *)v636 + 16 * v637;
      do
      {
        if (*(_QWORD *)(*((_QWORD *)v340 + 1) + 40) != *((_QWORD *)v340 + 1) + 40)
        {
          v342 = *(_QWORD *)(*((_QWORD *)v340 + 1) + 48);
          v343 = v342 - 24;
          v344 = v342 ? v342 - 24 : 0;
          if (v342 && *(_BYTE *)(v344 + 16) == 83)
          {
            v345 = *(int32x2_t *****)v340;
            do
            {
              v346 = *(_DWORD *)(v343 + 20);
              v347 = v346 & 0x7FFFFFF;
              if ((v346 & 0x7FFFFFF) != 0)
              {
                v348 = 0;
                while (1)
                {
                  v349 = v343 - 32 * v347;
                  if ((v346 & 0x40000000) != 0)
                    v349 = *(_QWORD *)(v343 - 8);
                  if (*(int32x2_t *****)(v349 + 32 * *(unsigned int *)(v343 + 60) + 8 * v348) == v345)
                    break;
                  if (v347 == ++v348)
                    goto LABEL_490;
                }
              }
              else
              {
LABEL_490:
                LODWORD(v348) = -1;
              }
              if ((v346 & 0x40000000) != 0)
                v350 = *(_QWORD *)(v343 - 8);
              else
                v350 = v343 - 32 * v347;
              v351 = *(_QWORD *)(v350 + 32 * v348);
              if (v351)
                v352 = *(unsigned __int8 *)(v351 + 16) >= 0x1Cu;
              else
                v352 = 0;
              if (v352)
              {
                v353 = sub_1C477672C((uint64_t)v609, *(_QWORD *)(v351 + 40));
                v354 = *((_QWORD *)this + 8);
                v355 = 72;
                if (v354 == *((_QWORD *)this + 7))
                  v355 = 76;
                if (v353 != (_QWORD *)(v354 + 8 * *(unsigned int *)((char *)this + v355)))
                {
                  v640 = 2;
                  v641 = 0;
                  v642 = (int32x2_t ****)v351;
                  if (v351 != -8192 && v351 != -4096 && v351 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
                  v639 = (const char *)&unk_1E814DA10;
                  v643 = &v610;
                  v357 = sub_1C52E2ED8((uint64_t)&v610, &v639);
                  if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
                  {
                    v358 = v640 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
                    if (v641)
                    {
                      *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v358;
                    }
                    else
                    {
                      v359 = v642;
                      v360 = ***v642;
                      v361 = (unint64_t)v360[303];
                      if (v361 <= v358)
                      {
                        v362 = v360[305].u32[0];
                        if (v361 + 16 * v362 > v358)
                        {
                          v363 = v362 - 1;
                          LODWORD(v364) = v363 & ((v642 >> 4) ^ (v642 >> 9));
                          v365 = (int32x2_t *****)(v361 + 16 * v364);
                          v366 = *v365;
                          if (v642 == *v365)
                          {
LABEL_518:
                            *v365 = (int32x2_t ****)-8192;
                            v360[304] = vadd_s32(v360[304], (int32x2_t)0x1FFFFFFFFLL);
                            v359 = v642;
                          }
                          else
                          {
                            v367 = 1;
                            while (v366 != (int32x2_t ****)-4096)
                            {
                              v368 = v364 + v367++;
                              v364 = v368 & v363;
                              v366 = *(int32x2_t *****)(v361 + 16 * v364);
                              if (v642 == v366)
                              {
                                v365 = (int32x2_t *****)(v361 + 16 * v364);
                                goto LABEL_518;
                              }
                            }
                          }
                          *((_BYTE *)v359 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v351 = v357[7];
                }
              }
              v640 = 2;
              v641 = 0;
              v642 = v345;
              if (v345 != (int32x2_t ****)-8192 && v345 != (int32x2_t ****)-4096 && v345)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
              v639 = (const char *)&unk_1E814DA10;
              v643 = &v610;
              v369 = sub_1C52E2ED8((uint64_t)&v610, &v639);
              if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
              {
                v370 = v640 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
                if (v641)
                {
                  *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v370;
                }
                else
                {
                  v371 = v642;
                  v372 = ***v642;
                  v373 = (unint64_t)v372[303];
                  if (v373 <= v370)
                  {
                    v374 = v372[305].u32[0];
                    if (v373 + 16 * v374 > v370)
                    {
                      v375 = v374 - 1;
                      LODWORD(v376) = v375 & ((v642 >> 4) ^ (v642 >> 9));
                      v377 = (int32x2_t *****)(v373 + 16 * v376);
                      v378 = *v377;
                      if (v642 == *v377)
                      {
LABEL_537:
                        *v377 = (int32x2_t ****)-8192;
                        v372[304] = vadd_s32(v372[304], (int32x2_t)0x1FFFFFFFFLL);
                        v371 = v642;
                      }
                      else
                      {
                        v379 = 1;
                        while (v378 != (int32x2_t ****)-4096)
                        {
                          v380 = v376 + v379++;
                          v376 = v380 & v375;
                          v378 = *(int32x2_t *****)(v373 + 16 * v376);
                          if (v642 == v378)
                          {
                            v377 = (int32x2_t *****)(v373 + 16 * v376);
                            goto LABEL_537;
                          }
                        }
                      }
                      *((_BYTE *)v371 + 17) &= ~1u;
                    }
                  }
                }
              }
              sub_1C477667C((llvm::PHINode *)v343, v351, v369[7]);
              v381 = *(_QWORD *)(v343 + 32);
              v343 = v381 - 24;
              if (v381)
                v382 = v381 - 24;
              else
                v382 = 0;
            }
            while (v381 && *(_BYTE *)(v382 + 16) == 83);
          }
        }
        v340 += 16;
      }
      while (v340 != v341);
    }
    v383 = &v610[8 * (unint64_t)v612];
    if ((_DWORD)v611)
    {
      v384 = v592;
      if (v612)
      {
        v385 = (unint64_t)v612 << 6;
        v386 = v610;
        while ((v386[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v386 += 8;
          v385 -= 64;
          if (!v385)
          {
            v386 = &v610[8 * (unint64_t)v612];
            break;
          }
        }
      }
      else
      {
        v386 = v610;
      }
    }
    else
    {
      v386 = &v610[8 * (unint64_t)v612];
      v384 = v592;
    }
    v387 = &v610[8 * (unint64_t)v612];
LABEL_556:
    while (v386 != v387)
    {
      v388 = (int32x2_t ****)v386[3];
      v640 = 2;
      v641 = 0;
      v642 = v388;
      if (v388 != (int32x2_t ****)-8192 && v388 != (int32x2_t ****)-4096 && v388 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
      v639 = (const char *)&unk_1E814DA10;
      v643 = (uint64_t **)v615;
      v390 = sub_1C52E2ED8((uint64_t)v615, &v639);
      if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642 != 0)
      {
        v392 = v640 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
        if (v641)
        {
          *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v392;
        }
        else
        {
          v393 = v642;
          v394 = ***v642;
          v395 = (unint64_t)v394[303];
          if (v395 <= v392)
          {
            v396 = v394[305].u32[0];
            if (v395 + 16 * v396 > v392)
            {
              v397 = v396 - 1;
              LODWORD(v398) = v397 & ((v642 >> 4) ^ (v642 >> 9));
              v399 = (int32x2_t *****)(v395 + 16 * v398);
              v400 = *v399;
              if (v642 == *v399)
              {
LABEL_576:
                *v399 = (int32x2_t ****)-8192;
                v394[304] = vadd_s32(v394[304], (int32x2_t)0x1FFFFFFFFLL);
                v393 = v642;
              }
              else
              {
                v401 = 1;
                while (v400 != (int32x2_t ****)-4096)
                {
                  v402 = v398 + v401++;
                  v398 = v402 & v397;
                  v400 = *(int32x2_t *****)(v395 + 16 * v398);
                  if (v642 == v400)
                  {
                    v399 = (int32x2_t *****)(v395 + 16 * v398);
                    goto LABEL_576;
                  }
                }
              }
              *((_BYTE *)v393 + 17) &= ~1u;
            }
          }
        }
      }
      v403 = v390[7];
      v404 = v386[7];
      if (v403 != v404)
      {
        v405 = v403 == -4096 || v403 == 0;
        if (!v405 && v403 != -8192)
        {
          v411 = v390[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v411 = v390[6];
          v412 = (unint64_t *)v390[6];
          if (v412)
          {
            *v412 = *v412 & 7 | v411;
          }
          else
          {
            v413 = v390[7];
            v414 = ***(int32x2_t ****)v413;
            v415 = (unint64_t)v414[303];
            if (v415 <= v411)
            {
              v416 = v414[305].u32[0];
              if (v415 + 16 * v416 > v411)
              {
                v417 = v416 - 1;
                LODWORD(v418) = v417 & ((v413 >> 4) ^ (v413 >> 9));
                v419 = (uint64_t *)(v415 + 16 * v418);
                v420 = *v419;
                if (v413 == *v419)
                {
LABEL_606:
                  *v419 = -8192;
                  v414[304] = vadd_s32(v414[304], (int32x2_t)0x1FFFFFFFFLL);
                  v413 = v390[7];
                }
                else
                {
                  v421 = 1;
                  while (v420 != -4096)
                  {
                    v422 = v418 + v421++;
                    v418 = v422 & v417;
                    v420 = *(_QWORD *)(v415 + 16 * v418);
                    if (v413 == v420)
                    {
                      v419 = (uint64_t *)(v415 + 16 * v418);
                      goto LABEL_606;
                    }
                  }
                }
                *(_BYTE *)(v413 + 17) &= ~1u;
              }
            }
          }
          v404 = v386[7];
        }
        v390[7] = v404;
        if (v404 != -4096 && v404 != -8192 && v404 != 0)
        {
          v407 = v390 + 5;
          v408 = v386[5] & 0xFFFFFFFFFFFFFFF8;
          v390[6] = *(_QWORD *)v408;
          v409 = (unint64_t **)(v390 + 6);
          *(_QWORD *)v408 = v407;
          *(v409 - 1) = (unint64_t *)(v408 | (unint64_t)*(v409 - 1) & 7);
          if (*v409)
            **v409 = **v409 & 7 | (unint64_t)v409;
        }
      }
      v410 = v386 + 8;
      v386 = v383;
      if (v410 != v383)
      {
        v386 = v410;
        while ((v386[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v386 += 8;
          if (v386 == v383)
          {
            v386 = v383;
            goto LABEL_556;
          }
        }
      }
    }
    llvm::remapInstructionsInBlocks((uint64_t *)&v631, (uint64_t)&v610);
    if (!v602)
    {
      v436 = &v619[2 * v621];
      if ((_DWORD)v620)
      {
        if (v621)
        {
          v437 = 16 * v621;
          v438 = v619;
          while ((*v438 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v438 += 2;
            v437 -= 16;
            if (!v437)
              goto LABEL_633;
          }
        }
        else
        {
          v438 = v619;
        }
      }
      else
      {
LABEL_633:
        v438 = &v619[2 * v621];
      }
      v491 = &v619[2 * v621];
LABEL_705:
      while (v438 != v491)
      {
        v493 = *v438;
        v492 = (int32x2_t ****)v438[1];
        v640 = 2;
        v641 = 0;
        v642 = v492;
        if (v492 != (int32x2_t ****)-8192 && v492 != (int32x2_t ****)-4096 && v492 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
        v639 = (const char *)&unk_1E814DA10;
        v643 = (uint64_t **)v615;
        v495 = sub_1C52E2ED8((uint64_t)v615, &v639);
        if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642 != 0)
        {
          v497 = v640 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
          if (v641)
          {
            *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v497;
          }
          else
          {
            v498 = v642;
            v499 = ***v642;
            v500 = (unint64_t)v499[303];
            if (v500 <= v497)
            {
              v501 = v499[305].u32[0];
              if (v500 + 16 * v501 > v497)
              {
                v502 = v501 - 1;
                LODWORD(v503) = v502 & ((v642 >> 4) ^ (v642 >> 9));
                v504 = (int32x2_t *****)(v500 + 16 * v503);
                v505 = *v504;
                if (v642 == *v504)
                {
LABEL_725:
                  *v504 = (int32x2_t ****)-8192;
                  v499[304] = vadd_s32(v499[304], (int32x2_t)0x1FFFFFFFFLL);
                  v498 = v642;
                }
                else
                {
                  v506 = 1;
                  while (v505 != (int32x2_t ****)-4096)
                  {
                    v507 = v503 + v506++;
                    v503 = v507 & v502;
                    v505 = *(int32x2_t *****)(v500 + 16 * v503);
                    if (v642 == v505)
                    {
                      v504 = (int32x2_t *****)(v500 + 16 * v503);
                      goto LABEL_725;
                    }
                  }
                }
                *((_BYTE *)v498 + 17) &= ~1u;
              }
            }
          }
        }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator((uint64_t)a5, v493, v495[7]);
        v508 = v438 + 2;
        v438 = v436;
        if (v508 != v436)
        {
          v438 = v508;
          while ((*v438 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v438 += 2;
            if (v438 == v436)
            {
              v438 = v436;
              goto LABEL_705;
            }
          }
        }
      }
    }
    v640 = 2;
    v641 = 0;
    v642 = (int32x2_t ****)v591;
    if (v591 != (uint64_t ***)-8192 && v591 != (uint64_t ***)-4096 && v591)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v640);
    v639 = (const char *)&unk_1E814DA10;
    v643 = &v610;
    v423 = sub_1C52E2ED8((uint64_t)&v610, &v639);
    v424 = (uint64_t)v597;
    if (v642 != (int32x2_t ****)-8192 && v642 != (int32x2_t ****)-4096 && v642)
    {
      v425 = v640 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v640 & 0xFFFFFFFFFFFFFFF8) = v641;
      if (v641)
      {
        *(_QWORD *)v641 = *(_QWORD *)v641 & 7 | v425;
      }
      else
      {
        v426 = v642;
        v427 = ***v642;
        v428 = (unint64_t)v427[303];
        if (v428 <= v425)
        {
          v429 = v427[305].u32[0];
          if (v428 + 16 * v429 > v425)
          {
            v430 = v429 - 1;
            LODWORD(v431) = v430 & ((v642 >> 4) ^ (v642 >> 9));
            v432 = (int32x2_t *****)(v428 + 16 * v431);
            v433 = *v432;
            if (v642 == *v432)
            {
LABEL_626:
              *v432 = (int32x2_t ****)-8192;
              v427[304] = vadd_s32(v427[304], (int32x2_t)0x1FFFFFFFFLL);
              v426 = v642;
            }
            else
            {
              v434 = 1;
              while (v433 != (int32x2_t ****)-4096)
              {
                v435 = v431 + v434++;
                v431 = v435 & v430;
                v433 = *(int32x2_t *****)(v428 + 16 * v431);
                if (v642 == v433)
                {
                  v432 = (int32x2_t *****)(v428 + 16 * v431);
                  goto LABEL_626;
                }
              }
            }
            *((_BYTE *)v426 + 17) &= ~1u;
          }
        }
      }
    }
    v439 = (void ***)v423[7];
    if (v597)
    {
      v509 = (uint64_t ***)*(v439 - 4);
      __p[0] = **v439;
      if (v509 == v598)
        v639 = (const char *)__PAIR64__(v588, v597);
      else
        v639 = (const char *)__PAIR64__(v597, v588);
      BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)__p, (uint64_t)&v639, 2);
      if (BranchWeights || v439[6] || (*((_BYTE *)v439 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)v439, 2, BranchWeights);
      if (v597 <= v588)
        v424 = 1;
      else
        v424 = v597 - v588;
    }
    if (v439[6] || (*((_BYTE *)v439 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v439, 18, 0);
    v440 = (uint64_t ***)v598[5];
    v597 = (_BYTE *)v424;
    if (v440 == v598 + 5)
    {
      v442 = 0;
    }
    else
    {
      if (v440)
        v441 = (unsigned __int8 *)(v440 - 3);
      else
        v441 = 0;
      if (v441[16] - 29 >= 0xB)
        v442 = 0;
      else
        v442 = (llvm::BasicBlock *)v441;
    }
    a7 = &v633;
    LOWORD(v643) = 257;
    v443 = (uint64_t ***)sub_1C5EBD70C((llvm *)v598, v442, 0, (uint64_t)a5, a3, 0, (llvm::Twine *)&v639, 0);
    v45 = v443;
    if ((*((_BYTE *)v384 + 23) & 0x10) != 0)
    {
      v444 = ***(_QWORD ***)v384;
      v445 = *(_QWORD *)(v444 + 152);
      v446 = *(unsigned int *)(v444 + 168);
      if (!(_DWORD)v446)
        goto LABEL_654;
      LODWORD(v447) = (v446 - 1) & v590;
      v448 = (llvm::BasicBlock **)(v445 + 16 * v447);
      v449 = *v448;
      if (*v448 != v384)
      {
        v450 = 1;
        while (v449 != (llvm::BasicBlock *)-4096)
        {
          v451 = v447 + v450++;
          v447 = v451 & (v446 - 1);
          v449 = *(llvm::BasicBlock **)(v445 + 16 * v447);
          if (v449 == v384)
          {
            v448 = (llvm::BasicBlock **)(v445 + 16 * v447);
            goto LABEL_655;
          }
        }
LABEL_654:
        v448 = (llvm::BasicBlock **)(v445 + 16 * v446);
      }
LABEL_655:
      v452 = v448[1];
      v455 = *(_QWORD *)v452;
      v454 = (char *)v452 + 16;
      v453 = v455;
    }
    else
    {
      v453 = 0;
      v454 = &byte_1C871356D;
    }
    LOWORD(v643) = 773;
    v639 = v454;
    v640 = v453;
    v641 = ".peel.next";
    llvm::Value::setName(v443, (uint64_t)&v639);
    v456 = (uint64_t *)(v598 + 3);
    v457 = (uint64_t *)(*(_QWORD *)v631 + 24);
    if (v457 != v593 && v456 != v593)
    {
      v459 = *v593;
      v460 = *v457;
      *(_QWORD *)(v460 + 8) = v593;
      *v593 = v460;
      v461 = *v456;
      *(_QWORD *)(v459 + 8) = v456;
      *v457 = v461;
      *(_QWORD *)(v461 + 8) = v457;
      *v456 = v459;
    }
    if (v614)
    {
      sub_1C4E43068((uint64_t)v613);
      MEMORY[0x1CAA32FB4](v613[0], 8);
      v614 = 0;
    }
    v462 = v610;
    if (v612)
    {
      v463 = &v610[8 * (unint64_t)v612];
      do
      {
        v464 = v462[3];
        if ((v464 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v465 = v462[7];
          if (v465)
          {
            if (v465 != -8192 && v465 != -4096)
            {
              v466 = v462[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v466 = v462[6];
              v467 = (unint64_t *)v462[6];
              if (v467)
              {
                *v467 = *v467 & 7 | v466;
              }
              else
              {
                v468 = v462[7];
                v469 = ***(int32x2_t ****)v468;
                v470 = (unint64_t)v469[303];
                if (v470 <= v466)
                {
                  v471 = v469[305].u32[0];
                  if (v470 + 16 * v471 > v466)
                  {
                    v472 = v471 - 1;
                    LODWORD(v473) = v472 & ((v468 >> 4) ^ (v468 >> 9));
                    v474 = (uint64_t *)(v470 + 16 * v473);
                    v475 = *v474;
                    if (v468 == *v474)
                    {
LABEL_677:
                      *v474 = -8192;
                      v469[304] = vadd_s32(v469[304], (int32x2_t)0x1FFFFFFFFLL);
                      v468 = v462[7];
                    }
                    else
                    {
                      v476 = 1;
                      while (v475 != -4096)
                      {
                        v477 = v473 + v476++;
                        v473 = v477 & v472;
                        v475 = *(_QWORD *)(v470 + 16 * v473);
                        if (v468 == v475)
                        {
                          v474 = (uint64_t *)(v470 + 16 * v473);
                          goto LABEL_677;
                        }
                      }
                    }
                    *(_BYTE *)(v468 + 17) &= ~1u;
                  }
                }
              }
              v464 = v462[3];
            }
          }
        }
        if (v464 != -4096 && v464 != -8192 && v464 != 0)
        {
          v479 = v462[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v479 = v462[2];
          v480 = (unint64_t *)v462[2];
          if (v480)
          {
            *v480 = *v480 & 7 | v479;
          }
          else
          {
            v481 = v462[3];
            v482 = ***(int32x2_t ****)v481;
            v483 = (unint64_t)v482[303];
            if (v483 <= v479)
            {
              v484 = v482[305].u32[0];
              if (v483 + 16 * v484 > v479)
              {
                v485 = v484 - 1;
                LODWORD(v486) = v485 & ((v481 >> 4) ^ (v481 >> 9));
                v487 = (uint64_t *)(v483 + 16 * v486);
                v488 = *v487;
                if (v481 == *v487)
                {
LABEL_696:
                  *v487 = -8192;
                  v482[304] = vadd_s32(v482[304], (int32x2_t)0x1FFFFFFFFLL);
                  v481 = v462[3];
                }
                else
                {
                  v489 = 1;
                  while (v488 != -4096)
                  {
                    v490 = v486 + v489++;
                    v486 = v490 & v485;
                    v488 = *(_QWORD *)(v483 + 16 * v486);
                    if (v481 == v488)
                    {
                      v487 = (uint64_t *)(v483 + 16 * v486);
                      goto LABEL_696;
                    }
                  }
                }
                *(_BYTE *)(v481 + 17) &= ~1u;
              }
            }
          }
        }
        v462 += 8;
      }
      while (v462 != v463);
      v462 = v610;
    }
    MEMORY[0x1CAA32FB4](v462, 8);
    if (v631 != &v633)
      free(v631);
    v606 = (llvm *)v598;
    ++v602;
  }
  while (v602 != v587);
LABEL_748:
  v511 = *((_QWORD *)v384 + 6);
  v512 = v511 - 24;
  if (v511)
    v513 = v511 - 24;
  else
    v513 = 0;
  v93 = *(_BYTE *)(v513 + 16) == 83;
  for (j = (unint64_t **)a3; v93; j = (unint64_t **)a3)
  {
    v515 = *(_DWORD *)(v512 + 20);
    v516 = v515 & 0x7FFFFFF;
    if ((v515 & 0x7FFFFFF) != 0)
    {
      v517 = 0;
      while (1)
      {
        v518 = v512 - 32 * v516;
        if ((v515 & 0x40000000) != 0)
          v518 = *(_QWORD *)(v512 - 8);
        if (*(_QWORD *)(v518 + 32 * *(unsigned int *)(v512 + 60) + 8 * v517) == LoopLatch)
          break;
        if (v516 == ++v517)
          goto LABEL_759;
      }
    }
    else
    {
LABEL_759:
      LODWORD(v517) = -1;
    }
    if ((v515 & 0x40000000) != 0)
      v519 = *(_QWORD *)(v512 - 8);
    else
      v519 = v512 - 32 * v516;
    v520 = *(_QWORD *)(v519 + 32 * v517);
    if (v520)
      v521 = *(unsigned __int8 *)(v520 + 16) >= 0x1Cu;
    else
      v521 = 0;
    if (v521)
    {
      v522 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(v520 + 40));
      v523 = *((_QWORD *)this + 8);
      v524 = v523 == *((_QWORD *)this + 7) ? 76 : 72;
      if (v522 != (_QWORD *)(v523 + 8 * *(unsigned int *)((char *)this + v524)))
      {
        *(_QWORD *)v632 = 2;
        v633 = 0;
        v634 = (int32x2_t ****)v520;
        if (v520 != -8192 && v520 != -4096 && v520 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v632);
        v631 = &unk_1E814DA10;
        v635 = v615;
        v526 = sub_1C52E2ED8((uint64_t)v615, &v631);
        if (v634 != (int32x2_t ****)-8192 && v634 != (int32x2_t ****)-4096 && v634)
        {
          v527 = *(_QWORD *)v632 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(*(_QWORD *)v632 & 0xFFFFFFFFFFFFFFF8) = v633;
          if (v633)
          {
            *(_QWORD *)v633 = *(_QWORD *)v633 & 7 | v527;
          }
          else
          {
            v528 = v634;
            v529 = ***v634;
            v530 = (unint64_t)v529[303];
            if (v530 <= v527)
            {
              v531 = v529[305].u32[0];
              if (v530 + 16 * v531 > v527)
              {
                v532 = v531 - 1;
                LODWORD(v533) = v532 & ((v634 >> 4) ^ (v634 >> 9));
                v534 = (int32x2_t *****)(v530 + 16 * v533);
                v535 = *v534;
                if (v634 == *v534)
                {
LABEL_788:
                  *v534 = (int32x2_t ****)-8192;
                  v529[304] = vadd_s32(v529[304], (int32x2_t)0x1FFFFFFFFLL);
                  v528 = v634;
                }
                else
                {
                  v536 = 1;
                  while (v535 != (int32x2_t ****)-4096)
                  {
                    v537 = v533 + v536++;
                    v533 = v537 & v532;
                    v535 = *(int32x2_t *****)(v530 + 16 * v533);
                    if (v634 == v535)
                    {
                      v534 = (int32x2_t *****)(v530 + 16 * v533);
                      goto LABEL_788;
                    }
                  }
                }
                *((_BYTE *)v528 + 17) &= ~1u;
              }
            }
          }
        }
        v520 = v526[7];
      }
    }
    sub_1C5276870(v512, (uint64_t)v589, v520);
    v511 = *(_QWORD *)(v511 + 8);
    v512 = v511 - 24;
    if (v511)
      v538 = v511 - 24;
    else
      v538 = 0;
    v93 = *(_BYTE *)(v538 + 16) == 83;
  }
  v539 = j;
  if (v597)
  {
    v610 = **v591;
    v575 = (llvm::BasicBlock *)*(v591 - 4);
    v576 = v575 == v592;
    v577 = v588;
    if (v575 == v592)
      v578 = v597;
    else
      v578 = v588;
    if (!v576)
      v577 = v597;
    v631 = (void *)__PAIR64__(v577, v578);
    v579 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v610, (uint64_t)&v631, 2);
    if (v579 || v591[6] || (*((_BYTE *)v591 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v591, 2, v579);
  }
  a7 = (char **)&v617;
  LoopID = llvm::Loop::getLoopID(this);
  LoopPredecessor = (uint64_t)llvm::findOptionMDForLoopID(LoopID, "llvm.loop.peeled.count", 0x16uLL);
  if (LoopPredecessor)
  {
LABEL_864:
    v580 = *(unsigned int *)(LoopPredecessor + 8);
    if ((_DWORD)v580 == 1)
    {
      LODWORD(v541) = 0;
    }
    else
    {
      v541 = *(_QWORD *)(LoopPredecessor - 8 * v580 + 8);
      if (v541)
      {
        v541 = *(_QWORD *)(v541 + 128);
        if (v541)
        {
          v581 = *(_DWORD *)(v541 + 32);
          if (v581 > 0x40)
            v541 = **(_QWORD **)(v541 + 24);
          else
            v541 = (uint64_t)(*(_QWORD *)(v541 + 24) << -(char)v581) >> -(char)v581;
        }
      }
    }
    v539 = *(unint64_t ***)v603;
  }
  else
  {
    LODWORD(v541) = 0;
  }
  llvm::addStringMetadataToLoop((uint64_t *****)this, (llvm::Loop *)"llvm.loop.peeled.count", (const char *)(v541 + v587));
  if (*(_QWORD *)this)
    v542 = *(llvm **)this;
  else
    v542 = this;
  v543 = v542;
  do
  {
    v544 = v543;
    v543 = *(llvm **)v543;
  }
  while (v543);
  llvm::ScalarEvolution::forgetLoop(a4, v544);
  llvm::simplifyLoop(v542, a5, v539, a4, v584, 0, (llvm::MemorySSAUpdater *)v585);
  if (v628 != v582)
    free(v628);
  if (v618)
  {
    sub_1C4E43068((uint64_t)a7);
    MEMORY[0x1CAA32FB4](v617, 8);
    v618 = 0;
  }
  v545 = (_QWORD *)v615[0];
  if (v616)
  {
    v546 = v615[0] + ((unint64_t)v616 << 6);
    do
    {
      v547 = v545[3];
      if ((v547 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v548 = v545[7];
        if (v548)
        {
          if (v548 != -8192 && v548 != -4096)
          {
            v549 = v545[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v549 = v545[6];
            v550 = (unint64_t *)v545[6];
            if (v550)
            {
              *v550 = *v550 & 7 | v549;
            }
            else
            {
              v551 = v545[7];
              v552 = ***(int32x2_t ****)v551;
              v553 = (unint64_t)v552[303];
              if (v553 <= v549)
              {
                v554 = v552[305].u32[0];
                if (v553 + 16 * v554 > v549)
                {
                  v555 = v554 - 1;
                  LODWORD(v556) = v555 & ((v551 >> 4) ^ (v551 >> 9));
                  v557 = (uint64_t *)(v553 + 16 * v556);
                  v558 = *v557;
                  if (v551 == *v557)
                  {
LABEL_824:
                    *v557 = -8192;
                    v552[304] = vadd_s32(v552[304], (int32x2_t)0x1FFFFFFFFLL);
                    v551 = v545[7];
                  }
                  else
                  {
                    v559 = 1;
                    while (v558 != -4096)
                    {
                      v560 = v556 + v559++;
                      v556 = v560 & v555;
                      v558 = *(_QWORD *)(v553 + 16 * v556);
                      if (v551 == v558)
                      {
                        v557 = (uint64_t *)(v553 + 16 * v556);
                        goto LABEL_824;
                      }
                    }
                  }
                  *(_BYTE *)(v551 + 17) &= ~1u;
                }
              }
            }
            v547 = v545[3];
          }
        }
      }
      if (v547 != -4096 && v547 != -8192 && v547 != 0)
      {
        v562 = v545[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v562 = v545[2];
        v563 = (unint64_t *)v545[2];
        if (v563)
        {
          *v563 = *v563 & 7 | v562;
        }
        else
        {
          v564 = v545[3];
          v565 = ***(int32x2_t ****)v564;
          v566 = (unint64_t)v565[303];
          if (v566 <= v562)
          {
            v567 = v565[305].u32[0];
            if (v566 + 16 * v567 > v562)
            {
              v568 = v567 - 1;
              LODWORD(v569) = v568 & ((v564 >> 4) ^ (v564 >> 9));
              v570 = (uint64_t *)(v566 + 16 * v569);
              v571 = *v570;
              if (v564 == *v570)
              {
LABEL_843:
                *v570 = -8192;
                v565[304] = vadd_s32(v565[304], (int32x2_t)0x1FFFFFFFFLL);
                v564 = v545[3];
              }
              else
              {
                v572 = 1;
                while (v571 != -4096)
                {
                  v573 = v569 + v572++;
                  v569 = v573 & v568;
                  v571 = *(_QWORD *)(v566 + 16 * v569);
                  if (v564 == v571)
                  {
                    v570 = (uint64_t *)(v566 + 16 * v569);
                    goto LABEL_843;
                  }
                }
              }
              *(_BYTE *)(v564 + 17) &= ~1u;
            }
          }
        }
      }
      v545 += 8;
    }
    while (v545 != (_QWORD *)v546);
    v545 = (_QWORD *)v615[0];
  }
  MEMORY[0x1CAA32FB4](v545, 8);
  MEMORY[0x1CAA32FB4](v619, 8);
  if (v636 != v586)
    free(v636);
  if (v624)
  {
    v625 = (int32x2_t *****)v624;
    operator delete(v624);
  }
  MEMORY[0x1CAA32FB4](v623, 8);
  return 1;
}

uint64_t *sub_1C5F23120(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C5F23200((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1C5F232A4((uint64_t)a1, v7);
    v8 = 0;
    sub_1C5F23200((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C5F23200(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5F232A4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5F2341C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5F2341C(a1, v14, v9);
}

uint64_t sub_1C5F2341C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5F23200((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5F234DC()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Set the unroll peeling count, for testing purposes";
  v1.n128_u64[1] = 50;
  sub_1C63AF02C(&v4, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED837410, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Allows loops to be peeled when the dynamic trip count is known to be low.";
  v1.n128_u64[1] = 73;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8374D0, "unroll-allow-peeling", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8374D0, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Allows loop nests to be peeled.";
  v1.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED837590, "unroll-allow-loop-nests-peeling", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED837590, &dword_1C475E000);
  v2 = 1;
  v3 = 7;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max average trip count which will cause loop peeling.";
  v1.n128_u64[1] = 53;
  sub_1C4DB1928((uint64_t)&unk_1ED827300, "unroll-peel-max-count", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED827300, &dword_1C475E000);
  v2 = 1;
  v3 = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Force a peel count regardless of profiling information.";
  v1.n128_u64[1] = 55;
  sub_1C4DB1928((uint64_t)&unk_1ED8273C0, "unroll-force-peel-count", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8273C0, &dword_1C475E000);
}

void llvm::LoopRotation(llvm::Loop *a1, int32x2_t *a2, _QWORD *a3, llvm::AssumptionCache *a4, void *a5, int32x2_t *a6, llvm::LoopInfo *a7, uint64_t a8, char a9, unsigned int a10, unsigned __int8 a11, unsigned __int8 a12)
{
  uint64_t i;
  uint64_t LoopLatch;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t LoopPredecessor;
  int32x2_t ****v44;
  uint64_t v45;
  uint64_t v46;
  const llvm::Loop *v47;
  const llvm::Loop *v48;
  uint64_t v49;
  llvm *v50;
  _QWORD *v51;
  llvm::MemoryDependenceResults *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  llvm *v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD **v76;
  unsigned __int8 *v77;
  uint64_t k;
  void ***v79;
  _QWORD *m;
  uint64_t v81;
  int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *n;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t ***v92;
  uint64_t ***v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **v97;
  uint64_t **v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  llvm::LLVMContext *v103;
  llvm::LLVMContext *v104;
  llvm::Type *v105;
  llvm::DSOLocalEquivalent **v106;
  int v107;
  unint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int128 *v116;
  int32x2_t ****v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  uint64_t **v134;
  char *v135;
  uint64_t **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  llvm::ValueSymbolTable *v140;
  uint64_t v141;
  uint64_t ***v142;
  uint64_t ***v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  BOOL v148;
  int v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  int32x2_t *v159;
  _QWORD *v160;
  _QWORD *v161;
  int v162;
  unsigned int jj;
  uint64_t kk;
  llvm::PHINode *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _DWORD *v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  _QWORD ***v191;
  unint64_t v193;
  llvm::UndefValue *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  int v202;
  int v203;
  unint64_t v204;
  _QWORD ***v205;
  int32x2_t *v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD ***v212;
  int v213;
  int v214;
  _QWORD *v215;
  char *v216;
  size_t v217;
  size_t v218;
  _QWORD *v219;
  int v220;
  int v221;
  unsigned int v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  int v226;
  BOOL v227;
  unsigned int v228;
  _QWORD *v229;
  unsigned int v230;
  int v231;
  int32x2_t *****v232;
  int32x2_t ****v233;
  int32x2_t *****v234;
  int v235;
  BOOL v236;
  int v237;
  int32x2_t *****v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  int32x2_t ****v244;
  uint64_t v245;
  uint64_t v246;
  llvm::DbgVariableIntrinsic **v247;
  uint64_t v248;
  uint64_t **v249;
  llvm::Value *v250;
  llvm::Type *v251;
  llvm::UndefValue *ValueInMiddleOfBlock;
  _QWORD *v253;
  llvm *v254;
  uint64_t v255;
  int v256;
  int v257;
  llvm *v258;
  _QWORD **v259;
  _QWORD **v260;
  _QWORD **v261;
  int32x2_t *v262;
  uint64_t v263;
  llvm::APInt *v264;
  unsigned int v265;
  BOOL v266;
  int v267;
  uint64_t v268;
  unsigned __int8 *v269;
  llvm::Instruction *v270;
  unsigned int v271;
  llvm *v272;
  uint64_t ***v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  llvm **v278;
  llvm *v279;
  int v280;
  int v281;
  char *v282;
  llvm *v283;
  char *v284;
  llvm::Value *v285;
  char *v286;
  _QWORD *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  unsigned __int8 **v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  _QWORD *v298;
  _QWORD *v299;
  int v300;
  llvm *v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t mm;
  uint64_t v306;
  unsigned int v307;
  BOOL v308;
  uint64_t *v310;
  uint64_t v311;
  int32x2_t *v312;
  __int32 v313;
  uint64_t v314;
  int32x2_t v315;
  unsigned __int32 v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  _QWORD *v330;
  unsigned __int8 *v331;
  llvm::Instruction *v332;
  unsigned int v333;
  uint64_t v334;
  llvm *UniquePredecessor;
  llvm::BasicBlock *v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t *v342;
  uint64_t v343;
  int32x2_t *v344;
  unint64_t v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  int v351;
  int v352;
  unint64_t v354;
  unint64_t *v355;
  uint64_t v356;
  int32x2_t *v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  int v364;
  int v365;
  _QWORD *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t *v371;
  uint64_t v372;
  int32x2_t *v373;
  unint64_t v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  int v380;
  int v381;
  unint64_t v383;
  unint64_t *v384;
  uint64_t v385;
  int32x2_t *v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  int v393;
  int v394;
  _QWORD *ii;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;
  llvm::ValueSymbolTable *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  llvm::Instruction **v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  llvm::Value *v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  llvm::ValueSymbolTable *v412;
  uint64_t *v413;
  unsigned int v414;
  uint64_t *v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  int32x2_t ****v419;
  _QWORD *v421;
  unint64_t v422;
  int32x2_t ****v423;
  int32x2_t *v424;
  unint64_t v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  int32x2_t *****v429;
  int32x2_t ****v430;
  int v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t SinglePredecessor;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v445;
  uint64_t ExitingBlock;
  uint64_t v447;
  char v448;
  unsigned int v449;
  int v450;
  _QWORD *v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  llvm::MDNode *v462;
  char v463;
  int64x2_t v464;
  llvm *v465;
  int v466;
  uint64_t v467;
  void *v468;
  char v469;
  _QWORD **v471;
  llvm::MDNode *LoopID;
  uint64_t v473;
  unsigned int v474;
  llvm::Instruction *v477;
  _QWORD *v482;
  unsigned __int8 *v483;
  uint64_t v484[4];
  int v485;
  char v486;
  _QWORD v487[2];
  unsigned int v488;
  uint64_t v489[3];
  char v490;
  _QWORD v491[2];
  unsigned int v492;
  uint64_t v493[3];
  char v494;
  void *v495;
  uint64_t v496;
  _QWORD ***v497;
  int32x2_t ****v498;
  int32x2_t ****v499;
  unint64_t v500;
  int32x2_t ****v501;
  uint64_t v502;
  void *v503;
  uint64_t v504;
  _BYTE v505[16];
  void *v506;
  uint64_t v507;
  _QWORD v508[6];
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  __int128 v516;
  __int128 v517;
  _QWORD v518[30];
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  char v523;
  _BYTE *v524;
  void *v525;
  uint64_t v526;
  int v527;
  _BYTE v528[64];
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  __int16 v532;
  void *v533;
  _QWORD v534[11];

  v534[8] = *MEMORY[0x1E0C80C00];
  LoopID = (llvm::MDNode *)llvm::Loop::getLoopID(a1);
  v468 = a5;
  if ((a9 & 1) == 0)
  {
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
    if (LoopLatch)
    {
      v16 = LoopLatch;
      if ((*(_WORD *)(LoopLatch + 18) & 0x7FFF) == 0)
      {
        v434 = *(_QWORD *)(LoopLatch + 40);
        if (v434 != LoopLatch + 40)
        {
          v17 = 0;
          if (v434)
            v435 = v434 - 24;
          else
            v435 = 0;
          v436 = *(unsigned __int8 *)(v435 + 16) - 40;
          if (v436 >= 0xFFFFFFF5)
            v437 = v435;
          else
            v437 = 0;
          if (!v434)
            goto LABEL_5;
          if (*(_BYTE *)(v437 + 16) != 30 || v436 < 0xFFFFFFF5)
            goto LABEL_5;
          if ((*(_DWORD *)(v437 + 20) & 0x7FFFFFF) == 1)
          {
            SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)LoopLatch);
            if (SinglePredecessor)
            {
              v440 = SinglePredecessor;
              if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)a1, SinglePredecessor))
              {
                v441 = *(_QWORD *)(v440 + 40);
                if (v441 != v440 + 40)
                {
                  v17 = 0;
                  if (v441)
                    v442 = v441 - 24;
                  else
                    v442 = 0;
                  v443 = *(unsigned __int8 *)(v442 + 16) - 40;
                  if (v443 < 0xFFFFFFF5)
                    v442 = 0;
                  if (!v441)
                    goto LABEL_5;
                  if (*(_BYTE *)(v442 + 16) != 30 || v443 < 0xFFFFFFF5)
                    goto LABEL_5;
                  v445 = *(_QWORD *)(v16 + 48);
                  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a1);
                  if (v445 == v437 + 24)
                  {
LABEL_756:
                    *(_QWORD *)&v516 = &v517;
                    *((_QWORD *)&v516 + 1) = 0x1000000000;
                    v520 = 0;
                    v519 = 0;
                    v521 = (uint64_t)v468;
                    v522 = 0;
                    v523 = 0;
                    v524 = v528;
                    v525 = v528;
                    v526 = 8;
                    v527 = 0;
                    v531 = 0;
                    v529 = 0;
                    v530 = 0;
                    v532 = 0;
                    llvm::MergeBlockIntoPredecessor(v16, (llvm::BasicBlock *)&v516, a2, a7, 0, (llvm::MemoryDependenceResults *)1);
                    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v516);
                    v509 = (uint64_t)&v529;
                    sub_1C50B10F0((void ***)&v509);
                    if (v525 != v524)
                      free(v525);
                    if ((__int128 *)v516 != &v517)
                      free((void *)v516);
                    v17 = 1;
                    goto LABEL_5;
                  }
                  v447 = ExitingBlock;
                  v448 = 0;
                  while (1)
                  {
                    if (v445)
                      i = v445 - 24;
                    else
                      i = 0;
                    if (!llvm::isSafeToSpeculativelyExecute(i, 0, 0, 0))
                      break;
                    if (!sub_1C4D99D08(i))
                    {
                      v17 = 0;
                      v449 = *(unsigned __int8 *)(i + 16) - 41;
                      if (v449 > 0x1B)
                        goto LABEL_5;
                      if (((1 << v449) & 0x3F005) == 0)
                      {
                        if (((1 << v449) & 0xE000000) != 0)
                          goto LABEL_727;
                        if (*(_BYTE *)(i + 16) != 62)
                          goto LABEL_5;
                        v456 = *(_DWORD *)(i + 20);
                        if ((v456 & 0x40000000) != 0)
                        {
                          v458 = *(_QWORD *)(i - 8);
                          v457 = v456 & 0x7FFFFFF;
                        }
                        else
                        {
                          v457 = v456 & 0x7FFFFFF;
                          v458 = i - 32 * v457;
                        }
                        v459 = (uint64_t *)(v458 + 32);
                        v460 = 32 * v457 - 32;
                        while (v460)
                        {
                          v17 = 0;
                          v461 = *v459;
                          v459 += 4;
                          v460 -= 32;
                          if (*(_BYTE *)(v461 + 16) != 16)
                            goto LABEL_5;
                        }
                      }
                      v450 = *(_DWORD *)(i + 20);
                      if ((v450 & 0x40000000) != 0)
                        v451 = *(_QWORD **)(i - 8);
                      else
                        v451 = (_QWORD *)(i - 32 * (v450 & 0x7FFFFFF));
                      v452 = *v451;
                      if (*(unsigned __int8 *)(*v451 + 16) < 0x15u)
                      {
                        v452 = v451[4];
                        if (*(unsigned __int8 *)(v452 + 16) < 0x15u)
                          break;
                      }
                      if (!v447)
                      {
                        for (i = *(_QWORD *)(v452 + 8); i; i = *(_QWORD *)(i + 8))
                        {
                          v453 = sub_1C477672C((uint64_t)a1 + 56, *(_QWORD *)(*(_QWORD *)(i + 24) + 40));
                          v454 = *((_QWORD *)a1 + 8);
                          v455 = v454 == *((_QWORD *)a1 + 7) ? 76 : 72;
                          if (v453 == (_QWORD *)(v454 + 8 * *(unsigned int *)((char *)a1 + v455)))
                            goto LABEL_4;
                        }
                      }
                      if ((v448 & 1) != 0)
                        break;
                      v448 = 1;
                    }
LABEL_727:
                    v445 = *(_QWORD *)(v445 + 8);
                    if (v445 == v437 + 24)
                      goto LABEL_756;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  v17 = 0;
LABEL_5:
  v18 = (uint64_t)a1;
  if (*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4) == 8)
    goto LABEL_749;
  v19 = 0;
  v467 = (uint64_t)a1 + 56;
  v464 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v469 = v17;
  v20 = v17;
  while (1)
  {
    v21 = **(_QWORD **)(v18 + 32);
    v22 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v18);
    v23 = *(_QWORD *)(v21 + 40);
    v482 = (_QWORD *)(v21 + 40);
    if (v23 == v21 + 40)
      goto LABEL_745;
    v24 = v23 ? v23 - 24 : 0;
    v25 = *(unsigned __int8 *)(v24 + 16) - 40;
    v26 = v25 >= 0xFFFFFFF5 ? v24 : 0;
    if (!v23)
      goto LABEL_745;
    v27 = *(_BYTE *)(v26 + 16) == 30 && v25 >= 0xFFFFFFF5;
    if (!v27 || (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) == 1)
      goto LABEL_745;
    v28 = v22;
    v29 = !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(v18, v21) || v28 == 0;
    if (v29)
      goto LABEL_745;
    if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(v18, v28) && ((v20 | a11) & 1) == 0)
    {
      v30 = **(_QWORD **)(v18 + 32);
      v31 = *(_QWORD *)(v30 + 40);
      if (v31 == v30 + 40)
      {
        v32 = 0;
      }
      else
      {
        if (v31)
          v32 = v31 - 24;
        else
          v32 = 0;
        if (*(unsigned __int8 *)(v32 + 16) - 29 >= 0xB)
          v32 = 0;
      }
      if (*(_BYTE *)(v32 + 16) == 30)
        v33 = v32;
      else
        v33 = 0;
      v34 = *(_QWORD *)(v33 - 32);
      v35 = sub_1C477672C(v467, v34);
      v36 = *((_QWORD *)a1 + 8);
      v37 = 72;
      if (v36 == *((_QWORD *)a1 + 7))
        v37 = 76;
      if (v35 != (_QWORD *)(v36 + 8 * *(unsigned int *)((char *)a1 + v37)))
        v34 = *(_QWORD *)(v33 - 64);
      v18 = (uint64_t)a1;
      if (*(_QWORD *)(v30 + 40) != v30 + 40)
      {
        for (j = *(_QWORD *)(v30 + 48); ; j = *(_QWORD *)(j + 8))
        {
          v39 = j ? j - 24 : 0;
          if (!j || *(_BYTE *)(v39 + 16) != 83)
            break;
          v40 = *(_QWORD *)(j - 16);
          if (!v40)
            goto LABEL_55;
          while (*(_QWORD *)(*(_QWORD *)(v40 + 24) + 40) == v34)
          {
            v40 = *(_QWORD *)(v40 + 8);
            if (!v40)
              goto LABEL_55;
          }
        }
      }
      if (!sub_1C5F25FB8(a1))
        goto LABEL_745;
    }
LABEL_55:
    *(_QWORD *)&v516 = v518;
    *((_QWORD *)&v516 + 1) = v518;
    *(_QWORD *)&v517 = 32;
    DWORD2(v517) = 0;
    llvm::CodeMetrics::collectEphemeralValues(v18, a4, (llvm::SmallPtrSetImplBase *)&v516);
    BYTE4(v509) = 0;
    LODWORD(v509) = 0;
    v511 = 0;
    v512 = 0;
    v510 = 0;
    v513 = 0;
    v514 = 0;
    v515 = 0;
    llvm::CodeMetrics::analyzeBasicBlock((uint64_t)&v509, (llvm::BasicBlock *)v21, a3, &v516, a12);
    v41 = 0;
    if (WORD1(v509))
    {
      v42 = v19;
    }
    else
    {
      v42 = v19;
      if (v510 <= a10)
      {
        if (HIDWORD(v514))
          v41 = a12 ^ 1;
        else
          v41 = 1;
        if (v41)
          v42 = i;
        else
          v42 = v19;
      }
    }
    MEMORY[0x1CAA32FB4](v511, 8);
    if (*((_QWORD *)&v516 + 1) != (_QWORD)v516)
      free(*((void **)&v516 + 1));
    if (!v41)
      break;
    v466 = v42;
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v18);
    LOBYTE(v17) = v469;
    if (!LoopPredecessor)
      goto LABEL_746;
    v44 = (int32x2_t ****)LoopPredecessor;
    v45 = *(_QWORD *)(LoopPredecessor + 40);
    v471 = (_QWORD **)(LoopPredecessor + 40);
    if (v45 == LoopPredecessor + 40)
      goto LABEL_746;
    if (v45)
      v46 = v45 - 24;
    else
      v46 = 0;
    if (*(_BYTE *)(v46 + 16) != 30)
    {
      switch(*(_BYTE *)(v46 + 16))
      {
        case 0x1E:
LABEL_761:
          __break(1u);
          return;
        case 0x1F:
          v300 = (*(_DWORD *)(v46 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_479;
        case 0x20:
          v300 = (*(_DWORD *)(v46 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_479;
        case 0x27:
          v300 = *(_DWORD *)(v46 + 80) + 1;
LABEL_479:
          if (v300 != 1)
            goto LABEL_746;
          goto LABEL_74;
        default:
          goto LABEL_746;
      }
    }
    if ((*(_DWORD *)(v46 + 20) & 0x7FFFFFF) == 3)
      goto LABEL_746;
LABEL_74:
    if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits((_QWORD *)v18))
      goto LABEL_745;
    if (a6)
    {
      v47 = (const llvm::Loop *)v18;
      do
      {
        v48 = v47;
        v47 = *(const llvm::Loop **)v47;
      }
      while (v47);
      llvm::ScalarEvolution::forgetLoop(a6, v48);
    }
    v49 = *(_QWORD *)(v26 - 32);
    v50 = *(llvm **)(v26 - 64);
    v51 = sub_1C477672C(v467, v49);
    v53 = *(_QWORD *)(v18 + 64);
    v54 = 72;
    if (v53 == *(_QWORD *)(v18 + 56))
      v54 = 76;
    v55 = (_QWORD *)(v53 + 8 * *(unsigned int *)(v18 + v54));
    v56 = v51 == v55;
    if (v51 == v55)
      v57 = v50;
    else
      v57 = (llvm *)v49;
    if (v56)
      v58 = v49;
    else
      v58 = (uint64_t)v50;
    v473 = v58;
    v465 = v57;
    llvm::FoldSingleEntryPHINodes(v57, 0, v52);
    v59 = *(_QWORD **)(v21 + 48);
    v492 = 128;
    v60 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v491[0] = v60;
    v491[1] = 0;
    if (v492)
    {
      v61 = (unint64_t)v492 << 6;
      v62 = v60 + 16;
      do
      {
        *v62 = 0;
        v62[1] = -4096;
        *(v62 - 2) = &unk_1E814DA10;
        *(v62 - 1) = 2;
        v62[2] = 0;
        v62 += 8;
        v61 -= 64;
      }
      while (v61);
    }
    LOBYTE(v493[0]) = 0;
    v494 = 0;
    v488 = 128;
    v63 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v487[0] = v63;
    v487[1] = 0;
    if (v488)
    {
      v64 = (unint64_t)v488 << 6;
      v65 = v63 + 16;
      do
      {
        *v65 = 0;
        v65[1] = -4096;
        *(v65 - 2) = &unk_1E814DA10;
        *(v65 - 1) = 2;
        v65[2] = 0;
        v65 += 8;
        v64 -= 64;
      }
      while (v64);
    }
    LOBYTE(v489[0]) = 0;
    v490 = 0;
    v66 = v59 - 3;
    if (v59)
      v67 = v59 - 3;
    else
      v67 = 0;
    v69 = xmmword_1C8674EA0;
    v68 = xmmword_1C8651090;
    if (v59 && *((_BYTE *)v67 + 16) == 83)
    {
      while (1)
      {
        v70 = *((_DWORD *)v66 + 5);
        v71 = v70 & 0x7FFFFFF;
        if ((v70 & 0x7FFFFFF) != 0)
        {
          v72 = 0;
          while (1)
          {
            v73 = &v66[-4 * v71];
            if ((v70 & 0x40000000) != 0)
              v73 = (_QWORD *)*(v66 - 1);
            if ((int32x2_t ****)v73[4 * *((unsigned int *)v66 + 15) + v72] == v44)
              break;
            if (v71 == ++v72)
              goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          LODWORD(v72) = -1;
        }
        v74 = (v70 & 0x40000000) != 0 ? (_QWORD *)*(v66 - 1) : &v66[-4 * v71];
        sub_1C5F26128((uint64_t)v491, (int32x2_t ****)v66, (int32x2_t ****)v74[4 * v72]);
        v59 = (_QWORD *)v59[1];
        v66 = v59 - 3;
        v75 = v59 ? (uint64_t)(v59 - 3) : 0;
        if (!v59)
          break;
        v69 = xmmword_1C8674EA0;
        v68 = xmmword_1C8651090;
        if (*(_BYTE *)(v75 + 16) != 83)
          goto LABEL_115;
      }
      v69 = xmmword_1C8674EA0;
      v68 = xmmword_1C8651090;
    }
LABEL_115:
    v76 = (_QWORD **)*v471;
    if (*v471 == v471)
    {
      v477 = 0;
    }
    else
    {
      if (v76)
        v77 = (unsigned __int8 *)(v76 - 3);
      else
        v77 = 0;
      if (v77[16] - 29 >= 0xB)
        v77 = 0;
      v477 = (llvm::Instruction *)v77;
    }
    v509 = 1;
    for (k = 8; k != 200; k += 48)
    {
      v79 = (void ***)((char *)&v509 + k);
      *((_OWORD *)v79 + 1) = v68;
      *((int64x2_t *)v79 + 2) = v464;
      *(_OWORD *)v79 = v69;
    }
    for (m = (_QWORD *)**v471; m != v471; m = (_QWORD *)*m)
    {
      if (m)
        v81 = (uint64_t)(m - 3);
      else
        v81 = 0;
      v82 = sub_1C53923FC(v81);
      if (!m)
        break;
      if (!v82)
        break;
      llvm::DbgVariableIntrinsic::location_ops(v81, &v516);
      v495 = (void *)*((_QWORD *)&v516 + 1);
      v506 = (void *)v516;
      v83 = (void *)sub_1C5F26438((uint64_t *)&v506, (uint64_t *)&v495);
      v84 = v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF);
      v85 = *(_QWORD *)(*(_QWORD *)(v84 + 32) + 24);
      v86 = *(_QWORD *)(*(_QWORD *)(v84 + 64) + 24);
      v506 = v83;
      v507 = v85;
      v508[0] = v86;
      sub_1C63AF140((uint64_t)&v516, (uint64_t)&v509, (uint64_t *)&v506);
    }
    v506 = v508;
    v507 = 0x600000000;
    for (n = *(_QWORD **)(v21 + 48); n != v482; n = (_QWORD *)n[1])
    {
      if (n)
        v88 = (uint64_t)(n - 3);
      else
        v88 = 0;
      v89 = sub_1C5790664(v88);
      if (n && v89)
      {
        v90 = v507;
        if (v507 >= (unint64_t)HIDWORD(v507))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v506, (uint64_t)v508, v507 + 1, 8);
          v90 = v507;
        }
        *((_QWORD *)v506 + v90) = v88;
        LODWORD(v507) = v507 + 1;
      }
    }
    if (v59 != v482)
    {
      v91 = (uint64_t *)((char *)v477 + 24);
      do
      {
        v92 = (uint64_t ***)(v59 - 3);
        v29 = v59 == 0;
        v59 = (_QWORD *)v59[1];
        if (v29)
          v93 = 0;
        else
          v93 = v92;
        if (!llvm::Loop::hasLoopInvariantOperands(v18, (uint64_t)v93))
          goto LABEL_177;
        v94 = *((unsigned __int8 *)v93 + 16);
        v95 = (v94 - 33);
        if (v95 <= 0x37)
        {
          if (((1 << (v94 - 33)) & 0x8000000000041) != 0)
          {
            v97 = v93[8];
            if (!v97 || (*((_BYTE *)v97 + 20) & 4) == 0 && (*((_BYTE *)v97 + 17) & 0x10) == 0)
            {
              LODWORD(v516) = 7;
              if (sub_1C53E4BBC((uint64_t)v93, (__int32 *)&v516, 1uLL))
              {
                v141 = (uint64_t)*(v93 - 4);
                if (!v141 || *(_BYTE *)(v141 + 16) || *(uint64_t ***)(v141 + 24) != v93[9])
                {
                  v18 = (uint64_t)a1;
                  goto LABEL_177;
                }
                v18 = (uint64_t)a1;
                if (*(_DWORD *)(v141 + 36) != 7)
                  goto LABEL_177;
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v93, 66) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v93, 44))
              {
                goto LABEL_177;
              }
            }
            goto LABEL_167;
          }
          if (((1 << (v94 - 33)) & 0x808001C8000010) != 0)
            goto LABEL_177;
          if (v95 == 28)
          {
            if ((*((_WORD *)v93 + 9) & 0x301) != 0)
              goto LABEL_177;
LABEL_167:
            v94 = *((unsigned __int8 *)v93 + 16);
          }
        }
        v96 = (v94 - 33);
        if (v96 <= 0x37)
        {
          if (((1 << v96) & 0x8000000000041) != 0)
          {
            v98 = v93[8];
            if (!v98 || (*((_BYTE *)v98 + 17) & 0x30) == 0)
            {
              v99 = *((_DWORD *)v93 + 5);
              if (v99 < 0)
              {
                v142 = &v93[-4 * (v99 & 0x7FFFFFF)];
                v145 = (uint64_t)*(v142 - 1);
                v143 = v142 - 1;
                v144 = v145;
                if (v145)
                {
                  v146 = -v144;
                  while (1)
                  {
                    v147 = (*(_DWORD **)((char *)v143 + v146))[2];
                    v148 = v147 > 7;
                    v149 = (1 << v147) & 0x83;
                    if (v148 || v149 == 0)
                      break;
                    v146 += 16;
                    if (!v146)
                      goto LABEL_171;
                  }
LABEL_177:
                  llvm::Instruction::clone((llvm::Instruction *)v93);
                  v101 = v100;
                  v102 = (_QWORD *)operator new();
                  *(_DWORD *)v102 = 3;
                  v102[1] = 0;
                  *((_DWORD *)v102 + 4) = 0;
                  v102[5] = v491;
                  v102[3] = v102 + 5;
                  v102[6] = 0;
                  v102[4] = 0x200000001;
                  v102[9] = v102 + 11;
                  v102[10] = 0x400000000;
                  v102[23] = v102 + 25;
                  v102[24] = 0x100000000;
                  v102[27] = v102 + 29;
                  v102[28] = 0x1000000000;
                  v495 = v102;
                  *(_QWORD *)&v516 = v102;
                  sub_1C5FD706C((uint64_t)v102, (uint64_t ***)v101);
                  sub_1C5FD3718((uint64_t *)&v516, v103);
                  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v495, v104);
                  if (sub_1C53923FC(v101))
                  {
                    llvm::DbgVariableIntrinsic::location_ops(v101, &v495);
                    *(_QWORD *)&v516 = v495;
                    v484[0] = v496;
                    v119 = sub_1C5F26438((uint64_t *)&v516, v484);
                    v120 = v101 - 32 * (*(_DWORD *)(v101 + 20) & 0x7FFFFFF);
                    v121 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 24);
                    v122 = *(_QWORD *)(*(_QWORD *)(v120 + 64) + 24);
                    *(_QWORD *)&v516 = v119;
                    *((_QWORD *)&v516 + 1) = v121;
                    *(_QWORD *)&v517 = v122;
                    if (sub_1C63AF20C((uint64_t)&v509, &v516, (uint64_t **)&v495))
                    {
LABEL_196:
                      llvm::Value::deleteValue((llvm::Value *)v101);
                      continue;
                    }
                  }
                  v107 = *(_DWORD *)(v101 + 20);
                  if ((v107 & 0x40000000) != 0)
                  {
                    v109 = *(uint64_t **)(v101 - 8);
                    v108 = v107 & 0x7FFFFFF;
                  }
                  else
                  {
                    v108 = v107 & 0x7FFFFFF;
                    v109 = (uint64_t *)(v101 - 32 * v108);
                  }
                  *(_QWORD *)&v516 = &v517;
                  *((_QWORD *)&v516 + 1) = 0x800000000;
                  if (v108 < 9)
                  {
                    v110 = 0;
                    if (v108)
                    {
                      v111 = 0;
                      v112 = &v517;
LABEL_183:
                      v113 = 32 * v108;
                      v114 = (_QWORD *)v112 + v111;
                      do
                      {
                        v115 = *v109;
                        v109 += 4;
                        *v114++ = v115;
                        v113 -= 32;
                      }
                      while (v113);
                      v116 = (__int128 *)v516;
                    }
                    else
                    {
                      v116 = &v517;
                    }
                    DWORD2(v516) = v110 + v108;
                    v117 = (int32x2_t ****)llvm::SimplifyInstructionWithOperands((llvm *)v101, (uint64_t)v116, (v110 + v108), a8, v105, v106);
                    if ((__int128 *)v516 == &v517)
                    {
                      if (!v117)
                        goto LABEL_209;
                    }
                    else
                    {
                      free((void *)v516);
                      if (!v117)
                      {
LABEL_209:
                        sub_1C5F26128((uint64_t)v491, (int32x2_t ****)v93, (int32x2_t ****)v101);
                        v18 = (uint64_t)a1;
                        goto LABEL_210;
                      }
                    }
                    if (!sub_1C4F20780((uint64_t *)a2, v101, (uint64_t)v117))
                      goto LABEL_209;
                    sub_1C5F26128((uint64_t)v491, (int32x2_t ****)v93, v117);
                    v118 = *(unsigned __int8 *)(v101 + 16) - 33;
                    v18 = (uint64_t)a1;
                    if (v118 <= 0x37)
                    {
                      if (((1 << (*(_BYTE *)(v101 + 16) - 33)) & 0x808001D0000010) != 0)
                        goto LABEL_210;
                      if (((1 << (*(_BYTE *)(v101 + 16) - 33)) & 0x8000000000041) != 0)
                      {
                        v123 = *(_QWORD *)(v101 + 64);
                        if (!v123 || (*(_BYTE *)(v123 + 17) & 0x30) == 0)
                        {
                          v124 = *(_DWORD *)(v101 + 20);
                          if (v124 < 0)
                          {
                            v151 = v101 - 32 * (v124 & 0x7FFFFFF);
                            v154 = *(_QWORD *)(v151 - 8);
                            v152 = v151 - 8;
                            v153 = v154;
                            if (v154)
                            {
                              v155 = -v153;
                              while (1)
                              {
                                v156 = *(_DWORD *)(*(_QWORD *)(v152 + v155) + 8);
                                v148 = v156 > 7;
                                v157 = (1 << v156) & 0x83;
                                if (v148 || v157 == 0)
                                  break;
                                v155 += 16;
                                if (!v155)
                                  goto LABEL_203;
                              }
LABEL_210:
                              if ((*((_BYTE *)v93 + 23) & 0x10) != 0)
                              {
                                v125 = ***v93;
                                v126 = *(_QWORD *)(v125 + 152);
                                v127 = *(unsigned int *)(v125 + 168);
                                if (!(_DWORD)v127)
                                  goto LABEL_217;
                                LODWORD(v128) = (v127 - 1) & ((v93 >> 4) ^ (v93 >> 9));
                                v129 = (uint64_t ****)(v126 + 16 * v128);
                                v130 = *v129;
                                if (*v129 != v93)
                                {
                                  v131 = 1;
                                  while (v130 != (uint64_t ***)-4096)
                                  {
                                    v132 = v128 + v131++;
                                    v128 = v132 & (v127 - 1);
                                    v130 = *(uint64_t ****)(v126 + 16 * v128);
                                    if (v130 == v93)
                                    {
                                      v129 = (uint64_t ****)(v126 + 16 * v128);
                                      goto LABEL_218;
                                    }
                                  }
LABEL_217:
                                  v129 = (uint64_t ****)(v126 + 16 * v127);
                                }
LABEL_218:
                                v133 = v129[1];
                                v136 = *v133;
                                v135 = (char *)(v133 + 2);
                                v134 = v136;
                              }
                              else
                              {
                                v134 = 0;
                                v135 = &byte_1C871356D;
                              }
                              LOWORD(v518[0]) = 261;
                              *(_QWORD *)&v516 = v135;
                              *((_QWORD *)&v516 + 1) = v134;
                              llvm::Value::setName((uint64_t ***)v101, (uint64_t)&v516);
                              v137 = *((_QWORD *)v477 + 5);
                              *(_QWORD *)(v101 + 40) = v137;
                              *(_WORD *)(v137 + 18) &= ~0x8000u;
                              if ((*(_BYTE *)(v101 + 23) & 0x10) != 0)
                              {
                                v139 = *(_QWORD *)(v137 + 56);
                                if (v139)
                                {
                                  v140 = *(llvm::ValueSymbolTable **)(v139 + 104);
                                  if (v140)
                                    llvm::ValueSymbolTable::reinsertValue(v140, (llvm::Value *)v101);
                                }
                              }
                              v138 = *v91;
                              *(_QWORD *)(v101 + 32) = v91;
                              *(_QWORD *)(v101 + 24) = v138;
                              *(_QWORD *)(v138 + 8) = v101 + 24;
                              *v91 = v101 + 24;
                              if (sub_1C4D9F8B4(v101))
                                llvm::AssumptionCache::registerAssumption((char **)a4, v101);
                              if (a7)
                                sub_1C5F26128((uint64_t)v487, (int32x2_t ****)v93, (int32x2_t ****)v101);
                              continue;
                            }
                          }
LABEL_203:
                          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v101, 45) & 1) == 0
                            && !llvm::CallBase::hasFnAttrOnCalledFunction(v101, 44))
                          {
                            goto LABEL_210;
                          }
                        }
                      }
                      else if (v118 == 27 && (*(_WORD *)(v101 + 18) & 0x301) != 0)
                      {
                        goto LABEL_210;
                      }
                    }
                    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v101) & 1) != 0
                      || !llvm::Instruction::willReturn((llvm::Instruction *)v101))
                    {
                      goto LABEL_210;
                    }
                    goto LABEL_196;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v516, (uint64_t)&v517, v108, 8);
                  v110 = DWORD2(v516);
                  v112 = (__int128 *)v516;
                  v111 = DWORD2(v516);
                  goto LABEL_183;
                }
              }
LABEL_171:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v93, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v93, 44))
              {
                goto LABEL_177;
              }
            }
          }
          else if (v96 == 27)
          {
            if ((*((_WORD *)v93 + 9) & 0x301) != 0)
              goto LABEL_177;
          }
          else if (((1 << v96) & 0x808001D0000010) != 0)
          {
            goto LABEL_177;
          }
        }
        if (*((unsigned __int8 *)v93 + 16) - 29 < 0xB
          || sub_1C4D99D08((uint64_t)v93)
          || *((_BYTE *)v93 + 16) == 59)
        {
          goto LABEL_177;
        }
        llvm::Instruction::moveBefore((llvm::Instruction *)v93, v477);
      }
      while (v59 != v482);
    }
    v159 = a6;
    if ((_DWORD)v507)
    {
      for (ii = (_QWORD *)*((_QWORD *)v465 + 6); ii != (_QWORD *)((char *)v465 + 40); ii = (_QWORD *)ii[1])
      {
        v396 = ii - 3;
        if (ii)
          v397 = ii - 3;
        else
          v397 = 0;
        if (*((_BYTE *)v397 + 16) != 83)
          goto LABEL_635;
      }
      v396 = 0;
LABEL_635:
      v403 = (llvm::Instruction **)v506;
      v404 = v396 + 3;
      v405 = 8 * v507;
      do
      {
        llvm::Instruction::clone(*v403);
        v407 = (llvm::Value *)v406;
        v408 = v396[5];
        *(_QWORD *)(v406 + 40) = v408;
        *(_WORD *)(v408 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v406 + 23) & 0x10) != 0)
        {
          v411 = *(_QWORD *)(v408 + 56);
          if (v411)
          {
            v412 = *(llvm::ValueSymbolTable **)(v411 + 104);
            if (v412)
              llvm::ValueSymbolTable::reinsertValue(v412, v407);
          }
        }
        v409 = *v404;
        *((_QWORD *)v407 + 3) = *v404;
        *((_QWORD *)v407 + 4) = v404;
        v410 = (_QWORD *)((char *)v407 + 24);
        *(_QWORD *)(v409 + 8) = v410;
        *v404 = (uint64_t)v410;
        ++v403;
        v405 -= 8;
      }
      while (v405);
      v413 = **(uint64_t ***)v465;
      *(_QWORD *)&v516 = &v517;
      *((_QWORD *)&v516 + 1) = 0x800000000;
      if ((_DWORD)v507)
      {
        v414 = 0;
        v416 = (char *)v506;
        v417 = 8 * v507;
        v159 = a6;
        do
        {
          v418 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v416 - 32 * (*(_DWORD *)(*(_QWORD *)v416 + 20) & 0x7FFFFFF))
                           + 24);
          if (v414 >= HIDWORD(v516))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v516, (uint64_t)&v517, v414 + 1, 8);
            v414 = DWORD2(v516);
          }
          *(_QWORD *)(v516 + 8 * v414) = v418;
          v414 = ++DWORD2(v516);
          v416 += 8;
          v417 -= 8;
        }
        while (v417);
        v415 = (uint64_t *)v516;
      }
      else
      {
        v414 = 0;
        v415 = (uint64_t *)&v517;
        v159 = a6;
      }
      v495 = (void *)v21;
      llvm::cloneAndAdaptNoAliasScopes(v415, v414, (uint64_t)&v495, 1, v413, "h.rot", 5uLL);
      v419 = *(int32x2_t *****)v506;
      v496 = 2;
      v497 = 0;
      v498 = v419;
      if (v419 != (int32x2_t ****)-8192 && v419 != (int32x2_t ****)-4096 && v419 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v496);
      v495 = &unk_1E814DA10;
      v499 = (int32x2_t ****)v491;
      v421 = sub_1C52E2ED8((uint64_t)v491, &v495);
      if (v498 != (int32x2_t ****)-8192 && v498 != (int32x2_t ****)-4096 && v498)
      {
        v422 = v496 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v496 & 0xFFFFFFFFFFFFFFF8) = v497;
        if (v497)
        {
          *v497 = (_QWORD **)((unint64_t)*v497 & 7 | v422);
        }
        else
        {
          v423 = v498;
          v424 = ***v498;
          v425 = (unint64_t)v424[303];
          if (v425 <= v422)
          {
            v426 = v424[305].u32[0];
            if (v425 + 16 * v426 > v422)
            {
              v427 = v426 - 1;
              LODWORD(v428) = v427 & ((v498 >> 4) ^ (v498 >> 9));
              v429 = (int32x2_t *****)(v425 + 16 * v428);
              v430 = *v429;
              if (v498 == *v429)
              {
LABEL_666:
                *v429 = (int32x2_t ****)-8192;
                v424[304] = vadd_s32(v424[304], (int32x2_t)0x1FFFFFFFFLL);
                v423 = v498;
              }
              else
              {
                v431 = 1;
                while (v430 != (int32x2_t ****)-4096)
                {
                  v432 = v428 + v431++;
                  v428 = v432 & v427;
                  v430 = *(int32x2_t *****)(v425 + 16 * v428);
                  if (v498 == v430)
                  {
                    v429 = (int32x2_t *****)(v425 + 16 * v428);
                    goto LABEL_666;
                  }
                }
              }
              *((_BYTE *)v423 + 17) &= ~1u;
            }
          }
        }
      }
      if (*v471)
        v433 = (uint64_t)(*v471 - 3);
      else
        v433 = 0;
      llvm::cloneAndAdaptNoAliasScopes((uint64_t *)v516, DWORD2(v516), v421[7], v433, v413, "pre.rot", 7uLL);
      if ((__int128 *)v516 != &v517)
        free((void *)v516);
    }
    v160 = (_QWORD *)*v482;
    if ((_QWORD *)*v482 != v482)
    {
      if (v160)
        v161 = v160 - 3;
      else
        v161 = 0;
      if (*((_BYTE *)v161 + 16) == 30)
      {
        if ((*((_DWORD *)v161 + 5) & 0x7FFFFFF) == 3)
          v162 = 2;
        else
          v162 = 1;
      }
      else
      {
        v162 = 2;
        switch(*((_BYTE *)v161 + 16))
        {
          case 0x1E:
            goto LABEL_761;
          case 0x1F:
            v162 = (*((_DWORD *)v161 + 5) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
          case 0x26:
            v162 = (*((_DWORD *)v161 + 5) & 0x7FFFFFF) - 1;
            break;
          case 0x21:
            goto LABEL_262;
          case 0x24:
            v162 = *((_WORD *)v161 + 9) & 1;
            break;
          case 0x25:
            v162 = 1;
            goto LABEL_262;
          case 0x27:
            v162 = *((_DWORD *)v161 + 20) + 1;
            break;
          default:
            goto LABEL_281;
        }
        if (!v162)
          goto LABEL_281;
      }
LABEL_262:
      for (jj = 0; jj != v162; ++jj)
      {
        for (kk = *(_QWORD *)(llvm::Instruction::getSuccessor((llvm::Instruction *)v161, jj) + 48);
              ;
              kk = *(_QWORD *)(kk + 8))
        {
          v165 = (llvm::PHINode *)(kk - 24);
          v166 = kk ? kk - 24 : 0;
          if (!kk || *(_BYTE *)(v166 + 16) != 83)
            break;
          v167 = *(_DWORD *)(kk - 4);
          v168 = v167 & 0x7FFFFFF;
          if ((v167 & 0x7FFFFFF) != 0)
          {
            v169 = 0;
            while (1)
            {
              v170 = (char *)v165 - 32 * v168;
              if ((v167 & 0x40000000) != 0)
                v170 = *(char **)(kk - 32);
              if (*(_QWORD *)&v170[32 * *(unsigned int *)(kk + 36) + 8 * v169] == v21)
                break;
              if (v168 == ++v169)
                goto LABEL_275;
            }
          }
          else
          {
LABEL_275:
            LODWORD(v169) = -1;
          }
          if ((v167 & 0x40000000) != 0)
            v171 = *(char **)(kk - 32);
          else
            v171 = (char *)v165 - 32 * v168;
          sub_1C477667C(v165, *(_QWORD *)&v171[32 * v169], (uint64_t)v44);
        }
      }
    }
LABEL_281:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v477 + 5) + 40, (uint64_t ***)v477);
    v172 = *((_QWORD *)v477 + 3);
    v173 = (_QWORD *)*((_QWORD *)v477 + 4);
    *v173 = v172;
    *(_QWORD *)(v172 + 8) = v173;
    *((_QWORD *)v477 + 3) = 0;
    *((_QWORD *)v477 + 4) = 0;
    llvm::Value::deleteValue(v477);
    if (a7)
    {
      sub_1C5F26128((uint64_t)v487, (int32x2_t ****)v21, v44);
      llvm::MemorySSAUpdater::updateForClonedBlockIntoPred((uint64_t *)a7, v21, (llvm::BasicBlock *)v44, (uint64_t)v487);
    }
    v503 = v505;
    v504 = 0x200000000;
    v174 = *(_QWORD **)(v21 + 48);
    v175 = v174 - 3;
    if (v174)
      v176 = v174 - 3;
    else
      v176 = 0;
    if (v174 && *((_BYTE *)v176 + 16) == 83)
    {
      do
      {
        v177 = v175[5];
        v178 = v177 & 0x7FFFFFF;
        if ((v177 & 0x7FFFFFF) != 0)
        {
          v179 = 0;
          while (1)
          {
            v180 = &v175[-8 * v178];
            if ((v177 & 0x40000000) != 0)
              v180 = (_DWORD *)*((_QWORD *)v175 - 1);
            if (*(int32x2_t *****)&v180[8 * v175[15] + 2 * v179] == v44)
              break;
            if (v178 == ++v179)
              goto LABEL_294;
          }
        }
        else
        {
LABEL_294:
          LODWORD(v179) = -1;
        }
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v175, v179, 1);
        v174 = (_QWORD *)v174[1];
        v181 = v174 - 3;
        if (!v174)
          v181 = 0;
        v182 = *((unsigned __int8 *)v181 + 16);
        if (v182 == 83)
          v175 = v181;
        else
          v175 = 0;
      }
      while (v174 && v182 == 83);
      v174 = *(_QWORD **)(v21 + 48);
    }
    v516 = 0u;
    v517 = 0u;
    v518[0] = 0;
    v518[1] = &v503;
    if (v174 != v482)
    {
      v474 = (v44 >> 4) ^ (v44 >> 9);
      while (2)
      {
        if (v174)
          v183 = (uint64_t)(v174 - 3);
        else
          v183 = 0;
        if (!*(_QWORD *)(v183 + 8))
          goto LABEL_411;
        v184 = v183 >> 4;
        if (v492)
        {
          v185 = (v492 - 1) & (v184 ^ (v183 >> 9));
          v186 = (_QWORD *)(v491[0] + (v185 << 6));
          v187 = v186[3];
          if (v183 != v187)
          {
            v188 = 1;
            while (v187 != -4096)
            {
              v189 = v185 + v188++;
              v185 = v189 & (v492 - 1);
              v186 = (_QWORD *)(v491[0] + (v185 << 6));
              v187 = v186[3];
              if (v183 == v187)
                goto LABEL_316;
            }
            goto LABEL_315;
          }
        }
        else
        {
LABEL_315:
          v186 = (_QWORD *)(v491[0] + ((unint64_t)v492 << 6));
        }
LABEL_316:
        v495 = (void *)6;
        if (v186 == (_QWORD *)(v491[0] + ((unint64_t)v492 << 6)))
        {
          v190 = 0;
          v191 = 0;
          v496 = 0;
          v497 = 0;
        }
        else
        {
          v190 = 0;
          v191 = (_QWORD ***)v186[7];
          v496 = 0;
          v497 = v191;
          if (v191 != (_QWORD ***)-8192 && v191 != (_QWORD ***)-4096 && v191 != 0)
          {
            v193 = v186[5] & 0xFFFFFFFFFFFFFFF8;
            v496 = *(_QWORD *)v193;
            *(_QWORD *)v193 = &v495;
            v495 = (void *)(v193 | 6);
            v190 = v496;
            if (v496)
              *(_QWORD *)v496 = *(_QWORD *)v496 & 7 | (unint64_t)&v496;
            v191 = v497;
          }
        }
        if (v191 != (_QWORD ***)-8192 && v191 != (_QWORD ***)-4096 && v191 != 0)
        {
          v204 = (unint64_t)v495 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v495 & 0xFFFFFFFFFFFFFFF8) = v190;
          if (v496)
          {
            *(_QWORD *)v496 = *(_QWORD *)v496 & 7 | v204;
          }
          else
          {
            v205 = v497;
            v206 = (int32x2_t *)***v497;
            v207 = (unint64_t)v206[303];
            if (v207 <= v204)
            {
              v208 = v206[305].u32[0];
              if (v207 + 16 * v208 > v204)
              {
                v209 = v208 - 1;
                LODWORD(v210) = v209 & ((v497 >> 4) ^ (v497 >> 9));
                v211 = (_QWORD *)(v207 + 16 * v210);
                v212 = (_QWORD ***)*v211;
                if (v497 == (_QWORD ***)*v211)
                {
LABEL_347:
                  *v211 = -8192;
                  v206[304] = vadd_s32(v206[304], (int32x2_t)0x1FFFFFFFFLL);
                  v205 = v497;
                }
                else
                {
                  v213 = 1;
                  while (v212 != (_QWORD ***)-4096)
                  {
                    v214 = v210 + v213++;
                    v210 = v214 & v209;
                    v212 = *(_QWORD ****)(v207 + 16 * v210);
                    if (v497 == v212)
                    {
                      v211 = (_QWORD *)(v207 + 16 * v210);
                      goto LABEL_347;
                    }
                  }
                }
                *((_BYTE *)v205 + 17) &= ~1u;
              }
            }
          }
        }
        v195 = *(llvm::UndefValue **)v183;
        if ((*(_BYTE *)(v183 + 23) & 0x10) != 0)
        {
          v196 = **(_QWORD **)v195;
          v197 = *(_QWORD *)(v196 + 152);
          v198 = *(unsigned int *)(v196 + 168);
          if (!(_DWORD)v198)
            goto LABEL_349;
          LODWORD(v199) = (v198 - 1) & (v184 ^ (v183 >> 9));
          v200 = (uint64_t *)(v197 + 16 * v199);
          v201 = *v200;
          if (*v200 != v183)
          {
            v202 = 1;
            while (v201 != -4096)
            {
              v203 = v199 + v202++;
              v199 = v203 & (v198 - 1);
              v201 = *(_QWORD *)(v197 + 16 * v199);
              if (v201 == v183)
              {
                v200 = (uint64_t *)(v197 + 16 * v199);
                goto LABEL_350;
              }
            }
LABEL_349:
            v200 = (uint64_t *)(v197 + 16 * v198);
          }
LABEL_350:
          v215 = (_QWORD *)v200[1];
          v218 = *v215;
          v216 = (char *)(v215 + 2);
          v217 = v218;
        }
        else
        {
          v217 = 0;
          v216 = &byte_1C871356D;
        }
        llvm::SSAUpdater::Initialize((uint64_t)&v516, (uint64_t)v195, v216, v217);
        if (v159)
          llvm::ScalarEvolution::forgetValue(v159, (llvm::Value *)v183);
        v495 = (void *)v21;
        v219 = (_QWORD *)v516;
        v220 = *(_DWORD *)(v516 + 16);
        if (!v220)
        {
          v229 = 0;
          goto LABEL_367;
        }
        v221 = v220 - 1;
        v222 = (v220 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v223 = (_QWORD *)(*(_QWORD *)v516 + 16 * v222);
        v224 = *v223;
        if (*v223 == v21)
        {
          v223[1] = v183;
          v495 = v44;
          goto LABEL_369;
        }
        v225 = 0;
        v226 = 1;
        while (v224 != -4096)
        {
          if (v225)
            v227 = 0;
          else
            v227 = v224 == -8192;
          if (v227)
            v225 = v223;
          v228 = v222 + v226++;
          v222 = v228 & v221;
          v223 = (_QWORD *)(*(_QWORD *)v516 + 16 * (v228 & v221));
          v224 = *v223;
          if (*v223 == v21)
            goto LABEL_368;
        }
        if (v225)
          v229 = v225;
        else
          v229 = v223;
LABEL_367:
        v223 = sub_1C4ECCA58(v516, (uint64_t)&v495, (uint64_t *)&v495, v229);
        *v223 = v495;
        v223[1] = 0;
        v219 = (_QWORD *)v516;
        v220 = *(_DWORD *)(v516 + 16);
LABEL_368:
        v223[1] = v183;
        v495 = v44;
        if (v220)
        {
LABEL_369:
          v230 = v220 - 1;
          v231 = v230 & v474;
          v232 = (int32x2_t *****)(*v219 + 16 * (v230 & v474));
          v233 = *v232;
          if (*v232 != v44)
          {
            v234 = 0;
            v235 = 1;
            while (v233 != (int32x2_t ****)-4096)
            {
              if (v234)
                v236 = 0;
              else
                v236 = v233 == (int32x2_t ****)-8192;
              if (v236)
                v234 = v232;
              v237 = v231 + v235++;
              v231 = v237 & v230;
              v232 = (int32x2_t *****)(*v219 + 16 * (v237 & v230));
              v233 = *v232;
              if (*v232 == v44)
                goto LABEL_383;
            }
            if (v234)
              v238 = v234;
            else
              v238 = v232;
LABEL_382:
            v232 = (int32x2_t *****)sub_1C4ECCA58((uint64_t)v219, (uint64_t)&v495, (uint64_t *)&v495, v238);
            *v232 = (int32x2_t ****)v495;
            v232[1] = 0;
          }
LABEL_383:
          v232[1] = (int32x2_t ****)v191;
          v239 = *(_QWORD *)(v183 + 8);
          if (v239)
          {
            v240 = (uint64_t *)(v191 + 1);
            while (1)
            {
              v241 = v239;
              v242 = (uint64_t *)(v239 + 8);
              v239 = *(_QWORD *)(v239 + 8);
              v243 = v242[2];
              if (*(_BYTE *)(v243 + 16) == 83)
                goto LABEL_388;
              v244 = *(int32x2_t *****)(v243 + 40);
              if (v244 != (int32x2_t ****)v21)
                break;
LABEL_389:
              if (!v239)
                goto LABEL_398;
            }
            if (v244 == v44)
            {
              if (*(_QWORD *)v241)
              {
                **(_QWORD **)(v241 + 16) = v239;
                v245 = *(_QWORD *)(v241 + 8);
                if (v245)
                  *(_QWORD *)(v245 + 16) = *(_QWORD *)(v241 + 16);
              }
              *(_QWORD *)v241 = v191;
              if (v191)
              {
                v246 = *v240;
                *v242 = *v240;
                if (v246)
                  *(_QWORD *)(v246 + 16) = v242;
                *(_QWORD *)(v241 + 16) = v240;
                *v240 = v241;
              }
              goto LABEL_389;
            }
LABEL_388:
            llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)&v516, (llvm::Use *)v241);
            goto LABEL_389;
          }
LABEL_398:
          v495 = &v497;
          v496 = 0x100000000;
          llvm::findDbgValues((uint64_t)&v495, v183);
          v247 = (llvm::DbgVariableIntrinsic **)v495;
          if ((_DWORD)v496)
          {
            v248 = 8 * v496;
            do
            {
              v249 = (uint64_t **)*((_QWORD *)*v247 + 5);
              if (v249 != (uint64_t **)v21)
              {
                v250 = (llvm::Value *)v191;
                if (v249 != (uint64_t **)v44)
                {
                  if (llvm::SSAUpdater::HasValueForBlock((uint64_t **)&v516, *((llvm::BasicBlock **)*v247 + 5)))
                    ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)&v516, v249);
                  else
                    ValueInMiddleOfBlock = llvm::UndefValue::get(*(llvm::UndefValue **)v183, v251);
                  v250 = ValueInMiddleOfBlock;
                }
                llvm::DbgVariableIntrinsic::replaceVariableLocationOp(*v247, (llvm::Value *)v183, v250);
              }
              ++v247;
              v248 -= 8;
            }
            while (v248);
            v247 = (llvm::DbgVariableIntrinsic **)v495;
            v159 = a6;
          }
          if (v247 != (llvm::DbgVariableIntrinsic **)&v497)
            free(v247);
LABEL_411:
          v174 = (_QWORD *)v174[1];
          if (v174 == v482)
            goto LABEL_418;
          continue;
        }
        break;
      }
      v238 = 0;
      goto LABEL_382;
    }
LABEL_418:
    llvm::SSAUpdater::~SSAUpdater((void **)&v516);
    if ((_DWORD)v504)
      llvm::insertDebugValuesForPHIs(v21, (uint64_t *)&v503);
    v18 = (uint64_t)a1;
    v253 = (_QWORD *)*((_QWORD *)a1 + 4);
    v254 = v465;
    v255 = (uint64_t)v468;
    if ((llvm *)*v253 != v465)
    {
      v256 = 0;
      do
      {
        v257 = v256;
        v258 = (llvm *)v253[v256++];
      }
      while (v258 != v465);
      v253[v257] = *v253;
      **((_QWORD **)a1 + 4) = v465;
    }
    if (v468)
    {
      v495 = &v497;
      v497 = v44;
      v498 = (int32x2_t ****)(v473 & 0xFFFFFFFFFFFFFFFBLL);
      v499 = v44;
      v500 = (unint64_t)v465 & 0xFFFFFFFFFFFFFFFBLL;
      v501 = v44;
      v502 = v21 | 4;
      v496 = 0x300000003;
      if (a7)
      {
        llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)a7, (unint64_t *)&v497, 3, (uint64_t)v468, 1);
      }
      else
      {
        sub_1C4E25D14((uint64_t)&v516, (unint64_t *)&v497, 3, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v468, (uint64_t)&v516, 0);
        if (v533 != v534)
          free(v533);
        sub_1C4E28CA4((uint64_t)&v522);
        sub_1C4E28CA4((uint64_t)&v516);
      }
      if (v495 != &v497)
        free(v495);
      v254 = v465;
    }
    v259 = (_QWORD **)*v471;
    if (*v471 == v471)
    {
      v261 = 0;
    }
    else
    {
      v260 = v259 - 3;
      if (!v259)
        v260 = 0;
      if (*((unsigned __int8 *)v260 + 16) - 29 >= 0xB)
        v261 = 0;
      else
        v261 = v260;
    }
    v262 = a2;
    v263 = (uint64_t)*(v261 - 12);
    if (*(_BYTE *)(v263 + 16) != 16
      || ((v264 = (llvm::APInt *)(v263 + 24), v265 = *(_DWORD *)(v263 + 32), v265 > 0x40)
        ? (v267 = llvm::APInt::countLeadingZerosSlowCase(v264), v254 = v465, v266 = v267 == v265)
        : (v266 = *(_QWORD *)v264 == 0),
          !v266 ? (v268 = 0) : (v268 = 1),
          v262 = a2,
          v261[4 * (v268 << 63 >> 63) - 4] != (_QWORD *)v254))
    {
      v495 = v468;
      v496 = 0;
      v497 = (_QWORD ***)v262;
      v498 = (int32x2_t ****)a7;
      LODWORD(v499) = 0x10000;
      BYTE4(v499) = 1;
      if (v259 == v471)
      {
        v270 = 0;
      }
      else
      {
        v269 = (unsigned __int8 *)(v259 - 3);
        if (!v259)
          v269 = 0;
        if (v269[16] - 29 >= 0xB)
          v270 = 0;
        else
          v270 = (llvm::Instruction *)v269;
      }
      v271 = -1;
      v272 = v254;
      do
        ++v271;
      while ((llvm *)llvm::Instruction::getSuccessor(v270, v271) != v272);
      LOWORD(v518[0]) = 257;
      v273 = (uint64_t ***)llvm::SplitCriticalEdge(v270, v271, (uint64_t)&v495, (llvm::Twine *)&v516);
      if ((*((_BYTE *)v272 + 23) & 0x10) != 0)
      {
        v274 = ***(_QWORD ***)v272;
        v275 = *(_QWORD *)(v274 + 152);
        v276 = *(unsigned int *)(v274 + 168);
        if (!(_DWORD)v276)
          goto LABEL_481;
        LODWORD(v277) = (v276 - 1) & ((v272 >> 4) ^ (v272 >> 9));
        v278 = (llvm **)(v275 + 16 * v277);
        v279 = *v278;
        if (*v278 != v272)
        {
          v280 = 1;
          while (v279 != (llvm *)-4096)
          {
            v281 = v277 + v280++;
            v277 = v281 & (v276 - 1);
            v279 = *(llvm **)(v275 + 16 * v277);
            if (v279 == v272)
            {
              v278 = (llvm **)(v275 + 16 * v277);
              goto LABEL_482;
            }
          }
LABEL_481:
          v278 = (llvm **)(v275 + 16 * v276);
        }
LABEL_482:
        v301 = v278[1];
        v304 = *(_QWORD *)v301;
        v303 = (char *)v301 + 16;
        v302 = v304;
      }
      else
      {
        v302 = 0;
        v303 = &byte_1C871356D;
      }
      LOWORD(v518[0]) = 773;
      *(_QWORD *)&v516 = v303;
      *((_QWORD *)&v516 + 1) = v302;
      *(_QWORD *)&v517 = ".lr.ph";
      llvm::Value::setName(v273, (uint64_t)&v516);
      for (mm = *(_QWORD *)(v473 + 8); mm; mm = *(_QWORD *)(mm + 8))
      {
        v306 = *(_QWORD *)(mm + 24);
        v307 = *(unsigned __int8 *)(v306 + 16);
        if (v306)
          v308 = v307 >= 0x1C;
        else
          v308 = 0;
        if (v308 && v307 - 29 < 0xB)
          break;
      }
      *(_QWORD *)&v516 = &v517;
      *((_QWORD *)&v516 + 1) = 0x400000000;
      sub_1C4DBBCC0((unsigned int *)&v516, mm, 0);
      v310 = (uint64_t *)v516;
      if (DWORD2(v516))
      {
        v311 = v516 + 8 * DWORD2(v516);
        v312 = a2;
        do
        {
          v313 = v312[2].i32[0];
          if (v313)
          {
            v314 = *v310;
            v315 = *v312;
            v316 = v313 - 1;
            v317 = ((*v310 >> 4) ^ (*v310 >> 9)) & (v313 - 1);
            v318 = *(_QWORD *)(*(_QWORD *)v312
                             + 16 * (((*v310 >> 4) ^ (*v310 >> 9)) & v316));
            if (*v310 == v318)
            {
LABEL_500:
              v321 = *(_QWORD *)(*(_QWORD *)&v315 + 16 * v317 + 8);
              if (v321)
              {
                v322 = sub_1C477672C(v321 + 56, v473);
                v323 = *(_QWORD *)(v321 + 64);
                v324 = 72;
                if (v323 == *(_QWORD *)(v321 + 56))
                  v324 = 76;
                v312 = a2;
                if (v322 == (_QWORD *)(v323 + 8 * *(unsigned int *)(v321 + v324)))
                {
                  v326 = *(_QWORD *)(v314 + 40);
                  v325 = (_QWORD *)(v314 + 40);
                  v327 = v326 - 24;
                  if (v326)
                    v328 = v327;
                  else
                    v328 = 0;
                  if (*(unsigned __int8 *)(v328 + 16) - 29 >= 0xB)
                    v328 = 0;
                  v329 = *(unsigned __int8 *)(v328 + 16);
                  if (v329 != 32 && v329 != 39)
                  {
                    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
                    v484[0] = v255;
                    v484[1] = 0;
                    v484[2] = (uint64_t)a2;
                    v484[3] = (uint64_t)a7;
                    v485 = 0x10000;
                    v486 = 1;
                    v330 = (_QWORD *)*v325;
                    if ((_QWORD *)*v325 == v325)
                    {
                      v332 = 0;
                    }
                    else
                    {
                      if (v330)
                        v331 = (unsigned __int8 *)(v330 - 3);
                      else
                        v331 = 0;
                      if (v331[16] - 29 >= 0xB)
                        v332 = 0;
                      else
                        v332 = (llvm::Instruction *)v331;
                    }
                    v333 = -1;
                    do
                      ++v333;
                    while (llvm::Instruction::getSuccessor(v332, v333) != v473);
                    LOWORD(v499) = 257;
                    v334 = llvm::SplitCriticalEdge(v332, v333, (uint64_t)v484, (llvm::Twine *)&v495);
                    sub_1C4FCEAA0(*(_QWORD *)(v473 + 56) + 72, (uint64_t *)(v473 + 24), *(_QWORD *)(v334 + 56) + 72, (uint64_t *)(v334 + 24));
                    v312 = a2;
                    v255 = (uint64_t)v468;
                  }
                }
              }
            }
            else
            {
              v319 = 1;
              while (v318 != -4096)
              {
                v320 = v317 + v319++;
                v317 = v320 & v316;
                v318 = *(_QWORD *)(*(_QWORD *)&v315 + 16 * v317);
                if (v314 == v318)
                  goto LABEL_500;
              }
            }
          }
          ++v310;
        }
        while (v310 != (uint64_t *)v311);
        v310 = (uint64_t *)v516;
      }
      if (v310 != (uint64_t *)&v517)
        free(v310);
      goto LABEL_526;
    }
    llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v473, (llvm::BasicBlock *)v44, 1);
    v282 = (char *)operator new(0x60uLL);
    v283 = v465;
    v284 = v282;
    *((_DWORD *)v282 + 13) = *((_DWORD *)v282 + 13) & 0x38000000 | 1;
    *((_QWORD *)v282 + 1) = 0;
    *((_QWORD *)v282 + 2) = 0;
    *(_QWORD *)v282 = 0;
    *((_QWORD *)v282 + 4) = ***(_QWORD ***)v465 + 1576;
    v285 = (llvm::Value *)(v282 + 32);
    *((_QWORD *)v282 + 3) = v282 + 32;
    *((_QWORD *)v282 + 5) = 0;
    v282[48] = 30;
    v282[49] = 0;
    *((_WORD *)v282 + 25) = 0;
    *((_DWORD *)v282 + 13) = 1;
    *(_OWORD *)(v282 + 56) = 0u;
    v286 = v282 + 56;
    *(_OWORD *)(v282 + 72) = 0u;
    *((_DWORD *)v282 + 22) = 0;
    v287 = v261[5];
    v288 = (uint64_t *)(v261 + 3);
    *((_QWORD *)v282 + 9) = v287;
    *((_WORD *)v287 + 9) &= ~0x8000u;
    if ((v282[55] & 0x10) != 0 && (v398 = v287[7]) != 0 && (v399 = *(llvm::ValueSymbolTable **)(v398 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v399, v285);
      v283 = v465;
      v400 = *(_QWORD *)v284;
      v401 = *v288;
      *((_QWORD *)v284 + 7) = *v288;
      *((_QWORD *)v284 + 8) = v288;
      *(_QWORD *)(v401 + 8) = v286;
      *v288 = (uint64_t)v286;
      if (v400)
      {
        **((_QWORD **)v284 + 2) = *((_QWORD *)v284 + 1);
        v402 = *((_QWORD *)v284 + 1);
        if (v402)
          *(_QWORD *)(v402 + 16) = *((_QWORD *)v284 + 2);
      }
    }
    else
    {
      v289 = *v288;
      *((_QWORD *)v284 + 7) = *v288;
      *((_QWORD *)v284 + 8) = v288;
      *(_QWORD *)(v289 + 8) = v286;
      *v288 = (uint64_t)v286;
    }
    *(_QWORD *)v284 = v283;
    v292 = *((_QWORD *)v283 + 1);
    v291 = (_QWORD *)((char *)v283 + 8);
    v290 = v292;
    *((_QWORD *)v284 + 1) = v292;
    if (v292)
      *(_QWORD *)(v290 + 16) = v284 + 8;
    *((_QWORD *)v284 + 2) = v291;
    *v291 = v284;
    v293 = (unsigned __int8 *)v261[6];
    v483 = v293;
    if (v293)
      llvm::MetadataTracking::track((uint64_t)&v483, v293, 2);
    v296 = (unsigned __int8 *)*((_QWORD *)v284 + 10);
    v295 = (unsigned __int8 **)(v284 + 80);
    v294 = v296;
    if (v296)
      llvm::MetadataTracking::untrack((uint64_t)v295, v294);
    v297 = v483;
    *v295 = v483;
    if (v297)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v483, v297, (uint64_t)v295);
      v483 = 0;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v261[5] + 5), (uint64_t ***)v261);
    v298 = v261[3];
    v299 = v261[4];
    *v299 = v298;
    v298[1] = v299;
    *v288 = 0;
    v261[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v261);
    if (v468)
      sub_1C53BB778((uint64_t)v468, 0, (uint64_t)v44, v473);
    if (a7)
      llvm::MemorySSAUpdater::removeEdge(a7, (llvm::BasicBlock *)v44, (llvm::BasicBlock *)v473);
LABEL_526:
    *(_QWORD *)&v516 = &v517;
    *((_QWORD *)&v516 + 1) = 0x1000000000;
    v519 = 0;
    v520 = 0;
    v521 = v255;
    v522 = 0;
    v523 = 0;
    v524 = v528;
    v525 = v528;
    v526 = 8;
    v527 = 0;
    v530 = 0;
    v531 = 0;
    v529 = 0;
    v532 = 0;
    UniquePredecessor = (llvm *)llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)v21);
    if (llvm::MergeBlockIntoPredecessor(v21, (llvm::BasicBlock *)&v516, a2, a7, 0, 0))
      llvm::RemoveRedundantDbgInstrs(UniquePredecessor, v336);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v516);
    v495 = &v529;
    sub_1C50B10F0((void ***)&v495);
    if (v525 != v524)
      free(v525);
    if ((__int128 *)v516 != &v517)
      free((void *)v516);
    if (v503 != v505)
      free(v503);
    if (v506 != v508)
      free(v506);
    if ((v509 & 1) == 0)
      MEMORY[0x1CAA32FB4](v510, 8);
    if (v490)
    {
      sub_1C4E43068((uint64_t)v489);
      MEMORY[0x1CAA32FB4](v489[0], 8);
      v490 = 0;
    }
    v337 = (_QWORD *)v487[0];
    if (v488)
    {
      v338 = v487[0] + ((unint64_t)v488 << 6);
      do
      {
        v339 = v337[3];
        if ((v339 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v340 = v337[7];
          if (v340)
          {
            if (v340 != -8192 && v340 != -4096)
            {
              v341 = v337[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v341 = v337[6];
              v342 = (unint64_t *)v337[6];
              if (v342)
              {
                *v342 = *v342 & 7 | v341;
              }
              else
              {
                v343 = v337[7];
                v344 = ***(int32x2_t ****)v343;
                v345 = (unint64_t)v344[303];
                if (v345 <= v341)
                {
                  v346 = v344[305].u32[0];
                  if (v345 + 16 * v346 > v341)
                  {
                    v347 = v346 - 1;
                    LODWORD(v348) = v347 & ((v343 >> 4) ^ (v343 >> 9));
                    v349 = (uint64_t *)(v345 + 16 * v348);
                    v350 = *v349;
                    if (v343 == *v349)
                    {
LABEL_554:
                      *v349 = -8192;
                      v344[304] = vadd_s32(v344[304], (int32x2_t)0x1FFFFFFFFLL);
                      v343 = v337[7];
                    }
                    else
                    {
                      v351 = 1;
                      while (v350 != -4096)
                      {
                        v352 = v348 + v351++;
                        v348 = v352 & v347;
                        v350 = *(_QWORD *)(v345 + 16 * v348);
                        if (v343 == v350)
                        {
                          v349 = (uint64_t *)(v345 + 16 * v348);
                          goto LABEL_554;
                        }
                      }
                    }
                    *(_BYTE *)(v343 + 17) &= ~1u;
                  }
                }
              }
              v339 = v337[3];
            }
          }
        }
        if (v339 != -4096 && v339 != -8192 && v339 != 0)
        {
          v354 = v337[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v354 = v337[2];
          v355 = (unint64_t *)v337[2];
          if (v355)
          {
            *v355 = *v355 & 7 | v354;
          }
          else
          {
            v356 = v337[3];
            v357 = ***(int32x2_t ****)v356;
            v358 = (unint64_t)v357[303];
            if (v358 <= v354)
            {
              v359 = v357[305].u32[0];
              if (v358 + 16 * v359 > v354)
              {
                v360 = v359 - 1;
                LODWORD(v361) = v360 & ((v356 >> 4) ^ (v356 >> 9));
                v362 = (uint64_t *)(v358 + 16 * v361);
                v363 = *v362;
                if (v356 == *v362)
                {
LABEL_573:
                  *v362 = -8192;
                  v357[304] = vadd_s32(v357[304], (int32x2_t)0x1FFFFFFFFLL);
                  v356 = v337[3];
                }
                else
                {
                  v364 = 1;
                  while (v363 != -4096)
                  {
                    v365 = v361 + v364++;
                    v361 = v365 & v360;
                    v363 = *(_QWORD *)(v358 + 16 * v361);
                    if (v356 == v363)
                    {
                      v362 = (uint64_t *)(v358 + 16 * v361);
                      goto LABEL_573;
                    }
                  }
                }
                *(_BYTE *)(v356 + 17) &= ~1u;
              }
            }
          }
        }
        v337 += 8;
      }
      while (v337 != (_QWORD *)v338);
      v337 = (_QWORD *)v487[0];
    }
    MEMORY[0x1CAA32FB4](v337, 8);
    if (v494)
    {
      sub_1C4E43068((uint64_t)v493);
      MEMORY[0x1CAA32FB4](v493[0], 8);
      v494 = 0;
    }
    v366 = (_QWORD *)v491[0];
    if (v492)
    {
      v367 = v491[0] + ((unint64_t)v492 << 6);
      do
      {
        v368 = v366[3];
        if ((v368 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v369 = v366[7];
          if (v369)
          {
            if (v369 != -8192 && v369 != -4096)
            {
              v370 = v366[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v370 = v366[6];
              v371 = (unint64_t *)v366[6];
              if (v371)
              {
                *v371 = *v371 & 7 | v370;
              }
              else
              {
                v372 = v366[7];
                v373 = ***(int32x2_t ****)v372;
                v374 = (unint64_t)v373[303];
                if (v374 <= v370)
                {
                  v375 = v373[305].u32[0];
                  if (v374 + 16 * v375 > v370)
                  {
                    v376 = v375 - 1;
                    LODWORD(v377) = v376 & ((v372 >> 4) ^ (v372 >> 9));
                    v378 = (uint64_t *)(v374 + 16 * v377);
                    v379 = *v378;
                    if (v372 == *v378)
                    {
LABEL_592:
                      *v378 = -8192;
                      v373[304] = vadd_s32(v373[304], (int32x2_t)0x1FFFFFFFFLL);
                      v372 = v366[7];
                    }
                    else
                    {
                      v380 = 1;
                      while (v379 != -4096)
                      {
                        v381 = v377 + v380++;
                        v377 = v381 & v376;
                        v379 = *(_QWORD *)(v374 + 16 * v377);
                        if (v372 == v379)
                        {
                          v378 = (uint64_t *)(v374 + 16 * v377);
                          goto LABEL_592;
                        }
                      }
                    }
                    *(_BYTE *)(v372 + 17) &= ~1u;
                  }
                }
              }
              v368 = v366[3];
            }
          }
        }
        if (v368 != -4096 && v368 != -8192 && v368 != 0)
        {
          v383 = v366[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v383 = v366[2];
          v384 = (unint64_t *)v366[2];
          if (v384)
          {
            *v384 = *v384 & 7 | v383;
          }
          else
          {
            v385 = v366[3];
            v386 = ***(int32x2_t ****)v385;
            v387 = (unint64_t)v386[303];
            if (v387 <= v383)
            {
              v388 = v386[305].u32[0];
              if (v387 + 16 * v388 > v383)
              {
                v389 = v388 - 1;
                LODWORD(v390) = v389 & ((v385 >> 4) ^ (v385 >> 9));
                v391 = (uint64_t *)(v387 + 16 * v390);
                v392 = *v391;
                if (v385 == *v391)
                {
LABEL_611:
                  *v391 = -8192;
                  v386[304] = vadd_s32(v386[304], (int32x2_t)0x1FFFFFFFFLL);
                  v385 = v366[3];
                }
                else
                {
                  v393 = 1;
                  while (v392 != -4096)
                  {
                    v394 = v390 + v393++;
                    v390 = v394 & v389;
                    v392 = *(_QWORD *)(v387 + 16 * v390);
                    if (v385 == v392)
                    {
                      v391 = (uint64_t *)(v387 + 16 * v390);
                      goto LABEL_611;
                    }
                  }
                }
                *(_BYTE *)(v385 + 17) &= ~1u;
              }
            }
          }
        }
        v366 += 8;
      }
      while (v366 != (_QWORD *)v367);
      v366 = (_QWORD *)v491[0];
    }
    MEMORY[0x1CAA32FB4](v366, 8);
    if (byte_1ED827500)
    {
      v20 = 0;
      v19 = 1;
      LODWORD(i) = v466;
      if (sub_1C5F25FB8(a1))
        continue;
    }
    goto LABEL_747;
  }
  LOBYTE(v19) = v42;
LABEL_745:
  LOBYTE(v17) = v469;
LABEL_746:
  if ((v19 & 1) == 0)
  {
LABEL_749:
    v462 = LoopID;
    if (LoopID)
      v463 = v17;
    else
      v463 = 0;
    if ((v463 & 1) != 0)
      goto LABEL_753;
    return;
  }
LABEL_747:
  v462 = LoopID;
  if (!LoopID)
    return;
LABEL_753:
  llvm::Loop::setLoopID((llvm::Loop *)v18, v462);
}

BOOL sub_1C5F25FB8(_QWORD *a1)
{
  uint64_t LoopLatch;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  llvm::BasicBlock *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock **v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t v16;
  BOOL v17;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
  v3 = *(_QWORD *)(LoopLatch + 40);
  if (v3 == LoopLatch + 40)
    return 0;
  v4 = 0;
  if (v3)
    v5 = v3 - 24;
  else
    v5 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16) - 40;
  if (v6 >= 0xFFFFFFF5)
    v7 = v5;
  else
    v7 = 0;
  if (!v3)
    return v4;
  if (*(_BYTE *)(v7 + 16) != 30 || v6 < 0xFFFFFFF5)
    return v4;
  if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 3)
    return 0;
  v9 = *(llvm::BasicBlock **)(v7 - 64);
  v10 = sub_1C477672C((uint64_t)(a1 + 7), (uint64_t)v9);
  v11 = a1[8];
  v12 = 72;
  if (v11 == a1[7])
    v12 = 76;
  if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)a1 + v12)))
    v9 = *(llvm::BasicBlock **)(v7 - 32);
  if (!llvm::BasicBlock::getPostdominatingDeoptimizeCall(v9))
    return 0;
  v19 = v21;
  v20 = 0x400000000;
  sub_1C4EAEA40(a1, (uint64_t)&v19);
  v13 = (llvm::BasicBlock **)v19;
  if ((_DWORD)v20)
  {
    v14 = 8 * v20 - 8;
    do
    {
      v15 = *v13++;
      v16 = llvm::BasicBlock::getPostdominatingDeoptimizeCall(v15);
      v4 = v16 == 0;
      if (v16)
        v17 = v14 == 0;
      else
        v17 = 1;
      v14 -= 8;
    }
    while (!v17);
    v13 = (llvm::BasicBlock **)v19;
  }
  else
  {
    v4 = 0;
  }
  if (v13 != v21)
    free(v13);
  return v4;
}

_QWORD *sub_1C5F26128(uint64_t a1, int32x2_t ****a2, int32x2_t ****a3)
{
  _QWORD *result;
  unint64_t v6;
  int32x2_t ****v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int32x2_t *****v13;
  int32x2_t ****v14;
  int v15;
  int v16;
  int32x2_t ****v17;
  uint64_t v18;
  unint64_t *v19;
  int32x2_t ****v20;
  char v21[24];

  v17 = a2;
  v18 = 6;
  v19 = 0;
  v20 = a3;
  if (a3 != (int32x2_t ****)-8192 && a3 != (int32x2_t ****)-4096 && a3)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v18);
  result = sub_1C52E21BC(a1, &v17, (uint64_t)v21);
  if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
  {
    v6 = v18 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = v19;
    if (v19)
    {
      *v19 = *v19 & 7 | v6;
    }
    else
    {
      v7 = v20;
      v8 = ***v20;
      v9 = (unint64_t)v8[303];
      if (v9 <= v6)
      {
        v10 = v8[305].u32[0];
        if (v9 + 16 * v10 > v6)
        {
          v11 = v10 - 1;
          LODWORD(v12) = v11 & ((v20 >> 4) ^ (v20 >> 9));
          v13 = (int32x2_t *****)(v9 + 16 * v12);
          v14 = *v13;
          if (v20 == *v13)
          {
LABEL_20:
            *v13 = (int32x2_t ****)-8192;
            v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
            v7 = v20;
          }
          else
          {
            v15 = 1;
            while (v14 != (int32x2_t ****)-4096)
            {
              v16 = v12 + v15++;
              v12 = v16 & v11;
              v14 = *(int32x2_t *****)(v9 + 16 * v12);
              if (v20 == v14)
              {
                v13 = (int32x2_t *****)(v9 + 16 * v12);
                goto LABEL_20;
              }
            }
          }
          *((_BYTE *)v7 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5F26270(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16[25];

  v16[24] = *MEMORY[0x1E0C80C00];
  v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40)
    v6 = v5 + 1;
  else
    v6 = 64;
  if (a2 >= 9)
    v7 = v6;
  else
    v7 = a2;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v8 = *(uint64_t **)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if (v7 > 8)
    {
      *(_QWORD *)(a1 + 8) = operator new(24 * v7, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63AF484((int *)a1, v8, &v8[3 * v9]);
    JUMPOUT(0x1CAA32FB4);
  }
  v10 = 0;
  v11 = v16;
  do
  {
    v13 = *(_QWORD *)(a1 + v10 + 8);
    v12 = *(_QWORD *)(a1 + v10 + 16);
    if (v13 == -1 && v12 == -4096)
    {
      if (*(_QWORD *)(a1 + v10 + 24) != -4096)
        goto LABEL_18;
    }
    else if (v13 != -2 || v12 != -8192 || *(_QWORD *)(a1 + v10 + 24) != -8192)
    {
LABEL_18:
      v14 = *(_OWORD *)(a1 + v10 + 8);
      v11[2] = *(_QWORD *)(a1 + v10 + 24);
      *(_OWORD *)v11 = v14;
      v11 += 3;
    }
    v10 += 24;
  }
  while (v10 != 192);
  if (v7 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(24 * v7, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v7;
  }
  return sub_1C63AF484((int *)a1, v16, v11);
}

unint64_t sub_1C5F26438(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v45 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v45 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v45;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v5 = qword_1ED7EAC80;
  v6 = *a1;
  v7 = *a2;
  if (*a1 == *a2)
  {
    v11 = 0;
    return sub_1C49CE808(&v48, v11, v5);
  }
  else
  {
    for (i = 0; ; i += 8)
    {
      v9 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      v10 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v10 = *v9;
      if (i > 0x38)
        break;
      v11 = i + 8;
      *(uint64_t *)((char *)&v48 + i) = *(_QWORD *)(v10 + 128);
      if ((v6 & 4) != 0)
        v6 = (unint64_t)(v9 + 1) | 4;
      else
        v6 = (uint64_t)(v9 + 17);
      *a1 = v6;
      v7 = *a2;
      if (v6 == *a2)
        return sub_1C49CE808(&v48, v11, v5);
    }
    v13 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v14 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
    v15 = v5 ^ (v5 >> 47);
    v16 = v5 ^ (((0x9DDFEA08EB382D69 * (v15 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v15 ^ (0xB492B66FBE98F273 * v5)));
    v17 = v14 + v5 + v49;
    v18 = v53 + v14 - 0x4B6D499041670D8DLL * __ROR8__(v54 + v5 - 0x4B6D499041670D8DLL * v5, 42);
    v19 = v48 - 0x6D8ED9027DD26057 * v5;
    v20 = v15 + v19;
    v21 = v19 + v49 + v50;
    v22 = __ROR8__(v21, 44) + v19;
    v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v16) ^ ((0x9DDFEA08EB382D69 * v16) >> 47));
    v24 = (0xB492B66FBE98F273 * __ROR8__(v17, 37)) ^ v23;
    v25 = __ROR8__(v15 - 0x622015F714C7D297 * (v13 ^ (v13 >> 47)), 33);
    v26 = v22 + __ROR8__(v24 + v20 + v51, 21);
    v27 = 0xB492B66FBE98F273 * v25;
    v28 = v21 + v51;
    v29 = v23 + v52 - 0x4B6D499041670D8DLL * v25;
    v30 = __ROR8__(v53 + v54 + v29, 44) + v29 + __ROR8__(v18 + v50 + v55 + v29, 21);
    v31 = v53 + v54 + v29 + v55;
    v32 = 64;
    if (v6 != v7)
    {
      v33 = v24;
      do
      {
        if (v6 == v7)
        {
          v37 = 0;
        }
        else
        {
          v34 = 0;
          do
          {
            v35 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
            v36 = v6 & 0xFFFFFFFFFFFFFFF8;
            if ((v6 & 4) != 0)
              v36 = *v35;
            if (v34 > 0x38)
            {
              v37 = 64;
              goto LABEL_29;
            }
            v37 = v34 + 8;
            *(uint64_t *)((char *)&v48 + v34) = *(_QWORD *)(v36 + 128);
            if ((v6 & 4) != 0)
              v6 = (unint64_t)(v35 + 1) | 4;
            else
              v6 = (uint64_t)(v35 + 17);
            *a1 = v6;
            v7 = *a2;
            v34 += 8;
          }
          while (v6 != *a2);
          if ((v37 & 0x7FFFFFFFFFFFFFB8) != 0)
          {
            v46 = v30;
            v47 = v26;
            sub_1C4E37E60(&v48, (_BYTE *)&v48 + v37, &v56);
            v30 = v46;
            v26 = v47;
            v6 = *a1;
            v7 = *a2;
          }
        }
LABEL_29:
        v38 = v18 + v27 + v28 + v49;
        v18 = v53 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v26 + v18 + v54, 42);
        v39 = v48 - 0x4B6D499041670D8DLL * v26;
        v24 = (0xB492B66FBE98F273 * __ROR8__(v38, 37)) ^ v30;
        v26 = __ROR8__(v39 + v49 + v50, 44) + v39 + __ROR8__(v24 + v31 + v39 + v51, 21);
        v27 = 0xB492B66FBE98F273 * __ROR8__(v31 + v33, 33);
        v28 = v39 + v49 + v50 + v51;
        v40 = v27 + v30 + v52;
        v30 = __ROR8__(v53 + v54 + v40, 44) + v40 + __ROR8__(v18 + v50 + v40 + v55, 21);
        v31 = v53 + v54 + v40 + v55;
        v32 += v37;
        v33 = v24;
      }
      while (v6 != v7);
    }
    v41 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)));
    v42 = 0x9DDFEA08EB382D69
        * (v30 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v30)));
    v43 = v27 - 0x4B6D499041670D8DLL * (v32 ^ (v32 >> 47)) - 0x622015F714C7D297 * (v42 ^ (v42 >> 47));
    v44 = 0x9DDFEA08EB382D69
        * ((v24 - 0x4B6D499041670D8DLL * (v18 ^ (v18 >> 47)) - 0x622015F714C7D297 * (v41 ^ (v41 >> 47))) ^ v43);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v43 ^ (v44 >> 47) ^ v44)) ^ ((0x9DDFEA08EB382D69 * (v43 ^ (v44 >> 47) ^ v44)) >> 47));
  }
}

uint64_t sub_1C5F26884()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow loop rotation multiple times in order to reach a better latch exit";
  v1.n128_u64[1] = 72;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827480, "loop-rotate-multi", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827480, &dword_1C475E000);
}

uint64_t llvm::InsertPreheaderForLoop(llvm *this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::LoopInfo *a4, llvm::MemorySSAUpdater *a5)
{
  char v5;
  llvm::MemorySSAUpdater *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  void *v34;
  int v35[2];
  _QWORD v36[9];

  v5 = (char)a5;
  v6 = a4;
  v36[8] = *MEMORY[0x1E0C80C00];
  v10 = **((_QWORD **)this + 4);
  v34 = v36;
  *(_QWORD *)v35 = 0x800000000;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 24);
      v13 = *(unsigned __int8 *)(v12 + 16);
      v14 = v12 && v13 >= 0x1C;
      if (v14 && v13 - 29 < 0xB)
        break;
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
        goto LABEL_11;
    }
    v18 = (char *)this + 56;
LABEL_12:
    v19 = *(_QWORD *)(v12 + 40);
    v20 = sub_1C477672C((uint64_t)v18, v19);
    v21 = *((_QWORD *)this + 8);
    if (v21 == *((_QWORD *)this + 7))
      v22 = 76;
    else
      v22 = 72;
    if (v20 == (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)this + v22)))
    {
      v23 = *(_QWORD *)(v19 + 40);
      if (v23)
        v24 = v23 - 24;
      else
        v24 = 0;
      if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
        v24 = 0;
      v25 = *(unsigned __int8 *)(v24 + 16);
      if (v25 == 32 || v25 == 39)
      {
        v31 = 0;
        goto LABEL_39;
      }
      v26 = v35[0];
      if (v35[0] >= (unint64_t)v35[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35[0] + 1, 8);
        v26 = v35[0];
      }
      *((_QWORD *)v34 + v26) = v19;
      ++v35[0];
    }
    v6 = a4;
    while (1)
    {
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 24);
      v27 = *(unsigned __int8 *)(v12 + 16);
      if (v12)
        v28 = v27 >= 0x1C;
      else
        v28 = 0;
      if (v28 && v27 - 29 < 0xB)
      {
        v18 = (char *)this + 56;
        goto LABEL_12;
      }
    }
    v17 = (uint64_t *)v34;
    v16 = v35[0];
  }
  else
  {
LABEL_11:
    v16 = 0;
    v17 = v36;
  }
  v30 = sub_1C5EBE3AC((uint64_t **)v10, v17, v16, ".preheader", 0, (uint64_t)a2, (uint64_t)a3, v6, v5);
  v31 = v30;
  if (v30)
    sub_1C5F26B18(v30, (uint64_t)&v34, (uint64_t)this);
LABEL_39:
  if (v34 != v36)
    free(v34);
  return v31;
}

void sub_1C5F26B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(uint64_t **)a2;
  if ((_DWORD)v4)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    v10 = *(unsigned int *)(a2 + 8);
    while (v9 != *v5)
    {
      ++v5;
      if (!--v10)
      {
        v11 = 0;
        v12 = 8 * v4;
        while (1)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + v11) + 32);
          if (v13 != *(_QWORD *)(a1 + 56) + 72)
          {
            v14 = v13 ? v13 - 24 : 0;
            v15 = sub_1C477672C(a3 + 56, v14);
            v16 = *(_QWORD *)(a3 + 64);
            v17 = v16 == *(_QWORD *)(a3 + 56) ? 76 : 72;
            if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)(a3 + v17)))
              break;
          }
          v11 += 8;
          if (v12 == v11)
          {
            v5 = *(uint64_t **)a2;
            goto LABEL_21;
          }
        }
        v5 = *(uint64_t **)a2;
        v18 = *(_QWORD *)(*(_QWORD *)a2 + v11);
        if (v18)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v18 = *v5;
LABEL_22:
    sub_1C4FCEAA0(*(_QWORD *)(v18 + 56) + 72, *(uint64_t **)(v18 + 32), *(_QWORD *)(a1 + 56) + 72, (uint64_t *)(a1 + 24));
  }
}

uint64_t llvm::simplifyLoop(llvm *this, llvm::Loop *a2, unint64_t **a3, int32x2_t *a4, llvm::ScalarEvolution *a5, int32x2_t **a6, llvm::MemorySSAUpdater *a7)
{
  unsigned int v11;
  llvm::MemorySSAUpdater *v12;
  int v13;
  char *v14;
  int v15;
  llvm::Loop *v16;
  uint64_t *v17;
  uint64_t *i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  __int8 *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  char *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  llvm *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  llvm::Value ***v52;
  llvm::ConstantInt *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value **v58;
  uint64_t v59;
  llvm::Value ****v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::BasicBlock *v63;
  char *v64;
  uint64_t v65;
  llvm::Loop *v66;
  llvm::DominatorTree *v67;
  int v68;
  llvm::DSOLocalEquivalent **v69;
  int v70;
  uint64_t v71;
  __int32 v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t j;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _BYTE *v97;
  llvm::UndefValue *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t ***v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  llvm::SmallPtrSetImplBase *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t *v137;
  llvm::Loop *v138;
  unint64_t v139;
  llvm::Loop **v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  llvm::Loop **v148;
  llvm::Loop *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  BOOL v169;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t *v174;
  uint64_t v175;
  char *v176;
  _QWORD **v177;
  _QWORD *v178;
  int64_t v179;
  unint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  int v197;
  unint64_t *v198;
  unsigned int v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  llvm::Loop *v206;
  unint64_t v207;
  unint64_t *v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  unint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  int v216;
  llvm::BasicBlock *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  BOOL v222;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  llvm::BasicBlock **v230;
  llvm::BasicBlock *v231;
  int v232;
  int v233;
  char *v234;
  char *v235;
  llvm::BasicBlock *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unsigned int v246;
  BOOL v247;
  llvm::BasicBlock *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t *v255;
  uint64_t v256;
  _DWORD *v257;
  uint64_t k;
  uint64_t v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  _QWORD *v262;
  unsigned __int8 *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t **v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  int v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  _QWORD *v280;
  llvm::Value *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  llvm::Value *v292;
  BOOL v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  llvm::Value *v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  llvm::ValueSymbolTable *v307;
  int v308;
  uint64_t v309;
  int MDKindID;
  uint64_t v311;
  unsigned __int8 *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t ***v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  int v320;
  unsigned int v321;
  uint64_t ****v322;
  uint64_t ***v323;
  uint64_t ****v324;
  int v325;
  BOOL v326;
  unsigned int v327;
  uint64_t v328;
  unsigned __int8 **v329;
  uint64_t v330;
  unsigned __int8 *v331;
  _BYTE *v332;
  uint64_t ****v333;
  uint64_t ***v334;
  unsigned __int8 *v335;
  _QWORD *v336;
  _BYTE *v337;
  _BYTE *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  unint64_t v345;
  uint64_t *v346;
  int v347;
  uint64_t v348;
  _BYTE *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  _BYTE *v353;
  llvm::UndefValue *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  llvm::BasicBlock *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  llvm::Loop *v375;
  const llvm::Loop *v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  llvm::BasicBlock *v380;
  _QWORD *v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  BOOL v385;
  uint64_t v386;
  unsigned int v387;
  BOOL v388;
  BOOL v389;
  uint64_t *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  llvm::BasicBlock **v400;
  int v401;
  llvm::Loop **v402;
  uint64_t v403;
  llvm::BasicBlock *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  llvm::BasicBlock *v409;
  int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unint64_t v421;
  unsigned __int8 **v422;
  unsigned __int8 *v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  char v427;
  uint64_t m;
  uint64_t v430;
  unsigned int v431;
  BOOL v432;
  unsigned int v434;
  BOOL v435;
  uint64_t result;
  int64x2_t v438;
  int32x2_t *v439;
  int v440;
  unint64_t v441;
  _QWORD *v442;
  unsigned int v443;
  uint64_t *v444;
  unint64_t v445;
  _QWORD *v446;
  char *v447;
  llvm::BasicBlock *v448;
  unint64_t v449;
  uint64_t v450;
  llvm::AssumptionCache *v451;
  llvm::ScalarEvolution *v452;
  llvm::ScalarEvolution *v454;
  int v455;
  uint64_t ***v456;
  llvm::BasicBlock *v457;
  int v458;
  uint64_t v460;
  llvm::BasicBlock *LoopPredecessor;
  llvm::Loop *v462;
  llvm::BasicBlock *v463;
  llvm::BasicBlock *v464;
  uint64_t v465;
  int v466;
  _BYTE v467[32];
  unint64_t v468;
  void *v469;
  uint64_t v470;
  _QWORD v471[4];
  _BYTE __p[24];
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  void *v476;
  uint64_t v477;
  _QWORD v478[9];
  void *v479;
  uint64_t v480;
  _BYTE v481[64];
  __int128 v482;
  llvm::Loop *v483;
  llvm::ScalarEvolution *v484;
  uint64_t v485;
  llvm::Loop **v486;
  uint64_t v487;

  v11 = 0;
  v487 = *MEMORY[0x1E0C80C00];
  v471[0] = this;
  v469 = v471;
  v470 = 0x400000001;
  do
  {
    sub_1C499C3FC((unsigned int *)&v469, *(char **)(*((_QWORD *)v469 + v11) + 8), *(char **)(*((_QWORD *)v469 + v11) + 16));
    ++v11;
  }
  while (v11 != (_DWORD)v470);
  v13 = 0;
  if (v11)
  {
    v14 = &v473.i8[8];
    v439 = a4 + 86;
    v438 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v443 = a7;
    v451 = (llvm::AssumptionCache *)a6;
    v452 = a5;
    v454 = (llvm::ScalarEvolution *)a4;
    do
    {
      v440 = v13;
      v15 = 0;
      v16 = (llvm::Loop *)*((_QWORD *)v469 + v11 - 1);
      LODWORD(v470) = v11 - 1;
      v462 = v16;
      v460 = (uint64_t)v16 + 56;
      do
      {
        v17 = (uint64_t *)*((_QWORD *)v462 + 4);
        for (i = (uint64_t *)*((_QWORD *)v462 + 5); v17 != i; ++v17)
        {
          v19 = *v17;
          if (*v17 != **((_QWORD **)v462 + 4))
          {
            *(_QWORD *)__p = &v473.i64[1];
            *(_QWORD *)&__p[8] = &v473.i64[1];
            *(_QWORD *)&__p[16] = 4;
            v473.i32[0] = 0;
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
            {
              while (1)
              {
                v21 = *(_QWORD *)(v20 + 24);
                v22 = *(unsigned __int8 *)(v21 + 16);
                v23 = v21 && v22 >= 0x1C;
                v24 = !v23 || v22 - 29 > 0xA;
                if (!v24)
                  break;
                v20 = *(_QWORD *)(v20 + 8);
                if (!v20)
                  goto LABEL_18;
              }
LABEL_19:
              v28 = *(_QWORD *)(v21 + 40);
              v29 = sub_1C477672C(v460, v28);
              v30 = *((_QWORD *)v462 + 8);
              v31 = 72;
              if (v30 == *((_QWORD *)v462 + 7))
                v31 = 76;
              if (v29 == (_QWORD *)(v30 + 8 * *(unsigned int *)((char *)v462 + v31)))
                sub_1C4774094((llvm::SmallPtrSetImplBase *)__p, v28);
              while (1)
              {
                v20 = *(_QWORD *)(v20 + 8);
                if (!v20)
                  break;
                v21 = *(_QWORD *)(v20 + 24);
                v32 = *(unsigned __int8 *)(v21 + 16);
                if (v21)
                  v33 = v32 >= 0x1C;
                else
                  v33 = 0;
                if (v33 && v32 - 29 < 0xB)
                  goto LABEL_19;
              }
              v27 = *(__int8 **)__p;
              v14 = *(char **)&__p[8];
              LODWORD(v25) = *(_DWORD *)&__p[20];
              v26 = *(_DWORD *)&__p[16];
            }
            else
            {
LABEL_18:
              LODWORD(v25) = 0;
              v26 = 4;
              v27 = &v473.i8[8];
            }
            if (v14 == v27)
              v25 = v25;
            else
              v25 = v26;
            v35 = v14;
            if ((_DWORD)v25)
            {
              v36 = 0;
              while (*(_QWORD *)&v14[v36] >= 0xFFFFFFFFFFFFFFFELL)
              {
                v36 += 8;
                if (8 * v25 == v36)
                  goto LABEL_56;
              }
              v35 = &v14[v36];
            }
            v37 = &v14[8 * v25];
            if (v35 != v37)
            {
              v38 = *(_QWORD *)v35;
LABEL_44:
              v39 = *(_QWORD *)(v38 + 40);
              if (v39 == v38 + 40)
              {
                v41 = 0;
              }
              else
              {
                v40 = (unsigned __int8 *)(v39 - 24);
                if (!v39)
                  v40 = 0;
                if (v40[16] - 29 >= 0xB)
                  v41 = 0;
                else
                  v41 = (llvm *)v40;
              }
              llvm::changeToUnreachable(v41, a7, 0, a6, v12);
              v42 = (unint64_t *)(v35 + 8);
              while (v42 != (unint64_t *)v37)
              {
                v43 = *v42++;
                v38 = v43;
                if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v35 = (char *)(v42 - 1);
                  goto LABEL_44;
                }
              }
              v15 = 1;
              v27 = *(__int8 **)__p;
              v14 = *(char **)&__p[8];
            }
LABEL_56:
            if (v14 != v27)
              free(v14);
            v14 = &v473.i8[8];
          }
        }
        v479 = v481;
        v480 = 0x800000000;
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v462, (uint64_t)&v479);
        if ((_DWORD)v480)
        {
          v44 = (char *)v479;
          v45 = 8 * v480;
          do
          {
            v46 = *(_QWORD *)(*(_QWORD *)v44 + 40);
            if (v46 != *(_QWORD *)v44 + 40)
            {
              v47 = v46 ? v46 - 24 : 0;
              v48 = *(unsigned __int8 *)(v47 + 16) - 40;
              v49 = v48 >= 0xFFFFFFF5 ? v47 : 0;
              if (v46)
              {
                v50 = *(_BYTE *)(v49 + 16) == 30 && v48 >= 0xFFFFFFF5;
                if (v50 && (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) == 3)
                {
                  v52 = (llvm::Value ***)(v49 - 96);
                  v51 = *(_QWORD *)(v49 - 96);
                  if (v51 && *(unsigned __int8 *)(v51 + 16) - 13 >= 0xFFFFFFFE)
                  {
                    v54 = *(llvm::ConstantInt **)v51;
                    v55 = sub_1C477672C(v460, *(_QWORD *)(v49 - 32));
                    v56 = *((_QWORD *)v462 + 8);
                    v57 = 72;
                    if (v56 == *((_QWORD *)v462 + 7))
                      v57 = 76;
                    v58 = llvm::ConstantInt::get(v54, v55 == (_QWORD *)(v56 + 8 * *(unsigned int *)((char *)v462 + v57)), 0);
                    if (*(_QWORD *)(v49 - 96))
                    {
                      **(_QWORD **)(v49 - 80) = *(_QWORD *)(v49 - 88);
                      v59 = *(_QWORD *)(v49 - 88);
                      if (v59)
                        *(_QWORD *)(v59 + 16) = *(_QWORD *)(v49 - 80);
                    }
                    *v52 = v58;
                    if (v58)
                    {
                      v62 = v58[1];
                      v60 = (llvm::Value ****)(v58 + 1);
                      v61 = v62;
                      *(_QWORD *)(v49 - 88) = v62;
                      if (v62)
                        *((_QWORD *)v61 + 2) = v49 - 88;
                      *(_QWORD *)(v49 - 80) = v60;
                      *v60 = v52;
                    }
                    v15 = 1;
                  }
                }
              }
            }
            v44 += 8;
            v45 -= 8;
          }
          while (v45);
        }
        LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v462);
        if (!LoopPredecessor)
          goto LABEL_99;
        v63 = (llvm::BasicBlock *)*((_QWORD *)LoopPredecessor + 5);
        if (v63 == (llvm::BasicBlock *)((char *)LoopPredecessor + 40))
          goto LABEL_99;
        if (v63)
          v64 = (char *)v63 - 24;
        else
          v64 = 0;
        if (v64[16] != 30)
        {
          switch(v64[16])
          {
            case 30:
LABEL_760:
              __break(1u);
              return result;
            case 31:
              v68 = (*((_DWORD *)v64 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_102;
            case 32:
              v68 = (*((_DWORD *)v64 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_102;
            case 39:
              v68 = *((_DWORD *)v64 + 20) + 1;
LABEL_102:
              if (v68 == 1)
                goto LABEL_103;
              goto LABEL_99;
            default:
              goto LABEL_99;
          }
        }
        if ((*((_DWORD *)v64 + 5) & 0x7FFFFFF) == 3)
        {
LABEL_99:
          v65 = (uint64_t)v462;
          v66 = a2;
          v67 = (llvm::DominatorTree *)a3;
          LoopPredecessor = (llvm::BasicBlock *)llvm::InsertPreheaderForLoop(v462, a2, (llvm::DominatorTree *)a3, (llvm::LoopInfo *)a6, a7);
          v15 |= LoopPredecessor != 0;
        }
        else
        {
LABEL_103:
          v67 = (llvm::DominatorTree *)a3;
          v66 = a2;
          v65 = (uint64_t)v462;
        }
        v458 = llvm::formDedicatedExitBlocks(v65, v66, v67, (llvm::LoopInfo *)a6, a7) | v15;
        if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v65))
          goto LABEL_528;
        if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v65) > 7)
          goto LABEL_330;
        v70 = v458;
        if (!LoopPredecessor)
        {
          v111 = 0;
LABEL_527:
          v458 = (v111 != 0) | v70;
          v65 = (uint64_t)v462;
LABEL_528:
          v339 = **(_QWORD **)(v65 + 32);
          v340 = *(_QWORD *)(v339 + 48);
          v341 = v340 - 24;
          if (v340)
            v342 = v340 - 24;
          else
            v342 = 0;
          if (v340 && *(_BYTE *)(v342 + 16) == 83)
          {
            v343 = *(_QWORD *)(*(_QWORD *)(v339 + 56) + 40) + 272;
            do
            {
              v340 = *(_QWORD *)(v340 + 8);
              v482 = (unint64_t)v343;
              v483 = a2;
              v484 = a5;
              v485 = 0;
              LOWORD(v486) = 257;
              v344 = *(_DWORD *)(v341 + 20);
              if ((v344 & 0x40000000) != 0)
              {
                v346 = *(uint64_t **)(v341 - 8);
                v345 = v344 & 0x7FFFFFF;
              }
              else
              {
                v345 = v344 & 0x7FFFFFF;
                v346 = (uint64_t *)(v341 - 32 * v345);
              }
              *(_QWORD *)__p = &__p[16];
              *(_QWORD *)&__p[8] = 0x800000000;
              if (v345 >= 9)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[16], v345, 8);
                v347 = *(_DWORD *)&__p[8];
                v349 = *(_BYTE **)__p;
                v348 = *(unsigned int *)&__p[8];
              }
              else
              {
                v347 = 0;
                if (!v345)
                {
                  v353 = &__p[16];
                  goto LABEL_543;
                }
                v348 = 0;
                v349 = &__p[16];
              }
              v350 = 32 * v345;
              v351 = &v349[8 * v348];
              do
              {
                v352 = *v346;
                v346 += 4;
                *v351++ = v352;
                v350 -= 32;
              }
              while (v350);
              v353 = *(_BYTE **)__p;
LABEL_543:
              *(_DWORD *)&__p[8] = v347 + v345;
              v354 = llvm::SimplifyInstructionWithOperands((llvm *)v341, (uint64_t)v353, (v347 + v345), (uint64_t)&v482, v12, v69);
              if (*(_BYTE **)__p == &__p[16])
              {
                if (v354)
                  goto LABEL_545;
              }
              else
              {
                free(*(void **)__p);
                if (v354)
                {
LABEL_545:
                  if (a4)
                    llvm::ScalarEvolution::forgetValue(a4, (llvm::Value *)v341);
                  if (!(_DWORD)a7 || sub_1C4F20780((uint64_t *)a3, v341, (uint64_t)v354))
                  {
                    v458 = 1;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v341, v354, (llvm::Value *)1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v341 + 40) + 40, (uint64_t ***)v341);
                    v355 = *(_QWORD *)(v341 + 24);
                    v356 = *(_QWORD **)(v341 + 32);
                    *v356 = v355;
                    *(_QWORD *)(v355 + 8) = v356;
                    *(_QWORD *)(v341 + 24) = 0;
                    *(_QWORD *)(v341 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v341);
                  }
                }
              }
              v357 = v340 - 24;
              if (!v340)
                v357 = 0;
              v358 = *(unsigned __int8 *)(v357 + 16);
              if (v358 == 83)
                v341 = v357;
              else
                v341 = 0;
            }
            while (v340 && v358 == 83);
          }
          if (!(_DWORD)v480)
            goto LABEL_594;
          v359 = 0;
          v360 = (llvm::BasicBlock *)v479;
          v457 = (llvm::BasicBlock *)((char *)v479 + 8 * v480);
          do
          {
            v361 = *(_QWORD *)(*(_QWORD *)v360 + 40);
            if (v361 != *(_QWORD *)v360 + 40)
            {
              if (v361)
                v362 = v361 - 24;
              else
                v362 = 0;
              v363 = *(unsigned __int8 *)(v362 + 16);
              v364 = v363 - 29;
              if (v363 != 30)
              {
                v365 = 2;
                switch(v364)
                {
                  case 1:
                    goto LABEL_760;
                  case 2:
                    v365 = (*(_DWORD *)(v362 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_588;
                  case 3:
                  case 9:
                    v365 = (*(_DWORD *)(v362 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_588;
                  case 4:
                    goto LABEL_572;
                  case 7:
                    v365 = *(_WORD *)(v362 + 18) & 1;
                    goto LABEL_588;
                  case 8:
                    v365 = 1;
                    goto LABEL_572;
                  case 10:
                    v365 = *(_DWORD *)(v362 + 80) + 1;
LABEL_588:
                    if (!v365)
                      goto LABEL_585;
                    goto LABEL_572;
                  default:
                    goto LABEL_585;
                }
              }
              if ((*(_DWORD *)(v362 + 20) & 0x7FFFFFF) == 3)
                v365 = 2;
              else
                v365 = 1;
LABEL_572:
              v366 = 0;
              v367 = 0;
              v368 = v362 - 64;
              v369 = v365;
              do
              {
                v370 = *(unsigned __int8 *)(v362 + 16);
                if (v370 != 30)
                  __asm { BR              X9 }
                v371 = *(_QWORD *)(v362 - 32 - 32 * v367);
                v372 = sub_1C477672C(v460, v371);
                v373 = *((_QWORD *)v462 + 8);
                v374 = 72;
                if (v373 == *((_QWORD *)v462 + 7))
                  v374 = 76;
                if (v372 == (_QWORD *)(v373 + 8 * *(unsigned int *)((char *)v462 + v374)))
                {
                  if (v359)
                  {
                    if (v359 != v371)
                    {
                      a6 = (int32x2_t **)v451;
                      a5 = v452;
                      a4 = (int32x2_t *)v454;
                      goto LABEL_594;
                    }
                  }
                  else
                  {
                    v359 = v371;
                  }
                }
                ++v367;
                v366 += 2;
                v368 += 32;
              }
              while (v369 != v367);
            }
LABEL_585:
            v360 = (llvm::BasicBlock *)((char *)v360 + 8);
            a4 = (int32x2_t *)v454;
            a6 = (int32x2_t **)v451;
            a5 = v452;
          }
          while (v360 != v457);
          v377 = v480;
          if (!(_DWORD)v480)
            goto LABEL_594;
          v378 = 0;
          v379 = (_QWORD *)((char *)LoopPredecessor + 40);
          while (2)
          {
            v463 = 0;
            v380 = (llvm::BasicBlock *)*((_QWORD *)v479 + v378);
            v463 = v380;
            if (!llvm::BasicBlock::getSinglePredecessor(v380))
              goto LABEL_630;
            v381 = (_QWORD *)*((_QWORD *)v380 + 5);
            if (v381 == (_QWORD *)((char *)v380 + 40))
              goto LABEL_630;
            v382 = v381 ? (uint64_t)(v381 - 3) : 0;
            v383 = *(unsigned __int8 *)(v382 + 16) - 40;
            v384 = v383 >= 0xFFFFFFF5 ? v382 : 0;
            if (!v381)
              goto LABEL_630;
            v385 = *(_BYTE *)(v384 + 16) == 30 && v383 >= 0xFFFFFFF5;
            if (!v385 || (*(_DWORD *)(v384 + 20) & 0x7FFFFFF) != 3)
              goto LABEL_630;
            v386 = *(_QWORD *)(v384 - 96);
            v387 = *(unsigned __int8 *)(v386 + 16);
            v388 = v386 && v387 >= 0x1C;
            v389 = v388 && v387 - 83 >= 0xFFFFFFFE;
            if (!v389 || *(llvm::BasicBlock **)(v386 + 40) != v380)
              goto LABEL_630;
            LOBYTE(v468) = 0;
            llvm::BasicBlock::instructionsWithoutDebug(v380, 1, (uint64_t)__p);
            v482 = *(_OWORD *)__p;
            if (v474.i64[0])
            {
              if ((_BYTE *)v474.i64[0] == &__p[16])
              {
                v486 = &v483;
                (*(void (**)(_BYTE *))(*(_QWORD *)&__p[16] + 24))(&__p[16]);
              }
              else
              {
                v486 = (llvm::Loop **)(*(uint64_t (**)(void))(*(_QWORD *)v474.i64[0] + 16))();
              }
            }
            else
            {
              v486 = 0;
            }
            v390 = (uint64_t *)v478[0];
            if ((unint64_t *)v478[0] == &v475.u64[1])
            {
              v390 = &v475.i64[1];
              v391 = 4;
              goto LABEL_639;
            }
            if (v478[0])
            {
              v391 = 5;
LABEL_639:
              (*(void (**)(void))(*v390 + 8 * v391))();
            }
            v392 = (_QWORD *)v474.i64[0];
            if ((_BYTE *)v474.i64[0] == &__p[16])
            {
              v392 = &__p[16];
              v393 = 4;
LABEL_642:
              (*(void (**)(void))(*v392 + 8 * v393))();
              goto LABEL_643;
            }
            if (v474.i64[0])
            {
              v393 = 5;
              goto LABEL_642;
            }
LABEL_643:
            if ((_QWORD)v482)
              v394 = v482 - 24;
            else
              v394 = 0;
            if (v394 == v384)
            {
              v401 = 1;
LABEL_668:
              v402 = v486;
              if (v486 == &v483)
              {
                v402 = &v483;
                v403 = 4;
LABEL_672:
                (*((void (**)(void))*v402 + v403))();
              }
              else if (v486)
              {
                v403 = 5;
                goto LABEL_672;
              }
              v458 |= (_BYTE)v468 != 0;
              if (a4 && (_BYTE)v468)
              {
                sub_1C4F3333C(v439);
                v458 = 1;
              }
              if (v401
                && llvm::FoldBranchToCommonDest((llvm *)v384, 0, v451, 0, (const llvm::TargetTransformInfo *)1))
              {
                llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock((int32x2_t *)a3, (uint64_t)v463);
                v404 = v463;
                v405 = *((_QWORD *)a2 + 3);
                v406 = *((unsigned int *)a2 + 10);
                if (!(_DWORD)v406)
                  goto LABEL_684;
                LODWORD(v407) = ((v463 >> 4) ^ (v463 >> 9)) & (v406 - 1);
                v408 = v405 + 16 * v407;
                v409 = *(llvm::BasicBlock **)v408;
                if (v463 != *(llvm::BasicBlock **)v408)
                {
                  v410 = 1;
                  while (v409 != (llvm::BasicBlock *)-4096)
                  {
                    v411 = v407 + v410++;
                    v407 = v411 & (v406 - 1);
                    v409 = *(llvm::BasicBlock **)(v405 + 16 * v407);
                    if (v463 == v409)
                    {
                      v408 = v405 + 16 * v407;
                      goto LABEL_685;
                    }
                  }
LABEL_684:
                  v408 = v405 + 16 * v406;
                }
LABEL_685:
                if (v408 == v405 + 16 * v406)
                  v412 = 0;
                else
                  v412 = *(_QWORD *)(v408 + 8);
                v413 = *(unsigned int *)(v412 + 32);
                if ((_DWORD)v413)
                {
                  do
                  {
                    while (1)
                    {
                      v414 = *(_QWORD *)(*(_QWORD *)(v412 + 24) + 8 * v413 - 8);
                      v415 = *(_QWORD *)(v412 + 8);
                      *((_BYTE *)a2 + 64) = 0;
                      v416 = *(_QWORD *)(v414 + 8);
                      if (v416 != v415)
                        break;
                      if (!v413)
                        goto LABEL_702;
                    }
                    v417 = *(_QWORD **)(v416 + 24);
                    v418 = *(unsigned int *)(v416 + 32);
                    v419 = &v417[v418];
                    if ((_DWORD)v418)
                    {
                      v420 = 8 * v418;
                      while (*v417 != v414)
                      {
                        ++v417;
                        v420 -= 8;
                        if (!v420)
                        {
                          v417 = v419;
                          break;
                        }
                      }
                    }
                    if (v419 != v417 + 1)
                    {
                      memmove(v417, v417 + 1, (char *)v419 - (char *)(v417 + 1));
                      LODWORD(v418) = *(_DWORD *)(v416 + 32);
                    }
                    *(_DWORD *)(v416 + 32) = v418 - 1;
                    *(_QWORD *)(v414 + 8) = v415;
                    v421 = *(unsigned int *)(v415 + 32);
                    if (v421 >= *(unsigned int *)(v415 + 36))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v415 + 24, v415 + 40, v421 + 1, 8);
                      v421 = *(unsigned int *)(v415 + 32);
                    }
                    *(_QWORD *)(*(_QWORD *)(v415 + 24) + 8 * v421) = v414;
                    ++*(_DWORD *)(v415 + 32);
                    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v414);
                    v413 = *(unsigned int *)(v412 + 32);
                  }
                  while (*(_DWORD *)(v412 + 32));
LABEL_702:
                  v404 = v463;
                  a5 = v452;
                  a4 = (int32x2_t *)v454;
                }
                llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode((int32x2_t *)a2, (uint64_t)v404);
                if (v451)
                {
                  *(_QWORD *)__p = 1;
                  *(int64x2_t *)&__p[8] = v438;
                  v473 = v438;
                  v474 = v438;
                  v475 = v438;
                  v476 = v478;
                  v477 = 0x800000000;
                  sub_1C50878C8((uint64_t)__p, (uint64_t *)&v463);
                  llvm::MemorySSAUpdater::removeBlocks((uint64_t)v451, (uint64_t)__p);
                  if (v476 != v478)
                    free(v476);
                  if ((__p[0] & 1) == 0)
                    MEMORY[0x1CAA32FB4](*(_QWORD *)&__p[8], 8);
                }
                llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)(v384 - 32), v463, (int)a7);
                llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)(v384 - 64), v463, (int)a7);
                llvm::BasicBlock::eraseFromParent(v463);
                v458 = 1;
              }
LABEL_630:
              if (++v378 == v377)
              {
LABEL_594:
                v215 = 0;
                if (a4)
                {
                  v15 = v458;
                  v216 = v458;
                  if ((v458 & 1) != 0)
                  {
                    v375 = v462;
                    do
                    {
                      v376 = v375;
                      v375 = *(llvm::Loop **)v375;
                    }
                    while (v375);
                    llvm::ScalarEvolution::forgetLoop(a4, v376);
                    v215 = 0;
                    v15 = 1;
                    v216 = 1;
                  }
                }
                else
                {
                  v15 = v458;
                  v216 = v458;
                }
                goto LABEL_600;
              }
              continue;
            }
            break;
          }
          sub_1C5631E6C(&v482, (uint64_t)__p);
          v395 = (_QWORD *)v474.i64[0];
          if (*(_QWORD *)__p)
            v396 = *(_QWORD *)__p - 24;
          else
            v396 = 0;
          if ((_BYTE *)v474.i64[0] == &__p[16])
          {
            v395 = &__p[16];
            v397 = 4;
LABEL_654:
            (*(void (**)(void))(*v395 + 8 * v397))();
          }
          else if (v474.i64[0])
          {
            v397 = 5;
            goto LABEL_654;
          }
          if (v396 != v386)
          {
            if (!LoopPredecessor || (v398 = (_QWORD *)*v379, (_QWORD *)*v379 == v379))
            {
              v400 = 0;
            }
            else
            {
              v399 = v398 ? (uint64_t)(v398 - 3) : 0;
              v400 = *(unsigned __int8 *)(v399 + 16) - 29 >= 0xB ? 0 : (llvm::BasicBlock **)v399;
            }
            if (!llvm::Loop::makeLoopInvariant((uint64_t)v462, v396, &v468, v400, (uint64_t *)v451))
            {
              v401 = 0;
              goto LABEL_668;
            }
          }
          goto LABEL_643;
        }
        v71 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v462 + 4) + 56) + 40) + 216;
        LOWORD(v485) = 260;
        *(_QWORD *)&v482 = v71;
        llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v482);
        v72 = v473.i32[0];
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v73 = v72 & 0xFFFFFFFE;
        v74 = (uint64_t *)*((_QWORD *)v462 + 4);
        if (v73 != 48)
        {
          v75 = (uint64_t *)*((_QWORD *)v462 + 5);
          if (v75 != v74)
          {
            do
            {
              v76 = *v74 + 40;
              for (j = *(_QWORD *)(*v74 + 48); j != v76; j = *(_QWORD *)(j + 8))
              {
                if (j)
                  v78 = j - 24;
                else
                  v78 = 0;
                v79 = *(unsigned __int8 *)(v78 + 16) - 33;
                v24 = v79 > 0x33;
                v80 = (1 << v79) & 0x8000000000041;
                if (!v24 && v80 != 0)
                {
                  v82 = *(_QWORD *)(j + 40);
                  if (v82)
                  {
                    if ((*(_BYTE *)(v82 + 12) & 0x40) != 0)
                      goto LABEL_330;
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(j - 24, 6) & 1) != 0)
                    goto LABEL_330;
                }
              }
              ++v74;
            }
            while (v74 != v75);
            v74 = (uint64_t *)*((_QWORD *)v462 + 4);
          }
        }
        v83 = *v74;
        v84 = *(_QWORD *)(*v74 + 48);
        v85 = v84 - 24;
        if (v84)
          v86 = v84 - 24;
        else
          v86 = 0;
        if (*(_BYTE *)(v86 + 16) != 83)
        {
LABEL_330:
          if (!LoopPredecessor)
          {
            v111 = 0;
            v70 = v458;
            goto LABEL_527;
          }
          v217 = (llvm::BasicBlock *)**((_QWORD **)v462 + 4);
          v218 = *((_QWORD *)v217 + 7);
          v448 = v217;
          v219 = *((_QWORD *)v217 + 1);
          if (v219)
          {
            while (1)
            {
              v220 = *(_QWORD *)(v219 + 24);
              v221 = *(unsigned __int8 *)(v220 + 16);
              v222 = v220 && v221 >= 0x1C;
              if (v222 && v221 - 29 <= 0xA)
                break;
              v219 = *(_QWORD *)(v219 + 8);
              if (!v219)
                goto LABEL_341;
            }
            v234 = 0;
            v235 = 0;
            v447 = 0;
            while (1)
            {
              v236 = *(llvm::BasicBlock **)(v220 + 40);
              v237 = *((_QWORD *)v236 + 5);
              if (v237)
                v238 = v237 - 24;
              else
                v238 = 0;
              if (*(unsigned __int8 *)(v238 + 16) - 29 >= 0xB)
                v238 = 0;
              v239 = *(unsigned __int8 *)(v238 + 16);
              if (v239 == 32 || v239 == 39)
                break;
              if (v236 == LoopPredecessor)
                goto LABEL_360;
              if (v235 < v234)
              {
                *(_QWORD *)v235 = v236;
                v235 += 8;
LABEL_360:
                v225 = v235;
                v224 = v447;
                goto LABEL_376;
              }
              v240 = (v235 - v447) >> 3;
              v241 = v240 + 1;
              if ((unint64_t)(v240 + 1) >> 61)
                goto LABEL_758;
              if ((v234 - v447) >> 2 > v241)
                v241 = (v234 - v447) >> 2;
              if ((unint64_t)(v234 - v447) >= 0x7FFFFFFFFFFFFFF8)
                v242 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v242 = v241;
              if (v242)
              {
                if (v242 >> 61)
                  goto LABEL_759;
                v243 = (char *)operator new(8 * v242);
              }
              else
              {
                v243 = 0;
              }
              v244 = &v243[8 * v240];
              *(_QWORD *)v244 = v236;
              v225 = v244 + 8;
              if (v235 != v447)
              {
                do
                {
                  v245 = *((_QWORD *)v235 - 1);
                  v235 -= 8;
                  *((_QWORD *)v244 - 1) = v245;
                  v244 -= 8;
                }
                while (v235 != v447);
                v235 = v447;
              }
              v224 = v244;
              v234 = &v243[8 * v242];
              if (v235)
                operator delete(v235);
              do
              {
LABEL_376:
                v219 = *(_QWORD *)(v219 + 8);
                if (!v219)
                  goto LABEL_342;
                v220 = *(_QWORD *)(v219 + 24);
                v246 = *(unsigned __int8 *)(v220 + 16);
                if (v220)
                  v247 = v246 >= 0x1C;
                else
                  v247 = 0;
              }
              while (!v247 || v246 - 29 >= 0xB);
              v447 = v224;
              v235 = v225;
            }
            v111 = 0;
            v70 = v458;
            goto LABEL_525;
          }
LABEL_341:
          v224 = 0;
          v225 = 0;
LABEL_342:
          v226 = **(_QWORD **)v448;
          if ((*((_BYTE *)v448 + 23) & 0x10) != 0)
          {
            v227 = *(_QWORD *)(*(_QWORD *)v226 + 152);
            v228 = *(unsigned int *)(*(_QWORD *)v226 + 168);
            if ((_DWORD)v228)
            {
              LODWORD(v229) = (v228 - 1) & ((v448 >> 4) ^ (v448 >> 9));
              v230 = (llvm::BasicBlock **)(v227 + 16 * v229);
              v231 = *v230;
              if (*v230 != v448)
              {
                v232 = 1;
                do
                {
                  if (v231 == (llvm::BasicBlock *)-4096)
                    goto LABEL_385;
                  v233 = v229 + v232++;
                  v229 = v233 & (v228 - 1);
                  v231 = *(llvm::BasicBlock **)(v227 + 16 * v229);
                }
                while (v231 != v448);
                v230 = (llvm::BasicBlock **)(v227 + 16 * v229);
              }
            }
            else
            {
LABEL_385:
              v230 = (llvm::BasicBlock **)(v227 + 16 * v228);
            }
            v249 = v230[1];
            v252 = *(_QWORD *)v249;
            v251 = (char *)v249 + 16;
            v250 = v252;
          }
          else
          {
            v250 = 0;
            v251 = &byte_1C871356D;
          }
          v473.i16[4] = 773;
          *(_QWORD *)__p = v251;
          *(_QWORD *)&__p[8] = v250;
          *(_QWORD *)&__p[16] = ".backedge";
          v253 = operator new();
          *(_QWORD *)v253 = *(_QWORD *)v226 + 1600;
          *(_QWORD *)(v253 + 8) = 0;
          v254 = *(_DWORD *)(v253 + 20) & 0xC0000000;
          *(_QWORD *)(v253 + 24) = 0;
          v255 = (uint64_t *)(v253 + 24);
          *(_DWORD *)(v253 + 16) = 22;
          *(_DWORD *)(v253 + 20) = v254;
          *(_QWORD *)(v253 + 32) = 0;
          *(_QWORD *)(v253 + 40) = v253 + 40;
          v442 = (_QWORD *)(v253 + 40);
          *(_QWORD *)(v253 + 48) = v253 + 40;
          *(_QWORD *)(v253 + 56) = 0;
          if (v218)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v218 + 72, (_QWORD *)v253);
            v256 = *(_QWORD *)(v218 + 72);
            *(_QWORD *)(v253 + 24) = v256;
            *(_QWORD *)(v253 + 32) = v218 + 72;
            *(_QWORD *)(v256 + 8) = v255;
            *(_QWORD *)(v218 + 72) = v255;
          }
          llvm::Value::setName((uint64_t ***)v253, (uint64_t)__p);
          v257 = operator new(0x60uLL);
          v257[13] = v257[13] & 0x38000000 | 1;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          *((_QWORD *)v257 + 2) = 0;
          *((_QWORD *)v257 + 3) = v257 + 8;
          v446 = v257;
          v456 = (uint64_t ***)v253;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v257 + 8), v448, (llvm::BasicBlock *)v253);
          for (k = *((_QWORD *)v448 + 6); ; k = *(_QWORD *)(k + 8))
          {
            v259 = k - 24;
            if (!k)
              v259 = 0;
            if (*(_BYTE *)(v259 + 16) != 83)
              break;
          }
          v260 = *(unsigned __int8 **)(k + 24);
          *(_QWORD *)&v482 = v260;
          if (v260)
            llvm::MetadataTracking::track((uint64_t)&v482, v260, 2);
          v262 = v446 + 10;
          v261 = (unsigned __int8 *)v446[10];
          if (v261)
            llvm::MetadataTracking::untrack((uint64_t)(v446 + 10), v261);
          v447 = v224;
          v263 = (unsigned __int8 *)v482;
          *v262 = v482;
          if (v263)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v482, v263, (uint64_t)v262);
            *(_QWORD *)&v482 = 0;
          }
          sub_1C4FCEAA0(v218 + 72, *(uint64_t **)(*((_QWORD *)v225 - 1) + 32), v218 + 72, v255);
          v264 = *((_QWORD *)v448 + 6);
          v265 = v264 - 24;
          if (v264)
            v266 = v264 - 24;
          else
            v266 = 0;
          v441 = v225 - v447;
          v445 = (unint64_t)(v225 - v447) >> 3;
          if (*(_BYTE *)(v266 + 16) == 83)
          {
            v444 = v446 + 7;
            do
            {
              v267 = *(uint64_t ***)(v264 - 24);
              if ((*(_BYTE *)(v265 + 23) & 0x10) != 0)
              {
                v268 = **v267;
                v269 = *(_QWORD *)(v268 + 152);
                v270 = *(unsigned int *)(v268 + 168);
                if ((_DWORD)v270)
                {
                  LODWORD(v271) = (v270 - 1) & ((v265 >> 4) ^ (v265 >> 9));
                  v272 = (uint64_t *)(v269 + 16 * v271);
                  v273 = *v272;
                  if (*v272 != v265)
                  {
                    v274 = 1;
                    do
                    {
                      if (v273 == -4096)
                        goto LABEL_412;
                      v275 = v271 + v274++;
                      v271 = v275 & (v270 - 1);
                      v273 = *(_QWORD *)(v269 + 16 * v271);
                    }
                    while (v273 != v265);
                    v272 = (uint64_t *)(v269 + 16 * v271);
                  }
                }
                else
                {
LABEL_412:
                  v272 = (uint64_t *)(v269 + 16 * v270);
                }
                v276 = (_QWORD *)v272[1];
                v279 = *v276;
                v278 = (char *)(v276 + 2);
                v277 = v279;
              }
              else
              {
                v277 = 0;
                v278 = &byte_1C871356D;
              }
              v473.i16[4] = 773;
              *(_QWORD *)__p = v278;
              *(_QWORD *)&__p[8] = v277;
              *(_QWORD *)&__p[16] = ".be";
              v280 = operator new(0x48uLL);
              v280[1] = v267;
              v281 = (llvm::Value *)(v280 + 1);
              *v280 = 0;
              v280[2] = 0;
              v280[3] = 0x4000000000000053;
              *((_OWORD *)v280 + 2) = 0u;
              v282 = (char *)(v280 + 4);
              *((_OWORD *)v280 + 3) = 0u;
              *((_DWORD *)v280 + 16) = 0;
              v283 = v446[9];
              v280[6] = v283;
              *(_WORD *)(v283 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v280 + 31) & 0x10) != 0)
              {
                v306 = *(_QWORD *)(v283 + 56);
                if (v306)
                {
                  v307 = *(llvm::ValueSymbolTable **)(v306 + 104);
                  if (v307)
                    llvm::ValueSymbolTable::reinsertValue(v307, v281);
                }
              }
              v284 = *v444;
              v280[4] = *v444;
              v280[5] = v444;
              *(_QWORD *)(v284 + 8) = v282;
              *v444 = (uint64_t)v282;
              *((_DWORD *)v280 + 17) = v445;
              llvm::Value::setName((uint64_t ***)v281, (uint64_t)__p);
              v285 = *((unsigned int *)v280 + 17);
              v286 = operator new(40 * v285);
              *v280 = v286;
              if ((_DWORD)v285)
              {
                v287 = &v286[4 * v285];
                do
                {
                  *v286 = 0;
                  v286[1] = 0;
                  v286[2] = 0;
                  v286[3] = v281;
                  v286 += 4;
                }
                while (v286 != v287);
              }
              v288 = *(_DWORD *)(v265 + 20);
              v289 = v288 & 0x7FFFFFF;
              if ((v288 & 0x7FFFFFF) != 0)
              {
                v450 = v264;
                v290 = 0;
                v291 = 0;
                v292 = 0;
                v293 = 1;
                v294 = 0xFFFFFFFFLL;
                do
                {
                  v295 = *(_DWORD *)(v265 + 20);
                  if ((v295 & 0x40000000) != 0)
                    v296 = *(_QWORD *)(v265 - 8);
                  else
                    v296 = v265 - 32 * (v295 & 0x7FFFFFF);
                  v297 = *(_QWORD *)(v296 + 32 * *(unsigned int *)(v265 + 60) + 8 * v291);
                  if ((llvm::BasicBlock *)v297 == LoopPredecessor)
                  {
                    v294 = v291;
                  }
                  else
                  {
                    v298 = *(_QWORD *)(v296 + v290);
                    sub_1C477667C(v281, v298, v297);
                    if (v293)
                    {
                      if (v292)
                        v299 = v292;
                      else
                        v299 = (llvm::Value *)v298;
                      v293 = v292 == (llvm::Value *)v298 || v292 == 0;
                      v292 = v299;
                    }
                    else
                    {
                      v293 = 0;
                    }
                  }
                  ++v291;
                  v290 += 32;
                }
                while (v289 != v291);
                v288 = *(_DWORD *)(v265 + 20);
                a7 = (llvm::MemorySSAUpdater *)v443;
                a4 = (int32x2_t *)v454;
                v264 = v450;
                if (!v294)
                  goto LABEL_436;
              }
              else
              {
                v292 = 0;
                v293 = 1;
                v294 = 0xFFFFFFFFLL;
                a4 = (int32x2_t *)v454;
              }
              if ((v288 & 0x40000000) != 0)
                v305 = *(_QWORD *)(v265 - 8);
              else
                v305 = v265 - 32 * (v288 & 0x7FFFFFF);
              sub_1C6125834(v265, 0, *(_QWORD *)(v305 + 32 * v294));
              v308 = *(_DWORD *)(v265 + 20);
              if ((v308 & 0x40000000) != 0)
                v309 = *(_QWORD *)(v265 - 8);
              else
                v309 = v265 - 32 * (v308 & 0x7FFFFFF);
              *(_QWORD *)(v309 + 32 * *(unsigned int *)(v265 + 60)) = *(_QWORD *)(v309
                                                                                  + 32 * *(unsigned int *)(v265 + 60)
                                                                                  + 8 * v294);
              v288 = *(_DWORD *)(v265 + 20);
LABEL_436:
              v300 = v288 & 0x7FFFFFF;
              v301 = v300 - 1;
              if (v300 != 1)
              {
                do
                  llvm::PHINode::removeIncomingValue((llvm::PHINode *)v265, v301--, 0);
                while (v301);
              }
              sub_1C477667C((llvm::PHINode *)v265, (uint64_t)v281, (uint64_t)v456);
              a5 = v452;
              if (v293)
              {
                llvm::Value::doRAUW(v281, v292, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v442, (uint64_t ***)v281);
                v302 = v280[4];
                v303 = (_QWORD *)v280[5];
                *v303 = v302;
                *(_QWORD *)(v302 + 8) = v303;
                v280[4] = 0;
                v280[5] = 0;
                llvm::Value::deleteValue(v281);
              }
              v264 = *(_QWORD *)(v264 + 8);
              v265 = v264 - 24;
              if (v264)
                v304 = v264 - 24;
              else
                v304 = 0;
              a6 = (int32x2_t **)v451;
            }
            while (*(_BYTE *)(v304 + 16) == 83);
          }
          MDKindID = llvm::LLVMContext::getMDKindID(**v456, "llvm.loop", 9uLL);
          if ((_DWORD)v445)
          {
            v311 = 0;
            v312 = 0;
            while (1)
            {
              v313 = *(_QWORD *)&v447[8 * v311];
              v314 = *(_QWORD *)(v313 + 40);
              if (v314 == v313 + 40)
              {
                v316 = 0;
                if (v312)
                  goto LABEL_490;
              }
              else
              {
                if (v314)
                  v315 = v314 - 24;
                else
                  v315 = 0;
                if (*(unsigned __int8 *)(v315 + 16) - 29 >= 0xB)
                  v316 = 0;
                else
                  v316 = (uint64_t ***)v315;
                if (v312)
                  goto LABEL_490;
              }
              v312 = (unsigned __int8 *)v316[6];
              if (!v312 && (*((_DWORD *)v316 + 5) & 0x20000000) == 0)
              {
                v312 = 0;
                goto LABEL_490;
              }
              if (MDKindID)
                break;
LABEL_490:
              v332 = v316 + 6;
              v331 = (unsigned __int8 *)v316[6];
              if (v331 || (*((_BYTE *)v316 + 23) & 0x20) != 0)
              {
                if (MDKindID)
                {
                  llvm::Value::setMetadata((llvm::Value *)v316, MDKindID, 0);
                }
                else
                {
                  *(_QWORD *)__p = 0;
                  if (__p != v332)
                  {
                    if (v331)
                    {
                      llvm::MetadataTracking::untrack((uint64_t)(v316 + 6), v331);
                      v335 = *(unsigned __int8 **)__p;
                      *(_QWORD *)v332 = *(_QWORD *)__p;
                      if (v335)
                        llvm::MetadataTracking::retrack((uint64_t)__p, v335, (uint64_t)(v316 + 6));
                    }
                    else
                    {
                      *(_QWORD *)v332 = 0;
                    }
                  }
                }
              }
              llvm::Instruction::replaceSuccessorWith((uint64_t)v316, v448, (llvm::BasicBlock *)v456);
              if (++v311 == (v441 >> 3))
                goto LABEL_508;
            }
            if ((*((_BYTE *)v316 + 23) & 0x20) == 0)
            {
LABEL_489:
              v312 = 0;
              goto LABEL_490;
            }
            v317 = ***v316;
            *(_QWORD *)__p = v316;
            v318 = *(_DWORD *)(v317 + 2496);
            if (v318)
            {
              v319 = *(_QWORD *)(v317 + 2480);
              v320 = v318 - 1;
              v321 = v320 & ((v316 >> 4) ^ (v316 >> 9));
              v322 = (uint64_t ****)(v319 + 40 * v321);
              v323 = *v322;
              if (*v322 == v316)
                goto LABEL_484;
              v324 = 0;
              v325 = 1;
              while (v323 != (uint64_t ***)-4096)
              {
                if (v324)
                  v326 = 0;
                else
                  v326 = v323 == (uint64_t ***)-8192;
                if (v326)
                  v324 = v322;
                v327 = v321 + v325++;
                v321 = v327 & v320;
                v322 = (uint64_t ****)(v319 + 40 * v321);
                v323 = *v322;
                if (*v322 == v316)
                  goto LABEL_484;
              }
              if (v324)
                v333 = v324;
              else
                v333 = v322;
            }
            else
            {
              v333 = 0;
            }
            v322 = (uint64_t ****)sub_1C541AB24(v317 + 2480, (uint64_t)__p, (uint64_t *)__p, v333);
            v334 = *(uint64_t ****)__p;
            v322[4] = 0;
            v322[3] = 0;
            *v322 = v334;
            v322[1] = (uint64_t ***)(v322 + 3);
            v322[2] = (uint64_t ***)0x100000000;
LABEL_484:
            v328 = *((unsigned int *)v322 + 4);
            if ((_DWORD)v328)
            {
              v329 = (unsigned __int8 **)(v322[1] + 1);
              v330 = 16 * v328;
              while (*((_DWORD *)v329 - 2) != MDKindID)
              {
                v312 = 0;
                v329 += 2;
                v330 -= 16;
                if (!v330)
                  goto LABEL_490;
              }
              v312 = *v329;
              goto LABEL_490;
            }
            goto LABEL_489;
          }
          v312 = 0;
LABEL_508:
          v336 = (_QWORD *)*v442;
          if ((_QWORD *)*v442 == v442)
          {
            v338 = 0;
          }
          else
          {
            if (v336)
              v337 = v336 - 3;
            else
              v337 = 0;
            if (v337[16] - 29 >= 0xB)
              v338 = 0;
            else
              v338 = v337;
          }
          v70 = v458;
          if (v312)
          {
            if (!MDKindID)
            {
              *(_QWORD *)__p = v312;
              llvm::MetadataTracking::track((uint64_t)__p, v312, 2);
LABEL_714:
              v422 = (unsigned __int8 **)(v338 + 48);
              if (__p == v338 + 48)
              {
                if (*(_QWORD *)__p)
                  llvm::MetadataTracking::untrack((uint64_t)__p, *(unsigned __int8 **)__p);
              }
              else
              {
                if (*v422)
                  llvm::MetadataTracking::untrack((uint64_t)(v338 + 48), *v422);
                v423 = *(unsigned __int8 **)__p;
                *v422 = *(unsigned __int8 **)__p;
                if (v423)
                  llvm::MetadataTracking::retrack((uint64_t)__p, v423, (uint64_t)(v338 + 48));
              }
              goto LABEL_523;
            }
          }
          else
          {
            if (!*((_QWORD *)v338 + 6) && (v338[23] & 0x20) == 0)
            {
LABEL_523:
              v111 = v456;
              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v462, (uint64_t)v456, (uint64_t)a3);
              sub_1C53B3EC4((uint64_t)a2, (uint64_t)v456);
              if (a6)
                llvm::MemorySSAUpdater::updatePhisWhenInsertingUniqueBackedgeBlock((llvm::MemorySSAUpdater *)a6, v448, LoopPredecessor, (llvm::BasicBlock *)v456);
LABEL_525:
              if (v447)
                operator delete(v447);
              goto LABEL_527;
            }
            if (!MDKindID)
            {
              *(_QWORD *)__p = 0;
              goto LABEL_714;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v338, MDKindID, (llvm::MDNode *)v312);
          goto LABEL_523;
        }
        v87 = *(_QWORD *)(*(_QWORD *)(v83 + 56) + 40) + 272;
        while (1)
        {
          v84 = *(_QWORD *)(v84 + 8);
          v482 = (unint64_t)v87;
          v483 = a2;
          v484 = a5;
          v485 = 0;
          LOWORD(v486) = 257;
          v88 = *(_DWORD *)(v85 + 20);
          if ((v88 & 0x40000000) != 0)
          {
            v90 = *(uint64_t **)(v85 - 8);
            v89 = v88 & 0x7FFFFFF;
          }
          else
          {
            v89 = v88 & 0x7FFFFFF;
            v90 = (uint64_t *)(v85 - 32 * v89);
          }
          *(_QWORD *)__p = &__p[16];
          *(_QWORD *)&__p[8] = 0x800000000;
          if (v89 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[16], v89, 8);
            v91 = *(_DWORD *)&__p[8];
            v93 = *(_BYTE **)__p;
            v92 = *(unsigned int *)&__p[8];
          }
          else
          {
            v91 = 0;
            if (!v89)
            {
              v97 = &__p[16];
              goto LABEL_140;
            }
            v92 = 0;
            v93 = &__p[16];
          }
          v94 = 32 * v89;
          v95 = &v93[8 * v92];
          do
          {
            v96 = *v90;
            v90 += 4;
            *v95++ = v96;
            v94 -= 32;
          }
          while (v94);
          v97 = *(_BYTE **)__p;
LABEL_140:
          *(_DWORD *)&__p[8] = v91 + v89;
          v98 = llvm::SimplifyInstructionWithOperands((llvm *)v85, (uint64_t)v97, (v91 + v89), (uint64_t)&v482, v12, v69);
          if (*(_BYTE **)__p != &__p[16])
            break;
          if (!v98)
            goto LABEL_145;
LABEL_142:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v85, v98, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v85 + 40) + 40, (uint64_t ***)v85);
          v99 = *(_QWORD *)(v85 + 24);
          v100 = *(_QWORD **)(v85 + 32);
          *v100 = v99;
          *(_QWORD *)(v99 + 8) = v100;
          *(_QWORD *)(v85 + 24) = 0;
          *(_QWORD *)(v85 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v85);
LABEL_155:
          v85 = v84 - 24;
          if (v84)
            v110 = v84 - 24;
          else
            v110 = 0;
          a5 = v452;
          a4 = (int32x2_t *)v454;
          if (*(_BYTE *)(v110 + 16) != 83)
            goto LABEL_330;
        }
        free(*(void **)__p);
        if (v98)
          goto LABEL_142;
LABEL_145:
        v101 = *(_DWORD *)(v85 + 20) & 0x7FFFFFF;
        if (!(_DWORD)v101)
          goto LABEL_155;
        v102 = 0;
        v103 = 0;
        v104 = 32 * v101;
        while (1)
        {
          v105 = *(_DWORD *)(v85 + 20);
          v106 = (v105 & 0x40000000) != 0 ? *(_QWORD *)(v85 - 8) : v85 - 32 * (v105 & 0x7FFFFFF);
          if (*(_QWORD *)(v106 + v103) == v85)
          {
            v107 = sub_1C477672C(v460, *(_QWORD *)(v106 + 32 * *(unsigned int *)(v85 + 60) + v102));
            v108 = *((_QWORD *)v462 + 8);
            v109 = 72;
            if (v108 == *((_QWORD *)v462 + 7))
              v109 = 76;
            if (v107 != (_QWORD *)(v108 + 8 * *(unsigned int *)((char *)v462 + v109)))
              break;
          }
          v103 += 32;
          v102 += 8;
          if (v104 == v103)
            goto LABEL_155;
        }
        *(_QWORD *)&v482 = &v483;
        *((_QWORD *)&v482 + 1) = 0x800000000;
        v112 = *(_DWORD *)(v85 + 20) & 0x7FFFFFF;
        a5 = v452;
        a4 = (int32x2_t *)v454;
        if ((_DWORD)v112)
        {
          v113 = 0;
          v114 = 0;
          v115 = 32 * v112;
          do
          {
            v116 = *(_DWORD *)(v85 + 20);
            if ((v116 & 0x40000000) != 0)
              v117 = *(_QWORD *)(v85 - 8);
            else
              v117 = v85 - 32 * (v116 & 0x7FFFFFF);
            if (*(_QWORD *)(v117 + v114) == v85)
            {
              v119 = sub_1C477672C(v460, *(_QWORD *)(v117 + 32 * *(unsigned int *)(v85 + 60) + v113));
              v120 = *((_QWORD *)v462 + 8);
              v121 = 72;
              if (v120 == *((_QWORD *)v462 + 7))
                v121 = 76;
              if (v119 != (_QWORD *)(v120 + 8 * *(unsigned int *)((char *)v462 + v121)))
                goto LABEL_188;
              v116 = *(_DWORD *)(v85 + 20);
              if ((v116 & 0x40000000) != 0)
              {
LABEL_174:
                v118 = *(_QWORD *)(v85 - 8);
                goto LABEL_175;
              }
            }
            else if ((v116 & 0x40000000) != 0)
            {
              goto LABEL_174;
            }
            v118 = v85 - 32 * (v116 & 0x7FFFFFF);
LABEL_175:
            v122 = *(unsigned int *)(v85 + 60);
            v123 = *(_QWORD *)(*(_QWORD *)(v118 + 32 * v122 + v113) + 40);
            if (v123)
              v124 = v123 - 24;
            else
              v124 = 0;
            if (*(unsigned __int8 *)(v124 + 16) - 29 >= 0xB)
              v124 = 0;
            v125 = *(unsigned __int8 *)(v124 + 16);
            if (v125 == 32 || v125 == 39)
            {
              v131 = 0;
              goto LABEL_324;
            }
            if ((v116 & 0x40000000) != 0)
              v126 = *(_QWORD *)(v85 - 8);
            else
              v126 = v85 - 32 * (v116 & 0x7FFFFFF);
            v127 = *(_QWORD *)(v126 + 32 * v122 + v113);
            v128 = DWORD2(v482);
            if (DWORD2(v482) >= (unint64_t)HIDWORD(v482))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v482, (uint64_t)&v483, DWORD2(v482) + 1, 8);
              v128 = DWORD2(v482);
            }
            *(_QWORD *)(v482 + 8 * v128) = v127;
            ++DWORD2(v482);
            a4 = (int32x2_t *)v454;
LABEL_188:
            v114 += 32;
            v113 += 8;
          }
          while (v115 != v114);
        }
        if (a4)
          llvm::ScalarEvolution::forgetLoop(a4, v462);
        v129 = sub_1C5EBE3AC((uint64_t **)v83, (uint64_t *)v482, DWORD2(v482), ".outer", 0, (uint64_t)a2, (uint64_t)a3, (llvm::MemorySSAUpdater *)a6, (char)a7);
        sub_1C5F26B18(v129, (uint64_t)&v482, (uint64_t)v462);
        v130 = sub_1C484358C((uint64_t)(a3 + 6), 152, 3);
        v131 = (_QWORD *)v130;
        *(_OWORD *)(v130 + 32) = 0u;
        *(_OWORD *)(v130 + 48) = 0u;
        *(_QWORD *)(v130 + 56) = v130 + 88;
        v132 = (llvm::SmallPtrSetImplBase *)(v130 + 56);
        *(_OWORD *)(v130 + 64) = 0u;
        *(_OWORD *)(v130 + 80) = 0u;
        *(_OWORD *)(v130 + 96) = 0u;
        *(_OWORD *)(v130 + 112) = 0u;
        *(_OWORD *)(v130 + 128) = 0u;
        *(_QWORD *)(v130 + 144) = 0;
        *(_OWORD *)v130 = 0u;
        *(_OWORD *)(v130 + 16) = 0u;
        *(_QWORD *)(v130 + 64) = v130 + 88;
        *(_DWORD *)(v130 + 72) = 8;
        v133 = *(_QWORD *)v462;
        if (*(_QWORD *)v462)
        {
          v134 = *(unint64_t **)(v133 + 8);
          v135 = *(unint64_t **)(v133 + 16);
          if (v134 != v135)
          {
            while ((llvm::Loop *)*v134 != v462)
            {
              if (++v134 == v135)
              {
                v134 = *(unint64_t **)(v133 + 16);
                break;
              }
            }
          }
          *v134 = v130;
          *(_QWORD *)v130 = v133;
        }
        else
        {
          v136 = a3[3];
          v137 = a3[4];
          if (v136 != v137)
          {
            while ((llvm::Loop *)*v136 != v462)
            {
              if (++v136 == v137)
              {
                v136 = a3[4];
                break;
              }
            }
          }
          *v136 = v130;
        }
        v138 = v462;
        *(_QWORD *)v462 = v130;
        v140 = *(llvm::Loop ***)(v130 + 16);
        v139 = *(_QWORD *)(v130 + 24);
        if ((unint64_t)v140 >= v139)
        {
          v142 = *(_QWORD **)(v130 + 8);
          v143 = v140 - (llvm::Loop **)v142;
          v144 = v143 + 1;
          if ((unint64_t)(v143 + 1) >> 61)
LABEL_758:
            abort();
          v145 = v139 - (_QWORD)v142;
          if (v145 >> 2 > v144)
            v144 = v145 >> 2;
          if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
            v146 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v146 = v144;
          if (v146)
          {
            if (v146 >> 61)
LABEL_759:
              sub_1C4764EE4();
            v147 = (char *)operator new(8 * v146);
          }
          else
          {
            v147 = 0;
          }
          v148 = (llvm::Loop **)&v147[8 * v143];
          *v148 = v462;
          v141 = v148 + 1;
          if (v140 != v142)
          {
            do
            {
              v149 = *--v140;
              *--v148 = v149;
            }
            while (v140 != v142);
            v140 = (llvm::Loop **)v131[1];
          }
          v131[1] = v148;
          v131[2] = v141;
          v131[3] = &v147[8 * v146];
          if (v140)
            operator delete(v140);
          v138 = v462;
        }
        else
        {
          *v140 = v462;
          v141 = v140 + 1;
        }
        v131[2] = v141;
        v150 = (uint64_t *)*((_QWORD *)v138 + 4);
        v151 = (uint64_t *)*((_QWORD *)v138 + 5);
        if (v151 != v150)
        {
          do
          {
            v152 = *v150;
            v154 = (uint64_t *)v131[5];
            v153 = v131[6];
            if ((unint64_t)v154 >= v153)
            {
              v156 = (_QWORD *)v131[4];
              v157 = v154 - v156;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 61)
                goto LABEL_758;
              v159 = v153 - (_QWORD)v156;
              if (v159 >> 2 > v158)
                v158 = v159 >> 2;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
                v158 = 0x1FFFFFFFFFFFFFFFLL;
              v449 = v158;
              if (v158)
              {
                if (v158 >> 61)
                  goto LABEL_759;
                v160 = (char *)operator new(8 * v158);
              }
              else
              {
                v160 = 0;
              }
              v161 = (uint64_t *)&v160[8 * v157];
              *v161 = v152;
              v155 = v161 + 1;
              if (v154 != v156)
              {
                do
                {
                  v162 = *--v154;
                  *--v161 = v162;
                }
                while (v154 != v156);
                v154 = (uint64_t *)v131[4];
              }
              v131[4] = v161;
              v131[5] = v155;
              v131[6] = &v160[8 * v449];
              a7 = (llvm::MemorySSAUpdater *)v443;
              if (v154)
                operator delete(v154);
            }
            else
            {
              *v154 = v152;
              v155 = v154 + 1;
            }
            v131[5] = v155;
            sub_1C4774094(v132, v152);
            ++v150;
          }
          while (v150 != v151);
          v150 = (uint64_t *)*((_QWORD *)v462 + 4);
        }
        a6 = (int32x2_t **)v451;
        a5 = v452;
        if (*v150 != v83)
        {
          v163 = 0;
          do
          {
            v164 = v163;
            v165 = v150[v163++];
          }
          while (v165 != v83);
          v150[v164] = *v150;
          **((_QWORD **)v462 + 4) = v83;
        }
        v463 = (llvm::BasicBlock *)v467;
        v464 = (llvm::BasicBlock *)v467;
        v465 = 4;
        v466 = 0;
        v166 = *(_QWORD *)(v83 + 8);
        a4 = (int32x2_t *)v454;
        if (v166)
        {
          while (1)
          {
            v167 = *(_QWORD *)(v166 + 24);
            v168 = *(unsigned __int8 *)(v167 + 16);
            v169 = v167 && v168 >= 0x1C;
            if (v169 && v168 - 29 <= 0xA)
              break;
            v166 = *(_QWORD *)(v166 + 8);
            if (!v166)
              goto LABEL_254;
          }
LABEL_719:
          v424 = *(_QWORD *)(v167 + 40);
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a2, v83, v424))
          {
            *(_QWORD *)__p = &__p[16];
            *(_DWORD *)&__p[12] = 8;
            v425 = 1;
            *(_QWORD *)&__p[16] = v424;
            do
            {
              v426 = *(_QWORD *)(*(_QWORD *)__p + 8 * v425 - 8);
              *(_DWORD *)&__p[8] = v425 - 1;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v463, v426);
              if (v426 != v83 && v427 != 0)
              {
                for (m = *(_QWORD *)(v426 + 8); m; m = *(_QWORD *)(m + 8))
                {
                  v430 = *(_QWORD *)(m + 24);
                  v431 = *(unsigned __int8 *)(v430 + 16);
                  if (v430)
                    v432 = v431 >= 0x1C;
                  else
                    v432 = 0;
                  if (v432 && v431 - 29 < 0xB)
                    break;
                }
                sub_1C5F29620((unsigned int *)__p, *(_QWORD *)__p + 8 * *(unsigned int *)&__p[8], m, 0);
              }
              v425 = *(_DWORD *)&__p[8];
            }
            while (*(_DWORD *)&__p[8]);
            if (*(_BYTE **)__p != &__p[16])
              free(*(void **)__p);
          }
          while (1)
          {
            v166 = *(_QWORD *)(v166 + 8);
            if (!v166)
              break;
            v167 = *(_QWORD *)(v166 + 24);
            v434 = *(unsigned __int8 *)(v167 + 16);
            if (v167)
              v435 = v434 >= 0x1C;
            else
              v435 = 0;
            if (v435 && v434 - 29 < 0xB)
              goto LABEL_719;
          }
        }
LABEL_254:
        v171 = *((_QWORD *)v462 + 1);
        if (*((_QWORD *)v462 + 2) != v171)
        {
          v172 = 0;
          do
          {
            v173 = sub_1C477672C((uint64_t)&v463, **(_QWORD **)(*(_QWORD *)(v171 + 8 * v172) + 32));
            if (v464 == v463)
              v174 = (uint64_t *)((char *)&v465 + 4);
            else
              v174 = &v465;
            if (v173 == (_QWORD *)((char *)v464 + 8 * *(unsigned int *)v174))
            {
              v175 = *((_QWORD *)v462 + 1);
              v176 = (char *)*((_QWORD *)v462 + 2);
              v177 = (_QWORD **)(v175 + 8 * v172);
              v178 = *v177;
              v179 = v176 - (char *)(v177 + 1);
              if (v176 != (char *)(v177 + 1))
                memmove((void *)(v175 + 8 * v172), v177 + 1, v176 - (char *)(v177 + 1));
              *((_QWORD *)v462 + 2) = (char *)v177 + v179;
              *v178 = v131;
              v181 = (_QWORD *)v131[2];
              v180 = v131[3];
              if ((unint64_t)v181 >= v180)
              {
                v183 = (_QWORD *)v131[1];
                v184 = v181 - v183;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 61)
                  goto LABEL_758;
                v186 = v180 - (_QWORD)v183;
                if (v186 >> 2 > v185)
                  v185 = v186 >> 2;
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                  v187 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v187 = v185;
                if (v187)
                {
                  if (v187 >> 61)
                    goto LABEL_759;
                  v188 = (char *)operator new(8 * v187);
                }
                else
                {
                  v188 = 0;
                }
                v189 = &v188[8 * v184];
                *(_QWORD *)v189 = v178;
                v182 = v189 + 8;
                if (v181 != v183)
                {
                  do
                  {
                    v190 = *--v181;
                    *((_QWORD *)v189 - 1) = v190;
                    v189 -= 8;
                  }
                  while (v181 != v183);
                  v181 = (_QWORD *)v131[1];
                }
                v131[1] = v189;
                v131[2] = v182;
                v131[3] = &v188[8 * v187];
                if (v181)
                  operator delete(v181);
                a4 = (int32x2_t *)v454;
              }
              else
              {
                *v181 = v178;
                v182 = v181 + 1;
              }
              v131[2] = v182;
              a5 = v452;
            }
            else
            {
              ++v172;
            }
            v171 = *((_QWORD *)v462 + 1);
          }
          while (v172 != (*((_QWORD *)v462 + 2) - v171) >> 3);
        }
        *(_QWORD *)__p = &__p[16];
        *(_QWORD *)&__p[16] = v129;
        *(_QWORD *)&__p[8] = 0x800000001;
        v191 = *((_QWORD *)v462 + 4);
        if (*((_QWORD *)v462 + 5) != v191)
        {
          v192 = 0;
          v193 = 0;
          do
          {
            v194 = *(_QWORD *)(v191 + 8 * v192);
            v195 = sub_1C477672C((uint64_t)&v463, v194);
            if (v464 == v463)
              v196 = (uint64_t *)((char *)&v465 + 4);
            else
              v196 = &v465;
            if (v195 == (_QWORD *)((char *)v464 + 8 * *(unsigned int *)v196))
            {
              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v462, v194);
              v197 = *((_DWORD *)a3 + 4);
              if (v197)
              {
                v198 = *a3;
                v199 = v197 - 1;
                v200 = v199 & ((v194 >> 4) ^ (v194 >> 9));
                v201 = &(*a3)[2 * v200];
                v202 = *v201;
                if (v194 == *v201)
                {
                  v204 = v199 & ((v194 >> 4) ^ (v194 >> 9));
LABEL_297:
                  v206 = (llvm::Loop *)v198[2 * v204 + 1];
                }
                else
                {
                  v203 = 1;
                  LODWORD(v204) = v199 & ((v194 >> 4) ^ (v194 >> 9));
                  while (v202 != -4096)
                  {
                    v205 = v204 + v203++;
                    v204 = v205 & v199;
                    v202 = v198[2 * v204];
                    if (v194 == v202)
                      goto LABEL_297;
                  }
                  v206 = 0;
                }
                if (v206 == v462)
                {
                  v468 = v194;
                  v207 = *v201;
                  if (v194 != *v201)
                  {
                    v208 = 0;
                    v209 = 1;
                    while (v207 != -4096)
                    {
                      if (v208)
                        v210 = 0;
                      else
                        v210 = v207 == -8192;
                      if (v210)
                        v208 = v201;
                      v211 = v200 + v209++;
                      v200 = v211 & v199;
                      v201 = &v198[2 * v200];
                      v207 = *v201;
                      if (v194 == *v201)
                        goto LABEL_313;
                    }
                    if (v208)
                      v212 = v208;
                    else
                      v212 = v201;
                    v201 = sub_1C4EB6AAC((uint64_t)a3, (uint64_t)&v468, (uint64_t *)&v468, v212);
                    *v201 = v468;
                    v201[1] = 0;
                  }
LABEL_313:
                  v201[1] = (unint64_t)v131;
                  v213 = *(unsigned int *)&__p[8];
                  if (*(unsigned int *)&__p[8] >= (unint64_t)*(unsigned int *)&__p[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[16], *(unsigned int *)&__p[8] + 1, 8);
                    v213 = *(unsigned int *)&__p[8];
                  }
                  *(_QWORD *)(*(_QWORD *)__p + 8 * v213) = v194;
                  ++*(_DWORD *)&__p[8];
                }
              }
              --v193;
            }
            v191 = *((_QWORD *)v462 + 4);
            v192 = ++v193;
          }
          while (v193 != (*((_QWORD *)v462 + 5) - v191) >> 3);
        }
        llvm::formDedicatedExitBlocks((uint64_t)v462, a2, (llvm::DominatorTree *)a3, v451, a7);
        if ((a7 & 1) != 0)
          llvm::formLCSSA(v462, a2, (const llvm::DominatorTree *)a3, a4, v12);
        if (*(_BYTE **)__p != &__p[16])
          free(*(void **)__p);
        if (v464 != v463)
          free(v464);
LABEL_324:
        if ((llvm::Loop **)v482 != &v483)
          free((void *)v482);
        if (!v131)
          goto LABEL_330;
        v214 = v470;
        if (v470 >= (unint64_t)HIDWORD(v470))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v469, (uint64_t)v471, v470 + 1, 8);
          v214 = v470;
        }
        *((_QWORD *)v469 + v214) = v131;
        LODWORD(v470) = v470 + 1;
        v215 = 1;
        v15 = 1;
        v216 = v455;
LABEL_600:
        v455 = v216;
        if (v479 != v481)
          free(v479);
        v14 = &v473.i8[8];
      }
      while ((v215 & 1) != 0);
      v13 = v440 | v455;
      v11 = v470;
    }
    while ((_DWORD)v470);
  }
  if (v469 != v471)
    free(v469);
  return v13 & 1;
}

uint64_t sub_1C5F291EC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Canonicalize natural loops";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "loop-simplify";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7650;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F29830;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F29290(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7650;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A99A0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837650);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F291EC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837650, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LoopSimplifyPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v7;
  uint64_t CachedResultImpl;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm **v15;
  llvm **v16;
  int v17;
  unint64_t **v18;
  llvm::Loop *v19;
  llvm::ScalarEvolution *v20;
  llvm *v21;
  _QWORD *result;
  void *v23;
  void *v24;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key, a1);
  if (CachedResultImpl)
    v9 = (int32x2_t *)(CachedResultImpl + 8);
  else
    v9 = 0;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1);
  v11 = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::MemorySSAAnalysis::Key, a1);
  v12 = v11;
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = operator new();
    *(_QWORD *)v14 = v13;
    *(_QWORD *)(v14 + 8) = v14 + 24;
    *(_QWORD *)(v14 + 16) = 0x1000000000;
    *(_QWORD *)(v14 + 408) = v14 + 440;
    *(_QWORD *)(v14 + 416) = v14 + 440;
    *(_QWORD *)(v14 + 424) = 8;
    *(_DWORD *)(v14 + 432) = 0;
    *(_QWORD *)(v14 + 504) = v14 + 520;
    *(_QWORD *)(v14 + 512) = 0x800000000;
    *(_QWORD *)(v14 + 600) = 0;
    *(_QWORD *)(v14 + 592) = 0;
    *(_QWORD *)(v14 + 584) = v14 + 592;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(llvm ***)(ResultImpl + 32);
  v16 = *(llvm ***)(ResultImpl + 40);
  if (v15 == v16)
    goto LABEL_15;
  v17 = 0;
  v18 = (unint64_t **)(ResultImpl + 8);
  v19 = (llvm::Loop *)(v7 + 8);
  v20 = (llvm::ScalarEvolution *)(v10 + 8);
  do
  {
    v21 = *v15++;
    v17 |= llvm::simplifyLoop(v21, v19, v18, v9, v20, (int32x2_t **)v14, 0);
  }
  while (v15 != v16);
  if ((v17 & 1) == 0)
  {
LABEL_15:
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (!v14)
      return result;
LABEL_16:
    sub_1C61247C0(v14 + 584, *(_QWORD **)(v14 + 592));
    v23 = *(void **)(v14 + 504);
    if (v23 != (void *)(v14 + 520))
      free(v23);
    v24 = *(void **)(v14 + 416);
    if (v24 != *(void **)(v14 + 408))
      free(v24);
    sub_1C4EE41F8((char **)(v14 + 8));
    JUMPOUT(0x1CAA32FC0);
  }
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DependenceAnalysis::Key);
  if (v12)
    sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  result = sub_1C4DDB144(a3, (uint64_t)&llvm::BranchProbabilityAnalysis::Key);
  if (v14)
    goto LABEL_16;
  return result;
}

uint64_t sub_1C5F29620(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C4DBBCC0(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a3;
      do
      {
        ++v10;
        do
        {
          v11 = *(_QWORD *)(v11 + 8);
          if (!v11)
            break;
          v12 = *(_QWORD *)(v11 + 24);
          v13 = *(unsigned __int8 *)(v12 + 16);
          v14 = v12 && v13 >= 0x1C;
        }
        while (!v14 || v13 - 29 > 0xA);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v10 + v9, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v16 = (_BYTE *)(v7 + 8 * v8);
    v17 = (char *)(v7 + 8 * v9);
    v18 = (v17 - v16) >> 3;
    if (v18 >= v10)
    {
      sub_1C6177054(a1, &v17[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v17[-8 * v10] != v16)
        memmove(&v16[8 * v10], v16, &v17[-8 * v10] - v16);
      if (v5 != a4)
      {
        v29 = v16;
        do
        {
          *v29 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 40);
          do
          {
            v5 = *(_QWORD *)(v5 + 8);
            if (!v5)
              break;
            v30 = *(_QWORD *)(v5 + 24);
            v31 = *(unsigned __int8 *)(v30 + 16);
            v32 = v30 && v31 >= 0x1C;
          }
          while (!v32 || v31 - 29 > 0xA);
          ++v29;
        }
        while (v5 != a4);
      }
    }
    else
    {
      a1[2] = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v18), v16, v17 - v16);
        v19 = v16;
        do
        {
          *v19++ = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 40);
          do
          {
            v5 = *(_QWORD *)(v5 + 8);
            if (!v5)
              break;
            v20 = *(_QWORD *)(v5 + 24);
            v21 = *(unsigned __int8 *)(v20 + 16);
            v22 = v20 && v21 >= 0x1C;
          }
          while (!v22 || v21 - 29 > 0xA);
          --v18;
        }
        while (v18);
      }
      while (v5 != a4)
      {
        *(_QWORD *)v17 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 40);
        do
        {
          v5 = *(_QWORD *)(v5 + 8);
          if (!v5)
            break;
          v24 = *(_QWORD *)(v5 + 24);
          v25 = *(unsigned __int8 *)(v24 + 16);
          v26 = v24 && v25 >= 0x1C;
        }
        while (!v26 || v25 - 29 > 0xA);
        v17 += 8;
      }
    }
  }
  return (uint64_t)v16;
}

uint64_t sub_1C5F29830()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F29290(v0);
}

void sub_1C5F2985C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F29880(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)byte_1EF8F7648);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&unk_1EF8F7638);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5F299D0(uint64_t a1, llvm::Function *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  unint64_t **v10;
  llvm::Loop *v11;
  uint64_t AnalysisPass;
  uint64_t v13;
  int32x2_t *v14;
  char **v15;
  char *v16;
  llvm::AssumptionCacheTracker *v17;
  llvm::ScalarEvolution *AssumptionCache;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm **v24;
  llvm **v25;
  uint64_t v26;
  int v27;
  llvm *v28;
  void *v29;
  void *v30;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::LoopInfoWrapperPass::ID);
  v7 = v6;
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::DominatorTreeWrapperPass::ID);
  v10 = (unint64_t **)(v6 + 32);
  v11 = (llvm::Loop *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass
    && (v13 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID)) != 0)
  {
    v14 = *(int32x2_t **)(v13 + 32);
  }
  else
  {
    v14 = 0;
  }
  v15 = **(char ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::AssumptionCacheTracker::ID);
  v17 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::ScalarEvolution *)llvm::AssumptionCacheTracker::getAssumptionCache(v17, a2);
  v19 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (v19
    && (v20 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v19 + 96))(v19, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v21 = *(_QWORD *)(v20 + 32);
    v22 = operator new();
    *(_QWORD *)v22 = v21;
    *(_QWORD *)(v22 + 8) = v22 + 24;
    *(_QWORD *)(v22 + 16) = 0x1000000000;
    *(_QWORD *)(v22 + 408) = v22 + 440;
    *(_QWORD *)(v22 + 416) = v22 + 440;
    *(_QWORD *)(v22 + 424) = 8;
    *(_DWORD *)(v22 + 432) = 0;
    *(_QWORD *)(v22 + 504) = v22 + 520;
    *(_QWORD *)(v22 + 512) = 0x800000000;
    *(_QWORD *)(v22 + 600) = 0;
    *(_QWORD *)(v22 + 592) = 0;
    *(_QWORD *)(v22 + 584) = v22 + 592;
  }
  else
  {
    v22 = 0;
  }
  v23 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), byte_1EF8F7648, 1);
  v24 = *(llvm ***)(v7 + 56);
  v25 = *(llvm ***)(v7 + 64);
  if (v24 == v25)
  {
    LOBYTE(v27) = 0;
    if (!v22)
      return v27 & 1;
  }
  else
  {
    v26 = v23;
    v27 = 0;
    do
    {
      v28 = *v24++;
      v27 |= llvm::simplifyLoop(v28, v11, v10, v14, AssumptionCache, (int32x2_t **)v22, (llvm::MemorySSAUpdater *)(v26 != 0));
    }
    while (v24 != v25);
    if (!v22)
      return v27 & 1;
  }
  sub_1C61247C0(v22 + 584, *(_QWORD **)(v22 + 592));
  v29 = *(void **)(v22 + 504);
  if (v29 != (void *)(v22 + 520))
    free(v29);
  v30 = *(void **)(v22 + 416);
  if (v30 != *(void **)(v22 + 408))
    free(v30);
  sub_1C4EE41F8((char **)(v22 + 8));
  MEMORY[0x1CAA32FC0](v22, 0x10E0C40B8556DDDLL);
  return v27 & 1;
}

uint64_t *llvm::addClonedBlockToLoopInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v24;
  int v25;
  uint64_t **v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  uint64_t *v61;

  v7 = *(_DWORD *)(a3 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)a3;
    v9 = v7 - 1;
    v10 = (v7 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v11 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v10);
    if (v11 == a1)
    {
LABEL_6:
      v14 = *(uint64_t **)(v8 + 16 * v10 + 8);
      goto LABEL_8;
    }
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & v9;
      v11 = *(_QWORD *)(v8 + 16 * v10);
      if (v11 == a1)
        goto LABEL_6;
    }
  }
  v14 = 0;
LABEL_8:
  v61 = v14;
  v15 = a4 + 8;
  if ((*(_BYTE *)a4 & 1) != 0)
  {
    v16 = 4;
    v17 = a4 + 8;
  }
  else
  {
    v16 = *(_DWORD *)(a4 + 16);
    if (!v16)
    {
      v26 = 0;
      goto LABEL_18;
    }
    v17 = *(_QWORD *)(a4 + 8);
  }
  v18 = v16 - 1;
  v19 = v18 & ((v14 >> 4) ^ (v14 >> 9));
  v20 = (uint64_t **)(v17 + 16 * v19);
  v21 = *v20;
  if (v14 == *v20)
    goto LABEL_11;
  v24 = 0;
  v25 = 1;
  while (v21 != (uint64_t *)-4096)
  {
    if (v24)
      v38 = 0;
    else
      v38 = v21 == (uint64_t *)-8192;
    if (v38)
      v24 = v20;
    v39 = v19 + v25++;
    v19 = v39 & v18;
    v20 = (uint64_t **)(v17 + 16 * v19);
    v21 = *v20;
    if (v14 == *v20)
      goto LABEL_11;
  }
  if (v24)
    v26 = v24;
  else
    v26 = v20;
LABEL_18:
  v20 = (uint64_t **)sub_1C55B6340(a4, (uint64_t)&v61, &v61, v26);
  *v20 = v61;
  v20[1] = 0;
LABEL_11:
  v22 = v20[1];
  if (v22)
  {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v22, a2, a3);
    return 0;
  }
  v27 = sub_1C484358C(a3 + 48, 152, 3);
  v28 = v27;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_QWORD *)(v27 + 144) = 0;
  *(_QWORD *)(v27 + 56) = v27 + 88;
  *(_QWORD *)(v27 + 64) = v27 + 88;
  *(_DWORD *)(v27 + 72) = 8;
  v20[1] = (uint64_t *)v27;
  v29 = *v61;
  if ((*(_BYTE *)a4 & 1) != 0)
  {
    v30 = 4;
  }
  else
  {
    v30 = *(_DWORD *)(a4 + 16);
    if (!v30)
      goto LABEL_52;
    v15 = *(_QWORD *)(a4 + 8);
  }
  v31 = v30 - 1;
  v32 = (v30 - 1) & ((v29 >> 4) ^ (v29 >> 9));
  v33 = *(_QWORD *)(v15 + 16 * v32);
  if (v29 != v33)
  {
    v48 = 1;
    while (v33 != -4096)
    {
      v60 = v32 + v48++;
      v32 = v60 & v31;
      v33 = *(_QWORD *)(v15 + 16 * v32);
      if (v29 == v33)
        goto LABEL_24;
    }
LABEL_52:
    v50 = *(unint64_t **)(a3 + 32);
    v49 = *(_QWORD *)(a3 + 40);
    if ((unint64_t)v50 >= v49)
    {
      v52 = *(_QWORD **)(a3 + 24);
      v53 = v50 - v52;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        goto LABEL_75;
      v55 = v49 - (_QWORD)v52;
      if (v55 >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 61)
          goto LABEL_76;
        v57 = (char *)operator new(8 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = (unint64_t *)&v57[8 * v53];
      *v58 = v28;
      v51 = v58 + 1;
      if (v50 != v52)
      {
        do
        {
          v59 = *--v50;
          *--v58 = v59;
        }
        while (v50 != v52);
        v50 = *(unint64_t **)(a3 + 24);
      }
      *(_QWORD *)(a3 + 24) = v58;
      *(_QWORD *)(a3 + 32) = v51;
      *(_QWORD *)(a3 + 40) = &v57[8 * v56];
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v50 = v27;
      v51 = v50 + 1;
    }
    *(_QWORD *)(a3 + 32) = v51;
    goto LABEL_28;
  }
LABEL_24:
  v34 = *(_QWORD **)(v15 + 16 * v32 + 8);
  if (!v34)
    goto LABEL_52;
  *(_QWORD *)v27 = v34;
  v36 = (unint64_t *)v34[2];
  v35 = v34[3];
  if ((unint64_t)v36 >= v35)
  {
    v40 = (_QWORD *)v34[1];
    v41 = v36 - v40;
    v42 = v41 + 1;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      v43 = v35 - (_QWORD)v40;
      if (v43 >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (!v44)
      {
        v45 = 0;
        goto LABEL_45;
      }
      if (!(v44 >> 61))
      {
        v45 = (char *)operator new(8 * v44);
LABEL_45:
        v46 = (unint64_t *)&v45[8 * v41];
        *v46 = v28;
        v37 = v46 + 1;
        if (v36 != v40)
        {
          do
          {
            v47 = *--v36;
            *--v46 = v47;
          }
          while (v36 != v40);
          v36 = (unint64_t *)v34[1];
        }
        v34[1] = v46;
        v34[2] = v37;
        v34[3] = &v45[8 * v44];
        if (v36)
          operator delete(v36);
        goto LABEL_27;
      }
LABEL_76:
      sub_1C4764EE4();
    }
LABEL_75:
    abort();
  }
  *v36 = v27;
  v37 = v36 + 1;
LABEL_27:
  v34[2] = v37;
LABEL_28:
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v20[1], a2, a3);
  return v61;
}

char **llvm::simplifyLoopAfterUnroll(llvm *this, llvm::Loop *a2, uint64_t *a3, uint64_t ***a4, llvm::ScalarEvolution *a5, llvm::DSOLocalEquivalent **a6, llvm::AssumptionCache *a7, const llvm::TargetTransformInfo *a8)
{
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  void (**v32)(void);
  unint64_t v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  llvm::UndefValue *v62;
  int v63;
  char *v64;
  uint64_t v65;
  void (**v66)(void);
  uint64_t v68;
  uint64_t v69;
  _QWORD v71[5];
  __int16 v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  _BYTE v79[384];
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[10];

  v82[8] = *MEMORY[0x1E0C80C00];
  if (a4 && (_DWORD)a2)
  {
    v77 = v79;
    v78 = 0x1000000000;
    llvm::simplifyLoopIVs((uint64_t)this, a4, a5, a3, (uint64_t)a7, (unsigned int *)&v77);
    v11 = v78;
    if ((_DWORD)v78)
    {
      while (1)
      {
        v12 = v77;
        v13 = &v77[24 * v11];
        v80 = 6;
        v81 = 0;
        v14 = *((_QWORD *)v13 - 1);
        v82[0] = v14;
        if (v14 && v14 != -8192 && v14 != -4096)
        {
          v15 = *((_QWORD *)v13 - 3) & 0xFFFFFFFFFFFFFFF8;
          v81 = *(_QWORD *)v15;
          *(_QWORD *)v15 = &v80;
          v80 = v15 | 6;
          if (v81)
            *(_QWORD *)v81 = *(_QWORD *)v81 & 7 | (unint64_t)&v81;
          v12 = v77;
        }
        LODWORD(v78) = v11 - 1;
        v16 = &v12[24 * (v11 - 1)];
        v17 = *((_QWORD *)v16 + 2);
        if (v17 && v17 != -8192 && v17 != -4096)
        {
          v18 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v18 = *((_QWORD *)v16 + 1);
          v19 = (unint64_t *)*((_QWORD *)v16 + 1);
          if (v19)
          {
            *v19 = *v19 & 7 | v18;
          }
          else
          {
            v20 = *((_QWORD *)v16 + 2);
            v21 = ***(int32x2_t ****)v20;
            v22 = (unint64_t)v21[303];
            if (v22 <= v18)
            {
              v23 = v21[305].u32[0];
              if (v22 + 16 * v23 > v18)
              {
                v24 = v23 - 1;
                LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
                v26 = (uint64_t *)(v22 + 16 * v25);
                v27 = *v26;
                if (v20 == *v26)
                {
LABEL_21:
                  *v26 = -8192;
                  v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                  v20 = *((_QWORD *)v16 + 2);
                }
                else
                {
                  v28 = 1;
                  while (v27 != -4096)
                  {
                    v29 = v25 + v28++;
                    v25 = v29 & v24;
                    v27 = *(_QWORD *)(v22 + 16 * v25);
                    if (v20 == v27)
                    {
                      v26 = (uint64_t *)(v22 + 16 * v25);
                      goto LABEL_21;
                    }
                  }
                }
                *(_BYTE *)(v20 + 17) &= ~1u;
              }
            }
          }
        }
        v30 = v82[0];
        if (v82[0] != -8192)
        {
          v31 = v82[0] == -4096 || v82[0] == 0;
          if (!v31)
          {
            v33 = v80 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8) = v81;
            if (v81)
            {
              *(_QWORD *)v81 = *(_QWORD *)v81 & 7 | v33;
            }
            else
            {
              v34 = v82[0];
              v35 = ***(int32x2_t ****)v82[0];
              v36 = (unint64_t)v35[303];
              if (v36 <= v33)
              {
                v37 = v35[305].u32[0];
                if (v36 + 16 * v37 > v33)
                {
                  v38 = v37 - 1;
                  LODWORD(v39) = v38 & ((LODWORD(v82[0]) >> 4) ^ (LODWORD(v82[0]) >> 9));
                  v40 = (uint64_t *)(v36 + 16 * v39);
                  v41 = *v40;
                  if (v82[0] == *v40)
                  {
LABEL_43:
                    *v40 = -8192;
                    v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                    v34 = v82[0];
                  }
                  else
                  {
                    v42 = 1;
                    while (v41 != -4096)
                    {
                      v43 = v39 + v42++;
                      v39 = v43 & v38;
                      v41 = *(_QWORD *)(v36 + 16 * v39);
                      if (v82[0] == v41)
                      {
                        v40 = (uint64_t *)(v36 + 16 * v39);
                        goto LABEL_43;
                      }
                    }
                  }
                  *(_BYTE *)(v34 + 17) &= ~1u;
                }
              }
            }
          }
        }
        if (!v30 || *(unsigned __int8 *)(v30 + 16) < 0x1Cu)
          goto LABEL_47;
        v76 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v30, 0, 0, v75);
        if (v76 == v75)
          break;
        if (v76)
        {
          v32 = (void (**)(void))(*v76 + 40);
LABEL_46:
          (*v32)();
        }
LABEL_47:
        v11 = v78;
        if (!(_DWORD)v78)
          goto LABEL_50;
      }
      v32 = (void (**)(void))(v75[0] + 32);
      goto LABEL_46;
    }
LABEL_50:
    sub_1C50880D4(&v77);
  }
  v45 = *((_QWORD *)this + 4);
  v44 = *((_QWORD *)this + 5);
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 56) + 40);
  v77 = v79;
  v78 = 0x1000000000;
  v68 = v44;
  if (v44 == v45)
    return sub_1C50880D4(&v77);
  v47 = v46 + 272;
  do
  {
    v69 = v45;
    v48 = *(_QWORD *)v45 + 40;
    v49 = *(_QWORD *)(*(_QWORD *)v45 + 48);
    while (v49 != v48)
    {
      v50 = v49 - 24;
      v31 = v49 == 0;
      v49 = *(_QWORD *)(v49 + 8);
      if (v31)
        v51 = 0;
      else
        v51 = v50;
      v71[0] = v47;
      v71[1] = 0;
      v71[2] = a5;
      v71[3] = a6;
      v71[4] = 0;
      v72 = 257;
      v52 = *(_DWORD *)(v51 + 20);
      if ((v52 & 0x40000000) != 0)
      {
        v54 = *(uint64_t **)(v51 - 8);
        v53 = v52 & 0x7FFFFFF;
      }
      else
      {
        v53 = v52 & 0x7FFFFFF;
        v54 = (uint64_t *)(v51 - 32 * v53);
      }
      v80 = (uint64_t)v82;
      v81 = 0x800000000;
      if (v53 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v53, 8);
        v55 = v81;
        v57 = (_QWORD *)v80;
        v56 = v81;
      }
      else
      {
        v55 = 0;
        if (!v53)
        {
          v61 = v82;
          goto LABEL_67;
        }
        v56 = 0;
        v57 = v82;
      }
      v58 = 32 * v53;
      v59 = &v57[v56];
      do
      {
        v60 = *v54;
        v54 += 4;
        *v59++ = v60;
        v58 -= 32;
      }
      while (v58);
      v61 = (_QWORD *)v80;
LABEL_67:
      LODWORD(v81) = v55 + v53;
      v62 = llvm::SimplifyInstructionWithOperands((llvm *)v51, (uint64_t)v61, (v55 + v53), (uint64_t)v71, a5, a6);
      if ((_QWORD *)v80 == v82)
      {
        if (!v62)
          goto LABEL_71;
      }
      else
      {
        free((void *)v80);
        if (!v62)
          goto LABEL_71;
      }
      if (sub_1C4F20780(a3, v51, (uint64_t)v62))
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v51, v62, (llvm::Value *)1);
LABEL_71:
      if (!*(_QWORD *)(v51 + 8) && llvm::wouldInstructionBeTriviallyDead(v51, 0))
      {
        v80 = v51;
        v63 = v78;
        if (v78 >= HIDWORD(v78))
        {
          sub_1C5F2E684((unsigned int *)&v77, &v80);
        }
        else
        {
          v64 = &v77[24 * v78];
          *(_QWORD *)v64 = 6;
          *((_QWORD *)v64 + 1) = 0;
          *((_QWORD *)v64 + 2) = v51;
          if (v51 != -8192 && v51 != -4096)
          {
            if (v51)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v64);
              v63 = v78;
            }
          }
          LODWORD(v78) = v63 + 1;
        }
      }
    }
    v74 = 0;
    llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v77, 0, 0, (uint64_t)v73);
    if (v74 == v73)
    {
      v66 = (void (**)(void))(v73[0] + 32);
      v65 = v69;
LABEL_88:
      (*v66)();
    }
    else
    {
      v65 = v69;
      if (v74)
      {
        v66 = (void (**)(void))(*v74 + 40);
        goto LABEL_88;
      }
    }
    v45 = v65 + 8;
  }
  while (v45 != v68);
  return sub_1C50880D4(&v77);
}

uint64_t llvm::UnrollLoop(llvm::Loop *a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, llvm::DominatorTree *a8, llvm::OptimizationRemarkEmitter *a9, unsigned __int8 a10, int a11, BOOL a12)
{
  uint64_t *v17;
  llvm::Loop *v19;
  uint64_t LoopPredecessor;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  llvm::Loop *v29;
  _BYTE *v30;
  _BYTE *v31;
  size_t v32;
  char *v33;
  unsigned int SmallConstantMaxTripCount;
  BOOL v35;
  const llvm::BasicBlock **v36;
  const llvm::BasicBlock **v37;
  const llvm::BasicBlock *v38;
  const llvm::BasicBlock *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t v45;
  const llvm::BasicBlock *v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  const llvm::BasicBlock *v51;
  unsigned int SmallConstantTripMultiple;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  llvm::Loop *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  const llvm::BasicBlock *v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  const llvm::BasicBlock *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _BOOL4 isLoopExiting;
  int v86;
  _BOOL4 v87;
  llvm::DomTreeUpdater *v88;
  unsigned __int8 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  llvm::Loop *v101;
  const llvm::Loop *v102;
  unsigned __int8 *v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  llvm::Loop *v121;
  _BYTE *v122;
  _BYTE *v123;
  int64_t v124;
  char *v125;
  void **v126;
  void **v127;
  void *v128;
  int isDebugInfoForProfiling;
  llvm::Loop *v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 **v138;
  uint64_t v139;
  unsigned __int8 *v140;
  char v141;
  unsigned __int8 *v142;
  llvm::MemorySSAUpdater *v143;
  llvm::ValueAsMetadata **v144;
  uint64_t v145;
  void *v146;
  llvm::ValueAsMetadata *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  llvm::Loop *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  int32x2_t ****v160;
  int32x2_t *v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  int32x2_t *****v166;
  int32x2_t ****v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  _QWORD *v179;
  llvm::ScalarEvolution *v180;
  llvm::DSOLocalEquivalent **v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  llvm::BasicBlock *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t **v203;
  uint64_t v204;
  uint64_t v205;
  llvm::Loop *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t NearestCommonDominator;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm::Loop *v220;
  int v221;
  std::string::size_type p_size;
  int v223;
  unsigned int v224;
  llvm::Loop **v225;
  llvm::Loop *v226;
  llvm::Loop **v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  llvm::Loop **v231;
  char *v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t ***v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t *v238;
  int v239;
  std::string::size_type size;
  int v241;
  unsigned int v242;
  _QWORD *v243;
  uint64_t *v244;
  _QWORD *v245;
  int v246;
  BOOL v247;
  unsigned int v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  llvm::DominatorTree **v252;
  _QWORD *v254;
  unint64_t v256;
  int32x2_t ****v257;
  int32x2_t *v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  int32x2_t *****v263;
  int32x2_t ****v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  llvm::Loop *v275;
  uint64_t v276;
  llvm::Loop *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v283;
  unint64_t v284;
  int32x2_t ****v285;
  int32x2_t *v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  int32x2_t *****v291;
  int32x2_t ****v292;
  int v293;
  int v294;
  _QWORD *v295;
  unint64_t v296;
  int32x2_t ****v297;
  int32x2_t *v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  int32x2_t *****v303;
  int32x2_t ****v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  unint64_t *v314;
  uint64_t v315;
  int32x2_t *v316;
  unint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  int v323;
  int v324;
  _QWORD *v325;
  unint64_t v326;
  int32x2_t ****v327;
  int32x2_t *v328;
  unint64_t v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int32x2_t *****v333;
  int32x2_t ****v334;
  int v335;
  int v336;
  _QWORD *v337;
  const char *v338;
  unint64_t v339;
  const char *v340;
  const char *v341;
  int32x2_t ****v342;
  _QWORD *v344;
  unint64_t v346;
  int32x2_t ****v347;
  int32x2_t *v348;
  unint64_t v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  int32x2_t *****v353;
  int32x2_t ****v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  BOOL v359;
  _QWORD *v361;
  unint64_t v362;
  unint64_t **v363;
  const char *v364;
  unint64_t v365;
  unint64_t *v366;
  uint64_t v367;
  int32x2_t *v368;
  unint64_t v369;
  uint64_t v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  int v378;
  int v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t *v384;
  uint64_t v385;
  llvm::Loop *v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t j;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unsigned __int8 *v400;
  uint64_t v401;
  int v402;
  int v403;
  char *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  char *v409;
  _QWORD *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  char *v419;
  char *k;
  unsigned int v421;
  uint64_t *v422;
  uint64_t v423;
  int v424;
  unsigned int v425;
  unint64_t v426;
  uint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  int v445;
  int v446;
  int32x2_t ****v447;
  _QWORD *v449;
  unint64_t v450;
  int32x2_t ****v451;
  int32x2_t *v452;
  unint64_t v453;
  uint64_t v454;
  unsigned int v455;
  uint64_t v456;
  int32x2_t *****v457;
  int32x2_t ****v458;
  int v459;
  int v460;
  const char *v461;
  const char *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t *v466;
  uint64_t v467;
  int32x2_t *v468;
  unint64_t v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  int v475;
  int v476;
  unint64_t v478;
  unint64_t *v479;
  uint64_t v480;
  int32x2_t *v481;
  unint64_t v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  int v488;
  int v489;
  unint64_t v490;
  unint64_t *v491;
  uint64_t v492;
  int32x2_t *v493;
  unint64_t v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  int v500;
  int v501;
  unint64_t v502;
  char *v503;
  char *v504;
  uint64_t v505;
  uint64_t m;
  uint64_t v507;
  _BOOL4 v508;
  void *v509;
  size_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  _BOOL4 v520;
  int v521;
  BOOL v522;
  _BOOL4 v524;
  llvm::BasicBlock *v525;
  _QWORD *v526;
  _QWORD *v527;
  _QWORD *v528;
  uint64_t v529;
  uint64_t v530;
  llvm::BasicBlock *v531;
  char *v532;
  char *v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  llvm::ValueSymbolTable *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  char v548;
  uint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  llvm *v552;
  char *v553;
  uint64_t v554;
  uint64_t v555;
  unsigned int v556;
  llvm::BasicBlock *v558;
  uint64_t UniquePredecessor;
  uint64_t *v560;
  const llvm::TargetTransformInfo *v561;
  llvm::ScalarEvolution *DomTree;
  llvm::Loop *v563;
  llvm::ScalarEvolution *v564;
  llvm *v565;
  int v566;
  char *v567;
  uint64_t v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  int v575;
  llvm *v576;
  uint64_t v577;
  uint64_t n;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  BOOL v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  int v589;
  llvm *v590;
  llvm *v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  int v599;
  llvm *v600;
  llvm **v601;
  uint64_t v602;
  llvm *v603;
  llvm *v604;
  llvm *v605;
  llvm *v606;
  unsigned __int8 *v607;
  unsigned __int8 *v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t *v612;
  uint64_t v613;
  int32x2_t *v614;
  unint64_t v615;
  uint64_t v616;
  unsigned int v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  int v621;
  int v622;
  unint64_t v624;
  unint64_t *v625;
  uint64_t v626;
  int32x2_t *v627;
  unint64_t v628;
  uint64_t v629;
  unsigned int v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  int v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD *v638;
  _QWORD *v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  unsigned int v651;
  uint64_t v652;
  unsigned int v653;
  uint64_t v654;
  unint64_t *v655;
  _QWORD *v656;
  unint64_t v657;
  void **v658;
  uint64_t v659;
  unint64_t *v660;
  uint64_t v661;
  char *v662;
  unint64_t v663;
  void **v664;
  unint64_t v665;
  void **v666;
  llvm::TargetTransformInfo *v667;
  llvm::Loop **v668;
  int v669;
  BOOL v670;
  llvm::AssumptionCache *v671;
  llvm::Instruction *v672;
  uint64_t *v673;
  uint64_t v674;
  uint64_t *v675;
  unint64_t v676;
  llvm::ScalarEvolution *v677;
  unsigned int v678;
  _BOOL4 isBackedgeTakenCountMaxOrZero;
  char v680;
  char *v681;
  char *v682;
  unint64_t v683;
  uint64_t *v684;
  llvm::LoopInfo *v685;
  uint64_t *v686;
  char *v687;
  llvm::ValueAsMetadata **v688;
  llvm::DominatorTree *v689;
  llvm::ScalarEvolution *v690;
  char *__p;
  unint64_t v692;
  char *v693;
  unint64_t v694;
  uint64_t v695;
  llvm::DominatorTree **v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t LoopLatch;
  uint64_t *v701;
  const char *v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  __int16 v706;
  char v707;
  unsigned __int8 *v708;
  void *v709;
  char *v710;
  char *v711;
  char v712[8];
  uint64_t v713;
  void *v714;
  uint64_t *v715;
  unsigned __int8 *v716[2];
  unsigned int v717;
  uint64_t v718[3];
  char v719;
  uint64_t v720;
  uint64_t v721;
  unsigned int v722;
  llvm::Loop *v723;
  void *v724;
  uint64_t v725;
  _QWORD *v726;
  int32x2_t ****v727;
  const char **v728;
  void *v729;
  int v730[2];
  unint64_t *v731;
  int32x2_t ****v732;
  unsigned __int8 **v733;
  const char *v734;
  const char *v735;
  uint64_t v736;
  char v737;
  char v738;
  void *v739;
  uint64_t v740;
  _QWORD v741[26];
  char v742;
  uint64_t *v743;
  void *v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  char v748;
  int v749;
  uint64_t v750;
  _QWORD v751[3];
  __int16 v752;
  std::string v753;
  void *v754;
  char v755;
  void *v756;
  int v757[2];
  _BYTE v758[48];
  void *v759;
  uint64_t v760;
  _BYTE v761[32];
  void *v762;
  uint64_t v763;
  _BYTE v764[32];
  std::string v765;
  __int128 v766;
  void *v767;
  uint64_t v768;
  _BYTE v769[24];
  _QWORD *v770;
  unsigned int v771;
  _QWORD v772[36];

  LOBYTE(v17) = a3;
  v19 = a1;
  v772[34] = *MEMORY[0x1E0C80C00];
  v723 = a1;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
  if (!LoopPredecessor)
    return 0;
  v21 = *(_QWORD *)(LoopPredecessor + 40);
  if (v21 == LoopPredecessor + 40)
    return 0;
  if (v21)
    v22 = v21 - 24;
  else
    v22 = 0;
  if (*(_BYTE *)(v22 + 16) != 30)
  {
    v23 = 0;
    switch(*(_BYTE *)(v22 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        return v23;
      case 0x1E:
LABEL_1143:
        __break(1u);
        goto LABEL_1144;
      case 0x1F:
        v25 = (*(_DWORD *)(v22 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_15;
      case 0x20:
LABEL_1144:
        v25 = (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_15;
      case 0x27:
        v25 = *(_DWORD *)(v22 + 80) + 1;
LABEL_15:
        if (v25 != 1)
          return 0;
        goto LABEL_8;
      default:
        return 0;
    }
  }
  if ((*(_DWORD *)(v22 + 20) & 0x7FFFFFF) == 3)
    return 0;
LABEL_8:
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v19)
    || !llvm::Loop::isSafeToClone(v19)
    || (*(_WORD *)(**((_QWORD **)v19 + 4) + 18) & 0x7FFF) != 0)
  {
    return 0;
  }
  v26 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v19);
  if (!v26)
    goto LABEL_24;
  v27 = *(_QWORD *)(v26 + 40);
  if (v27 == v26 + 40)
    goto LABEL_24;
  if (v27)
    v22 = v27 - 24;
  else
    v22 = 0;
  if (*(_BYTE *)(v22 + 16) != 30)
  {
    v674 = 0;
    switch(*(_BYTE *)(v22 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_29;
      case 0x1E:
        goto LABEL_1143;
      case 0x1F:
        v28 = (*(_DWORD *)(v22 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_27;
      case 0x20:
        v28 = (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_27;
      case 0x27:
        v28 = *(_DWORD *)(v22 + 80) + 1;
LABEL_27:
        if (v28 == 1)
          goto LABEL_28;
        goto LABEL_24;
      default:
        goto LABEL_24;
    }
  }
  if ((*(_DWORD *)(v22 + 20) & 0x7FFFFFF) == 3)
LABEL_24:
    v674 = 0;
  else
LABEL_28:
    v674 = v26;
LABEL_29:
  v685 = (llvm::LoopInfo *)a4;
  v695 = **((_QWORD **)v19 + 4);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v19);
  v762 = v764;
  v763 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v19, (uint64_t)&v762);
  v29 = v723;
  v31 = (_BYTE *)*((_QWORD *)v723 + 4);
  v30 = (_BYTE *)*((_QWORD *)v723 + 5);
  v32 = v30 - v31;
  v689 = (llvm::DominatorTree *)a7;
  v690 = (llvm::ScalarEvolution *)a6;
  v671 = a8;
  if (v30 == v31)
  {
    v672 = 0;
    v675 = 0;
  }
  else
  {
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_1141;
    v33 = (char *)operator new(v30 - v31);
    memmove(v33, v31, v32);
    v672 = (llvm::Instruction *)v33;
    v675 = (uint64_t *)&v33[v32];
  }
  SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a5, v29);
  v677 = (llvm::ScalarEvolution *)a5;
  isBackedgeTakenCountMaxOrZero = llvm::ScalarEvolution::isBackedgeTakenCountMaxOrZero((llvm::ScalarEvolution *)a5, v723);
  v35 = SmallConstantMaxTripCount >= a2 || SmallConstantMaxTripCount == 0;
  v678 = SmallConstantMaxTripCount;
  if (v35)
    a5 = a2;
  else
    a5 = SmallConstantMaxTripCount;
  v721 = 0;
  v720 = 0;
  v722 = 0;
  v759 = v761;
  v760 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v723, (uint64_t)&v759);
  v683 = a5;
  if ((_DWORD)v760)
  {
    v36 = (const llvm::BasicBlock **)v759;
    v37 = (const llvm::BasicBlock **)((char *)v759 + 8 * v760);
    while (1)
    {
      v38 = *v36;
      v39 = (const llvm::BasicBlock *)*((_QWORD *)*v36 + 5);
      if (v39 != (const llvm::BasicBlock *)((char *)*v36 + 40))
      {
        v40 = v39 ? (uint64_t)v39 - 24 : 0;
        v41 = *(unsigned __int8 *)(v40 + 16) - 40;
        v42 = v41 >= 0xFFFFFFF5 ? v40 : 0;
        if (v39)
        {
          if (*(_BYTE *)(v42 + 16) == 30 && v41 >= 0xFFFFFFF5)
            break;
        }
      }
LABEL_84:
      if (++v36 == v37)
        goto LABEL_113;
    }
    if (v722)
    {
      v44 = (v722 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v45 = v720 + 88 * v44;
      v46 = *(const llvm::BasicBlock **)v45;
      if (v38 == *(const llvm::BasicBlock **)v45)
      {
LABEL_72:
        *(_DWORD *)(v45 + 8) = llvm::ScalarEvolution::getSmallConstantTripCount(v677, v723, v38);
        SmallConstantTripMultiple = llvm::ScalarEvolution::getSmallConstantTripMultiple(v677, v723, v38);
        v53 = *(_DWORD *)(v45 + 8);
        if (v53)
        {
          *(_DWORD *)(v45 + 12) = 0;
          *(_DWORD *)(v45 + 16) = v53 % v683;
        }
        else
        {
          LODWORD(v54) = v683;
          if (SmallConstantTripMultiple)
          {
            v55 = SmallConstantTripMultiple;
            v56 = v683;
            do
            {
              v54 = v55;
              v55 = v56 % v55;
              v56 = v54;
            }
            while (v55);
          }
          *(_DWORD *)(v45 + 12) = v54;
          *(_DWORD *)(v45 + 16) = v54;
        }
        v57 = v723;
        v58 = sub_1C477672C((uint64_t)v723 + 56, *(_QWORD *)(v42 - 32));
        v59 = *((_QWORD *)v57 + 8);
        if (v59 == *((_QWORD *)v57 + 7))
          v60 = 76;
        else
          v60 = 72;
        *(_BYTE *)(v45 + 20) = v58 == (_QWORD *)(v59 + 8 * *(unsigned int *)((char *)v57 + v60));
        v61 = *(unsigned int *)(v45 + 32);
        if (v61 >= *(unsigned int *)(v45 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v45 + 24, v45 + 40, v61 + 1, 8);
          v61 = *(unsigned int *)(v45 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v45 + 24) + 8 * v61) = v38;
        ++*(_DWORD *)(v45 + 32);
        a5 = v683;
        goto LABEL_84;
      }
      v47 = 0;
      v48 = 1;
      while (v46 != (const llvm::BasicBlock *)-4096)
      {
        if (v47)
          v49 = 0;
        else
          v49 = v46 == (const llvm::BasicBlock *)-8192;
        if (v49)
          v47 = v45;
        v50 = v44 + v48++;
        v44 = v50 & (v722 - 1);
        v45 = v720 + 88 * v44;
        v46 = *(const llvm::BasicBlock **)v45;
        if (v38 == *(const llvm::BasicBlock **)v45)
          goto LABEL_72;
      }
      if (v47)
        v45 = v47;
    }
    else
    {
      v45 = 0;
    }
    if (4 * (int)v721 + 4 >= 3 * v722)
    {
      sub_1C5F2E744(&v720, 2 * v722);
      v62 = (v722 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v45 = v720 + 88 * v62;
      v63 = *(const llvm::BasicBlock **)v45;
      if (v38 == *(const llvm::BasicBlock **)v45)
        goto LABEL_100;
      v64 = 0;
      v65 = 1;
      while (v63 != (const llvm::BasicBlock *)-4096)
      {
        if (v64)
          v66 = 0;
        else
          v66 = v63 == (const llvm::BasicBlock *)-8192;
        if (v66)
          v64 = v45;
        v67 = v62 + v65++;
        v62 = v67 & (v722 - 1);
        v45 = v720 + 88 * v62;
        v63 = *(const llvm::BasicBlock **)v45;
        if (v38 == *(const llvm::BasicBlock **)v45)
          goto LABEL_100;
      }
    }
    else
    {
      if (v722 + ~(_DWORD)v721 - HIDWORD(v721) > v722 >> 3)
      {
LABEL_68:
        v51 = *(const llvm::BasicBlock **)v45;
LABEL_69:
        LODWORD(v721) = v721 + 1;
        if (v51 != (const llvm::BasicBlock *)-4096)
          --HIDWORD(v721);
        *(_QWORD *)v45 = v38;
        *(_OWORD *)(v45 + 24) = 0u;
        *(_OWORD *)(v45 + 8) = 0u;
        *(_OWORD *)(v45 + 56) = 0u;
        *(_OWORD *)(v45 + 72) = 0u;
        *(_OWORD *)(v45 + 40) = 0u;
        *(_QWORD *)(v45 + 24) = v45 + 40;
        *(_DWORD *)(v45 + 36) = 6;
        goto LABEL_72;
      }
      sub_1C5F2E744(&v720, v722);
      v68 = (v722 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v45 = v720 + 88 * v68;
      v69 = *(const llvm::BasicBlock **)v45;
      if (v38 == *(const llvm::BasicBlock **)v45)
      {
LABEL_100:
        v51 = v38;
        goto LABEL_69;
      }
      v64 = 0;
      v70 = 1;
      while (v69 != (const llvm::BasicBlock *)-4096)
      {
        if (v64)
          v71 = 0;
        else
          v71 = v69 == (const llvm::BasicBlock *)-8192;
        if (v71)
          v64 = v45;
        v72 = v68 + v70++;
        v68 = v72 & (v722 - 1);
        v45 = v720 + 88 * v68;
        v69 = *(const llvm::BasicBlock **)v45;
        if (v38 == *(const llvm::BasicBlock **)v45)
          goto LABEL_100;
      }
    }
    if (v64)
      v45 = v64;
    goto LABEL_68;
  }
LABEL_113:
  a7 = 0;
  v73 = a2 >> 40;
  v74 = v678;
  if ((_DWORD)a5 == v678)
    LOBYTE(v73) = 0;
  v680 = v73;
  if ((_DWORD)a5 == v678)
  {
    a8 = v689;
    a6 = LoopLatch;
    if (a10)
    {
      if ((_DWORD)v763)
      {
        v75 = (uint64_t *)v762;
        v76 = 8 * v763 - 8;
        do
        {
          v77 = *v75++;
          v78 = *(_QWORD *)(v77 + 48);
          if (v78)
            v79 = v78 - 24;
          else
            v79 = 0;
          v80 = *(unsigned __int8 *)(v79 + 16);
          a7 = v80 == 83;
          v81 = v80 == 83 || v76 == 0;
          v76 -= 8;
        }
        while (!v81);
        v680 = 0;
      }
      else
      {
        v680 = 0;
        a7 = 0;
      }
    }
  }
  else
  {
    a8 = v689;
    a6 = LoopLatch;
  }
  v82 = *(_QWORD *)(a6 + 40);
  if (v82 == a6 + 40)
  {
    a4 = 0;
  }
  else
  {
    if (v82)
      v83 = v82 - 24;
    else
      v83 = 0;
    if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB)
      a4 = 0;
    else
      a4 = v83;
  }
  v84 = *(unsigned __int8 *)(a4 + 16);
  isLoopExiting = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v723, a6);
  v23 = 0;
  if (!a4 || v84 != 30)
    goto LABEL_1050;
  v670 = isLoopExiting;
  v86 = (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) != 3 || isLoopExiting;
  if (v86 != 1)
  {
LABEL_150:
    v23 = 0;
    goto LABEL_1050;
  }
  if (word_1ED827548)
  {
    v87 = byte_1ED8275C0 != 0;
    v88 = v685;
LABEL_146:
    v89 = a10;
    goto LABEL_147;
  }
  v19 = v723;
  v91 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v723);
  v88 = v685;
  if (!v91)
    goto LABEL_157;
  v92 = *(_QWORD *)(v91 + 40);
  if (v92 == v91 + 40)
    goto LABEL_157;
  v93 = v92 - 24;
  if (!v92)
    v93 = 0;
  v94 = *(unsigned __int8 *)(v93 + 16);
  v95 = v94 - 29;
  if (v94 != 30)
  {
    v22 = 0;
    switch(v95)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_1067;
      case 1:
        goto LABEL_1143;
      case 2:
        v640 = (*(_DWORD *)(v93 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_1065;
      case 3:
        v640 = (*(_DWORD *)(v93 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_1065;
      case 10:
        v640 = *(_DWORD *)(v93 + 80) + 1;
LABEL_1065:
        if (v640 == 1)
          goto LABEL_1066;
        goto LABEL_157;
      default:
        goto LABEL_157;
    }
  }
  if ((*(_DWORD *)(v93 + 20) & 0x7FFFFFF) == 3)
LABEL_157:
    v22 = 0;
  else
LABEL_1066:
    v22 = v91;
LABEL_1067:
  if (*(_QWORD *)(**((_QWORD **)v19 + 4) + 40) == **((_QWORD **)v19 + 4) + 40)
  {
    v87 = 0;
    goto LABEL_146;
  }
  v87 = 0;
  v641 = *(_QWORD *)(**((_QWORD **)v19 + 4) + 48);
  v642 = v641 - 24;
  if (v641)
    v643 = v641 - 24;
  else
    v643 = 0;
  v89 = a10;
  if (v641)
  {
    do
    {
      if (*(_BYTE *)(v643 + 16) != 83)
        break;
      v644 = *(_DWORD *)(v642 + 20);
      v645 = v644 & 0x7FFFFFF;
      if ((v644 & 0x7FFFFFF) != 0)
      {
        v646 = 0;
        while (1)
        {
          v647 = v642 - 32 * v645;
          if ((v644 & 0x40000000) != 0)
            v647 = *(_QWORD *)(v642 - 8);
          if (*(_QWORD *)(v647 + 32 * *(unsigned int *)(v642 + 60) + 8 * v646) == v22)
            break;
          if (v645 == ++v646)
            goto LABEL_1079;
        }
      }
      else
      {
LABEL_1079:
        LODWORD(v646) = -1;
      }
      v648 = (v644 & 0x40000000) != 0 ? *(_QWORD *)(v642 - 8) : v642 - 32 * v645;
      v649 = *(unsigned __int8 *)(*(_QWORD *)(v648 + 32 * v646) + 16);
      v87 = v649 == 16;
      if (v649 == 16)
        break;
      v650 = *(_QWORD *)(v642 + 32);
      v642 = v650 - 24;
      v643 = v650 ? v650 - 24 : 0;
    }
    while (v650);
  }
LABEL_147:
  v90 = v17;
  if (v680)
  {
    LOBYTE(v667) = v89;
    if ((llvm::UnrollRuntimeLoopRemainder(v723, (llvm::Loop *)a5, (a2 & 0xFF000000000000) != 0, v87, HIBYTE(a2) != 0, v17 != 0, v88, v677, v690, a8, v671, v667, a12, v668) & 1) == 0)
    {
      v680 = 0;
      if ((a2 & 0xFF00000000) == 0)
        goto LABEL_150;
    }
  }
  else
  {
    v680 = 0;
  }
  v669 = a7;
  if ((_DWORD)a5 != v678)
  {
    if (!a9)
      goto LABEL_168;
    v96 = ****(_QWORD ****)a9;
    if (!*(_QWORD *)(v96 + 128)
      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v96 + 72) + 48))(*(_QWORD *)(v96 + 72)))
    {
      goto LABEL_168;
    }
    llvm::Loop::getStartLoc(v723, &v765);
    if (v765.__r_.__value_.__r.__words[0])
    {
      v97 = *(_QWORD *)(v765.__r_.__value_.__r.__words[0]
                      - 8 * *(unsigned int *)(v765.__r_.__value_.__r.__words[0] + 8));
      if (*(_BYTE *)v97 != 15)
        v97 = *(_QWORD *)(v97 - 8 * *(unsigned int *)(v97 + 8));
      v98 = *(_DWORD *)(v765.__r_.__value_.__r.__words[0] + 4);
      v99 = *(unsigned __int16 *)(v765.__r_.__value_.__r.__words[0] + 2);
      LODWORD(a5) = v683;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v99 = 0;
    }
    v654 = **((_QWORD **)v723 + 4);
    v655 = *(unint64_t **)(v654 + 56);
    v730[0] = 9;
    LOBYTE(v730[1]) = 2;
    v731 = v655;
    v732 = (int32x2_t ****)v97;
    v733 = (unsigned __int8 **)__PAIR64__(v99, v98);
    v734 = "loop-unroll";
    v735 = "PartialUnrolled";
    v736 = 15;
    v737 = 0;
    v738 = 0;
    v739 = v741;
    v740 = 0x400000000;
    v748 = 0;
    v749 = -1;
    v750 = v654;
    v729 = &off_1E814E500;
    if (v765.__r_.__value_.__r.__words[0])
      llvm::MetadataTracking::untrack((uint64_t)&v765, (unsigned __int8 *)v765.__r_.__value_.__l.__data_);
    v765.__r_.__value_.__r.__words[0] = (std::string::size_type)"unrolled loop by a factor of ";
    v765.__r_.__value_.__l.__size_ = 29;
    sub_1C53B17B4((uint64_t)&v739, (const void **)&v765.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v765, "UnrollCount", 0xBuLL, a5);
    sub_1C47E3888((uint64_t)&v729, (uint64_t)&v765);
    if (SHIBYTE(v767) < 0)
      operator delete((void *)v766);
    if (SHIBYTE(v765.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v765.__r_.__value_.__l.__data_);
    if (v680)
    {
      v753.__r_.__value_.__r.__words[0] = (std::string::size_type)" with run-time trip count";
      v753.__r_.__value_.__l.__size_ = 25;
      sub_1C53B17B4((uint64_t)&v739, (const void **)&v753.__r_.__value_.__l.__data_);
    }
    llvm::OptimizationRemarkEmitter::emit(a9, (llvm::DiagnosticInfoOptimizationBase *)&v729);
    v729 = &off_1E814E790;
    v656 = v739;
    if ((_DWORD)v740)
    {
      v657 = (unint64_t)v740 << 6;
      do
      {
        v658 = (void **)((char *)v656 + v657);
        if (*((char *)v656 + v657 - 17) < 0)
          operator delete(*(v658 - 5));
        if (*((char *)v658 - 41) < 0)
          operator delete(*(v658 - 8));
        v657 -= 64;
      }
      while (v657);
      v656 = v739;
    }
    a8 = v689;
    a6 = LoopLatch;
    if (v656 == v741)
      goto LABEL_168;
LABEL_1140:
    free(v656);
    goto LABEL_168;
  }
  if (a9)
  {
    v100 = ****(_QWORD ****)a9;
    if (*(_QWORD *)(v100 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v100 + 72) + 48))(*(_QWORD *)(v100 + 72)))
    {
      llvm::Loop::getStartLoc(v723, v716);
      v651 = v716[0];
      if (v716[0])
      {
        v652 = *(_QWORD *)&v716[0][-8 * *((unsigned int *)v716[0] + 2)];
        if (*(_BYTE *)v652 != 15)
          v652 = *(_QWORD *)(v652 - 8 * *(unsigned int *)(v652 + 8));
        v653 = *((_DWORD *)v716[0] + 1);
        v651 = *((unsigned __int16 *)v716[0] + 1);
        v74 = v678;
      }
      else
      {
        v652 = 0;
        v653 = 0;
      }
      v659 = **((_QWORD **)v723 + 4);
      v660 = *(unint64_t **)(v659 + 56);
      v730[0] = 9;
      LOBYTE(v730[1]) = 2;
      v731 = v660;
      v732 = (int32x2_t ****)v652;
      v733 = (unsigned __int8 **)__PAIR64__(v651, v653);
      v734 = "loop-unroll";
      v735 = "FullyUnrolled";
      v736 = 13;
      v737 = 0;
      v738 = 0;
      v739 = v741;
      v740 = 0x400000000;
      v748 = 0;
      v749 = -1;
      v750 = v659;
      v729 = &off_1E814E500;
      v765.__r_.__value_.__r.__words[0] = (std::string::size_type)"completely unrolled loop with ";
      v765.__r_.__value_.__l.__size_ = 30;
      sub_1C53B17B4((uint64_t)&v739, (const void **)&v765.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v753, "UnrollCount", 0xBuLL, v74);
      v661 = sub_1C47E3888((uint64_t)&v729, (uint64_t)&v753);
      v765.__r_.__value_.__r.__words[0] = (std::string::size_type)" iterations";
      v765.__r_.__value_.__l.__size_ = 11;
      sub_1C53B17B4(v661 + 80, (const void **)&v765.__r_.__value_.__l.__data_);
      sub_1C61998EC((uint64_t)&v765, v661);
      v765.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E500;
      if (v755 < 0)
        operator delete(v754);
      if (SHIBYTE(v753.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v753.__r_.__value_.__l.__data_);
      v729 = &off_1E814E790;
      v662 = (char *)v739;
      if ((_DWORD)v740)
      {
        v663 = (unint64_t)v740 << 6;
        do
        {
          v664 = (void **)&v662[v663];
          if (v662[v663 - 17] < 0)
            operator delete(*(v664 - 5));
          if (*((char *)v664 - 41) < 0)
            operator delete(*(v664 - 8));
          v663 -= 64;
        }
        while (v663);
        v662 = (char *)v739;
      }
      if (v662 != (char *)v741)
        free(v662);
      if (v716[0])
        llvm::MetadataTracking::untrack((uint64_t)v716, v716[0]);
      llvm::OptimizationRemarkEmitter::emit(a9, (llvm::DiagnosticInfoOptimizationBase *)&v765);
      v765.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
      v656 = v770;
      if (v771)
      {
        v665 = (unint64_t)v771 << 6;
        do
        {
          v666 = (void **)((char *)v656 + v665);
          if (*((char *)v656 + v665 - 17) < 0)
            operator delete(*(v666 - 5));
          if (*((char *)v666 - 41) < 0)
            operator delete(*(v666 - 8));
          v665 -= 64;
        }
        while (v665);
        v656 = v770;
      }
      a8 = v689;
      LODWORD(a5) = v683;
      a6 = LoopLatch;
      if (v656 != v772)
        goto LABEL_1140;
    }
  }
LABEL_168:
  if (v677)
  {
    if (v90)
    {
      llvm::ScalarEvolution::forgetAllLoops(v677);
    }
    else
    {
      v101 = v723;
      do
      {
        v102 = v101;
        v101 = *(llvm::Loop **)v101;
      }
      while (v101);
      llvm::ScalarEvolution::forgetLoop((int32x2_t *)v677, v102);
    }
  }
  v717 = 128;
  v103 = (unsigned __int8 *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v716[0] = v103;
  v716[1] = 0;
  v19 = (llvm::Loop *)&unk_1E814DA00;
  if (v717)
  {
    v104 = (unint64_t)v717 << 6;
    v105 = v103 + 16;
    do
    {
      *v105 = 0;
      v105[1] = -4096;
      *(v105 - 2) = &unk_1E814DA10;
      *(v105 - 1) = 2;
      v105[2] = 0;
      v105 += 8;
      v104 -= 64;
    }
    while (v104);
  }
  v106 = 0;
  v107 = 0;
  LOBYTE(v718[0]) = 0;
  v719 = 0;
  v108 = *(_QWORD *)(v695 + 48);
  v109 = v108 - 24;
  if (v108)
    v110 = v108 - 24;
  else
    v110 = 0;
  if (*(_BYTE *)(v110 + 16) == 83)
  {
    v111 = 0;
    v112 = 0;
    v106 = 0;
    do
    {
      if (v112 >= v111)
      {
        a5 = (v112 - v106) >> 3;
        v114 = a5 + 1;
        if ((a5 + 1) >> 61)
          goto LABEL_1141;
        if ((v111 - v106) >> 2 > v114)
          v114 = (v111 - v106) >> 2;
        if ((unint64_t)(v111 - v106) >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          if (v115 >> 61)
LABEL_1142:
            sub_1C4764EE4();
          v116 = (char *)operator new(8 * v115);
        }
        else
        {
          v116 = 0;
        }
        v117 = &v116[8 * a5];
        *(_QWORD *)v117 = v109;
        v107 = v117 + 8;
        if (v112 == v106)
        {
          v106 = &v116[8 * a5];
          LODWORD(a5) = v683;
        }
        else
        {
          LODWORD(a5) = v683;
          do
          {
            v118 = *((_QWORD *)v112 - 1);
            v112 -= 8;
            *((_QWORD *)v117 - 1) = v118;
            v117 -= 8;
          }
          while (v112 != v106);
          v112 = v106;
          v106 = v117;
        }
        v111 = &v116[8 * v115];
        if (!v112)
          goto LABEL_201;
        v119 = v112;
        v113 = v107;
        operator delete(v119);
      }
      else
      {
        *(_QWORD *)v112 = v109;
        v113 = v112 + 8;
      }
      v107 = v113;
LABEL_201:
      v108 = *(_QWORD *)(v108 + 8);
      v109 = v108 - 24;
      if (v108)
        v120 = v108 - 24;
      else
        v120 = 0;
      v112 = (char *)v107;
    }
    while (*(_BYTE *)(v120 + 16) == 83);
  }
  v696 = (llvm::DominatorTree **)v107;
  v688 = (llvm::ValueAsMetadata **)v106;
  v693 = (char *)operator new(8uLL);
  *(_QWORD *)v693 = v695;
  v682 = v693 + 8;
  __p = (char *)operator new(8uLL);
  *(_QWORD *)__p = a6;
  v687 = __p + 8;
  sub_1C4DFE414((uint64_t)v712, (uint64_t)v723);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v712, v685);
  v17 = v715;
  v686 = (uint64_t *)v714;
  v121 = v723;
  v123 = (_BYTE *)*((_QWORD *)v723 + 4);
  v122 = (_BYTE *)*((_QWORD *)v723 + 5);
  v710 = 0;
  v711 = 0;
  v709 = 0;
  v124 = v122 - v123;
  if (v122 == v123)
    goto LABEL_208;
  if (v124 < 0)
LABEL_1141:
    abort();
  v709 = operator new(v122 - v123);
  v710 = (char *)v709;
  v125 = (char *)v709 + 8 * (v124 >> 3);
  v711 = v125;
  memmove(v709, v123, v124);
  v710 = v125;
LABEL_208:
  v765.__r_.__value_.__r.__words[0] = 1;
  *(int64x2_t *)&v765.__r_.__value_.__r.__words[1] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v766 = *(_OWORD *)&v765.__r_.__value_.__r.__words[1];
  v767 = v769;
  v768 = 0x400000000;
  v127 = (void **)*((_QWORD *)v121 + 1);
  v126 = (void **)*((_QWORD *)v121 + 2);
  while (v127 != v126)
  {
    v128 = *v127++;
    v729 = v128;
    sub_1C5F2E2A4((uint64_t)&v765, (uint64_t *)&v729);
  }
  isDebugInfoForProfiling = llvm::Function::isDebugInfoForProfiling(*(llvm::Function **)(v695 + 56));
  v130 = v723;
  if (isDebugInfoForProfiling)
    v131 = byte_1ED830650 == 0;
  else
    v131 = 0;
  v673 = v17;
  if (v131)
  {
    v132 = *((_QWORD *)v723 + 4);
    v133 = *((_QWORD *)v723 + 5);
    if (v133 != v132)
    {
      do
      {
        v134 = *(_QWORD *)v132 + 40;
        for (i = *(_QWORD *)(*(_QWORD *)v132 + 48); i != v134; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v136 = i - 24;
          else
            v136 = 0;
          if (!sub_1C4D99D08(v136))
          {
            v139 = *(_QWORD *)(v136 + 48);
            v138 = (unsigned __int8 **)(v136 + 48);
            v137 = v139;
            if (v139)
            {
              v140 = (unsigned __int8 *)sub_1C5F2E3BC(v137, a5);
              if (v141)
              {
                v708 = v140;
                if (v140)
                  llvm::MetadataTracking::track((uint64_t)&v708, v140, 2);
                if (&v708 == v138)
                {
                  if (v708)
                    llvm::MetadataTracking::untrack((uint64_t)&v708, v708);
                }
                else
                {
                  if (*v138)
                    llvm::MetadataTracking::untrack((uint64_t)v138, *v138);
                  v142 = v708;
                  *v138 = v708;
                  if (v142)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v708, v142, (uint64_t)v138);
                    v708 = 0;
                  }
                }
              }
            }
          }
        }
        v132 += 8;
      }
      while (v132 != v133);
      v130 = v723;
    }
  }
  v756 = v758;
  *(_QWORD *)v757 = 0x600000000;
  llvm::identifyNoAliasScopesToClone(*((char **)v130 + 4), (uint64_t)(*((_QWORD *)v130 + 5) - *((_QWORD *)v130 + 4)) >> 3, (uint64_t)&v756);
  if ((_DWORD)a5 == 1)
  {
    v144 = v688;
    goto LABEL_239;
  }
  v684 = *(uint64_t **)(a6 + 32);
  a4 = 2;
  v698 = 1;
  a5 = (unint64_t)(v693 + 8);
  v681 = __p + 8;
  do
  {
    v729 = &v731;
    *(_QWORD *)v730 = 0x800000000;
    v219 = 1;
    v753.__r_.__value_.__r.__words[0] = 1;
    do
    {
      v753.__r_.__value_.__r.__words[v219] = -4096;
      v219 += 2;
    }
    while (v219 != 9);
    v220 = v723;
    if ((v753.__r_.__value_.__s.__data_[0] & 1) != 0)
    {
      v221 = 4;
      p_size = (std::string::size_type)&v753.__r_.__value_.__l.__size_;
    }
    else
    {
      v221 = v753.__r_.__value_.__r.__words[2];
      if (!LODWORD(v753.__r_.__value_.__r.__words[2]))
      {
        v231 = 0;
        goto LABEL_361;
      }
      p_size = v753.__r_.__value_.__l.__size_;
    }
    v223 = v221 - 1;
    v224 = v223 & ((v723 >> 4) ^ (v723 >> 9));
    v225 = (llvm::Loop **)(p_size + 16 * v224);
    v226 = *v225;
    if (v723 == *v225)
      goto LABEL_362;
    v227 = 0;
    v228 = 1;
    while (v226 != (llvm::Loop *)-4096)
    {
      if (v227)
        v229 = 0;
      else
        v229 = v226 == (llvm::Loop *)-8192;
      if (v229)
        v227 = v225;
      v230 = v224 + v228++;
      v224 = v230 & v223;
      v225 = (llvm::Loop **)(p_size + 16 * v224);
      v226 = *v225;
      if (v723 == *v225)
        goto LABEL_362;
    }
    if (v227)
      v231 = v227;
    else
      v231 = v225;
LABEL_361:
    v225 = (llvm::Loop **)sub_1C55B6340((uint64_t)&v753, (uint64_t)&v723, &v723, v231);
    *v225 = v723;
    v225[1] = 0;
LABEL_362:
    v225[1] = v220;
    if (v17 != v686)
    {
      while (1)
      {
        LODWORD(v704) = 128;
        v232 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
        v702 = v232;
        v703 = 0;
        if ((_DWORD)v704)
        {
          v233 = (unint64_t)v704 << 6;
          v234 = v232 + 16;
          do
          {
            *v234 = 0;
            v234[1] = -4096;
            *(v234 - 2) = (char *)v19 + 16;
            *(v234 - 1) = 2;
            v234[2] = 0;
            v234 += 8;
            v233 -= 64;
          }
          while (v233);
        }
        LOBYTE(v705) = 0;
        v707 = 0;
        v235 = (uint64_t ***)*--v17;
        v724 = ".";
        v692 = v692 & 0xFFFFFFFF00000000 | v698;
        v726 = (_QWORD *)v692;
        LOWORD(v728) = 2051;
        v236 = (_QWORD *)llvm::CloneBasicBlock(v235, (uint64_t)&v702, (uint64_t)&v724, 0, 0, 0);
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(*(_QWORD *)(v695 + 56) + 72, v236);
        v237 = *v684;
        v236[4] = v684;
        v236[3] = v237;
        *(_QWORD *)(v237 + 8) = v236 + 3;
        *v684 = (uint64_t)(v236 + 3);
        v701 = 0;
        v238 = llvm::addClonedBlockToLoopInfo(*v17, (uint64_t)v236, (uint64_t)v685, (uint64_t)&v753);
        v701 = v238;
        a7 = (unint64_t)v716;
        if (v238)
          break;
LABEL_384:
        v250 = *v17;
        v694 = a5;
        if (*v17 == v695 && v688 != v696)
        {
          v251 = (uint64_t)(v236 + 5);
          v252 = v688;
          do
          {
            a8 = *v252;
            v725 = 2;
            v726 = 0;
            v727 = (int32x2_t ****)a8;
            if (a8 != (llvm::DominatorTree *)-8192 && a8 != (llvm::DominatorTree *)-4096 && a8 != 0)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
            v724 = (char *)v19 + 16;
            v728 = &v702;
            v254 = sub_1C52E2ED8((uint64_t)&v702, &v724);
            if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727 != 0)
            {
              v256 = v725 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
              if (v726)
              {
                *v726 = *v726 & 7 | v256;
              }
              else
              {
                v257 = v727;
                v258 = ***v727;
                v259 = (unint64_t)v258[303];
                if (v259 <= v256)
                {
                  v260 = v258[305].u32[0];
                  if (v259 + 16 * v260 > v256)
                  {
                    v261 = v260 - 1;
                    LODWORD(v262) = v261 & ((v727 >> 4) ^ (v727 >> 9));
                    v263 = (int32x2_t *****)(v259 + 16 * v262);
                    v264 = *v263;
                    if (v727 == *v263)
                    {
LABEL_406:
                      *v263 = (int32x2_t ****)-8192;
                      v258[304] = vadd_s32(v258[304], (int32x2_t)0x1FFFFFFFFLL);
                      v257 = v727;
                    }
                    else
                    {
                      v265 = 1;
                      while (v264 != (int32x2_t ****)-4096)
                      {
                        v266 = v262 + v265++;
                        v262 = v266 & v261;
                        v264 = *(int32x2_t *****)(v259 + 16 * v262);
                        if (v727 == v264)
                        {
                          v263 = (int32x2_t *****)(v259 + 16 * v262);
                          goto LABEL_406;
                        }
                      }
                    }
                    *((_BYTE *)v257 + 17) &= ~1u;
                  }
                }
              }
            }
            v267 = v254[7];
            v268 = *(_DWORD *)(v267 + 20);
            v269 = v268 & 0x7FFFFFF;
            if ((v268 & 0x7FFFFFF) != 0)
            {
              v270 = 0;
              while (1)
              {
                v271 = v267 - 32 * v269;
                if ((v268 & 0x40000000) != 0)
                  v271 = *(_QWORD *)(v267 - 8);
                if (*(_QWORD *)(v271 + 32 * *(unsigned int *)(v267 + 60) + 8 * v270) == a6)
                  break;
                if (v269 == ++v270)
                  goto LABEL_415;
              }
            }
            else
            {
LABEL_415:
              LODWORD(v270) = -1;
            }
            if ((v268 & 0x40000000) != 0)
              v272 = *(_QWORD *)(v267 - 8);
            else
              v272 = v267 - 32 * v269;
            v273 = *(_QWORD *)(v272 + 32 * v270);
            if (*(unsigned __int8 *)(v273 + 16) <= 0x1Bu)
              v274 = 0;
            else
              v274 = *(_QWORD *)(v272 + 32 * v270);
            if (v698 >= 2 && v274)
            {
              v275 = v19;
              v276 = v251;
              v277 = v723;
              v278 = sub_1C477672C((uint64_t)v723 + 56, *(_QWORD *)(v274 + 40));
              v279 = *((_QWORD *)v277 + 8);
              v280 = 72;
              if (v279 == *((_QWORD *)v277 + 7))
                v280 = 76;
              v281 = *(unsigned int *)((char *)v277 + v280);
              v251 = v276;
              v19 = v275;
              a4 = 2;
              if (v278 != (_QWORD *)(v279 + 8 * v281))
              {
                v725 = 2;
                v726 = 0;
                v727 = (int32x2_t ****)v274;
                if (v274 != -8192 && v274 != -4096 && v274 != 0)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
                v724 = (char *)v19 + 16;
                v728 = (const char **)v716;
                v283 = sub_1C52E2ED8((uint64_t)v716, &v724);
                if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727)
                {
                  v284 = v725 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
                  if (v726)
                  {
                    *v726 = *v726 & 7 | v284;
                  }
                  else
                  {
                    v285 = v727;
                    v286 = ***v727;
                    v287 = (unint64_t)v286[303];
                    if (v287 <= v284)
                    {
                      v288 = v286[305].u32[0];
                      if (v287 + 16 * v288 > v284)
                      {
                        v289 = v288 - 1;
                        LODWORD(v290) = v289 & ((v727 >> 4) ^ (v727 >> 9));
                        v291 = (int32x2_t *****)(v287 + 16 * v290);
                        v292 = *v291;
                        if (v727 == *v291)
                        {
LABEL_443:
                          *v291 = (int32x2_t ****)-8192;
                          v286[304] = vadd_s32(v286[304], (int32x2_t)0x1FFFFFFFFLL);
                          v285 = v727;
                        }
                        else
                        {
                          v293 = 1;
                          while (v292 != (int32x2_t ****)-4096)
                          {
                            v294 = v290 + v293++;
                            v290 = v294 & v289;
                            v292 = *(int32x2_t *****)(v287 + 16 * v290);
                            if (v727 == v292)
                            {
                              v291 = (int32x2_t *****)(v287 + 16 * v290);
                              goto LABEL_443;
                            }
                          }
                        }
                        *((_BYTE *)v285 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v273 = v283[7];
              }
            }
            v725 = 2;
            v726 = 0;
            v727 = (int32x2_t ****)a8;
            if (a8 != (llvm::DominatorTree *)-8192 && a8 != (llvm::DominatorTree *)-4096 && a8)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
            v724 = (char *)v19 + 16;
            v728 = &v702;
            v295 = sub_1C52E2ED8((uint64_t)&v702, &v724);
            if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727)
            {
              v296 = v725 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
              if (v726)
              {
                *v726 = *v726 & 7 | v296;
              }
              else
              {
                v297 = v727;
                v298 = ***v727;
                v299 = (unint64_t)v298[303];
                if (v299 <= v296)
                {
                  v300 = v298[305].u32[0];
                  if (v299 + 16 * v300 > v296)
                  {
                    v301 = v300 - 1;
                    LODWORD(v302) = v301 & ((v727 >> 4) ^ (v727 >> 9));
                    v303 = (int32x2_t *****)(v299 + 16 * v302);
                    v304 = *v303;
                    if (v727 == *v303)
                    {
LABEL_462:
                      *v303 = (int32x2_t ****)-8192;
                      v298[304] = vadd_s32(v298[304], (int32x2_t)0x1FFFFFFFFLL);
                      v297 = v727;
                    }
                    else
                    {
                      v305 = 1;
                      while (v304 != (int32x2_t ****)-4096)
                      {
                        v306 = v302 + v305++;
                        v302 = v306 & v301;
                        v304 = *(int32x2_t *****)(v299 + 16 * v302);
                        if (v727 == v304)
                        {
                          v303 = (int32x2_t *****)(v299 + 16 * v302);
                          goto LABEL_462;
                        }
                      }
                    }
                    *((_BYTE *)v297 + 17) &= ~1u;
                  }
                }
              }
            }
            v307 = v295[7];
            if (v307 != v273)
            {
              if (v307 && v307 != -8192 && v307 != -4096)
              {
                v313 = v295[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v313 = v295[6];
                v314 = (unint64_t *)v295[6];
                if (v314)
                {
                  *v314 = *v314 & 7 | v313;
                }
                else
                {
                  v315 = v295[7];
                  v316 = ***(int32x2_t ****)v315;
                  v317 = (unint64_t)v316[303];
                  if (v317 <= v313)
                  {
                    v318 = v316[305].u32[0];
                    if (v317 + 16 * v318 > v313)
                    {
                      v319 = v318 - 1;
                      LODWORD(v320) = v319 & ((v315 >> 4) ^ (v315 >> 9));
                      v321 = (uint64_t *)(v317 + 16 * v320);
                      v322 = *v321;
                      if (v315 == *v321)
                      {
LABEL_488:
                        *v321 = -8192;
                        v316[304] = vadd_s32(v316[304], (int32x2_t)0x1FFFFFFFFLL);
                        v315 = v295[7];
                      }
                      else
                      {
                        v323 = 1;
                        while (v322 != -4096)
                        {
                          v324 = v320 + v323++;
                          v320 = v324 & v319;
                          v322 = *(_QWORD *)(v317 + 16 * v320);
                          if (v315 == v322)
                          {
                            v321 = (uint64_t *)(v317 + 16 * v320);
                            goto LABEL_488;
                          }
                        }
                      }
                      *(_BYTE *)(v315 + 17) &= ~1u;
                    }
                  }
                }
              }
              v295[7] = v273;
              if (v273 != -8192 && v273 != -4096 && v273)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v295 + 5));
            }
            v308 = v267 + 24;
            if (!v267)
              v308 = 0;
            v309 = v308 - 24;
            if (v267)
              v310 = v309;
            else
              v310 = 0;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v251, (uint64_t ***)v310);
            v311 = *(_QWORD *)(v310 + 24);
            v312 = *(_QWORD **)(v310 + 32);
            *v312 = v311;
            *(_QWORD *)(v311 + 8) = v312;
            *(_QWORD *)(v310 + 24) = 0;
            *(_QWORD *)(v310 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v310);
            ++v252;
            a6 = LoopLatch;
          }
          while (v252 != v696);
          v250 = *v17;
          a7 = (unint64_t)v716;
        }
        v725 = 2;
        v726 = 0;
        v727 = (int32x2_t ****)v250;
        if (v250 != -8192 && v250 != -4096 && v250)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
        v724 = &unk_1E814DA10;
        v728 = (const char **)v716;
        v325 = sub_1C52E2ED8((uint64_t)v716, &v724);
        if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727)
        {
          v326 = v725 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
          if (v726)
          {
            *v726 = *v726 & 7 | v326;
          }
          else
          {
            v327 = v727;
            v328 = ***v727;
            v329 = (unint64_t)v328[303];
            if (v329 <= v326)
            {
              v330 = v328[305].u32[0];
              if (v329 + 16 * v330 > v326)
              {
                v331 = v330 - 1;
                LODWORD(v332) = v331 & ((v727 >> 4) ^ (v727 >> 9));
                v333 = (int32x2_t *****)(v329 + 16 * v332);
                v334 = *v333;
                if (v727 == *v333)
                {
LABEL_507:
                  *v333 = (int32x2_t ****)-8192;
                  v328[304] = vadd_s32(v328[304], (int32x2_t)0x1FFFFFFFFLL);
                  v327 = v727;
                }
                else
                {
                  v335 = 1;
                  while (v334 != (int32x2_t ****)-4096)
                  {
                    v336 = v332 + v335++;
                    v332 = v336 & v331;
                    v334 = *(int32x2_t *****)(v329 + 16 * v332);
                    if (v727 == v334)
                    {
                      v333 = (int32x2_t *****)(v329 + 16 * v332);
                      goto LABEL_507;
                    }
                  }
                }
                *((_BYTE *)v327 + 17) &= ~1u;
              }
            }
          }
        }
        v337 = (_QWORD *)v325[7];
        if (v337 != v236)
        {
          if (v337 && v337 != (_QWORD *)-8192 && v337 != (_QWORD *)-4096)
          {
            v490 = v325[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v490 = v325[6];
            v491 = (unint64_t *)v325[6];
            if (v491)
            {
              *v491 = *v491 & 7 | v490;
            }
            else
            {
              v492 = v325[7];
              v493 = ***(int32x2_t ****)v492;
              v494 = (unint64_t)v493[303];
              if (v494 <= v490)
              {
                v495 = v493[305].u32[0];
                if (v494 + 16 * v495 > v490)
                {
                  v496 = v495 - 1;
                  LODWORD(v497) = v496 & ((v492 >> 4) ^ (v492 >> 9));
                  v498 = (uint64_t *)(v494 + 16 * v497);
                  v499 = *v498;
                  if (v492 == *v498)
                  {
LABEL_772:
                    *v498 = -8192;
                    v493[304] = vadd_s32(v493[304], (int32x2_t)0x1FFFFFFFFLL);
                    v492 = v325[7];
                  }
                  else
                  {
                    v500 = 1;
                    while (v499 != -4096)
                    {
                      v501 = v497 + v500++;
                      v497 = v501 & v496;
                      v499 = *(_QWORD *)(v494 + 16 * v497);
                      if (v492 == v499)
                      {
                        v498 = (uint64_t *)(v494 + 16 * v497);
                        goto LABEL_772;
                      }
                    }
                  }
                  *(_BYTE *)(v492 + 17) &= ~1u;
                }
              }
            }
          }
          v325[7] = v236;
          if (v236 != (_QWORD *)-8192 && v236 != (_QWORD *)-4096 && v236)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v325 + 5));
        }
        v338 = &v702[64 * (unint64_t)v704];
        if ((_DWORD)v703)
        {
          if ((_DWORD)v704)
          {
            v339 = (unint64_t)v704 << 6;
            v340 = v702;
            while ((*((_QWORD *)v340 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v340 += 64;
              v339 -= 64;
              if (!v339)
                goto LABEL_521;
            }
          }
          else
          {
            v340 = v702;
          }
        }
        else
        {
LABEL_521:
          v340 = &v702[64 * (unint64_t)v704];
        }
        v341 = &v702[64 * (unint64_t)v704];
LABEL_523:
        while (v340 != v341)
        {
          v342 = (int32x2_t ****)*((_QWORD *)v340 + 3);
          v725 = 2;
          v726 = 0;
          v727 = v342;
          if (v342 != (int32x2_t ****)-8192 && v342 != (int32x2_t ****)-4096 && v342 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
          v724 = (char *)v19 + 16;
          v728 = (const char **)v716;
          v344 = sub_1C52E2ED8((uint64_t)v716, &v724);
          if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727 != 0)
          {
            v346 = v725 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
            if (v726)
            {
              *v726 = *v726 & 7 | v346;
            }
            else
            {
              v347 = v727;
              v348 = ***v727;
              v349 = (unint64_t)v348[303];
              if (v349 <= v346)
              {
                v350 = v348[305].u32[0];
                if (v349 + 16 * v350 > v346)
                {
                  v351 = v350 - 1;
                  LODWORD(v352) = v351 & ((v727 >> 4) ^ (v727 >> 9));
                  v353 = (int32x2_t *****)(v349 + 16 * v352);
                  v354 = *v353;
                  if (v727 == *v353)
                  {
LABEL_543:
                    *v353 = (int32x2_t ****)-8192;
                    v348[304] = vadd_s32(v348[304], (int32x2_t)0x1FFFFFFFFLL);
                    v347 = v727;
                  }
                  else
                  {
                    v355 = 1;
                    while (v354 != (int32x2_t ****)-4096)
                    {
                      v356 = v352 + v355++;
                      v352 = v356 & v351;
                      v354 = *(int32x2_t *****)(v349 + 16 * v352);
                      if (v727 == v354)
                      {
                        v353 = (int32x2_t *****)(v349 + 16 * v352);
                        goto LABEL_543;
                      }
                    }
                  }
                  *((_BYTE *)v347 + 17) &= ~1u;
                }
              }
            }
          }
          v357 = v344[7];
          v358 = *((_QWORD *)v340 + 7);
          if (v357 != v358)
          {
            v359 = v357 == -4096 || v357 == 0;
            if (!v359 && v357 != -8192)
            {
              v365 = v344[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v365 = v344[6];
              v366 = (unint64_t *)v344[6];
              if (v366)
              {
                *v366 = *v366 & 7 | v365;
              }
              else
              {
                v367 = v344[7];
                v368 = ***(int32x2_t ****)v367;
                v369 = (unint64_t)v368[303];
                if (v369 <= v365)
                {
                  v370 = v368[305].u32[0];
                  if (v369 + 16 * v370 > v365)
                  {
                    v371 = v370 - 1;
                    LODWORD(v372) = v371 & ((v367 >> 4) ^ (v367 >> 9));
                    v373 = (uint64_t *)(v369 + 16 * v372);
                    v374 = *v373;
                    if (v367 == *v373)
                    {
LABEL_573:
                      *v373 = -8192;
                      v368[304] = vadd_s32(v368[304], (int32x2_t)0x1FFFFFFFFLL);
                      v367 = v344[7];
                    }
                    else
                    {
                      v375 = 1;
                      while (v374 != -4096)
                      {
                        v376 = v372 + v375++;
                        v372 = v376 & v371;
                        v374 = *(_QWORD *)(v369 + 16 * v372);
                        if (v367 == v374)
                        {
                          v373 = (uint64_t *)(v369 + 16 * v372);
                          goto LABEL_573;
                        }
                      }
                    }
                    *(_BYTE *)(v367 + 17) &= ~1u;
                  }
                }
              }
              v358 = *((_QWORD *)v340 + 7);
            }
            v344[7] = v358;
            if (v358 != -4096 && v358 != -8192 && v358 != 0)
            {
              v361 = v344 + 5;
              v362 = *((_QWORD *)v340 + 5) & 0xFFFFFFFFFFFFFFF8;
              v344[6] = *(_QWORD *)v362;
              v363 = (unint64_t **)(v344 + 6);
              *(_QWORD *)v362 = v361;
              *(v363 - 1) = (unint64_t *)(v362 | (unint64_t)*(v363 - 1) & 7);
              if (*v363)
                **v363 = **v363 & 7 | (unint64_t)v363;
            }
          }
          v364 = v340 + 64;
          v340 = v338;
          if (v364 != v338)
          {
            v340 = v364;
            while ((*((_QWORD *)v340 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v340 += 64;
              if (v340 == v338)
              {
                v340 = v338;
                goto LABEL_523;
              }
            }
          }
        }
        v22 = *v17;
        v377 = *(_QWORD *)(*v17 + 40);
        if (v377 != *v17 + 40)
        {
          if (v377)
            a2 = v377 - 24;
          else
            a2 = 0;
          v378 = *(unsigned __int8 *)(a2 + 16);
          v379 = v378 - 29;
          a5 = v694;
          if (v378 != 30)
          {
            v380 = 2;
            switch(v379)
            {
              case 1:
                goto LABEL_1143;
              case 2:
                v380 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_634;
              case 3:
              case 9:
                v380 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_634;
              case 4:
                goto LABEL_585;
              case 7:
                v380 = *(_WORD *)(a2 + 18) & 1;
                goto LABEL_634;
              case 8:
                v380 = 1;
                goto LABEL_585;
              case 10:
                v380 = *(_DWORD *)(a2 + 80) + 1;
LABEL_634:
                if (!v380)
                  goto LABEL_619;
                goto LABEL_585;
              default:
                goto LABEL_619;
            }
          }
          if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
            v380 = 2;
          else
            v380 = 1;
LABEL_585:
          v381 = 0;
          v382 = v380;
          do
          {
            v383 = *(unsigned __int8 *)(a2 + 16);
            if (v383 != 30)
              __asm { BR              X9 }
            v384 = (uint64_t *)(a2 - 32 - 32 * v381);
            v385 = *v384;
            v386 = v723;
            v387 = sub_1C477672C((uint64_t)v723 + 56, *v384);
            v388 = *((_QWORD *)v386 + 8);
            v389 = 72;
            if (v388 == *((_QWORD *)v386 + 7))
              v389 = 76;
            if (v387 == (_QWORD *)(v388 + 8 * *(unsigned int *)((char *)v386 + v389))
              && *(_QWORD *)(v385 + 40) != v385 + 40)
            {
              for (j = *(_QWORD *)(v385 + 48); ; j = *(_QWORD *)(v391 + 32))
              {
                v391 = j - 24;
                v392 = j ? j - 24 : 0;
                if (!j || *(_BYTE *)(v392 + 16) != 83)
                  break;
                v393 = *(_DWORD *)(j - 4);
                v394 = v393 & 0x7FFFFFF;
                if ((v393 & 0x7FFFFFF) != 0)
                {
                  v395 = 0;
                  while (1)
                  {
                    v396 = v391 - 32 * v394;
                    if ((v393 & 0x40000000) != 0)
                      v396 = *(_QWORD *)(v391 - 8);
                    if (*(_QWORD *)(v396 + 32 * *(unsigned int *)(v391 + 60) + 8 * v395) == *v17)
                      break;
                    if (v394 == ++v395)
                      goto LABEL_605;
                  }
                }
                else
                {
LABEL_605:
                  LODWORD(v395) = -1;
                }
                if ((v393 & 0x40000000) != 0)
                  v397 = *(_QWORD *)(v391 - 8);
                else
                  v397 = v391 - 32 * v394;
                v398 = *(_QWORD *)(v397 + 32 * v395);
                if (v717)
                {
                  v399 = ((v398 >> 4) ^ (v398 >> 9)) & (v717 - 1);
                  v400 = &v716[0][64 * v399];
                  v401 = *((_QWORD *)v400 + 3);
                  if (v398 == v401)
                  {
LABEL_613:
                    if (v400 != &v716[0][64 * (unint64_t)v717])
                      v398 = *((_QWORD *)v400 + 7);
                  }
                  else
                  {
                    v402 = 1;
                    while (v401 != -4096)
                    {
                      v403 = v399 + v402++;
                      v399 = v403 & (v717 - 1);
                      v400 = &v716[0][64 * v399];
                      v401 = *((_QWORD *)v400 + 3);
                      if (v398 == v401)
                        goto LABEL_613;
                    }
                  }
                }
                sub_1C477667C((llvm::PHINode *)v391, v398, (uint64_t)v236);
              }
            }
            ++v381;
          }
          while (v381 != v382);
          v22 = *v17;
          a6 = LoopLatch;
        }
        a5 = v694;
LABEL_619:
        if (v22 == v695)
        {
          v404 = v693;
          if (a5 >= (unint64_t)v682)
          {
            v405 = (uint64_t)(a5 - (_QWORD)v693) >> 3;
            v406 = v405 + 1;
            if ((unint64_t)(v405 + 1) >> 61)
              goto LABEL_1141;
            if ((v682 - v693) >> 2 > v406)
              v406 = (v682 - v693) >> 2;
            if ((unint64_t)(v682 - v693) >= 0x7FFFFFFFFFFFFFF8)
              v407 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v407 = v406;
            if (v407)
            {
              if (v407 >> 61)
                goto LABEL_1142;
              v408 = (char *)operator new(8 * v407);
              v404 = v693;
            }
            else
            {
              v408 = 0;
            }
            v409 = &v408[8 * v405];
            *(_QWORD *)v409 = v236;
            v410 = v409 + 8;
            if ((char *)a5 != v404)
            {
              do
              {
                v411 = *(_QWORD *)(a5 - 8);
                a5 -= 8;
                *((_QWORD *)v409 - 1) = v411;
                v409 -= 8;
              }
              while ((char *)a5 != v404);
              a5 = (unint64_t)v404;
            }
            v404 = v409;
            v682 = &v408[8 * v407];
            if (a5)
            {
              v412 = v409;
              operator delete((void *)a5);
              v404 = v412;
            }
            a5 = (unint64_t)v410;
          }
          else
          {
            *(_QWORD *)a5 = v236;
            a5 += 8;
          }
        }
        else
        {
          v404 = v693;
        }
        v693 = v404;
        if (*v17 == a6)
        {
          if (v687 >= v681)
          {
            v413 = (v687 - __p) >> 3;
            v414 = v413 + 1;
            if ((unint64_t)(v413 + 1) >> 61)
              goto LABEL_1141;
            if ((v681 - __p) >> 2 > v414)
              v414 = (v681 - __p) >> 2;
            if ((unint64_t)(v681 - __p) >= 0x7FFFFFFFFFFFFFF8)
              v415 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v415 = v414;
            if (v415)
            {
              if (v415 >> 61)
                goto LABEL_1142;
              v416 = a5;
              v417 = (char *)operator new(8 * v415);
            }
            else
            {
              v416 = a5;
              v417 = 0;
            }
            v418 = &v417[8 * v413];
            *(_QWORD *)v418 = v236;
            v419 = v418 + 8;
            for (k = v687; k != __p; k -= 8)
            {
              *((_QWORD *)v418 - 1) = *((_QWORD *)k - 1);
              v418 -= 8;
            }
            v681 = &v417[8 * v415];
            if (__p)
              operator delete(__p);
            v687 = v419;
            __p = v418;
            a5 = v416;
          }
          else
          {
            *(_QWORD *)v687 = v236;
            v687 += 8;
          }
        }
        if (v722)
        {
          v421 = ((*v17 >> 4) ^ (*v17 >> 9)) & (v722 - 1);
          v422 = (uint64_t *)(v720 + 88 * v421);
          v423 = *v422;
          if (*v422 == *v17)
            goto LABEL_668;
          v424 = 1;
          while (v423 != -4096)
          {
            v425 = v421 + v424++;
            v421 = v425 & (v722 - 1);
            v422 = (uint64_t *)(v720 + 88 * v421);
            v423 = *v422;
            if (*v422 == *v17)
              goto LABEL_668;
          }
        }
        v422 = (uint64_t *)(v720 + 88 * v722);
LABEL_668:
        if (v422 != (uint64_t *)(v720 + 88 * v722))
        {
          v426 = *((unsigned int *)v422 + 8);
          if (v426 >= *((unsigned int *)v422 + 9))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v422 + 3), (uint64_t)(v422 + 5), v426 + 1, 8);
            v426 = *((unsigned int *)v422 + 8);
          }
          *(_QWORD *)(v422[3] + 8 * v426) = v236;
          ++*((_DWORD *)v422 + 8);
        }
        v427 = v730[0];
        if (v730[0] >= (unint64_t)v730[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)&v731, v730[0] + 1, 8);
          v427 = v730[0];
        }
        *((_QWORD *)v729 + v427) = v236;
        ++v730[0];
        v428 = v710;
        if (v710 >= v711)
        {
          v430 = (char *)v709;
          v431 = (v710 - (_BYTE *)v709) >> 3;
          v432 = v431 + 1;
          if ((unint64_t)(v431 + 1) >> 61)
            goto LABEL_1141;
          v433 = a5;
          v434 = v711 - (_BYTE *)v709;
          if ((v711 - (_BYTE *)v709) >> 2 > v432)
            v432 = v434 >> 2;
          if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFF8)
            v435 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v435 = v432;
          if (v435)
          {
            if (v435 >> 61)
              goto LABEL_1142;
            v436 = (char *)operator new(8 * v435);
          }
          else
          {
            v436 = 0;
          }
          v437 = &v436[8 * v431];
          *(_QWORD *)v437 = v236;
          v429 = v437 + 8;
          if (v428 != v430)
          {
            do
            {
              v438 = *((_QWORD *)v428 - 1);
              v428 -= 8;
              *((_QWORD *)v437 - 1) = v438;
              v437 -= 8;
            }
            while (v428 != v430);
            v428 = (char *)v709;
          }
          v709 = v437;
          v710 = v429;
          v711 = &v436[8 * v435];
          if (v428)
            operator delete(v428);
          a5 = v433;
        }
        else
        {
          *(_QWORD *)v710 = v236;
          v429 = v428 + 8;
        }
        v710 = v429;
        v439 = *v17;
        if (*v17 != v695)
        {
          a8 = v689;
          v440 = *((_QWORD *)v690 + 3);
          v441 = *((unsigned int *)v690 + 10);
          if (!(_DWORD)v441)
            goto LABEL_700;
          LODWORD(v442) = (v441 - 1) & ((v439 >> 4) ^ (v439 >> 9));
          v443 = (uint64_t *)(v440 + 16 * v442);
          v444 = *v443;
          if (v439 != *v443)
          {
            v445 = 1;
            while (v444 != -4096)
            {
              v446 = v442 + v445++;
              v442 = v446 & (v441 - 1);
              v444 = *(_QWORD *)(v440 + 16 * v442);
              if (v439 == v444)
              {
                v443 = (uint64_t *)(v440 + 16 * v442);
                goto LABEL_701;
              }
            }
LABEL_700:
            v443 = (uint64_t *)(v440 + 16 * v441);
          }
LABEL_701:
          v447 = **(int32x2_t ******)(v443[1] + 8);
          v725 = 2;
          v726 = 0;
          v727 = v447;
          if (v447 != (int32x2_t ****)-8192 && v447 != (int32x2_t ****)-4096 && v447 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v725);
          v724 = (char *)v19 + 16;
          v728 = (const char **)v716;
          v449 = sub_1C52E2ED8((uint64_t)v716, &v724);
          if (v727 != (int32x2_t ****)-8192 && v727 != (int32x2_t ****)-4096 && v727)
          {
            v450 = v725 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v725 & 0xFFFFFFFFFFFFFFF8) = v726;
            if (v726)
            {
              *v726 = *v726 & 7 | v450;
            }
            else
            {
              v451 = v727;
              v452 = ***v727;
              v453 = (unint64_t)v452[303];
              if (v453 <= v450)
              {
                v454 = v452[305].u32[0];
                if (v453 + 16 * v454 > v450)
                {
                  v455 = v454 - 1;
                  LODWORD(v456) = v455 & ((v727 >> 4) ^ (v727 >> 9));
                  v457 = (int32x2_t *****)(v453 + 16 * v456);
                  v458 = *v457;
                  if (v727 == *v457)
                  {
LABEL_718:
                    *v457 = (int32x2_t ****)-8192;
                    v452[304] = vadd_s32(v452[304], (int32x2_t)0x1FFFFFFFFLL);
                    v451 = v727;
                  }
                  else
                  {
                    v459 = 1;
                    while (v458 != (int32x2_t ****)-4096)
                    {
                      v460 = v456 + v459++;
                      v456 = v460 & v455;
                      v458 = *(int32x2_t *****)(v453 + 16 * v456);
                      if (v727 == v458)
                      {
                        v457 = (int32x2_t *****)(v453 + 16 * v456);
                        goto LABEL_718;
                      }
                    }
                  }
                  *((_BYTE *)v451 + 17) &= ~1u;
                }
              }
            }
          }
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock((uint64_t)v690, (uint64_t)v236, v449[7]);
          goto LABEL_722;
        }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock((uint64_t)v690, (uint64_t)v236, *(_QWORD *)&__p[8 * v698 - 8]);
        a8 = v689;
LABEL_722:
        if (v707)
        {
          sub_1C4E43068((uint64_t)&v705);
          MEMORY[0x1CAA32FB4](v705, 8);
          v707 = 0;
        }
        v461 = v702;
        if ((_DWORD)v704)
        {
          v462 = &v702[64 * (unint64_t)v704];
          do
          {
            v463 = *((_QWORD *)v461 + 3);
            if ((v463 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v464 = *((_QWORD *)v461 + 7);
              if (v464)
              {
                if (v464 != -8192 && v464 != -4096)
                {
                  v465 = *((_QWORD *)v461 + 5) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v465 = *((_QWORD *)v461 + 6);
                  v466 = (unint64_t *)*((_QWORD *)v461 + 6);
                  if (v466)
                  {
                    *v466 = *v466 & 7 | v465;
                  }
                  else
                  {
                    v467 = *((_QWORD *)v461 + 7);
                    v468 = ***(int32x2_t ****)v467;
                    v469 = (unint64_t)v468[303];
                    if (v469 <= v465)
                    {
                      v470 = v468[305].u32[0];
                      if (v469 + 16 * v470 > v465)
                      {
                        v471 = v470 - 1;
                        LODWORD(v472) = v471 & ((v467 >> 4) ^ (v467 >> 9));
                        v473 = (uint64_t *)(v469 + 16 * v472);
                        v474 = *v473;
                        if (v467 == *v473)
                        {
LABEL_738:
                          *v473 = -8192;
                          v468[304] = vadd_s32(v468[304], (int32x2_t)0x1FFFFFFFFLL);
                          v467 = *((_QWORD *)v461 + 7);
                        }
                        else
                        {
                          v475 = 1;
                          while (v474 != -4096)
                          {
                            v476 = v472 + v475++;
                            v472 = v476 & v471;
                            v474 = *(_QWORD *)(v469 + 16 * v472);
                            if (v467 == v474)
                            {
                              v473 = (uint64_t *)(v469 + 16 * v472);
                              goto LABEL_738;
                            }
                          }
                        }
                        *(_BYTE *)(v467 + 17) &= ~1u;
                      }
                    }
                  }
                  v463 = *((_QWORD *)v461 + 3);
                }
              }
            }
            if (v463 != -4096 && v463 != -8192 && v463 != 0)
            {
              v478 = *((_QWORD *)v461 + 1) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v478 = *((_QWORD *)v461 + 2);
              v479 = (unint64_t *)*((_QWORD *)v461 + 2);
              if (v479)
              {
                *v479 = *v479 & 7 | v478;
              }
              else
              {
                v480 = *((_QWORD *)v461 + 3);
                v481 = ***(int32x2_t ****)v480;
                v482 = (unint64_t)v481[303];
                if (v482 <= v478)
                {
                  v483 = v481[305].u32[0];
                  if (v482 + 16 * v483 > v478)
                  {
                    v484 = v483 - 1;
                    LODWORD(v485) = v484 & ((v480 >> 4) ^ (v480 >> 9));
                    v486 = (uint64_t *)(v482 + 16 * v485);
                    v487 = *v486;
                    if (v480 == *v486)
                    {
LABEL_757:
                      *v486 = -8192;
                      v481[304] = vadd_s32(v481[304], (int32x2_t)0x1FFFFFFFFLL);
                      v480 = *((_QWORD *)v461 + 3);
                    }
                    else
                    {
                      v488 = 1;
                      while (v487 != -4096)
                      {
                        v489 = v485 + v488++;
                        v485 = v489 & v484;
                        v487 = *(_QWORD *)(v482 + 16 * v485);
                        if (v480 == v487)
                        {
                          v486 = (uint64_t *)(v482 + 16 * v485);
                          goto LABEL_757;
                        }
                      }
                    }
                    *(_BYTE *)(v480 + 17) &= ~1u;
                  }
                }
              }
            }
            v461 += 64;
          }
          while (v461 != v462);
          v461 = v702;
        }
        MEMORY[0x1CAA32FB4](v461, 8);
        if (v17 == v686)
          goto LABEL_783;
      }
      if ((v753.__r_.__value_.__s.__data_[0] & 1) != 0)
      {
        v239 = 4;
        size = (std::string::size_type)&v753.__r_.__value_.__l.__size_;
      }
      else
      {
        v239 = v753.__r_.__value_.__r.__words[2];
        if (!LODWORD(v753.__r_.__value_.__r.__words[2]))
        {
          v249 = 0;
          goto LABEL_382;
        }
        size = v753.__r_.__value_.__l.__size_;
      }
      v241 = v239 - 1;
      v242 = (v239 - 1) & ((v238 >> 4) ^ (v238 >> 9));
      v243 = (_QWORD *)(size + 16 * v242);
      v244 = (uint64_t *)*v243;
      if (v238 == (uint64_t *)*v243)
      {
LABEL_383:
        sub_1C5F2E2A4((uint64_t)&v765, v243 + 1);
        goto LABEL_384;
      }
      v245 = 0;
      v246 = 1;
      while (v244 != (uint64_t *)-4096)
      {
        if (v245)
          v247 = 0;
        else
          v247 = v244 == (uint64_t *)-8192;
        if (v247)
          v245 = v243;
        v248 = v242 + v246++;
        v242 = v248 & v241;
        v243 = (_QWORD *)(size + 16 * (v248 & v241));
        v244 = (uint64_t *)*v243;
        if (v238 == (uint64_t *)*v243)
          goto LABEL_383;
      }
      if (v245)
        v249 = v245;
      else
        v249 = v243;
LABEL_382:
      v243 = sub_1C55B6340((uint64_t)&v753, (uint64_t)&v701, &v701, v249);
      *v243 = v701;
      v243[1] = 0;
      goto LABEL_383;
    }
LABEL_783:
    v502 = a5;
    llvm::remapInstructionsInBlocks((uint64_t *)&v729, (uint64_t)v716);
    if (v730[0])
    {
      v503 = (char *)v729;
      v504 = (char *)v729 + 8 * v730[0];
      do
      {
        v505 = *(_QWORD *)v503 + 40;
        for (m = *(_QWORD *)(*(_QWORD *)v503 + 48); m != v505; m = *(_QWORD *)(m + 8))
        {
          if (m)
            v507 = m - 24;
          else
            v507 = 0;
          v508 = sub_1C4D9F8B4(v507);
          if (m && v508)
            llvm::AssumptionCache::registerAssumption((char **)a8, v507);
        }
        v503 += 8;
      }
      while (v503 != v504);
    }
    v702 = "It";
    v676 = v676 & 0xFFFFFFFF00000000 | v698;
    v704 = v676;
    v706 = 2051;
    llvm::Twine::str((llvm::Twine *)&v702, &v724);
    if (SHIBYTE(v726) >= 0)
      v509 = &v724;
    else
      v509 = v724;
    if (SHIBYTE(v726) >= 0)
      v510 = HIBYTE(v726) & 0x7F;
    else
      v510 = v725;
    llvm::cloneAndAdaptNoAliasScopes((uint64_t *)v756, v757[0], (uint64_t)v729, v730[0], **(uint64_t ***)v695, v509, v510);
    if (SHIBYTE(v726) < 0)
      operator delete(v724);
    v17 = v673;
    a5 = v502;
    if ((v753.__r_.__value_.__s.__data_[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v753.__r_.__value_.__l.__size_, 8);
    if (v729 != &v731)
      free(v729);
    ++v698;
    v144 = v688;
  }
  while ((_DWORD)v683 != (_DWORD)v698);
LABEL_239:
  v145 = v674;
  if (v144 != v696)
  {
    v146 = (char *)v19 + 16;
    do
    {
      v147 = *v144;
      if ((_DWORD)v683 == v678)
      {
        v170 = *((_DWORD *)v147 + 5);
        v171 = v170 & 0x7FFFFFF;
        if ((v170 & 0x7FFFFFF) != 0)
        {
          v172 = 0;
          while (1)
          {
            v173 = (char *)v147 - 32 * v171;
            if ((v170 & 0x40000000) != 0)
              v173 = (char *)*((_QWORD *)v147 - 1);
            if (*(_QWORD *)&v173[32 * *((unsigned int *)v147 + 15) + 8 * v172] == v145)
              break;
            if (v171 == ++v172)
              goto LABEL_279;
          }
        }
        else
        {
LABEL_279:
          LODWORD(v172) = -1;
        }
        if ((v170 & 0x40000000) != 0)
          v174 = (char *)*((_QWORD *)v147 - 1);
        else
          v174 = (char *)v147 - 32 * v171;
        v175 = (char *)v147 + 24;
        if (!v147)
          v175 = 0;
        v176 = v175 - 24;
        if (v147)
          v177 = v176;
        else
          v177 = 0;
        llvm::Value::doRAUW(*v144, *(llvm::Value **)&v174[32 * v172], (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v695 + 40, (uint64_t ***)v177);
        v178 = *((_QWORD *)v177 + 3);
        v179 = (_QWORD *)*((_QWORD *)v177 + 4);
        *v179 = v178;
        *(_QWORD *)(v178 + 8) = v179;
        *((_QWORD *)v177 + 3) = 0;
        *((_QWORD *)v177 + 4) = 0;
        llvm::Value::deleteValue((llvm::Value *)v177);
        v145 = v674;
      }
      else if (v683 >= 2)
      {
        v148 = *((_DWORD *)v147 + 5);
        v149 = v148 & 0x7FFFFFF;
        if ((v148 & 0x7FFFFFF) != 0)
        {
          v150 = 0;
          while (1)
          {
            v151 = (char *)v147 - 32 * v149;
            if ((v148 & 0x40000000) != 0)
              v151 = (char *)*((_QWORD *)v147 - 1);
            if (*(_QWORD *)&v151[32 * *((unsigned int *)v147 + 15) + 8 * v150] == a6)
              break;
            if (v149 == ++v150)
              goto LABEL_249;
          }
        }
        else
        {
LABEL_249:
          LODWORD(v150) = -1;
        }
        v152 = llvm::PHINode::removeIncomingValue(*v144, v150, 0);
        v153 = v152;
        if (v152 && *(unsigned __int8 *)(v152 + 16) >= 0x1Cu)
        {
          v154 = v723;
          v155 = sub_1C477672C((uint64_t)v723 + 56, *(_QWORD *)(v152 + 40));
          v156 = *((_QWORD *)v154 + 8);
          if (v156 == *((_QWORD *)v154 + 7))
            v157 = 76;
          else
            v157 = 72;
          if (v155 == (_QWORD *)(v156 + 8 * *(unsigned int *)((char *)v154 + v157)))
          {
            v145 = v674;
          }
          else
          {
            *(_QWORD *)v730 = 2;
            v731 = 0;
            v732 = (int32x2_t ****)v153;
            v145 = v674;
            if (v153 != -8192 && v153 != -4096 && v153)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v730);
            v729 = v146;
            v733 = v716;
            v158 = sub_1C52E2ED8((uint64_t)v716, &v729);
            if (v732 != (int32x2_t ****)-8192 && v732 != (int32x2_t ****)-4096 && v732)
            {
              v159 = *(_QWORD *)v730 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(*(_QWORD *)v730 & 0xFFFFFFFFFFFFFFF8) = v731;
              if (v731)
              {
                *v731 = *v731 & 7 | v159;
              }
              else
              {
                v160 = v732;
                v161 = ***v732;
                v162 = (unint64_t)v161[303];
                if (v162 <= v159)
                {
                  v163 = v161[305].u32[0];
                  if (v162 + 16 * v163 > v159)
                  {
                    v164 = v163 - 1;
                    LODWORD(v165) = v164 & ((v732 >> 4) ^ (v732 >> 9));
                    v166 = (int32x2_t *****)(v162 + 16 * v165);
                    v167 = *v166;
                    if (v732 == *v166)
                    {
LABEL_271:
                      *v166 = (int32x2_t ****)-8192;
                      v161[304] = vadd_s32(v161[304], (int32x2_t)0x1FFFFFFFFLL);
                      v160 = v732;
                    }
                    else
                    {
                      v168 = 1;
                      while (v167 != (int32x2_t ****)-4096)
                      {
                        v169 = v165 + v168++;
                        v165 = v169 & v164;
                        v167 = *(int32x2_t *****)(v162 + 16 * v165);
                        if (v732 == v167)
                        {
                          v166 = (int32x2_t *****)(v162 + 16 * v165);
                          goto LABEL_271;
                        }
                      }
                    }
                    *((_BYTE *)v160 + 17) &= ~1u;
                  }
                }
              }
            }
            v153 = v158[7];
          }
        }
        sub_1C477667C(v147, v153, *((_QWORD *)v687 - 1));
        a6 = LoopLatch;
      }
      ++v144;
    }
    while (v144 != v696);
  }
  v180 = v690;
  v181 = (llvm::DSOLocalEquivalent **)v689;
  v182 = v683;
  if (((v687 - __p) & 0x7FFFFFFF8) != 0)
  {
    v183 = 0;
    v184 = ((unint64_t)(v687 - __p) >> 3);
    do
    {
      v185 = *(_QWORD *)&__p[8 * v183];
      v186 = *(_QWORD *)(v185 + 40);
      if (v186 == v185 + 40)
      {
        v188 = 0;
      }
      else
      {
        if (v186)
          v187 = v186 - 24;
        else
          v187 = 0;
        if (*(unsigned __int8 *)(v187 + 16) - 29 >= 0xB)
          v188 = 0;
        else
          v188 = v187;
      }
      v189 = v183 + 1;
      v190 = *(llvm::BasicBlock **)&v693[8 * v183];
      if (v184 - 1 == v183)
        v191 = 0;
      else
        v191 = (v183 + 1);
      llvm::Instruction::replaceSuccessorWith(v188, v190, *(llvm::BasicBlock **)&v693[8 * v191]);
      v183 = v189;
    }
    while (v184 != v189);
  }
  if (v683 >= 2 && v672 != (llvm::Instruction *)v675)
  {
    v192 = (uint64_t *)v672;
    while (1)
    {
      v193 = *v192;
      v194 = *((_QWORD *)v180 + 3);
      v195 = *((unsigned int *)v180 + 10);
      if (!(_DWORD)v195)
        goto LABEL_318;
      LODWORD(v196) = ((v193 >> 4) ^ (v193 >> 9)) & (v195 - 1);
      v197 = (uint64_t *)(v194 + 16 * v196);
      v198 = *v197;
      if (v193 != *v197)
        break;
LABEL_319:
      v201 = v197[1];
      v729 = &v731;
      *(_QWORD *)v730 = 0x1000000000;
      v202 = *(unsigned int *)(v201 + 32);
      if ((_DWORD)v202)
      {
        v203 = *(uint64_t ***)(v201 + 24);
        v204 = 8 * v202;
        do
        {
          v205 = **v203;
          v206 = v723;
          v207 = sub_1C477672C((uint64_t)v723 + 56, v205);
          v208 = *((_QWORD *)v206 + 8);
          if (v208 == *((_QWORD *)v206 + 7))
            v209 = 76;
          else
            v209 = 72;
          if (v207 == (_QWORD *)(v208 + 8 * *(unsigned int *)((char *)v206 + v209)))
          {
            v210 = v730[0];
            if (v730[0] >= (unint64_t)v730[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v729, (uint64_t)&v731, v730[0] + 1, 8);
              v210 = v730[0];
            }
            *((_QWORD *)v729 + v210) = v205;
            ++v730[0];
          }
          ++v203;
          v204 -= 8;
        }
        while (v204);
      }
      v180 = v690;
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator((uint64_t)v690, v193, LoopLatch);
      v212 = (uint64_t *)v729;
      if (v730[0])
      {
        v213 = NearestCommonDominator;
        v214 = 8 * v730[0];
        v181 = (llvm::DSOLocalEquivalent **)v689;
        do
        {
          v215 = *v212++;
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator((uint64_t)v690, v215, v213);
          v214 -= 8;
        }
        while (v214);
        v212 = (uint64_t *)v729;
      }
      else
      {
        v181 = (llvm::DSOLocalEquivalent **)v689;
      }
      v182 = v683;
      if (v212 != (uint64_t *)&v731)
        free(v212);
      if (++v192 == v675)
        goto LABEL_337;
    }
    v199 = 1;
    while (v198 != -4096)
    {
      v200 = v196 + v199++;
      v196 = v200 & (v195 - 1);
      v198 = *(_QWORD *)(v194 + 16 * v196);
      if (v193 == v198)
      {
        v197 = (uint64_t *)(v194 + 16 * v196);
        goto LABEL_319;
      }
    }
LABEL_318:
    v197 = (uint64_t *)(v194 + 16 * v195);
    goto LABEL_319;
  }
LABEL_337:
  v729 = &v731;
  *(_QWORD *)v730 = 0x1000000000;
  v741[23] = 0;
  v741[22] = 0;
  v741[24] = v180;
  v741[25] = 0;
  v742 = 1;
  v743 = &v747;
  v744 = &v747;
  v745 = 8;
  v746 = 0;
  memset(v751, 0, sizeof(v751));
  v752 = 0;
  if ((_DWORD)v721)
  {
    v216 = v678;
    if (v722)
    {
      v217 = 88 * v722;
      v218 = v720;
      while ((*(_QWORD *)v218 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v218 += 88;
        v217 -= 88;
        if (!v217)
        {
          v218 = v720 + 88 * v722;
          break;
        }
      }
    }
    else
    {
      v218 = v720;
    }
  }
  else
  {
    v218 = v720 + 88 * v722;
    v216 = v678;
  }
  v699 = v720 + 88 * v722;
  if (v218 != v699)
  {
    v697 = v720 + 88 * v722;
    while (1)
    {
      v511 = *(unsigned int *)(v218 + 32);
      if ((_DWORD)v511)
        break;
LABEL_874:
      v547 = v218 + 88;
      v218 = v697;
      if (v547 != v697)
      {
        v218 = v547;
        while ((*(_QWORD *)v218 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v218 += 88;
          if (v218 == v697)
          {
            v218 = v697;
            break;
          }
        }
      }
      if (v218 == v699)
        goto LABEL_880;
    }
    v512 = 0;
    v513 = v511 - 1;
    while (1)
    {
      v514 = v512 + 1;
      if (v513 == v512)
        v515 = 0;
      else
        v515 = v512 + 1;
      v516 = *(_QWORD *)v218;
      if (v182 == v216)
      {
        if (!isBackedgeTakenCountMaxOrZero)
        {
          if (v515)
          {
            v517 = 0;
            v521 = *(_DWORD *)(v218 + 8);
            if (v521)
              v522 = v521 == v515;
            else
              v522 = 1;
            v520 = !v522;
          }
          else
          {
            v517 = 1;
LABEL_844:
            v520 = 1;
          }
          v518 = LoopLatch;
LABEL_846:
          v524 = v516 == v518 || v517 == 0;
          if (v520 && v524)
          {
            v525 = *(llvm::BasicBlock **)(*(_QWORD *)(v218 + 24) + 8 * v512);
            v526 = (_QWORD *)*((_QWORD *)v525 + 5);
            if (v526 == (_QWORD *)((char *)v525 + 40))
            {
              v528 = 0;
            }
            else
            {
              if (v526)
                v527 = v526 - 3;
              else
                v527 = 0;
              if (*((unsigned __int8 *)v527 + 16) - 29 >= 0xB)
                v528 = 0;
              else
                v528 = v527;
            }
            v529 = (v517 != 0) ^ (*(_BYTE *)(v218 + 20) != 0);
            v530 = v528[4 * (v529 << 63 >> 63) - 4];
            v531 = (llvm::BasicBlock *)v528[4 * v529 - 8];
            llvm::BasicBlock::removePredecessor(v531, v525, 1);
            v532 = (char *)operator new(0x60uLL);
            *((_DWORD *)v532 + 13) = *((_DWORD *)v532 + 13) & 0x38000000 | 1;
            *((_QWORD *)v532 + 1) = 0;
            *((_QWORD *)v532 + 2) = 0;
            *(_QWORD *)v532 = 0;
            *((_QWORD *)v532 + 4) = ***(_QWORD ***)v530 + 1576;
            *((_QWORD *)v532 + 3) = v532 + 32;
            *((_QWORD *)v532 + 5) = 0;
            v532[48] = 30;
            v532[49] = 0;
            *((_WORD *)v532 + 25) = 0;
            *((_DWORD *)v532 + 13) = 1;
            *(_OWORD *)(v532 + 56) = 0u;
            v533 = v532 + 56;
            *(_OWORD *)(v532 + 72) = 0u;
            *((_DWORD *)v532 + 22) = 0;
            v534 = v528[5];
            v535 = v528 + 3;
            *((_QWORD *)v532 + 9) = v534;
            *(_WORD *)(v534 + 18) &= ~0x8000u;
            if ((v532[55] & 0x10) != 0
              && (v542 = *(_QWORD *)(v534 + 56)) != 0
              && (v543 = *(llvm::ValueSymbolTable **)(v542 + 104)) != 0)
            {
              llvm::ValueSymbolTable::reinsertValue(v543, (llvm::Value *)(v532 + 32));
              v544 = *(_QWORD *)v532;
              v545 = *v535;
              *((_QWORD *)v532 + 7) = *v535;
              *((_QWORD *)v532 + 8) = v535;
              *(_QWORD *)(v545 + 8) = v533;
              *v535 = (uint64_t)v533;
              if (v544)
              {
                **((_QWORD **)v532 + 2) = *((_QWORD *)v532 + 1);
                v546 = *((_QWORD *)v532 + 1);
                if (v546)
                  *(_QWORD *)(v546 + 16) = *((_QWORD *)v532 + 2);
              }
            }
            else
            {
              v536 = *v535;
              *((_QWORD *)v532 + 7) = *v535;
              *((_QWORD *)v532 + 8) = v535;
              *(_QWORD *)(v536 + 8) = v533;
              *v535 = (uint64_t)v533;
            }
            *(_QWORD *)v532 = v530;
            v539 = *(_QWORD *)(v530 + 8);
            v538 = (_QWORD *)(v530 + 8);
            v537 = v539;
            *((_QWORD *)v532 + 1) = v539;
            v181 = (llvm::DSOLocalEquivalent **)v689;
            if (v539)
              *(_QWORD *)(v537 + 16) = v532 + 8;
            *((_QWORD *)v532 + 2) = v538;
            *v538 = v532;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v528[5] + 40, (uint64_t ***)v528);
            v540 = v528[3];
            v541 = (_QWORD *)v528[4];
            *v541 = v540;
            *(_QWORD *)(v540 + 8) = v541;
            *v535 = 0;
            v528[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v528);
            v753.__r_.__value_.__r.__words[0] = (std::string::size_type)v525;
            v753.__r_.__value_.__l.__size_ = (unint64_t)v531 | 4;
            llvm::DomTreeUpdater::applyUpdates((uint64_t)&v729, (unint64_t *)&v753, 1);
            v216 = v678;
            v182 = v683;
            v513 = v511 - 1;
          }
          goto LABEL_867;
        }
        if (v512)
        {
          v517 = v515 == 0;
          goto LABEL_844;
        }
      }
      else
      {
        if (v680)
        {
          v517 = 0;
          v518 = LoopLatch;
          v520 = v516 == LoopLatch && v515 != 0;
          goto LABEL_846;
        }
        if (*(_DWORD *)(v218 + 16) != v515)
        {
          v517 = *(_DWORD *)(v218 + 12);
          if (!v517)
            goto LABEL_844;
          if (v515 % v517)
          {
            v517 = 0;
            goto LABEL_844;
          }
        }
      }
LABEL_867:
      v512 = v514;
      if (v511 == v514)
        goto LABEL_874;
    }
  }
LABEL_880:
  v548 = v670;
  if (v182 != v216)
    v548 = 1;
  if ((v548 & 1) == 0)
  {
    v549 = *((_QWORD *)v687 - 1);
    v550 = *(_QWORD *)(v549 + 40);
    if (v550 == v549 + 40)
    {
      v552 = 0;
    }
    else
    {
      if (v550)
        v551 = (unsigned __int8 *)(v550 - 24);
      else
        v551 = 0;
      if (v551[16] - 29 >= 0xB)
        v552 = 0;
      else
        v552 = (llvm *)v551;
    }
    llvm::changeToUnreachable(v552, (llvm::Instruction *)a10, (uint64_t)&v729, 0, v143);
  }
  if (__p != v687)
  {
    v553 = __p;
    do
    {
      v554 = *(_QWORD *)(*(_QWORD *)v553 + 40);
      if (v554 != *(_QWORD *)v553 + 40)
      {
        v555 = v554 - 24;
        if (!v554)
          v555 = 0;
        v556 = *(unsigned __int8 *)(v555 + 16) - 40;
        if (v556 < 0xFFFFFFF5)
          v555 = 0;
        if (v554)
        {
          if (*(_BYTE *)(v555 + 16) == 30 && v556 >= 0xFFFFFFF5 && (*(_DWORD *)(v555 + 20) & 0x7FFFFFF) == 1)
          {
            v558 = *(llvm::BasicBlock **)(v555 - 32);
            UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v558);
            if (llvm::MergeBlockIntoPredecessor((uint64_t)v558, (llvm::BasicBlock *)&v729, (int32x2_t *)v685, 0, 0, 0))
            {
              v560 = (uint64_t *)__p;
              do
              {
                if ((llvm::BasicBlock *)*v560 == v558)
                  *v560 = UniquePredecessor;
                ++v560;
              }
              while (v560 != (uint64_t *)v687);
              sub_1C4E7D5A8((uint64_t)&v709, (uint64_t)v558);
            }
          }
        }
      }
      v553 += 8;
    }
    while (v553 != v687);
  }
  DomTree = (llvm::ScalarEvolution *)llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)&v729);
  if (v182 > 1)
    v563 = (llvm::Loop *)(v182 != v216);
  else
    v563 = 0;
  llvm::simplifyLoopAfterUnroll(v723, v563, (uint64_t *)v685, (uint64_t ***)v677, DomTree, v181, v671, v561);
  v565 = *(llvm **)v723;
  if (v182 == v216)
    llvm::LoopInfo::erase((int32x2_t *)v685, v723);
  if (byte_1ED827740)
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::verify((uint64_t)v685);
  v566 = a10 ^ 1;
  if (!v565)
    v566 = 1;
  if (v182 != v216)
    v566 = 1;
  if (((v669 | v566) & 1) != 0)
  {
LABEL_966:
    if (!v565)
    {
LABEL_974:
      if ((_DWORD)v768)
      {
        v601 = (llvm **)v767;
        v602 = 8 * v768;
        do
        {
          v603 = *v601++;
          llvm::simplifyLoop(v603, DomTree, (unint64_t **)v685, (int32x2_t *)v677, (llvm::ScalarEvolution *)v181, 0, (llvm::MemorySSAUpdater *)a10);
          v602 -= 8;
        }
        while (v602);
      }
      goto LABEL_988;
    }
    if (!v669)
      goto LABEL_987;
    v592 = *((_DWORD *)v685 + 4);
    if (v592)
    {
      v593 = *((_QWORD *)v687 - 1);
      v594 = *(_QWORD *)v685;
      v595 = v592 - 1;
      v596 = ((v593 >> 4) ^ (v593 >> 9)) & (v592 - 1);
      v597 = *(_QWORD *)(*(_QWORD *)v685 + 16 * v596);
      if (v593 == v597)
      {
LABEL_973:
        v600 = *(llvm **)(v594 + 16 * v596 + 8);
LABEL_979:
        v604 = v565;
        if (v600 != v565)
        {
          v605 = v600;
          while (v605)
          {
            v605 = *(llvm **)v605;
            if (v605 == v565)
            {
              v604 = v565;
              goto LABEL_986;
            }
          }
          v606 = v565;
          do
          {
            v604 = v606;
            v606 = *(llvm **)v606;
          }
          while (v606 != v600);
        }
LABEL_986:
        llvm::formLCSSARecursively(v604, DomTree, v685, v677, v564);
        goto LABEL_987;
      }
      v598 = 1;
      while (v597 != -4096)
      {
        v599 = v596 + v598++;
        v596 = v599 & v595;
        v597 = *(_QWORD *)(v594 + 16 * v596);
        if (v593 == v597)
          goto LABEL_973;
      }
    }
    v600 = 0;
    goto LABEL_979;
  }
  v567 = (char *)v709;
  if (v709 == v710)
    goto LABEL_987;
  v568 = *(_QWORD *)v685;
  v569 = *((_DWORD *)v685 + 4);
  v570 = v569 - 1;
  do
  {
    v571 = *(_QWORD *)v567;
    if (v569)
    {
      v572 = ((v571 >> 4) ^ (v571 >> 9)) & v570;
      v573 = *(_QWORD *)(v568 + 16 * v572);
      if (v571 == v573)
      {
LABEL_932:
        v576 = *(llvm **)(v568 + 16 * v572 + 8);
        goto LABEL_934;
      }
      v574 = 1;
      while (v573 != -4096)
      {
        v575 = v572 + v574++;
        v572 = v575 & v570;
        v573 = *(_QWORD *)(v568 + 16 * v572);
        if (v571 == v573)
          goto LABEL_932;
      }
    }
    v576 = 0;
LABEL_934:
    if (v576 != v565)
    {
      v577 = v571 + 40;
      for (n = *(_QWORD *)(v571 + 48); n != v577; n = *(_QWORD *)(n + 8))
      {
        v579 = n - 24;
        if (!n)
          v579 = 0;
        v580 = *(_DWORD *)(v579 + 20);
        if ((v580 & 0x40000000) != 0)
        {
          v582 = *(_QWORD *)(v579 - 8);
          v581 = v580 & 0x7FFFFFF;
        }
        else
        {
          v581 = v580 & 0x7FFFFFF;
          v582 = v579 - 32 * v581;
        }
        if (v581)
        {
          v583 = v582 + 32 * v581;
          do
          {
            if (*(_QWORD *)v582)
              v584 = *(unsigned __int8 *)(*(_QWORD *)v582 + 16) >= 0x1Cu;
            else
              v584 = 0;
            if (v584 && v569)
            {
              v585 = *(_QWORD *)(*(_QWORD *)v582 + 40);
              v586 = ((v585 >> 4) ^ (v585 >> 9)) & v570;
              v587 = *(_QWORD *)(v568 + 16 * v586);
              if (v585 == v587)
              {
LABEL_955:
                v590 = *(llvm **)(v568 + 16 * v586 + 8);
                if (v590)
                {
                  if (v590 == v565)
                  {
                    v669 = 1;
                    goto LABEL_966;
                  }
                  v591 = v565;
                  while (v591)
                  {
                    v591 = *(llvm **)v591;
                    v669 = 1;
                    if (v591 == v590)
                      goto LABEL_966;
                  }
                }
              }
              else
              {
                v588 = 1;
                while (v587 != -4096)
                {
                  v589 = v586 + v588++;
                  v586 = v589 & v570;
                  v587 = *(_QWORD *)(v568 + 16 * v586);
                  if (v585 == v587)
                    goto LABEL_955;
                }
              }
            }
            v582 += 32;
          }
          while (v582 != v583);
        }
      }
    }
    v567 += 8;
  }
  while (v567 != v710);
  if (!v565)
    goto LABEL_974;
LABEL_987:
  llvm::simplifyLoop(v565, DomTree, (unint64_t **)v685, (int32x2_t *)v677, (llvm::ScalarEvolution *)v181, 0, (llvm::MemorySSAUpdater *)a10);
LABEL_988:
  if (v182 == v678)
    v23 = 2;
  else
    v23 = 1;
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v729);
  v753.__r_.__value_.__r.__words[0] = (std::string::size_type)v751;
  sub_1C50B10F0((void ***)&v753);
  if (v744 != v743)
    free(v744);
  if (v729 != &v731)
    free(v729);
  if (v756 != v758)
    free(v756);
  if (v767 != v769)
    free(v767);
  if ((v765.__r_.__value_.__s.__data_[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v765.__r_.__value_.__l.__size_, 8);
  if (v709)
  {
    v710 = (char *)v709;
    operator delete(v709);
  }
  if (v714)
  {
    v715 = (uint64_t *)v714;
    operator delete(v714);
  }
  MEMORY[0x1CAA32FB4](v713, 8);
  if (__p)
    operator delete(__p);
  if (v693)
    operator delete(v693);
  if (v688)
    operator delete(v688);
  if (v719)
  {
    sub_1C4E43068((uint64_t)v718);
    MEMORY[0x1CAA32FB4](v718[0], 8);
    v719 = 0;
  }
  v607 = v716[0];
  if (v717)
  {
    v608 = &v716[0][64 * (unint64_t)v717];
    do
    {
      v609 = *((_QWORD *)v607 + 3);
      if ((v609 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v610 = *((_QWORD *)v607 + 7);
        if (v610)
        {
          if (v610 != -8192 && v610 != -4096)
          {
            v611 = *((_QWORD *)v607 + 5) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v611 = *((_QWORD *)v607 + 6);
            v612 = (unint64_t *)*((_QWORD *)v607 + 6);
            if (v612)
            {
              *v612 = *v612 & 7 | v611;
            }
            else
            {
              v613 = *((_QWORD *)v607 + 7);
              v614 = ***(int32x2_t ****)v613;
              v615 = (unint64_t)v614[303];
              if (v615 <= v611)
              {
                v616 = v614[305].u32[0];
                if (v615 + 16 * v616 > v611)
                {
                  v617 = v616 - 1;
                  LODWORD(v618) = v617 & ((v613 >> 4) ^ (v613 >> 9));
                  v619 = (uint64_t *)(v615 + 16 * v618);
                  v620 = *v619;
                  if (v613 == *v619)
                  {
LABEL_1027:
                    *v619 = -8192;
                    v614[304] = vadd_s32(v614[304], (int32x2_t)0x1FFFFFFFFLL);
                    v613 = *((_QWORD *)v607 + 7);
                  }
                  else
                  {
                    v621 = 1;
                    while (v620 != -4096)
                    {
                      v622 = v618 + v621++;
                      v618 = v622 & v617;
                      v620 = *(_QWORD *)(v615 + 16 * v618);
                      if (v613 == v620)
                      {
                        v619 = (uint64_t *)(v615 + 16 * v618);
                        goto LABEL_1027;
                      }
                    }
                  }
                  *(_BYTE *)(v613 + 17) &= ~1u;
                }
              }
            }
            v609 = *((_QWORD *)v607 + 3);
          }
        }
      }
      if (v609 != -4096 && v609 != -8192 && v609 != 0)
      {
        v624 = *((_QWORD *)v607 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v624 = *((_QWORD *)v607 + 2);
        v625 = (unint64_t *)*((_QWORD *)v607 + 2);
        if (v625)
        {
          *v625 = *v625 & 7 | v624;
        }
        else
        {
          v626 = *((_QWORD *)v607 + 3);
          v627 = ***(int32x2_t ****)v626;
          v628 = (unint64_t)v627[303];
          if (v628 <= v624)
          {
            v629 = v627[305].u32[0];
            if (v628 + 16 * v629 > v624)
            {
              v630 = v629 - 1;
              LODWORD(v631) = v630 & ((v626 >> 4) ^ (v626 >> 9));
              v632 = (uint64_t *)(v628 + 16 * v631);
              v633 = *v632;
              if (v626 == *v632)
              {
LABEL_1046:
                *v632 = -8192;
                v627[304] = vadd_s32(v627[304], (int32x2_t)0x1FFFFFFFFLL);
                v626 = *((_QWORD *)v607 + 3);
              }
              else
              {
                v634 = 1;
                while (v633 != -4096)
                {
                  v635 = v631 + v634++;
                  v631 = v635 & v630;
                  v633 = *(_QWORD *)(v628 + 16 * v631);
                  if (v626 == v633)
                  {
                    v632 = (uint64_t *)(v628 + 16 * v631);
                    goto LABEL_1046;
                  }
                }
              }
              *(_BYTE *)(v626 + 17) &= ~1u;
            }
          }
        }
      }
      v607 += 64;
    }
    while (v607 != v608);
    v607 = v716[0];
  }
  MEMORY[0x1CAA32FB4](v607, 8);
LABEL_1050:
  if (v759 != v761)
    free(v759);
  v636 = v720;
  if (v722)
  {
    v637 = 88 * v722;
    v638 = (_QWORD *)(v720 + 40);
    do
    {
      if ((*(v638 - 5) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v639 = (_QWORD *)*(v638 - 2);
        if (v638 != v639)
          free(v639);
      }
      v638 += 11;
      v637 -= 88;
    }
    while (v637);
  }
  MEMORY[0x1CAA32FB4](v636, 8);
  if (v672)
    operator delete(v672);
  if (v762 != v764)
    free(v762);
  return v23;
}

uint64_t sub_1C5F2E2A4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C5F2E9C0(a1, *a2, &v10);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 4;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    sub_1C5F2EA64(a1, v6);
    v10 = 0;
    result = sub_1C5F2E9C0(a1, *a2, &v10);
  }
  v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 48);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t sub_1C5F2E3BC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  llvm::MDNode *Impl;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v2 = a1;
  v3 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (*(_BYTE *)v3 == 19)
    v4 = *(_DWORD *)(v3 + 24);
  else
    v4 = 0;
  v5 = sub_1C5F2E620(v4) * a2;
  if (v5 >= 2)
  {
    v7 = *(unsigned __int8 **)(v2 - 8 * *(unsigned int *)(v2 + 8));
    v8 = *v7;
    if (v8 == 19)
      v9 = *((_DWORD *)v7 + 6);
    else
      v9 = 0;
    v10 = (v9 >> 1) & 0x1F;
    if ((v9 & 0x40) != 0)
      v10 = (v9 >> 2) & 0xFE0 | (v9 >> 1) & 0x1F;
    if ((v9 & 1) != 0)
      v10 = 0;
    if (byte_1ED830650)
      v11 = v9;
    else
      v11 = v10;
    if (v8 == 19)
      v12 = *((_DWORD *)v7 + 6);
    else
      v12 = 0;
    v13 = sub_1C63AF5CC(v12);
    v16 = llvm::DILocation::encodeDiscriminator((llvm::DILocation *)v11, v5, v13, v14, v15);
    if ((v16 & 0xFF00000000) != 0)
    {
      v17 = v16;
      v18 = *(unsigned __int8 **)(v2 - 8 * *(unsigned int *)(v2 + 8));
      v19 = *v18;
      v20 = (uint64_t)v18;
      if (v19 == 19)
      {
        v20 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
        do
        {
          if (!*(_DWORD *)(v20 + 24))
            break;
          v20 = *(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8) + 8);
        }
        while (*(_BYTE *)v20 == 19);
      }
      v21 = *(_QWORD *)(v2 + 16);
      v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 4) != 0)
        v22 = (_QWORD *)*v22;
      if (v19 != 15)
        v18 = *(unsigned __int8 **)&v18[-8 * *((unsigned int *)v18 + 2)];
      Impl = llvm::DILexicalBlockFile::getImpl(v22, v20, (uint64_t)v18, v17, 0, 1);
      v24 = *(_QWORD *)(v2 + 16);
      v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((v24 & 4) != 0)
        v25 = (uint64_t *)*v25;
      if (*(_DWORD *)(v2 + 8) == 2)
        v26 = *(_QWORD *)(v2 - 8);
      else
        v26 = 0;
      return llvm::DILocation::getImpl(v25, *(_DWORD *)(v2 + 4), *(unsigned __int16 *)(v2 + 2), (uint64_t)Impl, v26, 0, 0, 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unsigned __int8 *llvm::GetUnrollMetadata(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;

  v4 = a1 + 8;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 < 2)
    return 0;
  v7 = -8 * v3;
  while (1)
  {
    v8 = *(unsigned __int8 **)(v4 + v7);
    if (*v8 - 4 <= 0x1E)
    {
      v9 = *(_QWORD *)&v8[-8 * *((unsigned int *)v8 + 2)];
      if (!*(_BYTE *)v9)
      {
        v10 = *(uint64_t **)(v9 + 8);
        v12 = *v10;
        v11 = v10 + 3;
        if (a3 == v12 && (!a3 || !memcmp(a2, v11, a3)))
          break;
      }
    }
    v7 += 8;
    if (v7 == -8)
      return 0;
  }
  return v8;
}

uint64_t sub_1C5F2E620(unsigned int a1)
{
  char v2;
  unsigned int v3;
  unsigned int v4;

  if (byte_1ED830650)
    return 1;
  if ((a1 & 0x40) != 0)
    v2 = 14;
  else
    v2 = 7;
  if ((a1 & 1) != 0)
    v2 = 1;
  v3 = a1 >> v2;
  if ((v3 & 1) != 0)
  {
    v4 = 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    v4 = (v3 >> 2) & 0xFE0 | (v3 >> 1) & 0x1F;
  }
  else
  {
    v4 = (v3 >> 1) & 0x1F;
  }
  if (v4 <= 1)
    return 1;
  else
    return v4;
}

uint64_t sub_1C5F2E684(unsigned int *a1, uint64_t *a2)
{
  unint64_t *v4;
  llvm::ValueHandleBase *v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v11;

  v11 = 0;
  v4 = (unint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, 0, 24, &v11);
  v5 = (llvm::ValueHandleBase *)&v4[3 * a1[2]];
  v6 = *a2;
  *(_QWORD *)v5 = 6;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::AddToUseList(v5);
  sub_1C5087F44(a1, v4);
  v8 = v11;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v9 = a1[2] + 1;
  a1[2] = v9;
  a1[3] = v8;
  return (uint64_t)&v4[3 * v9 - 3];
}

_QWORD *sub_1C5F2E744(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
    if (!v3)
LABEL_44:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[11 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_22:
      v13 += 11;
      if (v13 == v12)
        goto LABEL_44;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 88 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v27 = 0;
      v28 = 1;
      while (v18 != -4096)
      {
        if (v27)
          v29 = 0;
        else
          v29 = v18 == -8192;
        if (v29)
          v27 = v17;
        v30 = v16 + v28++;
        v16 = v30 & v15;
        v17 = *a1 + 88 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_12;
      }
      if (v27)
        v17 = v27;
    }
LABEL_12:
    *(_QWORD *)v17 = v14;
    v19 = (void *)(v17 + 40);
    v20 = v13[1];
    v21 = *(uint64_t *)((char *)v13 + 13);
    *(_QWORD *)(v17 + 24) = v17 + 40;
    *(_QWORD *)(v17 + 13) = v21;
    *(_QWORD *)(v17 + 8) = v20;
    *(_QWORD *)(v17 + 32) = 0x600000000;
    v22 = *((unsigned int *)v13 + 8);
    if (!(_DWORD)v22 || (uint64_t *)v17 == v13)
    {
LABEL_20:
      ++*((_DWORD *)a1 + 2);
      v25 = (uint64_t *)v13[3];
      if (v25 != v13 + 5)
        free(v25);
      goto LABEL_22;
    }
    v23 = (uint64_t *)v13[3];
    if (v23 != v13 + 5)
    {
      *(_QWORD *)(v17 + 24) = v23;
      v26 = *((_DWORD *)v13 + 9);
      *(_DWORD *)(v17 + 32) = v22;
      *(_DWORD *)(v17 + 36) = v26;
      v13[3] = (uint64_t)(v13 + 5);
      *((_DWORD *)v13 + 9) = 0;
      goto LABEL_19;
    }
    if (v22 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 24, v17 + 40, v22, 8);
      v24 = *((unsigned int *)v13 + 8);
      if (!(_DWORD)v24)
        goto LABEL_18;
      v23 = (uint64_t *)v13[3];
      v19 = *(void **)(v17 + 24);
    }
    else
    {
      v24 = *((unsigned int *)v13 + 8);
    }
    memcpy(v19, v23, 8 * v24);
LABEL_18:
    *(_DWORD *)(v17 + 32) = v22;
LABEL_19:
    *((_DWORD *)v13 + 8) = 0;
    goto LABEL_20;
  }
  a1[1] = 0;
  v31 = *((_DWORD *)a1 + 4);
  if (v31)
  {
    v32 = 88 * v31;
    do
    {
      *result = -4096;
      result += 11;
      v32 -= 88;
    }
    while (v32);
  }
  return result;
}

uint64_t sub_1C5F2E9C0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5F2EA64(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5F2EBCC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5F2EBCC(a1, v14, v8);
}

uint64_t sub_1C5F2EBCC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5F2E9C0((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C5F2EC84()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v1 = 0;
  v4 = 1;
  v2 = &v1;
  v3.n128_u64[0] = (unint64_t)"Allow runtime unrolled loops to be unrolled with epilog instead of prolog.";
  v3.n128_u64[1] = 74;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827540, "unroll-runtime-epilog", &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827540, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Verify domtree after unrolling";
  v3.n128_u64[1] = 30;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED827600, "unroll-verify-domtree", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827600, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Verify loopinfo after unrolling";
  v3.n128_u64[1] = 31;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8276C0, "unroll-verify-loopinfo", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8276C0, &dword_1C475E000);
}

uint64_t llvm::UnrollAndJamLoop(llvm ***this, llvm::Loop *a2, int a3, unsigned int a4, BOOL a5, llvm::DomTreeUpdater *a6, int32x2_t *a7, llvm::ScalarEvolution *a8, llvm::DSOLocalEquivalent **a9, llvm::AssumptionCache *a10, const llvm::TargetTransformInfo *a11, llvm::OptimizationRemarkEmitter *a12, llvm::Loop **a13)
{
  uint64_t v16;
  uint64_t v17;
  llvm *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  unint64_t v24;
  void **v25;
  char *v26;
  unint64_t v27;
  void **v28;
  uint64_t LoopPredecessor;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t LoopLatch;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Loop *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  llvm::Loop *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::BasicBlock *v59;
  int v60;
  llvm *v61;
  uint64_t v62;
  uint64_t ExitingBlock;
  uint64_t ExitBlock;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  llvm::BasicBlock *v68;
  unsigned __int8 *v69;
  llvm::Instruction *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Instruction *v109;
  llvm::Instruction *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t i;
  uint64_t v114;
  uint64_t j;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 **v118;
  uint64_t v119;
  unsigned __int8 *v120;
  char v121;
  unsigned __int8 *v122;
  llvm::Instruction *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int32x2_t ****v134;
  _QWORD *v136;
  unint64_t v137;
  int32x2_t ****v138;
  int32x2_t *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  int32x2_t *****v144;
  int32x2_t ****v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t *v157;
  uint64_t v158;
  llvm::Loop *v159;
  char v160;
  int v161;
  char *v162;
  int v163;
  unsigned int v164;
  llvm::Loop **v165;
  llvm::Loop *v166;
  llvm::Loop **v167;
  int v168;
  BOOL v169;
  unsigned int v170;
  llvm::Loop **v171;
  llvm *v172;
  int v173;
  char *v174;
  int v175;
  unsigned int v176;
  llvm **v177;
  llvm *v178;
  llvm **v179;
  int v180;
  BOOL v181;
  unsigned int v182;
  llvm **v183;
  uint64_t *v184;
  char *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t ***v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  _QWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  char **v197;
  llvm::BasicBlock **v198;
  llvm::BasicBlock **v199;
  _QWORD *v200;
  std::string::size_type *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t *v212;
  char **v213;
  uint64_t *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char **v222;
  llvm::BasicBlock **v223;
  char *v224;
  llvm::BasicBlock **v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  llvm::BasicBlock **v242;
  char **v243;
  llvm::BasicBlock **ii;
  llvm::BasicBlock *v245;
  uint64_t *v246;
  char **v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *jj;
  uint64_t v252;
  llvm::BasicBlock *v253;
  _QWORD *v254;
  unint64_t v255;
  int32x2_t ****v256;
  int32x2_t *v257;
  unint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  int32x2_t *****v262;
  int32x2_t ****v263;
  int v264;
  int v265;
  int32x2_t ****v266;
  unint64_t v268;
  int32x2_t ****v269;
  unint64_t v270;
  int32x2_t ****v271;
  int32x2_t *v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  int32x2_t *****v277;
  int32x2_t ****v278;
  int v279;
  int v280;
  llvm::BasicBlock *v281;
  _QWORD *v283;
  unint64_t v284;
  int32x2_t ****v285;
  int32x2_t *v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  int32x2_t *****v291;
  int32x2_t ****v292;
  int v293;
  int v294;
  char *v295;
  _QWORD *v296;
  unint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  int32x2_t *****v300;
  int32x2_t ****v301;
  _QWORD *v303;
  unint64_t v304;
  int32x2_t ****v305;
  int32x2_t *v306;
  unint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  int32x2_t *****v311;
  int32x2_t ****v312;
  int v313;
  int v314;
  int32x2_t ****v315;
  int32x2_t ****v316;
  _QWORD *v318;
  unint64_t v319;
  int32x2_t ****v320;
  int32x2_t *v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  int32x2_t *****v326;
  int32x2_t ****v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  BOOL v332;
  _QWORD *v334;
  unint64_t v335;
  unint64_t **v336;
  _QWORD *v337;
  unint64_t v338;
  unint64_t *v339;
  uint64_t v340;
  int32x2_t *v341;
  unint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  int v357;
  int v358;
  llvm::BasicBlock **v359;
  uint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  uint64_t v363;
  int32x2_t *v364;
  unint64_t v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  int v371;
  int v372;
  int32x2_t ****v373;
  _QWORD *v375;
  unint64_t v376;
  int32x2_t ****v377;
  int32x2_t *v378;
  unint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  int32x2_t *****v383;
  int32x2_t ****v384;
  int v385;
  int v386;
  _QWORD *v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t *v392;
  uint64_t v393;
  int32x2_t *v394;
  unint64_t v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  int v401;
  int v402;
  unint64_t v404;
  unint64_t *v405;
  uint64_t v406;
  int32x2_t *v407;
  unint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  int v414;
  int v415;
  char *v416;
  char *v417;
  uint64_t v418;
  uint64_t kk;
  uint64_t v420;
  _BOOL4 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t **v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int32x2_t ****v453;
  _QWORD *v455;
  unint64_t v456;
  int32x2_t ****v457;
  int32x2_t *v458;
  unint64_t v459;
  uint64_t v460;
  unsigned int v461;
  uint64_t v462;
  int32x2_t *****v463;
  int32x2_t ****v464;
  int v465;
  int v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t *v485;
  llvm::BasicBlock **v486;
  llvm::BasicBlock *v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  unsigned int k;
  llvm::BasicBlock *v503;
  llvm::BasicBlock *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char *v509;
  char *v510;
  llvm::Value *v511;
  char *v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t m;
  llvm::Instruction *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  llvm::ValueSymbolTable *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  char *v538;
  uint64_t v539;
  llvm::Value *v540;
  char *v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  unsigned int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  char *v554;
  char *v555;
  llvm::Value *v556;
  char *v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  uint64_t n;
  llvm::Instruction *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  llvm::ValueSymbolTable *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  llvm::BasicBlock **v578;
  uint64_t *v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  llvm::ScalarEvolution *DomTree;
  const llvm::TargetTransformInfo *v587;
  const llvm::TargetTransformInfo *v588;
  llvm::Loop *v589;
  _QWORD *v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t *v595;
  uint64_t v596;
  int32x2_t *v597;
  unint64_t v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  int v604;
  int v605;
  unint64_t v607;
  unint64_t *v608;
  uint64_t v609;
  int32x2_t *v610;
  unint64_t v611;
  uint64_t v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t v616;
  int v617;
  int v618;
  unsigned int data;
  unsigned int v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  llvm::DiagnosticInfoOptimizationBase *v625;
  char *v626;
  unint64_t v627;
  void **v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  llvm::ValueSymbolTable *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  char *v638;
  unint64_t v639;
  void **v640;
  unint64_t v641;
  void **v642;
  llvm::TargetTransformInfo *v643;
  llvm::Loop **v644;
  uint64_t v645;
  _QWORD *v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  _QWORD *v650;
  llvm::LoopInfo *v651;
  unsigned int v652;
  uint64_t v653;
  int v654;
  uint64_t *v655;
  char *v656;
  uint64_t *v657;
  char **v658;
  llvm::BasicBlock **v659;
  uint64_t *v660;
  uint64_t *v661;
  uint64_t *v662;
  char **v663;
  char *v664;
  llvm::BasicBlock **v665;
  uint64_t *v666;
  uint64_t *v667;
  llvm::BasicBlock **v668;
  llvm::LoopInfo *v669;
  uint64_t v670;
  uint64_t *v671;
  uint64_t *v672;
  char **__p;
  unint64_t v675;
  llvm::Instruction *v676;
  llvm::Instruction *v677;
  llvm::BasicBlock **v678;
  uint64_t *v679;
  uint64_t *v680;
  uint64_t *v681;
  uint64_t *v682;
  uint64_t v683;
  unint64_t *v684;
  int32x2_t ****v685;
  _QWORD *v686;
  uint64_t v687;
  unsigned int v688;
  uint64_t v689[3];
  char v690;
  uint64_t v691[2];
  int v692;
  unsigned __int8 *v693;
  char v694[8];
  uint64_t v695;
  void *v696;
  uint64_t *v697;
  _QWORD v698[2];
  unsigned int v699;
  uint64_t v700[3];
  char v701;
  _BYTE *v702;
  void *v703;
  uint64_t v704;
  int v705;
  _BYTE v706[32];
  llvm::Loop **v707;
  void *v708;
  uint64_t v709;
  int v710;
  _BYTE v711[32];
  std::string v712;
  void *v713;
  char v714;
  llvm *v715;
  unsigned int v716;
  llvm::Loop *v717;
  std::string v718;
  void *v719;
  _BYTE v720[32];
  const char *v721;
  uint64_t v722;
  _QWORD *v723;
  int32x2_t ****v724;
  _QWORD *v725;
  void *v726;
  void *v727;
  uint64_t v728;
  int32x2_t ****v729;
  _QWORD v730[4];
  char v731;
  char v732;
  void *v733;
  uint64_t v734;
  _QWORD v735[26];
  char v736;
  _BYTE *v737;
  void *v738;
  uint64_t v739;
  int v740;
  _BYTE v741[12];
  int v742;
  uint64_t v743;
  _QWORD v744[3];
  __int16 v745;
  void *v746;
  void *v747;
  uint64_t v748;
  int v749;
  _BYTE v750[48];
  void *v751;
  unsigned int v752;
  _QWORD v753[36];

  LODWORD(v16) = a3;
  LODWORD(v17) = (_DWORD)a2;
  v753[34] = *MEMORY[0x1E0C80C00];
  v717 = (llvm::Loop *)this;
  v716 = a2;
  v670 = (uint64_t)*this[4];
  v19 = *this[1];
  v715 = v19;
  if (a2 <= 1 && !a3)
    return 0;
  if (!(a4 % a2)
    || (LOBYTE(v643) = 1,
        v20 = 0,
        llvm::UnrollRuntimeLoopRemainder((llvm *)this, a2, 0, 1, a5, 0, a6, (llvm::LoopInfo *)a7, a8, (llvm::DominatorTree *)a9, a10, v643, (BOOL)a12, v644)))
  {
    if (a7)
    {
      llvm::ScalarEvolution::forgetLoop(a7, (const llvm::Loop *)this);
      llvm::ScalarEvolution::forgetLoop(a7, v19);
    }
    if ((_DWORD)v17 == (_DWORD)v16)
    {
      llvm::Loop::getStartLoc((llvm::Loop *)this, &v718);
      data = v718.__r_.__value_.__l.__data_;
      if (v718.__r_.__value_.__r.__words[0])
      {
        v622 = *(_QWORD *)(v718.__r_.__value_.__r.__words[0]
                         - 8 * *(unsigned int *)(v718.__r_.__value_.__r.__words[0] + 8));
        if (*(_BYTE *)v622 != 15)
          v622 = *(_QWORD *)(v622 - 8 * *(unsigned int *)(v622 + 8));
        v621 = *(_DWORD *)(v718.__r_.__value_.__r.__words[0] + 4);
        data = *(unsigned __int16 *)(v718.__r_.__value_.__r.__words[0] + 2);
      }
      else
      {
        v621 = 0;
        v622 = 0;
      }
      v623 = **((_QWORD **)v717 + 4);
      v624 = *(_QWORD *)(v623 + 56);
      LODWORD(v727) = 9;
      BYTE4(v727) = 2;
      v728 = v624;
      v729 = (int32x2_t ****)v622;
      v730[0] = __PAIR64__(data, v621);
      v730[1] = "loop-unroll-and-jam";
      v730[2] = "FullyUnrolled";
      v730[3] = 13;
      v731 = 0;
      v732 = 0;
      v733 = v735;
      v734 = 0x400000000;
      v741[8] = 0;
      v742 = -1;
      v743 = v623;
      v726 = &off_1E814E500;
      v746 = "completely unroll and jammed loop with ";
      v747 = (void *)39;
      sub_1C53B17B4((uint64_t)&v733, (const void **)&v746);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v712, "UnrollCount", 0xBuLL, v16);
      v625 = (llvm::DiagnosticInfoOptimizationBase *)sub_1C47E3888((uint64_t)&v726, (uint64_t)&v712);
      v746 = " iterations";
      v747 = (void *)11;
      sub_1C53B17B4((uint64_t)v625 + 80, (const void **)&v746);
      llvm::OptimizationRemarkEmitter::emit(a11, v625);
      if (v714 < 0)
        operator delete(v713);
      if (SHIBYTE(v712.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v712.__r_.__value_.__l.__data_);
      v726 = &off_1E814E790;
      v626 = (char *)v733;
      if ((_DWORD)v734)
      {
        v627 = (unint64_t)v734 << 6;
        do
        {
          v628 = (void **)&v626[v627];
          if (v626[v627 - 17] < 0)
            operator delete(*(v628 - 5));
          if (*((char *)v628 - 41) < 0)
            operator delete(*(v628 - 8));
          v627 -= 64;
        }
        while (v627);
        v626 = (char *)v733;
      }
      if (v626 != (char *)v735)
        free(v626);
      if (v718.__r_.__value_.__r.__words[0])
        llvm::MetadataTracking::untrack((uint64_t)&v718, (unsigned __int8 *)v718.__r_.__value_.__l.__data_);
LABEL_31:
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v717);
      if (!LoopPredecessor)
        goto LABEL_38;
      v30 = *(_QWORD *)(LoopPredecessor + 40);
      if (v30 == LoopPredecessor + 40)
        goto LABEL_38;
      if (v30)
        v31 = v30 - 24;
      else
        v31 = 0;
      if (*(_BYTE *)(v31 + 16) == 30)
      {
        if ((*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 3)
        {
LABEL_38:
          v32 = 0;
          goto LABEL_43;
        }
      }
      else
      {
        v32 = 0;
        switch(*(_BYTE *)(v31 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_43;
          case 0x1E:
LABEL_1034:
            __break(1u);
            goto LABEL_1035;
          case 0x1F:
            v33 = (*(_DWORD *)(v31 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
LABEL_1035:
            v33 = (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x27:
            v33 = *(_DWORD *)(v31 + 80) + 1;
            break;
          default:
            goto LABEL_38;
        }
        if (v33 != 1)
          goto LABEL_38;
      }
      v32 = LoopPredecessor;
LABEL_43:
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v717);
      v35 = *(_QWORD *)(LoopLatch + 40);
      v645 = v32;
      if (v35 == LoopLatch + 40)
      {
        v36 = 0;
      }
      else
      {
        if (v35)
          v36 = v35 - 24;
        else
          v36 = 0;
        if (*(unsigned __int8 *)(v36 + 16) - 29 >= 0xB)
          v36 = 0;
      }
      if (*(_BYTE *)(v36 + 16) == 30)
        v37 = v36;
      else
        v37 = 0;
      v38 = v717;
      v40 = *(_QWORD *)(v37 - 32);
      v39 = v37 - 32;
      v41 = sub_1C477672C((uint64_t)v717 + 56, v40);
      v42 = *((_QWORD *)v38 + 8);
      v43 = 72;
      if (v42 == *((_QWORD *)v38 + 7))
        v43 = 76;
      v646 = (_QWORD *)(v42 + 8 * *(unsigned int *)((char *)v38 + v43));
      v647 = v41;
      if (v41 == v646)
        v44 = 0;
      else
        v44 = -1;
      v653 = *(_QWORD *)(v39 + 32 * v44);
      v45 = v715;
      v46 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v715);
      v47 = *(_QWORD *)(v46 + 40);
      if (v47 == v46 + 40)
      {
        v48 = 0;
      }
      else
      {
        if (v47)
          v48 = v47 - 24;
        else
          v48 = 0;
        if (*(unsigned __int8 *)(v48 + 16) - 29 >= 0xB)
          v48 = 0;
      }
      v49 = *(unsigned __int8 *)(v48 + 16);
      v669 = a6;
      v652 = v16;
      v654 = v17;
      if (v49 != 30)
        __asm { BR              X11 }
      v50 = sub_1C477672C((uint64_t)v45 + 56, *(_QWORD *)(v48 - 32));
      v16 = *((_QWORD *)v45 + 8);
      v51 = 72;
      if (v16 == *((_QWORD *)v45 + 7))
        v51 = 76;
      v17 = *(unsigned int *)((char *)v45 + v51);
      v718.__r_.__value_.__r.__words[0] = (std::string::size_type)v720;
      v718.__r_.__value_.__l.__size_ = (std::string::size_type)v720;
      v718.__r_.__value_.__r.__words[2] = 4;
      LODWORD(v719) = 0;
      v707 = (llvm::Loop **)v711;
      v708 = v711;
      v709 = 4;
      v710 = 0;
      v702 = v706;
      v703 = v706;
      v704 = 4;
      v705 = 0;
      v52 = v717;
      v53 = (uint64_t *)*((_QWORD *)v715 + 4);
      v54 = *((_QWORD *)v715 + 5) - (_QWORD)v53;
      if (v54)
      {
        v55 = 8 * (v54 >> 3);
        do
        {
          v56 = *v53++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v718, v56);
          v55 -= 8;
        }
        while (v55);
      }
      sub_1C5F33B00((uint64_t)v52, (unsigned int *)&v707, (llvm::SmallPtrSetImplBase *)&v702, (uint64_t)a8);
      v57 = operator new(8uLL);
      *v57 = v670;
      v664 = (char *)(v57 + 1);
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v715);
      if (!LoopPredecessor)
        goto LABEL_80;
      v58 = *(_QWORD *)(LoopPredecessor + 40);
      if (v58 == LoopPredecessor + 40)
        goto LABEL_80;
      if (v58)
        v31 = v58 - 24;
      else
        v31 = 0;
      if (*(_BYTE *)(v31 + 16) != 30)
      {
        v59 = 0;
        switch(*(_BYTE *)(v31 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_85;
          case 0x1E:
            goto LABEL_1034;
          case 0x1F:
            v60 = (*(_DWORD *)(v31 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_83;
          case 0x20:
            v60 = (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_83;
          case 0x27:
            v60 = *(_DWORD *)(v31 + 80) + 1;
LABEL_83:
            if (v60 == 1)
              goto LABEL_84;
            goto LABEL_80;
          default:
            goto LABEL_80;
        }
      }
      if ((*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 3)
LABEL_80:
        v59 = 0;
      else
LABEL_84:
        v59 = (llvm::BasicBlock *)LoopPredecessor;
LABEL_85:
      v678 = (llvm::BasicBlock **)operator new(8uLL);
      *v678 = v59;
      v665 = v678 + 1;
      v61 = v715;
      v62 = **((_QWORD **)v715 + 4);
      v672 = (uint64_t *)operator new(8uLL);
      *v672 = v62;
      ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v61);
      v668 = (llvm::BasicBlock **)operator new(8uLL);
      *v668 = (llvm::BasicBlock *)ExitingBlock;
      v663 = (char **)(v668 + 1);
      ExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v715);
      v667 = (uint64_t *)operator new(8uLL);
      *v667 = ExitBlock;
      v658 = (char **)(v667 + 1);
      v65 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v717);
      v666 = (uint64_t *)operator new(8uLL);
      *v666 = v65;
      v661 = v666 + 1;
      v699 = 128;
      v698[0] = operator new(0x2000uLL, (std::align_val_t)8uLL);
      v698[1] = 0;
      v66 = 0x2000;
      v67 = (_QWORD *)(v698[0] + 16);
      do
      {
        *v67 = 0;
        v67[1] = -4096;
        *(v67 - 2) = &unk_1E814DA10;
        *(v67 - 1) = 2;
        v67[2] = 0;
        v67 += 8;
        v66 -= 64;
      }
      while (v66);
      LOBYTE(v700[0]) = 0;
      v701 = 0;
      v68 = (llvm::BasicBlock *)*((_QWORD *)*v678 + 5);
      if (v68 == (llvm::BasicBlock *)((char *)*v678 + 40))
      {
        v70 = 0;
      }
      else
      {
        if (v68)
          v69 = (unsigned __int8 *)v68 - 24;
        else
          v69 = 0;
        if (v69[16] - 29 >= 0xB)
          v70 = 0;
        else
          v70 = (llvm::Instruction *)v69;
      }
      v746 = &v748;
      v747 = (void *)0x800000000;
      v726 = v730;
      v727 = v730;
      v728 = 8;
      LODWORD(v729) = 0;
      v651 = (llvm::LoopInfo *)a7;
      v679 = v57;
      v649 = v16;
      v650 = v50;
      v648 = v17;
      v676 = v70;
      if (*(_QWORD *)(v670 + 40) != v670 + 40)
      {
        v71 = 0;
        v72 = *(_QWORD *)(v670 + 48);
        v73 = v72 - 24;
        if (v72)
          v74 = v72 - 24;
        else
          v74 = 0;
        if (v72)
        {
          v75 = 0;
          if (*(_BYTE *)(v74 + 16) == 83)
          {
            v76 = 0;
            do
            {
              v77 = *(_DWORD *)(v73 + 20);
              v78 = v77 & 0x7FFFFFF;
              if ((v77 & 0x7FFFFFF) != 0)
              {
                v79 = 0;
                while (1)
                {
                  v80 = v73 - 32 * v78;
                  if ((v77 & 0x40000000) != 0)
                    v80 = *(_QWORD *)(v73 - 8);
                  if (*(_QWORD *)(v80 + 32 * *(unsigned int *)(v73 + 60) + 8 * v79) == LoopLatch)
                    break;
                  if (v78 == ++v79)
                    goto LABEL_108;
                }
              }
              else
              {
LABEL_108:
                LODWORD(v79) = -1;
              }
              if ((v77 & 0x40000000) != 0)
                v81 = *(_QWORD *)(v73 - 8);
              else
                v81 = v73 - 32 * v78;
              v82 = *(_QWORD *)(v81 + 32 * v79);
              if (v82)
                v83 = *(unsigned __int8 *)(v82 + 16) >= 0x1Cu;
              else
                v83 = 0;
              if (v83)
              {
                if (v76 >= HIDWORD(v747))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v746, (uint64_t)&v748, v76 + 1, 8);
                  v76 = v747;
                }
                *((_QWORD *)v746 + v76) = v82;
                v76 = (_DWORD)v747 + 1;
                LODWORD(v747) = (_DWORD)v747 + 1;
              }
              v84 = *(_QWORD *)(v73 + 32);
              v73 = v84 - 24;
              if (v84)
                v85 = v84 - 24;
              else
                v85 = 0;
            }
            while (v84 && *(_BYTE *)(v85 + 16) == 83);
            if (v76)
            {
              v86 = 0;
              v75 = 0;
              v71 = 0;
              while (1)
              {
                v87 = *((_QWORD *)v746 + v76 - 1);
                LODWORD(v747) = v76 - 1;
                v88 = sub_1C477672C((uint64_t)&v702, *(_QWORD *)(v87 + 40));
                if (v703 == v702)
                  v89 = (uint64_t *)((char *)&v704 + 4);
                else
                  v89 = &v704;
                if (v88 != (_QWORD *)((char *)v703 + 8 * *(unsigned int *)v89))
                {
                  if (v75 >= v86)
                  {
                    v90 = v75 - v71;
                    v91 = v90 + 1;
                    if ((unint64_t)(v90 + 1) >> 61)
LABEL_1007:
                      abort();
                    if (((char *)v86 - (char *)v71) >> 2 > v91)
                      v91 = ((char *)v86 - (char *)v71) >> 2;
                    if ((unint64_t)((char *)v86 - (char *)v71) >= 0x7FFFFFFFFFFFFFF8)
                      v92 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v92 = v91;
                    if (v92)
                    {
                      if (v92 >> 61)
LABEL_1008:
                        sub_1C4764EE4();
                      v93 = (char *)operator new(8 * v92);
                    }
                    else
                    {
                      v93 = 0;
                    }
                    v94 = (uint64_t *)&v93[8 * v90];
                    *v94 = v87;
                    v95 = v94 + 1;
                    if (v75 != v71)
                    {
                      do
                      {
                        v96 = *--v75;
                        *--v94 = v96;
                      }
                      while (v75 != v71);
                      v75 = v71;
                    }
                    v71 = v94;
                    v86 = (uint64_t *)&v93[8 * v92];
                    if (v75)
                      operator delete(v75);
                    v75 = v95;
                  }
                  else
                  {
                    *v75++ = v87;
                  }
                }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v726, v87);
                v97 = sub_1C477672C((uint64_t)&v702, *(_QWORD *)(v87 + 40));
                if (v703 == v702)
                  v98 = (uint64_t *)((char *)&v704 + 4);
                else
                  v98 = &v704;
                if (v97 == (_QWORD *)((char *)v703 + 8 * *(unsigned int *)v98))
                  goto LABEL_172;
                v99 = *(_DWORD *)(v87 + 20);
                if ((v99 & 0x40000000) != 0)
                {
                  v101 = *(uint64_t **)(v87 - 8);
                  v100 = v99 & 0x7FFFFFF;
                  if (v100)
                  {
LABEL_158:
                    v102 = 32 * v100;
                    do
                    {
                      v103 = *v101;
                      if (*v101)
                        v104 = *(unsigned __int8 *)(*v101 + 16) >= 0x1Cu;
                      else
                        v104 = 0;
                      if (v104)
                      {
                        v105 = sub_1C477672C((uint64_t)&v726, *v101);
                        v106 = v727 == v726 ? (uint64_t *)((char *)&v728 + 4) : &v728;
                        if (v105 == (_QWORD *)((char *)v727 + 8 * *(unsigned int *)v106))
                        {
                          v107 = v747;
                          if (v747 >= (unint64_t)HIDWORD(v747))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v746, (uint64_t)&v748, v747 + 1, 8);
                            v107 = v747;
                          }
                          *((_QWORD *)v746 + v107) = v103;
                          LODWORD(v747) = (_DWORD)v747 + 1;
                        }
                      }
                      v101 += 4;
                      v102 -= 32;
                    }
                    while (v102);
                  }
                }
                else
                {
                  v100 = v99 & 0x7FFFFFF;
                  v101 = (uint64_t *)(v87 - 32 * v100);
                  if (v100)
                    goto LABEL_158;
                }
LABEL_172:
                v76 = v747;
                if (!(_DWORD)v747)
                  goto LABEL_176;
              }
            }
            goto LABEL_175;
          }
        }
        else
        {
          v75 = 0;
        }
LABEL_176:
        if (v727 != v726)
          free(v727);
        if (v746 != &v748)
          free(v746);
        if (v75 != v71)
        {
          v108 = *((_QWORD *)v676 + 5);
          do
          {
            v110 = (llvm::Instruction *)*--v75;
            v109 = v110;
            if (*((_QWORD *)v110 + 5) != v108)
              llvm::Instruction::moveBefore(v109, v676);
          }
          while (v75 != v71);
        }
        if (v71)
          operator delete(v71);
        sub_1C4DFE414((uint64_t)v694, (uint64_t)v717);
        llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v694, v669);
        v655 = v697;
        v671 = (uint64_t *)v696;
        v111 = v679;
        if (llvm::Function::isDebugInfoForProfiling(*(llvm::Function **)(v670 + 56)))
        {
          if (!byte_1ED830650)
          {
            v112 = *((_QWORD *)v717 + 4);
            for (i = *((_QWORD *)v717 + 5); v112 != i; v112 += 8)
            {
              v114 = *(_QWORD *)v112 + 40;
              for (j = *(_QWORD *)(*(_QWORD *)v112 + 48); j != v114; j = *(_QWORD *)(j + 8))
              {
                if (j)
                  v116 = j - 24;
                else
                  v116 = 0;
                if (!sub_1C4D99D08(v116))
                {
                  v119 = *(_QWORD *)(v116 + 48);
                  v118 = (unsigned __int8 **)(v116 + 48);
                  v117 = v119;
                  if (v119)
                  {
                    v120 = (unsigned __int8 *)sub_1C5F2E3BC(v117, v716);
                    if (v121)
                    {
                      v693 = v120;
                      if (v120)
                        llvm::MetadataTracking::track((uint64_t)&v693, v120, 2);
                      if (&v693 == v118)
                      {
                        if (v693)
                          llvm::MetadataTracking::untrack((uint64_t)&v693, v693);
                      }
                      else
                      {
                        if (*v118)
                          llvm::MetadataTracking::untrack((uint64_t)v118, *v118);
                        v122 = v693;
                        *v118 = v693;
                        if (v122)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)&v693, v122, (uint64_t)v118);
                          v693 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v716 == 1)
        {
          v123 = (llvm::Instruction *)(v678 + 1);
LABEL_211:
          v124 = (uint64_t *)v123;
          v680 = v111;
          if (*(_QWORD *)(v653 + 40) == v653 + 40)
            goto LABEL_258;
          v125 = *(_QWORD *)(v653 + 48);
          v126 = v125 - 24;
          v127 = v125 ? v125 - 24 : 0;
          if (!v125 || *(_BYTE *)(v127 + 16) != 83)
            goto LABEL_258;
          v128 = *v666;
          v129 = *(v661 - 1);
LABEL_218:
          v130 = *(_DWORD *)(v126 + 20);
          v131 = v130 & 0x7FFFFFF;
          if ((v130 & 0x7FFFFFF) == 0)
            goto LABEL_253;
          v132 = 0;
          v133 = v126 - 32 * v131;
          while (1)
          {
            if ((v130 & 0x40000000) != 0)
            {
              if (*(_QWORD *)(*(_QWORD *)(v126 - 8) + 32 * *(unsigned int *)(v126 + 60) + 8 * v132) == v128)
              {
                v133 = *(_QWORD *)(v126 - 8);
LABEL_227:
                v134 = *(int32x2_t *****)(v133 + 32 * v132);
                v727 = (void *)2;
                v728 = 0;
                v729 = v134;
                if (v134 != (int32x2_t ****)-8192 && v134 != (int32x2_t ****)-4096 && v134 != 0)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v727);
                v726 = &unk_1E814DA10;
                v730[0] = v698;
                v136 = sub_1C52E2ED8((uint64_t)v698, &v726);
                if (v729 != (int32x2_t ****)-8192 && v729 != (int32x2_t ****)-4096 && v729)
                {
                  v137 = (unint64_t)v727 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)((unint64_t)v727 & 0xFFFFFFFFFFFFFFF8) = v728;
                  if (v728)
                  {
                    *(_QWORD *)v728 = *(_QWORD *)v728 & 7 | v137;
                  }
                  else
                  {
                    v138 = v729;
                    v139 = ***v729;
                    v140 = (unint64_t)v139[303];
                    if (v140 <= v137)
                    {
                      v141 = v139[305].u32[0];
                      if (v140 + 16 * v141 > v137)
                      {
                        v142 = v141 - 1;
                        LODWORD(v143) = v142 & ((v729 >> 4) ^ (v729 >> 9));
                        v144 = (int32x2_t *****)(v140 + 16 * v143);
                        v145 = *v144;
                        if (v729 != *v144)
                        {
                          v146 = 1;
                          do
                          {
                            if (v145 == (int32x2_t ****)-4096)
                              goto LABEL_245;
                            v147 = v143 + v146++;
                            v143 = v147 & v142;
                            v145 = *(int32x2_t *****)(v140 + 16 * v143);
                          }
                          while (v729 != v145);
                          v144 = (int32x2_t *****)(v140 + 16 * v143);
                        }
                        *v144 = (int32x2_t ****)-8192;
                        v139[304] = vadd_s32(v139[304], (int32x2_t)0x1FFFFFFFFLL);
                        v138 = v729;
LABEL_245:
                        *((_BYTE *)v138 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v148 = v136[7];
                if (v148)
                  sub_1C6125834(v126, v132, v148);
                v149 = *(_DWORD *)(v126 + 20);
                if ((v149 & 0x40000000) != 0)
                  v150 = *(_QWORD *)(v126 - 8);
                else
                  v150 = v126 - 32 * (v149 & 0x7FFFFFF);
                *(_QWORD *)(v150 + 32 * *(unsigned int *)(v126 + 60) + 8 * v132) = v129;
LABEL_253:
                v151 = *(_QWORD *)(v126 + 32);
                v126 = v151 - 24;
                if (v151)
                  v152 = v151 - 24;
                else
                  v152 = 0;
                if (!v151 || *(_BYTE *)(v152 + 16) != 83)
                {
LABEL_258:
                  v153 = *(v124 - 1);
                  v154 = *(_QWORD *)(v153 + 40);
                  if (v154 == v153 + 40)
                  {
                    v155 = 0;
                  }
                  else
                  {
                    if (v154)
                      v155 = v154 - 24;
                    else
                      v155 = 0;
                    if (*(unsigned __int8 *)(v155 + 16) - 29 >= 0xB)
                      v155 = 0;
                  }
                  v437 = *v672;
                  v438 = (uint64_t *)(v155 - 32);
                  if (*(_QWORD *)(v155 - 32))
                  {
                    **(_QWORD **)(v155 - 16) = *(_QWORD *)(v155 - 24);
                    v439 = *(_QWORD *)(v155 - 24);
                    if (v439)
                      *(_QWORD *)(v439 + 16) = *(_QWORD *)(v155 - 16);
                  }
                  *v438 = v437;
                  if (v437)
                  {
                    v442 = *(_QWORD *)(v437 + 8);
                    v440 = (uint64_t **)(v437 + 8);
                    v441 = v442;
                    *(_QWORD *)(v155 - 24) = v442;
                    if (v442)
                      *(_QWORD *)(v441 + 16) = v155 - 24;
                    *(_QWORD *)(v155 - 16) = v440;
                    *v440 = v438;
                  }
                  v443 = *v111;
                  if (v654 == v652)
                  {
                    v472 = *(_QWORD *)(v443 + 48);
                    v473 = v472 - 24;
                    if (v472)
                      v474 = v472 - 24;
                    else
                      v474 = 0;
                    if (!v472)
                      goto LABEL_798;
                    while (1)
                    {
                      if (*(_BYTE *)(v474 + 16) != 83)
                        goto LABEL_798;
                      v475 = *(_DWORD *)(v473 + 20);
                      v476 = v475 & 0x7FFFFFF;
                      if ((v475 & 0x7FFFFFF) != 0)
                      {
                        v477 = 0;
                        v478 = v111;
                        do
                        {
                          v479 = v473 - 32 * v476;
                          if ((v475 & 0x40000000) != 0)
                            v479 = *(_QWORD *)(v473 - 8);
                          if (*(_QWORD *)(v479 + 32 * *(unsigned int *)(v473 + 60) + 8 * v477) == v645)
                            goto LABEL_790;
                          ++v477;
                        }
                        while (v476 != v477);
                        LODWORD(v477) = -1;
                      }
                      else
                      {
                        LODWORD(v477) = -1;
                        v478 = v111;
                      }
LABEL_790:
                      if ((v475 & 0x40000000) != 0)
                        v480 = *(_QWORD *)(v473 - 8);
                      else
                        v480 = v473 - 32 * v476;
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v473, *(llvm::Value **)(v480 + 32 * v477), (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v473 + 40) + 40, (uint64_t ***)v473);
                      v481 = *(_QWORD *)(v473 + 24);
                      v482 = *(_QWORD **)(v473 + 32);
                      *v482 = v481;
                      *(_QWORD *)(v481 + 8) = v482;
                      *(_QWORD *)(v473 + 24) = 0;
                      *(_QWORD *)(v473 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v473);
                      v483 = *(_QWORD *)(*v478 + 48);
                      v473 = v483 - 24;
                      if (v483)
                        v474 = v483 - 24;
                      else
                        v474 = 0;
                      if (!v483)
                        goto LABEL_798;
                    }
                  }
                  if (*(_QWORD *)(v443 + 40) == v443 + 40)
                    goto LABEL_798;
                  v444 = *(_QWORD *)(v443 + 48);
                  v445 = v444 - 24;
                  v446 = v444 ? v444 - 24 : 0;
                  if (!v444 || *(_BYTE *)(v446 + 16) != 83)
                    goto LABEL_798;
                  v447 = *v666;
                  v448 = *(v661 - 1);
LABEL_736:
                  v449 = *(_DWORD *)(v445 + 20);
                  v450 = v449 & 0x7FFFFFF;
                  if ((v449 & 0x7FFFFFF) == 0)
                    goto LABEL_771;
                  v451 = 0;
                  v452 = v445 - 32 * v450;
                  while (1)
                  {
                    if ((v449 & 0x40000000) != 0)
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v445 - 8) + 32 * *(unsigned int *)(v445 + 60) + 8 * v451) == v447)
                      {
                        v452 = *(_QWORD *)(v445 - 8);
LABEL_745:
                        v453 = *(int32x2_t *****)(v452 + 32 * v451);
                        v727 = (void *)2;
                        v728 = 0;
                        v729 = v453;
                        if (v453 != (int32x2_t ****)-8192 && v453 != (int32x2_t ****)-4096 && v453 != 0)
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v727);
                        v726 = &unk_1E814DA10;
                        v730[0] = v698;
                        v455 = sub_1C52E2ED8((uint64_t)v698, &v726);
                        if (v729 != (int32x2_t ****)-8192 && v729 != (int32x2_t ****)-4096 && v729)
                        {
                          v456 = (unint64_t)v727 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)((unint64_t)v727 & 0xFFFFFFFFFFFFFFF8) = v728;
                          if (v728)
                          {
                            *(_QWORD *)v728 = *(_QWORD *)v728 & 7 | v456;
                          }
                          else
                          {
                            v457 = v729;
                            v458 = ***v729;
                            v459 = (unint64_t)v458[303];
                            if (v459 <= v456)
                            {
                              v460 = v458[305].u32[0];
                              if (v459 + 16 * v460 > v456)
                              {
                                v461 = v460 - 1;
                                LODWORD(v462) = v461 & ((v729 >> 4) ^ (v729 >> 9));
                                v463 = (int32x2_t *****)(v459 + 16 * v462);
                                v464 = *v463;
                                if (v729 == *v463)
                                {
LABEL_762:
                                  *v463 = (int32x2_t ****)-8192;
                                  v458[304] = vadd_s32(v458[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v457 = v729;
                                }
                                else
                                {
                                  v465 = 1;
                                  while (v464 != (int32x2_t ****)-4096)
                                  {
                                    v466 = v462 + v465++;
                                    v462 = v466 & v461;
                                    v464 = *(int32x2_t *****)(v459 + 16 * v462);
                                    if (v729 == v464)
                                    {
                                      v463 = (int32x2_t *****)(v459 + 16 * v462);
                                      goto LABEL_762;
                                    }
                                  }
                                }
                                *((_BYTE *)v457 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        v467 = v455[7];
                        if (v467)
                          sub_1C6125834(v445, v451, v467);
                        v468 = *(_DWORD *)(v445 + 20);
                        if ((v468 & 0x40000000) != 0)
                          v469 = *(_QWORD *)(v445 - 8);
                        else
                          v469 = v445 - 32 * (v468 & 0x7FFFFFF);
                        *(_QWORD *)(v469 + 32 * *(unsigned int *)(v445 + 60) + 8 * v451) = v448;
LABEL_771:
                        v470 = *(_QWORD *)(v445 + 32);
                        v445 = v470 - 24;
                        if (v470)
                          v471 = v470 - 24;
                        else
                          v471 = 0;
                        if (!v470 || *(_BYTE *)(v471 + 16) != 83)
                        {
LABEL_798:
                          v484 = v716 - 1;
                          if (v716 != 1)
                          {
                            v485 = v111 + 1;
                            v486 = v678;
                            do
                            {
                              v487 = (llvm::BasicBlock *)*((_QWORD *)*v486 + 5);
                              if (v487 == (llvm::BasicBlock *)((char *)*v486 + 40))
                              {
                                v488 = 0;
                              }
                              else
                              {
                                if (v487)
                                  v488 = (uint64_t)v487 - 24;
                                else
                                  v488 = 0;
                                if (*(unsigned __int8 *)(v488 + 16) - 29 >= 0xB)
                                  v488 = 0;
                              }
                              v489 = *v485;
                              v490 = (_QWORD *)(v488 - 32);
                              if (*(_QWORD *)(v488 - 32))
                              {
                                **(_QWORD **)(v488 - 16) = *(_QWORD *)(v488 - 24);
                                v491 = *(_QWORD *)(v488 - 24);
                                if (v491)
                                  *(_QWORD *)(v491 + 16) = *(_QWORD *)(v488 - 16);
                              }
                              *v490 = v489;
                              if (v489)
                              {
                                v494 = *(_QWORD *)(v489 + 8);
                                v492 = (_QWORD *)(v489 + 8);
                                v493 = v494;
                                *(_QWORD *)(v488 - 24) = v494;
                                if (v494)
                                  *(_QWORD *)(v493 + 16) = v488 - 24;
                                *(_QWORD *)(v488 - 16) = v492;
                                *v492 = v490;
                              }
                              ++v485;
                              ++v486;
                              --v484;
                            }
                            while (v484);
                          }
                          v495 = (_QWORD *)(v649 + 8 * v648);
                          v496 = (uint64_t)*(v663 - 1);
                          v497 = *(_QWORD *)(v496 + 40);
                          if (v497 == v496 + 40)
                          {
                            v499 = 0;
                          }
                          else
                          {
                            if (v497)
                              v498 = v497 - 24;
                            else
                              v498 = 0;
                            if (*(unsigned __int8 *)(v498 + 16) - 29 >= 0xB)
                              v499 = 0;
                            else
                              v499 = v498;
                          }
                          v500 = v650 != v495;
                          sub_1C53E1B14(v499, v650 == v495, *v672);
                          sub_1C53E1B14(v499, v500, *v667);
                          llvm::BasicBlock::replacePhiUsesWith(*v672, *v678, (llvm::BasicBlock *)*(v124 - 1));
                          llvm::BasicBlock::replacePhiUsesWith(*v672, *v668, (llvm::BasicBlock *)*(v663 - 1));
                          v501 = v652;
                          if (v716 != 1)
                          {
                            for (k = 1; k != v716; ++k)
                            {
                              v503 = v668[k - 1];
                              v504 = (llvm::BasicBlock *)*((_QWORD *)v503 + 5);
                              if (v504 == (llvm::BasicBlock *)((char *)v503 + 40))
                              {
                                v507 = 0;
                              }
                              else
                              {
                                v505 = (uint64_t)v504 - 24;
                                if (v504)
                                  v506 = (uint64_t)v504 - 24;
                                else
                                  v506 = 0;
                                if (*(unsigned __int8 *)(v506 + 16) - 29 >= 0xB)
                                  v507 = 0;
                                else
                                  v507 = v505;
                              }
                              v508 = v672[k];
                              v509 = (char *)operator new(0x60uLL);
                              v510 = v509;
                              *((_DWORD *)v509 + 13) = *((_DWORD *)v509 + 13) & 0x38000000 | 1;
                              *((_QWORD *)v509 + 1) = 0;
                              *((_QWORD *)v509 + 2) = 0;
                              *(_QWORD *)v509 = 0;
                              *((_QWORD *)v509 + 4) = ***(_QWORD ***)v508 + 1576;
                              v511 = (llvm::Value *)(v509 + 32);
                              *((_QWORD *)v509 + 3) = v509 + 32;
                              *((_QWORD *)v509 + 5) = 0;
                              *((_WORD *)v509 + 24) = 30;
                              *((_WORD *)v509 + 25) = 0;
                              *((_DWORD *)v509 + 13) = 1;
                              *(_OWORD *)(v509 + 56) = 0u;
                              v512 = v509 + 56;
                              *(_OWORD *)(v509 + 72) = 0u;
                              *((_DWORD *)v509 + 22) = 0;
                              if (v507)
                              {
                                v522 = v501;
                                v523 = *(_QWORD *)(v507 + 40);
                                v524 = (uint64_t *)(v507 + 24);
                                *((_QWORD *)v509 + 9) = v523;
                                *(_WORD *)(v523 + 18) &= ~0x8000u;
                                if ((v509[55] & 0x10) != 0
                                  && (v526 = *(_QWORD *)(v523 + 56)) != 0
                                  && (v527 = *(llvm::ValueSymbolTable **)(v526 + 104)) != 0)
                                {
                                  llvm::ValueSymbolTable::reinsertValue(v527, v511);
                                  v528 = *(_QWORD *)v510;
                                  v529 = *v524;
                                  *((_QWORD *)v510 + 7) = *v524;
                                  *((_QWORD *)v510 + 8) = v524;
                                  *(_QWORD *)(v529 + 8) = v512;
                                  *v524 = (uint64_t)v512;
                                  v501 = v522;
                                  if (v528)
                                  {
                                    **((_QWORD **)v510 + 2) = *((_QWORD *)v510 + 1);
                                    v530 = *((_QWORD *)v510 + 1);
                                    if (v530)
                                      *(_QWORD *)(v530 + 16) = *((_QWORD *)v510 + 2);
                                  }
                                }
                                else
                                {
                                  v525 = *v524;
                                  *((_QWORD *)v510 + 7) = *v524;
                                  *((_QWORD *)v510 + 8) = v524;
                                  *(_QWORD *)(v525 + 8) = v512;
                                  *v524 = (uint64_t)v512;
                                  v501 = v522;
                                }
                              }
                              *(_QWORD *)v510 = v508;
                              v515 = *(_QWORD *)(v508 + 8);
                              v514 = (_QWORD *)(v508 + 8);
                              v513 = v515;
                              *((_QWORD *)v510 + 1) = v515;
                              if (v515)
                                *(_QWORD *)(v513 + 16) = v510 + 8;
                              *((_QWORD *)v510 + 2) = v514;
                              *v514 = v510;
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v507 + 40) + 40, (uint64_t ***)v507);
                              v516 = *(_QWORD *)(v507 + 24);
                              v517 = *(_QWORD **)(v507 + 32);
                              *v517 = v516;
                              *(_QWORD *)(v516 + 8) = v517;
                              *(_QWORD *)(v507 + 24) = 0;
                              *(_QWORD *)(v507 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v507);
                              llvm::BasicBlock::replacePhiUsesWith(v672[k], v678[k], (llvm::BasicBlock *)*(v124 - 1));
                              llvm::BasicBlock::replacePhiUsesWith(v672[k], v668[k], (llvm::BasicBlock *)*(v663 - 1));
                              v518 = v672[k];
                              for (m = *(_QWORD *)(*v672 + 48); m != *v672 + 40; m = *(_QWORD *)(m + 8))
                              {
                                v520 = (llvm::Instruction *)(m - 24);
                                if (m)
                                  v521 = m - 24;
                                else
                                  v521 = 0;
                                if (*(_BYTE *)(v521 + 16) != 83)
                                  goto LABEL_853;
                              }
                              v520 = 0;
LABEL_853:
                              while (1)
                              {
                                v531 = *(_QWORD *)(v518 + 48);
                                v532 = v531 ? v531 - 24 : 0;
                                if (!v531 || *(_BYTE *)(v532 + 16) != 83)
                                  break;
                                llvm::Instruction::moveBefore((llvm::Instruction *)(v531 - 24), v520);
                              }
                            }
                          }
                          v533 = *(v661 - 1);
                          v534 = *(_QWORD *)(v533 + 40);
                          if (v534 == v533 + 40)
                          {
                            v536 = 0;
                          }
                          else
                          {
                            if (v534)
                              v535 = v534 - 24;
                            else
                              v535 = 0;
                            if (*(unsigned __int8 *)(v535 + 16) - 29 >= 0xB)
                              v536 = 0;
                            else
                              v536 = v535;
                          }
                          if (v654 == (_DWORD)v501)
                          {
                            v537 = (char *)operator new(0x60uLL);
                            v538 = v537;
                            *((_DWORD *)v537 + 13) = *((_DWORD *)v537 + 13) & 0x38000000 | 1;
                            *((_QWORD *)v537 + 1) = 0;
                            *((_QWORD *)v537 + 2) = 0;
                            *(_QWORD *)v537 = 0;
                            v539 = v653;
                            *((_QWORD *)v537 + 4) = ***(_QWORD ***)v653 + 1576;
                            v540 = (llvm::Value *)(v537 + 32);
                            *((_QWORD *)v537 + 3) = v537 + 32;
                            *((_QWORD *)v537 + 5) = 0;
                            v537[48] = 30;
                            v537[49] = 0;
                            *((_WORD *)v537 + 25) = 0;
                            *((_DWORD *)v537 + 13) = 1;
                            *(_OWORD *)(v537 + 56) = 0u;
                            v541 = v537 + 56;
                            *(_OWORD *)(v537 + 72) = 0u;
                            *((_DWORD *)v537 + 22) = 0;
                            if (v536)
                            {
                              v629 = *(_QWORD *)(v536 + 40);
                              v630 = (uint64_t *)(v536 + 24);
                              *((_QWORD *)v537 + 9) = v629;
                              *(_WORD *)(v629 + 18) &= ~0x8000u;
                              if ((v537[55] & 0x10) != 0
                                && (v632 = *(_QWORD *)(v629 + 56)) != 0
                                && (v633 = *(llvm::ValueSymbolTable **)(v632 + 104)) != 0)
                              {
                                llvm::ValueSymbolTable::reinsertValue(v633, v540);
                                v539 = v653;
                                v634 = *(_QWORD *)v538;
                                v635 = *v630;
                                *((_QWORD *)v538 + 7) = *v630;
                                *((_QWORD *)v538 + 8) = v630;
                                *(_QWORD *)(v635 + 8) = v541;
                                *v630 = (uint64_t)v541;
                                if (v634)
                                {
                                  **((_QWORD **)v538 + 2) = *((_QWORD *)v538 + 1);
                                  v636 = *((_QWORD *)v538 + 1);
                                  if (v636)
                                    *(_QWORD *)(v636 + 16) = *((_QWORD *)v538 + 2);
                                }
                              }
                              else
                              {
                                v631 = *v630;
                                *((_QWORD *)v538 + 7) = *v630;
                                *((_QWORD *)v538 + 8) = v630;
                                *(_QWORD *)(v631 + 8) = v541;
                                *v630 = (uint64_t)v541;
                              }
                            }
                            *(_QWORD *)v538 = v539;
                            v544 = *(_QWORD *)(v539 + 8);
                            v543 = (_QWORD *)(v539 + 8);
                            v542 = v544;
                            *((_QWORD *)v538 + 1) = v544;
                            if (v544)
                              *(_QWORD *)(v542 + 16) = v538 + 8;
                            *((_QWORD *)v538 + 2) = v543;
                            *v543 = v538;
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v536 + 40) + 40, (uint64_t ***)v536);
                            v545 = *(_QWORD *)(v536 + 24);
                            v546 = *(_QWORD **)(v536 + 32);
                            *v546 = v545;
                            *(_QWORD *)(v545 + 8) = v546;
                            *(_QWORD *)(v536 + 24) = 0;
                            *(_QWORD *)(v536 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v536);
                          }
                          else
                          {
                            sub_1C53E1B14(v536, v647 == v646, *v680);
                          }
                          llvm::BasicBlock::replacePhiUsesWith(*v667, *v668, (llvm::BasicBlock *)*(v663 - 1));
                          v547 = 1;
                          if (v716 != 1)
                          {
                            do
                            {
                              v548 = v666[v547 - 1];
                              v549 = *(_QWORD *)(v548 + 40);
                              if (v549 == v548 + 40)
                              {
                                v552 = 0;
                              }
                              else
                              {
                                v550 = v549 - 24;
                                if (v549)
                                  v551 = v549 - 24;
                                else
                                  v551 = 0;
                                if (*(unsigned __int8 *)(v551 + 16) - 29 >= 0xB)
                                  v552 = 0;
                                else
                                  v552 = v550;
                              }
                              v553 = v667[v547];
                              v554 = (char *)operator new(0x60uLL);
                              v555 = v554;
                              *((_DWORD *)v554 + 13) = *((_DWORD *)v554 + 13) & 0x38000000 | 1;
                              *((_QWORD *)v554 + 1) = 0;
                              *((_QWORD *)v554 + 2) = 0;
                              *(_QWORD *)v554 = 0;
                              *((_QWORD *)v554 + 4) = ***(_QWORD ***)v553 + 1576;
                              v556 = (llvm::Value *)(v554 + 32);
                              *((_QWORD *)v554 + 3) = v554 + 32;
                              *((_QWORD *)v554 + 5) = 0;
                              *((_WORD *)v554 + 24) = 30;
                              *((_WORD *)v554 + 25) = 0;
                              *((_DWORD *)v554 + 13) = 1;
                              *(_OWORD *)(v554 + 56) = 0u;
                              v557 = v554 + 56;
                              *(_OWORD *)(v554 + 72) = 0u;
                              *((_DWORD *)v554 + 22) = 0;
                              if (v552)
                              {
                                v567 = v501;
                                v568 = *(_QWORD *)(v552 + 40);
                                v569 = (uint64_t *)(v552 + 24);
                                *((_QWORD *)v554 + 9) = v568;
                                *(_WORD *)(v568 + 18) &= ~0x8000u;
                                if ((v554[55] & 0x10) != 0
                                  && (v571 = *(_QWORD *)(v568 + 56)) != 0
                                  && (v572 = *(llvm::ValueSymbolTable **)(v571 + 104)) != 0)
                                {
                                  llvm::ValueSymbolTable::reinsertValue(v572, v556);
                                  v573 = *(_QWORD *)v555;
                                  v574 = *v569;
                                  *((_QWORD *)v555 + 7) = *v569;
                                  *((_QWORD *)v555 + 8) = v569;
                                  *(_QWORD *)(v574 + 8) = v557;
                                  *v569 = (uint64_t)v557;
                                  v501 = v567;
                                  if (v573)
                                  {
                                    **((_QWORD **)v555 + 2) = *((_QWORD *)v555 + 1);
                                    v575 = *((_QWORD *)v555 + 1);
                                    if (v575)
                                      *(_QWORD *)(v575 + 16) = *((_QWORD *)v555 + 2);
                                  }
                                }
                                else
                                {
                                  v570 = *v569;
                                  *((_QWORD *)v555 + 7) = *v569;
                                  *((_QWORD *)v555 + 8) = v569;
                                  *(_QWORD *)(v570 + 8) = v557;
                                  *v569 = (uint64_t)v557;
                                  v501 = v567;
                                }
                              }
                              *(_QWORD *)v555 = v553;
                              v560 = *(_QWORD *)(v553 + 8);
                              v559 = (_QWORD *)(v553 + 8);
                              v558 = v560;
                              *((_QWORD *)v555 + 1) = v560;
                              if (v560)
                                *(_QWORD *)(v558 + 16) = v555 + 8;
                              *((_QWORD *)v555 + 2) = v559;
                              *v559 = v555;
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v552 + 40) + 40, (uint64_t ***)v552);
                              v561 = *(_QWORD *)(v552 + 24);
                              v562 = *(_QWORD **)(v552 + 32);
                              *v562 = v561;
                              *(_QWORD *)(v561 + 8) = v562;
                              *(_QWORD *)(v552 + 24) = 0;
                              *(_QWORD *)(v552 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v552);
                              llvm::BasicBlock::replacePhiUsesWith(v667[v547], v668[v547], (llvm::BasicBlock *)*(v663 - 1));
                              v563 = v667[v547];
                              for (n = *(_QWORD *)(*v667 + 48); n != *v667 + 40; n = *(_QWORD *)(n + 8))
                              {
                                v565 = (llvm::Instruction *)(n - 24);
                                if (n)
                                  v566 = n - 24;
                                else
                                  v566 = 0;
                                if (*(_BYTE *)(v566 + 16) != 83)
                                  goto LABEL_901;
                              }
                              v565 = 0;
LABEL_901:
                              while (1)
                              {
                                v576 = *(_QWORD *)(v563 + 48);
                                v577 = v576 ? v576 - 24 : 0;
                                if (!v576 || *(_BYTE *)(v577 + 16) != 83)
                                  break;
                                llvm::Instruction::moveBefore((llvm::Instruction *)(v576 - 24), v565);
                              }
                              ++v547;
                            }
                            while (v547 != v716);
                          }
                          v726 = &v728;
                          v727 = (void *)0x1000000000;
                          v735[23] = 0;
                          v735[22] = 0;
                          v735[24] = a8;
                          v735[25] = 0;
                          v736 = 1;
                          v737 = v741;
                          v738 = v741;
                          v739 = 8;
                          v740 = 0;
                          memset(v744, 0, sizeof(v744));
                          v745 = 0;
                          v578 = v678;
                          v579 = v124;
                          if (v547 != 1)
                          {
                            v746 = &v748;
                            v747 = (void *)0x400000000;
                            sub_1C63AF624((uint64_t)&v746, 1u, (uint64_t)*v678, *v672);
                            sub_1C63AF624((uint64_t)&v746, 1u, (uint64_t)*v668, *v667);
                            sub_1C63AF624((uint64_t)&v746, 0, *(v124 - 1), *v672);
                            sub_1C63AF624((uint64_t)&v746, 0, (uint64_t)*(v663 - 1), *v667);
                            llvm::DomTreeUpdater::applyUpdatesPermissive(&v726, (uint64_t *)v746, v747);
                            if (v746 != &v748)
                              free(v746);
                            v578 = v678;
                            v579 = v124;
                          }
                          v746 = v750;
                          v747 = v750;
                          v748 = 16;
                          v749 = 0;
                          if (v578 != (llvm::BasicBlock **)v579)
                          {
                            v580 = (uint64_t *)v678;
                            do
                            {
                              v581 = *v580++;
                              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v746, v581);
                            }
                            while (v580 != v124);
                          }
                          if (v668 != (llvm::BasicBlock **)v663)
                          {
                            v582 = (uint64_t *)v668;
                            do
                            {
                              v583 = *v582++;
                              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v746, v583);
                            }
                            while (v582 != (uint64_t *)v663);
                          }
                          if (v666 != v661)
                          {
                            v584 = v666;
                            do
                            {
                              v585 = *v584++;
                              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v746, v585);
                            }
                            while (v584 != v661);
                          }
                          llvm::MergeBlockSuccessorsIntoGivenBlocks((uint64_t)&v746, (uint64_t)v717, (llvm::BasicBlock *)&v726, (int32x2_t *)v669);
                          DomTree = (llvm::ScalarEvolution *)llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)&v726);
                          v20 = 1;
                          llvm::simplifyLoopAfterUnroll(v715, (llvm::Loop *)1, (uint64_t *)v669, (uint64_t ***)v651, DomTree, a9, a10, v587);
                          if (v716 > 1)
                            v589 = (llvm::Loop *)(v654 != (_DWORD)v501);
                          else
                            v589 = 0;
                          llvm::simplifyLoopAfterUnroll(v717, v589, (uint64_t *)v669, (uint64_t ***)v651, DomTree, a9, a10, v588);
                          if (v654 == (_DWORD)v501)
                          {
                            llvm::LoopInfo::erase((int32x2_t *)v669, v717);
                            v20 = 2;
                          }
                          if (v747 != v746)
                            free(v747);
                          llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v726);
                          v746 = v744;
                          sub_1C50B10F0((void ***)&v746);
                          if (v738 != v737)
                            free(v738);
                          if (v726 != &v728)
                            free(v726);
                          if (v696)
                          {
                            v697 = (uint64_t *)v696;
                            operator delete(v696);
                          }
                          MEMORY[0x1CAA32FB4](v695, 8);
                          if (v701)
                          {
                            sub_1C4E43068((uint64_t)v700);
                            MEMORY[0x1CAA32FB4](v700[0], 8);
                            v701 = 0;
                          }
                          v590 = (_QWORD *)v698[0];
                          if (v699)
                          {
                            v591 = v698[0] + ((unint64_t)v699 << 6);
                            do
                            {
                              v592 = v590[3];
                              if ((v592 | 0x1000) != 0xFFFFFFFFFFFFF000)
                              {
                                v593 = v590[7];
                                if (v593)
                                {
                                  if (v593 != -8192 && v593 != -4096)
                                  {
                                    v594 = v590[5] & 0xFFFFFFFFFFFFFFF8;
                                    *(_QWORD *)v594 = v590[6];
                                    v595 = (unint64_t *)v590[6];
                                    if (v595)
                                    {
                                      *v595 = *v595 & 7 | v594;
                                    }
                                    else
                                    {
                                      v596 = v590[7];
                                      v597 = ***(int32x2_t ****)v596;
                                      v598 = (unint64_t)v597[303];
                                      if (v598 <= v594)
                                      {
                                        v599 = v597[305].u32[0];
                                        if (v598 + 16 * v599 > v594)
                                        {
                                          v600 = v599 - 1;
                                          LODWORD(v601) = v600 & ((v596 >> 4) ^ (v596 >> 9));
                                          v602 = (uint64_t *)(v598 + 16 * v601);
                                          v603 = *v602;
                                          if (v596 == *v602)
                                          {
LABEL_946:
                                            *v602 = -8192;
                                            v597[304] = vadd_s32(v597[304], (int32x2_t)0x1FFFFFFFFLL);
                                            v596 = v590[7];
                                          }
                                          else
                                          {
                                            v604 = 1;
                                            while (v603 != -4096)
                                            {
                                              v605 = v601 + v604++;
                                              v601 = v605 & v600;
                                              v603 = *(_QWORD *)(v598 + 16 * v601);
                                              if (v596 == v603)
                                              {
                                                v602 = (uint64_t *)(v598 + 16 * v601);
                                                goto LABEL_946;
                                              }
                                            }
                                          }
                                          *(_BYTE *)(v596 + 17) &= ~1u;
                                        }
                                      }
                                    }
                                    v592 = v590[3];
                                  }
                                }
                              }
                              if (v592 != -4096 && v592 != -8192 && v592 != 0)
                              {
                                v607 = v590[1] & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)v607 = v590[2];
                                v608 = (unint64_t *)v590[2];
                                if (v608)
                                {
                                  *v608 = *v608 & 7 | v607;
                                }
                                else
                                {
                                  v609 = v590[3];
                                  v610 = ***(int32x2_t ****)v609;
                                  v611 = (unint64_t)v610[303];
                                  if (v611 <= v607)
                                  {
                                    v612 = v610[305].u32[0];
                                    if (v611 + 16 * v612 > v607)
                                    {
                                      v613 = v612 - 1;
                                      LODWORD(v614) = v613 & ((v609 >> 4) ^ (v609 >> 9));
                                      v615 = (uint64_t *)(v611 + 16 * v614);
                                      v616 = *v615;
                                      if (v609 == *v615)
                                      {
LABEL_965:
                                        *v615 = -8192;
                                        v610[304] = vadd_s32(v610[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v609 = v590[3];
                                      }
                                      else
                                      {
                                        v617 = 1;
                                        while (v616 != -4096)
                                        {
                                          v618 = v614 + v617++;
                                          v614 = v618 & v613;
                                          v616 = *(_QWORD *)(v611 + 16 * v614);
                                          if (v609 == v616)
                                          {
                                            v615 = (uint64_t *)(v611 + 16 * v614);
                                            goto LABEL_965;
                                          }
                                        }
                                      }
                                      *(_BYTE *)(v609 + 17) &= ~1u;
                                    }
                                  }
                                }
                              }
                              v590 += 8;
                            }
                            while (v590 != (_QWORD *)v591);
                            v590 = (_QWORD *)v698[0];
                          }
                          MEMORY[0x1CAA32FB4](v590, 8);
                          operator delete(v666);
                          operator delete(v667);
                          operator delete(v668);
                          operator delete(v672);
                          operator delete(v678);
                          operator delete(v680);
                          if (v703 != v702)
                            free(v703);
                          if (v708 != v707)
                            free(v708);
                          if (v718.__r_.__value_.__l.__size_ != v718.__r_.__value_.__r.__words[0])
                            free((void *)v718.__r_.__value_.__l.__size_);
                          return v20;
                        }
                        goto LABEL_736;
                      }
                    }
                    else if (*(_QWORD *)(v452 + 32 * *(unsigned int *)(v445 + 60) + 8 * v451) == v447)
                    {
                      goto LABEL_745;
                    }
                    if (++v451 == v450)
                      goto LABEL_771;
                  }
                }
                goto LABEL_218;
              }
            }
            else if (*(_QWORD *)(v133 + 32 * *(unsigned int *)(v126 + 60) + 8 * v132) == v128)
            {
              goto LABEL_227;
            }
            if (++v132 == v131)
              goto LABEL_253;
          }
        }
        v156 = 1;
        v123 = (llvm::Instruction *)(v678 + 1);
        __p = (char **)v664;
        v157 = v672 + 1;
        v656 = (char *)(v666 + 1);
        v657 = v667 + 1;
        v659 = v668 + 1;
        v660 = v672 + 1;
        while (1)
        {
          v726 = &v728;
          v727 = (void *)0x800000000;
          v691[0] = 0;
          v691[1] = 0;
          v692 = 0;
          v158 = 8;
          v746 = (void *)1;
          do
          {
            *(void **)((char *)&v746 + v158) = (void *)-4096;
            v158 += 16;
          }
          while (v158 != 72);
          v159 = v717;
          v160 = (char)v746;
          v677 = v123;
          v662 = v157;
          if ((v746 & 1) != 0)
          {
            v161 = 4;
            v162 = (char *)&v747;
          }
          else
          {
            v161 = v748;
            if (!(_DWORD)v748)
            {
              v171 = 0;
              goto LABEL_283;
            }
            v162 = (char *)v747;
          }
          v163 = v161 - 1;
          v164 = v163 & ((v717 >> 4) ^ (v717 >> 9));
          v165 = (llvm::Loop **)&v162[16 * v164];
          v166 = *v165;
          if (v717 == *v165)
            goto LABEL_284;
          v167 = 0;
          v168 = 1;
          while (v166 != (llvm::Loop *)-4096)
          {
            if (v167)
              v169 = 0;
            else
              v169 = v166 == (llvm::Loop *)-8192;
            if (v169)
              v167 = v165;
            v170 = v164 + v168++;
            v164 = v170 & v163;
            v165 = (llvm::Loop **)&v162[16 * v164];
            v166 = *v165;
            if (v717 == *v165)
              goto LABEL_284;
          }
          if (v167)
            v171 = v167;
          else
            v171 = v165;
LABEL_283:
          v165 = (llvm::Loop **)sub_1C55B6340((uint64_t)&v746, (uint64_t)&v717, &v717, v171);
          *v165 = v717;
          v165[1] = 0;
          v160 = (char)v746;
LABEL_284:
          v165[1] = v159;
          v172 = v715;
          if ((v160 & 1) != 0)
          {
            v173 = 4;
            v174 = (char *)&v747;
          }
          else
          {
            v173 = v748;
            if (!(_DWORD)v748)
            {
              v183 = 0;
              goto LABEL_299;
            }
            v174 = (char *)v747;
          }
          v175 = v173 - 1;
          v176 = v175 & ((v715 >> 4) ^ (v715 >> 9));
          v177 = (llvm **)&v174[16 * v176];
          v178 = *v177;
          if (v715 == *v177)
            goto LABEL_300;
          v179 = 0;
          v180 = 1;
          while (v178 != (llvm *)-4096)
          {
            if (v179)
              v181 = 0;
            else
              v181 = v178 == (llvm *)-8192;
            if (v181)
              v179 = v177;
            v182 = v176 + v180++;
            v176 = v182 & v175;
            v177 = (llvm **)&v174[16 * v176];
            v178 = *v177;
            if (v715 == *v177)
              goto LABEL_300;
          }
          if (v179)
            v183 = v179;
          else
            v183 = v177;
LABEL_299:
          v177 = (llvm **)sub_1C55B6340((uint64_t)&v746, (uint64_t)&v715, &v715, v183);
          *v177 = v715;
          v177[1] = 0;
LABEL_300:
          v681 = v111;
          v177[1] = v172;
          if (v655 != v671)
          {
            v184 = v655;
            while (1)
            {
              v688 = 128;
              v185 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
              v686 = v185;
              v687 = 0;
              if (v688)
              {
                v186 = (unint64_t)v688 << 6;
                v187 = v185 + 16;
                do
                {
                  *v187 = 0;
                  v187[1] = -4096;
                  *(v187 - 2) = &unk_1E814DA10;
                  *(v187 - 1) = 2;
                  v187[2] = 0;
                  v187 += 8;
                  v186 -= 64;
                }
                while (v186);
              }
              LOBYTE(v689[0]) = 0;
              v690 = 0;
              v188 = (uint64_t ***)*(v184 - 1);
              v682 = v184 - 1;
              v721 = ".";
              v675 = v675 & 0xFFFFFFFF00000000 | v156;
              v723 = (_QWORD *)v675;
              LOWORD(v725) = 2051;
              v189 = (char *)llvm::CloneBasicBlock(v188, (uint64_t)&v686, (uint64_t)&v721, 0, 0, 0);
              v190 = *(_QWORD *)(v670 + 56);
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v190 + 72, v189);
              v191 = *(_QWORD *)(v190 + 72);
              *((_QWORD *)v189 + 4) = v190 + 72;
              *((_QWORD *)v189 + 3) = v191;
              *(_QWORD *)(v191 + 8) = v189 + 24;
              *(_QWORD *)(v190 + 72) = v189 + 24;
              v192 = v682;
              llvm::addClonedBlockToLoopInfo(*v682, (uint64_t)v189, (uint64_t)v669, (uint64_t)&v746);
              v193 = sub_1C477672C((uint64_t)&v707, *v682);
              if (v708 == v707)
                v194 = (uint64_t *)((char *)&v709 + 4);
              else
                v194 = &v709;
              v195 = *v682;
              v196 = v681;
              if (v193 != (_QWORD *)((char *)v708 + 8 * *(unsigned int *)v194))
              {
                if (v195 == *v681)
                {
                  v199 = (llvm::BasicBlock **)v677;
                  v198 = v678;
                  if (__p >= (char **)v664)
                  {
                    v203 = ((char *)__p - (char *)v681) >> 3;
                    v204 = v203 + 1;
                    if ((unint64_t)(v203 + 1) >> 61)
                      goto LABEL_1007;
                    if ((v664 - (char *)v681) >> 2 > v204)
                      v204 = (v664 - (char *)v681) >> 2;
                    if ((unint64_t)(v664 - (char *)v681) >= 0x7FFFFFFFFFFFFFF8)
                      v205 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v205 = v204;
                    if (v205)
                    {
                      if (v205 >> 61)
                        goto LABEL_1008;
                      v206 = (char *)operator new(8 * v205);
                      v199 = (llvm::BasicBlock **)v677;
                    }
                    else
                    {
                      v206 = 0;
                    }
                    v213 = (char **)&v206[8 * v203];
                    *v213 = v189;
                    v197 = v213 + 1;
                    v214 = (uint64_t *)__p;
                    if (__p != (char **)v681)
                    {
                      do
                      {
                        v215 = (char *)*--v214;
                        *--v213 = v215;
                      }
                      while (v214 != v681);
                      v214 = v681;
                    }
                    v196 = (uint64_t *)v213;
                    v664 = &v206[8 * v205];
                    if (v214)
                    {
                      operator delete(v214);
                      v199 = (llvm::BasicBlock **)v677;
                    }
                    v198 = v678;
                    v192 = v682;
                  }
                  else
                  {
                    *__p = v189;
                    v197 = __p + 1;
                  }
                }
                else
                {
                  v197 = __p;
                  v199 = (llvm::BasicBlock **)v677;
                  v198 = v678;
                }
                if ((llvm::BasicBlock *)*v192 != *v198)
                  goto LABEL_357;
                if (v199 < v665)
                {
                  *v199++ = (llvm::BasicBlock *)v189;
LABEL_357:
                  __p = v197;
                  goto LABEL_426;
                }
                v216 = v199 - v198;
                v217 = v216 + 1;
                if ((unint64_t)(v216 + 1) >> 61)
                  goto LABEL_1007;
                v218 = (char *)v665 - (char *)v198;
                v219 = ((char *)v665 - (char *)v198) >> 2;
                if (v219 > v217)
                  v217 = v219;
                if (v218 >= 0x7FFFFFFFFFFFFFF8)
                  v220 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v220 = v217;
                if (v220)
                {
                  if (v220 >> 61)
                    goto LABEL_1008;
                  v221 = (char *)operator new(8 * v220);
                  v199 = (llvm::BasicBlock **)v677;
                }
                else
                {
                  v221 = 0;
                }
                v222 = (char **)&v221[8 * v216];
                *v222 = v189;
                v223 = (llvm::BasicBlock **)(v222 + 1);
                if (v199 != v678)
                {
                  do
                  {
                    v224 = (char *)*--v199;
                    *--v222 = v224;
                  }
                  while (v199 != v678);
                  v199 = v678;
                }
                v198 = (llvm::BasicBlock **)v222;
                v665 = (llvm::BasicBlock **)&v221[8 * v220];
                if (v199)
                {
                  v225 = (llvm::BasicBlock **)v222;
                  operator delete(v199);
                  v198 = v225;
                }
                v199 = v223;
                __p = v197;
                goto LABEL_425;
              }
              v200 = sub_1C477672C((uint64_t)&v718, v195);
              v201 = v718.__r_.__value_.__l.__size_ == v718.__r_.__value_.__r.__words[0]
                   ? (std::string::size_type *)((char *)&v718.__r_.__value_.__r.__words[2] + 4)
                   : &v718.__r_.__value_.__r.__words[2];
              v202 = *v682;
              if (v200 == (_QWORD *)(v718.__r_.__value_.__l.__size_ + 8 * *(unsigned int *)v201))
                break;
              v199 = (llvm::BasicBlock **)v677;
              if (v202 == *v672)
              {
                v198 = v678;
                if (v662 >= v660)
                {
                  v208 = v662 - v672;
                  v209 = v208 + 1;
                  if ((unint64_t)(v208 + 1) >> 61)
                    goto LABEL_1007;
                  if (((char *)v660 - (char *)v672) >> 2 > v209)
                    v209 = ((char *)v660 - (char *)v672) >> 2;
                  if ((unint64_t)((char *)v660 - (char *)v672) >= 0x7FFFFFFFFFFFFFF8)
                    v210 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v210 = v209;
                  if (v210)
                  {
                    if (v210 >> 61)
                      goto LABEL_1008;
                    v211 = (char *)operator new(8 * v210);
                    v212 = v662;
                  }
                  else
                  {
                    v212 = v662;
                    v211 = 0;
                  }
                  v235 = (uint64_t *)&v211[8 * v208];
                  *v235 = (uint64_t)v189;
                  v236 = v235 + 1;
                  while (v212 != v672)
                  {
                    v237 = *--v212;
                    *--v235 = v237;
                  }
                  v660 = (uint64_t *)&v211[8 * v210];
                  operator delete(v672);
                  v662 = v236;
                  v672 = v235;
                  v199 = (llvm::BasicBlock **)v677;
                  v198 = v678;
                  v192 = v682;
                }
                else
                {
                  *v662++ = (uint64_t)v189;
                }
              }
              else
              {
                v198 = v678;
              }
              if ((llvm::BasicBlock *)*v192 == *v668)
              {
                if (v663 < (char **)v659)
                {
                  *v663++ = v189;
                  goto LABEL_426;
                }
                v238 = ((char *)v663 - (char *)v668) >> 3;
                v239 = v238 + 1;
                if ((unint64_t)(v238 + 1) >> 61)
                  goto LABEL_1007;
                if (((char *)v659 - (char *)v668) >> 2 > v239)
                  v239 = ((char *)v659 - (char *)v668) >> 2;
                if ((unint64_t)((char *)v659 - (char *)v668) >= 0x7FFFFFFFFFFFFFF8)
                  v240 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v240 = v239;
                if (v240)
                {
                  if (v240 >> 61)
                    goto LABEL_1008;
                  v241 = (char *)operator new(8 * v240);
                }
                else
                {
                  v241 = 0;
                }
                v242 = (llvm::BasicBlock **)&v241[8 * v238];
                *v242 = (llvm::BasicBlock *)v189;
                v243 = (char **)(v242 + 1);
                for (ii = (llvm::BasicBlock **)v663; ii != v668; --ii)
                {
                  v245 = *(ii - 1);
                  *--v242 = v245;
                }
                v659 = (llvm::BasicBlock **)&v241[8 * v240];
                operator delete(v668);
                v663 = v243;
                v668 = v242;
LABEL_424:
                v198 = v678;
                v196 = v681;
                v199 = (llvm::BasicBlock **)v677;
LABEL_425:
                v192 = v682;
              }
LABEL_426:
              v677 = (llvm::Instruction *)v199;
              v678 = v198;
              v253 = (llvm::BasicBlock *)*v192;
              if (v156 == 1)
              {
                v683 = 6;
                v684 = 0;
                v685 = (int32x2_t ****)v253;
                if (v253 != (llvm::BasicBlock *)-8192 && v253 != (llvm::BasicBlock *)-4096 && v253)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v683);
              }
              else
              {
                v722 = 2;
                v723 = 0;
                v724 = (int32x2_t ****)v253;
                if (v253 != (llvm::BasicBlock *)-8192 && v253 != (llvm::BasicBlock *)-4096 && v253)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v722);
                v721 = (const char *)&unk_1E814DA10;
                v725 = v698;
                v254 = sub_1C52E2ED8((uint64_t)v698, &v721);
                if (v724 != (int32x2_t ****)-8192 && v724 != (int32x2_t ****)-4096 && v724)
                {
                  v255 = v722 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF8) = v723;
                  if (v723)
                  {
                    *v723 = *v723 & 7 | v255;
                  }
                  else
                  {
                    v256 = v724;
                    v257 = ***v724;
                    v258 = (unint64_t)v257[303];
                    if (v258 <= v255)
                    {
                      v259 = v257[305].u32[0];
                      if (v258 + 16 * v259 > v255)
                      {
                        v260 = v259 - 1;
                        LODWORD(v261) = v260 & ((v724 >> 4) ^ (v724 >> 9));
                        v262 = (int32x2_t *****)(v258 + 16 * v261);
                        v263 = *v262;
                        if (v724 != *v262)
                        {
                          v264 = 1;
                          do
                          {
                            if (v263 == (int32x2_t ****)-4096)
                              goto LABEL_447;
                            v265 = v261 + v264++;
                            v261 = v265 & v260;
                            v263 = *(int32x2_t *****)(v258 + 16 * v261);
                          }
                          while (v724 != v263);
                          v262 = (int32x2_t *****)(v258 + 16 * v261);
                        }
                        *v262 = (int32x2_t ****)-8192;
                        v257[304] = vadd_s32(v257[304], (int32x2_t)0x1FFFFFFFFLL);
                        v256 = v724;
LABEL_447:
                        *((_BYTE *)v256 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v683 = 6;
                v684 = 0;
                v266 = (int32x2_t ****)v254[7];
                v685 = v266;
                if (v266 != (int32x2_t ****)-8192 && v266 != (int32x2_t ****)-4096 && v266 != 0)
                {
                  v268 = v254[5] & 0xFFFFFFFFFFFFFFF8;
                  v684 = *(unint64_t **)v268;
                  *(_QWORD *)v268 = &v683;
                  v683 = v268 | 6;
                  if (v684)
                    *v684 = *v684 & 7 | (unint64_t)&v684;
                }
              }
              v269 = v685;
              v721 = v189;
              sub_1C4EAD954(v691, &v721)[1] = v269;
              if (v685 != (int32x2_t ****)-8192 && v685 != (int32x2_t ****)-4096 && v685)
              {
                v270 = v683 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v683 & 0xFFFFFFFFFFFFFFF8) = v684;
                if (v684)
                {
                  *v684 = *v684 & 7 | v270;
                }
                else
                {
                  v271 = v685;
                  v272 = ***v685;
                  v273 = (unint64_t)v272[303];
                  if (v273 <= v270)
                  {
                    v274 = v272[305].u32[0];
                    if (v273 + 16 * v274 > v270)
                    {
                      v275 = v274 - 1;
                      LODWORD(v276) = v275 & ((v685 >> 4) ^ (v685 >> 9));
                      v277 = (int32x2_t *****)(v273 + 16 * v276);
                      v278 = *v277;
                      if (v685 != *v277)
                      {
                        v279 = 1;
                        do
                        {
                          if (v278 == (int32x2_t ****)-4096)
                            goto LABEL_468;
                          v280 = v276 + v279++;
                          v276 = v280 & v275;
                          v278 = *(int32x2_t *****)(v273 + 16 * v276);
                        }
                        while (v685 != v278);
                        v277 = (int32x2_t *****)(v273 + 16 * v276);
                      }
                      *v277 = (int32x2_t ****)-8192;
                      v272[304] = vadd_s32(v272[304], (int32x2_t)0x1FFFFFFFFLL);
                      v271 = v685;
LABEL_468:
                      *((_BYTE *)v271 + 17) &= ~1u;
                    }
                  }
                }
              }
              v281 = (llvm::BasicBlock *)*v192;
              v722 = 2;
              v723 = 0;
              v724 = (int32x2_t ****)v281;
              if (v281 != (llvm::BasicBlock *)-8192 && v281 != (llvm::BasicBlock *)-4096 && v281 != 0)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v722);
              v721 = (const char *)&unk_1E814DA10;
              v725 = v698;
              v283 = sub_1C52E2ED8((uint64_t)v698, &v721);
              if (v724 != (int32x2_t ****)-8192 && v724 != (int32x2_t ****)-4096 && v724)
              {
                v284 = v722 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF8) = v723;
                if (v723)
                {
                  *v723 = *v723 & 7 | v284;
                }
                else
                {
                  v285 = v724;
                  v286 = ***v724;
                  v287 = (unint64_t)v286[303];
                  if (v287 <= v284)
                  {
                    v288 = v286[305].u32[0];
                    if (v287 + 16 * v288 > v284)
                    {
                      v289 = v288 - 1;
                      LODWORD(v290) = v289 & ((v724 >> 4) ^ (v724 >> 9));
                      v291 = (int32x2_t *****)(v287 + 16 * v290);
                      v292 = *v291;
                      if (v724 != *v291)
                      {
                        v293 = 1;
                        do
                        {
                          if (v292 == (int32x2_t ****)-4096)
                            goto LABEL_488;
                          v294 = v290 + v293++;
                          v290 = v294 & v289;
                          v292 = *(int32x2_t *****)(v287 + 16 * v290);
                        }
                        while (v724 != v292);
                        v291 = (int32x2_t *****)(v287 + 16 * v290);
                      }
                      *v291 = (int32x2_t ****)-8192;
                      v286[304] = vadd_s32(v286[304], (int32x2_t)0x1FFFFFFFFLL);
                      v285 = v724;
LABEL_488:
                      *((_BYTE *)v285 + 17) &= ~1u;
                    }
                  }
                }
              }
              v295 = (char *)v283[7];
              if (v295 != v189)
              {
                if (v295 && v295 != (char *)-8192 && v295 != (char *)-4096)
                {
                  v361 = v283[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v361 = v283[6];
                  v362 = (unint64_t *)v283[6];
                  if (v362)
                  {
                    *v362 = *v362 & 7 | v361;
                  }
                  else
                  {
                    v363 = v283[7];
                    v364 = ***(int32x2_t ****)v363;
                    v365 = (unint64_t)v364[303];
                    if (v365 <= v361)
                    {
                      v366 = v364[305].u32[0];
                      if (v365 + 16 * v366 > v361)
                      {
                        v367 = v366 - 1;
                        LODWORD(v368) = v367 & ((v363 >> 4) ^ (v363 >> 9));
                        v369 = (uint64_t *)(v365 + 16 * v368);
                        v370 = *v369;
                        if (v363 != *v369)
                        {
                          v371 = 1;
                          do
                          {
                            if (v370 == -4096)
                              goto LABEL_603;
                            v372 = v368 + v371++;
                            v368 = v372 & v367;
                            v370 = *(_QWORD *)(v365 + 16 * v368);
                          }
                          while (v363 != v370);
                          v369 = (uint64_t *)(v365 + 16 * v368);
                        }
                        *v369 = -8192;
                        v364[304] = vadd_s32(v364[304], (int32x2_t)0x1FFFFFFFFLL);
                        v363 = v283[7];
LABEL_603:
                        *(_BYTE *)(v363 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v283[7] = v189;
                if (v189 != (char *)-8192 && v189 != (char *)-4096 && v189)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v283 + 5));
              }
              v681 = v196;
              v296 = &v686[8 * (unint64_t)v688];
              if ((_DWORD)v687)
              {
                if (v688)
                {
                  v297 = (unint64_t)v688 << 6;
                  v298 = v686;
                  while ((v298[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v298 += 8;
                    v297 -= 64;
                    if (!v297)
                      goto LABEL_501;
                  }
                }
                else
                {
                  v298 = v686;
                }
              }
              else
              {
LABEL_501:
                v298 = &v686[8 * (unint64_t)v688];
              }
              v299 = &v686[8 * (unint64_t)v688];
LABEL_503:
              while (v298 != v299)
              {
                v300 = (int32x2_t *****)(v298 + 3);
                if (v156 != 1)
                {
                  v301 = *v300;
                  v722 = 2;
                  v723 = 0;
                  v724 = v301;
                  if (v301 != (int32x2_t ****)-8192 && v301 != (int32x2_t ****)-4096 && v301 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v722);
                  v721 = (const char *)&unk_1E814DA10;
                  v725 = v698;
                  v303 = sub_1C52E2ED8((uint64_t)v698, &v721);
                  if (v724 != (int32x2_t ****)-8192 && v724 != (int32x2_t ****)-4096 && v724)
                  {
                    v304 = v722 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF8) = v723;
                    if (v723)
                    {
                      *v723 = *v723 & 7 | v304;
                    }
                    else
                    {
                      v305 = v724;
                      v306 = ***v724;
                      v307 = (unint64_t)v306[303];
                      if (v307 <= v304)
                      {
                        v308 = v306[305].u32[0];
                        if (v307 + 16 * v308 > v304)
                        {
                          v309 = v308 - 1;
                          LODWORD(v310) = v309 & ((v724 >> 4) ^ (v724 >> 9));
                          v311 = (int32x2_t *****)(v307 + 16 * v310);
                          v312 = *v311;
                          if (v724 != *v311)
                          {
                            v313 = 1;
                            do
                            {
                              if (v312 == (int32x2_t ****)-4096)
                                goto LABEL_523;
                              v314 = v310 + v313++;
                              v310 = v314 & v309;
                              v312 = *(int32x2_t *****)(v307 + 16 * v310);
                            }
                            while (v724 != v312);
                            v311 = (int32x2_t *****)(v307 + 16 * v310);
                          }
                          *v311 = (int32x2_t ****)-8192;
                          v306[304] = vadd_s32(v306[304], (int32x2_t)0x1FFFFFFFFLL);
                          v305 = v724;
LABEL_523:
                          *((_BYTE *)v305 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v300 = (int32x2_t *****)(v303 + 7);
                }
                v315 = *v300;
                v721 = (const char *)v298[7];
                sub_1C4EAD954(v691, &v721)[1] = v315;
                v316 = (int32x2_t ****)v298[3];
                v722 = 2;
                v723 = 0;
                v724 = v316;
                if (v316 != (int32x2_t ****)-8192 && v316 != (int32x2_t ****)-4096 && v316 != 0)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v722);
                v721 = (const char *)&unk_1E814DA10;
                v725 = v698;
                v318 = sub_1C52E2ED8((uint64_t)v698, &v721);
                if (v724 != (int32x2_t ****)-8192 && v724 != (int32x2_t ****)-4096 && v724)
                {
                  v319 = v722 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF8) = v723;
                  if (v723)
                  {
                    *v723 = *v723 & 7 | v319;
                  }
                  else
                  {
                    v320 = v724;
                    v321 = ***v724;
                    v322 = (unint64_t)v321[303];
                    if (v322 <= v319)
                    {
                      v323 = v321[305].u32[0];
                      if (v322 + 16 * v323 > v319)
                      {
                        v324 = v323 - 1;
                        LODWORD(v325) = v324 & ((v724 >> 4) ^ (v724 >> 9));
                        v326 = (int32x2_t *****)(v322 + 16 * v325);
                        v327 = *v326;
                        if (v724 != *v326)
                        {
                          v328 = 1;
                          do
                          {
                            if (v327 == (int32x2_t ****)-4096)
                              goto LABEL_544;
                            v329 = v325 + v328++;
                            v325 = v329 & v324;
                            v327 = *(int32x2_t *****)(v322 + 16 * v325);
                          }
                          while (v724 != v327);
                          v326 = (int32x2_t *****)(v322 + 16 * v325);
                        }
                        *v326 = (int32x2_t ****)-8192;
                        v321[304] = vadd_s32(v321[304], (int32x2_t)0x1FFFFFFFFLL);
                        v320 = v724;
LABEL_544:
                        *((_BYTE *)v320 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v330 = v318[7];
                v331 = v298[7];
                if (v330 != v331)
                {
                  v332 = v330 == -4096 || v330 == 0;
                  if (!v332 && v330 != -8192)
                  {
                    v338 = v318[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v338 = v318[6];
                    v339 = (unint64_t *)v318[6];
                    if (v339)
                    {
                      *v339 = *v339 & 7 | v338;
                    }
                    else
                    {
                      v340 = v318[7];
                      v341 = ***(int32x2_t ****)v340;
                      v342 = (unint64_t)v341[303];
                      if (v342 <= v338)
                      {
                        v343 = v341[305].u32[0];
                        if (v342 + 16 * v343 > v338)
                        {
                          v344 = v343 - 1;
                          LODWORD(v345) = v344 & ((v340 >> 4) ^ (v340 >> 9));
                          v346 = (uint64_t *)(v342 + 16 * v345);
                          v347 = *v346;
                          if (v340 != *v346)
                          {
                            v348 = 1;
                            do
                            {
                              if (v347 == -4096)
                                goto LABEL_574;
                              v349 = v345 + v348++;
                              v345 = v349 & v344;
                              v347 = *(_QWORD *)(v342 + 16 * v345);
                            }
                            while (v340 != v347);
                            v346 = (uint64_t *)(v342 + 16 * v345);
                          }
                          *v346 = -8192;
                          v341[304] = vadd_s32(v341[304], (int32x2_t)0x1FFFFFFFFLL);
                          v340 = v318[7];
LABEL_574:
                          *(_BYTE *)(v340 + 17) &= ~1u;
                        }
                      }
                    }
                    v331 = v298[7];
                  }
                  v318[7] = v331;
                  if (v331 != -4096 && v331 != -8192 && v331 != 0)
                  {
                    v334 = v318 + 5;
                    v335 = v298[5] & 0xFFFFFFFFFFFFFFF8;
                    v318[6] = *(_QWORD *)v335;
                    v336 = (unint64_t **)(v318 + 6);
                    *(_QWORD *)v335 = v334;
                    *(v336 - 1) = (unint64_t *)(v335 | (unint64_t)*(v336 - 1) & 7);
                    if (*v336)
                      **v336 = **v336 & 7 | (unint64_t)v336;
                  }
                }
                v337 = v298 + 8;
                v298 = v296;
                if (v337 != v296)
                {
                  v298 = v337;
                  do
                  {
                    if ((v298[3] | 0x1000) != 0xFFFFFFFFFFFFF000)
                      goto LABEL_503;
                    v298 += 8;
                  }
                  while (v298 != v296);
                  v298 = v296;
                }
              }
              v350 = v727;
              if (v727 >= (unint64_t)HIDWORD(v727))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v726, (uint64_t)&v728, v727 + 1, 8);
                v350 = v727;
              }
              v184 = v682;
              *((_QWORD *)v726 + v350) = v189;
              LODWORD(v727) = (_DWORD)v727 + 1;
              v351 = *v682;
              if (*v682 == *v681)
              {
                v359 = v678;
              }
              else if (v351 == *v672)
              {
                v359 = v668;
              }
              else
              {
                if (v351 != *v667)
                {
                  v352 = *((_QWORD *)a8 + 3);
                  v353 = *((unsigned int *)a8 + 10);
                  if ((_DWORD)v353)
                  {
                    LODWORD(v354) = (v353 - 1) & ((v351 >> 4) ^ (v351 >> 9));
                    v355 = (uint64_t *)(v352 + 16 * v354);
                    v356 = *v355;
                    if (v351 != *v355)
                    {
                      v357 = 1;
                      do
                      {
                        if (v356 == -4096)
                          goto LABEL_604;
                        v358 = v354 + v357++;
                        v354 = v358 & (v353 - 1);
                        v356 = *(_QWORD *)(v352 + 16 * v354);
                      }
                      while (v351 != v356);
                      v355 = (uint64_t *)(v352 + 16 * v354);
                    }
                  }
                  else
                  {
LABEL_604:
                    v355 = (uint64_t *)(v352 + 16 * v353);
                  }
                  v373 = **(int32x2_t ******)(v355[1] + 8);
                  v722 = 2;
                  v723 = 0;
                  v724 = v373;
                  if (v373 != (int32x2_t ****)-8192 && v373 != (int32x2_t ****)-4096 && v373 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v722);
                  v721 = (const char *)&unk_1E814DA10;
                  v725 = v698;
                  v375 = sub_1C52E2ED8((uint64_t)v698, &v721);
                  if (v724 != (int32x2_t ****)-8192 && v724 != (int32x2_t ****)-4096 && v724)
                  {
                    v376 = v722 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF8) = v723;
                    if (v723)
                    {
                      *v723 = *v723 & 7 | v376;
                    }
                    else
                    {
                      v377 = v724;
                      v378 = ***v724;
                      v379 = (unint64_t)v378[303];
                      if (v379 <= v376)
                      {
                        v380 = v378[305].u32[0];
                        if (v379 + 16 * v380 > v376)
                        {
                          v381 = v380 - 1;
                          LODWORD(v382) = v381 & ((v724 >> 4) ^ (v724 >> 9));
                          v383 = (int32x2_t *****)(v379 + 16 * v382);
                          v384 = *v383;
                          if (v724 != *v383)
                          {
                            v385 = 1;
                            do
                            {
                              if (v384 == (int32x2_t ****)-4096)
                                goto LABEL_623;
                              v386 = v382 + v385++;
                              v382 = v386 & v381;
                              v384 = *(int32x2_t *****)(v379 + 16 * v382);
                            }
                            while (v724 != v384);
                            v383 = (int32x2_t *****)(v379 + 16 * v382);
                          }
                          *v383 = (int32x2_t ****)-8192;
                          v378[304] = vadd_s32(v378[304], (int32x2_t)0x1FFFFFFFFLL);
                          v377 = v724;
LABEL_623:
                          *((_BYTE *)v377 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v360 = v375 + 7;
                  goto LABEL_626;
                }
                v359 = (llvm::BasicBlock **)v666;
              }
              v360 = (uint64_t *)&v359[v156 - 1];
LABEL_626:
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock((uint64_t)a8, (uint64_t)v189, *v360);
              if (v690)
              {
                sub_1C4E43068((uint64_t)v689);
                MEMORY[0x1CAA32FB4](v689[0], 8);
                v690 = 0;
              }
              v387 = v686;
              if (v688)
              {
                v388 = &v686[8 * (unint64_t)v688];
                do
                {
                  v389 = v387[3];
                  if ((v389 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v390 = v387[7];
                    if (v390)
                    {
                      if (v390 != -8192 && v390 != -4096)
                      {
                        v391 = v387[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v391 = v387[6];
                        v392 = (unint64_t *)v387[6];
                        if (v392)
                        {
                          *v392 = *v392 & 7 | v391;
                        }
                        else
                        {
                          v393 = v387[7];
                          v394 = ***(int32x2_t ****)v393;
                          v395 = (unint64_t)v394[303];
                          if (v395 <= v391)
                          {
                            v396 = v394[305].u32[0];
                            if (v395 + 16 * v396 > v391)
                            {
                              v397 = v396 - 1;
                              LODWORD(v398) = v397 & ((v393 >> 4) ^ (v393 >> 9));
                              v399 = (uint64_t *)(v395 + 16 * v398);
                              v400 = *v399;
                              if (v393 != *v399)
                              {
                                v401 = 1;
                                do
                                {
                                  if (v400 == -4096)
                                    goto LABEL_643;
                                  v402 = v398 + v401++;
                                  v398 = v402 & v397;
                                  v400 = *(_QWORD *)(v395 + 16 * v398);
                                }
                                while (v393 != v400);
                                v399 = (uint64_t *)(v395 + 16 * v398);
                              }
                              *v399 = -8192;
                              v394[304] = vadd_s32(v394[304], (int32x2_t)0x1FFFFFFFFLL);
                              v393 = v387[7];
LABEL_643:
                              *(_BYTE *)(v393 + 17) &= ~1u;
                            }
                          }
                        }
                        v389 = v387[3];
                      }
                    }
                  }
                  if (v389 != -4096 && v389 != -8192 && v389 != 0)
                  {
                    v404 = v387[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v404 = v387[2];
                    v405 = (unint64_t *)v387[2];
                    if (v405)
                    {
                      *v405 = *v405 & 7 | v404;
                    }
                    else
                    {
                      v406 = v387[3];
                      v407 = ***(int32x2_t ****)v406;
                      v408 = (unint64_t)v407[303];
                      if (v408 <= v404)
                      {
                        v409 = v407[305].u32[0];
                        if (v408 + 16 * v409 > v404)
                        {
                          v410 = v409 - 1;
                          LODWORD(v411) = v410 & ((v406 >> 4) ^ (v406 >> 9));
                          v412 = (uint64_t *)(v408 + 16 * v411);
                          v413 = *v412;
                          if (v406 != *v412)
                          {
                            v414 = 1;
                            do
                            {
                              if (v413 == -4096)
                                goto LABEL_662;
                              v415 = v411 + v414++;
                              v411 = v415 & v410;
                              v413 = *(_QWORD *)(v408 + 16 * v411);
                            }
                            while (v406 != v413);
                            v412 = (uint64_t *)(v408 + 16 * v411);
                          }
                          *v412 = -8192;
                          v407[304] = vadd_s32(v407[304], (int32x2_t)0x1FFFFFFFFLL);
                          v406 = v387[3];
LABEL_662:
                          *(_BYTE *)(v406 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v387 += 8;
                }
                while (v387 != v388);
                v387 = v686;
              }
              MEMORY[0x1CAA32FB4](v387, 8);
              if (v682 == v671)
                goto LABEL_668;
            }
            sub_1C477672C((uint64_t)&v702, v202);
            if (*v682 != *v667)
            {
              v199 = (llvm::BasicBlock **)v677;
              v198 = v678;
              goto LABEL_334;
            }
            v199 = (llvm::BasicBlock **)v677;
            v198 = v678;
            if (v658 >= (char **)v657)
            {
              v226 = ((char *)v658 - (char *)v667) >> 3;
              v227 = v226 + 1;
              if ((unint64_t)(v226 + 1) >> 61)
                goto LABEL_1007;
              if (((char *)v657 - (char *)v667) >> 2 > v227)
                v227 = ((char *)v657 - (char *)v667) >> 2;
              if ((unint64_t)((char *)v657 - (char *)v667) >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                if (v228 >> 61)
                  goto LABEL_1008;
                v229 = (char *)operator new(8 * v228);
                v230 = (uint64_t *)v658;
              }
              else
              {
                v230 = (uint64_t *)v658;
                v229 = 0;
              }
              v246 = (uint64_t *)&v229[8 * v226];
              *v246 = (uint64_t)v189;
              v247 = (char **)(v246 + 1);
              while (v230 != v667)
              {
                v248 = *--v230;
                *--v246 = v248;
              }
              v657 = (uint64_t *)&v229[8 * v228];
              operator delete(v667);
              v658 = v247;
              v667 = v246;
              v199 = (llvm::BasicBlock **)v677;
              v198 = v678;
              v207 = v666;
              v192 = v682;
            }
            else
            {
              *v658++ = v189;
LABEL_334:
              v207 = v666;
            }
            if (*v192 != *v207)
              goto LABEL_426;
            if (v661 < (uint64_t *)v656)
            {
              *v661++ = (uint64_t)v189;
              goto LABEL_426;
            }
            v231 = v661 - v666;
            v232 = v231 + 1;
            if ((unint64_t)(v231 + 1) >> 61)
              goto LABEL_1007;
            if ((v656 - (char *)v666) >> 2 > v232)
              v232 = (v656 - (char *)v666) >> 2;
            if ((unint64_t)(v656 - (char *)v666) >= 0x7FFFFFFFFFFFFFF8)
              v233 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v233 = v232;
            if (v233)
            {
              if (v233 >> 61)
                goto LABEL_1008;
              v234 = (char *)operator new(8 * v233);
            }
            else
            {
              v234 = 0;
            }
            v249 = (uint64_t *)&v234[8 * v231];
            *v249 = (uint64_t)v189;
            v250 = v249 + 1;
            for (jj = v661; jj != v666; --jj)
            {
              v252 = *(jj - 1);
              *--v249 = v252;
            }
            v656 = &v234[8 * v233];
            operator delete(v666);
            v661 = v250;
            v666 = v249;
            goto LABEL_424;
          }
LABEL_668:
          llvm::remapInstructionsInBlocks((uint64_t *)&v726, (uint64_t)v698);
          if ((_DWORD)v727)
          {
            v416 = (char *)v726;
            v417 = (char *)v726 + 8 * v727;
            do
            {
              v418 = *(_QWORD *)v416 + 40;
              for (kk = *(_QWORD *)(*(_QWORD *)v416 + 48); kk != v418; kk = *(_QWORD *)(kk + 8))
              {
                if (kk)
                  v420 = kk - 24;
                else
                  v420 = 0;
                v421 = sub_1C4D9F8B4(v420);
                if (kk && v421)
                  llvm::AssumptionCache::registerAssumption((char **)a9, v420);
              }
              v416 += 8;
            }
            while (v416 != v417);
          }
          v111 = v681;
          if (*(_QWORD *)(v681[v156] + 40) != v681[v156] + 40)
          {
            v422 = *(_QWORD *)(v681[v156] + 48);
            v423 = v422 - 24;
            v424 = v422 ? v422 - 24 : 0;
            if (v422 && *(_BYTE *)(v424 + 16) == 83)
            {
              do
              {
                v686 = 0;
                v425 = *(_DWORD *)(v423 + 20);
                v426 = v425 & 0x7FFFFFF;
                if ((v425 & 0x7FFFFFF) != 0)
                {
                  v427 = 0;
                  while (1)
                  {
                    v428 = v423 - 32 * v426;
                    if ((v425 & 0x40000000) != 0)
                      v428 = *(_QWORD *)(v423 - 8);
                    if (*(_QWORD *)(v428 + 32 * *(unsigned int *)(v423 + 60) + 8 * v427) == v666[v156])
                      break;
                    if (v426 == ++v427)
                      goto LABEL_692;
                  }
                }
                else
                {
LABEL_692:
                  LODWORD(v427) = -1;
                }
                if ((v425 & 0x40000000) != 0)
                  v429 = *(_QWORD *)(v423 - 8);
                else
                  v429 = v423 - 32 * v426;
                v430 = *(_QWORD *)(v429 + 32 * v427);
                v686 = (_QWORD *)v430;
                v431 = sub_1C509B72C(v691, &v686);
                if (v431[1])
                  v432 = v431[1];
                else
                  v432 = v430;
                v433 = *(_DWORD *)(v423 + 20);
                if ((v433 & 0x40000000) != 0)
                  v434 = *(_QWORD *)(v423 - 8);
                else
                  v434 = v423 - 32 * (v433 & 0x7FFFFFF);
                *(_QWORD *)(v434 + 32 * *(unsigned int *)(v423 + 60)) = v678[v156 - 1];
                sub_1C6125834(v423, 0, v432);
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v423, 1u, 1);
                v435 = *(_QWORD *)(v423 + 32);
                v423 = v435 - 24;
                if (v435)
                  v436 = v435 - 24;
                else
                  v436 = 0;
              }
              while (v435 && *(_BYTE *)(v436 + 16) == 83);
            }
          }
          if ((v746 & 1) == 0)
            MEMORY[0x1CAA32FB4](v747, 8);
          MEMORY[0x1CAA32FB4](v691[0], 8);
          if (v726 != &v728)
            free(v726);
          ++v156;
          v123 = v677;
          v157 = v662;
          if (v156 == v716)
            goto LABEL_211;
        }
      }
LABEL_175:
      v71 = 0;
      v75 = 0;
      goto LABEL_176;
    }
    v707 = &v717;
    v708 = &v716;
    v21 = ****(_QWORD ****)a11;
    if (*(_QWORD *)(v21 + 128))
    {
      if (a4 == 1)
      {
LABEL_12:
        sub_1C5F341CC(&v726, (uint64_t)&v707);
        v746 = " with run-time trip count";
        v747 = (void *)25;
        sub_1C53B17B4((uint64_t)&v733, (const void **)&v746);
        sub_1C61998EC((uint64_t)&v746, (uint64_t)&v726);
        v746 = &off_1E814E500;
        v726 = &off_1E814E790;
        v23 = (char *)v733;
        if ((_DWORD)v734)
        {
          v24 = (unint64_t)v734 << 6;
          do
          {
            v25 = (void **)&v23[v24];
            if (v23[v24 - 17] < 0)
              operator delete(*(v25 - 5));
            if (*((char *)v25 - 41) < 0)
              operator delete(*(v25 - 8));
            v24 -= 64;
          }
          while (v24);
          v23 = (char *)v733;
        }
        if (v23 != (char *)v735)
          free(v23);
        llvm::OptimizationRemarkEmitter::emit(a11, (llvm::DiagnosticInfoOptimizationBase *)&v746);
        v746 = &off_1E814E790;
        v26 = (char *)v751;
        if (!v752)
          goto LABEL_1032;
        v27 = (unint64_t)v752 << 6;
        do
        {
          v28 = (void **)&v26[v27];
          if (v26[v27 - 17] < 0)
            operator delete(*(v28 - 5));
          if (*((char *)v28 - 41) < 0)
            operator delete(*(v28 - 8));
          v27 -= 64;
        }
        while (v27);
LABEL_1031:
        v26 = (char *)v751;
LABEL_1032:
        if (v26 != (char *)v753)
          free(v26);
        goto LABEL_31;
      }
    }
    else
    {
      v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 72) + 48))(*(_QWORD *)(v21 + 72));
      if (a4 == 1)
      {
        if (!v22)
          goto LABEL_31;
        goto LABEL_12;
      }
      if (!v22)
        goto LABEL_31;
    }
    sub_1C5F341CC(&v726, (uint64_t)&v707);
    v746 = " with ";
    v747 = (void *)6;
    sub_1C53B17B4((uint64_t)&v733, (const void **)&v746);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v718, "TripMultiple", 0xCuLL, a4);
    v637 = sub_1C47E3888((uint64_t)&v726, (uint64_t)&v718);
    v746 = " trips per branch";
    v747 = (void *)17;
    sub_1C53B17B4(v637 + 80, (const void **)&v746);
    sub_1C61998EC((uint64_t)&v746, v637);
    v746 = &off_1E814E500;
    if ((v720[15] & 0x80000000) != 0)
      operator delete(v719);
    if (SHIBYTE(v718.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v718.__r_.__value_.__l.__data_);
    v726 = &off_1E814E790;
    v638 = (char *)v733;
    if ((_DWORD)v734)
    {
      v639 = (unint64_t)v734 << 6;
      do
      {
        v640 = (void **)&v638[v639];
        if (v638[v639 - 17] < 0)
          operator delete(*(v640 - 5));
        if (*((char *)v640 - 41) < 0)
          operator delete(*(v640 - 8));
        v639 -= 64;
      }
      while (v639);
      v638 = (char *)v733;
    }
    if (v638 != (char *)v735)
      free(v638);
    llvm::OptimizationRemarkEmitter::emit(a11, (llvm::DiagnosticInfoOptimizationBase *)&v746);
    v746 = &off_1E814E790;
    v26 = (char *)v751;
    if (!v752)
      goto LABEL_1032;
    v641 = (unint64_t)v752 << 6;
    do
    {
      v642 = (void **)&v26[v641];
      if (v26[v641 - 17] < 0)
        operator delete(*(v642 - 5));
      if (*((char *)v642 - 41) < 0)
        operator delete(*(v642 - 8));
      v641 -= 64;
    }
    while (v641);
    goto LABEL_1031;
  }
  return v20;
}

void sub_1C5F32880()
{
  JUMPOUT(0x1C5F2F184);
}

void sub_1C5F32888(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
    JUMPOUT(0x1C5F328ACLL);
  JUMPOUT(0x1C5F2F188);
}

uint64_t llvm::isSafeToUnrollAndJam(llvm *this, llvm::Loop *a2, llvm::ScalarEvolution *a3, llvm::DominatorTree *a4, llvm::DependenceInfo *a5, llvm::LoopInfo *a6)
{
  llvm **v10;
  llvm *v11;
  uint64_t LoopLatch;
  uint64_t v13;
  uint64_t v14;
  llvm **v16;
  llvm *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void **v23;
  uint64_t v24;
  llvm *v25;
  unsigned int *v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  _QWORD *v30;
  llvm::ScalarEvolution *v31;
  const llvm::Loop ***v32;
  int v33;
  uint64_t v34;
  const llvm::Loop **v35;
  _BOOL4 hasIterationCountInvariantInParent;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  const void *v42;
  const void *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void *v73;
  const void *v74;
  const void *v75;
  int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t i;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t *v117;
  unint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  _QWORD *v132;
  llvm::Instruction **v133;
  llvm::Instruction **v134;
  llvm::Instruction *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  unsigned int v142;
  _QWORD *v143;
  unsigned int v144;
  llvm::Instruction **v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  char *v166;
  unsigned int *v167;
  int v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int64_t v195;
  char *v196;
  uint64_t *v197;
  char *v198;
  char *v199;
  unsigned int v200;
  _DWORD v201[3];
  _BYTE v202[32];
  uint64_t (**v203)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  uint64_t v204[2];
  int v205;
  __int16 v206;
  uint64_t v207[2];
  unsigned int v208;
  uint64_t v209[2];
  unsigned int v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  int v214;
  _BYTE v215[32];
  llvm *v216;
  __int32 v217;
  void *v218;
  uint64_t v219;
  _BYTE v220[64];
  void *v221;
  uint64_t v222;
  _QWORD v223[4];
  void *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  _QWORD v228[64];

  v228[62] = *MEMORY[0x1E0C80C00];
  v216 = this;
  if (*((_QWORD *)this + 2) - *((_QWORD *)this + 1) != 8)
    return 0;
  v10 = (llvm **)this;
  v11 = this;
  do
  {
    if (!llvm::Loop::isLoopSimplifyForm(v11))
      return 0;
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v11);
    if (!LoopLatch
      || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v11, LoopLatch)
      || (*(_WORD *)(**((_QWORD **)v11 + 4) + 18) & 0x7FFF) != 0)
    {
      return 0;
    }
    v13 = (*((_QWORD *)v11 + 2) - *((_QWORD *)v11 + 1)) >> 3;
    if ((_DWORD)v13 != 1)
      break;
    if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v11)
      || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v11))
    {
      return 0;
    }
    v11 = (llvm *)**((_QWORD **)v11 + 1);
  }
  while (v11);
  if ((_DWORD)v13)
    return 0;
  v16 = &v216;
  do
  {
    v17 = *v16;
    v16 = (llvm **)*((_QWORD *)*v16 + 1);
  }
  while (v16 != *((llvm ***)v17 + 2));
  v211 = v215;
  v212 = v215;
  v213 = 4;
  v214 = 0;
  v209[0] = 0;
  v209[1] = 0;
  v210 = 0;
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  v18 = (uint64_t *)*((_QWORD *)v17 + 4);
  v19 = *((_QWORD *)v17 + 5) - (_QWORD)v18;
  if (v19)
  {
    v20 = 8 * (v19 >> 3);
    do
    {
      v21 = *v18++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v211, v21);
      v20 -= 8;
    }
    while (v20);
  }
  v224 = &v226;
  v226 = (uint64_t)v10;
  v225 = 0x400000001;
  sub_1C4EAF900((uint64_t)v10, (uint64_t)&v224);
  if ((_DWORD)v225)
  {
    v23 = (void **)v224;
    v24 = 8 * v225 - 8;
    while (1)
    {
      v25 = (llvm *)*v23;
      v218 = v25;
      if (v25 == v17)
        break;
      v26 = (unsigned int *)(sub_1C61A4E7C((uint64_t)v209, (uint64_t *)&v218) + 1);
      v27 = sub_1C61A4E7C((uint64_t)v207, (uint64_t *)&v218);
      v28 = sub_1C5F33B00((uint64_t)v25, v26, (llvm::SmallPtrSetImplBase *)(v27 + 1), (uint64_t)a3);
      ++v23;
      if (v28)
        v29 = v24 == 0;
      else
        v29 = 1;
      v24 -= 8;
      if (v29)
      {
        v22 = v28;
        goto LABEL_31;
      }
    }
    v22 = 1;
  }
  else
  {
    v22 = 1;
  }
LABEL_31:
  if (v224 != &v226)
    free(v224);
  if (!v22)
    goto LABEL_86;
  v30 = sub_1C61A4E7C((uint64_t)v207, (uint64_t *)&v216);
  if (*((_DWORD *)v30 + 7) - *((_DWORD *)v30 + 8) != 1)
    goto LABEL_86;
  v224 = &v226;
  v226 = (uint64_t)v10;
  v225 = 0x400000001;
  sub_1C4EAF900((uint64_t)v10, (uint64_t)&v224);
  v32 = (const llvm::Loop ***)v224;
  if ((_DWORD)v225)
  {
    v34 = 8 * v225 - 8;
    do
    {
      v35 = *v32++;
      hasIterationCountInvariantInParent = llvm::hasIterationCountInvariantInParent(v35, a2, v31);
      v37 = !hasIterationCountInvariantInParent || v34 == 0;
      v34 -= 8;
    }
    while (!v37);
    v33 = hasIterationCountInvariantInParent;
    v32 = (const llvm::Loop ***)v224;
  }
  else
  {
    v33 = 1;
  }
  if (v32 != (const llvm::Loop ***)&v226)
    free(v32);
  if (!v33)
  {
LABEL_86:
    v14 = 0;
    goto LABEL_87;
  }
  v204[1] = 0;
  v205 = 0;
  v203 = &off_1E8139EA0;
  v204[0] = 0;
  v206 = 0;
  llvm::SimpleLoopSafetyInfo::computeLoopSafetyInfo((llvm::SimpleLoopSafetyInfo *)&v203, (llvm ***)v10);
  v14 = 0;
  if ((_BYTE)v206)
    goto LABEL_256;
  v38 = *(_QWORD *)v10[4];
  v39 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v10);
  v40 = sub_1C61A4E7C((uint64_t)v207, (uint64_t *)&v216);
  v41 = v202;
  v198 = v202;
  v42 = (const void *)v40[2];
  if (v42 == (const void *)v40[1])
  {
    v199 = v202;
    v43 = v42;
  }
  else
  {
    v192 = *((unsigned int *)v40 + 6);
    v41 = (char *)malloc_type_malloc(8 * v192, 0x4065EBACuLL);
    if (!v41)
    {
      if ((_DWORD)v192)
        goto LABEL_372;
      v41 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v41)
        goto LABEL_372;
    }
    v199 = v41;
    v43 = (const void *)v40[1];
    v42 = (const void *)v40[2];
  }
  v45 = *((_DWORD *)v40 + 6);
  v44 = *((_DWORD *)v40 + 7);
  v200 = v45;
  if (v42 == v43)
    v46 = v44;
  else
    v46 = v45;
  if (v46)
  {
    memmove(v41, v42, 8 * v46);
    v44 = *((_DWORD *)v40 + 7);
    v10 = (llvm **)v216;
  }
  v47 = *((_DWORD *)v40 + 8);
  v201[0] = v44;
  v201[1] = v47;
  v48 = *(_QWORD *)v10[1];
  v218 = v220;
  v219 = 0x800000000;
  v224 = v228;
  v225 = (uint64_t)v228;
  v226 = 8;
  v227 = 0;
  if (*(_QWORD *)(v38 + 40) == v38 + 40)
    goto LABEL_90;
  v49 = *(_QWORD *)(v38 + 48);
  v50 = v49 - 24;
  if (v49)
    v51 = v49 - 24;
  else
    v51 = 0;
  v14 = 1;
  if (!v49 || *(_BYTE *)(v51 + 16) != 83)
    goto LABEL_91;
  v52 = 0;
  do
  {
    v53 = *(_DWORD *)(v50 + 20);
    v54 = v53 & 0x7FFFFFF;
    if ((v53 & 0x7FFFFFF) != 0)
    {
      v55 = 0;
      while (1)
      {
        v56 = v50 - 32 * v54;
        if ((v53 & 0x40000000) != 0)
          v56 = *(_QWORD *)(v50 - 8);
        if (*(_QWORD *)(v56 + 32 * *(unsigned int *)(v50 + 60) + 8 * v55) == v39)
          break;
        if (v54 == ++v55)
          goto LABEL_68;
      }
    }
    else
    {
LABEL_68:
      LODWORD(v55) = -1;
    }
    if ((v53 & 0x40000000) != 0)
      v57 = *(_QWORD *)(v50 - 8);
    else
      v57 = v50 - 32 * v54;
    v58 = *(_QWORD *)(v57 + 32 * v55);
    if (v58)
      v59 = *(unsigned __int8 *)(v58 + 16) >= 0x1Cu;
    else
      v59 = 0;
    if (v59)
    {
      if (v52 >= HIDWORD(v219))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v218, (uint64_t)v220, v52 + 1, 8);
        v52 = v219;
      }
      *((_QWORD *)v218 + v52) = v58;
      v52 = v219 + 1;
      LODWORD(v219) = v219 + 1;
    }
    v60 = *(_QWORD *)(v50 + 32);
    v50 = v60 - 24;
    if (v60)
      v61 = v60 - 24;
    else
      v61 = 0;
  }
  while (v60 && *(_BYTE *)(v61 + 16) == 83);
  if (!v52)
  {
LABEL_90:
    v14 = 1;
    goto LABEL_91;
  }
  while (1)
  {
    v151 = *((_QWORD *)v218 + v52 - 1);
    LODWORD(v219) = v52 - 1;
    v152 = sub_1C477672C(v48 + 56, *(_QWORD *)(v151 + 40));
    v153 = *(_QWORD *)(v48 + 64);
    v154 = 72;
    if (v153 == *(_QWORD *)(v48 + 56))
      v154 = 76;
    if (v152 != (_QWORD *)(v153 + 8 * *(unsigned int *)(v48 + v154)))
      goto LABEL_358;
    v155 = (char *)sub_1C477672C((uint64_t)&v198, *(_QWORD *)(v151 + 40));
    if (v199 == v198)
      v156 = v201;
    else
      v156 = &v200;
    if (v155 == &v199[8 * *v156])
      goto LABEL_310;
    v14 = 0;
    v157 = *(unsigned __int8 *)(v151 + 16);
    if (v157 > 0x3E)
      break;
    if (*(unsigned __int8 *)(v151 + 16) <= 0x3Cu)
    {
      if (*(unsigned __int8 *)(v151 + 16) <= 0x3Bu)
      {
        switch(v157)
        {
          case '!':
            goto LABEL_266;
          case '%':
            goto LABEL_91;
          case '\'':
LABEL_266:
            v158 = *(_QWORD *)(v151 + 64);
            if (!v158 || (*(_BYTE *)(v158 + 17) & 0x30) == 0)
            {
              v159 = *(_DWORD *)(v151 + 20);
              if (v159 < 0)
              {
                v185 = v151 - 32 * (v159 & 0x7FFFFFF);
                v188 = *(_QWORD *)(v185 - 8);
                v186 = v185 - 8;
                v187 = v188;
                if (v188)
                {
                  v189 = -v187;
                  do
                  {
                    v190 = *(_DWORD *)(*(_QWORD *)(v186 + v189) + 8);
                    if (v190 >= 2 && v190 != 7)
                      goto LABEL_358;
                    v189 += 16;
                  }
                  while (v189);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v151, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v151, 44))
              {
                goto LABEL_358;
              }
            }
            break;
        }
      }
      else if ((*(_WORD *)(v151 + 18) & 0x301) != 0)
      {
        goto LABEL_358;
      }
    }
    else if (v157 == 61)
    {
      goto LABEL_91;
    }
LABEL_283:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v151) & 1) != 0
      || !llvm::Instruction::willReturn((llvm::Instruction *)v151))
    {
      goto LABEL_358;
    }
    v160 = *(unsigned __int8 *)(v151 + 16);
    v161 = (v160 - 33);
    if (v161 > 0x37)
      goto LABEL_298;
    if (((1 << (v160 - 33)) & 0x8000000000041) != 0)
    {
      v162 = *(_QWORD *)(v151 + 64);
      if (!v162 || (*(_BYTE *)(v162 + 20) & 4) == 0 && (*(_BYTE *)(v162 + 17) & 0x10) == 0)
      {
        LODWORD(v221) = 7;
        if (sub_1C53E4BBC(v151, (__int32 *)&v221, 1uLL))
        {
          v177 = *(_QWORD *)(v151 - 32);
          if (!v177
            || *(_BYTE *)(v177 + 16)
            || *(_QWORD *)(v177 + 24) != *(_QWORD *)(v151 + 72)
            || *(_DWORD *)(v177 + 36) != 7)
          {
            goto LABEL_358;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v151, 66) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v151, 44))
        {
          goto LABEL_358;
        }
      }
      goto LABEL_297;
    }
    if (((1 << (v160 - 33)) & 0x808001C8000010) != 0)
      goto LABEL_358;
    if (v161 == 28)
    {
      if ((*(_WORD *)(v151 + 18) & 0x301) != 0)
        goto LABEL_358;
LABEL_297:
      v160 = *(unsigned __int8 *)(v151 + 16);
    }
LABEL_298:
    v163 = (v160 - 33);
    if (v163 <= 0x37)
    {
      if (((1 << v163) & 0x8000000000041) != 0)
      {
        v164 = *(_QWORD *)(v151 + 64);
        if (!v164 || (*(_BYTE *)(v164 + 17) & 0x30) == 0)
        {
          v165 = *(_DWORD *)(v151 + 20);
          if (v165 < 0)
          {
            v178 = v151 - 32 * (v165 & 0x7FFFFFF);
            v181 = *(_QWORD *)(v178 - 8);
            v179 = v178 - 8;
            v180 = v181;
            if (v181)
            {
              v182 = -v180;
              while (1)
              {
                v183 = *(_DWORD *)(*(_QWORD *)(v179 + v182) + 8);
                if (v183 >= 2 && v183 != 7)
                  break;
                v182 += 16;
                if (!v182)
                  goto LABEL_306;
              }
LABEL_358:
              v14 = 0;
              goto LABEL_91;
            }
          }
LABEL_306:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v151, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v151, 44))
          {
            goto LABEL_358;
          }
        }
      }
      else if (v163 == 27)
      {
        if ((*(_WORD *)(v151 + 18) & 0x301) != 0)
          goto LABEL_358;
      }
      else if (((1 << v163) & 0x808001D0000010) != 0)
      {
        goto LABEL_358;
      }
    }
LABEL_310:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v224, v151);
    v166 = (char *)sub_1C477672C((uint64_t)&v198, *(_QWORD *)(v151 + 40));
    if (v199 == v198)
      v167 = v201;
    else
      v167 = &v200;
    if (v166 != &v199[8 * *v167])
    {
      v168 = *(_DWORD *)(v151 + 20);
      if ((v168 & 0x40000000) != 0)
      {
        v170 = *(uint64_t **)(v151 - 8);
        v169 = v168 & 0x7FFFFFF;
      }
      else
      {
        v169 = v168 & 0x7FFFFFF;
        v170 = (uint64_t *)(v151 - 32 * v169);
      }
      if (v169)
      {
        v171 = 32 * v169;
        do
        {
          v172 = *v170;
          if (*v170)
            v173 = *(unsigned __int8 *)(*v170 + 16) >= 0x1Cu;
          else
            v173 = 0;
          if (v173)
          {
            v174 = sub_1C477672C((uint64_t)&v224, *v170);
            v175 = (void *)v225 == v224 ? (uint64_t *)((char *)&v226 + 4) : &v226;
            if (v174 == (_QWORD *)(v225 + 8 * *(unsigned int *)v175))
            {
              v176 = v219;
              if (v219 >= (unint64_t)HIDWORD(v219))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v218, (uint64_t)v220, v219 + 1, 8);
                v176 = v219;
              }
              *((_QWORD *)v218 + v176) = v172;
              LODWORD(v219) = v219 + 1;
            }
          }
          v170 += 4;
          v171 -= 32;
        }
        while (v171);
      }
    }
    v52 = v219;
    v14 = 1;
    if (!(_DWORD)v219)
      goto LABEL_91;
  }
  switch(*(_BYTE *)(v151 + 16))
  {
    case 'P':
    case 'S':
    case 'X':
      break;
    case 'Q':
    case 'R':
    case 'U':
    case 'V':
    case 'W':
      goto LABEL_283;
    case 'T':
      goto LABEL_266;
    default:
      if (v157 - 63 >= 3)
        goto LABEL_283;
      break;
  }
LABEL_91:
  if ((void *)v225 != v224)
    free((void *)v225);
  if (v218 != v220)
    free(v218);
  if ((_DWORD)v14)
  {
    v224 = &v226;
    v225 = 0x800000000;
    v221 = v223;
    v223[0] = v10;
    v222 = 0x400000001;
    sub_1C4EAF900((uint64_t)v10, (uint64_t)&v221);
    v64 = (uint64_t *)v221;
    if ((_DWORD)v222)
    {
      v65 = v209[0];
      v66 = v210;
      v67 = v209[0] + 72 * v210;
      v68 = 8 * v222;
      do
      {
        v69 = *v64;
        if (v67 != sub_1C5F33F04((uint64_t)v209, *v64))
        {
          sub_1C63AF658((uint64_t)&v218, v65, v66, v69);
          sub_1C5F33F5C((uint64_t)&v224, (uint64_t *)&v218);
          if ((void *)v219 != v218)
            free((void *)v219);
        }
        ++v64;
        v68 -= 8;
      }
      while (v68);
      v64 = (uint64_t *)v221;
    }
    if (v64 != v223)
      free(v64);
    v70 = (char *)&v211;
    v71 = (char *)v224;
    if (v225 >= HIDWORD(v225))
    {
      v194 = v225 + 1;
      if (v224 <= &v211 && (char *)v224 + 64 * (unint64_t)v225 > (char *)&v211)
      {
        v195 = (char *)&v211 - (_BYTE *)v224;
        sub_1C63AF6D4((uint64_t)&v224, v194);
        v71 = (char *)v224;
        v70 = (char *)v224 + v195;
      }
      else
      {
        sub_1C63AF6D4((uint64_t)&v224, v194);
        v70 = (char *)&v211;
        v71 = (char *)v224;
      }
    }
    v72 = &v71[64 * (unint64_t)v225];
    v73 = v72 + 32;
    *(_QWORD *)v72 = v72 + 32;
    v74 = (const void *)*((_QWORD *)v70 + 1);
    if (v74 == *(const void **)v70)
    {
      *((_QWORD *)v72 + 1) = v73;
      goto LABEL_108;
    }
    v193 = *((unsigned int *)v70 + 4);
    v73 = malloc_type_malloc(8 * v193, 0x4065EBACuLL);
    if (!v73 && ((_DWORD)v193 || (v73 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_372:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)v72 + 1) = v73;
    v74 = *(const void **)v70;
LABEL_108:
    *((_DWORD *)v72 + 4) = *((_DWORD *)v70 + 4);
    v75 = (const void *)*((_QWORD *)v70 + 1);
    v76 = *((_DWORD *)v70 + 5);
    if (v75 == v74)
      v77 = *((_DWORD *)v70 + 5);
    else
      v77 = *((_DWORD *)v70 + 4);
    if (v77)
    {
      memmove(v73, v75, 8 * v77);
      v76 = *((_DWORD *)v70 + 5);
    }
    *((_DWORD *)v72 + 5) = v76;
    *((_DWORD *)v72 + 6) = *((_DWORD *)v70 + 6);
    LODWORD(v225) = v225 + 1;
    v221 = v223;
    v223[0] = v10;
    v222 = 0x400000001;
    sub_1C4EAF900((uint64_t)v10, (uint64_t)&v221);
    v78 = (uint64_t *)v221;
    if ((_DWORD)v222)
    {
      v79 = v207[0];
      v80 = v208;
      v81 = v207[0] + 72 * v208;
      v82 = 8 * v222;
      do
      {
        v83 = *v78;
        if (v81 != sub_1C5F33F04((uint64_t)v207, *v78))
        {
          sub_1C63AF658((uint64_t)&v218, v79, v80, v83);
          sub_1C5F33F5C((uint64_t)&v224, (uint64_t *)&v218);
          if ((void *)v219 != v218)
            free((void *)v219);
        }
        ++v78;
        v82 -= 8;
      }
      while (v82);
      v78 = (uint64_t *)v221;
    }
    if (v78 != v223)
      free(v78);
    LODWORD(v84) = 0;
    do
    {
      v10 = (llvm **)*v10;
      v84 = (v84 + 1);
    }
    while (v10);
    v218 = v220;
    v219 = 0x400000000;
    v221 = v223;
    v222 = 0x400000000;
    if ((_DWORD)v225)
    {
      v85 = v224;
      v196 = (char *)v224 + 64 * (unint64_t)v225;
      while (1)
      {
        LODWORD(v222) = 0;
        v87 = *v85;
        v86 = v85[1];
        v88 = (unsigned int *)v85 + 5;
        v89 = (unsigned int *)(v85 + 2);
        if (v86 == *v85)
          v90 = (unsigned int *)v85 + 5;
        else
          v90 = (unsigned int *)(v85 + 2);
        v91 = *v90;
        v92 = (unint64_t *)v85[1];
        v197 = v85;
        if ((_DWORD)v91)
        {
          v93 = 0;
          while (*(_QWORD *)(v86 + v93) >= 0xFFFFFFFFFFFFFFFELL)
          {
            v93 += 8;
            if (8 * v91 == v93)
              goto LABEL_207;
          }
          v92 = (unint64_t *)(v86 + v93);
        }
        v94 = (unint64_t *)(v86 + 8 * v91);
        if (v92 != v94)
        {
          v95 = *v92;
LABEL_137:
          v96 = v95 + 40;
          for (i = *(_QWORD *)(v95 + 48); i != v96; i = *(_QWORD *)(i + 8))
          {
            if (i)
              v98 = i - 24;
            else
              v98 = 0;
            v99 = *(unsigned __int8 *)(v98 + 16);
            if (v99 == 60)
              v100 = v98;
            else
              v100 = 0;
            if (i && v99 == 60 || (v99 == 61 ? (v100 = v98) : (v100 = 0), i && v99 == 61))
            {
              v101 = *(unsigned __int8 *)(v100 + 16);
              if (v101 == 60 || v101 == 61)
              {
                v102 = *(_WORD *)(v100 + 18);
                if ((v102 & 0x380) != 0 || (v102 & 1) != 0)
                  goto LABEL_248;
              }
              else if ((v101 - 63) < 3 || (*(_WORD *)(v100 + 18) & 1) != 0)
              {
                goto LABEL_248;
              }
              v103 = v222;
              if (v222 >= (unint64_t)HIDWORD(v222))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v221, (uint64_t)v223, v222 + 1, 8);
                v103 = v222;
              }
              *((_QWORD *)v221 + v103) = v98;
              LODWORD(v222) = v222 + 1;
            }
            else
            {
              v104 = (v99 - 33);
              if (v104 <= 0x37)
              {
                if (((1 << (v99 - 33)) & 0x8000000000041) != 0)
                {
                  v105 = *(_QWORD *)(v98 + 64);
                  if (!v105 || (*(_BYTE *)(v105 + 20) & 4) == 0 && (*(_BYTE *)(v105 + 17) & 0x10) == 0)
                  {
                    v217 = 7;
                    if (sub_1C53E4BBC(v98, &v217, 1uLL))
                    {
                      v109 = *(_QWORD *)(v98 - 32);
                      if (!v109
                        || *(_BYTE *)(v109 + 16)
                        || *(_QWORD *)(v109 + 24) != *(_QWORD *)(v98 + 72)
                        || *(_DWORD *)(v109 + 36) != 7)
                      {
                        goto LABEL_248;
                      }
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v98, 66) & 1) == 0
                      && !llvm::CallBase::hasFnAttrOnCalledFunction(v98, 44))
                    {
                      goto LABEL_248;
                    }
                  }
                }
                else if (((1 << (v99 - 33)) & 0x808001C8000010) != 0
                       || v104 == 28 && (*(_WORD *)(v98 + 18) & 0x301) != 0)
                {
                  goto LABEL_248;
                }
              }
              v106 = *(unsigned __int8 *)(v98 + 16) - 33;
              if (v106 <= 0x37)
              {
                if (((1 << (*(_BYTE *)(v98 + 16) - 33)) & 0x8000000000041) != 0)
                {
                  v107 = *(_QWORD *)(v98 + 64);
                  if (!v107 || (*(_BYTE *)(v107 + 17) & 0x30) == 0)
                  {
                    v108 = *(_DWORD *)(v98 + 20);
                    if (v108 < 0)
                    {
                      v110 = v98 - 32 * (v108 & 0x7FFFFFF);
                      v113 = *(_QWORD *)(v110 - 8);
                      v111 = v110 - 8;
                      v112 = v113;
                      if (v113)
                      {
                        v114 = -v112;
                        do
                        {
                          v115 = *(_DWORD *)(*(_QWORD *)(v111 + v114) + 8);
                          if (v115 >= 2 && v115 != 7)
                            goto LABEL_248;
                          v114 += 16;
                        }
                        while (v114);
                      }
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v98, 45) & 1) == 0
                      && (llvm::CallBase::hasFnAttrOnCalledFunction(v98, 44) & 1) == 0)
                    {
                      goto LABEL_248;
                    }
                  }
                }
                else if (v106 == 27)
                {
                  if ((*(_WORD *)(v98 + 18) & 0x301) != 0)
                    goto LABEL_248;
                }
                else if (((1 << (*(_BYTE *)(v98 + 16) - 33)) & 0x808001D0000010) != 0)
                {
                  goto LABEL_248;
                }
              }
            }
          }
          v117 = v92 + 1;
          while (v117 != v94)
          {
            v118 = *v117++;
            v95 = v118;
            if (v118 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v92 = v117 - 1;
              goto LABEL_137;
            }
          }
          v87 = *v197;
          v86 = v197[1];
        }
LABEL_207:
        if (v86 == v87)
          v119 = v88;
        else
          v119 = v89;
        v120 = *v119;
        if ((_DWORD)v120)
        {
          v121 = 8 * v120;
          v122 = v86 + 8 * v120;
          while (*(_QWORD *)v86 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v86 += 8;
            v121 -= 8;
            if (!v121)
            {
              v86 = v122;
              break;
            }
          }
        }
        v123 = *(_QWORD *)(*(_QWORD *)v86 + 48);
        if (v123)
          v124 = v123 - 24;
        else
          v124 = 0;
        v125 = *(_QWORD *)(v124 + 40);
        v126 = *(_QWORD *)a5;
        v127 = *((_DWORD *)a5 + 4) - 1;
        v128 = ((v125 >> 4) ^ (v125 >> 9)) & v127;
        if (v125 != *(_QWORD *)(*(_QWORD *)a5 + 16 * v128))
        {
          v129 = 1;
          do
          {
            v130 = v128 + v129++;
            v128 = v130 & v127;
          }
          while (v125 != *(_QWORD *)(v126 + 16 * v128));
        }
        v131 = 0;
        v132 = *(_QWORD **)(v126 + 16 * v128 + 8);
        do
        {
          v132 = (_QWORD *)*v132;
          ++v131;
        }
        while (v132);
        if ((_DWORD)v219)
          break;
LABEL_238:
        v147 = v222;
        if ((_DWORD)v222)
        {
          v148 = 0;
LABEL_240:
          v149 = v148;
          while ((sub_1C5F3403C(*((llvm::Instruction **)v221 + v148), *((llvm::Instruction **)v221 + v149), v84, v131, 1, a4) & 1) != 0)
          {
            if (++v149 >= v147)
            {
              if (++v148 != v147)
                goto LABEL_240;
              v150 = v222;
              goto LABEL_246;
            }
          }
          goto LABEL_248;
        }
        v150 = 0;
LABEL_246:
        sub_1C4DFE610((unsigned int *)&v218, v221, (_BYTE *)v221 + 8 * v150);
        v85 = v197 + 8;
        if (v197 + 8 == (uint64_t *)v196)
        {
          v14 = 1;
          goto LABEL_249;
        }
      }
      v133 = (llvm::Instruction **)v218;
      v134 = (llvm::Instruction **)((char *)v218 + 8 * v219);
      while (1)
      {
        v135 = *v133;
        v136 = *((_QWORD *)*v133 + 5);
        v137 = *(_QWORD *)a5;
        v138 = *((_DWORD *)a5 + 4) - 1;
        v139 = ((v136 >> 4) ^ (v136 >> 9)) & v138;
        if (v136 != *(_QWORD *)(*(_QWORD *)a5 + 16 * v139))
        {
          v140 = 1;
          do
          {
            v141 = v139 + v140++;
            v139 = v141 & v138;
          }
          while (v136 != *(_QWORD *)(v137 + 16 * v139));
        }
        v142 = 0;
        v143 = *(_QWORD **)(v137 + 16 * v139 + 8);
        do
        {
          v143 = (_QWORD *)*v143;
          ++v142;
        }
        while (v143);
        v144 = v131 >= v142 ? v142 : v131;
        if ((_DWORD)v222)
          break;
LABEL_237:
        if (++v133 == v134)
          goto LABEL_238;
      }
      v145 = (llvm::Instruction **)v221;
      v146 = 8 * v222;
      while ((sub_1C5F3403C(v135, *v145, v84, v144, 0, a4) & 1) != 0)
      {
        ++v145;
        v146 -= 8;
        if (!v146)
          goto LABEL_237;
      }
LABEL_248:
      v14 = 0;
    }
    else
    {
      v14 = 1;
    }
LABEL_249:
    if (v221 != v223)
      free(v221);
    if (v218 != v220)
      free(v218);
    sub_1C61F7FEC((char **)&v224);
  }
  if (v199 != v198)
    free(v199);
LABEL_256:
  v203 = (uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))&unk_1E813A258;
  sub_1C4EF1108(v204);
LABEL_87:
  v62 = v207[0];
  sub_1C62254EC(v207[0], v208);
  MEMORY[0x1CAA32FB4](v62, 8);
  v63 = v209[0];
  sub_1C62254EC(v209[0], v210);
  MEMORY[0x1CAA32FB4](v63, 8);
  if (v212 != v211)
    free(v212);
  return v14;
}

uint64_t sub_1C5F33B00(uint64_t a1, unsigned int *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t LoopLatch;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::SmallPtrSetImplBase *v17;
  uint64_t LoopPredecessor;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *i;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v45;

  v7 = **(_QWORD **)(a1 + 8);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v7);
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40) - (_QWORD)v9;
  if (v10)
  {
    v11 = LoopLatch;
    v12 = 8 * (v10 >> 3);
    do
    {
      v13 = *v9;
      v14 = sub_1C477672C(v7 + 56, *v9);
      v15 = *(_QWORD *)(v7 + 64);
      if (v15 == *(_QWORD *)(v7 + 56))
        v16 = 76;
      else
        v16 = 72;
      if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)(v7 + v16)))
      {
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a4, v11, v13))
          v17 = a3;
        else
          v17 = (llvm::SmallPtrSetImplBase *)a2;
        sub_1C4774094(v17, v13);
      }
      ++v9;
      v12 -= 8;
    }
    while (v12);
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v7);
  if (!LoopPredecessor)
    goto LABEL_19;
  v19 = *(_QWORD *)(LoopPredecessor + 40);
  if (v19 == LoopPredecessor + 40)
    goto LABEL_19;
  if (v19)
    v20 = v19 - 24;
  else
    v20 = 0;
  if (*(_BYTE *)(v20 + 16) == 30)
  {
    if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_19:
      v21 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    v21 = 0;
    switch(*(_BYTE *)(v20 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_24;
      case 0x1E:
LABEL_67:
        __break(1u);
        goto LABEL_68;
      case 0x1F:
        v22 = (*(_DWORD *)(v20 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_68:
        v22 = (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v22 = *(_DWORD *)(v20 + 80) + 1;
        break;
      default:
        goto LABEL_19;
    }
    if (v22 != 1)
      goto LABEL_19;
  }
  v21 = LoopPredecessor;
LABEL_24:
  v23 = *((_QWORD *)a2 + 1);
  if (v23 == *(_QWORD *)a2)
    v24 = a2 + 5;
  else
    v24 = a2 + 4;
  v25 = *v24;
  if ((_DWORD)v25)
  {
    v26 = 8 * v25;
    for (i = (unint64_t *)*((_QWORD *)a2 + 1); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v26 -= 8;
      if (!v26)
        return 1;
    }
  }
  else
  {
    i = (unint64_t *)*((_QWORD *)a2 + 1);
  }
  v29 = (unint64_t *)(v23 + 8 * v25);
  v28 = 1;
  if (i != v29)
  {
    v30 = *i;
    v45 = v21;
LABEL_35:
    if (v30 != v21)
    {
      v31 = *(_QWORD *)(v30 + 40);
      if (v31 != v30 + 40)
      {
        if (v31)
          v32 = v31 - 24;
        else
          v32 = 0;
        v33 = *(unsigned __int8 *)(v32 + 16);
        v34 = v33 - 29;
        if (v33 == 30)
        {
          if ((*(_DWORD *)(v32 + 20) & 0x7FFFFFF) == 3)
            LODWORD(v20) = 2;
          else
            LODWORD(v20) = 1;
          goto LABEL_44;
        }
        v20 = 2;
        switch(v34)
        {
          case 1:
            goto LABEL_67;
          case 2:
            LODWORD(v20) = (*(_DWORD *)(v32 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v20) = (*(_DWORD *)(v32 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            goto LABEL_44;
          case 7:
            LODWORD(v20) = *(_WORD *)(v32 + 18) & 1;
            break;
          case 8:
            LODWORD(v20) = 1;
            goto LABEL_44;
          case 10:
            LODWORD(v20) = *(_DWORD *)(v32 + 80) + 1;
            break;
          default:
            goto LABEL_54;
        }
        if ((_DWORD)v20)
        {
LABEL_44:
          v35 = 0;
          v36 = 0;
          v37 = v31 - 88;
          v38 = v20;
          do
          {
            v39 = *(unsigned __int8 *)(v31 - 8);
            if (v39 != 30)
              __asm { BR              X9 }
            LoopPredecessor = (uint64_t)sub_1C477672C((uint64_t)a2, *(_QWORD *)(v31 - 56 - 32 * v36));
            v40 = *((_QWORD *)a2 + 1);
            v41 = v40 == *(_QWORD *)a2 ? a2 + 5 : a2 + 4;
            if (LoopPredecessor == v40 + 8 * *v41)
              return 0;
            ++v36;
            v35 += 2;
            v37 += 32;
          }
          while (v38 != v36);
        }
      }
    }
LABEL_54:
    v42 = i + 1;
    while (v42 != v29)
    {
      v43 = *v42++;
      v30 = v43;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v42 - 1;
        v21 = v45;
        goto LABEL_35;
      }
    }
    return 1;
  }
  return v28;
}

uint64_t sub_1C5F33F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C61A4EFC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

double sub_1C5F33F5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v4 + 1;
    v14 = v5 + (v4 << 6);
    if (v5 <= (unint64_t)a2 && v14 > (unint64_t)a2)
    {
      v16 = (uint64_t)a2 - v5;
      sub_1C63AF6D4(a1, v13);
      v5 = *(_QWORD *)a1;
      a2 = (uint64_t *)(*(_QWORD *)a1 + v16);
    }
    else
    {
      sub_1C63AF6D4(a1, v13);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + (v6 << 6);
  v8 = (void *)(v7 + 32);
  *(_QWORD *)v7 = v7 + 32;
  v10 = *a2;
  v9 = a2[1];
  if (v9 == *a2)
  {
    *(_QWORD *)(v7 + 8) = v8;
    v11 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v11)
    {
      memmove(v8, (const void *)a2[1], 8 * v11);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 8) = v9;
    a2[1] = v10;
  }
  *(_QWORD *)(v7 + 16) = a2[2];
  *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
  *(_QWORD *)&result = 4;
  a2[2] = 4;
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t sub_1C5F3403C(llvm::Instruction *a1, llvm::Instruction *a2, uint64_t a3, unsigned int a4, int a5, llvm::DependenceInfo *this)
{
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a1 == a2 || *((_BYTE *)a1 + 16) == 60 && *((_BYTE *)a2 + 16) == 60)
    return 1;
  v9 = 1;
  llvm::DependenceInfo::depends((uint64_t)this, a1, a2, 1, &v20);
  if (!v20)
    return v9;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20) & 1) != 0)
    goto LABEL_7;
  if (a3 < 2)
  {
LABEL_11:
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, a3);
    if (v10 != 2)
    {
      v11 = v10;
      if ((v10 & 1) != 0)
      {
        v14 = v20;
        v15 = (a3 + 1);
        while (v15 <= a4)
        {
          v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v15);
          if (v16 == 1)
            break;
          v15 = (v15 + 1);
          if ((v16 & 4) != 0)
            goto LABEL_7;
        }
      }
      if ((v11 & 4) != 0)
      {
        v17 = v20;
        v18 = (a3 + 1);
        while (v18 <= a4)
        {
          v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v18);
          if (v19 == 4)
            goto LABEL_14;
          v9 = 0;
          v18 = (v18 + 1);
          if ((v19 & 1) != 0)
            goto LABEL_15;
        }
        if (!a5)
        {
LABEL_7:
          v9 = 0;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, v9) & 2) != 0)
    {
      v9 = (v9 + 1);
      if ((_DWORD)a3 == (_DWORD)v9)
        goto LABEL_11;
    }
  }
LABEL_14:
  v9 = 1;
LABEL_15:
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v9;
}

void sub_1C5F341CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  std::string v13;
  void *__p;
  char v15;
  const void *v16[2];
  uint64_t (**v17)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  char v27;
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[260];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  llvm::Loop::getStartLoc(**(llvm::Loop ***)a2, v16);
  if (v16[0])
  {
    v4 = *((_QWORD *)v16[0] - *((unsigned int *)v16[0] + 2));
    if (*(_BYTE *)v4 != 15)
      v4 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    v5 = *((_DWORD *)v16[0] + 1);
    v6 = *((unsigned __int16 *)v16[0] + 1);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  v7 = **(_QWORD **)(**(_QWORD **)a2 + 32);
  v8 = *(_QWORD *)(v7 + 56);
  v18 = 9;
  v19 = 2;
  v20 = v8;
  v21 = v4;
  v22 = v5;
  v23 = v6;
  v24 = "loop-unroll-and-jam";
  v25 = "PartialUnrolled";
  v26 = 15;
  v27 = 0;
  v28 = 0;
  v29 = v31;
  v30 = 0x400000000;
  v31[256] = 0;
  v32 = -1;
  v33 = v7;
  v17 = &off_1E814E500;
  if (v16[0])
    llvm::MetadataTracking::untrack((uint64_t)v16, (unsigned __int8 *)v16[0]);
  v16[0] = "unroll and jammed loop by a factor of ";
  v16[1] = (const void *)38;
  sub_1C53B17B4((uint64_t)&v29, v16);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v13, "UnrollCount", 0xBuLL, **(_DWORD **)(a2 + 8));
  v9 = sub_1C47E3888((uint64_t)&v17, (uint64_t)&v13);
  sub_1C61998EC((uint64_t)a1, v9);
  *a1 = &off_1E814E500;
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v17 = &off_1E814E790;
  v10 = (char *)v29;
  if ((_DWORD)v30)
  {
    v11 = (unint64_t)v30 << 6;
    do
    {
      v12 = (void **)&v10[v11];
      if (v10[v11 - 17] < 0)
        operator delete(*(v12 - 5));
      if (*((char *)v12 - 41) < 0)
        operator delete(*(v12 - 8));
      v11 -= 64;
    }
    while (v11);
    v10 = (char *)v29;
  }
  if (v10 != v31)
    free(v10);
}

uint64_t sub_1C5F343F0(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = a3;
  v9[1] = a4 & 0xFFFFFFFFFFFFFFFBLL | (4 * a2);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

uint64_t llvm::UnrollRuntimeLoopRemainder(llvm *this, llvm::Loop *a2, char a3, int a4, BOOL a5, BOOL a6, llvm::DomTreeUpdater *a7, llvm::LoopInfo *a8, llvm::ScalarEvolution *a9, llvm::DominatorTree *a10, llvm::AssumptionCache *a11, const llvm::TargetTransformInfo *a12, BOOL a13, llvm::Loop **a14)
{
  unsigned int v18;
  _QWORD *v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  uint64_t v23;
  llvm::BasicBlock *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ExitCount;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  llvm::Type **v49;
  unint64_t Constant;
  uint64_t AddExpr;
  uint64_t LoopPredecessor;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  llvm::Instruction *v61;
  const llvm::Twine *v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  llvm::BasicBlock *v65;
  uint64_t ***v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm **v71;
  llvm *v72;
  int v73;
  int v74;
  llvm *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  llvm *v79;
  _QWORD *v80;
  unsigned __int8 **v81;
  unsigned __int8 **v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::BasicBlock **v92;
  llvm::BasicBlock *v93;
  int v94;
  int v95;
  llvm::BasicBlock *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t **v105;
  int v106;
  int v107;
  _QWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::BasicBlock **v114;
  llvm::BasicBlock *v115;
  int v116;
  int v117;
  llvm::BasicBlock *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  llvm::BasicBlock *v124;
  uint64_t ***v125;
  uint64_t ***v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm::BasicBlock **v131;
  llvm::BasicBlock *v132;
  int v133;
  int v134;
  llvm::BasicBlock *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t ***v139;
  unsigned __int8 *v140;
  llvm::BasicBlock *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  llvm **v146;
  llvm *v147;
  int v148;
  int v149;
  llvm *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t ***v154;
  uint64_t v155;
  uint64_t **v156;
  llvm::BasicBlock *v157;
  int v158;
  llvm *v159;
  uint64_t ***v160;
  llvm::Loop *v161;
  _QWORD *LoopLatch;
  unsigned __int8 *v163;
  void *v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  _QWORD v170[94];
  _QWORD *v171;
  uint64_t v172;
  _QWORD v173[7];

  v18 = a2;
  v173[4] = *MEMORY[0x1E0C80C00];
  if (llvm::Loop::isLoopSimplifyForm(this))
  {
    LoopLatch = (_QWORD *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
    v20 = (_QWORD *)LoopLatch[5];
    if (v20 != LoopLatch + 5)
    {
      v21 = v20 ? (uint64_t)(v20 - 3) : 0;
      if (*(unsigned __int8 *)(v21 + 16) - 29 <= 0xA && (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) != 1)
      {
        v158 = a4;
        v22 = (llvm::BasicBlock *)**((_QWORD **)this + 4);
        v24 = *(llvm::BasicBlock **)(v21 - 32);
        v23 = v21 - 32;
        if (v24 == v22)
          v25 = -1;
        else
          v25 = 0;
        v26 = *(_QWORD *)(v23 + 32 * v25);
        v27 = sub_1C477672C((uint64_t)this + 56, v26);
        v28 = *((_QWORD *)this + 8);
        v29 = 72;
        if (v28 == *((_QWORD *)this + 7))
          v29 = 76;
        if (v27 == (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)this + v29)))
        {
          v157 = v22;
          v171 = v173;
          v172 = 0x400000000;
          v31 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
          sub_1C4EAEE28(this, (uint64_t)&v171, v31);
          v161 = this;
          if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(this) && !(_DWORD)v172)
          {
            v156 = (uint64_t **)v26;
            if (!a8)
              goto LABEL_70;
LABEL_51:
            ExitCount = llvm::ScalarEvolution::getExitCount(a8, this, (uint64_t)LoopLatch, 0);
            v41 = *(unsigned __int16 *)(ExitCount + 24);
            v42 = ExitCount;
            v43 = ExitCount;
            while (2)
            {
              switch(*(_WORD *)(ExitCount + 24))
              {
                case 0:
                  v45 = *(_QWORD *)(v43 + 32);
                  goto LABEL_59;
                case 1:
                case 2:
                case 3:
                case 0xD:
                  v45 = v43 + 40;
                  goto LABEL_59;
                case 4:
                  v45 = v43 + 48;
                  goto LABEL_59;
                case 5:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                  v44 = *(uint64_t **)(v43 + 32);
                  goto LABEL_54;
                case 6:
                  v44 = (uint64_t *)(v43 + 40);
LABEL_54:
                  v43 = *v44;
                  continue;
                case 0xE:
                  v45 = *(_QWORD *)(v43 - 8);
LABEL_59:
                  v46 = *(_DWORD *)(*(_QWORD *)v45 + 8) >> 8;
                  v47 = ExitCount;
                  break;
                default:
                  goto LABEL_70;
              }
              break;
            }
            while (2)
            {
              switch(v41)
              {
                case 0:
                  v49 = *(llvm::Type ***)(v47 + 32);
                  goto LABEL_67;
                case 1:
                case 2:
                case 3:
                case 13:
                  v49 = (llvm::Type **)(v47 + 40);
                  goto LABEL_67;
                case 4:
                  v49 = (llvm::Type **)(v47 + 48);
                  goto LABEL_67;
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                  v48 = *(uint64_t **)(v47 + 32);
                  goto LABEL_62;
                case 6:
                  v48 = (uint64_t *)(v47 + 40);
LABEL_62:
                  v47 = *v48;
                  v41 = *(unsigned __int16 *)(*v48 + 24);
                  continue;
                case 14:
                  v49 = *(llvm::Type ***)(v47 - 8);
LABEL_67:
                  Constant = llvm::ScalarEvolution::getConstant(a8, *v49, 1, 0);
                  v168 = v170;
                  v170[0] = v42;
                  v170[1] = Constant;
                  v169 = 0x200000002;
                  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a8, (uint64_t)&v168, 0, 0);
                  if (v168 != v170)
                    free(v168);
                  if (*(_WORD *)(AddExpr + 24) == 15)
                    goto LABEL_70;
                  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v161);
                  if (!LoopPredecessor)
                    goto LABEL_79;
                  v53 = *(_QWORD *)(LoopPredecessor + 40);
                  if (v53 == LoopPredecessor + 40)
                    goto LABEL_79;
                  if (v53)
                    v54 = v53 - 24;
                  else
                    v54 = 0;
                  if (*(_BYTE *)(v54 + 16) != 30)
                  {
                    v55 = 0;
                    switch(*(_BYTE *)(v54 + 16))
                    {
                      case 0x1D:
                      case 0x21:
                      case 0x22:
                      case 0x23:
                      case 0x24:
                      case 0x25:
                      case 0x26:
                        goto LABEL_84;
                      case 0x1E:
                        __break(1u);
                        JUMPOUT(0x1C5F39DB8);
                      case 0x1F:
                        v56 = (*(_DWORD *)(v54 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_82;
                      case 0x20:
                        v56 = (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_82;
                      case 0x27:
                        v56 = *(_DWORD *)(v54 + 80) + 1;
LABEL_82:
                        if (v56 == 1)
                          goto LABEL_83;
                        goto LABEL_79;
                      default:
                        goto LABEL_79;
                    }
                  }
                  if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == 3)
LABEL_79:
                    v55 = 0;
                  else
LABEL_83:
                    v55 = LoopPredecessor;
LABEL_84:
                  v159 = (llvm *)v55;
                  v59 = *(_QWORD **)(v55 + 40);
                  v58 = (_QWORD *)(v55 + 40);
                  v57 = v59;
                  if (v59 == v58)
                  {
                    v61 = 0;
                  }
                  else
                  {
                    if (v57)
                      v60 = (unsigned __int8 *)(v57 - 3);
                    else
                      v60 = 0;
                    if (v60[16] - 29 >= 0xB)
                      v61 = 0;
                    else
                      v61 = (llvm::Instruction *)v60;
                  }
                  sub_1C50D02DC((uint64_t)&v168, (uint64_t ***)a8, *(_QWORD *)(*((_QWORD *)v22 + 7) + 40) + 272, (uint64_t)"loop-unroll", 1);
                  if ((a3 & 1) == 0
                    && (sub_1C5B2BDCC((llvm::ScalarEvolution **)&v168, AddExpr, v161, dword_1ED8377D0, (uint64_t)a11, v61) & 1) != 0|| 31 - __clz(v18) > v46)
                  {
                    sub_1C50D05E0((uint64_t)&v168);
                    goto LABEL_70;
                  }
                  if (v158)
                  {
                    v63 = (_QWORD *)*v58;
                    if ((_QWORD *)*v58 == v58)
                    {
                      v65 = 0;
                    }
                    else
                    {
                      if (v63)
                        v64 = (unsigned __int8 *)(v63 - 3);
                      else
                        v64 = 0;
                      if (v64[16] - 29 >= 0xB)
                        v65 = 0;
                      else
                        v65 = (llvm::BasicBlock *)v64;
                    }
                    LOWORD(v167) = 257;
                    v66 = (uint64_t ***)sub_1C5EBD70C(v159, v65, 0, (uint64_t)a9, a7, 0, (llvm::Twine *)&v164, 0);
                    if ((*((_BYTE *)v159 + 23) & 0x10) != 0)
                    {
                      v67 = ***(_QWORD ***)v159;
                      v68 = *(_QWORD *)(v67 + 152);
                      v69 = *(unsigned int *)(v67 + 168);
                      if ((_DWORD)v69)
                      {
                        LODWORD(v70) = (v69 - 1) & ((v159 >> 4) ^ (v159 >> 9));
                        v71 = (llvm **)(v68 + 16 * v70);
                        v72 = *v71;
                        if (*v71 != v159)
                        {
                          v73 = 1;
                          do
                          {
                            if (v72 == (llvm *)-4096)
                              goto LABEL_114;
                            v74 = v70 + v73++;
                            v70 = v74 & (v69 - 1);
                            v72 = *(llvm **)(v68 + 16 * v70);
                          }
                          while (v72 != v159);
                          v71 = (llvm **)(v68 + 16 * v70);
                        }
                      }
                      else
                      {
LABEL_114:
                        v71 = (llvm **)(v68 + 16 * v69);
                      }
                      v75 = v71[1];
                      v78 = *(_QWORD *)v75;
                      v76 = (char *)v75 + 16;
                      v77 = v78;
                    }
                    else
                    {
                      v77 = 0;
                      v76 = &byte_1C871356D;
                    }
                    LOWORD(v167) = 773;
                    v164 = v76;
                    v165 = v77;
                    v166 = ".new";
                    llvm::Value::setName(v66, (uint64_t)&v164);
                    v164 = LoopLatch;
                    v79 = (llvm *)sub_1C5EBE3AC(v156, (uint64_t *)&v164, 1, ".unr-lcssa", 0, (uint64_t)a9, (uint64_t)a7, 0, (char)a12);
                    v80 = (_QWORD *)*((_QWORD *)v79 + 5);
                    if (v80 == (_QWORD *)((char *)v79 + 40))
                    {
                      v82 = 0;
                    }
                    else
                    {
                      if (v80)
                        v81 = (unsigned __int8 **)(v80 - 3);
                      else
                        v81 = 0;
                      if (*((unsigned __int8 *)v81 + 16) - 29 >= 0xB)
                        v82 = 0;
                      else
                        v82 = v81;
                    }
                    v83 = *((_QWORD *)v157 + 5);
                    if (v83)
                      v84 = v83 - 24;
                    else
                      v84 = 0;
                    if (*(unsigned __int8 *)(v84 + 16) - 29 >= 0xB)
                      v84 = 0;
                    v85 = *(unsigned __int8 **)(v84 + 48);
                    v163 = v85;
                    if (v85)
                      llvm::MetadataTracking::track((uint64_t)&v163, v85, 2);
                    v86 = v82 + 6;
                    if (&v163 == v82 + 6)
                    {
                      if (v163)
                        llvm::MetadataTracking::untrack((uint64_t)&v163, v163);
                    }
                    else
                    {
                      if (*v86)
                        llvm::MetadataTracking::untrack((uint64_t)(v82 + 6), *v86);
                      v87 = v163;
                      *v86 = v163;
                      if (v87)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v163, v87, (uint64_t)(v82 + 6));
                        v163 = 0;
                      }
                    }
                    LOWORD(v167) = 257;
                    v154 = (uint64_t ***)sub_1C5EBD70C(v79, (llvm::BasicBlock *)v82, 0, (uint64_t)a9, a7, 0, (llvm::Twine *)&v164, 0);
                    if ((*((_BYTE *)v157 + 23) & 0x10) != 0)
                    {
                      v88 = ***(_QWORD ***)v157;
                      v89 = *(_QWORD *)(v88 + 152);
                      v90 = *(unsigned int *)(v88 + 168);
                      if ((_DWORD)v90)
                      {
                        LODWORD(v91) = (v90 - 1) & ((v157 >> 4) ^ (v157 >> 9));
                        v92 = (llvm::BasicBlock **)(v89 + 16 * v91);
                        v93 = *v92;
                        if (*v92 != v157)
                        {
                          v94 = 1;
                          do
                          {
                            if (v93 == (llvm::BasicBlock *)-4096)
                              goto LABEL_143;
                            v95 = v91 + v94++;
                            v91 = v95 & (v90 - 1);
                            v93 = *(llvm::BasicBlock **)(v89 + 16 * v91);
                          }
                          while (v93 != v157);
                          v92 = (llvm::BasicBlock **)(v89 + 16 * v91);
                        }
                      }
                      else
                      {
LABEL_143:
                        v92 = (llvm::BasicBlock **)(v89 + 16 * v90);
                      }
                      v96 = v92[1];
                      v99 = *(_QWORD *)v96;
                      v97 = (char *)v96 + 16;
                      v98 = v99;
                    }
                    else
                    {
                      v98 = 0;
                      v97 = &byte_1C871356D;
                    }
                    LOWORD(v167) = 773;
                    v164 = v97;
                    v165 = v98;
                    v166 = ".epil.preheader";
                    llvm::Value::setName(v154, (uint64_t)&v164);
                    v100 = *(_QWORD **)v161;
                    if (*(_QWORD *)v161)
                    {
                      v101 = *((_DWORD *)a7 + 4);
                      if (v101)
                      {
                        v102 = *(_QWORD *)a7;
                        v103 = v101 - 1;
                        v104 = (v101 - 1) & ((v156 >> 4) ^ (v156 >> 9));
                        v105 = *(uint64_t ***)(*(_QWORD *)a7 + 16 * v104);
                        if (v156 == v105)
                        {
LABEL_151:
                          v108 = *(_QWORD **)(v102 + 16 * v104 + 8);
                          goto LABEL_153;
                        }
                        v106 = 1;
                        while (v105 != (uint64_t **)-4096)
                        {
                          v107 = v104 + v106++;
                          v104 = v107 & v103;
                          v105 = *(uint64_t ***)(v102 + 16 * v104);
                          if (v156 == v105)
                            goto LABEL_151;
                        }
                      }
                      v108 = 0;
LABEL_153:
                      if (v108 != v100)
                      {
                        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock((int32x2_t *)a7, (uint64_t)v79);
                        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v100, (uint64_t)v79, (uint64_t)a7);
                        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock((int32x2_t *)a7, (uint64_t)v154);
                        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v100, (uint64_t)v154, (uint64_t)a7);
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v167) = 257;
                    v155 = llvm::SplitEdge(v159, v22, a9, a7, 0, (llvm::MemorySSAUpdater *)&v164, v62);
                    v109 = v22 >> 4;
                    if ((*((_BYTE *)v22 + 23) & 0x10) != 0)
                    {
                      v110 = ***(_QWORD ***)v22;
                      v111 = *(_QWORD *)(v110 + 152);
                      v112 = *(unsigned int *)(v110 + 168);
                      if ((_DWORD)v112)
                      {
                        LODWORD(v113) = (v112 - 1) & (v109 ^ (v22 >> 9));
                        v114 = (llvm::BasicBlock **)(v111 + 16 * v113);
                        v115 = *v114;
                        if (*v114 != v22)
                        {
                          v116 = 1;
                          do
                          {
                            if (v115 == (llvm::BasicBlock *)-4096)
                              goto LABEL_165;
                            v117 = v113 + v116++;
                            v113 = v117 & (v112 - 1);
                            v115 = *(llvm::BasicBlock **)(v111 + 16 * v113);
                          }
                          while (v115 != v22);
                          v114 = (llvm::BasicBlock **)(v111 + 16 * v113);
                        }
                      }
                      else
                      {
LABEL_165:
                        v114 = (llvm::BasicBlock **)(v111 + 16 * v112);
                      }
                      v118 = v114[1];
                      v121 = *(_QWORD *)v118;
                      v119 = (char *)v118 + 16;
                      v120 = v121;
                    }
                    else
                    {
                      v120 = 0;
                      v119 = &byte_1C871356D;
                    }
                    LOWORD(v167) = 773;
                    v164 = v119;
                    v165 = v120;
                    v166 = ".prol.preheader";
                    llvm::Value::setName((uint64_t ***)v155, (uint64_t)&v164);
                    v122 = *(_QWORD *)(v155 + 40);
                    if (v122 == v155 + 40)
                    {
                      v124 = 0;
                    }
                    else
                    {
                      if (v122)
                        v123 = (unsigned __int8 *)(v122 - 24);
                      else
                        v123 = 0;
                      if (v123[16] - 29 >= 0xB)
                        v124 = 0;
                      else
                        v124 = (llvm::BasicBlock *)v123;
                    }
                    LOWORD(v167) = 257;
                    v125 = (uint64_t ***)sub_1C5EBD70C((llvm *)v155, v124, 0, (uint64_t)a9, a7, 0, (llvm::Twine *)&v164, 0);
                    v126 = v125;
                    if ((*((_BYTE *)v157 + 23) & 0x10) != 0)
                    {
                      v127 = ***(_QWORD ***)v157;
                      v128 = *(_QWORD *)(v127 + 152);
                      v129 = *(unsigned int *)(v127 + 168);
                      if ((_DWORD)v129)
                      {
                        LODWORD(v130) = (v129 - 1) & (v109 ^ (v157 >> 9));
                        v131 = (llvm::BasicBlock **)(v128 + 16 * v130);
                        v132 = *v131;
                        if (*v131 != v157)
                        {
                          v133 = 1;
                          do
                          {
                            if (v132 == (llvm::BasicBlock *)-4096)
                              goto LABEL_182;
                            v134 = v130 + v133++;
                            v130 = v134 & (v129 - 1);
                            v132 = *(llvm::BasicBlock **)(v128 + 16 * v130);
                          }
                          while (v132 != v157);
                          v131 = (llvm::BasicBlock **)(v128 + 16 * v130);
                        }
                      }
                      else
                      {
LABEL_182:
                        v131 = (llvm::BasicBlock **)(v128 + 16 * v129);
                      }
                      v135 = v131[1];
                      v138 = *(_QWORD *)v135;
                      v136 = (char *)v135 + 16;
                      v137 = v138;
                    }
                    else
                    {
                      v137 = 0;
                      v136 = &byte_1C871356D;
                    }
                    LOWORD(v167) = 773;
                    v164 = v136;
                    v165 = v137;
                    v166 = ".prol.loopexit";
                    llvm::Value::setName(v125, (uint64_t)&v164);
                    v139 = (uint64_t ***)v126[5];
                    if (v139 == v126 + 5)
                    {
                      v141 = 0;
                    }
                    else
                    {
                      if (v139)
                        v140 = (unsigned __int8 *)(v139 - 3);
                      else
                        v140 = 0;
                      if (v140[16] - 29 >= 0xB)
                        v141 = 0;
                      else
                        v141 = (llvm::BasicBlock *)v140;
                    }
                    LOWORD(v167) = 257;
                    v160 = (uint64_t ***)sub_1C5EBD70C((llvm *)v126, v141, 0, (uint64_t)a9, a7, 0, (llvm::Twine *)&v164, 0);
                    if ((*((_BYTE *)v159 + 23) & 0x10) != 0)
                    {
                      v142 = ***(_QWORD ***)v159;
                      v143 = *(_QWORD *)(v142 + 152);
                      v144 = *(unsigned int *)(v142 + 168);
                      if ((_DWORD)v144)
                      {
                        LODWORD(v145) = (v144 - 1) & ((v159 >> 4) ^ (v159 >> 9));
                        v146 = (llvm **)(v143 + 16 * v145);
                        v147 = *v146;
                        if (*v146 != v159)
                        {
                          v148 = 1;
                          do
                          {
                            if (v147 == (llvm *)-4096)
                              goto LABEL_199;
                            v149 = v145 + v148++;
                            v145 = v149 & (v144 - 1);
                            v147 = *(llvm **)(v143 + 16 * v145);
                          }
                          while (v147 != v159);
                          v146 = (llvm **)(v143 + 16 * v145);
                        }
                      }
                      else
                      {
LABEL_199:
                        v146 = (llvm **)(v143 + 16 * v144);
                      }
                      v150 = v146[1];
                      v153 = *(_QWORD *)v150;
                      v151 = (char *)v150 + 16;
                      v152 = v153;
                    }
                    else
                    {
                      v152 = 0;
                      v151 = &byte_1C871356D;
                    }
                    LOWORD(v167) = 773;
                    v164 = v151;
                    v165 = v152;
                    v166 = ".new";
                    llvm::Value::setName(v160, (uint64_t)&v164);
                  }
                  __asm { BR              X11 }
                  return result;
                default:
                  goto LABEL_70;
              }
            }
          }
          if (!(_BYTE)a12)
            goto LABEL_70;
          v156 = (uint64_t **)v26;
          if (word_1ED827788)
          {
            v32 = byte_1ED827800 != 0;
            goto LABEL_49;
          }
          v168 = v170;
          v169 = 0x400000000;
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v168);
          if (v169 <= 2)
          {
            if (!(_DWORD)v172)
            {
LABEL_26:
              v32 = 1;
              goto LABEL_47;
            }
            if ((_DWORD)v172 == 1)
            {
              if (byte_1ED8278C0)
                goto LABEL_26;
              v33 = *(_QWORD *)(*v171 + 40);
              if (v33 != *v171 + 40)
              {
                v32 = 0;
                v34 = v33 - 24;
                if (!v33)
                  v34 = 0;
                v35 = *(unsigned __int8 *)(v34 + 16);
                if (v35 != 29)
                  v34 = 0;
                if (v33 && v35 == 29)
                {
                  v36 = *(_QWORD *)(*v171 + 48);
                  if (v36)
                    v37 = v36 - 24;
                  else
                    v37 = 0;
                  v32 = 0;
                  if (v34 != v37 && *(_QWORD *)(*(_QWORD *)(v34 + 40) + 48) != v34 + 24)
                  {
                    v38 = *(_QWORD *)(v34 + 24);
                    if (v38)
                    {
                      if (*(_BYTE *)(v38 - 8) == 84)
                      {
                        v39 = *(_QWORD *)(v38 - 56);
                        if (v39)
                        {
                          if (!*(_BYTE *)(v39 + 16)
                            && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v38 + 48)
                            && *(_DWORD *)(v39 + 36) == 119)
                          {
                            v32 = 1;
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_47;
              }
            }
          }
          v32 = 0;
LABEL_47:
          if (v168 != v170)
            free(v168);
LABEL_49:
          if (!a8 || !v32)
          {
LABEL_70:
            if (v171 != v173)
              free(v171);
            return 0;
          }
          goto LABEL_51;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C5F39E98()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Allow runtime unrolling for loops with multiple exits, when epilog is generated";
  v1.n128_u64[1] = 79;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827780, "unroll-runtime-multi-exit", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827780, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume the non latch exit block to be predictable";
  v1.n128_u64[1] = 49;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827840, "unroll-runtime-other-exit-predictable", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827840, &dword_1C475E000);
}

uint64_t llvm::formDedicatedExitBlocks(uint64_t this, llvm::Loop *a2, llvm::DominatorTree *a3, llvm::LoopInfo *a4, llvm::MemorySSAUpdater *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v39;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[32];
  uint64_t *v52;
  uint64_t v53;
  _QWORD v54[6];

  v43 = (char)a5;
  v54[4] = *MEMORY[0x1E0C80C00];
  v52 = v54;
  v53 = 0x400000000;
  v47 = v51;
  v48 = v51;
  v49 = 4;
  v50 = 0;
  v5 = *(_QWORD *)(this + 32);
  v39 = *(_QWORD *)(this + 40);
  if (v39 == v5)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v6 = this;
    v7 = 0;
    v8 = this + 56;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 40);
      v44 = v5;
      if (v9 != *(_QWORD *)v5 + 40)
      {
        if (v9)
          v10 = v9 - 24;
        else
          v10 = 0;
        v11 = *(unsigned __int8 *)(v10 + 16);
        v12 = v11 - 29;
        if (v11 != 30)
        {
          v13 = 2;
          switch(v12)
          {
            case 1:
              __break(1u);
              return this;
            case 2:
              v13 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_65;
            case 3:
            case 9:
              v13 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_65;
            case 4:
              goto LABEL_11;
            case 7:
              v13 = *(_WORD *)(v10 + 18) & 1;
              goto LABEL_65;
            case 8:
              v13 = 1;
              goto LABEL_11;
            case 10:
              v13 = *(_DWORD *)(v10 + 80) + 1;
LABEL_65:
              if (!v13)
                goto LABEL_62;
              goto LABEL_11;
            default:
              goto LABEL_62;
          }
        }
        if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
          v13 = 2;
        else
          v13 = 1;
LABEL_11:
        v14 = 0;
        v15 = v13;
        do
        {
          v16 = *(unsigned __int8 *)(v10 + 16);
          if (v16 != 30)
            __asm { BR              X9 }
          v17 = *(_QWORD *)(v10 - 32 - 32 * v14);
          this = (uint64_t)sub_1C477672C(v8, v17);
          v18 = *(_QWORD *)(v6 + 64);
          if (v18 == *(_QWORD *)(v6 + 56))
            v19 = 76;
          else
            v19 = 72;
          if (this == v18 + 8 * *(unsigned int *)(v6 + v19))
          {
            this = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v47, v17);
            if (v20)
            {
              v21 = v7;
              v22 = *(_QWORD *)(v17 + 8);
              if (v22)
              {
                while (1)
                {
                  v23 = *(_QWORD *)(v22 + 24);
                  v24 = *(unsigned __int8 *)(v23 + 16);
                  v25 = v23 && v24 >= 0x1C;
                  if (v25 && v24 - 29 <= 0xA)
                    break;
                  v22 = *(_QWORD *)(v22 + 8);
                  if (!v22)
                    goto LABEL_28;
                }
                v45 = v21;
                v46 = 1;
LABEL_29:
                v29 = *(_QWORD *)(v23 + 40);
                this = (uint64_t)sub_1C477672C(v8, v29);
                v30 = *(_QWORD *)(v6 + 64);
                v31 = 76;
                if (v30 != *(_QWORD *)(v6 + 56))
                  v31 = 72;
                if (this == v30 + 8 * *(unsigned int *)(v6 + v31))
                {
                  v46 = 0;
                  goto LABEL_43;
                }
                v32 = *(_QWORD *)(v29 + 40);
                if (v32)
                  v33 = v32 - 24;
                else
                  v33 = 0;
                if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
                  v33 = 0;
                v34 = *(unsigned __int8 *)(v33 + 16);
                if (v34 == 32 || v34 == 39)
                {
                  v27 = 0;
                  v28 = v45;
                }
                else
                {
                  v35 = v53;
                  if (v53 >= (unint64_t)HIDWORD(v53))
                  {
                    this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 8);
                    v35 = v53;
                  }
                  v52[v35] = v29;
                  LODWORD(v53) = v53 + 1;
LABEL_43:
                  while (1)
                  {
                    v22 = *(_QWORD *)(v22 + 8);
                    if (!v22)
                      break;
                    v23 = *(_QWORD *)(v22 + 24);
                    v36 = *(unsigned __int8 *)(v23 + 16);
                    if (v23)
                      v37 = v36 >= 0x1C;
                    else
                      v37 = 0;
                    if (v37 && v36 - 29 < 0xB)
                      goto LABEL_29;
                  }
                  if ((v46 & 1) != 0)
                  {
                    v27 = 0;
                  }
                  else
                  {
                    this = sub_1C5EBE3AC((uint64_t **)v17, v52, v53, ".loopexit", 0, (uint64_t)a2, (uint64_t)a3, a4, v43);
                    v27 = 1;
                  }
                  v28 = v45;
                }
              }
              else
              {
LABEL_28:
                v27 = 0;
                v28 = v21;
              }
              LODWORD(v53) = 0;
              v7 = v28 | v27;
            }
          }
          ++v14;
        }
        while (v14 != v15);
      }
LABEL_62:
      v5 = v44 + 8;
    }
    while (v44 + 8 != v39);
    if (v48 != v47)
      free(v48);
  }
  if (v52 != v54)
    free(v52);
  return v7 & 1;
}

void llvm::addStringMetadataToLoop(uint64_t *****this, llvm::Loop *a2, const char *a3)
{
  unsigned int v3;
  uint64_t LoopID;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  const llvm::APInt *v24;
  uint64_t v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  unint64_t v28;
  llvm::Value *v29;
  llvm::ValueHandleBase *v30;
  uint64_t Impl;
  unsigned int v32;
  llvm::MDNode *v33;
  unint64_t v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[32];
  _QWORD v39[3];

  v3 = a3;
  v39[2] = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v37 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v36, 1uLL, 0);
  LoopID = llvm::Loop::getLoopID((llvm::Loop *)this);
  if (LoopID)
  {
    v8 = (unsigned int *)(LoopID + 8);
    v7 = *(unsigned int *)(LoopID + 8);
    if (v7 >= 2)
    {
      v9 = v7 - 1;
      v10 = LoopID + 8;
      while (1)
      {
        v11 = *(_QWORD *)(v10 - 8 * *v8);
        if (*(_DWORD *)(v11 + 8) != 2)
          break;
        v12 = *(_QWORD *)(v11 - 16);
        if (*(_BYTE *)v12)
          break;
        v14 = *(size_t **)(v12 + 8);
        v17 = *v14;
        v16 = v14 + 3;
        v15 = v17;
        if (a2)
        {
          if (v15 != strlen((const char *)a2) || v15 && memcmp(v16, a2, v15))
            break;
        }
        else if (v15)
        {
          break;
        }
        v18 = *(_QWORD *)(v11 - 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 128);
          if (v19)
          {
            v20 = *(_DWORD *)(v19 + 32);
            v21 = v20 > 0x40 ? **(_QWORD **)(v19 + 24) : (uint64_t)(*(_QWORD *)(v19 + 24) << -(char)v20) >> -(char)v20;
            if (v21 == v3)
              goto LABEL_36;
          }
        }
LABEL_9:
        v10 += 8;
        if (!--v9)
          goto LABEL_24;
      }
      v13 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
        v13 = v37;
      }
      *((_QWORD *)v36 + v13) = v11;
      LODWORD(v37) = v37 + 1;
      goto LABEL_9;
    }
  }
LABEL_24:
  if (a2)
    v22 = strlen((const char *)a2);
  else
    v22 = 0;
  v23 = ***this[4];
  v39[0] = llvm::MDString::get(v23, (unsigned __int8 *)a2, v22);
  v25 = v3;
  v26 = *(llvm::ConstantInt **)(*v23 + 1960);
  v27 = *(_DWORD *)(*v23 + 1968);
  v35 = v27 >> 8;
  if (v27 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, v25, 0);
  }
  else
  {
    if (v27 <= 0xFF)
      v28 = 0;
    else
      v28 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
    v34 = v28 & v25;
  }
  v30 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v34, v24);
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  v39[1] = llvm::ValueAsMetadata::get(v30, v29);
  Impl = llvm::MDTuple::getImpl(v23, v39, 2, 0, 1);
  v32 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
    v32 = v37;
  }
  *((_QWORD *)v36 + v32) = Impl;
  LODWORD(v37) = v37 + 1;
  v33 = (llvm::MDNode *)llvm::MDTuple::getImpl(***this[4], v36, v37, 0, 1);
  llvm::MDNode::replaceOperandWith(v33, 0, v33);
  llvm::Loop::setLoopID((llvm::Loop *)this, v33);
LABEL_36:
  if (v36 != v38)
    free(v36);
}

unsigned __int8 *llvm::getOptionalElementCountLoopAttribute(llvm *this, const llvm::Loop *a2)
{
  uint64_t LoopID;
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t OptionalIntLoopAttribute;
  BOOL v11;
  uint64_t v12;

  LoopID = llvm::Loop::getLoopID(this);
  result = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.vectorize.width", 0x19uLL);
  if (result)
  {
    v5 = *((unsigned int *)result + 2);
    if ((_DWORD)v5 != 1 && (v6 = *(_QWORD *)&result[-8 * v5 + 8]) != 0 && (v7 = *(_QWORD *)(v6 + 128)) != 0)
    {
      v8 = *(_DWORD *)(v7 + 32);
      if (v8 > 0x40)
        LODWORD(v9) = **(_DWORD **)(v7 + 24);
      else
        v9 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v8) >> -(char)v8;
      OptionalIntLoopAttribute = llvm::getOptionalIntLoopAttribute(this, "llvm.loop.vectorize.scalable.enable", 0x23uLL);
      if ((_DWORD)OptionalIntLoopAttribute)
        v11 = (OptionalIntLoopAttribute & 0xFF00000000) == 0;
      else
        v11 = 1;
      if (v11)
        v12 = 0;
      else
        v12 = 0x100000000;
      return (unsigned __int8 *)(v12 & 0xFFFFFFFF00000000 | v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::MDNode *llvm::makeFollowupLoopID(unsigned int *a1, uint64_t a2, uint64_t a3, char *__s, int a5)
{
  int v5;
  llvm::MDNode *Impl;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  char v23;
  uint64_t v24;
  unsigned __int8 *OptionMDForLoopID;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v35;
  uint64_t v36;
  _QWORD v37[9];

  v5 = a5;
  Impl = (llvm::MDNode *)a1;
  v37[8] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return Impl;
  if (!__s)
  {
    v35 = v37;
    v37[0] = 0;
    v36 = 0x800000001;
    goto LABEL_7;
  }
  v10 = *__s;
  v35 = v37;
  v37[0] = 0;
  v36 = 0x800000001;
  if (v10)
  {
LABEL_7:
    v12 = a1[2];
    if (&a1[-2 * v12 + 2] == a1)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 8 - 8 * v12;
      v15 = 1;
      do
      {
        if (__s
          && ((v16 = *(_QWORD *)((char *)Impl + v14), v17 = *(unsigned int *)(v16 + 8), !(_DWORD)v17)
           || (v18 = *(_QWORD *)(v16 - 8 * v17), *(_BYTE *)v18)
           || (v19 = *(size_t **)(v18 + 8), v21 = *v19, v20 = v19 + 3, v22 = strlen(__s), v21 < v22)
           || v22 && memcmp(v20, __s, v22)))
        {
          if (v15 >= HIDWORD(v36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v15 + 1, 8);
            v15 = v36;
          }
          *((_QWORD *)v35 + v15) = v16;
          v15 = v36 + 1;
          LODWORD(v36) = v36 + 1;
        }
        else
        {
          v13 = 1;
        }
        v14 += 8;
      }
      while (v14);
    }
    v11 = v13 & 1;
    v5 = a5;
    goto LABEL_23;
  }
  v11 = a1[2] > 1;
LABEL_23:
  v23 = 0;
  if (a3)
  {
    v24 = a2 + 16 * a3;
    do
    {
      OptionMDForLoopID = llvm::findOptionMDForLoopID((uint64_t)Impl, *(void **)a2, *(_QWORD *)(a2 + 8));
      if (OptionMDForLoopID)
      {
        v26 = OptionMDForLoopID;
        v27 = *((unsigned int *)OptionMDForLoopID + 2);
        if (&OptionMDForLoopID[-8 * v27 + 8] == OptionMDForLoopID)
        {
          v23 = 1;
        }
        else
        {
          v28 = v36;
          v29 = 8 - 8 * v27;
          do
          {
            v30 = *(_QWORD *)&v26[v29];
            if (v28 >= HIDWORD(v36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v28 + 1, 8);
              v28 = v36;
            }
            *((_QWORD *)v35 + v28) = v30;
            v28 = v36 + 1;
            LODWORD(v36) = v36 + 1;
            v29 += 8;
          }
          while (v29);
          v23 = 1;
          v11 = 1;
        }
      }
      a2 += 16;
    }
    while (a2 != v24);
  }
  if ((v5 & 1) != 0 || (v23 & 1) != 0)
  {
    if (((v5 | v11) & 1) != 0)
    {
      if ((_DWORD)v36 == 1)
      {
        Impl = 0;
      }
      else
      {
        v31 = *((_QWORD *)Impl + 2);
        v32 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (uint64_t *)*v32;
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v32, v35, v36, 0, 1);
        llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
      }
    }
  }
  else
  {
    Impl = 0;
  }
  if (v35 != v37)
    free(v35);
  return Impl;
}

BOOL llvm::hasDisableLICMTransformsHint(llvm *this, const llvm::Loop *a2)
{
  unsigned int OptionalBoolLoopAttribute;

  OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.licm.disable", 0x11uLL);
  if (OptionalBoolLoopAttribute <= 0x100)
    LOBYTE(OptionalBoolLoopAttribute) = 0;
  return OptionalBoolLoopAttribute != 0;
}

uint64_t llvm::hasUnrollTransformation(llvm *this, const llvm::Loop *a2)
{
  unsigned int OptionalBoolLoopAttribute;
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.unroll.disable", 0x18uLL);
  if (OptionalBoolLoopAttribute <= 0x100)
    LOBYTE(OptionalBoolLoopAttribute) = 0;
  if ((_BYTE)OptionalBoolLoopAttribute)
    return 6;
  LoopID = llvm::Loop::getLoopID(this);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.unroll.count", 0x16uLL);
  if (OptionMDForLoopID
    && (v10 = *((unsigned int *)OptionMDForLoopID + 2), (_DWORD)v10 != 1)
    && (v11 = *(_QWORD *)&OptionMDForLoopID[-8 * v10 + 8]) != 0
    && (v12 = *(_QWORD *)(v11 + 128)) != 0)
  {
    v13 = *(_DWORD *)(v12 + 32);
    if (v13 > 0x40)
      LODWORD(v12) = **(_DWORD **)(v12 + 24);
    else
      v12 = (uint64_t)(*(_QWORD *)(v12 + 24) << -(char)v13) >> -(char)v13;
    if ((_DWORD)v12 == 1)
      return 6;
    else
      return 5;
  }
  else
  {
    v6 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.unroll.enable", 0x17uLL);
    if (v6 <= 0x100)
      LOBYTE(v6) = 0;
    if ((_BYTE)v6)
      return 5;
    v7 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.unroll.full", 0x15uLL);
    if (v7 <= 0x100)
      LOBYTE(v7) = 0;
    if ((_BYTE)v7)
    {
      return 5;
    }
    else
    {
      v8 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.disable_nonforced", 0x1BuLL);
      if (v8 <= 0x100)
        LOBYTE(v8) = 0;
      return 2 * (v8 != 0);
    }
  }
}

uint64_t llvm::hasUnrollAndJamTransformation(llvm *this, const llvm::Loop *a2)
{
  unsigned int OptionalBoolLoopAttribute;
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.unroll_and_jam.disable", 0x20uLL);
  if (OptionalBoolLoopAttribute <= 0x100)
    LOBYTE(OptionalBoolLoopAttribute) = 0;
  if ((_BYTE)OptionalBoolLoopAttribute)
    return 6;
  LoopID = llvm::Loop::getLoopID(this);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.unroll_and_jam.count", 0x1EuLL);
  if (OptionMDForLoopID
    && (v9 = *((unsigned int *)OptionMDForLoopID + 2), (_DWORD)v9 != 1)
    && (v10 = *(_QWORD *)&OptionMDForLoopID[-8 * v9 + 8]) != 0
    && (v11 = *(_QWORD *)(v10 + 128)) != 0)
  {
    v12 = *(_DWORD *)(v11 + 32);
    if (v12 > 0x40)
      LODWORD(v11) = **(_DWORD **)(v11 + 24);
    else
      v11 = (uint64_t)(*(_QWORD *)(v11 + 24) << -(char)v12) >> -(char)v12;
    if ((_DWORD)v11 == 1)
      return 6;
    else
      return 5;
  }
  else
  {
    v6 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.unroll_and_jam.enable", 0x1FuLL);
    if (v6 <= 0x100)
      LOBYTE(v6) = 0;
    if ((_BYTE)v6)
    {
      return 5;
    }
    else
    {
      v7 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.disable_nonforced", 0x1BuLL);
      if (v7 <= 0x100)
        LOBYTE(v7) = 0;
      return 2 * (v7 != 0);
    }
  }
}

uint64_t llvm::hasVectorizeTransformation(llvm *this, const llvm::Loop *a2)
{
  unsigned __int16 OptionalBoolLoopAttribute;
  const llvm::Loop *v4;
  int v5;
  unsigned __int16 v7;
  unsigned __int8 *OptionalElementCountLoopAttribute;
  char v9;
  char v10;
  uint64_t LoopID;
  unsigned __int8 *OptionMDForLoopID;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  _BOOL4 v19;
  unsigned int v21;
  BOOL v22;
  char v23;
  uint64_t result;
  int v26;
  BOOL v27;
  int v28;
  char v29;
  char v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;

  OptionalBoolLoopAttribute = llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.vectorize.enable", 0x1AuLL);
  v5 = OptionalBoolLoopAttribute;
  if (OptionalBoolLoopAttribute >= 0x100u && OptionalBoolLoopAttribute == 0)
    return 6;
  v7 = OptionalBoolLoopAttribute;
  OptionalElementCountLoopAttribute = llvm::getOptionalElementCountLoopAttribute(this, v4);
  v10 = v9;
  LoopID = llvm::Loop::getLoopID(this);
  OptionMDForLoopID = llvm::findOptionMDForLoopID(LoopID, "llvm.loop.interleave.count", 0x1AuLL);
  if (!OptionMDForLoopID || (v33 = *((unsigned int *)OptionMDForLoopID + 2), (_DWORD)v33 == 1))
  {
    v13 = 0;
    LODWORD(v14) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v14 = *(_QWORD *)&OptionMDForLoopID[-8 * v33 + 8];
  if (!v14 || (v14 = *(_QWORD *)(v14 + 128)) == 0)
  {
    v13 = 0;
    goto LABEL_7;
  }
  v34 = *(_DWORD *)(v14 + 32);
  if (v34 > 0x40)
    v14 = **(_QWORD **)(v14 + 24);
  else
    v14 = (uint64_t)(*(_QWORD *)(v14 + 24) << -(char)v34) >> -(char)v34;
  v15 = v14 & 0xFFFFFF00;
  LODWORD(v14) = v14;
  v13 = 1;
LABEL_8:
  v16 = v7;
  v17 = v15 | v14;
  v19 = v16 > 0xFF && v5 == 1;
  if (v19 && v10 != 0)
  {
    v27 = (unint64_t)OptionalElementCountLoopAttribute >> 32 != 1
       && (_DWORD)OptionalElementCountLoopAttribute == 1;
    v28 = v27 ? v13 : 0;
    if (v28 == 1 && v17 == 1)
      return 6;
  }
  v21 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.isvectorized", 0x16uLL);
  if (v21 <= 0x100)
    LOBYTE(v21) = 0;
  v22 = v21 == 0;
  if ((_BYTE)v21)
    v23 = 1;
  else
    v23 = v19;
  if (v22)
    result = 5;
  else
    result = 2;
  if ((v23 & 1) == 0)
  {
    if (!v10)
    {
      if (v17 > 1)
        v29 = v13;
      else
        v29 = 0;
      if ((v29 & 1) != 0)
        return 1;
      goto LABEL_62;
    }
    if (((unint64_t)OptionalElementCountLoopAttribute & 0xFFFFFFFF00000000) != 0x100000000
      && OptionalElementCountLoopAttribute == 1)
    {
      v26 = v13;
    }
    else
    {
      v26 = 0;
    }
    if (v26 == 1 && v17 == 1)
      return 2;
    if (v17 > 1)
      v30 = v13;
    else
      v30 = 0;
    if ((_DWORD)OptionalElementCountLoopAttribute)
      v31 = ((unint64_t)OptionalElementCountLoopAttribute & 0xFFFFFFFF00000000) == 0x100000000;
    else
      v31 = 0;
    result = 1;
    if (!v31 && (OptionalElementCountLoopAttribute & 0xFFFFFFFE) == 0 && (v30 & 1) == 0)
    {
LABEL_62:
      v32 = (unsigned __int16)llvm::getOptionalBoolLoopAttribute(this, "llvm.loop.disable_nonforced", 0x1BuLL);
      if (v32 <= 0x100)
        LOBYTE(v32) = 0;
      return 2 * (v32 != 0);
    }
  }
  return result;
}

void *llvm::collectChildrenInLoop@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = a3 + 16;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x1000000000;
  result = sub_1C477672C(a2 + 56, *a1);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = 72;
  if (v8 == *(_QWORD *)(a2 + 56))
    v9 = 76;
  v10 = (void *)(v8 + 8 * *(unsigned int *)(a2 + v9));
  v11 = *(unsigned int *)(a3 + 8);
  if (result != v10)
  {
    if (v11 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = a1;
    LODWORD(v11) = *(_DWORD *)(a3 + 8) + 1;
    *(_DWORD *)(a3 + 8) = v11;
  }
  if ((_DWORD)v11)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v12);
      v14 = *(unsigned int *)(v13 + 32);
      if ((_DWORD)v14)
      {
        v15 = *(uint64_t ***)(v13 + 24);
        v16 = 8 * v14;
        do
        {
          v17 = *v15;
          result = sub_1C477672C(a2 + 56, **v15);
          v18 = *(_QWORD *)(a2 + 64);
          if (v18 == *(_QWORD *)(a2 + 56))
            v19 = 76;
          else
            v19 = 72;
          if (result != (void *)(v18 + 8 * *(unsigned int *)(a2 + v19)))
          {
            v20 = *(unsigned int *)(a3 + 8);
            if (v20 >= *(unsigned int *)(a3 + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v20 + 1, 8);
              v20 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v17;
            ++*(_DWORD *)(a3 + 8);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
        LODWORD(v11) = *(_DWORD *)(a3 + 8);
      }
      ++v12;
    }
    while (v12 < v11);
  }
  return result;
}

void llvm::deleteDeadLoop(llvm *this, llvm::Loop *a2, int32x2_t *a3, int32x2_t *a4, llvm::LoopInfo *a5, llvm::MemorySSA *a6)
{
  uint64_t LoopPredecessor;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::APInt *v19;
  uint64_t UniqueExitBlock;
  llvm::Loop *v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::BasicBlock *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  llvm::Value *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  unsigned __int8 **v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t i;
  llvm::PHINode *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  int v44;
  unsigned int v45;
  void **v46;
  uint64_t v47;
  void **v48;
  char *v49;
  char *v50;
  llvm::Value *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  void **v61;
  void **v62;
  _QWORD *v63;
  uint64_t ***v64;
  uint64_t ***v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t v68;
  llvm::Type *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::UndefValue *v81;
  uint64_t v82;
  llvm::UndefValue *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  BOOL v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  llvm::Type *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  llvm::ConstantInt *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  llvm::UndefValue *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t k;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD **v118;
  uint64_t v119;
  llvm::BasicBlock **v120;
  uint64_t v121;
  uint64_t v122;
  llvm::BasicBlock *v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  unsigned __int32 v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  llvm **v139;
  llvm **v140;
  llvm *v141;
  int64_t v142;
  llvm **v143;
  llvm **v144;
  int64_t v145;
  char *v146;
  void *v147;
  uint64_t v148;
  llvm::MemorySSAUpdater *v149;
  uint64_t v151;
  uint64_t v152;
  llvm::LoopInfo *v153;
  uint64_t j;
  uint64_t v156[2];
  uint64_t v157;
  int64x2_t v158;
  _OWORD v159[3];
  void *v160;
  uint64_t v161;
  _BYTE v162[360];
  void *v163;
  uint64_t v164;
  _BYTE v165[32];
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  void *v169[2];
  _QWORD v170[36];
  char v171;
  _BYTE *v172;
  void *v173;
  uint64_t v174;
  int v175;
  _BYTE v176[64];
  _QWORD v177[3];
  __int16 v178;
  char *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)this);
  if (!LoopPredecessor)
    goto LABEL_8;
  v10 = *(_QWORD *)(LoopPredecessor + 40);
  if (v10 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v10)
    v11 = v10 - 24;
  else
    v11 = 0;
  if (*(_BYTE *)(v11 + 16) == 30)
  {
    if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v12 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
    switch(*(_BYTE *)(v11 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
        __break(1u);
        goto LABEL_251;
      case 0x1F:
        v13 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_251:
        v13 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v13 = *(_DWORD *)(v11 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v13 != 1)
      goto LABEL_8;
  }
  v12 = LoopPredecessor;
LABEL_13:
  if (!a5)
  {
    v149 = 0;
    if (!a3)
      goto LABEL_16;
    goto LABEL_15;
  }
  v14 = operator new();
  *(_QWORD *)v14 = a5;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 0x1000000000;
  *(_QWORD *)(v14 + 408) = v14 + 440;
  *(_QWORD *)(v14 + 416) = v14 + 440;
  *(_QWORD *)(v14 + 424) = 8;
  *(_DWORD *)(v14 + 432) = 0;
  *(_QWORD *)(v14 + 504) = v14 + 520;
  *(_QWORD *)(v14 + 512) = 0x800000000;
  *(_QWORD *)(v14 + 600) = 0;
  *(_QWORD *)(v14 + 592) = 0;
  v149 = (llvm::MemorySSAUpdater *)v14;
  *(_QWORD *)(v14 + 584) = v14 + 592;
  if (a3)
LABEL_15:
    llvm::ScalarEvolution::forgetLoop(a3, this);
LABEL_16:
  v16 = (_QWORD *)(v12 + 40);
  v15 = *(_QWORD *)(v12 + 40);
  v153 = a5;
  if (v15 == v12 + 40)
  {
    v17 = 0;
  }
  else
  {
    if (v15)
      v17 = v15 - 24;
    else
      v17 = 0;
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      v17 = 0;
  }
  if (*(_BYTE *)(v17 + 16) == 30)
    v18 = v17;
  else
    v18 = 0;
  sub_1C4773D54((uint64_t)&v179, v18, 0, 0, 0);
  UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(this);
  v169[0] = v170;
  v169[1] = (void *)0x1000000000;
  v170[33] = 0;
  v170[32] = 0;
  v170[34] = a2;
  v170[35] = 0;
  v171 = 0;
  v172 = v176;
  v173 = v176;
  v174 = 8;
  v175 = 0;
  memset(v177, 0, sizeof(v177));
  v178 = 0;
  if (UniqueExitBlock)
  {
    v21 = a2;
    v22 = *v184;
    v23 = *(llvm::Value **)(*v184 + 1568);
    if (!v23)
    {
      v102 = *(llvm::ConstantInt **)(v22 + 1888);
      v158.i32[0] = *(_DWORD *)(v22 + 1896) >> 8;
      if (v158.i32[0] > 0x40u)
        llvm::APInt::initSlowCase((llvm::APInt *)&v157, 0, 0);
      else
        v157 = 0;
      v23 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v157, v19);
      if (v158.i32[0] >= 0x41u && v157)
        MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
      *(_QWORD *)(v22 + 1568) = v23;
    }
    v24 = (llvm::BasicBlock *)**((_QWORD **)this + 4);
    v25 = operator new(0xA0uLL);
    v26 = v25;
    v27 = 0;
    v28 = (llvm::Value *)(v25 + 24);
    v25[29] = v25[29] & 0x38000000 | 3;
    do
    {
      v29 = &v25[v27];
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
      v29[3] = v28;
      v27 += 8;
    }
    while (v27 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v25 + 24), v24, (llvm::BasicBlock *)UniqueExitBlock, v23, 0);
    WORD4(v159[0]) = 257;
    (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v28, &v157, v182, v183);
    if (v180)
    {
      v30 = v179;
      v31 = &v179[16 * v180];
      v32 = (unsigned __int8 **)(v26 + 36);
      do
      {
        v33 = *(_DWORD *)v30;
        v34 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
        if (v34)
        {
          if (!v33)
          {
            v166 = *((_QWORD *)v30 + 1);
            llvm::MetadataTracking::track((uint64_t)&v166, v34, 2);
            v35 = *v32;
            if (!*v32)
            {
LABEL_46:
              v36 = (unsigned __int8 *)v166;
              *v32 = (unsigned __int8 *)v166;
              if (v36)
                llvm::MetadataTracking::retrack((uint64_t)&v166, v36, (uint64_t)(v26 + 36));
              goto LABEL_43;
            }
LABEL_40:
            llvm::MetadataTracking::untrack((uint64_t)(v26 + 36), v35);
            goto LABEL_46;
          }
        }
        else
        {
          v35 = *v32;
          if (!*v32 && (*((_BYTE *)v26 + 119) & 0x20) == 0)
            goto LABEL_43;
          if (!v33)
          {
            v166 = 0;
            if (!v35)
              goto LABEL_46;
            goto LABEL_40;
          }
        }
        llvm::Value::setMetadata(v28, *(_DWORD *)v30, (llvm::MDNode *)v34);
LABEL_43:
        v30 += 16;
      }
      while (v30 != v31);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v18 + 40) + 40, (uint64_t ***)v18);
    v37 = *(_QWORD *)(v18 + 24);
    v38 = *(_QWORD **)(v18 + 32);
    *v38 = v37;
    *(_QWORD *)(v37 + 8) = v38;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v18);
    a2 = v21;
    if (*(_QWORD *)(UniqueExitBlock + 40) != UniqueExitBlock + 40)
    {
      for (i = *(_QWORD *)(UniqueExitBlock + 48); ; i = *((_QWORD *)v40 + 4))
      {
        v40 = (llvm::PHINode *)(i - 24);
        v41 = i ? i - 24 : 0;
        if (!i || *(_BYTE *)(v41 + 16) != 83)
          break;
        v42 = *(_DWORD *)(i - 4);
        if ((v42 & 0x40000000) != 0)
          v43 = *(_QWORD **)(i - 32);
        else
          v43 = (_QWORD *)((char *)v40 - 32 * (v42 & 0x7FFFFFF));
        v43[4 * *(unsigned int *)(i + 36)] = v12;
        v44 = *(_DWORD *)(i - 4) & 0x7FFFFFF;
        v45 = v44 - 1;
        if (v44 != 1)
        {
          do
            llvm::PHINode::removeIncomingValue(v40, v45--, 0);
          while (v45);
        }
      }
    }
    if (v21)
    {
      v157 = v12;
      v158.i64[0] = UniqueExitBlock & 0xFFFFFFFFFFFFFFFBLL;
      llvm::DomTreeUpdater::applyUpdates((uint64_t)v169, (unint64_t *)&v157, 1);
      if (v153)
      {
        v157 = v12;
        v158.i64[0] = UniqueExitBlock & 0xFFFFFFFFFFFFFFFBLL;
        llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)v149, (unint64_t *)&v157, 1, (uint64_t)v21, 0);
      }
    }
    v46 = 0;
    if (*v16)
      v47 = *v16 - 24;
    else
      v47 = 0;
    if (*(unsigned __int8 *)(v47 + 16) - 29 >= 0xB)
      v47 = 0;
    v182 = *(_QWORD *)(v47 + 40);
    v183 = v47 + 24;
    v48 = *(void ***)(v47 + 48);
    v157 = (uint64_t)v48;
    if (v48)
    {
      llvm::MetadataTracking::track((uint64_t)&v157, (unsigned __int8 *)v48, 2);
      v46 = (void **)v157;
    }
    sub_1C4774EF4((uint64_t)&v179, 0, (uint64_t)v46);
    if (v157)
      llvm::MetadataTracking::untrack((uint64_t)&v157, (unsigned __int8 *)v157);
    v49 = (char *)operator new(0x60uLL);
    v50 = v49;
    *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
    *(_QWORD *)v49 = 0;
    *((_QWORD *)v49 + 2) = 0;
    *((_QWORD *)v49 + 1) = 0;
    *((_QWORD *)v49 + 4) = ***(_QWORD ***)UniqueExitBlock + 1576;
    v51 = (llvm::Value *)(v49 + 32);
    *((_QWORD *)v49 + 3) = v49 + 32;
    *((_QWORD *)v49 + 5) = 0;
    v49[48] = 30;
    v49[49] = 0;
    *((_WORD *)v49 + 25) = 0;
    *((_DWORD *)v49 + 13) = 1;
    *(_OWORD *)(v49 + 56) = 0u;
    *(_OWORD *)(v49 + 72) = 0u;
    *((_DWORD *)v49 + 22) = 0;
    *(_QWORD *)v49 = UniqueExitBlock;
    v52 = (_QWORD *)(UniqueExitBlock + 8);
    v53 = *(_QWORD *)(UniqueExitBlock + 8);
    *((_QWORD *)v49 + 1) = v53;
    if (v53)
      *(_QWORD *)(v53 + 16) = v49 + 8;
    *((_QWORD *)v49 + 2) = v52;
    *v52 = v49;
    WORD4(v159[0]) = 257;
    (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v51, &v157, v182, v183);
    if (v180)
    {
      v54 = v179;
      v55 = &v179[16 * v180];
      v56 = (unsigned __int8 **)(v50 + 80);
      do
      {
        v57 = *(_DWORD *)v54;
        v58 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
        if (v58)
        {
          if (!v57)
          {
            v166 = *((_QWORD *)v54 + 1);
            llvm::MetadataTracking::track((uint64_t)&v166, v58, 2);
            v59 = *v56;
            if (!*v56)
            {
LABEL_88:
              v60 = (unsigned __int8 *)v166;
              *v56 = (unsigned __int8 *)v166;
              if (v60)
                llvm::MetadataTracking::retrack((uint64_t)&v166, v60, (uint64_t)(v50 + 80));
              goto LABEL_85;
            }
LABEL_82:
            llvm::MetadataTracking::untrack((uint64_t)(v50 + 80), v59);
            goto LABEL_88;
          }
        }
        else
        {
          v59 = *v56;
          if (!*v56 && (v50[55] & 0x20) == 0)
            goto LABEL_85;
          if (!v57)
          {
            v166 = 0;
            if (!v59)
              goto LABEL_88;
            goto LABEL_82;
          }
        }
        llvm::Value::setMetadata(v51, *(_DWORD *)v54, (llvm::MDNode *)v58);
LABEL_85:
        v54 += 16;
      }
      while (v54 != v55);
    }
  }
  else
  {
    v182 = *(_QWORD *)(v18 + 40);
    v183 = v18 + 24;
    v61 = *(void ***)(v18 + 48);
    v157 = (uint64_t)v61;
    if (v61)
    {
      llvm::MetadataTracking::track((uint64_t)&v157, (unsigned __int8 *)v61, 2);
      v62 = (void **)v157;
    }
    else
    {
      v62 = 0;
    }
    sub_1C4774EF4((uint64_t)&v179, 0, (uint64_t)v62);
    if (v157)
      llvm::MetadataTracking::untrack((uint64_t)&v157, (unsigned __int8 *)v157);
    LLVMBuildUnreachable_0((uint64_t)&v179);
  }
  v63 = (_QWORD *)*v16;
  if ((_QWORD *)*v16 == v16)
  {
    v65 = 0;
  }
  else
  {
    if (v63)
      v64 = (uint64_t ***)(v63 - 3);
    else
      v64 = 0;
    if (*((unsigned __int8 *)v64 + 16) - 29 >= 0xB)
      v65 = 0;
    else
      v65 = v64;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v65[5] + 5), v65);
  v66 = v65[3];
  v67 = v65[4];
  *v67 = (uint64_t *)v66;
  v66[1] = (uint64_t *)v67;
  v65[3] = 0;
  v65[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v65);
  if (a2)
  {
    v68 = **((_QWORD **)this + 4) | 4;
    v157 = v12;
    v158.i64[0] = v68;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)v169, (unint64_t *)&v157, 1);
    if (v153)
    {
      v99 = **((_QWORD **)this + 4) | 4;
      v157 = v12;
      v158.i64[0] = v99;
      llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)v149, (unint64_t *)&v157, 1, (uint64_t)a2, 0);
      v100 = (uint64_t *)*((_QWORD *)this + 4);
      v101 = (uint64_t *)*((_QWORD *)this + 5);
      v157 = 1;
      v158 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v159[0] = v158;
      v159[1] = v158;
      v159[2] = v158;
      v160 = v162;
      v161 = 0x800000000;
      sub_1C627BE14(&v157, v100, v101);
      llvm::MemorySSAUpdater::removeBlocks((uint64_t)v149, (uint64_t)&v157);
      if (v160 != v162)
        free(v160);
      if ((v157 & 1) == 0)
        MEMORY[0x1CAA32FB4](v158.i64[0], 8);
    }
  }
  v166 = 1;
  memset_pattern16(&v167, &unk_1C85F2160, 0x40uLL);
  v163 = v165;
  v164 = 0x400000000;
  if (UniqueExitBlock)
  {
    v148 = UniqueExitBlock;
    v70 = *((_QWORD *)this + 4);
    v151 = *((_QWORD *)this + 5);
    if (v151 != v70)
    {
      do
      {
        v152 = v70;
        v71 = *(_QWORD *)(*(_QWORD *)v70 + 48);
        for (j = *(_QWORD *)v70 + 40; v71 != j; v71 = *(_QWORD *)(v71 + 8))
        {
          if (v71)
            v80 = v71 - 24;
          else
            v80 = 0;
          v81 = llvm::UndefValue::get(*(llvm::UndefValue **)v80, v69);
          v82 = *(_QWORD *)(v80 + 8);
          if (v82)
          {
            v83 = v81;
            v84 = (uint64_t *)((char *)v81 + 8);
            do
            {
              v85 = v82;
              v86 = (uint64_t *)(v82 + 8);
              v82 = *(_QWORD *)(v82 + 8);
              v87 = v86[2];
              if (v87)
                v88 = *(unsigned __int8 *)(v87 + 16) >= 0x1Cu;
              else
                v88 = 0;
              if (v88)
              {
                v89 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(v87 + 40));
                v90 = *((_QWORD *)this + 8);
                v91 = v90 == *((_QWORD *)this + 7) ? 76 : 72;
                if (v89 != (_QWORD *)(v90 + 8 * *(unsigned int *)((char *)this + v91)))
                  continue;
              }
              if (*(_QWORD *)v85)
              {
                **(_QWORD **)(v85 + 16) = *(_QWORD *)(v85 + 8);
                v92 = *(_QWORD *)(v85 + 8);
                if (v92)
                  *(_QWORD *)(v92 + 16) = *(_QWORD *)(v85 + 16);
              }
              *(_QWORD *)v85 = v83;
              if (v83)
              {
                v93 = *v84;
                *v86 = *v84;
                if (v93)
                  *(_QWORD *)(v93 + 16) = v86;
                *(_QWORD *)(v85 + 16) = v84;
                *v84 = v85;
              }
            }
            while (v82);
          }
          v94 = sub_1C53923FC(v80);
          if (!v94)
            v80 = 0;
          if (v71 && (v94 & 1) != 0)
          {
            v72 = v80 - 32 * (*(_DWORD *)(v80 + 20) & 0x7FFFFFF);
            v73 = sub_1C63B1344((uint64_t)&v166, *(_QWORD *)(*(_QWORD *)(v72 + 32) + 24), *(_QWORD *)(*(_QWORD *)(v72 + 64) + 24));
            v74 = &v167;
            if ((v166 & 1) == 0)
              v74 = v167;
            v75 = v168;
            if ((v166 & 1) != 0)
              v75 = 4;
            if (&v74[2 * v75] == (_QWORD *)v73)
            {
              v76 = v80 - 32 * (*(_DWORD *)(v80 + 20) & 0x7FFFFFF);
              v77 = *(_QWORD *)(*(_QWORD *)(v76 + 32) + 24);
              v78 = *(_QWORD *)(*(_QWORD *)(v76 + 64) + 24);
              v156[0] = v77;
              v156[1] = v78;
              sub_1C629858C((uint64_t)&v157, (uint64_t)&v166, v156);
              v79 = v164;
              if (v164 >= (unint64_t)HIDWORD(v164))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)v165, v164 + 1, 8);
                v79 = v164;
              }
              *((_QWORD *)v163 + v79) = v80;
              LODWORD(v164) = v164 + 1;
            }
          }
        }
        v70 = v152 + 8;
      }
      while (v152 + 8 != v151);
    }
    llvm::DIBuilder::DIBuilder((uint64_t)&v157, *(_QWORD **)(*(_QWORD *)(v148 + 56) + 40), 1, 0);
    v96 = *(_QWORD *)(v148 + 48);
    if (v96 == v148 + 40)
    {
      v97 = 0;
    }
    else
    {
      while (1)
      {
        v97 = v96 - 24;
        v98 = v96 ? v96 - 24 : 0;
        if (*(_BYTE *)(v98 + 16) != 83)
          break;
        v96 = *(_QWORD *)(v96 + 8);
        if (v96 == v148 + 40)
        {
          v97 = 0;
          break;
        }
      }
    }
    if ((_DWORD)v164)
    {
      v103 = (uint64_t *)v163;
      v104 = 8 * v164;
      do
      {
        v105 = *v103;
        v106 = llvm::UndefValue::get((llvm::UndefValue *)(*v184 + 1960), v95);
        if (v97)
          v107 = *(_QWORD *)(v97 + 40);
        else
          v107 = 0;
        v108 = v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF);
        llvm::DIBuilder::insertDbgValueIntrinsic((uint64_t)&v157, v106, *(_QWORD *)(*(_QWORD *)(v108 + 32) + 24), *(_QWORD *)(*(_QWORD *)(v108 + 64) + 24), *(_QWORD *)(v105 + 48), v107, v97);
        ++v103;
        v104 -= 8;
      }
      while (v104);
    }
    sub_1C50F023C((uint64_t)&v157);
  }
  v109 = *((_QWORD *)this + 4);
  v110 = *((_QWORD *)this + 5);
  if (v110 == v109)
    goto LABEL_187;
  do
  {
    v111 = *(_QWORD *)v109 + 40;
    for (k = *(_QWORD *)(*(_QWORD *)v109 + 48); k != v111; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v113 = k - 24;
      else
        v113 = 0;
      v114 = *(_DWORD *)(v113 + 20);
      if ((v114 & 0x40000000) != 0)
      {
        v116 = *(_QWORD *)(v113 - 8);
        v115 = v114 & 0x7FFFFFF;
        if (!v115)
          continue;
      }
      else
      {
        v115 = v114 & 0x7FFFFFF;
        v116 = v113 - 32 * v115;
        if (!v115)
          continue;
      }
      v117 = 32 * v115;
      v118 = (_QWORD **)(v116 + 16);
      do
      {
        if (*(v118 - 2))
        {
          **v118 = *(v118 - 1);
          v119 = (uint64_t)*(v118 - 1);
          if (v119)
            *(_QWORD *)(v119 + 16) = *v118;
        }
        *(v118 - 2) = 0;
        v118 += 4;
        v117 -= 32;
      }
      while (v117);
    }
    v109 += 8;
  }
  while (v109 != v110);
LABEL_187:
  if (a4)
  {
    v120 = (llvm::BasicBlock **)*((_QWORD *)this + 4);
    v121 = *((_QWORD *)this + 5) - (_QWORD)v120;
    if (v121)
    {
      v122 = 8 * (v121 >> 3);
      do
      {
        v123 = *v120++;
        llvm::BasicBlock::eraseFromParent(v123);
        v122 -= 8;
      }
      while (v122);
      v124 = (uint64_t *)*((_QWORD *)this + 4);
      v120 = (llvm::BasicBlock **)*((_QWORD *)this + 5);
    }
    else
    {
      v124 = (uint64_t *)*((_QWORD *)this + 4);
    }
    v125 = (char *)v159 + 8;
    v157 = (uint64_t)v159 + 8;
    v158.i64[0] = (uint64_t)v159 + 8;
    v158.i64[1] = 8;
    LODWORD(v159[0]) = 0;
    if (v120 == (llvm::BasicBlock **)v124)
    {
      v129 = 0;
      v130 = 8;
      v128 = (uint64_t *)v159 + 1;
    }
    else
    {
      v126 = 8 * (((char *)v120 - (char *)v124) >> 3);
      do
      {
        v127 = *v124++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v157, v127);
        v126 -= 8;
      }
      while (v126);
      v125 = (char *)v157;
      v128 = (uint64_t *)v158.i64[0];
      v130 = v158.u32[2];
      v129 = v158.u32[3];
    }
    if (v128 == (uint64_t *)v125)
      v131 = v129;
    else
      v131 = v130;
    v132 = v128;
    if ((_DWORD)v131)
    {
      v133 = 8 * v131;
      v132 = v128;
      while ((unint64_t)*v132 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v132;
        v133 -= 8;
        if (!v133)
          goto LABEL_212;
      }
    }
    v134 = (char *)&v128[v131];
    if (v132 != (uint64_t *)v134)
    {
      v135 = *v132;
LABEL_208:
      llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(a4, v135);
      v136 = (unint64_t *)(v132 + 1);
      while (v136 != (unint64_t *)v134)
      {
        v137 = *v136++;
        v135 = v137;
        if (v137 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v132 = (uint64_t *)(v136 - 1);
          goto LABEL_208;
        }
      }
    }
LABEL_212:
    v138 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v140 = *(llvm ***)(v138 + 8);
      v139 = *(llvm ***)(v138 + 16);
      if (v140 != v139)
      {
        while (*v140 != this)
        {
          if (++v140 == v139)
          {
            v140 = *(llvm ***)(v138 + 16);
            break;
          }
        }
      }
      v141 = *v140;
      v142 = (char *)v139 - (char *)(v140 + 1);
      if (v139 != v140 + 1)
        memmove(v140, v140 + 1, (char *)v139 - (char *)(v140 + 1));
      *(_QWORD *)(v138 + 16) = (char *)v140 + v142;
      *(_QWORD *)v141 = 0;
    }
    else
    {
      v144 = (llvm **)a4[3];
      v143 = (llvm **)a4[4];
      if (v144 != v143)
      {
        while (*v144 != this)
        {
          if (++v144 == v143)
          {
            v144 = (llvm **)a4[4];
            break;
          }
        }
      }
      v145 = (char *)v143 - (char *)(v144 + 1);
      if (v143 != v144 + 1)
        memmove(v144, v144 + 1, (char *)v143 - (char *)(v144 + 1));
      a4[4] = (int32x2_t)((char *)v144 + v145);
    }
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase((uint64_t)this);
    if (v158.i64[0] != v157)
      free((void *)v158.i64[0]);
  }
  if (v163 != v165)
    free(v163);
  if ((v166 & 1) == 0)
    MEMORY[0x1CAA32FB4](v167, 8);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v169);
  v157 = (uint64_t)v177;
  sub_1C50B10F0((void ***)&v157);
  if (v173 != v172)
    free(v173);
  if (v169[0] != v170)
    free(v169[0]);
  if (v179 == (char *)&v181)
  {
    if (v149)
      goto LABEL_239;
  }
  else
  {
    free(v179);
    if (v149)
    {
LABEL_239:
      sub_1C61247C0((uint64_t)v149 + 584, *((_QWORD **)v149 + 74));
      v146 = (char *)*((_QWORD *)v149 + 63);
      if (v146 != (char *)v149 + 520)
        free(v146);
      v147 = (void *)*((_QWORD *)v149 + 52);
      if (v147 != *((void **)v149 + 51))
        free(v147);
      sub_1C4EE41F8((char **)v149 + 1);
      MEMORY[0x1CAA32FC0](v149, 0x10E0C40B8556DDDLL);
    }
  }
}

uint64_t llvm::breakLoopBackedge(llvm *this, llvm::Loop *a2, int32x2_t *a3, llvm::ScalarEvolution *a4, llvm::LoopInfo *a5, llvm::MemorySSA *a6)
{
  llvm *LoopLatch;
  llvm *v11;
  llvm *v12;
  llvm::MemorySSAUpdater *v13;
  const llvm::Twine *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  llvm::Value *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unsigned __int8 **v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  void *v39;
  void *v40;
  uint64_t result;
  llvm::ScalarEvolution *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  llvm::MemorySSAUpdater *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  llvm *v51;
  llvm::LoopInfo *v52;
  llvm::ScalarEvolution *v53;
  llvm::DominatorTree *v54;
  llvm::BasicBlock *v55;
  unsigned __int8 *v57;
  void *v58;
  unsigned int v59;
  _QWORD v60[8];
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _WORD v64[128];
  uint64_t v65;
  uint64_t v66;
  llvm::Loop *v67;
  uint64_t v68;
  char v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  LoopLatch = (llvm *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this);
  v55 = (llvm::BasicBlock *)**((_QWORD **)this + 4);
  v11 = this;
  do
  {
    v12 = v11;
    v11 = *(llvm **)v11;
  }
  while (v11);
  llvm::ScalarEvolution::forgetLoop(a3, this);
  if (a5)
  {
    v15 = operator new();
    *(_QWORD *)v15 = a5;
    *(_QWORD *)(v15 + 8) = v15 + 24;
    *(_QWORD *)(v15 + 16) = 0x1000000000;
    *(_QWORD *)(v15 + 408) = v15 + 440;
    *(_QWORD *)(v15 + 416) = v15 + 440;
    *(_QWORD *)(v15 + 424) = 8;
    *(_DWORD *)(v15 + 432) = 0;
    *(_QWORD *)(v15 + 504) = v15 + 520;
    *(_QWORD *)(v15 + 512) = 0x800000000;
    *(_QWORD *)(v15 + 600) = 0;
    *(_QWORD *)(v15 + 592) = 0;
    *(_QWORD *)(v15 + 584) = v15 + 592;
  }
  else
  {
    v15 = 0;
  }
  v16 = (_QWORD *)*((_QWORD *)LoopLatch + 5);
  if (v16 == (_QWORD *)((char *)LoopLatch + 40))
    goto LABEL_62;
  v17 = v16 ? (uint64_t)(v16 - 3) : 0;
  v18 = *(unsigned __int8 *)(v17 + 16) - 40;
  v19 = v18 >= 0xFFFFFFF5 ? v17 : 0;
  if (!v16)
    goto LABEL_62;
  if (*(_BYTE *)(v19 + 16) != 30 || v18 < 0xFFFFFFF5)
    goto LABEL_62;
  if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) != 3)
  {
    v62 = v64;
    v63 = 0x1000000000;
    v65 = 0;
    v66 = 0;
    v67 = a2;
    v68 = 0;
    v69 = 0;
    v70 = v74;
    v71 = v74;
    v72 = 8;
    v73 = 0;
    v77 = 0;
    v75 = 0;
    v76 = 0;
    v78 = 0;
    llvm::changeToUnreachable((llvm *)v19, (llvm::Instruction *)1, (uint64_t)&v62, (int32x2_t **)v15, v13);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v62);
    v58 = &v75;
    sub_1C50B10F0((void ***)&v58);
    v39 = v71;
    if (v71 == v70)
      goto LABEL_44;
    goto LABEL_71;
  }
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)this, (uint64_t)LoopLatch))
  {
LABEL_62:
    v64[8] = 257;
    v47 = llvm::SplitEdge(LoopLatch, v55, a2, a4, (int32x2_t **)v15, (llvm::MemorySSAUpdater *)&v62, v14);
    v62 = v64;
    v63 = 0x1000000000;
    v65 = 0;
    v66 = 0;
    v67 = a2;
    v68 = 0;
    v69 = 0;
    v70 = v74;
    v71 = v74;
    v72 = 8;
    v73 = 0;
    v77 = 0;
    v75 = 0;
    v76 = 0;
    v78 = 0;
    v49 = *(_QWORD *)(v47 + 40);
    if (v49 == v47 + 40)
    {
      v51 = 0;
    }
    else
    {
      if (v49)
        v50 = (unsigned __int8 *)(v49 - 24);
      else
        v50 = 0;
      if (v50[16] - 29 >= 0xB)
        v51 = 0;
      else
        v51 = (llvm *)v50;
    }
    llvm::changeToUnreachable(v51, (llvm::Instruction *)1, (uint64_t)&v62, (int32x2_t **)v15, v48);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v62);
    v58 = &v75;
    sub_1C50B10F0((void ***)&v58);
    v39 = v71;
    if (v71 == v70)
    {
LABEL_44:
      v40 = v62;
      if (v62 == v64)
        goto LABEL_45;
      goto LABEL_61;
    }
LABEL_71:
    free(v39);
    goto LABEL_44;
  }
  v52 = a5;
  v53 = a4;
  v54 = (llvm::DominatorTree *)a3;
  v21 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(v19 - 32));
  v22 = *((_QWORD *)this + 8);
  v23 = 72;
  if (v22 == *((_QWORD *)this + 7))
    v23 = 76;
  if (v21 == (_QWORD *)(v22 + 8 * *(unsigned int *)((char *)this + v23)))
    v24 = 0;
  else
    v24 = -1;
  v25 = *(_QWORD *)(v19 - 32 + 32 * v24);
  v62 = v64;
  v63 = 0x1000000000;
  v65 = 0;
  v66 = 0;
  v67 = a2;
  v68 = 0;
  v69 = 0;
  v70 = v74;
  v71 = v74;
  v72 = 8;
  v73 = 0;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v78 = 0;
  llvm::BasicBlock::removePredecessor(v55, LoopLatch, 1);
  sub_1C4773D54((uint64_t)&v58, v19, 0, 0, 0);
  v26 = (char *)operator new(0x60uLL);
  v27 = v26;
  *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 4) = ***(_QWORD ***)v25 + 1576;
  v28 = (llvm::Value *)(v26 + 32);
  *((_QWORD *)v26 + 3) = v26 + 32;
  *((_QWORD *)v26 + 5) = 0;
  v26[48] = 30;
  v26[49] = 0;
  *((_WORD *)v26 + 25) = 0;
  *((_DWORD *)v26 + 13) = 1;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_DWORD *)v26 + 22) = 0;
  *(_QWORD *)v26 = v25;
  v31 = *(_QWORD *)(v25 + 8);
  v30 = (_QWORD *)(v25 + 8);
  v29 = v31;
  *((_QWORD *)v26 + 1) = v31;
  if (v31)
    *(_QWORD *)(v29 + 16) = v26 + 8;
  *((_QWORD *)v26 + 2) = v30;
  *v30 = v26;
  v81 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unint64_t *, _QWORD, _QWORD))(*(_QWORD *)v61 + 16))(v61, v28, &v79, v60[4], v60[5]);
  if (v59)
  {
    v32 = (char *)v58;
    v33 = (char *)v58 + 16 * v59;
    v34 = (unsigned __int8 **)(v27 + 80);
    do
    {
      v35 = *(_DWORD *)v32;
      v36 = (unsigned __int8 *)*((_QWORD *)v32 + 1);
      if (v36)
      {
        if (!v35)
        {
          v57 = (unsigned __int8 *)*((_QWORD *)v32 + 1);
          llvm::MetadataTracking::track((uint64_t)&v57, v36, 2);
          v37 = *v34;
          if (!*v34)
          {
LABEL_41:
            v38 = v57;
            *v34 = v57;
            if (v38)
              llvm::MetadataTracking::retrack((uint64_t)&v57, v38, (uint64_t)(v27 + 80));
            goto LABEL_38;
          }
LABEL_35:
          llvm::MetadataTracking::untrack((uint64_t)(v27 + 80), v37);
          goto LABEL_41;
        }
      }
      else
      {
        v37 = *v34;
        if (!*v34 && (v27[55] & 0x20) == 0)
          goto LABEL_38;
        if (!v35)
        {
          v57 = 0;
          if (!v37)
            goto LABEL_41;
          goto LABEL_35;
        }
      }
      llvm::Value::setMetadata(v28, *(_DWORD *)v32, (llvm::MDNode *)v36);
LABEL_38:
      v32 += 16;
    }
    while (v32 != v33);
  }
  v79 = 0x1E00000000;
  llvm::Instruction::copyMetadata((uint64_t)v28, v19, (int *)&v79, 2);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v19 + 40) + 40, (uint64_t ***)v19);
  v45 = *(_QWORD *)(v19 + 24);
  v46 = *(_QWORD **)(v19 + 32);
  *v46 = v45;
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v19);
  v79 = (unint64_t)LoopLatch;
  v80 = (unint64_t)v55 | 4;
  llvm::DomTreeUpdater::applyUpdates((uint64_t)&v62, &v79, 1);
  if (v52)
  {
    v79 = (unint64_t)LoopLatch;
    v80 = (unint64_t)v55 | 4;
    llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)v15, &v79, 1, (uint64_t)a2, 0);
  }
  a4 = v53;
  a3 = (int32x2_t *)v54;
  if (v58 != v60)
    free(v58);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v62);
  v58 = &v75;
  sub_1C50B10F0((void ***)&v58);
  if (v71 != v70)
    free(v71);
  v40 = v62;
  if (v62 != v64)
LABEL_61:
    free(v40);
LABEL_45:
  result = llvm::LoopInfo::erase((int32x2_t *)a4, this);
  if (v12 != this)
    result = llvm::formLCSSARecursively(v12, a2, a4, (const llvm::LoopInfo *)a3, v42);
  if (v15)
  {
    sub_1C61247C0(v15 + 584, *(_QWORD **)(v15 + 592));
    v43 = *(void **)(v15 + 504);
    if (v43 != (void *)(v15 + 520))
      free(v43);
    v44 = *(void **)(v15 + 416);
    if (v44 != *(void **)(v15 + 408))
      free(v44);
    sub_1C4EE41F8((char **)(v15 + 8));
    return MEMORY[0x1CAA32FC0](v15, 0x10E0C40B8556DDDLL);
  }
  return result;
}

uint64_t llvm::getLoopEstimatedTripCount(llvm *this, llvm::Loop *a2, unsigned int *a3)
{
  llvm::Instruction *v5;
  llvm::Instruction *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;

  v5 = (llvm::Instruction *)sub_1C5F3C748((uint64_t)this);
  if (!v5)
    goto LABEL_11;
  v6 = v5;
  v15 = 0;
  v16 = 0;
  if (!llvm::Instruction::extractProfMetadata(v5, &v16, &v15))
    goto LABEL_11;
  v7 = sub_1C477672C((uint64_t)this + 56, *((_QWORD *)v6 - 8));
  v8 = *((_QWORD *)this + 8);
  v9 = 72;
  if (v8 == *((_QWORD *)this + 7))
    v9 = 76;
  if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)this + v9)))
  {
    v10 = v15;
    if (v15)
      goto LABEL_7;
LABEL_11:
    v12 = 0;
    v13 = 0;
    return v13 | v12;
  }
  v10 = v16;
  v16 = v15;
  if (!v10)
    goto LABEL_11;
LABEL_7:
  v11 = (v16 + (v10 >> 1)) / v10 + 1;
  if (a2)
    *(_DWORD *)a2 = v10;
  v12 = v11;
  v13 = 0x100000000;
  return v13 | v12;
}

uint64_t sub_1C5F3C748(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
  if (!result)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(result + 40);
  if (v4 == result + 40)
    return 0;
  result = 0;
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16) - 40;
  if (v6 >= 0xFFFFFFF5)
    v7 = v5;
  else
    v7 = 0;
  if (v4)
  {
    if (*(_BYTE *)(v7 + 16) == 30 && v6 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3)
      {
        if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(a1, v3))
          return v7;
        else
          return 0;
      }
      return 0;
    }
  }
  return result;
}

BOOL llvm::setLoopEstimatedTripCount(llvm *this, llvm::Loop *a2, int a3)
{
  int v4;
  uint64_t ***v6;
  uint64_t ***v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  llvm::MDNode *v15;
  uint64_t *v16;
  _DWORD v17[2];
  uint64_t v18;

  v4 = (int)a2;
  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t ***)sub_1C5F3C748((uint64_t)this);
  v7 = v6;
  if (v6)
  {
    v9 = (v4 - 1) * a3;
    if (v4)
      v10 = a3;
    else
      v10 = 0;
    if (!v4)
      v9 = 0;
    v11 = (uint64_t)*(v6 - 4);
    v12 = **((_QWORD **)this + 4);
    v13 = v11 == v12;
    if (v11 == v12)
      v14 = v10;
    else
      v14 = v9;
    if (!v13)
      v9 = v10;
    v16 = **v6;
    v17[0] = v9;
    v17[1] = v14;
    v15 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v16, (uint64_t)v17, 2);
    if (v15 || v7[6] || (*((_BYTE *)v7 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v7, 2, v15);
  }
  return v7 != 0;
}

llvm::Value *llvm::createSelectCmpOp(uint64_t *a1, uint64_t ***VectorSplat, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9;
  llvm::Type *v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  if (*a4)
    v9 = (*(_DWORD *)(*a4 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (llvm::Type *)(*(unsigned int *)(*a4 + 32) | ((unint64_t)(*(_DWORD *)(*a4 + 8) == 19) << 32));
    v14 = 257;
    VectorSplat = (uint64_t ***)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v10, VectorSplat, (uint64_t)v13);
  }
  v13[0] = "rdx.select.cmp";
  v14 = 259;
  v11 = sub_1C4774B48((uint64_t)a1, 33, (uint64_t)a4, (uint64_t)VectorSplat, (uint64_t)v13);
  v13[0] = "rdx.select";
  v14 = 259;
  return llvm::IRBuilderBase::CreateSelect(a1, v11, a4, a5, (uint64_t)v13, 0);
}

uint64_t llvm::propagateIRFlags(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;

  if (result)
  {
    v4 = result;
    if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
    {
      v7 = a2;
      if (a4)
      {
        v8 = *(unsigned __int8 *)(a4 + 16);
        v9 = a4;
        if (v8 < 0x1C)
          return result;
      }
      else
      {
        v9 = *a2;
        v8 = *(unsigned __int8 *)(*v7 + 16);
        if (v8 <= 0x1B)
          return result;
      }
      result = llvm::Instruction::copyIRFlags(result, v9, 1);
      if (a3)
      {
        v10 = 8 * a3;
        do
        {
          v11 = *v7;
          v12 = *(unsigned __int8 *)(*v7 + 16);
          if (a4)
            v13 = v8 == v12;
          else
            v13 = 1;
          v14 = v13;
          if (v11)
            v15 = v12 >= 0x1C;
          else
            v15 = 0;
          if (v15 && v14 != 0)
            result = llvm::Instruction::andIRFlags(v4, v11);
          ++v7;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

uint64_t llvm::rewriteLoopExitValues(const llvm::Loop *a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned int *a9)
{
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  const llvm::Loop *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const llvm::SCEV *SCEVAtScope;
  int v37;
  uint64_t v38;
  int32x2_t v39;
  unsigned __int32 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t SCEVIter;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  char v72;
  uint64_t LoopPredecessor;
  uint64_t v74;
  uint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t j;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v121;
  unsigned int v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  int32x2_t *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int v137;
  int v138;
  char *v143;
  char *v145;
  int32x2_t *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  _BYTE v150[320];
  void *v151;
  uint64_t v152;
  _BYTE v153[64];
  void *v154;
  uint64_t v155;
  _BYTE v156[64];
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  _QWORD v161[10];

  v161[8] = *MEMORY[0x1E0C80C00];
  v151 = v153;
  v152 = 0x800000000;
  sub_1C4EAEA40(a1, (uint64_t)&v151);
  v148 = v150;
  v149 = 0x800000000;
  v146 = a4;
  if ((_DWORD)v152)
  {
    v12 = (char *)v151;
    v147 = (uint64_t)a1 + 56;
    v143 = (char *)v151 + 8 * v152;
    do
    {
      v145 = v12;
      v13 = *(_QWORD *)(*(_QWORD *)v12 + 48);
      v14 = v13 - 24;
      if (v13)
        v15 = v13 - 24;
      else
        v15 = 0;
      if (!v13 || *(_BYTE *)(v15 + 16) != 83 || *(_BYTE *)(v13 - 8) != 83)
        goto LABEL_118;
      v16 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
      do
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (!*(_QWORD *)(v14 + 8))
          goto LABEL_16;
        if ((*(_DWORD *)(*(_QWORD *)v14 + 8) & 0xFD) != 0xD || (_DWORD)v16 == 0)
          goto LABEL_16;
        v20 = 0;
        do
        {
          v21 = *(_DWORD *)(v14 + 20);
          if ((v21 & 0x40000000) != 0)
          {
            v22 = *(_QWORD *)(v14 - 8);
            v23 = *(_QWORD *)(v22 + 32 * v20);
            if (*(unsigned __int8 *)(v23 + 16) < 0x1Cu)
              goto LABEL_36;
          }
          else
          {
            v22 = v14 - 32 * (v21 & 0x7FFFFFF);
            v23 = *(_QWORD *)(v22 + 32 * v20);
            if (*(unsigned __int8 *)(v23 + 16) <= 0x1Bu)
              goto LABEL_36;
          }
          v24 = *(_DWORD *)(a2 + 16);
          if (!v24)
            goto LABEL_34;
          v25 = *(_QWORD *)(v22 + 32 * *(unsigned int *)(v14 + 60) + 8 * v20);
          v26 = *(_QWORD *)a2;
          v27 = v24 - 1;
          v28 = ((v25 >> 4) ^ (v25 >> 9)) & (v24 - 1);
          v29 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v28);
          if (v25 != v29)
          {
            v30 = 1;
            while (v29 != -4096)
            {
              v31 = v28 + v30++;
              v28 = v31 & v27;
              v29 = *(_QWORD *)(v26 + 16 * v28);
              if (v25 == v29)
                goto LABEL_33;
            }
LABEL_34:
            v32 = 0;
            goto LABEL_35;
          }
LABEL_33:
          v32 = *(const llvm::Loop **)(v26 + 16 * v28 + 8);
LABEL_35:
          if (v32 != a1)
            goto LABEL_36;
          v33 = sub_1C477672C(v147, *(_QWORD *)(v23 + 40));
          v34 = *((_QWORD *)a1 + 8);
          v35 = 72;
          if (v34 == *((_QWORD *)a1 + 7))
            v35 = 76;
          if (v33 == (_QWORD *)(v34 + 8 * *(unsigned int *)((char *)a1 + v35)))
            goto LABEL_36;
          SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a4, (llvm::Value *)v23, *(const llvm::Loop **)a1);
          if (*((_WORD *)SCEVAtScope + 12) != 15
            && llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a4, SCEVAtScope, a1) == 1
            && llvm::isSafeToExpand(SCEVAtScope, (const llvm::SCEV *)a4, (llvm::ScalarEvolution *)1))
          {
            goto LABEL_68;
          }
          v37 = *(_DWORD *)(v14 + 20);
          if ((v37 & 0x40000000) != 0)
            v38 = *(_QWORD *)(v14 - 8);
          else
            v38 = v14 - 32 * (v37 & 0x7FFFFFF);
          if (*(_WORD *)(llvm::ScalarEvolution::getExitCount((llvm::ScalarEvolution *)a4, a1, *(_QWORD *)(v38 + 32 * *(unsigned int *)(v14 + 60) + 8 * v20), 0)+ 24) == 15)goto LABEL_36;
          v39 = a4[13];
          v40 = a4[15].u32[0];
          if (!v40)
            goto LABEL_54;
          v41 = (v40 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          v42 = *(_QWORD *)&v39 + 48 * v41;
          v43 = *(_QWORD *)(v42 + 24);
          if (v43 != v23)
          {
            v44 = 1;
            while (v43 != -4096)
            {
              v45 = v41 + v44++;
              v41 = v45 & (v40 - 1);
              v42 = *(_QWORD *)&v39 + 48 * v41;
              v43 = *(_QWORD *)(v42 + 24);
              if (v43 == v23)
                goto LABEL_55;
            }
LABEL_54:
            v42 = *(_QWORD *)&v39 + 48 * v40;
          }
LABEL_55:
          if (v42 == *(_QWORD *)&v39 + 48 * v40 || (SCEVIter = *(_QWORD *)(v42 + 40)) == 0)
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a4, v23);
          if (SCEVIter)
            v47 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
          else
            v47 = 0;
          if (v47 && *(const llvm::Loop **)(SCEVIter + 48) == a1)
            SCEVAtScope = (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(*(_QWORD *)(SCEVIter + 32), *(_QWORD *)(SCEVIter + 40));
          if (*((_WORD *)SCEVAtScope + 12) == 15
            || llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a4, SCEVAtScope, a1) != 1
            || !llvm::isSafeToExpand(SCEVAtScope, (const llvm::SCEV *)a4, (llvm::ScalarEvolution *)1))
          {
            goto LABEL_36;
          }
LABEL_68:
          if (a8 == 3 || !*((_WORD *)SCEVAtScope + 12) || *((_WORD *)SCEVAtScope + 12) == 14)
            goto LABEL_116;
          v157 = (unint64_t)v161;
          v158 = (uint64_t)v161;
          v159 = 8;
          v160 = 0;
          v154 = v156;
          v155 = 0x800000000;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v157, v23);
          v48 = v155;
          if (v155 >= (unint64_t)HIDWORD(v155))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v155 + 1, 8);
            v48 = v155;
          }
          *((_QWORD *)v154 + v48) = v23;
          v49 = __CFADD__((_DWORD)v155, 1);
          v50 = v155 + 1;
          LODWORD(v155) = v155 + 1;
          if (v49)
          {
LABEL_75:
            v51 = 1;
            goto LABEL_76;
          }
          while (1)
          {
            v52 = *((_QWORD *)v154 + v50 - 1);
            LODWORD(v155) = v50 - 1;
            v53 = sub_1C477672C(v147, *(_QWORD *)(v52 + 40));
            v54 = *((_QWORD *)a1 + 8);
            v55 = 72;
            if (v54 == *((_QWORD *)a1 + 7))
              v55 = 76;
            if (v53 == (_QWORD *)(v54 + 8 * *(unsigned int *)((char *)a1 + v55)))
              goto LABEL_92;
            v56 = *(unsigned __int8 *)(v52 + 16) - 33;
            a4 = v146;
            if (v56 <= 0x37)
            {
              if (((1 << (*(_BYTE *)(v52 + 16) - 33)) & 0x808001D0000010) != 0)
                goto LABEL_110;
              if (((1 << (*(_BYTE *)(v52 + 16) - 33)) & 0x8000000000041) == 0)
              {
                if (v56 == 27 && (*(_WORD *)(v52 + 18) & 0x301) != 0)
                  goto LABEL_110;
                goto LABEL_84;
              }
              v61 = *(_QWORD *)(v52 + 64);
              if (!v61 || (*(_BYTE *)(v61 + 17) & 0x30) == 0)
                break;
            }
LABEL_84:
            if ((llvm::Instruction::mayThrow((llvm::Instruction *)v52) & 1) != 0
              || !llvm::Instruction::willReturn((llvm::Instruction *)v52))
            {
              goto LABEL_117;
            }
            for (i = *(_QWORD *)(v52 + 8); i; i = *(_QWORD *)(i + 8))
            {
              v58 = *(_QWORD *)(i + 24);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v157, v58);
              if (v59)
              {
                v60 = v155;
                if (v155 >= (unint64_t)HIDWORD(v155))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v155 + 1, 8);
                  v60 = v155;
                }
                *((_QWORD *)v154 + v60) = v58;
                LODWORD(v155) = v155 + 1;
              }
            }
LABEL_92:
            v50 = v155;
            if (!(_DWORD)v155)
              goto LABEL_75;
          }
          v62 = *(_DWORD *)(v52 + 20);
          if ((v62 & 0x80000000) == 0
            || (v63 = v52 - 32 * (v62 & 0x7FFFFFF), v66 = *(_QWORD *)(v63 - 8), v64 = v63 - 8, (v65 = v66) == 0))
          {
LABEL_97:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v52, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v52, 44))
            {
LABEL_110:
              v51 = 0;
              goto LABEL_111;
            }
            goto LABEL_84;
          }
          v67 = -v65;
          while (1)
          {
            v68 = *(_DWORD *)(*(_QWORD *)(v64 + v67) + 8);
            v69 = v68 > 7;
            v70 = (1 << v68) & 0x83;
            if (v69 || v70 == 0)
              break;
            v67 += 16;
            a4 = v146;
            if (!v67)
              goto LABEL_97;
          }
LABEL_117:
          v51 = 0;
LABEL_76:
          a4 = v146;
LABEL_111:
          if (v154 != v156)
            free(v154);
          if (v158 != v157)
            free((void *)v158);
          if (v51)
          {
LABEL_116:
            v72 = sub_1C5B2BDCC((llvm::ScalarEvolution **)a6, (uint64_t)SCEVAtScope, a1, dword_1ED8377D0, a5, (llvm::Instruction *)v23);
            sub_1C63B06D0((uint64_t)&v148, v14, v20, (uint64_t)SCEVAtScope, v23, v72);
          }
LABEL_36:
          ++v20;
        }
        while (v20 != v16);
LABEL_16:
        v18 = v13 - 24;
        if (!v13)
          v18 = 0;
        v19 = *(unsigned __int8 *)(v18 + 16);
        if (v19 == 83)
          v14 = v18;
        else
          v14 = 0;
      }
      while (v13 && v19 == 83);
LABEL_118:
      v12 = v145 + 8;
    }
    while (v145 + 8 != v143);
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
  if (!LoopPredecessor)
    goto LABEL_126;
  v74 = *(_QWORD *)(LoopPredecessor + 40);
  if (v74 == LoopPredecessor + 40)
    goto LABEL_126;
  if (v74)
    v75 = v74 - 24;
  else
    v75 = 0;
  if (*(_BYTE *)(v75 + 16) == 30)
  {
    if ((*(_DWORD *)(v75 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_126:
      v76 = 0;
      goto LABEL_203;
    }
  }
  else
  {
    v76 = 0;
    switch(*(_BYTE *)(v75 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_203;
      case 0x1E:
        __break(1u);
        goto LABEL_250;
      case 0x1F:
        v77 = (*(_DWORD *)(v75 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_250:
        v77 = (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v77 = *(_DWORD *)(v75 + 80) + 1;
        break;
      default:
        goto LABEL_126;
    }
    if (v77 != 1)
      goto LABEL_126;
  }
  v154 = v156;
  v155 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a1, (uint64_t)&v154);
  v157 = (unint64_t)&v159;
  v158 = 0x800000000;
  sub_1C4EAEA40(a1, (uint64_t)&v157);
  v76 = 0;
  if ((_DWORD)v158 == 1 && (_DWORD)v155 == 1)
  {
    v78 = *(_QWORD *)(*(_QWORD *)v157 + 48);
    v79 = v78 - 24;
    if (v78)
      v80 = v78 - 24;
    else
      v80 = 0;
    if (v78 && *(_BYTE *)(v80 + 16) == 83)
    {
      do
      {
        v81 = *(_DWORD *)(v79 + 20);
        v82 = v81 & 0x7FFFFFF;
        if ((v81 & 0x7FFFFFF) != 0)
        {
          v83 = 0;
          while (1)
          {
            v84 = v79 - 32 * v82;
            if ((v81 & 0x40000000) != 0)
              v84 = *(_QWORD *)(v79 - 8);
            if (*(_QWORD *)(v84 + 32 * *(unsigned int *)(v79 + 60) + 8 * v83) == *(_QWORD *)v154)
              break;
            if (v82 == ++v83)
              goto LABEL_143;
          }
        }
        else
        {
LABEL_143:
          LODWORD(v83) = -1;
        }
        if ((v81 & 0x40000000) != 0)
          v85 = *(_QWORD *)(v79 - 8);
        else
          v85 = v79 - 32 * v82;
        v86 = *(_QWORD *)(v85 + 32 * v83);
        if ((_DWORD)v149)
        {
          v87 = v79 - 32 * v82;
          v88 = 40 * v149;
          v89 = (unsigned int *)((char *)v148 + 8);
          while (1)
          {
            if (*((_QWORD *)v89 - 1) == v79)
            {
              v90 = v87;
              if ((v81 & 0x40000000) != 0)
                v90 = *(_QWORD *)(v79 - 8);
              if (*(_QWORD *)(v90 + 32 * *v89) == v86)
                break;
            }
            v89 += 10;
            v88 -= 40;
            if (!v88)
              goto LABEL_153;
          }
        }
        else
        {
LABEL_153:
          v91 = *(unsigned __int8 *)(v86 + 16) < 0x1Cu || v86 == 0;
          if (!v91 && !llvm::Loop::hasLoopInvariantOperands((uint64_t)a1, v86))
          {
LABEL_197:
            v76 = 0;
            goto LABEL_199;
          }
        }
        v78 = *(_QWORD *)(v78 + 8);
        v79 = v78 - 24;
        if (!v78)
          v79 = 0;
        v92 = *(unsigned __int8 *)(v79 + 16);
        if (v92 != 83)
          v79 = 0;
      }
      while (v78 && v92 == 83);
    }
    v93 = *((_QWORD *)a1 + 4);
    v94 = *((_QWORD *)a1 + 5);
    if (v94 == v93)
    {
      v76 = 1;
    }
    else
    {
      while (2)
      {
        v95 = *(_QWORD *)v93 + 40;
        for (j = *(_QWORD *)(*(_QWORD *)v93 + 48); j != v95; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v97 = j - 24;
          else
            v97 = 0;
          v98 = *(unsigned __int8 *)(v97 + 16) - 33;
          if (v98 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v97 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_197;
            if (((1 << (*(_BYTE *)(v97 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v99 = *(_QWORD *)(v97 + 64);
              if (!v99 || (*(_BYTE *)(v99 + 17) & 0x30) == 0)
              {
                v100 = *(_DWORD *)(v97 + 20);
                if (v100 < 0)
                {
                  v101 = v97 - 32 * (v100 & 0x7FFFFFF);
                  v104 = *(_QWORD *)(v101 - 8);
                  v102 = v101 - 8;
                  v103 = v104;
                  if (v104)
                  {
                    v105 = -v103;
                    do
                    {
                      v106 = *(_DWORD *)(*(_QWORD *)(v102 + v105) + 8);
                      v69 = v106 > 7;
                      v107 = (1 << v106) & 0x83;
                      if (v69 || v107 == 0)
                        goto LABEL_197;
                      v105 += 16;
                    }
                    while (v105);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v97, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v97, 44))
                {
                  goto LABEL_197;
                }
              }
            }
            else if (v98 == 27 && (*(_WORD *)(v97 + 18) & 0x301) != 0)
            {
              goto LABEL_197;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v97) & 1) != 0
            || (llvm::Instruction::willReturn((llvm::Instruction *)v97) & 1) == 0)
          {
            goto LABEL_197;
          }
        }
        v93 += 8;
        v76 = 1;
        if (v93 != v94)
          continue;
        break;
      }
    }
  }
LABEL_199:
  if ((uint64_t *)v157 != &v159)
    free((void *)v157);
  if (v154 != v156)
    free(v154);
LABEL_203:
  v109 = (char *)v148;
  if ((_DWORD)v149)
  {
    v110 = 0;
    v111 = (char *)v148 + 40 * v149;
    if (a8 != 1)
      v76 = 1;
    do
    {
      v112 = *(_QWORD *)v109;
      if ((v76 & 1) != 0 || !v109[32])
      {
        v113 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, *((llvm::Instruction ***)v109 + 2), *(llvm::Type **)v112, *((llvm::Instruction **)v109 + 3));
        v114 = *(_DWORD *)(v112 + 20);
        if ((v114 & 0x40000000) != 0)
          v115 = *(_QWORD *)(v112 - 8);
        else
          v115 = v112 - 32 * (v114 & 0x7FFFFFF);
        v116 = *((unsigned int *)v109 + 2);
        v117 = *(_QWORD *)(v115 + 32 * v116);
        sub_1C6125834(v112, v116, (uint64_t)v113);
        llvm::ScalarEvolution::forgetValue(v146, (llvm::Value *)v112);
        if (!*(_QWORD *)(v117 + 8) && llvm::wouldInstructionBeTriviallyDead(v117, a3))
        {
          v157 = 6;
          v158 = 0;
          v159 = v117;
          if (v117 != -8192 && v117 != -4096 && v117 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v157);
          v121 = (_QWORD *)sub_1C5087E70(a9, (unint64_t)&v157, 1);
          v122 = a9[2];
          v123 = (unint64_t *)(*(_QWORD *)a9 + 24 * v122);
          *v123 = 6;
          v123[1] = 0;
          v124 = (unint64_t)(v123 + 1);
          v125 = v121[2];
          v123[2] = v125;
          if (v125 != -8192 && v125 != -4096)
          {
            if (v125)
            {
              v126 = *v121 & 0xFFFFFFFFFFFFFFF8;
              v123[1] = *(_QWORD *)v126;
              *(_QWORD *)v126 = v123;
              *v123 = v126 | 6;
              v127 = (uint64_t *)v123[1];
              if (v127)
                *v127 = *v127 & 7 | v124;
            }
          }
          a9[2] = v122 + 1;
          if (v159 != -8192 && v159 != -4096 && v159)
          {
            v128 = v157 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF8) = v158;
            if (v158)
            {
              *(_QWORD *)v158 = *(_QWORD *)v158 & 7 | v128;
            }
            else
            {
              v129 = v159;
              v130 = ***(int32x2_t ****)v159;
              v131 = (unint64_t)v130[303];
              if (v131 <= v128)
              {
                v132 = v130[305].u32[0];
                if (v131 + 16 * v132 > v128)
                {
                  v133 = v132 - 1;
                  LODWORD(v134) = v133 & ((v159 >> 4) ^ (v159 >> 9));
                  v135 = (uint64_t *)(v131 + 16 * v134);
                  v136 = *v135;
                  if (v159 == *v135)
                  {
LABEL_240:
                    *v135 = -8192;
                    v130[304] = vadd_s32(v130[304], (int32x2_t)0x1FFFFFFFFLL);
                    v129 = v159;
                  }
                  else
                  {
                    v137 = 1;
                    while (v136 != -4096)
                    {
                      v138 = v134 + v137++;
                      v134 = v138 & v133;
                      v136 = *(_QWORD *)(v131 + 16 * v134);
                      if (v159 == v136)
                      {
                        v135 = (uint64_t *)(v131 + 16 * v134);
                        goto LABEL_240;
                      }
                    }
                  }
                  *(_BYTE *)(v129 + 17) &= ~1u;
                }
              }
            }
          }
        }
        v110 = (v110 + 1);
        if ((*(_DWORD *)(v112 + 20) & 0x7FFFFFF) == 1 && sub_1C4F20780((uint64_t *)a2, v112, (uint64_t)v113))
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v112, (llvm::Value *)v113, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v112 + 40) + 40, (uint64_t ***)v112);
          v118 = *(_QWORD *)(v112 + 24);
          v119 = *(_QWORD **)(v112 + 32);
          *v119 = v118;
          *(_QWORD *)(v118 + 8) = v119;
          *(_QWORD *)(v112 + 24) = 0;
          *(_QWORD *)(v112 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v112);
        }
      }
      v109 += 40;
    }
    while (v109 != v111);
    v109 = (char *)v148;
  }
  else
  {
    v110 = 0;
  }
  *(_QWORD *)(a6 + 496) = 0;
  *(_QWORD *)(a6 + 504) = 0;
  if (v109 != v150)
    free(v109);
  if (v151 != v153)
    free(v151);
  return v110;
}

void sub_1C5F3D7BC(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[32];
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  v11 = v13;
  v12 = 0x400000000;
  v2 = *(uint64_t **)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      v5 = *v2;
      v6 = v12;
      if (v12 >= (unint64_t)HIDWORD(v12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, (uint64_t)v13, v12 + 1, 8);
        v6 = v12;
      }
      *((_QWORD *)v11 + v6) = v5;
      v7 = v12 + 1;
      do
      {
        v8 = *((_QWORD *)v11 + v7 - 1);
        LODWORD(v12) = v7 - 1;
        sub_1C499C3FC((unsigned int *)&v11, *(char **)(v8 + 8), *(char **)(v8 + 16));
        v9 = v15;
        if (v15 >= (unint64_t)HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
          v9 = v15;
        }
        *((_QWORD *)v14 + v9) = v8;
        v10 = v15 + 1;
        LODWORD(v15) = v15 + 1;
        v7 = v12;
      }
      while ((_DWORD)v12);
      sub_1C5F3EFA8(a2, v14, v10);
      LODWORD(v15) = 0;
      ++v2;
    }
    while (v2 != v3);
    if (v11 != v13)
      free(v11);
  }
  if (v14 != v16)
    free(v14);
}

_QWORD *sub_1C5F3D934(uint64_t a1, int32x2_t ****a2)
{
  _QWORD *v3;
  unint64_t v5;
  int32x2_t ****v6;
  int32x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t *****v12;
  int32x2_t ****v13;
  int v14;
  int v15;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  int32x2_t ****v20;
  uint64_t v21;

  v18 = 2;
  v19 = 0;
  v20 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v18);
  v17 = &unk_1E814DA10;
  v21 = a1;
  v3 = sub_1C52E2ED8(a1, &v17);
  if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
  {
    v5 = v18 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = v19;
    if (v19)
    {
      *v19 = *v19 & 7 | v5;
    }
    else
    {
      v6 = v20;
      v7 = ***v20;
      v8 = (unint64_t)v7[303];
      if (v8 <= v5)
      {
        v9 = v7[305].u32[0];
        if (v8 + 16 * v9 > v5)
        {
          v10 = v9 - 1;
          LODWORD(v11) = v10 & ((v20 >> 4) ^ (v20 >> 9));
          v12 = (int32x2_t *****)(v8 + 16 * v11);
          v13 = *v12;
          if (v20 == *v12)
          {
LABEL_18:
            *v12 = (int32x2_t ****)-8192;
            v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
            v6 = v20;
          }
          else
          {
            v14 = 1;
            while (v13 != (int32x2_t ****)-4096)
            {
              v15 = v11 + v14++;
              v11 = v15 & v10;
              v13 = *(int32x2_t *****)(v8 + 16 * v11);
              if (v20 == v13)
              {
                v12 = (int32x2_t *****)(v8 + 16 * v11);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v6 + 17) &= ~1u;
        }
      }
    }
  }
  return v3 + 5;
}

void llvm::hasPartialIVCondition(llvm *this@<X0>, llvm::Loop *a2@<X1>, llvm::MemorySSA *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t ***v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;
  int v19;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  llvm *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const llvm::APInt *v59;
  uint64_t *v60;
  uint64_t v61;
  llvm::ValueHandleBase *v62;
  llvm::ConstantInt *v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  const llvm::APInt *v68;
  uint64_t *v69;
  uint64_t v70;
  llvm::ConstantInt *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  void *v77[2];
  _BYTE v78[32];
  void *v79[2];
  _BYTE v80[32];
  void *v81;
  uint64_t v82;
  _BYTE v83[192];
  void *v84;
  uint64_t v85;
  _BYTE v86[32];
  void *v87;
  unsigned int v88;
  unsigned int v89;
  _BYTE v90[32];
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[6];
  __int128 v94;
  _OWORD v95[2];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v7 = **((_QWORD **)this + 4);
  v8 = *(_QWORD *)(v7 + 40);
  if (v8 == v7 + 40)
    goto LABEL_69;
  v9 = v8 ? v8 - 24 : 0;
  v10 = *(unsigned __int8 *)(v9 + 16) - 40;
  v11 = v10 >= 0xFFFFFFF5 ? (uint64_t ***)v9 : 0;
  if (!v8)
    goto LABEL_69;
  v12 = *((_BYTE *)v11 + 16) == 30 && v10 >= 0xFFFFFFF5;
  if (!v12 || (*((_DWORD *)v11 + 5) & 0x7FFFFFF) != 3)
    goto LABEL_69;
  v13 = (uint64_t)*(v11 - 12);
  v14 = *(unsigned __int8 *)(v13 + 16);
  v15 = v13 && v14 >= 0x1C;
  v16 = v15 && v14 - 83 >= 0xFFFFFFFE;
  if (!v16
    || ((v19 = (int)a2,
         v21 = (char *)this + 56,
         v22 = sub_1C477672C((uint64_t)this + 56, *(_QWORD *)(v13 + 40)),
         v23 = *((_QWORD *)this + 8),
         v23 != *((_QWORD *)this + 7))
      ? (v24 = (char *)this + 72)
      : (v24 = (char *)this + 76),
        v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)v24)))
  {
LABEL_69:
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  v91 = v93;
  v93[0] = v13;
  v92 = 0x600000001;
  v87 = v90;
  v89 = 4;
  v25 = -64;
  v26 = 16;
  do
  {
    *(void **)((char *)&v87 + v26) = *(void **)(v13 + v25);
    v26 += 8;
    v25 += 32;
  }
  while (v25);
  v84 = v86;
  v85 = 0x400000000;
  v81 = v83;
  v82 = 0x400000000;
  v27 = 2;
  do
  {
    while (1)
    {
      v28 = *((_QWORD *)v87 + --v27);
      v88 = v27;
      if (v28)
        v29 = *(unsigned __int8 *)(v28 + 16) >= 0x1Cu;
      else
        v29 = 0;
      if (!v29)
        goto LABEL_43;
      v30 = sub_1C477672C((uint64_t)v21, *(_QWORD *)(v28 + 40));
      v31 = *((_QWORD *)this + 8);
      v32 = v31 == *((_QWORD *)this + 7) ? (llvm *)((char *)this + 76) : (llvm *)((char *)this + 72);
      if (v30 != (_QWORD *)(v31 + 8 * *(unsigned int *)v32))
        break;
      v27 = v88;
LABEL_43:
      if (!v27)
        goto LABEL_71;
    }
    v33 = *(unsigned __int8 *)(v28 + 16);
    if (v33 == 60)
    {
      if ((*(_WORD *)(v28 + 18) & 0x381) != 0)
        goto LABEL_86;
    }
    else if (v33 != 62)
    {
      goto LABEL_86;
    }
    v34 = v92;
    if (v92 >= (unint64_t)HIDWORD(v92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v93, v92 + 1, 8);
      v34 = v92;
    }
    v91[v34] = v28;
    LODWORD(v92) = v92 + 1;
    v35 = *(_DWORD *)(a4 + 40);
    if (v35)
    {
      v36 = *(_QWORD *)(a4 + 24);
      v37 = v35 - 1;
      v38 = (v35 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v39 = *(_QWORD *)(v36 + 16 * v38);
      if (v28 == v39)
      {
LABEL_53:
        v42 = *(_QWORD *)(v36 + 16 * v38 + 8);
        if (v42)
        {
          if (*(_BYTE *)(v42 + 16) != 25)
            goto LABEL_86;
          v43 = *(_QWORD *)(v42 - 32);
          v44 = v85;
          if (v85 >= (unint64_t)HIDWORD(v85))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v85 + 1, 8);
            v44 = v85;
          }
          *((_QWORD *)v84 + v44) = v43;
          LODWORD(v85) = v85 + 1;
          llvm::MemoryLocation::getOrNone((uint64_t ***)v28, (uint64_t)&v94);
          v72 = v94;
          v73 = v95[0];
          v74 = v95[1];
          v45 = (_OWORD *)sub_1C52B9D4C((uint64_t)&v81, (unint64_t)&v72, 1);
          v46 = (char *)v81 + 48 * v82;
          v48 = v45[1];
          v47 = v45[2];
          *v46 = *v45;
          v46[1] = v48;
          v46[2] = v47;
          LODWORD(v82) = v82 + 1;
        }
      }
      else
      {
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v38 + v40++;
          v38 = v41 & v37;
          v39 = *(_QWORD *)(v36 + 16 * v38);
          if (v28 == v39)
            goto LABEL_53;
        }
      }
    }
    v49 = *(_DWORD *)(v28 + 20);
    if ((v49 & 0x40000000) != 0)
    {
      v51 = *(uint64_t **)(v28 - 8);
      v50 = v49 & 0x7FFFFFF;
    }
    else
    {
      v50 = v49 & 0x7FFFFFF;
      v51 = (uint64_t *)(v28 - 32 * v50);
    }
    v52 = v88;
    v53 = v50 + v88;
    if (v53 > v89)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v90, v53, 8);
      v52 = v88;
      if (!v50)
        goto LABEL_65;
    }
    else if (!v50)
    {
      goto LABEL_65;
    }
    v54 = (char *)v87 + 8 * v52;
    v55 = 32 * v50;
    do
    {
      v56 = *v51;
      v51 += 4;
      *v54++ = v56;
      v55 -= 32;
    }
    while (v55);
LABEL_65:
    v27 = v52 + v50;
    v88 = v27;
  }
  while (v27);
LABEL_71:
  if (!(_DWORD)v92)
  {
LABEL_86:
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    goto LABEL_97;
  }
  *(_QWORD *)&v94 = v95;
  *((_QWORD *)&v94 + 1) = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(this, (uint64_t)&v94);
  *(_QWORD *)&v72 = this;
  *((_QWORD *)&v72 + 1) = a3;
  *(_QWORD *)&v73 = &v81;
  *((_QWORD *)&v73 + 1) = &v94;
  *(_QWORD *)&v74 = &v91;
  DWORD2(v74) = v19;
  v57 = (uint64_t)*(v11 - 4);
  if ((uint64_t **)v57 == *(v11 - 8))
    goto LABEL_94;
  v58 = **((_QWORD **)this + 4);
  v79[0] = v80;
  v79[1] = (void *)0x400000000;
  if ((_DWORD)v85)
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v79, (uint64_t)&v84);
  sub_1C5F3E16C(a5, (uint64_t)&v72, v57, v58, (uint64_t)v79);
  if (v79[0] != v80)
    free(v79[0]);
  if (*(_BYTE *)(a5 + 88))
  {
    v60 = **v11;
    v61 = *v60;
    v62 = *(llvm::ValueHandleBase **)(*v60 + 1560);
    if (!v62)
    {
      v63 = *(llvm::ConstantInt **)(v61 + 1888);
      v64 = *(_DWORD *)(v61 + 1896);
      v76 = v64 >> 8;
      if (v64 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v75, 1, 0);
      }
      else
      {
        if (v64 <= 0xFF)
          v65 = 0;
        else
          v65 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v64);
        v75 = v65 & 1;
      }
      v62 = llvm::ConstantInt::get(v63, (llvm::LLVMContext *)&v75, v59);
      if (v76 >= 0x41 && v75)
        MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
      *(_QWORD *)(v61 + 1560) = v62;
    }
    goto LABEL_93;
  }
  v66 = (uint64_t)*(v11 - 8);
  v67 = **((_QWORD **)this + 4);
  v77[0] = v78;
  v77[1] = (void *)0x400000000;
  if ((_DWORD)v85)
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v77, (uint64_t)&v84);
  sub_1C5F3E16C(a5, (uint64_t)&v72, v66, v67, (uint64_t)v77);
  if (v77[0] != v78)
    free(v77[0]);
  if (!*(_BYTE *)(a5 + 88))
  {
LABEL_94:
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    v69 = **v11;
    v70 = *v69;
    v62 = *(llvm::ValueHandleBase **)(*v69 + 1568);
    if (!v62)
    {
      v71 = *(llvm::ConstantInt **)(v70 + 1888);
      v76 = *(_DWORD *)(v70 + 1896) >> 8;
      if (v76 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v75, 0, 0);
      else
        v75 = 0;
      v62 = llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v75, v68);
      if (v76 >= 0x41 && v75)
        MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
      *(_QWORD *)(v70 + 1568) = v62;
    }
LABEL_93:
    *(_QWORD *)(a5 + 64) = v62;
  }
  if ((_OWORD *)v94 != v95)
    free((void *)v94);
LABEL_97:
  if (v81 != v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  if (v87 != v90)
    free(v87);
  if (v91 != v93)
    free(v91);
}

void sub_1C5F3E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;
  const llvm::Loop *v8;
  char *v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  char v24;
  unsigned int v25;
  uint64_t v26;
  llvm *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _BOOL4 MustProgress;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  llvm *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  BOOL v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  unsigned int v105;
  int v106;
  uint64_t v108;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  int v113;
  _BYTE v114[32];
  char *v115;
  char *v116;
  uint64_t v117;
  int v118;
  _BYTE v119[32];
  __int128 v120[3];
  char v121;
  void *v122;
  uint64_t v123;
  _QWORD v124[4];
  char *v125;
  uint64_t v126;
  _BYTE v127[48];
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v125 = v127;
  v126 = 0x600000000;
  *(_QWORD *)&v128 = 0;
  v7 = 1;
  BYTE8(v128) = 1;
  v129 = 0;
  v122 = v124;
  v124[0] = a3;
  v124[1] = a4;
  v123 = 0x400000002;
  v115 = v119;
  v116 = v119;
  v117 = 4;
  v118 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v115, a4);
  v9 = (char *)(a4 + 40);
  i = *(char **)(a4 + 48);
  if (i == (char *)(a4 + 40))
    goto LABEL_30;
  while (1)
  {
    if (i)
      v11 = (uint64_t)(i - 24);
    else
      v11 = 0;
    v12 = *(unsigned __int8 *)(v11 + 16) - 33;
    if (v12 > 0x37)
      goto LABEL_9;
    if (((1 << (*(_BYTE *)(v11 + 16) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_29;
    if (((1 << (*(_BYTE *)(v11 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v12 == 27 && (*(_WORD *)(v11 + 18) & 0x301) != 0)
        goto LABEL_29;
      goto LABEL_9;
    }
    v13 = *(_QWORD *)(v11 + 64);
    if (v13 && (*(_BYTE *)(v13 + 17) & 0x30) != 0)
      goto LABEL_9;
    v14 = *(_DWORD *)(v11 + 20);
    if (v14 < 0)
    {
      v15 = v11 - 32 * (v14 & 0x7FFFFFF);
      v18 = *(_QWORD *)(v15 - 8);
      v16 = v15 - 8;
      v17 = v18;
      if (v18)
        break;
    }
LABEL_16:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44))
    {
      goto LABEL_29;
    }
LABEL_9:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v11) & 1) != 0
      || (llvm::Instruction::willReturn((llvm::Instruction *)v11) & 1) == 0)
    {
      goto LABEL_29;
    }
    i = (char *)*((_QWORD *)i + 1);
    if (i == v9)
    {
      v7 = 1;
      goto LABEL_30;
    }
  }
  v19 = -v17;
  while (1)
  {
    v20 = *(_DWORD *)(*(_QWORD *)(v16 + v19) + 8);
    v21 = v20 > 7;
    v22 = (1 << v20) & 0x83;
    if (v21 || v22 == 0)
      break;
    v19 += 16;
    if (!v19)
      goto LABEL_16;
  }
LABEL_29:
  v7 = 0;
LABEL_30:
  if (BYTE8(v128))
    v24 = v7;
  else
    v24 = 0;
  BYTE8(v128) = v24;
  v25 = v123;
  if ((_DWORD)v123)
  {
    while (2)
    {
      while (1)
      {
        v26 = *((_QWORD *)v122 + v25 - 1);
        LODWORD(v123) = v25 - 1;
        v27 = *(llvm **)a2;
        v28 = sub_1C477672C(*(_QWORD *)a2 + 56, v26);
        v29 = *((_QWORD *)v27 + 8);
        v30 = v29 == *((_QWORD *)v27 + 7) ? 76 : 72;
        if (v28 != (_QWORD *)(v29 + 8 * *(unsigned int *)((char *)v27 + v30)))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v115, v26);
          if ((_BYTE)v8)
            break;
        }
        v25 = v123;
        if (!(_DWORD)v123)
          goto LABEL_101;
      }
      v31 = (char *)(v26 + 40);
      for (i = *(char **)(v26 + 48); i != v31; i = (char *)*((_QWORD *)i + 1))
      {
        if (i)
          v32 = (uint64_t)(i - 24);
        else
          v32 = 0;
        v33 = *(unsigned __int8 *)(v32 + 16) - 33;
        if (v33 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v32 + 16) - 33)) & 0x808001D0000010) != 0)
            goto LABEL_69;
          if (((1 << (*(_BYTE *)(v32 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v34 = *(_QWORD *)(v32 + 64);
            if (!v34 || (*(_BYTE *)(v34 + 17) & 0x30) == 0)
            {
              v35 = *(_DWORD *)(v32 + 20);
              if (v35 < 0)
              {
                v36 = v32 - 32 * (v35 & 0x7FFFFFF);
                v39 = *(_QWORD *)(v36 - 8);
                v37 = v36 - 8;
                v38 = v39;
                if (v39)
                {
                  v40 = -v38;
                  while (1)
                  {
                    v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
                    v21 = v41 > 7;
                    v42 = (1 << v41) & 0x83;
                    if (v21 || v42 == 0)
                      break;
                    v40 += 16;
                    if (!v40)
                      goto LABEL_54;
                  }
LABEL_69:
                  v44 = 0;
                  goto LABEL_71;
                }
              }
LABEL_54:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v32, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v32, 44))
              {
                goto LABEL_69;
              }
            }
          }
          else if (v33 == 27 && (*(_WORD *)(v32 + 18) & 0x301) != 0)
          {
            goto LABEL_69;
          }
        }
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v32) & 1) != 0
          || (llvm::Instruction::willReturn((llvm::Instruction *)v32) & 1) == 0)
        {
          goto LABEL_69;
        }
      }
      v44 = 1;
LABEL_71:
      if (!BYTE8(v128))
        v44 = 0;
      BYTE8(v128) = v44;
      v45 = *(_QWORD **)v31;
      if (*(char **)v31 == v31)
      {
LABEL_82:
        v46 = 0;
        v51 = 0;
      }
      else
      {
        v46 = v45 - 3;
        if (v45)
          v47 = v45 - 3;
        else
          v47 = 0;
        v48 = *((unsigned __int8 *)v47 + 16);
        v49 = v48 - 29;
        if (v48 != 30)
        {
          v50 = 0;
          switch(v49)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_81;
            case 1:
LABEL_207:
              __break(1u);
              goto LABEL_208;
            case 2:
              v50 = (*((_DWORD *)v47 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_81;
            case 3:
            case 9:
              v50 = (*((_DWORD *)v47 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_81;
            case 4:
              v50 = 2;
              goto LABEL_81;
            case 7:
              v50 = *((_WORD *)v47 + 9) & 1;
              goto LABEL_81;
            case 8:
              v50 = 1;
              goto LABEL_81;
            case 10:
              v50 = *((_DWORD *)v47 + 20) + 1;
              goto LABEL_81;
            default:
              goto LABEL_82;
          }
        }
        if ((*((_DWORD *)v47 + 5) & 0x7FFFFFF) == 3)
          v50 = 2;
        else
          v50 = 1;
LABEL_81:
        v51 = v50;
      }
      v52 = v123;
      v53 = v123 + (uint64_t)(int)v51;
      if (v53 <= HIDWORD(v123))
      {
        if (!(_DWORD)v51)
          goto LABEL_94;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v124, v53, 8);
        v52 = v123;
        if (!(_DWORD)v51)
          goto LABEL_94;
      }
      v54 = 0;
      v55 = 0;
      v56 = (char *)v122 + 8 * v52;
      v57 = *((unsigned __int8 *)v46 + 16);
      v58 = v46 - 8;
      do
      {
        if (v57 != 30)
          __asm { BR              X1 }
        *v56++ = v46[-4 * v55++ - 4];
        v54 += 2;
        v58 += 4;
      }
      while (2 * v51 != v54);
LABEL_94:
      v25 = v52 + v51;
      LODWORD(v123) = v25;
      if (!v25)
        break;
      continue;
    }
  }
LABEL_101:
  if ((HIDWORD(v117) - v118) <= 1)
  {
    i = v127;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_199;
  }
  v110 = v114;
  v111 = v114;
  v112 = 4;
  v113 = 0;
  v59 = *(_DWORD *)(a5 + 8);
  if (!v59)
  {
LABEL_124:
    MustProgress = llvm::isMustProgress(*(llvm **)a2, v8);
    if (BYTE8(v128))
      v74 = MustProgress;
    else
      v74 = 0;
    BYTE8(v128) = v74;
    if (v74)
    {
      v75 = *(_QWORD *)(a2 + 24);
      v76 = *(unsigned int *)(v75 + 8);
      if ((_DWORD)v76)
      {
        v77 = *(uint64_t **)v75;
        v108 = *(_QWORD *)v75 + 8 * v76;
        do
        {
          v78 = *v77;
          v79 = (char *)sub_1C477672C((uint64_t)&v115, *v77);
          if (v116 == v115)
            v80 = (uint64_t *)((char *)&v117 + 4);
          else
            v80 = &v117;
          if (v79 != &v116[8 * *(unsigned int *)v80])
          {
            v81 = *(_QWORD *)(v78 + 40);
            if (v81 != v78 + 40)
            {
              if (v81)
                v82 = v81 - 24;
              else
                v82 = 0;
              v83 = *(unsigned __int8 *)(v82 + 16);
              v84 = v83 - 29;
              if (v83 == 30)
              {
                if ((*(_DWORD *)(v82 + 20) & 0x7FFFFFF) == 3)
                  v85 = 2;
                else
                  v85 = 1;
LABEL_142:
                v86 = 0;
                i = 0;
                v87 = v82 - 64;
                v88 = (char *)v85;
                while (1)
                {
                  v89 = *(unsigned __int8 *)(v82 + 16);
                  if (v89 != 30)
                    __asm { BR              X9 }
                  v90 = *(_QWORD *)(v82 - 32 - 32 * (_QWORD)i);
                  v91 = *(llvm **)a2;
                  v92 = sub_1C477672C(*(_QWORD *)a2 + 56, v90);
                  v93 = *((_QWORD *)v91 + 8);
                  v94 = 72;
                  if (v93 == *((_QWORD *)v91 + 7))
                    v94 = 76;
                  if (v92 == (_QWORD *)(v93 + 8 * *(unsigned int *)((char *)v91 + v94)))
                  {
                    if (*(_QWORD *)(v90 + 40) != v90 + 40)
                    {
                      v95 = *(_QWORD *)(v90 + 48);
                      if (v95)
                      {
                        if (*(_BYTE *)(v95 - 8) == 83)
                        {
                          BYTE8(v128) = 0;
                          goto LABEL_165;
                        }
                      }
                    }
                    if (v129)
                      v96 = v129 == v90;
                    else
                      v96 = 1;
                    v97 = !v96 || BYTE8(v128) == 0;
                    v98 = !v97;
                    BYTE8(v128) = v98;
                    if (v97)
                      goto LABEL_165;
                    v129 = v90;
                  }
                  ++i;
                  v86 += 2;
                  v87 += 32;
                  if (v88 == i)
                    goto LABEL_165;
                }
              }
              v85 = 2;
              switch(v84)
              {
                case 1:
                  goto LABEL_207;
                case 2:
                  v85 = (*(_DWORD *)(v82 + 20) >> 1) & 0x3FFFFFF;
                  break;
                case 3:
                case 9:
                  v85 = (*(_DWORD *)(v82 + 20) & 0x7FFFFFF) - 1;
                  break;
                case 4:
                  goto LABEL_142;
                case 7:
                  v85 = *(_WORD *)(v82 + 18) & 1;
                  break;
                case 8:
                  v85 = 1;
                  goto LABEL_142;
                case 10:
                  v85 = *(_DWORD *)(v82 + 80) + 1;
                  break;
                default:
                  goto LABEL_165;
              }
              if (v85)
                goto LABEL_142;
            }
          }
LABEL_165:
          ++v77;
        }
        while (v77 != (uint64_t *)v108);
      }
    }
    if (!v129)
      BYTE8(v128) = 0;
    v99 = *(_QWORD *)(a2 + 32);
    i = v127;
    if (&v125 == (char **)v99)
    {
LABEL_208:
      LODWORD(v100) = v126;
      goto LABEL_185;
    }
    v100 = *(unsigned int *)(v99 + 8);
    v101 = v126;
    if (v126 >= v100)
    {
      if ((_DWORD)v100)
        memmove(v125, *(const void **)v99, 8 * v100);
      goto LABEL_184;
    }
    if (HIDWORD(v126) < v100)
    {
      LODWORD(v126) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v100, 8);
    }
    else if ((_DWORD)v126)
    {
      memmove(v125, *(const void **)v99, 8 * v126);
LABEL_182:
      v102 = *(unsigned int *)(v99 + 8);
      if (v101 != v102)
        memcpy(&v125[8 * v101], (const void *)(*(_QWORD *)v99 + 8 * v101), *(_QWORD *)v99 + 8 * v102 - (*(_QWORD *)v99 + 8 * v101));
LABEL_184:
      LODWORD(v126) = v100;
LABEL_185:
      v103 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x600000000;
      if (!(_DWORD)v100 || &v125 == (char **)a1)
        goto LABEL_195;
      if (v125 != i)
      {
        *(_QWORD *)a1 = v125;
        v106 = HIDWORD(v126);
        *(_DWORD *)(a1 + 8) = v100;
        *(_DWORD *)(a1 + 12) = v106;
        v125 = i;
        HIDWORD(v126) = 0;
LABEL_194:
        LODWORD(v126) = 0;
LABEL_195:
        *(_OWORD *)(a1 + 64) = v128;
        *(_QWORD *)(a1 + 80) = v129;
        *(_BYTE *)(a1 + 88) = 1;
        goto LABEL_197;
      }
      if (v100 < 7)
      {
        v104 = i;
        v105 = v100;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (uint64_t)v103, v100, 8);
        v105 = v126;
        if (!(_DWORD)v126)
          goto LABEL_193;
        v104 = v125;
        v103 = *(void **)a1;
      }
      memcpy(v103, v104, 8 * v105);
LABEL_193:
      *(_DWORD *)(a1 + 8) = v100;
      goto LABEL_194;
    }
    v101 = 0;
    goto LABEL_182;
  }
  while (2)
  {
    v60 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v59 - 8);
    *(_DWORD *)(a5 + 8) = v59 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v110, v60);
    if (!(_BYTE)v8)
      goto LABEL_122;
    v61 = (char *)sub_1C477672C((uint64_t)&v115, *(_QWORD *)(v60 + 64));
    v62 = v116 == v115 ? (uint64_t *)((char *)&v117 + 4) : &v117;
    if (v61 == &v116[8 * *(unsigned int *)v62])
      goto LABEL_122;
    if ((HIDWORD(v112) - v113) >= *(_DWORD *)(a2 + 40))
      goto LABEL_196;
    v63 = *(unsigned __int8 *)(v60 + 16);
    if (v63 == 25)
      goto LABEL_122;
    if (v63 != 26 || (v64 = *(_QWORD *)(a2 + 16), v65 = *(unsigned int *)(v64 + 8), !(_DWORD)v65))
    {
LABEL_116:
      i = *(char **)(v60 + 8);
      if (i)
      {
        v59 = *(_DWORD *)(a5 + 8);
        do
        {
          v72 = *((_QWORD *)i + 3);
          if (v59 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v59 + 1, 8);
            v59 = *(_DWORD *)(a5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v59) = v72;
          v59 = *(_DWORD *)(a5 + 8) + 1;
          *(_DWORD *)(a5 + 8) = v59;
          i = (char *)*((_QWORD *)i + 1);
        }
        while (i);
LABEL_123:
        if (!v59)
          goto LABEL_124;
        continue;
      }
LABEL_122:
      v59 = *(_DWORD *)(a5 + 8);
      goto LABEL_123;
    }
    break;
  }
  v66 = *(_QWORD *)(a2 + 8);
  v67 = *(__int128 **)v64;
  v68 = 48 * v65;
  while (1)
  {
    v69 = *(_QWORD *)(v60 + 72);
    v70 = *v67;
    v71 = v67[2];
    v120[1] = v67[1];
    v120[2] = v71;
    v120[0] = v70;
    v121 = 1;
    if ((sub_1C4D90C64(v66, v69, v120) & 2) != 0)
      break;
    v67 += 3;
    v68 -= 48;
    if (!v68)
      goto LABEL_116;
  }
LABEL_196:
  i = v127;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
LABEL_197:
  if (v111 != v110)
    free(v111);
LABEL_199:
  if (v116 != v115)
    free(v116);
  if (v122 != v124)
    free(v122);
  if (v125 != i)
    free(v125);
}

uint64_t ****sub_1C5F3ED78(uint64_t ****a1, uint64_t a2, llvm::Instruction *a3, llvm::SCEVExpander *a4)
{
  llvm::Type *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t ****result;

  v8 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)a3 + 1912), (llvm::Type *)*(unsigned int *)(a2 + 40));
  v9 = llvm::SCEVExpander::expandCodeForImpl(a4, *(llvm::Instruction ***)(a2 + 8), v8, a3);
  v10 = llvm::SCEVExpander::expandCodeForImpl(a4, *(llvm::Instruction ***)a2, v8, a3);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t ***)6;
  if (v9)
  {
    a1[2] = (uint64_t ***)v9;
    if (((unint64_t)v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)a1);
  }
  a1[3] = (uint64_t ***)6;
  result = a1 + 3;
  a1[4] = 0;
  a1[5] = 0;
  if (v10)
  {
    a1[5] = (uint64_t ***)v10;
    if (((unint64_t)v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      return llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)result);
  }
  return result;
}

unint64_t sub_1C5F3EE64(unsigned int *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = a1[2];
  if (v3 >= a1[3])
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 96 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63B1240(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63B1240(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5F3EECC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v9 = (char *)&v17;
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v14 = v7 + 1;
    v15 = v8 + 40 * v7 > (unint64_t)&v17;
    if (v8 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 40);
      v8 = *(_QWORD *)a1;
      v9 = &v16[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 40);
      v8 = *(_QWORD *)a1;
      v9 = (char *)&v17;
    }
  }
  v10 = v8 + 40 * *(unsigned int *)(a1 + 8);
  v11 = *(_OWORD *)v9;
  v12 = *((_OWORD *)v9 + 1);
  *(_QWORD *)(v10 + 32) = *((_QWORD *)v9 + 4);
  *(_OWORD *)v10 = v11;
  *(_OWORD *)(v10 + 16) = v12;
  LODWORD(v10) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + 40 * v10 - 40;
}

char *sub_1C5F3EFA8(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (a3)
  {
    v3 = (uint64_t)result;
    v4 = (uint64_t *)(result + 72);
    v5 = *((unsigned int *)result + 20);
    result = (char *)sub_1C486AF08((unsigned int *)result + 18, a2, &a2[8 * a3]);
    v6 = *(unsigned int *)(v3 + 80);
    if (v6 > v5)
    {
      v7 = v6 - 1;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8 * v7);
        v13 = v7;
        result = (char *)sub_1C5B4D320(v3, &v12, &v13, (uint64_t)&v14);
        if (!v15)
        {
          v9 = v14;
          v10 = *(_QWORD *)(v14 + 8);
          v11 = *v4;
          if (v10 >= v5)
          {
            *(_QWORD *)(v11 + 8 * v7) = 0;
          }
          else
          {
            *(_QWORD *)(v11 + 8 * v10) = 0;
            *(_QWORD *)(v9 + 8) = v7;
          }
        }
      }
      while (v7-- > v5);
    }
  }
  return result;
}

void llvm::LoopVersioning::addPHINodes(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  llvm::Value *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::User **v45;
  uint64_t v46;
  llvm::User *v47;
  uint64_t ExitingBlock;
  uint64_t v49;
  llvm::ValueSymbolTable *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t ExitBlock;
  void *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int16 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  ExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(*a1);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)a2;
    v68 = *(_QWORD *)a2 + 8 * v4;
    while (1)
    {
      v6 = *v5;
      v7 = *(uint64_t **)(ExitBlock + 48);
      v8 = v7 - 3;
      if (v7)
        v9 = v7 - 3;
      else
        v9 = 0;
      if (v7)
      {
        v10 = *((unsigned __int8 *)v9 + 16);
        v11 = *(_QWORD *)(ExitBlock + 48);
        v12 = v10 == 83;
        do
        {
          if (!v12)
            break;
          v13 = *((_DWORD *)v8 + 5);
          if ((v13 & 0x40000000) != 0)
            v14 = (uint64_t *)*(v8 - 1);
          else
            v14 = &v8[-4 * (v13 & 0x7FFFFFF)];
          if (*v14 == v6)
            goto LABEL_50;
          v11 = *(_QWORD *)(v11 + 8);
          v8 = (uint64_t *)(v11 - 24);
          if (!v11)
            v8 = 0;
          v15 = *((unsigned __int8 *)v8 + 16);
          v12 = v15 == 83;
          if (v15 != 83)
            v8 = 0;
        }
        while (v11);
      }
      v16 = *(uint64_t ***)v6;
      if ((*(_BYTE *)(v6 + 23) & 0x10) != 0)
        break;
      v26 = 0;
      v27 = &byte_1C871356D;
LABEL_28:
      v73 = 773;
      v70 = v27;
      v71 = v26;
      v72[0] = ".lver";
      v29 = operator new(0x48uLL);
      v30 = v29;
      v29[1] = v16;
      v31 = (llvm::Value *)(v29 + 1);
      *v29 = 0;
      v29[2] = 0;
      v29[3] = 0x4000000000000053;
      *((_OWORD *)v29 + 2) = 0u;
      v32 = (char *)(v29 + 4);
      *((_OWORD *)v29 + 3) = 0u;
      *((_DWORD *)v29 + 16) = 0;
      if (v7)
      {
        v37 = v7[2];
        v29[6] = v37;
        *(_WORD *)(v37 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v29 + 31) & 0x10) != 0)
        {
          v49 = *(_QWORD *)(v37 + 56);
          if (v49)
          {
            v50 = *(llvm::ValueSymbolTable **)(v49 + 104);
            if (v50)
              llvm::ValueSymbolTable::reinsertValue(v50, v31);
          }
        }
        v38 = *v7;
        v30[4] = *v7;
        v30[5] = v7;
        *(_QWORD *)(v38 + 8) = v32;
        *v7 = (uint64_t)v32;
      }
      *((_DWORD *)v30 + 17) = 2;
      llvm::Value::setName((uint64_t ***)v31, (uint64_t)&v70);
      v33 = *((unsigned int *)v30 + 17);
      v34 = operator new(40 * v33);
      *v30 = v34;
      if ((_DWORD)v33)
      {
        v35 = &v34[4 * v33];
        do
        {
          *v34 = 0;
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = v31;
          v34 += 4;
        }
        while (v34 != v35);
      }
      v70 = v72;
      v71 = 0x800000000;
      v36 = *(_QWORD *)(v6 + 8);
      if (v36)
      {
        do
        {
          v39 = *(_QWORD *)(v36 + 24);
          v40 = (uint64_t)*a1;
          v41 = sub_1C477672C((uint64_t)(*a1 + 7), *(_QWORD *)(v39 + 40));
          v42 = *(_QWORD *)(v40 + 64);
          if (v42 == *(_QWORD *)(v40 + 56))
            v43 = 76;
          else
            v43 = 72;
          if (v41 == (_QWORD *)(v42 + 8 * *(unsigned int *)(v40 + v43)))
          {
            v44 = v71;
            if (v71 >= (unint64_t)HIDWORD(v71))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v71 + 1, 8);
              v44 = v71;
            }
            *((_QWORD *)v70 + v44) = v39;
            LODWORD(v71) = v71 + 1;
          }
          v36 = *(_QWORD *)(v36 + 8);
        }
        while (v36);
        if ((_DWORD)v71)
        {
          v45 = (llvm::User **)v70;
          v46 = 8 * v71;
          do
          {
            v47 = *v45++;
            llvm::User::replaceUsesOfWith(v47, (llvm::Value *)v6, v31);
            v46 -= 8;
          }
          while (v46);
        }
      }
      ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(*a1);
      sub_1C477667C(v31, v6, ExitingBlock);
      if (v70 != v72)
        free(v70);
LABEL_50:
      if (++v5 == (uint64_t *)v68)
        goto LABEL_55;
    }
    v17 = **v16;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v21 = (uint64_t *)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 == v6)
      {
LABEL_27:
        v25 = (_QWORD *)v21[1];
        v28 = *v25;
        v27 = (char *)(v25 + 2);
        v26 = v28;
        goto LABEL_28;
      }
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(_QWORD *)(v18 + 16 * v20);
        if (v22 == v6)
        {
          v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_27;
        }
      }
    }
    v21 = (uint64_t *)(v18 + 16 * v19);
    goto LABEL_27;
  }
LABEL_55:
  v51 = *(_QWORD *)(ExitBlock + 48);
  v52 = (_DWORD *)(v51 - 24);
  if (v51)
    v53 = v51 - 24;
  else
    v53 = 0;
  if (v51)
  {
    v54 = *(_BYTE *)(v53 + 16) == 83;
    while (1)
    {
      if (!v54)
        return;
      v55 = v52[5];
      if ((v55 & 0x40000000) != 0)
        v56 = (uint64_t *)*((_QWORD *)v52 - 1);
      else
        v56 = (uint64_t *)&v52[-8 * (v55 & 0x7FFFFFF)];
      v57 = *v56;
      v58 = a1[2];
      v59 = *((unsigned int *)a1 + 8);
      if (!(_DWORD)v59)
        goto LABEL_71;
      v60 = ((v57 >> 4) ^ (v57 >> 9)) & ((_DWORD)v59 - 1);
      v61 = &v58[8 * v60];
      v62 = v61[3];
      if (v57 != v62)
        break;
LABEL_72:
      if (v61 != &v58[8 * v59])
        v57 = v61[7];
      v65 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a1[1]);
      sub_1C477667C((llvm::PHINode *)v52, v57, v65);
      v51 = *(_QWORD *)(v51 + 8);
      v66 = v51 - 24;
      if (!v51)
        v66 = 0;
      v67 = *(unsigned __int8 *)(v66 + 16);
      v54 = v67 == 83;
      if (v67 == 83)
        v52 = (_DWORD *)v66;
      else
        v52 = 0;
      if (!v51)
        return;
    }
    v63 = 1;
    while (v62 != -4096)
    {
      v64 = v60 + v63++;
      v60 = v64 & (v59 - 1);
      v61 = &v58[8 * v60];
      v62 = v61[3];
      if (v57 == v62)
        goto LABEL_72;
    }
LABEL_71:
    v61 = &v58[8 * v59];
    goto LABEL_72;
  }
}

uint64_t llvm::LoopVersioning::prepareNoAliasMetadata(llvm::LoopVersioning *this)
{
  uint64_t v2;
  uint64_t *v3;
  llvm::MDNode *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::MDNode *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t Impl;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[5];

  v43[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 30) + 8);
  v3 = ****(uint64_t *****)(*(_QWORD *)this + 32);
  v39 = v3;
  v4 = llvm::MDBuilder::createAnonymousAARoot(&v39, "LVerDomain", 0xAuLL, 0);
  v5 = *(_DWORD *)(v2 + 160);
  if (v5)
  {
    v6 = (uint64_t)v4;
    v7 = *(_QWORD *)(v2 + 152);
    v8 = v7 + 48 * v5;
    do
    {
      v9 = llvm::MDBuilder::createAnonymousAARoot(&v39, 0, 0, v6);
      v40 = v7;
      sub_1C61DF1DC((uint64_t *)this + 24, &v40)[1] = v9;
      v10 = *(unsigned int *)(v7 + 24);
      if ((_DWORD)v10)
      {
        v11 = *(unsigned int **)(v7 + 16);
        v12 = 4 * v10;
        do
        {
          v13 = *v11++;
          v40 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + ((unint64_t)v13 << 6) + 16);
          sub_1C61DF1DC((uint64_t *)this + 21, &v40)[1] = v7;
          v12 -= 4;
        }
        while (v12);
      }
      v7 += 48;
    }
    while (v7 != v8);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v14 = *((unsigned int *)this + 22);
  if (!(_DWORD)v14)
  {
    v21 = 0;
LABEL_19:
    v24 = &v21[7 * v14];
    v22 = v24;
    goto LABEL_20;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 10);
  v16 = &v15[2 * v14];
  do
  {
    v17 = sub_1C61AA364((uint64_t)&v36, v15);
    v18 = v15 + 1;
    v19 = sub_1C61DF1DC((uint64_t *)this + 24, v18)[1];
    v20 = *((unsigned int *)v17 + 4);
    if (v20 >= *((unsigned int *)v17 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v17 + 1), (uint64_t)(v17 + 3), v20 + 1, 8);
      v20 = *((unsigned int *)v17 + 4);
    }
    *(_QWORD *)(v17[1] + 8 * v20) = v19;
    ++*((_DWORD *)v17 + 4);
    v15 = v18 + 1;
  }
  while (v15 != v16);
  v21 = v36;
  LODWORD(v14) = v38;
  if (!(_DWORD)v37)
    goto LABEL_19;
  v22 = &v36[7 * v38];
  if (v38)
  {
    v23 = 0;
    while ((v36[v23] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v23 += 7;
      if (7 * v38 == v23)
      {
        v24 = &v36[7 * v38];
        goto LABEL_20;
      }
    }
    v24 = &v36[v23];
  }
  else
  {
    v24 = v36;
  }
LABEL_20:
  v25 = v14;
  v26 = &v21[7 * v14];
  if (v24 != v26)
  {
    v27 = (uint64_t *)((char *)this + 216);
    do
    {
      v40 = *v24;
      v41 = v43;
      v42 = 0x400000000;
      if (*((_DWORD *)v24 + 4))
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v41, (uint64_t)(v24 + 1));
        v29 = v41;
        v28 = v42;
      }
      else
      {
        v28 = 0;
        v29 = v43;
      }
      Impl = llvm::MDTuple::getImpl(v3, v29, v28, 0, 1);
      sub_1C61DF1DC(v27, &v40)[1] = Impl;
      if (v41 != v43)
        free(v41);
      v31 = v24 + 7;
      v24 = v22;
      if (v31 != v22)
      {
        v24 = v31;
        while ((*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v24 += 7;
          if (v24 == v22)
          {
            v24 = v22;
            break;
          }
        }
      }
    }
    while (v24 != v26);
  }
  if ((_DWORD)v25)
  {
    v32 = 56 * v25;
    v33 = v21 + 3;
    do
    {
      if ((*(v33 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v34 = (_QWORD *)*(v33 - 2);
        if (v33 != v34)
          free(v34);
      }
      v33 += 7;
      v32 -= 56;
    }
    while (v32);
  }
  return MEMORY[0x1CAA32FB4](v21, 8);
}

uint64_t sub_1C5F3F824(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Loop Versioning";
  *(_QWORD *)(v4 + 8) = 15;
  *(_QWORD *)(v4 + 16) = "loop-versioning";
  *(_QWORD *)(v4 + 24) = 15;
  *(_QWORD *)(v4 + 32) = &unk_1ED827900;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5F3FE6C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t llvm::createLoopVersioningLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5F3F8F4(v1);
}

uint64_t sub_1C5F3F8F4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED827900;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9A68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED827908);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F3F824;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED827908, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5F3F9BC(uint64_t a1, uint64_t (*a2)(uint64_t, llvm::Loop *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  const void *v8;
  _BYTE *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  _BYTE *v14;
  void *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  llvm::Loop *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  llvm::Loop **v26;
  char v27;
  uint64_t v28;
  llvm::Loop *v29;
  uint64_t LoopLatch;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v40;
  _BYTE v41[64];
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[64];
  void *__p;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  void *v66;
  _BYTE *v67;
  llvm::Loop **v68;
  uint64_t v69;
  _QWORD v70[10];

  v70[8] = *MEMORY[0x1E0C80C00];
  v68 = (llvm::Loop **)v70;
  v69 = 0x800000000;
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(uint64_t **)(a1 + 32);
  if (v5 == v6)
  {
    v27 = 0;
    return v27 & 1;
  }
  do
  {
    v54 = *v5;
    sub_1C4EA1748(&v54, (uint64_t)&v55);
    v45 = v50;
    v8 = v56;
    if (v56 == v55)
    {
      v46 = v50;
      v9 = v50;
      v10 = v56;
    }
    else
    {
      v24 = v57;
      v9 = malloc_type_malloc(8 * v57, 0x4065EBACuLL);
      if (!v9 && (v24 || (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_63:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v46 = v9;
      v10 = v55;
      v8 = v56;
    }
    v11 = v58;
    v47 = v57;
    if (v8 == v10)
      v12 = v58;
    else
      v12 = v57;
    if (v12)
    {
      memmove(v9, v8, 8 * v12);
      v11 = v58;
    }
    v48 = v11;
    v49 = v59;
    v52 = 0;
    v53 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3));
    v13 = v63;
    if (v63 == v62)
    {
      v40 = v41;
      v14 = v41;
      v15 = v63;
    }
    else
    {
      v25 = v64;
      v14 = malloc_type_malloc(8 * v64, 0x4065EBACuLL);
      if (!v14)
      {
        if (v25)
          goto LABEL_63;
        v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v14)
          goto LABEL_63;
      }
      v40 = v14;
      v15 = v62;
      v13 = v63;
    }
    if (v13 == v15)
      v16 = v65;
    else
      v16 = v64;
    if (v16)
      memmove(v14, v13, 8 * v16);
    v43 = 0;
    v44 = 0;
    v42 = 0;
    sub_1C4D6CDA0(&v42, v66, v67, 0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)v66) >> 3));
    while (1)
    {
      if (v52 - (_BYTE *)__p != v43 - v42)
        goto LABEL_31;
      if (__p == v52)
        break;
      v17 = v42 + 8;
      v18 = (char *)__p + 8;
      while (1)
      {
        v19 = v18 - 8;
        if (*((_QWORD *)v18 - 1) != *((_QWORD *)v17 - 1))
          break;
        v20 = v17[8];
        if (v18[8])
          v21 = v20 == 0;
        else
          v21 = 1;
        if (v21)
        {
          if ((v18[8] == 0) == (v20 != 0))
            break;
        }
        else if (*(_QWORD *)v18 != *(_QWORD *)v17)
        {
          break;
        }
        v17 += 24;
        v18 += 24;
        if (v19 + 24 == v52)
          goto LABEL_36;
      }
LABEL_31:
      v22 = (llvm::Loop *)*((_QWORD *)v52 - 3);
      if (*((_QWORD *)v22 + 1) == *((_QWORD *)v22 + 2))
      {
        v23 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v69 + 1, 8);
          v23 = v69;
        }
        v68[v23] = v22;
        LODWORD(v69) = v69 + 1;
      }
      sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v45);
    }
LABEL_36:
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v40 != v41)
      free(v40);
    if (__p)
    {
      v52 = (char *)__p;
      operator delete(__p);
    }
    if (v46 != v45)
      free(v46);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (v63 != v62)
      free(v63);
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v56 != v55)
      free(v56);
    ++v5;
  }
  while (v5 != v6);
  v26 = v68;
  if (!(_DWORD)v69)
  {
    v27 = 0;
    goto LABEL_79;
  }
  v27 = 0;
  v28 = 8 * v69;
  while (2)
  {
    v29 = *v26;
    if (llvm::Loop::isLoopSimplifyForm(*v26))
    {
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v29);
      if (LoopLatch)
      {
        if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v29, LoopLatch))
        {
          if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v29))
          {
            v31 = (_BYTE *)a2(a3, v29);
            if (!v31[49])
            {
              v32 = (uint64_t)v31;
              v33 = *((_QWORD *)v31 + 1);
              v34 = *(unsigned int *)(v33 + 288);
              if (!(_DWORD)v34)
              {
                if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v31 + 104) + 8))(*(_QWORD *)(*(_QWORD *)v31 + 104)) & 1) != 0)
                  goto LABEL_73;
                v33 = *(_QWORD *)(v32 + 8);
                v34 = *(unsigned int *)(v33 + 288);
              }
              llvm::LoopVersioning::LoopVersioning((uint64_t)&v55, v32, *(_BYTE **)(v33 + 280), v34, (uint64_t)v29, a1, a4, a5);
              sub_1C631B8A8((uint64_t *)&v55);
              llvm::LoopVersioning::annotateLoopWithNoAlias((llvm::LoopVersioning *)&v55);
              sub_1C631A498(&v55);
              v27 = 1;
            }
          }
        }
      }
    }
LABEL_73:
    ++v26;
    v28 -= 8;
    if (v28)
      continue;
    break;
  }
  v26 = v68;
LABEL_79:
  if (v26 != v70)
    free(v26);
  return v27 & 1;
}

uint64_t sub_1C5F3FE6C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F3F8F4(v0);
}

void sub_1C5F3FE98(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F3FEBC(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C5F3FF54(uint64_t a1)
{
  char **v2;
  char *v3;
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = **(char ****)(a1 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != llvm::LoopInfoWrapperPass::ID);
  v4 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), llvm::LoopInfoWrapperPass::ID);
  v13 = a1;
  v5 = **(char ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::ScalarEvolutionWrapperPass::ID);
  v10 = v7 + 32;
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1C5F3F9BC(v4 + 32, sub_1C5F40044, (uint64_t)&v13, v10, *(_QWORD *)(v11 + 32));
}

uint64_t sub_1C5F40044(uint64_t a1, llvm::Loop *a2)
{
  void **v3;
  void *v4;
  llvm::LoopAccessLegacyAnalysis *v5;

  v3 = **(void ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::LoopAccessLegacyAnalysis::ID);
  v5 = (llvm::LoopAccessLegacyAnalysis *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LoopAccessLegacyAnalysis::ID);
  return llvm::LoopAccessLegacyAnalysis::getInfo(v5, a2);
}

uint64_t sub_1C5F4009C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  _OWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v8 = 0;
  v9 = 0;
  v6 = v3;
  v7 = 0;
  return llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(*(_QWORD *)(a1 + 56), &llvm::LoopAccessAnalysis::Key, a2, (uint64_t)v5)+ 8;
}

uint64_t sub_1C5F400EC()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Add no-alias annotation for instructions that are disambiguated by memchecks";
  v1.n128_u64[1] = 76;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED837658, "loop-version-annotate-no-alias", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED837658, &dword_1C475E000);
}

uint64_t sub_1C5F4016C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 43;
  *(_QWORD *)(v2 + 16) = "lower-global-dtors";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5883;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F41544;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F401FC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5883;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81A9B08;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837718);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F4016C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837718, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LowerGlobalDtorsPass::run@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  char v3;

  v3 = sub_1C5F40338(a1);
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  if ((v3 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5F40338(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v19;
  unsigned int v20;
  unint64_t v21;
  llvm::Constant *v22;
  llvm::Value *v23;
  uint64_t *v24;
  uint64_t **i;
  uint64_t **v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  unint64_t v34;
  uint64_t *v35;
  llvm::Value **v36;
  uint64_t *v37;
  unint64_t v38;
  llvm::Constant **v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  llvm::Value **v52;
  llvm::Constant **v53;
  llvm::Constant *v54;
  uint64_t *v55;
  uint64_t v56;
  llvm::PointerType *v57;
  uint64_t **v58;
  llvm::PointerType *v59;
  llvm::PointerType *inserted;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;
  const char *v66;
  const char *v67;
  llvm::Constant *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  int isNullValue;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Constant **v82;
  llvm::Constant *v83;
  int v84;
  int v85;
  llvm::Constant *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t **v91;
  __int128 *v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  llvm::Type ***v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Value *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  int v109;
  char v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::Constant **v117;
  llvm::Constant *v118;
  int v119;
  int v120;
  llvm::Constant *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t **v126;
  __int128 *v127;
  char *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  llvm::PointerType *v138;
  const llvm::APInt *v139;
  _BOOL4 v141;
  llvm::ConstantInt *v142;
  const llvm::APInt *v143;
  uint64_t ***v144;
  llvm::ConstantInt *v145;
  const llvm::APInt *v146;
  uint64_t ***v147;
  llvm::ConstantInt *v148;
  llvm::ConstantInt *v149;
  uint64_t ***v150;
  llvm::UndefValue *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  llvm::Constant **v155;
  char *v156;
  _DWORD *v157;
  llvm::Value *v158;
  llvm::Type *v159;
  llvm::Value **NullValue;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  llvm::BranchInst *v164;
  _QWORD *v165;
  uint64_t Declaration;
  llvm::Value *v167;
  llvm::Type ***v168;
  _DWORD *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t **v175;
  llvm::GlobalVariable *v176;
  const char *v177;
  const char *v178;
  unint64_t v179;
  unint64_t v180;
  llvm::UndefValue *v181;
  uint64_t v182;
  uint64_t **v183;
  llvm::PointerType *v184;
  llvm::ConstantPointerNull *v185;
  char v186;
  uint64_t *v187;
  uint64_t v188;
  llvm::Module *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  llvm::Constant *v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  uint64_t **v197;
  _QWORD v198[2];
  uint64_t *v199;
  char v200;
  char v201;
  _QWORD v202[2];
  unint64_t v203;
  char v204;
  char v205;
  __int128 v206;
  __int128 v207;
  uint64_t **v208;
  uint64_t v209;
  llvm::PointerType *v210;
  uint64_t **v211;
  uint64_t *v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t **v216;
  __int128 v217;
  __int128 v218;
  uint64_t **v219;
  uint64_t v220[4];

  v220[1] = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4FB7E80(a1[14], "llvm.global_dtors", 0x11uLL);
  if (!v2
    || *(_BYTE *)(v2 + 16) != 3
    || (*(_DWORD *)(v2 + 32) & 0xFu) - 7 < 2
    || (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) == 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(v2 - 32);
  v6 = v5 && *(_BYTE *)(v5 + 16) == 8;
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (!v7 || *(_BYTE *)(v7 + 8) != 16)
    return 0;
  if (*(_DWORD *)(v7 + 12) != 3)
    return 0;
  v9 = *(_QWORD **)(v7 + 16);
  if (*(_BYTE *)(*v9 + 8) != 13 || *(_BYTE *)(v9[1] + 8) != 15 || *(_BYTE *)(v9[2] + 8) != 15)
    return 0;
  v176 = (llvm::GlobalVariable *)v2;
  v212 = 0;
  v213 = 0;
  v211 = &v212;
  v10 = *(_DWORD *)(v5 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(uint64_t **)(v5 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)(v5 - 32 * v11);
  }
  if (!v11)
  {
LABEL_86:
    v3 = 0;
    goto LABEL_207;
  }
  v13 = &v12[4 * v11];
  do
  {
    v14 = *v12;
    if (*v12)
      v15 = *(_BYTE *)(*v12 + 16) == 9;
    else
      v15 = 0;
    if (!v15)
      goto LABEL_84;
    v16 = (_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
    v17 = *v16;
    if (!*v16 || *(_BYTE *)(*v16 + 16) != 16)
      goto LABEL_84;
    v19 = (unint64_t *)(v17 + 24);
    v20 = *(_DWORD *)(v17 + 32);
    if (v20 < 0x41)
    {
      v21 = *v19;
      goto LABEL_40;
    }
    if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 24)) <= 0x40)
    {
      v21 = *(_QWORD *)*v19;
LABEL_40:
      if (!(v21 >> 16))
        goto LABEL_42;
    }
    LOWORD(v21) = -1;
LABEL_42:
    v22 = (llvm::Constant *)v16[4];
    if ((llvm::Constant::isNullValue(v22) & 1) != 0)
      break;
    v23 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 64));
    v24 = v212;
    for (i = &v212; ; v24 = *i)
    {
      v26 = i;
      if (!v24)
        break;
      while (1)
      {
        i = (uint64_t **)v24;
        v27 = *((unsigned __int16 *)v24 + 16);
        if (v27 > (unsigned __int16)v21)
          break;
        if (v27 >= (unsigned __int16)v21)
          goto LABEL_53;
        v24 = i[1];
        if (!v24)
        {
          v26 = i + 1;
          goto LABEL_50;
        }
      }
    }
LABEL_50:
    v28 = (uint64_t *)i;
    i = (uint64_t **)operator new(0x40uLL);
    *((_WORD *)i + 16) = v21;
    *i = 0;
    i[1] = 0;
    i[6] = 0;
    i[7] = 0;
    i[5] = 0;
    i[2] = v28;
    *v26 = (uint64_t *)i;
    v29 = (uint64_t *)i;
    if (*v211)
    {
      v211 = (uint64_t **)*v211;
      v29 = *v26;
    }
    sub_1C4768E74(v212, v29);
    ++v213;
LABEL_53:
    v31 = i[6];
    v30 = i + 5;
    if (i[5] != v31 && (llvm::Value *)*(v31 - 4) == v23)
    {
      v39 = (llvm::Constant **)*(v31 - 2);
      v38 = *(v31 - 1);
      if ((unint64_t)v39 >= v38)
      {
        v41 = (_QWORD *)*(v31 - 3);
        v42 = v39 - (llvm::Constant **)v41;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_208;
        v44 = v38 - (_QWORD)v41;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 61)
            goto LABEL_209;
          v46 = (char *)operator new(8 * v45);
        }
        else
        {
          v46 = 0;
        }
        v53 = (llvm::Constant **)&v46[8 * v42];
        *v53 = v22;
        v40 = v53 + 1;
        if (v39 != v41)
        {
          do
          {
            v54 = *--v39;
            *--v53 = v54;
          }
          while (v39 != v41);
          v39 = (llvm::Constant **)*(v31 - 3);
        }
        *(v31 - 3) = (uint64_t)v53;
        *(v31 - 2) = (uint64_t)v40;
        *(v31 - 1) = (uint64_t)&v46[8 * v45];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v39 = v22;
        v40 = v39 + 1;
      }
      *(v31 - 2) = (uint64_t)v40;
    }
    else
    {
      v32 = (llvm::Value *)operator new(8uLL);
      v33 = v32;
      *(_QWORD *)v32 = v22;
      v34 = (unint64_t)v32 + 8;
      v35 = i[7];
      v36 = (llvm::Value **)i[6];
      if (v36 >= (llvm::Value **)v35)
      {
        v47 = ((uint64_t)v36 - *v30) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
LABEL_208:
          abort();
        v49 = (uint64_t)v35 - *v30;
        if (v49 >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v216 = i + 7;
        if (v50 >> 59)
LABEL_209:
          sub_1C4764EE4();
        v51 = (char *)operator new(32 * v50);
        v52 = (llvm::Value **)&v51[32 * v47];
        *(_QWORD *)&v214 = v51;
        *((_QWORD *)&v214 + 1) = v52;
        v52[2] = 0;
        v52[3] = 0;
        *v52 = v23;
        v52[1] = v33;
        *((int64x2_t *)v52 + 1) = vdupq_n_s64(v34);
        *(_QWORD *)&v215 = v52 + 4;
        *((_QWORD *)&v215 + 1) = &v51[32 * v50];
        sub_1C621E810((uint64_t *)i + 5, &v214);
        v37 = i[6];
        sub_1C621E888((uint64_t)&v214);
      }
      else
      {
        *v36 = v23;
        v36[1] = v32;
        v37 = (uint64_t *)(v36 + 4);
        v36[2] = (llvm::Value *)v34;
        v36[3] = (llvm::Value *)v34;
      }
      i[6] = v37;
    }
LABEL_84:
    v12 += 4;
  }
  while (v12 != v13);
  if (!v213)
    goto LABEL_86;
  v55 = *a1;
  v56 = llvm::PointerType::get((llvm::PointerType *)(**a1 + 1912), 0);
  v220[0] = v56;
  v57 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v55 + 1576), v220, 1, 0);
  v58 = (uint64_t **)(*v55 + 1960);
  v184 = v57;
  *(_QWORD *)&v214 = llvm::PointerType::get(v57, 0);
  *((_QWORD *)&v214 + 1) = v56;
  v185 = (llvm::ConstantPointerNull *)v56;
  *(_QWORD *)&v215 = v56;
  v59 = (llvm::PointerType *)llvm::FunctionType::get(v58, (uint64_t *)&v214, 3, 0);
  inserted = llvm::Module::getOrInsertFunction((uint64_t)a1, "__cxa_atexit", 0xCuLL, v59, 0);
  v182 = v61;
  v183 = (uint64_t **)inserted;
  v210 = (llvm::PointerType *)(*v55 + 1912);
  *(_QWORD *)&v214 = a1;
  *((_QWORD *)&v214 + 1) = &v210;
  v181 = llvm::Module::getOrInsertGlobal((uint64_t)a1, "__dso_handle", 0xCuLL, v210, (uint64_t (*)(uint64_t))sub_1C5F415B4, (uint64_t)&v214);
  v62 = v211;
  if (v211 != &v212)
  {
    v192 = v55;
    while (1)
    {
      v63 = v62[5];
      v187 = v62[6];
      if (v63 != v187)
        break;
LABEL_200:
      v174 = v62[1];
      if (v174)
      {
        do
        {
          v175 = (uint64_t **)v174;
          v174 = (uint64_t *)*v174;
        }
        while (v174);
      }
      else
      {
        do
        {
          v175 = (uint64_t **)v62[2];
          v6 = *v175 == (uint64_t *)v62;
          v62 = v175;
        }
        while (!v6);
      }
      v62 = v175;
      if (v175 == &v212)
        goto LABEL_206;
    }
    v194 = 0;
    v64 = *((unsigned __int16 *)v62 + 16);
    if ((_DWORD)v64 == 0xFFFF)
      v65 = 3;
    else
      v65 = 2;
    v186 = v65;
    if ((_DWORD)v64 == 0xFFFF)
      v66 = "call_dtors";
    else
      v66 = (const char *)&v206;
    v67 = "register_call_dtors";
    if ((_DWORD)v64 != 0xFFFF)
      v67 = (const char *)&v206;
    v177 = v67;
    v178 = v66;
    v191 = *((unsigned __int16 *)v62 + 16);
    while (2)
    {
      v68 = (llvm::Constant *)*v63;
      v209 = v194;
      if ((_DWORD)v64 == 0xFFFF)
      {
        v69 = 1;
        v70 = 1;
        v71 = 1;
      }
      else
      {
        v202[0] = ".";
        v179 = v179 & 0xFFFFFFFF00000000 | v64;
        v203 = v179;
        *(_QWORD *)&v207 = v202;
        v71 = 2;
        v70 = 9;
        v69 = 3;
      }
      v204 = v69;
      v205 = v70;
      *(_QWORD *)&v206 = "call_dtors";
      LOBYTE(v208) = 3;
      BYTE1(v208) = v71;
      if ((unint64_t)((char *)v62[6] - (char *)v62[5]) > 0x20)
      {
        v198[0] = "$";
        v199 = &v209;
        *(_QWORD *)&v217 = v178;
        *((_QWORD *)&v217 + 1) = *((_QWORD *)&v206 + 1);
        *(_QWORD *)&v218 = v198;
        LOBYTE(v219) = v186;
        BYTE1(v219) = 2;
        v73 = 12;
        v72 = 3;
      }
      else
      {
        v217 = v206;
        v218 = v207;
        v219 = v208;
        v72 = 1;
        v73 = 1;
      }
      v200 = v72;
      v201 = v73;
      isNullValue = llvm::Constant::isNullValue(v68);
      if ((isNullValue & 1) != 0)
      {
        v75 = 1;
        v76 = 1;
        v77 = 1;
        goto LABEL_117;
      }
      if ((*((_BYTE *)v68 + 23) & 0x10) != 0)
      {
        v78 = ***(_QWORD ***)v68;
        v79 = *(_QWORD *)(v78 + 152);
        v80 = *(unsigned int *)(v78 + 168);
        if (!(_DWORD)v80)
          goto LABEL_114;
        LODWORD(v81) = (v80 - 1) & ((v68 >> 4) ^ (v68 >> 9));
        v82 = (llvm::Constant **)(v79 + 16 * v81);
        v83 = *v82;
        if (*v82 != v68)
        {
          v84 = 1;
          while (v83 != (llvm::Constant *)-4096)
          {
            v85 = v81 + v84++;
            v81 = v85 & (v80 - 1);
            v83 = *(llvm::Constant **)(v79 + 16 * v81);
            if (v83 == v68)
            {
              v82 = (llvm::Constant **)(v79 + 16 * v81);
              goto LABEL_115;
            }
          }
LABEL_114:
          v82 = (llvm::Constant **)(v79 + 16 * v80);
        }
LABEL_115:
        v86 = v82[1];
        v89 = *(_QWORD *)v86;
        v87 = (char *)v86 + 16;
        v88 = v89;
      }
      else
      {
        v88 = 0;
        v87 = &byte_1C871356D;
      }
      *(_QWORD *)&v195 = ".";
      *(_QWORD *)&v196 = v87;
      *((_QWORD *)&v196 + 1) = v88;
      v77 = 5;
      v76 = 3;
      v75 = 2;
LABEL_117:
      LOBYTE(v197) = v76;
      BYTE1(v197) = v77;
      v90 = (char)v219;
      v193 = v68;
      if (v219 == 1)
      {
        v214 = v195;
        v215 = v196;
        v91 = v197;
        goto LABEL_123;
      }
      if (!(_BYTE)v219)
      {
        LOWORD(v216) = 256;
        goto LABEL_129;
      }
      if (isNullValue)
      {
        v214 = v217;
        v215 = v218;
        v91 = v219;
LABEL_123:
        v216 = v91;
      }
      else
      {
        if (BYTE1(v219) != 1)
          v90 = 2;
        v92 = &v217;
        if (BYTE1(v219) == 1)
          v92 = (__int128 *)v217;
        *(_QWORD *)&v214 = v92;
        *((_QWORD *)&v214 + 1) = *((_QWORD *)&v217 + 1);
        *(_QWORD *)&v215 = &v195;
        LOBYTE(v216) = v90;
        BYTE1(v216) = v75;
      }
LABEL_129:
      v93 = (uint64_t *)operator new(0x80uLL);
      *((_DWORD *)v93 + 7) = *((_DWORD *)v93 + 7) & 0x38000000 | 0x40000000;
      *v93 = 0;
      v189 = (llvm::Module *)(v93 + 1);
      llvm::Function::Function(v93 + 1, v184, 8, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v214, (uint64_t)a1);
      *(_QWORD *)&v214 = "body";
      LOWORD(v216) = 259;
      v94 = operator new();
      *(_QWORD *)v94 = *v55 + 1600;
      *(_QWORD *)(v94 + 8) = 0;
      v95 = *(_DWORD *)(v94 + 20) & 0xC0000000;
      *(_DWORD *)(v94 + 16) = 22;
      *(_DWORD *)(v94 + 20) = v95;
      *(_QWORD *)(v94 + 24) = 0;
      *(_QWORD *)(v94 + 32) = 0;
      *(_QWORD *)(v94 + 40) = v94 + 40;
      *(_QWORD *)(v94 + 48) = v94 + 40;
      *(_QWORD *)(v94 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v93 + 10), (_QWORD *)v94);
      v96 = v93[10];
      *(_QWORD *)(v94 + 32) = v93 + 10;
      *(_QWORD *)(v94 + 24) = v96;
      *(_QWORD *)(v96 + 8) = v94 + 24;
      v93[10] = v94 + 24;
      llvm::Value::setName((uint64_t ***)v94, (uint64_t)&v214);
      v97 = (llvm::Type ***)llvm::FunctionType::get((uint64_t **)(*v55 + 1576), 0, 0, 0);
      v99 = v63[1];
      v98 = v63[2];
      v190 = v63;
      while (v98 != v99)
      {
        v100 = *(llvm::Value **)(v98 - 8);
        v98 -= 8;
        LOWORD(v216) = 257;
        v101 = operator new(0x70uLL);
        v101[13] = v101[13] & 0x38000000 | 1;
        *(_QWORD *)v101 = 0;
        *((_QWORD *)v101 + 1) = 0;
        *((_QWORD *)v101 + 2) = 0;
        *((_QWORD *)v101 + 3) = v101 + 8;
        llvm::CallInst::CallInst((llvm::CallInst *)(v101 + 8), v97, v100, (const llvm::Twine *)&v214, (llvm::BasicBlock *)v94);
      }
      v102 = (char *)operator new(0x40uLL);
      *(_QWORD *)v102 = *v192 + 1576;
      *((_QWORD *)v102 + 1) = 0;
      v102[16] = 29;
      *(_OWORD *)(v102 + 44) = 0u;
      *(_OWORD *)(v102 + 33) = 0u;
      *(_OWORD *)(v102 + 17) = 0u;
      *(_WORD *)(v94 + 18) &= ~0x8000u;
      v103 = *(_QWORD *)(v94 + 40);
      *((_QWORD *)v102 + 4) = v94 + 40;
      *((_QWORD *)v102 + 5) = v94;
      *((_QWORD *)v102 + 3) = v103;
      v102 += 24;
      *(_QWORD *)(v103 + 8) = v102;
      *(_QWORD *)(v94 + 40) = v102;
      if ((_DWORD)v191 == 0xFFFF)
      {
        v104 = 1;
        v105 = 1;
        v106 = 1;
      }
      else
      {
        v202[0] = ".";
        v180 = v180 & 0xFFFFFFFF00000000 | v191;
        v203 = v180;
        *(_QWORD *)&v207 = v202;
        v106 = 2;
        v105 = 9;
        v104 = 3;
      }
      v204 = v104;
      v205 = v105;
      *(_QWORD *)&v206 = "register_call_dtors";
      LOBYTE(v208) = 3;
      BYTE1(v208) = v106;
      if ((unint64_t)((char *)v62[6] - (char *)v62[5]) > 0x20)
      {
        v198[0] = "$";
        v199 = &v209;
        *(_QWORD *)&v217 = v177;
        *((_QWORD *)&v217 + 1) = *((_QWORD *)&v206 + 1);
        *(_QWORD *)&v218 = v198;
        LOBYTE(v219) = v186;
        BYTE1(v219) = 2;
        v108 = 12;
        v107 = 3;
      }
      else
      {
        v217 = v206;
        v218 = v207;
        v219 = v208;
        v107 = 1;
        v108 = 1;
      }
      v200 = v107;
      v201 = v108;
      v109 = llvm::Constant::isNullValue(v193);
      if ((v109 & 1) != 0)
      {
        v110 = 1;
        v111 = 1;
        v112 = 1;
        goto LABEL_149;
      }
      if ((*((_BYTE *)v193 + 23) & 0x10) != 0)
      {
        v113 = ***(_QWORD ***)v193;
        v114 = *(_QWORD *)(v113 + 152);
        v115 = *(unsigned int *)(v113 + 168);
        if (!(_DWORD)v115)
          goto LABEL_146;
        LODWORD(v116) = (v115 - 1) & ((v193 >> 4) ^ (v193 >> 9));
        v117 = (llvm::Constant **)(v114 + 16 * v116);
        v118 = *v117;
        if (*v117 != v193)
        {
          v119 = 1;
          while (v118 != (llvm::Constant *)-4096)
          {
            v120 = v116 + v119++;
            v116 = v120 & (v115 - 1);
            v118 = *(llvm::Constant **)(v114 + 16 * v116);
            if (v118 == v193)
            {
              v117 = (llvm::Constant **)(v114 + 16 * v116);
              goto LABEL_147;
            }
          }
LABEL_146:
          v117 = (llvm::Constant **)(v114 + 16 * v115);
        }
LABEL_147:
        v121 = v117[1];
        v124 = *(_QWORD *)v121;
        v122 = (char *)v121 + 16;
        v123 = v124;
      }
      else
      {
        v123 = 0;
        v122 = &byte_1C871356D;
      }
      *(_QWORD *)&v195 = ".";
      *(_QWORD *)&v196 = v122;
      *((_QWORD *)&v196 + 1) = v123;
      v112 = 5;
      v111 = 3;
      v110 = 2;
LABEL_149:
      LOBYTE(v197) = v111;
      BYTE1(v197) = v112;
      v125 = (char)v219;
      if (v219 != 1)
      {
        if (!(_BYTE)v219)
        {
          LOWORD(v216) = 256;
          goto LABEL_161;
        }
        if (v109)
        {
          v214 = v217;
          v215 = v218;
          v126 = v219;
LABEL_155:
          v216 = v126;
        }
        else
        {
          if (BYTE1(v219) != 1)
            v125 = 2;
          v127 = &v217;
          if (BYTE1(v219) == 1)
            v127 = (__int128 *)v217;
          *(_QWORD *)&v214 = v127;
          *((_QWORD *)&v214 + 1) = *((_QWORD *)&v217 + 1);
          *(_QWORD *)&v215 = &v195;
          LOBYTE(v216) = v125;
          BYTE1(v216) = v110;
        }
LABEL_161:
        v128 = (char *)operator new(0x80uLL);
        *((_DWORD *)v128 + 7) = *((_DWORD *)v128 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v128 = 0;
        v188 = (uint64_t)(v128 + 8);
        llvm::Function::Function((uint64_t *)v128 + 1, (llvm::PointerType *)v97, 8, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v214, (uint64_t)a1);
        *(_QWORD *)&v214 = "entry";
        LOWORD(v216) = 259;
        v129 = operator new();
        *(_QWORD *)v129 = *v192 + 1600;
        *(_QWORD *)(v129 + 8) = 0;
        v130 = *(_DWORD *)(v129 + 20) & 0xC0000000;
        *(_DWORD *)(v129 + 16) = 22;
        *(_DWORD *)(v129 + 20) = v130;
        *(_QWORD *)(v129 + 24) = 0;
        *(_QWORD *)(v129 + 32) = 0;
        *(_QWORD *)(v129 + 40) = v129 + 40;
        *(_QWORD *)(v129 + 48) = v129 + 40;
        *(_QWORD *)(v129 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v128 + 80), (_QWORD *)v129);
        v131 = *((_QWORD *)v128 + 10);
        *(_QWORD *)(v129 + 32) = v128 + 80;
        *(_QWORD *)(v129 + 24) = v131;
        *(_QWORD *)(v131 + 8) = v129 + 24;
        *((_QWORD *)v128 + 10) = v129 + 24;
        llvm::Value::setName((uint64_t ***)v129, (uint64_t)&v214);
        *(_QWORD *)&v214 = "fail";
        LOWORD(v216) = 259;
        v132 = operator new();
        *(_QWORD *)v132 = *v192 + 1600;
        *(_QWORD *)(v132 + 8) = 0;
        v133 = *(_DWORD *)(v132 + 20) & 0xC0000000;
        *(_DWORD *)(v132 + 16) = 22;
        *(_DWORD *)(v132 + 20) = v133;
        *(_QWORD *)(v132 + 24) = 0;
        *(_QWORD *)(v132 + 32) = 0;
        *(_QWORD *)(v132 + 40) = v132 + 40;
        *(_QWORD *)(v132 + 48) = v132 + 40;
        *(_QWORD *)(v132 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v128 + 80), (_QWORD *)v132);
        v134 = *((_QWORD *)v128 + 10);
        *(_QWORD *)(v132 + 32) = v128 + 80;
        *(_QWORD *)(v132 + 24) = v134;
        *(_QWORD *)(v134 + 8) = v132 + 24;
        *((_QWORD *)v128 + 10) = v132 + 24;
        llvm::Value::setName((uint64_t ***)v132, (uint64_t)&v214);
        *(_QWORD *)&v214 = "return";
        LOWORD(v216) = 259;
        v135 = operator new();
        *(_QWORD *)v135 = *v192 + 1600;
        *(_QWORD *)(v135 + 8) = 0;
        v136 = *(_DWORD *)(v135 + 20) & 0xC0000000;
        *(_DWORD *)(v135 + 16) = 22;
        *(_DWORD *)(v135 + 20) = v136;
        *(_QWORD *)(v135 + 24) = 0;
        *(_QWORD *)(v135 + 32) = 0;
        *(_QWORD *)(v135 + 40) = v135 + 40;
        *(_QWORD *)(v135 + 48) = v135 + 40;
        *(_QWORD *)(v135 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v128 + 80), (_QWORD *)v135);
        v137 = *((_QWORD *)v128 + 10);
        *(_QWORD *)(v135 + 32) = v128 + 80;
        *(_QWORD *)(v135 + 24) = v137;
        *(_QWORD *)(v137 + 8) = v135 + 24;
        *((_QWORD *)v128 + 10) = v135 + 24;
        llvm::Value::setName((uint64_t ***)v135, (uint64_t)&v214);
        LOWORD(v219) = 260;
        *(_QWORD *)&v217 = a1 + 27;
        llvm::Triple::Triple((uint64_t)&v214, (llvm::Twine *)&v217);
        v141 = DWORD2(v215) == 3 && HIDWORD(v215) == 31;
        if (SBYTE7(v215) < 0)
          operator delete((void *)v214);
        if (v141)
        {
          v142 = *(llvm::ConstantInt **)(*v192 + 1960);
          DWORD2(v214) = *(_DWORD *)(*v192 + 1968) >> 8;
          if (DWORD2(v214) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v214, 0, 0);
          else
            *(_QWORD *)&v214 = 0;
          v144 = (uint64_t ***)llvm::ConstantInt::get(v142, (llvm::LLVMContext *)&v214, v139);
          if (DWORD2(v214) >= 0x41 && (_QWORD)v214)
            MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
          v145 = *(llvm::ConstantInt **)(*v192 + 1984);
          DWORD2(v214) = *(_DWORD *)(*v192 + 1992) >> 8;
          if (DWORD2(v214) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v214, 0, 0);
          else
            *(_QWORD *)&v214 = 0;
          v147 = (uint64_t ***)llvm::ConstantInt::get(v145, (llvm::LLVMContext *)&v214, v143);
          if (DWORD2(v214) >= 0x41 && (_QWORD)v214)
            MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
          v148 = *(llvm::ConstantInt **)(*v192 + 1984);
          DWORD2(v214) = *(_DWORD *)(*v192 + 1992) >> 8;
          if (DWORD2(v214) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v214, 0, 0);
          else
            *(_QWORD *)&v214 = 0;
          v150 = (uint64_t ***)llvm::ConstantInt::get(v148, (llvm::LLVMContext *)&v214, v146);
          if (DWORD2(v214) >= 0x41 && (_QWORD)v214)
            MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
          v151 = llvm::GlobalPtrAuthInfo::create((llvm::GlobalPtrAuthInfo *)a1, v189, v144, v150, v147, v149);
        }
        else
        {
          v151 = v189;
        }
        ++v194;
        v152 = llvm::ConstantPointerNull::get(v185, v138);
        *(_QWORD *)&v217 = v151;
        *((_QWORD *)&v217 + 1) = v152;
        *(_QWORD *)&v218 = v181;
        *(_QWORD *)&v214 = "call";
        LOWORD(v216) = 259;
        v153 = (char *)operator new(0xD0uLL);
        v154 = 0;
        v155 = (llvm::Constant **)(v153 + 128);
        *((_DWORD *)v153 + 37) = *((_DWORD *)v153 + 37) & 0x38000000 | 4;
        do
        {
          v156 = &v153[v154];
          *(_QWORD *)v156 = 0;
          *((_QWORD *)v156 + 1) = 0;
          *((_QWORD *)v156 + 2) = 0;
          *((_QWORD *)v156 + 3) = v155;
          v154 += 32;
        }
        while (v154 != 128);
        sub_1C61DD0B0((llvm::Instruction *)(v153 + 128), v183, v182, (uint64_t *)&v217, 3, 0, 0, (uint64_t)&v214, (llvm::BasicBlock *)v129);
        v157 = operator new(0x80uLL);
        v157[21] = v157[21] & 0x38000000 | 2;
        v158 = (llvm::Value *)(v157 + 16);
        *(_QWORD *)v157 = 0;
        *((_QWORD *)v157 + 1) = 0;
        *((_QWORD *)v157 + 2) = 0;
        *((_QWORD *)v157 + 3) = v157 + 16;
        *((_QWORD *)v157 + 4) = 0;
        *((_QWORD *)v157 + 5) = 0;
        *((_QWORD *)v157 + 6) = 0;
        *((_QWORD *)v157 + 7) = v157 + 16;
        NullValue = llvm::Constant::getNullValue(*v155, v159);
        LOWORD(v216) = 257;
        sub_1C4774CC4(*v155);
        llvm::CmpInst::CmpInst((uint64_t)v158, v161, 53, 33, (uint64_t)v155, (uint64_t)NullValue, (uint64_t)&v214, v129);
        v162 = operator new(0xA0uLL);
        v163 = 0;
        v164 = (llvm::BranchInst *)(v162 + 24);
        v162[29] = v162[29] & 0x38000000 | 3;
        do
        {
          v165 = &v162[v163];
          *v165 = 0;
          v165[1] = 0;
          v165[2] = 0;
          v165[3] = v164;
          v163 += 8;
        }
        while (v163 != 24);
        llvm::BranchInst::BranchInst(v164, (llvm::BasicBlock *)v132, (llvm::BasicBlock *)v135, v158, (llvm::BasicBlock *)v129);
        Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)a1, 295, 0, 0);
        v167 = (llvm::Value *)Declaration;
        v168 = 0;
        v55 = v192;
        if (Declaration)
          v168 = *(llvm::Type ****)(Declaration + 24);
        LOWORD(v216) = 257;
        v169 = operator new(0x70uLL);
        v169[13] = v169[13] & 0x38000000 | 1;
        *(_QWORD *)v169 = 0;
        *((_QWORD *)v169 + 1) = 0;
        *((_QWORD *)v169 + 2) = 0;
        *((_QWORD *)v169 + 3) = v169 + 8;
        llvm::CallInst::CallInst((llvm::CallInst *)(v169 + 8), v168, v167, (const llvm::Twine *)&v214, (llvm::BasicBlock *)v132);
        v170 = (char *)operator new(0x40uLL);
        *(_QWORD *)v170 = *v192 + 1576;
        *((_QWORD *)v170 + 1) = 0;
        v170[16] = 35;
        *(_OWORD *)(v170 + 44) = 0u;
        *(_OWORD *)(v170 + 33) = 0u;
        *(_OWORD *)(v170 + 17) = 0u;
        *(_WORD *)(v132 + 18) &= ~0x8000u;
        v171 = *(_QWORD *)(v132 + 40);
        *((_QWORD *)v170 + 4) = v132 + 40;
        *((_QWORD *)v170 + 5) = v132;
        *((_QWORD *)v170 + 3) = v171;
        v170 += 24;
        *(_QWORD *)(v171 + 8) = v170;
        *(_QWORD *)(v132 + 40) = v170;
        v172 = (char *)operator new(0x40uLL);
        *(_QWORD *)v172 = *v192 + 1576;
        *((_QWORD *)v172 + 1) = 0;
        v172[16] = 29;
        *(_OWORD *)(v172 + 44) = 0u;
        *(_OWORD *)(v172 + 33) = 0u;
        *(_OWORD *)(v172 + 17) = 0u;
        *(_WORD *)(v135 + 18) &= ~0x8000u;
        v173 = *(_QWORD *)(v135 + 40);
        *((_QWORD *)v172 + 4) = v135 + 40;
        *((_QWORD *)v172 + 5) = v135;
        *((_QWORD *)v172 + 3) = v173;
        v172 += 24;
        *(_QWORD *)(v173 + 8) = v172;
        *(_QWORD *)(v135 + 40) = v172;
        v64 = v191;
        sub_1C5F50894("llvm.global_ctors", (uint64_t)a1, v188, v191, v193);
        v63 += 4;
        if (v190 + 4 == v187)
          goto LABEL_200;
        continue;
      }
      break;
    }
    v214 = v195;
    v215 = v196;
    v126 = v197;
    goto LABEL_155;
  }
LABEL_206:
  llvm::GlobalVariable::eraseFromParent(v176);
  v3 = 1;
LABEL_207:
  sub_1C63B23BC((char *)v212);
  return v3;
}

