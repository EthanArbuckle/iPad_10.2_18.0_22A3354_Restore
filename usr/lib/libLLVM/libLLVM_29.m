unint64_t sub_1C53DE830(char *a1, uint64_t a2, _BYTE *a3, char *a4, char a5, int *a6, uint64_t *a7, char *a8)
{
  _BYTE *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v101;
  uint64_t __src;

  v101 = a2;
  v13 = sub_1C4ED4714(a1, &v101, a3, (unint64_t)a4, a5 != 0);
  v14 = v101;
  v15 = *a6;
  LODWORD(__src) = *a6;
  v16 = v13 + 4;
  if (v13 + 4 <= a4)
  {
    *(_DWORD *)v13 = v15;
  }
  else
  {
    v17 = a4 - v13;
    memcpy(v13, &__src, a4 - v13);
    if (v14)
    {
      v18 = *((_QWORD *)a1 + 9);
      v19 = *((_QWORD *)a1 + 11);
      v20 = *((_QWORD *)a1 + 1);
      v21 = *((_QWORD *)a1 + 12);
      v22 = *((_QWORD *)a1 + 13);
      v23 = *((_QWORD *)a1 + 6);
      v24 = *((_QWORD *)a1 + 7);
      v25 = *((_QWORD *)a1 + 14);
      v26 = v25 ^ (0xB492B66FBE98F273 * __ROR8__(v18 + *((_QWORD *)a1 + 8) + v19 + v20, 37));
      v27 = *((_QWORD *)a1 + 5);
      v28 = v27 + v19 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v18 + v23, 42);
      v29 = __ROR8__(v22 + *((_QWORD *)a1 + 10), 33);
      v30 = *(_QWORD *)a1 - 0x4B6D499041670D8DLL * v21;
      v31 = v22 + v30;
      v33 = *((_QWORD *)a1 + 2);
      v32 = *((_QWORD *)a1 + 3);
      v29 *= 0xB492B66FBE98F273;
      v34 = v29 + v25 + *((_QWORD *)a1 + 4);
      v35 = v30 + v20 + v33;
      v36 = v27 + v23 + v34;
      *((_QWORD *)a1 + 12) = __ROR8__(v31 + v32 + v26, 21) + v30 + __ROR8__(v35, 44);
      *((_QWORD *)a1 + 13) = v36 + v24;
      *((_QWORD *)a1 + 14) = __ROR8__(v36, 44) + v34 + __ROR8__(v33 + v28 + v34 + v24, 21);
      *((_QWORD *)a1 + 10) = v26;
      *((_QWORD *)a1 + 11) = v35 + v32;
      *((_QWORD *)a1 + 8) = v29;
      *((_QWORD *)a1 + 9) = v28;
      v14 += 64;
    }
    else
    {
      v37 = *((_QWORD *)a1 + 15);
      v38 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v37 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v37 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v39 = __ROR8__(v37 ^ 0xB492B66FBE98F273, 49);
      v40 = v37 ^ (v37 >> 47);
      v41 = 0x9DDFEA08EB382D69
          * (v37 ^ (((0x9DDFEA08EB382D69 * (v40 ^ (0xB492B66FBE98F273 * v37))) ^ v37) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v40 ^ (0xB492B66FBE98F273 * v37))));
      v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
      v43 = *((_QWORD *)a1 + 1);
      v44 = v43 + v37 + v39;
      v45 = *((_QWORD *)a1 + 6);
      v46 = *((_QWORD *)a1 + 7);
      v47 = *((_QWORD *)a1 + 5);
      v48 = v47 + v39 - 0x4B6D499041670D8DLL * __ROR8__(v45 + v37 - 0x4B6D499041670D8DLL * v37, 42);
      v49 = v40 - 0x622015F714C7D297 * (v38 ^ (v38 >> 47));
      v50 = *(_QWORD *)a1 - 0x6D8ED9027DD26057 * v37;
      v52 = *((_QWORD *)a1 + 2);
      v51 = *((_QWORD *)a1 + 3);
      v53 = v50 + v43 + v52;
      v54 = v42 ^ (0xB492B66FBE98F273 * __ROR8__(v44, 37));
      v55 = __ROR8__(v53, 44) + v50 + __ROR8__(v50 + v40 + v51 + v54, 21);
      v56 = 0xB492B66FBE98F273 * __ROR8__(v49, 33);
      v57 = v56 + *((_QWORD *)a1 + 4) + v42;
      *((_QWORD *)a1 + 8) = v56;
      *((_QWORD *)a1 + 9) = v48;
      *((_QWORD *)a1 + 10) = v54;
      *((_QWORD *)a1 + 11) = v53 + v51;
      *((_QWORD *)a1 + 12) = v55;
      *((_QWORD *)a1 + 13) = v47 + v45 + v57 + v46;
      *((_QWORD *)a1 + 14) = __ROR8__(v47 + v45 + v57, 44) + v57 + __ROR8__(v48 + v52 + v46 + v57, 21);
      v14 = 64;
    }
    v16 = &a1[4 - v17];
    if (v16 > a4)
      v16 = a1;
    else
      memcpy(a1, (char *)&__src + v17, 4 - v17);
  }
  v58 = *a7;
  __src = *a7;
  v59 = v16 + 8;
  if (v16 + 8 <= a4)
  {
    *(_QWORD *)v16 = v58;
  }
  else
  {
    v60 = a4 - v16;
    memcpy(v16, &__src, a4 - v16);
    if (v14)
    {
      v61 = *((_QWORD *)a1 + 9);
      v62 = *((_QWORD *)a1 + 11);
      v63 = *((_QWORD *)a1 + 1);
      v64 = *((_QWORD *)a1 + 12);
      v65 = *((_QWORD *)a1 + 13);
      v66 = *((_QWORD *)a1 + 6);
      v67 = *((_QWORD *)a1 + 7);
      v68 = *((_QWORD *)a1 + 14);
      v69 = v68 ^ (0xB492B66FBE98F273 * __ROR8__(v61 + *((_QWORD *)a1 + 8) + v62 + v63, 37));
      v70 = *((_QWORD *)a1 + 5);
      v71 = v70 + v62 - 0x4B6D499041670D8DLL * __ROR8__(v64 + v61 + v66, 42);
      v72 = __ROR8__(v65 + *((_QWORD *)a1 + 10), 33);
      v73 = *(_QWORD *)a1 - 0x4B6D499041670D8DLL * v64;
      v74 = v65 + v73;
      v76 = *((_QWORD *)a1 + 2);
      v75 = *((_QWORD *)a1 + 3);
      v72 *= 0xB492B66FBE98F273;
      v77 = v72 + v68 + *((_QWORD *)a1 + 4);
      v78 = v73 + v63 + v76;
      v79 = v70 + v66 + v77;
      *((_QWORD *)a1 + 12) = __ROR8__(v74 + v75 + v69, 21) + v73 + __ROR8__(v78, 44);
      *((_QWORD *)a1 + 13) = v79 + v67;
      *((_QWORD *)a1 + 14) = __ROR8__(v79, 44) + v77 + __ROR8__(v76 + v71 + v77 + v67, 21);
      *((_QWORD *)a1 + 10) = v69;
      *((_QWORD *)a1 + 11) = v78 + v75;
      *((_QWORD *)a1 + 8) = v72;
      *((_QWORD *)a1 + 9) = v71;
      v14 += 64;
    }
    else
    {
      v80 = *((_QWORD *)a1 + 15);
      v81 = __ROR8__(v80 ^ 0xB492B66FBE98F273, 49);
      v82 = v80 ^ (v80 >> 47);
      v83 = *((_QWORD *)a1 + 1);
      v84 = v83 + v80 + v81;
      v85 = *((_QWORD *)a1 + 6);
      v86 = *((_QWORD *)a1 + 7);
      v87 = *((_QWORD *)a1 + 5);
      v88 = v87 + v81 - 0x4B6D499041670D8DLL * __ROR8__(v85 + v80 - 0x4B6D499041670D8DLL * v80, 42);
      v89 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v80 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v80 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v90 = 0x9DDFEA08EB382D69
          * (v80 ^ (((0x9DDFEA08EB382D69 * (v82 ^ (0xB492B66FBE98F273 * v80))) ^ v80) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v82 ^ (0xB492B66FBE98F273 * v80))));
      v91 = 0x9DDFEA08EB382D69 * (v90 ^ (v90 >> 47));
      v92 = 0xB492B66FBE98F273 * __ROR8__(v82 - 0x622015F714C7D297 * (v89 ^ (v89 >> 47)), 33);
      v93 = *(_QWORD *)a1 - 0x6D8ED9027DD26057 * v80;
      v95 = *((_QWORD *)a1 + 2);
      v94 = *((_QWORD *)a1 + 3);
      v96 = v93 + v83 + v95;
      v97 = v91 ^ (0xB492B66FBE98F273 * __ROR8__(v84, 37));
      v98 = v92 + *((_QWORD *)a1 + 4) + v91;
      *((_QWORD *)a1 + 8) = v92;
      *((_QWORD *)a1 + 9) = v88;
      *((_QWORD *)a1 + 10) = v97;
      *((_QWORD *)a1 + 11) = v96 + v94;
      *((_QWORD *)a1 + 12) = __ROR8__(v96, 44) + v93 + __ROR8__(v93 + v82 + v94 + v97, 21);
      *((_QWORD *)a1 + 13) = v87 + v85 + v98 + v86;
      *((_QWORD *)a1 + 14) = __ROR8__(v87 + v85 + v98, 44) + v98 + __ROR8__(v88 + v95 + v86 + v98, 21);
      v14 = 64;
    }
    v59 = &a1[8 - v60];
    if (v59 > a4)
      v59 = a1;
    else
      memcpy(a1, (char *)&__src + v60, 8 - v60);
  }
  __src = v14;
  v99 = sub_1C4ED4714(a1, &__src, v59, (unint64_t)a4, *a8);
  return sub_1C4E37BA0(a1, __src, v99, a4);
}

uint64_t sub_1C53DED60(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  llvm::PointerType *v5;
  const void *v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  __int128 __p;
  unint64_t v17;
  __int128 __dst;
  unint64_t v19;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
LABEL_22:
    abort();
  v4 = v2;
  v5 = *(llvm::PointerType **)(a1 + 32);
  v6 = *(const void **)a1;
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v19 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v19) = *(_QWORD *)(a1 + 8);
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v6, v3);
  *((_BYTE *)p_dst + v3) = 0;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_22;
  v11 = *(const void **)(a1 + 16);
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_p = operator new(v13 + 1);
    *((_QWORD *)&__p + 1) = v10;
    v17 = v14 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v17) = *(_QWORD *)(a1 + 24);
  p_p = &__p;
  if (v10)
LABEL_16:
    memmove(p_p, v11, v10);
  *((_BYTE *)p_p + v10) = 0;
  llvm::InlineAsm::InlineAsm(v4, v5, &__dst, &__p, *(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41), *(_DWORD *)(a1 + 44), *(_BYTE *)(a1 + 48));
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__dst);
  return v4;
}

_QWORD *sub_1C53DEEE8(unint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C623D0A0(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1C53DEFA0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  void **v22;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if (a2 > (v4 - (uint64_t)v5) >> 5)
  {
    v7 = (uint64_t)v5 - *a1;
    v8 = a2 + (v7 >> 5);
    if (v8 >> 59)
      abort();
    v9 = v4 - *a1;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v21 = a1 + 2;
    if (v10)
    {
      if (v10 >> 59)
        sub_1C4764EE4();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[32 * (v7 >> 5)];
    __p = v11;
    v18 = v12;
    v20 = &v11[32 * v10];
    v13 = &v12[32 * a2];
    do
    {
      *(_QWORD *)v12 = 0xFFFFFFFFLL;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 3) = 0;
      v12 += 32;
    }
    while (v12 != v13);
    v19 = v13;
    sub_1C50346AC(a1, &__p);
    v15 = v18;
    v14 = v19;
    if (v19 != v18)
    {
      do
      {
        v16 = v14 - 32;
        v22 = (void **)(v14 - 24);
        sub_1C4765410(&v22);
        v14 = v16;
      }
      while (v16 != v15);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    if (a2)
    {
      v6 = &v5[4 * a2];
      do
      {
        *v5 = 0xFFFFFFFFLL;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = 0;
        v5 += 4;
      }
      while (v5 != v6);
      v5 = v6;
    }
    a1[1] = (uint64_t)v5;
  }
}

_QWORD *sub_1C53DF0E8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    v8 = (char *)operator new(32 * a4);
    *v7 = v8;
    v7[1] = v8;
    v7[2] = &v8[32 * a4];
    return sub_1C53DF15C(v7, a2, a3);
  }
  return result;
}

_QWORD *sub_1C53DF15C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      result = sub_1C484333C((_QWORD *)(v4 + 8), *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3));
      v4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, llvm::Instruction *a6)
{
  char *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a3 + 28;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    v9 = *((_QWORD *)a6 + 5);
    v10 = (uint64_t *)((char *)a6 + 24);
    *((_QWORD *)this + 5) = v9;
    *(_WORD *)(v9 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(v9 + 56);
      if (v12)
      {
        v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13)
          llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
    v11 = *v10;
    *((_QWORD *)this + 3) = *v10;
    *((_QWORD *)this + 4) = v10;
    *(_QWORD *)(v11 + 8) = v7;
    *v10 = (uint64_t)v7;
  }
  return this;
}

{
  char *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a3 + 28;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a6)
  {
    v9 = *((_QWORD *)a6 + 5);
    v10 = (uint64_t *)((char *)a6 + 24);
    *((_QWORD *)this + 5) = v9;
    *(_WORD *)(v9 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(v9 + 56);
      if (v12)
      {
        v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13)
          llvm::ValueSymbolTable::reinsertValue(v13, this);
      }
    }
    v11 = *v10;
    *((_QWORD *)this + 3) = *v10;
    *((_QWORD *)this + 4) = v10;
    *(_QWORD *)(v11 + 8) = v7;
    *v10 = (uint64_t)v7;
  }
  return this;
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, llvm::BasicBlock *a6)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a3 + 28;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v12 = *((_QWORD *)a6 + 7);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, this);
    }
  }
  v10 = *((_QWORD *)a6 + 5);
  v9 = (_QWORD *)((char *)a6 + 40);
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v9;
  *(_QWORD *)(v10 + 8) = v8;
  *v9 = v8;
  return this;
}

{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a3 + 28;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a6;
  *((_WORD *)a6 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v12 = *((_QWORD *)a6 + 7);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, this);
    }
  }
  v10 = *((_QWORD *)a6 + 5);
  v9 = (_QWORD *)((char *)a6 + 40);
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v9;
  *(_QWORD *)(v10 + 8) = v8;
  *v9 = v8;
  return this;
}

void llvm::Instruction::~Instruction(llvm::UndefValue **this, llvm::Type *a2)
{
  unsigned __int8 *v3;
  llvm::UndefValue *v4;
  llvm::Value *v5;

  if ((*((_BYTE *)this + 23) & 8) != 0)
  {
    v4 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v4, v5);
  }
  v3 = (unsigned __int8 *)this[6];
  if (v3)
    llvm::MetadataTracking::untrack((uint64_t)(this + 6), v3);
  llvm::Value::~Value((llvm::Value *)this, (llvm::Value *)v3);
}

{
  unsigned __int8 *v3;
  llvm::UndefValue *v4;
  llvm::Value *v5;

  if ((*((_BYTE *)this + 23) & 8) != 0)
  {
    v4 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v4, v5);
  }
  v3 = (unsigned __int8 *)this[6];
  if (v3)
    llvm::MetadataTracking::untrack((uint64_t)(this + 6), v3);
  llvm::Value::~Value((llvm::Value *)this, (llvm::Value *)v3);
}

uint64_t llvm::Instruction::setParent(uint64_t this, llvm::BasicBlock *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t llvm::Instruction::getModule(llvm::Instruction *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
}

uint64_t llvm::Instruction::getFunction(llvm::Instruction *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 56);
}

void llvm::Instruction::removeFromParent(llvm::Instruction *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
  v2 = *((_QWORD *)this + 3);
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
}

uint64_t llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *((_QWORD *)this + 4);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
  v3 = *((_QWORD *)this + 3);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  *v4 = v3;
  *(_QWORD *)(v3 + 8) = v4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  llvm::Value::deleteValue(this);
  return v2;
}

void llvm::Instruction::insertBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  llvm::ValueSymbolTable *v9;

  v4 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v4;
  *(_WORD *)(v4 + 18) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 56);
    if (v8)
    {
      v9 = *(llvm::ValueSymbolTable **)(v8 + 104);
      if (v9)
        llvm::ValueSymbolTable::reinsertValue(v9, this);
    }
  }
  v6 = *((_QWORD *)a2 + 3);
  v5 = (_QWORD *)((char *)a2 + 24);
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v5;
  v7 = (char *)this + 24;
  *(_QWORD *)(v6 + 8) = v7;
  *v5 = v7;
}

uint64_t llvm::Instruction::insertAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  return sub_1C53DF664((_QWORD *)(*((_QWORD *)a2 + 5) + 40), (uint64_t)a2 + 24, (uint64_t)this);
}

uint64_t sub_1C53DF664(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  llvm::ValueSymbolTable *v9;

  if ((_QWORD *)*a1 == a1)
  {
    v4 = (uint64_t *)a1[1];
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a1, a3);
  }
  else
  {
    v4 = *(uint64_t **)(a2 + 8);
    *(_QWORD *)(a3 + 40) = a1 - 5;
    *((_WORD *)a1 - 11) &= ~0x8000u;
    if ((*(_BYTE *)(a3 + 23) & 0x10) != 0)
    {
      v8 = a1[2];
      if (v8)
      {
        v9 = *(llvm::ValueSymbolTable **)(v8 + 104);
        if (v9)
          llvm::ValueSymbolTable::reinsertValue(v9, (llvm::Value *)a3);
      }
    }
  }
  v5 = *v4;
  *(_QWORD *)(a3 + 24) = *v4;
  *(_QWORD *)(a3 + 32) = v4;
  v6 = a3 + 24;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = v6;
  return v6;
}

void llvm::Instruction::moveBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  llvm::Instruction *v2;
  llvm::Instruction *v3;
  llvm::Instruction *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  llvm::Instruction *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  llvm::Instruction *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  size_t *ValueName;
  char *v24;
  char *v25;
  int v26;
  size_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Instruction *v30;
  llvm::Instruction *v31;
  llvm::Instruction *v32;
  llvm::Instruction *v33;
  llvm::Instruction *v34;
  llvm::Instruction *v35;
  llvm::ValueSymbolTable *v36;
  llvm::ValueSymbolTable *v37;
  uint64_t *v38;
  uint64_t *v39;

  v2 = (llvm::Instruction *)((char *)a2 + 24);
  v3 = (llvm::Instruction *)((char *)this + 24);
  v4 = (llvm::Instruction *)*((_QWORD *)this + 4);
  if (a2 != this && v4 != (llvm::Instruction *)((char *)this + 24))
  {
    if (v4 == v2)
      return;
    v5 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)a2 + 5);
    *(_WORD *)(v6 + 18) &= ~0x8000u;
    if (v6 != v5)
    {
      v7 = *(uint64_t **)(v6 + 56);
      if (v7)
        v7 = (uint64_t *)v7[13];
      v8 = *(uint64_t **)(v5 + 56);
      if (v8)
        v8 = (uint64_t *)v8[13];
      if (v7 == v8)
      {
        if (v3 != v4)
        {
          v9 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            v10 = (char *)v9 - 24;
            if (!v9)
              v10 = 0;
            *((_QWORD *)v10 + 5) = v6;
            v9 = (llvm::Instruction *)*((_QWORD *)v9 + 1);
          }
          while (v9 != v4);
        }
      }
      else
      {
        v36 = (llvm::ValueSymbolTable *)v7;
        v38 = v8;
        if (v3 != v4)
        {
          v20 = (char *)this + 24;
          v32 = (llvm::Instruction *)((char *)a2 + 24);
          v34 = (llvm::Instruction *)((char *)this + 24);
          v28 = v6;
          v30 = v4;
          do
          {
            if (v20)
              v21 = v20 - 24;
            else
              v21 = 0;
            v22 = *((_DWORD *)v21 + 5) & 0x10000000;
            if (v38 && v22)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v21);
              llvm::ValueSymbolTable::removeValueName(v38, ValueName);
            }
            *((_QWORD *)v21 + 5) = v28;
            if (v36 && v22)
              llvm::ValueSymbolTable::reinsertValue(v36, (llvm::Value *)v21);
            v20 = (char *)*((_QWORD *)v20 + 1);
            v4 = v30;
            v2 = v32;
            v3 = v34;
          }
          while (v20 != (char *)v30);
        }
      }
    }
    goto LABEL_15;
  }
  if (a2 != this && v4 != v2)
  {
    v14 = *((_QWORD *)this + 5);
    v15 = *((_QWORD *)a2 + 5);
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if (v15 != v14)
    {
      v16 = *(uint64_t **)(v15 + 56);
      if (v16)
        v16 = (uint64_t *)v16[13];
      v17 = *(uint64_t **)(v14 + 56);
      if (v17)
        v17 = (uint64_t *)v17[13];
      if (v16 == v17)
      {
        if (v3 != v4)
        {
          v18 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            v19 = (char *)v18 - 24;
            if (!v18)
              v19 = 0;
            *((_QWORD *)v19 + 5) = v15;
            v18 = (llvm::Instruction *)*((_QWORD *)v18 + 1);
          }
          while (v18 != v4);
        }
      }
      else
      {
        v37 = (llvm::ValueSymbolTable *)v16;
        v39 = v17;
        if (v3 != v4)
        {
          v24 = (char *)this + 24;
          v29 = v15;
          v31 = v4;
          v33 = (llvm::Instruction *)((char *)a2 + 24);
          v35 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            if (v24)
              v25 = v24 - 24;
            else
              v25 = 0;
            v26 = *((_DWORD *)v25 + 5) & 0x10000000;
            if (v39 && v26)
            {
              v27 = (size_t *)llvm::Value::getValueName((llvm::Value *)v25);
              llvm::ValueSymbolTable::removeValueName(v39, v27);
            }
            *((_QWORD *)v25 + 5) = v29;
            if (v37 && v26)
              llvm::ValueSymbolTable::reinsertValue(v37, (llvm::Value *)v25);
            v24 = (char *)*((_QWORD *)v24 + 1);
            v4 = v31;
            v2 = v33;
            v3 = v35;
          }
          while (v24 != (char *)v31);
        }
      }
    }
    if (v4 != v3)
    {
LABEL_15:
      v11 = *(_QWORD *)v4;
      v12 = *(_QWORD *)v3;
      *(_QWORD *)(v12 + 8) = v4;
      *(_QWORD *)v4 = v12;
      v13 = *(_QWORD *)v2;
      *(_QWORD *)(v11 + 8) = v2;
      *(_QWORD *)v3 = v13;
      *(_QWORD *)(v13 + 8) = v3;
      *(_QWORD *)v2 = v11;
    }
  }
}

void llvm::Instruction::moveBefore(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  size_t *ValueName;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v21;
  llvm::ValueSymbolTable *v22;
  uint64_t *v23;

  v3 = a1 + 3;
  v4 = (uint64_t *)a1[4];
  if (a1 + 3 != a3 && v4 != a3)
  {
    v6 = a1[5];
    *(_WORD *)(a2 + 18) &= ~0x8000u;
    if (v6 != a2)
    {
      v7 = *(uint64_t **)(a2 + 56);
      if (v7)
        v7 = (uint64_t *)v7[13];
      v8 = *(uint64_t **)(v6 + 56);
      if (v8)
        v8 = (uint64_t *)v8[13];
      if (v7 == v8)
      {
        if (v3 != v4)
        {
          v9 = a1 + 3;
          do
          {
            v10 = v9 - 3;
            if (!v9)
              v10 = 0;
            v10[5] = a2;
            v9 = (uint64_t *)v9[1];
          }
          while (v9 != v4);
        }
      }
      else
      {
        v22 = (llvm::ValueSymbolTable *)v7;
        v23 = v8;
        if (v3 != v4)
        {
          v14 = a1 + 3;
          v21 = a1 + 3;
          v18 = v4;
          v19 = a3;
          do
          {
            if (v14)
              v15 = v14 - 3;
            else
              v15 = 0;
            v16 = *((_DWORD *)v15 + 5) & 0x10000000;
            if (v23 && v16)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v15);
              llvm::ValueSymbolTable::removeValueName(v23, ValueName);
            }
            v15[5] = a2;
            if (v22 && v16)
              llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)v15);
            v14 = (uint64_t *)v14[1];
            v4 = v18;
            a3 = v19;
            v3 = v21;
          }
          while (v14 != v18);
        }
      }
    }
    if (v4 != v3)
    {
      v11 = *v4;
      v12 = *v3;
      *(_QWORD *)(v12 + 8) = v4;
      *v4 = v12;
      v13 = *a3;
      *(_QWORD *)(v11 + 8) = a3;
      *v3 = v13;
      *(_QWORD *)(v13 + 8) = v3;
      *a3 = v11;
    }
  }
}

void llvm::Instruction::moveAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  llvm::Instruction *v2;
  llvm::Instruction *v3;
  llvm::Instruction *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  llvm::Instruction *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  size_t *ValueName;
  llvm::Instruction *v19;
  llvm::Instruction *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t *v24;

  v2 = (llvm::Instruction *)*((_QWORD *)a2 + 4);
  v3 = (llvm::Instruction *)((char *)this + 24);
  v4 = (llvm::Instruction *)*((_QWORD *)this + 4);
  if (v2 != (llvm::Instruction *)((char *)this + 24) && v4 != v2)
  {
    v6 = *((_QWORD *)this + 5);
    v7 = *((_QWORD *)a2 + 5);
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if (v7 != v6)
    {
      v8 = *(uint64_t **)(v7 + 56);
      if (v8)
        v8 = (uint64_t *)v8[13];
      v9 = *(uint64_t **)(v6 + 56);
      if (v9)
        v9 = (uint64_t *)v9[13];
      if (v8 == v9)
      {
        if (v3 != v4)
        {
          v10 = (llvm::Instruction *)((char *)this + 24);
          do
          {
            v11 = (char *)v10 - 24;
            if (!v10)
              v11 = 0;
            *((_QWORD *)v11 + 5) = v7;
            v10 = (llvm::Instruction *)*((_QWORD *)v10 + 1);
          }
          while (v10 != v4);
        }
      }
      else
      {
        v23 = (llvm::ValueSymbolTable *)v8;
        v24 = v9;
        if (v3 != v4)
        {
          v15 = (char *)this + 24;
          v21 = (llvm::Instruction *)((char *)this + 24);
          v22 = v7;
          v19 = v4;
          v20 = v2;
          do
          {
            if (v15)
              v16 = v15 - 24;
            else
              v16 = 0;
            v17 = *((_DWORD *)v16 + 5) & 0x10000000;
            if (v24 && v17)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v16);
              llvm::ValueSymbolTable::removeValueName(v24, ValueName);
            }
            *((_QWORD *)v16 + 5) = v22;
            if (v23 && v17)
              llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)v16);
            v15 = (char *)*((_QWORD *)v15 + 1);
            v4 = v19;
            v2 = v20;
            v3 = v21;
          }
          while (v15 != (char *)v19);
        }
      }
    }
    if (v4 != v3)
    {
      v12 = *(_QWORD *)v4;
      v13 = *(_QWORD *)v3;
      *(_QWORD *)(v13 + 8) = v4;
      *(_QWORD *)v4 = v13;
      v14 = *(_QWORD *)v2;
      *(_QWORD *)(v12 + 8) = v2;
      *(_QWORD *)v3 = v14;
      *(_QWORD *)(v14 + 8) = v3;
      *(_QWORD *)v2 = v12;
    }
  }
}

BOOL llvm::Instruction::comesBefore(llvm::Instruction *this, const llvm::Instruction *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 5);
  v3 = *(__int16 *)(v2 + 18);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(v2 + 48);
    if (v5 != v2 + 40)
    {
      v6 = 0;
      do
      {
        v7 = v5 - 24;
        if (!v5)
          v7 = 0;
        *(_DWORD *)(v7 + 56) = v6++;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != v2 + 40);
    }
    *(_WORD *)(v2 + 18) = v3 | 0x8000;
  }
  return *((_DWORD *)this + 14) < *((_DWORD *)a2 + 14);
}

uint64_t llvm::Instruction::isOnlyUserOfAnyOperand(llvm::Instruction *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = (char *)*((_QWORD *)this - 1);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      return 0;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (char *)this - 32 * v2;
    if (!v2)
      return 0;
  }
  v4 = &v3[32 * v2];
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v5)
      break;
LABEL_11:
    v3 += 32;
    if (v3 == v4)
      return 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    while (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v5 + 24))
    {
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        return 1;
    }
    goto LABEL_11;
  }
  return 1;
}

uint64_t llvm::Instruction::setHasNoUnsignedWrap(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoSignedWrap(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFB | v2;
  return this;
}

uint64_t llvm::Instruction::setIsExact(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::hasNoUnsignedWrap(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::hasNoSignedWrap(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 2) & 1;
}

BOOL llvm::Instruction::dropPoisonGeneratingFlags(llvm::Instruction *this)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = *((unsigned __int8 *)this + 16) - 41;
  if (v2 <= 0x15 && ((0x2070D5u >> v2) & 1) != 0)
    *((_BYTE *)this + 17) &= byte_1C865039C[(char)v2];
  result = sub_1C4774A9C((uint64_t)this);
  if (result)
    *((_BYTE *)this + 17) &= 0xF3u;
  return result;
}

uint64_t llvm::Instruction::setHasNoNaNs(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFB | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoInfs(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xF7 | v2;
  return this;
}

void llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata(uint64_t ***a1, unsigned int *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD **v21;
  _QWORD *v22[2];
  uint64_t v23;

  llvm::Instruction::dropUnknownNonDebugMetadata(a1, a2, a3);
  v4 = *((unsigned __int8 *)a1 + 16);
  if ((v4 - 33) <= 0x33 && ((1 << (v4 - 33)) & 0x8000000000041) != 0)
  {
    v7 = (uint64_t *)(a1 + 8);
    v6 = (uint64_t)a1[8];
    if (v6)
    {
      v8 = 0;
      v22[0] = 0;
      v22[1] = 0;
      v21 = v22;
      v20 = xmmword_1C85FC8D0;
      while (1)
      {
        if (v4 == 84)
          v9 = 0;
        else
          v9 = v4 == 39 ? (*((_DWORD *)a1 + 20) + 1) : 2;
        v10 = *((_DWORD *)a1 + 5);
        if (v10 < 0 && (v16 = v10 & 0x7FFFFFF, ((unint64_t)a1[-4 * v16 - 1] & 0xFFFFFFFF0) != 0))
        {
          v12 = -v16;
          v11 = *((_DWORD *)&a1[-4 * v16 - 1] - 1) - *(_DWORD *)((char *)&a1[-4 * v16] - (char *)a1[-4 * v16 - 1]);
        }
        else
        {
          v11 = 0;
          v12 = -(uint64_t)(v10 & 0x7FFFFFF);
        }
        v13 = **a1;
        if (v8 >= ((-32 - 32 * v9 + 32 * (unint64_t)-v11 - 32 * v12) >> 5))
          break;
        if (v6 && (v8 + 2) < *(_DWORD *)(v6 + 8))
          v14 = *(_QWORD *)(v6 + 8 * (v8 + 2) + 40);
        else
          v14 = 0;
        v23 = v14;
        v15 = llvm::AttributeSet::removeAttributes(&v23, v13, (uint64_t)&v20);
        if (v14 == v15)
          v6 = *v7;
        else
          v6 = llvm::AttributeList::setAttributesAtIndex(a1 + 8, v13, (int)v8 + 1, v15);
        a1[8] = (uint64_t **)v6;
        LOBYTE(v4) = *((_BYTE *)a1 + 16);
        ++v8;
      }
      if (v6 && *(_DWORD *)(v6 + 8) >= 2u)
        v17 = *(_QWORD *)(v6 + 48);
      else
        v17 = 0;
      v23 = v17;
      v18 = llvm::AttributeSet::removeAttributes(&v23, v13, (uint64_t)&v20);
      if (v17 == v18)
        v19 = *v7;
      else
        v19 = llvm::AttributeList::setAttributesAtIndex(v7, v13, 0, v18);
      *v7 = v19;
      sub_1C5010E9C((uint64_t)&v21, v22[0]);
    }
  }
}

uint64_t llvm::Instruction::isExact(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::setFast(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = -2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = v2 & 0xFE | *(_BYTE *)(this + 17) & 1;
  return this;
}

uint64_t llvm::Instruction::setHasAllowReassoc(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoSignedZeros(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xEF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasAllowReciprocal(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xDF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasAllowContract(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 64;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xBF | v2;
  return this;
}

uint64_t llvm::Instruction::setHasApproxFunc(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 0x80;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = v2 & 0x80 | *(_BYTE *)(this + 17) & 0x7F;
  return this;
}

uint64_t llvm::Instruction::setFastMathFlags(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) |= 2 * a2;
  return result;
}

BOOL llvm::Instruction::isFast(llvm::Instruction *this)
{
  return *((unsigned __int8 *)this + 17) > 0xFDu;
}

uint64_t llvm::Instruction::hasAllowReassoc(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::hasNoNaNs(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 2) & 1;
}

uint64_t llvm::Instruction::hasNoInfs(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 3) & 1;
}

uint64_t llvm::Instruction::hasNoSignedZeros(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 4) & 1;
}

uint64_t llvm::Instruction::hasAllowReciprocal(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 5) & 1;
}

uint64_t llvm::Instruction::hasAllowContract(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 6) & 1;
}

uint64_t llvm::Instruction::hasApproxFunc(llvm::Instruction *this)
{
  return *((unsigned __int8 *)this + 17) >> 7;
}

uint64_t llvm::Instruction::getFastMathFlags(llvm::Instruction *this)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)this + 17) >> 1;
  if (v1 == 127)
    return 0xFFFFFFFFLL;
  else
    return v1;
}

uint64_t llvm::Instruction::copyFastMathFlags(uint64_t this, const llvm::Instruction *a2)
{
  *(_BYTE *)(this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *(_BYTE *)(this + 17) & 1;
  return this;
}

BOOL llvm::Instruction::copyIRFlags(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  unsigned int v23;
  _BOOL8 result;

  if (a3)
  {
    HIDWORD(v6) = *(unsigned __int8 *)(a1 + 16) - 41;
    LODWORD(v6) = HIDWORD(v6);
    v5 = v6 >> 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      v10 = *(unsigned __int8 *)(a2 + 16);
      if (v10 < 0x1C)
      {
        if (v10 != 5)
          goto LABEL_15;
        v11 = *(unsigned __int16 *)(a2 + 18) - 13;
      }
      else
      {
        v11 = v10 - 41;
      }
      HIDWORD(v13) = v11;
      LODWORD(v13) = v11;
      v12 = v13 >> 1;
      v7 = v12 > 6;
      v14 = (1 << v12) & 0x47;
      if (!v7 && v14 != 0)
      {
        v16 = *(_BYTE *)(a1 + 17) & 0xFB | (4 * ((*(unsigned __int8 *)(a2 + 17) >> 2) & 1));
        *(_BYTE *)(a1 + 17) = v16;
        *(_BYTE *)(a1 + 17) = v16 & 0xFD | *(_BYTE *)(a2 + 17) & 2;
      }
    }
  }
LABEL_15:
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 < 0x1C)
  {
    if (v17 != 5)
      goto LABEL_30;
    v20 = *(unsigned __int16 *)(a2 + 18);
    v7 = v20 > 0x1B;
    v21 = (1 << v20) & 0xC180000;
    if (v7 || v21 == 0)
      goto LABEL_30;
  }
  else
  {
    v7 = v17 > 0x37;
    v18 = (1 << v17) & 0xC1800000000000;
    if (v7 || v18 == 0)
      goto LABEL_30;
  }
  v23 = *(unsigned __int8 *)(a1 + 16);
  if (v23 <= 0x37 && ((1 << v23) & 0xC1800000000000) != 0)
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 17) & 0xFD | *(_BYTE *)(a2 + 17) & 2;
LABEL_30:
  result = sub_1C4774A9C(a2);
  if (result)
  {
    result = sub_1C4774A9C(a1);
    if (result)
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  }
  if (*(_BYTE *)(a2 + 16) == 62 && a1 && *(_BYTE *)(a1 + 16) == 62)
    *(_BYTE *)(a1 + 17) |= *(_BYTE *)(a2 + 17) & 2;
  return result;
}

BOOL llvm::Instruction::andIRFlags(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v15;
  unint64_t v16;
  int v17;
  char v19;
  char v20;
  char v21;
  char v22;
  unsigned int v24;
  char v25;
  _BOOL8 result;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 != 5)
    {
LABEL_28:
      if (v4 != 5)
        goto LABEL_40;
      v10 = *(unsigned __int16 *)(a2 + 18);
LABEL_30:
      if (v10 > 0x1B || ((1 << v10) & 0xC180000) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
    v10 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v12) = v10 - 13;
    LODWORD(v12) = v10 - 13;
    v11 = v12 >> 1;
    v7 = v11 > 6;
    v13 = (1 << v11) & 0x47;
    if (v7 || v13 == 0)
      goto LABEL_30;
  }
  else
  {
    HIDWORD(v6) = v4 - 41;
    LODWORD(v6) = v4 - 41;
    v5 = v6 >> 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x47;
    if (v7 || v8 == 0)
      goto LABEL_25;
  }
  HIDWORD(v16) = *(unsigned __int8 *)(a1 + 16) - 41;
  LODWORD(v16) = HIDWORD(v16);
  v15 = v16 >> 1;
  v7 = v15 > 6;
  v17 = (1 << v15) & 0x47;
  if (!v7 && v17 != 0)
  {
    v19 = *(_BYTE *)(a1 + 17);
    if ((v19 & 4) != 0)
      v20 = *(_BYTE *)(a2 + 17) & 4;
    else
      v20 = 0;
    v21 = v20 | v19 & 0xFB;
    *(_BYTE *)(a1 + 17) = v21;
    if ((v19 & 2) != 0)
      v22 = *(_BYTE *)(a2 + 17) & 2;
    else
      v22 = 0;
    *(_BYTE *)(a1 + 17) = v22 | v21 & 0xFD;
    v4 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v4 < 0x1C)
    goto LABEL_28;
LABEL_25:
  if (v4 > 0x37 || ((1 << v4) & 0xC1800000000000) == 0)
    goto LABEL_40;
LABEL_34:
  v24 = *(unsigned __int8 *)(a1 + 16);
  if (v24 <= 0x37 && ((1 << v24) & 0xC1800000000000) != 0)
  {
    if ((*(_BYTE *)(a1 + 17) & 2) != 0)
      v25 = *(_BYTE *)(a2 + 17) & 2;
    else
      v25 = 0;
    *(_BYTE *)(a1 + 17) = v25 | *(_BYTE *)(a1 + 17) & 0xFD;
  }
LABEL_40:
  result = sub_1C4774A9C(a2);
  if (result)
  {
    result = sub_1C4774A9C(a1);
    if (result)
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 17) & *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  }
  if (*(_BYTE *)(a2 + 16) == 62 && a1 && *(_BYTE *)(a1 + 16) == 62)
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 17) & 0xFD | *(_BYTE *)(a1 + 17) & *(_BYTE *)(a2 + 17) & 2;
  return result;
}

const char *llvm::Instruction::getOpcodeName(llvm::Instruction *this)
{
  if (((_DWORD)this - 1) > 0x42)
    return "<Invalid operator> ";
  else
    return off_1E8167C38[(int)this - 1];
}

uint64_t llvm::Instruction::isIdenticalTo(llvm::Instruction *this, const llvm::Instruction *a2)
{
  uint64_t result;

  result = llvm::Instruction::isIdenticalToWhenDefined(this, a2);
  if ((_DWORD)result)
    return (*((unsigned __int8 *)a2 + 17) ^ *((unsigned __int8 *)this + 17)) < 2;
  return result;
}

uint64_t llvm::Instruction::isIdenticalToWhenDefined(llvm::Instruction *this, const llvm::Instruction *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 != *((unsigned __int8 *)a2 + 16))
    return 0;
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)a2 + 5);
  if (((v4 ^ v3) & 0x7FFFFFF) != 0 || *(_QWORD *)this != *(_QWORD *)a2)
    return 0;
  if (((v4 | v3) & 0x7FFFFFF) == 0)
    return sub_1C53E0660((uint64_t)this, (uint64_t)a2, 0);
  if ((v3 & 0x40000000) != 0)
  {
    v7 = (_QWORD *)*((_QWORD *)this - 1);
    v6 = v3 & 0x7FFFFFF;
    if ((v4 & 0x40000000) != 0)
      goto LABEL_8;
  }
  else
  {
    v6 = v3 & 0x7FFFFFF;
    v7 = (_QWORD *)((char *)this - 32 * v6);
    if ((v4 & 0x40000000) != 0)
    {
LABEL_8:
      v8 = (_QWORD *)*((_QWORD *)a2 - 1);
      goto LABEL_11;
    }
  }
  v8 = (_QWORD *)((char *)a2 - 32 * (v4 & 0x7FFFFFF));
LABEL_11:
  if (v6)
  {
    v9 = 32 * v6;
    while (*v7 == *v8)
    {
      v7 += 4;
      v8 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_15;
    }
    return 0;
  }
LABEL_15:
  if (v2 != 83)
    return sub_1C53E0660((uint64_t)this, (uint64_t)a2, 0);
  if ((v3 & 0x40000000) != 0)
    v10 = (char *)*((_QWORD *)this - 1);
  else
    v10 = (char *)this - 32 * v6;
  v11 = &v10[32 * *((unsigned int *)this + 15)];
  if ((v4 & 0x40000000) != 0)
    v12 = (char *)*((_QWORD *)a2 - 1);
  else
    v12 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
  return memcmp(v11, &v12[32 * *((unsigned int *)a2 + 15)], 8 * v6) == 0;
}

uint64_t sub_1C53E0660(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  unsigned int v8;
  int v10;
  int v11;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 59)
  {
    if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64))
    {
      if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0x3F) != 0)
        return a3;
      else
        return 1;
    }
    return 0;
  }
  if (a1 && v3 == 60)
  {
    v5 = *(unsigned __int16 *)(a1 + 18);
    v6 = *(unsigned __int16 *)(a2 + 18);
    if (((v5 ^ v6) & 1) != 0)
      return 0;
    v7 = v6 ^ v5;
    v8 = (v7 & 0x7E) != 0 ? a3 : 1;
    if ((v7 & 0x380) != 0 || v8 == 0)
      return 0;
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (a1 && v3 == 61)
  {
    v10 = *(unsigned __int16 *)(a1 + 18);
    v11 = *(unsigned __int16 *)(a2 + 18);
    if (((v10 ^ v11) & 1) != 0)
      return 0;
    v4 = 0;
    v22 = v11 ^ v10;
    if ((v22 & 0x7E) != 0)
      v23 = a3;
    else
      v23 = 1;
    if ((v22 & 0x380) == 0 && v23)
      return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
    return v4;
  }
  if (a1 && (v3 - 83) >= 0xFFFFFFFE)
    return ((*(unsigned __int16 *)(a2 + 18) ^ *(unsigned __int16 *)(a1 + 18)) & 0x3F) == 0;
  if (a1 && v3 == 84)
  {
    v13 = *(_WORD *)(a1 + 18);
    v14 = *(_WORD *)(a2 + 18);
    if ((v13 & 3u) - 1 < 2 != (v14 & 3u) - 1 < 2
      || ((v14 ^ v13) & 0xFFC) != 0
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
    {
      return 0;
    }
    v15 = *(_DWORD *)(a1 + 20);
    if (v15 < 0)
      v16 = *(_QWORD *)(a1 - 32 * (v15 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v16) = 0;
    v17 = *(_DWORD *)(a2 + 20);
    if (v17 < 0)
      v18 = *(_QWORD *)(a2 - 32 * (v17 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v18) = 0;
    if ((_DWORD)v16 != (_DWORD)v18)
      return 0;
    if (v15 < 0)
    {
      v44 = a1 - 32 * (v15 & 0x7FFFFFF);
      v45 = *(_QWORD *)(v44 - 8);
      v20 = v44 - 8;
      v19 = v20 - v45;
      if ((v17 & 0x80000000) == 0)
        goto LABEL_37;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      if ((v17 & 0x80000000) == 0)
      {
LABEL_37:
        v21 = 0;
        goto LABEL_38;
      }
    }
    v21 = a2 - 32 * (v17 & 0x7FFFFFF) - 8 - *(_QWORD *)(a2 - 32 * (v17 & 0x7FFFFFF) - 8);
LABEL_38:
    if (v19 != v20)
    {
      while (*(_QWORD *)v19 == *(_QWORD *)v21
           && *(_DWORD *)(v19 + 8) == *(_DWORD *)(v21 + 8)
           && *(_DWORD *)(v19 + 12) == *(_DWORD *)(v21 + 12))
      {
        v19 += 16;
        v21 += 16;
        v4 = 1;
        if (v19 == v20)
          return v4;
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 33)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0xFFC) != 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
    v25 = *(_DWORD *)(a1 + 20);
    if (v25 < 0)
      v26 = *(_QWORD *)(a1 - 32 * (v25 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v26) = 0;
    v27 = *(_DWORD *)(a2 + 20);
    if (v27 < 0)
      v28 = *(_QWORD *)(a2 - 32 * (v27 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v28) = 0;
    if ((_DWORD)v26 != (_DWORD)v28)
      return 0;
    if (v25 < 0)
    {
      v46 = a1 - 32 * (v25 & 0x7FFFFFF);
      v47 = *(_QWORD *)(v46 - 8);
      v30 = v46 - 8;
      v29 = v30 - v47;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_65;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      if ((v27 & 0x80000000) == 0)
      {
LABEL_65:
        v31 = 0;
        goto LABEL_66;
      }
    }
    v31 = a2 - 32 * (v27 & 0x7FFFFFF) - 8 - *(_QWORD *)(a2 - 32 * (v27 & 0x7FFFFFF) - 8);
LABEL_66:
    if (v29 != v30)
    {
      while (*(_QWORD *)v29 == *(_QWORD *)v31
           && *(_DWORD *)(v29 + 8) == *(_DWORD *)(v31 + 8)
           && *(_DWORD *)(v29 + 12) == *(_DWORD *)(v31 + 12))
      {
        v29 += 16;
        v31 += 16;
        v4 = 1;
        if (v29 == v30)
          return v4;
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 39)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 0xFFC) != 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
    v32 = *(_DWORD *)(a1 + 20);
    if (v32 < 0)
      v33 = *(_QWORD *)(a1 - 32 * (v32 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v33) = 0;
    v34 = *(_DWORD *)(a2 + 20);
    if (v34 < 0)
      v35 = *(_QWORD *)(a2 - 32 * (v34 & 0x7FFFFFF) - 8) >> 4;
    else
      LODWORD(v35) = 0;
    if ((_DWORD)v33 != (_DWORD)v35)
      return 0;
    if (v32 < 0)
    {
      v48 = a1 - 32 * (v32 & 0x7FFFFFF);
      v49 = *(_QWORD *)(v48 - 8);
      v37 = v48 - 8;
      v36 = v37 - v49;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_83;
    }
    else
    {
      v36 = 0;
      v37 = 0;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_83:
        v38 = 0;
        goto LABEL_84;
      }
    }
    v38 = a2 - 32 * (v34 & 0x7FFFFFF) - 8 - *(_QWORD *)(a2 - 32 * (v34 & 0x7FFFFFF) - 8);
LABEL_84:
    if (v36 != v37)
    {
      while (*(_QWORD *)v36 == *(_QWORD *)v38
           && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v38 + 8)
           && *(_DWORD *)(v36 + 12) == *(_DWORD *)(v38 + 12))
      {
        v36 += 16;
        v38 += 16;
        v4 = 1;
        if (v36 == v37)
          return v4;
      }
      return 0;
    }
    return 1;
  }
  if (a1 && v3 == 93 || a1 && v3 == 92)
  {
LABEL_90:
    v39 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v39 != *(_DWORD *)(a2 + 72))
      return 0;
    return memcmp(*(const void **)(a1 + 64), *(const void **)(a2 + 64), 4 * v39) == 0;
  }
  if (a1 && v3 == 63)
  {
    if (((*(_WORD *)(a2 + 18) ^ *(_WORD *)(a1 + 18)) & 7) != 0)
      return 0;
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (a1 && v3 == 64)
  {
    v40 = *(_WORD *)(a1 + 18);
    v41 = *(_WORD *)(a2 + 18);
    if (((v40 ^ v41) & 1) != 0
      || ((v40 ^ v41) & 2) != 0
      || ((v41 ^ v40) & 0xFC) != 0)
    {
      return 0;
    }
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  if (!a1 || v3 != 65)
  {
    if (!a1 || v3 != 91)
    {
      v4 = 1;
      if (a1 && v3 == 62)
        return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
      return v4;
    }
    goto LABEL_90;
  }
  v42 = *(_WORD *)(a1 + 18);
  v43 = *(_WORD *)(a2 + 18);
  if (((v43 ^ v42) & 0xF0) != 0)
    return 0;
  v4 = 0;
  if (((v42 & 1) == 0) != (v43 & 1) && ((v43 ^ v42) & 0xE) == 0)
    return *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  return v4;
}

uint64_t llvm::Instruction::isSameOperationAs(llvm::Instruction *this, const llvm::Instruction *a2, char a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v17;

  if (*((unsigned __int8 *)this + 16) != *((unsigned __int8 *)a2 + 16))
    return 0;
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)a2 + 5);
  if (((v4 ^ v3) & 0x7FFFFFF) != 0)
    return 0;
  v5 = *(_QWORD *)this;
  if ((a3 & 2) != 0)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
      v5 = **(_QWORD **)(v5 + 16);
    v6 = *(_QWORD *)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v6 = **(_QWORD **)(v6 + 16);
  }
  else
  {
    v6 = *(_QWORD *)a2;
  }
  if (v5 != v6)
    return 0;
  v7 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v8 = 0;
    v9 = (char *)this - 32 * v7;
    v10 = 32 * v7;
    do
    {
      v11 = v9;
      if ((a3 & 2) != 0)
      {
        if ((v3 & 0x40000000) != 0)
          v11 = (char *)*((_QWORD *)this - 1);
        v13 = **(_QWORD **)&v11[v8];
        if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
          v13 = **(_QWORD **)(v13 + 16);
        v17 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
        if ((v4 & 0x40000000) != 0)
          v17 = (char *)*((_QWORD *)a2 - 1);
        v15 = **(_QWORD **)&v17[v8];
        if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12)
          goto LABEL_15;
        v14 = *(uint64_t **)(v15 + 16);
      }
      else
      {
        if ((v3 & 0x40000000) != 0)
          v11 = (char *)*((_QWORD *)this - 1);
        v12 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
        if ((v4 & 0x40000000) != 0)
          v12 = (char *)*((_QWORD *)a2 - 1);
        v13 = **(_QWORD **)&v11[v8];
        v14 = *(uint64_t **)&v12[v8];
      }
      v15 = *v14;
LABEL_15:
      if (v13 != v15)
        return 0;
      v8 += 32;
    }
    while (v10 != v8);
  }
  return sub_1C53E0660((uint64_t)this, (uint64_t)a2, a3 & 1);
}

uint64_t llvm::Instruction::isUsedOutsideOfBlock(llvm::Instruction *this, const llvm::BasicBlock *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const llvm::BasicBlock *v6;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_BYTE *)(v3 + 16) == 83)
    {
      v4 = *(_DWORD *)(v3 + 20);
      v5 = (v4 & 0x40000000) != 0 ? *(_QWORD *)(v3 - 8) : v3 - 32 * (v4 & 0x7FFFFFF);
      v6 = *(const llvm::BasicBlock **)(v5
                                      + 32 * *(unsigned int *)(v3 + 60)
                                      + 8 * ((unint64_t)(v2 - v5) >> 5));
    }
    else
    {
      v6 = *(const llvm::BasicBlock **)(v3 + 40);
    }
    if (v6 != a2)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  return 1;
}

uint64_t llvm::Instruction::mayReadFromMemory(llvm::Instruction *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;

  result = 0;
  v3 = *((unsigned __int8 *)this + 16) - 33;
  if (v3 <= 0x37)
  {
    if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001C8000010) == 0)
      {
        if (v3 == 28)
          return (*((_WORD *)this + 9) & 0x301) != 0;
        return result;
      }
      return 1;
    }
    v4 = *((_QWORD *)this + 8);
    if (!v4 || (*(_BYTE *)(v4 + 20) & 4) == 0 && (*(_BYTE *)(v4 + 17) & 0x10) == 0)
    {
      v6 = 7;
      if (sub_1C53E4BBC((uint64_t)this, &v6, 1uLL))
      {
        v5 = *((_QWORD *)this - 4);
        if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)this + 9) || *(_DWORD *)(v5 + 36) != 7)
          return 1;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0)
        return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) ^ 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::Instruction::mayWriteToMemory(llvm::Instruction *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  result = 0;
  v3 = *((unsigned __int8 *)this + 16) - 33;
  if (v3 > 0x37)
    return result;
  if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
  {
    v4 = *((_QWORD *)this + 8);
    if (!v4 || (*(_BYTE *)(v4 + 17) & 0x30) == 0)
    {
      v5 = *((_DWORD *)this + 5);
      if (v5 < 0)
      {
        v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
        v9 = *((_QWORD *)v6 - 1);
        v7 = v6 - 8;
        v8 = v9;
        if (v9)
        {
          v10 = -v8;
          do
          {
            v11 = *(_DWORD *)(*(_QWORD *)&v7[v10] + 8);
            v12 = v11 > 7;
            v13 = (1 << v11) & 0x83;
            if (v12 || v13 == 0)
              return 1;
            v10 += 16;
          }
          while (v10);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0)
        return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) ^ 1;
    }
    return 0;
  }
  if (v3 == 27)
    return (*((_WORD *)this + 9) & 0x301) != 0;
  if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001D0000010) != 0)
    return 1;
  return result;
}

BOOL llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 60 || v1 == 61)
    return (*((_WORD *)this + 9) & 0x380) != 0;
  else
    return (v1 - 63) <= 2;
}

uint64_t llvm::Instruction::hasAtomicLoad(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 16) - 60 < 6) & (0x31u >> (*((_BYTE *)this + 16) - 60));
}

uint64_t llvm::Instruction::isVolatile(llvm::Instruction *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  llvm::APInt *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  llvm::APInt *v11;
  unsigned int v12;

  result = 0;
  switch(*((_BYTE *)this + 16))
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      return *((_WORD *)this + 9) & 1;
    case '>':
    case '?':
      return result;
    default:
      if (*((_BYTE *)this + 16) != 84)
        return result;
      v3 = *((_QWORD *)this - 4);
      if (!v3
        || *(_BYTE *)(v3 + 16)
        || *(_QWORD *)(v3 + 24) != *((_QWORD *)this + 9)
        || (*(_BYTE *)(v3 + 33) & 0x20) == 0)
      {
        return 0;
      }
      result = 0;
      v4 = *(_DWORD *)(v3 + 36) - 188;
      if (v4 > 0xB)
        return result;
      if (((1 << v4) & 0xB40) != 0)
      {
        v5 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
        v6 = (llvm::APInt *)(v5 + 24);
        v7 = *(_DWORD *)(v5 + 32);
        if (v7 > 0x40)
          v8 = llvm::APInt::countLeadingZerosSlowCase(v6) == v7;
        else
          v8 = *(_QWORD *)v6 == 0;
        v10 = v8;
        return v10 ^ 1u;
      }
      else
      {
        if (v4)
        {
          if (v4 != 1)
            return result;
          v9 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
        }
        else
        {
          v9 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
        }
        v11 = (llvm::APInt *)(v9 + 24);
        v12 = *(_DWORD *)(v9 + 32);
        if (v12 > 0x40)
          return llvm::APInt::countLeadingZerosSlowCase(v11) == v12 - 1;
        else
          return *(_QWORD *)v11 == 1;
      }
  }
}

uint64_t llvm::Instruction::mayThrow(llvm::Instruction *this)
{
  int v1;
  uint64_t v2;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 84)
  {
    v2 = *((_QWORD *)this + 8);
    if (v2 && (*(_BYTE *)(v2 + 16) & 0x20) != 0)
      return 0;
    else
      return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 37) ^ 1;
  }
  else if (this && v1 == 36 || this && v1 == 38)
  {
    return (*((_WORD *)this + 9) & 1) == 0;
  }
  else
  {
    return v1 == 34;
  }
}

uint64_t llvm::Instruction::mayHaveSideEffects(llvm::Instruction *this)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  v2 = *((unsigned __int8 *)this + 16) - 33;
  if (v2 > 0x37)
    goto LABEL_5;
  if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001D0000010) != 0)
    return 1;
  if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (v2 == 27 && (*((_WORD *)this + 9) & 0x301) != 0)
      return 1;
    goto LABEL_5;
  }
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 17) & 0x30) != 0)
      goto LABEL_5;
  }
  v5 = *((_DWORD *)this + 5);
  if (v5 < 0)
  {
    v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
    v9 = *((_QWORD *)v6 - 1);
    v7 = v6 - 8;
    v8 = v9;
    if (v9)
    {
      v10 = -v8;
      do
      {
        v11 = *(_DWORD *)(*(_QWORD *)&v7[v10] + 8);
        v12 = v11 > 7;
        v13 = (1 << v11) & 0x83;
        if (v12 || v13 == 0)
          return 1;
        v10 += 16;
      }
      while (v10);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
    || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
  {
LABEL_5:
    if ((llvm::Instruction::mayThrow(this) & 1) == 0)
      return llvm::Instruction::willReturn(this) ^ 1;
  }
  return 1;
}

uint64_t llvm::Instruction::willReturn(llvm::Instruction *this)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 61)
    return (*((_WORD *)this + 9) & 1) == 0;
  v4 = v2 - 33;
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
    return 1;
  v8 = *((_QWORD *)this + 8);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 20) & 2) != 0)
      return 1;
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 65) & 1) != 0)
    return 1;
  if (*((_BYTE *)this + 16) != 84)
    return 0;
  v9 = *((_QWORD *)this - 4);
  if (!v9 || *(_BYTE *)(v9 + 16) || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9) || (*(_BYTE *)(v9 + 33) & 0x20) == 0)
    return 0;
  v10 = *((_QWORD *)this + 8);
  if (v10 && (*(_BYTE *)(v10 + 17) & 0x30) != 0)
    return 1;
  v11 = *((_DWORD *)this + 5);
  if (v11 < 0)
  {
    v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
    v15 = *((_QWORD *)v12 - 1);
    v13 = v12 - 8;
    v14 = v15;
    if (v15)
    {
      v16 = -v14;
      do
      {
        v17 = *(_DWORD *)(*(_QWORD *)&v13[v16] + 8);
        v5 = v17 > 7;
        v18 = (1 << v17) & 0x83;
        if (v5 || v18 == 0)
          return 0;
        v16 += 16;
      }
      while (v16);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0)
    return 1;
  return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44);
}

uint64_t llvm::Instruction::isSafeToRemove(llvm::Instruction *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 != 84)
    goto LABEL_2;
  v7 = *((_QWORD *)this + 8);
  if (v7 && (*(_BYTE *)(v7 + 17) & 0x30) != 0)
    goto LABEL_12;
  v8 = *((_DWORD *)this + 5);
  if (v8 < 0)
  {
    v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
    v12 = *((_QWORD *)v9 - 1);
    v10 = v9 - 8;
    v11 = v12;
    if (v12)
    {
      v13 = -v11;
      do
      {
        v14 = *(_DWORD *)(*(_QWORD *)&v10[v13] + 8);
        v3 = v14 > 7;
        v15 = (1 << v14) & 0x83;
        if (v3 || v15 == 0)
          return 0;
        v13 += 16;
      }
      while (v13);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
    || (result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44), (_DWORD)result))
  {
LABEL_12:
    if ((llvm::Instruction::mayThrow(this) & 1) != 0)
      return 0;
    result = llvm::Instruction::willReturn(this);
    if (!(_DWORD)result)
      return result;
    v1 = *((unsigned __int8 *)this + 16);
LABEL_2:
    if ((v1 - 29) >= 0xB)
    {
      v2 = v1 - 38;
      v3 = v2 > 0x38;
      v4 = (0xFFF9FFFFFFFFFEuLL >> v2) & 1;
      if (v3)
        return 1;
      else
        return v4;
    }
    return 0;
  }
  return result;
}

BOOL llvm::Instruction::isLifetimeStartOrEnd(llvm::Instruction *this)
{
  uint64_t v1;

  return *((_BYTE *)this + 16) == 84
      && (v1 = *((_QWORD *)this - 4)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *((_QWORD *)this + 9)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 167) < 2;
}

BOOL llvm::Instruction::isLaunderOrStripInvariantGroup(llvm::Instruction *this)
{
  uint64_t v1;
  int v3;

  if (*((_BYTE *)this + 16) != 84)
    return 0;
  v1 = *((_QWORD *)this - 4);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *((_QWORD *)this + 9) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 36);
  return v3 == 166 || v3 == 290;
}

BOOL llvm::Instruction::isDebugOrPseudoInst(llvm::Instruction *this)
{
  return sub_1C4D99D08((uint64_t)this) || sub_1C509DDB0((uint64_t)this);
}

uint64_t llvm::Instruction::getNextNonDebugInstruction(llvm::Instruction *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 4);
  if (v2 == *((_QWORD *)this + 5) + 40 || v2 == 0)
    return 0;
  while (1)
  {
    v5 = v2 - 24;
    if (!sub_1C4D99D08(v2 - 24) && (!a2 || !sub_1C509DDB0(v2 - 24)))
      break;
    v6 = v2 + 8;
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == *(_QWORD *)(v6 + 8) + 40 || v2 == 0)
      return 0;
  }
  return v5;
}

_QWORD *llvm::Instruction::getPrevNonDebugInstruction(llvm::Instruction *this, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = (_QWORD *)((char *)this + 24);
  if (*(llvm::Instruction **)(*((_QWORD *)this + 5) + 48) == (llvm::Instruction *)((char *)this + 24))
    return 0;
  v3 = (_QWORD *)*v2;
  if (!*v2)
    return 0;
  while (1)
  {
    v5 = v3 - 3;
    if (!sub_1C4D99D08((uint64_t)(v3 - 3)) && (!a2 || !sub_1C509DDB0((uint64_t)(v3 - 3))))
      break;
    if (*(_QWORD **)(v3[2] + 48) != v3)
    {
      v3 = (_QWORD *)*v3;
      if (v3)
        continue;
    }
    return 0;
  }
  return v5;
}

uint64_t llvm::Instruction::isAssociative(llvm::Instruction *this)
{
  int v2;
  uint64_t result;
  unsigned int v4;

  v2 = *((unsigned __int8 *)this + 16);
  result = 1;
  switch(v2)
  {
    case ')':
    case '-':
      return result;
    case '*':
    case '.':
      v4 = *((unsigned __int8 *)this + 17);
      if ((v4 & 2) != 0)
        result = (v4 >> 4) & 1;
      else
        result = 0;
      break;
    case '+':
    case ',':
      goto LABEL_7;
    default:
      if ((v2 - 56) >= 3)
LABEL_7:
        result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Instruction::isCommutative(llvm::Instruction *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((unsigned __int8 *)this + 16) - 41;
  if (v1 > 0x2B)
    return 0;
  if (((1 << (*((_BYTE *)this + 16) - 41)) & 0x38033) != 0)
    return 1;
  if (v1 == 43
    && (v3 = *((_QWORD *)this - 4)) != 0
    && !*(_BYTE *)(v3 + 16)
    && *(_QWORD *)(v3 + 24) == *((_QWORD *)this + 9)
    && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
  {
    return sub_1C53E178C((uint64_t)this);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C53E178C(uint64_t a1)
{
  int v1;
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
  result = 1;
  if ((v1 - 262) > 0x2F || ((1 << (v1 - 6)) & 0xF8C00001F003) == 0)
  {
    v4 = v1 - 142;
    v5 = v4 > 0x3C;
    v6 = (1 << v4) & 0x180C000000000003;
    if (v5 || v6 == 0)
      return 0;
  }
  return result;
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 != 30)
    return ((uint64_t (*)(_QWORD))((char *)&locret_1C53E1814 + 4 * byte_1C86502E4[v1 - 29]))(0);
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 3)
    return 2;
  return 1;
}

uint64_t sub_1C53E1838@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFF;
}

uint64_t sub_1C53E1848@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
}

uint64_t sub_1C53E1858()
{
  return 2;
}

uint64_t sub_1C53E1860@<X0>(uint64_t a1@<X8>)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t sub_1C53E186C()
{
  return 1;
}

uint64_t sub_1C53E1874@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 80) + 1);
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this, unsigned int a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 30)
    return *((_QWORD *)this - 4 * a2 - 4);
  else
    return ((uint64_t (*)(void))((char *)sub_1C53E18BC + 4 * byte_1C86502EF[v2 - 31]))();
}

void sub_1C53E18BC()
{
  JUMPOUT(0x1C53E1898);
}

uint64_t llvm::Instruction::setSuccessor(llvm::Instruction *this, unsigned int a2, llvm::BasicBlock *a3)
{
  return ((uint64_t (*)(void))((char *)sub_1C53E1994 + 4 * byte_1C86502F8[*((unsigned __int8 *)this + 16) - 30]))();
}

uint64_t sub_1C53E1994(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (a2 + 1);
  v4 = *(_DWORD *)(result + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(result - 8);
  else
    v5 = result - 32 * (v4 & 0x7FFFFFF);
  v6 = v5 + 32 * v3;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = a3;
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v8 = (_QWORD *)(a3 + 8);
    v9 = v10;
    v11 = v5 + 32 * v3;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return result;
}

uint64_t sub_1C53E1AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C622AB8C(a1, a3);
}

llvm::BlockAddress **sub_1C53E1AFC(unsigned int *a1, int a2, _QWORD *a3)
{
  if (a2)
    return sub_1C623D3A8(a1, (llvm::BasicBlock *)(a2 - 1), a3);
  else
    return (llvm::BlockAddress **)sub_1C623D354((uint64_t)a1, (uint64_t)a3);
}

uint64_t sub_1C53E1B14(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32;
  v4 = (_QWORD *)(result - 32 - 32 * a2);
  if (*v4)
  {
    v5 = v3 - 32 * a2;
    v7 = *(_QWORD **)(v5 + 16);
    v6 = (_QWORD *)(v5 + 16);
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v4 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 - 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v4;
  }
  return result;
}

uint64_t llvm::Instruction::replaceSuccessorWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v5 = (unsigned __int8 *)this;
  v6 = *(unsigned __int8 *)(this + 16);
  if (v6 != 30)
    __asm { BR              X11 }
  if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 3)
    v7 = 2;
  else
    v7 = 1;
  v8 = 0;
  v9 = 0;
  v10 = this - 32;
  v11 = v7;
  v12 = this - 64;
  do
  {
    v13 = v5[16];
    if (v13 != 30)
      __asm { BR              X9 }
    if (*(llvm::BasicBlock **)(v10 - 32 * v9) == a2)
      this = llvm::Instruction::setSuccessor((llvm::Instruction *)v5, v9, a3);
    ++v9;
    v12 += 32;
    v8 += 2;
  }
  while (v11 != v9);
  return this;
}

void sub_1C53E1C94()
{
  uint64_t v0;

  if (((*(_DWORD *)(v0 + 20) >> 1) & 0x3FFFFFF) == 0)
    JUMPOUT(0x1C53E1C24);
  JUMPOUT(0x1C53E1BC8);
}

void sub_1C53E1CA8()
{
  JUMPOUT(0x1C53E1C6CLL);
}

void sub_1C53E1CBC()
{
  JUMPOUT(0x1C53E1BF4);
}

void sub_1C53E1CD4()
{
  uint64_t v0;

  if ((*(_WORD *)(v0 + 18) & 1) == 0)
    JUMPOUT(0x1C53E1BF8);
  JUMPOUT(0x1C53E1C6CLL);
}

void sub_1C53E1CE4()
{
  JUMPOUT(0x1C53E1BF4);
}

void sub_1C53E1D10()
{
  JUMPOUT(0x1C53E1C9CLL);
}

void sub_1C53E1D20()
{
  JUMPOUT(0x1C53E1C9CLL);
}

void sub_1C53E1D2C()
{
  JUMPOUT(0x1C53E1BC8);
}

void sub_1C53E1D34()
{
  JUMPOUT(0x1C53E1C9CLL);
}

void llvm::Instruction::swapProfMetadata(llvm::Instruction *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::Instruction **v7;
  llvm::Instruction *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Instruction **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  llvm::MDString *v17;
  _QWORD *String;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  llvm::MDNode *Impl;
  llvm::Instruction **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return;
  v2 = ***(_QWORD ***)this;
  v28[0] = (uint64_t)this;
  v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2480);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (llvm::Instruction **)(v4 + 40 * v6);
    v8 = *v7;
    if (*v7 == this)
      goto LABEL_5;
    v12 = 0;
    v13 = 1;
    while (v8 != (llvm::Instruction *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v8 == (llvm::Instruction *)-8192;
      if (v14)
        v12 = v7;
      v15 = v6 + v13++;
      v6 = v15 & v5;
      v7 = (llvm::Instruction **)(v4 + 40 * v6);
      v8 = *v7;
      if (*v7 == this)
        goto LABEL_5;
    }
    if (v12)
      v25 = v12;
    else
      v25 = v7;
  }
  else
  {
    v25 = 0;
  }
  v7 = (llvm::Instruction **)sub_1C541AB24(v2 + 2480, (uint64_t)v28, v28, v25);
  v26 = v28[0];
  v7[3] = 0;
  v7[4] = 0;
  *v7 = (llvm::Instruction *)v26;
  v7[1] = (llvm::Instruction *)(v7 + 3);
  v7[2] = (llvm::Instruction *)0x100000000;
LABEL_5:
  v9 = *((unsigned int *)v7 + 4);
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)((char *)v7[1] + 8);
    v11 = 16 * v9;
    while (*((_DWORD *)v10 - 2) != 2)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11)
        return;
    }
    v16 = *v10;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 8) == 3)
      {
        v17 = *(llvm::MDString **)(v16 - 24);
        if (!*(_BYTE *)v17)
        {
          v27 = v16;
          String = (_QWORD *)llvm::MDString::getString(v17);
          if (v19 == 14 && *String == 0x775F68636E617262 && *(_QWORD *)((char *)String + 6) == 0x737468676965775FLL)
          {
            v21 = (uint64_t *)(v27 - 8 * *(unsigned int *)(v27 + 8));
            v28[0] = *v21;
            v28[1] = v21[2];
            v28[2] = v21[1];
            v22 = *(_QWORD *)(v27 + 16);
            v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF8);
            if ((v22 & 4) != 0)
              v23 = (uint64_t *)*v23;
            Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v23, v28, 3, 0, 1);
            llvm::Instruction::setMetadata((unsigned __int8 **)this, 2, Impl);
          }
        }
      }
    }
  }
}

uint64_t llvm::Instruction::copyMetadata(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  BOOL v4;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  unsigned __int8 **v13;
  int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int *v20;
  int *v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  unsigned int v30;
  int i;
  int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  BOOL v35;
  unsigned int v36;
  unsigned __int8 *v37;
  _QWORD v38[2];
  int v39;
  unsigned __int8 *v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[9];

  v43[8] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48))
    v4 = 0;
  else
    v4 = (*(_DWORD *)(a2 + 20) & 0x20000000) == 0;
  if (v4)
    return result;
  v7 = (unsigned __int8 **)result;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  if (a4)
  {
    v20 = a3;
    v21 = &a3[a4];
    while (1)
    {
      v22 = *v20;
      LODWORD(v41) = *v20;
      if (!v39)
        break;
      v23 = (v39 - 1) & (37 * v22);
      v24 = (_DWORD *)(v38[0] + 4 * v23);
      v25 = *v24;
      if (v22 != *v24)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != -1)
        {
          if (v26)
            v35 = 0;
          else
            v35 = v25 == -2;
          if (v35)
            v26 = v24;
          v36 = v23 + v27++;
          v23 = v36 & (v39 - 1);
          v24 = (_DWORD *)(v38[0] + 4 * v23);
          v25 = *v24;
          if (v22 == *v24)
            goto LABEL_46;
        }
        if (v26)
          v28 = v26;
        else
          v28 = v24;
        goto LABEL_45;
      }
LABEL_46:
      if (++v20 == v21)
        goto LABEL_8;
    }
    v28 = 0;
LABEL_45:
    v29 = sub_1C4A0C948((uint64_t)v38, (uint64_t)&v41, &v41, v28);
    *v29 = (_DWORD)v41;
    goto LABEL_46;
  }
LABEL_8:
  v41 = v43;
  v42 = 0x400000000;
  llvm::Value::getAllMetadata((_BYTE *)a2, (uint64_t)&v41);
  if ((_DWORD)v42)
  {
    v11 = (char *)v41;
    v12 = (char *)v41 + 16 * v42;
    v13 = v7 + 6;
    do
    {
      if (a4)
      {
        if (!v39)
          goto LABEL_29;
        v16 = (37 * *(_DWORD *)v11) & (v39 - 1);
        v17 = *(_DWORD *)(v38[0] + 4 * v16);
        if (*(_DWORD *)v11 != v17)
        {
          v18 = 1;
          while (v17 != -1)
          {
            v19 = v16 + v18++;
            v16 = v19 & (v39 - 1);
            v17 = *(_DWORD *)(v38[0] + 4 * v16);
            if (*(_DWORD *)v11 == v17)
              goto LABEL_22;
          }
          goto LABEL_29;
        }
      }
LABEL_22:
      v14 = *(_DWORD *)v11;
      v15 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      if (v15)
      {
        if (!v14)
        {
          v40 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
          llvm::MetadataTracking::track((uint64_t)&v40, v15, 2);
LABEL_55:
          if (&v40 == v13)
          {
            if (v40)
              llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
          }
          else
          {
            if (*v13)
              llvm::MetadataTracking::untrack((uint64_t)(v7 + 6), *v13);
            v34 = v40;
            *v13 = v40;
            if (v34)
              llvm::MetadataTracking::retrack((uint64_t)&v40, v34, (uint64_t)(v7 + 6));
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (!*v13 && (*((_BYTE *)v7 + 23) & 0x20) == 0)
          goto LABEL_29;
        if (!v14)
        {
          v40 = 0;
          goto LABEL_55;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v7, v14, (llvm::MDNode *)v15);
LABEL_29:
      v11 += 16;
    }
    while (v11 != v12);
  }
  if (a4)
  {
    if (v39)
    {
      v30 = 0;
      for (i = 1; ; ++i)
      {
        v32 = *(_DWORD *)(v38[0] + 4 * v30);
        if (v32 == -1)
          break;
        if (!v32)
          goto LABEL_10;
        v33 = v30 + i;
        v30 = v33 & (v39 - 1);
      }
    }
  }
  else
  {
LABEL_10:
    v8 = *(unsigned __int8 **)(a2 + 48);
    v37 = v8;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)&v37, v8, 2);
    v9 = v7 + 6;
    if (&v37 == v9)
    {
      if (v37)
        llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
    }
    else
    {
      if (*v9)
        llvm::MetadataTracking::untrack((uint64_t)v9, *v9);
      v10 = v37;
      *v9 = v37;
      if (v10)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v37, v10, (uint64_t)v9);
        v37 = 0;
      }
    }
  }
  if (v41 != v43)
    free(v41);
  return MEMORY[0x1CAA32FB4](v38[0], 4);
}

void llvm::Instruction::clone(llvm::Instruction *this)
{
  __asm { BR              X10 }
}

uint64_t sub_1C53E2308()
{
  uint64_t v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v12[52];

  v1 = (char *)operator new(0x60uLL);
  *((_QWORD *)v1 + 1) = 0;
  v2 = v1 + 8;
  v3 = (uint64_t)(v1 + 32);
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = v1 + 32;
  v4 = *(_QWORD *)v0;
  v5 = *(_QWORD *)(v0 - 32);
  v12[16] = 257;
  v6 = *(unsigned __int16 *)(v0 + 18);
  v7 = *(_BYTE *)(v0 + 60);
  *((_QWORD *)v1 + 4) = v4;
  *((_QWORD *)v1 + 5) = 0;
  *((_WORD *)v1 + 24) = 60;
  *((_DWORD *)v1 + 13) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_DWORD *)v1 + 22) = 0;
  *(_QWORD *)v1 = v5;
  if (v5)
  {
    v10 = *(_QWORD *)(v5 + 8);
    v8 = (_QWORD *)(v5 + 8);
    v9 = v10;
    *v2 = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v2;
    *((_QWORD *)v1 + 2) = v8;
    *v8 = v1;
  }
  *((_WORD *)v1 + 25) = v6 & 0x381 | (2 * __clz(1 << (v6 >> 1))) ^ 0x7E;
  v1[92] = v7;
  llvm::Value::setName((uint64_t ***)v1 + 4, (uint64_t)v12);
  *(_BYTE *)(v3 + 17) = *(_BYTE *)(v0 + 17) & 0xFE | *(_BYTE *)(v3 + 17) & 1;
  llvm::Instruction::copyMetadata(v3, v0, 0, 0);
  return v3;
}

void sub_1C53E25EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v15 = *(_QWORD **)(v14 - 96);
  v16 = *(_QWORD *)(v14 - 64);
  v17 = *(_QWORD *)(v14 - 32);
  a14 = 257;
  v18 = operator new(0xA0uLL);
  v19 = 0;
  v18[29] = v18[29] & 0x38000000 | 3;
  do
  {
    v20 = &v18[v19];
    *v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v18 + 24;
    v19 += 8;
  }
  while (v19 != 24);
  llvm::InsertElementInst::InsertElementInst((uint64_t)(v18 + 24), v15, v16, v17, (uint64_t)&a10, 0);
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E2658()
{
  const llvm::BranchInst *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *((_DWORD *)v0 + 5) & 0x7FFFFFF;
  v2 = operator new(32 * v1 + 64);
  v3 = (uint64_t)&v2[4 * v1];
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(v3 + 20) & 0x38000000 | v1;
  if ((_DWORD)v1)
  {
    do
    {
      *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
      v2[3] = v3;
      v2 += 4;
    }
    while (v2 != (_QWORD *)v3);
  }
  llvm::BranchInst::BranchInst(v3, v0);
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E26A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v14 - 96);
  v16 = *(uint64_t **)(v14 - 64);
  v17 = *(_QWORD *)(v14 - 32);
  a14 = 257;
  sub_1C4FC8748(v15, v16, v17, (uint64_t)&a10, 0, 0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E26D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2714()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2758()
{
  _QWORD *v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (char *)operator new(0x60uLL);
  *((_QWORD *)v1 + 1) = 0;
  v2 = v1 + 8;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = v1 + 32;
  v3 = *(v0 - 4);
  *((_QWORD *)v1 + 4) = *v0;
  *((_QWORD *)v1 + 5) = 0;
  *((_QWORD *)v1 + 6) = 0x10000004DLL;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_DWORD *)v1 + 22) = 0;
  *(_QWORD *)v1 = v3;
  if (v3)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v4 = (_QWORD *)(v3 + 8);
    v5 = v6;
    *v2 = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = v2;
    *((_QWORD *)v1 + 2) = v4;
    *v4 = v1;
  }
  JUMPOUT(0x1C53E25A0);
}

void sub_1C53E27C4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2808()
{
  uint64_t v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (char *)operator new(0x80uLL);
  *((_DWORD *)v1 + 21) = *((_DWORD *)v1 + 21) & 0x38000000 | 2;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 5) = 0;
  *((_QWORD *)v1 + 6) = 0;
  *((_QWORD *)v1 + 4) = 0;
  v2 = v1 + 32;
  v3 = *(_QWORD *)(v0 - 64);
  *((_QWORD *)v1 + 8) = ***(_QWORD ***)v3 + 1576;
  *((_QWORD *)v1 + 3) = v1 + 64;
  *((_QWORD *)v1 + 7) = v1 + 64;
  v4 = *(_QWORD *)(v0 - 32);
  v5 = *(_WORD *)(v0 + 18);
  v6 = *(_BYTE *)(v0 + 60);
  *((_QWORD *)v1 + 9) = 0;
  v1[80] = 61;
  v1[81] = 0;
  *((_WORD *)v1 + 41) = 0;
  *((_DWORD *)v1 + 21) = 2;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *((_DWORD *)v1 + 30) = 0;
  *(_QWORD *)v1 = v3;
  v9 = *(_QWORD *)(v3 + 8);
  v7 = (_QWORD *)(v3 + 8);
  v8 = v9;
  *((_QWORD *)v1 + 1) = v9;
  if (v9)
    *(_QWORD *)(v8 + 16) = v1 + 8;
  *((_QWORD *)v1 + 2) = v7;
  *v7 = v1;
  if (*((_QWORD *)v1 + 4))
  {
    **((_QWORD **)v1 + 6) = *((_QWORD *)v1 + 5);
    v13 = *((_QWORD *)v1 + 5);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v1 + 6);
  }
  *v2 = v4;
  if (v4)
  {
    v12 = *(_QWORD *)(v4 + 8);
    v10 = (_QWORD *)(v4 + 8);
    v11 = v12;
    *((_QWORD *)v1 + 5) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = v1 + 40;
    *((_QWORD *)v1 + 6) = v10;
    *v10 = v2;
  }
  *((_WORD *)v1 + 41) = v5 & 0x3FF;
  v1[124] = v6;
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E28F0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E293C()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = operator new(0x60uLL);
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = v1 + 4;
  v1[4] = *v0;
  v1[5] = 0;
  JUMPOUT(0x1C53E2788);
}

void sub_1C53E2970()
{
  llvm::TruncInst *v0;

  llvm::TruncInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E297C()
{
  llvm::ShuffleVectorInst *v0;

  llvm::ShuffleVectorInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2988()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E29CC()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = operator new(0x80uLL);
  v1[13] = v1[13] & 0x38000000 | 1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = v1 + 8;
  llvm::ExtractValueInst::ExtractValueInst((uint64_t)(v1 + 8), v0);
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E2A00()
{
  llvm::InsertValueInst *v0;

  llvm::InsertValueInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2A0C()
{
  llvm::FCmpInst *v0;

  llvm::FCmpInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2A18()
{
  llvm::PtrToIntInst *v0;

  llvm::PtrToIntInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2A24()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2A68()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2AAC()
{
  llvm::FPExtInst *v0;

  llvm::FPExtInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2AB8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2AFC()
{
  llvm::ReturnInst *v0;

  llvm::ReturnInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2B08()
{
  llvm::IntToPtrInst *v0;

  llvm::IntToPtrInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2B14()
{
  llvm::SExtInst *v0;

  llvm::SExtInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2B20()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2B64()
{
  llvm::SIToFPInst *v0;

  llvm::SIToFPInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2B70()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2BB4()
{
  llvm::UIToFPInst *v0;

  llvm::UIToFPInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2BC0()
{
  llvm::FPTruncInst *v0;

  llvm::FPTruncInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2BCC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2C10()
{
  llvm::FPToSIInst *v0;

  llvm::FPToSIInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2C1C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2C60()
{
  llvm::AllocaInst *v0;

  llvm::AllocaInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2C6C()
{
  llvm::AtomicRMWInst *v0;

  llvm::AtomicRMWInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2C78()
{
  llvm::UnaryOperator *v0;

  llvm::UnaryOperator::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2C84()
{
  llvm::FPToUIInst *v0;

  llvm::FPToUIInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2C90()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = operator new(0x48uLL);
  v1[7] = v1[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v1 = 0;
  llvm::SwitchInst::SwitchInst((uint64_t)(v1 + 2), v0);
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E2CC0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2D04()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2D48()
{
  llvm::AddrSpaceCastInst *v0;

  llvm::AddrSpaceCastInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2D54()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2D98()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 - 64);
  v2 = operator new(0x80uLL);
  v2[6] = 0;
  v2[5] = 0;
  v2[8] = *v1;
  v2[3] = v2 + 8;
  v2[7] = v2 + 8;
  v2[9] = 0;
  JUMPOUT(0x1C53E2534);
}

void sub_1C53E2DDC()
{
  _QWORD **v0;
  _QWORD *v1;
  char *v2;

  v1 = (_QWORD *)**v0;
  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = *v1 + 1576;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 35;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 17) = 0u;
  JUMPOUT(0x1C53E25ACLL);
}

void sub_1C53E2E18()
{
  llvm::AtomicCmpXchgInst *v0;

  llvm::AtomicCmpXchgInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E24()
{
  llvm::FreezeInst *v0;

  llvm::FreezeInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E30()
{
  llvm::BinaryOperator *v0;

  llvm::BinaryOperator::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E3C()
{
  llvm::FuncletPadInst *v0;

  llvm::FuncletPadInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E48()
{
  llvm::IndirectBrInst *v0;

  llvm::IndirectBrInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E54()
{
  llvm::InvokeInst *v0;

  llvm::InvokeInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E60()
{
  llvm::ResumeInst *v0;

  llvm::ResumeInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E6C()
{
  llvm::CleanupReturnInst *v0;

  llvm::CleanupReturnInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E78()
{
  llvm::CatchReturnInst *v0;

  llvm::CatchReturnInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E84()
{
  llvm::CatchSwitchInst *v0;

  llvm::CatchSwitchInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E90()
{
  llvm::CallBrInst *v0;

  llvm::CallBrInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2E9C()
{
  llvm::FenceInst *v0;

  llvm::FenceInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2EA8()
{
  llvm::LandingPadInst *v0;

  llvm::LandingPadInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

void sub_1C53E2EB8()
{
  llvm::VAArgInst *v0;

  llvm::VAArgInst::cloneImpl(v0);
  JUMPOUT(0x1C53E2458);
}

uint64_t llvm::AllocaInst::getAllocationSizeInBits@<X0>(llvm::AllocaInst *this@<X0>, const llvm::DataLayout *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  unsigned int v13;
  _QWORD *v14;

  result = sub_1C53E2F94((uint64_t)a2, *((_QWORD *)this + 8));
  v7 = *((_QWORD *)this - 4);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 16;
  else
    v8 = 0;
  if (v8)
  {
    v10 = result;
    v11 = v6;
    v12 = (_QWORD **)(v7 + 24);
    v13 = *(_DWORD *)(v7 + 32);
    if (v13 > 0x40)
    {
      result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 24));
      if ((_DWORD)result == v13 - 1)
      {
LABEL_12:
        *(_QWORD *)a3 = v10;
        *(_QWORD *)(a3 + 8) = v11;
        v9 = 1;
        goto LABEL_13;
      }
      v14 = (_QWORD *)**v12;
    }
    else
    {
      v14 = *v12;
      if (*v12 == (_QWORD *)1)
        goto LABEL_12;
    }
    v10 *= (_QWORD)v14;
    goto LABEL_12;
  }
  v9 = 0;
  *(_BYTE *)a3 = 0;
LABEL_13:
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_1C53E2F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;

  sub_1C4768AD0(a1, a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  llvm::DataLayout::getAlignment(a1, a2);
  return 8 * (((1 << v6) + v5 - 1) & -(1 << v6));
}

uint64_t llvm::AllocaInst::isArrayAllocation(llvm::AllocaInst *this)
{
  uint64_t v1;
  BOOL v2;
  llvm::APInt *v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  v1 = *((_QWORD *)this - 4);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 16;
  else
    v2 = 0;
  if (!v2)
    return 1;
  v4 = (llvm::APInt *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  if (v5 > 0x40)
    v6 = llvm::APInt::countLeadingZerosSlowCase(v4) == v5 - 1;
  else
    v6 = *(_QWORD *)v4 == 1;
  v7 = v6;
  return v7 ^ 1u;
}

const char *llvm::SelectInst::areInvalidOperands(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  const char *result;
  int v5;
  uint64_t v6;

  v3 = *a2;
  if (*a2 != *a3)
    return "both values to select must have same type";
  v5 = *(unsigned __int8 *)(v3 + 8);
  if (v5 == 12)
    return "select values cannot have token type";
  v6 = *a1;
  if (*a1 && (*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
  {
    if (*(_QWORD *)(v6 + 24) != **(_QWORD **)v6 + 1888)
      return "vector select condition element type must be i1";
    if ((v5 & 0xFE) == 0x12)
    {
      result = "vector select requires selected vectors to have the same vector length as select condition";
      if ((v5 == 19) == (*(_DWORD *)(v6 + 8) == 19) && *(_DWORD *)(v3 + 32) == *(_DWORD *)(v6 + 32))
        return 0;
    }
    else
    {
      return "selected values for vector select must be vectors";
    }
  }
  else
  {
    if (v6 == **(_QWORD **)v6 + 1888)
      return 0;
    return "select condition must be i1 or <n x i1>";
  }
  return result;
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, const llvm::PHINode *a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  char v23;

  v4 = *((_DWORD *)a2 + 5);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 83;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4 & 0x7FFFFFF;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v5 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v6 = operator new(40 * v5);
  *((_QWORD *)this - 1) = v6;
  if ((_DWORD)v5)
  {
    v7 = v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v5]);
  }
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 - 1);
    v10 = v8 & 0x7FFFFFF;
  }
  else
  {
    v10 = v8 & 0x7FFFFFF;
    v9 = (uint64_t *)((char *)a2 - 32 * v10);
  }
  v11 = &v9[4 * v10];
  v12 = *((_DWORD *)this + 5);
  if ((v12 & 0x40000000) != 0)
    v13 = (char *)v6;
  else
    v13 = (char *)this - 32 * (v12 & 0x7FFFFFF);
  sub_1C53F5EAC((uint64_t)&v23, v9, v11, (uint64_t)v13);
  v14 = *((_DWORD *)a2 + 5);
  if ((v14 & 0x40000000) != 0)
  {
    v15 = (char *)*((_QWORD *)a2 - 1);
    v16 = *((unsigned int *)a2 + 15);
    v17 = &v15[32 * v16];
    v18 = v14 & 0x7FFFFFF;
  }
  else
  {
    v18 = v14 & 0x7FFFFFF;
    v15 = (char *)a2 - 32 * v18;
    v16 = *((unsigned int *)a2 + 15);
    v17 = &v15[32 * v16];
  }
  v19 = (uint64_t)&v15[32 * v16 + 8 * v18];
  v20 = *((_DWORD *)this + 5);
  if ((v20 & 0x40000000) != 0)
    v21 = (char *)*((_QWORD *)this - 1);
  else
    v21 = (char *)this - 32 * (v20 & 0x7FFFFFF);
  if ((char *)v19 != v17)
    memmove(&v21[32 * *((unsigned int *)this + 15)], v17, v19 - (_QWORD)v17);
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *((_BYTE *)this + 17) & 1;
  return this;
}

uint64_t llvm::PHINode::removeIncomingValue(llvm::PHINode *this, unsigned int a2, int a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  llvm::UndefValue *v23;
  uint64_t v24;
  _QWORD *v25;
  char v27;

  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)this - 1);
    v7 = a2;
    v8 = &v6[32 * a2];
    v9 = (uint64_t *)&v6[32 * (v5 & 0x7FFFFFF)];
  }
  else
  {
    v6 = (char *)this - 32 * (v5 & 0x7FFFFFF);
    v7 = a2;
    v8 = &v6[32 * a2];
    v9 = (uint64_t *)this;
  }
  v10 = *(_QWORD *)v8;
  sub_1C53F5EAC((uint64_t)&v27, (uint64_t *)v8 + 4, v9, (uint64_t)&v6[32 * v7]);
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x40000000) != 0)
  {
    v13 = (char *)*((_QWORD *)this - 1);
    v14 = *((unsigned int *)this + 15);
    v15 = &v13[32 * v14];
    v12 = v11 & 0x7FFFFFF;
  }
  else
  {
    v12 = v11 & 0x7FFFFFF;
    v13 = (char *)this - 32 * v12;
    v14 = *((unsigned int *)this + 15);
    v15 = &v13[32 * v14];
  }
  v16 = &v15[8 * v12];
  v17 = &v15[8 * v7 + 8];
  if (v16 != v17)
  {
    memmove(&v13[32 * v14 + 8 * v7], v17, v16 - v17);
    v11 = *((_DWORD *)this + 5);
  }
  if ((v11 & 0x40000000) != 0)
  {
    v19 = (char *)*((_QWORD *)this - 1);
    v18 = v11 & 0x7FFFFFF;
  }
  else
  {
    v18 = v11 & 0x7FFFFFF;
    v19 = (char *)this - 32 * v18;
  }
  v20 = &v19[32 * v18];
  if (*((_QWORD *)v20 - 4))
  {
    **((_QWORD **)v20 - 2) = *((_QWORD *)v20 - 3);
    v21 = *((_QWORD *)v20 - 3);
    if (v21)
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 - 2);
  }
  *((_QWORD *)v20 - 4) = 0;
  v22 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v22 & 0xF8000000 | (v22 - 1) & 0x7FFFFFF;
  if (((v22 - 1) & 0x7FFFFFF) == 0 && a3)
  {
    v23 = llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)v17);
    llvm::Value::doRAUW(this, v23, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
    v24 = *((_QWORD *)this + 3);
    v25 = (_QWORD *)*((_QWORD *)this + 4);
    *v25 = v24;
    *(_QWORD *)(v24 + 8) = v25;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    llvm::Value::deleteValue(this);
  }
  return v10;
}

void llvm::PHINode::growOperands(llvm::PHINode *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  v4 = (v2 & 0x7FFFFFF) + ((v2 & 0x7FFFFFFu) >> 1);
  if (v4 <= 2)
    v5 = 2;
  else
    v5 = v4;
  *((_DWORD *)this + 15) = v5;
  if ((v2 & 0x40000000) != 0)
    v6 = (uint64_t *)*((_QWORD *)this - 1);
  else
    v6 = (uint64_t *)((char *)this - 32 * v3);
  v7 = operator new(40 * v5);
  *((_QWORD *)this - 1) = v7;
  v8 = v7;
  do
  {
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = this;
    v8 += 4;
  }
  while (v8 != &v7[4 * v5]);
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
    v10 = (char *)v7;
  else
    v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
  sub_1C53F5EAC((uint64_t)&v14, v6, &v6[4 * v3], (uint64_t)v10);
  if ((_DWORD)v3)
  {
    memmove(&v10[32 * v5], &v6[4 * v3], 8 * v3);
    v11 = 4 * v3;
    do
    {
      v12 = &v6[v11];
      if (v6[v11 - 4])
      {
        *(_QWORD *)*(v12 - 2) = *(v12 - 3);
        v13 = *(v12 - 3);
        if (v13)
          *(_QWORD *)(v13 + 16) = *(v12 - 2);
      }
      v11 -= 4;
    }
    while (v11 * 8);
  }
  operator delete(v6);
}

llvm::UndefValue *llvm::PHINode::hasConstantValue(llvm::PHINode *this, llvm::Type *a2)
{
  int v2;
  llvm::PHINode **v3;
  unsigned int v4;
  llvm::PHINode *v5;
  unsigned int v6;
  uint64_t v7;
  llvm::PHINode *v8;
  char *v10;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x40000000) != 0)
  {
    v3 = (llvm::PHINode **)*((_QWORD *)this - 1);
    v4 = v2 & 0x7FFFFFF;
  }
  else
  {
    v4 = v2 & 0x7FFFFFF;
    v3 = (llvm::PHINode **)((char *)this - 32 * (v2 & 0x7FFFFFF));
  }
  v5 = *v3;
  v6 = v4 - 1;
  if (v4 != 1)
  {
    v7 = 32;
    do
    {
      if ((v2 & 0x40000000) != 0)
        v8 = *(llvm::PHINode **)(*((_QWORD *)this - 1) + v7);
      else
        v8 = *(llvm::PHINode **)((char *)this + v7 + -32 * v4);
      if (v8 != v5 && v8 != this)
      {
        if (v5 != this)
          return 0;
        if ((v2 & 0x40000000) != 0)
          v10 = (char *)*((_QWORD *)this - 1);
        else
          v10 = (char *)this - 32 * v4;
        v5 = *(llvm::PHINode **)&v10[v7];
      }
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  if (v5 == this)
    return llvm::UndefValue::get(*(llvm::UndefValue **)this, a2);
  else
    return v5;
}

uint64_t llvm::PHINode::hasConstantOrUndefValue(llvm::PHINode *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned __int8 *v8;

  v1 = *((_DWORD *)this + 5);
  v2 = v1 & 0x7FFFFFF;
  if ((v1 & 0x7FFFFFF) != 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = 32 * v2;
    v6 = (char *)this - 32 * v2;
    do
    {
      v7 = v6;
      if ((v1 & 0x40000000) != 0)
        v7 = (char *)*((_QWORD *)this - 1);
      v8 = *(unsigned __int8 **)&v7[v3];
      if (v8 == (unsigned __int8 *)this || v8[16] - 11 < 2)
      {
        v8 = v4;
      }
      else if (v4 && v4 != v8)
      {
        return 0;
      }
      v3 += 32;
      v4 = v8;
    }
    while (v5 != v3);
  }
  return 1;
}

void llvm::LandingPadInst::init(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;

  *(_DWORD *)(a1 + 60) = a2;
  *(_DWORD *)(a1 + 20) &= 0xF8000000;
  v6 = operator new(32 * a2);
  *(_QWORD *)(a1 - 8) = v6;
  if (a2)
  {
    v7 = &v6[4 * a2];
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = a1;
      v6 += 4;
    }
    while (v6 != v7);
  }
  llvm::Value::setName((uint64_t ***)a1, a3);
  *(_WORD *)(a1 + 18) &= ~1u;
}

void llvm::LandingPadInst::growOperands(llvm::LandingPadInst *this, int a2)
{
  int v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 & 0x7FFFFFFu) + a2)
  {
    if (v3 <= 1)
      v5 = 1;
    else
      v5 = v2 & 0x7FFFFFF;
    v6 = (a2 + 2 * v5) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v6;
    if ((v2 & 0x40000000) != 0)
      v7 = (uint64_t *)*((_QWORD *)this - 1);
    else
      v7 = (uint64_t *)((char *)this - 32 * v3);
    v8 = operator new(32 * ((a2 + 2 * v5) & 0xFFFFFFFE));
    *((_QWORD *)this - 1) = v8;
    if ((_DWORD)v6)
    {
      v9 = v8;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v9[3] = this;
        v9 += 4;
      }
      while (v9 != &v8[4 * v6]);
    }
    v10 = *((_DWORD *)this + 5);
    if ((v10 & 0x40000000) != 0)
      v11 = (char *)v8;
    else
      v11 = (char *)this - 32 * (v10 & 0x7FFFFFF);
    sub_1C53F5EAC((uint64_t)&v15, v7, &v7[4 * v3], (uint64_t)v11);
    if ((_DWORD)v3)
    {
      v12 = 4 * v3;
      do
      {
        v13 = &v7[v12];
        if (v7[v12 - 4])
        {
          *(_QWORD *)*(v13 - 2) = *(v13 - 3);
          v14 = *(v13 - 3);
          if (v14)
            *(_QWORD *)(v14 + 16) = *(v13 - 2);
        }
        v12 -= 4;
      }
      while (v12 * 8);
    }
    operator delete(v7);
  }
}

void llvm::LandingPadInst::addClause(llvm::LandingPadInst *this, llvm::Constant *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) <= (v4 & 0x7FFFFFFu))
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v4 & 0x7FFFFFF;
    v7 = (2 * v6);
    *((_DWORD *)this + 15) = v7;
    if ((v4 & 0x40000000) != 0)
      v8 = (uint64_t *)*((_QWORD *)this - 1);
    else
      v8 = (uint64_t *)((char *)this - 32 * v5);
    v9 = operator new(32 * (2 * v6));
    *((_QWORD *)this - 1) = v9;
    v10 = v9;
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = this;
      v10 += 4;
    }
    while (v10 != &v9[4 * v7]);
    v11 = *((_DWORD *)this + 5);
    if ((v11 & 0x40000000) != 0)
      v12 = (char *)v9;
    else
      v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
    sub_1C53F5EAC((uint64_t)&v23, v8, &v8[4 * v5], (uint64_t)v12);
    if ((_DWORD)v5)
    {
      v20 = 4 * v5;
      do
      {
        v21 = &v8[v20];
        if (v8[v20 - 4])
        {
          *(_QWORD *)*(v21 - 2) = *(v21 - 3);
          v22 = *(v21 - 3);
          if (v22)
            *(_QWORD *)(v22 + 16) = *(v21 - 2);
        }
        v20 -= 4;
      }
      while (v20 * 8);
    }
    operator delete(v8);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | (v4 + 1) & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
    v13 = (char *)*((_QWORD *)this - 1);
  else
    v13 = (char *)this - 32 * ((v4 + 1) & 0x7FFFFFF);
  v14 = &v13[32 * v5];
  if (*(_QWORD *)v14)
  {
    **((_QWORD **)v14 + 2) = *((_QWORD *)v14 + 1);
    v15 = *((_QWORD *)v14 + 1);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  }
  *(_QWORD *)v14 = a2;
  if (a2)
  {
    v18 = *((_QWORD *)a2 + 1);
    v17 = (char **)((char *)a2 + 8);
    v16 = v18;
    v19 = &v13[32 * v5];
    *((_QWORD *)v19 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v19 + 8;
    *((_QWORD *)v19 + 2) = v17;
    *v17 = v14;
  }
}

uint64_t llvm::CallInst::Create(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t ***v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t v34;
  __int16 v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD v42[4];
  __int16 v43;

  v8 = *((_DWORD *)a1 + 5);
  v9 = &a1[-4 * (v8 & 0x7FFFFFF)];
  v10 = *((unsigned __int8 *)a1 + 16);
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*((_DWORD *)a1 + 20) + 1);
  }
  else
  {
    v11 = 2;
  }
  if (v8 < 0 && (v40 = (uint64_t)*(v9 - 1), (v40 & 0xFFFFFFFF0) != 0))
    v12 = (*((_DWORD *)v9 - 3) - *(_DWORD *)((char *)v9 - v40));
  else
    v12 = 0;
  v13 = -32 * v11 - 32 - 32 * v12 - -32 * (v8 & 0x7FFFFFF);
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0)
      abort();
    v14 = (uint64_t *)operator new(v13 >> 2);
    v15 = v14;
    v16 = 0;
    v17 = 32 * (v8 & 0x7FFFFFF) - 32 * v11 - 32 * v12 - 32;
    do
    {
      v18 = (uint64_t)*v9;
      v9 += 4;
      v14[v16++] = v18;
      v17 -= 32;
    }
    while (v17);
    v13 = (unint64_t)&v14[v16];
  }
  else
  {
    v15 = 0;
  }
  v19 = a1[9];
  v20 = (uint64_t)*(a1 - 4);
  v21 = (uint64_t)(v13 - (_QWORD)v15) >> 3;
  if ((v8 & 0x10000000) != 0)
  {
    v22 = ***a1;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v26 = (uint64_t ****)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == a1)
      {
LABEL_22:
        v30 = v26[1];
        v33 = *v30;
        v31 = (char *)(v30 + 2);
        v32 = v33;
        goto LABEL_23;
      }
      v28 = 1;
      while (v27 != (uint64_t ***)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(uint64_t ****)(v23 + 16 * v25);
        if (v27 == a1)
        {
          v26 = (uint64_t ****)(v23 + 16 * v25);
          goto LABEL_22;
        }
      }
    }
    v26 = (uint64_t ****)(v23 + 16 * v24);
    goto LABEL_22;
  }
  v32 = 0;
  v31 = &byte_1C871356D;
LABEL_23:
  v43 = 261;
  v42[0] = v31;
  v42[1] = v32;
  v34 = sub_1C53DAB90(v19, v20, v15, v21, a2, a3, (uint64_t)v42, a4);
  v35 = *(_WORD *)(v34 + 18) & 0xFFFC | *((_WORD *)a1 + 9) & 3;
  *(_WORD *)(v34 + 18) = v35;
  *(_WORD *)(v34 + 18) = *((_WORD *)a1 + 9) & 0xFFC | v35 & 0xF003;
  *(_BYTE *)(v34 + 17) = *((_BYTE *)a1 + 17) & 0xFE | *(_BYTE *)(v34 + 17) & 1;
  *(_QWORD *)(v34 + 64) = a1[8];
  v36 = (unsigned __int8 *)a1[6];
  v41 = v36;
  if (v36)
    llvm::MetadataTracking::track((uint64_t)&v41, v36, 2);
  v37 = (unsigned __int8 **)(v34 + 48);
  if (&v41 == (unsigned __int8 **)(v34 + 48))
  {
    if (v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  }
  else
  {
    if (*v37)
      llvm::MetadataTracking::untrack(v34 + 48, *v37);
    v38 = v41;
    *v37 = v41;
    if (v38)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v41, v38, v34 + 48);
      v41 = 0;
    }
  }
  if (v15)
    operator delete(v15);
  return v34;
}

char *llvm::InvokeInst::Create(uint64_t ***a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  int v8;
  uint64_t ***v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  uint64_t **v34;
  uint64_t **v35;
  char *v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  uint64_t v41;
  unsigned __int8 *v42;
  _QWORD v43[4];
  __int16 v44;

  v8 = *((_DWORD *)a1 + 5);
  v9 = &a1[-4 * (v8 & 0x7FFFFFF)];
  v10 = *((unsigned __int8 *)a1 + 16);
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*((_DWORD *)a1 + 20) + 1);
  }
  else
  {
    v11 = 2;
  }
  if (v8 < 0 && (v41 = (uint64_t)*(v9 - 1), (v41 & 0xFFFFFFFF0) != 0))
    v12 = (*((_DWORD *)v9 - 3) - *(_DWORD *)((char *)v9 - v41));
  else
    v12 = 0;
  v13 = -32 * v11 - 32 - 32 * v12 - -32 * (v8 & 0x7FFFFFF);
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0)
      abort();
    v15 = (uint64_t *)operator new(v13 >> 2);
    v14 = v15;
    v16 = 0;
    v17 = 32 * (v8 & 0x7FFFFFF) - 32 * v11 - 32 * v12 - 32;
    do
    {
      v18 = (uint64_t)*v9;
      v9 += 4;
      v15[v16++] = v18;
      v17 -= 32;
    }
    while (v17);
    v13 = (unint64_t)&v15[v16];
  }
  else
  {
    v14 = 0;
  }
  v19 = (uint64_t)a1[9];
  v20 = (uint64_t)*(a1 - 4);
  v21 = (uint64_t)*(a1 - 12);
  v22 = (uint64_t)*(a1 - 8);
  v23 = (uint64_t)(v13 - (_QWORD)v14) >> 3;
  if ((v8 & 0x10000000) != 0)
  {
    v24 = ***a1;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == a1)
      {
LABEL_22:
        v32 = v28[1];
        v35 = *v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_23;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == a1)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_22;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_22;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_23:
  v44 = 261;
  v43[0] = v33;
  v43[1] = v34;
  v36 = sub_1C61CC1B8(v19, v20, v21, v22, v14, v23, a2, a3, (uint64_t)v43, a4);
  *((_WORD *)v36 + 9) = *((_WORD *)v36 + 9) & 0xF003 | *((_WORD *)a1 + 9) & 0xFFC;
  v36[17] = *((_BYTE *)a1 + 17) & 0xFE | v36[17] & 1;
  *((_QWORD *)v36 + 8) = a1[8];
  v37 = (unsigned __int8 *)a1[6];
  v42 = v37;
  if (v37)
    llvm::MetadataTracking::track((uint64_t)&v42, v37, 2);
  v38 = (unsigned __int8 **)(v36 + 48);
  if (&v42 == (unsigned __int8 **)(v36 + 48))
  {
    if (v42)
      llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  }
  else
  {
    if (*v38)
      llvm::MetadataTracking::untrack((uint64_t)(v36 + 48), *v38);
    v39 = v42;
    *v38 = v42;
    if (v39)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v42, v39, (uint64_t)(v36 + 48));
      v42 = 0;
    }
  }
  if (v14)
    operator delete(v14);
  return v36;
}

char *llvm::CallBrInst::Create(uint64_t ***a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  int v8;
  uint64_t v9;
  uint64_t ***v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  uint64_t **v35;
  uint64_t **v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  uint64_t v42;
  unsigned __int8 *v43;
  _QWORD v44[4];
  __int16 v45;
  void *v46;
  int v47;
  _QWORD v48[18];

  v48[16] = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)a1 + 5);
  v9 = v8 & 0x7FFFFFF;
  v10 = &a1[-4 * v9];
  v11 = *((unsigned __int8 *)a1 + 16);
  if (v11 == 84)
  {
    v12 = 0;
  }
  else if (v11 == 39)
  {
    v12 = (*((_DWORD *)a1 + 20) + 1);
  }
  else
  {
    v12 = 2;
  }
  if (v8 < 0 && (v42 = (uint64_t)*(v10 - 1), (v42 & 0xFFFFFFFF0) != 0))
    v13 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v42));
  else
    v13 = 0;
  v14 = -32 * v12 - 32 - 32 * v13 - -32 * v9;
  if (v14)
  {
    if ((v14 & 0x8000000000000000) != 0)
      abort();
    v17 = (uint64_t *)operator new(v14 >> 2);
    v15 = v17;
    v18 = 0;
    v19 = 32 * v9 - 32 * v12 - 32 * v13 - 32;
    do
    {
      v20 = (uint64_t)*v10;
      v10 += 4;
      v17[v18++] = v20;
      v19 -= 32;
    }
    while (v19);
    v16 = &v17[v18];
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v21 = (uint64_t)a1[9];
  v22 = (uint64_t)*(a1 - 4);
  v23 = (uint64_t)a1[-4 * *((unsigned int *)a1 + 20) - 8];
  sub_1C623E1E0((unsigned int *)a1, (uint64_t)&v46);
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v25 = ***a1;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v29 = (uint64_t ****)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == a1)
      {
LABEL_22:
        v33 = v29[1];
        v36 = *v33;
        v34 = (char *)(v33 + 2);
        v35 = v36;
        goto LABEL_23;
      }
      v31 = 1;
      while (v30 != (uint64_t ***)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(uint64_t ****)(v26 + 16 * v28);
        if (v30 == a1)
        {
          v29 = (uint64_t ****)(v26 + 16 * v28);
          goto LABEL_22;
        }
      }
    }
    v29 = (uint64_t ****)(v26 + 16 * v27);
    goto LABEL_22;
  }
  v35 = 0;
  v34 = &byte_1C871356D;
LABEL_23:
  v45 = 261;
  v44[0] = v34;
  v44[1] = v35;
  v37 = sub_1C61CC41C(v21, v22, v23, (uint64_t)v46, v47, v15, v16 - v15, v24, a2, a3, (uint64_t)v44, a4);
  if (v46 != v48)
    free(v46);
  *((_WORD *)v37 + 9) = *((_WORD *)v37 + 9) & 0xF003 | *((_WORD *)a1 + 9) & 0xFFC;
  v37[17] = *((_BYTE *)a1 + 17) & 0xFE | v37[17] & 1;
  *((_QWORD *)v37 + 8) = a1[8];
  v38 = (unsigned __int8 *)a1[6];
  v43 = v38;
  if (v38)
    llvm::MetadataTracking::track((uint64_t)&v43, v38, 2);
  v39 = (unsigned __int8 **)(v37 + 48);
  if (&v43 == (unsigned __int8 **)(v37 + 48))
  {
    if (v43)
      llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
  }
  else
  {
    if (*v39)
      llvm::MetadataTracking::untrack((uint64_t)(v37 + 48), *v39);
    v40 = v43;
    *v39 = v43;
    if (v40)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v43, v40, (uint64_t)(v37 + 48));
      v43 = 0;
    }
  }
  *((_DWORD *)v37 + 20) = *((_DWORD *)a1 + 20);
  if (v15)
    operator delete(v15);
  return v37;
}

uint64_t llvm::CallBase::getCaller(llvm::CallBase *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 56);
}

BOOL llvm::CallBase::isIndirectCall(llvm::CallBase *this)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(*((_QWORD *)this - 4) + 16);
  return v1 > 0x14 && v1 != 24;
}

BOOL llvm::CallBase::isMustTailCall(llvm::CallBase *this)
{
  _BOOL8 result;

  result = 0;
  if (this)
  {
    if (*((_BYTE *)this + 16) == 84)
      return (*((_WORD *)this + 9) & 3) == 2;
  }
  return result;
}

BOOL llvm::CallBase::isTailCall(llvm::CallBase *this)
{
  _BOOL8 result;

  result = 0;
  if (this)
  {
    if (*((_BYTE *)this + 16) == 84)
      return (*((_WORD *)this + 9) & 3u) - 1 < 2;
  }
  return result;
}

uint64_t llvm::CallBase::getIntrinsicID(llvm::CallBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this - 4);
  if (v1 && !*(_BYTE *)(v1 + 16) && *(_QWORD *)(v1 + 24) == *((_QWORD *)this + 9))
    return *(unsigned int *)(v1 + 36);
  else
    return 0;
}

BOOL llvm::CallBase::isReturnNonNull(llvm::CallBase *this)
{
  unsigned int v3;

  if ((sub_1C4D91DD8((uint64_t)this, 39) & 1) != 0)
    return 1;
  if (!llvm::AttributeList::getRetDereferenceableBytes((llvm::CallBase *)((char *)this + 64)))
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8);
  return !llvm::NullPointerIsDefined(*(llvm **)(*((_QWORD *)this + 5) + 56), (const Function *)(v3 >> 8));
}

uint64_t llvm::CallBase::getArgOperandWithAttribute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  v7 = 0;
  if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(a1 + 64), a2, &v7))
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  v4 = *(_QWORD *)(a1 - 32);
  if (v4
    && !*(_BYTE *)(v4 + 16)
    && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a1 + 72)
    && (v6 = *(_QWORD *)(v4 + 112), llvm::AttributeList::hasAttrSomewhere(&v6, a2, &v7)))
  {
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::CallBase::paramHasAttr(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 + 2;
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    if (v3 < *(_DWORD *)(v4 + 8))
    {
      v8 = *(_QWORD *)(v4 + 8 * v3 + 40);
      if (v8)
      {
        if (((*(unsigned __int8 *)(v8 + a3 / 8 + 12) >> (a3 & 7)) & 1) != 0)
          return 1;
      }
    }
  }
  v5 = *(_QWORD *)(a1 - 32);
  if (v5
    && !*(_BYTE *)(v5 + 16)
    && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72)
    && (v6 = *(_QWORD *)(v5 + 112)) != 0
    && v3 < *(_DWORD *)(v6 + 8)
    && (v9 = *(_QWORD *)(v6 + 8 * v3 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v9 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 - 32);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4)
  {
    if (*(_WORD *)(v2 + 18) != 49)
      return 0;
    v2 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3)
    return 0;
  v6 = *(_QWORD *)(v2 + 112);
  if (!v6)
    return 0;
  return (*(unsigned __int8 *)(v6 + a2 / 8 + 12) >> (a2 & 7)) & 1;
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int i;
  int v16;
  uint64_t v17;
  const void *v18;

  v5 = *(_QWORD *)(a1 - 32);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5)
    v7 = v6 == 5;
  else
    v7 = 0;
  if (v7)
  {
    if (*(_WORD *)(v5 + 18) != 49)
      return 0;
    v5 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v6 = *(unsigned __int8 *)(v5 + 16);
  }
  if (v6)
    return 0;
  v9 = *(_QWORD *)(v5 + 112);
  if (!v9)
    return 0;
  if (!*(_DWORD *)(v9 + 8))
    return 0;
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
    return 0;
  v11 = *(_DWORD *)(v10 + 40);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v10 + 24);
  v13 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v14 = v11 - 1;
  for (i = 1; ; ++i)
  {
    v16 = v13 & v14;
    v17 = v12 + 24 * (v13 & v14);
    v18 = *(const void **)v17;
    if (*(_QWORD *)v17 == -1)
    {
      if (a2 == (_QWORD *)-1)
        return 1;
      goto LABEL_17;
    }
    if (v18 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      return 1;
LABEL_17:
    if (v18 == (const void *)-1)
      return 0;
    v13 = i + v16;
  }
  if (a3 != *(_QWORD *)(v17 + 8) || a3 && memcmp(a2, v18, a3))
    goto LABEL_17;
  return 1;
}

uint64_t llvm::CallBase::getFnAttrOnCalledFunction<llvm::Attribute::AttrKind>(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v8;

  if (sub_1C4DA911C(a1, a2))
    return 0;
  v4 = *(_QWORD *)(a1 - 32);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4)
    v6 = v5 == 5;
  else
    v6 = 0;
  if (v6)
  {
    if (*(_WORD *)(v4 + 18) != 49)
      return 0;
    v4 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    v5 = *(unsigned __int8 *)(v4 + 16);
  }
  if (!v5)
  {
    v8 = *(_QWORD *)(v4 + 112);
    return llvm::AttributeList::getAttributeAtIndex(&v8, -1, a2);
  }
  return 0;
}

{
  return __ZNK4llvm8CallBase25getFnAttrOnCalledFunctionINS_9Attribute8AttrKindEEES2_T_(a1, a2);
}

uint64_t llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int i;
  int v16;
  uint64_t v17;
  const void *v18;

  v5 = *(_QWORD *)(a1 - 32);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5)
    v7 = v6 == 5;
  else
    v7 = 0;
  if (v7)
  {
    if (*(_WORD *)(v5 + 18) != 49)
      return 0;
    v5 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v6 = *(unsigned __int8 *)(v5 + 16);
  }
  if (v6)
    return 0;
  v9 = *(_QWORD *)(v5 + 112);
  if (!v9)
    return 0;
  if (!*(_DWORD *)(v9 + 8))
    return 0;
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
    return 0;
  v11 = *(_DWORD *)(v10 + 40);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v10 + 24);
  v13 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v14 = v11 - 1;
  for (i = 1; ; ++i)
  {
    v16 = v13 & v14;
    v17 = v12 + 24 * (v13 & v14);
    v18 = *(const void **)v17;
    if (*(_QWORD *)v17 == -1)
    {
      if (a2 == (_QWORD *)-1)
        return *(_QWORD *)(v17 + 16);
      goto LABEL_17;
    }
    if (v18 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      return *(_QWORD *)(v17 + 16);
LABEL_17:
    if (v18 == (const void *)-1)
      return 0;
    v13 = i + v16;
  }
  if (a3 != *(_QWORD *)(v17 + 8) || a3 && memcmp(a2, *(const void **)v17, a3))
    goto LABEL_17;
  return *(_QWORD *)(v17 + 16);
}

{
  return __ZNK4llvm8CallBase25getFnAttrOnCalledFunctionINS_9StringRefEEENS_9AttributeET_(a1, a2, a3);
}

uint64_t llvm::CallBase::getOperandBundlesAsDefs(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v2 = *(_DWORD *)(result + 20);
  if (v2 < 0)
  {
    v3 = *(_QWORD *)(result - 32 * (v2 & 0x7FFFFFF) - 8);
    if ((v3 & 0xFFFFFFFF0) != 0)
    {
      v5 = (v3 >> 4);
      v6 = result;
      do
      {
        v13 = a2;
        v14 = result;
        v7 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
        v8 = result - 32 * v7;
        v9 = (unsigned int *)(v6 - (*(_QWORD *)(v8 - 8) + 32 * v7));
        v10 = *v9;
        v11 = v9[1];
        v12 = *((_QWORD *)v9 - 1);
        v15[0] = v8 + 32 * v10;
        v15[1] = v11 - v10;
        v15[2] = v12;
        sub_1C623D924(a2, (uint64_t)v15);
        a2 = v13;
        result = v14;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t llvm::CallBase::populateBundleOperandInfos(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _DWORD ****v4;
  int v5;
  uint64_t result;
  _DWORD ****v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  _DWORD ****v14;
  uint64_t v15;
  _DWORD ****v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  unsigned __int8 *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *inserted;
  char v29;

  v4 = (_DWORD ****)a1;
  v5 = *(_DWORD *)(a1 + 20);
  result = a1 - 32 * (v5 & 0x7FFFFFF) + 32 * a4;
  if (a3)
  {
    v7 = v4;
    v8 = result;
    v9 = a4;
    v10 = 48 * a3;
    v11 = a2;
    v12 = (uint64_t **)(a2 + 32);
    do
    {
      sub_1C5382FD4((uint64_t)&v29, *(v12 - 1), *v12, v8);
      v8 = v13;
      v12 += 6;
      v10 -= 48;
    }
    while (v10);
    v4 = v7;
    v5 = *((_DWORD *)v7 + 5);
    a4 = v9;
    a2 = v11;
    result = v8;
  }
  if (v5 < 0)
  {
    v14 = &v4[-4 * (v5 & 0x7FFFFFF)];
    v17 = (uint64_t)*(v14 - 1);
    v16 = v14 - 1;
    v15 = v17;
    if (v17)
    {
      v18 = ***v4;
      v19 = (uint64_t)v16 - v15;
      do
      {
        v20 = *(_BYTE *)(a2 + 23);
        v21 = v20 < 0;
        v22 = *(unsigned __int8 **)a2;
        if (v20 >= 0)
          v22 = (unsigned __int8 *)a2;
        v23 = v20 & 0x7F;
        if (v21)
          v24 = *(_QWORD *)(a2 + 8);
        else
          v24 = v23;
        v25 = result;
        v26 = a2;
        v27 = a4;
        inserted = llvm::LLVMContextImpl::getOrInsertBundleTag(v18, v22, v24);
        result = v25;
        *(_QWORD *)v19 = inserted;
        *(_DWORD *)(v19 + 8) = v27;
        a4 = v27 + ((*(_QWORD *)(v26 + 32) - *(_QWORD *)(v26 + 24)) >> 3);
        *(_DWORD *)(v19 + 12) = a4;
        a2 = v26 + 48;
        v19 += 16;
      }
      while ((_DWORD ****)v19 != v16);
    }
  }
  return result;
}

char *llvm::CallBase::getBundleOpInfoForOperand(char *this, unsigned int a2)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v9;

  v2 = *((_DWORD *)this + 5);
  if (v2 < 0)
  {
    v3 = &this[-32 * (v2 & 0x7FFFFFF)];
    v6 = *((_QWORD *)v3 - 1);
    v4 = v3 - 8;
    v5 = v6;
    v7 = &v4[-v6];
    if (v6 > 127)
    {
      if (v5)
      {
        do
        {
          if (&v7[16
                 * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                  / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10) / ((v4 - v7) >> 4)))] >= v4)
            this = v4 - 16;
          else
            this = &v7[16
                     * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                      / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10)
                                     / ((v4 - v7) >> 4)))];
          v9 = *((_DWORD *)this + 3);
          if (*((_DWORD *)this + 2) <= a2 && v9 > a2)
            break;
          if (v9 > a2)
            v4 = this;
          else
            v7 = this + 16;
        }
        while (v7 != v4);
      }
      else
      {
        return v7;
      }
    }
    else if (v5)
    {
      do
      {
        while (1)
        {
          this = v7;
          if (*((_DWORD *)v7 + 2) <= a2)
            break;
          v7 += 16;
          if (this + 16 == v4)
            return this;
        }
        v7 += 16;
      }
      while (*((_DWORD *)this + 3) <= a2 && v7 != v4);
    }
  }
  return this;
}

char *llvm::CallBase::removeOperandBundle(llvm::CallBase *this, llvm::CallBase *a2, llvm::Instruction *a3, llvm::Instruction *a4)
{
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Instruction *v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v4 = (char *)this;
  v28[6] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = 0x100000000;
  v5 = *((_DWORD *)this + 5);
  if (v5 < 0)
  {
    v24 = a3;
    v11 = *((_QWORD *)this - 4 * (v5 & 0x7FFFFFF) - 1);
    if ((v11 & 0xFFFFFFFF0) != 0)
    {
      v12 = (int)a2;
      v13 = 0;
      v14 = 0;
      v15 = -(uint64_t)(v11 >> 4);
LABEL_15:
      v16 = &v4[16 * v13++];
      do
      {
        v17 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
        v18 = &v4[-32 * v17];
        v19 = &v16[-*((_QWORD *)v18 - 1) + -32 * v17];
        v20 = *(unsigned int *)v19;
        v21 = &v18[32 * v20];
        v22 = *((unsigned int *)v19 + 1) - v20;
        v23 = *((_QWORD *)v19 - 1);
        v25[0] = v21;
        v25[1] = v22;
        v25[2] = v23;
        if (*(_DWORD *)(v23 + 8) == v12)
        {
          v14 = 1;
          if (v15 + v13)
            goto LABEL_15;
          goto LABEL_22;
        }
        v16 += 16;
        sub_1C623D924((uint64_t)&v26, (uint64_t)v25);
        ++v13;
      }
      while (v15 + v13 != 1);
      if ((v14 & 1) == 0)
        goto LABEL_2;
LABEL_22:
      v4 = llvm::CallBase::Create((uint64_t ***)v4, (uint64_t)v26, v27, v24);
    }
  }
LABEL_2:
  v6 = (char *)v26;
  if ((_DWORD)v27)
  {
    v7 = 48 * v27;
    do
    {
      v8 = &v6[v7];
      v9 = *(void **)&v6[v7 - 24];
      if (v9)
      {
        *((_QWORD *)v8 - 2) = v9;
        operator delete(v9);
      }
      if (*(v8 - 25) < 0)
        operator delete(*((void **)v8 - 6));
      v7 -= 48;
    }
    while (v7);
    v6 = (char *)v26;
  }
  if (v6 != (char *)v28)
    free(v6);
  return v4;
}

BOOL llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  _BOOL8 result;
  uint64_t v3;
  __int32 v4;

  v4 = 7;
  result = sub_1C53E4BBC((uint64_t)this, &v4, 1uLL);
  if (result)
  {
    v3 = *((_QWORD *)this - 4);
    return !v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *((_QWORD *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

BOOL sub_1C53E4BBC(uint64_t a1, __int32 *a2, size_t a3)
{
  int v3;
  _BOOL8 result;
  unint64_t v5;
  __int32 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  uint64_t v12;
  BOOL v13;

  v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x80000000) == 0)
    return 0;
  v5 = *(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) - 8);
  if ((v5 & 0xFFFFFFFF0) == 0)
    return 0;
  v6 = &a2[a3];
  v7 = a1 - 8;
  v8 = (v5 >> 4) - 1;
  v9 = a1 - 8;
  do
  {
    v10 = wmemchr(a2, *(_DWORD *)(*(_QWORD *)(v9- (*(_QWORD *)(v7 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))+ 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)))+ 8), a3);
    if (v10)
      v11 = v10;
    else
      v11 = v6;
    v12 = v11 - a2;
    result = v12 == a3;
    v13 = v12 == a3 || v8-- == 0;
    v9 += 16;
  }
  while (!v13);
  return result;
}

void llvm::CallInst::init(uint64_t ***a1, uint64_t **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t ***v24;
  uint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  unsigned __int8 *v32;
  size_t v33;
  size_t v34;
  char v35;
  char v36;

  v11 = a5;
  a1[9] = a2;
  sub_1C5382FD4((uint64_t)&v35, a4, &a4[a5], (uint64_t)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]);
  v14 = a1 - 4;
  if (*(a1 - 4))
  {
    **(a1 - 2) = (uint64_t *)*(a1 - 3);
    v19 = (uint64_t)*(a1 - 3);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(a1 - 2);
  }
  *v14 = (uint64_t **)a3;
  if (a3)
  {
    v17 = *(uint64_t ***)(a3 + 8);
    v16 = (uint64_t **)(a3 + 8);
    v15 = v17;
    *(a1 - 3) = v17;
    if (v17)
      v15[2] = (uint64_t *)(a1 - 3);
    *(a1 - 2) = v16;
    *v16 = (uint64_t *)v14;
  }
  v18 = *((_DWORD *)a1 + 5);
  if (a7)
  {
    v20 = (uint64_t)&(&a1[4 * v11])[-4 * (v18 & 0x7FFFFFF)];
    v21 = 48 * a7;
    v22 = (uint64_t **)(a6 + 32);
    do
    {
      sub_1C5382FD4((uint64_t)&v36, *(v22 - 1), *v22, v20);
      v20 = v23;
      v22 += 6;
      v21 -= 48;
    }
    while (v21);
    v18 = *((_DWORD *)a1 + 5);
  }
  if (v18 < 0)
  {
    v24 = &a1[-4 * (v18 & 0x7FFFFFF)];
    v27 = (uint64_t)*(v24 - 1);
    v26 = v24 - 1;
    v25 = v27;
    if (v27)
    {
      v28 = (_DWORD *)***a1;
      v29 = (uint64_t)v26 - v25;
      do
      {
        v30 = *(_BYTE *)(a6 + 23);
        v31 = v30 < 0;
        if (v30 >= 0)
          v32 = (unsigned __int8 *)a6;
        else
          v32 = *(unsigned __int8 **)a6;
        v33 = v30 & 0x7F;
        if (v31)
          v34 = *(_QWORD *)(a6 + 8);
        else
          v34 = v33;
        *(_QWORD *)v29 = llvm::LLVMContextImpl::getOrInsertBundleTag(v28, v32, v34);
        *(_DWORD *)(v29 + 8) = v11;
        v11 += (*(_QWORD *)(a6 + 32) - *(_QWORD *)(a6 + 24)) >> 3;
        *(_DWORD *)(v29 + 12) = v11;
        a6 += 48;
        v29 += 16;
      }
      while ((uint64_t ***)v29 != v26);
    }
  }
  llvm::Value::setName(a1, a8);
}

uint64_t llvm::CallInst::CallInst(uint64_t a1, llvm::FunctionType *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(_QWORD *)a1 = **((_QWORD **)a2 + 2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 84;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v11 = *(_QWORD *)(a5 + 40);
    v12 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v14 = *(_QWORD *)(v11 + 56);
      if (v14)
      {
        v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15)
          llvm::ValueSymbolTable::reinsertValue(v15, (llvm::Value *)a1);
      }
    }
    v13 = *v12;
    *(_QWORD *)(a1 + 24) = *v12;
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(v13 + 8) = v9;
    *v12 = v9;
  }
  *(_QWORD *)(a1 + 64) = 0;
  llvm::CallInst::init((llvm::CallInst *)a1, a2, a3, a4);
  return a1;
}

{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(_QWORD *)a1 = **((_QWORD **)a2 + 2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 84;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v14 = *(_QWORD *)(a5 + 56);
    if (v14)
    {
      v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15)
        llvm::ValueSymbolTable::reinsertValue(v15, (llvm::Value *)a1);
    }
  }
  v12 = *(_QWORD *)(a5 + 40);
  v11 = (_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  *(_QWORD *)(a1 + 64) = 0;
  llvm::CallInst::init((llvm::CallInst *)a1, a2, a3, a4);
  return a1;
}

uint64_t llvm::CallInst::CallInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 84;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  LOBYTE(v4) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 3;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC | v4 & 3;
  sub_1C53F5EAC((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    v12 = a2 - 32 * (v8 & 0x7FFFFFF);
    v13 = *(_QWORD *)(v12 - 8);
    v7 = (_BYTE *)(v12 - 8);
    v6 = &v7[-v13];
  }
  v9 = *(_DWORD *)(a1 + 20);
  if (v9 < 0)
    v10 = (void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8 - *(_QWORD *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8));
  else
    v10 = 0;
  if (v7 != v6)
    memmove(v10, v6, v7 - v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 84;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  LOBYTE(v4) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 3;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18) & 0xFFC | v4 & 3;
  sub_1C53F5EAC((uint64_t)&v14, (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t *)a2, a1 - 32 * v5);
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0)
  {
    v12 = a2 - 32 * (v8 & 0x7FFFFFF);
    v13 = *(_QWORD *)(v12 - 8);
    v7 = (_BYTE *)(v12 - 8);
    v6 = &v7[-v13];
  }
  v9 = *(_DWORD *)(a1 + 20);
  if (v9 < 0)
    v10 = (void *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8 - *(_QWORD *)(a1 - 32 * (v9 & 0x7FFFFFF) - 8));
  else
    v10 = 0;
  if (v7 != v6)
    memmove(v10, v6, v7 - v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

void llvm::CallInst::updateProfWeight(uint64_t ***this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  llvm::CallInst **v11;
  llvm::CallInst *v12;
  llvm::CallInst **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::CallInst **v23;
  llvm::CallInst *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const llvm::APInt *v37;
  llvm::ConstantInt *v38;
  unsigned int v39;
  unint64_t v40;
  llvm::Value *v41;
  llvm::ValueHandleBase *v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const llvm::APInt *v56;
  llvm::ConstantInt *v57;
  unsigned int v58;
  unint64_t v59;
  llvm::Value *v60;
  llvm::ValueHandleBase *v61;
  _QWORD *v62;
  uint64_t v63;
  llvm::MDNode *Impl;
  uint64_t **v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  void *v75;
  uint64_t v76;
  _QWORD v77[4];

  v77[3] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return;
  v6 = ***this;
  v75 = this;
  v7 = *(_DWORD *)(v6 + 2496);
  if (!v7)
  {
    v23 = 0;
LABEL_27:
    v11 = (llvm::CallInst **)sub_1C541AB24(v6 + 2480, (uint64_t)&v75, (uint64_t *)&v75, v23);
    v24 = (llvm::CallInst *)v75;
    v11[3] = 0;
    v11[4] = 0;
    *v11 = v24;
    v11[1] = (llvm::CallInst *)(v11 + 3);
    v11[2] = (llvm::CallInst *)0x100000000;
    goto LABEL_12;
  }
  v8 = *(_QWORD *)(v6 + 2480);
  v9 = v7 - 1;
  v10 = v9 & ((this >> 4) ^ (this >> 9));
  v11 = (llvm::CallInst **)(v8 + 40 * v10);
  v12 = *v11;
  if (*v11 != (llvm::CallInst *)this)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != (llvm::CallInst *)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == (llvm::CallInst *)-8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (llvm::CallInst **)(v8 + 40 * v10);
      v12 = *v11;
      if (*v11 == (llvm::CallInst *)this)
        goto LABEL_12;
    }
    if (v13)
      v23 = v13;
    else
      v23 = v11;
    goto LABEL_27;
  }
LABEL_12:
  v17 = *((unsigned int *)v11 + 4);
  if ((_DWORD)v17)
  {
    v18 = (_QWORD *)((char *)v11[1] + 8);
    v19 = 16 * v17;
    while (*((_DWORD *)v18 - 2) != 2)
    {
      v18 += 2;
      v19 -= 16;
      if (!v19)
        return;
    }
    v20 = *v18;
    if (*v18)
    {
      v21 = *(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8));
      if (!*(_BYTE *)v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (*(_QWORD *)v22 == 2)
        {
          v25 = *(unsigned __int16 *)(v22 + 24) != 20566;
          if (!a3 || v25)
            return;
        }
        else if (*(_QWORD *)v22 != 14
               || !a3
               || *(_QWORD *)(v22 + 24) ^ 0x775F68636E617262 | *(_QWORD *)(v22 + 30) ^ 0x737468676965775FLL)
        {
          return;
        }
        v75 = v77;
        v77[0] = v21;
        v76 = 0x300000001;
        v72 = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v71, a2, 0);
        v70 = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v69, a3, 0);
        v26 = *(_QWORD *)(v21 + 8);
        if (*(_QWORD *)v26 == 2)
        {
          if (*(_WORD *)(v26 + 24) == 20566)
          {
            v45 = *(_DWORD *)(v20 + 8);
            if (v45 >= 2)
            {
              for (i = 1; i < v45; i += 2)
              {
                v47 = *(_QWORD *)(v20 - 8 * v45 + 8 * i);
                v48 = v76;
                if (v76 >= (unint64_t)HIDWORD(v76))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v76 + 1, 8);
                  v48 = v76;
                }
                *((_QWORD *)v75 + v48) = v47;
                v49 = (v76 + 1);
                LODWORD(v76) = v76 + 1;
                v50 = *(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8) + 8 * (i + 1));
                if (*(_BYTE *)(*(_QWORD *)(v50 + 128) + 16) == 16)
                  v51 = *(_QWORD *)(v50 + 128);
                else
                  v51 = 0;
                v52 = (uint64_t *)(v51 + 24);
                if (*(_DWORD *)(v51 + 32) >= 0x41u)
                  v52 = (uint64_t *)*v52;
                v53 = *v52;
                if (*v52 == -1)
                {
                  if (v49 >= HIDWORD(v76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v49 + 1, 8);
                    LODWORD(v49) = v76;
                  }
                  *((_QWORD *)v75 + v49) = v50;
                  LODWORD(v76) = v76 + 1;
                }
                else
                {
                  v68 = 128;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v67, v53, 0);
                  llvm::APInt::operator*((uint64_t)&v67, &v71, (uint64_t)&v73);
                  if (v68 >= 0x41 && v67)
                    MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
                  v67 = v73;
                  v68 = v74;
                  v54 = ***this;
                  llvm::APInt::udiv((llvm::APInt *)&v67, (const llvm::APInt *)&v69, (llvm::APInt *)&v65);
                  v55 = (uint64_t)sub_1C47EE5B8(&v65, 0xFFFFFFFFFFFFFFFFLL);
                  v57 = *(llvm::ConstantInt **)(v54 + 1984);
                  v58 = *(_DWORD *)(v54 + 1992);
                  v74 = v58 >> 8;
                  if (v58 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v73, v55, 0);
                  }
                  else
                  {
                    if (v58 <= 0xFF)
                      v59 = 0;
                    else
                      v59 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v58);
                    v73 = v59 & v55;
                  }
                  v61 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v73, v56);
                  if (v74 >= 0x41 && v73)
                    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
                  v62 = llvm::ValueAsMetadata::get(v61, v60);
                  v63 = v76;
                  if (v76 >= (unint64_t)HIDWORD(v76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v76 + 1, 8);
                    v63 = v76;
                  }
                  *((_QWORD *)v75 + v63) = v62;
                  LODWORD(v76) = v76 + 1;
                  if (v66 >= 0x41 && v65)
                    MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
                  if (v68 >= 0x41 && v67)
                    MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
                }
                v45 = *(_DWORD *)(v20 + 8);
              }
            }
          }
        }
        else if (*(_QWORD *)v26 == 14)
        {
          v27 = *(_QWORD *)(v26 + 24);
          v28 = *(_QWORD *)(v26 + 30);
          if (v27 == 0x775F68636E617262 && v28 == 0x737468676965775FLL)
          {
            v30 = *(unsigned int *)(v20 + 8);
            if ((_DWORD)v30)
            {
              v31 = *(_QWORD *)(*(_QWORD *)(v20 - 8 * v30 + 8) + 128);
              if (*(_BYTE *)(v31 + 16) == 16)
                v32 = v31;
              else
                v32 = 0;
              v33 = (uint64_t *)(v32 + 24);
              if (*(_DWORD *)(v32 + 32) >= 0x41u)
                v33 = (uint64_t *)*v33;
              v34 = *v33;
              v68 = 128;
              llvm::APInt::initSlowCase((llvm::APInt *)&v67, v34, 0);
              llvm::APInt::operator*((uint64_t)&v67, &v71, (uint64_t)&v73);
              if (v68 >= 0x41 && v67)
                MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
              v67 = v73;
              v68 = v74;
              v35 = ***this;
              llvm::APInt::udiv((llvm::APInt *)&v67, (const llvm::APInt *)&v69, (llvm::APInt *)&v65);
              v36 = (uint64_t)sub_1C47EE5B8(&v65, 0xFFFFFFFFuLL);
              v38 = *(llvm::ConstantInt **)(v35 + 1960);
              v39 = *(_DWORD *)(v35 + 1968);
              v74 = v39 >> 8;
              if (v39 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v73, v36, 0);
              }
              else
              {
                if (v39 <= 0xFF)
                  v40 = 0;
                else
                  v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
                v73 = v40 & v36;
              }
              v42 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v73, v37);
              if (v74 >= 0x41 && v73)
                MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
              v43 = llvm::ValueAsMetadata::get(v42, v41);
              v44 = v76;
              if (v76 >= HIDWORD(v76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v76 + 1, 8);
                v44 = v76;
              }
              *((_QWORD *)v75 + v44) = v43;
              LODWORD(v76) = v76 + 1;
              if (v66 >= 0x41 && v65)
                MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
              if (v68 >= 0x41 && v67)
                MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
            }
          }
        }
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(**this, v75, v76, 0, 1);
        if (Impl || this[6] || (*((_BYTE *)this + 23) & 0x20) != 0)
          llvm::Value::setMetadata((llvm::Value *)this, 2, Impl);
        if (v70 >= 0x41 && v69)
          MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17, Impl);
        if (v72 >= 0x41 && v71)
          MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17, Impl);
        if (v75 != v77)
          free(v75);
      }
    }
  }
}

_QWORD *llvm::CallInst::CreateMalloc(uint64_t a1, llvm::Type ***a2, llvm::PointerType *a3, uint64_t a4, llvm::ConstantInt **a5, uint64_t a6, uint64_t a7)
{
  return sub_1C53E59EC(a1, 0, a2, a3, a4, a5, 0, 0, a6, a7);
}

_QWORD *sub_1C53E59EC(uint64_t a1, uint64_t a2, llvm::Type ***this, llvm::PointerType *a4, uint64_t a5, llvm::ConstantInt **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  llvm::ConstantExpr *v17;
  llvm::ConstantInt *v18;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v20;
  unsigned int v21;
  int v22;
  int v23;
  llvm::Value **v24;
  unsigned int v25;
  llvm::Type *v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  llvm::APInt *v31;
  unsigned int v32;
  llvm::APInt *v33;
  unsigned int v34;
  llvm::ConstantExpr *IntegerCast;
  char *v36;
  char *v37;
  llvm::Value *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  llvm::Value *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  llvm::ValueSymbolTable *v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ValueSymbolTable *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  llvm::ValueSymbolTable *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::PointerType *v89;
  uint64_t v90;
  _QWORD v92[4];
  __int16 v93;
  llvm::ValueHandleBase *Mul;

  v16 = a9;
  Mul = (llvm::ValueHandleBase *)a5;
  if (!a6)
  {
    v24 = llvm::ConstantInt::get((llvm::ConstantInt *)this, 1, 0);
LABEL_27:
    v17 = (llvm::ConstantExpr *)v24;
    goto LABEL_28;
  }
  v17 = (llvm::ConstantExpr *)a6;
  v18 = *a6;
  if (*a6 != (llvm::ConstantInt *)this)
  {
    if (a1)
    {
      v93 = 257;
      if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12)
        v18 = (llvm::ConstantInt *)**((_QWORD **)v18 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v18);
      v20 = (llvm::Type *)this;
      if (((_DWORD)this[1] & 0xFE) == 0x12)
        v20 = *this[2];
      v21 = llvm::Type::getPrimitiveSizeInBits(v20);
      if (PrimitiveSizeInBits > v21)
        v22 = 38;
      else
        v22 = 39;
      if (PrimitiveSizeInBits == v21)
        v23 = 49;
      else
        v23 = v22;
      llvm::CastInst::Create(v23);
    }
    else
    {
      v93 = 257;
      if ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12)
        v18 = (llvm::ConstantInt *)**((_QWORD **)v18 + 2);
      v25 = llvm::Type::getPrimitiveSizeInBits(v18);
      v26 = (llvm::Type *)this;
      if (((_DWORD)this[1] & 0xFE) == 0x12)
        v26 = *this[2];
      v27 = llvm::Type::getPrimitiveSizeInBits(v26);
      if (v25 > v27)
        v28 = 38;
      else
        v28 = 39;
      if (v25 == v27)
        v29 = 49;
      else
        v29 = v28;
      llvm::CastInst::Create(v29);
    }
    goto LABEL_27;
  }
LABEL_28:
  v30 = *((unsigned __int8 *)v17 + 16);
  if (v17 && v30 == 16)
  {
    v31 = (llvm::ConstantExpr *)((char *)v17 + 24);
    v32 = *((_DWORD *)v17 + 8);
    if (v32 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v31) == v32 - 1)
        goto LABEL_41;
    }
    else if (*(_QWORD *)v31 == 1)
    {
LABEL_41:
      if (!a1)
        goto LABEL_56;
LABEL_54:
      v48 = 0;
      v49 = *(_QWORD **)(a1 + 40);
      goto LABEL_57;
    }
  }
  if (!a5 || *(_BYTE *)(a5 + 16) != 16)
    goto LABEL_38;
  v33 = (llvm::APInt *)(a5 + 24);
  v34 = *(_DWORD *)(a5 + 32);
  if (v34 <= 0x40)
  {
    if (*(_QWORD *)v33 != 1)
      goto LABEL_38;
LABEL_53:
    Mul = v17;
    if (a1)
      goto LABEL_54;
    goto LABEL_56;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v33) == v34 - 1)
    goto LABEL_53;
LABEL_38:
  if (v17 && v30 <= 0x14)
  {
    IntegerCast = (llvm::ConstantExpr *)llvm::ConstantExpr::getIntegerCast(v17, this, 0);
    Mul = llvm::ConstantExpr::getMul(IntegerCast, (llvm::Constant *)a5, 0, 0);
    goto LABEL_41;
  }
  if (a1)
  {
    v89 = a4;
    v90 = a8;
    v92[0] = "mallocsize";
    v93 = 259;
    v36 = (char *)operator new(0x80uLL);
    *((_DWORD *)v36 + 21) = *((_DWORD *)v36 + 21) & 0x38000000 | 2;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = 0;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 5) = 0;
    *((_QWORD *)v36 + 6) = 0;
    *((_QWORD *)v36 + 4) = 0;
    v37 = v36 + 32;
    *((_QWORD *)v36 + 8) = *(_QWORD *)v17;
    v38 = (llvm::Value *)(v36 + 64);
    *((_QWORD *)v36 + 3) = v36 + 64;
    *((_QWORD *)v36 + 7) = v36 + 64;
    *((_QWORD *)v36 + 9) = 0;
    v36[80] = 45;
    v36[81] = 0;
    *((_WORD *)v36 + 41) = 0;
    *((_DWORD *)v36 + 21) = 2;
    *(_OWORD *)(v36 + 88) = 0u;
    v39 = v36 + 88;
    *(_OWORD *)(v36 + 104) = 0u;
    *((_DWORD *)v36 + 30) = 0;
    v40 = *(_QWORD *)(a1 + 40);
    v41 = (uint64_t *)(a1 + 24);
    *((_QWORD *)v36 + 13) = v40;
    *(_WORD *)(v40 + 18) &= ~0x8000u;
    if ((v36[87] & 0x10) != 0
      && (v75 = *(_QWORD *)(v40 + 56)) != 0
      && (v76 = *(llvm::ValueSymbolTable **)(v75 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v76, v38);
      v37 = v36 + 32;
      v77 = *(_QWORD *)v36;
      v78 = *v41;
      *((_QWORD *)v36 + 11) = *v41;
      *((_QWORD *)v36 + 12) = v41;
      *(_QWORD *)(v78 + 8) = v39;
      *v41 = (uint64_t)v39;
      if (v77)
      {
        **((_QWORD **)v36 + 2) = *((_QWORD *)v36 + 1);
        v79 = *((_QWORD *)v36 + 1);
        if (v79)
          *(_QWORD *)(v79 + 16) = *((_QWORD *)v36 + 2);
      }
    }
    else
    {
      v42 = *v41;
      *((_QWORD *)v36 + 11) = *v41;
      *((_QWORD *)v36 + 12) = v41;
      *(_QWORD *)(v42 + 8) = v39;
      *v41 = (uint64_t)v39;
    }
    *(_QWORD *)v36 = v17;
    v45 = *((_QWORD *)v17 + 1);
    v44 = (_QWORD *)((char *)v17 + 8);
    v43 = v45;
    *((_QWORD *)v36 + 1) = v45;
    a4 = v89;
    if (v45)
      *(_QWORD *)(v43 + 16) = v36 + 8;
    *((_QWORD *)v36 + 2) = v44;
    *v44 = v36;
    if (*((_QWORD *)v36 + 4))
    {
      **((_QWORD **)v36 + 6) = *((_QWORD *)v36 + 5);
      v88 = *((_QWORD *)v36 + 5);
      if (v88)
        *(_QWORD *)(v88 + 16) = *((_QWORD *)v36 + 6);
    }
    v46 = (_QWORD *)(a5 + 8);
    v47 = *(_QWORD *)(a5 + 8);
    *((_QWORD *)v36 + 5) = v47;
    *((_QWORD *)v36 + 4) = a5;
    if (v47)
      *(_QWORD *)(v47 + 16) = v36 + 40;
    *((_QWORD *)v36 + 6) = v46;
    *v46 = v37;
    llvm::Value::setName((uint64_t ***)v38, (uint64_t)v92);
    Mul = (llvm::ValueHandleBase *)(v36 + 64);
    a8 = v90;
    goto LABEL_54;
  }
  v92[0] = "mallocsize";
  v93 = 259;
  Mul = llvm::BinaryOperator::Create(17, v17, a5, (uint64_t)v92, a2);
LABEL_56:
  v48 = 1;
  v49 = (_QWORD *)a2;
LABEL_57:
  v50 = *(_QWORD *)(v49[7] + 40);
  v51 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*v49 + 1912), 0);
  if (a9)
  {
    v52 = *(uint64_t ***)(a9 + 24);
  }
  else
  {
    v52 = (uint64_t **)sub_1C6212CB8(v50, "malloc", 6uLL, 0, v51, (uint64_t)this);
    v16 = v71;
  }
  v53 = llvm::PointerType::get(a4, 0);
  if ((v48 & 1) == 0)
  {
    v92[0] = "malloccall";
    v93 = 259;
    v55 = (_QWORD *)sub_1C53DAB90(v52, v16, (uint64_t *)&Mul, 1, a7, a8, (uint64_t)v92, a1);
    if (*v55 != v53)
    {
      v62 = (char *)operator new(0x60uLL);
      v63 = v62;
      *((_QWORD *)v62 + 4) = v53;
      v59 = (llvm::Value *)(v62 + 32);
      *(_QWORD *)v62 = 0;
      *((_QWORD *)v62 + 1) = 0;
      *((_QWORD *)v62 + 2) = 0;
      *((_QWORD *)v62 + 3) = v62 + 32;
      *((_QWORD *)v62 + 5) = 0;
      *((_QWORD *)v62 + 6) = 0x10000004DLL;
      *(_OWORD *)(v62 + 56) = 0u;
      v64 = v62 + 56;
      *(_OWORD *)(v62 + 72) = 0u;
      *((_DWORD *)v62 + 22) = 0;
      if (a1)
      {
        v80 = *(_QWORD *)(a1 + 40);
        v81 = (uint64_t *)(a1 + 24);
        *((_QWORD *)v62 + 9) = v80;
        *(_WORD *)(v80 + 18) &= ~0x8000u;
        if ((v62[55] & 0x10) != 0
          && (v83 = *(_QWORD *)(v80 + 56)) != 0
          && (v84 = *(llvm::ValueSymbolTable **)(v83 + 104)) != 0)
        {
          llvm::ValueSymbolTable::reinsertValue(v84, v59);
          v85 = *(_QWORD *)v63;
          v86 = *v81;
          *((_QWORD *)v63 + 7) = *v81;
          *((_QWORD *)v63 + 8) = v81;
          *(_QWORD *)(v86 + 8) = v64;
          *v81 = (uint64_t)v64;
          if (v85)
          {
            **((_QWORD **)v63 + 2) = *((_QWORD *)v63 + 1);
            v87 = *((_QWORD *)v63 + 1);
            if (v87)
              *(_QWORD *)(v87 + 16) = *((_QWORD *)v63 + 2);
          }
        }
        else
        {
          v82 = *v81;
          *((_QWORD *)v63 + 7) = *v81;
          *((_QWORD *)v63 + 8) = v81;
          *(_QWORD *)(v82 + 8) = v64;
          *v81 = (uint64_t)v64;
        }
      }
      *(_QWORD *)v63 = v55;
      v65 = v55 + 1;
      v66 = v55[1];
      *((_QWORD *)v63 + 1) = v66;
      if (v66)
        *(_QWORD *)(v66 + 16) = v63 + 8;
      *((_QWORD *)v63 + 2) = v65;
      *v65 = v63;
      goto LABEL_70;
    }
LABEL_71:
    v67 = v55;
    goto LABEL_72;
  }
  v92[0] = "malloccall";
  v93 = 259;
  v54 = sub_1C53DAB90(v52, v16, (uint64_t *)&Mul, 1, a7, a8, (uint64_t)v92, 0);
  v55 = (_QWORD *)v54;
  if (*(_QWORD *)v54 == v53)
    goto LABEL_71;
  v56 = (uint64_t *)(a2 + 40);
  *(_QWORD *)(v54 + 40) = a2;
  *(_WORD *)(a2 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
  {
    v72 = *(_QWORD *)(a2 + 56);
    if (v72)
    {
      v73 = *(llvm::ValueSymbolTable **)(v72 + 104);
      if (v73)
        llvm::ValueSymbolTable::reinsertValue(v73, (llvm::Value *)v55);
    }
  }
  v57 = *v56;
  v55[4] = v56;
  v55[3] = v57;
  *(_QWORD *)(v57 + 8) = v55 + 3;
  *v56 = (uint64_t)(v55 + 3);
  v58 = (char *)operator new(0x60uLL);
  *((_QWORD *)v58 + 4) = v53;
  v59 = (llvm::Value *)(v58 + 32);
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 2) = 0;
  *((_QWORD *)v58 + 3) = v58 + 32;
  *((_QWORD *)v58 + 5) = 0;
  *((_QWORD *)v58 + 6) = 0x10000004DLL;
  *(_OWORD *)(v58 + 56) = 0u;
  *(_OWORD *)(v58 + 72) = 0u;
  *((_DWORD *)v58 + 22) = 0;
  *(_QWORD *)v58 = v55;
  v60 = v55 + 1;
  v61 = v55[1];
  *((_QWORD *)v58 + 1) = v61;
  if (v61)
    *(_QWORD *)(v61 + 16) = v58 + 8;
  *((_QWORD *)v58 + 2) = v60;
  *v60 = v58;
LABEL_70:
  v67 = v55;
  llvm::Value::setName((uint64_t ***)v59, a10);
  v55 = v59;
LABEL_72:
  v68 = *((_WORD *)v67 + 9) & 0xFFFC | 1;
  *((_WORD *)v67 + 9) = v68;
  if (!*(_BYTE *)(v16 + 16))
  {
    if (v16)
    {
      v69 = *(_QWORD *)(v16 + 112);
      *((_WORD *)v67 + 9) = (*(_WORD *)(v16 + 18) >> 2) & 0xFFC | v68 & 0xF001;
      if (!v69 || *(_DWORD *)(v69 + 8) < 2u || (v74 = *(_QWORD *)(v69 + 48)) == 0 || (*(_BYTE *)(v74 + 14) & 8) == 0)
        *(_QWORD *)(v16 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v16 + 112), **(uint64_t ***)v16, 0, 19);
    }
  }
  return v55;
}

_QWORD *llvm::CallInst::CreateMalloc(uint64_t a1, llvm::Type ***this, llvm::PointerType *a3, uint64_t a4, llvm::ConstantInt **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1C53E59EC(a1, 0, this, a3, a4, a5, a6, a7, a8, a9);
}

{
  return sub_1C53E59EC(0, a1, this, a3, a4, a5, a6, a7, a8, a9);
}

_QWORD *llvm::CallInst::CreateMalloc(uint64_t a1, llvm::Type ***this, llvm::PointerType *a3, uint64_t a4, llvm::ConstantInt **a5, uint64_t a6, uint64_t a7)
{
  return sub_1C53E59EC(0, a1, this, a3, a4, a5, 0, 0, a6, a7);
}

uint64_t llvm::CallInst::CreateFree(llvm::CallInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  return sub_1C53E61FC(this, 0, 0, (uint64_t)a2, 0);
}

uint64_t sub_1C53E61FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  llvm::PointerType *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  llvm::Value *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t ***v34;
  uint64_t result;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  llvm::ValueSymbolTable *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];
  __int16 v44;
  _QWORD *v45;

  v10 = a5;
  if (a4)
    v10 = *(_QWORD *)(a4 + 40);
  v11 = *(uint64_t ***)(*(_QWORD *)(v10 + 56) + 40);
  v12 = **v11;
  v13 = (uint64_t **)(v12 + 1576);
  v14 = llvm::PointerType::get((llvm::PointerType *)(v12 + 1912), 0);
  v15 = sub_1C6212CB8((uint64_t)v11, "free", 4uLL, 0, v13, v14);
  v17 = v16;
  v45 = a1;
  if (a4)
  {
    if (*a1 != v14)
    {
      v18 = (char *)operator new(0x60uLL);
      v19 = (llvm::Value *)(v18 + 32);
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = v18 + 32;
      v44 = 257;
      *((_QWORD *)v18 + 4) = v14;
      *((_QWORD *)v18 + 5) = 0;
      *((_QWORD *)v18 + 6) = 0x10000004DLL;
      *(_OWORD *)(v18 + 56) = 0u;
      v20 = v18 + 56;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_DWORD *)v18 + 22) = 0;
      v21 = *(_QWORD *)(a4 + 40);
      v22 = (uint64_t *)(a4 + 24);
      *((_QWORD *)v18 + 9) = v21;
      *(_WORD *)(v21 + 18) &= ~0x8000u;
      if ((v18[55] & 0x10) != 0
        && (v38 = *(_QWORD *)(v21 + 56)) != 0
        && (v39 = *(llvm::ValueSymbolTable **)(v38 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v39, v19);
        v40 = *(_QWORD *)v18;
        v41 = *v22;
        *((_QWORD *)v18 + 7) = *v22;
        *((_QWORD *)v18 + 8) = v22;
        *(_QWORD *)(v41 + 8) = v20;
        *v22 = (uint64_t)v20;
        if (v40)
        {
          **((_QWORD **)v18 + 2) = *((_QWORD *)v18 + 1);
          v42 = *((_QWORD *)v18 + 1);
          if (v42)
            *(_QWORD *)(v42 + 16) = *((_QWORD *)v18 + 2);
        }
      }
      else
      {
        v23 = *v22;
        *((_QWORD *)v18 + 7) = *v22;
        *((_QWORD *)v18 + 8) = v22;
        *(_QWORD *)(v23 + 8) = v20;
        *v22 = (uint64_t)v20;
      }
      *(_QWORD *)v18 = a1;
      v26 = a1[1];
      v25 = a1 + 1;
      v24 = v26;
      *((_QWORD *)v18 + 1) = v26;
      if (v26)
        *(_QWORD *)(v24 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v25;
      *v25 = v18;
      llvm::Value::setName((uint64_t ***)v19, (uint64_t)v43);
      v45 = v18 + 32;
    }
    v44 = 257;
    v27 = (uint64_t **)v15;
    v28 = v17;
    v29 = a2;
    v30 = a3;
    v31 = a4;
  }
  else
  {
    if (*a1 != v14)
    {
      v32 = operator new(0x60uLL);
      v32[13] = v32[13] & 0x38000000 | 1;
      v33 = (uint64_t)(v32 + 8);
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 3) = v32 + 8;
      v44 = 257;
      v34 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v32 + 8), v14, 49, (uint64_t)a1, a5);
      llvm::Value::setName(v34, (uint64_t)v43);
      v45 = (_QWORD *)v33;
    }
    v44 = 257;
    v27 = (uint64_t **)v15;
    v28 = v17;
    v29 = a2;
    v30 = a3;
    v31 = 0;
  }
  result = sub_1C53DAB90(v27, v28, (uint64_t *)&v45, 1, v29, v30, (uint64_t)v43, v31);
  v36 = *(_WORD *)(result + 18) & 0xFFFC | 1;
  *(_WORD *)(result + 18) = v36;
  if (*(_BYTE *)(v17 + 16))
    v37 = 1;
  else
    v37 = v17 == 0;
  if (!v37)
    *(_WORD *)(result + 18) = (*(_WORD *)(v17 + 18) >> 2) & 0xFFC | v36 & 0xF001;
  return result;
}

uint64_t llvm::CallInst::CreateFree(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C53E61FC(a1, a2, a3, a4, 0);
}

{
  return sub_1C53E61FC(a1, a2, a3, 0, a4);
}

uint64_t llvm::CallInst::CreateFree(llvm::CallInst *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  return sub_1C53E61FC(this, 0, 0, 0, (uint64_t)a2);
}

uint64_t llvm::ReturnInst::ReturnInst(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  *(_QWORD *)result = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 29;
  *(_BYTE *)(result + 17) = 0;
  *(_WORD *)(result + 18) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | v2;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 0;
  v3 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v3)
  {
    v4 = -v2;
    v5 = result - 32 * v2;
    v6 = *(_QWORD *)(a2 - 32 * v3);
    if (*(_QWORD *)v5)
    {
      **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
      v11 = *(_QWORD *)(v5 + 8);
      if (v11)
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)v5 = v6;
    if (v6)
    {
      v9 = *(_QWORD *)(v6 + 8);
      v7 = (_QWORD *)(v6 + 8);
      v8 = v9;
      v10 = result + 32 * v4;
      *(_QWORD *)(v10 + 8) = v9;
      if (v9)
        *(_QWORD *)(v8 + 16) = v10 + 8;
      *(_QWORD *)(v10 + 16) = v7;
      *v7 = v5;
    }
  }
  *(_BYTE *)(result + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(result + 17) & 1;
  return result;
}

llvm::ReturnInst *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  unsigned int v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ValueSymbolTable *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v6 = *((_DWORD *)this + 5) & 0xC0000000 | (a3 != 0);
  *((_DWORD *)this + 4) = 29;
  *((_DWORD *)this + 5) = v6;
  *(_OWORD *)((char *)this + 24) = 0u;
  v7 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a4)
  {
    v16 = *((_QWORD *)a4 + 5);
    v17 = (uint64_t *)((char *)a4 + 24);
    *((_QWORD *)this + 5) = v16;
    *(_WORD *)(v16 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56);
      if (v19)
      {
        v20 = *(llvm::ValueSymbolTable **)(v19 + 104);
        if (v20)
          llvm::ValueSymbolTable::reinsertValue(v20, this);
      }
    }
    v18 = *v17;
    *((_QWORD *)this + 3) = *v17;
    *((_QWORD *)this + 4) = v17;
    *(_QWORD *)(v18 + 8) = v7;
    *v17 = (uint64_t)v7;
  }
  if (a3)
  {
    v9 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    v10 = -v9;
    v11 = (_QWORD *)((char *)this - 32 * v9);
    if (*v11)
    {
      v21 = (char *)this + 32 * v10;
      v23 = (_QWORD *)*((_QWORD *)v21 + 2);
      v22 = v21 + 16;
      *v23 = *(v22 - 1);
      v24 = *(v22 - 1);
      if (v24)
        *(_QWORD *)(v24 + 16) = *v22;
    }
    *v11 = a3;
    v14 = *((_QWORD *)a3 + 1);
    v13 = (_QWORD *)((char *)a3 + 8);
    v12 = v14;
    v15 = (char *)this + 32 * v10;
    *((_QWORD *)v15 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v15 + 8;
    *((_QWORD *)v15 + 2) = v13;
    *v13 = v11;
  }
  return this;
}

llvm::ReturnInst *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  unsigned int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 29;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v10 = *((_QWORD *)a3 + 7);
    if (v10)
    {
      v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11)
        llvm::ValueSymbolTable::reinsertValue(v11, this);
    }
  }
  v8 = *((_QWORD *)a3 + 5);
  v7 = (_QWORD *)((char *)a3 + 40);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v7;
  *(_QWORD *)(v8 + 8) = v6;
  *v7 = v6;
  return this;
}

uint64_t llvm::CleanupReturnInst::init(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a3)
  {
    *(_WORD *)(result + 18) |= 1u;
    v3 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v4 = -v3;
    v5 = (_QWORD *)(result - 32 * v3);
    if (*v5)
    {
      v6 = result + 32 * v4;
      v8 = *(_QWORD **)(v6 + 16);
      v7 = (_QWORD *)(v6 + 16);
      *v8 = *(v7 - 1);
      v9 = *(v7 - 1);
      if (v9)
        *(_QWORD *)(v9 + 16) = *v7;
    }
    *v5 = a2;
    if (a2)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v10 = (_QWORD *)(a2 + 8);
      v11 = v12;
      v13 = result + 32 * v4;
      *(_QWORD *)(v13 + 8) = v12;
      if (v12)
        *(_QWORD *)(v11 + 16) = v13 + 8;
      *(_QWORD *)(v13 + 16) = v10;
      *v10 = v5;
    }
    v14 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    if (*(_QWORD *)(v14 + 32))
    {
      **(_QWORD **)(v14 + 48) = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 40);
      if (v15)
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 48);
    }
    *(_QWORD *)(v14 + 32) = a3;
    v18 = *(_QWORD *)(a3 + 8);
    v16 = (_QWORD *)(a3 + 8);
    v17 = v18;
    *(_QWORD *)(v14 + 40) = v18;
    if (v18)
      *(_QWORD *)(v17 + 16) = v14 + 40;
    *(_QWORD *)(v14 + 48) = v16;
    *v16 = v14 + 32;
  }
  else
  {
    v19 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v20 = -v19;
    v21 = (_QWORD *)(result - 32 * v19);
    if (*v21)
    {
      v22 = result + 32 * v20;
      v24 = *(_QWORD **)(v22 + 16);
      v23 = (_QWORD *)(v22 + 16);
      *v24 = *(v23 - 1);
      v25 = *(v23 - 1);
      if (v25)
        *(_QWORD *)(v25 + 16) = *v23;
    }
    *v21 = a2;
    if (a2)
    {
      v28 = *(_QWORD *)(a2 + 8);
      v26 = (_QWORD *)(a2 + 8);
      v27 = v28;
      v29 = result + 32 * v20;
      *(_QWORD *)(v29 + 8) = v28;
      if (v28)
        *(_QWORD *)(v27 + 16) = v29 + 8;
      *(_QWORD *)(v29 + 16) = v26;
      *v26 = v21;
    }
  }
  return result;
}

llvm::CatchReturnInst *llvm::CatchReturnInst::CatchReturnInst(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = ***(_QWORD ***)a3 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 37;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a4;
  *((_WORD *)a4 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v12 = *((_QWORD *)a4 + 7);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, this);
    }
  }
  v10 = *((_QWORD *)a4 + 5);
  v9 = (_QWORD *)((char *)a4 + 40);
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v9;
  *(_QWORD *)(v10 + 8) = v8;
  *v9 = v8;
  llvm::CatchReturnInst::init((uint64_t)this, a2, a3);
  return this;
}

_QWORD *llvm::CatchSwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v8;
  _QWORD *result;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  *(_DWORD *)(a1 + 60) = a4;
  if (a3)
    v8 = 2;
  else
    v8 = 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | v8;
  result = operator new(32 * a4);
  *(_QWORD *)(a1 - 8) = result;
  if (a4)
  {
    v10 = result;
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = a1;
      v10 += 4;
    }
    while (v10 != &result[4 * a4]);
  }
  v11 = *(_DWORD *)(a1 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = result;
  else
    v12 = (_QWORD *)(a1 - 32 * (v11 & 0x7FFFFFF));
  if (*v12)
  {
    *(_QWORD *)v12[2] = v12[1];
    v13 = v12[1];
    if (v13)
      *(_QWORD *)(v13 + 16) = v12[2];
  }
  *v12 = a2;
  if (a2)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v15 = (_QWORD *)(a2 + 8);
    v14 = v16;
    v12[1] = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v12 + 1;
    v12[2] = v15;
    *v15 = v12;
  }
  if (a3)
  {
    *(_WORD *)(a1 + 18) |= 1u;
    v17 = *(_DWORD *)(a1 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(a1 - 8);
    else
      v18 = a1 - 32 * (v17 & 0x7FFFFFF);
    if (*(_QWORD *)(v18 + 32))
    {
      **(_QWORD **)(v18 + 48) = *(_QWORD *)(v18 + 40);
      v19 = *(_QWORD *)(v18 + 40);
      if (v19)
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 48);
    }
    *(_QWORD *)(v18 + 32) = a3;
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(v18 + 40) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v18 + 40;
    *(_QWORD *)(v18 + 48) = v21;
    *v21 = v18 + 32;
  }
  return result;
}

uint64_t llvm::CatchSwitchInst::CatchSwitchInst(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 38;
  *(_DWORD *)(a1 + 20) = v12;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_WORD *)(a6 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v18 = *(_QWORD *)(a6 + 56);
    if (v18)
    {
      v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
      if (v19)
        llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
    }
  }
  v15 = *(_QWORD *)(a6 + 40);
  v14 = (uint64_t *)(a6 + 40);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(v15 + 8) = v13;
  *v14 = v13;
  if (a3)
    v16 = a4 + 1;
  else
    v16 = a4;
  llvm::CatchSwitchInst::init(a1, (uint64_t)a2, a3, v16 + 1);
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

void llvm::CatchSwitchInst::growOperands(llvm::CatchSwitchInst *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 & 0x7FFFFFFu) + a2)
  {
    v5 = (a2 + 2 * (_DWORD)v3) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v5;
    if ((v2 & 0x40000000) != 0)
      v6 = (uint64_t *)*((_QWORD *)this - 1);
    else
      v6 = (uint64_t *)((char *)this - 32 * v3);
    v7 = operator new(32 * ((a2 + 2 * (_DWORD)v3) & 0xFFFFFFFE));
    *((_QWORD *)this - 1) = v7;
    if ((_DWORD)v5)
    {
      v8 = v7;
      do
      {
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = this;
        v8 += 4;
      }
      while (v8 != &v7[4 * v5]);
    }
    v9 = *((_DWORD *)this + 5);
    if ((v9 & 0x40000000) != 0)
      v10 = (char *)v7;
    else
      v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
    sub_1C53F5EAC((uint64_t)&v14, v6, &v6[4 * v3], (uint64_t)v10);
    if ((_DWORD)v3)
    {
      v11 = 4 * v3;
      do
      {
        v12 = &v6[v11];
        if (v6[v11 - 4])
        {
          *(_QWORD *)*(v12 - 2) = *(v12 - 3);
          v13 = *(v12 - 3);
          if (v13)
            *(_QWORD *)(v13 + 16) = *(v12 - 2);
        }
        v11 -= 4;
      }
      while (v11 * 8);
    }
    operator delete(v6);
  }
}

uint64_t llvm::FuncletPadInst::FuncletPadInst(uint64_t a1, char a2, _QWORD *a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;

  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v15 = *(_QWORD *)(a8 + 40);
    v16 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v13;
    *v16 = v13;
  }
  llvm::FuncletPadInst::init(a1, (uint64_t)a3, a4, a5, a7);
  return a1;
}

{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;

  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  v14 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v18 = *(_QWORD *)(a8 + 56);
    if (v18)
    {
      v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
      if (v19)
        llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
    }
  }
  v16 = *(_QWORD *)(a8 + 40);
  v15 = (uint64_t *)(a8 + 40);
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(v16 + 8) = v14;
  *v15 = v14;
  llvm::FuncletPadInst::init(a1, (uint64_t)a3, a4, a5, a7);
  return a1;
}

llvm::UnreachableInst *llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::Instruction *a3)
{
  unsigned int v4;
  char *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    v7 = *((_QWORD *)a3 + 5);
    v8 = (uint64_t *)((char *)a3 + 24);
    *((_QWORD *)this + 5) = v7;
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v10 = *(_QWORD *)(v7 + 56);
      if (v10)
      {
        v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
        if (v11)
          llvm::ValueSymbolTable::reinsertValue(v11, this);
      }
    }
    v9 = *v8;
    *((_QWORD *)this + 3) = *v8;
    *((_QWORD *)this + 4) = v8;
    *(_QWORD *)(v9 + 8) = v5;
    *v8 = (uint64_t)v5;
  }
  return this;
}

{
  unsigned int v4;
  char *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    v7 = *((_QWORD *)a3 + 5);
    v8 = (uint64_t *)((char *)a3 + 24);
    *((_QWORD *)this + 5) = v7;
    *(_WORD *)(v7 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v10 = *(_QWORD *)(v7 + 56);
      if (v10)
      {
        v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
        if (v11)
          llvm::ValueSymbolTable::reinsertValue(v11, this);
      }
    }
    v9 = *v8;
    *((_QWORD *)this + 3) = *v8;
    *((_QWORD *)this + 4) = v8;
    *(_QWORD *)(v9 + 8) = v5;
    *v8 = (uint64_t)v5;
  }
  return this;
}

llvm::UnreachableInst *llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::BasicBlock *a3)
{
  unsigned int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v10 = *((_QWORD *)a3 + 7);
    if (v10)
    {
      v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11)
        llvm::ValueSymbolTable::reinsertValue(v11, this);
    }
  }
  v8 = *((_QWORD *)a3 + 5);
  v7 = (_QWORD *)((char *)a3 + 40);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v7;
  *(_QWORD *)(v8 + 8) = v6;
  *v7 = v6;
  return this;
}

{
  unsigned int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  llvm::ValueSymbolTable *v11;

  *(_QWORD *)this = *(_QWORD *)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_DWORD *)this + 5) & 0xC0000000;
  *((_DWORD *)this + 4) = 35;
  *((_DWORD *)this + 5) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v10 = *((_QWORD *)a3 + 7);
    if (v10)
    {
      v11 = *(llvm::ValueSymbolTable **)(v10 + 104);
      if (v11)
        llvm::ValueSymbolTable::reinsertValue(v11, this);
    }
  }
  v8 = *((_QWORD *)a3 + 5);
  v7 = (_QWORD *)((char *)a3 + 40);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v7;
  *(_QWORD *)(v8 + 8) = v6;
  *v7 = v6;
  return this;
}

llvm::Instruction *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  char *v4;
  llvm::Instruction *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (char *)this - 32;
  result = llvm::Instruction::Instruction(this, (llvm::Type *)(***(_QWORD ***)a2 + 1576), 2, (llvm::BranchInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)result - 4))
  {
    **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
    v9 = *((_QWORD *)result - 3);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)result - 2);
  }
  *((_QWORD *)result - 4) = a2;
  v8 = *((_QWORD *)a2 + 1);
  v7 = (_QWORD *)((char *)a2 + 8);
  v6 = v8;
  *((_QWORD *)result - 3) = v8;
  if (v8)
    *(_QWORD *)(v6 + 16) = (char *)result - 24;
  *((_QWORD *)result - 2) = v7;
  *v7 = v4;
  return result;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;
  uint64_t v16;

  v5 = (_QWORD *)((char *)this - 32);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 30;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a3)
  {
    v11 = *((_QWORD *)a3 + 5);
    v12 = (uint64_t *)((char *)a3 + 24);
    *((_QWORD *)this + 5) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v14 = *(_QWORD *)(v11 + 56);
      if (v14)
      {
        v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15)
          llvm::ValueSymbolTable::reinsertValue(v15, this);
      }
    }
    v13 = *v12;
    *((_QWORD *)this + 3) = *v12;
    *((_QWORD *)this + 4) = v12;
    *(_QWORD *)(v13 + 8) = v6;
    *v12 = (uint64_t)v6;
  }
  if (*v5)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v16 = *((_QWORD *)this - 3);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v9 = *((_QWORD *)a2 + 1);
  v8 = (_QWORD *)((char *)a2 + 8);
  v7 = v9;
  *((_QWORD *)this - 3) = v9;
  if (v9)
    *(_QWORD *)(v7 + 16) = (char *)this - 24;
  *((_QWORD *)this - 2) = v8;
  *v8 = v5;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = (_QWORD *)((char *)this - 96);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 30;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *(_OWORD *)((char *)this + 24) = 0u;
  v10 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    v22 = *((_QWORD *)a5 + 5);
    v23 = (uint64_t *)((char *)a5 + 24);
    *((_QWORD *)this + 5) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v25 = *(_QWORD *)(v22 + 56);
      if (v25)
      {
        v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26)
          llvm::ValueSymbolTable::reinsertValue(v26, this);
      }
    }
    v24 = *v23;
    *((_QWORD *)this + 3) = *v23;
    *((_QWORD *)this + 4) = v23;
    *(_QWORD *)(v24 + 8) = v10;
    *v23 = (uint64_t)v10;
  }
  if (*v9)
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v27 = *((_QWORD *)this - 11);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 10);
  }
  *v9 = a4;
  if (a4)
  {
    v13 = *((_QWORD *)a4 + 1);
    v12 = (_QWORD *)((char *)a4 + 8);
    v11 = v13;
    *((_QWORD *)this - 11) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)this - 88;
    *((_QWORD *)this - 10) = v12;
    *v12 = v9;
  }
  v14 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v28 = *((_QWORD *)this - 7);
    if (v28)
      *(_QWORD *)(v28 + 16) = *((_QWORD *)this - 6);
  }
  *v14 = a3;
  if (a3)
  {
    v17 = *((_QWORD *)a3 + 1);
    v16 = (_QWORD *)((char *)a3 + 8);
    v15 = v17;
    *((_QWORD *)this - 7) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v16;
    *v16 = v14;
  }
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v29 = *((_QWORD *)this - 3);
    if (v29)
      *(_QWORD *)(v29 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v20 = *((_QWORD *)a2 + 1);
  v19 = (_QWORD *)((char *)a2 + 8);
  v18 = v20;
  *((_QWORD *)this - 3) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = (char *)this - 24;
  *((_QWORD *)this - 2) = v19;
  *v19 = (char *)this - 32;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  llvm::ValueSymbolTable *v14;
  uint64_t v15;

  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 30;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v13 = *((_QWORD *)a3 + 7);
    if (v13)
    {
      v14 = *(llvm::ValueSymbolTable **)(v13 + 104);
      if (v14)
        llvm::ValueSymbolTable::reinsertValue(v14, this);
    }
  }
  v8 = *((_QWORD *)a3 + 5);
  v7 = (_QWORD *)((char *)a3 + 40);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v7;
  *(_QWORD *)(v8 + 8) = v6;
  *v7 = v6;
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v15 = *((_QWORD *)this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v11 = *((_QWORD *)a2 + 1);
  v10 = (_QWORD *)((char *)a2 + 8);
  v9 = v11;
  *((_QWORD *)this - 3) = v11;
  if (v11)
    *(_QWORD *)(v9 + 16) = (char *)this - 24;
  *((_QWORD *)this - 2) = v10;
  *v10 = (char *)this - 32;
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::BasicBlock *a5)
{
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = (_QWORD *)((char *)this - 96);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 30;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *(_OWORD *)((char *)this + 24) = 0u;
  v11 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a5;
  *((_WORD *)a5 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v25 = *((_QWORD *)a5 + 7);
    if (v25)
    {
      v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
      if (v26)
        llvm::ValueSymbolTable::reinsertValue(v26, this);
    }
  }
  v13 = *((_QWORD *)a5 + 5);
  v12 = (_QWORD *)((char *)a5 + 40);
  *((_QWORD *)this + 3) = v13;
  *((_QWORD *)this + 4) = v12;
  *(_QWORD *)(v13 + 8) = v11;
  *v12 = v11;
  if (*((_QWORD *)this - 12))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v27 = *((_QWORD *)this - 11);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 10);
  }
  *v10 = a4;
  if (a4)
  {
    v16 = *((_QWORD *)a4 + 1);
    v15 = (_QWORD *)((char *)a4 + 8);
    v14 = v16;
    *((_QWORD *)this - 11) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = (char *)this - 88;
    *((_QWORD *)this - 10) = v15;
    *v15 = v10;
  }
  v17 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v28 = *((_QWORD *)this - 7);
    if (v28)
      *(_QWORD *)(v28 + 16) = *((_QWORD *)this - 6);
  }
  *v17 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)this - 7) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v19;
    *v19 = v17;
  }
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v29 = *((_QWORD *)this - 3);
    if (v29)
      *(_QWORD *)(v29 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v23 = *((_QWORD *)a2 + 1);
  v22 = (_QWORD *)((char *)a2 + 8);
  v21 = v23;
  *((_QWORD *)this - 3) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = (char *)this - 24;
  *((_QWORD *)this - 2) = v22;
  *v22 = (char *)this - 32;
  return this;
}

uint64_t llvm::BranchInst::BranchInst(uint64_t this, const llvm::BranchInst *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((_DWORD *)a2 + 5);
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 30;
  *(_BYTE *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xC0000000 | v2 & 0x7FFFFFF;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_DWORD *)(this + 56) = 0;
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 1)
  {
    v3 = (_QWORD *)(this - 96);
    v4 = *((_QWORD *)a2 - 12);
    if (*(_QWORD *)(this - 96))
    {
      **(_QWORD **)(this - 80) = *(_QWORD *)(this - 88);
      v19 = *(_QWORD *)(this - 88);
      if (v19)
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(this - 80);
    }
    *v3 = v4;
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 8);
      v5 = (_QWORD *)(v4 + 8);
      v6 = v7;
      *(_QWORD *)(this - 88) = v7;
      if (v7)
        *(_QWORD *)(v6 + 16) = this - 88;
      *(_QWORD *)(this - 80) = v5;
      *v5 = v3;
    }
    v8 = (_QWORD *)(this - 64);
    v9 = *((_QWORD *)a2 - 8);
    if (*(_QWORD *)(this - 64))
    {
      **(_QWORD **)(this - 48) = *(_QWORD *)(this - 56);
      v20 = *(_QWORD *)(this - 56);
      if (v20)
        *(_QWORD *)(v20 + 16) = *(_QWORD *)(this - 48);
    }
    *v8 = v9;
    if (v9)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v10 = (_QWORD *)(v9 + 8);
      v11 = v12;
      *(_QWORD *)(this - 56) = v12;
      if (v12)
        *(_QWORD *)(v11 + 16) = this - 56;
      *(_QWORD *)(this - 48) = v10;
      *v10 = v8;
    }
  }
  v13 = (_QWORD *)(this - 32);
  v14 = *((_QWORD *)a2 - 4);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v18 = *(_QWORD *)(this - 24);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(this - 16);
  }
  *v13 = v14;
  if (v14)
  {
    v17 = *(_QWORD *)(v14 + 8);
    v15 = (_QWORD *)(v14 + 8);
    v16 = v17;
    *(_QWORD *)(this - 24) = v17;
    if (v17)
      *(_QWORD *)(v16 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v15;
    *v15 = v13;
  }
  *(_BYTE *)(this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *(_BYTE *)(this + 17) & 1;
  return this;
}

void llvm::BranchInst::swapSuccessors(llvm::Instruction *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this - 4);
  v2 = *((_QWORD *)this - 8);
  if (v1 != v2)
  {
    v3 = (char *)this - 56;
    v4 = *((_QWORD *)this - 7);
    *((_QWORD *)v3 + 3) = v2;
    *((_QWORD *)this - 8) = v1;
    v5 = *(_OWORD *)((char *)this - 24);
    v6 = (_QWORD *)*((_QWORD *)this - 6);
    *((_QWORD *)this - 3) = v4;
    *((_QWORD *)v3 + 5) = v6;
    *(_OWORD *)v3 = v5;
    *v6 = (char *)this - 32;
    v7 = *((_QWORD *)this - 3);
    if (v7)
      *(_QWORD *)(v7 + 16) = (char *)this - 24;
    **((_QWORD **)this - 6) = (char *)this - 64;
    v8 = *((_QWORD *)this - 7);
    if (v8)
      *(_QWORD *)(v8 + 16) = v3;
  }
  llvm::Instruction::swapProfMetadata(this);
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, uint64_t a4, uint64_t a5)
{
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, 0, a4, a5);
}

{
  unsigned __int8 v10;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 40) + 272, (uint64_t)a2);
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, 0, v10, a4, a5);
}

{
  unsigned __int8 v10;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 40) + 272, (uint64_t)a2);
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, 0, v10, a4, a5);
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, llvm::ValueHandleBase *a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v12;
  unsigned __int8 v13;
  const llvm::APInt *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unint64_t v18;
  char v19;
  llvm::ValueHandleBase **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ValueHandleBase ***v27;
  uint64_t v28;
  uint64_t v30;
  llvm::ValueSymbolTable *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 40) + 56) + 40) + 272, (uint64_t)a2);
  v13 = v12;
  v15 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    v16 = **(_QWORD **)a2;
    v17 = *(llvm::ConstantInt **)(v16 + 1960);
    v18 = *(unsigned int *)(v16 + 1968);
    v34 = v18 >> 8;
    if (v18 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v33, 1, 0);
    }
    else
    {
      v19 = v18 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
      v33 = v19 & 1;
    }
    a4 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v33, v14);
    if (v34 >= 0x41)
    {
      if (v33)
        MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
  }
  v20 = (llvm::ValueHandleBase **)(a1 - 32);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 59;
  *(_DWORD *)(a1 + 20) = v21;
  *(_OWORD *)(a1 + 24) = 0u;
  v22 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v23 = *(_QWORD *)(a6 + 40);
  v24 = (uint64_t *)(a6 + 24);
  *(_QWORD *)(a1 + 40) = v23;
  *(_WORD *)(v23 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v30 = *(_QWORD *)(v23 + 56);
    if (v30)
    {
      v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
      if (v31)
        llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)a1);
    }
  }
  v25 = *v24;
  *(_QWORD *)(a1 + 24) = *v24;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(v25 + 8) = v22;
  *v24 = v22;
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v32 = *(_QWORD *)(a1 - 24);
    if (v32)
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v20 = a4;
  if (a4)
  {
    v28 = *((_QWORD *)a4 + 1);
    v27 = (llvm::ValueHandleBase ***)((char *)a4 + 8);
    v26 = v28;
    *(_QWORD *)(a1 - 24) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v27;
    *v27 = v20;
  }
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | v13;
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

{
  unsigned __int8 v12;
  unsigned __int8 v13;
  const llvm::APInt *v14;
  uint64_t v15;
  llvm::ValueHandleBase **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueHandleBase ***v23;
  uint64_t v24;
  uint64_t v26;
  llvm::ConstantInt *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  llvm::ValueSymbolTable *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 40) + 56) + 40) + 272, (uint64_t)a2);
  v13 = v12;
  v15 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    v26 = **(_QWORD **)a2;
    v27 = *(llvm::ConstantInt **)(v26 + 1960);
    v28 = *(unsigned int *)(v26 + 1968);
    v34 = v28 >> 8;
    if (v28 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v33, 1, 0);
    }
    else
    {
      v29 = v28 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v28);
      v33 = v29 & 1;
    }
    a4 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v33, v14);
    if (v34 >= 0x41)
    {
      if (v33)
        MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
  }
  v16 = (llvm::ValueHandleBase **)(a1 - 32);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 59;
  *(_DWORD *)(a1 + 20) = v17;
  *(_OWORD *)(a1 + 24) = 0u;
  v18 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = (uint64_t *)(a6 + 24);
  *(_QWORD *)(a1 + 40) = v19;
  *(_WORD *)(v19 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v30 = *(_QWORD *)(v19 + 56);
    if (v30)
    {
      v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
      if (v31)
        llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)a1);
    }
  }
  v21 = *v20;
  *(_QWORD *)(a1 + 24) = *v20;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(v21 + 8) = v18;
  *v20 = v18;
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v32 = *(_QWORD *)(a1 - 24);
    if (v32)
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a4;
  if (a4)
  {
    v24 = *((_QWORD *)a4 + 1);
    v23 = (llvm::ValueHandleBase ***)((char *)a4 + 8);
    v22 = v24;
    *(_QWORD *)(a1 - 24) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v23;
    *v23 = v16;
  }
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | v13;
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

{
  unsigned __int8 v12;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a6 + 56) + 40) + 272, (uint64_t)a2);
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, a4, v12, a5, a6);
}

{
  unsigned __int8 v12;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a6 + 56) + 40) + 272, (uint64_t)a2);
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, a4, v12, a5, a6);
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, llvm::ValueHandleBase *a4, unsigned __int8 a5, uint64_t a6, llvm::Instruction *a7)
{
  llvm::Type *v13;
  llvm::ValueHandleBase **v14;
  uint64_t v15;
  llvm::ValueHandleBase ***v16;
  uint64_t v17;
  uint64_t v19;

  v13 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  if (!a4)
    a4 = llvm::ConstantInt::get((llvm::ConstantInt **)(**(_QWORD **)a2 + 1960), 1, 0);
  v14 = (llvm::ValueHandleBase **)(a1 - 32);
  llvm::Instruction::Instruction((llvm::Instruction *)a1, v13, 31, (llvm::Use *)(a1 - 32), 1, a7);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v19 = *(_QWORD *)(a1 - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a4;
  if (a4)
  {
    v17 = *((_QWORD *)a4 + 1);
    v16 = (llvm::ValueHandleBase ***)((char *)a4 + 8);
    v15 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v14;
  }
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, llvm::ValueHandleBase *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  const llvm::APInt *v13;
  uint64_t v14;
  llvm::ValueHandleBase **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueHandleBase ***v19;
  uint64_t v20;
  uint64_t v22;
  llvm::ConstantInt *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  v14 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    v22 = **(_QWORD **)a2;
    v23 = *(llvm::ConstantInt **)(v22 + 1960);
    v24 = *(unsigned int *)(v22 + 1968);
    v33 = v24 >> 8;
    if (v24 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 1, 0);
    }
    else
    {
      v25 = v24 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v24);
      v32 = v25 & 1;
    }
    a4 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v32, v13);
    if (v33 >= 0x41)
    {
      if (v32)
        MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
    }
  }
  v15 = (llvm::ValueHandleBase **)(a1 - 32);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 59;
  *(_DWORD *)(a1 + 20) = v16;
  *(_OWORD *)(a1 + 24) = 0u;
  v17 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a7)
  {
    v26 = *(_QWORD *)(a7 + 40);
    v27 = (uint64_t *)(a7 + 24);
    *(_QWORD *)(a1 + 40) = v26;
    *(_WORD *)(v26 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v29 = *(_QWORD *)(v26 + 56);
      if (v29)
      {
        v30 = *(llvm::ValueSymbolTable **)(v29 + 104);
        if (v30)
          llvm::ValueSymbolTable::reinsertValue(v30, (llvm::Value *)a1);
      }
    }
    v28 = *v27;
    *(_QWORD *)(a1 + 24) = *v27;
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(v28 + 8) = v17;
    *v27 = v17;
  }
  if (*v15)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v31 = *(_QWORD *)(a1 - 24);
    if (v31)
      *(_QWORD *)(v31 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v15 = a4;
  if (a4)
  {
    v20 = *((_QWORD *)a4 + 1);
    v19 = (llvm::ValueHandleBase ***)((char *)a4 + 8);
    v18 = v20;
    *(_QWORD *)(a1 - 24) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v19;
    *v19 = v15;
  }
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

{
  const llvm::APInt *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unint64_t v17;
  char v18;
  uint64_t ***v19;
  llvm::ConstantInt *v21;
  uint64_t v22;
  unsigned int v23;

  v14 = llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    v15 = **(_QWORD **)a2;
    v16 = *(llvm::ConstantInt **)(v15 + 1960);
    v17 = *(unsigned int *)(v15 + 1968);
    v23 = v17 >> 8;
    if (v17 >> 8 > 0x40)
    {
      v21 = v16;
      llvm::APInt::initSlowCase((llvm::APInt *)&v22, 1, 0);
      v16 = v21;
    }
    else
    {
      if (v17 <= 0xFF)
        v18 = 0;
      else
        v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
      v22 = v18 & 1;
    }
    a4 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v22, v13);
    if (v23 >= 0x41 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  }
  v19 = (uint64_t ***)sub_1C53E82F0(a1, v14, 31, (uint64_t)a4, a7);
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName(v19, a6);
  return a1;
}

{
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1C53E82F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  llvm::ValueSymbolTable *v17;
  uint64_t v18;

  v8 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v16 = *(_QWORD *)(a5 + 56);
    if (v16)
    {
      v17 = *(llvm::ValueSymbolTable **)(v16 + 104);
      if (v17)
        llvm::ValueSymbolTable::reinsertValue(v17, (llvm::Value *)a1);
    }
  }
  v11 = *(_QWORD *)(a5 + 40);
  v10 = (_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(v11 + 8) = v9;
  *v10 = v9;
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v18 = *(_QWORD *)(a1 - 24);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v8 = a4;
  if (a4)
  {
    v14 = *(_QWORD *)(a4 + 8);
    v13 = (_QWORD *)(a4 + 8);
    v12 = v14;
    *(_QWORD *)(a1 - 24) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v13;
    *v13 = v8;
  }
  return a1;
}

BOOL llvm::AllocaInst::isStaticAlloca(llvm::AllocaInst *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) == 16
    && ((v1 = *((_QWORD *)this + 5), (v2 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 80)) != 0) ? (v3 = v2 - 24) : (v3 = 0),
        v1 == v3))
  {
    return (*((_WORD *)this + 9) & 0x40) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return llvm::LoadInst::LoadInst(a1, a2, a3, a4, 0, a5);
}

{
  return llvm::LoadInst::LoadInst(a1, a2, a3, a4, 0, a5);
}

{
  return llvm::LoadInst::LoadInst(a1, a2, a3, a4, 0, a5);
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  char v12;
  char v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 40) + 56) + 40) + 272, a2);
  v13 = v12;
  v14 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v15;
  *(_OWORD *)(a1 + 24) = 0u;
  v16 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = (uint64_t *)(a6 + 24);
  *(_QWORD *)(a1 + 40) = v17;
  *(_WORD *)(v17 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v24 = *(_QWORD *)(v17 + 56);
    if (v24)
    {
      v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
      if (v25)
        llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
    }
  }
  v19 = *v18;
  *(_QWORD *)(a1 + 24) = *v18;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(v19 + 8) = v16;
  *v18 = v16;
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v26 = *(_QWORD *)(a1 - 24);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v21;
    *v21 = v14;
  }
  *(_WORD *)(a1 + 18) = a5 & 0xFF81 | (2 * (v13 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  char v12;
  char v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 40) + 56) + 40) + 272, a2);
  v13 = v12;
  v14 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v15;
  *(_OWORD *)(a1 + 24) = 0u;
  v16 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = (uint64_t *)(a6 + 24);
  *(_QWORD *)(a1 + 40) = v17;
  *(_WORD *)(v17 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v24 = *(_QWORD *)(v17 + 56);
    if (v24)
    {
      v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
      if (v25)
        llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
    }
  }
  v19 = *v18;
  *(_QWORD *)(a1 + 24) = *v18;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(v19 + 8) = v16;
  *v18 = v16;
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v26 = *(_QWORD *)(a1 - 24);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v21;
    *v21 = v14;
  }
  *(_WORD *)(a1 + 18) = a5 & 0xFF81 | (2 * (v13 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  char v12;
  char v13;
  uint64_t ***v14;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a6 + 56) + 40) + 272, a2);
  v13 = v12;
  v14 = (uint64_t ***)sub_1C53E82F0(a1, a2, 32, a3, a6);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (v13 & 0x3F));
  *(_BYTE *)(a1 + 60) = 1;
  llvm::Value::setName(v14, a4);
  return a1;
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t v24;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v12;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  v14 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a7)
  {
    v19 = *(_QWORD *)(a7 + 40);
    v20 = (uint64_t *)(a7 + 24);
    *(_QWORD *)(a1 + 40) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v22 = *(_QWORD *)(v19 + 56);
      if (v22)
      {
        v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
        if (v23)
          llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)a1);
      }
    }
    v21 = *v20;
    *(_QWORD *)(a1 + 24) = *v20;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(v21 + 8) = v13;
    *v20 = v13;
  }
  if (*v14)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v24 = *(_QWORD *)(a1 - 24);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v16 = (_QWORD *)(a3 + 8);
    v15 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v14;
  }
  *(_WORD *)(a1 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t v24;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v12;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  v14 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a7)
  {
    v19 = *(_QWORD *)(a7 + 40);
    v20 = (uint64_t *)(a7 + 24);
    *(_QWORD *)(a1 + 40) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v22 = *(_QWORD *)(v19 + 56);
      if (v22)
      {
        v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
        if (v23)
          llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)a1);
      }
    }
    v21 = *v20;
    *(_QWORD *)(a1 + 24) = *v20;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(v21 + 8) = v13;
    *v20 = v13;
  }
  if (*v14)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v24 = *(_QWORD *)(a1 - 24);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v16 = (_QWORD *)(a3 + 8);
    v15 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v14;
  }
  *(_WORD *)(a1 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t v11;

  v11 = sub_1C53E82F0(a1, a2, 32, a3, a7);
  *(_WORD *)(v11 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(v11 + 18) & 0xFC00;
  *(_BYTE *)(v11 + 60) = 1;
  llvm::Value::setName((uint64_t ***)v11, a4);
  return a1;
}

{
  uint64_t v11;

  v11 = sub_1C53E82F0(a1, a2, 32, a3, a7);
  *(_WORD *)(v11 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(v11 + 18) & 0xFC00;
  *(_BYTE *)(v11 + 60) = 1;
  llvm::Value::setName((uint64_t ***)v11, a4);
  return a1;
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6, __int16 a7, char a8, uint64_t a9)
{
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  uint64_t v28;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v16;
  *(_OWORD *)(a1 + 24) = 0u;
  v17 = a1 + 24;
  v18 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a9)
  {
    v23 = *(_QWORD *)(a9 + 40);
    v24 = (uint64_t *)(a9 + 24);
    *(_QWORD *)(a1 + 40) = v23;
    *(_WORD *)(v23 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v26 = *(_QWORD *)(v23 + 56);
      if (v26)
      {
        v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27)
          llvm::ValueSymbolTable::reinsertValue(v27, (llvm::Value *)a1);
      }
    }
    v25 = *v24;
    *(_QWORD *)(a1 + 24) = *v24;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(v25 + 8) = v17;
    *v24 = v17;
  }
  if (*v18)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v28 = *(_QWORD *)(a1 - 24);
    if (v28)
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v18 = a3;
  if (a3)
  {
    v21 = *(_QWORD *)(a3 + 8);
    v20 = (_QWORD *)(a3 + 8);
    v19 = v21;
    *(_QWORD *)(a1 - 24) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v20;
    *v20 = v18;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(a1 + 60) = a8;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  uint64_t v28;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 60;
  *(_DWORD *)(a1 + 20) = v16;
  *(_OWORD *)(a1 + 24) = 0u;
  v17 = a1 + 24;
  v18 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a9)
  {
    v23 = *(_QWORD *)(a9 + 40);
    v24 = (uint64_t *)(a9 + 24);
    *(_QWORD *)(a1 + 40) = v23;
    *(_WORD *)(v23 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v26 = *(_QWORD *)(v23 + 56);
      if (v26)
      {
        v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
        if (v27)
          llvm::ValueSymbolTable::reinsertValue(v27, (llvm::Value *)a1);
      }
    }
    v25 = *v24;
    *(_QWORD *)(a1 + 24) = *v24;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(v25 + 8) = v17;
    *v24 = v17;
  }
  if (*v18)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v28 = *(_QWORD *)(a1 - 24);
    if (v28)
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v18 = a3;
  if (a3)
  {
    v21 = *(_QWORD *)(a3 + 8);
    v20 = (_QWORD *)(a3 + 8);
    v19 = v21;
    *(_QWORD *)(a1 - 24) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v20;
    *v20 = v18;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(a1 + 60) = a8;
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t v15;

  v15 = sub_1C53E82F0(a1, a2, 32, a3, a9);
  *(_WORD *)(v15 + 18) = *(_WORD *)(v15 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(v15 + 60) = a8;
  llvm::Value::setName((uint64_t ***)v15, a4);
  return a1;
}

{
  uint64_t v15;

  v15 = sub_1C53E82F0(a1, a2, 32, a3, a9);
  *(_WORD *)(v15 + 18) = *(_WORD *)(v15 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(v15 + 60) = a8;
  llvm::Value::setName((uint64_t ***)v15, a4);
  return a1;
}

llvm::StoreInst *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

llvm::StoreInst *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Value *a2, llvm::Value *a3, __int16 a4, llvm::Instruction *a5)
{
  char v10;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 5) + 56) + 40) + 272, *(_QWORD *)a2);
  v11 = v10;
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 61;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  v12 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v13 = *((_QWORD *)a5 + 5);
  v14 = (uint64_t *)((char *)a5 + 24);
  *((_QWORD *)this + 5) = v13;
  *(_WORD *)(v13 + 18) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v24 = *(_QWORD *)(v13 + 56);
    if (v24)
    {
      v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
      if (v25)
        llvm::ValueSymbolTable::reinsertValue(v25, this);
    }
  }
  v15 = *v14;
  *((_QWORD *)this + 3) = *v14;
  *((_QWORD *)this + 4) = v14;
  *(_QWORD *)(v15 + 8) = v12;
  *v14 = (uint64_t)v12;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v26 = *((_QWORD *)this - 7);
    if (v26)
      *(_QWORD *)(v26 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v18 = *((_QWORD *)a2 + 1);
  v17 = (_QWORD *)((char *)a2 + 8);
  v16 = v18;
  *((_QWORD *)this - 7) = v18;
  if (v18)
    *(_QWORD *)(v16 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v17;
  *v17 = (char *)this - 64;
  v19 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v27 = *((_QWORD *)this - 3);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 2);
  }
  *v19 = a3;
  if (a3)
  {
    v22 = *((_QWORD *)a3 + 1);
    v21 = (_QWORD *)((char *)a3 + 8);
    v20 = v22;
    *((_QWORD *)this - 3) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v21;
    *v21 = v19;
  }
  *((_WORD *)this + 9) = a4 & 0xFF81 | (2 * (v11 & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((_BYTE *)this + 60) = 1;
  return this;
}

{
  char v10;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 5) + 56) + 40) + 272, *(_QWORD *)a2);
  v11 = v10;
  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 61;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *(_OWORD *)((char *)this + 24) = 0u;
  v12 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v13 = *((_QWORD *)a5 + 5);
  v14 = (uint64_t *)((char *)a5 + 24);
  *((_QWORD *)this + 5) = v13;
  *(_WORD *)(v13 + 18) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v24 = *(_QWORD *)(v13 + 56);
    if (v24)
    {
      v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
      if (v25)
        llvm::ValueSymbolTable::reinsertValue(v25, this);
    }
  }
  v15 = *v14;
  *((_QWORD *)this + 3) = *v14;
  *((_QWORD *)this + 4) = v14;
  *(_QWORD *)(v15 + 8) = v12;
  *v14 = (uint64_t)v12;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v26 = *((_QWORD *)this - 7);
    if (v26)
      *(_QWORD *)(v26 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v18 = *((_QWORD *)a2 + 1);
  v17 = (_QWORD *)((char *)a2 + 8);
  v16 = v18;
  *((_QWORD *)this - 7) = v18;
  if (v18)
    *(_QWORD *)(v16 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v17;
  *v17 = (char *)this - 64;
  v19 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v27 = *((_QWORD *)this - 3);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 2);
  }
  *v19 = a3;
  if (a3)
  {
    v22 = *((_QWORD *)a3 + 1);
    v21 = (_QWORD *)((char *)a3 + 8);
    v20 = v22;
    *((_QWORD *)this - 3) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v21;
    *v21 = v19;
  }
  *((_WORD *)this + 9) = a4 & 0xFF81 | (2 * (v11 & 0x3F)) | *((_WORD *)this + 9) & 0xFC00;
  *((_BYTE *)this + 60) = 1;
  return this;
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Value *a2, llvm::Value *a3, llvm::BasicBlock *a4)
{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

{
  return llvm::StoreInst::StoreInst(this, a2, a3, 0, a4);
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::StoreInst *this, llvm::Value *a2, llvm::Value *a3, __int16 a4, llvm::BasicBlock *a5)
{
  char v10;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)a5 + 7) + 40) + 272, *(_QWORD *)a2);
  return llvm::StoreInst::StoreInst(this, a2, (uint64_t)a3, a4, v10, 0, 1, a5);
}

{
  char v10;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)a5 + 7) + 40) + 272, *(_QWORD *)a2);
  return llvm::StoreInst::StoreInst(this, a2, (uint64_t)a3, a4, v10, 0, 1, a5);
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  v11 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 61;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    v21 = *(_QWORD *)(a6 + 40);
    v22 = (uint64_t *)(a6 + 24);
    *(_QWORD *)(a1 + 40) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v24 = *(_QWORD *)(v21 + 56);
      if (v24)
      {
        v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25)
          llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
      }
    }
    v23 = *v22;
    *(_QWORD *)(a1 + 24) = *v22;
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(v23 + 8) = v12;
    *v22 = v12;
  }
  if (*v11)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v26 = *(_QWORD *)(a1 - 56);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v15 = *(_QWORD *)(a2 + 8);
  v14 = (_QWORD *)(a2 + 8);
  v13 = v15;
  *(_QWORD *)(a1 - 56) = v15;
  if (v15)
    *(_QWORD *)(v13 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v14;
  *v14 = v11;
  v16 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v27 = *(_QWORD *)(a1 - 24);
    if (v27)
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v18;
    *v18 = v16;
  }
  *(_WORD *)(a1 + 18) = a4 & 0xFF81 | (2 * (a5 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  return a1;
}

{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  v11 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 61;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    v21 = *(_QWORD *)(a6 + 40);
    v22 = (uint64_t *)(a6 + 24);
    *(_QWORD *)(a1 + 40) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v24 = *(_QWORD *)(v21 + 56);
      if (v24)
      {
        v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25)
          llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
      }
    }
    v23 = *v22;
    *(_QWORD *)(a1 + 24) = *v22;
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(v23 + 8) = v12;
    *v22 = v12;
  }
  if (*v11)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v26 = *(_QWORD *)(a1 - 56);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v15 = *(_QWORD *)(a2 + 8);
  v14 = (_QWORD *)(a2 + 8);
  v13 = v15;
  *(_QWORD *)(a1 - 56) = v15;
  if (v15)
    *(_QWORD *)(v13 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v14;
  *v14 = v11;
  v16 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v27 = *(_QWORD *)(a1 - 24);
    if (v27)
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v18;
    *v18 = v16;
  }
  *(_WORD *)(a1 + 18) = a4 & 0xFF81 | (2 * (a5 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 60) = 1;
  return a1;
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::Instruction *a1, _QWORD *a2, uint64_t a3, __int16 a4, char a5, llvm::BasicBlock *a6)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, 0, 1, a6);
}

{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, 0, 1, a6);
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, uint64_t a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ValueSymbolTable *v29;
  uint64_t v30;
  uint64_t v31;

  v15 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = ***(_QWORD ***)a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 61;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v16 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v25 = *(_QWORD *)(a8 + 40);
    v26 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v25;
    *(_WORD *)(v25 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v28 = *(_QWORD *)(v25 + 56);
      if (v28)
      {
        v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
        if (v29)
          llvm::ValueSymbolTable::reinsertValue(v29, (llvm::Value *)a1);
      }
    }
    v27 = *v26;
    *(_QWORD *)(a1 + 24) = *v26;
    *(_QWORD *)(a1 + 32) = v26;
    *(_QWORD *)(v27 + 8) = v16;
    *v26 = v16;
  }
  if (*v15)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v30 = *(_QWORD *)(a1 - 56);
    if (v30)
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = (_QWORD *)(a2 + 8);
  v17 = v19;
  *(_QWORD *)(a1 - 56) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v18;
  *v18 = v15;
  v20 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v31 = *(_QWORD *)(a1 - 24);
    if (v31)
      *(_QWORD *)(v31 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v20 = a3;
  if (a3)
  {
    v23 = *(_QWORD *)(a3 + 8);
    v22 = (_QWORD *)(a3 + 8);
    v21 = v23;
    *(_QWORD *)(a1 - 24) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v22;
    *v22 = v20;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *(_BYTE *)(a1 + 60) = a7;
  return a1;
}

{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

llvm::Instruction *llvm::StoreInst::StoreInst(llvm::Instruction *a1, _QWORD *a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, llvm::BasicBlock *a8)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  char *v14;
  llvm::Instruction *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v14 = (char *)a1 - 64;
  result = llvm::Instruction::Instruction(a1, (llvm::Type *)(**(_QWORD **)*a2 + 1576), 33, (llvm::Instruction *)((char *)a1 - 64), 2, a8);
  if (*((_QWORD *)result - 8))
  {
    **((_QWORD **)result - 6) = *((_QWORD *)result - 7);
    v16 = *((_QWORD *)result - 7);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)result - 6);
  }
  *((_QWORD *)result - 8) = a2;
  v19 = a2[1];
  v18 = a2 + 1;
  v17 = v19;
  *((_QWORD *)result - 7) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = (char *)result - 56;
  *((_QWORD *)result - 6) = v18;
  *v18 = v14;
  v20 = (_QWORD *)((char *)result - 32);
  if (*((_QWORD *)result - 4))
  {
    **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
    v21 = *((_QWORD *)result - 3);
    if (v21)
      *(_QWORD *)(v21 + 16) = *((_QWORD *)result - 2);
  }
  *v20 = a3;
  if (a3)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v23 = (_QWORD *)(a3 + 8);
    v22 = v24;
    *((_QWORD *)result - 3) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = (char *)result - 24;
    *((_QWORD *)result - 2) = v23;
    *v23 = v20;
  }
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *((_BYTE *)result + 60) = a7;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v21 = *(_QWORD *)(result - 88);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(result - 80);
  }
  *v8 = a2;
  if (a2)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v9 = (_QWORD *)(a2 + 8);
    v10 = v11;
    *(_QWORD *)(result - 88) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v9;
    *v9 = v8;
  }
  v12 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v22 = *(_QWORD *)(result - 56);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(result - 48);
  }
  *v12 = a3;
  if (a3)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v13 = (_QWORD *)(a3 + 8);
    v14 = v15;
    *(_QWORD *)(result - 56) = v15;
    if (v15)
      *(_QWORD *)(v14 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v13;
    *v13 = v12;
  }
  v16 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v23 = *(_QWORD *)(result - 24);
    if (v23)
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(result - 16);
  }
  *v16 = a4;
  if (a4)
  {
    v19 = *(_QWORD *)(a4 + 8);
    v17 = (_QWORD *)(a4 + 8);
    v18 = v19;
    *(_QWORD *)(result - 24) = v19;
    if (v19)
      *(_QWORD *)(v18 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v17;
    *v17 = v16;
  }
  v20 = *(_WORD *)(result + 18) & 0xC003;
  *(_BYTE *)(result + 60) = a8;
  *(_WORD *)(result + 18) = (4 * a6) & 0xC01F | (a5 << 8) | (32 * a7) & 0xC0FF | v20;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4, unsigned __int8 a5, __int16 a6, __int16 a7, char a8, uint64_t a9)
{
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v17 = **a3;
  v18 = *v17 + 1888;
  v27[0] = *a3;
  v27[1] = v18;
  *(_QWORD *)a1 = llvm::StructType::get(v17, (uint64_t)v27, 2, 0);
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 64;
  *(_DWORD *)(a1 + 20) = v19;
  *(_OWORD *)(a1 + 24) = 0u;
  v20 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a9)
  {
    v22 = *(_QWORD *)(a9 + 40);
    v23 = (uint64_t *)(a9 + 24);
    *(_QWORD *)(a1 + 40) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v25 = *(_QWORD *)(v22 + 56);
      if (v25)
      {
        v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26)
          llvm::ValueSymbolTable::reinsertValue(v26, (llvm::Value *)a1);
      }
    }
    v24 = *v23;
    *(_QWORD *)(a1 + 24) = *v23;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(v24 + 8) = v20;
    *v23 = v20;
  }
  llvm::AtomicCmpXchgInst::Init(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  return llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v17 = **a3;
  v18 = *v17 + 1888;
  v25[0] = *a3;
  v25[1] = v18;
  *(_QWORD *)a1 = llvm::StructType::get(v17, (uint64_t)v25, 2, 0);
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 64;
  *(_DWORD *)(a1 + 20) = v19;
  *(_OWORD *)(a1 + 24) = 0u;
  v20 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a9;
  *(_WORD *)(a9 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v23 = *(_QWORD *)(a9 + 56);
    if (v23)
    {
      v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24)
        llvm::ValueSymbolTable::reinsertValue(v24, (llvm::Value *)a1);
    }
  }
  v21 = *(_QWORD *)(a9 + 40);
  *(_QWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = a9 + 40;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(a9 + 40) = v20;
  llvm::AtomicCmpXchgInst::Init(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

{
  return llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::AtomicRMWInst::Init(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, char a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v7 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v16 = *(_QWORD *)(result - 56);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(result - 48);
  }
  *v7 = a3;
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v8 = (_QWORD *)(a3 + 8);
    v9 = v10;
    *(_QWORD *)(result - 56) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v8;
    *v8 = v7;
  }
  v11 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v17 = *(_QWORD *)(result - 24);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(result - 16);
  }
  *v11 = a4;
  if (a4)
  {
    v14 = *(_QWORD *)(a4 + 8);
    v12 = (_QWORD *)(a4 + 8);
    v13 = v14;
    *(_QWORD *)(result - 24) = v14;
    if (v14)
      *(_QWORD *)(v13 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v12;
    *v12 = v11;
  }
  v15 = *(_WORD *)(result + 18) & 0xC001;
  *(_BYTE *)(result + 60) = a7;
  *(_WORD *)(result + 18) = ((2 * a6) | (16 * a2)) & 0xC0FF | (a5 << 8) | v15;
  return result;
}

uint64_t llvm::AtomicRMWInst::AtomicRMWInst(uint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4, unsigned __int8 a5, __int16 a6, char a7, uint64_t a8)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(_QWORD *)a1 = *a4;
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 65;
  *(_DWORD *)(a1 + 20) = v15;
  *(_OWORD *)(a1 + 24) = 0u;
  v16 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v18 = *(_QWORD *)(a8 + 40);
    v19 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v18;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v21 = *(_QWORD *)(v18 + 56);
      if (v21)
      {
        v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
        if (v22)
          llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)a1);
      }
    }
    v20 = *v19;
    *(_QWORD *)(a1 + 24) = *v19;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(v20 + 8) = v16;
    *v19 = v16;
  }
  llvm::AtomicRMWInst::Init(a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(_QWORD *)a1 = *a4;
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 65;
  *(_DWORD *)(a1 + 20) = v15;
  *(_OWORD *)(a1 + 24) = 0u;
  v16 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v18 = *(_QWORD *)(a8 + 40);
    v19 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v18;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v21 = *(_QWORD *)(v18 + 56);
      if (v21)
      {
        v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
        if (v22)
          llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)a1);
      }
    }
    v20 = *v19;
    *(_QWORD *)(a1 + 24) = *v19;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(v20 + 8) = v16;
    *v19 = v16;
  }
  llvm::AtomicRMWInst::Init(a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(_QWORD *)a1 = *a4;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 65;
  *(_DWORD *)(a1 + 20) = v16;
  *(_OWORD *)(a1 + 24) = 0u;
  v17 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v21 = *(_QWORD *)(a8 + 56);
    if (v21)
    {
      v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
      if (v22)
        llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)a1);
    }
  }
  v19 = *(_QWORD *)(a8 + 40);
  v18 = (uint64_t *)(a8 + 40);
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(v19 + 8) = v17;
  *v18 = v17;
  llvm::AtomicRMWInst::Init(a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

{
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;

  *(_QWORD *)a1 = *a4;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 65;
  *(_DWORD *)(a1 + 20) = v16;
  *(_OWORD *)(a1 + 24) = 0u;
  v17 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v21 = *(_QWORD *)(a8 + 56);
    if (v21)
    {
      v22 = *(llvm::ValueSymbolTable **)(v21 + 104);
      if (v22)
        llvm::ValueSymbolTable::reinsertValue(v22, (llvm::Value *)a1);
    }
  }
  v19 = *(_QWORD *)(a8 + 40);
  v18 = (uint64_t *)(a8 + 40);
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(v19 + 8) = v17;
  *v18 = v17;
  llvm::AtomicRMWInst::Init(a1, a2, a3, (uint64_t)a4, a5, a6, a7);
  return a1;
}

char *llvm::AtomicRMWInst::getOperationName(int a1)
{
  return off_1E8167E50[a1];
}

uint64_t llvm::FenceInst::FenceInst(uint64_t a1, _QWORD *a2, __int16 a3, char a4, uint64_t a5)
{
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ValueSymbolTable *v16;

  v8 = 0;
  *(_QWORD *)a1 = *a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 63;
  *(_DWORD *)(a1 + 20) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v12 = *(_QWORD *)(a5 + 40);
    v13 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v12;
    *(_WORD *)(v12 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v15 = *(_QWORD *)(v12 + 56);
      if (v15)
      {
        v16 = *(llvm::ValueSymbolTable **)(v15 + 104);
        if (v16)
          llvm::ValueSymbolTable::reinsertValue(v16, (llvm::Value *)a1);
      }
    }
    v14 = *v13;
    *(_QWORD *)(a1 + 24) = *v13;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(v14 + 8) = v10;
    *v13 = v10;
    v8 = *(_WORD *)(a1 + 18) & 0xFFF8;
  }
  *(_WORD *)(a1 + 18) = v8 | a3;
  *(_BYTE *)(a1 + 60) = a4;
  return a1;
}

{
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(_QWORD *)a1 = *a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 63;
  *(_DWORD *)(a1 + 20) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v14 = *(_QWORD *)(a5 + 56);
    if (v14)
    {
      v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15)
        llvm::ValueSymbolTable::reinsertValue(v15, (llvm::Value *)a1);
    }
  }
  v12 = *(_QWORD *)(a5 + 40);
  v11 = (_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF8 | a3;
  *(_BYTE *)(a1 + 60) = a4;
  return a1;
}

{
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(_QWORD *)a1 = *a2 + 1576;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 63;
  *(_DWORD *)(a1 + 20) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v14 = *(_QWORD *)(a5 + 56);
    if (v14)
    {
      v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15)
        llvm::ValueSymbolTable::reinsertValue(v15, (llvm::Value *)a1);
    }
  }
  v12 = *(_QWORD *)(a5 + 40);
  v11 = (_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF8 | a3;
  *(_BYTE *)(a1 + 60) = a4;
  return a1;
}

void llvm::GetElementPtrInst::init(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;

  v7 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v8 = -v7;
  v9 = (_QWORD *)(a1 - 32 * v7);
  if (*v9)
  {
    v14 = a1 + 32 * v8;
    v16 = *(_QWORD **)(v14 + 16);
    v15 = (_QWORD *)(v14 + 16);
    *v16 = *(v15 - 1);
    v17 = *(v15 - 1);
    if (v17)
      *(_QWORD *)(v17 + 16) = *v15;
  }
  *v9 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v11 = v12;
    v13 = a1 + 32 * v8;
    *(_QWORD *)(v13 + 8) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = v13 + 8;
    *(_QWORD *)(v13 + 16) = v10;
    *v10 = v9;
  }
  sub_1C5382FD4((uint64_t)&v18, a3, &a3[a4], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  llvm::Value::setName((uint64_t ***)a1, a5);
}

llvm::GetElementPtrInst *llvm::GetElementPtrInst::GetElementPtrInst(llvm::GetElementPtrInst *this, const llvm::GetElementPtrInst *a2)
{
  uint64_t v4;
  char v6;

  v4 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 62;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  sub_1C53F5EAC((uint64_t)&v6, (uint64_t *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF), (uint64_t *)a2, (uint64_t)this - 32 * v4);
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *((_BYTE *)this + 17) & 1;
  return this;
}

{
  uint64_t v4;
  char v6;

  v4 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 62;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  sub_1C53F5EAC((uint64_t)&v6, (uint64_t *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF), (uint64_t *)a2, (uint64_t)this - 32 * v4);
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *((_BYTE *)this + 17) & 1;
  return this;
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(llvm::GetElementPtrInst *this, llvm::Type *a2, llvm::Value *a3)
{
  llvm::UndefValue *AggregateElement;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  int v10;
  uint64_t result;

  AggregateElement = a2;
  v5 = *((unsigned __int8 *)this + 8);
  if (this && v5 == 16)
  {
    if (llvm::StructType::indexValid(this, a2))
    {
      if (!AggregateElement || *((_BYTE *)AggregateElement + 16) != 16)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v8 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v7 = (unsigned int *)((char *)AggregateElement + 24);
      v6 = v8;
      if (v7[2] < 0x41)
        v6 = v7;
      v9 = (char *)(*((_QWORD *)this + 2) + 8 * *v6);
      return *(_QWORD *)v9;
    }
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v10 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v10 != 13)
    return 0;
  if (this && v5 == 17 || (result = 0, this) && (v5 & 0xFE) == 0x12)
  {
    v9 = (char *)this + 24;
    return *(_QWORD *)v9;
  }
  return result;
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v2 == 16)
  {
    if (*(unsigned int *)(a1 + 12) <= a2)
      return 0;
    v3 = *(_QWORD *)(a1 + 16) + 8 * a2;
    return *(_QWORD *)v3;
  }
  if (a1 && v2 == 17 || (v4 = 0, a1) && (v2 & 0xFE) == 0x12)
  {
    v3 = a1 + 24;
    return *(_QWORD *)v3;
  }
  return v4;
}

llvm::GetElementPtrInst *llvm::GetElementPtrInst::getIndexedType(llvm::GetElementPtrInst *result, uint64_t a2, llvm::Value *a3)
{
  llvm::Type **v3;
  uint64_t v4;
  llvm::Type *v5;

  if (a3)
  {
    v3 = (llvm::Type **)(a2 + 8);
    v4 = 8 * (_QWORD)a3 - 8;
    do
    {
      if (!v4)
        break;
      v5 = *v3++;
      result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(result, v5, a3);
      v4 -= 8;
    }
    while (result);
  }
  return result;
}

{
  llvm::Type **v3;
  uint64_t v4;
  llvm::Type *v5;

  if (a3)
  {
    v3 = (llvm::Type **)(a2 + 8);
    v4 = 8 * (_QWORD)a3 - 8;
    do
    {
      if (!v4)
        break;
      v5 = *v3++;
      result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(result, v5, a3);
      v4 -= 8;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::GetElementPtrInst::getIndexedType(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  if (a3)
  {
    v3 = (unint64_t *)(a2 + 8);
    v4 = 8 * a3 - 8;
    do
    {
      if (!v4)
        break;
      v5 = *v3++;
      result = llvm::GetElementPtrInst::getTypeAtIndex(result, v5);
      v4 -= 8;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::GetElementPtrInst::hasAllZeroIndices(llvm::GetElementPtrInst *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  llvm::APInt *v7;
  unsigned int v8;

  v1 = *((_DWORD *)this + 5);
  v2 = v1 & 0x7FFFFFF;
  if ((v1 & 0x7FFFFFF) == 1)
    return 1;
  v3 = (char *)this - 32 * v2;
  v4 = 1;
  while (1)
  {
    v5 = *(_QWORD *)&v3[32 * v4];
    if (!v5 || *(_BYTE *)(v5 + 16) != 16)
      break;
    v7 = (llvm::APInt *)(v5 + 24);
    v8 = *(_DWORD *)(v5 + 32);
    if (v8 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v7) != v8)
        return 0;
    }
    else if (*(_QWORD *)v7)
    {
      return 0;
    }
    if ((_DWORD)v2 == ++v4)
      return 1;
  }
  return 0;
}

BOOL llvm::GetElementPtrInst::hasAllConstantIndices(llvm::GetElementPtrInst *this)
{
  uint64_t v1;
  char *v2;
  int v3;
  int v4;
  _BOOL8 result;

  v1 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if ((_DWORD)v1 == 1)
    return 1;
  v2 = (char *)this - 32 * v1;
  v3 = 2;
  do
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)&v2[32 * (v3 - 1)] + 16);
    result = v4 == 16;
    if ((_DWORD)v1 == v3)
      break;
    ++v3;
  }
  while (v4 == 16);
  return result;
}

uint64_t llvm::GetElementPtrInst::setIsInBounds(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::GetElementPtrInst::isInBounds(llvm::GetElementPtrInst *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::GetElementPtrInst::accumulateConstantOffset(llvm::GetElementPtrInst *this, const llvm::DataLayout *a2, llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  return llvm::GEPOperator::accumulateConstantOffset((uint64_t)this, a2, (uint64_t)a3, 0, a5);
}

uint64_t llvm::ExtractElementInst::ExtractElementInst(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;

  v9 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 89;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v21 = *(_QWORD *)(a5 + 40);
    v22 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v24 = *(_QWORD *)(v21 + 56);
      if (v24)
      {
        v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25)
          llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
      }
    }
    v23 = *v22;
    *(_QWORD *)(a1 + 24) = *v22;
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(v23 + 8) = v10;
    *v22 = v10;
  }
  if (*v9)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v11 = *(_QWORD *)(a1 - 56);
    if (v11)
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v14 = a2[1];
  v13 = a2 + 1;
  v12 = v14;
  *(_QWORD *)(a1 - 56) = v14;
  if (v14)
    *(_QWORD *)(v12 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v13;
  *v13 = v9;
  v15 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v16 = *(_QWORD *)(a1 - 24);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v15 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v18;
    *v18 = v15;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;

  *(_QWORD *)a1 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 89;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v23 = *(_QWORD *)(a5 + 56);
    if (v23)
    {
      v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24)
        llvm::ValueSymbolTable::reinsertValue(v24, (llvm::Value *)a1);
    }
  }
  v12 = *(_QWORD *)(a5 + 40);
  v11 = (_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v13 = *(_QWORD *)(a1 - 56);
    if (v13)
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v16 = a2[1];
  v15 = a2 + 1;
  v14 = v16;
  *(_QWORD *)(a1 - 56) = v16;
  if (v16)
    *(_QWORD *)(v14 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v15;
  *v15 = a1 - 64;
  v17 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v18 = *(_QWORD *)(a1 - 24);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v17 = a3;
  if (a3)
  {
    v21 = *(_QWORD *)(a3 + 8);
    v20 = (_QWORD *)(a3 + 8);
    v19 = v21;
    *(_QWORD *)(a1 - 24) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v20;
    *v20 = v17;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

BOOL llvm::ExtractElementInst::isValidOperands(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12 && *(_BYTE *)(*(_QWORD *)a2 + 8) == 13;
}

uint64_t llvm::InsertElementInst::InsertElementInst(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::ValueSymbolTable *v33;

  v11 = (_QWORD *)(a1 - 96);
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 90;
  *(_DWORD *)(a1 + 20) = v12;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    v29 = *(_QWORD *)(a6 + 40);
    v30 = (uint64_t *)(a6 + 24);
    *(_QWORD *)(a1 + 40) = v29;
    *(_WORD *)(v29 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v32 = *(_QWORD *)(v29 + 56);
      if (v32)
      {
        v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
        if (v33)
          llvm::ValueSymbolTable::reinsertValue(v33, (llvm::Value *)a1);
      }
    }
    v31 = *v30;
    *(_QWORD *)(a1 + 24) = *v30;
    *(_QWORD *)(a1 + 32) = v30;
    *(_QWORD *)(v31 + 8) = v13;
    *v30 = v13;
  }
  if (*v11)
  {
    **(_QWORD **)(a1 - 80) = *(_QWORD *)(a1 - 88);
    v14 = *(_QWORD *)(a1 - 88);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 - 80);
  }
  *(_QWORD *)(a1 - 96) = a2;
  v17 = a2[1];
  v16 = a2 + 1;
  v15 = v17;
  *(_QWORD *)(a1 - 88) = v17;
  if (v17)
    *(_QWORD *)(v15 + 16) = a1 - 88;
  *(_QWORD *)(a1 - 80) = v16;
  *v16 = v11;
  v18 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v19 = *(_QWORD *)(a1 - 56);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v18 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 56) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v21;
    *v21 = v18;
  }
  v23 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v24 = *(_QWORD *)(a1 - 24);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v23 = a4;
  if (a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v26 = (_QWORD *)(a4 + 8);
    v25 = v27;
    *(_QWORD *)(a1 - 24) = v27;
    if (v27)
      *(_QWORD *)(v25 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v26;
    *v26 = v23;
  }
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

{
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  llvm::ValueSymbolTable *v32;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 3;
  *(_DWORD *)(a1 + 16) = 90;
  *(_DWORD *)(a1 + 20) = v12;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a6;
  *(_WORD *)(a6 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v31 = *(_QWORD *)(a6 + 56);
    if (v31)
    {
      v32 = *(llvm::ValueSymbolTable **)(v31 + 104);
      if (v32)
        llvm::ValueSymbolTable::reinsertValue(v32, (llvm::Value *)a1);
    }
  }
  v15 = *(_QWORD *)(a6 + 40);
  v14 = (_QWORD *)(a6 + 40);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(v15 + 8) = v13;
  *v14 = v13;
  if (*(_QWORD *)(a1 - 96))
  {
    **(_QWORD **)(a1 - 80) = *(_QWORD *)(a1 - 88);
    v16 = *(_QWORD *)(a1 - 88);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 - 80);
  }
  *(_QWORD *)(a1 - 96) = a2;
  v19 = a2[1];
  v18 = a2 + 1;
  v17 = v19;
  *(_QWORD *)(a1 - 88) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = a1 - 88;
  *(_QWORD *)(a1 - 80) = v18;
  *v18 = a1 - 96;
  v20 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v21 = *(_QWORD *)(a1 - 56);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v20 = a3;
  if (a3)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v23 = (_QWORD *)(a3 + 8);
    v22 = v24;
    *(_QWORD *)(a1 - 56) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v23;
    *v23 = v20;
  }
  v25 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v26 = *(_QWORD *)(a1 - 24);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v25 = a4;
  if (a4)
  {
    v29 = *(_QWORD *)(a4 + 8);
    v28 = (_QWORD *)(a4 + 8);
    v27 = v29;
    *(_QWORD *)(a1 - 24) = v29;
    if (v29)
      *(_QWORD *)(v27 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v28;
    *v28 = v25;
  }
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

BOOL llvm::InsertElementInst::isValidOperands(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12
      && *a2 == *(_QWORD *)(*(_QWORD *)a1 + 24)
      && *(_BYTE *)(*(_QWORD *)a3 + 8) == 13;
}

_BYTE **llvm::ShuffleVectorInst::ShuffleVectorInst(_BYTE **a1, llvm::PoisonValue **a2, llvm::ConstantDataSequential *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v10, a3, a4, a5);
}

{
  _QWORD *v10;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v10, a3, a4, a5);
}

{
  _QWORD *v10;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v10, a3, a4, a5);
}

{
  _QWORD *v10;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v10, a3, a4, a5);
}

_BYTE **llvm::ShuffleVectorInst::ShuffleVectorInst(_BYTE **a1, _QWORD *a2, uint64_t a3, llvm::ConstantDataSequential *a4, uint64_t a5, uint64_t a6)
{
  uint64_t **v12;
  llvm::Type *v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE **v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  _BYTE *v25;
  BOOL v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  llvm::ValueSymbolTable *v36;
  void *__src;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  v12 = *(uint64_t ***)(*a2 + 24);
  v13 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a4 + 32);
  if (*(_BYTE *)(*(_QWORD *)a4 + 8) == 19)
    llvm::ScalableVectorType::get(v12, v13);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v13);
  *a1 = v14;
  a1[1] = 0;
  v15 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v15;
  *(_OWORD *)(a1 + 3) = 0u;
  v16 = a1 + 3;
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a6)
  {
    v32 = *(_QWORD *)(a6 + 40);
    v33 = (_QWORD *)(a6 + 24);
    a1[5] = (_BYTE *)v32;
    *(_WORD *)(v32 + 18) &= ~0x8000u;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v35 = *(_QWORD *)(v32 + 56);
      if (v35)
      {
        v36 = *(llvm::ValueSymbolTable **)(v35 + 104);
        if (v36)
          llvm::ValueSymbolTable::reinsertValue(v36, (llvm::Value *)a1);
      }
    }
    v34 = (_BYTE *)*v33;
    a1[3] = (_BYTE *)*v33;
    a1[4] = v33;
    *((_QWORD *)v34 + 1) = v16;
    *v33 = v16;
  }
  a1[8] = a1 + 10;
  a1[9] = (_BYTE *)0x400000000;
  if (*(a1 - 8))
  {
    *(_QWORD *)*(a1 - 6) = *(a1 - 7);
    v17 = (uint64_t)*(a1 - 7);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(a1 - 6);
  }
  *(a1 - 8) = a2;
  v20 = (_BYTE *)a2[1];
  v19 = a2 + 1;
  v18 = v20;
  *(a1 - 7) = v20;
  if (v20)
    *((_QWORD *)v18 + 2) = a1 - 7;
  *(a1 - 6) = v19;
  *v19 = a1 - 8;
  v21 = a1 - 4;
  if (*(a1 - 4))
  {
    *(_QWORD *)*(a1 - 2) = *(a1 - 3);
    v22 = (uint64_t)*(a1 - 3);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(a1 - 2);
  }
  *v21 = a3;
  if (a3)
  {
    v25 = *(_BYTE **)(a3 + 8);
    v24 = (_QWORD *)(a3 + 8);
    v23 = v25;
    *(a1 - 3) = v25;
    if (v25)
      *((_QWORD *)v23 + 2) = a1 - 3;
    *(a1 - 2) = v24;
    *v24 = v21;
  }
  __src = v39;
  v38 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&__src);
  v27 = __src;
  v28 = v38;
  *((_DWORD *)a1 + 18) = 0;
  if (v28 > *((_DWORD *)a1 + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), (uint64_t)(a1 + 10), v28, 4);
    v29 = *((unsigned int *)a1 + 18);
    goto LABEL_19;
  }
  if ((_DWORD)v28)
  {
    v29 = 0;
LABEL_19:
    memcpy(&a1[8][4 * v29], v27, 4 * v28);
    v30 = *((_DWORD *)a1 + 18);
    goto LABEL_20;
  }
  v30 = 0;
LABEL_20:
  *((_DWORD *)a1 + 18) = v30 + v28;
  a1[12] = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v27, v28, *a1, v26);
  llvm::Value::setName((uint64_t ***)a1, a5);
  if (__src != v39)
    free(__src);
  return a1;
}

{
  uint64_t **v12;
  llvm::Type *v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  _BYTE *v27;
  BOOL v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  llvm::ValueSymbolTable *v35;
  void *__src;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x1E0C80C00];
  v12 = *(uint64_t ***)(*a2 + 24);
  v13 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a4 + 32);
  if (*(_BYTE *)(*(_QWORD *)a4 + 8) == 19)
    llvm::ScalableVectorType::get(v12, v13);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v12, v13);
  *a1 = v14;
  a1[1] = 0;
  v15 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v15;
  *(_OWORD *)(a1 + 3) = 0u;
  v16 = a1 + 3;
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  a1[5] = (_BYTE *)a6;
  *(_WORD *)(a6 + 18) &= ~0x8000u;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v34 = *(_QWORD *)(a6 + 56);
    if (v34)
    {
      v35 = *(llvm::ValueSymbolTable **)(v34 + 104);
      if (v35)
        llvm::ValueSymbolTable::reinsertValue(v35, (llvm::Value *)a1);
    }
  }
  v18 = *(_QWORD *)(a6 + 40);
  v17 = (_QWORD *)(a6 + 40);
  a1[8] = a1 + 10;
  a1[3] = (_BYTE *)v18;
  a1[4] = v17;
  *(_QWORD *)(v18 + 8) = v16;
  *v17 = v16;
  a1[9] = (_BYTE *)0x400000000;
  if (*(a1 - 8))
  {
    *(_QWORD *)*(a1 - 6) = *(a1 - 7);
    v19 = (uint64_t)*(a1 - 7);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(a1 - 6);
  }
  *(a1 - 8) = a2;
  v22 = (_BYTE *)a2[1];
  v21 = a2 + 1;
  v20 = v22;
  *(a1 - 7) = v22;
  if (v22)
    *((_QWORD *)v20 + 2) = a1 - 7;
  *(a1 - 6) = v21;
  *v21 = a1 - 8;
  v23 = a1 - 4;
  if (*(a1 - 4))
  {
    *(_QWORD *)*(a1 - 2) = *(a1 - 3);
    v24 = (uint64_t)*(a1 - 3);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(a1 - 2);
  }
  *v23 = a3;
  if (a3)
  {
    v27 = *(_BYTE **)(a3 + 8);
    v26 = (_QWORD *)(a3 + 8);
    v25 = v27;
    *(a1 - 3) = v27;
    if (v27)
      *((_QWORD *)v25 + 2) = a1 - 3;
    *(a1 - 2) = v26;
    *v26 = v23;
  }
  __src = v38;
  v37 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&__src);
  v29 = __src;
  v30 = v37;
  *((_DWORD *)a1 + 18) = 0;
  if (v30 > *((_DWORD *)a1 + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), (uint64_t)(a1 + 10), v30, 4);
    v31 = *((unsigned int *)a1 + 18);
    goto LABEL_19;
  }
  if ((_DWORD)v30)
  {
    v31 = 0;
LABEL_19:
    memcpy(&a1[8][4 * v31], v29, 4 * v30);
    v32 = *((_DWORD *)a1 + 18);
    goto LABEL_20;
  }
  v32 = 0;
LABEL_20:
  *((_DWORD *)a1 + 18) = v32 + v30;
  a1[12] = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v29, v30, *a1, v28);
  llvm::Value::setName((uint64_t ***)a1, a5);
  if (__src != v38)
    free(__src);
  return a1;
}

_BYTE **llvm::ShuffleVectorInst::ShuffleVectorInst(_BYTE **a1, llvm::PoisonValue **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v12, a3, a4, a5, a6);
}

{
  _QWORD *v12;

  v12 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v12, a3, a4, a5, a6);
}

{
  _QWORD *v12;

  v12 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v12, a3, a4, a5, a6);
}

{
  _QWORD *v12;

  v12 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::ShuffleVectorInst::ShuffleVectorInst(a1, a2, (uint64_t)v12, a3, a4, a5, a6);
}

_BYTE **llvm::ShuffleVectorInst::ShuffleVectorInst(_BYTE **a1, _QWORD *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t **v14;
  _BYTE *v15;
  BOOL v16;
  unsigned int v17;
  _BYTE **v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  _BYTE *v27;
  int v28;
  uint64_t v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  llvm::ValueSymbolTable *v34;

  v14 = *(uint64_t ***)(*a2 + 24);
  if (*(_BYTE *)(*a2 + 8) == 19)
    llvm::ScalableVectorType::get(v14, (llvm::Type *)a5);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, (llvm::Type *)a5);
  *a1 = v15;
  a1[1] = 0;
  v17 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v17;
  *(_OWORD *)(a1 + 3) = 0u;
  v18 = a1 + 3;
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a7)
  {
    v30 = *(_QWORD *)(a7 + 40);
    v31 = (_QWORD *)(a7 + 24);
    a1[5] = (_BYTE *)v30;
    *(_WORD *)(v30 + 18) &= ~0x8000u;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v33 = *(_QWORD *)(v30 + 56);
      if (v33)
      {
        v34 = *(llvm::ValueSymbolTable **)(v33 + 104);
        if (v34)
          llvm::ValueSymbolTable::reinsertValue(v34, (llvm::Value *)a1);
      }
    }
    v32 = (_BYTE *)*v31;
    a1[3] = (_BYTE *)*v31;
    a1[4] = v31;
    *((_QWORD *)v32 + 1) = v18;
    *v31 = v18;
  }
  a1[8] = a1 + 10;
  a1[9] = (_BYTE *)0x400000000;
  if (*(a1 - 8))
  {
    *(_QWORD *)*(a1 - 6) = *(a1 - 7);
    v19 = (uint64_t)*(a1 - 7);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(a1 - 6);
  }
  *(a1 - 8) = a2;
  v22 = (_BYTE *)a2[1];
  v21 = a2 + 1;
  v20 = v22;
  *(a1 - 7) = v22;
  if (v22)
    *((_QWORD *)v20 + 2) = a1 - 7;
  *(a1 - 6) = v21;
  *v21 = a1 - 8;
  v23 = a1 - 4;
  if (*(a1 - 4))
  {
    *(_QWORD *)*(a1 - 2) = *(a1 - 3);
    v24 = (uint64_t)*(a1 - 3);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(a1 - 2);
  }
  *v23 = a3;
  if (a3)
  {
    v27 = *(_BYTE **)(a3 + 8);
    v26 = (_QWORD *)(a3 + 8);
    v25 = v27;
    *(a1 - 3) = v27;
    if (v27)
      *((_QWORD *)v25 + 2) = a1 - 3;
    *(a1 - 2) = v26;
    *v26 = v23;
  }
  v28 = 0;
  *((_DWORD *)a1 + 18) = 0;
  if ((unint64_t)(4 * a5) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), (uint64_t)(a1 + 10), (4 * a5) >> 2, 4);
    v28 = *((_DWORD *)a1 + 18);
    if (!a5)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (a5)
  {
LABEL_18:
    memcpy(&a1[8][4 * v28], a4, 4 * a5);
    v28 = *((_DWORD *)a1 + 18);
  }
LABEL_19:
  *((_DWORD *)a1 + 18) = v28 + ((unint64_t)(4 * a5) >> 2);
  a1[12] = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, a5, *a1, v16);
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

{
  uint64_t **v14;
  _BYTE *v15;
  BOOL v16;
  unsigned int v17;
  _BYTE **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  _BYTE *v29;
  int v30;
  uint64_t v32;
  llvm::ValueSymbolTable *v33;

  v14 = *(uint64_t ***)(*a2 + 24);
  if (*(_BYTE *)(*a2 + 8) == 19)
    llvm::ScalableVectorType::get(v14, (llvm::Type *)a5);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, (llvm::Type *)a5);
  *a1 = v15;
  a1[1] = 0;
  v17 = *((_DWORD *)a1 + 5) & 0xC0000000 | 2;
  *((_DWORD *)a1 + 4) = 91;
  *((_DWORD *)a1 + 5) = v17;
  *(_OWORD *)(a1 + 3) = 0u;
  v18 = a1 + 3;
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  a1[5] = (_BYTE *)a7;
  *(_WORD *)(a7 + 18) &= ~0x8000u;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v32 = *(_QWORD *)(a7 + 56);
    if (v32)
    {
      v33 = *(llvm::ValueSymbolTable **)(v32 + 104);
      if (v33)
        llvm::ValueSymbolTable::reinsertValue(v33, (llvm::Value *)a1);
    }
  }
  v20 = *(_QWORD *)(a7 + 40);
  v19 = (_QWORD *)(a7 + 40);
  a1[8] = a1 + 10;
  a1[3] = (_BYTE *)v20;
  a1[4] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  a1[9] = (_BYTE *)0x400000000;
  if (*(a1 - 8))
  {
    *(_QWORD *)*(a1 - 6) = *(a1 - 7);
    v21 = (uint64_t)*(a1 - 7);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(a1 - 6);
  }
  *(a1 - 8) = a2;
  v24 = (_BYTE *)a2[1];
  v23 = a2 + 1;
  v22 = v24;
  *(a1 - 7) = v24;
  if (v24)
    *((_QWORD *)v22 + 2) = a1 - 7;
  *(a1 - 6) = v23;
  *v23 = a1 - 8;
  v25 = a1 - 4;
  if (*(a1 - 4))
  {
    *(_QWORD *)*(a1 - 2) = *(a1 - 3);
    v26 = (uint64_t)*(a1 - 3);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(a1 - 2);
  }
  *v25 = a3;
  if (a3)
  {
    v29 = *(_BYTE **)(a3 + 8);
    v28 = (_QWORD *)(a3 + 8);
    v27 = v29;
    *(a1 - 3) = v29;
    if (v29)
      *((_QWORD *)v27 + 2) = a1 - 3;
    *(a1 - 2) = v28;
    *v28 = v25;
  }
  v30 = 0;
  *((_DWORD *)a1 + 18) = 0;
  if ((unint64_t)(4 * a5) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), (uint64_t)(a1 + 10), (4 * a5) >> 2, 4);
    v30 = *((_DWORD *)a1 + 18);
    if (!a5)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (a5)
  {
LABEL_18:
    memcpy(&a1[8][4 * v30], a4, 4 * a5);
    v30 = *((_DWORD *)a1 + 18);
  }
LABEL_19:
  *((_DWORD *)a1 + 18) = v30 + ((unint64_t)(4 * a5) >> 2);
  a1[12] = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, a5, *a1, v16);
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

void llvm::ShuffleVectorInst::getShuffleMask(llvm::ConstantDataSequential *this, uint64_t a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  llvm::Type *v17;
  llvm::UndefValue *AggregateElement;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;

  v3 = *(unsigned int *)(*(_QWORD *)this + 32);
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 13)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5 != (_DWORD)v3)
    {
      if (v5 <= v3)
      {
        v6 = *(unsigned int *)(a2 + 8);
        if (v3 > *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3, 4);
          v6 = *(unsigned int *)(a2 + 8);
        }
        bzero((void *)(*(_QWORD *)a2 + 4 * v6), 4 * (v3 - v5));
        LODWORD(v3) = v3 - v5 + *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (*(_DWORD *)(a2 + 12) < v3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3, 4);
      v4 = *((unsigned __int8 *)this + 16);
    }
    if (v8 == 19)
    {
      if ((v4 - 11) >= 2)
        v9 = 0;
      else
        v9 = -1;
      if ((_DWORD)v3)
      {
        v10 = *(_DWORD *)(a2 + 8);
        do
        {
          v11 = v10;
          if (v10 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 4);
            v12 = *(_QWORD *)a2;
            v11 = *(unsigned int *)(a2 + 8);
          }
          else
          {
            v12 = *(_QWORD *)a2;
          }
          *(_DWORD *)(v12 + 4 * v11) = v9;
          v10 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v10;
          LODWORD(v3) = v3 - 1;
        }
        while ((_DWORD)v3);
      }
    }
    else if ((v4 & 0xFE) == 0xE)
    {
      if ((_DWORD)v3)
      {
        v13 = 0;
        do
        {
          llvm::ConstantDataSequential::getElementAsInteger(this);
          v15 = v14;
          v16 = *(unsigned int *)(a2 + 8);
          if (v16 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 4);
            v16 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = v15;
          ++*(_DWORD *)(a2 + 8);
          ++v13;
        }
        while ((_DWORD)v3 != v13);
      }
    }
    else if ((_DWORD)v3)
    {
      v17 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(this, v17);
        if (*((unsigned __int8 *)AggregateElement + 16) - 11 >= 2)
        {
          v20 = (_QWORD *)((char *)AggregateElement + 24);
          if (*((_DWORD *)AggregateElement + 8) >= 0x41u)
            v20 = (_QWORD *)*v20;
          v19 = (_QWORD *)*v20;
        }
        else
        {
          LODWORD(v19) = -1;
        }
        v21 = *(unsigned int *)(a2 + 8);
        if (v21 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 4);
          v21 = *(unsigned int *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = (_DWORD)v19;
        ++*(_DWORD *)(a2 + 8);
        v17 = (llvm::Type *)((_DWORD)v17 + 1);
      }
      while ((_DWORD)v3 != (_DWORD)v17);
    }
  }
}

llvm::UndefValue *llvm::ShuffleVectorInst::setShuffleMask(uint64_t a1, void *__src, uint64_t a3, BOOL a4)
{
  unsigned int v7;
  unint64_t v8;
  llvm::UndefValue *result;

  v7 = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v8 = (4 * a3) >> 2;
  if (v8 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v8, 4);
    v7 = *(_DWORD *)(a1 + 72);
  }
  if (a3)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 4 * v7), __src, 4 * a3);
    v7 = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v7 + ((unint64_t)(4 * a3) >> 2);
  result = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)__src, a3, *(_BYTE **)a1, a4);
  *(_QWORD *)(a1 + 96) = result;
  return result;
}

void llvm::ShuffleVectorInst::commute(llvm::ShuffleVectorInst *this)
{
  char *v2;
  int v3;
  int **v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  llvm::UndefValue *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *__src;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this - 64;
  v3 = *(_DWORD *)(**((_QWORD **)this - 8) + 32);
  v4 = (int **)((char *)this + 64);
  v5 = *((int *)this + 18);
  __src = v29;
  v28 = 0x1000000000;
  sub_1C4893E04((char *)&__src, v5, 0);
  if ((_DWORD)v5)
  {
    v7 = v5;
    v8 = *v4;
    v9 = (int *)__src;
    do
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 >= v3)
        v12 = -v3;
      else
        v12 = v3;
      v13 = v12 + v10;
      if (v10 == -1)
        v14 = -1;
      else
        v14 = v13;
      *v9++ = v14;
      --v7;
    }
    while (v7);
  }
  v15 = __src;
  v16 = v28;
  *((_DWORD *)this + 18) = 0;
  if (v16 > *((_DWORD *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (uint64_t)this + 80, v16, 4);
    v17 = *((unsigned int *)this + 18);
    goto LABEL_13;
  }
  if ((_DWORD)v16)
  {
    v17 = 0;
LABEL_13:
    memcpy((void *)(*((_QWORD *)this + 8) + 4 * v17), v15, 4 * v16);
    v18 = *((_DWORD *)this + 18);
    goto LABEL_14;
  }
  v18 = 0;
LABEL_14:
  *((_DWORD *)this + 18) = v18 + v16;
  v19 = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v15, v16, *(_BYTE **)this, v6);
  v20 = *((_QWORD *)this - 4);
  *((_QWORD *)this + 12) = v19;
  v21 = *((_QWORD *)this - 8);
  if (v21 != v20)
  {
    v22 = *((_QWORD *)this - 3);
    *((_QWORD *)this - 8) = v20;
    *((_QWORD *)this - 4) = v21;
    v23 = *(_OWORD *)((char *)this - 56);
    v24 = (_QWORD *)*((_QWORD *)this - 2);
    *((_QWORD *)this - 7) = v22;
    *((_QWORD *)this - 6) = v24;
    *(_OWORD *)((char *)this - 24) = v23;
    *v24 = v2;
    v25 = *((_QWORD *)this - 7);
    if (v25)
      *(_QWORD *)(v25 + 16) = (char *)this - 56;
    **((_QWORD **)this - 2) = (char *)this - 32;
    v26 = *((_QWORD *)this - 3);
    if (v26)
      *(_QWORD *)(v26 + 16) = (char *)this - 24;
  }
  if (__src != v29)
    free(__src);
}

BOOL llvm::ShuffleVectorInst::isValidOperands(uint64_t *a1, _QWORD *a2, int *__s2, uint64_t a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int *i;

  v4 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) != 0x12 || v4 != *a2)
    return 0;
  if (a4)
  {
    v6 = 2 * *(_DWORD *)(v4 + 32);
    v7 = 4 * a4;
    for (i = __s2; *i == -1 || *i < v6; ++i)
    {
      v7 -= 4;
      if (!v7)
        return *(_DWORD *)(*a1 + 8) != 19
            || (*__s2 + 1) <= 1 && a4 && (a4 == 1 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
    }
    return 0;
  }
  return *(_DWORD *)(*a1 + 8) != 19
      || (*__s2 + 1) <= 1 && a4 && (a4 == 1 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
}

uint64_t llvm::ShuffleVectorInst::isValidOperands(llvm::ShuffleVectorInst *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::Value *a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unsigned int v25;

  v4 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12 || v4 != *(_QWORD *)a2)
    return 0;
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)a3 && (*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 18;
  if (!v7
    || *(_DWORD *)(*(_QWORD *)(v6 + 24) + 8) != 8205
    || (*(_DWORD *)(*(_QWORD *)this + 8) == 19) != (*(_DWORD *)(*(_QWORD *)a3 + 8) == 19))
  {
    return 0;
  }
  v9 = *((unsigned __int8 *)a3 + 16);
  if ((v9 - 11) < 3)
    return 1;
  if (v9 == 10)
  {
    v10 = *((_DWORD *)a3 + 5);
    if ((v10 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)a3 - 1);
      v11 = v10 & 0x7FFFFFF;
    }
    else
    {
      v11 = v10 & 0x7FFFFFF;
      v12 = (char *)a3 - 32 * v11;
    }
    if (v11)
    {
      v19 = (2 * *(_DWORD *)(v4 + 32));
      v20 = 32 * v11;
      while (1)
      {
        v21 = *(_QWORD *)v12;
        v22 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
        if (*(_QWORD *)v12)
          v23 = v22 == 16;
        else
          v23 = 0;
        if (v23)
        {
          v24 = (unint64_t *)(v21 + 24);
          v25 = *(_DWORD *)(v21 + 32);
          if (v25 >= 0x41)
          {
            if (v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v21 + 24)) > 0x40)
              return 0;
            v24 = (unint64_t *)*v24;
          }
          if (*v24 >= v19)
            return 0;
        }
        else if ((v22 - 11) > 1)
        {
          return 0;
        }
        v12 += 32;
        result = 1;
        v20 -= 32;
        if (!v20)
          return result;
      }
    }
    return 1;
  }
  v13 = v9 & 0xFE;
  if (v13 == 14)
  {
    v14 = *(_DWORD *)(v6 + 32);
    if (v14)
    {
      v15 = 0;
      v16 = (2 * *(_DWORD *)(v4 + 32));
      v17 = v14 - 1;
      do
      {
        llvm::ConstantDataSequential::getElementAsInteger(a3);
        LOBYTE(v9) = v18 < v16;
        if (v18 >= v16)
          break;
        v7 = v17 == v15++;
      }
      while (!v7);
    }
    else
    {
      LOBYTE(v9) = 1;
    }
  }
  return (v13 == 14) & v9;
}

llvm::UndefValue *llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(int *a1, uint64_t a2, _BYTE *a3, BOOL a4)
{
  llvm::UndefValue *v5;
  uint64_t v6;
  llvm::Type *v7;
  llvm::UndefValue *v8;
  llvm::UndefValue *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::FixedVectorType ***v12;
  uint64_t Impl;
  _QWORD **v14;
  llvm::UndefValue *v16;
  llvm::Type *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v5 = (llvm::UndefValue *)(**(_QWORD **)a3 + 1960);
  if (a3[8] == 19)
  {
    llvm::VectorType::get((llvm::FixedVectorType *)(**(_QWORD **)a3 + 1960), (llvm::Type *)(a2 | 0x100000000));
    if (*a1)
      return llvm::UndefValue::get(v16, v17);
    else
      return (llvm::UndefValue *)llvm::Constant::getNullValue(v16, v17);
  }
  else
  {
    v18 = v20;
    v19 = 0x1000000000;
    if (a2)
    {
      v6 = 4 * a2;
      do
      {
        v7 = (llvm::Type *)*a1;
        if ((_DWORD)v7 == -1)
          v8 = llvm::UndefValue::get(v5, v7);
        else
          v8 = (llvm::UndefValue *)llvm::ConstantInt::get(v5, v7, 0, a4);
        v9 = v8;
        v10 = v19;
        if (v19 >= (unint64_t)HIDWORD(v19))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v19 + 1, 8);
          v10 = v19;
        }
        *((_QWORD *)v18 + v10) = v9;
        v11 = (v19 + 1);
        LODWORD(v19) = v19 + 1;
        ++a1;
        v6 -= 4;
      }
      while (v6);
      v12 = (llvm::FixedVectorType ***)v18;
    }
    else
    {
      v11 = 0;
      v12 = (llvm::FixedVectorType ***)v20;
    }
    Impl = (uint64_t)llvm::ConstantVector::getImpl(v12, (llvm::Type *)v11);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v12, (llvm::Type *)v11);
      Impl = sub_1C537B3A4(**v14 + 1288, (uint64_t)v14, v12, v11);
    }
    if (v18 != v20)
      free(v18);
    return (llvm::UndefValue *)Impl;
  }
}

uint64_t llvm::ShuffleVectorInst::isSingleSourceMask(int *a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 4 * a2;
    while (1)
    {
      v5 = *a1;
      if (*a1 != -1)
      {
        v2 |= v5 < (int)a2;
        v3 |= v5 >= (int)a2;
        if ((v2 & 1) != 0 && (v3 & 1) != 0)
          break;
      }
      ++a1;
      v4 -= 4;
      if (!v4)
        goto LABEL_9;
    }
    v6 = 0;
  }
  else
  {
    v3 = 0;
    v2 = 0;
LABEL_9:
    v6 = v2 | v3;
  }
  return v6 & 1;
}

uint64_t llvm::ShuffleVectorInst::isIdentityMask(int *a1, uint64_t a2)
{
  return sub_1C53EC390(a1, a2, a2);
}

uint64_t sub_1C53EC390(int *a1, uint64_t a2, int a3)
{
  char v3;
  char v4;
  uint64_t v5;
  int *v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 4 * a2;
    v6 = a1;
    while (1)
    {
      v7 = *v6;
      if (*v6 != -1)
      {
        v3 |= v7 < a3;
        v4 |= v7 >= a3;
        if ((v3 & 1) != 0 && (v4 & 1) != 0)
          return 0;
      }
      ++v6;
      v5 -= 4;
      if (!v5)
      {
        if ((v3 & 1) == 0)
          goto LABEL_10;
        goto LABEL_12;
      }
    }
  }
  v4 = 0;
LABEL_10:
  if ((v4 & 1) == 0)
    return 0;
LABEL_12:
  if ((int)a2 < 1)
    return 1;
  v9 = 0;
  do
  {
    v10 = a1[v9];
    v8 = (_DWORD)v10 == -1 || v9 == v10 || a3 + (_DWORD)v9 == (_DWORD)v10;
  }
  while (v8 && a2 - 1 != v9++);
  return v8;
}

uint64_t llvm::ShuffleVectorInst::isReverseMask(int *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  int i;
  int v10;
  int v11;
  BOOL v12;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 4 * a2;
    v5 = a1;
    while (1)
    {
      v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if ((v2 & 1) != 0 && (v3 & 1) != 0)
          break;
      }
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        if (((v2 | v3) & 1) == 0)
          return 0;
        v7 = a2 - 1;
        if ((int)a2 < 1)
          return 1;
        v8 = a2;
        for (i = 2 * a2 - 1; ; --i)
        {
          v11 = *a1++;
          v10 = v11;
          v12 = v11 == -1 || v7 == v10;
          if (!v12 && i != v10)
            break;
          --v7;
          if (!--v8)
            return 1;
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t llvm::ShuffleVectorInst::isZeroEltSplatMask(int *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 4 * a2;
    v5 = a1;
    while (1)
    {
      v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if ((v2 & 1) != 0 && (v3 & 1) != 0)
          break;
      }
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        if (((v2 | v3) & 1) == 0)
          return 0;
        if ((int)a2 < 1)
          return 1;
        v7 = a2;
        while (1)
        {
          v9 = *a1++;
          v8 = v9;
          if ((v9 + 1) >= 2 && v8 != (_DWORD)a2)
            break;
          if (!--v7)
            return 1;
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t llvm::ShuffleVectorInst::isSelectMask(int *a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int *v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 4 * a2;
    v5 = a1;
    while (1)
    {
      v6 = *v5;
      if (*v5 != -1)
      {
        v2 |= v6 < (int)a2;
        v3 |= v6 >= (int)a2;
        if ((v2 & 1) != 0 && (v3 & 1) != 0)
          break;
      }
      ++v5;
      v4 -= 4;
      if (!v4)
        goto LABEL_9;
    }
LABEL_11:
    if ((int)a2 < 1)
      return 1;
    v8 = 0;
    do
    {
      v9 = a1[v8];
      v7 = (_DWORD)v9 == -1 || v8 == v9 || (_DWORD)a2 + (_DWORD)v8 == (_DWORD)v9;
    }
    while (v7 && a2 - 1 != v8++);
    return v7;
  }
  v3 = 0;
  v2 = 0;
LABEL_9:
  v7 = 0;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
    goto LABEL_11;
  return v7;
}

uint64_t llvm::ShuffleVectorInst::isTransposeMask(_DWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint8x8_t v4;
  _DWORD *v5;
  uint64_t v6;

  result = 0;
  if ((int)a2 >= 2)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.i32[0] <= 1u)
    {
      if (*a1 > 1u || a1[1] - *a1 != a2)
        return 0;
      if (a2 >= 3)
      {
        v5 = a1 + 2;
        v6 = a2 - 2;
        result = 1;
        while (*v5 != -1 && *v5 - *(v5 - 2) == 2)
        {
          ++v5;
          if (!--v6)
            return result;
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::ShuffleVectorInst::isExtractSubvectorMask(int *a1, uint64_t a2, int a3, int *a4)
{
  char v4;
  char v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 4 * a2;
    v7 = a1;
    while (1)
    {
      v8 = *v7;
      if (*v7 != -1)
      {
        v4 |= v8 < a3;
        v5 |= v8 >= a3;
        if ((v4 & 1) != 0 && (v5 & 1) != 0)
          return 0;
      }
      ++v7;
      v6 -= 4;
      if (!v6)
      {
        if ((v4 & 1) == 0)
          goto LABEL_10;
        goto LABEL_13;
      }
    }
  }
  v5 = 0;
LABEL_10:
  if ((v5 & 1) == 0)
    return 0;
LABEL_13:
  v9 = 0;
  if ((int)a2 < a3 && (_DWORD)a2)
  {
    v11 = 0;
    v12 = -1;
    do
    {
      v14 = *a1++;
      v13 = v14;
      if ((v14 & 0x80000000) == 0)
      {
        v15 = v11 + v13 % a3;
        if ((v12 & 0x80000000) == 0 && v15 != v12)
          return 0;
        v12 = v15;
      }
      --v11;
    }
    while (-(uint64_t)a2 != v11);
    v9 = 0;
    if ((v12 & 0x80000000) == 0 && v12 + (int)a2 <= a3)
    {
      *a4 = v12;
      return 1;
    }
  }
  return v9;
}

uint64_t llvm::ShuffleVectorInst::isInsertSubvectorMask(int *a1, uint64_t a2, int a3, unsigned int *a4, _DWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  char v9;
  char v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  char v44;
  int v45;
  int v46;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;

  v5 = a2;
  if ((int)a2 < a3)
    return 0;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 4 * a2;
    v12 = a1;
    while (1)
    {
      v13 = *v12;
      if (*v12 != -1)
      {
        v9 |= v13 < a3;
        v10 |= v13 >= a3;
        if ((v9 & 1) != 0 && (v10 & 1) != 0)
          goto LABEL_13;
      }
      ++v12;
      v11 -= 4;
      if (!v11)
        goto LABEL_11;
    }
  }
  v10 = 0;
  v9 = 0;
LABEL_11:
  v6 = 0;
  if ((v9 & 1) == 0 && (v10 & 1) == 0)
  {
LABEL_13:
    v58 = a2;
    if (a2 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v57, 0, 0);
      v56 = v5;
      llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
      v54 = v5;
      llvm::APInt::initSlowCase((llvm::APInt *)&v53, 0, 0);
      v16 = v58;
      v15 = v54;
      v14 = v56;
    }
    else
    {
      v57 = 0;
      v56 = a2;
      v55 = 0;
      v54 = a2;
      v14 = a2;
      v15 = a2;
      v16 = a2;
      v53 = 0;
      if (!(_DWORD)a2)
      {
        v18 = 1;
        v19 = 1;
        goto LABEL_33;
      }
    }
    v17 = 0;
    v18 = 1;
    v19 = 1;
    do
    {
      v20 = a1[v17];
      if ((v20 & 0x80000000) != 0)
      {
        v22 = 1 << v17;
        if (v16 > 0x40)
          *(_QWORD *)(v57 + 8 * (v17 >> 6)) |= v22;
        else
          v57 |= v22;
      }
      else
      {
        v21 = 1 << v17;
        if ((int)v20 >= a3)
        {
          if (v15 > 0x40)
            *(_QWORD *)(v53 + 8 * (v17 >> 6)) |= v21;
          else
            v53 |= v21;
          v19 &= a3 + (_DWORD)v17 == (_DWORD)v20;
        }
        else
        {
          if (v14 > 0x40)
            *(_QWORD *)(v55 + 8 * (v17 >> 6)) |= v21;
          else
            v55 |= v21;
          v18 &= v17 == v20;
        }
      }
      ++v17;
    }
    while (v5 != v17);
    if (v14 > 0x40)
    {
      v50 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v55);
      v23 = 0;
      goto LABEL_36;
    }
LABEL_33:
    v24 = __clz(__rbit64(v55));
    if (v14 < v24)
      v24 = v14;
    v50 = v24;
    v23 = 1;
LABEL_36:
    if (v15 > 0x40)
    {
      v26 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v53);
      if (!v23)
      {
LABEL_41:
        v27 = 0;
        v28 = ((unint64_t)v14 + 63) >> 6;
        v29 = v55;
        do
        {
          v30 = v28-- < 1;
          if (v30)
            break;
          v31 = *(_QWORD *)(v55 + 8 * v28);
          v27 += __clz(v31);
        }
        while (!v31);
        v32 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0)
          v32 = 0;
        v33 = v27 + v32;
LABEL_49:
        if (v15 > 0x40)
        {
          v36 = 0;
          v37 = ((unint64_t)v15 + 63) >> 6;
          v34 = v53;
          do
          {
            v30 = v37-- < 1;
            if (v30)
              break;
            v38 = *(_QWORD *)(v53 + 8 * v37);
            v36 += __clz(v38);
          }
          while (!v38);
          v39 = v15 | 0xFFFFFFC0;
          if ((v15 & 0x3F) == 0)
            v39 = 0;
          v35 = v36 + v39;
          if ((v18 & 1) == 0)
          {
LABEL_59:
            if ((v19 & 1) == 0
              || (v40 = v5 - (v50 + v33), v46 = sub_1C53EC390(&a1[v50], (int)v40, a3), v45 = v50, !v46))
            {
              v6 = 0;
LABEL_63:
              if (v15 >= 0x41 && v34)
                MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
              if (v14 >= 0x41 && v29)
                MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
              if (v16 >= 0x41 && v57)
                MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
              return v6;
            }
LABEL_61:
            *a4 = v40;
            *a5 = v45;
            v6 = 1;
            goto LABEL_63;
          }
        }
        else
        {
          v34 = v53;
          v35 = v15 + __clz(v53) - 64;
          if ((v18 & 1) == 0)
            goto LABEL_59;
        }
        v40 = v5 - v26 - v35;
        v48 = v14;
        v49 = v15;
        v41 = v16;
        v42 = v26;
        v43 = v33;
        v44 = sub_1C53EC390(&a1[v26], (int)v40, a3);
        v33 = v43;
        v45 = v42;
        v16 = v41;
        v14 = v48;
        v15 = v49;
        if ((v44 & 1) != 0)
          goto LABEL_61;
        goto LABEL_59;
      }
    }
    else
    {
      v25 = __clz(__rbit64(v53));
      if (v15 >= v25)
        v26 = v25;
      else
        v26 = v15;
      if (!v23)
        goto LABEL_41;
    }
    v29 = v55;
    v33 = v14 + __clz(v55) - 64;
    goto LABEL_49;
  }
  return v6;
}

uint64_t llvm::ShuffleVectorInst::isIdentityWithPadding(llvm::ShuffleVectorInst *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int *v4;
  uint64_t result;
  int v6;
  int *v7;
  int v8;
  int v9;
  BOOL v11;

  v1 = *(_QWORD *)this;
  if (*(unsigned __int8 *)(*(_QWORD *)this + 16) - 11 < 2)
    return 0;
  if (*(_BYTE *)(v1 + 8) == 19)
    return 0;
  v2 = *(int *)(**((_QWORD **)this - 8) + 32);
  v3 = *(_DWORD *)(v1 + 32);
  if (v3 <= (int)v2)
    return 0;
  v4 = (int *)*((_QWORD *)this + 8);
  result = sub_1C53EC390(v4, *((unsigned int *)this + 18), v2);
  if ((_DWORD)result)
  {
    v6 = ~(_DWORD)v2 + v3;
    v7 = &v4[v2];
    do
    {
      v9 = *v7++;
      v8 = v9;
      v11 = v6-- != 0;
      result = v8 == -1;
    }
    while (v8 == -1 && v11);
  }
  return result;
}

uint64_t llvm::ShuffleVectorInst::isIdentityWithExtract(llvm::ShuffleVectorInst *this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)this;
  if (*(unsigned __int8 *)(*(_QWORD *)this + 16) - 11 < 2)
    return 0;
  if (*(_BYTE *)(v1 + 8) == 19)
    return 0;
  v2 = *(_DWORD *)(**((_QWORD **)this - 8) + 32);
  if (*(_DWORD *)(v1 + 32) >= v2)
    return 0;
  else
    return sub_1C53EC390(*((int **)this + 8), *((unsigned int *)this + 18), v2);
}

uint64_t llvm::ShuffleVectorInst::isConcat(llvm::ShuffleVectorInst *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;

  v1 = (unsigned __int8 *)*((_QWORD *)this - 8);
  if (v1[16] - 11 < 2)
    return 0;
  if (*(unsigned __int8 *)(*((_QWORD *)this - 4) + 16) - 11 < 2)
    return 0;
  v2 = *(_QWORD *)this;
  if (*(unsigned __int8 *)(*(_QWORD *)this + 16) - 11 < 2)
    return 0;
  if (*(_BYTE *)(v2 + 8) == 19)
    return 0;
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 != 2 * *(_DWORD *)(*(_QWORD *)v1 + 32))
    return 0;
  else
    return sub_1C53EC390(*((int **)this + 8), *((unsigned int *)this + 18), v3);
}

uint64_t llvm::ShuffleVectorInst::isReplicationMask(_DWORD *a1, unint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;

  if (a2)
  {
    v4 = 4 * a2;
    v5 = 4 * a2;
    v6 = a1;
    while (*v6 != -1)
    {
      ++v6;
      v5 -= 4;
      if (!v5)
      {
        v7 = (char *)a1;
        while (!*(_DWORD *)v7)
        {
          v7 += 4;
          v4 -= 4;
          if (!v4)
          {
            v7 = (char *)&a1[a2];
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
    }
    v11 = -1;
    v12 = a1;
    while (1)
    {
      if (*v12 != -1)
      {
        v13 = *v12 < v11;
        v11 = *v12;
        if (v13)
          return 0;
      }
      ++v12;
      v4 -= 4;
      if (!v4)
      {
        v8 = a2;
        if ((_DWORD)a2)
        {
          while (1)
          {
            v14 = a2 / (int)v8;
            if (!(a2 % (int)v8))
            {
              if (!(v14 << 32))
              {
LABEL_35:
                *a3 = v8;
                *a4 = v14;
                return 1;
              }
              v15 = 0;
              v16 = a1;
              v17 = a2;
              while (1)
              {
                v18 = v17 - (int)v8;
                v19 = v17 >= (int)v8 ? (int)v8 : v17;
                if (v19)
                  break;
LABEL_34:
                ++v15;
                v16 += (int)v8;
                v17 = v18;
                if (v15 == (int)v14)
                  goto LABEL_35;
              }
              v20 = 0;
              v21 = 4 * v19;
              while (1)
              {
                v22 = v16[v20 / 4];
                if (v22 != -1 && v22 != (_DWORD)v15)
                  break;
                v20 += 4;
                if (v21 == v20)
                  goto LABEL_34;
              }
            }
            if (!--v8)
              return v8;
          }
        }
        return v8;
      }
    }
  }
  v7 = (char *)a1;
LABEL_10:
  v8 = (unint64_t)(v7 - (char *)a1) >> 2;
  *a3 = v8;
  if ((_DWORD)v8)
  {
    v9 = (int)v8;
    v10 = a2 / (int)v8;
    if (a2 == v10 * v9)
    {
      *a4 = v10;
      if (!(v10 << 32))
        return 1;
      v24 = 0;
      v25 = (int)v10;
      v26 = *a3;
      while (1)
      {
        v27 = a2 >= v26 ? *a3 : a2;
        if (v27)
          break;
LABEL_49:
        ++v24;
        a1 += v26;
        v8 = 1;
        a2 -= v26;
        if (v24 == v25)
          return v8;
      }
      v28 = 0;
      v29 = 4 * v27;
      while (1)
      {
        v30 = a1[v28 / 4];
        if (v30 != -1 && v30 != (_DWORD)v24)
          break;
        v28 += 4;
        if (v29 == v28)
          goto LABEL_49;
      }
    }
    return 0;
  }
  return v8;
}

uint64_t llvm::ShuffleVectorInst::isReplicationMask(llvm::ShuffleVectorInst *this, int *a2, int *a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 19)
    return 0;
  v3 = *(_DWORD *)(**((_QWORD **)this - 8) + 32);
  *a3 = v3;
  v4 = *((unsigned int *)this + 18);
  v5 = v4 / v3;
  if (v4 % v3)
    return 0;
  *a2 = v5;
  v7 = *a3;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *((unsigned int *)this + 18);
    v10 = (_DWORD *)*((_QWORD *)this + 8);
    result = 1;
    while (1)
    {
      v11 = v9 - (int)v5;
      if (v9 >= (int)v5)
        v9 = (int)v5;
      if (v9)
        break;
LABEL_16:
      v10 += (int)v5;
      ++v8;
      v9 = v11;
      if (v8 == v7)
        return result;
    }
    v12 = &v10[v9];
    v13 = v10;
    while (*v13 == -1 || *v13 == (_DWORD)v8)
    {
      if (++v13 == v12)
        goto LABEL_16;
    }
    return 0;
  }
  return 1;
}

void llvm::InsertValueInst::init(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v21 = *(_QWORD *)(a1 - 56);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v11 = (_QWORD *)(a2 + 8);
    v12 = v13;
    *(_QWORD *)(a1 - 56) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v11;
    *v11 = v10;
  }
  v14 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v22 = *(_QWORD *)(a1 - 24);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v14 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v15 = (_QWORD *)(a3 + 8);
    v16 = v17;
    *(_QWORD *)(a1 - 24) = v17;
    if (v17)
      *(_QWORD *)(v16 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v15;
    *v15 = v14;
  }
  v18 = 4 * a5;
  v19 = *(unsigned int *)(a1 + 72);
  v20 = v19 + ((4 * a5) >> 2);
  if (v20 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v20, 4);
    LODWORD(v19) = *(_DWORD *)(a1 + 72);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 4 * v19), __src, 4 * a5);
    LODWORD(v19) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v19 + (v18 >> 2);
  llvm::Value::setName((uint64_t ***)a1, a6);
}

uint64_t llvm::InsertValueInst::InsertValueInst(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int v5;
  void *v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_DWORD *)(a1 + 16) = 93;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v7 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0x400000000;
  v8 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v8 && a1 != a2)
  {
    if (v8 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (uint64_t)v6, v8, 4);
      v9 = *(unsigned int *)(a2 + 72);
      if (!(_DWORD)v9)
        goto LABEL_6;
      v6 = *v7;
    }
    else
    {
      v9 = *(unsigned int *)(a2 + 72);
    }
    memcpy(v6, *(const void **)(a2 + 64), 4 * v9);
LABEL_6:
    *(_DWORD *)(a1 + 72) = v8;
  }
  v10 = *(_QWORD *)(a2 - 64);
  if (*v4)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v20 = *(_QWORD *)(a1 - 56);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v4 = v10;
  if (v10)
  {
    v13 = *(_QWORD *)(v10 + 8);
    v11 = (_QWORD *)(v10 + 8);
    v12 = v13;
    *(_QWORD *)(a1 - 56) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v11;
    *v11 = v4;
  }
  v14 = *(_QWORD *)(a2 - 32);
  v15 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v21 = *(_QWORD *)(a1 - 24);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v15 = v14;
  if (v14)
  {
    v18 = *(_QWORD *)(v14 + 8);
    v16 = (_QWORD *)(v14 + 8);
    v17 = v18;
    *(_QWORD *)(a1 - 24) = v18;
    if (v18)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v16;
    *v16 = v15;
  }
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

void llvm::ExtractValueInst::init(uint64_t a1, void *__src, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;

  v8 = 4 * a3;
  v9 = *(unsigned int *)(a1 + 72);
  v10 = v9 + ((4 * a3) >> 2);
  if (v10 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v10, 4);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  if (a3)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 64) + 4 * v9), __src, v8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v9 + (v8 >> 2);
  llvm::Value::setName((uint64_t ***)a1, a4);
}

uint64_t llvm::ExtractValueInst::ExtractValueInst(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 - 32);
  v5 = (_QWORD *)(a1 - 32);
  v6 = *(_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 92;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (v6)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v15 = *(_QWORD *)(a1 - 24);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v5 = v4;
  if (v4)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v7 = (_QWORD *)(v4 + 8);
    v8 = v9;
    *(_QWORD *)(a1 - 24) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v7;
    *v7 = v5;
  }
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0x400000000;
  v12 = *(_DWORD *)(a2 + 72);
  if (v12 && a1 != a2)
  {
    if (v12 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, *(unsigned int *)(a2 + 72), 4);
      v13 = *(unsigned int *)(a2 + 72);
      if (!(_DWORD)v13)
        goto LABEL_11;
      v10 = *v11;
    }
    else
    {
      v13 = *(unsigned int *)(a2 + 72);
    }
    memcpy(v10, *(const void **)(a2 + 64), 4 * v13);
LABEL_11:
    *(_DWORD *)(a1 + 72) = v12;
  }
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

uint64_t llvm::ExtractValueInst::getIndexedType(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;

  if (a3)
  {
    v3 = 4 * a3;
    while (1)
    {
      v4 = *a2;
      v5 = *(unsigned __int8 *)(a1 + 8);
      if (a1 && v5 == 17)
      {
        if (*(_QWORD *)(a1 + 32) <= v4)
          return 0;
        v7 = (uint64_t *)(a1 + 24);
      }
      else
      {
        v6 = 0;
        if (!a1 || v5 != 16)
          return v6;
        if (v4 >= *(_DWORD *)(a1 + 12))
          return 0;
        v7 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v4);
      }
      a1 = *v7;
      ++a2;
      v6 = *v7;
      v3 -= 4;
      if (!v3)
        return v6;
    }
  }
  return a1;
}

uint64_t llvm::UnaryOperator::UnaryOperator(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ValueSymbolTable *v21;
  uint64_t v22;

  v9 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    v17 = *(_QWORD *)(a6 + 40);
    v18 = (uint64_t *)(a6 + 24);
    *(_QWORD *)(a1 + 40) = v17;
    *(_WORD *)(v17 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v20 = *(_QWORD *)(v17 + 56);
      if (v20)
      {
        v21 = *(llvm::ValueSymbolTable **)(v20 + 104);
        if (v21)
          llvm::ValueSymbolTable::reinsertValue(v21, (llvm::Value *)a1);
      }
    }
    v19 = *v18;
    *(_QWORD *)(a1 + 24) = *v18;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(v19 + 8) = v10;
    *v18 = v10;
  }
  if (*v9)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v22 = *(_QWORD *)(a1 - 24);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v9 = a3;
  if (a3)
  {
    v11 = (_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a1 - 24) = v12;
    v13 = (_QWORD *)(a1 - 24);
    if (v12)
      *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)(a1 - 16) = v11;
    *v11 = v9;
    if (*(_QWORD *)(a1 - 32))
    {
      **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
      v14 = *(_QWORD *)(a1 - 24);
      if (v14)
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(a1 - 16);
    }
    *v9 = a3;
    v15 = *(_QWORD *)(a3 + 8);
    *v13 = v15;
    if (v15)
      *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(a1 - 16) = v11;
    *v11 = v9;
  }
  else
  {
    *v9 = 0;
  }
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

uint64_t ***llvm::UnaryOperator::UnaryOperator(uint64_t ***a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;

  v9 = (uint64_t *)(sub_1C53E82F0((uint64_t)a1, a4, a2, a3, a6) - 32);
  if (*v9)
  {
    **(a1 - 2) = (uint64_t *)*(a1 - 3);
    v10 = (uint64_t)*(a1 - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *(a1 - 2);
  }
  *v9 = a3;
  if (a3)
  {
    v13 = *(uint64_t ***)(a3 + 8);
    v12 = (uint64_t **)(a3 + 8);
    v11 = v13;
    *(a1 - 3) = v13;
    if (v13)
      v11[2] = (uint64_t *)(a1 - 3);
    *(a1 - 2) = v12;
    *v12 = v9;
  }
  llvm::Value::setName(a1, a5);
  return a1;
}

uint64_t llvm::UnaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;

  v8 = operator new(0x60uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  return llvm::UnaryOperator::UnaryOperator((uint64_t)(v8 + 8), a1, (uint64_t)a2, *a2, a3, a4);
}

llvm::Value *llvm::UnaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  llvm::Value *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  v8 = operator new(0x60uLL);
  v9 = (llvm::Value *)(v8 + 8);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  llvm::UnaryOperator::UnaryOperator((uint64_t)(v8 + 8), a1, (uint64_t)a2, *a2, a3, 0);
  *((_QWORD *)v8 + 9) = a4;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v8 + 55) & 0x10) != 0)
  {
    v14 = *(_QWORD *)(a4 + 56);
    if (v14)
    {
      v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
      if (v15)
        llvm::ValueSymbolTable::reinsertValue(v15, v9);
    }
  }
  v11 = *(_QWORD *)(a4 + 40);
  v10 = (_QWORD *)(a4 + 40);
  *((_QWORD *)v8 + 7) = v11;
  *((_QWORD *)v8 + 8) = v10;
  v12 = (char *)(v8 + 14);
  *(_QWORD *)(v11 + 8) = v12;
  *v10 = v12;
  return v9;
}

llvm::Instruction *llvm::BinaryOperator::BinaryOperator(llvm::Instruction *a1, char a2, uint64_t a3, uint64_t a4, llvm::Type *a5, uint64_t a6, llvm::Instruction *a7)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v11 = (_QWORD *)((char *)a1 - 64);
  if (*((_QWORD *)llvm::Instruction::Instruction(a1, a5, a2, (llvm::Instruction *)((char *)a1 - 64), 2, a7) - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v20 = *((_QWORD *)a1 - 7);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a1 - 6);
  }
  *v11 = a3;
  if (a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v13 = (_QWORD *)(a3 + 8);
    v12 = v14;
    *((_QWORD *)a1 - 7) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = (char *)a1 - 56;
    *((_QWORD *)a1 - 6) = v13;
    *v13 = v11;
  }
  v15 = (_QWORD *)((char *)a1 - 32);
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v21 = *((_QWORD *)a1 - 3);
    if (v21)
      *(_QWORD *)(v21 + 16) = *((_QWORD *)a1 - 2);
  }
  *v15 = a4;
  if (a4)
  {
    v18 = *(_QWORD *)(a4 + 8);
    v17 = (_QWORD *)(a4 + 8);
    v16 = v18;
    *((_QWORD *)a1 - 3) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = (char *)a1 - 24;
    *((_QWORD *)a1 - 2) = v17;
    *v17 = v15;
  }
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

uint64_t llvm::BinaryOperator::BinaryOperator(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;

  v11 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a7)
  {
    v21 = *(_QWORD *)(a7 + 40);
    v22 = (uint64_t *)(a7 + 24);
    *(_QWORD *)(a1 + 40) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v24 = *(_QWORD *)(v21 + 56);
      if (v24)
      {
        v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
        if (v25)
          llvm::ValueSymbolTable::reinsertValue(v25, (llvm::Value *)a1);
      }
    }
    v23 = *v22;
    *(_QWORD *)(a1 + 24) = *v22;
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(v23 + 8) = v12;
    *v22 = v12;
  }
  if (*v11)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v26 = *(_QWORD *)(a1 - 56);
    if (v26)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v11 = a3;
  if (a3)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v14 = (_QWORD *)(a3 + 8);
    v13 = v15;
    *(_QWORD *)(a1 - 56) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v14;
    *v14 = v11;
  }
  v16 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v27 = *(_QWORD *)(a1 - 24);
    if (v27)
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a4;
  if (a4)
  {
    v19 = *(_QWORD *)(a4 + 8);
    v18 = (_QWORD *)(a4 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v18;
    *v18 = v16;
  }
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;

  v12 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a2 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a7;
  *(_WORD *)(a7 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v26 = *(_QWORD *)(a7 + 56);
    if (v26)
    {
      v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
      if (v27)
        llvm::ValueSymbolTable::reinsertValue(v27, (llvm::Value *)a1);
    }
  }
  v15 = *(_QWORD *)(a7 + 40);
  v14 = (_QWORD *)(a7 + 40);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(v15 + 8) = v13;
  *v14 = v13;
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v16 = *(_QWORD *)(a1 - 56);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v12 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *(_QWORD *)(a1 - 56) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v18;
    *v18 = v12;
  }
  v20 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v21 = *(_QWORD *)(a1 - 24);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v20 = a4;
  if (a4)
  {
    v24 = *(_QWORD *)(a4 + 8);
    v23 = (_QWORD *)(a4 + 8);
    v22 = v24;
    *(_QWORD *)(a1 - 24) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v23;
    *v23 = v20;
  }
  llvm::Value::setName((uint64_t ***)a1, a6);
  return a1;
}

llvm::Value *llvm::BinaryOperator::Create(char a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  llvm::Value *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (char *)operator new(0x80uLL);
  v11 = v10;
  *((_QWORD *)v10 + 8) = *a2;
  v12 = (llvm::Value *)(v10 + 64);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 64;
  *((_QWORD *)v10 + 4) = 0;
  v13 = v10 + 32;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = v10 + 64;
  *((_QWORD *)v10 + 9) = 0;
  v10[80] = a1 + 28;
  v10[81] = 0;
  *((_WORD *)v10 + 41) = 0;
  *((_DWORD *)v10 + 21) = 2;
  *(_OWORD *)(v10 + 88) = 0u;
  v14 = v10 + 88;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  if (a5)
  {
    v22 = *(_QWORD *)(a5 + 40);
    v23 = (uint64_t *)(a5 + 24);
    *((_QWORD *)v10 + 13) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((v10[87] & 0x10) != 0
      && (v25 = *(_QWORD *)(v22 + 56)) != 0
      && (v26 = *(llvm::ValueSymbolTable **)(v25 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v26, v12);
      v27 = *(_QWORD *)v11;
      v28 = *v23;
      *((_QWORD *)v11 + 11) = *v23;
      *((_QWORD *)v11 + 12) = v23;
      *(_QWORD *)(v28 + 8) = v14;
      *v23 = (uint64_t)v14;
      if (v27)
      {
        **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
        v29 = *((_QWORD *)v11 + 1);
        if (v29)
          *(_QWORD *)(v29 + 16) = *((_QWORD *)v11 + 2);
      }
    }
    else
    {
      v24 = *v23;
      *((_QWORD *)v11 + 11) = *v23;
      *((_QWORD *)v11 + 12) = v23;
      *(_QWORD *)(v24 + 8) = v14;
      *v23 = (uint64_t)v14;
    }
  }
  *(_QWORD *)v11 = a2;
  v17 = a2[1];
  v16 = a2 + 1;
  v15 = v17;
  *((_QWORD *)v11 + 1) = v17;
  if (v17)
    *(_QWORD *)(v15 + 16) = v11 + 8;
  *((_QWORD *)v11 + 2) = v16;
  *v16 = v11;
  if (*((_QWORD *)v11 + 4))
  {
    **((_QWORD **)v11 + 6) = *((_QWORD *)v11 + 5);
    v30 = *((_QWORD *)v11 + 5);
    if (v30)
      *(_QWORD *)(v30 + 16) = *((_QWORD *)v11 + 6);
  }
  *v13 = a3;
  if (a3)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a3 + 8);
    v18 = v20;
    *((_QWORD *)v11 + 5) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = v11 + 40;
    *((_QWORD *)v11 + 6) = v19;
    *v19 = v13;
  }
  llvm::Value::setName((uint64_t ***)v12, a4);
  return v12;
}

{
  char *v10;
  char *v11;
  llvm::Value *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;

  v10 = (char *)operator new(0x80uLL);
  v11 = v10;
  *((_QWORD *)v10 + 8) = *a2;
  v12 = (llvm::Value *)(v10 + 64);
  *((_QWORD *)v10 + 3) = v10 + 64;
  *((_QWORD *)v10 + 5) = 0;
  v13 = v10 + 40;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = v10 + 64;
  *((_QWORD *)v10 + 9) = 0;
  v10[80] = a1 + 28;
  v10[81] = 0;
  *((_WORD *)v10 + 41) = 0;
  *((_DWORD *)v10 + 21) = 2;
  *(_OWORD *)(v10 + 88) = 0u;
  v14 = v10 + 88;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  v15 = a2 + 1;
  v16 = a2[1];
  *(_QWORD *)v10 = a2;
  *((_QWORD *)v10 + 1) = v16;
  if (v16)
    *(_QWORD *)(v16 + 16) = v10 + 8;
  *((_QWORD *)v10 + 2) = v15;
  *v15 = v10;
  *((_QWORD *)v10 + 4) = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *v13 = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = v13;
    *((_QWORD *)v10 + 6) = v18;
    *v18 = v10 + 32;
  }
  llvm::Value::setName((uint64_t ***)v10 + 8, a4);
  *((_QWORD *)v11 + 13) = a5;
  *(_WORD *)(a5 + 18) &= ~0x8000u;
  if ((v11[87] & 0x10) != 0)
  {
    v23 = *(_QWORD *)(a5 + 56);
    if (v23)
    {
      v24 = *(llvm::ValueSymbolTable **)(v23 + 104);
      if (v24)
        llvm::ValueSymbolTable::reinsertValue(v24, v12);
    }
  }
  v21 = *(_QWORD *)(a5 + 40);
  v20 = (_QWORD *)(a5 + 40);
  *((_QWORD *)v11 + 11) = v21;
  *((_QWORD *)v11 + 12) = v20;
  *(_QWORD *)(v21 + 8) = v14;
  *v20 = v14;
  return v12;
}

llvm::Value *llvm::BinaryOperator::CreateNeg(uint64_t *a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *Zero;
  _QWORD *v9;
  char *v10;
  char *v11;
  llvm::Value *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *a1;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(v6 + 8);
  if (v7 <= 6)
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v6, (llvm::Type *)1);
  else
    Zero = llvm::Constant::getNullValue((llvm::Constant *)v6, a2);
  v9 = Zero;
  v10 = (char *)operator new(0x80uLL);
  v11 = v10;
  *((_QWORD *)v10 + 8) = *a1;
  v12 = (llvm::Value *)(v10 + 64);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 64;
  *((_QWORD *)v10 + 4) = 0;
  v13 = v10 + 32;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = v10 + 64;
  *((_QWORD *)v10 + 9) = 0;
  *((_QWORD *)v10 + 10) = 0x20000002BLL;
  *(_OWORD *)(v10 + 88) = 0u;
  v14 = v10 + 88;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 30) = 0;
  if (a3)
  {
    v21 = *(_QWORD *)(a3 + 40);
    v22 = (uint64_t *)(a3 + 24);
    *((_QWORD *)v10 + 13) = v21;
    *(_WORD *)(v21 + 18) &= ~0x8000u;
    if ((v10[87] & 0x10) != 0
      && (v24 = *(_QWORD *)(v21 + 56)) != 0
      && (v25 = *(llvm::ValueSymbolTable **)(v24 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v25, v12);
      v26 = *(_QWORD *)v11;
      v27 = *v22;
      *((_QWORD *)v11 + 11) = *v22;
      *((_QWORD *)v11 + 12) = v22;
      *(_QWORD *)(v27 + 8) = v14;
      *v22 = (uint64_t)v14;
      if (v26)
      {
        **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
        v28 = *((_QWORD *)v11 + 1);
        if (v28)
          *(_QWORD *)(v28 + 16) = *((_QWORD *)v11 + 2);
      }
    }
    else
    {
      v23 = *v22;
      *((_QWORD *)v11 + 11) = *v22;
      *((_QWORD *)v11 + 12) = v22;
      *(_QWORD *)(v23 + 8) = v14;
      *v22 = (uint64_t)v14;
    }
  }
  *(_QWORD *)v11 = v9;
  if (v9)
  {
    v17 = v9[1];
    v16 = v9 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
  }
  if (*v13)
  {
    **((_QWORD **)v11 + 6) = *((_QWORD *)v11 + 5);
    v29 = *((_QWORD *)v11 + 5);
    if (v29)
      *(_QWORD *)(v29 + 16) = *((_QWORD *)v11 + 6);
  }
  v18 = a1 + 1;
  v19 = a1[1];
  *((_QWORD *)v11 + 5) = v19;
  *((_QWORD *)v11 + 4) = a1;
  if (v19)
    *(_QWORD *)(v19 + 16) = v11 + 40;
  *((_QWORD *)v11 + 6) = v18;
  *v18 = v13;
  llvm::Value::setName((uint64_t ***)v12, (uint64_t)a2);
  return v12;
}

uint64_t llvm::BinaryOperator::CreateNeg(llvm::ConstantFP **a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Value **ZeroValueForNegation;
  _DWORD *v7;

  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*a1, a2);
  v7 = operator new(0x80uLL);
  v7[21] = v7[21] & 0x38000000 | 2;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 16;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v7 + 16;
  return llvm::BinaryOperator::BinaryOperator((uint64_t)(v7 + 16), 15, (uint64_t)ZeroValueForNegation, (uint64_t)a1, (uint64_t)*a1, (uint64_t)a2, a3);
}

llvm::Value *llvm::BinaryOperator::CreateNSWNeg(llvm::ConstantFP **a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Value **ZeroValueForNegation;
  llvm::Value *result;

  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*a1, a2);
  result = llvm::BinaryOperator::Create(15, ZeroValueForNegation, (uint64_t)a1, (uint64_t)a2, a3);
  *((_BYTE *)result + 17) |= 4u;
  return result;
}

llvm::Value *llvm::BinaryOperator::CreateNUWNeg(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Value **ZeroValueForNegation;
  char *v7;
  char *v8;
  char *v9;
  llvm::Value *v10;
  char *v11;
  llvm::Value *v12;
  _QWORD *v13;
  llvm::Value *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ValueSymbolTable *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*(llvm::ConstantFP **)a1, a2);
  v7 = (char *)operator new(0x80uLL);
  v8 = v7;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 4) = 0;
  v9 = v7 + 32;
  *((_QWORD *)v7 + 8) = *ZeroValueForNegation;
  v10 = (llvm::Value *)(v7 + 64);
  *((_QWORD *)v7 + 3) = v7 + 64;
  *((_QWORD *)v7 + 7) = v7 + 64;
  *((_QWORD *)v7 + 9) = 0;
  v7[80] = 43;
  v7[81] = 0;
  *((_WORD *)v7 + 41) = 0;
  *((_DWORD *)v7 + 21) = 2;
  *(_OWORD *)(v7 + 88) = 0u;
  v11 = v7 + 88;
  *((_DWORD *)v7 + 30) = 0;
  *(_OWORD *)(v7 + 104) = 0u;
  if (a3)
  {
    v18 = *(_QWORD *)(a3 + 40);
    v19 = (uint64_t *)(a3 + 24);
    *((_QWORD *)v7 + 13) = v18;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    if ((v7[87] & 0x10) != 0
      && (v21 = *(_QWORD *)(v18 + 56)) != 0
      && (v22 = *(llvm::ValueSymbolTable **)(v21 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v22, v10);
      v23 = *(_QWORD *)v8;
      v24 = *v19;
      *((_QWORD *)v8 + 11) = *v19;
      *((_QWORD *)v8 + 12) = v19;
      *(_QWORD *)(v24 + 8) = v11;
      *v19 = (uint64_t)v11;
      if (v23)
      {
        **((_QWORD **)v8 + 2) = *((_QWORD *)v8 + 1);
        v25 = *((_QWORD *)v8 + 1);
        if (v25)
          *(_QWORD *)(v25 + 16) = *((_QWORD *)v8 + 2);
      }
    }
    else
    {
      v20 = *v19;
      *((_QWORD *)v8 + 11) = *v19;
      *((_QWORD *)v8 + 12) = v19;
      *(_QWORD *)(v20 + 8) = v11;
      *v19 = (uint64_t)v11;
    }
  }
  *(_QWORD *)v8 = ZeroValueForNegation;
  v14 = ZeroValueForNegation[1];
  v13 = ZeroValueForNegation + 1;
  v12 = v14;
  *((_QWORD *)v8 + 1) = v14;
  if (v14)
    *((_QWORD *)v12 + 2) = v8 + 8;
  *((_QWORD *)v8 + 2) = v13;
  *v13 = v8;
  if (*((_QWORD *)v8 + 4))
  {
    **((_QWORD **)v8 + 6) = *((_QWORD *)v8 + 5);
    v26 = *((_QWORD *)v8 + 5);
    if (v26)
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v8 + 6);
  }
  v15 = (_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 8);
  *((_QWORD *)v8 + 5) = v16;
  *((_QWORD *)v8 + 4) = a1;
  if (v16)
    *(_QWORD *)(v16 + 16) = v8 + 40;
  *((_QWORD *)v8 + 6) = v15;
  *v15 = v9;
  llvm::Value::setName((uint64_t ***)v10, (uint64_t)a2);
  v8[81] |= 2u;
  return v10;
}

llvm::Value *llvm::BinaryOperator::CreateNUWNeg(llvm::ConstantFP **a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Value **ZeroValueForNegation;
  llvm::Value *result;

  ZeroValueForNegation = llvm::ConstantFP::getZeroValueForNegation(*a1, a2);
  result = llvm::BinaryOperator::Create(15, ZeroValueForNegation, (uint64_t)a1, (uint64_t)a2, a3);
  *((_BYTE *)result + 17) |= 2u;
  return result;
}

llvm::Value *llvm::BinaryOperator::CreateNot(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  llvm::ValueHandleBase *AllOnesValue;
  char *v7;
  char *v8;
  llvm::Value *v9;
  llvm::ValueHandleBase **v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ValueHandleBase ***v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, a2);
  v7 = (char *)operator new(0x80uLL);
  v8 = v7;
  *((_QWORD *)v7 + 8) = *(_QWORD *)a1;
  v9 = (llvm::Value *)(v7 + 64);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 64;
  *((_QWORD *)v7 + 4) = 0;
  v10 = (llvm::ValueHandleBase **)(v7 + 32);
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v7 + 64;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0x20000003ALL;
  *(_OWORD *)(v7 + 88) = 0u;
  v11 = v7 + 88;
  *(_OWORD *)(v7 + 104) = 0u;
  *((_DWORD *)v7 + 30) = 0;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 40);
    v20 = (uint64_t *)(a3 + 24);
    *((_QWORD *)v7 + 13) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((v7[87] & 0x10) != 0
      && (v22 = *(_QWORD *)(v19 + 56)) != 0
      && (v23 = *(llvm::ValueSymbolTable **)(v22 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v23, v9);
      v24 = *(_QWORD *)v8;
      v25 = *v20;
      *((_QWORD *)v8 + 11) = *v20;
      *((_QWORD *)v8 + 12) = v20;
      *(_QWORD *)(v25 + 8) = v11;
      *v20 = (uint64_t)v11;
      if (v24)
      {
        **((_QWORD **)v8 + 2) = *((_QWORD *)v8 + 1);
        v26 = *((_QWORD *)v8 + 1);
        if (v26)
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v8 + 2);
      }
    }
    else
    {
      v21 = *v20;
      *((_QWORD *)v8 + 11) = *v20;
      *((_QWORD *)v8 + 12) = v20;
      *(_QWORD *)(v21 + 8) = v11;
      *v20 = (uint64_t)v11;
    }
  }
  *(_QWORD *)v8 = a1;
  v14 = *(_QWORD *)(a1 + 8);
  v13 = (_QWORD *)(a1 + 8);
  v12 = v14;
  *((_QWORD *)v8 + 1) = v14;
  if (v14)
    *(_QWORD *)(v12 + 16) = v8 + 8;
  *((_QWORD *)v8 + 2) = v13;
  *v13 = v8;
  if (*((_QWORD *)v8 + 4))
  {
    **((_QWORD **)v8 + 6) = *((_QWORD *)v8 + 5);
    v27 = *((_QWORD *)v8 + 5);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v8 + 6);
  }
  *v10 = AllOnesValue;
  if (AllOnesValue)
  {
    v17 = *((_QWORD *)AllOnesValue + 1);
    v16 = (llvm::ValueHandleBase ***)((char *)AllOnesValue + 8);
    v15 = v17;
    *((_QWORD *)v8 + 5) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v8 + 40;
    *((_QWORD *)v8 + 6) = v16;
    *v16 = v10;
  }
  llvm::Value::setName((uint64_t ***)v9, (uint64_t)a2);
  return v9;
}

uint64_t llvm::BinaryOperator::CreateNot(llvm::Constant **a1, llvm::Type *a2, uint64_t a3)
{
  llvm::ValueHandleBase *AllOnesValue;
  _DWORD *v7;

  AllOnesValue = llvm::Constant::getAllOnesValue(*a1, a2);
  v7 = operator new(0x80uLL);
  v7[21] = v7[21] & 0x38000000 | 2;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = v7 + 16;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = v7 + 16;
  return llvm::BinaryOperator::BinaryOperator((uint64_t)(v7 + 16), 30, (uint64_t)a1, (uint64_t)AllOnesValue, (uint64_t)*a1, (uint64_t)a2, a3);
}

uint64_t llvm::BinaryOperator::swapOperands(llvm::BinaryOperator *this)
{
  int isCommutative;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  isCommutative = llvm::Instruction::isCommutative(this);
  if (isCommutative)
  {
    v3 = *((_QWORD *)this - 8);
    v4 = *((_QWORD *)this - 4);
    if (v3 != v4)
    {
      v5 = *((_QWORD *)this - 3);
      *((_QWORD *)this - 8) = v4;
      *((_QWORD *)this - 4) = v3;
      v6 = *(_OWORD *)((char *)this - 56);
      v7 = (_QWORD *)*((_QWORD *)this - 2);
      *((_QWORD *)this - 7) = v5;
      *((_QWORD *)this - 6) = v7;
      *(_OWORD *)((char *)this - 24) = v6;
      *v7 = (char *)this - 64;
      v8 = *((_QWORD *)this - 7);
      if (v8)
        *(_QWORD *)(v8 + 16) = (char *)this - 56;
      **((_QWORD **)this - 2) = (char *)this - 32;
      v9 = *((_QWORD *)this - 3);
      if (v9)
        *(_QWORD *)(v9 + 16) = (char *)this - 24;
    }
  }
  return isCommutative ^ 1u;
}

float llvm::FPMathOperator::getFPAccuracy(llvm::FPMathOperator *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::FPMathOperator **v6;
  llvm::FPMathOperator *v7;
  llvm::FPMathOperator **v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  llvm::FPMathOperator **v17;
  llvm::FPMathOperator *v18;
  llvm::FPMathOperator *v19;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0.0;
  v1 = ***(_QWORD ***)this;
  v19 = this;
  v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    v17 = 0;
LABEL_22:
    v6 = (llvm::FPMathOperator **)sub_1C541AB24(v1 + 2480, (uint64_t)&v19, (uint64_t *)&v19, v17);
    v18 = v19;
    v6[3] = 0;
    v6[4] = 0;
    *v6 = v18;
    v6[1] = (llvm::FPMathOperator *)(v6 + 3);
    v6[2] = (llvm::FPMathOperator *)0x100000000;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v1 + 2480);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = (llvm::FPMathOperator **)(v3 + 40 * v5);
  v7 = *v6;
  if (*v6 != this)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != (llvm::FPMathOperator *)-4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == (llvm::FPMathOperator *)-8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (llvm::FPMathOperator **)(v3 + 40 * (v11 & v4));
      v7 = *v6;
      if (*v6 == this)
        goto LABEL_12;
    }
    if (v8)
      v17 = v8;
    else
      v17 = v6;
    goto LABEL_22;
  }
LABEL_12:
  v12 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v12)
    return 0.0;
  v13 = (_QWORD *)((char *)v6[1] + 8);
  v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 3)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14)
      return 0.0;
  }
  v16 = *v13;
  if (!v16)
    return 0.0;
  return llvm::APFloat::convertToFloat((llvm::APFloat *)(*(_QWORD *)(*(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8))
                                                                   + 128)
                                                       + 24));
}

void llvm::CastInst::isNoopCast(int a1)
{
  __asm { BR              X10 }
}

void sub_1C53EE720(int a1, int a2, int a3, llvm::DataLayout *this)
{
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;

  llvm::DataLayout::getIntPtrType(this, v5);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  sub_1C53EE714();
}

void llvm::CastInst::isNoopCast(llvm::CastInst *this, const llvm::DataLayout *a2)
{
  __asm { BR              X10 }
}

void sub_1C53EE830(int a1, llvm::DataLayout *this)
{
  llvm::Type *v2;
  uint64_t v3;
  uint64_t v4;

  llvm::DataLayout::getIntPtrType(this, v2);
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
  sub_1C53EE824();
}

uint64_t llvm::CastInst::isEliminableCastPair(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;

  v5 = a1 == 49;
  if (a2 != 49)
    v5 = 0;
  if (a1 == 49 && ((*(_DWORD *)(a3 + 8) & 0xFE) == 18) != ((*(_DWORD *)(a4 + 8) & 0xFE) == 18))
  {
    if (!v5)
      return 0;
LABEL_9:
    __asm { BR              X9 }
  }
  if (a2 != 49 || v5 | ((*(_DWORD *)(a4 + 8) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18))
    goto LABEL_9;
  return 0;
}

void sub_1C53EEBD8()
{
  JUMPOUT(0x1C53EEBC4);
}

void sub_1C53EEC24()
{
  JUMPOUT(0x1C53EEBC4);
}

void llvm::CastInst::Create(int a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

llvm::Value *sub_1C53EED08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  llvm::Value *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 4) = v3;
  v5 = (llvm::Value *)(v4 + 32);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 32;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0x10000004DLL;
  *(_OWORD *)(v4 + 56) = 0u;
  v6 = v4 + 56;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 22) = 0;
  if (v2)
  {
    v11 = *(_QWORD *)(v2 + 40);
    v12 = (uint64_t *)(v2 + 24);
    *((_QWORD *)v4 + 9) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((v4[55] & 0x10) != 0
      && (v14 = *(_QWORD *)(v11 + 56)) != 0
      && (v15 = *(llvm::ValueSymbolTable **)(v14 + 104)) != 0)
    {
      v19 = v4;
      llvm::ValueSymbolTable::reinsertValue(v15, v5);
      v4 = v19;
      v16 = *(_QWORD *)v19;
      v17 = *v12;
      *((_QWORD *)v19 + 7) = *v12;
      *((_QWORD *)v19 + 8) = v12;
      *(_QWORD *)(v17 + 8) = v6;
      *v12 = (uint64_t)v6;
      if (v16)
      {
        **((_QWORD **)v19 + 2) = *((_QWORD *)v19 + 1);
        v18 = *((_QWORD *)v19 + 1);
        if (v18)
          *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
      }
    }
    else
    {
      v13 = *v12;
      *((_QWORD *)v4 + 7) = *v12;
      *((_QWORD *)v4 + 8) = v12;
      *(_QWORD *)(v13 + 8) = v6;
      *v12 = (uint64_t)v6;
    }
  }
  *(_QWORD *)v4 = v1;
  if (v1)
  {
    v9 = *(_QWORD *)(v1 + 8);
    v8 = (_QWORD *)(v1 + 8);
    v7 = v9;
    *((_QWORD *)v4 + 1) = v9;
    if (v9)
      *(_QWORD *)(v7 + 16) = v4 + 8;
    *((_QWORD *)v4 + 2) = v8;
    *v8 = v4;
  }
  llvm::Value::setName((uint64_t ***)v5, v0);
  return v5;
}

void sub_1C53EEF7C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)operator new(0x60uLL);
  *((_QWORD *)v2 + 4) = v1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004ELL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  if (v0)
  {
    v3 = *(_QWORD *)(v0 + 40);
    *((_QWORD *)v2 + 9) = v3;
    *(_WORD *)(v3 + 18) &= ~0x8000u;
    if ((v2[55] & 0x10) != 0)
    {
      v4 = *(_QWORD *)(v3 + 56);
      if (v4)
      {
        if (*(_QWORD *)(v4 + 104))
          JUMPOUT(0x1C53EEF3CLL);
      }
    }
    JUMPOUT(0x1C53EEE74);
  }
  JUMPOUT(0x1C53EED44);
}

uint64_t llvm::TruncInst::TruncInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 66;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 38, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 66;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 38, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::ZExtInst::ZExtInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 67;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 67;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 39, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::SExtInst::SExtInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 68;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 40, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 68;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 40, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::FPExtInst::FPExtInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 74;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 46, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 74;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 46, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::UIToFPInst::UIToFPInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 71;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 43, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 71;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 43, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::FPToUIInst::FPToUIInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 69;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 41, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 69;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 41, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::FPToSIInst::FPToSIInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 70;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 42, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 70;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 42, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::PtrToIntInst::PtrToIntInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 75;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 47, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 75;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 47, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::IntToPtrInst::IntToPtrInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 76;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 48, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 76;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 48, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::BitCastInst::BitCastInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 77;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 49, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 77;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 49, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::AddrSpaceCastInst::AddrSpaceCastInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 78;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 78;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 50, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t ***sub_1C53EFBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ***v5;

  v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 13) = *((_DWORD *)v4 + 13) & 0x38000000 | 1;
  v5 = (uint64_t ***)(v4 + 32);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 32;
  sub_1C53E82F0((uint64_t)(v4 + 32), v3, 38, v2, v1);
  llvm::Value::setName(v5, v0);
  return v5;
}

uint64_t llvm::FPTruncInst::FPTruncInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 45, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 73;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 45, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

uint64_t llvm::SIToFPInst::SIToFPInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 44, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

{
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ValueSymbolTable *v19;
  uint64_t v20;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 72;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  v10 = (_QWORD *)(a1 - 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a5 + 40);
    v16 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v15;
    *(_WORD *)(v15 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      if (v18)
      {
        v19 = *(llvm::ValueSymbolTable **)(v18 + 104);
        if (v19)
          llvm::ValueSymbolTable::reinsertValue(v19, (llvm::Value *)a1);
      }
    }
    v17 = *v16;
    *(_QWORD *)(a1 + 24) = *v16;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(v17 + 8) = v9;
    *v16 = v9;
  }
  if (*v10)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v10 = a2;
  if (a2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v11 = v13;
    *(_QWORD *)(a1 - 24) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v12;
    *v12 = v10;
  }
  llvm::Value::setName((uint64_t ***)a1, a4);
  return a1;
}

{
  uint64_t ***v7;

  v7 = (uint64_t ***)sub_1C53E82F0(a1, a3, 44, a2, a5);
  llvm::Value::setName(v7, a4);
  return a1;
}

llvm::Value *llvm::CastInst::CreateZExtOrBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int PrimitiveSizeInBits;
  llvm::Type *v10;
  int v11;
  char *v12;
  llvm::Value *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a2 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = (char *)operator new(0x60uLL);
  *((_DWORD *)v12 + 13) = *((_DWORD *)v12 + 13) & 0x38000000 | 1;
  v13 = (llvm::Value *)(v12 + 32);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 32;
  if (PrimitiveSizeInBits == v11)
  {
    sub_1C4FCD80C((uint64_t)(v12 + 32), a2, 49, (uint64_t)a1, a4);
  }
  else
  {
    v14 = v12;
    *(_OWORD *)(v12 + 56) = 0u;
    v15 = v12 + 56;
    *((_QWORD *)v12 + 4) = a2;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0x100000043;
    *(_OWORD *)(v12 + 72) = 0u;
    *((_DWORD *)v12 + 22) = 0;
    if (a4)
    {
      v20 = *(_QWORD *)(a4 + 40);
      v21 = (uint64_t *)(a4 + 24);
      *((_QWORD *)v12 + 9) = v20;
      *(_WORD *)(v20 + 18) &= ~0x8000u;
      if ((v12[55] & 0x10) != 0
        && (v23 = *(_QWORD *)(v20 + 56)) != 0
        && (v24 = *(llvm::ValueSymbolTable **)(v23 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v24, v13);
        v25 = *(_QWORD *)v14;
        v26 = *v21;
        *((_QWORD *)v14 + 7) = *v21;
        *((_QWORD *)v14 + 8) = v21;
        *(_QWORD *)(v26 + 8) = v15;
        *v21 = (uint64_t)v15;
        if (v25)
        {
          **((_QWORD **)v14 + 2) = *((_QWORD *)v14 + 1);
          v27 = *((_QWORD *)v14 + 1);
          if (v27)
            *(_QWORD *)(v27 + 16) = *((_QWORD *)v14 + 2);
        }
      }
      else
      {
        v22 = *v21;
        *((_QWORD *)v14 + 7) = *v21;
        *((_QWORD *)v14 + 8) = v21;
        *(_QWORD *)(v22 + 8) = v15;
        *v21 = (uint64_t)v15;
      }
    }
    *(_QWORD *)v14 = a1;
    v18 = a1[1];
    v17 = a1 + 1;
    v16 = v18;
    *((_QWORD *)v14 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v17;
    *v17 = v14;
  }
  llvm::Value::setName((uint64_t ***)v13, a3);
  return v13;
}

char *llvm::CastInst::CreateZExtOrBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int PrimitiveSizeInBits;
  llvm::Type *v10;
  int v11;
  _DWORD *v12;
  char *v13;
  char v14;
  uint64_t ***v15;

  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a2 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = operator new(0x60uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  v13 = (char *)(v12 + 8);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  if (PrimitiveSizeInBits == v11)
    v14 = 49;
  else
    v14 = 39;
  v15 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v12 + 8), a2, v14, (uint64_t)a1, a4);
  llvm::Value::setName(v15, a3);
  return v13;
}

char *llvm::CastInst::CreateSExtOrBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int PrimitiveSizeInBits;
  llvm::Type *v10;
  int v11;
  _DWORD *v12;
  char *v13;
  char v14;
  uint64_t ***v15;

  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a2 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = operator new(0x60uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  v13 = (char *)(v12 + 8);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  if (PrimitiveSizeInBits == v11)
    v14 = 49;
  else
    v14 = 40;
  v15 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v12 + 8), a2, v14, (uint64_t)a1, a4);
  llvm::Value::setName(v15, a3);
  return v13;
}

llvm::Value *llvm::CastInst::CreateTruncOrBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int PrimitiveSizeInBits;
  llvm::Type *v10;
  int v11;
  char *v12;
  llvm::Value *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a2 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = (char *)operator new(0x60uLL);
  *((_DWORD *)v12 + 13) = *((_DWORD *)v12 + 13) & 0x38000000 | 1;
  v13 = (llvm::Value *)(v12 + 32);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 32;
  if (PrimitiveSizeInBits == v11)
  {
    sub_1C4FCD80C((uint64_t)(v12 + 32), a2, 49, (uint64_t)a1, a4);
  }
  else
  {
    v14 = v12;
    *(_OWORD *)(v12 + 56) = 0u;
    v15 = v12 + 56;
    *((_QWORD *)v12 + 4) = a2;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0x100000042;
    *(_OWORD *)(v12 + 72) = 0u;
    *((_DWORD *)v12 + 22) = 0;
    if (a4)
    {
      v20 = *(_QWORD *)(a4 + 40);
      v21 = (uint64_t *)(a4 + 24);
      *((_QWORD *)v12 + 9) = v20;
      *(_WORD *)(v20 + 18) &= ~0x8000u;
      if ((v12[55] & 0x10) != 0
        && (v23 = *(_QWORD *)(v20 + 56)) != 0
        && (v24 = *(llvm::ValueSymbolTable **)(v23 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v24, v13);
        v25 = *(_QWORD *)v14;
        v26 = *v21;
        *((_QWORD *)v14 + 7) = *v21;
        *((_QWORD *)v14 + 8) = v21;
        *(_QWORD *)(v26 + 8) = v15;
        *v21 = (uint64_t)v15;
        if (v25)
        {
          **((_QWORD **)v14 + 2) = *((_QWORD *)v14 + 1);
          v27 = *((_QWORD *)v14 + 1);
          if (v27)
            *(_QWORD *)(v27 + 16) = *((_QWORD *)v14 + 2);
        }
      }
      else
      {
        v22 = *v21;
        *((_QWORD *)v14 + 7) = *v21;
        *((_QWORD *)v14 + 8) = v21;
        *(_QWORD *)(v22 + 8) = v15;
        *v21 = (uint64_t)v15;
      }
    }
    *(_QWORD *)v14 = a1;
    v18 = a1[1];
    v17 = a1 + 1;
    v16 = v18;
    *((_QWORD *)v14 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v17;
    *v17 = v14;
  }
  llvm::Value::setName((uint64_t ***)v13, a3);
  return v13;
}

char *llvm::CastInst::CreateTruncOrBitCast(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int PrimitiveSizeInBits;
  llvm::Type *v10;
  int v11;
  _DWORD *v12;
  char *v13;
  char v14;
  uint64_t ***v15;

  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a2 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = operator new(0x60uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  v13 = (char *)(v12 + 8);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  if (PrimitiveSizeInBits == v11)
    v14 = 49;
  else
    v14 = 38;
  v15 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v12 + 8), a2, v14, (uint64_t)a1, a4);
  llvm::Value::setName(v15, a3);
  return v13;
}

char *llvm::CastInst::CreatePointerCast(llvm::CastInst *a1, uint64_t a2, llvm::Type *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  int v9;
  _DWORD *v10;
  char *v11;
  uint64_t ***v12;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v9 = *(_DWORD *)(a2 + 8);
  if (v9 != 13)
    return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(a1, (llvm::Value *)a2, a3, a4, a5);
  v10 = operator new(0x60uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  v11 = (char *)(v10 + 8);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  v12 = (uint64_t ***)sub_1C53E82F0((uint64_t)(v10 + 8), a2, 47, (uint64_t)a1, (uint64_t)a4);
  llvm::Value::setName(v12, (uint64_t)a3);
  return v11;
}

llvm::Value *llvm::CastInst::CreatePointerCast(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _DWORD *v10;
  char *v11;
  uint64_t ***v12;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v4 = *(_DWORD *)(a2 + 8);
  if (v4 != 13)
    return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(a1, a2, a3, a4);
  v10 = operator new(0x60uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  v11 = (char *)(v10 + 8);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  v12 = (uint64_t ***)sub_1C4FCD80C((uint64_t)(v10 + 8), a2, 47, (uint64_t)a1, a4);
  llvm::Value::setName(v12, a3);
  return (llvm::Value *)v11;
}

llvm::Value *llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *(_DWORD *)(*a1 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*a1 + 16) + 8);
  v9 = *(_DWORD *)(a2 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  v10 = v9 ^ v8;
  v11 = (char *)operator new(0x60uLL);
  v12 = v11;
  *((_QWORD *)v11 + 4) = a2;
  v13 = (llvm::Value *)(v11 + 32);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 32;
  *((_QWORD *)v11 + 5) = 0;
  v14 = v11 + 56;
  if (v10 >= 0x100)
    v15 = 78;
  else
    v15 = 77;
  *((_QWORD *)v11 + 6) = v15 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
  *v14 = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *((_DWORD *)v11 + 22) = 0;
  if (a4)
  {
    v20 = *(_QWORD *)(a4 + 40);
    v21 = (uint64_t *)(a4 + 24);
    *((_QWORD *)v11 + 9) = v20;
    *(_WORD *)(v20 + 18) &= ~0x8000u;
    if ((v11[55] & 0x10) != 0
      && (v23 = *(_QWORD *)(v20 + 56)) != 0
      && (v24 = *(llvm::ValueSymbolTable **)(v23 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v24, v13);
      v25 = *(_QWORD *)v12;
      v26 = *v21;
      *((_QWORD *)v12 + 7) = *v21;
      *((_QWORD *)v12 + 8) = v21;
      *(_QWORD *)(v26 + 8) = v14;
      *v21 = (uint64_t)v14;
      if (v25)
      {
        **((_QWORD **)v12 + 2) = *((_QWORD *)v12 + 1);
        v27 = *((_QWORD *)v12 + 1);
        if (v27)
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v12 + 2);
      }
    }
    else
    {
      v22 = *v21;
      *((_QWORD *)v12 + 7) = *v21;
      *((_QWORD *)v12 + 8) = v21;
      *(_QWORD *)(v22 + 8) = v14;
      *v21 = (uint64_t)v14;
    }
  }
  *(_QWORD *)v12 = a1;
  v18 = a1[1];
  v17 = a1 + 1;
  v16 = v18;
  *((_QWORD *)v12 + 1) = v18;
  if (v18)
    *(_QWORD *)(v16 + 16) = v12 + 8;
  *((_QWORD *)v12 + 2) = v17;
  *v17 = v12;
  llvm::Value::setName((uint64_t ***)v13, a3);
  return v13;
}

void llvm::CastInst::CreateIntegerCast(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v9;
  int v10;

  v5 = *a1;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v7 = **(llvm::Type ***)(a2 + 16);
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (a3)
    v9 = 40;
  else
    v9 = 39;
  if (PrimitiveSizeInBits > v8)
    v9 = 38;
  if (PrimitiveSizeInBits == v8)
    v10 = 49;
  else
    v10 = v9;
  llvm::CastInst::Create(v10);
}

{
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v9;
  int v10;

  v5 = *a1;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v7 = **(llvm::Type ***)(a2 + 16);
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (a3)
    v9 = 40;
  else
    v9 = 39;
  if (PrimitiveSizeInBits > v8)
    v9 = 38;
  if (PrimitiveSizeInBits == v8)
    v10 = 49;
  else
    v10 = v9;
  llvm::CastInst::Create(v10);
}

void llvm::CastInst::CreateFPCast(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v5;
  unsigned int v6;
  int v7;
  int v8;

  v3 = *a1;
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
  v5 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v5 = **(llvm::Type ***)(a2 + 16);
  v6 = llvm::Type::getPrimitiveSizeInBits(v5);
  if (PrimitiveSizeInBits > v6)
    v7 = 45;
  else
    v7 = 46;
  if (PrimitiveSizeInBits == v6)
    v8 = 49;
  else
    v8 = v7;
  llvm::CastInst::Create(v8);
}

{
  uint64_t v3;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v5;
  unsigned int v6;
  int v7;
  int v8;

  v3 = *a1;
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
  v5 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v5 = **(llvm::Type ***)(a2 + 16);
  v6 = llvm::Type::getPrimitiveSizeInBits(v5);
  if (PrimitiveSizeInBits > v6)
    v7 = 45;
  else
    v7 = 46;
  if (PrimitiveSizeInBits == v6)
    v8 = 49;
  else
    v8 = v7;
  llvm::CastInst::Create(v8);
}

BOOL llvm::CastInst::isBitCastable(llvm::CastInst **this, llvm::CastInst **a2, llvm::Type *a3)
{
  int v3;
  llvm::Type *v5;
  unsigned int v6;
  _BOOL8 result;
  llvm::CastInst *v9;
  int v12;
  unint64_t PrimitiveSizeInBits;
  int v14;
  int v15;
  int v16;
  unint64_t v17;

  v3 = *((unsigned __int8 *)this + 8);
  if (v3 == 7 || v3 == 14)
    return 0;
  v5 = (llvm::Type *)a2;
  v6 = *((_DWORD *)a2 + 2);
  if (v6 == 7 || v6 == 14)
    return 0;
  v9 = (llvm::CastInst *)this;
  if (this == a2)
    return 1;
  if ((v3 & 0xFE) == 0x12
    && (v6 & 0xFE) == 18
    && (v3 != 19) != (v6 == 19)
    && *((_DWORD *)this + 8) == *((_DWORD *)a2 + 8))
  {
    v9 = this[3];
    v5 = a2[3];
    v6 = *((_DWORD *)v5 + 2);
  }
  v12 = v6;
  if (v6 == 15 && *((_DWORD *)v9 + 2) == 15 && v9)
    return (*((_DWORD *)v9 + 2) ^ v6) < 0x100;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  v15 = v14;
  v17 = llvm::Type::getPrimitiveSizeInBits(v5);
  result = 0;
  if (PrimitiveSizeInBits)
  {
    if (v17)
    {
      result = 0;
      if (v12 != 10 && PrimitiveSizeInBits == v17 && v15 == v16)
        return *((unsigned __int8 *)v9 + 8) != 10;
    }
  }
  return result;
}

BOOL llvm::CastInst::isBitOrNoopPointerCastable(llvm::CastInst *this, llvm::Type *a2, __int32 **a3, const llvm::DataLayout *a4)
{
  unsigned int v5;
  unsigned int v6;
  __int32 v7;
  __int32 *v9;
  size_t v10;
  __int32 *v11;
  __int32 *v12;

  v5 = *((_DWORD *)this + 2);
  v6 = *((_DWORD *)a2 + 2);
  if (!this || v5 != 15)
  {
    if (this)
    {
      if (v5 == 13 && v6 == 15)
      {
        if (llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)a3, (uint64_t)a2) == v5 >> 8)
        {
          v7 = v6 >> 8;
          goto LABEL_14;
        }
        return 0;
      }
    }
    return llvm::CastInst::isBitCastable((llvm::CastInst **)this, (llvm::CastInst **)a2, (llvm::Type *)a3);
  }
  if (v6 != 13)
    return llvm::CastInst::isBitCastable((llvm::CastInst **)this, (llvm::CastInst **)a2, (llvm::Type *)a3);
  if (llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)a3, (uint64_t)this) != v6 >> 8)
    return 0;
  v7 = v5 >> 8;
LABEL_14:
  v9 = a3[48];
  v10 = *((unsigned int *)a3 + 98);
  v11 = wmemchr(v9, v7, v10);
  if (v11)
    v12 = v11;
  else
    v12 = &v9[v10];
  return v10 == v12 - v9;
}

uint64_t llvm::CastInst::getCastOpcode(llvm::CastInst *this, const llvm::Value *a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t v4;
  int v5;
  llvm::Type *v6;
  int v7;
  BOOL v8;
  const char *v9;
  unsigned int PrimitiveSizeInBits;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t result;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  unsigned int v25;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this == a3)
    return 49;
  v5 = (int)a4;
  v6 = (llvm::Type *)a3;
  v7 = (int)a2;
  if (v4)
    v8 = (*(_DWORD *)(v4 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (v8
    && a3
    && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
    && (*(_DWORD *)(v4 + 8) != 19) != (*(_DWORD *)(a3 + 8) == 19)
    && *(_DWORD *)(v4 + 32) == *(_DWORD *)(a3 + 32))
  {
    v4 = *(_QWORD *)(v4 + 24);
    v6 = *(llvm::Type **)(a3 + 24);
  }
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if ((_DWORD)v9 == 1)
  v12 = llvm::Type::getPrimitiveSizeInBits(v6);
  if ((_DWORD)v11 == 1)
  {
    v25 = v12;
    v12 = v25;
  }
  v13 = *((_DWORD *)v6 + 2);
  if (v13 != 13)
  {
    if (v13 <= 6u)
    {
      v21 = *(unsigned __int8 *)(v4 + 8);
      if (v21 != 13)
      {
        result = 49;
        if (v21 > 6)
          return result;
        v15 = 45;
        v17 = v12 >= PrimitiveSizeInBits;
        if (v12 <= PrimitiveSizeInBits)
          v18 = 49;
        else
          v18 = 46;
        goto LABEL_18;
      }
      v22 = v7 == 0;
      v23 = 43;
      goto LABEL_34;
    }
    if ((v13 & 0xFE) != 0x12 && v13 == 15)
    {
      v24 = *(_DWORD *)(v4 + 8);
      if (v24 != 15)
        return 48;
      if ((v24 & 0xFE) == 0x12)
        v24 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
      if ((v24 ^ v13) < 0x100)
        return 49;
      else
        return 50;
    }
    return 49;
  }
  v14 = *(unsigned __int8 *)(v4 + 8);
  if (v14 == 13)
  {
    v15 = 38;
    if (v7)
      v16 = 40;
    else
      v16 = 39;
    v17 = v12 >= PrimitiveSizeInBits;
    if (v12 <= PrimitiveSizeInBits)
      v18 = 49;
    else
      v18 = v16;
LABEL_18:
    if (v17)
      return v18;
    else
      return v15;
  }
  if (v14 <= 6)
  {
    v22 = v5 == 0;
    v23 = 41;
LABEL_34:
    if (v22)
      return v23;
    else
      return v23 + 1;
  }
  if ((v14 & 0xFE) == 0x12)
    return 49;
  else
    return 47;
}

BOOL llvm::CastInst::castIsValid(int a1, llvm::Type *this, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  int v7;
  int v9;
  int v10;
  _BOOL8 result;
  llvm::Type *v14;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v24;
  llvm::Type *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;

  v3 = *((_DWORD *)this + 2);
  v4 = v3;
  if (v3 == 7 || v3 == 14)
    return 0;
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 == 7 || v7 == 14)
    return 0;
  v9 = v3 & 0xFE;
  if (v9 == 16)
    return 0;
  v10 = v7 & 0xFE;
  if (v10 == 16)
    return 0;
  v14 = this;
  if (v9 == 18)
    v14 = (llvm::Type *)**((_QWORD **)this + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v14);
  v16 = (llvm::Type *)a3;
  if (v10 == 18)
    v16 = **(llvm::Type ***)(a3 + 16);
  v17 = llvm::Type::getPrimitiveSizeInBits(v16);
  if (v9 == 18)
    v18 = *((unsigned int *)this + 8) | ((unint64_t)(v3 == 19) << 32);
  else
    v18 = 0;
  if (v10 == 18)
    v19 = *(unsigned int *)(a3 + 32) | ((unint64_t)(v7 == 19) << 32);
  else
    v19 = 0;
  switch(a1)
  {
    case '&':
      if (v9 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v18 == (_DWORD)v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits > v17;
    case '\'':
    case '(':
      if (v9 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v18 == (_DWORD)v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits < v17;
    case ')':
    case '*':
      if (v9 == 18)
        v4 = *(unsigned __int8 *)(**((_QWORD **)this + 2) + 8);
      if (v4 > 6)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      goto LABEL_119;
    case '+':
    case ',':
      if (v9 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 > 6u)
        return 0;
      goto LABEL_119;
    case '-':
      if (v9 == 18)
        v4 = *(unsigned __int8 *)(**((_QWORD **)this + 2) + 8);
      if (v4 > 6)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 > 6u)
        return 0;
      return (_DWORD)v18 == (_DWORD)v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits > v17;
    case '.':
      if (v9 == 18)
        v4 = *(unsigned __int8 *)(**((_QWORD **)this + 2) + 8);
      if (v4 > 6)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 > 6u)
        return 0;
      return (_DWORD)v18 == (_DWORD)v19 && HIDWORD(v18) == HIDWORD(v19) && PrimitiveSizeInBits < v17;
    case '/':
      result = 0;
      if (v18 != v19)
        return result;
      if (v9 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 15)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      v24 = v7 == 13;
      goto LABEL_122;
    case '0':
      result = 0;
      if (v18 != v19)
        return result;
      if (v9 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v10 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      v24 = v7 == 15;
      goto LABEL_122;
    case '1':
      v25 = this;
      if (v9 == 18)
      {
        v25 = (llvm::Type *)**((_QWORD **)this + 2);
        v4 = *((unsigned __int8 *)v25 + 8);
      }
      if (v4 != 15)
        v25 = 0;
      v26 = a3;
      if (v10 == 18)
      {
        v26 = **(_QWORD **)(a3 + 16);
        LOBYTE(v7) = *(_BYTE *)(v26 + 8);
      }
      if (v7 != 15)
        v26 = 0;
      if ((v25 == 0) == (v26 != 0))
        return 0;
      if (v25)
      {
        if ((*(_DWORD *)(v26 + 8) ^ *((_DWORD *)v25 + 2)) > 0xFF)
          return 0;
        if (v9 == 18 && v10 == 18)
        {
LABEL_119:
          v24 = (_DWORD)v18 == (_DWORD)v19 && HIDWORD(v18) == HIDWORD(v19);
        }
        else if (v9 == 18)
        {
          v24 = (_DWORD)v18 == 1 && HIDWORD(v18) == 0;
        }
        else
        {
          if (v10 != 18)
            return 1;
          v24 = (_DWORD)v19 == 1 && HIDWORD(v19) == 0;
        }
      }
      else
      {
        v27 = llvm::Type::getPrimitiveSizeInBits(this);
        v29 = v28;
        v24 = v27 == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3) && v29 == v30;
      }
LABEL_122:
      result = v24;
      break;
    case '2':
      if (v9 == 18)
        v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 15)
        return 0;
      if (v10 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      result = 0;
      if ((v7 ^ v3) >= 0x100 && v7 == 15)
        goto LABEL_119;
      return result;
    default:
      return 0;
  }
  return result;
}

uint64_t llvm::CmpInst::CmpInst(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::ValueSymbolTable *v28;
  uint64_t v29;
  uint64_t v30;

  v14 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v15 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v24 = *(_QWORD *)(a8 + 40);
    v25 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v24;
    *(_WORD *)(v24 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v27 = *(_QWORD *)(v24 + 56);
      if (v27)
      {
        v28 = *(llvm::ValueSymbolTable **)(v27 + 104);
        if (v28)
          llvm::ValueSymbolTable::reinsertValue(v28, (llvm::Value *)a1);
      }
    }
    v26 = *v25;
    *(_QWORD *)(a1 + 24) = *v25;
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(v26 + 8) = v15;
    *v25 = v15;
  }
  if (*v14)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v29 = *(_QWORD *)(a1 - 56);
    if (v29)
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v14 = a5;
  if (a5)
  {
    v18 = *(_QWORD *)(a5 + 8);
    v17 = (_QWORD *)(a5 + 8);
    v16 = v18;
    *(_QWORD *)(a1 - 56) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v17;
    *v17 = v14;
  }
  v19 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v30 = *(_QWORD *)(a1 - 24);
    if (v30)
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v19 = a6;
  if (a6)
  {
    v22 = *(_QWORD *)(a6 + 8);
    v21 = (_QWORD *)(a6 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v21;
    *v21 = v19;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a4;
  llvm::Value::setName((uint64_t ***)a1, a7);
  if (a9)
    llvm::Instruction::copyIRFlags(a1, a9, 1);
  return a1;
}

{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::ValueSymbolTable *v28;
  uint64_t v29;
  uint64_t v30;

  v14 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v15 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v24 = *(_QWORD *)(a8 + 40);
    v25 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v24;
    *(_WORD *)(v24 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v27 = *(_QWORD *)(v24 + 56);
      if (v27)
      {
        v28 = *(llvm::ValueSymbolTable **)(v27 + 104);
        if (v28)
          llvm::ValueSymbolTable::reinsertValue(v28, (llvm::Value *)a1);
      }
    }
    v26 = *v25;
    *(_QWORD *)(a1 + 24) = *v25;
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(v26 + 8) = v15;
    *v25 = v15;
  }
  if (*v14)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v29 = *(_QWORD *)(a1 - 56);
    if (v29)
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v14 = a5;
  if (a5)
  {
    v18 = *(_QWORD *)(a5 + 8);
    v17 = (_QWORD *)(a5 + 8);
    v16 = v18;
    *(_QWORD *)(a1 - 56) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v17;
    *v17 = v14;
  }
  v19 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v30 = *(_QWORD *)(a1 - 24);
    if (v30)
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v19 = a6;
  if (a6)
  {
    v22 = *(_QWORD *)(a6 + 8);
    v21 = (_QWORD *)(a6 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 24) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v21;
    *v21 = v19;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a4;
  llvm::Value::setName((uint64_t ***)a1, a7);
  if (a9)
    llvm::Instruction::copyIRFlags(a1, a9, 1);
  return a1;
}

uint64_t llvm::CmpInst::CmpInst(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  llvm::ValueSymbolTable *v27;
  uint64_t v28;
  uint64_t v29;

  v14 = (_QWORD *)(a1 - 64);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  *(_OWORD *)(a1 + 24) = 0u;
  v15 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a8;
  *(_WORD *)(a8 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v26 = *(_QWORD *)(a8 + 56);
    if (v26)
    {
      v27 = *(llvm::ValueSymbolTable **)(v26 + 104);
      if (v27)
        llvm::ValueSymbolTable::reinsertValue(v27, (llvm::Value *)a1);
    }
  }
  v17 = *(_QWORD *)(a8 + 40);
  v16 = (_QWORD *)(a8 + 40);
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(v17 + 8) = v15;
  *v16 = v15;
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v28 = *(_QWORD *)(a1 - 56);
    if (v28)
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v14 = a5;
  if (a5)
  {
    v20 = *(_QWORD *)(a5 + 8);
    v19 = (_QWORD *)(a5 + 8);
    v18 = v20;
    *(_QWORD *)(a1 - 56) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v19;
    *v19 = v14;
  }
  v21 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v29 = *(_QWORD *)(a1 - 24);
    if (v29)
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v21 = a6;
  if (a6)
  {
    v24 = *(_QWORD *)(a6 + 8);
    v23 = (_QWORD *)(a6 + 8);
    v22 = v24;
    *(_QWORD *)(a1 - 24) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v23;
    *v23 = v21;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a4;
  llvm::Value::setName((uint64_t ***)a1, a7);
  return a1;
}

char *llvm::CmpInst::Create(int a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  llvm::ValueSymbolTable *v30;
  uint64_t v31;
  uint64_t v32;

  v12 = (char *)operator new(0x80uLL);
  v13 = (llvm::Value *)(v12 + 64);
  *((_DWORD *)v12 + 21) = *((_DWORD *)v12 + 21) & 0x38000000 | 2;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 64;
  *((_QWORD *)v12 + 4) = 0;
  v14 = v12 + 32;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = v12 + 64;
  sub_1C4774CC4(*(_DWORD **)a3);
  *((_QWORD *)v12 + 8) = v15;
  *((_QWORD *)v12 + 9) = 0;
  v16 = v12 + 88;
  if (a1 == 53)
    v17 = 81;
  else
    v17 = 82;
  v18 = *((_DWORD *)v12 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v12 + 20) = v17;
  *((_DWORD *)v12 + 21) = v18;
  *v16 = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *((_DWORD *)v12 + 30) = 0;
  if (a6)
  {
    v19 = *(_QWORD *)(a6 + 40);
    v20 = (uint64_t *)(a6 + 24);
    *((_QWORD *)v12 + 13) = v19;
    *(_WORD *)(v19 + 18) &= ~0x8000u;
    if ((v12[87] & 0x10) != 0)
    {
      v29 = *(_QWORD *)(v19 + 56);
      if (v29)
      {
        v30 = *(llvm::ValueSymbolTable **)(v29 + 104);
        if (v30)
          llvm::ValueSymbolTable::reinsertValue(v30, v13);
      }
    }
    v21 = *v20;
    *((_QWORD *)v12 + 11) = *v20;
    *((_QWORD *)v12 + 12) = v20;
    *(_QWORD *)(v21 + 8) = v16;
    *v20 = (uint64_t)v16;
  }
  if (*(_QWORD *)v12)
  {
    **((_QWORD **)v12 + 2) = *((_QWORD *)v12 + 1);
    v31 = *((_QWORD *)v12 + 1);
    if (v31)
      *(_QWORD *)(v31 + 16) = *((_QWORD *)v12 + 2);
  }
  *(_QWORD *)v12 = a3;
  v24 = *(_QWORD *)(a3 + 8);
  v23 = (_QWORD *)(a3 + 8);
  v22 = v24;
  *((_QWORD *)v12 + 1) = v24;
  if (v24)
    *(_QWORD *)(v22 + 16) = v12 + 8;
  *((_QWORD *)v12 + 2) = v23;
  *v23 = v12;
  if (*((_QWORD *)v12 + 4))
  {
    **((_QWORD **)v12 + 6) = *((_QWORD *)v12 + 5);
    v32 = *((_QWORD *)v12 + 5);
    if (v32)
      *(_QWORD *)(v32 + 16) = *((_QWORD *)v12 + 6);
  }
  *v14 = a4;
  if (a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v26 = (_QWORD *)(a4 + 8);
    v25 = v27;
    *((_QWORD *)v12 + 5) = v27;
    if (v27)
      *(_QWORD *)(v25 + 16) = v12 + 40;
    *((_QWORD *)v12 + 6) = v26;
    *v26 = v14;
  }
  *((_WORD *)v12 + 41) = *((_WORD *)v12 + 41) & 0xFFC0 | a2;
  llvm::Value::setName((uint64_t ***)v13, a5);
  return v12 + 64;
}

uint64_t llvm::CmpInst::swapOperands(llvm::CmpInst *this)
{
  uint64_t v1;

  v1 = *((_WORD *)this + 9) & 0x3F;
  if (this && *((_BYTE *)this + 16) == 81)
    return ((uint64_t (*)(void))((char *)sub_1C53F2D10 + 4 * byte_1C865040B[v1]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C53F2D10 + 4 * byte_1C8650435[v1]))();
}

uint64_t sub_1C53F2D10@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result - 64);
  *(_WORD *)(result + 18) = a2 & 0xFFC0 | 0x22;
  v3 = *(_QWORD *)(result - 32);
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(result - 24);
    *(_QWORD *)(result - 64) = v3;
    *(_QWORD *)(result - 32) = v2;
    v5 = *(_OWORD *)(result - 56);
    v6 = *(_QWORD **)(result - 16);
    *(_QWORD *)(result - 56) = v4;
    *(_QWORD *)(result - 48) = v6;
    *(_OWORD *)(result - 24) = v5;
    *v6 = result - 64;
    v7 = *(_QWORD *)(result - 56);
    if (v7)
      *(_QWORD *)(v7 + 16) = result - 56;
    **(_QWORD **)(result - 16) = result - 32;
    v8 = *(_QWORD *)(result - 24);
    if (v8)
      *(_QWORD *)(v8 + 16) = result - 24;
  }
  return result;
}

uint64_t llvm::CmpInst::isCommutative(llvm::CmpInst *this)
{
  __int16 v1;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v1 = *((_WORD *)this + 9);
  if (this && *((_BYTE *)this + 16) == 81)
    return (v1 & 0x3E) == 32;
  v3 = v1 & 0x3F;
  v4 = v3 > 0xF;
  v5 = (0xC3C3u >> v3) & 1;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t llvm::CmpInst::isEquality(int a1)
{
  unsigned int v1;

  v1 = (0x4242u >> a1) & 1;
  if (a1 == 15)
    v1 = 0;
  if ((a1 - 32) <= 9)
    return (a1 & 0xFFFFFFFE) == 32;
  else
    return v1;
}

uint64_t llvm::CmpInst::getInversePredicate(int a1)
{
  return dword_1C8650888[a1];
}

const char *llvm::CmpInst::getPredicateName(unsigned int a1)
{
  if (a1 > 0x29)
    return "unknown";
  else
    return off_1E8167EC0[a1];
}

uint64_t llvm::ICmpInst::getSignedPredicate(int a1)
{
  return dword_1C86506F0[a1 - 32];
}

uint64_t llvm::ICmpInst::getUnsignedPredicate(int a1)
{
  return dword_1C8650718[a1 - 32];
}

uint64_t llvm::CmpInst::getSwappedPredicate(int a1)
{
  return dword_1C8650740[a1];
}

uint64_t llvm::CmpInst::isNonStrictPredicate(int a1)
{
  unint64_t v1;

  HIDWORD(v1) = a1 - 3;
  LODWORD(v1) = a1 - 3;
  return ((v1 >> 1) < 0x14) & (0xF0033u >> (v1 >> 1));
}

uint64_t llvm::CmpInst::isStrictPredicate(int a1)
{
  unint64_t v1;

  HIDWORD(v1) = a1;
  LODWORD(v1) = a1 - 2;
  return ((v1 >> 1) < 0x14) & (0xF0033u >> (v1 >> 1));
}

uint64_t llvm::CmpInst::getStrictPredicate(uint64_t result)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = result - 3;
  LODWORD(v2) = result - 3;
  v1 = v2 >> 1;
  if (v1 <= 0x13 && ((0xF0033u >> v1) & 1) != 0)
    return dword_1C86507E8[v1];
  return result;
}

uint64_t llvm::CmpInst::getNonStrictPredicate(uint64_t result)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = result;
  LODWORD(v2) = result - 2;
  v1 = v2 >> 1;
  if (v1 <= 0x13 && ((0xF0033u >> v1) & 1) != 0)
    return dword_1C8650838[v1];
  return result;
}

uint64_t llvm::CmpInst::getFlippedStrictnessPredicate(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 2;
  v1 = v2 >> 1;
  if (v1 < 0x14 && ((0xF0033u >> v1) & 1) != 0)
    return dword_1C8650838[v1];
  else
    return llvm::CmpInst::getStrictPredicate(a1);
}

uint64_t llvm::CmpInst::getSignedPredicate(int a1)
{
  return (a1 + 4);
}

BOOL llvm::CmpInst::isUnsigned(int a1)
{
  return (a1 - 34) < 4;
}

BOOL llvm::CmpInst::isSigned(int a1)
{
  return (a1 - 38) < 4;
}

void llvm::ICmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C53F301C(uint64_t a1, const void **a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 > 0x40)
    v3 = memcmp(*(const void **)a1, *a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v3 = *(_QWORD *)a1 == (_QWORD)*a2;
  v4 = v3;
  return v4 & 1;
}

void llvm::FCmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  llvm::detail::DoubleAPFloat *v4;
  void *v5;
  const llvm::detail::DoubleAPFloat *v6;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::compare(v4, v6);
  else
    llvm::detail::IEEEFloat::compare(v4, v6);
  __asm { BR              X11 }
}

void sub_1C53F362C()
{
  JUMPOUT(0x1C53F35E0);
}

void sub_1C53F3634()
{
  JUMPOUT(0x1C53F35BCLL);
}

uint64_t llvm::CmpInst::getFlippedSignednessPredicate(int a1)
{
  int v1;
  int v2;

  if ((a1 - 38) >= 4)
    v1 = -34;
  else
    v1 = -38;
  if ((a1 - 38) >= 4)
    v2 = 38;
  else
    v2 = 34;
  return (v1 + a1 + v2);
}

BOOL llvm::CmpInst::isOrdered(int a1)
{
  return (a1 - 1) < 7;
}

BOOL llvm::CmpInst::isUnordered(int a1)
{
  return (a1 - 8) < 7;
}

uint64_t llvm::CmpInst::isTrueWhenEqual(unsigned int a1)
{
  return (a1 < 0x2A) & (0x2A90000AA00uLL >> a1);
}

uint64_t llvm::CmpInst::isFalseWhenEqual(unsigned int a1)
{
  return (a1 < 0x29) & (0x15600000055uLL >> a1);
}

uint64_t llvm::CmpInst::isImpliedTrueByMatchingCmp(int a1, int a2)
{
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  if (a1 == a2)
    return 1;
  result = 0;
  switch(a1)
  {
    case ' ':
      v4 = ((a2 - 35) & 0xFFFFFFF9) == 0;
      goto LABEL_12;
    case '"':
      v5 = a2 & 0xFFFFFFFD;
      goto LABEL_11;
    case '$':
      v5 = a2 & 0xFFFFFFFB;
      goto LABEL_11;
    case '&':
      v4 = a2 == 33 || a2 == 39;
      goto LABEL_12;
    case '(':
      v5 = a2 & 0xFFFFFFF7;
LABEL_11:
      v4 = v5 == 33;
LABEL_12:
      result = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::CmpInst::isImpliedFalseByMatchingCmp(int a1, int a2)
{
  return llvm::CmpInst::isImpliedTrueByMatchingCmp(a1, dword_1C8650888[a2]);
}

_QWORD *llvm::SwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *result;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)(a1 + 60) = a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 2;
  result = operator new(32 * a4);
  *(_QWORD *)(a1 - 8) = result;
  if (a4)
  {
    v9 = result;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = a1;
      v9 += 4;
    }
    while (v9 != &result[4 * a4]);
  }
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = result;
  else
    v11 = (_QWORD *)(a1 - 32 * (v10 & 0x7FFFFFF));
  if (*v11)
  {
    *(_QWORD *)v11[2] = v11[1];
    v21 = v11[1];
    if (v21)
      *(_QWORD *)(v21 + 16) = v11[2];
  }
  *v11 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v13 = (_QWORD *)(a2 + 8);
    v12 = v14;
    v11[1] = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v11 + 1;
    v11[2] = v13;
    *v13 = v11;
  }
  v15 = *(_DWORD *)(a1 + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(_QWORD *)(a1 - 8);
  else
    v16 = a1 - 32 * (v15 & 0x7FFFFFF);
  v17 = (_QWORD *)(v16 + 32);
  if (*(_QWORD *)(v16 + 32))
  {
    **(_QWORD **)(v16 + 48) = *(_QWORD *)(v16 + 40);
    v22 = *(_QWORD *)(v16 + 40);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v16 + 48);
  }
  *v17 = a3;
  if (a3)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a3 + 8);
    v18 = v20;
    *(_QWORD *)(v16 + 40) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = v16 + 40;
    *(_QWORD *)(v16 + 48) = v19;
    *v19 = v17;
  }
  return result;
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::Instruction *a5)
{
  char *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueSymbolTable *v15;

  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 31;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) &= 0xC0000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  v9 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  if (a5)
  {
    v11 = *((_QWORD *)a5 + 5);
    v12 = (uint64_t *)((char *)a5 + 24);
    *((_QWORD *)this + 5) = v11;
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v14 = *(_QWORD *)(v11 + 56);
      if (v14)
      {
        v15 = *(llvm::ValueSymbolTable **)(v14 + 104);
        if (v15)
          llvm::ValueSymbolTable::reinsertValue(v15, this);
      }
    }
    v13 = *v12;
    *((_QWORD *)this + 3) = *v12;
    *((_QWORD *)this + 4) = v12;
    *(_QWORD *)(v13 + 8) = v9;
    *v12 = (uint64_t)v9;
  }
  llvm::SwitchInst::init((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 2 * a4 + 2);
  return this;
}

uint64_t llvm::SwitchInst::SwitchInst(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 31;
  *(_DWORD *)(a1 + 20) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v7 = v5 & 0x7FFFFFF;
  }
  else
  {
    v7 = v5 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
  }
  llvm::SwitchInst::init(a1, *v6, v6[4], v7);
  v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v9 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = v9 & 0xF8000000 | v8;
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a1 - 8);
  else
    v10 = a1 - 32 * v8;
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
  {
    v12 = *(_QWORD *)(a2 - 8);
    LODWORD(v13) = v11 & 0x7FFFFFF;
  }
  else
  {
    v13 = v11 & 0x7FFFFFF;
    v12 = a2 - 32 * v13;
  }
  if ((_DWORD)v13 != 2)
  {
    v14 = 2;
    do
    {
      v15 = v14;
      v16 = 32 * v14;
      v17 = v10 + v16;
      v18 = *(_QWORD *)(v12 + v16);
      if (*(_QWORD *)v17)
      {
        **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
        v32 = *(_QWORD *)(v17 + 8);
        if (v32)
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v17 + 16);
      }
      *(_QWORD *)v17 = v18;
      if (v18)
      {
        v21 = *(_QWORD *)(v18 + 8);
        v19 = (uint64_t *)(v18 + 8);
        v20 = v21;
        v22 = v10 + 32 * v15;
        *(_QWORD *)(v22 + 8) = v21;
        v23 = v22 + 8;
        if (v21)
          *(_QWORD *)(v20 + 16) = v23;
        *(_QWORD *)(v10 + 32 * v15 + 16) = v19;
        *v19 = v17;
      }
      v24 = (v15 + 1);
      v25 = v10 + 32 * v24;
      v26 = *(_QWORD *)(v12 + 32 * v24);
      if (*(_QWORD *)v25)
      {
        **(_QWORD **)(v25 + 16) = *(_QWORD *)(v25 + 8);
        v33 = *(_QWORD *)(v25 + 8);
        if (v33)
          *(_QWORD *)(v33 + 16) = *(_QWORD *)(v25 + 16);
      }
      *(_QWORD *)v25 = v26;
      if (v26)
      {
        v29 = *(_QWORD *)(v26 + 8);
        v27 = (uint64_t *)(v26 + 8);
        v28 = v29;
        v30 = v10 + 32 * v24;
        *(_QWORD *)(v30 + 8) = v29;
        if (v29)
          *(_QWORD *)(v28 + 16) = v30 + 8;
        *(_QWORD *)(v30 + 16) = v27;
        *v27 = v25;
      }
      v14 = v15 + 2;
    }
    while ((_DWORD)v13 != (_DWORD)v15 + 2);
  }
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  return a1;
}

_DWORD *llvm::SwitchInst::addCase(_DWORD *this, llvm::ConstantInt *a2, llvm::BasicBlock *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  llvm::BasicBlock *v26;
  llvm::ConstantInt *v27;
  int v28;
  _DWORD *v29;

  v3 = this[5];
  v4 = v3 & 0x7FFFFFF;
  v5 = (v3 & 0x7FFFFFF) + 2;
  v6 = v3;
  if (v5 > this[15])
  {
    v28 = this[5];
    v29 = this;
    this[15] = 3 * v4;
    v26 = a3;
    v27 = a2;
    v25 = (v3 & 0x7FFFFFF) + 2;
    llvm::User::growHungoffUses((llvm::User *)this, 3 * v4, 0);
    v5 = v25;
    a3 = v26;
    v3 = v28;
    this = v29;
    a2 = v27;
    v6 = v29[5];
  }
  v7 = v3 & 0x7FFFFFE;
  v8 = v5 & 0x7FFFFFF;
  this[5] = v6 & 0xF8000000 | v8;
  if ((v6 & 0x40000000) != 0)
    v9 = (_DWORD *)*((_QWORD *)this - 1);
  else
    v9 = &this[-8 * v8];
  v10 = &v9[8 * v7];
  if (*(_QWORD *)v10)
  {
    **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
    v23 = *((_QWORD *)v10 + 1);
    if (v23)
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v10 + 2);
  }
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v11 = (_QWORD *)((char *)a2 + 8);
    v12 = v13;
    v14 = &v9[8 * v7];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = v14 + 2;
    *((_QWORD *)v14 + 2) = v11;
    *v11 = v10;
  }
  v15 = v7 | 1;
  v16 = this[5];
  if ((v16 & 0x40000000) != 0)
    v17 = (_DWORD *)*((_QWORD *)this - 1);
  else
    v17 = &this[-8 * (v16 & 0x7FFFFFF)];
  v18 = &v17[8 * v15];
  if (*(_QWORD *)v18)
  {
    **((_QWORD **)v18 + 2) = *((_QWORD *)v18 + 1);
    v24 = *((_QWORD *)v18 + 1);
    if (v24)
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v18 + 2);
  }
  *(_QWORD *)v18 = a3;
  if (a3)
  {
    v21 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v20 = v21;
    v22 = &v17[8 * v15];
    *((_QWORD *)v22 + 1) = v21;
    if (v21)
      *(_QWORD *)(v20 + 16) = v22 + 2;
    *((_QWORD *)v22 + 2) = v19;
    *v19 = v18;
  }
  return this;
}

void llvm::SwitchInst::growOperands(llvm::SwitchInst *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  v4 = 3 * (v2 & 0x7FFFFFFu);
  *((_DWORD *)this + 15) = v4;
  if ((v2 & 0x40000000) != 0)
    v5 = (uint64_t *)*((_QWORD *)this - 1);
  else
    v5 = (uint64_t *)((char *)this - 32 * v3);
  v6 = operator new(96 * (v2 & 0x7FFFFFF));
  *((_QWORD *)this - 1) = v6;
  if ((_DWORD)v3)
  {
    v7 = v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v4]);
  }
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (char *)v6;
  else
    v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
  sub_1C53F5EAC((uint64_t)&v13, v5, &v5[4 * v3], (uint64_t)v9);
  if ((_DWORD)v3)
  {
    v10 = 4 * v3;
    do
    {
      v11 = &v5[v10];
      if (v5[v10 - 4])
      {
        *(_QWORD *)*(v11 - 2) = *(v11 - 3);
        v12 = *(v11 - 3);
        if (v12)
          *(_QWORD *)(v12 + 16) = *(v11 - 2);
      }
      v10 -= 4;
    }
    while (v10 * 8);
  }
  operator delete(v5);
}

uint64_t llvm::SwitchInst::removeCase(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_DWORD *)(result + 20);
  v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x40000000) != 0)
    v5 = *(_QWORD *)(result - 8);
  else
    v5 = result - 32 * v4;
  v6 = 2 * a3;
  v7 = (v4 - 2);
  if (2 * a3 + 4 != (_DWORD)v4)
  {
    v8 = (v6 + 2);
    v9 = v5 + 32 * v8;
    v10 = *(_QWORD *)(v5 + 32 * v7);
    if (*(_QWORD *)v9)
    {
      **(_QWORD **)(v9 + 16) = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
    }
    *(_QWORD *)v9 = v10;
    if (v10)
    {
      v14 = *(_QWORD *)(v10 + 8);
      v12 = (_QWORD *)(v10 + 8);
      v13 = v14;
      v15 = v5 + 32 * v8;
      *(_QWORD *)(v15 + 8) = v14;
      if (v14)
        *(_QWORD *)(v13 + 16) = v15 + 8;
      *(_QWORD *)(v15 + 16) = v12;
      *v12 = v9;
    }
    v16 = (v6 + 3);
    v17 = v5 + 32 * v16;
    v18 = *(_QWORD *)(v5 + 32 * (v4 - 1));
    if (*(_QWORD *)v17)
    {
      **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 8);
      if (v19)
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(v17 + 16);
    }
    *(_QWORD *)v17 = v18;
    if (v18)
    {
      v22 = *(_QWORD *)(v18 + 8);
      v20 = (_QWORD *)(v18 + 8);
      v21 = v22;
      v23 = v5 + 32 * v16;
      *(_QWORD *)(v23 + 8) = v22;
      if (v22)
        *(_QWORD *)(v21 + 16) = v23 + 8;
      *(_QWORD *)(v23 + 16) = v20;
      *v20 = v17;
    }
  }
  v24 = v5 + 32 * v7;
  if (*(_QWORD *)v24)
  {
    **(_QWORD **)(v24 + 16) = *(_QWORD *)(v24 + 8);
    v25 = *(_QWORD *)(v24 + 8);
    if (v25)
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
  }
  *(_QWORD *)v24 = 0;
  v26 = v5 + 32 * (v4 - 1);
  if (*(_QWORD *)v26)
  {
    **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
  }
  *(_QWORD *)v26 = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | v7 & 0x7FFFFFF;
  return result;
}

uint64_t llvm::SwitchInstProfUpdateWrapper::getProfBranchWeightsMD(llvm::SwitchInstProfUpdateWrapper *this, const llvm::SwitchInst *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::SwitchInstProfUpdateWrapper **v7;
  llvm::SwitchInstProfUpdateWrapper *v8;
  llvm::SwitchInstProfUpdateWrapper **v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::SwitchInstProfUpdateWrapper **v22;
  llvm::SwitchInstProfUpdateWrapper *v23;
  llvm::SwitchInstProfUpdateWrapper *v24;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v2 = ***(_QWORD ***)this;
  v24 = this;
  v3 = *(_DWORD *)(v2 + 2496);
  if (!v3)
  {
    v22 = 0;
LABEL_29:
    v7 = (llvm::SwitchInstProfUpdateWrapper **)sub_1C541AB24(v2 + 2480, (uint64_t)&v24, (uint64_t *)&v24, v22);
    v23 = v24;
    v7[3] = 0;
    v7[4] = 0;
    *v7 = v23;
    v7[1] = (llvm::SwitchInstProfUpdateWrapper *)(v7 + 3);
    v7[2] = (llvm::SwitchInstProfUpdateWrapper *)0x100000000;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(v2 + 2480);
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((this >> 4) ^ (this >> 9));
  v7 = (llvm::SwitchInstProfUpdateWrapper **)(v4 + 40 * v6);
  v8 = *v7;
  if (*v7 != this)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::SwitchInstProfUpdateWrapper *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::SwitchInstProfUpdateWrapper *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (llvm::SwitchInstProfUpdateWrapper **)(v4 + 40 * (v12 & v5));
      v8 = *v7;
      if (*v7 == this)
        goto LABEL_12;
    }
    if (v9)
      v22 = v9;
    else
      v22 = v7;
    goto LABEL_29;
  }
LABEL_12:
  v13 = *((unsigned int *)v7 + 4);
  if (!(_DWORD)v13)
    return 0;
  v14 = (uint64_t *)((char *)v7[1] + 8);
  v15 = 16 * v13;
  while (*((_DWORD *)v14 - 2) != 2)
  {
    result = 0;
    v14 += 2;
    v15 -= 16;
    if (!v15)
      return result;
  }
  result = *v14;
  if (*v14)
  {
    v17 = *(_QWORD *)(result - 8 * *(unsigned int *)(result + 8));
    if (*(_BYTE *)v17)
      return 0;
    v18 = *(_QWORD **)(v17 + 8);
    if (*v18 != 14)
      return 0;
    v19 = v18[3];
    v20 = *(_QWORD *)((char *)v18 + 30);
    if (v19 != 0x775F68636E617262 || v20 != 0x737468676965775FLL)
      return 0;
  }
  return result;
}

void llvm::SwitchInstProfUpdateWrapper::init(llvm::SwitchInstProfUpdateWrapper **this, const llvm::SwitchInst *a2)
{
  uint64_t ProfBranchWeightsMD;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  ProfBranchWeightsMD = llvm::SwitchInstProfUpdateWrapper::getProfBranchWeightsMD(*this, a2);
  if (ProfBranchWeightsMD)
  {
    v5 = (unsigned int *)(ProfBranchWeightsMD + 8);
    v4 = *(unsigned int *)(ProfBranchWeightsMD + 8);
    v6 = (*((_DWORD *)*this + 5) >> 1) & 0x3FFFFFF;
    v13 = v15;
    v14 = 0x800000000;
    if (v6)
    {
      v7 = 0;
      v8 = v4 - 1;
      v9 = ProfBranchWeightsMD + 8;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8 * *v5) + 128);
        v11 = (_QWORD *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u)
          v11 = (_QWORD *)*v11;
        v12 = *(_DWORD *)v11;
        if (v7 >= HIDWORD(v14))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v7 + 1, 4);
          v7 = v14;
        }
        *((_DWORD *)v13 + v7) = v12;
        v7 = v14 + 1;
        LODWORD(v14) = v14 + 1;
        v9 += 8;
        --v8;
      }
      while (v8);
    }
    sub_1C62402B8((uint64_t)(this + 1), (uint64_t)&v13);
    if (v13 != v15)
      free(v13);
  }
}

uint64_t llvm::SwitchInstProfUpdateWrapper::removeCase(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 64) = 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (a3 + 1)) = *(_DWORD *)(*(_QWORD *)(a1 + 8)
                                                                                + 4
                                                                                * (*(_DWORD *)(a1 + 16))--
                                                                                - 4);
  }
  return llvm::SwitchInst::removeCase(*(_QWORD *)a1, a2, a3);
}

void llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9[2];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFF00000000) != 0)
  {
    v3 = a3;
    v6 = a1 + 1;
    if (!(_DWORD)a3 || *((_BYTE *)a1 + 56))
    {
      if (!*((_BYTE *)a1 + 56))
        return;
      goto LABEL_5;
    }
    v8 = ((unint64_t)*(unsigned int *)(*a1 + 20) >> 1) & 0x3FFFFFF;
    v9[0] = v10;
    v9[1] = (void *)0x800000000;
    sub_1C4893E04((char *)v9, v8, 0);
    sub_1C62402B8((uint64_t)v6, (uint64_t)v9);
    if (v9[0] != v10)
      free(v9[0]);
    if (*((_BYTE *)a1 + 56))
    {
LABEL_5:
      v7 = *v6;
      if (*(_DWORD *)(*v6 + 4 * a2) != v3)
      {
        *((_BYTE *)a1 + 64) = 1;
        *(_DWORD *)(v7 + 4 * a2) = v3;
      }
    }
  }
}

uint64_t llvm::SwitchInstProfUpdateWrapper::getSuccessorWeight(llvm::SwitchInstProfUpdateWrapper *this, const llvm::SwitchInst *a2)
{
  int v2;
  uint64_t ProfBranchWeightsMD;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (int)a2;
  ProfBranchWeightsMD = llvm::SwitchInstProfUpdateWrapper::getProfBranchWeightsMD(this, a2);
  if (ProfBranchWeightsMD
    && (v5 = *(unsigned int *)(ProfBranchWeightsMD + 8), (_DWORD)v5 == ((*((_DWORD *)this + 5) >> 1) & 0x3FFFFFF) + 1))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(ProfBranchWeightsMD - 8 * v5 + 8 * (v2 + 1)) + 128);
    v7 = (unsigned int *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = *(unsigned int **)v7;
    v8 = *v7;
    v9 = 0x100000000;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return v9 | v8;
}

void llvm::IndirectBrInst::growOperands(llvm::IndirectBrInst *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v2 = *((_DWORD *)this + 5);
  v3 = 2 * (v2 & 0x7FFFFFF);
  *((_DWORD *)this + 15) = v3;
  v4 = v2 & 0x7FFFFFF;
  if ((v2 & 0x40000000) != 0)
    v5 = (uint64_t *)*((_QWORD *)this - 1);
  else
    v5 = (uint64_t *)((char *)this - 32 * v4);
  v6 = operator new((unint64_t)(v2 & 0x7FFFFFF) << 6);
  *((_QWORD *)this - 1) = v6;
  if ((_DWORD)v3)
  {
    v7 = v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = this;
      v7 += 4;
    }
    while (v7 != &v6[4 * v3]);
  }
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (char *)v6;
  else
    v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
  sub_1C53F5EAC((uint64_t)&v13, v5, &v5[4 * v4], (uint64_t)v9);
  if ((_DWORD)v4)
  {
    v10 = 4 * v4;
    do
    {
      v11 = &v5[v10];
      if (v5[v10 - 4])
      {
        *(_QWORD *)*(v11 - 2) = *(v11 - 3);
        v12 = *(v11 - 3);
        if (v12)
          *(_QWORD *)(v12 + 16) = *(v11 - 2);
      }
      v10 -= 4;
    }
    while (v10 * 8);
  }
  operator delete(v5);
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::BasicBlock *a4)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;

  *(_QWORD *)this = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 32;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) &= 0xC0000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 5) = a4;
  *((_WORD *)a4 + 9) &= ~0x8000u;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v12 = *((_QWORD *)a4 + 7);
    if (v12)
    {
      v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, this);
    }
  }
  v10 = *((_QWORD *)a4 + 5);
  v9 = (_QWORD *)((char *)a4 + 40);
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v9;
  *(_QWORD *)(v10 + 8) = v8;
  *v9 = v8;
  llvm::IndirectBrInst::init(this, a2, a3);
  return this;
}

uint64_t llvm::FreezeInst::FreezeInst(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ValueSymbolTable *v18;
  uint64_t v19;

  v7 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 95;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a4)
  {
    v14 = *(_QWORD *)(a4 + 40);
    v15 = (uint64_t *)(a4 + 24);
    *(_QWORD *)(a1 + 40) = v14;
    *(_WORD *)(v14 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v17 = *(_QWORD *)(v14 + 56);
      if (v17)
      {
        v18 = *(llvm::ValueSymbolTable **)(v17 + 104);
        if (v18)
          llvm::ValueSymbolTable::reinsertValue(v18, (llvm::Value *)a1);
      }
    }
    v16 = *v15;
    *(_QWORD *)(a1 + 24) = *v15;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(v16 + 8) = v9;
    *v15 = v9;
  }
  if (*v7)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v19 = *(_QWORD *)(a1 - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 16);
  }
  *(_QWORD *)(a1 - 32) = a2;
  v12 = a2[1];
  v11 = a2 + 1;
  v10 = v12;
  *(_QWORD *)(a1 - 24) = v12;
  if (v12)
    *(_QWORD *)(v10 + 16) = a1 - 24;
  *(_QWORD *)(a1 - 16) = v11;
  *v11 = v7;
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ValueSymbolTable *v18;
  uint64_t v19;

  v7 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_DWORD *)(a1 + 16) = 95;
  *(_DWORD *)(a1 + 20) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a4)
  {
    v14 = *(_QWORD *)(a4 + 40);
    v15 = (uint64_t *)(a4 + 24);
    *(_QWORD *)(a1 + 40) = v14;
    *(_WORD *)(v14 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v17 = *(_QWORD *)(v14 + 56);
      if (v17)
      {
        v18 = *(llvm::ValueSymbolTable **)(v17 + 104);
        if (v18)
          llvm::ValueSymbolTable::reinsertValue(v18, (llvm::Value *)a1);
      }
    }
    v16 = *v15;
    *(_QWORD *)(a1 + 24) = *v15;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(v16 + 8) = v9;
    *v15 = v9;
  }
  if (*v7)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v19 = *(_QWORD *)(a1 - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 16);
  }
  *(_QWORD *)(a1 - 32) = a2;
  v12 = a2[1];
  v11 = a2 + 1;
  v10 = v12;
  *(_QWORD *)(a1 - 24) = v12;
  if (v12)
    *(_QWORD *)(v10 + 16) = a1 - 24;
  *(_QWORD *)(a1 - 16) = v11;
  *v11 = v7;
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

uint64_t llvm::FreezeInst::FreezeInst(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ***v6;

  v6 = (uint64_t ***)sub_1C53E82F0(a1, *a2, 67, (uint64_t)a2, a4);
  llvm::Value::setName(v6, a3);
  return a1;
}

{
  uint64_t ***v6;

  v6 = (uint64_t ***)sub_1C53E82F0(a1, *a2, 67, (uint64_t)a2, a4);
  llvm::Value::setName(v6, a3);
  return a1;
}

_QWORD *llvm::GetElementPtrInst::cloneImpl(llvm::GetElementPtrInst *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  char v8;

  v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v3 = operator new(32 * v2 + 80);
  v4 = &v3[4 * v2];
  *((_DWORD *)v4 + 5) = *((_DWORD *)v4 + 5) & 0x38000000 | v2;
  if ((_DWORD)v2)
  {
    do
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != v4);
    v5 = *((_DWORD *)v4 + 5) & 0xC0000000;
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  *v4 = *(_QWORD *)this;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 62;
  *((_DWORD *)v4 + 5) = v5 | v6;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *((_OWORD *)v4 + 4) = *((_OWORD *)this + 4);
  sub_1C53F5EAC((uint64_t)&v8, (uint64_t *)this - 4 * v6, (uint64_t *)this, (uint64_t)&v4[-4 * v6]);
  *((_BYTE *)v4 + 17) = *((_BYTE *)this + 17) & 0xFE | *((_BYTE *)v4 + 17) & 1;
  return v4;
}

uint64_t llvm::UnaryOperator::cloneImpl(llvm::UnaryOperator *this)
{
  char v1;
  uint64_t *v2;
  _DWORD *v3;
  _BYTE v5[32];
  __int16 v6;

  v1 = *((_BYTE *)this + 16);
  v2 = (uint64_t *)*((_QWORD *)this - 4);
  v6 = 257;
  v3 = operator new(0x60uLL);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  return llvm::UnaryOperator::UnaryOperator((uint64_t)(v3 + 8), v1 - 28, (uint64_t)v2, *v2, (uint64_t)v5, 0);
}

char *llvm::BinaryOperator::cloneImpl(llvm::BinaryOperator *this)
{
  char v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13[32];
  __int16 v14;

  v1 = *((_BYTE *)this + 16);
  v2 = (_QWORD *)*((_QWORD *)this - 8);
  v3 = *((_QWORD *)this - 4);
  v14 = 257;
  v4 = (char *)operator new(0x80uLL);
  *((_QWORD *)v4 + 5) = 0;
  v5 = v4 + 40;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 8) = *v2;
  v6 = v4 + 64;
  *((_QWORD *)v4 + 3) = v4 + 64;
  *((_QWORD *)v4 + 7) = v4 + 64;
  *((_QWORD *)v4 + 9) = 0;
  v4[80] = v1;
  v4[81] = 0;
  *((_WORD *)v4 + 41) = 0;
  *((_DWORD *)v4 + 21) = 2;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_DWORD *)v4 + 30) = 0;
  v7 = v2 + 1;
  v8 = v2[1];
  *(_QWORD *)v4 = v2;
  *((_QWORD *)v4 + 1) = v8;
  if (v8)
    *(_QWORD *)(v8 + 16) = v4 + 8;
  *((_QWORD *)v4 + 2) = v7;
  *v7 = v4;
  *((_QWORD *)v4 + 4) = v3;
  if (v3)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v10 = (_QWORD *)(v3 + 8);
    v9 = v11;
    *v5 = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5;
    *((_QWORD *)v4 + 6) = v10;
    *v10 = v4 + 32;
  }
  llvm::Value::setName((uint64_t ***)v4 + 8, (uint64_t)v13);
  return v6;
}

char *llvm::FCmpInst::cloneImpl(llvm::FCmpInst *this)
{
  char *v2;
  _QWORD *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18[32];
  __int16 v19;

  v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 64;
  *((_QWORD *)v2 + 4) = 0;
  v3 = v2 + 32;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 64;
  v4 = *((_WORD *)this + 9);
  v5 = *((_QWORD *)this - 8);
  v6 = *((_QWORD *)this - 4);
  v19 = 257;
  sub_1C4774CC4(*(_DWORD **)v5);
  *((_QWORD *)v2 + 8) = v7;
  *((_QWORD *)v2 + 9) = 0;
  v8 = *((_DWORD *)v2 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v2 + 20) = 82;
  *((_DWORD *)v2 + 21) = v8;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  if (*(_QWORD *)v2)
  {
    **((_QWORD **)v2 + 2) = *((_QWORD *)v2 + 1);
    v16 = *((_QWORD *)v2 + 1);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v2 + 2);
  }
  *(_QWORD *)v2 = v5;
  v11 = *(_QWORD *)(v5 + 8);
  v10 = (_QWORD *)(v5 + 8);
  v9 = v11;
  *((_QWORD *)v2 + 1) = v11;
  if (v11)
    *(_QWORD *)(v9 + 16) = v2 + 8;
  *((_QWORD *)v2 + 2) = v10;
  *v10 = v2;
  if (*((_QWORD *)v2 + 4))
  {
    **((_QWORD **)v2 + 6) = *((_QWORD *)v2 + 5);
    v17 = *((_QWORD *)v2 + 5);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v2 + 6);
  }
  *v3 = v6;
  if (v6)
  {
    v14 = *(_QWORD *)(v6 + 8);
    v13 = (_QWORD *)(v6 + 8);
    v12 = v14;
    *((_QWORD *)v2 + 5) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v2 + 40;
    *((_QWORD *)v2 + 6) = v13;
    *v13 = v3;
  }
  *((_WORD *)v2 + 41) = v4 & 0x3F;
  llvm::Value::setName((uint64_t ***)v2 + 8, (uint64_t)v18);
  return v2 + 64;
}

char *llvm::ICmpInst::cloneImpl(llvm::ICmpInst *this)
{
  char *v2;
  _QWORD *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18[32];
  __int16 v19;

  v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 64;
  *((_QWORD *)v2 + 4) = 0;
  v3 = v2 + 32;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 64;
  v4 = *((_WORD *)this + 9);
  v5 = *((_QWORD *)this - 8);
  v6 = *((_QWORD *)this - 4);
  v19 = 257;
  sub_1C4774CC4(*(_DWORD **)v5);
  *((_QWORD *)v2 + 8) = v7;
  *((_QWORD *)v2 + 9) = 0;
  v8 = *((_DWORD *)v2 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v2 + 20) = 81;
  *((_DWORD *)v2 + 21) = v8;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  if (*(_QWORD *)v2)
  {
    **((_QWORD **)v2 + 2) = *((_QWORD *)v2 + 1);
    v16 = *((_QWORD *)v2 + 1);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v2 + 2);
  }
  *(_QWORD *)v2 = v5;
  v11 = *(_QWORD *)(v5 + 8);
  v10 = (_QWORD *)(v5 + 8);
  v9 = v11;
  *((_QWORD *)v2 + 1) = v11;
  if (v11)
    *(_QWORD *)(v9 + 16) = v2 + 8;
  *((_QWORD *)v2 + 2) = v10;
  *v10 = v2;
  if (*((_QWORD *)v2 + 4))
  {
    **((_QWORD **)v2 + 6) = *((_QWORD *)v2 + 5);
    v17 = *((_QWORD *)v2 + 5);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v2 + 6);
  }
  *v3 = v6;
  if (v6)
  {
    v14 = *(_QWORD *)(v6 + 8);
    v13 = (_QWORD *)(v6 + 8);
    v12 = v14;
    *((_QWORD *)v2 + 5) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v2 + 40;
    *((_QWORD *)v2 + 6) = v13;
    *v13 = v3;
  }
  *((_WORD *)v2 + 41) = v4 & 0x3F;
  llvm::Value::setName((uint64_t ***)v2 + 8, (uint64_t)v18);
  return v2 + 64;
}

uint64_t llvm::ExtractValueInst::cloneImpl(llvm::ExtractValueInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x80uLL);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  return llvm::ExtractValueInst::ExtractValueInst((uint64_t)(v2 + 8), (uint64_t)this);
}

uint64_t llvm::InsertValueInst::cloneImpl(llvm::InsertValueInst *this)
{
  _DWORD *v2;

  v2 = operator new(0xA0uLL);
  v2[21] = v2[21] & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 16;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 16;
  return llvm::InsertValueInst::InsertValueInst((uint64_t)(v2 + 16), (uint64_t)this);
}

char *llvm::AllocaInst::cloneImpl(llvm::AllocaInst *this)
{
  char *v2;
  llvm::PointerType *v3;
  llvm::Type *v4;
  llvm::ValueHandleBase *v5;
  __int16 v6;
  const llvm::APInt *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  llvm::ConstantInt *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18[32];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;

  v2 = (char *)operator new(0x68uLL);
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v3 = (llvm::PointerType *)*((_QWORD *)this + 8);
  v4 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)this + 8) >> 8);
  v5 = (llvm::ValueHandleBase *)*((_QWORD *)this - 4);
  v6 = *((_WORD *)this + 9);
  v19 = 257;
  v8 = llvm::PointerType::get(v3, v4);
  if (!v5)
  {
    v13 = **(_QWORD **)v3;
    v14 = *(llvm::ConstantInt **)(v13 + 1960);
    v15 = *(unsigned int *)(v13 + 1968);
    v21 = v15 >> 8;
    if (v15 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
    }
    else
    {
      v16 = v15 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
      v20 = v16 & 1;
    }
    v5 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v20, v7);
    if (v21 >= 0x41)
    {
      if (v20)
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    }
  }
  *((_QWORD *)v2 + 4) = v8;
  *((_QWORD *)v2 + 5) = 0;
  *((_WORD *)v2 + 24) = 59;
  *((_DWORD *)v2 + 13) = *((_DWORD *)v2 + 13) & 0xC0000000 | 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  if (*(_QWORD *)v2)
  {
    **((_QWORD **)v2 + 2) = *((_QWORD *)v2 + 1);
    v17 = *((_QWORD *)v2 + 1);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v2 + 2);
  }
  *(_QWORD *)v2 = v5;
  if (v5)
  {
    v11 = *((_QWORD *)v5 + 1);
    v10 = (_QWORD *)((char *)v5 + 8);
    v9 = v11;
    *((_QWORD *)v2 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v10;
    *v10 = v2;
  }
  *((_QWORD *)v2 + 12) = v3;
  *((_WORD *)v2 + 25) = v6 & 0x3F;
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v18);
  *((_WORD *)v2 + 25) = *((_WORD *)v2 + 25) & 0xFF3F | *((_WORD *)this + 9) & 0xC0;
  return v2 + 32;
}

char *llvm::LoadInst::cloneImpl(llvm::LoadInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v12[32];
  __int16 v13;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this - 4);
  v13 = 257;
  v6 = *((unsigned __int16 *)this + 9);
  v7 = *((_BYTE *)this + 60);
  *((_QWORD *)v2 + 4) = v4;
  *((_QWORD *)v2 + 5) = 0;
  *((_WORD *)v2 + 24) = 60;
  *((_DWORD *)v2 + 13) = 1;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v5;
  *((_QWORD *)v2 + 1) = 0;
  if (v5)
  {
    v10 = *(_QWORD *)(v5 + 8);
    v8 = (_QWORD *)(v5 + 8);
    v9 = v10;
    *((_QWORD *)v2 + 1) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v8;
    *v8 = v2;
  }
  *((_WORD *)v2 + 25) = v6 & 0x381 | (2 * __clz(1 << (v6 >> 1))) ^ 0x7E;
  v2[92] = v7;
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v12);
  return v3;
}

char *llvm::StoreInst::cloneImpl(llvm::StoreInst *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v3 = v2 + 32;
  v4 = *((_QWORD *)this - 8);
  *((_QWORD *)v2 + 8) = ***(_QWORD ***)v4 + 1576;
  *((_QWORD *)v2 + 3) = v2 + 64;
  *((_QWORD *)v2 + 7) = v2 + 64;
  v5 = *((_QWORD *)this - 4);
  v6 = *((_WORD *)this + 9);
  v7 = *((_BYTE *)this + 60);
  *((_QWORD *)v2 + 9) = 0;
  v2[80] = 61;
  v2[81] = 0;
  *((_WORD *)v2 + 41) = 0;
  *((_DWORD *)v2 + 21) = 2;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  *(_QWORD *)v2 = v4;
  v10 = *(_QWORD *)(v4 + 8);
  v8 = (_QWORD *)(v4 + 8);
  v9 = v10;
  *((_QWORD *)v2 + 1) = v10;
  if (v10)
    *(_QWORD *)(v9 + 16) = v2 + 8;
  *((_QWORD *)v2 + 2) = v8;
  *v8 = v2;
  if (*((_QWORD *)v2 + 4))
  {
    **((_QWORD **)v2 + 6) = *((_QWORD *)v2 + 5);
    v15 = *((_QWORD *)v2 + 5);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v2 + 6);
  }
  *v3 = v5;
  if (v5)
  {
    v13 = *(_QWORD *)(v5 + 8);
    v11 = (_QWORD *)(v5 + 8);
    v12 = v13;
    *((_QWORD *)v2 + 5) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = v2 + 40;
    *((_QWORD *)v2 + 6) = v11;
    *v11 = v3;
  }
  *((_WORD *)v2 + 41) = v6 & 0x3FF;
  v2[124] = v7;
  return v2 + 64;
}

uint64_t llvm::AtomicCmpXchgInst::cloneImpl(llvm::AtomicCmpXchgInst *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = operator new(0xA0uLL);
  v3 = 0;
  v4 = (uint64_t)(v2 + 24);
  v2[29] = v2[29] & 0x38000000 | 3;
  do
  {
    v5 = &v2[v3];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    v3 += 8;
  }
  while (v3 != 24);
  result = llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v4, *((_QWORD *)this - 12), *((uint64_t ****)this - 8), *((_QWORD *)this - 4), HIBYTE(*((_WORD *)this + 9)) & 0x3F, (*((_WORD *)this + 9) >> 2) & 7, *((_WORD *)this + 9) >> 5, *((_BYTE *)this + 60), 0);
  *((_WORD *)v2 + 57) = *((_WORD *)v2 + 57) & 0xFFFC | *((_WORD *)this + 9) & 3;
  return result;
}

char *llvm::AtomicRMWInst::cloneImpl(llvm::AtomicRMWInst *this)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;

  v2 = (char *)operator new(0x80uLL);
  *((_DWORD *)v2 + 21) = *((_DWORD *)v2 + 21) & 0x38000000 | 2;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v3 = (uint64_t *)*((_QWORD *)this - 4);
  v4 = *v3;
  *((_DWORD *)v2 + 21) = 2;
  *((_QWORD *)v2 + 8) = v4;
  v5 = v2 + 64;
  *((_QWORD *)v2 + 3) = v2 + 64;
  *((_QWORD *)v2 + 7) = v2 + 64;
  LODWORD(v4) = *((unsigned __int16 *)this + 9);
  v6 = *((_QWORD *)this - 8);
  v7 = *((_BYTE *)this + 60);
  *((_QWORD *)v2 + 9) = 0;
  *((_DWORD *)v2 + 20) = 65;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_DWORD *)v2 + 30) = 0;
  llvm::AtomicRMWInst::Init((uint64_t)(v2 + 64), v4 >> 4, v6, (uint64_t)v3, (v4 >> 8) & 0x3F, (v4 >> 1) & 7, v7);
  *((_WORD *)v5 + 9) = *((_WORD *)v5 + 9) & 0xFFFE | *((_WORD *)this + 9) & 1;
  return v5;
}

char *llvm::TruncInst::cloneImpl(llvm::TruncInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000042;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::ZExtInst::cloneImpl(llvm::ZExtInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000043;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::SExtInst::cloneImpl(llvm::SExtInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000044;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::FPTruncInst::cloneImpl(llvm::FPTruncInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000049;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::FPExtInst::cloneImpl(llvm::FPExtInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004ALL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::UIToFPInst::cloneImpl(llvm::UIToFPInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000047;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::SIToFPInst::cloneImpl(llvm::SIToFPInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000048;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::FPToUIInst::cloneImpl(llvm::FPToUIInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000045;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::FPToSIInst::cloneImpl(llvm::FPToSIInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x100000046;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::PtrToIntInst::cloneImpl(llvm::PtrToIntInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004BLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::IntToPtrInst::cloneImpl(llvm::IntToPtrInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004CLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::BitCastInst::cloneImpl(llvm::BitCastInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004DLL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::AddrSpaceCastInst::cloneImpl(llvm::AddrSpaceCastInst *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v10[32];
  __int16 v11;

  v2 = (char *)operator new(0x60uLL);
  v3 = v2 + 32;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 32;
  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v11 = 257;
  *((_QWORD *)v2 + 4) = v5;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0x10000004ELL;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_DWORD *)v2 + 22) = 0;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 8);
    v6 = (_QWORD *)(v4 + 8);
    v7 = v8;
    *((_QWORD *)v2 + 1) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v2 + 8;
    *((_QWORD *)v2 + 2) = v6;
    *v6 = v2;
  }
  llvm::Value::setName((uint64_t ***)v2 + 4, (uint64_t)v10);
  return v3;
}

char *llvm::CallInst::cloneImpl(llvm::CallInst *this)
{
  int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char v16;

  v2 = *((_DWORD *)this + 5);
  v3 = v2 & 0x7FFFFFF;
  if (v2 < 0 && (*((_QWORD *)this - 4 * v3 - 1) & 0xFFFFFFFF0) != 0)
  {
    v5 = llvm::User::operator new((llvm::User *)0x50, v3, *((_DWORD *)this - 8 * v3 - 2) & 0xFFFFFFF0);
  }
  else
  {
    v4 = (char *)operator new(32 * v3 + 80);
    v5 = &v4[32 * v3];
    *((_DWORD *)v5 + 5) = *((_DWORD *)v5 + 5) & 0x38000000 | v3;
    if ((_DWORD)v3)
    {
      do
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = v5;
        v4 += 32;
      }
      while (v4 != v5);
    }
  }
  v6 = *((_QWORD *)this + 9);
  v7 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  *(_QWORD *)v5 = *(_QWORD *)this;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 84;
  v5[17] = 0;
  *((_WORD *)v5 + 9) = 0;
  *((_DWORD *)v5 + 5) = *((_DWORD *)v5 + 5) & 0xC0000000 | v7;
  *((_DWORD *)v5 + 14) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *((_QWORD *)v5 + 8) = *((_QWORD *)this + 8);
  *((_QWORD *)v5 + 9) = v6;
  LOBYTE(v6) = *((_WORD *)this + 9);
  *((_WORD *)v5 + 9) = *((_WORD *)this + 9) & 3;
  *((_WORD *)v5 + 9) = *((_WORD *)this + 9) & 0xFFC | v6 & 3;
  sub_1C53F5EAC((uint64_t)&v16, (uint64_t *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF), (uint64_t *)this, (uint64_t)&v5[-32 * v7]);
  v8 = 0;
  v9 = 0;
  v10 = *((_DWORD *)this + 5);
  if (v10 < 0)
  {
    v14 = (char *)this - 32 * (v10 & 0x7FFFFFF);
    v15 = *((_QWORD *)v14 - 1);
    v9 = v14 - 8;
    v8 = &v9[-v15];
  }
  v11 = *((_DWORD *)v5 + 5);
  if (v11 < 0)
    v12 = &v5[-*(_QWORD *)&v5[-32 * (v11 & 0x7FFFFFF) - 8] - 8 + -32 * (v11 & 0x7FFFFFF)];
  else
    v12 = 0;
  if (v9 != v8)
    memmove(v12, v8, v9 - v8);
  v5[17] = *((_BYTE *)this + 17) & 0xFE | v5[17] & 1;
  return v5;
}

llvm::Value *llvm::SelectInst::cloneImpl(llvm::SelectInst *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v1 = *((_QWORD *)this - 12);
  v2 = (uint64_t *)*((_QWORD *)this - 8);
  v3 = *((_QWORD *)this - 4);
  v6 = 257;
  return sub_1C4FC8748(v1, v2, v3, (uint64_t)v5, 0, 0);
}

uint64_t llvm::ExtractElementInst::cloneImpl(llvm::ExtractElementInst *this)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  _BYTE v5[32];
  __int16 v6;

  v1 = (_QWORD *)*((_QWORD *)this - 8);
  v2 = *((_QWORD *)this - 4);
  v6 = 257;
  v3 = operator new(0x80uLL);
  v3[21] = v3[21] & 0x38000000 | 2;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 16;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 7) = v3 + 16;
  return llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v3 + 16), v1, v2, (uint64_t)v5, 0);
}

uint64_t llvm::InsertElementInst::cloneImpl(llvm::InsertElementInst *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v9[32];
  __int16 v10;

  v1 = (_QWORD *)*((_QWORD *)this - 12);
  v2 = *((_QWORD *)this - 8);
  v3 = *((_QWORD *)this - 4);
  v10 = 257;
  v4 = operator new(0xA0uLL);
  v5 = 0;
  v6 = (uint64_t)(v4 + 24);
  v4[29] = v4[29] & 0x38000000 | 3;
  do
  {
    v7 = &v4[v5];
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    v5 += 8;
  }
  while (v5 != 24);
  return llvm::InsertElementInst::InsertElementInst(v6, v1, v2, v3, (uint64_t)v9, 0);
}

_BYTE **llvm::ShuffleVectorInst::cloneImpl(llvm::ShuffleVectorInst *this)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v2 = operator new(0xA8uLL);
  v2[21] = v2[21] & 0x38000000 | 2;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 16;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 16;
  v3 = (_QWORD *)*((_QWORD *)this - 8);
  v4 = *((_QWORD *)this - 4);
  v5 = (void *)*((_QWORD *)this + 8);
  v6 = *((unsigned int *)this + 18);
  v9 = 257;
  return llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v2 + 8, v3, v4, v5, v6, (uint64_t)v8, 0);
}

llvm::PHINode *llvm::PHINode::cloneImpl(llvm::PHINode *this)
{
  _DWORD *v2;

  v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v2 = 0;
  return llvm::PHINode::PHINode((llvm::PHINode *)(v2 + 2), this);
}

uint64_t llvm::ReturnInst::cloneImpl(llvm::ReturnInst *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v3 = operator new(32 * v2 + 64);
  v4 = (uint64_t)&v3[4 * v2];
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v4 + 20) & 0x38000000 | v2;
  if ((_DWORD)v2)
  {
    do
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != (_QWORD *)v4);
  }
  return llvm::ReturnInst::ReturnInst(v4, (uint64_t)this);
}

uint64_t llvm::BranchInst::cloneImpl(llvm::BranchInst *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v3 = operator new(32 * v2 + 64);
  v4 = (uint64_t)&v3[4 * v2];
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v4 + 20) & 0x38000000 | v2;
  if ((_DWORD)v2)
  {
    do
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      v3[3] = v4;
      v3 += 4;
    }
    while (v3 != (_QWORD *)v4);
  }
  return llvm::BranchInst::BranchInst(v4, this);
}

uint64_t llvm::SwitchInst::cloneImpl(llvm::SwitchInst *this)
{
  _DWORD *v2;

  v2 = operator new(0x48uLL);
  v2[7] = v2[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v2 = 0;
  return llvm::SwitchInst::SwitchInst((uint64_t)(v2 + 2), (uint64_t)this);
}

double llvm::UnreachableInst::cloneImpl(llvm::UnreachableInst *this)
{
  _QWORD *v1;
  char *v2;
  double result;

  v1 = **(_QWORD ***)this;
  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = *v1 + 1576;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 35;
  result = 0.0;
  *(_OWORD *)(v2 + 17) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  return result;
}

uint64_t *sub_1C53F5EAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *result;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2 == a3)
    return a2;
  result = a3;
  v5 = (_QWORD **)(a4 + 8);
  do
  {
    v6 = v5 - 1;
    v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5)
        (*v5)[2] = v5[1];
    }
    *v6 = v7;
    if (v7)
    {
      v10 = *(_QWORD **)(v7 + 8);
      v8 = (_QWORD *)(v7 + 8);
      v9 = v10;
      *v5 = v10;
      if (v10)
        v9[2] = v5;
      v5[1] = v8;
      *v8 = v6;
    }
    a2 += 4;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

_QWORD *sub_1C53F5F28(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[3] = 0;
  sub_1C4DFE394(__dst + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  return __dst;
}

uint64_t sub_1C53F5F90()
{
  __int128 v1;
  char v2;
  _BYTE *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Disables inttoptr/ptrtoint roundtrip optimization";
  *((_QWORD *)&v1 + 1) = 49;
  sub_1C617586C((uint64_t)&unk_1ED804800, "disable-i2p-p2i-opt", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED804800, &dword_1C475E000);
}

uint64_t llvm::DbgVariableIntrinsic::location_ops@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(this - 32 * (*(_DWORD *)(this + 20) & 0x7FFFFFF)) + 24);
  v3 = *(unsigned __int8 *)v2;
  if ((v3 - 3) >= 0xFFFFFFFE)
  {
    *a2 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    a2[1] = (v2 + 136) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (v3 == 32)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = (v4 + 8 * *(unsigned int *)(v2 + 32)) | 4;
    *a2 = v4 | 4;
    a2[1] = v5;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t llvm::DbgVariableIntrinsic::getVariableLocationOp(llvm::DbgVariableIntrinsic *this, unsigned int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
  v3 = *v2;
  if (v3 > 0x22)
    return *((_QWORD *)v2 + 16);
  if (v3 == 32)
  {
    v2 = *(unsigned __int8 **)(*((_QWORD *)v2 + 3) + 8 * a2);
    return *((_QWORD *)v2 + 16);
  }
  if (((1 << v3) & 0x6FFFFFFF0) == 0)
    return *((_QWORD *)v2 + 16);
  return 0;
}

void llvm::DbgVariableIntrinsic::replaceVariableLocationOp(llvm::DbgVariableIntrinsic *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unsigned __int8 *Impl;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v5 = *((_QWORD *)this - 4 * v4);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(unsigned __int8 *)v6;
  if ((v7 - 3) >= 0xFFFFFFFE)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFFFBLL;
    v10 = (v6 + 136) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (v7 == 32)
  {
    v8 = *(_QWORD *)(v6 + 24);
    v9 = v8 | 4;
    v10 = (v8 + 8 * *(unsigned int *)(v6 + 32)) | 4;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = v9;
  if (v9 != v10)
  {
    v11 = v9;
    do
    {
      v12 = (unint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
      v13 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v13 = *v12;
      if (*(llvm::Value **)(v13 + 128) == a2)
        break;
      v14 = (unint64_t)(v12 + 1) | 4;
      v15 = v12 + 17;
      v11 = (v11 & 4) != 0 ? v14 : (unint64_t)v15;
    }
    while (v11 != v10);
  }
  if (v7 == 32)
  {
    v48 = v50;
    v49 = 0x400000000;
    if (*((_BYTE *)a3 + 16) == 23)
    {
      if (**((unsigned __int8 **)a3 + 3) - 1 >= 2)
        v16 = 0;
      else
        v16 = (_QWORD *)*((_QWORD *)a3 + 3);
    }
    else
    {
      v16 = llvm::ValueAsMetadata::get(a3, a2);
    }
    if (v9 == v10)
    {
      v24 = v49;
    }
    else
    {
      do
      {
        v18 = (unint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        v19 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v19 = *v18;
        v20 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v20 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
        v21 = *(_QWORD *)(v19 + 128);
        v22 = v16;
        if (v21 != *(_QWORD *)(v20 + 128))
        {
          if (*(_BYTE *)(v21 + 16) == 23)
          {
            if (**(unsigned __int8 **)(v21 + 24) - 1 >= 2)
              v22 = 0;
            else
              v22 = *(_QWORD **)(v21 + 24);
          }
          else
          {
            v22 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v21, a2);
          }
        }
        v23 = v49;
        if (v49 >= (unint64_t)HIDWORD(v49))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v49 + 1, 8);
          v23 = v49;
        }
        *((_QWORD *)v48 + v23) = v22;
        v24 = v49 + 1;
        LODWORD(v49) = v49 + 1;
        if ((v9 & 4) != 0)
          v9 = (unint64_t)(v18 + 1) | 4;
        else
          v9 = (unint64_t)(v18 + 17);
      }
      while (v9 != v10);
    }
    v34 = **(uint64_t ***)this;
    Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(v34, v48, v24, 0, 1);
    v36 = llvm::MetadataAsValue::get(v34, Impl);
    v37 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    v38 = -v37;
    v39 = (uint64_t *)((char *)this - 32 * v37);
    if (*v39)
    {
      v40 = (char *)this + 32 * v38;
      v42 = (_QWORD *)*((_QWORD *)v40 + 2);
      v41 = v40 + 16;
      *v42 = *(v41 - 1);
      v43 = *(v41 - 1);
      if (v43)
        *(_QWORD *)(v43 + 16) = *v41;
    }
    *v39 = v36;
    if (v36)
    {
      v46 = *(_QWORD *)(v36 + 8);
      v44 = (uint64_t **)(v36 + 8);
      v45 = v46;
      v47 = (char *)this + 32 * v38;
      *((_QWORD *)v47 + 1) = v46;
      if (v46)
        *(_QWORD *)(v45 + 16) = v47 + 8;
      *((_QWORD *)v47 + 2) = v44;
      *v44 = v39;
    }
    if (v48 != v50)
      free(v48);
  }
  else
  {
    if (*((_BYTE *)a3 + 16) == 23)
    {
      v17 = -v4;
    }
    else
    {
      v25 = **(uint64_t ***)this;
      v26 = (unsigned __int8 *)llvm::ValueAsMetadata::get(a3, a2);
      a3 = (llvm::Value *)llvm::MetadataAsValue::get(v25, v26);
      v27 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      v17 = -v27;
      v5 = *((_QWORD *)this - 4 * v27);
    }
    v28 = (char *)this + 32 * v17;
    if (v5)
    {
      **((_QWORD **)v28 + 2) = *((_QWORD *)v28 + 1);
      v29 = *((_QWORD *)v28 + 1);
      if (v29)
        *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 2);
    }
    *(_QWORD *)v28 = a3;
    if (a3)
    {
      v32 = *((_QWORD *)a3 + 1);
      v30 = (_QWORD *)((char *)a3 + 8);
      v31 = v32;
      v33 = (char *)this + 32 * v17;
      *((_QWORD *)v33 + 1) = v32;
      if (v32)
        *(_QWORD *)(v31 + 16) = v33 + 8;
      *((_QWORD *)v33 + 2) = v30;
      *v30 = v28;
    }
  }
}

{
  uint64_t v4;
  char *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 *Impl;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v5 = (char *)this - 32 * v4;
  if (**(_BYTE **)(*(_QWORD *)v5 + 24) == 32)
  {
    v6 = a2;
    v43 = v45;
    v44 = 0x400000000;
    if (*((_BYTE *)a3 + 16) == 23)
    {
      if (**((unsigned __int8 **)a3 + 3) - 1 >= 2)
        v7 = 0;
      else
        v7 = (_QWORD *)*((_QWORD *)a3 + 3);
    }
    else
    {
      v7 = llvm::ValueAsMetadata::get(a3, a2);
    }
    v9 = 0;
    v10 = v6;
    while (1)
    {
      v11 = *(unsigned __int8 **)(*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
      v12 = *v11;
      if (v12 == 32)
        v13 = *((unsigned int *)v11 + 8);
      else
        v13 = 1;
      if (v9 >= v13)
      {
        v18 = **(uint64_t ***)this;
        Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(v18, v43, v44, 0, 1);
        v20 = llvm::MetadataAsValue::get(v18, Impl);
        v21 = *((_DWORD *)this + 5) & 0x7FFFFFF;
        v22 = -v21;
        v23 = (uint64_t *)((char *)this - 32 * v21);
        if (*v23)
        {
          v24 = (char *)this + 32 * v22;
          v26 = (_QWORD *)*((_QWORD *)v24 + 2);
          v25 = v24 + 16;
          *v26 = *(v25 - 1);
          v27 = *(v25 - 1);
          if (v27)
            *(_QWORD *)(v27 + 16) = *v25;
        }
        *v23 = v20;
        if (v20)
        {
          v30 = *(_QWORD *)(v20 + 8);
          v28 = (uint64_t **)(v20 + 8);
          v29 = v30;
          v31 = (char *)this + 32 * v22;
          *((_QWORD *)v31 + 1) = v30;
          if (v30)
            *(_QWORD *)(v29 + 16) = v31 + 8;
          *((_QWORD *)v31 + 2) = v28;
          *v28 = v23;
        }
        if (v43 != v45)
          free(v43);
        return;
      }
      v14 = v7;
      if (v10 != v9)
        break;
LABEL_25:
      v17 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 8);
        v17 = v44;
      }
      *((_QWORD *)v43 + v17) = v14;
      LODWORD(v44) = v44 + 1;
      ++v9;
    }
    if (v12 == 32)
    {
      v11 = *(unsigned __int8 **)(*((_QWORD *)v11 + 3) + 8 * v9);
    }
    else
    {
      v15 = v12 - 4;
      if (v15 < 0x1F && ((0x6FFFFFFFu >> v15) & 1) != 0)
      {
        v16 = 0;
LABEL_20:
        if (*(_BYTE *)(v16 + 16) == 23)
        {
          if (**(unsigned __int8 **)(v16 + 24) - 1 >= 2)
            v14 = 0;
          else
            v14 = *(_QWORD **)(v16 + 24);
        }
        else
        {
          v14 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v16, a2);
        }
        goto LABEL_25;
      }
    }
    v16 = *((_QWORD *)v11 + 16);
    goto LABEL_20;
  }
  if (*((_BYTE *)a3 + 16) == 23)
  {
    v8 = -v4;
    goto LABEL_39;
  }
  v32 = **(uint64_t ***)this;
  v33 = (unsigned __int8 *)llvm::ValueAsMetadata::get(a3, a2);
  a3 = (llvm::Value *)llvm::MetadataAsValue::get(v32, v33);
  v34 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  v8 = -v34;
  v5 = (char *)this - 32 * v34;
  if (*(_QWORD *)v5)
  {
LABEL_39:
    v35 = (char *)this + 32 * v8;
    v37 = (_QWORD *)*((_QWORD *)v35 + 2);
    v36 = v35 + 16;
    *v37 = *(v36 - 1);
    v38 = *(v36 - 1);
    if (v38)
      *(_QWORD *)(v38 + 16) = *v36;
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v41 = *((_QWORD *)a3 + 1);
    v39 = (_QWORD *)((char *)a3 + 8);
    v40 = v41;
    v42 = (char *)this + 32 * v8;
    *((_QWORD *)v42 + 1) = v41;
    if (v41)
      *(_QWORD *)(v40 + 16) = v42 + 8;
    *((_QWORD *)v42 + 2) = v39;
    *v39 = v5;
  }
}

void llvm::DbgVariableIntrinsic::addVariableLocationOps(uint64_t ***a1, llvm::ValueAsMetadata **a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7;
  llvm::Value *v8;
  uint64_t ***v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::ValueAsMetadata *v26;
  _QWORD *v27;
  uint64_t *v28;
  unsigned __int8 *Impl;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t ***v34;
  _QWORD *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t ***v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x1E0C80C00];
  v7 = llvm::MetadataAsValue::get(**a1, a4);
  v9 = &a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
  v10 = (uint64_t *)(v9 + 8);
  if (v9[8])
  {
    *v9[10] = (uint64_t *)v9[9];
    v11 = v9[9];
    if (v11)
      v11[2] = (uint64_t *)v9[10];
  }
  *v10 = v7;
  if (v7)
  {
    v14 = *(uint64_t ***)(v7 + 8);
    v12 = (uint64_t **)(v7 + 8);
    v13 = v14;
    v9[9] = v14;
    if (v14)
      v13[2] = (uint64_t *)(v9 + 9);
    v9[10] = v12;
    *v12 = v10;
  }
  v42 = v44;
  v43 = 0x400000000;
  v15 = (unint64_t)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)][3];
  v16 = *(unsigned __int8 *)v15;
  if ((v16 - 3) >= 0xFFFFFFFE)
  {
    v18 = v15 & 0xFFFFFFFFFFFFFFFBLL;
    v19 = (v15 + 136) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (v16 == 32)
  {
    v17 = *(_QWORD *)(v15 + 24);
    v18 = v17 | 4;
    v19 = (v17 + 8 * *(unsigned int *)(v15 + 32)) | 4;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (v18 == v19)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
      v22 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v22 = *v21;
      v23 = *(_QWORD *)(v22 + 128);
      if (*(_BYTE *)(v23 + 16) == 23)
      {
        if (**(unsigned __int8 **)(v23 + 24) - 1 >= 2)
          v24 = 0;
        else
          v24 = *(_QWORD **)(v23 + 24);
      }
      else
      {
        v24 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v23, v8);
        v20 = v43;
      }
      if (v20 >= HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v20 + 1, 8);
        v20 = v43;
      }
      *((_QWORD *)v42 + v20) = v24;
      v20 = v43 + 1;
      LODWORD(v43) = v43 + 1;
      if ((v18 & 4) != 0)
        v18 = (unint64_t)(v21 + 1) | 4;
      else
        v18 = (unint64_t)(v21 + 17);
    }
    while (v18 != v19);
  }
  if (a3)
  {
    v25 = 8 * a3;
    do
    {
      v26 = *a2;
      if (*((_BYTE *)*a2 + 16) == 23)
      {
        if (**((unsigned __int8 **)v26 + 3) - 1 >= 2)
          v27 = 0;
        else
          v27 = (_QWORD *)*((_QWORD *)v26 + 3);
      }
      else
      {
        v27 = llvm::ValueAsMetadata::get(v26, v8);
        v20 = v43;
      }
      if (v20 >= HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v20 + 1, 8);
        v20 = v43;
      }
      *((_QWORD *)v42 + v20) = v27;
      v20 = v43 + 1;
      LODWORD(v43) = v43 + 1;
      ++a2;
      v25 -= 8;
    }
    while (v25);
  }
  v28 = **a1;
  Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(v28, v42, v20, 0, 1);
  v30 = llvm::MetadataAsValue::get(v28, Impl);
  v31 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  v32 = -v31;
  v33 = (uint64_t *)&a1[-4 * v31];
  if (*v33)
  {
    v34 = &a1[4 * v32];
    v36 = v34[2];
    v35 = v34 + 2;
    *v36 = (uint64_t *)*(v35 - 1);
    v37 = *(v35 - 1);
    if (v37)
      *(_QWORD *)(v37 + 16) = *v35;
  }
  *v33 = v30;
  if (v30)
  {
    v40 = *(uint64_t ***)(v30 + 8);
    v38 = (uint64_t **)(v30 + 8);
    v39 = v40;
    v41 = &a1[4 * v32];
    v41[1] = v40;
    if (v40)
      v39[2] = (uint64_t *)(v41 + 1);
    v41[2] = v38;
    *v38 = v33;
  }
  if (v42 != v44)
    free(v42);
}

unint64_t llvm::DbgVariableIntrinsic::getFragmentSizeInBits(llvm::DbgVariableIntrinsic *this)
{
  char *v1;
  int8x16_t v3;
  char v4;

  v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1 + 8) + 24) + 24), *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1 + 8) + 24) + 32), &v3);
  if (v4)
    return v3.i64[0];
  else
    return llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)(*((_QWORD *)v1 + 4) + 24));
}

uint64_t llvm::Intrinsic::lookupLLVMIntrinsicByName(const char **a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  size_t v4;
  const char **v5;
  const char **v6;
  unint64_t v7;
  uint64_t v8;
  const char **v9;
  _BYTE *v10;
  size_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char **v16;
  const char *v17;
  const char **v18;
  const char **v19;
  const char *v20;
  int v21;
  unint64_t v22;
  const char **v23;
  const char **v24;
  const char *v25;
  const char **v26;
  const char *v27;
  size_t v28;
  const char **v31;
  const char **v33;
  unint64_t v35;

  v4 = a4;
  v5 = a1;
  v6 = &a1[a2];
  v31 = v6;
  if (a4 < 5)
  {
    v33 = a1;
    goto LABEL_34;
  }
  v7 = 8 * a2;
  v33 = a1;
  if (8 * a2 < 1)
    goto LABEL_34;
  v8 = 4;
  v5 = a1;
  v9 = &a1[a2];
  do
  {
    if (v4 <= v8 + 1 || (v10 = memchr(&a3[v8 + 1], 46, v4 - (v8 + 1))) == 0 || (v11 = v10 - a3, v10 - a3 == -1))
      v11 = v4;
    v12 = v7 >> 3;
    v13 = &a3[v8];
    v35 = v11;
    v14 = v11 - v8;
    v33 = v5;
    while (1)
    {
      v15 = v12 >> 1;
      v16 = &v5[v12 >> 1];
      v17 = &(*v16)[v8];
      if ((strncmp(v17, v13, v14) & 0x80000000) == 0)
        break;
      v5 = v16 + 1;
      v15 = v12 + ~v15;
LABEL_13:
      v12 = v15;
      v6 = v5;
      if (!v15)
        goto LABEL_30;
    }
    if (strncmp(v13, v17, v14) < 0)
    {
      v9 = &v5[v12 >> 1];
      goto LABEL_13;
    }
    if (v12 >= 2)
    {
      do
      {
        v18 = &v5[v15 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v21 = strncmp(&v20[v8], v13, v14);
        if (v21 >= 0)
          v15 >>= 1;
        else
          v15 += ~(v15 >> 1);
        if (v21 < 0)
          v5 = v19;
      }
      while (v15);
    }
    v6 = v16 + 1;
    if (v9 == v16 + 1)
    {
      v6 = v9;
    }
    else
    {
      v22 = v9 - (v16 + 1);
      do
      {
        v23 = &v6[v22 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        if (strncmp(v13, &v25[v8], v14) < 0)
        {
          v22 >>= 1;
        }
        else
        {
          v6 = v24;
          v22 += ~(v22 >> 1);
        }
      }
      while (v22);
    }
LABEL_30:
    v4 = a4;
    v8 = v35;
    if (v35 >= a4)
      break;
    v7 = (char *)v6 - (char *)v5;
    v9 = v6;
  }
  while ((char *)v6 - (char *)v5 > 0);
LABEL_34:
  if ((char *)v6 - (char *)v5 <= 0)
    v26 = v33;
  else
    v26 = v5;
  if (v26 == v31)
    return 0xFFFFFFFFLL;
  v27 = *v26;
  if (!*v26)
  {
    if (v4)
    {
      v28 = 0;
      goto LABEL_48;
    }
    return (unint64_t)((char *)v26 - (char *)a1) >> 3;
  }
  v28 = strlen(*v26);
  if (v4 == v28 && (!v4 || !memcmp(a3, v27, v4)))
    return (unint64_t)((char *)v26 - (char *)a1) >> 3;
  if (v4 >= v28 && (!v28 || !memcmp(a3, v27, v28)))
  {
LABEL_48:
    if (a3[v28] == 46)
      return (unint64_t)((char *)v26 - (char *)a1) >> 3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::InstrProfInstBase::getNumCounters(llvm::InstrProfInstBase *this)
{
  return ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
}

uint64_t llvm::InstrProfInstBase::getIndex(llvm::InstrProfInstBase *this)
{
  return ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
}

llvm::ValueHandleBase *llvm::InstrProfIncrementInst::getStep(llvm::InstrProfIncrementInst *this, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ValueHandleBase *result;
  uint64_t v4;
  llvm::ConstantInt *v5;
  unint64_t v6;
  char v7;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  uint64_t v10;
  unsigned int v11;

  if (*(_DWORD *)(*((_QWORD *)this - 4) + 36) == 161)
    return (llvm::ValueHandleBase *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[16];
  v4 = ***(_QWORD ***)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  v5 = *(llvm::ConstantInt **)(v4 + 1984);
  v6 = *(unsigned int *)(v4 + 1992);
  v11 = v6 >> 8;
  if (v6 >> 8 > 0x40)
  {
    v8 = v5;
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, 1, 0);
    v5 = v8;
  }
  else
  {
    if (v6 <= 0xFF)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
    v10 = v7 & 1;
  }
  result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41)
  {
    if (v10)
    {
      v9 = result;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      return v9;
    }
  }
  return result;
}

uint64_t llvm::ConstrainedFPIntrinsic::getRoundingMode(llvm::ConstrainedFPIntrinsic *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  char *v12;
  uint64_t v13;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    v2 = 0;
  }
  else if (v1 == 39)
  {
    v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v2 = 2;
  }
  v3 = 0;
  v4 = *((_DWORD *)this + 5);
  v5 = -(uint64_t)(v4 & 0x7FFFFFF);
  if (v4 < 0)
  {
    v12 = (char *)this - 32 * (v4 & 0x7FFFFFF);
    v13 = *((_QWORD *)v12 - 1);
    if ((v13 & 0xFFFFFFFF0) != 0)
      v3 = *((_DWORD *)v12 - 3) - *(_DWORD *)&v12[-v13];
    else
      v3 = 0;
  }
  v6 = 0;
  LOBYTE(v7) = 0;
  v8 = *((_QWORD *)this
       + 4 * v5
       + 4 * ((-32 * v2 + 32 * (unint64_t)-v3 - 32 * v5 - 32) >> 5)
       - 8);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 23;
  else
    v9 = 0;
  if (v9)
  {
    v7 = *(_QWORD *)(v8 + 24);
    if (v7)
    {
      if (*(_BYTE *)v7)
      {
        v6 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        v10 = llvm::convertStrToRoundingMode((uint64_t *)(*(_QWORD *)(v7 + 8) + 24), **(_QWORD **)(v7 + 8));
        LOBYTE(v7) = v10;
        v6 = HIBYTE(v10);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  return v7 | (v6 << 8);
}

uint64_t llvm::ConstrainedFPIntrinsic::getExceptionBehavior(llvm::ConstrainedFPIntrinsic *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  char *v12;
  uint64_t v13;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    v2 = 0;
  }
  else if (v1 == 39)
  {
    v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v2 = 2;
  }
  v3 = 0;
  v4 = *((_DWORD *)this + 5);
  v5 = -(uint64_t)(v4 & 0x7FFFFFF);
  if (v4 < 0)
  {
    v12 = (char *)this - 32 * (v4 & 0x7FFFFFF);
    v13 = *((_QWORD *)v12 - 1);
    if ((v13 & 0xFFFFFFFF0) != 0)
      v3 = *((_DWORD *)v12 - 3) - *(_DWORD *)&v12[-v13];
    else
      v3 = 0;
  }
  v6 = 0;
  LOBYTE(v7) = 0;
  v8 = *((_QWORD *)this
       + 4 * v5
       + 4 * ((-32 * v2 + 32 * (unint64_t)-v3 - 32 * v5 - 32) >> 5)
       - 4);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 23;
  else
    v9 = 0;
  if (v9)
  {
    v7 = *(_QWORD *)(v8 + 24);
    if (v7)
    {
      if (*(_BYTE *)v7)
      {
        v6 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        v10 = llvm::convertStrToExceptionBehavior((_QWORD *)(*(_QWORD *)(v7 + 8) + 24), **(_QWORD **)(v7 + 8));
        LOBYTE(v7) = v10;
        v6 = HIBYTE(v10);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  return v7 | (v6 << 8);
}

uint64_t sub_1C53F7018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v16;
  int v17;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 16;
  if (*(_BYTE *)v1)
    return 16;
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v2 != 3)
    return 16;
  if (*(_WORD *)(v2 + 24) == 25967 && *(_BYTE *)(v2 + 26) == 113)
    return 1;
  if (*(_WORD *)(v2 + 24) == 26479 && *(_BYTE *)(v2 + 26) == 116)
    return 2;
  if (*(_WORD *)(v2 + 24) == 26479 && *(_BYTE *)(v2 + 26) == 101)
    return 3;
  if (*(_WORD *)(v2 + 24) == 27759 && *(_BYTE *)(v2 + 26) == 116)
    return 4;
  if (*(_WORD *)(v2 + 24) == 27759 && *(_BYTE *)(v2 + 26) == 101)
    return 5;
  if (*(_WORD *)(v2 + 24) == 28271 && *(_BYTE *)(v2 + 26) == 101)
    return 6;
  if (*(_WORD *)(v2 + 24) == 29295 && *(_BYTE *)(v2 + 26) == 100)
    return 7;
  if (*(_WORD *)(v2 + 24) == 28277 && *(_BYTE *)(v2 + 26) == 111)
    return 8;
  if (*(_WORD *)(v2 + 24) == 25973 && *(_BYTE *)(v2 + 26) == 113)
    return 9;
  if (*(_WORD *)(v2 + 24) == 26485 && *(_BYTE *)(v2 + 26) == 116)
    return 10;
  if (*(_WORD *)(v2 + 24) == 26485 && *(_BYTE *)(v2 + 26) == 101)
    return 11;
  if (*(_WORD *)(v2 + 24) == 27765 && *(_BYTE *)(v2 + 26) == 116)
    return 12;
  if (*(_WORD *)(v2 + 24) == 27765 && *(_BYTE *)(v2 + 26) == 101)
    return 13;
  v16 = *(unsigned __int16 *)(v2 + 24);
  v17 = *(unsigned __int8 *)(v2 + 26);
  if (v16 != 28277 || v17 != 101)
    return 16;
  return 14;
}

uint64_t llvm::ConstrainedFPIntrinsic::isUnaryOp(llvm::ConstrainedFPIntrinsic *this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36) - 79;
  return (v1 < 0x28) & (0xFF21FCF10FuLL >> v1);
}

BOOL llvm::ConstrainedFPIntrinsic::isTernaryOp(llvm::ConstrainedFPIntrinsic *this)
{
  return (*(_DWORD *)(*((_QWORD *)this - 4) + 36) & 0xFFFFFFFD) == 88;
}

BOOL llvm::ConstrainedFPIntrinsic::classof(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 - 32) + 36) - 79) < 0x28;
}

unint64_t llvm::VPIntrinsic::getStaticVectorLength(llvm::VPIntrinsic *this)
{
  llvm::VPIntrinsic *v1;
  unint64_t MaskParamPos;

  v1 = this;
  MaskParamPos = llvm::VPIntrinsic::getMaskParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  if (HIDWORD(MaskParamPos)
    && *((_QWORD *)v1 + 4 * MaskParamPos + -4 * (*((_DWORD *)v1 + 5) & 0x7FFFFFF)))
  {
    v1 = (llvm::VPIntrinsic *)*((_QWORD *)v1 + 4 * MaskParamPos + -4 * (*((_DWORD *)v1 + 5) & 0x7FFFFFF));
  }
  return *(unsigned int *)(*(_QWORD *)v1 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)v1 + 8) == 19) << 32);
}

uint64_t llvm::VPIntrinsic::getMaskParam(llvm::VPIntrinsic *this)
{
  unint64_t MaskParamPos;

  MaskParamPos = llvm::VPIntrinsic::getMaskParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  if (HIDWORD(MaskParamPos))
    return *((_QWORD *)this + 4 * MaskParamPos + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  else
    return 0;
}

uint64_t llvm::VPIntrinsic::setMaskParam(llvm::VPIntrinsic *this, llvm::Value *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v14;

  result = llvm::VPIntrinsic::getMaskParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  v5 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v6 = &v5[32 * result];
  v7 = v6;
  if (*(_QWORD *)v6)
  {
    v9 = (_QWORD *)*((_QWORD *)v6 + 2);
    v8 = v6 + 16;
    *v9 = *(v8 - 1);
    v10 = *(v8 - 1);
    if (v10)
      *(_QWORD *)(v10 + 16) = *v8;
  }
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (char **)((char *)a2 + 8);
    v11 = v13;
    v14 = &v5[32 * result];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v12;
    *v12 = v7;
  }
  return result;
}

uint64_t llvm::VPIntrinsic::getVectorLengthParam(llvm::VPIntrinsic *this)
{
  unint64_t VectorLengthParamPos;

  VectorLengthParamPos = llvm::VPIntrinsic::getVectorLengthParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  if (HIDWORD(VectorLengthParamPos))
    return *((_QWORD *)this + 4 * VectorLengthParamPos + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  else
    return 0;
}

uint64_t llvm::VPIntrinsic::setVectorLengthParam(llvm::VPIntrinsic *this, llvm::Value *a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v14;

  result = llvm::VPIntrinsic::getVectorLengthParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  v5 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v6 = &v5[32 * result];
  v7 = v6;
  if (*(_QWORD *)v6)
  {
    v9 = (_QWORD *)*((_QWORD *)v6 + 2);
    v8 = v6 + 16;
    *v9 = *(v8 - 1);
    v10 = *(v8 - 1);
    if (v10)
      *(_QWORD *)(v10 + 16) = *v8;
  }
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (char **)((char *)a2 + 8);
    v11 = v13;
    v14 = &v5[32 * result];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v12;
    *v12 = v7;
  }
  return result;
}

uint64_t llvm::VPIntrinsic::getPointerAlignment(llvm::VPIntrinsic *this)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  v2 = 1;
  if (v1 > 347)
  {
    if (v1 != 374 && v1 != 367)
      goto LABEL_6;
  }
  else if (v1 != 137)
  {
LABEL_6:
    v2 = 0;
  }
  return llvm::AttributeList::getParamAlignment((llvm::VPIntrinsic *)((char *)this + 64), v2);
}

uint64_t llvm::VPIntrinsic::getMemoryPointerParamPos(llvm::VPIntrinsic *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0x100000000;
  v2 = 1;
  if ((int)this > 347)
  {
    if ((_DWORD)this != 374 && (_DWORD)this != 367)
    {
      if ((_DWORD)this != 348)
LABEL_9:
        v1 = 0;
LABEL_10:
      v2 = 0;
    }
  }
  else
  {
    if ((_DWORD)this == 136)
      goto LABEL_10;
    if ((_DWORD)this != 137)
    {
      if ((_DWORD)this != 345)
        goto LABEL_9;
      goto LABEL_10;
    }
  }
  return v2 | v1;
}

uint64_t llvm::VPIntrinsic::getMemoryPointerParam(llvm::VPIntrinsic *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = 0;
  v2 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  v3 = 1;
  if (v2 <= 347)
  {
    if (v2 != 136)
    {
      if (v2 == 137)
        return *((_QWORD *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      if (v2 != 345)
        return v1;
    }
LABEL_9:
    v3 = 0;
    return *((_QWORD *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  if (v2 == 374 || v2 == 367)
    return *((_QWORD *)this + 4 * v3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (v2 == 348)
    goto LABEL_9;
  return v1;
}

uint64_t llvm::VPIntrinsic::getMemoryDataParam(llvm::VPIntrinsic *this)
{
  int v1;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if (v1 == 137 || v1 == 374 || v1 == 367)
    return *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  else
    return 0;
}

uint64_t llvm::VPIntrinsic::getMemoryDataParamPos(llvm::VPIntrinsic *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = 0x100000000;
  if (v1 <= 347)
  {
    if (v1 == 137)
      return result;
    return 0;
  }
  if (v1 != 374 && v1 != 367)
    return 0;
  return result;
}

uint64_t llvm::VPIntrinsic::getForOpcode(llvm::VPIntrinsic *this)
{
  if (((_DWORD)this - 12) > 0x2D)
    return 0;
  else
    return dword_1C8650D00[(int)this - 12];
}

uint64_t llvm::VPIntrinsic::canIgnoreVectorLengthParam(llvm::VPIntrinsic *this)
{
  unint64_t StaticVectorLength;
  unint64_t VectorLengthParamPos;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];
  unint64_t v11;

  StaticVectorLength = llvm::VPIntrinsic::getStaticVectorLength(this);
  VectorLengthParamPos = llvm::VPIntrinsic::getVectorLengthParamPos((llvm::VPIntrinsic *)*(unsigned int *)(*((_QWORD *)this - 4) + 36));
  if (!HIDWORD(VectorLengthParamPos))
    return 1;
  v4 = *((_QWORD *)this + 4 * VectorLengthParamPos + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (!v4)
    return 1;
  if (!HIDWORD(StaticVectorLength))
  {
    if (*(_BYTE *)(v4 + 16) == 16)
    {
      v5 = (unint64_t *)(v4 + 24);
      if (*(_DWORD *)(v4 + 32) >= 0x41u)
        v5 = (unint64_t *)*v5;
      return *v5 >= StaticVectorLength;
    }
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  if (!v8)
    return 0;
  v9 = v8 + 272;
  v10[1] = v8 + 272;
  v11 = 0;
  v10[0] = (uint64_t)&v11;
  if (!sub_1C53F7D0C((uint64_t)v10, 17, v4))
  {
    if ((_DWORD)StaticVectorLength == 1)
    {
      v10[0] = v9;
      return sub_1C53F7E14(v10, v4);
    }
    return 0;
  }
  return v11 >= StaticVectorLength;
}

uint64_t llvm::VPIntrinsic::getDeclarationForParams(uint64_t *a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2 > 338)
  {
    switch(a2)
    {
      case 339:
      case 340:
      case 341:
      case 342:
      case 347:
      case 353:
      case 370:
      case 372:
      case 376:
      case 378:
        goto LABEL_3;
      case 343:
      case 344:
      case 346:
      case 349:
      case 351:
      case 352:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 368:
      case 371:
      case 373:
      case 375:
      case 377:
        goto LABEL_10;
      case 345:
        v10 = a3;
        v11 = **a4;
        a2 = 345;
        goto LABEL_4;
      case 348:
        v10 = a3;
        v11 = **a4;
        a2 = 348;
        goto LABEL_4;
      case 350:
      case 369:
        goto LABEL_11;
      case 367:
        v8 = a4[1];
        v10 = **a4;
        v11 = *v8;
        a2 = 367;
        goto LABEL_4;
      case 374:
        v9 = a4[1];
        v10 = **a4;
        v11 = *v9;
        a2 = 374;
        goto LABEL_4;
      default:
        if (a2 != 381)
          goto LABEL_10;
LABEL_3:
        v10 = a3;
        v11 = **a4;
LABEL_4:
        v4 = 2;
        break;
    }
    return llvm::Intrinsic::getDeclaration(a1, a2, &v10, v4);
  }
  if (a2 == 136)
  {
    v10 = a3;
    v11 = **a4;
    v7 = a4[1];
    goto LABEL_18;
  }
  if (a2 == 137)
  {
    v6 = a4[1];
    v10 = **a4;
    v11 = *v6;
    v7 = a4[2];
LABEL_18:
    v12 = *v7;
    v4 = 3;
    return llvm::Intrinsic::getDeclaration(a1, a2, &v10, v4);
  }
LABEL_10:
  v10 = **a4;
  if ((a2 - 354) <= 0xC)
LABEL_11:
    v10 = *a4[1];
  v4 = 1;
  return llvm::Intrinsic::getDeclaration(a1, a2, &v10, v4);
}

unint64_t llvm::VPReductionIntrinsic::getVectorParamPos(llvm::VPReductionIntrinsic *this)
{
  return (((_DWORD)this - 354) < 0xD) | ((unint64_t)(((_DWORD)this - 354) < 0xD) << 32);
}

uint64_t llvm::VPCmpIntrinsic::getPredicate(llvm::VPCmpIntrinsic *this)
{
  int v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v13;
  int v14;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if (v1 == 346)
  {
    v4 = *(_QWORD *)(((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8] + 24);
    if (v4 && !*(_BYTE *)v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)v5 == 3)
      {
        v6 = *(_WORD *)(v5 + 24) == 26485 && *(_BYTE *)(v5 + 26) == 116;
        if (v6)
          return 34;
        if (*(_WORD *)(v5 + 24) == 26485 && *(_BYTE *)(v5 + 26) == 101)
          return 35;
        if (*(_WORD *)(v5 + 24) == 27765 && *(_BYTE *)(v5 + 26) == 116)
          return 36;
        if (*(_WORD *)(v5 + 24) == 27765 && *(_BYTE *)(v5 + 26) == 101)
          return 37;
        if (*(_WORD *)(v5 + 24) == 26483 && *(_BYTE *)(v5 + 26) == 116)
          return 38;
        if (*(_WORD *)(v5 + 24) == 26483 && *(_BYTE *)(v5 + 26) == 101)
          return 39;
        if (*(_WORD *)(v5 + 24) == 27763 && *(_BYTE *)(v5 + 26) == 116)
          return 40;
        v13 = *(unsigned __int16 *)(v5 + 24);
        v14 = *(unsigned __int8 *)(v5 + 26);
        if (v13 == 27763 && v14 == 101)
          return 41;
      }
      else if (*(_QWORD *)v5 == 2)
      {
        if (*(_WORD *)(v5 + 24) == 29029)
          return 32;
        if (*(_WORD *)(v5 + 24) == 25966)
          return 33;
      }
    }
    return 42;
  }
  v6 = v1 == 334;
  v2 = 2;
  if (!v6)
    v2 = 0;
  return sub_1C53F7018(*((_QWORD *)this + 4 * v2 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
}

BOOL llvm::VPReductionIntrinsic::getVectorParamPos(llvm::VPReductionIntrinsic *this)
{
  return (*(_DWORD *)(*((_QWORD *)this - 4) + 36) - 354) < 0xD;
}

uint64_t llvm::VPReductionIntrinsic::getStartParamPos(llvm::VPReductionIntrinsic *this)
{
  return 0;
}

unint64_t llvm::VPReductionIntrinsic::getStartParamPos(llvm::VPReductionIntrinsic *this)
{
  return (unint64_t)(((_DWORD)this - 354) < 0xD) << 32;
}

uint64_t llvm::BinaryOpIntrinsic::getBinaryOp(llvm::BinaryOpIntrinsic *this)
{
  int v1;
  uint64_t result;
  char v3;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  result = 13;
  v3 = v1 - 6;
  if (((1 << v3) & 0xC000000003) == 0)
  {
    if (((1 << v3) & 0x6000000600000) != 0)
      return 15;
    else
      return 17;
  }
  return result;
}

uint64_t llvm::BinaryOpIntrinsic::isSigned(llvm::BinaryOpIntrinsic *this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36) - 262;
  return (v1 < 0x17) & (0x610003u >> v1);
}

uint64_t llvm::BinaryOpIntrinsic::getNoWrapKind(llvm::BinaryOpIntrinsic *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36) - 262;
  v2 = v1 > 0x16;
  v3 = (1 << v1) & 0x610003;
  if (v2 || v3 == 0)
    return 1;
  else
    return 2;
}

uint64_t llvm::GCProjectionInst::getStatepoint(llvm::GCProjectionInst *this)
{
  uint64_t result;
  uint64_t UniquePredecessor;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (*(_BYTE *)(result + 16) == 94)
  {
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(result + 40));
    v3 = *(_QWORD *)(UniquePredecessor + 40);
    if (v3 == UniquePredecessor + 40)
    {
      return 0;
    }
    else
    {
      if (v3)
        v4 = v3 - 24;
      else
        v4 = 0;
      if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
        return 0;
      else
        return v4;
    }
  }
  return result;
}

uint64_t llvm::GCRelocateInst::getBasePtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v8[3];
  char v9;

  Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  sub_1C5062CEC(Statepoint, 5, (uint64_t)v8);
  if (v9)
  {
    v3 = v8[0];
  }
  else
  {
    v4 = llvm::GCProjectionInst::getStatepoint(this);
    v3 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
  }
  v5 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
  v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(unsigned int **)v6;
  return *(_QWORD *)(v3 + 32 * *v6);
}

uint64_t llvm::GCRelocateInst::getDerivedPtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v8[3];
  char v9;

  Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  sub_1C5062CEC(Statepoint, 5, (uint64_t)v8);
  if (v9)
  {
    v3 = v8[0];
  }
  else
  {
    v4 = llvm::GCProjectionInst::getStatepoint(this);
    v3 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
  }
  v5 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
  v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(unsigned int **)v6;
  return *(_QWORD *)(v3 + 32 * *v6);
}

uint64_t sub_1C53F7D0C(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t result;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    if (sub_1C4E7B154((_QWORD **)a1, *(_QWORD *)(a3 - 64))
      && (sub_1C53F7E14((uint64_t *)(a1 + 8), *(_QWORD *)(a3 - 32)) & 1) != 0)
    {
      return 1;
    }
    result = sub_1C4E7B154((_QWORD **)a1, *(_QWORD *)(a3 - 32));
    if ((_DWORD)result)
      return sub_1C53F7E14((uint64_t *)(a1 + 8), *(_QWORD *)(a3 - 64));
  }
  else if (v5 == 5 && *(unsigned __int16 *)(a3 + 18) == a2)
  {
    if (sub_1C4E7B154((_QWORD **)a1, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))
      && (sub_1C53F7E14((uint64_t *)(a1 + 8), *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
    {
      return 1;
    }
    result = sub_1C4E7B154((_QWORD **)a1, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
    if ((_DWORD)result)
      return sub_1C53F7E14((uint64_t *)(a1 + 8), *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1C53F7E14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::Constant **v10;
  llvm::Constant *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && *(_DWORD *)(v3 + 36) == 382)
          return 1;
      }
    }
  }
  v19 = 0;
  v17 = (uint64_t)&v19;
  result = sub_1C4E714F4((_QWORD **)&v17, a2);
  if (!(_DWORD)result)
    return result;
  v5 = v19;
  v6 = *(unsigned __int8 *)(v19 + 16);
  if (v6 != 62 && (v6 != 5 || *(_WORD *)(v19 + 18) != 34))
    return 0;
  v7 = 64;
  if (v6 != 62)
    v7 = 24;
  v8 = *(_DWORD *)(v19 + 20);
  if ((v8 & 0x7FFFFFF) != 2)
    return 0;
  v9 = *(_QWORD *)(v19 + v7);
  if (*(_BYTE *)(v9 + 8) != 19)
    return 0;
  v10 = (v8 & 0x40000000) != 0 ? *(llvm::Constant ***)(v19 - 8) : (llvm::Constant **)(v19 - 64);
  v11 = *v10;
  v12 = *((unsigned __int8 *)*v10 + 16);
  v13 = !v11 || v12 > 0x14;
  if (v13 || (llvm::Constant::isNullValue(v11) & 1) == 0 && (sub_1C4E71060((uint64_t)&v17, v11) & 1) == 0)
    return 0;
  v18 = 64;
  v17 = 1;
  v14 = *(_DWORD *)(v5 + 20);
  v15 = (v14 & 0x40000000) != 0 ? *(_QWORD *)(v5 - 8) : v5 - 32 * (v14 & 0x7FFFFFF);
  v16 = sub_1C4D8A7F0((llvm::APInt *)&v17, *(unsigned __int8 **)(v15 + 32)) && sub_1C53E2F94(*a1, v9) == 8;
  if (v18 >= 0x41)
  {
    if (v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  return v16;
}

llvm::LLVMContext *llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  llvm::LLVMContextImpl *v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  size_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  llvm::StringMapImpl *v25;
  llvm::StringMapImpl *v26;
  _QWORD *v28;
  llvm::LLVMContext *v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *__s1;
  char v33[16];
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::LLVMContextImpl *)operator new();
  v3 = 0;
  *(_QWORD *)this = llvm::LLVMContextImpl::LLVMContextImpl(v2, this);
  v34 = "dbg";
  v35 = 3;
  v36 = "tbaa";
  v37 = 4;
  v38 = "prof";
  v39 = 4;
  v40 = "fpmath";
  v41 = 6;
  v42 = "range";
  v43 = 5;
  v44 = "tbaa.struct";
  v45 = 11;
  v46 = "invariant.load";
  v47 = 14;
  v48 = "alias.scope";
  v49 = 11;
  v50 = "noalias";
  v51 = 7;
  v52 = "nontemporal";
  v53 = 11;
  v54 = "llvm.mem.parallel_loop_access";
  v55 = 29;
  v56 = "nonnull";
  v57 = 7;
  v58 = "dereferenceable";
  v59 = 15;
  v60 = "dereferenceable_or_null";
  v61 = 23;
  v62 = "make.implicit";
  v63 = 13;
  v64 = "unpredictable";
  v65 = 13;
  v66 = "invariant.group";
  v67 = 15;
  v68 = "align";
  v69 = 5;
  v70 = "llvm.loop";
  v71 = 9;
  v72 = "type";
  v73 = 4;
  v74 = "section_prefix";
  v75 = 14;
  v76 = "absolute_symbol";
  v77 = 15;
  v78 = "associated";
  v79 = 10;
  v80 = "callees";
  v81 = 7;
  v82 = "irr_loop";
  v83 = 8;
  v84 = "llvm.access.group";
  v85 = 17;
  v86 = "callback";
  v87 = 8;
  v88 = "llvm.preserve.access.index";
  v89 = 26;
  v90 = "vcall_visibility";
  v91 = 16;
  v92 = "noundef";
  v93 = 7;
  v94 = "annotation";
  v95 = 10;
  v29 = this;
  do
  {
    v4 = &v33[24 * v3 + 8];
    v5 = *((_QWORD *)v4 + 2);
    __s1 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v6 = *(_QWORD *)this;
    v7 = *(_DWORD *)(*(_QWORD *)this + 2460);
    v8 = *(_DWORD *)(v6 + 2456);
    if (!v8)
    {
      *(_QWORD *)(v6 + 2460) = 0;
      v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v28)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v28[16] = 2;
      *(_QWORD *)(v6 + 2448) = v28;
      v8 = 16;
      *(_DWORD *)(v6 + 2456) = 16;
    }
    v31 = v3;
    v30 = v7;
    v9 = 0;
    if (v5)
    {
      v10 = v5;
      v11 = __s1;
      do
      {
        v12 = *v11++;
        v9 = 33 * v9 + v12;
        --v10;
      }
      while (v10);
    }
    v13 = v8 - 1;
    v14 = *(_QWORD *)(v6 + 2448);
    v15 = v14 + 8 * v8 + 8;
    v16 = -1;
    v17 = 1;
    v18 = v9;
    while (1)
    {
      v19 = v18 & v13;
      v20 = *(_QWORD **)(v14 + 8 * v19);
      if (!v20)
        break;
      if (v20 == (_QWORD *)-8)
      {
        if (v16 == -1)
          v16 = v18 & v13;
      }
      else if (*(_DWORD *)(v15 + 4 * v19) == v9
             && v5 == *v20
             && (!v5 || !memcmp(__s1, (char *)v20 + *(unsigned int *)(v6 + 2468), v5)))
      {
        goto LABEL_18;
      }
      v18 = v17 + v19;
      ++v17;
    }
    v21 = v16;
    if (v16 == -1)
    {
      v21 = v19;
      v19 = v19;
    }
    else
    {
      v19 = v16;
    }
    *(_DWORD *)(v15 + 4 * v21) = v9;
    v20 = *(_QWORD **)(v14 + 8 * v19);
LABEL_18:
    if (v20)
    {
      if (v20 != (_QWORD *)-8)
        goto LABEL_20;
      --*(_DWORD *)(v6 + 2464);
    }
    v22 = (char *)operator new(v5 + 17, (std::align_val_t)8uLL);
    v23 = v22;
    v24 = v22 + 16;
    if (v5)
      memcpy(v22 + 16, __s1, v5);
    v24[v5] = 0;
    *(_QWORD *)v23 = v5;
    *((_DWORD *)v23 + 2) = v30;
    *(_QWORD *)(v14 + 8 * v19) = v23;
    ++*(_DWORD *)(v6 + 2460);
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v6 + 2448), v19);
LABEL_20:
    v3 = v31 + 1;
    this = v29;
  }
  while (v31 != 30);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "deopt", 5uLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "funclet", 7uLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "gc-transition", 0xDuLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "cfguardtarget", 0xDuLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "preallocated", 0xCuLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "gc-live", 7uLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "clang.arc.attachedcall", 0x16uLL);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_DWORD **)v29, "ptrauth", 7uLL);
  v25 = (llvm::StringMapImpl *)(*(_QWORD *)v29 + 2608);
  v33[0] = *(_DWORD *)(*(_QWORD *)v29 + 2620);
  sub_1C53FF564(v25, "singlethread", 0xCuLL, v33);
  v26 = (llvm::StringMapImpl *)(*(_QWORD *)v29 + 2608);
  v33[0] = *(_DWORD *)(*(_QWORD *)v29 + 2620);
  sub_1C53FF564(v26, "", 0, v33);
  return v29;
}

uint64_t llvm::LLVMContext::getMDKindID(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *i;
  int v27;

  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 2460);
  v6 = *(_DWORD *)(*a1 + 2456);
  if (!v6)
  {
    *(_QWORD *)(v4 + 2460) = 0;
    v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v21[16] = 2;
    *(_QWORD *)(v4 + 2448) = v21;
    v6 = 16;
    *(_DWORD *)(v4 + 2456) = 16;
  }
  v27 = v5;
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(v4 + 2448);
  v12 = v6 - 1;
  v13 = v11 + 8 * v6 + 8;
  v14 = -1;
  v15 = 1;
  v16 = v7;
  while (1)
  {
    v17 = v16 & v12;
    v18 = *(_QWORD *)(v11 + 8 * v17);
    if (!v18)
      break;
    if (v18 == -8)
    {
      if (v14 == -1)
        v14 = v16 & v12;
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7
           && a3 == *(_QWORD *)v18
           && (!a3 || !memcmp(a2, (const void *)(v18 + *(unsigned int *)(v4 + 2468)), a3)))
    {
      goto LABEL_17;
    }
    v16 = v15 + v17;
    ++v15;
  }
  v19 = v14;
  if (v14 == -1)
  {
    v19 = v17;
    v17 = v17;
  }
  else
  {
    v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  v18 = *(_QWORD *)(v11 + 8 * v17);
LABEL_17:
  if (v18)
  {
    if (v18 != -8)
      return *(unsigned int *)(v18 + 8);
    --*(_DWORD *)(v4 + 2464);
  }
  v22 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = v22 + 16;
  if (a3)
    memcpy(v22 + 16, a2, a3);
  v24[a3] = 0;
  *(_QWORD *)v23 = a3;
  *((_DWORD *)v23 + 2) = v27;
  *(_QWORD *)(v11 + 8 * v17) = v23;
  ++*(_DWORD *)(v4 + 2460);
  for (i = (uint64_t *)(*(_QWORD *)(v4 + 2448)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 2448), v17));
        ;
        ++i)
  {
    v18 = *i;
    if (*i && v18 != -8)
      break;
  }
  return *(unsigned int *)(v18 + 8);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContextImpl **this, llvm::Value *a2)
{
  llvm::LLVMContextImpl *v2;

  v2 = *this;
  if (v2)
  {
    llvm::LLVMContextImpl::~LLVMContextImpl(v2, a2);
    MEMORY[0x1CAA32FC0]();
  }
}

{
  llvm::LLVMContextImpl *v2;

  v2 = *this;
  if (v2)
  {
    llvm::LLVMContextImpl::~LLVMContextImpl(v2, a2);
    MEMORY[0x1CAA32FC0]();
  }
}

_QWORD *llvm::LLVMContext::addModule(llvm::SmallPtrSetImplBase **this, llvm::Module *a2)
{
  return sub_1C4774094(*this, (uint64_t)a2);
}

_QWORD *llvm::LLVMContext::removeModule(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  result = sub_1C477672C(*a1, a2);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = 16;
  if (v4 == *(_QWORD *)v2)
    v5 = 20;
  if (result != (_QWORD *)(v4 + 8 * *(unsigned int *)(v2 + v5)))
  {
    *result = -2;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t *llvm::LLVMContext::setDiagnosticHandlerCallBack(uint64_t *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  v4 = *result;
  *(_QWORD *)(*(_QWORD *)(*result + 72) + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8) = a3;
  *(_BYTE *)(v4 + 80) = a4;
  return result;
}

uint64_t llvm::LLVMContext::setDiagnosticHandler(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a1;
  v6 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = v6;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(*a1 + 80) = a3;
  return result;
}

uint64_t llvm::LLVMContext::getDiagnosticsHotnessRequested(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 81);
}

uint64_t llvm::LLVMContext::getDiagnosticsHotnessThreshold(llvm::LLVMContext *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 96))
    return *(_QWORD *)(*(_QWORD *)this + 88);
  else
    return -1;
}

uint64_t llvm::LLVMContext::getMainRemarkStreamer(llvm::LLVMContext *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 64);
}

{
  return *(_QWORD *)(*(_QWORD *)this + 64);
}

uint64_t llvm::LLVMContext::getLLVMRemarkStreamer(llvm::LLVMContext *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 128);
}

{
  return *(_QWORD *)(*(_QWORD *)this + 128);
}

uint64_t llvm::LLVMContext::getDiagnosticHandlerCallBack(llvm::LLVMContext *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 16);
}

uint64_t llvm::LLVMContext::getDiagnosticContext(llvm::LLVMContext *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 8);
}

uint64_t *llvm::LLVMContext::setYieldCallback(uint64_t *this, void (*a2)(llvm::LLVMContext *, void *), void *a3)
{
  uint64_t v3;

  v3 = *this;
  *(_QWORD *)(v3 + 136) = a2;
  *(_QWORD *)(v3 + 144) = a3;
  return this;
}

uint64_t llvm::LLVMContext::yield(uint64_t this)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)this + 136);
  if (v1)
    return v1();
  return this;
}

uint64_t llvm::LLVMContext::diagnose(uint64_t this, const llvm::DiagnosticInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  const char *v6;
  size_t v7;
  _WORD *v8;
  llvm *v9;
  _BYTE *v10;
  void *v11;
  llvm *v12;

  v3 = this;
  v4 = *(_QWORD *)this;
  if ((*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7)
  {
    this = *(_QWORD *)(v4 + 128);
    if (this)
    {
      llvm::LLVMRemarkStreamer::emit((llvm::LLVMRemarkStreamer *)this, a2);
      v4 = *(_QWORD *)v3;
    }
  }
  if (!*(_QWORD *)(v4 + 72)
    || *(_BYTE *)(v4 + 80)
    && (*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7
    && ((this = (*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2), !(_DWORD)this)
     || *((_BYTE *)a2 + 352) && !*((_BYTE *)a2 + 72))
    || (this = (*(uint64_t (**)(_QWORD, const llvm::DiagnosticInfo *))(**(_QWORD **)(*(_QWORD *)v3 + 72)
                                                                               + 16))(*(_QWORD *)(*(_QWORD *)v3 + 72), a2), (this & 1) == 0))
  {
    if ((*((_DWORD *)a2 + 2) - 18) < 0xFFFFFFF7
      || (this = (*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2), (_DWORD)this)
      && (!*((_BYTE *)a2 + 352) || *((_BYTE *)a2 + 72)))
    {
      v11 = &unk_1E814E990;
      v12 = (llvm *)llvm::errs((llvm *)this);
      v5 = (llvm::raw_ostream *)llvm::errs(v12);
      v6 = off_1E8168010[*((char *)a2 + 12)];
      v7 = strlen(v6);
      v8 = (_WORD *)*((_QWORD *)v5 + 4);
      if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v8)
      {
        if (v7)
        {
          memcpy(v8, v6, v7);
          v8 = (_WORD *)(*((_QWORD *)v5 + 4) + v7);
          *((_QWORD *)v5 + 4) = v8;
        }
      }
      else
      {
        v5 = llvm::raw_ostream::write(v5, v6, v7);
        v8 = (_WORD *)*((_QWORD *)v5 + 4);
      }
      if (*((_QWORD *)v5 + 3) - (_QWORD)v8 > 1uLL)
      {
        *v8 = 8250;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ": ", 2uLL);
      }
      v9 = (llvm *)(*(uint64_t (**)(const llvm::DiagnosticInfo *, void **))(*(_QWORD *)a2 + 24))(a2, &v11);
      this = (uint64_t)llvm::errs(v9);
      v10 = *(_BYTE **)(this + 32);
      if (*(_BYTE **)(this + 24) == v10)
      {
        this = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)this, "\n", 1uLL);
      }
      else
      {
        *v10 = 10;
        ++*(_QWORD *)(this + 32);
      }
      if (!*((_BYTE *)a2 + 12))
        exit(1);
    }
  }
  return this;
}

char *llvm::LLVMContext::getDiagnosticMessagePrefix(int a1)
{
  return off_1E8168010[a1];
}

void llvm::LLVMContext::getMDKindNames(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  BOOL v13;

  sub_1C53F8EE0((uint64_t)a2, *(unsigned int *)(*(_QWORD *)a1 + 2460));
  v4 = *(unsigned int *)(*(_QWORD *)a1 + 2456);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(*(_QWORD *)a1 + 2448); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(*(_QWORD *)a1 + 2448);
  }
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 2448) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    v8 = *i;
    do
    {
      v9 = v8 + 2;
      v10 = (uint64_t *)*v8;
      v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *v11 = v9;
      v11[1] = v10;
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 + 1 == 0;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::LLVMContext::getOperandBundleTags(uint64_t *a1, _QWORD *a2)
{
  llvm::LLVMContextImpl::getOperandBundleTags(*a1, a2);
}

uint64_t llvm::LLVMContext::getOrInsertSyncScopeID(_QWORD *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3;
  llvm::StringMapImpl *v4;
  char v6[8];

  v3 = *a1;
  v4 = (llvm::StringMapImpl *)(*a1 + 2608);
  v6[0] = *(_DWORD *)(v3 + 2620);
  return *(unsigned __int8 *)(*sub_1C53FF564(v4, a2, a3, v6) + 8);
}

void llvm::LLVMContext::getSyncScopeNames(uint64_t *a1, _QWORD *a2)
{
  llvm::LLVMContextImpl::getSyncScopeNames(*a1, a2);
}

void llvm::LLVMContext::setGC(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v6 = *a1;
  v7 = (uint64_t *)(*a1 + 2640);
  v12[0] = a2;
  v13 = 0;
  if ((sub_1C61805E8(v7, v12, &v13) & 1) != 0)
    v8 = v13;
  else
    v8 = *(_QWORD *)(v6 + 2640) + 32 * *(unsigned int *)(v6 + 2656);
  if (v8 == *(_QWORD *)(*a1 + 2640) + 32 * *(unsigned int *)(*a1 + 2656))
  {
    v11 = *a1 + 2640;
    v13 = a2;
    *(_OWORD *)__p = *a3;
    v15 = *((_QWORD *)a3 + 2);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    sub_1C53F8F54(v11, &v13, (__int128 *)__p, (uint64_t)v12);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = v8 + 8;
    if (*(char *)(v8 + 31) < 0)
      operator delete(*(void **)v9);
    v10 = *a3;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v9 = v10;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

uint64_t sub_1C53F8CFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v6 = 0;
  v3 = sub_1C61805E8((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)v6;
    if (*(char *)(v6 + 31) < 0)
      operator delete(*(void **)(v6 + 8));
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t llvm::LLVMContext::shouldDiscardValueNames(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 2664);
}

uint64_t llvm::LLVMContext::isODRUniquingDebugTypes(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 1184);
}

uint64_t *llvm::LLVMContext::disableDebugTypeODRUniquing(uint64_t *this)
{
  uint64_t v1;

  v1 = *this;
  if (*(_BYTE *)(*this + 1184))
  {
    this = (uint64_t *)MEMORY[0x1CAA32FB4](*(_QWORD *)(v1 + 1160), 8);
    *(_BYTE *)(v1 + 1184) = 0;
  }
  return this;
}

uint64_t llvm::LLVMContext::getOptPassGate(llvm::LLVMContext *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  result = *(_QWORD *)(*(_QWORD *)this + 2672);
  if (!result)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
    {
      v4 = v1;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
      v1 = v4;
    }
    result = llvm::OptBisector;
    *(_QWORD *)(v1 + 2672) = llvm::OptBisector;
  }
  return result;
}

uint64_t llvm::LLVMContext::setOptPassGate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)result + 2672) = a2;
  return result;
}

uint64_t llvm::LLVMContext::getDiagHandlerPtr(llvm::LLVMContext *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 72);
}

uint64_t llvm::LLVMContext::getDiagnosticHandler@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 72);
  *(_QWORD *)(*(_QWORD *)this + 72) = 0;
  *a2 = v2;
  return this;
}

BOOL llvm::LLVMContext::supportsTypedPointers(llvm::LLVMContextImpl **this)
{
  return !llvm::LLVMContextImpl::getOpaquePointers(*this);
}

void **sub_1C53F8E74(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 56))
  {
    if (*((char *)this + 55) < 0)
      operator delete(this[4]);
    *((_BYTE *)this + 56) = 0;
  }
  v2 = this[3];
  this[3] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  if (*((_BYTE *)this + 16))
  {
    llvm::Regex::~Regex((llvm::Regex *)this);
    *((_BYTE *)this + 16) = 0;
  }
  return this;
}

void sub_1C53F8EE0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 16);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v2), 16 * a2 - 16 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C53F8F54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C61805E8((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C62407B4(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v12 = *a3;
    *(_QWORD *)(result + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 8) = v12;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C53F8FF4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C61805E8((uint64_t *)a1, (_QWORD *)v13, &v18);
          v14 = v18;
          *v18 = *(_QWORD *)v13;
          v15 = *(_OWORD *)(v13 + 8);
          v14[3] = *(_QWORD *)(v13 + 24);
          *(_OWORD *)(v14 + 1) = v15;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 + 31) < 0)
            operator delete(*(void **)(v13 + 8));
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_1C53F9150(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C61805E8(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C62407B4((uint64_t)a1, (uint64_t)a2, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

llvm::LLVMContextImpl *llvm::LLVMContextImpl::LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::LLVMContext *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &unk_1E814E3B0;
  *((_QWORD *)this + 9) = v4;
  *((_WORD *)this + 40) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 1;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 58) = 64;
  v5 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL);
  if (!v5)
    goto LABEL_7;
  v5[64] = -1;
  *((_QWORD *)this + 28) = v5;
  *((_DWORD *)this + 59) = 0;
  *((_DWORD *)this + 62) = 64;
  v6 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL);
  if (!v6
    || (v6[64] = -1,
        *((_QWORD *)this + 30) = v6,
        *((_DWORD *)this + 63) = 0,
        *((_DWORD *)this + 66) = 64,
        (v7 = malloc_type_calloc(0x41uLL, 8uLL, 0x6D9A4F0CuLL)) == 0))
  {
LABEL_7:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v7[64] = -1;
  *((_QWORD *)this + 32) = v7;
  *(_QWORD *)((char *)this + 268) = 0;
  *(_OWORD *)((char *)this + 276) = 0u;
  *((_DWORD *)this + 73) = 24;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 39) = (char *)this + 328;
  *((_QWORD *)this + 40) = 0x400000000;
  *((_QWORD *)this + 45) = (char *)this + 376;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 1;
  *((_BYTE *)this + 1160) = 0;
  *((_BYTE *)this + 1184) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 114) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_DWORD *)this + 120) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 138) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_DWORD *)this + 144) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_DWORD *)this + 150) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 156) = 0;
  *((_OWORD *)this + 38) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 174) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_DWORD *)this + 180) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 186) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_DWORD *)this + 192) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_DWORD *)this + 198) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_DWORD *)this + 204) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_DWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 216) = 0;
  *((_OWORD *)this + 53) = 0u;
  *((_DWORD *)this + 222) = 0;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_DWORD *)this + 228) = 0;
  *((_OWORD *)this + 56) = 0u;
  *((_DWORD *)this + 234) = 0;
  *(_OWORD *)((char *)this + 920) = 0u;
  *((_DWORD *)this + 240) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 246) = 0;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 252) = 0;
  *((_OWORD *)this + 62) = 0u;
  *((_DWORD *)this + 258) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *((_DWORD *)this + 264) = 0;
  *((_OWORD *)this + 65) = 0u;
  *((_DWORD *)this + 270) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 276) = 0;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 282) = 0;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
  *(_OWORD *)((char *)this + 1220) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *((_DWORD *)this + 314) = 0;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_DWORD *)this + 320) = 0;
  *((_OWORD *)this + 79) = 0u;
  *((_DWORD *)this + 326) = 0;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 332) = 0;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 338) = 0;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *((_DWORD *)this + 344) = 0;
  *((_OWORD *)this + 85) = 0u;
  *((_DWORD *)this + 350) = 0;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((_DWORD *)this + 356) = 0;
  *((_OWORD *)this + 88) = 0u;
  *((_DWORD *)this + 357) = 16;
  *((_DWORD *)this + 364) = 0;
  *((_OWORD *)this + 90) = 0u;
  *((_DWORD *)this + 370) = 0;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 376) = 0;
  *((_OWORD *)this + 93) = 0u;
  *((_DWORD *)this + 382) = 0;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *((_DWORD *)this + 388) = 0;
  *((_OWORD *)this + 96) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *((_QWORD *)this + 197) = a2;
  *((_QWORD *)this + 198) = 7;
  *((_QWORD *)this + 199) = 0;
  *((_QWORD *)this + 200) = a2;
  *((_QWORD *)this + 201) = 8;
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 203) = a2;
  *((_OWORD *)this + 102) = 0u;
  *((_QWORD *)this + 206) = a2;
  *((_QWORD *)this + 207) = 1;
  *((_QWORD *)this + 208) = 0;
  *((_QWORD *)this + 209) = a2;
  *((_QWORD *)this + 210) = 2;
  *((_QWORD *)this + 211) = 0;
  *((_QWORD *)this + 212) = a2;
  *((_QWORD *)this + 213) = 3;
  *((_QWORD *)this + 214) = 0;
  *((_QWORD *)this + 215) = a2;
  *((_QWORD *)this + 216) = 9;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 218) = a2;
  *((_QWORD *)this + 219) = 12;
  *((_QWORD *)this + 220) = 0;
  *((_QWORD *)this + 221) = a2;
  *((_QWORD *)this + 222) = 4;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 224) = a2;
  *((_QWORD *)this + 225) = 5;
  *((_QWORD *)this + 226) = 0;
  *((_QWORD *)this + 227) = a2;
  *((_QWORD *)this + 228) = 6;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 230) = a2;
  *((_QWORD *)this + 231) = 10;
  *((_QWORD *)this + 232) = 0;
  *((_QWORD *)this + 233) = a2;
  *((_QWORD *)this + 234) = 11;
  *((_QWORD *)this + 235) = 0;
  *((_QWORD *)this + 236) = a2;
  *((_QWORD *)this + 238) = 0;
  *((_QWORD *)this + 237) = 269;
  *((_QWORD *)this + 239) = a2;
  *((_QWORD *)this + 241) = 0;
  *((_QWORD *)this + 240) = 2061;
  *((_QWORD *)this + 242) = a2;
  *((_QWORD *)this + 244) = 0;
  *((_QWORD *)this + 243) = 4109;
  *((_QWORD *)this + 245) = a2;
  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 246) = 8205;
  *((_QWORD *)this + 248) = a2;
  *((_QWORD *)this + 250) = 0;
  *((_QWORD *)this + 249) = 16397;
  *((_QWORD *)this + 251) = a2;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 252) = 32781;
  *((_OWORD *)this + 127) = 0u;
  *((_QWORD *)this + 256) = 0;
  *((_QWORD *)this + 257) = (char *)this + 2072;
  *((_QWORD *)this + 258) = 0x400000000;
  *((_QWORD *)this + 263) = (char *)this + 2120;
  *((_OWORD *)this + 132) = 0u;
  *((_QWORD *)this + 266) = 1;
  *((_QWORD *)this + 267) = (char *)this + 2040;
  *((_DWORD *)this + 540) = 0;
  *((_OWORD *)this + 134) = 0u;
  *((_DWORD *)this + 546) = 0;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *((_DWORD *)this + 552) = 0;
  *((_OWORD *)this + 137) = 0u;
  *((_DWORD *)this + 558) = 0;
  *(_OWORD *)((char *)this + 2216) = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_QWORD *)this + 282) = 0x1000000000;
  *((_DWORD *)this + 568) = 0;
  *((_DWORD *)this + 574) = 0;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *((_DWORD *)this + 580) = 0;
  *((_OWORD *)this + 144) = 0u;
  *((_DWORD *)this + 586) = 0;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *((_DWORD *)this + 592) = 0;
  *((_OWORD *)this + 147) = 0u;
  *((_DWORD *)this + 598) = 0;
  *(_OWORD *)((char *)this + 2376) = 0u;
  *((_DWORD *)this + 604) = 0;
  *((_OWORD *)this + 150) = 0u;
  *((_DWORD *)this + 610) = 0;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *((_DWORD *)this + 616) = 0;
  *((_OWORD *)this + 153) = 0u;
  *((_DWORD *)this + 617) = 16;
  *((_DWORD *)this + 624) = 0;
  *((_OWORD *)this + 155) = 0u;
  *((_DWORD *)this + 630) = 0;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *((_DWORD *)this + 636) = 0;
  *((_OWORD *)this + 158) = 0u;
  *((_DWORD *)this + 642) = 0;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *((_DWORD *)this + 648) = 0;
  *((_OWORD *)this + 161) = 0u;
  *((_DWORD *)this + 649) = 16;
  *((_DWORD *)this + 656) = 0;
  *((_OWORD *)this + 163) = 0u;
  *((_DWORD *)this + 657) = 16;
  *((_BYTE *)this + 2664) = 0;
  *((_QWORD *)this + 334) = 0;
  *((_WORD *)this + 1340) = 0;
  *((_DWORD *)this + 664) = 0;
  *((_OWORD *)this + 165) = 0u;
  if (word_1ED830760)
  {
    *((_BYTE *)this + 2680) = byte_1ED8307D8;
    *((_BYTE *)this + 2681) = 1;
  }
  return this;
}

void llvm::LLVMContextImpl::~LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::Value *a2)
{
  int v3;
  int v4;
  llvm::Module **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Module **v9;
  llvm::Module *v10;
  llvm::DIArgList **v11;
  llvm::DIArgList **v12;
  llvm::DIArgList *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  llvm::DIArgList **v205;
  uint64_t v206;
  llvm::DIArgList **v207;
  llvm::DIArgList **v208;
  llvm::DIArgList **v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  llvm::MDNode **v238;
  llvm::MDNode **v239;
  llvm::MDNode *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 **v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 **v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t **v265;
  uint64_t v266;
  uint64_t **v267;
  uint64_t **v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned __int8 **v272;
  uint64_t **v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned __int8 **v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int8 **v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int8 **v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned __int8 **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 **v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned __int8 **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned __int8 **v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned __int8 **v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 **v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned __int8 **v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned __int8 **v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned __int8 **v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unsigned __int8 **v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned __int8 **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unsigned __int8 **v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned __int8 **v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned __int8 **v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned __int8 **v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned __int8 **v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned __int8 **v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned __int8 **v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unsigned __int8 **v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unsigned __int8 **v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned __int8 **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unsigned __int8 **v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unsigned __int8 **v570;
  uint64_t *v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  unsigned int v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  _QWORD **v585;
  uint64_t v586;
  uint64_t *v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t *v591;
  unsigned int v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD **v601;
  uint64_t v602;
  uint64_t *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t *v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _QWORD **v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t *v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  _QWORD **v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t *v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t v640;
  uint64_t *v641;
  uint64_t *v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t *v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t *v655;
  uint64_t *v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t *v665;
  int v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  llvm::Value *v670;
  int v671;
  uint64_t v672;
  _QWORD **v673;
  uint64_t v674;
  uint64_t v675;
  char *v676;
  char *v677;
  char *v678;
  uint64_t v679;
  uint64_t v680;
  char *v681;
  uint64_t v682;
  int v683;
  unsigned int v684;
  _QWORD *v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  llvm::Value *v691;
  int v692;
  uint64_t v693;
  _QWORD **v694;
  uint64_t v695;
  uint64_t v696;
  char *v697;
  char *v698;
  char *v699;
  uint64_t v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  int v704;
  unsigned int v705;
  _QWORD *v706;
  uint64_t v707;
  unsigned int *v708;
  int v709;
  int v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  llvm::Value *v714;
  int v715;
  uint64_t v716;
  _QWORD **v717;
  uint64_t v718;
  uint64_t v719;
  char *v720;
  char *v721;
  char *v722;
  uint64_t v723;
  uint64_t v724;
  char *v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  unsigned int v729;
  _QWORD *v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  llvm::Value *v734;
  int v735;
  uint64_t v736;
  _QWORD **v737;
  uint64_t v738;
  uint64_t v739;
  char *v740;
  char *v741;
  char *v742;
  uint64_t v743;
  uint64_t v744;
  char *v745;
  uint64_t v746;
  int v747;
  unsigned int v748;
  _QWORD *v749;
  uint64_t v750;
  unint64_t v751;
  unint64_t v752;
  _QWORD *v753;
  uint64_t v754;
  uint64_t v755;
  unsigned int *v756;
  int v757;
  uint64_t v758;
  _QWORD *v759;
  uint64_t v760;
  llvm::Value *v761;
  int v762;
  uint64_t v763;
  _QWORD **v764;
  uint64_t v765;
  uint64_t v766;
  char *v767;
  char *v768;
  char *v769;
  uint64_t v770;
  uint64_t v771;
  char *v772;
  uint64_t v773;
  unsigned int *v774;
  unsigned int v775;
  uint64_t v776;
  int v777;
  uint64_t v778;
  _DWORD *v779;
  uint64_t v780;
  uint64_t v781;
  unsigned int v782;
  llvm::ValueHandleBase *v783;
  uint64_t v784;
  int v785;
  unsigned int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  BOOL v795;
  _QWORD *v796;
  void **v797;
  void **i;
  _QWORD *v799;
  _QWORD *j;
  _QWORD *v802;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  _QWORD *v807;
  uint64_t v808;
  _QWORD *v809;
  _QWORD *v810;
  unsigned int v811;
  uint64_t v812;
  _QWORD *v813;
  llvm::MetadataAsValue **v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  _QWORD *v818;
  uint64_t v819;
  _QWORD *v820;
  _QWORD *v821;
  uint64_t v822;
  _QWORD *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  BOOL v831;
  unsigned int v832;
  uint64_t v833;
  uint64_t v834;
  char *v835;
  uint64_t v836;
  char *v837;
  uint64_t v838;
  unsigned __int8 *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  BOOL v844;
  llvm::Value *v845;
  llvm::Value *v846;
  int v847;
  uint64_t v848;
  char *v849;
  _QWORD **v850;
  uint64_t v851;
  uint64_t v852;
  llvm::Value *v853;
  llvm::Value *v854;
  llvm::Value *v855;
  llvm::Value *v856;
  llvm::Value *v857;
  void *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  void *v863;
  unint64_t v864;
  unint64_t v865;
  char *v866;
  uint64_t v867;
  uint64_t v868;
  _DWORD *v869;
  unsigned int v870;
  _QWORD *v871;
  uint64_t v872;
  char *v873;
  char *v874;
  char *v875;
  uint64_t v876;
  uint64_t v877;
  char *v878;
  uint64_t v879;
  int v880;
  int v881;
  uint64_t v882;
  _QWORD *v883;
  unint64_t v884;
  unint64_t v885;
  _QWORD *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int v894;
  unsigned int v895;
  _QWORD *v896;
  uint64_t v897;
  int v898;
  int v899;
  unint64_t v900;
  unint64_t v901;
  unint64_t v902;
  unint64_t v903;
  _QWORD *v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  unint64_t v908;
  _QWORD *v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  unint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  unint64_t v918;
  _QWORD *v919;
  uint64_t v920;
  uint64_t v921;
  unsigned int *v922;
  unsigned int *v923;
  unsigned int *v924;
  unsigned int *v925;
  void *v926;
  uint64_t v927;
  uint64_t v928;
  int v929;
  char v930;
  char v931[8];
  _DWORD *v932;
  uint64_t v933;
  int v934;
  char v935;
  uint64_t v936;

  v936 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 6);
  while (v3 != v4)
  {
    v5 = (llvm::Module **)*((_QWORD *)this + 1);
    if (v5 == *(llvm::Module ***)this)
      v6 = 20;
    else
      v6 = 16;
    v7 = *(unsigned int *)((char *)this + v6);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      v9 = &v5[v7];
      while (1)
      {
        v10 = *v5;
        if ((unint64_t)*v5 < 0xFFFFFFFFFFFFFFFELL)
          break;
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          v5 = v9;
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      v10 = *v5;
    }
    if (v10)
    {
      llvm::Module::~Module(v10);
      MEMORY[0x1CAA32FC0]();
      v3 = *((_DWORD *)this + 5);
      v4 = *((_DWORD *)this + 6);
    }
  }
  v11 = (llvm::DIArgList **)*((_QWORD *)this + 149);
  v12 = (llvm::DIArgList **)*((_QWORD *)this + 150);
  while (v11 != v12)
  {
    v13 = *v11;
    if (*(_BYTE *)*v11 == 32)
      llvm::DIArgList::dropAllReferences(v13);
    else
      llvm::MDNode::dropAllReferences((uint64_t)v13);
    ++v11;
  }
  v14 = *((_QWORD *)this + 55);
  v15 = *((unsigned int *)this + 114);
  v16 = (uint64_t *)(v14 + 8 * v15);
  if (*((_DWORD *)this + 112))
  {
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      v18 = (uint64_t *)*((_QWORD *)this + 55);
      while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_25;
      }
    }
    else
    {
      v18 = (uint64_t *)*((_QWORD *)this + 55);
    }
  }
  else
  {
LABEL_25:
    v18 = (uint64_t *)(v14 + 8 * v15);
  }
  v19 = (uint64_t *)(v14 + 8 * v15);
LABEL_28:
  while (v18 != v19)
  {
    v20 = v18 + 1;
    llvm::MDNode::dropAllReferences(*v18);
    v18 = v16;
    if (v20 != v16)
    {
      v18 = v20;
      while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v18 == v16)
        {
          v18 = v16;
          goto LABEL_28;
        }
      }
    }
  }
  v21 = *((_QWORD *)this + 58);
  v22 = *((unsigned int *)this + 120);
  v23 = (uint64_t *)(v21 + 8 * v22);
  if (*((_DWORD *)this + 118))
  {
    if ((_DWORD)v22)
    {
      v24 = 8 * v22;
      v25 = (uint64_t *)*((_QWORD *)this + 58);
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v25;
        v24 -= 8;
        if (!v24)
          goto LABEL_39;
      }
    }
    else
    {
      v25 = (uint64_t *)*((_QWORD *)this + 58);
    }
  }
  else
  {
LABEL_39:
    v25 = (uint64_t *)(v21 + 8 * v22);
  }
  v26 = (uint64_t *)(v21 + 8 * v22);
LABEL_42:
  while (v25 != v26)
  {
    v27 = v25 + 1;
    llvm::MDNode::dropAllReferences(*v25);
    v25 = v23;
    if (v27 != v23)
    {
      v25 = v27;
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v25 == v23)
        {
          v25 = v23;
          goto LABEL_42;
        }
      }
    }
  }
  v28 = *((_QWORD *)this + 61);
  v29 = *((unsigned int *)this + 126);
  v30 = (uint64_t *)(v28 + 8 * v29);
  if (*((_DWORD *)this + 124))
  {
    if ((_DWORD)v29)
    {
      v31 = 8 * v29;
      v32 = (uint64_t *)*((_QWORD *)this + 61);
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_53;
      }
    }
    else
    {
      v32 = (uint64_t *)*((_QWORD *)this + 61);
    }
  }
  else
  {
LABEL_53:
    v32 = (uint64_t *)(v28 + 8 * v29);
  }
  v33 = (uint64_t *)(v28 + 8 * v29);
LABEL_56:
  while (v32 != v33)
  {
    v34 = v32 + 1;
    llvm::MDNode::dropAllReferences(*v32);
    v32 = v30;
    if (v34 != v30)
    {
      v32 = v34;
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v32 == v30)
        {
          v32 = v30;
          goto LABEL_56;
        }
      }
    }
  }
  v35 = *((_QWORD *)this + 64);
  v36 = *((unsigned int *)this + 132);
  v37 = (uint64_t *)(v35 + 8 * v36);
  if (*((_DWORD *)this + 130))
  {
    if ((_DWORD)v36)
    {
      v38 = 8 * v36;
      v39 = (uint64_t *)*((_QWORD *)this + 64);
      while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v39;
        v38 -= 8;
        if (!v38)
          goto LABEL_67;
      }
    }
    else
    {
      v39 = (uint64_t *)*((_QWORD *)this + 64);
    }
  }
  else
  {
LABEL_67:
    v39 = (uint64_t *)(v35 + 8 * v36);
  }
  v40 = (uint64_t *)(v35 + 8 * v36);
LABEL_70:
  while (v39 != v40)
  {
    v41 = v39 + 1;
    llvm::MDNode::dropAllReferences(*v39);
    v39 = v37;
    if (v41 != v37)
    {
      v39 = v41;
      while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v39 == v37)
        {
          v39 = v37;
          goto LABEL_70;
        }
      }
    }
  }
  v42 = *((_QWORD *)this + 67);
  v43 = *((unsigned int *)this + 138);
  v44 = (uint64_t *)(v42 + 8 * v43);
  if (*((_DWORD *)this + 136))
  {
    if ((_DWORD)v43)
    {
      v45 = 8 * v43;
      v46 = (uint64_t *)*((_QWORD *)this + 67);
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v46;
        v45 -= 8;
        if (!v45)
          goto LABEL_81;
      }
    }
    else
    {
      v46 = (uint64_t *)*((_QWORD *)this + 67);
    }
  }
  else
  {
LABEL_81:
    v46 = (uint64_t *)(v42 + 8 * v43);
  }
  v47 = (uint64_t *)(v42 + 8 * v43);
LABEL_84:
  while (v46 != v47)
  {
    v48 = v46 + 1;
    llvm::MDNode::dropAllReferences(*v46);
    v46 = v44;
    if (v48 != v44)
    {
      v46 = v48;
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v46 == v44)
        {
          v46 = v44;
          goto LABEL_84;
        }
      }
    }
  }
  v49 = *((_QWORD *)this + 70);
  v50 = *((unsigned int *)this + 144);
  v51 = (uint64_t *)(v49 + 8 * v50);
  if (*((_DWORD *)this + 142))
  {
    if ((_DWORD)v50)
    {
      v52 = 8 * v50;
      v53 = (uint64_t *)*((_QWORD *)this + 70);
      while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v53;
        v52 -= 8;
        if (!v52)
          goto LABEL_95;
      }
    }
    else
    {
      v53 = (uint64_t *)*((_QWORD *)this + 70);
    }
  }
  else
  {
LABEL_95:
    v53 = (uint64_t *)(v49 + 8 * v50);
  }
  v54 = (uint64_t *)(v49 + 8 * v50);
LABEL_98:
  while (v53 != v54)
  {
    v55 = v53 + 1;
    llvm::MDNode::dropAllReferences(*v53);
    v53 = v51;
    if (v55 != v51)
    {
      v53 = v55;
      while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v53 == v51)
        {
          v53 = v51;
          goto LABEL_98;
        }
      }
    }
  }
  v56 = *((_QWORD *)this + 73);
  v57 = *((unsigned int *)this + 150);
  v58 = (uint64_t *)(v56 + 8 * v57);
  if (*((_DWORD *)this + 148))
  {
    if ((_DWORD)v57)
    {
      v59 = 8 * v57;
      v60 = (uint64_t *)*((_QWORD *)this + 73);
      while ((*v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v60;
        v59 -= 8;
        if (!v59)
          goto LABEL_109;
      }
    }
    else
    {
      v60 = (uint64_t *)*((_QWORD *)this + 73);
    }
  }
  else
  {
LABEL_109:
    v60 = (uint64_t *)(v56 + 8 * v57);
  }
  v61 = (uint64_t *)(v56 + 8 * v57);
LABEL_112:
  while (v60 != v61)
  {
    v62 = v60 + 1;
    llvm::MDNode::dropAllReferences(*v60);
    v60 = v58;
    if (v62 != v58)
    {
      v60 = v62;
      while ((*v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v60 == v58)
        {
          v60 = v58;
          goto LABEL_112;
        }
      }
    }
  }
  v63 = *((_QWORD *)this + 76);
  v64 = *((unsigned int *)this + 156);
  v65 = (uint64_t *)(v63 + 8 * v64);
  if (*((_DWORD *)this + 154))
  {
    if ((_DWORD)v64)
    {
      v66 = 8 * v64;
      v67 = (uint64_t *)*((_QWORD *)this + 76);
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v67;
        v66 -= 8;
        if (!v66)
          goto LABEL_123;
      }
    }
    else
    {
      v67 = (uint64_t *)*((_QWORD *)this + 76);
    }
  }
  else
  {
LABEL_123:
    v67 = (uint64_t *)(v63 + 8 * v64);
  }
  v68 = (uint64_t *)(v63 + 8 * v64);
LABEL_126:
  while (v67 != v68)
  {
    v69 = v67 + 1;
    llvm::MDNode::dropAllReferences(*v67);
    v67 = v65;
    if (v69 != v65)
    {
      v67 = v69;
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v67 == v65)
        {
          v67 = v65;
          goto LABEL_126;
        }
      }
    }
  }
  v70 = *((_QWORD *)this + 79);
  v71 = *((unsigned int *)this + 162);
  v72 = (uint64_t *)(v70 + 8 * v71);
  if (*((_DWORD *)this + 160))
  {
    if ((_DWORD)v71)
    {
      v73 = 8 * v71;
      v74 = (uint64_t *)*((_QWORD *)this + 79);
      while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v74;
        v73 -= 8;
        if (!v73)
          goto LABEL_137;
      }
    }
    else
    {
      v74 = (uint64_t *)*((_QWORD *)this + 79);
    }
  }
  else
  {
LABEL_137:
    v74 = (uint64_t *)(v70 + 8 * v71);
  }
  v75 = (uint64_t *)(v70 + 8 * v71);
LABEL_140:
  while (v74 != v75)
  {
    v76 = v74 + 1;
    llvm::MDNode::dropAllReferences(*v74);
    v74 = v72;
    if (v76 != v72)
    {
      v74 = v76;
      while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v74 == v72)
        {
          v74 = v72;
          goto LABEL_140;
        }
      }
    }
  }
  v77 = *((_QWORD *)this + 82);
  v78 = *((unsigned int *)this + 168);
  v79 = (uint64_t *)(v77 + 8 * v78);
  if (*((_DWORD *)this + 166))
  {
    if ((_DWORD)v78)
    {
      v80 = 8 * v78;
      v81 = (uint64_t *)*((_QWORD *)this + 82);
      while ((*v81 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v81;
        v80 -= 8;
        if (!v80)
          goto LABEL_151;
      }
    }
    else
    {
      v81 = (uint64_t *)*((_QWORD *)this + 82);
    }
  }
  else
  {
LABEL_151:
    v81 = (uint64_t *)(v77 + 8 * v78);
  }
  v82 = (uint64_t *)(v77 + 8 * v78);
LABEL_154:
  while (v81 != v82)
  {
    v83 = v81 + 1;
    llvm::MDNode::dropAllReferences(*v81);
    v81 = v79;
    if (v83 != v79)
    {
      v81 = v83;
      while ((*v81 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v81 == v79)
        {
          v81 = v79;
          goto LABEL_154;
        }
      }
    }
  }
  v84 = *((_QWORD *)this + 85);
  v85 = *((unsigned int *)this + 174);
  v86 = (uint64_t *)(v84 + 8 * v85);
  if (*((_DWORD *)this + 172))
  {
    if ((_DWORD)v85)
    {
      v87 = 8 * v85;
      v88 = (uint64_t *)*((_QWORD *)this + 85);
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v88;
        v87 -= 8;
        if (!v87)
          goto LABEL_165;
      }
    }
    else
    {
      v88 = (uint64_t *)*((_QWORD *)this + 85);
    }
  }
  else
  {
LABEL_165:
    v88 = (uint64_t *)(v84 + 8 * v85);
  }
  v89 = (uint64_t *)(v84 + 8 * v85);
LABEL_168:
  while (v88 != v89)
  {
    v90 = v88 + 1;
    llvm::MDNode::dropAllReferences(*v88);
    v88 = v86;
    if (v90 != v86)
    {
      v88 = v90;
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v88 == v86)
        {
          v88 = v86;
          goto LABEL_168;
        }
      }
    }
  }
  v91 = *((_QWORD *)this + 88);
  v92 = *((unsigned int *)this + 180);
  v93 = (uint64_t *)(v91 + 8 * v92);
  if (*((_DWORD *)this + 178))
  {
    if ((_DWORD)v92)
    {
      v94 = 8 * v92;
      v95 = (uint64_t *)*((_QWORD *)this + 88);
      while ((*v95 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v95;
        v94 -= 8;
        if (!v94)
          goto LABEL_179;
      }
    }
    else
    {
      v95 = (uint64_t *)*((_QWORD *)this + 88);
    }
  }
  else
  {
LABEL_179:
    v95 = (uint64_t *)(v91 + 8 * v92);
  }
  v96 = (uint64_t *)(v91 + 8 * v92);
LABEL_182:
  while (v95 != v96)
  {
    v97 = v95 + 1;
    llvm::MDNode::dropAllReferences(*v95);
    v95 = v93;
    if (v97 != v93)
    {
      v95 = v97;
      while ((*v95 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v95 == v93)
        {
          v95 = v93;
          goto LABEL_182;
        }
      }
    }
  }
  v98 = *((_QWORD *)this + 91);
  v99 = *((unsigned int *)this + 186);
  v100 = (uint64_t *)(v98 + 8 * v99);
  if (*((_DWORD *)this + 184))
  {
    if ((_DWORD)v99)
    {
      v101 = 8 * v99;
      v102 = (uint64_t *)*((_QWORD *)this + 91);
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v102;
        v101 -= 8;
        if (!v101)
          goto LABEL_193;
      }
    }
    else
    {
      v102 = (uint64_t *)*((_QWORD *)this + 91);
    }
  }
  else
  {
LABEL_193:
    v102 = (uint64_t *)(v98 + 8 * v99);
  }
  v103 = (uint64_t *)(v98 + 8 * v99);
LABEL_196:
  while (v102 != v103)
  {
    v104 = v102 + 1;
    llvm::MDNode::dropAllReferences(*v102);
    v102 = v100;
    if (v104 != v100)
    {
      v102 = v104;
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v102 == v100)
        {
          v102 = v100;
          goto LABEL_196;
        }
      }
    }
  }
  v105 = *((_QWORD *)this + 94);
  v106 = *((unsigned int *)this + 192);
  v107 = (uint64_t *)(v105 + 8 * v106);
  if (*((_DWORD *)this + 190))
  {
    if ((_DWORD)v106)
    {
      v108 = 8 * v106;
      v109 = (uint64_t *)*((_QWORD *)this + 94);
      while ((*v109 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v109;
        v108 -= 8;
        if (!v108)
          goto LABEL_207;
      }
    }
    else
    {
      v109 = (uint64_t *)*((_QWORD *)this + 94);
    }
  }
  else
  {
LABEL_207:
    v109 = (uint64_t *)(v105 + 8 * v106);
  }
  v110 = (uint64_t *)(v105 + 8 * v106);
LABEL_210:
  while (v109 != v110)
  {
    v111 = v109 + 1;
    llvm::MDNode::dropAllReferences(*v109);
    v109 = v107;
    if (v111 != v107)
    {
      v109 = v111;
      while ((*v109 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v109 == v107)
        {
          v109 = v107;
          goto LABEL_210;
        }
      }
    }
  }
  v112 = *((_QWORD *)this + 97);
  v113 = *((unsigned int *)this + 198);
  v114 = (uint64_t *)(v112 + 8 * v113);
  if (*((_DWORD *)this + 196))
  {
    if ((_DWORD)v113)
    {
      v115 = 8 * v113;
      v116 = (uint64_t *)*((_QWORD *)this + 97);
      while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v116;
        v115 -= 8;
        if (!v115)
          goto LABEL_221;
      }
    }
    else
    {
      v116 = (uint64_t *)*((_QWORD *)this + 97);
    }
  }
  else
  {
LABEL_221:
    v116 = (uint64_t *)(v112 + 8 * v113);
  }
  v117 = (uint64_t *)(v112 + 8 * v113);
LABEL_224:
  while (v116 != v117)
  {
    v118 = v116 + 1;
    llvm::MDNode::dropAllReferences(*v116);
    v116 = v114;
    if (v118 != v114)
    {
      v116 = v118;
      while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v116 == v114)
        {
          v116 = v114;
          goto LABEL_224;
        }
      }
    }
  }
  v119 = *((_QWORD *)this + 100);
  v120 = *((unsigned int *)this + 204);
  v121 = (uint64_t *)(v119 + 8 * v120);
  if (*((_DWORD *)this + 202))
  {
    if ((_DWORD)v120)
    {
      v122 = 8 * v120;
      v123 = (uint64_t *)*((_QWORD *)this + 100);
      while ((*v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v123;
        v122 -= 8;
        if (!v122)
          goto LABEL_235;
      }
    }
    else
    {
      v123 = (uint64_t *)*((_QWORD *)this + 100);
    }
  }
  else
  {
LABEL_235:
    v123 = (uint64_t *)(v119 + 8 * v120);
  }
  v124 = (uint64_t *)(v119 + 8 * v120);
LABEL_238:
  while (v123 != v124)
  {
    v125 = v123 + 1;
    llvm::MDNode::dropAllReferences(*v123);
    v123 = v121;
    if (v125 != v121)
    {
      v123 = v125;
      while ((*v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v123 == v121)
        {
          v123 = v121;
          goto LABEL_238;
        }
      }
    }
  }
  v126 = *((_QWORD *)this + 103);
  v127 = *((unsigned int *)this + 210);
  v128 = (uint64_t *)(v126 + 8 * v127);
  if (*((_DWORD *)this + 208))
  {
    if ((_DWORD)v127)
    {
      v129 = 8 * v127;
      v130 = (uint64_t *)*((_QWORD *)this + 103);
      while ((*v130 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v130;
        v129 -= 8;
        if (!v129)
          goto LABEL_249;
      }
    }
    else
    {
      v130 = (uint64_t *)*((_QWORD *)this + 103);
    }
  }
  else
  {
LABEL_249:
    v130 = (uint64_t *)(v126 + 8 * v127);
  }
  v131 = (uint64_t *)(v126 + 8 * v127);
LABEL_252:
  while (v130 != v131)
  {
    v132 = v130 + 1;
    llvm::MDNode::dropAllReferences(*v130);
    v130 = v128;
    if (v132 != v128)
    {
      v130 = v132;
      while ((*v130 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v130 == v128)
        {
          v130 = v128;
          goto LABEL_252;
        }
      }
    }
  }
  v133 = *((_QWORD *)this + 106);
  v134 = *((unsigned int *)this + 216);
  v135 = (uint64_t *)(v133 + 8 * v134);
  if (*((_DWORD *)this + 214))
  {
    if ((_DWORD)v134)
    {
      v136 = 8 * v134;
      v137 = (uint64_t *)*((_QWORD *)this + 106);
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v137;
        v136 -= 8;
        if (!v136)
          goto LABEL_263;
      }
    }
    else
    {
      v137 = (uint64_t *)*((_QWORD *)this + 106);
    }
  }
  else
  {
LABEL_263:
    v137 = (uint64_t *)(v133 + 8 * v134);
  }
  v138 = (uint64_t *)(v133 + 8 * v134);
LABEL_266:
  while (v137 != v138)
  {
    v139 = v137 + 1;
    llvm::MDNode::dropAllReferences(*v137);
    v137 = v135;
    if (v139 != v135)
    {
      v137 = v139;
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v137 == v135)
        {
          v137 = v135;
          goto LABEL_266;
        }
      }
    }
  }
  v140 = *((_QWORD *)this + 109);
  v141 = *((unsigned int *)this + 222);
  v142 = (uint64_t *)(v140 + 8 * v141);
  if (*((_DWORD *)this + 220))
  {
    if ((_DWORD)v141)
    {
      v143 = 8 * v141;
      v144 = (uint64_t *)*((_QWORD *)this + 109);
      while ((*v144 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v144;
        v143 -= 8;
        if (!v143)
          goto LABEL_277;
      }
    }
    else
    {
      v144 = (uint64_t *)*((_QWORD *)this + 109);
    }
  }
  else
  {
LABEL_277:
    v144 = (uint64_t *)(v140 + 8 * v141);
  }
  v145 = (uint64_t *)(v140 + 8 * v141);
LABEL_280:
  while (v144 != v145)
  {
    v146 = v144 + 1;
    llvm::MDNode::dropAllReferences(*v144);
    v144 = v142;
    if (v146 != v142)
    {
      v144 = v146;
      while ((*v144 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v144 == v142)
        {
          v144 = v142;
          goto LABEL_280;
        }
      }
    }
  }
  v147 = *((_QWORD *)this + 112);
  v148 = *((unsigned int *)this + 228);
  v149 = (uint64_t *)(v147 + 8 * v148);
  if (*((_DWORD *)this + 226))
  {
    if ((_DWORD)v148)
    {
      v150 = 8 * v148;
      v151 = (uint64_t *)*((_QWORD *)this + 112);
      while ((*v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v151;
        v150 -= 8;
        if (!v150)
          goto LABEL_291;
      }
    }
    else
    {
      v151 = (uint64_t *)*((_QWORD *)this + 112);
    }
  }
  else
  {
LABEL_291:
    v151 = (uint64_t *)(v147 + 8 * v148);
  }
  v152 = (uint64_t *)(v147 + 8 * v148);
LABEL_294:
  while (v151 != v152)
  {
    v153 = v151 + 1;
    llvm::MDNode::dropAllReferences(*v151);
    v151 = v149;
    if (v153 != v149)
    {
      v151 = v153;
      while ((*v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v151 == v149)
        {
          v151 = v149;
          goto LABEL_294;
        }
      }
    }
  }
  v154 = *((_QWORD *)this + 115);
  v155 = *((unsigned int *)this + 234);
  v156 = (uint64_t *)(v154 + 8 * v155);
  if (*((_DWORD *)this + 232))
  {
    if ((_DWORD)v155)
    {
      v157 = 8 * v155;
      v158 = (uint64_t *)*((_QWORD *)this + 115);
      while ((*v158 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v158;
        v157 -= 8;
        if (!v157)
          goto LABEL_305;
      }
    }
    else
    {
      v158 = (uint64_t *)*((_QWORD *)this + 115);
    }
  }
  else
  {
LABEL_305:
    v158 = (uint64_t *)(v154 + 8 * v155);
  }
  v159 = (uint64_t *)(v154 + 8 * v155);
LABEL_308:
  while (v158 != v159)
  {
    v160 = v158 + 1;
    llvm::MDNode::dropAllReferences(*v158);
    v158 = v156;
    if (v160 != v156)
    {
      v158 = v160;
      while ((*v158 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v158 == v156)
        {
          v158 = v156;
          goto LABEL_308;
        }
      }
    }
  }
  v161 = *((_QWORD *)this + 118);
  v162 = *((unsigned int *)this + 240);
  v163 = (uint64_t *)(v161 + 8 * v162);
  if (*((_DWORD *)this + 238))
  {
    if ((_DWORD)v162)
    {
      v164 = 8 * v162;
      v165 = (uint64_t *)*((_QWORD *)this + 118);
      while ((*v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v165;
        v164 -= 8;
        if (!v164)
          goto LABEL_319;
      }
    }
    else
    {
      v165 = (uint64_t *)*((_QWORD *)this + 118);
    }
  }
  else
  {
LABEL_319:
    v165 = (uint64_t *)(v161 + 8 * v162);
  }
  v166 = (uint64_t *)(v161 + 8 * v162);
LABEL_322:
  while (v165 != v166)
  {
    v167 = v165 + 1;
    llvm::MDNode::dropAllReferences(*v165);
    v165 = v163;
    if (v167 != v163)
    {
      v165 = v167;
      while ((*v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v165 == v163)
        {
          v165 = v163;
          goto LABEL_322;
        }
      }
    }
  }
  v168 = *((_QWORD *)this + 121);
  v169 = *((unsigned int *)this + 246);
  v170 = (uint64_t *)(v168 + 8 * v169);
  if (*((_DWORD *)this + 244))
  {
    if ((_DWORD)v169)
    {
      v171 = 8 * v169;
      v172 = (uint64_t *)*((_QWORD *)this + 121);
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v172;
        v171 -= 8;
        if (!v171)
          goto LABEL_333;
      }
    }
    else
    {
      v172 = (uint64_t *)*((_QWORD *)this + 121);
    }
  }
  else
  {
LABEL_333:
    v172 = (uint64_t *)(v168 + 8 * v169);
  }
  v173 = (uint64_t *)(v168 + 8 * v169);
LABEL_336:
  while (v172 != v173)
  {
    v174 = v172 + 1;
    llvm::MDNode::dropAllReferences(*v172);
    v172 = v170;
    if (v174 != v170)
    {
      v172 = v174;
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v172 == v170)
        {
          v172 = v170;
          goto LABEL_336;
        }
      }
    }
  }
  v175 = *((_QWORD *)this + 124);
  v176 = *((unsigned int *)this + 252);
  v177 = (uint64_t *)(v175 + 8 * v176);
  if (*((_DWORD *)this + 250))
  {
    if ((_DWORD)v176)
    {
      v178 = 8 * v176;
      v179 = (uint64_t *)*((_QWORD *)this + 124);
      while ((*v179 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v179;
        v178 -= 8;
        if (!v178)
          goto LABEL_347;
      }
    }
    else
    {
      v179 = (uint64_t *)*((_QWORD *)this + 124);
    }
  }
  else
  {
LABEL_347:
    v179 = (uint64_t *)(v175 + 8 * v176);
  }
  v180 = (uint64_t *)(v175 + 8 * v176);
LABEL_350:
  while (v179 != v180)
  {
    v181 = v179 + 1;
    llvm::MDNode::dropAllReferences(*v179);
    v179 = v177;
    if (v181 != v177)
    {
      v179 = v181;
      while ((*v179 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v179 == v177)
        {
          v179 = v177;
          goto LABEL_350;
        }
      }
    }
  }
  v182 = *((_QWORD *)this + 127);
  v183 = *((unsigned int *)this + 258);
  v184 = (uint64_t *)(v182 + 8 * v183);
  if (*((_DWORD *)this + 256))
  {
    if ((_DWORD)v183)
    {
      v185 = 8 * v183;
      v186 = (uint64_t *)*((_QWORD *)this + 127);
      while ((*v186 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v186;
        v185 -= 8;
        if (!v185)
          goto LABEL_361;
      }
    }
    else
    {
      v186 = (uint64_t *)*((_QWORD *)this + 127);
    }
  }
  else
  {
LABEL_361:
    v186 = (uint64_t *)(v182 + 8 * v183);
  }
  v187 = (uint64_t *)(v182 + 8 * v183);
LABEL_364:
  while (v186 != v187)
  {
    v188 = v186 + 1;
    llvm::MDNode::dropAllReferences(*v186);
    v186 = v184;
    if (v188 != v184)
    {
      v186 = v188;
      while ((*v186 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v186 == v184)
        {
          v186 = v184;
          goto LABEL_364;
        }
      }
    }
  }
  v189 = *((_QWORD *)this + 130);
  v190 = *((unsigned int *)this + 264);
  v191 = (uint64_t *)(v189 + 8 * v190);
  if (*((_DWORD *)this + 262))
  {
    if ((_DWORD)v190)
    {
      v192 = 8 * v190;
      v193 = (uint64_t *)*((_QWORD *)this + 130);
      while ((*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v193;
        v192 -= 8;
        if (!v192)
          goto LABEL_375;
      }
    }
    else
    {
      v193 = (uint64_t *)*((_QWORD *)this + 130);
    }
  }
  else
  {
LABEL_375:
    v193 = (uint64_t *)(v189 + 8 * v190);
  }
  v194 = (uint64_t *)(v189 + 8 * v190);
LABEL_378:
  while (v193 != v194)
  {
    v195 = v193 + 1;
    llvm::MDNode::dropAllReferences(*v193);
    v193 = v191;
    if (v195 != v191)
    {
      v193 = v195;
      while ((*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v193 == v191)
        {
          v193 = v191;
          goto LABEL_378;
        }
      }
    }
  }
  v196 = *((_QWORD *)this + 133);
  v197 = *((unsigned int *)this + 270);
  v198 = (uint64_t *)(v196 + 8 * v197);
  if (*((_DWORD *)this + 268))
  {
    if ((_DWORD)v197)
    {
      v199 = 8 * v197;
      v200 = (uint64_t *)*((_QWORD *)this + 133);
      while ((*v200 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v200;
        v199 -= 8;
        if (!v199)
          goto LABEL_389;
      }
    }
    else
    {
      v200 = (uint64_t *)*((_QWORD *)this + 133);
    }
  }
  else
  {
LABEL_389:
    v200 = (uint64_t *)(v196 + 8 * v197);
  }
  v201 = (uint64_t *)(v196 + 8 * v197);
LABEL_392:
  while (v200 != v201)
  {
    v202 = v200 + 1;
    llvm::MDNode::dropAllReferences(*v200);
    v200 = v198;
    if (v202 != v198)
    {
      v200 = v202;
      while ((*v200 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v200 == v198)
        {
          v200 = v198;
          goto LABEL_392;
        }
      }
    }
  }
  v203 = *((_QWORD *)this + 136);
  v204 = *((unsigned int *)this + 276);
  v205 = (llvm::DIArgList **)(v203 + 8 * v204);
  if (*((_DWORD *)this + 274))
  {
    if ((_DWORD)v204)
    {
      v206 = 8 * v204;
      v207 = (llvm::DIArgList **)*((_QWORD *)this + 136);
      while (((unint64_t)*v207 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v207;
        v206 -= 8;
        if (!v206)
          goto LABEL_403;
      }
    }
    else
    {
      v207 = (llvm::DIArgList **)*((_QWORD *)this + 136);
    }
  }
  else
  {
LABEL_403:
    v207 = (llvm::DIArgList **)(v203 + 8 * v204);
  }
  v208 = (llvm::DIArgList **)(v203 + 8 * v204);
LABEL_406:
  while (v207 != v208)
  {
    v209 = v207 + 1;
    llvm::DIArgList::dropAllReferences(*v207);
    v207 = v205;
    if (v209 != v205)
    {
      v207 = v209;
      while (((unint64_t)*v207 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v207 == v205)
        {
          v207 = v205;
          goto LABEL_406;
        }
      }
    }
  }
  v210 = *((_QWORD *)this + 139);
  v211 = *((unsigned int *)this + 282);
  v212 = (uint64_t *)(v210 + 8 * v211);
  if (*((_DWORD *)this + 280))
  {
    if ((_DWORD)v211)
    {
      v213 = 8 * v211;
      v214 = (uint64_t *)*((_QWORD *)this + 139);
      while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v214;
        v213 -= 8;
        if (!v213)
          goto LABEL_417;
      }
    }
    else
    {
      v214 = (uint64_t *)*((_QWORD *)this + 139);
    }
  }
  else
  {
LABEL_417:
    v214 = (uint64_t *)(v210 + 8 * v211);
  }
  v215 = (uint64_t *)(v210 + 8 * v211);
LABEL_420:
  while (v214 != v215)
  {
    v216 = v214 + 1;
    llvm::MDNode::dropAllReferences(*v214);
    v214 = v212;
    if (v216 != v212)
    {
      v214 = v216;
      while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v214 == v212)
        {
          v214 = v212;
          goto LABEL_420;
        }
      }
    }
  }
  v217 = *((_QWORD *)this + 142);
  v218 = *((unsigned int *)this + 288);
  v219 = (uint64_t *)(v217 + 8 * v218);
  if (*((_DWORD *)this + 286))
  {
    if ((_DWORD)v218)
    {
      v220 = 8 * v218;
      v221 = (uint64_t *)*((_QWORD *)this + 142);
      while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v221;
        v220 -= 8;
        if (!v220)
          goto LABEL_431;
      }
    }
    else
    {
      v221 = (uint64_t *)*((_QWORD *)this + 142);
    }
  }
  else
  {
LABEL_431:
    v221 = (uint64_t *)(v217 + 8 * v218);
  }
  v222 = (uint64_t *)(v217 + 8 * v218);
LABEL_434:
  while (v221 != v222)
  {
    v223 = v221 + 1;
    llvm::MDNode::dropAllReferences(*v221);
    v221 = v219;
    if (v223 != v219)
    {
      v221 = v223;
      while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v221 == v219)
        {
          v221 = v219;
          goto LABEL_434;
        }
      }
    }
  }
  v224 = *((_QWORD *)this + 49);
  v225 = *((unsigned int *)this + 102);
  v226 = (_QWORD *)(v224 + 16 * v225);
  if (*((_DWORD *)this + 100))
  {
    if ((_DWORD)v225)
    {
      v227 = 16 * v225;
      v228 = (_QWORD *)*((_QWORD *)this + 49);
      while ((*v228 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v228 += 2;
        v227 -= 16;
        if (!v227)
          goto LABEL_445;
      }
    }
    else
    {
      v228 = (_QWORD *)*((_QWORD *)this + 49);
    }
  }
  else
  {
LABEL_445:
    v228 = (_QWORD *)(v224 + 16 * v225);
  }
  v229 = (_QWORD *)(v224 + 16 * v225);
LABEL_448:
  while (v228 != v229)
  {
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v228[1] + 8), 0);
    v230 = v228 + 2;
    v228 = v226;
    if (v230 != v226)
    {
      v228 = v230;
      while ((*v228 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v228 += 2;
        if (v228 == v226)
        {
          v228 = v226;
          goto LABEL_448;
        }
      }
    }
  }
  v231 = *((_QWORD *)this + 52);
  v232 = *((unsigned int *)this + 108);
  v233 = (_QWORD *)(v231 + 16 * v232);
  if (*((_DWORD *)this + 106))
  {
    if ((_DWORD)v232)
    {
      v234 = 16 * v232;
      v235 = (_QWORD *)*((_QWORD *)this + 52);
      while ((*v235 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v235 += 2;
        v234 -= 16;
        if (!v234)
          goto LABEL_459;
      }
    }
    else
    {
      v235 = (_QWORD *)*((_QWORD *)this + 52);
    }
  }
  else
  {
LABEL_459:
    v235 = (_QWORD *)(v231 + 16 * v232);
  }
  v236 = (_QWORD *)(v231 + 16 * v232);
LABEL_462:
  while (v235 != v236)
  {
    *(_QWORD *)(v235[1] + 24) = 0;
    v237 = v235 + 2;
    v235 = v233;
    if (v237 != v233)
    {
      v235 = v237;
      while ((*v235 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v235 += 2;
        if (v235 == v233)
        {
          v235 = v233;
          goto LABEL_462;
        }
      }
    }
  }
  v238 = (llvm::MDNode **)*((_QWORD *)this + 149);
  v239 = (llvm::MDNode **)*((_QWORD *)this + 150);
  while (v238 != v239)
  {
    v240 = *v238++;
    llvm::MDNode::deleteAsSubclass(v240);
  }
  v241 = *((_QWORD *)this + 55);
  v242 = *((unsigned int *)this + 114);
  v243 = (uint64_t *)(v241 + 8 * v242);
  if (*((_DWORD *)this + 112))
  {
    if ((_DWORD)v242)
    {
      v244 = 8 * v242;
      v245 = (uint64_t *)*((_QWORD *)this + 55);
      while ((*v245 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v245;
        v244 -= 8;
        if (!v244)
          goto LABEL_476;
      }
    }
    else
    {
      v245 = (uint64_t *)*((_QWORD *)this + 55);
    }
  }
  else
  {
LABEL_476:
    v245 = (uint64_t *)(v241 + 8 * v242);
  }
  v246 = (uint64_t *)(v241 + 8 * v242);
LABEL_479:
  while (v245 != v246)
  {
    v247 = *v245;
    if (*v245)
    {
      llvm::MDNode::dropAllReferences(*v245);
      sub_1C53FED30((uint64_t *)(v247 + 16));
      v248 = *(unsigned int *)(v247 + 8);
      if ((_DWORD)v248)
      {
        v249 = -8 * v248;
        v250 = (unsigned __int8 **)(v247 - 8);
        do
        {
          if (*v250)
            llvm::MetadataTracking::untrack((uint64_t)v250, *v250);
          --v250;
          v249 += 8;
        }
        while (v249);
      }
      operator delete((void *)(v247 - 8 * v248));
    }
    v251 = v245 + 1;
    v245 = v243;
    if (v251 != v243)
    {
      v245 = v251;
      while ((*v245 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v245 == v243)
        {
          v245 = v243;
          goto LABEL_479;
        }
      }
    }
  }
  v252 = *((_QWORD *)this + 58);
  v253 = *((unsigned int *)this + 120);
  v254 = (uint64_t *)(v252 + 8 * v253);
  if (*((_DWORD *)this + 118))
  {
    if ((_DWORD)v253)
    {
      v255 = 8 * v253;
      v256 = (uint64_t *)*((_QWORD *)this + 58);
      while ((*v256 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v256;
        v255 -= 8;
        if (!v255)
          goto LABEL_497;
      }
    }
    else
    {
      v256 = (uint64_t *)*((_QWORD *)this + 58);
    }
  }
  else
  {
LABEL_497:
    v256 = (uint64_t *)(v252 + 8 * v253);
  }
  v257 = (uint64_t *)(v252 + 8 * v253);
LABEL_500:
  while (v256 != v257)
  {
    v258 = *v256;
    if (*v256)
    {
      llvm::MDNode::dropAllReferences(*v256);
      sub_1C53FED30((uint64_t *)(v258 + 16));
      v259 = *(unsigned int *)(v258 + 8);
      if ((_DWORD)v259)
      {
        v260 = -8 * v259;
        v261 = (unsigned __int8 **)(v258 - 8);
        do
        {
          if (*v261)
            llvm::MetadataTracking::untrack((uint64_t)v261, *v261);
          --v261;
          v260 += 8;
        }
        while (v260);
      }
      operator delete((void *)(v258 - 8 * v259));
    }
    v262 = v256 + 1;
    v256 = v254;
    if (v262 != v254)
    {
      v256 = v262;
      while ((*v256 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v256 == v254)
        {
          v256 = v254;
          goto LABEL_500;
        }
      }
    }
  }
  v263 = *((_QWORD *)this + 61);
  v264 = *((unsigned int *)this + 126);
  v265 = (uint64_t **)(v263 + 8 * v264);
  if (*((_DWORD *)this + 124))
  {
    if ((_DWORD)v264)
    {
      v266 = 8 * v264;
      v267 = (uint64_t **)*((_QWORD *)this + 61);
      while (((unint64_t)*v267 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v267;
        v266 -= 8;
        if (!v266)
          goto LABEL_518;
      }
    }
    else
    {
      v267 = (uint64_t **)*((_QWORD *)this + 61);
    }
  }
  else
  {
LABEL_518:
    v267 = (uint64_t **)(v263 + 8 * v264);
  }
  v268 = (uint64_t **)(v263 + 8 * v264);
LABEL_521:
  while (v267 != v268)
  {
    v269 = *v267;
    if (*v267)
    {
      sub_1C53FED8C(*v267);
      v270 = *((unsigned int *)v269 + 2);
      if ((_DWORD)v270)
      {
        v271 = -8 * v270;
        v272 = (unsigned __int8 **)(v269 - 1);
        do
        {
          if (*v272)
            llvm::MetadataTracking::untrack((uint64_t)v272, *v272);
          --v272;
          v271 += 8;
        }
        while (v271);
      }
      operator delete(&v269[-v270]);
    }
    v273 = v267 + 1;
    v267 = v265;
    if (v273 != v265)
    {
      v267 = v273;
      while (((unint64_t)*v267 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v267 == v265)
        {
          v267 = v265;
          goto LABEL_521;
        }
      }
    }
  }
  v274 = *((_QWORD *)this + 64);
  v275 = *((unsigned int *)this + 132);
  v276 = (uint64_t *)(v274 + 8 * v275);
  if (*((_DWORD *)this + 130))
  {
    if ((_DWORD)v275)
    {
      v277 = 8 * v275;
      v278 = (uint64_t *)*((_QWORD *)this + 64);
      while ((*v278 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v278;
        v277 -= 8;
        if (!v277)
          goto LABEL_539;
      }
    }
    else
    {
      v278 = (uint64_t *)*((_QWORD *)this + 64);
    }
  }
  else
  {
LABEL_539:
    v278 = (uint64_t *)(v274 + 8 * v275);
  }
  v279 = (uint64_t *)(v274 + 8 * v275);
LABEL_542:
  while (v278 != v279)
  {
    v280 = *v278;
    if (*v278)
    {
      sub_1C53FED30((uint64_t *)(v280 + 16));
      v281 = *(unsigned int *)(v280 + 8);
      if ((_DWORD)v281)
      {
        v282 = -8 * v281;
        v283 = (unsigned __int8 **)(v280 - 8);
        do
        {
          if (*v283)
            llvm::MetadataTracking::untrack((uint64_t)v283, *v283);
          --v283;
          v282 += 8;
        }
        while (v282);
      }
      operator delete((void *)(v280 - 8 * v281));
    }
    v284 = v278 + 1;
    v278 = v276;
    if (v284 != v276)
    {
      v278 = v284;
      while ((*v278 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v278 == v276)
        {
          v278 = v276;
          goto LABEL_542;
        }
      }
    }
  }
  v285 = *((_QWORD *)this + 67);
  v286 = *((unsigned int *)this + 138);
  v287 = (uint64_t *)(v285 + 8 * v286);
  if (*((_DWORD *)this + 136))
  {
    if ((_DWORD)v286)
    {
      v288 = 8 * v286;
      v289 = (uint64_t *)*((_QWORD *)this + 67);
      while ((*v289 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v289;
        v288 -= 8;
        if (!v288)
          goto LABEL_560;
      }
    }
    else
    {
      v289 = (uint64_t *)*((_QWORD *)this + 67);
    }
  }
  else
  {
LABEL_560:
    v289 = (uint64_t *)(v285 + 8 * v286);
  }
  v290 = (uint64_t *)(v285 + 8 * v286);
LABEL_563:
  while (v289 != v290)
  {
    v291 = *v289;
    if (*v289)
    {
      llvm::MDNode::dropAllReferences(*v289);
      sub_1C53FED30((uint64_t *)(v291 + 16));
      v292 = *(unsigned int *)(v291 + 8);
      if ((_DWORD)v292)
      {
        v293 = -8 * v292;
        v294 = (unsigned __int8 **)(v291 - 8);
        do
        {
          if (*v294)
            llvm::MetadataTracking::untrack((uint64_t)v294, *v294);
          --v294;
          v293 += 8;
        }
        while (v293);
      }
      operator delete((void *)(v291 - 8 * v292));
    }
    v295 = v289 + 1;
    v289 = v287;
    if (v295 != v287)
    {
      v289 = v295;
      while ((*v289 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v289 == v287)
        {
          v289 = v287;
          goto LABEL_563;
        }
      }
    }
  }
  v296 = *((_QWORD *)this + 70);
  v297 = *((unsigned int *)this + 144);
  v298 = (uint64_t *)(v296 + 8 * v297);
  if (*((_DWORD *)this + 142))
  {
    if ((_DWORD)v297)
    {
      v299 = 8 * v297;
      v300 = (uint64_t *)*((_QWORD *)this + 70);
      while ((*v300 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v300;
        v299 -= 8;
        if (!v299)
          goto LABEL_581;
      }
    }
    else
    {
      v300 = (uint64_t *)*((_QWORD *)this + 70);
    }
  }
  else
  {
LABEL_581:
    v300 = (uint64_t *)(v296 + 8 * v297);
  }
  v301 = (uint64_t *)(v296 + 8 * v297);
LABEL_584:
  while (v300 != v301)
  {
    v302 = *v300;
    if (*v300)
    {
      sub_1C53FED30((uint64_t *)(v302 + 16));
      v303 = *(unsigned int *)(v302 + 8);
      if ((_DWORD)v303)
      {
        v304 = -8 * v303;
        v305 = (unsigned __int8 **)(v302 - 8);
        do
        {
          if (*v305)
            llvm::MetadataTracking::untrack((uint64_t)v305, *v305);
          --v305;
          v304 += 8;
        }
        while (v304);
      }
      operator delete((void *)(v302 - 8 * v303));
    }
    v306 = v300 + 1;
    v300 = v298;
    if (v306 != v298)
    {
      v300 = v306;
      while ((*v300 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v300 == v298)
        {
          v300 = v298;
          goto LABEL_584;
        }
      }
    }
  }
  v307 = *((_QWORD *)this + 73);
  v308 = *((unsigned int *)this + 150);
  v309 = (uint64_t *)(v307 + 8 * v308);
  if (*((_DWORD *)this + 148))
  {
    if ((_DWORD)v308)
    {
      v310 = 8 * v308;
      v311 = (uint64_t *)*((_QWORD *)this + 73);
      while ((*v311 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v311;
        v310 -= 8;
        if (!v310)
          goto LABEL_602;
      }
    }
    else
    {
      v311 = (uint64_t *)*((_QWORD *)this + 73);
    }
  }
  else
  {
LABEL_602:
    v311 = (uint64_t *)(v307 + 8 * v308);
  }
  v312 = (uint64_t *)(v307 + 8 * v308);
LABEL_605:
  while (v311 != v312)
  {
    v313 = *v311;
    if (*v311)
    {
      if (*(_DWORD *)(v313 + 32) >= 0x41u)
      {
        v314 = *(_QWORD *)(v313 + 24);
        if (v314)
          MEMORY[0x1CAA32F9C](v314, 0x1000C8000313F17);
      }
      sub_1C53FED30((uint64_t *)(v313 + 16));
      v315 = *(unsigned int *)(v313 + 8);
      if ((_DWORD)v315)
      {
        v316 = -8 * v315;
        v317 = (unsigned __int8 **)(v313 - 8);
        do
        {
          if (*v317)
            llvm::MetadataTracking::untrack((uint64_t)v317, *v317);
          --v317;
          v316 += 8;
        }
        while (v316);
      }
      operator delete((void *)(v313 - 8 * v315));
    }
    v318 = v311 + 1;
    v311 = v309;
    if (v318 != v309)
    {
      v311 = v318;
      while ((*v311 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v311 == v309)
        {
          v311 = v309;
          goto LABEL_605;
        }
      }
    }
  }
  v319 = *((_QWORD *)this + 76);
  v320 = *((unsigned int *)this + 156);
  v321 = (uint64_t *)(v319 + 8 * v320);
  if (*((_DWORD *)this + 154))
  {
    if ((_DWORD)v320)
    {
      v322 = 8 * v320;
      v323 = (uint64_t *)*((_QWORD *)this + 76);
      while ((*v323 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v323;
        v322 -= 8;
        if (!v322)
          goto LABEL_626;
      }
    }
    else
    {
      v323 = (uint64_t *)*((_QWORD *)this + 76);
    }
  }
  else
  {
LABEL_626:
    v323 = (uint64_t *)(v319 + 8 * v320);
  }
  v324 = (uint64_t *)(v319 + 8 * v320);
LABEL_629:
  while (v323 != v324)
  {
    v325 = *v323;
    if (*v323)
    {
      sub_1C53FED30((uint64_t *)(v325 + 16));
      v326 = *(unsigned int *)(v325 + 8);
      if ((_DWORD)v326)
      {
        v327 = -8 * v326;
        v328 = (unsigned __int8 **)(v325 - 8);
        do
        {
          if (*v328)
            llvm::MetadataTracking::untrack((uint64_t)v328, *v328);
          --v328;
          v327 += 8;
        }
        while (v327);
      }
      operator delete((void *)(v325 - 8 * v326));
    }
    v329 = v323 + 1;
    v323 = v321;
    if (v329 != v321)
    {
      v323 = v329;
      while ((*v323 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v323 == v321)
        {
          v323 = v321;
          goto LABEL_629;
        }
      }
    }
  }
  v330 = *((_QWORD *)this + 79);
  v331 = *((unsigned int *)this + 162);
  v332 = (uint64_t *)(v330 + 8 * v331);
  if (*((_DWORD *)this + 160))
  {
    if ((_DWORD)v331)
    {
      v333 = 8 * v331;
      v334 = (uint64_t *)*((_QWORD *)this + 79);
      while ((*v334 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v334;
        v333 -= 8;
        if (!v333)
          goto LABEL_647;
      }
    }
    else
    {
      v334 = (uint64_t *)*((_QWORD *)this + 79);
    }
  }
  else
  {
LABEL_647:
    v334 = (uint64_t *)(v330 + 8 * v331);
  }
  v335 = (uint64_t *)(v330 + 8 * v331);
LABEL_650:
  while (v334 != v335)
  {
    v336 = *v334;
    if (*v334)
    {
      sub_1C53FED30((uint64_t *)(v336 + 16));
      v337 = *(unsigned int *)(v336 + 8);
      if ((_DWORD)v337)
      {
        v338 = -8 * v337;
        v339 = (unsigned __int8 **)(v336 - 8);
        do
        {
          if (*v339)
            llvm::MetadataTracking::untrack((uint64_t)v339, *v339);
          --v339;
          v338 += 8;
        }
        while (v338);
      }
      operator delete((void *)(v336 - 8 * v337));
    }
    v340 = v334 + 1;
    v334 = v332;
    if (v340 != v332)
    {
      v334 = v340;
      while ((*v334 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v334 == v332)
        {
          v334 = v332;
          goto LABEL_650;
        }
      }
    }
  }
  v341 = *((_QWORD *)this + 82);
  v342 = *((unsigned int *)this + 168);
  v343 = (uint64_t *)(v341 + 8 * v342);
  if (*((_DWORD *)this + 166))
  {
    if ((_DWORD)v342)
    {
      v344 = 8 * v342;
      v345 = (uint64_t *)*((_QWORD *)this + 82);
      while ((*v345 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v345;
        v344 -= 8;
        if (!v344)
          goto LABEL_668;
      }
    }
    else
    {
      v345 = (uint64_t *)*((_QWORD *)this + 82);
    }
  }
  else
  {
LABEL_668:
    v345 = (uint64_t *)(v341 + 8 * v342);
  }
  v346 = (uint64_t *)(v341 + 8 * v342);
LABEL_671:
  while (v345 != v346)
  {
    v347 = *v345;
    if (*v345)
    {
      sub_1C53FED30((uint64_t *)(v347 + 16));
      v348 = *(unsigned int *)(v347 + 8);
      if ((_DWORD)v348)
      {
        v349 = -8 * v348;
        v350 = (unsigned __int8 **)(v347 - 8);
        do
        {
          if (*v350)
            llvm::MetadataTracking::untrack((uint64_t)v350, *v350);
          --v350;
          v349 += 8;
        }
        while (v349);
      }
      operator delete((void *)(v347 - 8 * v348));
    }
    v351 = v345 + 1;
    v345 = v343;
    if (v351 != v343)
    {
      v345 = v351;
      while ((*v345 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v345 == v343)
        {
          v345 = v343;
          goto LABEL_671;
        }
      }
    }
  }
  v352 = *((_QWORD *)this + 85);
  v353 = *((unsigned int *)this + 174);
  v354 = (uint64_t *)(v352 + 8 * v353);
  if (*((_DWORD *)this + 172))
  {
    if ((_DWORD)v353)
    {
      v355 = 8 * v353;
      v356 = (uint64_t *)*((_QWORD *)this + 85);
      while ((*v356 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v356;
        v355 -= 8;
        if (!v355)
          goto LABEL_689;
      }
    }
    else
    {
      v356 = (uint64_t *)*((_QWORD *)this + 85);
    }
  }
  else
  {
LABEL_689:
    v356 = (uint64_t *)(v352 + 8 * v353);
  }
  v357 = (uint64_t *)(v352 + 8 * v353);
LABEL_692:
  while (v356 != v357)
  {
    v358 = *v356;
    if (*v356)
    {
      sub_1C53FED30((uint64_t *)(v358 + 16));
      v359 = *(unsigned int *)(v358 + 8);
      if ((_DWORD)v359)
      {
        v360 = -8 * v359;
        v361 = (unsigned __int8 **)(v358 - 8);
        do
        {
          if (*v361)
            llvm::MetadataTracking::untrack((uint64_t)v361, *v361);
          --v361;
          v360 += 8;
        }
        while (v360);
      }
      operator delete((void *)(v358 - 8 * v359));
    }
    v362 = v356 + 1;
    v356 = v354;
    if (v362 != v354)
    {
      v356 = v362;
      while ((*v356 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v356 == v354)
        {
          v356 = v354;
          goto LABEL_692;
        }
      }
    }
  }
  v363 = *((_QWORD *)this + 88);
  v364 = *((unsigned int *)this + 180);
  v365 = (uint64_t *)(v363 + 8 * v364);
  if (*((_DWORD *)this + 178))
  {
    if ((_DWORD)v364)
    {
      v366 = 8 * v364;
      v367 = (uint64_t *)*((_QWORD *)this + 88);
      while ((*v367 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v367;
        v366 -= 8;
        if (!v366)
          goto LABEL_710;
      }
    }
    else
    {
      v367 = (uint64_t *)*((_QWORD *)this + 88);
    }
  }
  else
  {
LABEL_710:
    v367 = (uint64_t *)(v363 + 8 * v364);
  }
  v368 = (uint64_t *)(v363 + 8 * v364);
LABEL_713:
  while (v367 != v368)
  {
    v369 = *v367;
    if (*v367)
    {
      sub_1C53FED30((uint64_t *)(v369 + 16));
      v370 = *(unsigned int *)(v369 + 8);
      if ((_DWORD)v370)
      {
        v371 = -8 * v370;
        v372 = (unsigned __int8 **)(v369 - 8);
        do
        {
          if (*v372)
            llvm::MetadataTracking::untrack((uint64_t)v372, *v372);
          --v372;
          v371 += 8;
        }
        while (v371);
      }
      operator delete((void *)(v369 - 8 * v370));
    }
    v373 = v367 + 1;
    v367 = v365;
    if (v373 != v365)
    {
      v367 = v373;
      while ((*v367 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v367 == v365)
        {
          v367 = v365;
          goto LABEL_713;
        }
      }
    }
  }
  v374 = *((_QWORD *)this + 91);
  v375 = *((unsigned int *)this + 186);
  v376 = (uint64_t *)(v374 + 8 * v375);
  if (*((_DWORD *)this + 184))
  {
    if ((_DWORD)v375)
    {
      v377 = 8 * v375;
      v378 = (uint64_t *)*((_QWORD *)this + 91);
      while ((*v378 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v378;
        v377 -= 8;
        if (!v377)
          goto LABEL_731;
      }
    }
    else
    {
      v378 = (uint64_t *)*((_QWORD *)this + 91);
    }
  }
  else
  {
LABEL_731:
    v378 = (uint64_t *)(v374 + 8 * v375);
  }
  v379 = (uint64_t *)(v374 + 8 * v375);
LABEL_734:
  while (v378 != v379)
  {
    v380 = *v378;
    if (*v378)
    {
      sub_1C53FED30((uint64_t *)(v380 + 16));
      v381 = *(unsigned int *)(v380 + 8);
      if ((_DWORD)v381)
      {
        v382 = -8 * v381;
        v383 = (unsigned __int8 **)(v380 - 8);
        do
        {
          if (*v383)
            llvm::MetadataTracking::untrack((uint64_t)v383, *v383);
          --v383;
          v382 += 8;
        }
        while (v382);
      }
      operator delete((void *)(v380 - 8 * v381));
    }
    v384 = v378 + 1;
    v378 = v376;
    if (v384 != v376)
    {
      v378 = v384;
      while ((*v378 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v378 == v376)
        {
          v378 = v376;
          goto LABEL_734;
        }
      }
    }
  }
  v385 = *((_QWORD *)this + 94);
  v386 = *((unsigned int *)this + 192);
  v387 = (uint64_t *)(v385 + 8 * v386);
  if (*((_DWORD *)this + 190))
  {
    if ((_DWORD)v386)
    {
      v388 = 8 * v386;
      v389 = (uint64_t *)*((_QWORD *)this + 94);
      while ((*v389 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v389;
        v388 -= 8;
        if (!v388)
          goto LABEL_752;
      }
    }
    else
    {
      v389 = (uint64_t *)*((_QWORD *)this + 94);
    }
  }
  else
  {
LABEL_752:
    v389 = (uint64_t *)(v385 + 8 * v386);
  }
  v390 = (uint64_t *)(v385 + 8 * v386);
LABEL_755:
  while (v389 != v390)
  {
    v391 = *v389;
    if (*v389)
    {
      sub_1C53FED30((uint64_t *)(v391 + 16));
      v392 = *(unsigned int *)(v391 + 8);
      if ((_DWORD)v392)
      {
        v393 = -8 * v392;
        v394 = (unsigned __int8 **)(v391 - 8);
        do
        {
          if (*v394)
            llvm::MetadataTracking::untrack((uint64_t)v394, *v394);
          --v394;
          v393 += 8;
        }
        while (v393);
      }
      operator delete((void *)(v391 - 8 * v392));
    }
    v395 = v389 + 1;
    v389 = v387;
    if (v395 != v387)
    {
      v389 = v395;
      while ((*v389 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v389 == v387)
        {
          v389 = v387;
          goto LABEL_755;
        }
      }
    }
  }
  v396 = *((_QWORD *)this + 97);
  v397 = *((unsigned int *)this + 198);
  v398 = (uint64_t *)(v396 + 8 * v397);
  if (*((_DWORD *)this + 196))
  {
    if ((_DWORD)v397)
    {
      v399 = 8 * v397;
      v400 = (uint64_t *)*((_QWORD *)this + 97);
      while ((*v400 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v400;
        v399 -= 8;
        if (!v399)
          goto LABEL_773;
      }
    }
    else
    {
      v400 = (uint64_t *)*((_QWORD *)this + 97);
    }
  }
  else
  {
LABEL_773:
    v400 = (uint64_t *)(v396 + 8 * v397);
  }
  v401 = (uint64_t *)(v396 + 8 * v397);
LABEL_776:
  while (v400 != v401)
  {
    v402 = *v400;
    if (*v400)
    {
      sub_1C53FED30((uint64_t *)(v402 + 16));
      v403 = *(unsigned int *)(v402 + 8);
      if ((_DWORD)v403)
      {
        v404 = -8 * v403;
        v405 = (unsigned __int8 **)(v402 - 8);
        do
        {
          if (*v405)
            llvm::MetadataTracking::untrack((uint64_t)v405, *v405);
          --v405;
          v404 += 8;
        }
        while (v404);
      }
      operator delete((void *)(v402 - 8 * v403));
    }
    v406 = v400 + 1;
    v400 = v398;
    if (v406 != v398)
    {
      v400 = v406;
      while ((*v400 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v400 == v398)
        {
          v400 = v398;
          goto LABEL_776;
        }
      }
    }
  }
  v407 = *((_QWORD *)this + 100);
  v408 = *((unsigned int *)this + 204);
  v409 = (uint64_t *)(v407 + 8 * v408);
  if (*((_DWORD *)this + 202))
  {
    if ((_DWORD)v408)
    {
      v410 = 8 * v408;
      v411 = (uint64_t *)*((_QWORD *)this + 100);
      while ((*v411 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v411;
        v410 -= 8;
        if (!v410)
          goto LABEL_794;
      }
    }
    else
    {
      v411 = (uint64_t *)*((_QWORD *)this + 100);
    }
  }
  else
  {
LABEL_794:
    v411 = (uint64_t *)(v407 + 8 * v408);
  }
  v412 = (uint64_t *)(v407 + 8 * v408);
LABEL_797:
  while (v411 != v412)
  {
    v413 = *v411;
    if (*v411)
    {
      sub_1C53FED30((uint64_t *)(v413 + 16));
      v414 = *(unsigned int *)(v413 + 8);
      if ((_DWORD)v414)
      {
        v415 = -8 * v414;
        v416 = (unsigned __int8 **)(v413 - 8);
        do
        {
          if (*v416)
            llvm::MetadataTracking::untrack((uint64_t)v416, *v416);
          --v416;
          v415 += 8;
        }
        while (v415);
      }
      operator delete((void *)(v413 - 8 * v414));
    }
    v417 = v411 + 1;
    v411 = v409;
    if (v417 != v409)
    {
      v411 = v417;
      while ((*v411 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v411 == v409)
        {
          v411 = v409;
          goto LABEL_797;
        }
      }
    }
  }
  v418 = *((_QWORD *)this + 103);
  v419 = *((unsigned int *)this + 210);
  v420 = (uint64_t *)(v418 + 8 * v419);
  if (*((_DWORD *)this + 208))
  {
    if ((_DWORD)v419)
    {
      v421 = 8 * v419;
      v422 = (uint64_t *)*((_QWORD *)this + 103);
      while ((*v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v422;
        v421 -= 8;
        if (!v421)
          goto LABEL_815;
      }
    }
    else
    {
      v422 = (uint64_t *)*((_QWORD *)this + 103);
    }
  }
  else
  {
LABEL_815:
    v422 = (uint64_t *)(v418 + 8 * v419);
  }
  v423 = (uint64_t *)(v418 + 8 * v419);
LABEL_818:
  while (v422 != v423)
  {
    v424 = *v422;
    if (*v422)
    {
      sub_1C53FED30((uint64_t *)(v424 + 16));
      v425 = *(unsigned int *)(v424 + 8);
      if ((_DWORD)v425)
      {
        v426 = -8 * v425;
        v427 = (unsigned __int8 **)(v424 - 8);
        do
        {
          if (*v427)
            llvm::MetadataTracking::untrack((uint64_t)v427, *v427);
          --v427;
          v426 += 8;
        }
        while (v426);
      }
      operator delete((void *)(v424 - 8 * v425));
    }
    v428 = v422 + 1;
    v422 = v420;
    if (v428 != v420)
    {
      v422 = v428;
      while ((*v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v422 == v420)
        {
          v422 = v420;
          goto LABEL_818;
        }
      }
    }
  }
  v429 = *((_QWORD *)this + 106);
  v430 = *((unsigned int *)this + 216);
  v431 = (uint64_t *)(v429 + 8 * v430);
  if (*((_DWORD *)this + 214))
  {
    if ((_DWORD)v430)
    {
      v432 = 8 * v430;
      v433 = (uint64_t *)*((_QWORD *)this + 106);
      while ((*v433 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v433;
        v432 -= 8;
        if (!v432)
          goto LABEL_836;
      }
    }
    else
    {
      v433 = (uint64_t *)*((_QWORD *)this + 106);
    }
  }
  else
  {
LABEL_836:
    v433 = (uint64_t *)(v429 + 8 * v430);
  }
  v434 = (uint64_t *)(v429 + 8 * v430);
LABEL_839:
  while (v433 != v434)
  {
    v435 = *v433;
    if (*v433)
    {
      sub_1C53FED30((uint64_t *)(v435 + 16));
      v436 = *(unsigned int *)(v435 + 8);
      if ((_DWORD)v436)
      {
        v437 = -8 * v436;
        v438 = (unsigned __int8 **)(v435 - 8);
        do
        {
          if (*v438)
            llvm::MetadataTracking::untrack((uint64_t)v438, *v438);
          --v438;
          v437 += 8;
        }
        while (v437);
      }
      operator delete((void *)(v435 - 8 * v436));
    }
    v439 = v433 + 1;
    v433 = v431;
    if (v439 != v431)
    {
      v433 = v439;
      while ((*v433 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v433 == v431)
        {
          v433 = v431;
          goto LABEL_839;
        }
      }
    }
  }
  v440 = *((_QWORD *)this + 109);
  v441 = *((unsigned int *)this + 222);
  v442 = (uint64_t *)(v440 + 8 * v441);
  if (*((_DWORD *)this + 220))
  {
    if ((_DWORD)v441)
    {
      v443 = 8 * v441;
      v444 = (uint64_t *)*((_QWORD *)this + 109);
      while ((*v444 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v444;
        v443 -= 8;
        if (!v443)
          goto LABEL_857;
      }
    }
    else
    {
      v444 = (uint64_t *)*((_QWORD *)this + 109);
    }
  }
  else
  {
LABEL_857:
    v444 = (uint64_t *)(v440 + 8 * v441);
  }
  v445 = (uint64_t *)(v440 + 8 * v441);
LABEL_860:
  while (v444 != v445)
  {
    v446 = *v444;
    if (*v444)
    {
      sub_1C53FED30((uint64_t *)(v446 + 16));
      v447 = *(unsigned int *)(v446 + 8);
      if ((_DWORD)v447)
      {
        v448 = -8 * v447;
        v449 = (unsigned __int8 **)(v446 - 8);
        do
        {
          if (*v449)
            llvm::MetadataTracking::untrack((uint64_t)v449, *v449);
          --v449;
          v448 += 8;
        }
        while (v448);
      }
      operator delete((void *)(v446 - 8 * v447));
    }
    v450 = v444 + 1;
    v444 = v442;
    if (v450 != v442)
    {
      v444 = v450;
      while ((*v444 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v444 == v442)
        {
          v444 = v442;
          goto LABEL_860;
        }
      }
    }
  }
  v451 = *((_QWORD *)this + 112);
  v452 = *((unsigned int *)this + 228);
  v453 = (uint64_t *)(v451 + 8 * v452);
  if (*((_DWORD *)this + 226))
  {
    if ((_DWORD)v452)
    {
      v454 = 8 * v452;
      v455 = (uint64_t *)*((_QWORD *)this + 112);
      while ((*v455 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v455;
        v454 -= 8;
        if (!v454)
          goto LABEL_878;
      }
    }
    else
    {
      v455 = (uint64_t *)*((_QWORD *)this + 112);
    }
  }
  else
  {
LABEL_878:
    v455 = (uint64_t *)(v451 + 8 * v452);
  }
  v456 = (uint64_t *)(v451 + 8 * v452);
LABEL_881:
  while (v455 != v456)
  {
    v457 = *v455;
    if (*v455)
    {
      sub_1C53FED30((uint64_t *)(v457 + 16));
      v458 = *(unsigned int *)(v457 + 8);
      if ((_DWORD)v458)
      {
        v459 = -8 * v458;
        v460 = (unsigned __int8 **)(v457 - 8);
        do
        {
          if (*v460)
            llvm::MetadataTracking::untrack((uint64_t)v460, *v460);
          --v460;
          v459 += 8;
        }
        while (v459);
      }
      operator delete((void *)(v457 - 8 * v458));
    }
    v461 = v455 + 1;
    v455 = v453;
    if (v461 != v453)
    {
      v455 = v461;
      while ((*v455 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v455 == v453)
        {
          v455 = v453;
          goto LABEL_881;
        }
      }
    }
  }
  v462 = *((_QWORD *)this + 115);
  v463 = *((unsigned int *)this + 234);
  v464 = (uint64_t *)(v462 + 8 * v463);
  if (*((_DWORD *)this + 232))
  {
    if ((_DWORD)v463)
    {
      v465 = 8 * v463;
      v466 = (uint64_t *)*((_QWORD *)this + 115);
      while ((*v466 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v466;
        v465 -= 8;
        if (!v465)
          goto LABEL_899;
      }
    }
    else
    {
      v466 = (uint64_t *)*((_QWORD *)this + 115);
    }
  }
  else
  {
LABEL_899:
    v466 = (uint64_t *)(v462 + 8 * v463);
  }
  v467 = (uint64_t *)(v462 + 8 * v463);
LABEL_902:
  while (v466 != v467)
  {
    v468 = *v466;
    if (*v466)
    {
      sub_1C53FED30((uint64_t *)(v468 + 16));
      v469 = *(unsigned int *)(v468 + 8);
      if ((_DWORD)v469)
      {
        v470 = -8 * v469;
        v471 = (unsigned __int8 **)(v468 - 8);
        do
        {
          if (*v471)
            llvm::MetadataTracking::untrack((uint64_t)v471, *v471);
          --v471;
          v470 += 8;
        }
        while (v470);
      }
      operator delete((void *)(v468 - 8 * v469));
    }
    v472 = v466 + 1;
    v466 = v464;
    if (v472 != v464)
    {
      v466 = v472;
      while ((*v466 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v466 == v464)
        {
          v466 = v464;
          goto LABEL_902;
        }
      }
    }
  }
  v473 = *((_QWORD *)this + 118);
  v474 = *((unsigned int *)this + 240);
  v475 = (uint64_t *)(v473 + 8 * v474);
  if (*((_DWORD *)this + 238))
  {
    if ((_DWORD)v474)
    {
      v476 = 8 * v474;
      v477 = (uint64_t *)*((_QWORD *)this + 118);
      while ((*v477 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v477;
        v476 -= 8;
        if (!v476)
          goto LABEL_920;
      }
    }
    else
    {
      v477 = (uint64_t *)*((_QWORD *)this + 118);
    }
  }
  else
  {
LABEL_920:
    v477 = (uint64_t *)(v473 + 8 * v474);
  }
  v478 = (uint64_t *)(v473 + 8 * v474);
LABEL_923:
  while (v477 != v478)
  {
    v479 = *v477;
    if (*v477)
    {
      sub_1C53FED30((uint64_t *)(v479 + 16));
      v480 = *(unsigned int *)(v479 + 8);
      if ((_DWORD)v480)
      {
        v481 = -8 * v480;
        v482 = (unsigned __int8 **)(v479 - 8);
        do
        {
          if (*v482)
            llvm::MetadataTracking::untrack((uint64_t)v482, *v482);
          --v482;
          v481 += 8;
        }
        while (v481);
      }
      operator delete((void *)(v479 - 8 * v480));
    }
    v483 = v477 + 1;
    v477 = v475;
    if (v483 != v475)
    {
      v477 = v483;
      while ((*v477 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v477 == v475)
        {
          v477 = v475;
          goto LABEL_923;
        }
      }
    }
  }
  v484 = *((_QWORD *)this + 121);
  v485 = *((unsigned int *)this + 246);
  v486 = (uint64_t *)(v484 + 8 * v485);
  if (*((_DWORD *)this + 244))
  {
    if ((_DWORD)v485)
    {
      v487 = 8 * v485;
      v488 = (uint64_t *)*((_QWORD *)this + 121);
      while ((*v488 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v488;
        v487 -= 8;
        if (!v487)
          goto LABEL_941;
      }
    }
    else
    {
      v488 = (uint64_t *)*((_QWORD *)this + 121);
    }
  }
  else
  {
LABEL_941:
    v488 = (uint64_t *)(v484 + 8 * v485);
  }
  v489 = (uint64_t *)(v484 + 8 * v485);
LABEL_944:
  while (v488 != v489)
  {
    v490 = *v488;
    if (*v488)
    {
      sub_1C53FED30((uint64_t *)(v490 + 16));
      v491 = *(unsigned int *)(v490 + 8);
      if ((_DWORD)v491)
      {
        v492 = -8 * v491;
        v493 = (unsigned __int8 **)(v490 - 8);
        do
        {
          if (*v493)
            llvm::MetadataTracking::untrack((uint64_t)v493, *v493);
          --v493;
          v492 += 8;
        }
        while (v492);
      }
      operator delete((void *)(v490 - 8 * v491));
    }
    v494 = v488 + 1;
    v488 = v486;
    if (v494 != v486)
    {
      v488 = v494;
      while ((*v488 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v488 == v486)
        {
          v488 = v486;
          goto LABEL_944;
        }
      }
    }
  }
  v495 = *((_QWORD *)this + 124);
  v496 = *((unsigned int *)this + 252);
  v497 = (uint64_t *)(v495 + 8 * v496);
  if (*((_DWORD *)this + 250))
  {
    if ((_DWORD)v496)
    {
      v498 = 8 * v496;
      v499 = (uint64_t *)*((_QWORD *)this + 124);
      while ((*v499 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v499;
        v498 -= 8;
        if (!v498)
          goto LABEL_962;
      }
    }
    else
    {
      v499 = (uint64_t *)*((_QWORD *)this + 124);
    }
  }
  else
  {
LABEL_962:
    v499 = (uint64_t *)(v495 + 8 * v496);
  }
  v500 = (uint64_t *)(v495 + 8 * v496);
LABEL_965:
  while (v499 != v500)
  {
    v501 = *v499;
    if (*v499)
    {
      sub_1C53FED30((uint64_t *)(v501 + 16));
      v502 = *(unsigned int *)(v501 + 8);
      if ((_DWORD)v502)
      {
        v503 = -8 * v502;
        v504 = (unsigned __int8 **)(v501 - 8);
        do
        {
          if (*v504)
            llvm::MetadataTracking::untrack((uint64_t)v504, *v504);
          --v504;
          v503 += 8;
        }
        while (v503);
      }
      operator delete((void *)(v501 - 8 * v502));
    }
    v505 = v499 + 1;
    v499 = v497;
    if (v505 != v497)
    {
      v499 = v505;
      while ((*v499 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v499 == v497)
        {
          v499 = v497;
          goto LABEL_965;
        }
      }
    }
  }
  v506 = *((_QWORD *)this + 127);
  v507 = *((unsigned int *)this + 258);
  v508 = (uint64_t *)(v506 + 8 * v507);
  if (*((_DWORD *)this + 256))
  {
    if ((_DWORD)v507)
    {
      v509 = 8 * v507;
      v510 = (uint64_t *)*((_QWORD *)this + 127);
      while ((*v510 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v510;
        v509 -= 8;
        if (!v509)
          goto LABEL_983;
      }
    }
    else
    {
      v510 = (uint64_t *)*((_QWORD *)this + 127);
    }
  }
  else
  {
LABEL_983:
    v510 = (uint64_t *)(v506 + 8 * v507);
  }
  v511 = (uint64_t *)(v506 + 8 * v507);
LABEL_986:
  while (v510 != v511)
  {
    v512 = *v510;
    if (*v510)
    {
      sub_1C53FED30((uint64_t *)(v512 + 16));
      v513 = *(unsigned int *)(v512 + 8);
      if ((_DWORD)v513)
      {
        v514 = -8 * v513;
        v515 = (unsigned __int8 **)(v512 - 8);
        do
        {
          if (*v515)
            llvm::MetadataTracking::untrack((uint64_t)v515, *v515);
          --v515;
          v514 += 8;
        }
        while (v514);
      }
      operator delete((void *)(v512 - 8 * v513));
    }
    v516 = v510 + 1;
    v510 = v508;
    if (v516 != v508)
    {
      v510 = v516;
      while ((*v510 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v510 == v508)
        {
          v510 = v508;
          goto LABEL_986;
        }
      }
    }
  }
  v517 = *((_QWORD *)this + 130);
  v518 = *((unsigned int *)this + 264);
  v519 = (uint64_t *)(v517 + 8 * v518);
  if (*((_DWORD *)this + 262))
  {
    if ((_DWORD)v518)
    {
      v520 = 8 * v518;
      v521 = (uint64_t *)*((_QWORD *)this + 130);
      while ((*v521 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v521;
        v520 -= 8;
        if (!v520)
          goto LABEL_1004;
      }
    }
    else
    {
      v521 = (uint64_t *)*((_QWORD *)this + 130);
    }
  }
  else
  {
LABEL_1004:
    v521 = (uint64_t *)(v517 + 8 * v518);
  }
  v522 = (uint64_t *)(v517 + 8 * v518);
LABEL_1007:
  while (v521 != v522)
  {
    v523 = *v521;
    if (*v521)
    {
      sub_1C53FED30((uint64_t *)(v523 + 16));
      v524 = *(unsigned int *)(v523 + 8);
      if ((_DWORD)v524)
      {
        v525 = -8 * v524;
        v526 = (unsigned __int8 **)(v523 - 8);
        do
        {
          if (*v526)
            llvm::MetadataTracking::untrack((uint64_t)v526, *v526);
          --v526;
          v525 += 8;
        }
        while (v525);
      }
      operator delete((void *)(v523 - 8 * v524));
    }
    v527 = v521 + 1;
    v521 = v519;
    if (v527 != v519)
    {
      v521 = v527;
      while ((*v521 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v521 == v519)
        {
          v521 = v519;
          goto LABEL_1007;
        }
      }
    }
  }
  v528 = *((_QWORD *)this + 133);
  v529 = *((unsigned int *)this + 270);
  v530 = (uint64_t *)(v528 + 8 * v529);
  if (*((_DWORD *)this + 268))
  {
    if ((_DWORD)v529)
    {
      v531 = 8 * v529;
      v532 = (uint64_t *)*((_QWORD *)this + 133);
      while ((*v532 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v532;
        v531 -= 8;
        if (!v531)
          goto LABEL_1025;
      }
    }
    else
    {
      v532 = (uint64_t *)*((_QWORD *)this + 133);
    }
  }
  else
  {
LABEL_1025:
    v532 = (uint64_t *)(v528 + 8 * v529);
  }
  v533 = (uint64_t *)(v528 + 8 * v529);
LABEL_1028:
  while (v532 != v533)
  {
    v534 = *v532;
    if (*v532)
    {
      sub_1C53FED30((uint64_t *)(v534 + 16));
      v535 = *(unsigned int *)(v534 + 8);
      if ((_DWORD)v535)
      {
        v536 = -8 * v535;
        v537 = (unsigned __int8 **)(v534 - 8);
        do
        {
          if (*v537)
            llvm::MetadataTracking::untrack((uint64_t)v537, *v537);
          --v537;
          v536 += 8;
        }
        while (v536);
      }
      operator delete((void *)(v534 - 8 * v535));
    }
    v538 = v532 + 1;
    v532 = v530;
    if (v538 != v530)
    {
      v532 = v538;
      while ((*v532 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v532 == v530)
        {
          v532 = v530;
          goto LABEL_1028;
        }
      }
    }
  }
  v539 = *((_QWORD *)this + 136);
  v540 = *((unsigned int *)this + 276);
  v541 = (uint64_t *)(v539 + 8 * v540);
  if (*((_DWORD *)this + 274))
  {
    if ((_DWORD)v540)
    {
      v542 = 8 * v540;
      v543 = (uint64_t *)*((_QWORD *)this + 136);
      while ((*v543 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v543;
        v542 -= 8;
        if (!v542)
          goto LABEL_1046;
      }
    }
    else
    {
      v543 = (uint64_t *)*((_QWORD *)this + 136);
    }
  }
  else
  {
LABEL_1046:
    v543 = (uint64_t *)(v539 + 8 * v540);
  }
  v544 = (uint64_t *)(v539 + 8 * v540);
LABEL_1049:
  while (v543 != v544)
  {
    v545 = *v543;
    if (*v543)
    {
      sub_1C53FEDC4(*v543);
      v546 = *(unsigned int *)(v545 + 8);
      if ((_DWORD)v546)
      {
        v547 = -8 * v546;
        v548 = (unsigned __int8 **)(v545 - 8);
        do
        {
          if (*v548)
            llvm::MetadataTracking::untrack((uint64_t)v548, *v548);
          --v548;
          v547 += 8;
        }
        while (v547);
      }
      operator delete((void *)(v545 - 8 * v546));
    }
    v549 = v543 + 1;
    v543 = v541;
    if (v549 != v541)
    {
      v543 = v549;
      while ((*v543 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v543 == v541)
        {
          v543 = v541;
          goto LABEL_1049;
        }
      }
    }
  }
  v550 = *((_QWORD *)this + 139);
  v551 = *((unsigned int *)this + 282);
  v552 = (uint64_t *)(v550 + 8 * v551);
  if (*((_DWORD *)this + 280))
  {
    if ((_DWORD)v551)
    {
      v553 = 8 * v551;
      v554 = (uint64_t *)*((_QWORD *)this + 139);
      while ((*v554 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v554;
        v553 -= 8;
        if (!v553)
          goto LABEL_1067;
      }
    }
    else
    {
      v554 = (uint64_t *)*((_QWORD *)this + 139);
    }
  }
  else
  {
LABEL_1067:
    v554 = (uint64_t *)(v550 + 8 * v551);
  }
  v555 = (uint64_t *)(v550 + 8 * v551);
LABEL_1070:
  while (v554 != v555)
  {
    v556 = *v554;
    if (*v554)
    {
      sub_1C53FED30((uint64_t *)(v556 + 16));
      v557 = *(unsigned int *)(v556 + 8);
      if ((_DWORD)v557)
      {
        v558 = -8 * v557;
        v559 = (unsigned __int8 **)(v556 - 8);
        do
        {
          if (*v559)
            llvm::MetadataTracking::untrack((uint64_t)v559, *v559);
          --v559;
          v558 += 8;
        }
        while (v558);
      }
      operator delete((void *)(v556 - 8 * v557));
    }
    v560 = v554 + 1;
    v554 = v552;
    if (v560 != v552)
    {
      v554 = v560;
      while ((*v554 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v554 == v552)
        {
          v554 = v552;
          goto LABEL_1070;
        }
      }
    }
  }
  v561 = *((_QWORD *)this + 142);
  v562 = *((unsigned int *)this + 288);
  v563 = (uint64_t *)(v561 + 8 * v562);
  if (*((_DWORD *)this + 286))
  {
    if ((_DWORD)v562)
    {
      v564 = 8 * v562;
      v565 = (uint64_t *)*((_QWORD *)this + 142);
      while ((*v565 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v565;
        v564 -= 8;
        if (!v564)
          goto LABEL_1088;
      }
    }
    else
    {
      v565 = (uint64_t *)*((_QWORD *)this + 142);
    }
  }
  else
  {
LABEL_1088:
    v565 = (uint64_t *)(v561 + 8 * v562);
  }
  v566 = (uint64_t *)(v561 + 8 * v562);
LABEL_1091:
  while (v565 != v566)
  {
    v567 = *v565;
    if (*v565)
    {
      sub_1C53FED30((uint64_t *)(v567 + 16));
      v568 = *(unsigned int *)(v567 + 8);
      if ((_DWORD)v568)
      {
        v569 = -8 * v568;
        v570 = (unsigned __int8 **)(v567 - 8);
        do
        {
          if (*v570)
            llvm::MetadataTracking::untrack((uint64_t)v570, *v570);
          --v570;
          v569 += 8;
        }
        while (v569);
      }
      operator delete((void *)(v567 - 8 * v568));
    }
    v571 = v565 + 1;
    v565 = v563;
    if (v571 != v563)
    {
      v565 = v571;
      while ((*v565 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v565 == v563)
        {
          v565 = v563;
          goto LABEL_1091;
        }
      }
    }
  }
  v572 = *((_DWORD *)this + 380);
  v573 = *((_QWORD *)this + 189);
  v574 = *((unsigned int *)this + 382);
  v575 = (uint64_t *)(v573 + 8 * v574);
  v576 = *((_DWORD *)this + 382);
  v577 = v575;
  if (v572)
  {
    if ((_DWORD)v574)
    {
      v578 = 8 * v574;
      v577 = (uint64_t *)*((_QWORD *)this + 189);
      while ((*v577 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v577;
        v578 -= 8;
        if (!v578)
        {
          v576 = *((_DWORD *)this + 382);
          v577 = (uint64_t *)(v573 + 8 * v574);
          goto LABEL_1112;
        }
      }
      v576 = *((_DWORD *)this + 382);
    }
    else
    {
      v576 = 0;
      v577 = (uint64_t *)*((_QWORD *)this + 189);
    }
  }
LABEL_1112:
  v579 = (uint64_t *)(v573 + 8 * v576);
LABEL_1113:
  while (v577 != v579)
  {
    v580 = *v577;
    v581 = *(_DWORD *)(*v577 + 20);
    if ((v581 & 0x40000000) != 0)
    {
      v583 = *(_QWORD *)(v580 - 8);
      v582 = v581 & 0x7FFFFFF;
      if (v582)
      {
LABEL_1116:
        v584 = 32 * v582;
        v585 = (_QWORD **)(v583 + 16);
        do
        {
          if (*(v585 - 2))
          {
            **v585 = *(v585 - 1);
            v586 = (uint64_t)*(v585 - 1);
            if (v586)
              *(_QWORD *)(v586 + 16) = *v585;
          }
          *(v585 - 2) = 0;
          v585 += 4;
          v584 -= 32;
        }
        while (v584);
      }
    }
    else
    {
      v582 = v581 & 0x7FFFFFF;
      v583 = v580 - 32 * v582;
      if (v582)
        goto LABEL_1116;
    }
    v587 = v577 + 1;
    v577 = v575;
    if (v587 != v575)
    {
      v577 = v587;
      while ((*v577 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v577 == v575)
        {
          v577 = v575;
          goto LABEL_1113;
        }
      }
    }
  }
  v588 = *((_DWORD *)this + 312);
  v589 = *((_QWORD *)this + 155);
  v590 = *((unsigned int *)this + 314);
  v591 = (uint64_t *)(v589 + 8 * v590);
  v592 = *((_DWORD *)this + 314);
  v593 = v591;
  if (v588)
  {
    if ((_DWORD)v590)
    {
      v594 = 8 * v590;
      v593 = (uint64_t *)*((_QWORD *)this + 155);
      while ((*v593 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v593;
        v594 -= 8;
        if (!v594)
        {
          v592 = *((_DWORD *)this + 314);
          v593 = (uint64_t *)(v589 + 8 * v590);
          goto LABEL_1136;
        }
      }
      v592 = *((_DWORD *)this + 314);
    }
    else
    {
      v592 = 0;
      v593 = (uint64_t *)*((_QWORD *)this + 155);
    }
  }
LABEL_1136:
  v595 = (uint64_t *)(v589 + 8 * v592);
LABEL_1137:
  while (2)
  {
    if (v593 != v595)
    {
      v596 = *v593;
      v597 = *(_DWORD *)(*v593 + 20);
      if ((v597 & 0x40000000) != 0)
      {
        v599 = *(_QWORD *)(v596 - 8);
        v598 = v597 & 0x7FFFFFF;
        if (v598)
          goto LABEL_1140;
      }
      else
      {
        v598 = v597 & 0x7FFFFFF;
        v599 = v596 - 32 * v598;
        if (v598)
        {
LABEL_1140:
          v600 = 32 * v598;
          v601 = (_QWORD **)(v599 + 16);
          do
          {
            if (*(v601 - 2))
            {
              **v601 = *(v601 - 1);
              v602 = (uint64_t)*(v601 - 1);
              if (v602)
                *(_QWORD *)(v602 + 16) = *v601;
            }
            *(v601 - 2) = 0;
            v601 += 4;
            v600 -= 32;
          }
          while (v600);
        }
      }
      v603 = v593 + 1;
      v593 = v591;
      if (v603 != v591)
      {
        v593 = v603;
        while ((*v593 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v593 == v591)
          {
            v593 = v591;
            goto LABEL_1137;
          }
        }
      }
      continue;
    }
    break;
  }
  v604 = *((_QWORD *)this + 158);
  v605 = *((unsigned int *)this + 320);
  v606 = (uint64_t *)(v604 + 8 * v605);
  if (*((_DWORD *)this + 318))
  {
    if ((_DWORD)v605)
    {
      v607 = 8 * v605;
      v608 = (uint64_t *)*((_QWORD *)this + 158);
      while ((*v608 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v608;
        v607 -= 8;
        if (!v607)
          goto LABEL_1157;
      }
    }
    else
    {
      v608 = (uint64_t *)*((_QWORD *)this + 158);
    }
  }
  else
  {
LABEL_1157:
    v608 = (uint64_t *)(v604 + 8 * v605);
  }
  v609 = (uint64_t *)(v604 + 8 * v605);
LABEL_1160:
  while (2)
  {
    if (v608 != v609)
    {
      v610 = *v608;
      v611 = *(_DWORD *)(*v608 + 20);
      if ((v611 & 0x40000000) != 0)
      {
        v613 = *(_QWORD *)(v610 - 8);
        v612 = v611 & 0x7FFFFFF;
        if (v612)
          goto LABEL_1163;
      }
      else
      {
        v612 = v611 & 0x7FFFFFF;
        v613 = v610 - 32 * v612;
        if (v612)
        {
LABEL_1163:
          v614 = 32 * v612;
          v615 = (_QWORD **)(v613 + 16);
          do
          {
            if (*(v615 - 2))
            {
              **v615 = *(v615 - 1);
              v616 = (uint64_t)*(v615 - 1);
              if (v616)
                *(_QWORD *)(v616 + 16) = *v615;
            }
            *(v615 - 2) = 0;
            v615 += 4;
            v614 -= 32;
          }
          while (v614);
        }
      }
      v617 = v608 + 1;
      v608 = v606;
      if (v617 != v606)
      {
        v608 = v617;
        while ((*v608 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v608 == v606)
          {
            v608 = v606;
            goto LABEL_1160;
          }
        }
      }
      continue;
    }
    break;
  }
  v618 = *((_QWORD *)this + 161);
  v619 = *((unsigned int *)this + 326);
  v620 = (uint64_t *)(v618 + 8 * v619);
  if (*((_DWORD *)this + 324))
  {
    if ((_DWORD)v619)
    {
      v621 = 8 * v619;
      v622 = (uint64_t *)*((_QWORD *)this + 161);
      while ((*v622 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v622;
        v621 -= 8;
        if (!v621)
          goto LABEL_1180;
      }
    }
    else
    {
      v622 = (uint64_t *)*((_QWORD *)this + 161);
    }
  }
  else
  {
LABEL_1180:
    v622 = (uint64_t *)(v618 + 8 * v619);
  }
  v623 = (uint64_t *)(v618 + 8 * v619);
LABEL_1183:
  while (2)
  {
    if (v622 != v623)
    {
      v624 = *v622;
      v625 = *(_DWORD *)(*v622 + 20);
      if ((v625 & 0x40000000) != 0)
      {
        v627 = *(_QWORD *)(v624 - 8);
        v626 = v625 & 0x7FFFFFF;
        if (v626)
          goto LABEL_1186;
      }
      else
      {
        v626 = v625 & 0x7FFFFFF;
        v627 = v624 - 32 * v626;
        if (v626)
        {
LABEL_1186:
          v628 = 32 * v626;
          v629 = (_QWORD **)(v627 + 16);
          do
          {
            if (*(v629 - 2))
            {
              **v629 = *(v629 - 1);
              v630 = (uint64_t)*(v629 - 1);
              if (v630)
                *(_QWORD *)(v630 + 16) = *v629;
            }
            *(v629 - 2) = 0;
            v629 += 4;
            v628 -= 32;
          }
          while (v628);
        }
      }
      v631 = v622 + 1;
      v622 = v620;
      if (v631 != v620)
      {
        v622 = v631;
        while ((*v622 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v622 == v620)
          {
            v622 = v620;
            goto LABEL_1183;
          }
        }
      }
      continue;
    }
    break;
  }
  v632 = *((_QWORD *)this + 189);
  v633 = (uint64_t *)(v632 + 8 * v574);
  if (v572)
  {
    if ((_DWORD)v574)
    {
      v634 = 8 * v574;
      v635 = (uint64_t *)*((_QWORD *)this + 189);
      while ((*v635 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v635;
        v634 -= 8;
        if (!v634)
          goto LABEL_1203;
      }
    }
    else
    {
      v635 = (uint64_t *)*((_QWORD *)this + 189);
    }
  }
  else
  {
LABEL_1203:
    v635 = (uint64_t *)(v632 + 8 * v574);
  }
  v636 = (uint64_t *)(v632 + 8 * v574);
  if (v635 != v636)
  {
    do
    {
      v637 = v635 + 1;
      llvm::deleteConstant(*v635);
      v635 = v633;
      if (v637 != v633)
      {
        v635 = v637;
        while ((*v635 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v635 == v633)
          {
            v635 = v633;
            break;
          }
        }
      }
    }
    while (v635 != v636);
    v588 = *((_DWORD *)this + 312);
    v590 = *((unsigned int *)this + 314);
  }
  v638 = *((_QWORD *)this + 155);
  v639 = (uint64_t *)(v638 + 8 * v590);
  if (v588)
  {
    if ((_DWORD)v590)
    {
      v640 = 8 * v590;
      v641 = (uint64_t *)*((_QWORD *)this + 155);
      while ((*v641 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v641;
        v640 -= 8;
        if (!v640)
          goto LABEL_1218;
      }
    }
    else
    {
      v641 = (uint64_t *)*((_QWORD *)this + 155);
    }
  }
  else
  {
LABEL_1218:
    v641 = (uint64_t *)(v638 + 8 * v590);
  }
  v642 = (uint64_t *)(v638 + 8 * v590);
LABEL_1221:
  while (v641 != v642)
  {
    v643 = v641 + 1;
    llvm::deleteConstant(*v641);
    v641 = v639;
    if (v643 != v639)
    {
      v641 = v643;
      while ((*v641 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v641 == v639)
        {
          v641 = v639;
          goto LABEL_1221;
        }
      }
    }
  }
  v644 = *((_QWORD *)this + 158);
  v645 = *((unsigned int *)this + 320);
  v646 = (uint64_t *)(v644 + 8 * v645);
  if (*((_DWORD *)this + 318))
  {
    if ((_DWORD)v645)
    {
      v647 = 8 * v645;
      v648 = (uint64_t *)*((_QWORD *)this + 158);
      while ((*v648 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v648;
        v647 -= 8;
        if (!v647)
          goto LABEL_1232;
      }
    }
    else
    {
      v648 = (uint64_t *)*((_QWORD *)this + 158);
    }
  }
  else
  {
LABEL_1232:
    v648 = (uint64_t *)(v644 + 8 * v645);
  }
  v649 = (uint64_t *)(v644 + 8 * v645);
LABEL_1235:
  while (v648 != v649)
  {
    v650 = v648 + 1;
    llvm::deleteConstant(*v648);
    v648 = v646;
    if (v650 != v646)
    {
      v648 = v650;
      while ((*v648 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v648 == v646)
        {
          v648 = v646;
          goto LABEL_1235;
        }
      }
    }
  }
  v651 = *((_QWORD *)this + 161);
  v652 = *((unsigned int *)this + 326);
  v653 = (uint64_t *)(v651 + 8 * v652);
  if (*((_DWORD *)this + 324))
  {
    if ((_DWORD)v652)
    {
      v654 = 8 * v652;
      v655 = (uint64_t *)*((_QWORD *)this + 161);
      while ((*v655 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v655;
        v654 -= 8;
        if (!v654)
          goto LABEL_1246;
      }
    }
    else
    {
      v655 = (uint64_t *)*((_QWORD *)this + 161);
    }
  }
  else
  {
LABEL_1246:
    v655 = (uint64_t *)(v651 + 8 * v652);
  }
  v656 = (uint64_t *)(v651 + 8 * v652);
LABEL_1249:
  while (v655 != v656)
  {
    v657 = v655 + 1;
    llvm::deleteConstant(*v655);
    v655 = v653;
    if (v657 != v653)
    {
      v655 = v657;
      while ((*v655 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v655 == v653)
        {
          v655 = v653;
          goto LABEL_1249;
        }
      }
    }
  }
  v658 = *((_QWORD *)this + 192);
  v659 = *((unsigned int *)this + 388);
  v660 = (uint64_t *)(v658 + 8 * v659);
  if (*((_DWORD *)this + 386))
  {
    if ((_DWORD)v659)
    {
      v661 = 8 * v659;
      v662 = (uint64_t *)*((_QWORD *)this + 192);
      while ((*v662 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v662;
        v661 -= 8;
        if (!v661)
          goto LABEL_1260;
      }
    }
    else
    {
      v662 = (uint64_t *)*((_QWORD *)this + 192);
    }
  }
  else
  {
LABEL_1260:
    v662 = (uint64_t *)(v658 + 8 * v659);
  }
  v663 = (uint64_t *)(v658 + 8 * v659);
LABEL_1263:
  while (v662 != v663)
  {
    v664 = *v662;
    if (*v662)
    {
      if (*(char *)(v664 + 71) < 0)
        operator delete(*(void **)(v664 + 48));
      if (*(char *)(v664 + 47) < 0)
        operator delete(*(void **)(v664 + 24));
      llvm::Value::~Value((llvm::Value *)v664, a2);
      MEMORY[0x1CAA32FC0]();
    }
    v665 = v662 + 1;
    v662 = v660;
    if (v665 != v660)
    {
      v662 = v665;
      while ((*v662 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v662 == v660)
        {
          v662 = v660;
          goto LABEL_1263;
        }
      }
    }
  }
  v924 = (unsigned int *)((char *)this + 1216);
  v666 = *((_DWORD *)this + 306);
  if (v666 || *((_DWORD *)this + 307))
  {
    v667 = *((unsigned int *)this + 308);
    if (v667 > 4 * v666 && v667 >= 0x41)
    {
      sub_1C53FF09C(v924, a2);
      if (v666)
      {
        v683 = 1 << (33 - __clz(v666 - 1));
        if (v683 <= 64)
          v684 = 64;
        else
          v684 = v683;
        if (v684 == *((_DWORD *)this + 308))
        {
          *((_QWORD *)this + 153) = 0;
          v685 = (_QWORD *)*((_QWORD *)this + 152);
          v686 = 16 * v684;
          do
          {
            *v685 = -4096;
            v685 += 2;
            v686 -= 16;
          }
          while (v686);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*((_QWORD *)this + 152), 8);
          v912 = (4 * v684 / 3 + 1) | ((unint64_t)(4 * v684 / 3 + 1) >> 1);
          v913 = v912 | (v912 >> 2) | ((v912 | (v912 >> 2)) >> 4);
          LODWORD(v913) = (((v913 | (v913 >> 8)) >> 16) | v913 | (v913 >> 8)) + 1;
          *((_DWORD *)this + 308) = v913;
          v914 = operator new(16 * v913, (std::align_val_t)8uLL);
          *((_QWORD *)this + 152) = v914;
          *((_QWORD *)this + 153) = 0;
          v915 = *((unsigned int *)this + 308);
          if ((_DWORD)v915)
          {
            v916 = 16 * v915;
            do
            {
              *v914 = -4096;
              v914 += 2;
              v916 -= 16;
            }
            while (v916);
          }
        }
      }
      else
      {
        if (!*((_DWORD *)this + 308))
          goto LABEL_1315;
        MEMORY[0x1CAA32FB4](*(_QWORD *)v924, 8);
        *(_QWORD *)v924 = 0;
        *((_QWORD *)this + 153) = 0;
        *((_DWORD *)this + 308) = 0;
      }
    }
    else
    {
      if ((_DWORD)v667)
      {
        v668 = *(_QWORD **)v924;
        v669 = *(_QWORD *)v924 + 16 * v667;
        do
        {
          if (*v668 != -4096)
          {
            if (*v668 != -8192)
            {
              v670 = (llvm::Value *)v668[1];
              v668[1] = 0;
              if (v670)
              {
                llvm::Value::~Value(v670, a2);
                v671 = *((_DWORD *)v670 + 5);
                if ((v671 & 0x40000000) != 0)
                {
                  v678 = (char *)*((_QWORD *)v670 - 1);
                  v676 = (char *)v670 - 8;
                  v677 = v678;
                  v679 = v671 & 0x7FFFFFF;
                  if ((_DWORD)v679)
                  {
                    v680 = 32 * v679;
                    do
                    {
                      v681 = &v677[v680];
                      if (*(_QWORD *)&v677[v680 - 32])
                      {
                        **((_QWORD **)v681 - 2) = *((_QWORD *)v681 - 3);
                        v682 = *((_QWORD *)v681 - 3);
                        if (v682)
                          *(_QWORD *)(v682 + 16) = *((_QWORD *)v681 - 2);
                      }
                      v680 -= 32;
                    }
                    while (v680);
                  }
                  operator delete(v677);
                }
                else
                {
                  v672 = v671 & 0x7FFFFFF;
                  if ((_DWORD)v672)
                  {
                    v673 = (_QWORD **)((char *)v670 - 16);
                    v674 = -32 * v672;
                    do
                    {
                      if (*(v673 - 2))
                      {
                        **v673 = *(v673 - 1);
                        v675 = (uint64_t)*(v673 - 1);
                        if (v675)
                          *(_QWORD *)(v675 + 16) = *v673;
                      }
                      v673 -= 4;
                      v674 += 32;
                    }
                    while (v674);
                  }
                  v676 = (char *)v670 - 32 * v672;
                  if (v671 < 0)
                    v676 = &v676[-*((_QWORD *)v676 - 1) - 8];
                }
                operator delete(v676);
              }
            }
            *v668 = -4096;
          }
          v668 += 2;
        }
        while (v668 != (_QWORD *)v669);
      }
LABEL_1315:
      *((_QWORD *)this + 153) = 0;
    }
  }
  v923 = (unsigned int *)((char *)this + 1312);
  v687 = *((_DWORD *)this + 330);
  if (v687 || *((_DWORD *)this + 331))
  {
    v688 = *((unsigned int *)this + 332);
    if (v688 > 4 * v687 && v688 >= 0x41)
    {
      sub_1C53FF09C(v923, a2);
      if (v687)
      {
        v704 = 1 << (33 - __clz(v687 - 1));
        if (v704 <= 64)
          v705 = 64;
        else
          v705 = v704;
        if (v705 == *((_DWORD *)this + 332))
        {
          *((_QWORD *)this + 165) = 0;
          v706 = (_QWORD *)*((_QWORD *)this + 164);
          v707 = 16 * v705;
          do
          {
            *v706 = -4096;
            v706 += 2;
            v707 -= 16;
          }
          while (v707);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*((_QWORD *)this + 164), 8);
          v917 = (4 * v705 / 3 + 1) | ((unint64_t)(4 * v705 / 3 + 1) >> 1);
          v918 = v917 | (v917 >> 2) | ((v917 | (v917 >> 2)) >> 4);
          LODWORD(v918) = (((v918 | (v918 >> 8)) >> 16) | v918 | (v918 >> 8)) + 1;
          *((_DWORD *)this + 332) = v918;
          v919 = operator new(16 * v918, (std::align_val_t)8uLL);
          *((_QWORD *)this + 164) = v919;
          *((_QWORD *)this + 165) = 0;
          v920 = *((unsigned int *)this + 332);
          if ((_DWORD)v920)
          {
            v921 = 16 * v920;
            do
            {
              *v919 = -4096;
              v919 += 2;
              v921 -= 16;
            }
            while (v921);
          }
        }
      }
      else
      {
        if (!*((_DWORD *)this + 332))
          goto LABEL_1356;
        MEMORY[0x1CAA32FB4](*(_QWORD *)v923, 8);
        *(_QWORD *)v923 = 0;
        *((_QWORD *)this + 165) = 0;
        *((_DWORD *)this + 332) = 0;
      }
    }
    else
    {
      if ((_DWORD)v688)
      {
        v689 = *(_QWORD **)v923;
        v690 = *(_QWORD *)v923 + 16 * v688;
        do
        {
          if (*v689 != -4096)
          {
            if (*v689 != -8192)
            {
              v691 = (llvm::Value *)v689[1];
              v689[1] = 0;
              if (v691)
              {
                llvm::Value::~Value(v691, a2);
                v692 = *((_DWORD *)v691 + 5);
                if ((v692 & 0x40000000) != 0)
                {
                  v699 = (char *)*((_QWORD *)v691 - 1);
                  v697 = (char *)v691 - 8;
                  v698 = v699;
                  v700 = v692 & 0x7FFFFFF;
                  if ((_DWORD)v700)
                  {
                    v701 = 32 * v700;
                    do
                    {
                      v702 = &v698[v701];
                      if (*(_QWORD *)&v698[v701 - 32])
                      {
                        **((_QWORD **)v702 - 2) = *((_QWORD *)v702 - 3);
                        v703 = *((_QWORD *)v702 - 3);
                        if (v703)
                          *(_QWORD *)(v703 + 16) = *((_QWORD *)v702 - 2);
                      }
                      v701 -= 32;
                    }
                    while (v701);
                  }
                  operator delete(v698);
                }
                else
                {
                  v693 = v692 & 0x7FFFFFF;
                  if ((_DWORD)v693)
                  {
                    v694 = (_QWORD **)((char *)v691 - 16);
                    v695 = -32 * v693;
                    do
                    {
                      if (*(v694 - 2))
                      {
                        **v694 = *(v694 - 1);
                        v696 = (uint64_t)*(v694 - 1);
                        if (v696)
                          *(_QWORD *)(v696 + 16) = *v694;
                      }
                      v694 -= 4;
                      v695 += 32;
                    }
                    while (v695);
                  }
                  v697 = (char *)v691 - 32 * v693;
                  if (v692 < 0)
                    v697 = &v697[-*((_QWORD *)v697 - 1) - 8];
                }
                operator delete(v697);
              }
            }
            *v689 = -4096;
          }
          v689 += 2;
        }
        while (v689 != (_QWORD *)v690);
      }
LABEL_1356:
      *((_QWORD *)this + 165) = 0;
    }
  }
  v708 = (unsigned int *)((char *)this + 1336);
  v709 = *((_DWORD *)this + 336);
  if (v709 || *((_DWORD *)this + 337))
  {
    v727 = *((unsigned int *)this + 338);
    if (v727 > 4 * v709 && v727 >= 0x41)
    {
      sub_1C53FF108(v708, a2);
      if (v709)
      {
        v728 = 1 << (33 - __clz(v709 - 1));
        if (v728 <= 64)
          v729 = 64;
        else
          v729 = v728;
        if (v729 == *((_DWORD *)this + 338))
        {
          *((_QWORD *)this + 168) = 0;
          v730 = (_QWORD *)*((_QWORD *)this + 167);
          v731 = 16 * v729;
          do
          {
            *v730 = -4096;
            v730 += 2;
            v731 -= 16;
          }
          while (v731);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*((_QWORD *)this + 167), 8);
          v751 = (4 * v729 / 3 + 1) | ((unint64_t)(4 * v729 / 3 + 1) >> 1);
          v752 = v751 | (v751 >> 2) | ((v751 | (v751 >> 2)) >> 4);
          LODWORD(v752) = (((v752 | (v752 >> 8)) >> 16) | v752 | (v752 >> 8)) + 1;
          *((_DWORD *)this + 338) = v752;
          v753 = operator new(16 * v752, (std::align_val_t)8uLL);
          *((_QWORD *)this + 167) = v753;
          *((_QWORD *)this + 168) = 0;
          v754 = *((unsigned int *)this + 338);
          if ((_DWORD)v754)
          {
            v755 = 16 * v754;
            do
            {
              *v753 = -4096;
              v753 += 2;
              v755 -= 16;
            }
            while (v755);
          }
        }
        goto LABEL_1359;
      }
      if (*((_DWORD *)this + 338))
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v708, 8);
        *((_QWORD *)this + 167) = 0;
        *((_QWORD *)this + 168) = 0;
        *((_DWORD *)this + 338) = 0;
        goto LABEL_1359;
      }
LABEL_1434:
      *((_QWORD *)this + 168) = 0;
      v708 = (unsigned int *)((char *)this + 1336);
      goto LABEL_1359;
    }
    if (!(_DWORD)v727)
      goto LABEL_1434;
    v732 = *(_QWORD **)v708;
    v733 = *(_QWORD *)v708 + 16 * v727;
    while (1)
    {
      if (*v732 == -8192)
        goto LABEL_1414;
      if (*v732 != -4096)
        break;
LABEL_1415:
      v732 += 2;
      if (v732 == (_QWORD *)v733)
        goto LABEL_1434;
    }
    v734 = (llvm::Value *)v732[1];
    v732[1] = 0;
    if (v734)
    {
      llvm::Value::~Value(v734, a2);
      v735 = *((_DWORD *)v734 + 5);
      if ((v735 & 0x40000000) != 0)
      {
        v742 = (char *)*((_QWORD *)v734 - 1);
        v740 = (char *)v734 - 8;
        v741 = v742;
        v743 = v735 & 0x7FFFFFF;
        if ((_DWORD)v743)
        {
          v744 = 32 * v743;
          do
          {
            v745 = &v741[v744];
            if (*(_QWORD *)&v741[v744 - 32])
            {
              **((_QWORD **)v745 - 2) = *((_QWORD *)v745 - 3);
              v746 = *((_QWORD *)v745 - 3);
              if (v746)
                *(_QWORD *)(v746 + 16) = *((_QWORD *)v745 - 2);
            }
            v744 -= 32;
          }
          while (v744);
        }
        operator delete(v741);
      }
      else
      {
        v736 = v735 & 0x7FFFFFF;
        if ((_DWORD)v736)
        {
          v737 = (_QWORD **)((char *)v734 - 16);
          v738 = -32 * v736;
          do
          {
            if (*(v737 - 2))
            {
              **v737 = *(v737 - 1);
              v739 = (uint64_t)*(v737 - 1);
              if (v739)
                *(_QWORD *)(v739 + 16) = *v737;
            }
            v737 -= 4;
            v738 += 32;
          }
          while (v738);
        }
        v740 = (char *)v734 - 32 * v736;
        if (v735 < 0)
          v740 = &v740[-*((_QWORD *)v740 - 1) - 8];
      }
      operator delete(v740);
    }
LABEL_1414:
    *v732 = -4096;
    goto LABEL_1415;
  }
LABEL_1359:
  v925 = (unsigned int *)((char *)this + 1360);
  v710 = *((_DWORD *)this + 342);
  if (!v710 && !*((_DWORD *)this + 343))
    goto LABEL_1442;
  v711 = *((unsigned int *)this + 344);
  if (v711 <= 4 * v710 || v711 < 0x41)
  {
    if ((_DWORD)v711)
    {
      v712 = *(_QWORD **)v925;
      v713 = *(_QWORD *)v925 + 16 * v711;
      do
      {
        if (*v712 != -4096)
        {
          if (*v712 != -8192)
          {
            v714 = (llvm::Value *)v712[1];
            v712[1] = 0;
            if (v714)
            {
              llvm::Value::~Value(v714, a2);
              v715 = *((_DWORD *)v714 + 5);
              if ((v715 & 0x40000000) != 0)
              {
                v722 = (char *)*((_QWORD *)v714 - 1);
                v720 = (char *)v714 - 8;
                v721 = v722;
                v723 = v715 & 0x7FFFFFF;
                if ((_DWORD)v723)
                {
                  v724 = 32 * v723;
                  do
                  {
                    v725 = &v721[v724];
                    if (*(_QWORD *)&v721[v724 - 32])
                    {
                      **((_QWORD **)v725 - 2) = *((_QWORD *)v725 - 3);
                      v726 = *((_QWORD *)v725 - 3);
                      if (v726)
                        *(_QWORD *)(v726 + 16) = *((_QWORD *)v725 - 2);
                    }
                    v724 -= 32;
                  }
                  while (v724);
                }
                operator delete(v721);
              }
              else
              {
                v716 = v715 & 0x7FFFFFF;
                if ((_DWORD)v716)
                {
                  v717 = (_QWORD **)((char *)v714 - 16);
                  v718 = -32 * v716;
                  do
                  {
                    if (*(v717 - 2))
                    {
                      **v717 = *(v717 - 1);
                      v719 = (uint64_t)*(v717 - 1);
                      if (v719)
                        *(_QWORD *)(v719 + 16) = *v717;
                    }
                    v717 -= 4;
                    v718 += 32;
                  }
                  while (v718);
                }
                v720 = (char *)v714 - 32 * v716;
                if (v715 < 0)
                  v720 = &v720[-*((_QWORD *)v720 - 1) - 8];
              }
              operator delete(v720);
            }
          }
          *v712 = -4096;
        }
        v712 += 2;
      }
      while (v712 != (_QWORD *)v713);
    }
    goto LABEL_1441;
  }
  sub_1C53FF09C(v925, a2);
  if (!v710)
  {
    if (*((_DWORD *)this + 344))
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)v925, 8);
      *(_QWORD *)v925 = 0;
      *((_QWORD *)this + 171) = 0;
      *((_DWORD *)this + 344) = 0;
      goto LABEL_1442;
    }
LABEL_1441:
    *((_QWORD *)this + 171) = 0;
    goto LABEL_1442;
  }
  v747 = 1 << (33 - __clz(v710 - 1));
  if (v747 <= 64)
    v748 = 64;
  else
    v748 = v747;
  if (v748 == *((_DWORD *)this + 344))
  {
    *((_QWORD *)this + 171) = 0;
    v749 = (_QWORD *)*((_QWORD *)this + 170);
    v750 = 16 * v748;
    do
    {
      *v749 = -4096;
      v749 += 2;
      v750 -= 16;
    }
    while (v750);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 170), 8);
    v902 = (4 * v748 / 3 + 1) | ((unint64_t)(4 * v748 / 3 + 1) >> 1);
    v903 = v902 | (v902 >> 2) | ((v902 | (v902 >> 2)) >> 4);
    LODWORD(v903) = (((v903 | (v903 >> 8)) >> 16) | v903 | (v903 >> 8)) + 1;
    *((_DWORD *)this + 344) = v903;
    v904 = operator new(16 * v903, (std::align_val_t)8uLL);
    *((_QWORD *)this + 170) = v904;
    *((_QWORD *)this + 171) = 0;
    v905 = *((unsigned int *)this + 344);
    if ((_DWORD)v905)
    {
      v906 = 16 * v905;
      do
      {
        *v904 = -4096;
        v904 += 2;
        v906 -= 16;
      }
      while (v906);
    }
  }
LABEL_1442:
  v756 = (unsigned int *)((char *)this + 1384);
  v757 = *((_DWORD *)this + 348);
  if (v757 || *((_DWORD *)this + 349))
  {
    v758 = *((unsigned int *)this + 350);
    if (v758 > 4 * v757 && v758 >= 0x41)
    {
      sub_1C53FF09C((unsigned int *)this + 346, a2);
      if (v757)
      {
        v894 = 1 << (33 - __clz(v757 - 1));
        if (v894 <= 64)
          v895 = 64;
        else
          v895 = v894;
        if (v895 == *((_DWORD *)this + 350))
        {
          *((_QWORD *)this + 174) = 0;
          v896 = (_QWORD *)*((_QWORD *)this + 173);
          v897 = 16 * v895;
          do
          {
            *v896 = -4096;
            v896 += 2;
            v897 -= 16;
          }
          while (v897);
        }
        else
        {
          MEMORY[0x1CAA32FB4](*((_QWORD *)this + 173), 8);
          v907 = (4 * v895 / 3 + 1) | ((unint64_t)(4 * v895 / 3 + 1) >> 1);
          v908 = v907 | (v907 >> 2) | ((v907 | (v907 >> 2)) >> 4);
          LODWORD(v908) = (((v908 | (v908 >> 8)) >> 16) | v908 | (v908 >> 8)) + 1;
          *((_DWORD *)this + 350) = v908;
          v909 = operator new(16 * v908, (std::align_val_t)8uLL);
          *((_QWORD *)this + 173) = v909;
          *((_QWORD *)this + 174) = 0;
          v910 = *((unsigned int *)this + 350);
          if ((_DWORD)v910)
          {
            v911 = 16 * v910;
            do
            {
              *v909 = -4096;
              v909 += 2;
              v911 -= 16;
            }
            while (v911);
          }
        }
        goto LABEL_1472;
      }
      if (*((_DWORD *)this + 350))
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v756, 8);
        *((_QWORD *)this + 173) = 0;
        *((_QWORD *)this + 174) = 0;
        *((_DWORD *)this + 350) = 0;
        goto LABEL_1472;
      }
    }
    else if ((_DWORD)v758)
    {
      v759 = *(_QWORD **)v756;
      v760 = *(_QWORD *)v756 + 16 * v758;
      do
      {
        if (*v759 != -4096)
        {
          if (*v759 != -8192)
          {
            v761 = (llvm::Value *)v759[1];
            v759[1] = 0;
            if (v761)
            {
              llvm::Value::~Value(v761, a2);
              v762 = *((_DWORD *)v761 + 5);
              if ((v762 & 0x40000000) != 0)
              {
                v769 = (char *)*((_QWORD *)v761 - 1);
                v767 = (char *)v761 - 8;
                v768 = v769;
                v770 = v762 & 0x7FFFFFF;
                if ((_DWORD)v770)
                {
                  v771 = 32 * v770;
                  do
                  {
                    v772 = &v768[v771];
                    if (*(_QWORD *)&v768[v771 - 32])
                    {
                      **((_QWORD **)v772 - 2) = *((_QWORD *)v772 - 3);
                      v773 = *((_QWORD *)v772 - 3);
                      if (v773)
                        *(_QWORD *)(v773 + 16) = *((_QWORD *)v772 - 2);
                    }
                    v771 -= 32;
                  }
                  while (v771);
                }
                operator delete(v768);
              }
              else
              {
                v763 = v762 & 0x7FFFFFF;
                if ((_DWORD)v763)
                {
                  v764 = (_QWORD **)((char *)v761 - 16);
                  v765 = -32 * v763;
                  do
                  {
                    if (*(v764 - 2))
                    {
                      **v764 = *(v764 - 1);
                      v766 = (uint64_t)*(v764 - 1);
                      if (v766)
                        *(_QWORD *)(v766 + 16) = *v764;
                    }
                    v764 -= 4;
                    v765 += 32;
                  }
                  while (v765);
                }
                v767 = (char *)v761 - 32 * v763;
                if (v762 < 0)
                  v767 = &v767[-*((_QWORD *)v767 - 1) - 8];
              }
              operator delete(v767);
            }
          }
          *v759 = -4096;
        }
        v759 += 2;
      }
      while (v759 != (_QWORD *)v760);
    }
    *((_QWORD *)this + 174) = 0;
  }
LABEL_1472:
  v774 = (unsigned int *)((char *)this + 176);
  v775 = *((_DWORD *)this + 46);
  if (v775 || *((_DWORD *)this + 47))
  {
    v776 = *((unsigned int *)this + 48);
    if (v776 > 4 * v775 && v776 >= 0x41)
    {
      sub_1C53FEE04((unsigned int *)this + 44);
      if (v775)
      {
        v777 = 1 << (33 - __clz(v775 - 1));
        if (v777 <= 64)
          v775 = 64;
        else
          v775 = v777;
      }
      if (v775 == *((_DWORD *)this + 48))
      {
        *((_QWORD *)this + 23) = 0;
        if (v775)
        {
          v778 = 24 * v775;
          v779 = (_DWORD *)(*((_QWORD *)this + 22) + 8);
          do
          {
            *v779 = 0;
            *((_QWORD *)v779 - 1) = 0;
            v779 += 6;
            v778 -= 24;
          }
          while (v778);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v774, 8);
        if (v775)
        {
          v864 = (4 * v775 / 3 + 1) | ((unint64_t)(4 * v775 / 3 + 1) >> 1);
          v865 = v864 | (v864 >> 2) | ((v864 | (v864 >> 2)) >> 4);
          LODWORD(v865) = (((v865 | (v865 >> 8)) >> 16) | v865 | (v865 >> 8)) + 1;
          *((_DWORD *)this + 48) = v865;
          v866 = (char *)operator new(24 * v865, (std::align_val_t)8uLL);
          *((_QWORD *)this + 22) = v866;
          *((_QWORD *)this + 23) = 0;
          v867 = *((unsigned int *)this + 48);
          if ((_DWORD)v867)
          {
            v868 = 24 * v867;
            v869 = v866 + 8;
            do
            {
              *v869 = 0;
              *((_QWORD *)v869 - 1) = 0;
              v869 += 6;
              v868 -= 24;
            }
            while (v868);
          }
        }
        else
        {
          *(_QWORD *)v774 = 0;
          *((_QWORD *)this + 23) = 0;
          *((_DWORD *)this + 48) = 0;
        }
      }
      goto LABEL_1500;
    }
    if (!(_DWORD)v776)
    {
LABEL_1499:
      *((_QWORD *)this + 23) = 0;
      goto LABEL_1500;
    }
    v780 = *(_QWORD *)v774;
    v781 = 24 * v776;
    while (2)
    {
      v782 = *(_DWORD *)(v780 + 8);
      if (v782)
      {
LABEL_1488:
        v783 = *(llvm::ValueHandleBase **)(v780 + 16);
        *(_QWORD *)(v780 + 16) = 0;
        if (v783)
        {
          sub_1C5382408(v780 + 16, v783);
          v782 = *(_DWORD *)(v780 + 8);
        }
        if (v782 > 0x40)
        {
          llvm::APInt::reallocate(v780, 0);
          v784 = *(unsigned int *)(v780 + 8);
          if (v784 <= 0x40)
            *(_QWORD *)v780 = 0;
          else
            memcpy(*(void **)v780, 0, ((unint64_t)(v784 + 63) >> 3) & 0x3FFFFFF8);
LABEL_1496:
          v780 += 24;
          v781 -= 24;
          if (!v781)
            goto LABEL_1499;
          continue;
        }
      }
      else
      {
        if (!*(_QWORD *)v780)
          goto LABEL_1496;
        if (*(_QWORD *)v780 != 1)
          goto LABEL_1488;
      }
      break;
    }
    *(_QWORD *)v780 = 0;
    *(_DWORD *)(v780 + 8) = 0;
    goto LABEL_1496;
  }
LABEL_1500:
  v922 = (unsigned int *)((char *)this + 200);
  v785 = *((_DWORD *)this + 52);
  if (v785 || *((_DWORD *)this + 53))
  {
    v786 = *((_DWORD *)this + 54);
    if (v786 > 4 * v785 && v786 >= 0x41)
    {
      sub_1C53FEE90(v922);
      v898 = 1 << (33 - __clz(v785 - 1));
      if (v898 <= 64)
        v898 = 64;
      if (v785)
        v899 = v898;
      else
        v899 = 0;
      if (v899 != *((_DWORD *)this + 54))
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v922, 8);
        if (!v899)
        {
          *(_QWORD *)v922 = 0;
          *((_QWORD *)this + 26) = 0;
          *((_DWORD *)this + 54) = 0;
          goto LABEL_1729;
        }
        v900 = (4 * v899 / 3u + 1) | ((unint64_t)(4 * v899 / 3u + 1) >> 1);
        v901 = v900 | (v900 >> 2) | ((v900 | (v900 >> 2)) >> 4);
        LODWORD(v901) = (((v901 | (v901 >> 8)) >> 16) | v901 | (v901 >> 8)) + 1;
        *((_DWORD *)this + 54) = v901;
        *((_QWORD *)this + 25) = operator new(40 * v901, (std::align_val_t)8uLL);
      }
      sub_1C5382B68((uint64_t *)v922);
    }
    else
    {
      v930 = 2;
      v929 = -1;
      v927 = (uint64_t)&unk_1C866F210;
      v928 = 1;
      llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v927, 1, 0);
      v935 = 2;
      v934 = -1;
      v932 = &unk_1C866F210;
      v933 = 2;
      llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v932, 1, 0);
      v787 = *((unsigned int *)this + 54);
      if ((_DWORD)v787)
      {
        v788 = *((_QWORD *)this + 25);
        v789 = 40 * v787;
        do
        {
          if ((sub_1C47ECB98(v788, (uint64_t)&v926) & 1) == 0)
          {
            if ((sub_1C47ECB98(v788, (uint64_t)v931) & 1) == 0)
              sub_1C5379324((llvm::Value **)(v788 + 32), 0);
            sub_1C4DF91B8((llvm::detail::IEEEFloat *)(v788 + 8), (uint64_t)&v927);
          }
          v788 += 40;
          v789 -= 40;
        }
        while (v789);
      }
      *((_QWORD *)this + 26) = 0;
      if (v932 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74(&v933);
      }
      else if ((v932[2] - 64) <= 0xFFFFFF7F && v933)
      {
        MEMORY[0x1CAA32F9C](v933, 0x1000C8000313F17);
      }
      if ((_UNKNOWN *)v927 != &unk_1C866F1C0)
      {
        v774 = (unsigned int *)((char *)this + 176);
        if ((*(_DWORD *)(v927 + 8) - 64) <= 0xFFFFFF7F && v928)
          MEMORY[0x1CAA32F9C](v928, 0x1000C8000313F17);
        goto LABEL_1518;
      }
      sub_1C4773C74(&v928);
    }
LABEL_1729:
    v774 = (unsigned int *)((char *)this + 176);
  }
LABEL_1518:
  if (*((_DWORD *)this + 355))
  {
    v790 = *((unsigned int *)this + 354);
    if ((_DWORD)v790)
    {
      v791 = 0;
      v792 = 8 * v790;
      do
      {
        v793 = *((_QWORD *)this + 176);
        v794 = *(_QWORD *)(v793 + v791);
        if (v794)
          v795 = v794 == -8;
        else
          v795 = 1;
        if (!v795)
          sub_1C5385F80(v794);
        *(_QWORD *)(v793 + v791) = 0;
        v791 += 8;
      }
      while (v792 != v791);
    }
    *(_QWORD *)((char *)this + 1420) = 0;
  }
  v796 = (_QWORD *)((char *)this + 416);
  v797 = (void **)*((_QWORD *)this + 32);
  for (i = v797; ; ++i)
  {
    v799 = *i;
    if (*i)
    {
      if (v799 == (_QWORD *)-1)
        break;
      if (v799 && ((unint64_t)*i & 1) == 0)
        break;
    }
  }
  v926 = *i;
  for (j = &v797[*((unsigned int *)this + 66)]; ; ++j)
  {
    v802 = (_QWORD *)*j;
    if (*j)
    {
      if (v802 == (_QWORD *)-1)
        break;
      if (v802 && (*j & 1) == 0)
        break;
    }
  }
  while (v799 != v802)
  {
    llvm::FoldingSetIteratorImpl::advance((unint64_t **)&v926);
    MEMORY[0x1CAA32FB4](v799[3], 8);
    operator delete(v799);
    v799 = v926;
  }
  v926 = &v928;
  v927 = 0x800000000;
  v804 = *((unsigned int *)this + 106);
  if (v804 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v926, (uint64_t)&v928, v804, 8);
    LODWORD(v804) = *((_DWORD *)this + 106);
  }
  v805 = *((_QWORD *)this + 52);
  v806 = *((unsigned int *)this + 108);
  v807 = (_QWORD *)(v805 + 16 * v806);
  if ((_DWORD)v804)
  {
    if ((_DWORD)v806)
    {
      v808 = 16 * v806;
      v809 = (_QWORD *)*((_QWORD *)this + 52);
      while ((*v809 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v809 += 2;
        v808 -= 16;
        if (!v808)
          goto LABEL_1553;
      }
    }
    else
    {
      v809 = (_QWORD *)*((_QWORD *)this + 52);
    }
  }
  else
  {
LABEL_1553:
    v809 = (_QWORD *)(v805 + 16 * v806);
  }
  v810 = (_QWORD *)(v805 + 16 * v806);
  if (v809 != v810)
  {
    v811 = v927;
    do
    {
      v812 = v809[1];
      if (v811 >= HIDWORD(v927))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v926, (uint64_t)&v928, v811 + 1, 8);
        v811 = v927;
      }
      *((_QWORD *)v926 + v811) = v812;
      v811 = v927 + 1;
      LODWORD(v927) = v927 + 1;
      v813 = v809 + 2;
      v809 = v807;
      if (v813 != v807)
      {
        v809 = v813;
        while ((*v809 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v809 += 2;
          if (v809 == v807)
          {
            v809 = v807;
            break;
          }
        }
      }
    }
    while (v809 != v810);
    LODWORD(v804) = *((_DWORD *)this + 106);
  }
  if ((_DWORD)v804)
  {
    v870 = *((_DWORD *)this + 108);
    if (v870 > 4 * (int)v804 && v870 >= 0x41)
    {
      v880 = 1 << (33 - __clz(v804 - 1));
      if (v880 <= 64)
        v881 = 64;
      else
        v881 = v880;
      goto LABEL_1687;
    }
    goto LABEL_1673;
  }
  if (!*((_DWORD *)this + 107))
    goto LABEL_1568;
  v870 = *((_DWORD *)this + 108);
  if (v870 <= 0x40)
  {
LABEL_1673:
    if (v870)
    {
      v871 = (_QWORD *)*v796;
      v872 = 16 * v870;
      do
      {
        *v871 = -4096;
        v871 += 2;
        v872 -= 16;
      }
      while (v872);
    }
    *((_QWORD *)this + 53) = 0;
    goto LABEL_1568;
  }
  v881 = 0;
LABEL_1687:
  if (v881 == v870)
  {
    *((_QWORD *)this + 53) = 0;
    v882 = 16 * v870;
    v883 = (_QWORD *)*((_QWORD *)this + 52);
    do
    {
      *v883 = -4096;
      v883 += 2;
      v882 -= 16;
    }
    while (v882);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v796, 8);
    if (v881)
    {
      v884 = (4 * v881 / 3u + 1) | ((unint64_t)(4 * v881 / 3u + 1) >> 1);
      v885 = v884 | (v884 >> 2) | ((v884 | (v884 >> 2)) >> 4);
      LODWORD(v885) = (((v885 | (v885 >> 8)) >> 16) | v885 | (v885 >> 8)) + 1;
      *((_DWORD *)this + 108) = v885;
      v886 = operator new(16 * v885, (std::align_val_t)8uLL);
      *((_QWORD *)this + 52) = v886;
      *((_QWORD *)this + 53) = 0;
      v887 = *((unsigned int *)this + 108);
      if ((_DWORD)v887)
      {
        v888 = 16 * v887;
        do
        {
          *v886 = -4096;
          v886 += 2;
          v888 -= 16;
        }
        while (v888);
      }
    }
    else
    {
      *v796 = 0;
      *((_QWORD *)this + 53) = 0;
      *((_DWORD *)this + 108) = 0;
    }
  }
LABEL_1568:
  v814 = (llvm::MetadataAsValue **)v926;
  if ((_DWORD)v927)
  {
    v815 = 8 * v927;
    do
    {
      if (*v814)
      {
        llvm::MetadataAsValue::~MetadataAsValue(*v814);
        MEMORY[0x1CAA32FC0]();
      }
      ++v814;
      v815 -= 8;
    }
    while (v815);
    v814 = (llvm::MetadataAsValue **)v926;
  }
  if (v814 != (llvm::MetadataAsValue **)&v928)
    free(v814);
  v816 = *((_QWORD *)this + 49);
  v817 = *((unsigned int *)this + 102);
  v818 = (_QWORD *)(v816 + 16 * v817);
  if (*((_DWORD *)this + 100))
  {
    if ((_DWORD)v817)
    {
      v819 = 16 * v817;
      v820 = (_QWORD *)*((_QWORD *)this + 49);
      while ((*v820 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v820 += 2;
        v819 -= 16;
        if (!v819)
          goto LABEL_1581;
      }
    }
    else
    {
      v820 = (_QWORD *)*((_QWORD *)this + 49);
    }
  }
  else
  {
LABEL_1581:
    v820 = (_QWORD *)(v816 + 16 * v817);
  }
  v821 = (_QWORD *)(v816 + 16 * v817);
LABEL_1584:
  while (v820 != v821)
  {
    v822 = v820[1];
    if (v822)
    {
      if ((*(_BYTE *)(v822 + 24) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v822 + 32), 8);
      MEMORY[0x1CAA32FC0](v822, 0x1020C4072C728BCLL);
    }
    v823 = v820 + 2;
    v820 = v818;
    if (v823 != v818)
    {
      v820 = v823;
      while ((*v820 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v820 += 2;
        if (v820 == v818)
        {
          v820 = v818;
          goto LABEL_1584;
        }
      }
    }
  }
  v824 = *((unsigned int *)this + 664);
  v825 = *((_QWORD *)this + 330);
  if ((_DWORD)v824)
  {
    v826 = 32 * v824;
    do
    {
      if ((*(_QWORD *)v825 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(char *)(v825 + 31) < 0)
        operator delete(*(void **)(v825 + 8));
      v825 += 32;
      v826 -= 32;
    }
    while (v826);
    v825 = *((_QWORD *)this + 330);
  }
  MEMORY[0x1CAA32FB4](v825, 8);
  if (*((_DWORD *)this + 655))
  {
    v827 = *((unsigned int *)this + 654);
    if ((_DWORD)v827)
    {
      v828 = 0;
      v829 = 8 * v827;
      do
      {
        v830 = *(_QWORD *)(*((_QWORD *)this + 326) + v828);
        if (v830)
          v831 = v830 == -8;
        else
          v831 = 1;
        if (!v831)
          MEMORY[0x1CAA32FB4]();
        v828 += 8;
      }
      while (v829 != v828);
    }
  }
  free(*((void **)this + 326));
  sub_1C51838C8((uint64_t)this + 2576);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 319), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 316), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 313), 8);
  v832 = *((_DWORD *)this + 624);
  v833 = *((_QWORD *)this + 310);
  if (v832)
  {
    v834 = v833 + 40 * v832;
    do
    {
      if ((*(_QWORD *)v833 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v835 = *(char **)(v833 + 8);
        v836 = *(unsigned int *)(v833 + 16);
        if ((_DWORD)v836)
        {
          v837 = v835 - 8;
          v838 = 16 * v836;
          do
          {
            v839 = *(unsigned __int8 **)&v837[v838];
            if (v839)
              llvm::MetadataTracking::untrack((uint64_t)&v837[v838], v839);
            v838 -= 16;
          }
          while (v838);
          v835 = *(char **)(v833 + 8);
        }
        if (v835 != (char *)(v833 + 24))
          free(v835);
      }
      v833 += 40;
    }
    while (v833 != v834);
    v833 = *((_QWORD *)this + 310);
  }
  MEMORY[0x1CAA32FB4](v833, 8);
  sub_1C51838C8((uint64_t)this + 2448);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 303), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 300), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 297), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 294), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 291), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 288), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 285), 8);
  if (*((_DWORD *)this + 563))
  {
    v840 = *((unsigned int *)this + 562);
    if ((_DWORD)v840)
    {
      v841 = 0;
      v842 = 8 * v840;
      do
      {
        v843 = *(_QWORD *)(*((_QWORD *)this + 280) + v841);
        if (v843)
          v844 = v843 == -8;
        else
          v844 = 1;
        if (!v844)
          MEMORY[0x1CAA32FB4]();
        v841 += 8;
      }
      while (v842 != v841);
    }
  }
  free(*((void **)this + 280));
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 277), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 274), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 271), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 268), 8);
  sub_1C4926AE8((uint64_t)this + 2040);
  v846 = (llvm::Value *)*((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v846)
  {
    llvm::Value::~Value(v846, v845);
    v847 = *((_DWORD *)v846 + 5);
    if ((v847 & 0x40000000) != 0)
    {
      v875 = (char *)*((_QWORD *)v846 - 1);
      v874 = (char *)v846 - 8;
      v873 = v875;
      v876 = v847 & 0x7FFFFFF;
      if ((_DWORD)v876)
      {
        v877 = 32 * v876;
        do
        {
          v878 = &v873[v877];
          if (*(_QWORD *)&v873[v877 - 32])
          {
            **((_QWORD **)v878 - 2) = *((_QWORD *)v878 - 3);
            v879 = *((_QWORD *)v878 - 3);
            if (v879)
              *(_QWORD *)(v879 + 16) = *((_QWORD *)v878 - 2);
          }
          v877 -= 32;
        }
        while (v877);
      }
      operator delete(v873);
      v849 = v874;
    }
    else
    {
      v848 = v847 & 0x7FFFFFF;
      v849 = (char *)v846 - 32 * v848;
      if ((_DWORD)v848)
      {
        v850 = (_QWORD **)((char *)v846 - 16);
        v851 = -32 * v848;
        do
        {
          if (*(v850 - 2))
          {
            **v850 = *(v850 - 1);
            v852 = (uint64_t)*(v850 - 1);
            if (v852)
              *(_QWORD *)(v852 + 16) = *v850;
          }
          v850 -= 4;
          v851 += 32;
        }
        while (v851);
      }
      if (v847 < 0)
        v849 = &v849[-*((_QWORD *)v849 - 1) - 8];
    }
    operator delete(v849);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 192), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 189), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 186), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 183), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 180), 8);
  if (*((_DWORD *)this + 355))
  {
    v889 = *((unsigned int *)this + 354);
    if ((_DWORD)v889)
    {
      v890 = 0;
      v891 = 8 * v889;
      do
      {
        v892 = *(_QWORD *)(*((_QWORD *)this + 176) + v890);
        if (v892 != -8 && v892 != 0)
          sub_1C5385F80(v892);
        v890 += 8;
      }
      while (v891 != v890);
    }
  }
  free(*((void **)this + 176));
  sub_1C53FF09C(v756, v853);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 173), 8);
  sub_1C53FF09C(v925, v854);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 170), 8);
  sub_1C53FF108(v708, v855);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 167), 8);
  sub_1C53FF09C(v923, v856);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 164), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 161), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 158), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 155), 8);
  sub_1C53FF09C(v924, v857);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 152), 8);
  v858 = (void *)*((_QWORD *)this + 149);
  if (v858)
  {
    *((_QWORD *)this + 150) = v858;
    operator delete(v858);
  }
  if (*((_BYTE *)this + 1184))
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 145), 8);
    *((_BYTE *)this + 1184) = 0;
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 142), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 139), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 136), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 133), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 130), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 127), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 124), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 121), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 118), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 115), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 112), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 109), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 106), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 103), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 100), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 97), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 94), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 91), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 88), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 85), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 82), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 79), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 76), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 73), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 70), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 67), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 64), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 61), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 58), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 55), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 52), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 49), 8);
  free(*((void **)this + 34));
  sub_1C4926AE8((uint64_t)this + 296);
  free(*((void **)this + 32));
  free(*((void **)this + 30));
  free(*((void **)this + 28));
  sub_1C53FEE90(v922);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 25), 8);
  sub_1C53FEE04(v774);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 22), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 19), 8);
  v859 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v859)
    MEMORY[0x1CAA32FC0](v859, 0x20C4093837F09);
  v860 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v860)
    (*(void (**)(uint64_t))(*(_QWORD *)v860 + 8))(v860);
  v861 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v861)
  {
    if (*(_BYTE *)(v861 + 56))
    {
      if (*(char *)(v861 + 55) < 0)
        operator delete(*(void **)(v861 + 32));
      *(_BYTE *)(v861 + 56) = 0;
    }
    v862 = *(_QWORD *)(v861 + 24);
    *(_QWORD *)(v861 + 24) = 0;
    if (v862)
      (*(void (**)(uint64_t))(*(_QWORD *)v862 + 8))(v862);
    if (*(_BYTE *)(v861 + 16))
    {
      llvm::Regex::~Regex((llvm::Regex *)v861);
      *(_BYTE *)(v861 + 16) = 0;
    }
    MEMORY[0x1CAA32FC0](v861, 0x1032C409CCD290BLL);
  }
  v863 = (void *)*((_QWORD *)this + 1);
  if (v863 != *(void **)this)
    free(v863);
}

void llvm::LLVMContextImpl::dropTriviallyDeadConstantArrays(llvm::LLVMContextImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v16 = 1;
  v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v18 = v17;
  v19 = v21;
  v20 = 0x400000000;
  v1 = *((_QWORD *)this + 155);
  v2 = *((unsigned int *)this + 314);
  v3 = (_QWORD *)(v1 + 8 * v2);
  if (*((_DWORD *)this + 312))
  {
    if ((_DWORD)v2)
    {
      v4 = 8 * v2;
      v5 = (_QWORD *)*((_QWORD *)this + 155);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = (_QWORD *)*((_QWORD *)this + 155);
    }
  }
  else
  {
LABEL_6:
    v5 = (_QWORD *)(v1 + 8 * v2);
  }
  v6 = (_QWORD *)(v1 + 8 * v2);
  if (v5 != v6)
  {
    do
    {
      v15 = 0;
      v15 = (_QWORD *)*v5;
      if (!v15[1])
        sub_1C61ABE04((uint64_t)&v16, (uint64_t *)&v15);
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
    }
    while (v5 != v6);
    for (i = v20; (_DWORD)v20; i = v20)
    {
      while (1)
      {
        v9 = *((_QWORD *)v19 + i - 1);
        v15 = 0;
        if (sub_1C6154170((uint64_t)&v16, v9, &v15))
        {
          *v15 = -8192;
          LODWORD(v16) = v16 - 2;
          ++HIDWORD(v16);
        }
        i = v20 - 1;
        LODWORD(v20) = v20 - 1;
        if (!*(_QWORD *)(v9 + 8))
          break;
        if (!i)
          goto LABEL_34;
      }
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x40000000) != 0)
      {
        v12 = *(_QWORD *)(v9 - 8);
        v11 = v10 & 0x7FFFFFF;
        if (v11)
        {
LABEL_27:
          v13 = 32 * v11;
          do
          {
            v14 = *(_QWORD **)v12;
            if (*(_BYTE *)(*(_QWORD *)v12 + 16) != 8)
              v14 = 0;
            v15 = v14;
            if (v14)
              sub_1C61ABE04((uint64_t)&v16, (uint64_t *)&v15);
            v12 += 32;
            v13 -= 32;
          }
          while (v13);
        }
      }
      else
      {
        v11 = v10 & 0x7FFFFFF;
        v12 = v9 - 32 * v11;
        if (v11)
          goto LABEL_27;
      }
      llvm::Constant::destroyConstant((int32x2_t ****)v9);
    }
  }
LABEL_34:
  if (v19 != v21)
    free(v19);
  if ((v16 & 1) == 0)
    MEMORY[0x1CAA32FB4](v17.i64[0], 8);
}

unint64_t llvm::MDNodeOpsKey::calculateHash(llvm::MDNodeOpsKey *this, llvm::MDNode *a2)
{
  return sub_1C53FF16C((uint64_t)this + 8 * a2 + -8 * *((unsigned int *)this + 2), (uint64_t)this);
}

unint64_t llvm::MDNodeOpsKey::calculateHash(_QWORD *a1, uint64_t a2)
{
  return sub_1C53831BC(a1, (uint64_t)&a1[a2]);
}

_QWORD *llvm::LLVMContextImpl::getOrInsertBundleTag(_DWORD *a1, unsigned __int8 *a2, size_t a3)
{
  int v5;
  unsigned int v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD **i;
  int v27;

  v5 = a1[647];
  v6 = a1[646];
  if (!v6)
  {
    *(_QWORD *)(a1 + 647) = 0;
    v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v21[16] = 2;
    *((_QWORD *)a1 + 322) = v21;
    v6 = 16;
    a1[646] = 16;
  }
  v27 = v5;
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *((_QWORD *)a1 + 322);
  v12 = v6 - 1;
  v13 = v11 + 8 * v6 + 8;
  v14 = -1;
  v15 = 1;
  v16 = v7;
  while (1)
  {
    v17 = v16 & v12;
    v18 = *(_QWORD **)(v11 + 8 * v17);
    if (!v18)
      break;
    if (v18 == (_QWORD *)-8)
    {
      if (v14 == -1)
        v14 = v16 & v12;
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7
           && a3 == *v18
           && (!a3 || !memcmp(a2, (char *)v18 + a1[649], a3)))
    {
      goto LABEL_17;
    }
    v16 = v15 + v17;
    ++v15;
  }
  v19 = v14;
  if (v14 == -1)
  {
    v19 = v17;
    v17 = v17;
  }
  else
  {
    v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  v18 = *(_QWORD **)(v11 + 8 * v17);
LABEL_17:
  if (v18)
  {
    if (v18 != (_QWORD *)-8)
      return v18;
    --a1[648];
  }
  v22 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = v22 + 16;
  if (a3)
    memcpy(v22 + 16, a2, a3);
  v24[a3] = 0;
  *(_QWORD *)v23 = a3;
  *((_DWORD *)v23 + 2) = v27;
  *(_QWORD *)(v11 + 8 * v17) = v23;
  ++a1[647];
  for (i = (_QWORD **)(*((_QWORD *)a1 + 322)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 644), v17)); ; ++i)
  {
    v18 = *i;
    if (*i && v18 + 1 != 0)
      break;
  }
  return v18;
}

void llvm::LLVMContextImpl::getOperandBundleTags(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  BOOL v13;

  sub_1C53F8EE0((uint64_t)a2, *(unsigned int *)(a1 + 2588));
  v4 = *(unsigned int *)(a1 + 2584);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(a1 + 2576); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(a1 + 2576);
  }
  v7 = *(_QWORD *)(a1 + 2576) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    v8 = *i;
    do
    {
      v9 = v8 + 2;
      v10 = (uint64_t *)*v8;
      v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *v11 = v9;
      v11[1] = v10;
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 + 1 == 0;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

uint64_t llvm::LLVMContextImpl::getOrInsertSyncScopeID(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  char v4[8];

  v4[0] = *(_DWORD *)(a1 + 2620);
  return *(unsigned __int8 *)(*sub_1C53FF564((llvm::StringMapImpl *)(a1 + 2608), a2, a3, v4) + 8);
}

void llvm::LLVMContextImpl::getSyncScopeNames(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  BOOL v13;

  sub_1C53F8EE0((uint64_t)a2, *(unsigned int *)(a1 + 2620));
  v4 = *(unsigned int *)(a1 + 2616);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(a1 + 2608); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(a1 + 2608);
  }
  v7 = *(_QWORD *)(a1 + 2608) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    v8 = *i;
    do
    {
      v9 = v8 + 2;
      v10 = (uint64_t *)*v8;
      v11 = (uint64_t **)(*a2 + 16 * *((unsigned __int8 *)v8 + 8));
      *v11 = v9;
      v11[1] = v10;
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 + 1 == 0;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

uint64_t llvm::LLVMContextImpl::getOptPassGate(llvm::LLVMContextImpl *this)
{
  uint64_t v1;
  llvm::LLVMContextImpl *v4;

  v1 = *((_QWORD *)this + 334);
  if (!v1)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
    {
      v4 = this;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
      this = v4;
    }
    v1 = llvm::OptBisector;
    *((_QWORD *)this + 334) = llvm::OptBisector;
  }
  return v1;
}

uint64_t llvm::LLVMContextImpl::setOptPassGate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 2672) = a2;
  return result;
}

BOOL llvm::LLVMContextImpl::getOpaquePointers(llvm::LLVMContextImpl *this)
{
  int v2;

  if (*((_BYTE *)this + 2681))
  {
    v2 = *((unsigned __int8 *)this + 2680);
  }
  else if (getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT"))
  {
    *((_WORD *)this + 1340) = 257;
    v2 = 1;
  }
  else
  {
    v2 = byte_1ED8307D8;
    *((_BYTE *)this + 2680) = byte_1ED8307D8;
    *((_BYTE *)this + 2681) = 1;
  }
  return v2 != 0;
}

uint64_t *sub_1C53FED30(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_BYTE *)(v3 + 16) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 + 24), 8);
      MEMORY[0x1CAA32FC0](v3, 0x1020C408B843D01);
    }
  }
  return a1;
}

uint64_t *sub_1C53FED8C(uint64_t *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_1C53FED30(a1 + 2);
  return a1;
}

uint64_t sub_1C53FEDC4(uint64_t a1)
{
  void *v2;

  llvm::DIArgList::untrack(a1);
  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  sub_1C53FED30((uint64_t *)(a1 + 16));
  return a1;
}

void sub_1C53FEE04(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  llvm::ValueHandleBase **v3;
  unsigned int v4;
  llvm::ValueHandleBase *v5;
  uint64_t v6;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = (llvm::ValueHandleBase **)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *((_DWORD *)v3 - 2);
      if (v4 || (unint64_t)*(v3 - 2) >= 2)
      {
        v5 = *v3;
        *v3 = 0;
        if (v5)
        {
          sub_1C5382408((int)v3, v5);
          v4 = *((_DWORD *)v3 - 2);
        }
        if (v4 >= 0x41)
        {
          v6 = (uint64_t)*(v3 - 2);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
}

void sub_1C53FEE90(unsigned int *a1)
{
  uint64_t v2;
  llvm::Value **v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  _DWORD *v7;
  uint64_t v8;
  int v9;
  char v10;
  _BYTE v11[8];
  _DWORD *v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1[4])
  {
    v15 = 2;
    v14 = -1;
    v12 = &unk_1C866F210;
    v13 = 1;
    llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v12, 1, 0);
    v10 = 2;
    v9 = -1;
    v7 = &unk_1C866F210;
    v8 = 2;
    llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v7, 1, 0);
    v2 = a1[4];
    if ((_DWORD)v2)
    {
      v3 = (llvm::Value **)(*(_QWORD *)a1 + 16);
      v4 = 40 * v2;
      do
      {
        if ((sub_1C47ECB98((uint64_t)(v3 - 2), (uint64_t)v11) & 1) == 0
          && (sub_1C47ECB98((uint64_t)(v3 - 2), (uint64_t)v6) & 1) == 0)
        {
          sub_1C5379324(v3 + 2, 0);
        }
        v5 = (uint64_t)*(v3 - 1);
        if ((_UNKNOWN *)v5 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)v3);
        }
        else if ((*(_DWORD *)(v5 + 8) - 64) <= 0xFFFFFF7F && *v3)
        {
          MEMORY[0x1CAA32F9C](*v3, 0x1000C8000313F17);
        }
        v3 += 5;
        v4 -= 40;
      }
      while (v4);
    }
    if (v7 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v8);
    }
    else if ((v7[2] - 64) <= 0xFFFFFF7F && v8)
    {
      MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
    }
    if (v12 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v13);
    }
    else if ((v12[2] - 64) <= 0xFFFFFF7F)
    {
      if (v13)
        MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    }
  }
}

void sub_1C53FF09C(unsigned int *a1, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Value **v4;
  uint64_t v5;
  llvm::Value *v6;
  _DWORD *v7;
  llvm::Value **v8;
  uint64_t v9;

  v2 = a1[4];
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = (llvm::Value **)(*(_QWORD *)a1 + 8);
    do
    {
      v5 = (uint64_t)*(v4 - 1);
      if (v5 != -4096 && v5 != -8192)
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          v8 = v4;
          v9 = v3;
          llvm::Value::~Value(v6, a2);
          llvm::User::operator delete(v7);
          v4 = v8;
          v3 = v9;
        }
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

void sub_1C53FF108(unsigned int *a1, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Value **v4;
  llvm::Value *v5;
  _DWORD *v6;

  v2 = a1[4];
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = (llvm::Value **)(*(_QWORD *)a1 + 8);
    do
    {
      if (((unint64_t)*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          llvm::Value::~Value(v5, a2);
          llvm::User::operator delete(v6);
        }
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

unint64_t sub_1C53FF16C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v3 & 1) == 0)
  {
    v42 = a1;
    v43 = __cxa_guard_acquire(&qword_1ED7EAC88);
    a1 = v42;
    if (v43)
    {
      v44 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v44 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v44;
      __cxa_guard_release(&qword_1ED7EAC88);
      a1 = v42;
    }
  }
  v4 = qword_1ED7EAC80;
  if (a1 == a2)
  {
    v6 = 0;
    return sub_1C49CE808(&v47, v6, v4);
  }
  else
  {
    for (i = 0; i <= 0x38; i += 8)
    {
      v6 = i + 8;
      *(uint64_t *)((char *)&v47 + i) = *(_QWORD *)(a1 + i);
      v7 = a1 + i + 8;
      if (v7 == a2)
        return sub_1C49CE808(&v47, v6, v4);
    }
    v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v10 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    v11 = v4 ^ (v4 >> 47);
    v12 = v4 ^ (((0x9DDFEA08EB382D69 * (v11 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v11 ^ (0xB492B66FBE98F273 * v4)));
    v13 = v10 + v4;
    v14 = v52 + v10 - 0x4B6D499041670D8DLL * __ROR8__(v53 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    v15 = v47 - 0x6D8ED9027DD26057 * v4;
    v16 = v11 + v15;
    v17 = v15 + v48 + v49;
    v18 = __ROR8__(v17, 44) + v15;
    v19 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v12) ^ ((0x9DDFEA08EB382D69 * v12) >> 47));
    v20 = (0xB492B66FBE98F273 * __ROR8__(v13 + v48, 37)) ^ v19;
    v21 = v18 + __ROR8__(v20 + v16 + v50, 21);
    v22 = __ROR8__(v11 - 0x622015F714C7D297 * (v9 ^ (v9 >> 47)), 33);
    v23 = 0xB492B66FBE98F273 * v22;
    v24 = v19 + v51 - 0x4B6D499041670D8DLL * v22;
    v25 = v17 + v50;
    v26 = __ROR8__(v52 + v53 + v24, 44) + v24 + __ROR8__(v14 + v49 + v54 + v24, 21);
    v27 = v52 + v53 + v24 + v54;
    v28 = a1 + i;
    v29 = 64;
    if (a1 + i != a2)
    {
      do
      {
        v30 = 0;
        v31 = v20;
        do
        {
          v32 = v30 + 8;
          v33 = v28 + v30 + 8;
          *(uint64_t *)((char *)&v47 + v30) = *(_QWORD *)(v28 + v30);
          if (v33 == a2)
            break;
          v34 = v30 >= 0x31;
          v30 += 8;
        }
        while (!v34);
        if ((v32 & 0x7FFFFFFFFFFFFFB8) != 0)
        {
          v45 = v20;
          v46 = v21;
          sub_1C4E37E60(&v47, (_BYTE *)&v47 + v32, &v55);
          v31 = v45;
          v21 = v46;
        }
        v35 = v14 + v23 + v25 + v48;
        v14 = v52 + v25 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v14 + v53, 42);
        v36 = v47 - 0x4B6D499041670D8DLL * v21;
        v20 = (0xB492B66FBE98F273 * __ROR8__(v35, 37)) ^ v26;
        v21 = __ROR8__(v36 + v48 + v49, 44) + v36 + __ROR8__(v20 + v27 + v36 + v50, 21);
        v28 += v32;
        v23 = 0xB492B66FBE98F273 * __ROR8__(v27 + v31, 33);
        v37 = v23 + v26 + v51;
        v25 = v36 + v48 + v49 + v50;
        v26 = __ROR8__(v52 + v53 + v37, 44) + v37 + __ROR8__(v14 + v49 + v37 + v54, 21);
        v27 = v52 + v53 + v37 + v54;
        v29 += v32;
      }
      while (v33 != a2);
    }
    v38 = 0x9DDFEA08EB382D69
        * (v27 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v27)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v27)));
    v39 = v20 - 0x4B6D499041670D8DLL * (v14 ^ (v14 >> 47)) - 0x622015F714C7D297 * (v38 ^ (v38 >> 47));
    v40 = 0x9DDFEA08EB382D69
        * (v26 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v26)));
    v41 = v23 - 0x4B6D499041670D8DLL * (v29 ^ (v29 >> 47)) - 0x622015F714C7D297 * (v40 ^ (v40 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v41 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v41 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v41)))) >> 47));
  }
}

_QWORD *sub_1C53FF564(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, char *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *i;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v27;
  char *v28;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v27 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v27)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v27[16] = 2;
    *(_QWORD *)a1 = v27;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v28 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_17:
  i = (_QWORD *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v22 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = v22 + 16;
  if (__n)
    memcpy(v22 + 16, a2, __n);
  v24[__n] = 0;
  *(_QWORD *)v23 = __n;
  v23[8] = *v28;
  *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C53FF774()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Use opaque pointers";
  *((_QWORD *)&v3 + 1) = 19;
  v1 = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED830758, "opaque-pointers", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830758, &dword_1C475E000);
}

llvm::MDString *llvm::LLVMRemarkStreamer::toRemark@<X0>(const char **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const llvm::DiagnosticInfoOptimizationBase *v4;
  int v6;
  int v7;
  const char *v8;
  size_t v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  llvm::MDString *result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t String;
  const llvm::DiagnosticInfoOptimizationBase *v47;
  uint64_t v48;

  v4 = (const llvm::DiagnosticInfoOptimizationBase *)a1;
  v6 = 0;
  *(_QWORD *)(a2 + 104) = a2 + 120;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 112) = 0x500000000;
  v7 = *((_DWORD *)a1 + 2) - 9;
  if (v7 <= 8)
    v6 = dword_1C8650E10[v7];
  *(_DWORD *)a2 = v6;
  v8 = a1[5];
  if (v8)
    v9 = strlen(a1[5]);
  else
    v9 = 0;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 24) = *((_OWORD *)v4 + 3);
  v10 = (uint64_t ***)*((_QWORD *)v4 + 2);
  if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
  {
    v21 = 0;
    v20 = &byte_1C871356D;
    goto LABEL_17;
  }
  v11 = ***v10;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  if (!(_DWORD)v13)
    goto LABEL_13;
  LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
  v15 = (uint64_t ****)(v12 + 16 * v14);
  v16 = *v15;
  if (*v15 != v10)
  {
    v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(uint64_t ****)(v12 + 16 * v14);
      if (v16 == v10)
      {
        v15 = (uint64_t ****)(v12 + 16 * v14);
        goto LABEL_14;
      }
    }
LABEL_13:
    v15 = (uint64_t ****)(v12 + 16 * v13);
  }
LABEL_14:
  v19 = v15[1];
  v22 = (unint64_t)*v19;
  v20 = (char *)(v19 + 2);
  v21 = v22;
  if (v22 && *v20 == 1)
  {
    --v21;
    v20 = (char *)v15[1] + 17;
  }
LABEL_17:
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v21;
  v23 = *((_QWORD *)v4 + 3);
  if (v23)
  {
    v8 = (const char *)*((_QWORD *)v4 + 4);
    result = *(llvm::MDString **)(v23 - 8 * *(unsigned int *)(v23 + 8));
    if (result)
      result = (llvm::MDString *)llvm::MDString::getString(result);
    else
      a1 = 0;
    v21 = (unint64_t)v8 >> 32;
    LOBYTE(v23) = 1;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = a1;
  *(_DWORD *)(a2 + 72) = (_DWORD)v8;
  *(_DWORD *)(a2 + 76) = v21;
  *(_BYTE *)(a2 + 80) = v23;
  *(_OWORD *)(a2 + 88) = *((_OWORD *)v4 + 4);
  v25 = *((unsigned int *)v4 + 22);
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = 0;
    v28 = *((_QWORD *)v4 + 10);
    v29 = v25 << 6;
    do
    {
      v30 = v28 + v26;
      sub_1C624095C(a2 + 104);
      v31 = *(_BYTE *)(v28 + v26 + 23);
      v32 = v31 < 0;
      v33 = *(_QWORD *)(v28 + v26);
      v34 = *(_QWORD *)(v28 + v26 + 8);
      if (v31 >= 0)
        v33 = v28 + v26;
      v35 = v31 & 0x7F;
      if (!v32)
        v34 = v35;
      v36 = *(unsigned int *)(a2 + 112);
      v37 = *(_QWORD *)(a2 + 104) + (v36 << 6);
      *(_QWORD *)(v37 - 64) = v33;
      *(_QWORD *)(v37 - 56) = v34;
      v40 = *(_QWORD *)(v30 + 24);
      v39 = v30 + 24;
      v38 = v40;
      v41 = *(_BYTE *)(v39 + 23);
      v42 = v41;
      if (v41 >= 0)
        v38 = v39;
      v43 = v41 & 0x7F;
      if (v42 < 0)
        v43 = *(_QWORD *)(v39 + 8);
      v44 = *(_QWORD *)(a2 + 104) + (v36 << 6);
      *(_QWORD *)(v44 - 48) = v38;
      *(_QWORD *)(v44 - 40) = v43;
      v45 = *(_QWORD *)(v39 + 24);
      if (v45)
      {
        String = *(_QWORD *)(v45 - 8 * *(unsigned int *)(v45 + 8));
        if (String)
        {
          String = llvm::MDString::getString((llvm::MDString *)String);
          v4 = v47;
          v36 = *(unsigned int *)(a2 + 112);
        }
        else
        {
          v4 = 0;
        }
        v3 = *(_QWORD *)(v28 + v26 + 56);
        v27 = String >> 8;
        LOBYTE(v45) = 1;
      }
      else
      {
        LOBYTE(String) = 0;
      }
      v48 = *(_QWORD *)(a2 + 104) + (v36 << 6);
      result = (llvm::MDString *)(String | (v27 << 8));
      *(_QWORD *)(v48 - 32) = result;
      *(_QWORD *)(v48 - 24) = v4;
      *(_QWORD *)(v48 - 16) = v3;
      *(_BYTE *)(v48 - 8) = v45;
      v26 += 64;
    }
    while (v29 != v26);
  }
  return result;
}

void llvm::setupLLVMOptimizationRemarks(uint64_t *a1@<X0>, std::string::value_type *a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  const std::error_category *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Regex *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Regex *v35;
  std::string *v36;
  uint64_t v37;
  const std::error_category *v38;
  char *v39[2];
  char v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v17 = *a1;
  if (a8)
    *(_BYTE *)(v17 + 81) = 1;
  *(_QWORD *)(v17 + 88) = a10;
  *(_QWORD *)(v17 + 96) = a11;
  if (!a3)
  {
    *(_BYTE *)(a9 + 8) &= ~1u;
    *(_QWORD *)a9 = 0;
    return;
  }
  llvm::remarks::parseFormat(a6, a7, (uint64_t)&v44);
  v18 = v45;
  if ((v45 & 1) == 0)
  {
    LODWORD(v19) = (_DWORD)v44;
LABEL_14:
    LODWORD(v37) = 0;
    v38 = std::system_category();
    if ((_DWORD)v19 == 1)
      v21 = 3;
    else
      v21 = 0;
    v22 = (std::string *)operator new();
    v36 = llvm::ToolOutputFile::ToolOutputFile(v22, a2, (std::string::size_type)a3, (uint64_t)&v37, v21);
    if ((_DWORD)v37)
    {
      v25 = v37;
      v26 = v38;
      v27 = operator new();
      *(_QWORD *)v27 = &off_1E81A0D28;
      *(_QWORD *)(v27 + 8) = v25;
      *(_QWORD *)(v27 + 16) = v26;
      v24 = operator new();
      *(_QWORD *)v24 = off_1E8168130;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_DWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = std::system_category();
      v41 = (char *)v24;
      v42 = (char *)v27;
      sub_1C6240AD0(v39, &v42, (uint64_t *)&v41);
      if (v42)
        (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
      *(_QWORD *)v24 = off_1E81680E0;
    }
    else
    {
      llvm::remarks::createRemarkSerializer((int)v19);
      v23 = v42;
      if ((v43 & 1) == 0 || !v42)
      {
        v28 = operator new();
        v41 = v23;
        v39[0] = a2;
        v39[1] = a3;
        v40 = 1;
        v35 = (llvm::Regex *)llvm::remarks::RemarkStreamer::RemarkStreamer(v28, (uint64_t *)&v41, (uint64_t)v39);
        if (v41)
          (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
        llvm::LLVMContext::setMainRemarkStreamer(a1, (uint64_t *)&v35);
        v29 = v35;
        if (v35)
        {
          if (*((_BYTE *)v35 + 56))
          {
            if (*((char *)v35 + 55) < 0)
              operator delete(*((void **)v35 + 4));
            *((_BYTE *)v29 + 56) = 0;
          }
          v30 = *((_QWORD *)v29 + 3);
          *((_QWORD *)v29 + 3) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (*((_BYTE *)v29 + 16))
          {
            llvm::Regex::~Regex(v29);
            *((_BYTE *)v29 + 16) = 0;
          }
          MEMORY[0x1CAA32FC0](v29, 0x1032C409CCD290BLL);
        }
        v31 = *(_QWORD *)(*a1 + 64);
        v32 = (_QWORD *)operator new();
        *v32 = v31;
        v33 = *(_QWORD *)(*a1 + 128);
        *(_QWORD *)(*a1 + 128) = v32;
        if (v33)
          MEMORY[0x1CAA32FC0](v33, 0x20C4093837F09);
        if (!a5 || (llvm::remarks::RemarkStreamer::setFilter(*(_QWORD *)(*a1 + 64), a4, a5, &v41), !v41))
        {
          *(_BYTE *)(a9 + 8) &= ~1u;
          *(_QWORD *)a9 = v22;
          if ((v18 & 1) == 0)
            return;
          goto LABEL_9;
        }
        v34 = operator new();
        v39[0] = v41;
        v41 = 0;
        *(_QWORD *)sub_1C540066C(v34, v39) = off_1E8168180;
        if (v39[0])
          (*(void (**)(char *))(*(_QWORD *)v39[0] + 8))(v39[0]);
        *(_BYTE *)(a9 + 8) |= 1u;
        *(_QWORD *)a9 = v34;
        if (v41)
          (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
LABEL_26:
        v36 = 0;
        sub_1C49C7E54((uint64_t)&v36, v22);
        if ((v45 & 1) == 0)
          return;
        goto LABEL_9;
      }
      v24 = operator new();
      v39[0] = v23;
      *(_QWORD *)sub_1C5400358(v24, v39) = off_1E8168040;
      if (v39[0])
        (*(void (**)(char *))(*(_QWORD *)v39[0] + 8))(v39[0]);
    }
    *(_BYTE *)(a9 + 8) |= 1u;
    *(_QWORD *)a9 = v24;
    goto LABEL_26;
  }
  v19 = v44;
  v44 = 0;
  if (!v19)
    goto LABEL_14;
  v20 = operator new();
  v39[0] = v19;
  *(_QWORD *)sub_1C5400358(v20, v39) = off_1E8168040;
  if (v39[0])
    (*(void (**)(char *))(*(_QWORD *)v39[0] + 8))(v39[0]);
  *(_BYTE *)(a9 + 8) |= 1u;
  *(_QWORD *)a9 = v20;
LABEL_9:
  if (v44)
    (*(void (**)(char *))(*(_QWORD *)v44 + 8))(v44);
}

void llvm::setupLLVMOptimizationRemarks(uint64_t *a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Regex *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Regex *v26;
  char *v27[2];
  char v28;
  char *v29;
  char *v30;
  char v31;
  char *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  if (a6)
    *(_BYTE *)(v13 + 81) = 1;
  *(_QWORD *)(v13 + 88) = a8;
  *(_QWORD *)(v13 + 96) = a9;
  llvm::remarks::parseFormat(a4, a5, (uint64_t)&v32);
  v14 = v33;
  if ((v33 & 1) != 0)
  {
    v15 = v32;
    v32 = 0;
    if (v15)
    {
      v16 = operator new();
      v27[0] = v15;
      *(_QWORD *)sub_1C5400358(v16, v27) = off_1E8168040;
      if (v27[0])
        (*(void (**)(char *))(*(_QWORD *)v27[0] + 8))(v27[0]);
      *a7 = v16;
LABEL_8:
      if (v32)
        (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
      return;
    }
    v17 = 0;
  }
  else
  {
    v17 = (int)v32;
  }
  llvm::remarks::createRemarkSerializer(v17);
  if ((v31 & 1) != 0 && v30)
  {
    v18 = operator new();
    v27[0] = v30;
    *(_QWORD *)sub_1C5400358(v18, v27) = off_1E8168040;
    if (v27[0])
      (*(void (**)(char *))(*(_QWORD *)v27[0] + 8))(v27[0]);
    *a7 = v18;
  }
  else
  {
    v19 = operator new();
    v29 = v30;
    LOBYTE(v27[0]) = 0;
    v28 = 0;
    v26 = (llvm::Regex *)llvm::remarks::RemarkStreamer::RemarkStreamer(v19, (uint64_t *)&v29, (uint64_t)v27);
    if (v29)
      (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
    llvm::LLVMContext::setMainRemarkStreamer(a1, (uint64_t *)&v26);
    v20 = v26;
    if (v26)
    {
      if (*((_BYTE *)v26 + 56))
      {
        if (*((char *)v26 + 55) < 0)
          operator delete(*((void **)v26 + 4));
        *((_BYTE *)v20 + 56) = 0;
      }
      v21 = *((_QWORD *)v20 + 3);
      *((_QWORD *)v20 + 3) = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (*((_BYTE *)v20 + 16))
      {
        llvm::Regex::~Regex(v20);
        *((_BYTE *)v20 + 16) = 0;
      }
      MEMORY[0x1CAA32FC0](v20, 0x1032C409CCD290BLL);
    }
    v22 = *(_QWORD *)(*a1 + 64);
    v23 = (_QWORD *)operator new();
    *v23 = v22;
    v24 = *(_QWORD *)(*a1 + 128);
    *(_QWORD *)(*a1 + 128) = v23;
    if (v24)
      MEMORY[0x1CAA32FC0](v24, 0x20C4093837F09);
    if (a3 && (llvm::remarks::RemarkStreamer::setFilter(*(_QWORD *)(*a1 + 64), a2, a3, &v29), v29))
    {
      v25 = operator new();
      v27[0] = v29;
      v29 = 0;
      *(_QWORD *)sub_1C540066C(v25, v27) = off_1E8168180;
      if (v27[0])
        (*(void (**)(char *))(*(_QWORD *)v27[0] + 8))(v27[0]);
      *a7 = v25;
      if (v29)
        (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
    }
    else
    {
      *a7 = 0;
    }
  }
  if ((v14 & 1) != 0)
    goto LABEL_8;
}

uint64_t sub_1C5400274(uint64_t a1)
{
  __int128 *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[4];

  memset(v9, 0, sizeof(v9));
  v2 = (__int128 *)sub_1C54002E4(a1, (unint64_t)v9, 1);
  v3 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[3];
  v3[2] = v2[2];
  v3[3] = v6;
  *v3 = v4;
  v3[1] = v5;
  v7 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + (v7 << 6) - 64;
}

unint64_t sub_1C54002E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + (v4 << 6);
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 64);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 64);
    }
  }
  return v3;
}

uint64_t sub_1C5400358(uint64_t a1, char **a2)
{
  char *v4;
  uint64_t v6;
  char *v7;
  char *v8;

  *(_QWORD *)a1 = off_1E8168090;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = std::system_category();
  v4 = *a2;
  *a2 = 0;
  v6 = a1;
  v7 = v4;
  sub_1C6240AD0(&v8, &v7, &v6);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sub_1C54003D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C540040C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5400458(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5400494(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168090;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54004E0(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v7, a2);
  v4 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v7;
  *(_QWORD *)(a1 + 24) = v8;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v6;
  return result;
}

uint64_t sub_1C540055C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168130;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5400598(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168130;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54005E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168130;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5400620(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8168130;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C540066C(uint64_t a1, char **a2)
{
  char *v4;
  uint64_t v6;
  char *v7;
  char *v8;

  *(_QWORD *)a1 = off_1E81681D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = std::system_category();
  v4 = *a2;
  *a2 = 0;
  v6 = a1;
  v7 = v4;
  sub_1C6240AD0(&v8, &v7, &v6);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sub_1C54006E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81681D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5400720(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81681D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C540076C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81681D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C54007A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81681D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C54007F4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8168660;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81686C8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

BOOL llvm::PMDataManager::isPassDebuggingExecutionsOrMore(llvm::PMDataManager *this)
{
  return dword_1ED830898 > 2;
}

uint64_t llvm::PMDataManager::initSizeRemarkInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  llvm::Function *v7;
  int InstructionCount;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Function **v13;
  llvm::Function *v14;
  int v15;
  int v16;
  unint64_t *v17;
  size_t v18;
  const void *v19;
  unint64_t v20;
  void **p_dst;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  size_t v25;
  size_t *v26;
  unsigned __int8 *__dst;
  size_t v29;
  int64_t v30;

  v3 = a2 + 24;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4 != a2 + 24)
  {
    LODWORD(v6) = 0;
    while (1)
    {
      if (v4)
        v7 = (llvm::Function *)(v4 - 56);
      else
        v7 = 0;
      InstructionCount = llvm::Function::getInstructionCount(v7);
      if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
      {
        v18 = 0;
        HIBYTE(v30) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_22;
      }
      v9 = ***(_QWORD ***)v7;
      v10 = *(_QWORD *)(v9 + 152);
      v11 = *(unsigned int *)(v9 + 168);
      if (!(_DWORD)v11)
        goto LABEL_13;
      LODWORD(v12) = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v13 = (llvm::Function **)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 != v7)
        break;
LABEL_14:
      v17 = (unint64_t *)v13[1];
      v20 = *v17;
      v19 = v17 + 2;
      v18 = v20;
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v18 >= 0x17)
      {
        v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v22 = v18 | 7;
        v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        v29 = v18;
        v30 = v23 | 0x8000000000000000;
        __dst = (unsigned __int8 *)p_dst;
      }
      else
      {
        HIBYTE(v30) = v18;
        p_dst = (void **)&__dst;
        if (!v18)
          goto LABEL_22;
      }
      memmove(p_dst, v19, v18);
LABEL_22:
      *((_BYTE *)p_dst + v18) = 0;
      if (v30 >= 0)
        v24 = (unsigned __int8 *)&__dst;
      else
        v24 = __dst;
      if (v30 >= 0)
        v25 = HIBYTE(v30) & 0x7F;
      else
        v25 = v29;
      v26 = *sub_1C6241FF4(a3, v24, v25);
      *((_DWORD *)v26 + 2) = InstructionCount;
      *((_DWORD *)v26 + 3) = 0;
      if (SHIBYTE(v30) < 0)
        operator delete(__dst);
      v6 = (InstructionCount + v6);
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v3)
        return v6;
    }
    v15 = 1;
    while (v14 != (llvm::Function *)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(llvm::Function **)(v10 + 16 * v12);
      if (v14 == v7)
      {
        v13 = (llvm::Function **)(v10 + 16 * v12);
        goto LABEL_14;
      }
    }
LABEL_13:
    v13 = (llvm::Function **)(v10 + 16 * v11);
    goto LABEL_14;
  }
  return 0;
}

void llvm::PMDataManager::emitInstrCountChangedRemark(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v9;
  llvm::Function *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Function **v16;
  llvm::Function *v17;
  int v18;
  int v19;
  unsigned int v20;
  llvm::Function *v21;
  size_t v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  int v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  size_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Function **v41;
  llvm::Function *v42;
  int v43;
  int v44;
  llvm::Function *v45;
  unsigned __int8 *v46;
  size_t v47;
  size_t **v48;
  uint64_t i;
  uint64_t **v50;
  uint64_t v51;
  int InstructionCount;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ***v57;
  uint64_t **v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t **v63;
  unsigned __int8 *v64;
  size_t v65;
  size_t v66;
  uint64_t v67;
  int v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  size_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ***v84;
  uint64_t **v85;
  int v86;
  int v87;
  uint64_t **v88;
  size_t v89;
  size_t **v90;
  uint64_t *v91;
  uint64_t *v92;
  _QWORD *v93;
  void *v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  size_t v101;
  const void *v102;
  void **p_dst;
  uint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t ***v111;
  uint64_t **v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t *j;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  unint64_t *v122;
  size_t v123;
  const void *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  size_t v130;
  char *v131;
  unint64_t v132;
  void **v133;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  llvm::Function *v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  void *v150;
  size_t v151;
  int64_t v152;
  _OWORD v153[2];
  __int128 v154;
  __int128 v155;
  void **__dst;
  size_t v157;
  unint64_t v158;
  std::string v159;
  void *__p;
  char v161;
  std::string v162;
  void *v163;
  char v164;
  std::string v165;
  void *v166;
  char v167;
  void *v168[2];
  char v169;
  void *v170;
  char v171;
  uint64_t **v172;
  uint64_t (**v173)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v174;
  char v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  const char *v180;
  uint64_t v181;
  char v182;
  char v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[260];
  int v187;
  uint64_t *v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v172 = a7;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2))
    return;
  v149 = a6;
  if (a7)
  {
    InstructionCount = llvm::Function::getInstructionCount((llvm::Function *)a7);
    v146 = *((_DWORD *)a7 + 5);
    v148 = InstructionCount;
    if ((v146 & 0x10000000) != 0)
    {
      v53 = *(_QWORD *)**a7;
      v54 = *(_QWORD *)(v53 + 152);
      v55 = *(unsigned int *)(v53 + 168);
      if ((_DWORD)v55)
      {
        LODWORD(v56) = (v55 - 1) & ((a7 >> 4) ^ (a7 >> 9));
        v57 = (uint64_t ***)(v54 + 16 * v56);
        v58 = *v57;
        if (*v57 != a7)
        {
          v59 = 1;
          do
          {
            if (v58 == (uint64_t **)-4096)
              goto LABEL_65;
            v60 = v56 + v59++;
            v56 = v60 & (v55 - 1);
            v58 = *(uint64_t ***)(v54 + 16 * v56);
          }
          while (v58 != a7);
          v57 = (uint64_t ***)(v54 + 16 * v56);
        }
      }
      else
      {
LABEL_65:
        v57 = (uint64_t ***)(v54 + 16 * v55);
      }
      v62 = *(_DWORD *)(a6 + 8);
      if (!v62)
      {
LABEL_84:
        if ((v146 & 0x10000000) != 0)
        {
          v80 = *(_QWORD *)**a7;
          v81 = *(_QWORD *)(v80 + 152);
          v82 = *(unsigned int *)(v80 + 168);
          v61 = a5;
          v79 = v148;
          if ((_DWORD)v82)
          {
            LODWORD(v83) = (v82 - 1) & ((a7 >> 4) ^ (a7 >> 9));
            v84 = (uint64_t ***)(v81 + 16 * v83);
            v85 = *v84;
            if (*v84 != a7)
            {
              v86 = 1;
              do
              {
                if (v85 == (uint64_t **)-4096)
                  goto LABEL_91;
                v87 = v83 + v86++;
                v83 = v87 & (v82 - 1);
                v85 = *(uint64_t ***)(v81 + 16 * v83);
              }
              while (v85 != a7);
              v84 = (uint64_t ***)(v81 + 16 * v83);
            }
          }
          else
          {
LABEL_91:
            v84 = (uint64_t ***)(v81 + 16 * v82);
          }
          v88 = v84[1];
          v89 = (size_t)*v88;
          v64 = (unsigned __int8 *)(v88 + 2);
          v65 = v89;
          goto LABEL_93;
        }
        v65 = 0;
        v64 = (unsigned __int8 *)&byte_1C871356D;
LABEL_181:
        v61 = a5;
        v79 = v148;
LABEL_93:
        v90 = sub_1C6241FF4(v149, v64, v65);
        v78 = *v90;
        *((_DWORD *)*v90 + 2) = 0;
        goto LABEL_94;
      }
      v63 = v57[1];
      v66 = (size_t)*v63;
      v64 = (unsigned __int8 *)(v63 + 2);
      v65 = v66;
      if (v66)
      {
        v67 = 0;
        v68 = 0;
        do
          v68 = 33 * v68 + v64[v67++];
        while (v65 != v67);
        v69 = 0;
        goto LABEL_71;
      }
    }
    else
    {
      v65 = 0;
      v62 = *(_DWORD *)(a6 + 8);
      v64 = (unsigned __int8 *)&byte_1C871356D;
      if (!v62)
        goto LABEL_181;
    }
    v68 = 0;
    v69 = 1;
LABEL_71:
    v70 = v62 - 1;
    v71 = *(_QWORD *)a6;
    v143 = v62;
    v72 = *(_QWORD *)v149 + 8 * v62 + 8;
    v73 = *(unsigned int *)(v149 + 20);
    v74 = 1;
    v75 = v68;
    while (1)
    {
      v76 = v75 & v70;
      v77 = *(_QWORD **)(v71 + 8 * v76);
      if (v77 != (_QWORD *)-8)
      {
        if (!v77)
          goto LABEL_84;
        if (*(_DWORD *)(v72 + 4 * v76) == v68
          && v65 == *v77
          && ((v69 & 1) != 0 || !memcmp(v64, (char *)v77 + v73, v65)))
        {
          break;
        }
      }
      v75 = v74 + v76;
      ++v74;
    }
    if ((_DWORD)v76 != -1 && (int)v76 != v143)
    {
      v78 = *(size_t **)(v71 + 8 * (int)v76);
      v61 = a5;
      v79 = v148;
LABEL_94:
      *((_DWORD *)v78 + 3) = v79;
      v50 = a7;
      goto LABEL_95;
    }
    goto LABEL_84;
  }
  v9 = *(_QWORD *)(a3 + 32);
  v140 = a3 + 24;
  if (v9 == a3 + 24)
    return;
  v138 = a3;
  do
  {
    if (v9)
      v10 = (llvm::Function *)(v9 - 56);
    else
      v10 = 0;
    v11 = llvm::Function::getInstructionCount(v10);
    v144 = *((_DWORD *)v10 + 5);
    v147 = v9;
    v145 = v11;
    v141 = v10 >> 4;
    v142 = v10;
    if ((v144 & 0x10000000) == 0)
    {
      v22 = 0;
      v20 = *(_DWORD *)(a6 + 8);
      if (!v20)
      {
        v46 = (unsigned __int8 *)&byte_1C871356D;
        goto LABEL_43;
      }
      v26 = 0;
      v27 = 1;
      v23 = &byte_1C871356D;
      goto LABEL_23;
    }
    v12 = ***(_QWORD ***)v10;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if (!(_DWORD)v14)
      goto LABEL_16;
    LODWORD(v15) = (v14 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v16 = (llvm::Function **)(v13 + 16 * v15);
    v17 = *v16;
    if (*v16 != v10)
    {
      v18 = 1;
      while (v17 != (llvm::Function *)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(llvm::Function **)(v13 + 16 * v15);
        if (v17 == v10)
        {
          v16 = (llvm::Function **)(v13 + 16 * v15);
          goto LABEL_17;
        }
      }
LABEL_16:
      v16 = (llvm::Function **)(v13 + 16 * v14);
    }
LABEL_17:
    v20 = *(_DWORD *)(a6 + 8);
    if (!v20)
      goto LABEL_34;
    v21 = v16[1];
    v24 = *(_QWORD *)v21;
    v23 = (char *)v21 + 16;
    v22 = v24;
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      do
        v26 = 33 * v26 + v23[v25++];
      while (v22 != v25);
      v27 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 1;
    }
    a6 = v149;
LABEL_23:
    v28 = v20 - 1;
    v29 = *(_QWORD *)a6;
    v139 = v20;
    v30 = *(_QWORD *)a6 + 8 * v20 + 8;
    v31 = *(unsigned int *)(a6 + 20);
    v32 = 1;
    v33 = v26;
    while (1)
    {
      v34 = v33 & v28;
      v35 = *(_QWORD **)(v29 + 8 * v34);
      if (v35 != (_QWORD *)-8)
      {
        if (!v35)
          goto LABEL_34;
        if (*(_DWORD *)(v30 + 4 * v34) == v26
          && v22 == *v35
          && ((v27 & 1) != 0 || !memcmp(v23, (char *)v35 + v31, v22)))
        {
          break;
        }
      }
      v33 = v32 + v34;
      ++v32;
    }
    if ((_DWORD)v34 != -1 && (int)v34 != v139)
    {
      v36 = *(size_t **)(v29 + 8 * (int)v34);
      v9 = v147;
      a6 = v149;
      a3 = v138;
      goto LABEL_44;
    }
LABEL_34:
    if ((v144 & 0x10000000) == 0)
    {
      v22 = 0;
      v46 = (unsigned __int8 *)&byte_1C871356D;
      v9 = v147;
      a6 = v149;
      a3 = v138;
      goto LABEL_43;
    }
    v37 = ***(_QWORD ***)v142;
    v38 = *(_QWORD *)(v37 + 152);
    v39 = *(unsigned int *)(v37 + 168);
    v9 = v147;
    a6 = v149;
    a3 = v138;
    if (!(_DWORD)v39)
      goto LABEL_41;
    LODWORD(v40) = (v39 - 1) & (v141 ^ (v142 >> 9));
    v41 = (llvm::Function **)(v38 + 16 * v40);
    v42 = *v41;
    if (*v41 != v142)
    {
      v43 = 1;
      while (v42 != (llvm::Function *)-4096)
      {
        v44 = v40 + v43++;
        v40 = v44 & (v39 - 1);
        v42 = *(llvm::Function **)(v38 + 16 * v40);
        if (v42 == v142)
        {
          v41 = (llvm::Function **)(v38 + 16 * v40);
          goto LABEL_42;
        }
      }
LABEL_41:
      v41 = (llvm::Function **)(v38 + 16 * v39);
    }
LABEL_42:
    v45 = v41[1];
    v47 = *(_QWORD *)v45;
    v46 = (unsigned __int8 *)v45 + 16;
    v22 = v47;
LABEL_43:
    v48 = sub_1C6241FF4(a6, v46, v22);
    v36 = *v48;
    *((_DWORD *)*v48 + 2) = 0;
LABEL_44:
    *((_DWORD *)v36 + 3) = v145;
    v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9 != v140);
  for (i = *(_QWORD *)(a3 + 32); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v140)
      return;
    v50 = (uint64_t **)(i - 56);
    v51 = i ? i - 56 : 0;
    if (*(_QWORD *)(v51 + 72) != v51 + 72)
      break;
  }
  v172 = (uint64_t **)v51;
  v61 = a5;
LABEL_95:
  v91 = v50[10];
  if (v91)
    v92 = v91 - 3;
  else
    v92 = 0;
  v93 = (_QWORD *)v92[7];
  v174 = 11;
  v175 = 2;
  v176 = v93;
  v177 = 0;
  v178 = 0;
  v179 = "size-info";
  v180 = "IRSizeChange";
  v181 = 12;
  v182 = 0;
  v183 = 0;
  v184 = v186;
  v185 = 0x400000000;
  v186[256] = 0;
  v187 = -1;
  v188 = v92;
  v173 = &off_1E814E570;
  v94 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v168, "Pass", 4uLL, v94, v95);
  v96 = sub_1C47E3888((uint64_t)&v173, (uint64_t)v168);
  *(_QWORD *)&v154 = ": IR instruction count changed from ";
  *((_QWORD *)&v154 + 1) = 36;
  sub_1C53B17B4(v96 + 80, (const void **)&v154);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v165, "IRInstrsBefore", 0xEuLL, v61);
  v97 = sub_1C47E3888(v96, (uint64_t)&v165);
  *(_QWORD *)&v154 = " to ";
  *((_QWORD *)&v154 + 1) = 4;
  sub_1C53B17B4(v97 + 80, (const void **)&v154);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v162, "IRInstrsAfter", 0xDuLL, a4 + v61);
  v98 = sub_1C47E3888(v97, (uint64_t)&v162);
  *(_QWORD *)&v154 = "; Delta: ";
  *((_QWORD *)&v154 + 1) = 9;
  sub_1C53B17B4(v98 + 80, (const void **)&v154);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v159, "DeltaInstrCount", 0xFuLL, a4);
  sub_1C47E3888(v98, (uint64_t)&v159);
  if (v161 < 0)
    operator delete(__p);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (v164 < 0)
    operator delete(v163);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (v167 < 0)
    operator delete(v166);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (v171 < 0)
    operator delete(v170);
  if (v169 < 0)
    operator delete(v168[0]);
  llvm::LLVMContext::diagnose(**v172, (const llvm::DiagnosticInfo *)&v173);
  v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!v99)
  {
    __dst = 0;
    v157 = 0;
    v158 = 0;
    v104 = a7;
    goto LABEL_125;
  }
  v101 = v100;
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_183;
  v102 = (const void *)v99;
  if (v100 >= 0x17)
  {
    v105 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v105 = v100 | 7;
    v106 = v105 + 1;
    p_dst = (void **)operator new(v105 + 1);
    v157 = v101;
    v158 = v106 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_123;
  }
  HIBYTE(v158) = v100;
  p_dst = (void **)&__dst;
  if (v100)
LABEL_123:
    memmove(p_dst, v102, v101);
  v104 = a7;
  *((_BYTE *)p_dst + v101) = 0;
LABEL_125:
  *(_QWORD *)&v154 = v149;
  *((_QWORD *)&v154 + 1) = &v172;
  *(_QWORD *)&v155 = v92;
  *((_QWORD *)&v155 + 1) = &__dst;
  if (!v104)
  {
    v115 = *(unsigned int *)(v149 + 8);
    if ((_DWORD)v115)
    {
      for (j = *(uint64_t **)v149; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = *(uint64_t **)v149;
    }
    v118 = *(_QWORD *)v149 + 8 * v115;
    v153[0] = v154;
    v153[1] = v155;
    if (j != (uint64_t *)v118)
    {
      v119 = *j;
      do
      {
        sub_1C54014F4((uint64_t)v153, (unsigned __int8 *)(v119 + 16), *(_QWORD *)v119);
        do
        {
          v120 = j[1];
          ++j;
          v119 = v120;
          if (v120)
            v121 = v119 == -8;
          else
            v121 = 1;
        }
        while (v121);
      }
      while (j != (uint64_t *)v118);
    }
    goto LABEL_168;
  }
  if ((*((_BYTE *)v172 + 23) & 0x10) == 0)
  {
    v123 = 0;
    HIBYTE(v152) = 0;
    v126 = &v150;
    goto LABEL_160;
  }
  v107 = *(_QWORD *)**v172;
  v108 = *(_QWORD *)(v107 + 152);
  v109 = *(unsigned int *)(v107 + 168);
  if (!(_DWORD)v109)
    goto LABEL_151;
  LODWORD(v110) = (v109 - 1) & ((v172 >> 4) ^ (v172 >> 9));
  v111 = (uint64_t ***)(v108 + 16 * v110);
  v112 = *v111;
  if (*v111 != v172)
  {
    v113 = 1;
    while (v112 != (uint64_t **)-4096)
    {
      v114 = v110 + v113++;
      v110 = v114 & (v109 - 1);
      v112 = *(uint64_t ***)(v108 + 16 * v110);
      if (v112 == v172)
      {
        v111 = (uint64_t ***)(v108 + 16 * v110);
        goto LABEL_152;
      }
    }
LABEL_151:
    v111 = (uint64_t ***)(v108 + 16 * v109);
  }
LABEL_152:
  v122 = (unint64_t *)v111[1];
  v125 = *v122;
  v124 = v122 + 2;
  v123 = v125;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
LABEL_183:
    abort();
  if (v123 >= 0x17)
  {
    v127 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v127 = v123 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v151 = v123;
    v152 = v128 | 0x8000000000000000;
    v150 = v126;
  }
  else
  {
    HIBYTE(v152) = v123;
    v126 = &v150;
    if (!v123)
      goto LABEL_160;
  }
  memmove(v126, v124, v123);
LABEL_160:
  *((_BYTE *)v126 + v123) = 0;
  if (v152 >= 0)
    v129 = (unsigned __int8 *)&v150;
  else
    v129 = (unsigned __int8 *)v150;
  if (v152 >= 0)
    v130 = HIBYTE(v152) & 0x7F;
  else
    v130 = v151;
  sub_1C54014F4((uint64_t)&v154, v129, v130);
  if (SHIBYTE(v152) < 0)
    operator delete(v150);
LABEL_168:
  if (SHIBYTE(v158) < 0)
    operator delete(__dst);
  v173 = &off_1E814E790;
  v131 = (char *)v184;
  if ((_DWORD)v185)
  {
    v132 = (unint64_t)v185 << 6;
    do
    {
      v133 = (void **)&v131[v132];
      if (v131[v132 - 17] < 0)
        operator delete(*(v133 - 5));
      if (*((char *)v133 - 41) < 0)
        operator delete(*(v133 - 8));
      v132 -= 64;
    }
    while (v132);
    v131 = (char *)v184;
  }
  if (v131 != v186)
    free(v131);
}

void sub_1C54014F4(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  size_t **v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  void *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  void **v25;
  std::string v26;
  void *__p;
  char v28;
  std::string v29;
  void *v30;
  char v31;
  std::string v32;
  void *v33;
  char v34;
  void *v35[2];
  char v36;
  void *v37;
  char v38;
  void *__dst[2];
  char v40;
  void *v41;
  char v42;
  const char *v43;
  uint64_t v44;
  uint64_t (**v45)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  char v54;
  char v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[260];
  int v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C6241FF4(*(_QWORD *)a1, a2, a3);
  v7 = *v6;
  v9 = *((unsigned int *)*v6 + 2);
  v8 = *((unsigned int *)*v6 + 3);
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v10 = v8 - v9;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(void ***)(a1 + 24);
    v13 = *(_QWORD *)(v11 + 56);
    v46 = 11;
    v47 = 2;
    v48 = v13;
    v49 = 0;
    v50 = 0;
    v51 = "size-info";
    v52 = "FunctionIRSizeChange";
    v53 = 20;
    v54 = 0;
    v55 = 0;
    v56 = v58;
    v57 = 0x400000000;
    v58[256] = 0;
    v59 = -1;
    v60 = v11;
    v45 = &off_1E814E570;
    v14 = *((_BYTE *)v12 + 23);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = v12;
    else
      v16 = *v12;
    v17 = v14 & 0x7F;
    if (v15)
      v18 = (size_t)v12[1];
    else
      v18 = v17;
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Pass", 4uLL, v16, v18);
    v19 = sub_1C47E3888((uint64_t)&v45, (uint64_t)__dst);
    v43 = ": Function: ";
    v44 = 12;
    sub_1C53B17B4(v19 + 80, (const void **)&v43);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v35, "Function", 8uLL, a2, a3);
    v20 = sub_1C47E3888(v19, (uint64_t)v35);
    v43 = ": IR instruction count changed from ";
    v44 = 36;
    sub_1C53B17B4(v20 + 80, (const void **)&v43);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v32, "IRInstrsBefore", 0xEuLL, v9);
    v21 = sub_1C47E3888(v20, (uint64_t)&v32);
    v43 = " to ";
    v44 = 4;
    sub_1C53B17B4(v21 + 80, (const void **)&v43);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v29, "IRInstrsAfter", 0xDuLL, v8);
    v22 = sub_1C47E3888(v21, (uint64_t)&v29);
    v43 = "; Delta: ";
    v44 = 9;
    sub_1C53B17B4(v22 + 80, (const void **)&v43);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v26, "DeltaInstrCount", 0xFuLL, v10);
    sub_1C47E3888(v22, (uint64_t)&v26);
    if (v28 < 0)
      operator delete(__p);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v31 < 0)
      operator delete(v30);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(v33);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v42 < 0)
      operator delete(v41);
    if (v40 < 0)
      operator delete(__dst[0]);
    llvm::LLVMContext::diagnose(****(_QWORD ****)(a1 + 8), (const llvm::DiagnosticInfo *)&v45);
    *((_DWORD *)v7 + 2) = v8;
    v45 = &off_1E814E790;
    v23 = (char *)v56;
    if ((_DWORD)v57)
    {
      v24 = (unint64_t)v57 << 6;
      do
      {
        v25 = (void **)&v23[v24];
        if (v23[v24 - 17] < 0)
          operator delete(*(v25 - 5));
        if (*((char *)v25 - 41) < 0)
          operator delete(*(v25 - 8));
        v24 -= 64;
      }
      while (v24);
      v23 = (char *)v56;
    }
    if (v23 != v58)
      free(v23);
  }
}

BOOL llvm::legacy::debugPassSpecified(llvm::legacy *this)
{
  return dword_1ED830898 != 0;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::doInitialization(llvm::legacy::FunctionPassManagerImpl *this, llvm::Module *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (char *)this + 416;
  llvm::PMTopLevelManager::dumpArguments((llvm::legacy::FunctionPassManagerImpl *)((char *)this + 416));
  llvm::PMTopLevelManager::dumpPasses((uint64_t)v4);
  v5 = *((unsigned int *)this + 166);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v11 = (uint64_t *)*((_QWORD *)this + 82);
    v12 = 8 * v5;
    do
    {
      v13 = *v11++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v13 + 24))(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    v6 = 0;
  }
  if (*((_DWORD *)this + 114))
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v7);
      if (v8)
        v9 = v8 - 32;
      else
        v9 = 0;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v9 + 24))(v9, a2);
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 114));
  }
  return v6 & 1;
}

llvm *llvm::PMTopLevelManager::dumpArguments(llvm *this)
{
  llvm *v1;
  llvm *v2;
  llvm *AnalysisPassInfo;
  uint64_t v4;
  uint64_t v5;
  llvm::PMTopLevelManager ***v6;
  uint64_t v7;
  llvm::PMTopLevelManager **v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  const void *v15;
  size_t v16;

  if (dword_1ED830898 >= 1)
  {
    v1 = this;
    v2 = llvm::dbgs(this);
    AnalysisPassInfo = sub_1C4816AD8(v2, "Pass Arguments: ");
    v4 = *((unsigned int *)v1 + 62);
    if ((_DWORD)v4)
    {
      v10 = *((_QWORD *)v1 + 30);
      v11 = 8 * v4;
      do
      {
        AnalysisPassInfo = (llvm *)llvm::PMTopLevelManager::findAnalysisPassInfo(v1, *(const void **)(*(_QWORD *)v10 + 16));
        if (AnalysisPassInfo)
        {
          v12 = AnalysisPassInfo;
          if (!*((_BYTE *)AnalysisPassInfo + 42))
          {
            v13 = llvm::dbgs(AnalysisPassInfo);
            v14 = sub_1C4816AD8(v13, " -");
            v15 = (const void *)*((_QWORD *)v12 + 2);
            v16 = *((_QWORD *)v12 + 3);
            AnalysisPassInfo = (llvm *)*((_QWORD *)v14 + 4);
            if (v16 <= *((_QWORD *)v14 + 3) - (_QWORD)AnalysisPassInfo)
            {
              if (v16)
              {
                AnalysisPassInfo = (llvm *)memcpy(AnalysisPassInfo, v15, v16);
                *((_QWORD *)v14 + 4) += v16;
              }
            }
            else
            {
              AnalysisPassInfo = llvm::raw_ostream::write(v14, (const char *)v15, v16);
            }
          }
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    v5 = *((unsigned int *)v1 + 10);
    if ((_DWORD)v5)
    {
      v6 = (llvm::PMTopLevelManager ***)*((_QWORD *)v1 + 4);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        AnalysisPassInfo = (llvm *)llvm::PMDataManager::dumpPassArguments(v8);
        v7 -= 8;
      }
      while (v7);
    }
    v9 = llvm::dbgs(AnalysisPassInfo);
    return sub_1C4816AD8(v9, "\n");
  }
  return this;
}

uint64_t llvm::PMTopLevelManager::dumpPasses(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (dword_1ED830898 >= 2)
  {
    v1 = this;
    v2 = *(unsigned int *)(this + 248);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 240) + v3) + 128))(*(_QWORD *)(*(_QWORD *)(v1 + 240) + v3), 0);
        v3 += 8;
      }
      while (v4 != v3);
    }
    v5 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 32);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 128))(v9, 1);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::doFinalization(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = 0;
  if (*(_DWORD *)(a1 + 456) - 1 >= 0)
  {
    v5 = 8 * (*(_DWORD *)(a1 + 456) - 1);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 448) + v5);
      if (v6)
        v7 = v6 - 32;
      else
        v7 = 0;
      v4 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
      v5 -= 8;
    }
    while (v5 != -8);
  }
  v8 = *(unsigned int *)(a1 + 664);
  if ((_DWORD)v8)
  {
    v10 = *(uint64_t **)(a1 + 656);
    v11 = 8 * v8;
    do
    {
      v12 = *v10++;
      v4 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, a2);
      v11 -= 8;
    }
    while (v11);
  }
  return v4 & 1;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(this + 1096))
  {
    v1 = this;
    v2 = *(unsigned int *)(this + 456);
    if ((_DWORD)v2)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v1 + 448) + 8 * i);
        if (v4)
          v5 = v4 - 32;
        else
          v5 = 0;
        if (*(_DWORD *)(v5 + 56))
        {
          v6 = 0;
          do
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v6);
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
            ++v6;
          }
          while (v6 < *(unsigned int *)(v5 + 56));
          v2 = *(unsigned int *)(v1 + 456);
        }
      }
    }
    *(_BYTE *)(v1 + 1096) = 0;
  }
  return this;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::run(llvm::legacy::FunctionPassManagerImpl *this, llvm::Function *a2)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  llvm::FPPassManager *v7;
  char v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;

  llvm::PMTopLevelManager::initializeAllAnalysisInfo((unsigned int *)this + 104);
  if (*((_DWORD *)this + 114))
  {
    v5 = 0;
    v4 = 0;
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * v5);
      if (v6)
        v7 = (llvm::FPPassManager *)(v6 - 32);
      else
        v7 = 0;
      v8 = llvm::FPPassManager::runOnFunction(v7, a2);
      v9 = **(_QWORD **)a2;
      v10 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 136);
      if (v10)
      {
        v20 = v8;
        v10(v9, *(_QWORD *)(*(_QWORD *)v9 + 144));
        v8 = v20;
      }
      v4 |= v8;
      ++v5;
      v11 = *((unsigned int *)this + 114);
    }
    while (v5 < v11);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *((_QWORD *)this + 56);
      do
      {
        v14 = *(_QWORD *)(v13 + 8 * v12);
        v15 = v14 - 32;
        if (!v14)
          v15 = 0;
        v16 = *(unsigned int *)(v15 + 56);
        if ((_DWORD)v16)
        {
          v17 = *(uint64_t **)(v15 + 48);
          do
          {
            v18 = *v17++;
            *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) = **(_QWORD **)(v18 + 8);
            --v16;
          }
          while (v16);
        }
        ++v12;
      }
      while (v12 != v11);
    }
  }
  else
  {
    v4 = 0;
  }
  *((_BYTE *)this + 1096) = 1;
  return v4 & 1;
}

unsigned int *llvm::PMTopLevelManager::initializeAllAnalysisInfo(unsigned int *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;

  v1 = this[10];
  if ((_DWORD)v1)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 4);
    v3 = &v2[v1];
    v4 = 0uLL;
    do
    {
      v5 = *v2;
      v6 = *(_DWORD *)(*v2 + 216);
      if (v6 || *(_DWORD *)(v5 + 220))
      {
        v7 = *(unsigned int *)(v5 + 224);
        if (v7 > 4 * v6 && v7 >= 0x41)
        {
          v25 = this;
          v19 = v3;
          v21 = v2;
          v23 = *v2;
          sub_1C4926838((unsigned int *)(v5 + 208));
          v4 = 0uLL;
          v2 = v21;
          v5 = v23;
          v3 = v19;
          this = v25;
        }
        else
        {
          if ((_DWORD)v7)
          {
            v8 = *(_QWORD **)(v5 + 208);
            v9 = 16 * v7;
            do
            {
              *v8 = -4096;
              v8 += 2;
              v9 -= 16;
            }
            while (v9);
          }
          *(_QWORD *)(v5 + 216) = 0;
        }
      }
      *(_OWORD *)(v5 + 176) = v4;
      *(_OWORD *)(v5 + 192) = v4;
      *(_OWORD *)(v5 + 160) = v4;
      ++v2;
    }
    while (v2 != v3);
  }
  v10 = this[30];
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 14);
    v12 = &v11[v10];
    v13 = 0uLL;
    do
    {
      v14 = *v11;
      v15 = *(_DWORD *)(*v11 + 216);
      if (v15 || *(_DWORD *)(v14 + 220))
      {
        this = (unsigned int *)(v14 + 208);
        v16 = *(unsigned int *)(v14 + 224);
        if (v16 > 4 * v15 && v16 >= 0x41)
        {
          v24 = v11;
          v20 = v12;
          v22 = *v11;
          this = sub_1C4926838(this);
          v13 = 0uLL;
          v12 = v20;
          v14 = v22;
          v11 = v24;
        }
        else
        {
          if ((_DWORD)v16)
          {
            v17 = *(_QWORD **)this;
            v18 = 16 * v16;
            do
            {
              *v17 = -4096;
              v17 += 2;
              v18 -= 16;
            }
            while (v18);
          }
          *(_QWORD *)(v14 + 216) = 0;
        }
      }
      *(_OWORD *)(v14 + 176) = v13;
      *(_OWORD *)(v14 + 192) = v13;
      *(_OWORD *)(v14 + 160) = v13;
      ++v11;
    }
    while (v11 != v12);
  }
  return this;
}

uint64_t llvm::FPPassManager::runOnFunction(llvm::FPPassManager *this, llvm::Function *a2)
{
  llvm::FPPassManager *v3;
  int v4;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int InstructionCount;
  unsigned int inited;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  llvm::Function *v21;
  int v22;
  unsigned int v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  llvm *v27;
  uint64_t v28;
  llvm::Pass *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Function *v37;
  int v38;
  int v39;
  _QWORD *v40;
  char *v41;
  size_t v42;
  size_t v43;
  unint64_t AnalysisUsage;
  llvm::Pass *v45;
  uint64_t v46;
  const void **v47;
  uint64_t v48;
  const void *v49;
  uint64_t AnalysisPass;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  llvm::Timer *PassTimer;
  llvm::Timer *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Function *v66;
  int v67;
  int v68;
  _QWORD *v69;
  char *v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::Function *v78;
  int v79;
  int v80;
  _QWORD *v81;
  char *v82;
  size_t v83;
  size_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  llvm *v106;
  llvm::FPPassManager *v107;
  int v108;
  int v109;
  unsigned int v110;
  llvm *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE v117[64];
  _BYTE *v118;
  uint64_t v119;
  _BYTE v120[16];
  _BYTE *v121;
  uint64_t v122;
  _BYTE v123[16];
  char *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;

  v3 = this;
  v127 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_3:
      LOBYTE(v4) = 0;
      return v4 & 1;
    }
  }
  else if (!*((_BYTE *)a2 + 16)
         && *((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  v6 = *((_QWORD *)a2 + 5);
  v7 = (llvm::FPPassManager *)((char *)this + 32);
  v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
  if (v8 != v9)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v8 - 8);
      v8 -= 8;
      v12 = (char *)v7 + 8 * v10++;
      *((_QWORD *)v12 + 20) = v11 + 208;
    }
    while (v8 != v9);
  }
  v112 = 0;
  v113 = 0;
  v114 = 0x1000000000;
  v13 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(**(_QWORD **)v6 + 72) + 24))(*(_QWORD *)(**(_QWORD **)v6 + 72), "size-info", 9);
  v108 = v13;
  if ((_DWORD)v13)
  {
    inited = llvm::PMDataManager::initSizeRemarkInfo(v13, v6, (uint64_t)&v112);
    InstructionCount = llvm::Function::getInstructionCount(a2);
  }
  else
  {
    InstructionCount = 0;
    inited = 0;
  }
  v16 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v17 = ***(_QWORD ***)a2;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(_DWORD *)(v17 + 168);
    if (v19)
    {
      v20 = (v19 - 1) & (v16 ^ (a2 >> 9));
      v21 = *(llvm::Function **)(v18 + 16 * v20);
      if (v21 != a2)
      {
        v22 = 1;
        do
        {
          if (v21 == (llvm::Function *)-4096)
            break;
          v23 = v20 + v22++;
          v20 = v23 & (v19 - 1);
          v21 = *(llvm::Function **)(v18 + 16 * v20);
        }
        while (v21 != a2);
      }
    }
  }
  v24 = (llvm *)off_1EF8EEB50();
  v27 = v24;
  if (*(_QWORD *)v24)
    llvm::timeTraceProfilerBegin("OptFunction", 0xBuLL, v25, v26);
  if (*((_DWORD *)v3 + 14))
  {
    v103 = InstructionCount;
    v104 = inited;
    v105 = v6;
    v106 = v27;
    v28 = 0;
    v4 = 0;
    v110 = v16 ^ (a2 >> 9);
    v107 = v3;
    v111 = (llvm::FPPassManager *)((char *)v3 + 32);
    while (1)
    {
      v29 = *(llvm::Pass **)(*((_QWORD *)v3 + 6) + 8 * v28);
      v30 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)v29 + 16))(v29);
      if (*(_QWORD *)v27)
        llvm::timeTraceProfilerBegin("RunPass", 7uLL, v30, v31);
      if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
        break;
      v42 = 0;
      v41 = &byte_1C871356D;
LABEL_33:
      v109 = v4;
      llvm::PMDataManager::dumpPassInfo(v7, (uint64_t)v29, 0, 3, v41, v42);
      if (dword_1ED830898 >= 4)
      {
        v115 = v117;
        v116 = 0x800000000;
        v118 = v120;
        v119 = 0x200000000;
        v121 = v123;
        v122 = 0x200000000;
        v124 = &v126;
        v125 = 0;
        v126 = 0;
        (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v29 + 80))(v29, &v115);
        llvm::PMDataManager::dumpAnalysisUsage(v111, "Required", 8uLL, (unint64_t)v29, (uint64_t)&v115);
        sub_1C5408458((uint64_t)&v115);
      }
      AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(*((llvm::PMTopLevelManager **)v3 + 5), v29);
      v46 = *(unsigned int *)(AnalysisUsage + 8);
      if ((_DWORD)v46)
      {
        v47 = *(const void ***)AnalysisUsage;
        v48 = *(_QWORD *)AnalysisUsage + 8 * v46;
        do
        {
          v49 = *v47;
          AnalysisPass = llvm::PMDataManager::findAnalysisPass(v111, *v47, 1);
          if (AnalysisPass)
          {
            v51 = AnalysisPass;
            v52 = *((_QWORD *)v29 + 1);
            v54 = *(char **)v52;
            v53 = *(char **)(v52 + 8);
            if (*(char **)v52 == v53)
            {
LABEL_81:
              v56 = 0;
            }
            else
            {
              v55 = *(char **)v52;
              while (*(const void **)v55 != v49)
              {
                v55 += 16;
                if (v55 == v53)
                  goto LABEL_81;
              }
              v56 = *((_QWORD *)v55 + 1);
            }
            if (v56 != AnalysisPass)
            {
              v85 = *(_QWORD *)(v52 + 16);
              if ((unint64_t)v53 >= v85)
              {
                v101 = (v53 - v54) >> 4;
                v87 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 60)
                  abort();
                v88 = v85 - (_QWORD)v54;
                if (v88 >> 3 > v87)
                  v87 = v88 >> 3;
                v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0;
                v90 = 0xFFFFFFFFFFFFFFFLL;
                if (!v89)
                  v90 = v87;
                v102 = v90;
                if (v90)
                {
                  if (v90 >> 60)
                    sub_1C4764EE4();
                  v91 = (char *)operator new(16 * v90);
                }
                else
                {
                  v91 = 0;
                }
                v92 = &v91[16 * v101];
                *(_QWORD *)v92 = v49;
                *((_QWORD *)v92 + 1) = v51;
                v93 = v92;
                if (v54 != v53)
                {
                  do
                  {
                    *((_OWORD *)v93 - 1) = *((_OWORD *)v53 - 1);
                    v93 -= 16;
                    v53 -= 16;
                  }
                  while (v53 != v54);
                  v54 = *(char **)v52;
                }
                v86 = v92 + 16;
                *(_QWORD *)v52 = v93;
                *(_QWORD *)(v52 + 8) = v92 + 16;
                *(_QWORD *)(v52 + 16) = &v91[16 * v102];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_QWORD *)v53 = v49;
                *((_QWORD *)v53 + 1) = AnalysisPass;
                v86 = v53 + 16;
              }
              *(_QWORD *)(v52 + 8) = v86;
            }
          }
          ++v47;
        }
        while (v47 != (const void **)v48);
      }
      PassTimer = (llvm::Timer *)llvm::getPassTimer(v29, v45);
      v58 = PassTimer;
      if (PassTimer)
        llvm::Timer::startTimer(PassTimer);
      v59 = (*(uint64_t (**)(llvm::Pass *, llvm::Function *))(*(_QWORD *)v29 + 136))(v29, a2);
      if (v108)
      {
        v94 = llvm::Function::getInstructionCount(a2);
        if ((_DWORD)v94 != v103)
        {
          v95 = v94;
          v96 = v94 - v103;
          llvm::PMDataManager::emitInstrCountChangedRemark(v94, (uint64_t)v29, v105, v94 - (unint64_t)v103, v104, (uint64_t)&v112, (uint64_t **)a2);
          v103 = v95;
          v104 += v96;
        }
      }
      if (v58)
        llvm::Timer::stopTimer(v58);
      if (!v59)
      {
        v7 = v111;
        if (dword_1ED830898 >= 4)
        {
          v115 = v117;
          v116 = 0x800000000;
          v118 = v120;
          v119 = 0x200000000;
          v121 = v123;
          v122 = 0x200000000;
          v124 = &v126;
          v125 = 0;
          v126 = 0;
          (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v29 + 80))(v29, &v115);
          v7 = v111;
          llvm::PMDataManager::dumpAnalysisUsage(v111, "Preserved", 9uLL, (unint64_t)v29, (uint64_t)&v121);
          sub_1C5408458((uint64_t)&v115);
          if (dword_1ED830898 >= 4)
          {
            v115 = v117;
            v116 = 0x800000000;
            v118 = v120;
            v119 = 0x200000000;
            v121 = v123;
            v122 = 0x200000000;
            v124 = &v126;
            v125 = 0;
            v126 = 0;
            (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v29 + 80))(v29, &v115);
            v7 = v111;
            llvm::PMDataManager::dumpAnalysisUsage(v111, "Used", 4uLL, (unint64_t)v29, (uint64_t)&v124);
            sub_1C5408458((uint64_t)&v115);
          }
        }
        goto LABEL_53;
      }
      v7 = v111;
      if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
      {
        v73 = ***(_QWORD ***)a2;
        v74 = *(_QWORD *)(v73 + 152);
        v75 = *(unsigned int *)(v73 + 168);
        if (!(_DWORD)v75)
          goto LABEL_79;
        LODWORD(v76) = (v75 - 1) & v110;
        v77 = v74 + 16 * v76;
        v78 = *(llvm::Function **)v77;
        if (*(llvm::Function **)v77 != a2)
        {
          v79 = 1;
          while (v78 != (llvm::Function *)-4096)
          {
            v80 = v76 + v79++;
            v76 = v80 & (v75 - 1);
            v78 = *(llvm::Function **)(v74 + 16 * v76);
            if (v78 == a2)
            {
              v77 = v74 + 16 * v76;
              goto LABEL_74;
            }
          }
LABEL_79:
          v77 = v74 + 16 * v75;
        }
LABEL_74:
        v81 = *(_QWORD **)(v77 + 8);
        v84 = *v81;
        v82 = (char *)(v81 + 2);
        v83 = v84;
        goto LABEL_75;
      }
      v83 = 0;
      v82 = &byte_1C871356D;
LABEL_75:
      llvm::PMDataManager::dumpPassInfo(v111, (uint64_t)v29, 1, 3, v82, v83);
      if (dword_1ED830898 >= 4)
      {
        v115 = v117;
        v116 = 0x800000000;
        v118 = v120;
        v119 = 0x200000000;
        v121 = v123;
        v122 = 0x200000000;
        v124 = &v126;
        v125 = 0;
        v126 = 0;
        (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v29 + 80))(v29, &v115);
        v7 = v111;
        llvm::PMDataManager::dumpAnalysisUsage(v111, "Preserved", 9uLL, (unint64_t)v29, (uint64_t)&v121);
        sub_1C5408458((uint64_t)&v115);
        if (dword_1ED830898 >= 4)
        {
          v115 = v117;
          v116 = 0x800000000;
          v118 = v120;
          v119 = 0x200000000;
          v121 = v123;
          v122 = 0x200000000;
          v124 = &v126;
          v125 = 0;
          v126 = 0;
          (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v29 + 80))(v29, &v115);
          v7 = v111;
          llvm::PMDataManager::dumpAnalysisUsage(v111, "Used", 4uLL, (unint64_t)v29, (uint64_t)&v124);
          sub_1C5408458((uint64_t)&v115);
        }
      }
      llvm::PMDataManager::removeNotPreservedAnalysis(v7, v29);
LABEL_53:
      llvm::PMDataManager::recordAvailableAnalysis(v7, v29);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v71 = 0;
        v70 = &byte_1C871356D;
        v27 = v106;
        v3 = v107;
        v63 = v109;
        goto LABEL_61;
      }
      v60 = ***(_QWORD ***)a2;
      v61 = *(_QWORD *)(v60 + 152);
      v62 = *(unsigned int *)(v60 + 168);
      v27 = v106;
      v3 = v107;
      v63 = v109;
      if (!(_DWORD)v62)
        goto LABEL_66;
      LODWORD(v64) = (v62 - 1) & v110;
      v65 = v61 + 16 * v64;
      v66 = *(llvm::Function **)v65;
      if (*(llvm::Function **)v65 != a2)
      {
        v67 = 1;
        while (v66 != (llvm::Function *)-4096)
        {
          v68 = v64 + v67++;
          v64 = v68 & (v62 - 1);
          v66 = *(llvm::Function **)(v61 + 16 * v64);
          if (v66 == a2)
          {
            v65 = v61 + 16 * v64;
            goto LABEL_60;
          }
        }
LABEL_66:
        v65 = v61 + 16 * v62;
      }
LABEL_60:
      v69 = *(_QWORD **)(v65 + 8);
      v72 = *v69;
      v70 = (char *)(v69 + 2);
      v71 = v72;
LABEL_61:
      llvm::PMDataManager::removeDeadPasses((uint64_t)v7, (uint64_t)v29, v70, v71, 3);
      if (*(_QWORD *)v27)
        v24 = (llvm *)llvm::timeTraceProfilerEnd(v24);
      v4 = v63 | v59;
      if (++v28 >= (unint64_t)*((unsigned int *)v3 + 14))
        goto LABEL_87;
    }
    v32 = ***(_QWORD ***)a2;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & v110;
      v36 = v33 + 16 * v35;
      v37 = *(llvm::Function **)v36;
      if (*(llvm::Function **)v36 == a2)
      {
LABEL_32:
        v40 = *(_QWORD **)(v36 + 8);
        v43 = *v40;
        v41 = (char *)(v40 + 2);
        v42 = v43;
        goto LABEL_33;
      }
      v38 = 1;
      while (v37 != (llvm::Function *)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(llvm::Function **)(v33 + 16 * v35);
        if (v37 == a2)
        {
          v36 = v33 + 16 * v35;
          goto LABEL_32;
        }
      }
    }
    v36 = v33 + 16 * v34;
    goto LABEL_32;
  }
  LOBYTE(v4) = 0;
LABEL_87:
  if (*(_QWORD *)v27)
    llvm::timeTraceProfilerEnd(v24);
  if (HIDWORD(v113) && (_DWORD)v113)
  {
    v97 = 0;
    v98 = 8 * v113;
    do
    {
      v99 = *(_QWORD *)((char *)v112 + v97);
      if (v99 != -8 && v99 != 0)
        MEMORY[0x1CAA32FB4]();
      v97 += 8;
    }
    while (v98 != v97);
  }
  free(v112);
  return v4 & 1;
}

uint64_t llvm::FPPassManager::cleanup(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 56);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 48);
    do
    {
      v3 = *v2++;
      *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) = **(_QWORD **)(v3 + 8);
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t llvm::legacy::PassManagerImpl::run(llvm::legacy::PassManagerImpl *this, llvm::Module *a2)
{
  llvm::legacy::PassManagerImpl *v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int inited;
  unint64_t v22;
  llvm *v23;
  llvm::Pass *v24;
  char v25;
  BOOL v26;
  const void *v27;
  size_t v28;
  size_t v29;
  unint64_t AnalysisUsage;
  llvm::Pass *v31;
  uint64_t v32;
  const void **v33;
  uint64_t v34;
  const void *v35;
  uint64_t AnalysisPass;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  llvm::Timer *PassTimer;
  llvm::Timer *v44;
  llvm::Module *v45;
  int v46;
  char v47;
  BOOL v48;
  const void *v49;
  size_t v50;
  size_t v51;
  unint64_t v52;
  char v53;
  BOOL v54;
  const void *v55;
  size_t v56;
  size_t v57;
  unint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  void (*v66)(void);
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t InstructionCount;
  unsigned int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  llvm::legacy::PassManagerImpl *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  char *v95;
  llvm::Module *v96;
  llvm *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE v103[64];
  _BYTE *v104;
  uint64_t v105;
  _BYTE v106[16];
  _BYTE *v107;
  uint64_t v108;
  _BYTE v109[16];
  char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;

  v3 = this;
  v113 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)((char *)this + 416);
  llvm::PMTopLevelManager::dumpArguments((llvm::legacy::PassManagerImpl *)((char *)this + 416));
  llvm::PMTopLevelManager::dumpPasses((uint64_t)v4);
  v5 = *((unsigned int *)v3 + 166);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)*((_QWORD *)v3 + 82);
    v8 = 8 * v5;
    do
    {
      v9 = *v7++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v9 + 24))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
  }
  llvm::PMTopLevelManager::initializeAllAnalysisInfo(v4);
  if (*((_DWORD *)v3 + 114))
  {
    v10 = (char *)a2 + 168;
    v11 = (_QWORD *)off_1EF8EEB50();
    v12 = 0;
    v95 = (char *)a2 + 168;
    v96 = a2;
    v89 = v11;
    v90 = v3;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)v3 + 56) + 8 * v12);
      if (v13)
        v14 = v13 - 32;
      else
        v14 = 0;
      if (*v11)
      {
        v80 = *((_BYTE *)a2 + 191);
        if (v80 >= 0)
          v81 = (uint64_t)v10;
        else
          v81 = *((_QWORD *)a2 + 21);
        if (v80 >= 0)
          v82 = v80 & 0x7F;
        else
          v82 = *((_QWORD *)a2 + 22);
        llvm::timeTraceProfilerBegin("OptModule", 9uLL, v81, v82);
      }
      v15 = *(_QWORD *)(v14 + 440);
      v16 = *(_QWORD *)(v14 + 448);
      if (v15 == v16)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        do
        {
          v17 |= (*(uint64_t (**)(_QWORD, llvm::Module *))(**(_QWORD **)(v15 + 8) + 24))(*(_QWORD *)(v15 + 8), a2);
          v15 += 16;
        }
        while (v15 != v16);
      }
      if (*(_DWORD *)(v14 + 56))
      {
        v18 = 0;
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v18);
          v17 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v19 + 24))(v19, a2);
          ++v18;
        }
        while (v18 < *(unsigned int *)(v14 + 56));
      }
      v98 = 0;
      v99 = 0;
      v100 = 0x1000000000;
      v20 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(**(_QWORD **)a2 + 72) + 24))(*(_QWORD *)(**(_QWORD **)a2 + 72), "size-info", 9);
      v94 = v20;
      if ((v20 & 1) != 0)
        inited = llvm::PMDataManager::initSizeRemarkInfo(v20, (uint64_t)a2, (uint64_t)&v98);
      else
        inited = 0;
      if (*(_DWORD *)(v14 + 56))
      {
        v88 = inited;
        v91 = v12;
        v92 = v6;
        v22 = 0;
        v23 = (llvm *)(v14 + 32);
        v97 = (llvm *)(v14 + 32);
        v93 = v14;
        do
        {
          v24 = *(llvm::Pass **)(*(_QWORD *)(v14 + 48) + 8 * v22);
          v25 = *((_BYTE *)a2 + 191);
          v26 = v25 < 0;
          if (v25 >= 0)
            v27 = v10;
          else
            v27 = (const void *)*((_QWORD *)a2 + 21);
          v28 = v25 & 0x7F;
          if (v26)
            v29 = *((_QWORD *)a2 + 22);
          else
            v29 = v28;
          llvm::PMDataManager::dumpPassInfo(v23, *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v22), 0, 4, v27, v29);
          if (dword_1ED830898 >= 4)
          {
            v101 = v103;
            v102 = 0x800000000;
            v104 = v106;
            v105 = 0x200000000;
            v107 = v109;
            v108 = 0x200000000;
            v110 = &v112;
            v111 = 0;
            v112 = 0;
            (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v24 + 80))(v24, &v101);
            llvm::PMDataManager::dumpAnalysisUsage(v23, "Required", 8uLL, (unint64_t)v24, (uint64_t)&v101);
            sub_1C5408458((uint64_t)&v101);
          }
          AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(*(llvm::PMTopLevelManager **)(v14 + 40), v24);
          v32 = *(unsigned int *)(AnalysisUsage + 8);
          if ((_DWORD)v32)
          {
            v33 = *(const void ***)AnalysisUsage;
            v34 = *(_QWORD *)AnalysisUsage + 8 * v32;
            do
            {
              v35 = *v33;
              AnalysisPass = llvm::PMDataManager::findAnalysisPass(v23, *v33, 1);
              if (AnalysisPass)
              {
                v37 = AnalysisPass;
                v38 = *((_QWORD *)v24 + 1);
                v40 = *(char **)v38;
                v39 = *(char **)(v38 + 8);
                if (*(char **)v38 == v39)
                {
LABEL_64:
                  v42 = 0;
                }
                else
                {
                  v41 = *(char **)v38;
                  while (*(const void **)v41 != v35)
                  {
                    v41 += 16;
                    if (v41 == v39)
                      goto LABEL_64;
                  }
                  v42 = *((_QWORD *)v41 + 1);
                }
                if (v42 != AnalysisPass)
                {
                  v58 = *(_QWORD *)(v38 + 16);
                  if ((unint64_t)v39 >= v58)
                  {
                    v72 = (v39 - v40) >> 4;
                    v73 = v72 + 1;
                    if ((unint64_t)(v72 + 1) >> 60)
                      abort();
                    v74 = v58 - (_QWORD)v40;
                    if (v74 >> 3 > v73)
                      v73 = v74 >> 3;
                    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
                      v73 = 0xFFFFFFFFFFFFFFFLL;
                    v87 = v73;
                    if (v73)
                    {
                      if (v73 >> 60)
                        sub_1C4764EE4();
                      v75 = (char *)operator new(16 * v73);
                      v72 = (v39 - v40) >> 4;
                    }
                    else
                    {
                      v75 = 0;
                    }
                    v76 = &v75[16 * v72];
                    *(_QWORD *)v76 = v35;
                    *((_QWORD *)v76 + 1) = v37;
                    v77 = v76;
                    if (v40 != v39)
                    {
                      do
                      {
                        *((_OWORD *)v77 - 1) = *((_OWORD *)v39 - 1);
                        v77 -= 16;
                        v39 -= 16;
                      }
                      while (v39 != v40);
                      v40 = *(char **)v38;
                    }
                    v59 = v76 + 16;
                    *(_QWORD *)v38 = v77;
                    *(_QWORD *)(v38 + 8) = v76 + 16;
                    *(_QWORD *)(v38 + 16) = &v75[16 * v87];
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    *(_QWORD *)v39 = v35;
                    *((_QWORD *)v39 + 1) = AnalysisPass;
                    v59 = v39 + 16;
                  }
                  *(_QWORD *)(v38 + 8) = v59;
                }
              }
              ++v33;
              v23 = v97;
            }
            while (v33 != (const void **)v34);
          }
          PassTimer = (llvm::Timer *)llvm::getPassTimer(v24, v31);
          v44 = PassTimer;
          if (PassTimer)
            llvm::Timer::startTimer(PassTimer);
          v45 = v96;
          v46 = (*(uint64_t (**)(llvm::Pass *, llvm::Module *))(*(_QWORD *)v24 + 136))(v24, v96);
          if (v94)
          {
            InstructionCount = llvm::Module::getInstructionCount(v96);
            if ((_DWORD)InstructionCount == v88)
            {
              v45 = v96;
            }
            else
            {
              v79 = InstructionCount;
              v45 = v96;
              llvm::PMDataManager::emitInstrCountChangedRemark(InstructionCount, (uint64_t)v24, (uint64_t)v96, InstructionCount - (unint64_t)v88, v88, (uint64_t)&v98, 0);
              v88 = v79;
            }
            v23 = v97;
          }
          if (v44)
            llvm::Timer::stopTimer(v44);
          if (v46)
          {
            v53 = *((_BYTE *)v45 + 191);
            v54 = v53 < 0;
            v10 = v95;
            if (v53 >= 0)
              v55 = v95;
            else
              v55 = (const void *)*((_QWORD *)v45 + 21);
            v56 = v53 & 0x7F;
            if (v54)
              v57 = *((_QWORD *)v45 + 22);
            else
              v57 = v56;
            llvm::PMDataManager::dumpPassInfo(v23, (uint64_t)v24, 1, 4, v55, v57);
            if (dword_1ED830898 >= 4)
            {
              v101 = v103;
              v102 = 0x800000000;
              v104 = v106;
              v105 = 0x200000000;
              v107 = v109;
              v108 = 0x200000000;
              v110 = &v112;
              v111 = 0;
              v112 = 0;
              (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v24 + 80))(v24, &v101);
              v10 = v95;
              llvm::PMDataManager::dumpAnalysisUsage(v23, "Preserved", 9uLL, (unint64_t)v24, (uint64_t)&v107);
              sub_1C5408458((uint64_t)&v101);
              if (dword_1ED830898 >= 4)
              {
                v101 = v103;
                v102 = 0x800000000;
                v104 = v106;
                v105 = 0x200000000;
                v107 = v109;
                v108 = 0x200000000;
                v110 = &v112;
                v111 = 0;
                v112 = 0;
                (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v24 + 80))(v24, &v101);
                v10 = v95;
                llvm::PMDataManager::dumpAnalysisUsage(v23, "Used", 4uLL, (unint64_t)v24, (uint64_t)&v110);
                sub_1C5408458((uint64_t)&v101);
              }
            }
            llvm::PMDataManager::removeNotPreservedAnalysis(v23, v24);
          }
          else
          {
            v10 = v95;
            if (dword_1ED830898 >= 4)
            {
              v101 = v103;
              v102 = 0x800000000;
              v104 = v106;
              v105 = 0x200000000;
              v107 = v109;
              v108 = 0x200000000;
              v110 = &v112;
              v111 = 0;
              v112 = 0;
              (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v24 + 80))(v24, &v101);
              v10 = v95;
              llvm::PMDataManager::dumpAnalysisUsage(v97, "Preserved", 9uLL, (unint64_t)v24, (uint64_t)&v107);
              sub_1C5408458((uint64_t)&v101);
              if (dword_1ED830898 >= 4)
              {
                v101 = v103;
                v102 = 0x800000000;
                v104 = v106;
                v105 = 0x200000000;
                v107 = v109;
                v108 = 0x200000000;
                v110 = &v112;
                v111 = 0;
                v112 = 0;
                (*(void (**)(llvm::Pass *, _BYTE **))(*(_QWORD *)v24 + 80))(v24, &v101);
                v10 = v95;
                llvm::PMDataManager::dumpAnalysisUsage(v97, "Used", 4uLL, (unint64_t)v24, (uint64_t)&v110);
                sub_1C5408458((uint64_t)&v101);
              }
            }
          }
          v17 |= v46;
          v23 = v97;
          llvm::PMDataManager::recordAvailableAnalysis(v97, v24);
          a2 = v96;
          v47 = *((_BYTE *)v96 + 191);
          v48 = v47 < 0;
          if (v47 >= 0)
            v49 = v10;
          else
            v49 = (const void *)*((_QWORD *)v96 + 21);
          v50 = v47 & 0x7F;
          if (v48)
            v51 = *((_QWORD *)v96 + 22);
          else
            v51 = v50;
          llvm::PMDataManager::removeDeadPasses((uint64_t)v97, (uint64_t)v24, v49, v51, 4);
          ++v22;
          v14 = v93;
          v52 = *(unsigned int *)(v93 + 56);
        }
        while (v22 < v52);
        v60 = v52 - 1;
        if (v60 < 0)
        {
          v6 = v92;
          v11 = v89;
          v3 = v90;
          v12 = v91;
        }
        else
        {
          v61 = 8 * v60;
          v6 = v92;
          v11 = v89;
          v3 = v90;
          v12 = v91;
          do
          {
            v17 |= (*(uint64_t (**)(_QWORD, llvm::Module *))(**(_QWORD **)(*(_QWORD *)(v93 + 48) + v61) + 32))(*(_QWORD *)(*(_QWORD *)(v93 + 48) + v61), v96);
            v61 -= 8;
          }
          while (v61 != -8);
        }
      }
      v62 = *(_QWORD *)(v14 + 440);
      v63 = *(_QWORD *)(v14 + 448);
      while (v62 != v63)
      {
        v64 = *(_QWORD *)(v62 + 8);
        llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly(v64);
        v17 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v64 + 32))(v64, a2);
        v62 += 16;
      }
      if (HIDWORD(v99) && (_DWORD)v99)
      {
        v83 = 0;
        v84 = 8 * v99;
        do
        {
          v85 = *(_QWORD *)((char *)v98 + v83);
          if (v85 != -8 && v85 != 0)
            MEMORY[0x1CAA32FB4]();
          v83 += 8;
          a2 = v96;
          v11 = v89;
          v3 = v90;
        }
        while (v84 != v83);
      }
      free(v98);
      v10 = v95;
      if (*v11)
        llvm::timeTraceProfilerEnd(v65);
      v66 = *(void (**)(void))(**(_QWORD **)a2 + 136);
      if (v66)
        v66();
      v6 |= v17;
      ++v12;
    }
    while (v12 < *((unsigned int *)v3 + 114));
  }
  v67 = *((unsigned int *)v3 + 166);
  if ((_DWORD)v67)
  {
    v68 = (uint64_t *)*((_QWORD *)v3 + 82);
    v69 = 8 * v67;
    do
    {
      v70 = *v68++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)v70 + 32))(v70, a2);
      v69 -= 8;
    }
    while (v69);
  }
  return v6 & 1;
}

void llvm::PMTopLevelManager::setLastUser(llvm::PMTopLevelManager *a1, llvm::Pass **a2, uint64_t a3, uint64_t a4)
{
  llvm::Pass **v5;
  uint64_t v7;
  unsigned int v8;
  llvm::Pass *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t AnalysisUsage;
  _QWORD *v18;
  uint64_t v19;
  const void **v20;
  uint64_t v21;
  uint64_t AnalysisPass;
  unsigned int v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  llvm::SmallPtrSetImplBase *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v57;
  int v58;
  unsigned int v59;
  void *v60;
  llvm::Pass **v61;
  uint64_t v62;
  llvm::Pass *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[96];
  void *v68;
  uint64_t v69;
  _QWORD v70[14];

  v5 = a2;
  v70[12] = *MEMORY[0x1E0C80C00];
  v64 = a4;
  v7 = *(_QWORD *)(a4 + 8);
  if (v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 376);
    if (!a3)
      return;
    goto LABEL_5;
  }
  v8 = 0;
  if (a3)
  {
LABEL_5:
    v61 = &a2[a3];
    do
    {
      v9 = *v5;
      v63 = *v5;
      v10 = sub_1C5408E54((uint64_t)a1 + 192, (uint64_t *)&v63) + 1;
      if (*v10)
      {
        sub_1C5409120((uint64_t)a1 + 216, v10);
        v12 = v11;
        v13 = sub_1C477672C(v11 + 8, (uint64_t)v9);
        v14 = *(_QWORD *)(v12 + 16);
        v15 = (unsigned int *)(v14 == *(_QWORD *)(v12 + 8) ? v12 + 28 : v12 + 24);
        if (v13 != (_QWORD *)(v14 + 8 * *v15))
        {
          *v13 = -2;
          ++*(_DWORD *)(v12 + 32);
        }
      }
      *v10 = a4;
      sub_1C5409120((uint64_t)a1 + 216, &v64);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v16 + 8), (uint64_t)v9);
      if (v9 == (llvm::Pass *)a4)
        goto LABEL_63;
      AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(a1, v9);
      v18 = v70;
      v68 = v70;
      v69 = 0xC00000000;
      v65 = v67;
      v66 = 0xC00000000;
      v19 = *(unsigned int *)(AnalysisUsage + 88);
      if ((_DWORD)v19)
      {
        v20 = *(const void ***)(AnalysisUsage + 80);
        v21 = 8 * v19;
        while (1)
        {
          AnalysisPass = llvm::PMTopLevelManager::findAnalysisPass(a1, *v20);
          v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(AnalysisPass + 8) + 24) + 376);
          if (v8 == v23)
            break;
          if (v8 > v23)
          {
            v24 = v66;
            v25 = &v65;
            if (v66 >= (unint64_t)HIDWORD(v66))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v66 + 1, 8);
              v24 = v66;
            }
            goto LABEL_21;
          }
LABEL_22:
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            v18 = v68;
            v26 = v69;
            goto LABEL_26;
          }
        }
        v24 = v69;
        v25 = &v68;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v69 + 1, 8);
          v24 = v69;
        }
LABEL_21:
        *((_QWORD *)*v25 + v24) = AnalysisPass;
        ++*((_DWORD *)v25 + 2);
        goto LABEL_22;
      }
      v26 = 0;
LABEL_26:
      llvm::PMTopLevelManager::setLastUser(a1, v18, v26, a4);
      v27 = *(_QWORD *)(a4 + 8);
      if (v27)
      {
        v28 = v65;
        v29 = v66;
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 24) + 16))(*(_QWORD *)(v27 + 24));
        llvm::PMTopLevelManager::setLastUser(a1, v28, v29, v30);
      }
      sub_1C5409120((uint64_t)a1 + 216, (uint64_t *)&v63);
      v32 = v31;
      v33 = *(_QWORD *)(v31 + 16);
      if (v33 == *(_QWORD *)(v31 + 8))
        v34 = (unsigned int *)(v31 + 28);
      else
        v34 = (unsigned int *)(v31 + 24);
      v35 = *v34;
      if ((_DWORD)v35)
      {
        v36 = 8 * v35;
        v37 = *(uint64_t **)(v31 + 16);
        while ((unint64_t)*v37 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v37;
          v36 -= 8;
          if (!v36)
            goto LABEL_42;
        }
      }
      else
      {
        v37 = *(uint64_t **)(v31 + 16);
      }
      v38 = (_QWORD *)(v33 + 8 * v35);
      if (v37 != v38)
      {
LABEL_38:
        v62 = 0;
        v40 = *v37;
        v39 = (unint64_t *)(v37 + 1);
        v62 = v40;
        sub_1C5408E54((uint64_t)a1 + 192, &v62)[1] = a4;
        while (v39 != v38)
        {
          v41 = *v39++;
          if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v37 = (uint64_t *)(v39 - 1);
            goto LABEL_38;
          }
        }
      }
LABEL_42:
      sub_1C5409120((uint64_t)a1 + 216, &v64);
      v43 = v42;
      v45 = *(char **)(v32 + 8);
      v44 = *(char **)(v32 + 16);
      v46 = (unsigned int *)(v32 + 28);
      if (v44 != v45)
        v46 = (unsigned int *)(v32 + 24);
      v47 = *v46;
      v48 = *(uint64_t **)(v32 + 16);
      if ((_DWORD)v47)
      {
        v49 = 0;
        while (*(_QWORD *)&v44[v49] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v49 += 8;
          if (8 * v47 == v49)
            goto LABEL_57;
        }
        v48 = (uint64_t *)&v44[v49];
      }
      v50 = &v44[8 * v47];
      if (v48 != (uint64_t *)v50)
      {
        v51 = (llvm::SmallPtrSetImplBase *)(v43 + 8);
        v52 = *v48;
LABEL_52:
        sub_1C4774094(v51, v52);
        v53 = (unint64_t *)(v48 + 1);
        while (v53 != (unint64_t *)v50)
        {
          v54 = *v53++;
          v52 = v54;
          if (v54 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v48 = (uint64_t *)(v53 - 1);
            goto LABEL_52;
          }
        }
        v45 = *(char **)(v32 + 8);
        v44 = *(char **)(v32 + 16);
      }
LABEL_57:
      if (v44 != v45)
      {
        v55 = *(unsigned int *)(v32 + 24);
        if (v55 >= 0x21 && 4 * (*(_DWORD *)(v32 + 28) - *(_DWORD *)(v32 + 32)) < v55)
        {
          free(v44);
          v57 = *(_DWORD *)(v32 + 28) - *(_DWORD *)(v32 + 32);
          v58 = 1 << (33 - __clz(v57 - 1));
          *(_DWORD *)(v32 + 28) = 0;
          *(_DWORD *)(v32 + 32) = 0;
          if (v57 <= 0x10)
            v59 = 32;
          else
            v59 = v58;
          *(_DWORD *)(v32 + 24) = v59;
          v60 = malloc_type_malloc(8 * v59, 0x4065EBACuLL);
          if (!v60)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          *(_QWORD *)(v32 + 16) = v60;
          memset(v60, 255, 8 * *(unsigned int *)(v32 + 24));
          goto LABEL_59;
        }
        memset(v44, 255, 8 * v55);
      }
      *(_DWORD *)(v32 + 28) = 0;
      *(_DWORD *)(v32 + 32) = 0;
LABEL_59:
      if (v65 != v67)
        free(v65);
      if (v68 != v70)
        free(v68);
LABEL_63:
      ++v5;
    }
    while (v5 != v61);
  }
}

unint64_t llvm::PMTopLevelManager::findAnalysisUsage(llvm::PMTopLevelManager *this, llvm::Pass *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Pass *v6;
  unint64_t v7;
  int v9;
  int v10;
  char *v12;
  unint64_t v13;
  llvm::PMTopLevelManager *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  llvm::Pass *v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[128];
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _BYTE v32[16];
  void *v33;
  uint64_t v34;
  _BYTE v35[16];
  void *v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[18];

  v41[16] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v2 = *((_QWORD *)this + 79);
  v3 = *((unsigned int *)this + 162);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = v2 + 16 * v4;
    v6 = *(llvm::Pass **)v5;
    if (*(llvm::Pass **)v5 == a2)
      goto LABEL_3;
    v9 = 1;
    while (v6 != (llvm::Pass *)-4096)
    {
      v10 = v4 + v9++;
      v4 = v10 & (v3 - 1);
      v6 = *(llvm::Pass **)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = v2 + 16 * v4;
        goto LABEL_3;
      }
    }
  }
  v5 = v2 + 16 * v3;
LABEL_3:
  if (v5 != v2 + 16 * v3)
    return *(_QWORD *)(v5 + 8);
  v22 = (_DWORD *)((char *)this + 632);
  v27 = v29;
  v28 = 0x800000000;
  v30 = v32;
  v31 = 0x200000000;
  v33 = v35;
  v34 = 0x200000000;
  v36 = &v38;
  v37 = 0;
  v38 = 0;
  (*(void (**)(llvm::Pass *, void **))(*(_QWORD *)a2 + 80))(a2, &v27);
  v24 = v26;
  v25 = 0x2000000000;
  sub_1C5403D7C(&v24, (uint64_t)&v27);
  v12 = (char *)this + 520;
  v13 = sub_1C4F5AB38(v24, (uint64_t)v24 + 4 * v25);
  v14 = this;
  v15 = *((_QWORD *)this + 65) + 8 * ((*((_DWORD *)this + 132) - 1) & v13);
  v16 = *(_QWORD *)v15;
  v39 = v41;
  v40 = 0x2000000000;
  if (v16)
    v17 = (v16 & 1) == 0;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_36;
  while (!sub_1C5409490((uint64_t)v12, v16, (uint64_t)&v24, v13, (const void **)&v39))
  {
    LODWORD(v40) = 0;
    v16 = *(_QWORD *)v16;
    if (v16)
      v18 = (v16 & 1) == 0;
    else
      v18 = 0;
    if (!v18)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  v15 = 0;
LABEL_23:
  if (v39 != v41)
    free(v39);
  if (!v16)
  {
LABEL_36:
    v16 = sub_1C484358C((uint64_t)v14 + 536, 176, 3);
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = v16 + 24;
    *(_QWORD *)(v16 + 16) = 0x800000000;
    if ((_DWORD)v28)
      sub_1C49EEBE4(v16 + 8, (uint64_t)&v27);
    *(_QWORD *)(v16 + 88) = v16 + 104;
    *(_QWORD *)(v16 + 96) = 0x200000000;
    if ((_DWORD)v31)
      sub_1C49EEBE4(v16 + 88, (uint64_t)&v30);
    *(_QWORD *)(v16 + 120) = v16 + 136;
    *(_QWORD *)(v16 + 128) = 0x200000000;
    if ((_DWORD)v34)
      sub_1C49EEBE4(v16 + 120, (uint64_t)&v33);
    *(_QWORD *)(v16 + 152) = v16 + 168;
    *(_QWORD *)(v16 + 160) = 0;
    if ((_DWORD)v37)
      sub_1C49EEBE4(v16 + 152, (uint64_t)&v36);
    *(_BYTE *)(v16 + 168) = v38;
    v19 = *((_DWORD *)v14 + 133) + 1;
    v20 = *((_DWORD *)v14 + 132);
    if (v19 > 2 * v20)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)v12, 2 * v20, (uint64_t)off_1E8168888);
      v39 = v41;
      v40 = 0x2000000000;
      v15 = *((_QWORD *)v14 + 65)
          + 8 * ((*((_DWORD *)v14 + 132) - 1) & sub_1C62420F8((uint64_t)v12, v16, &v39));
      if (v39 != v41)
        free(v39);
      v19 = *((_DWORD *)v14 + 133) + 1;
    }
    *((_DWORD *)v14 + 133) = v19;
    v21 = *(_QWORD *)v15;
    if (!*(_QWORD *)v15)
      v21 = v15 | 1;
    *(_QWORD *)v16 = v21;
    *(_QWORD *)v15 = v16;
  }
  v7 = v16 + 8;
  sub_1C61FAC0C(v22, &v23)[1] = v16 + 8;
  if (v24 != v26)
    free(v24);
  if (v36 != &v38)
    free(v36);
  if (v33 != v35)
    free(v33);
  if (v30 != v32)
    free(v30);
  if (v27 != v29)
    free(v27);
  return v7;
}

uint64_t llvm::PMTopLevelManager::findAnalysisPass(llvm::PMTopLevelManager *this, const void *a2)
{
  unsigned int v2;
  int v3;
  char *v4;
  int v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  int v31;
  int v32;

  v2 = a2 >> 4;
  if ((*((_BYTE *)this + 384) & 1) != 0)
  {
    v4 = (char *)this + 392;
    v3 = 8;
  }
  else
  {
    v3 = *((_DWORD *)this + 100);
    if (!v3)
      goto LABEL_11;
    v4 = (char *)*((_QWORD *)this + 49);
  }
  v5 = v3 - 1;
  v6 = (v3 - 1) & (v2 ^ (a2 >> 9));
  v7 = *(const void **)&v4[16 * v6];
  if (v7 != a2)
  {
    v10 = 1;
    while (v7 != (const void *)-4096)
    {
      v11 = v6 + v10++;
      v6 = v11 & v5;
      v7 = *(const void **)&v4[16 * v6];
      if (v7 == a2)
        goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_5:
  v8 = *(_QWORD *)&v4[16 * v6 + 8];
  if (!v8)
  {
LABEL_11:
    v12 = *((unsigned int *)this + 10);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)this + 4);
      v14 = v13 + 8 * v12;
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 208);
        v16 = *(unsigned int *)(*(_QWORD *)v13 + 224);
        if (!(_DWORD)v16)
          goto LABEL_19;
        LODWORD(v17) = (v16 - 1) & (v2 ^ (a2 >> 9));
        v18 = v15 + 16 * v17;
        v19 = *(const void **)v18;
        if (*(const void **)v18 != a2)
          break;
LABEL_20:
        if (v18 != v15 + 16 * v16)
        {
          v8 = *(_QWORD *)(v18 + 8);
          if (v8)
            return v8;
        }
        v13 += 8;
        if (v13 == v14)
          goto LABEL_25;
      }
      v20 = 1;
      while (v19 != (const void *)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(const void **)(v15 + 16 * v17);
        if (v19 == a2)
        {
          v18 = v15 + 16 * v17;
          goto LABEL_20;
        }
      }
LABEL_19:
      v18 = v15 + 16 * v16;
      goto LABEL_20;
    }
LABEL_25:
    v22 = *((unsigned int *)this + 30);
    if (!(_DWORD)v22)
      return 0;
    v23 = *((_QWORD *)this + 14);
    v24 = v23 + 8 * v22;
    v25 = v2 ^ (a2 >> 9);
    while (1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v23 + 208);
      v27 = *(unsigned int *)(*(_QWORD *)v23 + 224);
      if (!(_DWORD)v27)
        goto LABEL_33;
      LODWORD(v28) = (v27 - 1) & v25;
      v29 = v26 + 16 * v28;
      v30 = *(const void **)v29;
      if (*(const void **)v29 != a2)
        break;
LABEL_34:
      if (v29 != v26 + 16 * v27)
      {
        v8 = *(_QWORD *)(v29 + 8);
        if (v8)
          return v8;
      }
      v23 += 8;
      if (v23 == v24)
        return 0;
    }
    v31 = 1;
    while (v30 != (const void *)-4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v27 - 1);
      v30 = *(const void **)(v26 + 16 * v28);
      if (v30 == a2)
      {
        v29 = v26 + 16 * v28;
        goto LABEL_34;
      }
    }
LABEL_33:
    v29 = v26 + 16 * v27;
    goto LABEL_34;
  }
  return v8;
}

_QWORD *llvm::PMTopLevelManager::collectLastUses(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = result[27];
  v5 = *((_DWORD *)result + 58);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = (v5 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v8 = (uint64_t *)(v4 + 104 * v7);
    v9 = *v8;
    if (*v8 == a3)
      goto LABEL_6;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & v6;
      v8 = (uint64_t *)(v4 + 104 * (v11 & v6));
      v9 = *v8;
      if (*v8 == a3)
        goto LABEL_6;
    }
  }
  v8 = (uint64_t *)(v4 + 104 * v5);
LABEL_6:
  if ((uint64_t *)(v4 + 104 * v5) == v8)
    return result;
  v12 = (unint64_t *)v8[2];
  v13 = 24;
  if (v12 == (unint64_t *)v8[1])
    v13 = 28;
  v14 = *(unsigned int *)((char *)v8 + v13);
  v15 = &v12[v14];
  if ((_DWORD)v14)
  {
    v16 = 8 * v14;
    while (*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v16 -= 8;
      if (!v16)
        goto LABEL_21;
    }
  }
  if (v12 == v15)
  {
LABEL_21:
    v17 = 0;
    v21 = 1;
    v12 = v15;
  }
  else
  {
    v17 = 0;
    v18 = v12;
LABEL_16:
    ++v17;
    v19 = v18 + 1;
    while (v19 != v15)
    {
      v20 = *v19++;
      if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v18 = v19 - 1;
        goto LABEL_16;
      }
    }
    v21 = 0;
  }
  v22 = *(unsigned int *)(a2 + 8);
  if (v17 + v22 > (unint64_t)*(unsigned int *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + v22, 8);
    v22 = *(unsigned int *)(a2 + 8);
    if ((v21 & 1) == 0)
    {
LABEL_24:
      v23 = (unint64_t *)(*(_QWORD *)a2 + 8 * v22);
      v24 = *v12;
LABEL_25:
      *v23 = v24;
      v25 = v12 + 1;
      while (v25 != v15)
      {
        v26 = *v25++;
        v24 = v26;
        if (v26 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          ++v23;
          v12 = v25 - 1;
          goto LABEL_25;
        }
      }
    }
  }
  else if ((v21 & 1) == 0)
  {
    goto LABEL_24;
  }
  *(_DWORD *)(a2 + 8) = v22 + v17;
  return result;
}

_DWORD *sub_1C5403D7C(_DWORD *result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;

  v3 = (uint64_t)result;
  v4 = *(unsigned __int8 *)(a2 + 160);
  v5 = result[2];
  if (v5 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v5 + 1, 4);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v5) = v4;
  v6 = *(_DWORD *)(v3 + 12);
  v7 = (*(_DWORD *)(v3 + 8) + 1);
  *(_DWORD *)(v3 + 8) = v7;
  v8 = *(_DWORD *)(a2 + 8);
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v7 + 1, 4);
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v7) = v8;
  v9 = *(_DWORD *)(v3 + 12);
  v10 = (*(_DWORD *)(v3 + 8) + 1);
  *(_DWORD *)(v3 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v10) = 0;
  v11 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v11;
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a2;
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      if (v11 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v11 + 1, 4);
        v11 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v11) = v15;
      v16 = *(_DWORD *)(v3 + 12);
      v17 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v17;
      if (v17 >= v16)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v17 + 1, 4);
        LODWORD(v17) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v17) = HIDWORD(v15);
      v11 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v11;
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v18 = *(_DWORD *)(a2 + 88);
  if (v11 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v11 + 1, 4);
    v11 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v11) = v18;
  v19 = *(_DWORD *)(v3 + 12);
  v20 = (*(_DWORD *)(v3 + 8) + 1);
  *(_DWORD *)(v3 + 8) = v20;
  if (v20 >= v19)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v20 + 1, 4);
    LODWORD(v20) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v20) = 0;
  v21 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v21;
  v22 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v22)
  {
    v38 = *(uint64_t **)(a2 + 80);
    v39 = 8 * v22;
    do
    {
      v40 = *v38;
      if (v21 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v21 + 1, 4);
        v21 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v21) = v40;
      v41 = *(_DWORD *)(v3 + 12);
      v42 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v42;
      if (v42 >= v41)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v42 + 1, 4);
        LODWORD(v42) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v42) = HIDWORD(v40);
      v21 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v21;
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v23 = *(_DWORD *)(a2 + 120);
  if (v21 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v21 + 1, 4);
    v21 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v21) = v23;
  v24 = *(_DWORD *)(v3 + 12);
  v25 = (*(_DWORD *)(v3 + 8) + 1);
  *(_DWORD *)(v3 + 8) = v25;
  if (v25 >= v24)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v25 + 1, 4);
    LODWORD(v25) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v25) = 0;
  v26 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v26;
  v27 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v27)
  {
    v28 = *(uint64_t **)(a2 + 112);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      if (v26 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v26 + 1, 4);
        v26 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v26) = v30;
      v31 = *(_DWORD *)(v3 + 12);
      v32 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v32;
      if (v32 >= v31)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v32 + 1, 4);
        LODWORD(v32) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v32) = HIDWORD(v30);
      v26 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v26;
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v33 = *(_DWORD *)(a2 + 152);
  if (v26 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v26 + 1, 4);
    v26 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v26) = v33;
  v34 = *(_DWORD *)(v3 + 12);
  v35 = (*(_DWORD *)(v3 + 8) + 1);
  *(_DWORD *)(v3 + 8) = v35;
  if (v35 >= v34)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v35 + 1, 4);
    LODWORD(v35) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v35) = 0;
  v36 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v36;
  v37 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v37)
  {
    v43 = *(uint64_t **)(a2 + 144);
    v44 = 8 * v37;
    do
    {
      v45 = *v43;
      if (v36 >= *(_DWORD *)(v3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v36 + 1, 4);
        v36 = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v36) = v45;
      v46 = *(_DWORD *)(v3 + 12);
      v47 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v47;
      if (v47 >= v46)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v47 + 1, 4);
        LODWORD(v47) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v47) = HIDWORD(v45);
      v36 = *(_DWORD *)(v3 + 8) + 1;
      *(_DWORD *)(v3 + 8) = v36;
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
  return result;
}

void llvm::PMTopLevelManager::schedulePass(int32x2_t *this, const void **a2)
{
  const void **v2;
  int32x2_t *v4;
  const void *v5;
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  unsigned int v9;
  _QWORD *v10;
  const void *v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t AnalysisUsage;
  uint64_t v18;
  char v19;
  const void **v20;
  uint64_t v21;
  const void *v22;
  __int32 v23;
  int32x2_t v24;
  __int32 v25;
  unsigned int v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  llvm::Pass *v34;
  int v35;
  int v36;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  llvm *v47;
  _QWORD *v48;
  uint64_t v49;
  llvm::Pass *v50;
  uint64_t v51;
  llvm *v52;
  llvm *v53;
  uint64_t v54;
  size_t v55;
  const void *v56;
  size_t v57;
  llvm::raw_ostream *v58;
  llvm::Pass *v59;
  _BYTE *v60;
  llvm *v61;
  void *v62;
  _BYTE *v63;
  llvm *v64;
  _OWORD *v65;
  _BYTE *v66;
  const void **v67;
  uint64_t v68;
  llvm *AnalysisPass;
  llvm *v70;
  llvm *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  llvm *v75;
  _WORD *v76;
  _OWORD *v77;
  _BYTE *v78;
  llvm *v79;
  _WORD *v80;
  uint64_t v81;
  _BYTE *v82;
  size_t v83;
  const void *v84;
  size_t v85;
  _BYTE *v86;
  _OWORD *v87;
  _BOOL8 shouldPrintBeforePass;
  uint64_t v89;
  _BOOL8 shouldPrintAfterPass;
  llvm *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  _QWORD *v106;
  llvm::ImmutablePass *v107;
  llvm::PMTopLevelManager **v108;
  _QWORD *v109;
  llvm::Pass *v110;
  unint64_t v111;
  uint64_t v112;
  const void **v113;
  const void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  llvm *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD v136[6];
  _QWORD v137[5];
  _QWORD v138[2];
  uint64_t v139;
  uint64_t v140;
  __int16 v141;
  _QWORD v142[2];
  const char *v143;
  __int16 v144;
  _QWORD v145[2];
  __int128 v146;
  __int16 v147;
  _QWORD v148[2];
  const char *v149;
  __int16 v150;
  void *v151[2];
  char v152;
  llvm::Pass *v153;

  v2 = a2;
  v153 = (llvm::Pass *)a2;
  v4 = this + 1;
  (*((void (**)(const void **, int32x2_t *))*a2 + 8))(a2, this + 1);
  v5 = v2[2];
  v148[0] = v5;
  v137[3] = this + 82;
  v6 = this[84].i32[0];
  if (v6)
  {
    v7 = this[82];
    v8 = v6 - 1;
    v9 = v8 & ((v5 >> 4) ^ (v5 >> 9));
    v10 = (_QWORD *)(*(_QWORD *)&v7 + 16 * v9);
    v11 = (const void *)*v10;
    if ((const void *)*v10 == v5)
      goto LABEL_11;
    v12 = 0;
    v13 = 1;
    while (v11 != (const void *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (const void *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(*(_QWORD *)&v7 + 16 * v9);
      v11 = (const void *)*v10;
      if ((const void *)*v10 == v5)
        goto LABEL_11;
    }
    if (v12)
      v106 = v12;
    else
      v106 = v10;
  }
  else
  {
    v106 = 0;
  }
  v10 = sub_1C47AD254((_DWORD *)v137[3], (uint64_t)v148, v148, v106);
  *v10 = v148[0];
  v10[1] = 0;
LABEL_11:
  v16 = v10[1];
  if (v16)
    goto LABEL_12;
  v137[1] = v4;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v97 = qword_1ED830BC0[0];
  v98 = v148[0];
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
  v99 = *(_DWORD *)(v97 + 192);
  if (!v99)
    goto LABEL_181;
  v100 = *(_QWORD *)(v97 + 176);
  v101 = v99 - 1;
  v102 = (v99 - 1) & ((v98 >> 4) ^ (v98 >> 9));
  v103 = *(_QWORD *)(v100 + 16 * v102);
  if (v103 != v98)
  {
    v104 = 1;
    while (v103 != -4096)
    {
      v105 = v102 + v104++;
      v102 = v105 & v101;
      v103 = *(_QWORD *)(v100 + 16 * v102);
      if (v103 == v98)
        goto LABEL_133;
    }
LABEL_181:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v97);
    *(_QWORD *)&v136[5] = 0;
    v10[1] = 0;
    goto LABEL_135;
  }
LABEL_133:
  v16 = *(_QWORD *)(v100 + 16 * v102 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v97);
  v10[1] = v16;
  v4 = (int32x2_t *)v137[1];
  if (v16)
  {
LABEL_12:
    if (*(_BYTE *)(v16 + 41) && llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, v2[2]))
    {
      v148[0] = 0;
      if (sub_1C4926528((uint64_t)&this[79], &v153, v148))
      {
        *(_QWORD *)v148[0] = -8192;
        this[80] = vadd_s32(this[80], (int32x2_t)0x1FFFFFFFFLL);
      }
      if (v153)
        (*(void (**)(llvm::Pass *))(*(_QWORD *)v153 + 8))(v153);
      return;
    }
    *(_QWORD *)&v136[5] = v16;
    v137[1] = v4;
    LODWORD(v137[0]) = 0;
    goto LABEL_19;
  }
  *(_QWORD *)&v136[5] = 0;
LABEL_135:
  LODWORD(v137[0]) = 1;
LABEL_19:
  AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage((llvm::PMTopLevelManager *)this, (llvm::Pass *)v2);
  do
  {
    v18 = *(unsigned int *)(AnalysisUsage + 8);
    if (!(_DWORD)v18)
      break;
    v19 = 0;
    v20 = *(const void ***)AnalysisUsage;
    v21 = *(_QWORD *)AnalysisUsage + 8 * v18;
    do
    {
      v22 = *v20;
      if (llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, *v20))
        goto LABEL_39;
      v148[0] = v22;
      v23 = this[84].i32[0];
      if (!v23)
      {
        v48 = 0;
LABEL_53:
        v27 = sub_1C47AD254((_DWORD *)v137[3], (uint64_t)v148, v148, v48);
        *v27 = v148[0];
        v27[1] = 0;
        goto LABEL_33;
      }
      v24 = this[82];
      v25 = v23 - 1;
      v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
      v27 = (_QWORD *)(*(_QWORD *)&v24 + 16 * v26);
      v28 = (const void *)*v27;
      if ((const void *)*v27 != v22)
      {
        v29 = 0;
        v30 = 1;
        while (v28 != (const void *)-4096)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == (const void *)-8192;
          if (v31)
            v29 = v27;
          v32 = v26 + v30++;
          v26 = v32 & v25;
          v27 = (_QWORD *)(*(_QWORD *)&v24 + 16 * v26);
          v28 = (const void *)*v27;
          if ((const void *)*v27 == v22)
            goto LABEL_33;
        }
        if (v29)
          v48 = v29;
        else
          v48 = v27;
        goto LABEL_53;
      }
LABEL_33:
      v33 = v27[1];
      if (!v33)
      {
        if (!atomic_load(qword_1ED830BC0))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
        v38 = qword_1ED830BC0[0];
        v39 = v148[0];
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
        v40 = *(_DWORD *)(v38 + 192);
        if (!v40)
          goto LABEL_59;
        v41 = *(_QWORD *)(v38 + 176);
        v42 = v40 - 1;
        v43 = (v40 - 1) & ((v39 >> 4) ^ (v39 >> 9));
        v44 = *(_QWORD *)(v41 + 16 * v43);
        if (v44 != v39)
        {
          v45 = 1;
          while (v44 != -4096)
          {
            v46 = v43 + v45++;
            v43 = v46 & v42;
            v44 = *(_QWORD *)(v41 + 16 * v43);
            if (v44 == v39)
              goto LABEL_48;
          }
LABEL_59:
          std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v38);
          v27[1] = 0;
LABEL_60:
          v52 = llvm::dbgs(v47);
          v53 = v52;
          v54 = *((_QWORD *)v52 + 4);
          if ((unint64_t)(*((_QWORD *)v52 + 3) - v54) > 5)
          {
            *(_WORD *)(v54 + 4) = 10016;
            *(_DWORD *)v54 = 1936941392;
            *((_QWORD *)v52 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v52, "Pass '", 6uLL);
          }
          v56 = (const void *)(*((uint64_t (**)(const void **))*v2 + 2))(v2);
          v57 = v55;
          v58 = (llvm::raw_ostream *)*((_QWORD *)v53 + 4);
          if (v55 <= *((_QWORD *)v53 + 3) - (_QWORD)v58)
          {
            if (v55)
            {
              memcpy(v58, v56, v55);
              v58 = (llvm::raw_ostream *)(*((_QWORD *)v53 + 4) + v57);
              *((_QWORD *)v53 + 4) = v58;
            }
          }
          else
          {
            llvm::raw_ostream::write(v53, (const char *)v56, v55);
            v58 = (llvm::raw_ostream *)*((_QWORD *)v53 + 4);
          }
          if (*((_QWORD *)v53 + 3) - (_QWORD)v58 > 0x14uLL)
          {
            qmemcpy(v58, "' is not initialized.", 21);
            v60 = (_BYTE *)(*((_QWORD *)v53 + 4) + 21);
            *((_QWORD *)v53 + 4) = v60;
          }
          else
          {
            v58 = llvm::raw_ostream::write(v53, "' is not initialized.", 0x15uLL);
            v60 = (_BYTE *)*((_QWORD *)v53 + 4);
          }
          if (*((_BYTE **)v53 + 3) == v60)
          {
            v58 = llvm::raw_ostream::write(v53, "\n", 1uLL);
          }
          else
          {
            *v60 = 10;
            ++*((_QWORD *)v53 + 4);
          }
          v61 = llvm::dbgs(v58);
          v62 = (void *)*((_QWORD *)v61 + 4);
          if (*((_QWORD *)v61 + 3) - (_QWORD)v62 > 0x2AuLL)
          {
            qmemcpy(v62, "Verify if there is a pass dependency cycle.", 43);
            v63 = (_BYTE *)(*((_QWORD *)v61 + 4) + 43);
            *((_QWORD *)v61 + 4) = v63;
          }
          else
          {
            v61 = llvm::raw_ostream::write(v61, "Verify if there is a pass dependency cycle.", 0x2BuLL);
            v63 = (_BYTE *)*((_QWORD *)v61 + 4);
          }
          if (*((_BYTE **)v61 + 3) == v63)
          {
            v61 = llvm::raw_ostream::write(v61, "\n", 1uLL);
          }
          else
          {
            *v63 = 10;
            ++*((_QWORD *)v61 + 4);
          }
          v64 = llvm::dbgs(v61);
          v65 = (_OWORD *)*((_QWORD *)v64 + 4);
          if (*((_QWORD *)v64 + 3) - (_QWORD)v65 > 0xFuLL)
          {
            *v65 = *(_OWORD *)"Required Passes:";
            v66 = (_BYTE *)(*((_QWORD *)v64 + 4) + 16);
            *((_QWORD *)v64 + 4) = v66;
          }
          else
          {
            v64 = llvm::raw_ostream::write(v64, "Required Passes:", 0x10uLL);
            v66 = (_BYTE *)*((_QWORD *)v64 + 4);
          }
          if (*((_BYTE **)v64 + 3) == v66)
          {
            llvm::raw_ostream::write(v64, "\n", 1uLL);
          }
          else
          {
            *v66 = 10;
            ++*((_QWORD *)v64 + 4);
          }
          v67 = *(const void ***)AnalysisUsage;
          v68 = 8 * *(unsigned int *)(AnalysisUsage + 8) - 8;
          qmemcpy(v137, "Registrythe global PassR- Corruption of ", sizeof(v137));
          qmemcpy(v136, "Possible causes:pass not found! Error: Required  missing macros)uration (e.g.: m- Pass misconfig", sizeof(v136));
          while (2)
          {
            AnalysisPass = (llvm *)llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, *v67);
            v70 = llvm::dbgs(AnalysisPass);
            v71 = v70;
            v73 = (_BYTE *)*((_QWORD *)v70 + 3);
            v72 = (_BYTE *)*((_QWORD *)v70 + 4);
            if (AnalysisPass)
            {
              if (v73 == v72)
              {
                llvm::raw_ostream::write(v70, "\t", 1uLL);
              }
              else
              {
                *v72 = 9;
                ++*((_QWORD *)v70 + 4);
              }
              v84 = (const void *)(*(uint64_t (**)(llvm *))(*(_QWORD *)AnalysisPass + 16))(AnalysisPass);
              v85 = v83;
              v86 = (_BYTE *)*((_QWORD *)v71 + 4);
              if (v83 <= *((_QWORD *)v71 + 3) - (_QWORD)v86)
              {
                if (v83)
                {
                  memcpy(v86, v84, v83);
                  v86 = (_BYTE *)(*((_QWORD *)v71 + 4) + v85);
                  *((_QWORD *)v71 + 4) = v86;
                }
              }
              else
              {
                llvm::raw_ostream::write(v71, (const char *)v84, v83);
                v86 = (_BYTE *)*((_QWORD *)v71 + 4);
              }
              if (*((_BYTE **)v71 + 3) != v86)
              {
                *v86 = 10;
                ++*((_QWORD *)v71 + 4);
                goto LABEL_111;
              }
              v79 = v71;
            }
            else
            {
              if (v73 == v72)
              {
                v70 = llvm::raw_ostream::write(v70, "\t", 1uLL);
                v87 = (_OWORD *)*((_QWORD *)v71 + 4);
              }
              else
              {
                *v72 = 9;
                v87 = (_OWORD *)(*((_QWORD *)v70 + 4) + 1);
                *((_QWORD *)v70 + 4) = v87;
              }
              if (*((_QWORD *)v71 + 3) - (_QWORD)v87 > 0x2FuLL)
              {
                *v87 = v136[2];
                v87[1] = v136[1];
                v87[2] = v136[0];
                v74 = (_BYTE *)(*((_QWORD *)v71 + 4) + 48);
                *((_QWORD *)v71 + 4) = v74;
              }
              else
              {
                v70 = llvm::raw_ostream::write(v71, "Error: Required pass not found! Possible causes:", 0x30uLL);
                v74 = (_BYTE *)*((_QWORD *)v71 + 4);
              }
              if (*((_BYTE **)v71 + 3) == v74)
              {
                v70 = llvm::raw_ostream::write(v71, "\n", 1uLL);
              }
              else
              {
                *v74 = 10;
                ++*((_QWORD *)v71 + 4);
              }
              v75 = llvm::dbgs(v70);
              v76 = (_WORD *)*((_QWORD *)v75 + 4);
              if (*((_QWORD *)v75 + 3) - (_QWORD)v76 > 1uLL)
              {
                *v76 = 2313;
                v77 = (_OWORD *)(*((_QWORD *)v75 + 4) + 2);
                *((_QWORD *)v75 + 4) = v77;
              }
              else
              {
                v75 = llvm::raw_ostream::write(v75, "\t\t", 2uLL);
                v77 = (_OWORD *)*((_QWORD *)v75 + 4);
              }
              if (*((_QWORD *)v75 + 3) - (_QWORD)v77 > 0x2DuLL)
              {
                *v77 = v136[5];
                v77[1] = v136[4];
                *(_OWORD *)((char *)v77 + 30) = v136[3];
                v78 = (_BYTE *)(*((_QWORD *)v75 + 4) + 46);
                *((_QWORD *)v75 + 4) = v78;
              }
              else
              {
                v75 = llvm::raw_ostream::write(v75, "- Pass misconfiguration (e.g.: missing macros)", 0x2EuLL);
                v78 = (_BYTE *)*((_QWORD *)v75 + 4);
              }
              if (*((_BYTE **)v75 + 3) == v78)
              {
                v75 = llvm::raw_ostream::write(v75, "\n", 1uLL);
              }
              else
              {
                *v78 = 10;
                ++*((_QWORD *)v75 + 4);
              }
              v79 = llvm::dbgs(v75);
              v80 = (_WORD *)*((_QWORD *)v79 + 4);
              if (*((_QWORD *)v79 + 3) - (_QWORD)v80 > 1uLL)
              {
                *v80 = 2313;
                v81 = *((_QWORD *)v79 + 4) + 2;
                *((_QWORD *)v79 + 4) = v81;
              }
              else
              {
                v79 = llvm::raw_ostream::write(v79, "\t\t", 2uLL);
                v81 = *((_QWORD *)v79 + 4);
              }
              if ((unint64_t)(*((_QWORD *)v79 + 3) - v81) > 0x26)
              {
                *(_OWORD *)v81 = *(_OWORD *)&v137[3];
                *(_OWORD *)(v81 + 16) = *(_OWORD *)&v137[1];
                *(_QWORD *)(v81 + 31) = v137[0];
                v82 = (_BYTE *)(*((_QWORD *)v79 + 4) + 39);
                *((_QWORD *)v79 + 4) = v82;
              }
              else
              {
                v79 = llvm::raw_ostream::write(v79, "- Corruption of the global PassRegistry", 0x27uLL);
                v82 = (_BYTE *)*((_QWORD *)v79 + 4);
              }
              if (*((_BYTE **)v79 + 3) != v82)
              {
                *v82 = 10;
                ++*((_QWORD *)v79 + 4);
LABEL_111:
                ++v67;
                v68 -= 8;
                continue;
              }
            }
            break;
          }
          llvm::raw_ostream::write(v79, "\n", 1uLL);
          goto LABEL_111;
        }
LABEL_48:
        v33 = *(_QWORD *)(v41 + 16 * v43 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v38);
        v27[1] = v33;
        if (!v33)
          goto LABEL_60;
      }
      v34 = (llvm::Pass *)(*(uint64_t (**)(void))(v33 + 72))();
      v2 = (const void **)v153;
      v35 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)v153 + 72))(v153);
      if (v35 == (*(unsigned int (**)(llvm::Pass *))(*(_QWORD *)v34 + 72))(v34))
      {
        llvm::PMTopLevelManager::schedulePass((llvm::PMTopLevelManager *)this, v34);
      }
      else
      {
        v36 = (*((uint64_t (**)(const void **))*v2 + 9))(v2);
        if (v36 <= (*(int (**)(llvm::Pass *))(*(_QWORD *)v34 + 72))(v34))
        {
          (*(void (**)(llvm::Pass *))(*(_QWORD *)v34 + 8))(v34);
        }
        else
        {
          llvm::PMTopLevelManager::schedulePass((llvm::PMTopLevelManager *)this, v34);
          v19 = 1;
        }
      }
LABEL_39:
      ++v20;
    }
    while (v20 != (const void **)v21);
  }
  while ((v19 & 1) != 0);
  v49 = (*((uint64_t (**)(const void **))*v2 + 13))(v2);
  if (v49)
  {
    v107 = (llvm::ImmutablePass *)v49;
    v108 = (llvm::PMTopLevelManager **)(**(uint64_t (***)(int32x2_t *))this)(this);
    v109 = (_QWORD *)operator new();
    *v109 = 0;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v108;
    v110 = v153;
    *((_QWORD *)v153 + 1) = v109;
    v111 = llvm::PMTopLevelManager::findAnalysisUsage(v108[1], v110);
    v112 = *(unsigned int *)(v111 + 8);
    if ((_DWORD)v112)
    {
      v113 = *(const void ***)v111;
      v137[3] = *(_QWORD *)v111 + 8 * v112;
      do
      {
        v114 = *v113;
        v115 = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v108, *v113, 1);
        if (v115)
        {
          v116 = v115;
          v117 = *((_QWORD *)v110 + 1);
          v118 = *(char **)v117;
          v119 = *(char **)(v117 + 8);
          if (*(char **)v117 == v119)
          {
LABEL_147:
            v121 = 0;
          }
          else
          {
            v120 = *(char **)v117;
            while (*(const void **)v120 != v114)
            {
              v120 += 16;
              if (v120 == v119)
                goto LABEL_147;
            }
            v121 = *((_QWORD *)v120 + 1);
          }
          if (v121 != v115)
          {
            v122 = *(_QWORD *)(v117 + 16);
            if ((unint64_t)v119 >= v122)
            {
              v137[0] = (v119 - v118) >> 4;
              v124 = v137[0] + 1;
              if ((unint64_t)(v137[0] + 1) >> 60)
                abort();
              v125 = v122 - (_QWORD)v118;
              if (v125 >> 3 > v124)
                v124 = v125 >> 3;
              v126 = (unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0;
              v127 = 0xFFFFFFFFFFFFFFFLL;
              if (!v126)
                v127 = v124;
              v137[1] = v127;
              if (v127)
              {
                if (v137[1] >> 60)
                  sub_1C4764EE4();
                v128 = (char *)operator new(16 * v137[1]);
              }
              else
              {
                v128 = 0;
              }
              v129 = &v128[16 * v137[0]];
              *(_QWORD *)v129 = v114;
              *((_QWORD *)v129 + 1) = v116;
              v130 = &v128[16 * v137[0]];
              if (v118 != v119)
              {
                do
                {
                  *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
                  v130 -= 16;
                  v119 -= 16;
                }
                while (v119 != v118);
                v118 = *(char **)v117;
              }
              v123 = v129 + 16;
              *(_QWORD *)v117 = v130;
              *(_QWORD *)(v117 + 8) = v129 + 16;
              *(_QWORD *)(v117 + 16) = &v128[16 * v137[1]];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_QWORD *)v119 = v114;
              *((_QWORD *)v119 + 1) = v115;
              v123 = v119 + 16;
            }
            *(_QWORD *)(v117 + 8) = v123;
          }
        }
        ++v113;
      }
      while (v113 != (const void **)v137[3]);
    }
    llvm::PMTopLevelManager::addImmutablePass((llvm::PMTopLevelManager *)this, v107);
    llvm::PMDataManager::recordAvailableAnalysis((llvm::PMDataManager *)v108, v107);
  }
  else if ((v137[0] & 1) != 0)
  {
    v50 = v153;
    v51 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 8))(this);
    (*(void (**)(llvm::Pass *, _QWORD, uint64_t))(*(_QWORD *)v50 + 56))(v50, v137[1], v51);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)&v136[5] + 41))
    {
      v59 = v153;
    }
    else
    {
      shouldPrintBeforePass = llvm::shouldPrintBeforePass(*(void **)(*(_QWORD *)&v136[5] + 16), *(_QWORD *)(*(_QWORD *)&v136[5] + 24));
      v59 = v153;
      if (shouldPrintBeforePass)
      {
        v131 = llvm::dbgs((llvm *)shouldPrintBeforePass);
        v132 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)v59 + 16))(v59);
        v141 = 1283;
        v138[0] = "*** IR Dump Before ";
        v139 = v132;
        v140 = v133;
        v142[0] = v138;
        v143 = " (";
        v144 = 770;
        v145[0] = v142;
        v146 = *(_OWORD *)(*(_QWORD *)&v136[5] + 16);
        v147 = 1282;
        v148[0] = v145;
        v149 = ") ***";
        v150 = 770;
        llvm::Twine::str((llvm::Twine *)v148, v151);
        v134 = (*(uint64_t (**)(llvm::Pass *, llvm *, void **))(*(_QWORD *)v59 + 48))(v59, v131, v151);
        if (v152 < 0)
          operator delete(v151[0]);
        v135 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 8))(this);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 56))(v134, v137[1], v135);
      }
    }
    v89 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 8))(this);
    (*(void (**)(llvm::Pass *, _QWORD, uint64_t))(*(_QWORD *)v59 + 56))(v59, v137[1], v89);
    if (!*(_BYTE *)(*(_QWORD *)&v136[5] + 41))
    {
      shouldPrintAfterPass = llvm::shouldPrintAfterPass(*(void **)(*(_QWORD *)&v136[5] + 16), *(_QWORD *)(*(_QWORD *)&v136[5] + 24));
      if (shouldPrintAfterPass)
      {
        v91 = llvm::dbgs((llvm *)shouldPrintAfterPass);
        v92 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)v59 + 16))(v59);
        v141 = 1283;
        v138[0] = "*** IR Dump After ";
        v139 = v92;
        v140 = v93;
        v142[0] = v138;
        v143 = " (";
        v144 = 770;
        v145[0] = v142;
        v146 = *(_OWORD *)(*(_QWORD *)&v136[5] + 16);
        v147 = 1282;
        v148[0] = v145;
        v149 = ") ***";
        v150 = 770;
        llvm::Twine::str((llvm::Twine *)v148, v151);
        v94 = (*(uint64_t (**)(llvm::Pass *, llvm *, void **))(*(_QWORD *)v59 + 48))(v59, v91, v151);
        if (v152 < 0)
          operator delete(v151[0]);
        v95 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 8))(this);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v94 + 56))(v94, v137[1], v95);
      }
    }
  }
}

uint64_t llvm::PMTopLevelManager::findAnalysisPassInfo(llvm::PMTopLevelManager *this, const void *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  const void *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v15;
  const void *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  const void *v21;
  int v22;
  int v23;
  _QWORD *v24;
  const void *v25;

  v25 = a2;
  v2 = *((_DWORD *)this + 168);
  if (v2)
  {
    v3 = *((_QWORD *)this + 82);
    v4 = v2 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (_QWORD *)(v3 + 16 * v5);
    v7 = (const void *)*v6;
    if ((const void *)*v6 == a2)
      goto LABEL_11;
    v8 = 0;
    v9 = 1;
    while (v7 != (const void *)-4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == (const void *)-8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(v3 + 16 * v5);
      v7 = (const void *)*v6;
      if ((const void *)*v6 == a2)
        goto LABEL_11;
    }
    if (v8)
      v24 = v8;
    else
      v24 = v6;
  }
  else
  {
    v24 = 0;
  }
  v6 = sub_1C47AD254((_DWORD *)this + 164, (uint64_t)&v25, &v25, v24);
  *v6 = v25;
  v6[1] = 0;
LABEL_11:
  v12 = v6[1];
  if (!v12)
  {
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v15 = qword_1ED830BC0[0];
    v16 = v25;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
    v17 = *(_DWORD *)(v15 + 192);
    if (v17)
    {
      v18 = *(_QWORD *)(v15 + 176);
      v19 = v17 - 1;
      v20 = (v17 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v21 = *(const void **)(v18 + 16 * v20);
      if (v21 == v16)
      {
LABEL_20:
        v12 = *(_QWORD *)(v18 + 16 * v20 + 8);
LABEL_21:
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v15);
        v6[1] = v12;
        return v12;
      }
      v22 = 1;
      while (v21 != (const void *)-4096)
      {
        v23 = v20 + v22++;
        v20 = v23 & v19;
        v21 = *(const void **)(v18 + 16 * v20);
        if (v21 == v16)
          goto LABEL_20;
      }
    }
    v12 = 0;
    goto LABEL_21;
  }
  return v12;
}

void llvm::PMDataManager::initializeAnalysisImpl(llvm::PMTopLevelManager **this, const void ****a2)
{
  unint64_t AnalysisUsage;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t AnalysisPass;
  const void ***v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void *v14;
  unint64_t v15;
  const void **v16;
  const void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char **v25;
  const void **__p;

  AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(this[1], (llvm::Pass *)a2);
  v5 = *(unsigned int *)(AnalysisUsage + 8);
  if ((_DWORD)v5)
  {
    v6 = *(const void ***)AnalysisUsage;
    v7 = *(_QWORD *)AnalysisUsage + 8 * v5;
    do
    {
      v8 = *v6;
      AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)this, *v6, 1);
      if (AnalysisPass)
      {
        v10 = a2[1];
        v12 = *v10;
        v11 = v10[1];
        if (*v10 == v11)
        {
LABEL_13:
          v14 = 0;
        }
        else
        {
          v13 = *v10;
          while (*v13 != v8)
          {
            v13 += 2;
            if (v13 == v11)
              goto LABEL_13;
          }
          v14 = v13[1];
        }
        if (v14 != (const void *)AnalysisPass)
        {
          v15 = (unint64_t)v10[2];
          if ((unint64_t)v11 >= v15)
          {
            v25 = (char **)a2[1];
            __p = *v10;
            v17 = v10[1];
            v18 = ((char *)v11 - (char *)v12) >> 4;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60)
              abort();
            v20 = AnalysisPass;
            if ((uint64_t)(v15 - (_QWORD)v12) >> 3 > v19)
              v19 = (uint64_t)(v15 - (_QWORD)v12) >> 3;
            if (v15 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
              v19 = 0xFFFFFFFFFFFFFFFLL;
            v24 = v19;
            if (v19)
            {
              if (v19 >> 60)
                sub_1C4764EE4();
              v21 = (char *)operator new(16 * v19);
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[16 * v18];
            *(_QWORD *)v22 = v8;
            *((_QWORD *)v22 + 1) = v20;
            if (__p == v17)
            {
              v23 = &v21[16 * v18];
            }
            else
            {
              v23 = &v21[16 * v18];
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v17 - 1);
                v23 -= 16;
                v17 -= 2;
              }
              while (v17 != __p);
              __p = (const void **)*v25;
            }
            v16 = (const void **)(v22 + 16);
            *v25 = v23;
            v25[1] = v22 + 16;
            v25[2] = &v21[16 * v24];
            if (__p)
              operator delete(__p);
            v10 = (const void ***)v25;
          }
          else
          {
            *v11 = v8;
            v11[1] = (const void *)AnalysisPass;
            v16 = v11 + 2;
          }
          v10[1] = v16;
        }
      }
      ++v6;
    }
    while (v6 != (const void **)v7);
  }
}

void llvm::PMDataManager::recordAvailableAnalysis(llvm::PMDataManager *this, llvm::Pass *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  llvm::PMDataManager *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  v3 = *((_QWORD *)a2 + 2);
  v5 = (char *)this + 208;
  v4 = *((_QWORD *)this + 26);
  v6 = *((_DWORD *)this + 56);
  v7 = v3 >> 4;
  if (v6)
  {
    v8 = v6 - 1;
    v9 = (v7 ^ (v3 >> 9)) & (v6 - 1);
    v10 = (uint64_t *)(v4 + 16 * v9);
    v11 = *v10;
    if (v3 == *v10)
      goto LABEL_19;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (uint64_t *)(v4 + 16 * (v15 & v8));
      v11 = *v10;
      if (v3 == *v10)
        goto LABEL_19;
    }
    if (v12)
      v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  v16 = *((_DWORD *)this + 54);
  if (4 * v16 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_48;
  }
  if (v6 + ~v16 - *((_DWORD *)this + 55) <= v6 >> 3)
  {
LABEL_48:
    v42 = this;
    v43 = v3;
    sub_1C5409888((uint64_t)this + 208, v6);
    v45 = 0;
    sub_1C4A5C500(*((_QWORD *)v42 + 26), *((_DWORD *)v42 + 56), v43, &v45);
    this = v42;
    v3 = v43;
    v10 = v45;
  }
  ++*((_DWORD *)this + 54);
  if (*v10 != -4096)
    --*((_DWORD *)this + 55);
  *v10 = v3;
  v10[1] = 0;
LABEL_19:
  v10[1] = (uint64_t)a2;
  v17 = *((_QWORD *)this + 1);
  v45 = (uint64_t *)v3;
  v18 = *(_DWORD *)(v17 + 672);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 656);
    v20 = v18 - 1;
    v21 = v20 & (v7 ^ (v3 >> 9));
    v22 = (_QWORD *)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == v3)
      goto LABEL_29;
    v24 = 0;
    v25 = 1;
    while (v23 != -4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == -8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (_QWORD *)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v3)
        goto LABEL_29;
    }
    if (v24)
      v41 = v24;
    else
      v41 = v22;
  }
  else
  {
    v41 = 0;
  }
  v22 = sub_1C47AD254((_DWORD *)(v17 + 656), (uint64_t)&v45, &v45, v41);
  *v22 = v45;
  v22[1] = 0;
LABEL_29:
  v28 = v22[1];
  if (!v28)
  {
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v32 = qword_1ED830BC0[0];
    v33 = (uint64_t)v45;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
    v34 = *(_DWORD *)(v32 + 192);
    if (v34)
    {
      v35 = *(_QWORD *)(v32 + 176);
      v36 = v34 - 1;
      v37 = (v34 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      v38 = *(_QWORD *)(v35 + 16 * v37);
      if (v38 == v33)
      {
LABEL_40:
        v28 = *(_QWORD *)(v35 + 16 * v37 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v32);
        v22[1] = v28;
        if (!v28)
          return;
        goto LABEL_30;
      }
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v37 + v39++;
        v37 = v40 & v36;
        v38 = *(_QWORD *)(v35 + 16 * v37);
        if (v38 == v33)
          goto LABEL_40;
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v32);
    v22[1] = 0;
    return;
  }
LABEL_30:
  v29 = *(uint64_t **)(v28 + 48);
  v30 = *(uint64_t **)(v28 + 56);
  while (v29 != v30)
  {
    v44 = *v29++;
    v45 = *(uint64_t **)(v44 + 32);
    sub_1C62422AC((uint64_t)v5, (uint64_t *)&v45)[1] = a2;
  }
}

uint64_t llvm::PMDataManager::findAnalysisPass(llvm::PMDataManager *this, const void *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const void *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  int v39;
  int v40;

  v3 = *((_QWORD *)this + 26);
  v4 = *((unsigned int *)this + 56);
  v5 = a2 >> 4;
  if ((_DWORD)v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    v7 = v3 + 16 * v6;
    v8 = *(const void **)v7;
    if (*(const void **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (const void *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(const void **)(v3 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = v3 + 16 * v4;
LABEL_8:
  if (v7 != v3 + 16 * v4)
    return *(_QWORD *)(v7 + 8);
  if (!a3)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v12 + 384) & 1) != 0)
  {
    v14 = v12 + 392;
    v13 = 8;
  }
  else
  {
    v13 = *(_DWORD *)(v12 + 400);
    if (!v13)
      goto LABEL_22;
    v14 = *(_QWORD *)(v12 + 392);
  }
  v15 = v13 - 1;
  v16 = (v13 - 1) & (v5 ^ (a2 >> 9));
  v17 = *(const void **)(v14 + 16 * v16);
  if (v17 != a2)
  {
    v18 = 1;
    while (v17 != (const void *)-4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v15;
      v17 = *(const void **)(v14 + 16 * v16);
      if (v17 == a2)
        goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_15:
  result = *(_QWORD *)(v14 + 16 * v16 + 8);
  if (!result)
  {
LABEL_22:
    v20 = *(unsigned int *)(v12 + 40);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v12 + 32);
      v22 = v21 + 8 * v20;
      while (1)
      {
        v23 = *(_QWORD *)(*(_QWORD *)v21 + 208);
        v24 = *(unsigned int *)(*(_QWORD *)v21 + 224);
        if (!(_DWORD)v24)
          goto LABEL_30;
        LODWORD(v25) = (v24 - 1) & (v5 ^ (a2 >> 9));
        v26 = v23 + 16 * v25;
        v27 = *(const void **)v26;
        if (*(const void **)v26 != a2)
          break;
LABEL_31:
        if (v26 != v23 + 16 * v24)
        {
          result = *(_QWORD *)(v26 + 8);
          if (result)
            return result;
        }
        v21 += 8;
        if (v21 == v22)
          goto LABEL_36;
      }
      v28 = 1;
      while (v27 != (const void *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(const void **)(v23 + 16 * v25);
        if (v27 == a2)
        {
          v26 = v23 + 16 * v25;
          goto LABEL_31;
        }
      }
LABEL_30:
      v26 = v23 + 16 * v24;
      goto LABEL_31;
    }
LABEL_36:
    v30 = *(unsigned int *)(v12 + 120);
    if (!(_DWORD)v30)
      return 0;
    v31 = *(_QWORD *)(v12 + 112);
    v32 = v31 + 8 * v30;
    v33 = v5 ^ (a2 >> 9);
    while (1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v31 + 208);
      v35 = *(unsigned int *)(*(_QWORD *)v31 + 224);
      if (!(_DWORD)v35)
        goto LABEL_44;
      LODWORD(v36) = (v35 - 1) & v33;
      v37 = v34 + 16 * v36;
      v38 = *(const void **)v37;
      if (*(const void **)v37 != a2)
        break;
LABEL_45:
      if (v37 == v34 + 16 * v35 || (result = *(_QWORD *)(v37 + 8)) == 0)
      {
        result = 0;
        v31 += 8;
        if (v31 != v32)
          continue;
      }
      return result;
    }
    v39 = 1;
    while (v38 != (const void *)-4096)
    {
      v40 = v36 + v39++;
      v36 = v40 & (v35 - 1);
      v38 = *(const void **)(v34 + 16 * v36);
      if (v38 == a2)
      {
        v37 = v34 + 16 * v36;
        goto LABEL_45;
      }
    }
LABEL_44:
    v37 = v34 + 16 * v35;
    goto LABEL_45;
  }
  return result;
}

void llvm::PMTopLevelManager::~PMTopLevelManager(llvm::PMTopLevelManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  *(_QWORD *)this = &unk_1E8168220;
  v2 = *((unsigned int *)this + 10);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 30);
    v7 = 8 * v5;
    do
    {
      if (*v6)
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 82), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 79), 8);
  sub_1C5408CA8((uint64_t)this + 536);
  sub_1C4926AE8((uint64_t)this + 536);
  llvm::FoldingSetBase::~FoldingSetBase((void **)this + 65);
  if ((*((_BYTE *)this + 384) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 49), 8);
  v8 = (char *)*((_QWORD *)this + 30);
  if (v8 != (char *)this + 256)
    free(v8);
  sub_1C5408C44((_DWORD *)this + 54);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 27), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 24), 8);
  v9 = (char *)*((_QWORD *)this + 14);
  if (v9 != (char *)this + 128)
    free(v9);
  v10 = (char *)*((_QWORD *)this + 4);
  if (v10 != (char *)this + 48)
    free(v10);
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 2) = v11;
    operator delete(v11);
  }
}

uint64_t llvm::PMDataManager::preserveHigherLevelAnalysis(llvm::PMTopLevelManager **this, llvm::Pass *a2)
{
  unint64_t AnalysisUsage;
  uint64_t v4;
  unint64_t v5;
  llvm::PMTopLevelManager *v6;
  llvm::PMTopLevelManager *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(this[1], a2);
  if (*(_BYTE *)(AnalysisUsage + 160))
    return 1;
  v4 = *((unsigned int *)this + 60);
  if (!(_DWORD)v4)
    return 1;
  v5 = AnalysisUsage;
  v6 = this[29];
  v7 = (llvm::PMTopLevelManager *)((char *)v6 + 8 * v4);
  while (1)
  {
    v8 = *(_QWORD *)v6;
    if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)v6 + 104))(*(_QWORD *)v6))
    {
      v9 = *(_QWORD *)(v5 + 112);
      v10 = *(unsigned int *)(v5 + 120);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = *(_QWORD **)(v5 + 112);
        while (*v12 != *(_QWORD *)(v8 + 16))
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = (_QWORD *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        v12 = *(_QWORD **)(v5 + 112);
      }
      if (v10 == ((uint64_t)v12 - v9) >> 3)
        return 0;
    }
    v6 = (llvm::PMTopLevelManager *)((char *)v6 + 8);
    if (v6 == v7)
      return 1;
  }
}

_BYTE *llvm::PMDataManager::removeNotPreservedAnalysis(llvm::PMDataManager *this, llvm::Pass *a2)
{
  _BYTE *result;
  _BYTE *v4;
  uint64_t v5;
  int32x2_t **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  int32x2_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm *v20;
  llvm *v21;
  uint64_t v22;
  int32x2_t *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  llvm::raw_ostream *v27;
  llvm *v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int32x2_t *v32;
  int32x2_t **v33;
  int32x2_t v34;
  int32x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  llvm *v48;
  llvm *v49;
  uint64_t v50;
  int32x2_t **v51;
  size_t v52;
  const void *v53;
  size_t v54;
  llvm::raw_ostream *v55;
  llvm *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  int32x2_t **v62;
  uint64_t v63;

  result = (_BYTE *)llvm::PMTopLevelManager::findAnalysisUsage(*((llvm::PMTopLevelManager **)this + 1), a2);
  if (!result[160])
  {
    v4 = result;
    v6 = (int32x2_t **)((char *)this + 208);
    v5 = *((_QWORD *)this + 26);
    v7 = *((unsigned int *)this + 56);
    v8 = (_QWORD *)(v5 + 16 * v7);
    if (*((_DWORD *)this + 54))
    {
      if ((_DWORD)v7)
      {
        v9 = 16 * v7;
        v10 = (_QWORD *)*((_QWORD *)this + 26);
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          v9 -= 16;
          if (!v9)
            goto LABEL_7;
        }
      }
      else
      {
        v10 = (_QWORD *)*((_QWORD *)this + 26);
      }
    }
    else
    {
LABEL_7:
      v10 = (_QWORD *)(v5 + 16 * v7);
    }
    v11 = (_QWORD *)(v5 + 16 * v7);
    v12 = (int *)&unk_1ED830000;
    v13 = (int32x2_t *)&unk_1C640E000;
    while (v10 != v11)
    {
      v14 = v10;
      v15 = v10 + 2;
      v10 = v8;
      if (v15 != v8)
      {
        while ((*v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 2;
          if (v15 == v8)
          {
            v10 = v8;
            goto LABEL_15;
          }
        }
        v10 = v15;
      }
LABEL_15:
      result = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14[1] + 104))(v14[1]);
      if (!result)
      {
        v16 = *((_QWORD *)v4 + 14);
        v17 = *((unsigned int *)v4 + 30);
        if ((_DWORD)v17)
        {
          v18 = 8 * v17;
          v19 = (_QWORD *)*((_QWORD *)v4 + 14);
          while (*v19 != *v14)
          {
            ++v19;
            v18 -= 8;
            if (!v18)
            {
              v19 = (_QWORD *)(v16 + 8 * v17);
              break;
            }
          }
        }
        else
        {
          v19 = (_QWORD *)*((_QWORD *)v4 + 14);
        }
        if (v17 == ((uint64_t)v19 - v16) >> 3)
        {
          if (v12[550] >= 4)
          {
            v62 = v6;
            v60 = v14[1];
            v20 = llvm::dbgs(0);
            v21 = v20;
            v22 = *((_QWORD *)v20 + 4);
            v23 = v13;
            if ((unint64_t)(*((_QWORD *)v20 + 3) - v22) > 4)
            {
              *(_BYTE *)(v22 + 4) = 39;
              *(_DWORD *)v22 = 539831584;
              *((_QWORD *)v20 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v20, " -- '", 5uLL);
            }
            v25 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a2 + 16))(a2);
            v26 = v24;
            v27 = (llvm::raw_ostream *)*((_QWORD *)v21 + 4);
            if (v24 <= *((_QWORD *)v21 + 3) - (_QWORD)v27)
            {
              if (v24)
              {
                memcpy(v27, v25, v24);
                v27 = (llvm::raw_ostream *)(*((_QWORD *)v21 + 4) + v26);
                *((_QWORD *)v21 + 4) = v27;
              }
            }
            else
            {
              llvm::raw_ostream::write(v21, (const char *)v25, v24);
              v27 = (llvm::raw_ostream *)*((_QWORD *)v21 + 4);
            }
            v13 = v23;
            if (*((_QWORD *)v21 + 3) - (_QWORD)v27 > 0x14uLL)
            {
              qmemcpy(v27, "' is not preserving '", 21);
              *((_QWORD *)v21 + 4) += 21;
            }
            else
            {
              v27 = llvm::raw_ostream::write(v21, "' is not preserving '", 0x15uLL);
            }
            v28 = llvm::dbgs(v27);
            v30 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
            v31 = v29;
            result = (_BYTE *)*((_QWORD *)v28 + 4);
            if (v29 <= *((_QWORD *)v28 + 3) - (_QWORD)result)
            {
              if (v29)
              {
                memcpy(result, v30, v29);
                result = (_BYTE *)(*((_QWORD *)v28 + 4) + v31);
                *((_QWORD *)v28 + 4) = result;
              }
            }
            else
            {
              llvm::raw_ostream::write(v28, (const char *)v30, v29);
              result = (_BYTE *)*((_QWORD *)v28 + 4);
            }
            v12 = (_DWORD *)&unk_1ED830000;
            if (*((_QWORD *)v28 + 3) - (_QWORD)result > 1uLL)
            {
              *(_WORD *)result = 2599;
              *((_QWORD *)v28 + 4) += 2;
            }
            else
            {
              result = llvm::raw_ostream::write(v28, "'\n", 2uLL);
            }
            v6 = v62;
          }
          *v14 = -8192;
          *((int32x2_t *)this + 27) = vadd_s32(*(int32x2_t *)((char *)this + 216), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
    v32 = v13;
    v33 = (int32x2_t **)((char *)this + 160);
    v34 = v32[212];
    do
    {
      v35 = *v33;
      if (*v33)
      {
        v36 = v35[2].u32[0];
        v37 = *(_QWORD *)v35 + 16 * v36;
        if (v35[1].i32[0])
        {
          if (v35[2].i32[0])
          {
            v38 = 16 * v36;
            v39 = (_QWORD *)*v35;
            while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v39 += 2;
              v38 -= 16;
              if (!v38)
                goto LABEL_52;
            }
          }
          else
          {
            v39 = (_QWORD *)*v35;
          }
        }
        else
        {
LABEL_52:
          v39 = (_QWORD *)(*(_QWORD *)v35 + 16 * v36);
        }
        v40 = *(_QWORD *)v35 + 16 * v36;
        while (v39 != (_QWORD *)v40)
        {
          v41 = v39;
          v42 = v39 + 2;
          v39 = (_QWORD *)v37;
          if (v42 != (_QWORD *)v37)
          {
            v39 = v42;
            while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v39 += 2;
              if (v39 == (_QWORD *)v37)
              {
                v39 = (_QWORD *)v37;
                break;
              }
            }
          }
          result = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v41[1] + 104))(v41[1]);
          if (!result)
          {
            v43 = *((_QWORD *)v4 + 14);
            v44 = *((unsigned int *)v4 + 30);
            if ((_DWORD)v44)
            {
              v45 = 8 * v44;
              v46 = (_QWORD *)*((_QWORD *)v4 + 14);
              while (*v46 != *v41)
              {
                ++v46;
                v45 -= 8;
                if (!v45)
                {
                  v46 = (_QWORD *)(v43 + 8 * v44);
                  break;
                }
              }
            }
            else
            {
              v46 = (_QWORD *)*((_QWORD *)v4 + 14);
            }
            if (v44 == ((uint64_t)v46 - v43) >> 3)
            {
              if (v12[550] >= 4)
              {
                v47 = v41[1];
                v48 = llvm::dbgs(0);
                v49 = v48;
                v50 = *((_QWORD *)v48 + 4);
                v63 = v47;
                v51 = v6;
                if ((unint64_t)(*((_QWORD *)v48 + 3) - v50) > 4)
                {
                  *(_BYTE *)(v50 + 4) = 39;
                  *(_DWORD *)v50 = 539831584;
                  *((_QWORD *)v48 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v48, " -- '", 5uLL);
                }
                v53 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a2 + 16))(a2);
                v54 = v52;
                v55 = (llvm::raw_ostream *)*((_QWORD *)v49 + 4);
                if (v52 <= *((_QWORD *)v49 + 3) - (_QWORD)v55)
                {
                  if (v52)
                  {
                    memcpy(v55, v53, v52);
                    v55 = (llvm::raw_ostream *)(*((_QWORD *)v49 + 4) + v54);
                    *((_QWORD *)v49 + 4) = v55;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v49, (const char *)v53, v52);
                  v55 = (llvm::raw_ostream *)*((_QWORD *)v49 + 4);
                }
                v6 = v51;
                if (*((_QWORD *)v49 + 3) - (_QWORD)v55 > 0x14uLL)
                {
                  qmemcpy(v55, "' is not preserving '", 21);
                  *((_QWORD *)v49 + 4) += 21;
                }
                else
                {
                  v55 = llvm::raw_ostream::write(v49, "' is not preserving '", 0x15uLL);
                }
                v56 = llvm::dbgs(v55);
                v58 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
                v59 = v57;
                result = (_BYTE *)*((_QWORD *)v56 + 4);
                if (v57 <= *((_QWORD *)v56 + 3) - (_QWORD)result)
                {
                  if (v57)
                  {
                    memcpy(result, v58, v57);
                    result = (_BYTE *)(*((_QWORD *)v56 + 4) + v59);
                    *((_QWORD *)v56 + 4) = result;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v56, (const char *)v58, v57);
                  result = (_BYTE *)*((_QWORD *)v56 + 4);
                }
                if (*((_QWORD *)v56 + 3) - (_QWORD)result > 1uLL)
                {
                  *(_WORD *)result = 2599;
                  *((_QWORD *)v56 + 4) += 2;
                }
                else
                {
                  result = llvm::raw_ostream::write(v56, "'\n", 2uLL);
                }
                v12 = (_DWORD *)&unk_1ED830000;
              }
              *v41 = -8192;
              v35[1] = vadd_s32(v35[1], v34);
            }
          }
        }
      }
      ++v33;
    }
    while (v33 != v6);
  }
  return result;
}

void llvm::PMDataManager::removeDeadPasses(uint64_t a1, uint64_t a2, const void *a3, size_t a4, int a5)
{
  _QWORD *v6;
  llvm *Uses;
  unsigned int v12;
  llvm **v14;
  uint64_t v15;
  llvm *v16;
  llvm *v17;
  llvm *v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  size_t v22;
  void *v23;
  llvm *v24;
  void *v25;
  llvm *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[13];

  v30[12] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = 0xC00000000;
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    Uses = (llvm *)llvm::PMTopLevelManager::collectLastUses(v6, (uint64_t)&v28, a2);
    v12 = v29;
    if (dword_1ED830898 >= 4 && (_DWORD)v29 != 0)
    {
      v17 = llvm::dbgs(Uses);
      v18 = v17;
      v19 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 5)
      {
        *(_WORD *)(v19 + 4) = 10016;
        *(_DWORD *)v19 = 757738784;
        *((_QWORD *)v17 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v17, " -*- '", 6uLL);
      }
      v21 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v22 = v20;
      v23 = (void *)*((_QWORD *)v18 + 4);
      if (v20 <= *((_QWORD *)v18 + 3) - (_QWORD)v23)
      {
        if (v20)
        {
          v23 = memcpy(v23, v21, v20);
          *((_QWORD *)v18 + 4) += v22;
        }
      }
      else
      {
        v23 = llvm::raw_ostream::write(v18, (const char *)v21, v20);
      }
      v24 = llvm::dbgs((llvm *)v23);
      v25 = (void *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 0x2EuLL)
      {
        qmemcpy(v25, "' is the last user of following pass instances.", 47);
        *((_QWORD *)v24 + 4) += 47;
      }
      else
      {
        v24 = llvm::raw_ostream::write(v24, "' is the last user of following pass instances.", 0x2FuLL);
      }
      v26 = llvm::dbgs(v24);
      v27 = (void *)*((_QWORD *)v26 + 4);
      if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 0x15uLL)
      {
        qmemcpy(v27, " Free these instances\n", 22);
        *((_QWORD *)v26 + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(v26, " Free these instances\n", 0x16uLL);
      }
      v12 = v29;
    }
    v14 = (llvm **)v28;
    if (v12)
    {
      v15 = 8 * v12;
      do
      {
        v16 = *v14++;
        llvm::PMDataManager::freePass(a1, v16, a3, a4, a5);
        v15 -= 8;
      }
      while (v15);
      v14 = (llvm **)v28;
    }
    if (v14 != v30)
      free(v14);
  }
}

void llvm::PMDataManager::freePass(uint64_t a1, llvm *a2, const void *a3, size_t a4, int a5)
{
  llvm::Pass *v7;
  llvm::Timer *PassTimer;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  _QWORD *v42;
  llvm::Timer *v43;
  double started;
  uint64_t v45;
  int v46;
  BOOL v47;
  _QWORD *v48;

  llvm::PMDataManager::dumpPassInfo((llvm *)a1, (uint64_t)a2, 2, a5, a3, a4);
  PassTimer = (llvm::Timer *)llvm::getPassTimer(a2, v7);
  if (PassTimer)
  {
    v43 = PassTimer;
    started = llvm::Timer::startTimer(PassTimer);
    (*(void (**)(llvm *, double))(*(_QWORD *)a2 + 88))(a2, started);
    llvm::Timer::stopTimer(v43);
  }
  else
  {
    (*(void (**)(llvm *))(*(_QWORD *)a2 + 88))(a2);
  }
  v9 = (_QWORD *)*((_QWORD *)a2 + 2);
  v10 = *(_QWORD *)(a1 + 8);
  v48 = v9;
  v11 = *(_DWORD *)(v10 + 672);
  v12 = v9 >> 4;
  if (v11)
  {
    v13 = *(_QWORD *)(v10 + 656);
    v14 = v11 - 1;
    v15 = v14 & (v12 ^ (v9 >> 9));
    v16 = (_QWORD *)(v13 + 16 * v15);
    v17 = (_QWORD *)*v16;
    if ((_QWORD *)*v16 == v9)
      goto LABEL_13;
    v18 = 0;
    v19 = 1;
    while (v17 != (_QWORD *)-4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == (_QWORD *)-8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (_QWORD *)(v13 + 16 * v15);
      v17 = (_QWORD *)*v16;
      if ((_QWORD *)*v16 == v9)
        goto LABEL_13;
    }
    if (v18)
      v42 = v18;
    else
      v42 = v16;
  }
  else
  {
    v42 = 0;
  }
  v16 = sub_1C47AD254((_DWORD *)(v10 + 656), (uint64_t)&v48, &v48, v42);
  *v16 = v48;
  v16[1] = 0;
LABEL_13:
  v22 = v16[1];
  if (!v22)
  {
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v33 = qword_1ED830BC0[0];
    v34 = v48;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
    v35 = *(_DWORD *)(v33 + 192);
    if (v35)
    {
      v36 = *(_QWORD *)(v33 + 176);
      v37 = v35 - 1;
      v38 = (v35 - 1) & ((v34 >> 4) ^ (v34 >> 9));
      v39 = *(_QWORD **)(v36 + 16 * v38);
      if (v39 == v34)
      {
LABEL_30:
        v22 = *(_QWORD *)(v36 + 16 * v38 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v33);
        v16[1] = v22;
        if (!v22)
          return;
        goto LABEL_14;
      }
      v40 = 1;
      while (v39 != (_QWORD *)-4096)
      {
        v41 = v38 + v40++;
        v38 = v41 & v37;
        v39 = *(_QWORD **)(v36 + 16 * v38);
        if (v39 == v34)
          goto LABEL_30;
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v33);
    v16[1] = 0;
    return;
  }
LABEL_14:
  LODWORD(v23) = *(_DWORD *)(a1 + 224);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD *)(a1 + 208);
    LODWORD(v25) = (v23 - 1) & (v12 ^ (v9 >> 9));
    v26 = (_QWORD *)(v24 + 16 * v25);
    v27 = (_QWORD *)*v26;
    if (v9 == (_QWORD *)*v26)
    {
LABEL_20:
      *v26 = -8192;
      *(int32x2_t *)(a1 + 216) = vadd_s32(*(int32x2_t *)(a1 + 216), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v28 = 1;
      while (v27 != (_QWORD *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v23 - 1);
        v27 = *(_QWORD **)(v24 + 16 * v25);
        if (v9 == v27)
        {
          v26 = (_QWORD *)(v24 + 16 * v25);
          goto LABEL_20;
        }
      }
    }
  }
  v30 = *(_QWORD *)(v22 + 48);
  for (i = *(_QWORD *)(v22 + 56); v30 != i; v30 += 8)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v30 + 32);
    v48 = 0;
    v46 = sub_1C4A5C500(*(_QWORD *)(a1 + 208), v23, v45, &v48);
    v23 = *(unsigned int *)(a1 + 224);
    if (v46)
      v47 = v48 == (_QWORD *)(*(_QWORD *)(a1 + 208) + 16 * v23);
    else
      v47 = 1;
    if (!v47 && (llvm *)v48[1] == a2)
    {
      *v48 = -8192;
      *(int32x2_t *)(a1 + 216) = vadd_s32(*(int32x2_t *)(a1 + 216), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
}

void llvm::PMDataManager::dumpPassInfo(llvm *a1, uint64_t a2, int a3, int a4, const void *a5, size_t a6)
{
  llvm *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  std::chrono::system_clock::time_point v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  void **p_b;
  uint64_t v22;
  const char *v23;
  size_t v24;
  llvm *v25;
  llvm *v26;
  llvm *v27;
  void *v28;
  const char *v29;
  size_t v30;
  llvm *v31;
  llvm *v32;
  void *v33;
  const char *v34;
  size_t v35;
  uint64_t v36;
  _OWORD *v37;
  size_t v38;
  const void *v39;
  size_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  const char *v46;
  void **__b;
  size_t v48;
  uint64_t v49;

  if (dword_1ED830898 < 3)
    return;
  v12 = llvm::dbgs(a1);
  v13 = v12;
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v14)
  {
    llvm::raw_ostream::write(v12, "[", 1uLL);
  }
  else
  {
    *v14 = 91;
    ++*((_QWORD *)v12 + 4);
  }
  v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v16 = llvm::operator<<(v13, 1000 * v15.__d_.__rep_);
  v17 = v16;
  v18 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 8285;
    *((_QWORD *)v16 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v16, "] ", 2uLL);
  }
  llvm::write_hex(v17, (unint64_t)a1, 3, 0, 0);
  v19 = (2 * *((_DWORD *)a1 + 94));
  v20 = v19 | 1;
  if ((v19 | 1) >= 0x17)
  {
    if ((v19 | 7) == 0x17)
      v22 = (v19 & 0xFFFFFFF8) + 8;
    else
      v22 = v19 | 7;
    p_b = (void **)operator new(v22 + 1);
    v48 = v20;
    v49 = v22 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
  }
  else
  {
    HIBYTE(v49) = v19 | 1;
    p_b = (void **)&__b;
  }
  memset(p_b, 32, v20);
  *((_BYTE *)p_b + v20) = 0;
  if (v49 >= 0)
    v23 = (const char *)&__b;
  else
    v23 = (const char *)__b;
  if (v49 >= 0)
    v24 = HIBYTE(v49) & 0x7F;
  else
    v24 = v48;
  v25 = llvm::raw_ostream::write(v17, v23, v24);
  if (SHIBYTE(v49) < 0)
    operator delete(__b);
  switch(a3)
  {
    case 2:
      v31 = llvm::dbgs(v25);
      v32 = v31;
      v33 = (void *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v33 > 0xEuLL)
      {
        qmemcpy(v33, " Freeing Pass '", 15);
        v45 = *((_QWORD *)v31 + 4) + 15;
        goto LABEL_60;
      }
      v34 = " Freeing Pass '";
      v35 = 15;
LABEL_32:
      llvm::raw_ostream::write(v31, v34, v35);
      goto LABEL_33;
    case 1:
      v31 = llvm::dbgs(v25);
      v32 = v31;
      v36 = *((_QWORD *)v31 + 4);
      if ((unint64_t)(*((_QWORD *)v31 + 3) - v36) > 0x12)
      {
        *(_DWORD *)(v36 + 15) = 656436847;
        *(_OWORD *)v36 = *(_OWORD *)"Made Modification '";
        v45 = *((_QWORD *)v31 + 4) + 19;
        goto LABEL_60;
      }
      v34 = "Made Modification '";
      v35 = 19;
      goto LABEL_32;
    case 0:
      v31 = llvm::dbgs(v25);
      v32 = v31;
      v37 = (_OWORD *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v37 <= 0xFuLL)
      {
        v34 = "Executing Pass '";
        v35 = 16;
        goto LABEL_32;
      }
      *v37 = *(_OWORD *)"Executing Pass '";
      v45 = *((_QWORD *)v31 + 4) + 16;
LABEL_60:
      *((_QWORD *)v32 + 4) = v45;
LABEL_33:
      v39 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v40 = v38;
      v25 = (llvm *)*((_QWORD *)v32 + 4);
      if (v38 <= *((_QWORD *)v32 + 3) - (_QWORD)v25)
      {
        if (v38)
        {
          v25 = (llvm *)memcpy(v25, v39, v38);
          *((_QWORD *)v32 + 4) += v40;
        }
      }
      else
      {
        v25 = llvm::raw_ostream::write(v32, (const char *)v39, v38);
      }
      break;
  }
  switch(a4)
  {
    case 3:
      v26 = llvm::dbgs(v25);
      v27 = v26;
      v28 = (void *)*((_QWORD *)v26 + 4);
      if (*((_QWORD *)v26 + 3) - (_QWORD)v28 <= 0xEuLL)
      {
        v29 = "' on Function '";
        v30 = 15;
        goto LABEL_46;
      }
      qmemcpy(v28, "' on Function '", 15);
      v44 = (_BYTE *)(*((_QWORD *)v26 + 4) + 15);
      goto LABEL_66;
    case 4:
      v27 = llvm::dbgs(v25);
      v41 = (_QWORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v41 <= 0xCuLL)
      {
        v29 = "' on Module '";
        goto LABEL_41;
      }
      v46 = "' on Module '";
      goto LABEL_63;
    case 5:
      v27 = llvm::dbgs(v25);
      v41 = (_QWORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v41 <= 0xCuLL)
      {
        v29 = "' on Region '";
LABEL_41:
        v26 = v27;
        v30 = 13;
        goto LABEL_46;
      }
      v46 = "' on Region '";
LABEL_63:
      *v41 = *(_QWORD *)v46;
      *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v46 + 5);
      v44 = (_BYTE *)(*((_QWORD *)v27 + 4) + 13);
      goto LABEL_66;
    case 6:
      v26 = llvm::dbgs(v25);
      v27 = v26;
      v42 = *((_QWORD *)v26 + 4);
      if ((unint64_t)(*((_QWORD *)v26 + 3) - v42) <= 0xA)
      {
        v29 = "' on Loop '";
        v30 = 11;
        goto LABEL_46;
      }
      *(_DWORD *)(v42 + 7) = 656437359;
      *(_QWORD *)v42 = *(_QWORD *)"' on Loop '";
      v44 = (_BYTE *)(*((_QWORD *)v26 + 4) + 11);
      goto LABEL_66;
    case 7:
      v26 = llvm::dbgs(v25);
      v27 = v26;
      v43 = (void *)*((_QWORD *)v26 + 4);
      if (*((_QWORD *)v26 + 3) - (_QWORD)v43 > 0x16uLL)
      {
        qmemcpy(v43, "' on Call Graph Nodes '", 23);
        v44 = (_BYTE *)(*((_QWORD *)v26 + 4) + 23);
LABEL_66:
        *((_QWORD *)v27 + 4) = v44;
      }
      else
      {
        v29 = "' on Call Graph Nodes '";
        v30 = 23;
LABEL_46:
        llvm::raw_ostream::write(v26, v29, v30);
        v44 = (_BYTE *)*((_QWORD *)v27 + 4);
      }
      if (a6 <= *((_QWORD *)v27 + 3) - (_QWORD)v44)
      {
        if (a6)
        {
          memcpy(v44, a5, a6);
          v44 = (_BYTE *)(*((_QWORD *)v27 + 4) + a6);
          *((_QWORD *)v27 + 4) = v44;
        }
      }
      else
      {
        llvm::raw_ostream::write(v27, (const char *)a5, a6);
        v44 = (_BYTE *)*((_QWORD *)v27 + 4);
      }
      if (*((_QWORD *)v27 + 3) - (_QWORD)v44 > 4uLL)
      {
        v44[4] = 10;
        *(_DWORD *)v44 = 774778407;
        *((_QWORD *)v27 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v27, "'...\n", 5uLL);
      }
      break;
    default:
      return;
  }
}

void llvm::PMDataManager::add(llvm::PMDataManager *this, llvm::Pass *a2, char a3)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  llvm::Pass *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  const void *v21;
  uint64_t AnalysisPassInfo;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  void *v31;
  uint64_t v32;
  _BYTE v33[96];
  llvm::Pass **v34;
  uint64_t v35;
  _QWORD v36[14];

  v36[12] = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)a2 + 1) = v6;
  v34 = (llvm::Pass **)v36;
  v35 = 0xC00000000;
  if ((a3 & 1) != 0)
  {
    v31 = v33;
    v32 = 0xC00000000;
    v28 = v30;
    v29 = 0x800000000;
    v25 = v27;
    v26 = 0x800000000;
    v7 = *((_DWORD *)this + 94);
    llvm::PMDataManager::collectRequiredAndUsedAnalyses((llvm::PMTopLevelManager **)this, (uint64_t)&v28, (uint64_t)&v25, a2);
    if ((_DWORD)v29)
    {
      v8 = (char *)v28;
      v9 = 8 * v29;
      do
      {
        v10 = *(llvm::Pass **)v8;
        if (v7 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) + 24) + 376))
        {
          v14 = v32;
          if (v32 >= (unint64_t)HIDWORD(v32))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v32 + 1, 8);
            v14 = v32;
          }
          *((_QWORD *)v31 + v14) = v10;
          v13 = &v32;
        }
        else
        {
          v11 = v35;
          if (v35 >= (unint64_t)HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
            v11 = v35;
          }
          v34[v11] = v10;
          LODWORD(v35) = v35 + 1;
          v12 = *((unsigned int *)this + 60);
          if (v12 >= *((unsigned int *)this + 61))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 232, (uint64_t)this + 248, v12 + 1, 8);
            v12 = *((unsigned int *)this + 60);
          }
          *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v12) = v10;
          v13 = (uint64_t *)((char *)this + 240);
        }
        ++*(_DWORD *)v13;
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    v15 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a2 + 112))(a2);
    v16 = v32;
    if (!v15)
    {
      if (v32 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v32 + 1, 8);
        v16 = v32;
      }
      *((_QWORD *)v31 + v16) = a2;
      v16 = v32 + 1;
      LODWORD(v32) = v32 + 1;
    }
    llvm::PMTopLevelManager::setLastUser(*((llvm::PMTopLevelManager **)this + 1), (llvm::Pass **)v31, v16, (uint64_t)a2);
    if ((_DWORD)v35)
    {
      v17 = (*(uint64_t (**)(llvm::PMDataManager *))(*(_QWORD *)this + 16))(this);
      llvm::PMTopLevelManager::setLastUser(*((llvm::PMTopLevelManager **)this + 1), v34, v35, v17);
      LODWORD(v35) = 0;
    }
    if ((_DWORD)v26)
    {
      v19 = (const void **)v25;
      v20 = 8 * v26;
      do
      {
        v21 = *v19++;
        AnalysisPassInfo = llvm::PMTopLevelManager::findAnalysisPassInfo(*((llvm::PMTopLevelManager **)this + 1), v21);
        v23 = (*(uint64_t (**)(void))(AnalysisPassInfo + 72))();
        (*(void (**)(llvm::PMDataManager *, llvm::Pass *, uint64_t))(*(_QWORD *)this + 24))(this, a2, v23);
        v20 -= 8;
      }
      while (v20);
    }
    llvm::PMDataManager::removeNotPreservedAnalysis(this, a2);
    llvm::PMDataManager::recordAvailableAnalysis(this, a2);
    v18 = *((unsigned int *)this + 6);
    if (v18 >= *((_DWORD *)this + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 16, (uint64_t)this + 32, v18 + 1, 8);
      LODWORD(v18) = *((_DWORD *)this + 6);
    }
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v18) = a2;
    ++*((_DWORD *)this + 6);
    if (v25 != v27)
      free(v25);
    if (v28 != v30)
      free(v28);
    if (v31 != v33)
      free(v31);
  }
  else
  {
    v24 = *((unsigned int *)this + 6);
    if (v24 >= *((_DWORD *)this + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 16, (uint64_t)this + 32, v24 + 1, 8);
      LODWORD(v24) = *((_DWORD *)this + 6);
    }
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v24) = a2;
    ++*((_DWORD *)this + 6);
  }
  if (v34 != v36)
    free(v34);
}

uint64_t llvm::PMDataManager::collectRequiredAndUsedAnalyses(llvm::PMTopLevelManager **a1, uint64_t a2, uint64_t a3, llvm::Pass *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  result = llvm::PMTopLevelManager::findAnalysisUsage(a1[1], a4);
  v8 = result;
  v9 = *(unsigned int *)(result + 152);
  if ((_DWORD)v9)
  {
    v18 = *(const void ***)(result + 144);
    v19 = 8 * v9;
    do
    {
      result = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)a1, *v18, 1);
      if (result)
      {
        v20 = result;
        v21 = *(unsigned int *)(a2 + 8);
        if (v21 >= *(unsigned int *)(a2 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 8);
          v21 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = v20;
        ++*(_DWORD *)(a2 + 8);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v10 = *(unsigned int *)(v8 + 8);
  if ((_DWORD)v10)
  {
    v11 = *(const void ***)v8;
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      result = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)a1, *v11, 1);
      if (result)
      {
        v14 = result;
        v15 = *(unsigned int *)(a2 + 8);
        v16 = *(unsigned int *)(a2 + 12);
        v17 = a2;
      }
      else
      {
        v15 = *(unsigned int *)(a3 + 8);
        v16 = *(unsigned int *)(a3 + 12);
        v17 = a3;
        v14 = (uint64_t)v13;
      }
      if (v15 >= v16)
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v17, v17 + 16, v15 + 1, 8);
        v15 = *(unsigned int *)(v17 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v15) = v14;
      ++*(_DWORD *)(v17 + 8);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void llvm::PMDataManager::dumpLastUses(llvm::PMDataManager *this, llvm::Pass *a2, int a3)
{
  _QWORD *v3;
  llvm *Uses;
  uint64_t *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  void *p_p;
  const char *v17;
  size_t v18;
  void *__p;
  size_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[13];

  v24[12] = *MEMORY[0x1E0C80C00];
  if (dword_1ED830898 >= 4)
  {
    v22 = v24;
    v23 = 0xC00000000;
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    if (v3)
    {
      Uses = (llvm *)llvm::PMTopLevelManager::collectLastUses(v3, (uint64_t)&v22, (uint64_t)a2);
      v6 = (uint64_t *)v22;
      if ((_DWORD)v23)
      {
        v7 = (2 * a3);
        v8 = (v7 & 0xFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v8 = v7 | 7;
        v9 = v8 + 1;
        v10 = v8 - 0x7FFFFFFFFFFFFFFFLL;
        v11 = 8 * v23;
        while (1)
        {
          v12 = *v6;
          v13 = llvm::dbgs(Uses);
          v14 = v13;
          v15 = (_WORD *)*((_QWORD *)v13 + 4);
          if (*((_QWORD *)v13 + 3) - (_QWORD)v15 > 1uLL)
          {
            *v15 = 11565;
            *((_QWORD *)v13 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v13, "--", 2uLL);
          }
          if (v7 >= 0x17)
          {
            p_p = operator new(v9);
            v20 = v7;
            v21 = v10;
            __p = p_p;
          }
          else
          {
            HIBYTE(v21) = v7;
            p_p = &__p;
            if (!(_DWORD)v7)
              goto LABEL_14;
          }
          memset(p_p, 32, v7);
LABEL_14:
          *((_BYTE *)p_p + v7) = 0;
          if (v21 >= 0)
            v17 = (const char *)&__p;
          else
            v17 = (const char *)__p;
          if (v21 >= 0)
            v18 = HIBYTE(v21) & 0x7F;
          else
            v18 = v20;
          llvm::raw_ostream::write(v14, v17, v18);
          if (SHIBYTE(v21) < 0)
            operator delete(__p);
          Uses = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 128))(v12, 0);
          ++v6;
          v11 -= 8;
          if (!v11)
          {
            v6 = (uint64_t *)v22;
            break;
          }
        }
      }
      if (v6 != v24)
        free(v6);
    }
  }
}

llvm *llvm::PMDataManager::dumpRequiredSet(llvm *this, const llvm::Pass *a2)
{
  llvm *v3;
  _QWORD v4[2];
  _QWORD v5[10];
  _QWORD v6[4];
  _QWORD v7[4];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (dword_1ED830898 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = v6;
    v5[9] = 0x200000000;
    v6[2] = v7;
    v6[3] = 0x200000000;
    v7[2] = &v8;
    v7[3] = 0;
    v8 = 0;
    v3 = this;
    (*(void (**)(const llvm::Pass *, _QWORD *))(*(_QWORD *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Required", 8uLL, (unint64_t)a2, (uint64_t)v4);
    return (llvm *)sub_1C5408458((uint64_t)v4);
  }
  return this;
}

llvm *llvm::PMDataManager::dumpAnalysisUsage(llvm *result, const void *a2, size_t a3, unint64_t a4, uint64_t a5)
{
  llvm *v9;
  llvm *v10;
  size_t v11;
  void **p_b;
  uint64_t v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  void **v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  void ***v27;
  void **v28;
  void ***v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  void **v33;
  llvm *v34;
  llvm *v35;
  _BYTE *v36;
  const char *v37;
  unint64_t v38;
  size_t v39;
  unint64_t v41;
  void **v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  void **v47;
  int v48;
  int v49;
  uint64_t v50;
  void ***v51;
  void **__b;
  size_t v53;
  uint64_t v54;

  if (*(_DWORD *)(a5 + 8))
  {
    v9 = result;
    v10 = llvm::dbgs(result);
    llvm::write_hex(v10, a4, 3, 0, 0);
    v11 = (2 * *((_DWORD *)v9 + 94) + 3);
    if (v11 >= 0x17)
    {
      if ((v11 | 7) == 0x17)
        v13 = (v11 & 0xFFFFFFF8) + 8;
      else
        v13 = v11 | 7;
      p_b = (void **)operator new(v13 + 1);
      v53 = v11;
      v54 = v13 - 0x7FFFFFFFFFFFFFFFLL;
      __b = p_b;
    }
    else
    {
      HIBYTE(v54) = 2 * *((_BYTE *)v9 + 376) + 3;
      p_b = (void **)&__b;
    }
    memset(p_b, 32, v11);
    *((_BYTE *)p_b + v11) = 0;
    if (v54 >= 0)
      v14 = (const char *)&__b;
    else
      v14 = (const char *)__b;
    if (v54 >= 0)
      v15 = HIBYTE(v54) & 0x7F;
    else
      v15 = v53;
    llvm::raw_ostream::write(v10, v14, v15);
    v16 = (_QWORD *)*((_QWORD *)v10 + 4);
    if (a3 <= *((_QWORD *)v10 + 3) - (_QWORD)v16)
    {
      if (a3)
      {
        memcpy(v16, a2, a3);
        v16 = (_QWORD *)(*((_QWORD *)v10 + 4) + a3);
        *((_QWORD *)v10 + 4) = v16;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, (const char *)a2, a3);
      v16 = (_QWORD *)*((_QWORD *)v10 + 4);
    }
    if (*((_QWORD *)v10 + 3) - (_QWORD)v16 > 9uLL)
    {
      *((_WORD *)v16 + 4) = 14963;
      *v16 = *(_QWORD *)" Analyses:";
      *((_QWORD *)v10 + 4) += 10;
    }
    else
    {
      v16 = llvm::raw_ostream::write(v10, " Analyses:", 0xAuLL);
    }
    if (SHIBYTE(v54) < 0)
      operator delete(__b);
    if (!*(_DWORD *)(a5 + 8))
    {
LABEL_23:
      result = llvm::dbgs((llvm *)v16);
      v17 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v17 >= *((_QWORD *)result + 3))
        return llvm::raw_ostream::write(result, 10);
      *((_QWORD *)result + 4) = v17 + 1;
      *v17 = 10;
      return result;
    }
    v18 = 0;
    v19 = 0;
    while (1)
    {
      if (v19)
      {
        v16 = llvm::dbgs((llvm *)v16);
        v20 = (_BYTE *)v16[4];
        if ((unint64_t)v20 >= v16[3])
        {
          v16 = llvm::raw_ostream::write((llvm::raw_ostream *)v16, 44);
        }
        else
        {
          v16[4] = v20 + 1;
          *v20 = 44;
        }
      }
      v21 = *((_QWORD *)v9 + 1);
      v22 = *(void ***)(*(_QWORD *)a5 + 8 * v18);
      __b = v22;
      v23 = *(_DWORD *)(v21 + 672);
      if (v23)
      {
        v24 = *(_QWORD *)(v21 + 656);
        v25 = v23 - 1;
        v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
        v27 = (void ***)(v24 + 16 * v26);
        v28 = *v27;
        if (*v27 == v22)
          goto LABEL_40;
        v29 = 0;
        v30 = 1;
        while (v28 != (void **)-4096)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == (void **)-8192;
          if (v31)
            v29 = v27;
          v32 = v26 + v30++;
          v26 = v32 & v25;
          v27 = (void ***)(v24 + 16 * v26);
          v28 = *v27;
          if (*v27 == v22)
            goto LABEL_40;
        }
        if (v29)
          v51 = v29;
        else
          v51 = v27;
      }
      else
      {
        v51 = 0;
      }
      v16 = sub_1C47AD254((_DWORD *)(v21 + 656), (uint64_t)&__b, &__b, v51);
      v27 = (void ***)v16;
      *v16 = __b;
      v16[1] = 0;
LABEL_40:
      v33 = v27[1];
      if (v33)
        goto LABEL_41;
      if (!atomic_load(qword_1ED830BC0))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
      v41 = qword_1ED830BC0[0];
      v42 = __b;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
      v43 = *(_DWORD *)(v41 + 192);
      if (!v43)
        goto LABEL_65;
      v44 = *(_QWORD *)(v41 + 176);
      v45 = v43 - 1;
      v46 = (v43 - 1) & ((v42 >> 4) ^ (v42 >> 9));
      v47 = *(void ***)(v44 + 16 * v46);
      if (v47 != v42)
      {
        v48 = 1;
        while (v47 != (void **)-4096)
        {
          v49 = v46 + v48++;
          v46 = v49 & v45;
          v47 = *(void ***)(v44 + 16 * v46);
          if (v47 == v42)
            goto LABEL_58;
        }
LABEL_65:
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v41);
        v27[1] = 0;
        goto LABEL_59;
      }
LABEL_58:
      v33 = *(void ***)(v44 + 16 * v46 + 8);
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v41);
      v27[1] = v33;
      if (v33)
      {
LABEL_41:
        v34 = llvm::dbgs((llvm *)v16);
        v35 = v34;
        v36 = (_BYTE *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v36 >= *((_QWORD *)v34 + 3))
        {
          llvm::raw_ostream::write(v34, 32);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v36 + 1;
          *v36 = 32;
        }
        v37 = (const char *)*v33;
        v38 = (unint64_t)v33[1];
        v16 = (_QWORD *)*((_QWORD *)v35 + 4);
        if (v38 <= *((_QWORD *)v35 + 3) - (_QWORD)v16)
        {
          if (v38)
          {
            v16 = memcpy(v16, v37, (size_t)v33[1]);
            *((_QWORD *)v35 + 4) += v38;
          }
          goto LABEL_49;
        }
        v16 = v35;
        v39 = (size_t)v33[1];
        goto LABEL_46;
      }
LABEL_59:
      v16 = llvm::dbgs((llvm *)v16);
      v50 = v16[4];
      if ((unint64_t)(v16[3] - v50) > 0x12)
      {
        *(_DWORD *)(v50 + 15) = 1936941392;
        *(_OWORD *)v50 = *(_OWORD *)" Uninitialized Pass";
        v16[4] += 19;
        goto LABEL_49;
      }
      v37 = " Uninitialized Pass";
      v39 = 19;
LABEL_46:
      v16 = llvm::raw_ostream::write((llvm::raw_ostream *)v16, v37, v39);
LABEL_49:
      v18 = (v19 + 1);
      v19 = v18;
      if (*(_DWORD *)(a5 + 8) == (_DWORD)v18)
        goto LABEL_23;
    }
  }
  return result;
}

llvm *llvm::PMDataManager::dumpPreservedSet(llvm *this, const llvm::Pass *a2)
{
  llvm *v3;
  _QWORD v4[2];
  _QWORD v5[10];
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[4];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1ED830898 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = &v6;
    v5[9] = 0x200000000;
    v7[0] = v8;
    v7[1] = 0x200000000;
    v8[2] = &v9;
    v8[3] = 0;
    v9 = 0;
    v3 = this;
    (*(void (**)(const llvm::Pass *, _QWORD *))(*(_QWORD *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Preserved", 9uLL, (unint64_t)a2, (uint64_t)v7);
    return (llvm *)sub_1C5408458((uint64_t)v4);
  }
  return this;
}

llvm *llvm::PMDataManager::dumpUsedSet(llvm *this, const llvm::Pass *a2)
{
  llvm *v3;
  _QWORD v4[2];
  _QWORD v5[10];
  _QWORD v6[4];
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dword_1ED830898 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = v6;
    v5[9] = 0x200000000;
    v6[2] = &v7;
    v6[3] = 0x200000000;
    v8[0] = &v9;
    v8[1] = 0;
    v9 = 0;
    v3 = this;
    (*(void (**)(const llvm::Pass *, _QWORD *))(*(_QWORD *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Used", 4uLL, (unint64_t)a2, (uint64_t)v8);
    return (llvm *)sub_1C5408458((uint64_t)v4);
  }
  return this;
}

void llvm::PMDataManager::~PMDataManager(llvm::PMDataManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;

  *(_QWORD *)this = off_1E8168250;
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v5 = (char *)*((_QWORD *)this + 29);
  if (v5 != (char *)this + 248)
    free(v5);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 26), 8);
  v6 = (char *)*((_QWORD *)this + 2);
  if (v6 != (char *)this + 32)
    free(v6);
}

uint64_t llvm::AnalysisResolver::getAnalysisIfAvailable(llvm::PMDataManager **this, const void *a2)
{
  return llvm::PMDataManager::findAnalysisPass(this[3], a2, 1);
}

uint64_t llvm::AnalysisResolver::findImplPass(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

void llvm::legacy::FunctionPassManager::~FunctionPassManager(llvm::legacy::FunctionPassManager *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E8168290;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E8168290;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E8168290;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::legacy::FunctionPassManager::run(llvm::legacy::FunctionPassManagerImpl **this, llvm::Module **a2)
{
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  llvm::Module::materialize(a2[5], (llvm::GlobalValue *)a2, &v12);
  v4 = v12;
  v12 = 0;
  if (!v4)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v4 + 48))(v4, &llvm::ErrorList::ID))
  {
    v5 = (uint64_t *)*((_QWORD *)v4 + 1);
    v6 = (uint64_t *)*((_QWORD *)v4 + 2);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v16 = v7;
        v8 = *v5;
        *v5 = 0;
        v14 = v8;
        sub_1C5409940(&v15, &v14);
        sub_1C6174794(&v16, &v15, &v17);
        v7 = v17;
        v17 = 0;
        if (v15)
          (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
        v9 = v14;
        v14 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (v16)
          (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
        ++v5;
      }
      while (v5 != v6);
    }
    v13 = v7;
    v10 = *(void (**)(void))(*(_QWORD *)v4 + 8);
  }
  else
  {
    v17 = v4;
    sub_1C5409940(&v13, &v17);
    if (!v17)
      goto LABEL_19;
    v10 = *(void (**)(void))(*(_QWORD *)v17 + 8);
  }
  v10();
LABEL_19:
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  return llvm::legacy::FunctionPassManagerImpl::run(this[1], (llvm::Function *)a2);
}

uint64_t llvm::FPPassManager::runOnModule(llvm::FPPassManager *this, llvm::Module *a2)
{
  char *v2;
  char *v3;
  int v5;
  llvm::Function *v6;

  v2 = (char *)a2 + 24;
  v3 = (char *)*((_QWORD *)a2 + 4);
  if (v3 == (char *)a2 + 24)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v3)
        v6 = (llvm::Function *)(v3 - 56);
      else
        v6 = 0;
      v5 |= llvm::FPPassManager::runOnFunction(this, v6);
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t llvm::FPPassManager::doInitialization(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 56))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4);
      v5 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  return v5 & 1;
}

uint64_t llvm::FPPassManager::doFinalization(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 56) - 1 < 0)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    v4 = 0;
    v5 = 8 * (*(_DWORD *)(a1 + 56) - 1);
    do
    {
      v4 |= (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + v5) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + v5), a2);
      v5 -= 8;
    }
    while (v5 != -8);
  }
  return v4 & 1;
}

void llvm::legacy::PassManager::add(llvm::legacy::PassManager *this, const void **a2)
{
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*((_QWORD *)this + 1) + 416), a2);
}

uint64_t llvm::legacy::PassManager::run(llvm::legacy::PassManagerImpl **this, llvm::Module *a2)
{
  return llvm::legacy::PassManagerImpl::run(this[1], a2);
}

void llvm::ModulePass::assignPassManager(llvm::Pass *a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) - 8) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 8) - 8));
  if (v6 >= 2 && v6 != a3)
  {
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8);
      v9 = *(_DWORD *)(v8 + 216);
      if (v9 || *(_DWORD *)(v8 + 220))
      {
        v10 = (unsigned int *)(v8 + 208);
        v11 = *(unsigned int *)(v8 + 224);
        if (v11 > 4 * v9 && v11 >= 0x41)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8);
          sub_1C4926838(v10);
          v8 = v17;
        }
        else
        {
          if ((_DWORD)v11)
          {
            v12 = *(_QWORD **)v10;
            v13 = 16 * v11;
            do
            {
              *v12 = -4096;
              v12 += 2;
              v13 -= 16;
            }
            while (v13);
          }
          *(_QWORD *)(v8 + 216) = 0;
        }
      }
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 160) = 0u;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v14 - 8;
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 - 16) + 40))(*(_QWORD *)(v14 - 16));
    }
    while (v15 >= 2 && v15 != a3);
  }
  llvm::PMDataManager::add(*(llvm::PMDataManager **)(*(_QWORD *)(a2 + 8) - 8), a1, 1);
}

void llvm::FunctionPass::assignPassManager(llvm::Pass *a1, llvm::PMStack *a2)
{
  llvm::PMDataManager *v4;
  llvm::PMDataManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(llvm::PMDataManager **)(*((_QWORD *)a2 + 1) - 8);
  if ((*(int (**)(llvm::PMDataManager *))(*(_QWORD *)v4 + 40))(v4) >= 4)
  {
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)a2 + 1) - 8);
      sub_1C4A5A548((unsigned int *)(v15 + 208));
      *(_OWORD *)(v15 + 176) = 0u;
      *(_OWORD *)(v15 + 192) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      v16 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v16 - 8;
      v4 = *(llvm::PMDataManager **)(v16 - 16);
    }
    while ((*(int (**)(llvm::PMDataManager *))(*(_QWORD *)v4 + 40))(v4) > 3);
  }
  if ((*(unsigned int (**)(llvm::PMDataManager *))(*(_QWORD *)v4 + 40))(v4) == 3)
  {
    v5 = v4;
  }
  else
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 16) = &llvm::FPPassManager::ID;
    *(_DWORD *)(v6 + 24) = 4;
    *(_QWORD *)(v6 + 32) = &unk_1E81683B8;
    v5 = (llvm::PMDataManager *)(v6 + 32);
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = v6 + 64;
    *(_QWORD *)(v6 + 56) = 0x1000000000;
    *(_QWORD *)(v6 + 240) = 0;
    *(_QWORD *)(v6 + 248) = 0;
    *(_DWORD *)(v6 + 256) = 0;
    *(_QWORD *)(v6 + 264) = v6 + 280;
    *(_QWORD *)(v6 + 272) = 0x1000000000;
    *(_DWORD *)(v6 + 408) = 0;
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 208) = 0u;
    *(_OWORD *)(v6 + 224) = 0u;
    *(_QWORD *)v6 = &off_1E8168308;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    if (v7 != *(_QWORD *)a2)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        v11 = (char *)v5 + 8 * v9++;
        *((_QWORD *)v11 + 20) = v10 + 208;
      }
      while (v7 != v8);
    }
    v12 = *((_QWORD *)v4 + 1);
    v13 = *(unsigned int *)(v12 + 120);
    if (v13 >= *(_DWORD *)(v12 + 124))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 112, v12 + 128, v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(v12 + 120);
    }
    *(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * v13) = v5;
    ++*(_DWORD *)(v12 + 120);
    v14 = (*(uint64_t (**)(llvm::PMDataManager *))(*(_QWORD *)v4 + 40))(v4);
    (*(void (**)(uint64_t, llvm::PMStack *, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2, v14);
    llvm::PMStack::push(a2, v5);
  }
  llvm::PMDataManager::add(v5, a1, 1);
}

uint64_t sub_1C54080CC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C54080D4(uint64_t a1)
{
  return a1 - 32;
}

uint64_t sub_1C54080DC()
{
  return 3;
}

uint64_t sub_1C54080E4()
{
  return 1;
}

_QWORD *sub_1C54080EC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81686C8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C540812C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C540824C(v17);
  }
}

uint64_t sub_1C540824C(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C5408264(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8168660;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E81686C8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C54082F4(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C5408300(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C5408310(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8168718;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C540837C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C5408390(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C5408398(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81686C8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C54083E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C54083F0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C5408404(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C5408418(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C540842C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C5408458(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 144);
  if (v2 != (void *)(a1 + 160))
    free(v2);
  v3 = *(void **)(a1 + 112);
  if (v3 != (void *)(a1 + 128))
    free(v3);
  v4 = *(void **)(a1 + 80);
  if (v4 != (void *)(a1 + 96))
    free(v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

void sub_1C54084D4(_QWORD *a1)
{
  llvm::PMDataManager *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E8168758;
  a1[4] = &unk_1E8168810;
  v2 = (llvm::PMDataManager *)(a1 + 4);
  v3 = a1[55];
  v4 = a1[56];
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v3 += 16;
  }
  sub_1C5408A20(a1 + 52);
  llvm::PMDataManager::~PMDataManager(v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C540854C(_QWORD *a1)
{
  sub_1C54084D4(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5408570()
{
  return "Module Pass Manager";
}

uint64_t sub_1C5408580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::createPrintModulePass(a2, a3, 0);
}

void sub_1C5408590(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C540859C(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C54085A4(uint64_t a1, int a2)
{
  llvm *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Pass *v10;
  uint64_t v11;

  v4 = llvm::dbgs((llvm *)a1);
  v5 = llvm::raw_ostream::indent(v4, 2 * a2);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x12)
  {
    *(_DWORD *)(v6 + 15) = 175269223;
    *(_OWORD *)v6 = *(_OWORD *)"ModulePass Manager\n";
    *((_QWORD *)v5 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v5, "ModulePass Manager\n", 0x13uLL);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v7 = 0;
    v8 = (a2 + 1);
    v9 = (a2 + 2);
    do
    {
      v10 = *(llvm::Pass **)(*(_QWORD *)(a1 + 48) + 8 * v7);
      (*(void (**)(llvm::Pass *, uint64_t))(*(_QWORD *)v10 + 128))(v10, v8);
      v11 = sub_1C6241ED4(a1 + 416, (uint64_t)v10);
      if (*(_QWORD *)(a1 + 448) != v11)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 128))(*(_QWORD *)(v11 + 8), v9);
      llvm::PMDataManager::dumpLastUses((llvm::PMDataManager *)(a1 + 32), v10, v8);
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 56));
  }
}

void sub_1C54086B8(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  llvm::PMTopLevelManager *v20;
  llvm::Pass *AnalysisPass;
  unint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35[2];
  llvm::Pass *v36[2];

  v36[1] = *(llvm::Pass **)MEMORY[0x1E0C80C00];
  v34 = a2;
  v5 = a1 + 416;
  v6 = *(int32x2_t **)sub_1C5408A60(a1 + 416, &v34);
  if (!v6)
  {
    v6 = (int32x2_t *)operator new();
    v32 = sub_1C6241C64((uint64_t)v6);
    *(_QWORD *)(v32 + 40) = v32 + 416;
    *(_QWORD *)sub_1C5408A60(v5, &v34) = v6;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)a3[2];
  v35[0] = v8;
  v9 = *(_DWORD *)(v7 + 672);
  if (v9)
  {
    v10 = *(_QWORD *)(v7 + 656);
    v11 = v9 - 1;
    v12 = v11 & ((v8 >> 4) ^ (v8 >> 9));
    v13 = (_QWORD *)(v10 + 16 * v12);
    v14 = (void *)*v13;
    if ((void *)*v13 == v8)
      goto LABEL_13;
    v15 = 0;
    v16 = 1;
    while (v14 != (void *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (void *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (_QWORD *)(v10 + 16 * v12);
      v14 = (void *)*v13;
      if ((void *)*v13 == v8)
        goto LABEL_13;
    }
    if (v15)
      v33 = v15;
    else
      v33 = v13;
  }
  else
  {
    v33 = 0;
  }
  v13 = sub_1C47AD254((_DWORD *)(v7 + 656), (uint64_t)v35, v35, v33);
  *v13 = v35[0];
  v13[1] = 0;
LABEL_13:
  v19 = v13[1];
  if (!v19)
  {
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v23 = qword_1ED830BC0[0];
    v24 = v35[0];
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
    v25 = *(_DWORD *)(v23 + 192);
    if (v25)
    {
      v26 = *(_QWORD *)(v23 + 176);
      v27 = v25 - 1;
      v28 = (v25 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      v29 = *(void **)(v26 + 16 * v28);
      if (v29 == v24)
      {
LABEL_30:
        v19 = *(_QWORD *)(v26 + 16 * v28 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v23);
        v13[1] = v19;
        if (v19)
          goto LABEL_14;
LABEL_19:
        llvm::PMTopLevelManager::schedulePass(v6 + 52, a3);
        AnalysisPass = (llvm::Pass *)a3;
        goto LABEL_20;
      }
      v30 = 1;
      while (v29 != (void *)-4096)
      {
        v31 = v28 + v30++;
        v28 = v31 & v27;
        v29 = *(void **)(v26 + 16 * v28);
        if (v29 == v24)
          goto LABEL_30;
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v23);
    v13[1] = 0;
    goto LABEL_19;
  }
LABEL_14:
  if (!*(_BYTE *)(v19 + 41))
    goto LABEL_19;
  v20 = v6 ? (llvm::PMTopLevelManager *)&v6[52] : 0;
  AnalysisPass = (llvm::Pass *)llvm::PMTopLevelManager::findAnalysisPass(v20, a3[2]);
  if (!AnalysisPass)
    goto LABEL_19;
LABEL_20:
  v35[0] = v36;
  v36[0] = AnalysisPass;
  v35[1] = (void *)0x100000001;
  llvm::PMTopLevelManager::setLastUser((llvm::PMTopLevelManager *)&v6[52], v36, 1, v34);
  if (v35[0] != v36)
    free(v35[0]);
}

uint64_t sub_1C5408950(uint64_t a1, uint64_t a2, const void *a3, llvm::Function *a4)
{
  llvm::legacy::FunctionPassManagerImpl *v6;
  llvm::PMTopLevelManager *v7;
  uint64_t v9;

  v9 = a2;
  v6 = *(llvm::legacy::FunctionPassManagerImpl **)sub_1C5408A60(a1 + 416, &v9);
  llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly((uint64_t)v6);
  llvm::legacy::FunctionPassManagerImpl::run(v6, a4);
  if (v6)
    v7 = (llvm::legacy::FunctionPassManagerImpl *)((char *)v6 + 416);
  else
    v7 = 0;
  return llvm::PMTopLevelManager::findAnalysisPass(v7, a3);
}

uint64_t sub_1C54089C8()
{
  return 1;
}

void sub_1C54089D0(uint64_t a1)
{
  sub_1C54084D4((_QWORD *)(a1 - 32));
}

void sub_1C54089D8(uint64_t a1)
{
  sub_1C54084D4((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5408A00(uint64_t a1)
{
  return a1 - 32;
}

void sub_1C5408A08(uint64_t a1, uint64_t a2, const void **a3)
{
  sub_1C54086B8(a1 - 32, a2, a3);
}

uint64_t sub_1C5408A10(uint64_t a1, uint64_t a2, const void *a3, llvm::Function *a4)
{
  return sub_1C5408950(a1 - 32, a2, a3, a4);
}

uint64_t sub_1C5408A18()
{
  return 1;
}

_QWORD *sub_1C5408A20(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C5408A60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v4 = *a2;
  v14 = v4;
  v15 = 0;
  *(_QWORD *)&v13 = 0;
  if (sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v4, &v13))
  {
    v5 = *(_DWORD *)(v13 + 8);
    v6 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v8 = sub_1C6241F40(a1, &v14, (_QWORD *)v13);
    v9 = a2;
    v10 = v8;
    *v8 = v4;
    *((_DWORD *)v8 + 2) = 0;
    v13 = (unint64_t)*v9;
    v11 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v11 < *(_QWORD *)(a1 + 40))
    {
      *v11 = v13;
      v12 = v11 + 1;
    }
    else
    {
      v12 = sub_1C4E3D7FC((void **)(a1 + 24), &v13);
    }
    *(_QWORD *)(a1 + 32) = v12;
    v6 = *(_QWORD *)(a1 + 24);
    v5 = (((unint64_t)v12 - v6) >> 4) - 1;
    *((_DWORD *)v10 + 2) = v5;
  }
  return v6 + 16 * v5 + 8;
}

_QWORD *sub_1C5408B34(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F76520(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5408BF0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5408C04()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8168850;
  return result;
}

void sub_1C5408C28(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8168850;
}

void sub_1C5408C44(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if (v1)
  {
    v2 = 104 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

uint64_t sub_1C5408CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t j;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; i <= v8; i += 176)
      {
        v10 = *(void **)(i - 24);
        if ((void *)(i - 8) != v10)
          free(v10);
        v11 = *(void **)(i - 56);
        if ((void *)(i - 40) != v11)
          free(v11);
        v12 = *(void **)(i - 88);
        if ((void *)(i - 72) != v12)
          free(v12);
        v13 = *(void **)(i - 168);
        if ((void *)(i - 152) != v13)
          free(v13);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v14 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD **)(a1 + 64);
    v16 = &v15[2 * v14];
    do
    {
      v17 = *v15 + v15[1];
      for (j = ((*v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; j <= v17; j += 176)
      {
        v19 = *(void **)(j - 24);
        if ((void *)(j - 8) != v19)
          free(v19);
        v20 = *(void **)(j - 56);
        if ((void *)(j - 40) != v20)
          free(v20);
        v21 = *(void **)(j - 88);
        if ((void *)(j - 72) != v21)
          free(v21);
        v22 = *(void **)(j - 168);
        if ((void *)(j - 152) != v22)
          free(v22);
      }
      v15 += 2;
    }
    while (v15 != v16);
  }
  return sub_1C4926A50(a1);
}

uint64_t *sub_1C5408E54(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C5408F34(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C5408FBC(a1, v7);
    v8 = 0;
    sub_1C5408F34(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C5408F34(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C5408FBC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5409074(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5409074(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5408F34(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

double sub_1C5409120(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C5409218(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_8;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_8:
    sub_1C54092A4(a1, v8);
    v9 = 0;
    sub_1C5409218(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 40;
  *(_QWORD *)(v6 + 16) = v6 + 40;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(v6 + 24) = 8;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1C5409218(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 104 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 104 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C54092A4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(104 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5409368(a1, v4, v4 + 104 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 104 * v10;
    do
    {
      *result = -4096;
      result += 13;
      v11 -= 104;
    }
    while (v11);
  }
  return result;
}

void sub_1C5409368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 104 * v6;
    do
    {
      *v7 = -4096;
      v7 += 13;
      v8 -= 104;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_1C5409218(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        v10 = v15;
        v11 = v15 + 5;
        *v15 = *(_QWORD *)v4;
        v10[1] = v11;
        v12 = *(void **)(v4 + 8);
        v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          v14 = *(unsigned int *)(v4 + 28);
          v12 = *(void **)(v4 + 16);
          if ((_DWORD)v14)
          {
            memmove(v11, v12, 8 * v14);
            v13 = *(void **)(v4 + 8);
            v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(_QWORD *)(v4 + 16) = v12;
          v13 = v12;
        }
        v10[3] = *(_QWORD *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 24) = 8;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13)
          free(v12);
      }
      v4 += 104;
    }
    while (v4 != a3);
  }
}

BOOL sub_1C5409490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  uint64_t v7;

  sub_1C5403D7C(a5, a2 + 8);
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == *((_DWORD *)a5 + 2) && memcmp(*a5, *(const void **)a3, 4 * v7) == 0;
}

uint64_t sub_1C54094EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5409598(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5409710(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5409710(a1, v14, v9);
}

uint64_t sub_1C5409710(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C54094EC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C54097D0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  _DWORD *v7;
  _QWORD *v8;

  v3 = a1[2];
  v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C5409888((uint64_t)a1, v4);
  v8 = 0;
  sub_1C4A5C500(*(_QWORD *)v7, v7[4], *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096)
    --a1[3];
  return a3;
}

_QWORD *sub_1C5409888(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DE4FD0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5409940(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7[4];
  __int16 v8;
  const char *v9;
  __int16 v10;
  _BYTE v11[40];

  v4 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  result = *a2;
  *a2 = 0;
  if (v4)
  {
    v9 = "Error reading bitcode file: ";
    v10 = 259;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 24))(v6);
    v8 = 260;
    v7[0] = (uint64_t)v6;
    sub_1C6131AAC((uint64_t *)&v9, v7, (uint64_t)v11);
    llvm::report_fatal_error((uint64_t)v11, 1);
  }
  *a1 = result;
  return result;
}

uint64_t sub_1C54099E4()
{
  int v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  unsigned __int8 *v5;
  size_t v6;
  __int128 v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  int *v12;
  char *v13;
  __int128 v14;
  int v15;
  _BOOL4 v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  int v23;
  int v24;
  int v26;
  unint64_t v27;
  _BOOL4 v28;
  _QWORD v29[2];
  __int128 v30;
  uint64_t (**v31)();
  int v32;
  char v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[22];

  v37[20] = *MEMORY[0x1E0C80C00];
  v35 = v37;
  v36 = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, 5uLL, 40);
  v0 = v36;
  v1 = (char *)v35 + 40 * v36;
  *(_QWORD *)v1 = "Disabled";
  *((_QWORD *)v1 + 1) = 8;
  *((_DWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 3) = "disable debug output";
  *((_QWORD *)v1 + 4) = 20;
  *((_QWORD *)v1 + 5) = "Arguments";
  *((_QWORD *)v1 + 6) = 9;
  *((_DWORD *)v1 + 14) = 1;
  *((_QWORD *)v1 + 8) = "print pass arguments to pass to 'opt'";
  *((_QWORD *)v1 + 9) = 37;
  *((_QWORD *)v1 + 10) = "Structure";
  *((_QWORD *)v1 + 11) = 9;
  *((_DWORD *)v1 + 24) = 2;
  *((_QWORD *)v1 + 13) = "print pass structure before run()";
  *((_QWORD *)v1 + 14) = 33;
  *((_QWORD *)v1 + 15) = "Executions";
  *((_QWORD *)v1 + 16) = 10;
  *((_DWORD *)v1 + 34) = 3;
  *((_QWORD *)v1 + 18) = "print pass name before it is executed";
  *((_QWORD *)v1 + 19) = 37;
  *((_QWORD *)v1 + 20) = "Details";
  *((_QWORD *)v1 + 21) = 7;
  *((_DWORD *)v1 + 44) = 4;
  *((_QWORD *)v1 + 23) = "print pass details when it is executed";
  *((_QWORD *)v1 + 24) = 38;
  LODWORD(v36) = v0 + 5;
  v2 = sub_1C47AD050((uint64_t)&qword_1ED830818, 0, 0);
  dword_1ED830898 = 0;
  qword_1ED8308A0 = (uint64_t)&off_1E8168718;
  unk_1ED8308A8 = 0;
  qword_1ED830818 = (uint64_t)off_1E8168660;
  qword_1ED8308B0 = (uint64_t)&off_1E81686C8;
  qword_1ED8308B8 = (uint64_t)&qword_1ED830818;
  qword_1ED8308C0 = (uint64_t)&unk_1ED8308D0;
  qword_1ED8308C8 = 0x800000000;
  qword_1ED830A50 = (uint64_t)&off_1E8168850;
  qword_1ED830A68 = (uint64_t)&qword_1ED830A50;
  llvm::cl::Option::setArgStr(v2, "debug-pass", 0xAuLL);
  word_1ED830822 = word_1ED830822 & 0xFF9F | 0x20;
  qword_1ED830838 = (uint64_t)"Print legacy PassManager debugging information";
  unk_1ED830840 = 46;
  if ((_DWORD)v36)
  {
    v3 = (char *)v35;
    v4 = (char *)v35 + 40 * v36;
    do
    {
      v5 = *(unsigned __int8 **)v3;
      v6 = *((_QWORD *)v3 + 1);
      v7 = *(_OWORD *)(v3 + 24);
      v8 = *((_DWORD *)v3 + 4);
      v29[0] = *(_QWORD *)v3;
      v29[1] = v6;
      v30 = v7;
      v31 = &off_1E8168718;
      v33 = 1;
      v32 = v8;
      v9 = qword_1ED8308C8;
      v10 = (char *)qword_1ED8308C0;
      if (qword_1ED8308C8 >= HIDWORD(qword_1ED8308C8))
      {
        v17 = qword_1ED8308C0 <= (unint64_t)v29
           && qword_1ED8308C0 + 48 * (unint64_t)qword_1ED8308C8 > (unint64_t)v29;
        v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v29 - qword_1ED8308C0) >> 4);
        v28 = v17;
        if (!v17)
          v18 = -1;
        v27 = v18;
        v34 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED8308C0, qword_1ED8308C8 + 1, 48, &v34);
        v19 = (_OWORD *)qword_1ED8308C0;
        if ((_DWORD)qword_1ED8308C8)
        {
          v20 = qword_1ED8308C0 + 48 * qword_1ED8308C8;
          v21 = v10;
          do
          {
            v22 = v19[1];
            *(_OWORD *)v21 = *v19;
            *((_OWORD *)v21 + 1) = v22;
            *((_QWORD *)v21 + 4) = &off_1E8168738;
            v23 = *((_DWORD *)v19 + 10);
            v21[44] = *((_BYTE *)v19 + 44);
            *((_DWORD *)v21 + 10) = v23;
            *((_QWORD *)v21 + 4) = &off_1E8168718;
            v19 += 3;
            v21 += 48;
          }
          while (v19 != (_OWORD *)v20);
          v19 = (_OWORD *)qword_1ED8308C0;
        }
        v24 = v34;
        if (v19 != (_OWORD *)&unk_1ED8308D0)
        {
          v26 = v34;
          free(v19);
          v24 = v26;
        }
        qword_1ED8308C0 = (uint64_t)v10;
        HIDWORD(qword_1ED8308C8) = v24;
        v11 = (char *)v29;
        if (v28)
        {
          v11 = &v10[48 * v27];
          v12 = (int *)(v11 + 40);
        }
        else
        {
          v12 = &v32;
        }
        v9 = qword_1ED8308C8;
      }
      else
      {
        v11 = (char *)v29;
        v12 = &v32;
      }
      v13 = &v10[48 * v9];
      v14 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v11;
      *((_OWORD *)v13 + 1) = v14;
      *((_QWORD *)v13 + 4) = &off_1E8168738;
      v15 = *v12;
      v13[44] = *((_BYTE *)v12 + 4);
      *((_DWORD *)v13 + 10) = v15;
      *((_QWORD *)v13 + 4) = &off_1E8168718;
      LODWORD(qword_1ED8308C8) = qword_1ED8308C8 + 1;
      llvm::cl::AddLiteralOption(qword_1ED8308B8, v5, v6);
      v3 += 40;
    }
    while (v3 != v4);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED830818);
  if (v35 != v37)
    free(v35);
  return __cxa_atexit((void (*)(void *))sub_1C54007F4, &qword_1ED830818, &dword_1C475E000);
}

uint64_t llvm::MDBuilder::createFunctionEntryCount(uint64_t **a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v7;
  llvm::ConstantInt *v8;
  char *v9;
  size_t v10;
  llvm::Value **v11;
  llvm::Value *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t Impl;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::Value **v24;
  llvm::Value *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *__base;
  size_t __nel;
  _BYTE v31[16];
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = (llvm::ConstantInt *)(*v7 + 1984);
  v32 = v34;
  v33 = 0x800000000;
  if (a3)
  {
    v9 = "synthetic_function_entry_count";
    v10 = 30;
  }
  else
  {
    v9 = "function_entry_count";
    v10 = 20;
  }
  *((_QWORD *)v32 + v33) = llvm::MDString::get(v7, (unsigned __int8 *)v9, v10);
  LODWORD(v33) = v33 + 1;
  v11 = llvm::ConstantInt::get(v8, a2, 0);
  v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v11, v12);
  v14 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 8);
    v14 = v33;
  }
  *((_QWORD *)v32 + v14) = v13;
  v15 = v33 + 1;
  LODWORD(v33) = v33 + 1;
  if (a4)
  {
    v18 = *(unint64_t **)a4;
    v19 = *(unsigned int *)(a4 + 16);
    v20 = (unint64_t *)(*(_QWORD *)a4 + 8 * v19);
    if (*(_DWORD *)(a4 + 8))
    {
      if ((_DWORD)v19)
      {
        v28 = 8 * v19;
        while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v18;
          v28 -= 8;
          if (!v28)
            goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v18 = v20;
    }
    __base = v31;
    __nel = 0x200000000;
    sub_1C618F808((unsigned int *)&__base, v18, v20, v20);
    v21 = __nel;
    if (__nel >= 2)
    {
      qsort(__base, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C61D2EA4);
      v21 = __nel;
    }
    v22 = (uint64_t *)__base;
    if (v21)
    {
      v23 = 8 * v21;
      do
      {
        v24 = llvm::ConstantInt::get(v8, *v22, 0);
        v26 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v24, v25);
        v27 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 8);
          v27 = v33;
        }
        *((_QWORD *)v32 + v27) = v26;
        LODWORD(v33) = v33 + 1;
        ++v22;
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)__base;
    }
    if (v22 != (uint64_t *)v31)
      free(v22);
    v15 = v33;
  }
  Impl = llvm::MDTuple::getImpl(*a1, v32, v15, 0, 1);
  if (v32 != v34)
    free(v32);
  return Impl;
}

uint64_t llvm::MDBuilder::createRange(uint64_t **this, const llvm::APInt *a2, const llvm::APInt *a3)
{
  uint64_t *v6;
  int v7;
  unint64_t v8;
  llvm::Value **v9;
  const llvm::APInt *v10;
  llvm::Value **v11;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;

  v6 = *this;
  v7 = *((_DWORD *)a2 + 2);
  v16 = v7;
  if (v7 <= 63)
  {
    if (v7 <= 31)
    {
      switch(v7)
      {
        case 16:
          v8 = *v6 + 1936;
          goto LABEL_4;
        case 8:
          v8 = *v6 + 1912;
          goto LABEL_4;
        case 1:
          v8 = *v6 + 1888;
          goto LABEL_4;
      }
    }
    else if (v7 == 32)
    {
      v8 = *v6 + 1960;
      goto LABEL_4;
    }
  }
  else
  {
    if (v7 == 64)
    {
      v8 = *v6 + 1984;
      goto LABEL_4;
    }
    if (v7 == 128)
    {
      v8 = *v6 + 2008;
      goto LABEL_4;
    }
  }
  v13 = sub_1C5270984(*v6 + 2168, &v16);
  v8 = *((_QWORD *)v13 + 1);
  if (!v8)
  {
    v14 = v13;
    v8 = sub_1C484358C(*v6 + 2040, 24, 3);
    v15 = v16;
    *(_QWORD *)v8 = v6;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 8) = (v15 << 8) | 0xDu;
    *((_QWORD *)v14 + 1) = v8;
  }
LABEL_4:
  v9 = llvm::ConstantInt::get((llvm::ConstantInt **)v8, a2, a3);
  v11 = llvm::ConstantInt::get((llvm::ConstantInt **)v8, a3, v10);
  return llvm::MDBuilder::createRange(this, (llvm::Constant *)v9, (llvm::Constant *)v11);
}

uint64_t llvm::MDBuilder::createRange(uint64_t **this, llvm::Constant *a2, llvm::Constant *a3)
{
  uint64_t *v4;
  llvm::Value *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (a3 == a2)
    return 0;
  v4 = *this;
  v7[0] = llvm::ValueAsMetadata::get(a2, a2);
  v7[1] = llvm::ValueAsMetadata::get(a3, v5);
  return llvm::MDTuple::getImpl(v4, v7, 2, 0, 1);
}

uint64_t llvm::MDBuilder::mergeCallbackEncodings(uint64_t **this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t Impl;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v8 = *this;
    v14 = a3;
    return llvm::MDTuple::getImpl(v8, &v14, 1, 0, 1);
  }
  v14 = v16;
  v15 = 0x400000000;
  v6 = *((unsigned int *)a2 + 2);
  v7 = (v6 + 1);
  if ((_DWORD)v6 == -1)
  {
    v7 = 0;
  }
  else
  {
    if (v7 < 5)
    {
      v10 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, (v6 + 1), 8);
      v10 = v15;
    }
    if (v7 != v10)
      bzero((char *)v14 + 8 * v10, 8 * (v7 - v10));
    LODWORD(v15) = v6 + 1;
    if (!(_DWORD)v6)
    {
      v6 = 0;
      v7 = 1;
      goto LABEL_13;
    }
  }
  v11 = 0;
  v12 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
  do
  {
    *((_QWORD *)v14 + v11) = *(_QWORD *)&v12[8 * v11];
    ++v11;
  }
  while (v6 != v11);
LABEL_13:
  *((_QWORD *)v14 + v6) = a3;
  Impl = llvm::MDTuple::getImpl(*this, v14, v7, 0, 1);
  if (v14 != v16)
    free(v14);
  return Impl;
}

llvm::MDNode *llvm::MDBuilder::createAnonymousAARoot(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  llvm::MDNode *Impl;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x300000000;
  sub_1C4848C0C((unsigned int *)&v14, 1uLL, 0);
  if (a4)
  {
    v8 = v15;
    if (v15 >= HIDWORD(v15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
      v8 = v15;
    }
    *((_QWORD *)v14 + v8) = a4;
    LODWORD(v15) = v15 + 1;
  }
  if (a3)
  {
    v9 = llvm::MDString::get(*a1, a2, a3);
    v10 = v15;
    if (v15 >= HIDWORD(v15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
      v10 = v15;
    }
    *((_QWORD *)v14 + v10) = v9;
    v11 = v15 + 1;
    LODWORD(v15) = v15 + 1;
  }
  else
  {
    v11 = v15;
  }
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*a1, v14, v11, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  if (v14 != v16)
    free(v14);
  return Impl;
}

uint64_t llvm::MDBuilder::createTBAANode(uint64_t **a1, unsigned __int8 *a2, const llvm::APInt *a3, uint64_t a4, int a5)
{
  uint64_t *v8;
  llvm::ConstantInt *v10;
  unsigned int v11;
  char v12;
  llvm::ValueHandleBase *v13;
  uint64_t *v14;
  llvm::Value *v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::ConstantInt *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (a5)
  {
    v10 = *(llvm::ConstantInt **)(*v8 + 1984);
    v11 = *(_DWORD *)(*v8 + 1992);
    LODWORD(v21) = v11 >> 8;
    if (v11 >> 8 > 0x40)
    {
      v19 = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
      v10 = v19;
    }
    else
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v20 = (_QWORD *)(v12 & 1);
    }
    v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v20, a3);
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    v14 = *a1;
    v20 = llvm::MDString::get(v14, a2, (size_t)a3);
    v21 = a4;
    v22 = llvm::ValueAsMetadata::get(v13, v15);
    v16 = v14;
    v17 = 3;
  }
  else
  {
    v20 = llvm::MDString::get(*a1, a2, (size_t)a3);
    v21 = a4;
    v16 = v8;
    v17 = 2;
  }
  return llvm::MDTuple::getImpl(v16, &v20, v17, 0, 1);
}

uint64_t llvm::MDBuilder::createAliasScopeDomain(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t *v3;
  _QWORD *v5;

  v3 = *a1;
  v5 = llvm::MDString::get(*a1, a2, a3);
  return llvm::MDTuple::getImpl(v3, &v5, 1, 0, 1);
}

uint64_t llvm::MDBuilder::createAliasScope(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v7[0] = llvm::MDString::get(*a1, a2, a3);
  v7[1] = a4;
  return llvm::MDTuple::getImpl(v5, v7, 2, 0, 1);
}

uint64_t llvm::MDBuilder::createTBAAStructNode(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t *v6;
  uint64_t v7;
  llvm::ConstantInt *v8;
  uint64_t *v9;
  unsigned int v10;
  llvm::Value **v11;
  llvm::Value *v12;
  _QWORD *v13;
  llvm::Value **v14;
  llvm::Value *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t Impl;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v3 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v20, 3 * a3, 0);
  v6 = *a1;
  v7 = v3;
  if (v3)
  {
    v8 = (llvm::ConstantInt *)(*v6 + 1984);
    v9 = (uint64_t *)(a2 + 16);
    v10 = 2;
    do
    {
      v11 = llvm::ConstantInt::get(v8, *(v9 - 2), 0);
      v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v11, v12);
      *((_QWORD *)v20 + v10 - 2) = v13;
      v14 = llvm::ConstantInt::get(v8, *(v9 - 1), 0);
      v16 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v14, v15);
      *((_QWORD *)v20 + v10 - 1) = v16;
      v17 = *v9;
      v9 += 3;
      *((_QWORD *)v20 + v10) = v17;
      v10 += 3;
      --v7;
    }
    while (v7);
    v6 = *a1;
  }
  Impl = llvm::MDTuple::getImpl(v6, v20, v21, 0, 1);
  if (v20 != v22)
    free(v20);
  return Impl;
}

uint64_t llvm::MDBuilder::createTBAAStructTypeNode(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::Value **v14;
  llvm::Value *v15;
  _QWORD *v16;
  uint64_t Impl;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v5 = a5;
  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v19, (2 * a5) | 1, 0);
  v10 = **a1;
  v11 = llvm::MDString::get(*a1, a2, a3);
  *(_QWORD *)v19 = v11;
  if (v5)
  {
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(a4 + 8 * v12);
      *((_QWORD *)v19 + (v12 + 1)) = *v13;
      v14 = llvm::ConstantInt::get((llvm::ConstantInt *)(v10 + 1984), v13[1], 0);
      v16 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v14, v15);
      v12 += 2;
      *((_QWORD *)v19 + v12) = v16;
    }
    while (2 * v5 != v12);
  }
  Impl = llvm::MDTuple::getImpl(*a1, v19, v20, 0, 1);
  if (v19 != v21)
    free(v19);
  return Impl;
}

uint64_t llvm::MDBuilder::createTBAAScalarTypeNode(uint64_t **a1, unsigned __int8 *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  uint64_t *v14;
  llvm::Value *v15;
  llvm::ConstantInt *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v9 = **a1;
  v10 = *(llvm::ConstantInt **)(v9 + 1984);
  v11 = *(unsigned int *)(v9 + 1992);
  LODWORD(v19) = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    v17 = v10;
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, a5, 0);
    v10 = v17;
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v18 = (_QWORD *)(v12 & a5);
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v18, a3);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  v14 = *a1;
  v18 = llvm::MDString::get(v14, a2, (size_t)a3);
  v19 = a4;
  v20 = llvm::ValueAsMetadata::get(v13, v15);
  return llvm::MDTuple::getImpl(v14, &v18, 3, 0, 1);
}

uint64_t llvm::MDBuilder::createTBAAStructTagNode(uint64_t **this, llvm::MDNode *a2, llvm::MDNode *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  llvm::ConstantInt *v10;
  unsigned int v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  llvm::Value *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::ValueHandleBase *v19;
  llvm::Value *v20;
  llvm::ConstantInt *v21;
  llvm::ValueHandleBase *v22;
  llvm::MDNode *v23;
  llvm::MDNode *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = **this;
  v10 = *(llvm::ConstantInt **)(v9 + 1984);
  v11 = *(_DWORD *)(v9 + 1992);
  LODWORD(v24) = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    v21 = v10;
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, a4, 0);
    v10 = v21;
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v23 = (llvm::MDNode *)(v12 & a4);
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v23, a3);
  if (v24 >= 0x41 && v23)
  {
    v22 = v13;
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    v13 = v22;
  }
  v15 = *this;
  v23 = a2;
  v24 = a3;
  v25 = llvm::ValueAsMetadata::get(v13, v14);
  if (a5)
  {
    v19 = llvm::ConstantInt::get((llvm::ConstantInt **)(v9 + 1984), 1, 0);
    v26 = llvm::ValueAsMetadata::get(v19, v20);
    v16 = v15;
    v17 = 4;
  }
  else
  {
    v16 = v15;
    v17 = 3;
  }
  return llvm::MDTuple::getImpl(v16, &v23, v17, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::createMutableTBAAAccessTag(uint64_t **this, llvm::MDNode *a2)
{
  uint64_t v4;
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  llvm::IntegerType **v8;
  llvm::MDNode *v9;
  llvm::IntegerType *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  llvm::APInt *v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t *v18;

  v4 = *((unsigned int *)a2 + 2);
  v5 = (char *)a2 - 8 * v4;
  v6 = (unsigned int *)*((_QWORD *)v5 + 1);
  v7 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 128);
  v8 = (llvm::IntegerType **)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (llvm::IntegerType **)*v8;
  v9 = *(llvm::MDNode **)v5;
  v10 = *v8;
  switch(**(_BYTE **)&v6[-2 * v6[2]])
  {
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
      v11 = 4;
      v12 = 1;
      break;
    default:
      v12 = 0;
      v11 = 3;
      break;
  }
  if (v4 <= v11)
    return a2;
  v13 = *(_QWORD *)(*(_QWORD *)&v5[8 * v11] + 128);
  v14 = (llvm::APInt *)(v13 + 24);
  v15 = *(_DWORD *)(v13 + 32);
  if (v15 <= 0x40)
  {
    if (*(_QWORD *)v14)
      goto LABEL_9;
    return a2;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v14) == v15)
    return a2;
LABEL_9:
  if ((v12 & 1) == 0)
    return (llvm::MDNode *)llvm::MDBuilder::createTBAAStructTagNode(this, v9, (llvm::MDNode *)v6, (uint64_t)v10, 0);
  v17 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 128);
  v18 = (uint64_t *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (uint64_t *)*v18;
  return (llvm::MDNode *)llvm::MDBuilder::createTBAAAccessTag(this, v9, (llvm::MDNode *)v6, v10, *v18, 0);
}

void llvm::Mangler::getNameWithPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (**v3)();
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = 0;
  v8 = 0;
  v9 = 0;
  v3 = &off_1E81A7280;
  v11 = a1;
  v10 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  sub_1C540AE88((llvm::raw_ostream *)&v3, a2, 0, a3, 0x5F005F0000uLL >> (8 * *(_DWORD *)(a3 + 28)));
  v3 = (uint64_t (**)())off_1E81A6E70;
  if (v10 == 1)
  {
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
}

void sub_1C540AE88(llvm::raw_ostream *this, uint64_t a2, int a3, uint64_t a4, char a5)
{
  size_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  void *v15;
  llvm::raw_ostream *v16;
  size_t v17;
  uint64_t v18;
  size_t v20;
  unint64_t v21;
  void *v22;
  const char *v23;
  char *v24;
  void *v25;
  const char *v26;
  char v27;
  void *v28;
  __int128 v29;
  _QWORD v30[33];

  v30[32] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = xmmword_1C64638F0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v9 = 0;
    v10 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v10 = *(const char **)a2;
        if (*(_QWORD *)a2)
          v9 = strlen(*(const char **)a2);
        else
          v9 = 0;
        break;
      case 4:
        v26 = *(const char **)a2;
        v27 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v27 >= 0)
          v10 = *(const char **)a2;
        else
          v10 = *(const char **)v26;
        if (v27 >= 0)
          v9 = v27 & 0x7F;
        else
          v9 = *((_QWORD *)v26 + 1);
        break;
      case 5:
        v10 = *(const char **)a2;
        v9 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v28);
    v10 = (const char *)v28;
    v9 = v29;
  }
  v11 = *(unsigned __int8 *)v10;
  if (v11 == 1)
  {
    v12 = v9 != 0;
    if (v9)
      v13 = v10 + 1;
    else
      v13 = v10;
    v14 = v9 - v12;
    v15 = (void *)*((_QWORD *)this + 4);
    if (v9 - v12 > *((_QWORD *)this + 3) - (_QWORD)v15)
    {
      v16 = this;
      v17 = v9 - v12;
LABEL_36:
      llvm::raw_ostream::write(v16, v13, v17);
      goto LABEL_40;
    }
    if (v9 == v12)
      goto LABEL_40;
    memcpy(v15, v13, v9 - v12);
    v20 = *((_QWORD *)this + 4) + v14;
    goto LABEL_39;
  }
  v18 = *(unsigned int *)(a4 + 28);
  if ((v18 - 3) < 2 && v11 == 63)
    a5 = 0;
  if (a3 == 2)
  {
    v21 = (_DWORD)v18 == 2;
    v22 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v22 >= v21)
    {
      if ((_DWORD)v18 == 2)
      {
        memcpy(v22, "l", 1uLL);
        *((_QWORD *)this + 4) += v21;
      }
    }
    else
    {
      if ((_DWORD)v18 == 2)
        v23 = "l";
      else
        v23 = "";
      llvm::raw_ostream::write(this, v23, (_DWORD)v18 == 2);
    }
  }
  else if (a3 == 1)
  {
    __asm { BR              X10 }
  }
  if (a5)
  {
    v24 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v24 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, a5);
    }
    else
    {
      *((_QWORD *)this + 4) = v24 + 1;
      *v24 = a5;
    }
  }
  v25 = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)v25)
  {
    v16 = this;
    v13 = v10;
    v17 = v9;
    goto LABEL_36;
  }
  if (v9)
  {
    memcpy(v25, v10, v9);
    v20 = *((_QWORD *)this + 4) + v9;
LABEL_39:
    *((_QWORD *)this + 4) = v20;
  }
LABEL_40:
  if (v28 != v30)
    free(v28);
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, int a4)
{
  int v5;
  int v6;
  uint64_t v7;
  const llvm::DataLayout *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::GlobalValue *v14;
  int v15;
  int v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v26;
  char v27;
  _BYTE *v28;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  const char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t PassPointeeByValueCopySize;
  uint64_t v57;
  uint64_t v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  llvm::raw_ostream *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  const llvm::GlobalValue *v66;

  v66 = a3;
  if (a4)
    v5 = 2;
  else
    v5 = 1;
  if ((*((_DWORD *)a3 + 8) & 0xF) == 8)
    v6 = v5;
  else
    v6 = 0;
  v7 = *((_QWORD *)a3 + 5);
  v8 = (const llvm::DataLayout *)(v7 + 272);
  if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
  {
    v30 = sub_1C6242D74((uint64_t *)this, (uint64_t *)&v66);
    v31 = *((_DWORD *)v30 + 2);
    if (!v31)
    {
      v31 = *((_DWORD *)this + 2);
      *((_DWORD *)v30 + 2) = v31;
    }
    v62 = "__unnamed_";
    v64 = v31;
    v65 = 2051;
    v27 = 0x5F005F0000uLL >> (8 * *(_DWORD *)(v7 + 300));
    goto LABEL_32;
  }
  v9 = ***(_QWORD ***)a3;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v13 = v10 + 16 * v12;
    v14 = *(const llvm::GlobalValue **)v13;
    if (*(const llvm::GlobalValue **)v13 == a3)
      goto LABEL_15;
    v15 = 1;
    while (v14 != (const llvm::GlobalValue *)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(const llvm::GlobalValue **)(v10 + 16 * v12);
      if (v14 == a3)
      {
        v13 = v10 + 16 * v12;
        goto LABEL_15;
      }
    }
  }
  v13 = v10 + 16 * v11;
LABEL_15:
  v17 = *(_QWORD **)(v13 + 8);
  v20 = *v17;
  v18 = (const char *)(v17 + 2);
  v19 = v20;
  v21 = 0x5F005F0000uLL >> (8 * *(_BYTE *)(v7 + 300));
  v62 = 0;
  v63 = 0;
  LODWORD(v64) = 0;
  v22 = sub_1C53D5A28((uint64_t)a3, (uint64_t)&v62);
  MEMORY[0x1CAA32FB4](v62, 8);
  if (v22 && *(_BYTE *)(v22 + 16))
    v22 = 0;
  if (!v19)
    goto LABEL_27;
  v23 = *(unsigned __int8 *)v18;
  if (v23 == 1)
    goto LABEL_31;
  v24 = *(_DWORD *)(v7 + 300);
  if ((v24 - 3) > 1)
  {
LABEL_27:
    if (v22)
    {
      v24 = *(_DWORD *)(v7 + 300);
      goto LABEL_29;
    }
LABEL_31:
    v65 = 261;
    v62 = v18;
    v63 = v19;
    v27 = v21;
LABEL_32:
    sub_1C540AE88(a2, (uint64_t)&v62, v6, v7 + 272, v27);
    return;
  }
  if (v23 == 63 || v22 == 0)
    goto LABEL_31;
LABEL_29:
  v26 = (*(unsigned __int16 *)(v22 + 18) >> 4) & 0x3FF;
  if (v24 != 4 && v26 != 80)
    goto LABEL_31;
  if (v26 == 65)
  {
    LOBYTE(v21) = 64;
  }
  else if (v26 == 80)
  {
    LOBYTE(v21) = 0;
  }
  v65 = 261;
  v62 = v18;
  v63 = v19;
  sub_1C540AE88(a2, (uint64_t)&v62, v6, v7 + 272, v21);
  if (v26 == 80)
  {
    v28 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 64);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v28 + 1;
      *v28 = 64;
    }
  }
  else if ((v26 - 64) > 0x10 || ((1 << (v26 - 64)) & 0x10003) == 0)
  {
    return;
  }
  v32 = *(_QWORD *)(v22 + 24);
  if (*(_DWORD *)(v32 + 8) < 0x100u
    || (v33 = *(_DWORD *)(v32 + 12), v33 == 1)
    || v33 == 2
    && (v34 = *(_QWORD *)(v22 + 112)) != 0
    && (v35 = *(_DWORD *)(v34 + 8), v35 >= 3)
    && ((v36 = *(_QWORD *)(v34 + 56)) != 0 && (*(_BYTE *)(v36 + 21) & 2) != 0
     || v35 >= 4 && (v37 = *(_QWORD *)(v34 + 64)) != 0 && (*(_BYTE *)(v37 + 21) & 2) != 0))
  {
    v61 = a2;
    v38 = *(unsigned int *)(*(_QWORD *)(v7 + 504) + 4);
    v39 = sub_1C485F330(v22);
    if (v39 == v40)
    {
      v43 = 0;
    }
    else
    {
      v41 = v39;
      v42 = v40;
      v43 = 0;
      v44 = (unint64_t)(v38 + 7) >> 3;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v41 + 8) != 15
          || (v45 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 112)) == 0
          || (v46 = *(_DWORD *)(v41 + 32) + 2, v46 >= *(_DWORD *)(v45 + 8))
          || (v57 = *(_QWORD *)(v45 + 8 * v46 + 40)) == 0
          || (*(_BYTE *)(v57 + 21) & 2) == 0)
        {
          if (llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v41))
          {
            PassPointeeByValueCopySize = llvm::Argument::getPassPointeeByValueCopySize((llvm::Argument *)v41, v8);
          }
          else
          {
            v47 = *(_QWORD *)v41;
            sub_1C4768AD0((uint64_t)v8, *(_QWORD *)v41);
            v49 = (unint64_t)(v48 + 7) >> 3;
            v51 = v50 == 1;
            llvm::DataLayout::getAlignment((uint64_t)v8, v47);
            v54 = (1 << v53) + v49 - 1;
            v55 = -(1 << v53);
            PassPointeeByValueCopySize = v54 & v55;
            if (v51)
            {
              v58 = v54 & v55;
              PassPointeeByValueCopySize = v58;
            }
          }
          v43 += (v44 - 1 + PassPointeeByValueCopySize) / v44 * v44;
        }
        v41 += 40;
      }
      while (v41 != v42);
    }
    v59 = v61;
    v60 = (_BYTE *)*((_QWORD *)v61 + 4);
    if ((unint64_t)v60 >= *((_QWORD *)v61 + 3))
    {
      v59 = llvm::raw_ostream::write(v61, 64);
    }
    else
    {
      *((_QWORD *)v61 + 4) = v60 + 1;
      *v60 = 64;
    }
    sub_1C5E21910(v59, v43, 0, 0, 0);
  }
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *a1, uint64_t a2, const llvm::GlobalValue *a3, int a4)
{
  uint64_t (**v4)();
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = &off_1E81A7280;
  v12 = a2;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::Mangler::getNameWithPrefix(a1, (llvm::raw_ostream *)&v4, a3, a4);
  v4 = (uint64_t (**)())off_1E81A6E70;
  if (v11 == 1)
  {
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  }
}

void llvm::emitLinkerFlagsForGlobalCOFF(llvm *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, const llvm::Triple *a4, llvm::Mangler *a5)
{
  int v5;
  uint64_t v10;
  unint64_t v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  BOOL v26;
  int v28;
  _BYTE *v29;
  int v30;
  _BOOL4 v32;
  uint64_t v34;
  std::string *v35;
  std::string *p_p;
  size_t size;
  size_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  const char *v43;
  int v44;
  std::string __p;
  void (**v46)(llvm::raw_ostream *__hidden);
  int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  int v53;
  std::string *p_str;
  std::string __str;
  char v56;

  v5 = *((_DWORD *)a2 + 8);
  if ((v5 & 0x300) != 0x200)
    return;
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if ((v5 & 0x800000) == 0 && *((llvm::raw_ostream **)a2 + 9) == (llvm::raw_ostream *)((char *)a2 + 72))
  {
    return;
  }
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 3) - v10;
  if (*((_DWORD *)a3 + 9) == 15 && (*((_DWORD *)a3 + 10) & 0xFFFFFFEF) == 0)
  {
    if (v11 <= 8)
    {
      v13 = " /EXPORT:";
      goto LABEL_16;
    }
    v43 = " /EXPORT:";
  }
  else
  {
    if (v11 <= 8)
    {
      v13 = " -export:";
LABEL_16:
      llvm::raw_ostream::write(this, v13, 9uLL);
      goto LABEL_17;
    }
    v43 = " -export:";
  }
  *(_BYTE *)(v10 + 8) = 58;
  *(_QWORD *)v10 = *(_QWORD *)v43;
  *((_QWORD *)this + 4) += 9;
LABEL_17:
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
LABEL_36:
    v28 = 0;
    goto LABEL_39;
  }
  v14 = ***(_QWORD ***)a2;
  v15 = *(_QWORD *)(v14 + 152);
  v16 = *(unsigned int *)(v14 + 168);
  if (!(_DWORD)v16)
    goto LABEL_24;
  LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v18 = v15 + 16 * v17;
  v19 = *(llvm::raw_ostream **)v18;
  if (*(llvm::raw_ostream **)v18 != a2)
  {
    v20 = 1;
    while (v19 != (llvm::raw_ostream *)-4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(llvm::raw_ostream **)(v15 + 16 * v17);
      if (v19 == a2)
      {
        v18 = v15 + 16 * v17;
        goto LABEL_25;
      }
    }
LABEL_24:
    v18 = v15 + 16 * v16;
  }
LABEL_25:
  v22 = *(_QWORD **)(v18 + 8);
  v23 = *v22;
  if (*v22)
  {
    v24 = (unsigned __int8 *)(v22 + 2);
    while (1)
    {
      v25 = *v24;
      if (v25 != 64)
      {
        v26 = v25 != 95 && (v25 - 48) >= 0xA;
        if (v26 && (v25 & 0xFFFFFFDF) - 65 >= 0x1A)
          break;
      }
      ++v24;
      if (!--v23)
        goto LABEL_36;
    }
  }
  v29 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v29)
  {
    v28 = 1;
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *v29 = 34;
    ++*((_QWORD *)this + 4);
    v28 = 1;
  }
LABEL_39:
  v30 = *((_DWORD *)a3 + 10);
  v32 = v30 == 1 || v30 == 18;
  if (*((_DWORD *)a3 + 9) != 15 || !v32)
  {
    llvm::Mangler::getNameWithPrefix(a4, this, a2, 0);
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    v47 = 0;
    v51 = 0;
    v52 = 0;
    v46 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_str = &__str;
    v53 = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    llvm::Mangler::getNameWithPrefix(a4, (llvm::raw_ostream *)&v46, a2, 0);
    v34 = v50 - v48;
    if (v50 != v48)
    {
      v50 = v48;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v46, v48, v34);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__str;
    else
      v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v35->__r_.__value_.__s.__data_[0] == (0x5F005F0000uLL >> (8 * *(_DWORD *)(*((_QWORD *)a2 + 5) + 300))))
    {
      std::string::basic_string(&__p, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(this, (const char *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v38 = __str.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(this, (const char *)v35, v38);
    }
    v46 = off_1E81A6E70;
    if (v53 == 1 && v48)
      MEMORY[0x1CAA32F9C](v48, 0x1000C8077774924);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v28)
  {
    v39 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v39)
    {
      llvm::raw_ostream::write(this, "\"", 1uLL);
    }
    else
    {
      *v39 = 34;
      ++*((_QWORD *)this + 4);
    }
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 8) != 14)
  {
    v40 = *((_QWORD *)this + 4);
    v41 = *((_QWORD *)this + 3) - v40;
    if (*((_DWORD *)a3 + 9) != 15 || (*((_DWORD *)a3 + 10) & 0xFFFFFFEF) != 0)
    {
      if (v41 <= 4)
      {
        v42 = ",data";
        goto LABEL_82;
      }
      *(_BYTE *)(v40 + 4) = 97;
      v44 = 1952539692;
    }
    else
    {
      if (v41 <= 4)
      {
        v42 = ",DATA";
LABEL_82:
        llvm::raw_ostream::write(this, v42, 5uLL);
        return;
      }
      *(_BYTE *)(v40 + 4) = 65;
      v44 = 1413563436;
    }
    *(_DWORD *)v40 = v44;
    *((_QWORD *)this + 4) += 5;
  }
}

void llvm::emitLinkerFlagsForUsedCOFF(llvm *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, const llvm::Triple *a4, llvm::Mangler *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  _BYTE *v24;
  _BYTE *v25;

  if (*((_DWORD *)a3 + 9) != 15 || (*((_DWORD *)a3 + 10) & 0xFFFFFFEF) != 0)
    return;
  v9 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 9)
  {
    *(_WORD *)(v9 + 8) = 14917;
    *(_QWORD *)v9 = *(_QWORD *)" /INCLUDE:";
    *((_QWORD *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, " /INCLUDE:", 0xAuLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
LABEL_27:
    llvm::Mangler::getNameWithPrefix(a4, this, a2, 0);
    return;
  }
  v10 = ***(_QWORD ***)a2;
  v11 = *(_QWORD *)(v10 + 152);
  v12 = *(unsigned int *)(v10 + 168);
  if (!(_DWORD)v12)
    goto LABEL_15;
  LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = v11 + 16 * v13;
  v15 = *(llvm::raw_ostream **)v14;
  if (*(llvm::raw_ostream **)v14 != a2)
  {
    v16 = 1;
    while (v15 != (llvm::raw_ostream *)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(llvm::raw_ostream **)(v11 + 16 * v13);
      if (v15 == a2)
      {
        v14 = v11 + 16 * v13;
        goto LABEL_16;
      }
    }
LABEL_15:
    v14 = v11 + 16 * v12;
  }
LABEL_16:
  v18 = *(_QWORD **)(v14 + 8);
  v19 = *v18;
  if (*v18)
  {
    v20 = (unsigned __int8 *)(v18 + 2);
    while (1)
    {
      v21 = *v20;
      if (v21 != 64)
      {
        v22 = v21 != 95 && (v21 - 48) >= 0xA;
        if (v22 && (v21 & 0xFFFFFFDF) - 65 >= 0x1A)
          break;
      }
      ++v20;
      if (!--v19)
        goto LABEL_27;
    }
  }
  v24 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v24)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *v24 = 34;
    ++*((_QWORD *)this + 4);
  }
  llvm::Mangler::getNameWithPrefix(a4, this, a2, 0);
  v25 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v25)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *v25 = 34;
    ++*((_QWORD *)this + 4);
  }
}

uint64_t llvm::MetadataAsValue::MetadataAsValue(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(_QWORD *)(a1 + 24) = a3;
  v5 = a1 + 24;
  if (a3)
    llvm::MetadataTracking::track(v5, a3, a1);
  return a1;
}

{
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(_QWORD *)(a1 + 24) = a3;
  v5 = a1 + 24;
  if (a3)
    llvm::MetadataTracking::track(v5, a3, a1);
  return a1;
}

uint64_t llvm::MetadataAsValue::track(llvm::MetadataAsValue *this)
{
  uint64_t result;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)*((_QWORD *)this + 3);
  result = (uint64_t)this + 24;
  v3 = v4;
  if (v4)
    return llvm::MetadataTracking::track(result, v3, (uint64_t)this);
  return result;
}

void llvm::MetadataAsValue::~MetadataAsValue(llvm::MetadataAsValue *this)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int32x2_t **v6;
  int32x2_t *v7;
  __int32 v8;
  int32x2_t v9;
  __int32 v10;
  unsigned int v11;
  uint64_t v12;
  llvm::MetadataAsValue *v13;
  char *v14;
  uint64_t v15;
  int32x2_t *v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MetadataAsValue *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  _QWORD *v30;

  v2 = (unsigned __int8 **)((char *)this + 24);
  v3 = ***(_QWORD ***)this;
  v30 = 0;
  if (sub_1C48BF0C0((uint64_t *)(v3 + 416), (_QWORD *)this + 3, &v30))
  {
    *v30 = -8192;
    *(int32x2_t *)(v3 + 424) = vadd_s32(*(int32x2_t *)(v3 + 424), (int32x2_t)0x1FFFFFFFFLL);
  }
  v4 = *v2;
  if (*v2)
    llvm::MetadataTracking::untrack((uint64_t)v2, v4);
  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsDeleted(this, (llvm::Value *)v4);
  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x8000000) != 0)
  {
    v16 = ***(int32x2_t ****)this;
    v17 = v16[49];
    v18 = v16[51].u32[0];
    if ((_DWORD)v18)
    {
      LODWORD(v19) = (v18 - 1) & ((this >> 4) ^ (this >> 9));
      v20 = *(_QWORD *)&v17 + 16 * v19;
      v21 = *(llvm::MetadataAsValue **)v20;
      if (*(llvm::MetadataAsValue **)v20 == this)
        goto LABEL_19;
      v28 = 1;
      while (v21 != (llvm::MetadataAsValue *)-4096)
      {
        v29 = v19 + v28++;
        v19 = v29 & (v18 - 1);
        v21 = *(llvm::MetadataAsValue **)(*(_QWORD *)&v17 + 16 * v19);
        if (v21 == this)
        {
          v20 = *(_QWORD *)&v17 + 16 * v19;
          goto LABEL_19;
        }
      }
    }
    v20 = *(_QWORD *)&v17 + 16 * v18;
LABEL_19:
    if (v20 != *(_QWORD *)&v17 + 16 * v18)
    {
      v22 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v20 = -8192;
      v16[50] = vadd_s32(v16[50], (int32x2_t)0x1FFFFFFFFLL);
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v22 + 8), 0);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 24) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v22 + 32), 8);
        MEMORY[0x1CAA32FC0](v22, 0x1020C4072C728BCLL);
      }
    }
    v5 = *((_DWORD *)this + 5);
  }
  if ((v5 & 0x20000000) != 0)
  {
    v6 = **(int32x2_t ****)this;
    v7 = *v6;
    v8 = (*v6)[312].i32[0];
    if (v8)
    {
      v9 = v7[310];
      v10 = v8 - 1;
      v11 = v10 & ((this >> 4) ^ (this >> 9));
      v12 = *(_QWORD *)&v9 + 40 * v11;
      v13 = *(llvm::MetadataAsValue **)v12;
      if (*(llvm::MetadataAsValue **)v12 == this)
      {
LABEL_12:
        v14 = *(char **)(v12 + 8);
        v15 = *(unsigned int *)(v12 + 16);
        if ((_DWORD)v15)
        {
          v25 = v14 - 8;
          v26 = 16 * v15;
          do
          {
            v27 = *(unsigned __int8 **)&v25[v26];
            if (v27)
              llvm::MetadataTracking::untrack((uint64_t)&v25[v26], v27);
            v26 -= 16;
          }
          while (v26);
          v14 = *(char **)(v12 + 8);
        }
        if (v14 != (char *)(v12 + 24))
          free(v14);
        *(_QWORD *)v12 = -8192;
        v7[311] = vadd_s32(v7[311], (int32x2_t)0x1FFFFFFFFLL);
        v5 = *((_DWORD *)this + 5);
      }
      else
      {
        v23 = 1;
        while (v13 != (llvm::MetadataAsValue *)-4096)
        {
          v24 = v11 + v23++;
          v11 = v24 & v10;
          v12 = *(_QWORD *)&v9 + 40 * v11;
          v13 = *(llvm::MetadataAsValue **)v12;
          if (*(llvm::MetadataAsValue **)v12 == this)
            goto LABEL_12;
        }
      }
    }
    *((_DWORD *)this + 5) = v5 & 0xDFFFFFFF;
  }
  llvm::Value::destroyValueName((uint64_t)this);
}

uint64_t llvm::MetadataAsValue::untrack(llvm::MetadataAsValue *this)
{
  uint64_t result;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  result = (uint64_t)this + 24;
  v2 = v3;
  if (v3)
    return llvm::MetadataTracking::untrack(result, v2);
  return result;
}

uint64_t llvm::MetadataAsValue::get(uint64_t *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v9;

  v9 = sub_1C540C09C(a1, a2);
  v3 = sub_1C5417220((uint64_t *)(*a1 + 416), &v9);
  v4 = v3[1];
  if (!v4)
  {
    v5 = v3;
    v4 = operator new();
    v6 = (unsigned __int8 *)v9;
    *(_QWORD *)v4 = *a1 + 1720;
    *(_QWORD *)(v4 + 8) = 0;
    v7 = *(_DWORD *)(v4 + 20) & 0xC0000000;
    *(_DWORD *)(v4 + 16) = 23;
    *(_DWORD *)(v4 + 20) = v7;
    *(_QWORD *)(v4 + 24) = v6;
    if (v6)
      llvm::MetadataTracking::track(v4 + 24, v6, v4);
    v5[1] = v4;
  }
  return v4;
}

uint64_t sub_1C540C09C(uint64_t *a1, unsigned __int8 *a2)
{
  _BYTE *v2;

  if (a2)
  {
    if (*a2 - 4 > 0x1E || *((_DWORD *)a2 + 2) != 1)
      return (uint64_t)a2;
    v2 = (_BYTE *)*((_QWORD *)a2 - 1);
    if (v2)
    {
      if (*v2 != 1)
        v2 = 0;
      if (v2)
        return (uint64_t)v2;
      return (uint64_t)a2;
    }
    a2 = 0;
  }
  return llvm::MDTuple::getImpl(a1, a2, 0, 0, 1);
}

uint64_t llvm::MetadataAsValue::getIfExists(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_1C540C09C(a1, a2);
  v4 = (uint64_t *)(*a1 + 416);
  v6 = 0;
  v7 = v3;
  if (sub_1C4DD8A9C(v4, &v7, &v6))
    return *(_QWORD *)(v6 + 8);
  else
    return 0;
}

uint64_t llvm::MetadataAsValue::handleChangedMetadata(uint64_t ***this, llvm::Metadata *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int32x2_t *v5;
  uint64_t *v6;
  uint64_t result;
  llvm::Value *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = (uint64_t *)(this + 3);
  v4 = **this;
  v11 = sub_1C540C09C(v4, (unsigned __int8 *)a2);
  v5 = (int32x2_t *)*v4;
  v6 = (uint64_t *)(*v4 + 416);
  v12 = 0;
  if (sub_1C48BF0C0(v6, v3, &v12))
  {
    *v12 = -8192;
    v5[53] = vadd_s32(v5[53], (int32x2_t)0x1FFFFFFFFLL);
  }
  if (*v3)
    llvm::MetadataTracking::untrack((uint64_t)v3, (unsigned __int8 *)*v3);
  *v3 = 0;
  result = (uint64_t)sub_1C5417220(v6, &v11);
  v8 = *(llvm::Value **)(result + 8);
  if (v8)
  {
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)this, v8, (llvm::Value *)1);
    llvm::MetadataAsValue::~MetadataAsValue((llvm::MetadataAsValue *)this);
    return MEMORY[0x1CAA32FC0]();
  }
  else
  {
    v9 = result;
    v10 = (unsigned __int8 *)v11;
    *v3 = v11;
    if (v10)
      result = llvm::MetadataTracking::track((uint64_t)v3, v10, (uint64_t)this);
    *(_QWORD *)(v9 + 8) = this;
  }
  return result;
}

uint64_t llvm::MetadataTracking::track(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;

  v6 = *a2;
  if ((v6 - 4) <= 0x1E)
  {
    if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 + 3))
      return 0;
    v9 = sub_1C540D54C((uint64_t *)a2 + 2);
    if (!v9)
    {
      v6 = *a2;
      goto LABEL_10;
    }
LABEL_13:
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)&v24 = a3;
    *((_QWORD *)&v24 + 1) = v10;
    LOBYTE(v10) = *(_BYTE *)(v9 + 16);
    v23 = a1;
    if ((v10 & 1) != 0)
    {
      v11 = v9 + 24;
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(v9 + 32);
      if (!v12)
      {
        v21 = 0;
        goto LABEL_30;
      }
      v11 = *(_QWORD *)(v9 + 24);
    }
    v13 = v12 - 1;
    v14 = v13 & ((a1 >> 4) ^ (a1 >> 9));
    v15 = (_QWORD *)(v11 + 24 * v14);
    v16 = *v15;
    if (*v15 == a1)
    {
LABEL_31:
      ++*(_QWORD *)(v9 + 8);
      return 1;
    }
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v11 + 24 * v14);
      v16 = *v15;
      if (*v15 == a1)
        goto LABEL_31;
    }
    if (v17)
      v21 = v17;
    else
      v21 = v15;
LABEL_30:
    v22 = sub_1C5417540(v9 + 16, (uint64_t)&v23, &v23, v21);
    *v22 = v23;
    *(_OWORD *)(v22 + 1) = v24;
    goto LABEL_31;
  }
  if ((v6 - 3) >= 0xFFFFFFFE)
    v8 = a2;
  else
    v8 = 0;
  if ((v6 - 3) >= 0xFFFFFFFE)
  {
    v9 = (unint64_t)(v8 + 8);
    goto LABEL_13;
  }
LABEL_10:
  if (v6 == 3)
  {
    *((_QWORD *)a2 + 1) = a1;
    return 1;
  }
  return 0;
}

unint64_t llvm::ReplaceableMetadataImpl::getOrCreate(uint64_t *a1)
{
  int v1;
  unsigned int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t *v6;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 4) > 0x1E)
  {
    v3 = v1 - 3;
    v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE)
      v5 = a1;
    else
      v5 = 0;
    v6 = v5 + 1;
    if (v4)
      return (unint64_t)v6;
    else
      return 0;
  }
  else if ((*((_BYTE *)a1 + 1) & 0x7F) == 2 || *((_DWORD *)a1 + 3))
  {
    return sub_1C540D54C(a1 + 2);
  }
  else
  {
    return 0;
  }
}

_QWORD *llvm::ReplaceableMetadataImpl::addRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;

  v5 = *(_BYTE *)(a1 + 16);
  result = (_QWORD *)(a1 + 16);
  v6 = *(result - 1);
  v18 = a2;
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = v6;
  if ((v5 & 1) != 0)
  {
    v7 = result + 1;
    v8 = 4;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 32);
    if (!v8)
    {
      v17 = 0;
LABEL_18:
      result = sub_1C5417540((uint64_t)result, (uint64_t)&v18, &v18, v17);
      *result = v18;
      *(_OWORD *)(result + 1) = v19;
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_19;
    }
    v7 = *(_QWORD **)(a1 + 24);
  }
  v9 = v8 - 1;
  v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = &v7[3 * v10];
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = &v7[3 * v10];
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_19;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
    goto LABEL_18;
  }
LABEL_19:
  *(_QWORD *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t llvm::MetadataTracking::untrack(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if ((v2 - 4) <= 0x1E)
  {
    if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 + 3))
      return result;
    v5 = *((_QWORD *)a2 + 2);
    if ((v5 & 4) == 0)
      return result;
    v4 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return result;
LABEL_10:
    v6 = result;
    return sub_1C540CB8C(v4 + 16, &v6);
  }
  if ((v2 - 3) >= 0xFFFFFFFE)
    v3 = a2;
  else
    v3 = 0;
  if ((v2 - 3) >= 0xFFFFFFFE)
  {
    v4 = (unint64_t)(v3 + 8);
    goto LABEL_10;
  }
  if (v2 == 3)
    *((_QWORD *)a2 + 1) = 0;
  return result;
}

unint64_t llvm::ReplaceableMetadataImpl::getIfExists(unsigned __int8 *a1)
{
  int v1;
  unsigned int v3;
  BOOL v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v1 = *a1;
  if ((v1 - 4) > 0x1E)
  {
    v3 = v1 - 3;
    v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE)
      v5 = a1;
    else
      v5 = 0;
    v6 = v5 + 8;
    if (v4)
      return (unint64_t)v6;
    else
      return 0;
  }
  else if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 + 3))
  {
    return *((_QWORD *)a1 + 2) & ((uint64_t)(*((_QWORD *)a1 + 2) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::ReplaceableMetadataImpl::dropRef(llvm::ReplaceableMetadataImpl *this, void *a2)
{
  void *v3;

  v3 = a2;
  return sub_1C540CB8C((uint64_t)this + 16, &v3);
}

uint64_t llvm::MetadataTracking::retrack(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *a2;
  if ((v4 - 4) > 0x1E)
  {
    v6 = v4 - 3;
    v7 = __CFADD__(v6, 2);
    if (v6 >= 0xFFFFFFFE)
      v8 = a2;
    else
      v8 = 0;
    if (!v7)
      return 0;
    v9 = (unint64_t)(v8 + 8);
    goto LABEL_12;
  }
  if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 + 3))
    return 0;
  result = 0;
  v10 = *((_QWORD *)a2 + 2);
  if ((v10 & 4) != 0)
  {
    v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
LABEL_12:
      llvm::ReplaceableMetadataImpl::moveRef(v9, a1, a3);
      return 1;
    }
  }
  return result;
}

double llvm::ReplaceableMetadataImpl::moveRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v6 = *(_DWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = v4 + 8;
  if ((v6 & 1) != 0)
  {
    v8 = 4;
    v9 = v4 + 8;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 32);
    if (!v8)
    {
      v27 = 0;
      goto LABEL_25;
    }
  }
  v10 = v8 - 1;
  v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v9 + 24 * v11;
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 == a2)
    goto LABEL_4;
  v28 = 1;
  while (v13 != -4096)
  {
    v29 = v11 + v28++;
    v11 = v29 & v10;
    v12 = v9 + 24 * v11;
    v13 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 == a2)
      goto LABEL_4;
  }
  if ((v5 & 1) != 0)
  {
    v27 = 4;
    v9 = v4 + 8;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v27 = *(_DWORD *)(a1 + 32);
  }
LABEL_25:
  v12 = v9 + 24 * v27;
LABEL_4:
  v14 = *(_OWORD *)(v12 + 8);
  *(_QWORD *)v12 = -8192;
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) = v15 - 2;
  *(_DWORD *)(a1 + 20) = v16;
  v31 = a3;
  v32 = v14;
  v33 = v14;
  if ((v15 & 1) != 0)
  {
    v17 = 4;
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 32);
    if (!v17)
    {
      v25 = 0;
LABEL_21:
      v26 = sub_1C5417540(v4, (uint64_t)&v31, &v31, v25);
      *v26 = v31;
      *(_QWORD *)&v14 = v32;
      *(_OWORD *)(v26 + 1) = v32;
      return *(double *)&v14;
    }
    v7 = *(_QWORD *)(a1 + 24);
  }
  v18 = (v17 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v19 = (_QWORD *)(v7 + 24 * v18);
  v20 = *v19;
  if (*v19 != a3)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & (v17 - 1);
      v19 = (_QWORD *)(v7 + 24 * v18);
      v20 = *v19;
      if (*v19 == a3)
        return *(double *)&v14;
    }
    if (v21)
      v25 = v21;
    else
      v25 = v19;
    goto LABEL_21;
  }
  return *(double *)&v14;
}

uint64_t llvm::MetadataTracking::isReplaceable(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if ((v1 - 4) > 0x1E)
    return (v1 - 1) < 2;
  if ((a1[1] & 0x7F) == 2)
    return 1;
  return *((_DWORD *)a1 + 3) != 0;
}

uint64_t llvm::ReplaceableMetadataImpl::isReplaceable(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if ((v1 - 4) > 0x1E)
    return (v1 - 1) < 2;
  if ((a1[1] & 0x7F) == 2)
    return 1;
  return *((_DWORD *)a1 + 3) != 0;
}

void llvm::ReplaceableMetadataImpl::getAllArgListUsers(llvm::ReplaceableMetadataImpl *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  unsigned int v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[7];

  v30[6] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = 0x600000000;
  v4 = (char *)this + 16;
  v3 = *((_DWORD *)this + 4);
  if (v3 <= 1)
  {
    if (v3)
    {
      v24 = (char *)this + 24;
      v25 = 4;
    }
    else
    {
      v24 = (char *)*((_QWORD *)this + 3);
      v25 = *((_DWORD *)this + 8);
    }
    v7 = &v24[24 * v25];
    v6 = v7;
  }
  else
  {
    if ((v3 & 1) != 0)
    {
      v5 = (char *)this + 24;
      v6 = (char *)this + 120;
    }
    else
    {
      v5 = (char *)*((_QWORD *)this + 3);
      v23 = *((_DWORD *)this + 8);
      if (!v23)
      {
        v9 = 0;
        v7 = (char *)*((_QWORD *)this + 3);
        v8 = v7;
        goto LABEL_13;
      }
      v6 = &v5[24 * v23];
    }
    v3 = *((_DWORD *)this + 4) & 1;
    v7 = v5;
    while (*(_QWORD *)v7 == -4096 || *(_QWORD *)v7 == -8192)
    {
      v7 += 24;
      if (v7 == v6)
      {
        v7 = v6;
        break;
      }
    }
  }
  if (v3)
  {
    v8 = (char *)this + 24;
    v9 = 4;
  }
  else
  {
    v8 = (char *)*((_QWORD *)this + 3);
    v9 = *((_DWORD *)this + 8);
  }
  v5 = v6;
LABEL_13:
  v10 = &v8[24 * v9];
  if (v7 == v10)
  {
    v17 = v30;
    v16 = v30;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)v7 + 2);
      v26 = *(_OWORD *)v7;
      v27 = v12;
      if ((BYTE8(v26) & 2) != 0 && *(_BYTE *)(*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFFCLL) == 32)
      {
        v14 = sub_1C6244008((uint64_t)v4, (uint64_t *)&v26);
        v15 = v29;
        if (v29 >= (unint64_t)HIDWORD(v29))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 8);
          v15 = v29;
        }
        *((_QWORD *)v28 + v15) = v14 + 1;
        v11 = v29 + 1;
        LODWORD(v29) = v29 + 1;
      }
      v13 = v7 + 24;
      v7 = v5;
      if (v13 != v5)
      {
        v7 = v13;
        while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 24;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
    }
    while (v7 != v10);
    v16 = (uint64_t *)v28;
    v17 = (uint64_t *)((char *)v28 + 8 * v11);
    if (v11)
    {
      v18 = 126 - 2 * __clz(v11);
      goto LABEL_31;
    }
  }
  v18 = 0;
LABEL_31:
  sub_1C5417AB0(v16, v17, v18, 1);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v19 = (uint64_t **)v28;
  if ((_DWORD)v29)
  {
    v20 = 0;
    v21 = 8 * v29;
    do
    {
      v22 = **v19;
      if (v20 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 8);
        v20 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v22 & 0xFFFFFFFFFFFFFFFCLL;
      v20 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v20;
      ++v19;
      v21 -= 8;
    }
    while (v21);
    v19 = (uint64_t **)v28;
  }
  if (v19 != v30)
    free(v19);
}

uint64_t sub_1C540CB8C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & v4;
  v6 = (uint64_t *)(v2 + 24 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_9:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = (uint64_t *)(v2 + 24 * v5);
    v7 = *v6;
    if (*a2 == *v6)
      goto LABEL_9;
  }
  return 0;
}

void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::ReplaceableMetadataImpl *this, llvm::Metadata *a2)
{
  unsigned int v2;
  _BYTE *v3;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  int v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  int v30;
  char *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t ***v36;
  int v37;
  unsigned int v38;
  char *v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[25];

  v42[24] = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 16;
  v2 = *((_DWORD *)this + 4);
  if (v2 >= 2)
  {
    v6 = (char *)this + 24;
    if ((v2 & 1) != 0)
    {
      v7 = (char *)this + 120;
      v8 = (char *)this + 24;
LABEL_4:
      v9 = v8;
      while (*(_QWORD *)v9 == -4096 || *(_QWORD *)v9 == -8192)
      {
        v9 += 24;
        if (v9 == v7)
        {
          v9 = v7;
          if ((v2 & 1) != 0)
          {
LABEL_14:
            v11 = 4;
            v8 = v7;
            v10 = (char *)this + 24;
            goto LABEL_15;
          }
LABEL_10:
          v10 = (char *)*((_QWORD *)this + 3);
          v11 = *((_DWORD *)this + 8);
          v8 = v7;
          goto LABEL_15;
        }
      }
      if ((v2 & 1) != 0)
        goto LABEL_14;
      goto LABEL_10;
    }
    v8 = (char *)*((_QWORD *)this + 3);
    v12 = *((_DWORD *)this + 8);
    if (v12)
    {
      v7 = &v8[24 * v12];
      goto LABEL_4;
    }
    v11 = 0;
    v9 = (char *)*((_QWORD *)this + 3);
    v10 = v9;
LABEL_15:
    v13 = &v10[24 * v11];
    v40 = v42;
    v41 = 0x800000000;
    if (v9 == v13)
    {
      v23 = 0;
      v24 = v42;
    }
    else
    {
      v14 = 0;
      v15 = v9;
      do
      {
        v16 = v14;
        v17 = v15 + 24;
        v15 = v8;
        if (v17 != v8)
        {
          v15 = v17;
          while (*(_QWORD *)v15 == -4096 || *(_QWORD *)v15 == -8192)
          {
            v15 += 24;
            if (v15 == v8)
            {
              v15 = v8;
              break;
            }
          }
        }
        ++v14;
      }
      while (v15 != v13);
      if (v16 >= 8)
      {
        v39 = v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v16 + 1, 24);
        v13 = v39;
        v19 = v40;
        v18 = v41;
      }
      else
      {
        v18 = 0;
        v19 = v42;
      }
      v20 = &v19[3 * v18];
      do
      {
        v21 = *(_OWORD *)v9;
        v20[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)v20 = v21;
        v22 = v9 + 24;
        v9 = v8;
        if (v22 != v8)
        {
          v9 = v22;
          while (*(_QWORD *)v9 == -4096 || *(_QWORD *)v9 == -8192)
          {
            v9 += 24;
            if (v9 == v8)
            {
              v9 = v8;
              break;
            }
          }
        }
        v20 += 3;
      }
      while (v9 != v13);
      v23 = v41 + v14;
      v24 = v40;
    }
    LODWORD(v41) = v23;
    v25 = 126 - 2 * __clz(v23);
    if (v23)
      v26 = v25;
    else
      v26 = 0;
    sub_1C541849C((uint64_t)v24, &v24[3 * v23], v26, 1);
    v27 = (char *)v40;
    if ((_DWORD)v41)
    {
      v28 = (char *)v40 + 24 * v41;
      while (1)
      {
        v29 = *(_QWORD **)v27;
        if ((*v3 & 1) != 0)
          break;
        v30 = *((_DWORD *)this + 8);
        if (v30)
        {
          v31 = (char *)*((_QWORD *)this + 3);
LABEL_43:
          v32 = v30 - 1;
          v33 = v32 & ((v29 >> 4) ^ (v29 >> 9));
          v34 = *(_QWORD **)&v31[24 * v33];
          if (v29 == v34)
          {
LABEL_44:
            v35 = *((_QWORD *)v27 + 1);
            if (v35 <= 3)
            {
              *v29 = a2;
              if (a2)
                llvm::MetadataTracking::track((uint64_t)v29, (unsigned __int8 *)a2, 2);
              sub_1C540CB8C((uint64_t)v3, v27);
            }
            else
            {
              v36 = (uint64_t ***)(v35 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v35 & 2) != 0)
                __asm { BR              X9 }
              llvm::MetadataAsValue::handleChangedMetadata(v36, a2);
            }
          }
          else
          {
            v37 = 1;
            while (v34 != (_QWORD *)-4096)
            {
              v38 = v33 + v37++;
              v33 = v38 & v32;
              v34 = *(_QWORD **)&v31[24 * v33];
              if (v29 == v34)
                goto LABEL_44;
            }
          }
        }
        v27 += 24;
        if (v27 == v28)
        {
          v27 = (char *)v40;
          goto LABEL_59;
        }
      }
      v30 = 4;
      v31 = v6;
      goto LABEL_43;
    }
LABEL_59:
    if (v27 != (char *)v42)
      free(v27);
  }
}

void llvm::MDNode::handleChangedOperand(uint64_t this, char *a2, llvm::Metadata *a3)
{
  char *v4;
  unint64_t v5;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  char v9;
  unint64_t v10;
  llvm::MDNode *v11;
  int v12;
  unsigned __int8 **v13;
  llvm::Metadata *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;

  v4 = (char *)(this - 8 * *(unsigned int *)(this + 8));
  v5 = a2 - v4;
  if ((*(_BYTE *)(this + 1) & 0x7F) != 0)
  {
    v13 = (unsigned __int8 **)&v4[v5 & 0x7FFFFFFF8];
    if (*v13)
      llvm::MetadataTracking::untrack((uint64_t)&v4[v5 & 0x7FFFFFFF8], *v13);
    *v13 = (unsigned __int8 *)a3;
    if (a3)
      llvm::MetadataTracking::track((uint64_t)v13, (unsigned __int8 *)a3, 2);
  }
  else
  {
    llvm::MDNode::eraseFromStore((unsigned __int8 *)this);
    v7 = (unsigned __int8 **)(this - 8 * *(unsigned int *)(this + 8) + (v5 & 0x7FFFFFFF8));
    v8 = *v7;
    v9 = *(_BYTE *)(this + 1);
    if (*v7)
      llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
    *v7 = (unsigned __int8 *)a3;
    if (a3)
    {
      if ((v9 & 0x7F) != 0)
        v10 = 2;
      else
        v10 = this | 2;
      llvm::MetadataTracking::track((uint64_t)v7, (unsigned __int8 *)a3, v10);
    }
    if (a3 == (llvm::Metadata *)this || !a3 && v8 && *v8 == 1)
    {
      if ((*(_BYTE *)(this + 1) & 0x7F) == 2 || *(_DWORD *)(this + 12))
      {
        *(_DWORD *)(this + 12) = 0;
        llvm::MDNode::dropReplaceableUses(this);
      }
      goto LABEL_15;
    }
    llvm::MDNode::uniquify((llvm::MDNode *)this);
    v12 = *(_BYTE *)(this + 1) & 0x7F;
    if (v11 == (llvm::MDNode *)this)
    {
      if (v12 == 2 || *(_DWORD *)(this + 12))
        llvm::MDNode::resolveAfterOperandChange(this, (llvm::Metadata *)v8, a3);
    }
    else
    {
      v14 = v11;
      if (v12 != 2 && !*(_DWORD *)(this + 12))
      {
LABEL_15:
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
        return;
      }
      v15 = *(unsigned int *)(this + 8);
      if ((_DWORD)v15)
      {
        v16 = this;
        do
        {
          v17 = *(unsigned int *)(this + 8);
          v18 = (unsigned __int8 **)(v16 - 8 * v17);
          if (*v18)
            llvm::MetadataTracking::untrack(v16 - 8 * v17, *v18);
          *v18 = 0;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v19 = *(_QWORD *)(this + 16);
      if ((v19 & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v19 & 0xFFFFFFFFFFFFFFF8), v14);
      llvm::MDNode::deleteAsSubclass((llvm::MDNode *)this);
    }
  }
}

void llvm::ReplaceableMetadataImpl::resolveAllUses(llvm::ReplaceableMetadataImpl *this, char a2)
{
  unsigned int v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  char *v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  int v35;
  char *v36;
  char *v37;
  int v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[25];

  v41[24] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_DWORD *)this + 4);
  if (v2 < 2)
    return;
  if ((a2 & 1) == 0)
  {
    sub_1C540D4A4((_QWORD *)this + 2);
    return;
  }
  v4 = (char *)this + 24;
  if ((v2 & 1) != 0)
  {
    v5 = (char *)this + 120;
    v6 = (char *)this + 24;
    goto LABEL_5;
  }
  v6 = (char *)*((_QWORD *)this + 3);
  v9 = *((_DWORD *)this + 8);
  if (v9)
  {
    v5 = &v6[24 * v9];
LABEL_5:
    v7 = v6;
    while (*(_QWORD *)v7 == -4096 || *(_QWORD *)v7 == -8192)
    {
      v7 += 24;
      if (v7 == v5)
      {
        v7 = v5;
        if ((v2 & 1) != 0)
          goto LABEL_16;
LABEL_11:
        v4 = (char *)*((_QWORD *)this + 3);
        v8 = *((_DWORD *)this + 8);
        goto LABEL_17;
      }
    }
    if ((v2 & 1) == 0)
      goto LABEL_11;
LABEL_16:
    v8 = 4;
LABEL_17:
    v6 = v5;
    goto LABEL_18;
  }
  v8 = 0;
  v7 = (char *)*((_QWORD *)this + 3);
  v4 = v7;
LABEL_18:
  v10 = &v4[24 * v8];
  v39 = v41;
  v40 = 0x800000000;
  if (v7 == v10)
  {
    v20 = 0;
    v21 = v41;
  }
  else
  {
    v11 = 0;
    v12 = v7;
    do
    {
      v13 = v11;
      v14 = v12 + 24;
      v12 = v6;
      if (v14 != v6)
      {
        v12 = v14;
        while (*(_QWORD *)v12 == -4096 || *(_QWORD *)v12 == -8192)
        {
          v12 += 24;
          if (v12 == v6)
          {
            v12 = v6;
            break;
          }
        }
      }
      v11 = v13 + 1;
    }
    while (v12 != v10);
    if (v13 >= 8)
    {
      v37 = v10;
      v38 = v13 + 1;
      v36 = v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v13 + 1, 24);
      v6 = v36;
      v10 = v37;
      LODWORD(v11) = v38;
      v16 = v39;
      v15 = v40;
    }
    else
    {
      v15 = 0;
      v16 = v41;
    }
    v17 = &v16[3 * v15];
    do
    {
      v18 = *(_OWORD *)v7;
      v17[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)v17 = v18;
      v19 = v7 + 24;
      v7 = v6;
      if (v19 != v6)
      {
        v7 = v19;
        while (*(_QWORD *)v7 == -4096 || *(_QWORD *)v7 == -8192)
        {
          v7 += 24;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      v17 += 3;
    }
    while (v7 != v10);
    v20 = v40 + v11;
    v21 = v39;
  }
  LODWORD(v40) = v20;
  v22 = 126 - 2 * __clz(v20);
  if (v20)
    v23 = v22;
  else
    v23 = 0;
  sub_1C5419164((uint64_t)v21, &v21[3 * v20], v23, 1);
  sub_1C540D4A4(v3);
  v24 = v39;
  if ((_DWORD)v40)
  {
    v25 = 24 * v40;
    v26 = (unint64_t *)((char *)v39 + 8);
    do
    {
      v28 = *v26;
      v26 += 3;
      v27 = v28;
      v29 = v28 & 2;
      if (v28 >= 4 && v29 != 0)
      {
        v31 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        v32 = *(unsigned __int8 *)(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4;
        if (v31)
          v33 = v32 > 0x1E;
        else
          v33 = 1;
        if (!v33 && (*(_BYTE *)(v31 + 1) & 0x7F) != 2)
        {
          v34 = *(_DWORD *)(v31 + 12);
          if (v34)
          {
            v35 = v34 - 1;
            *(_DWORD *)(v31 + 12) = v35;
            if (!v35)
              llvm::MDNode::dropReplaceableUses((llvm::MDNode *)v31);
          }
        }
      }
      v25 -= 24;
    }
    while (v25);
    v24 = v39;
  }
  if (v24 != v41)
    free(v24);
}

_QWORD *sub_1C540D4A4(_QWORD *result)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 13;
    }
    else
    {
      v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C624406C(result);
      if (!v2)
      {
        v5 = 0;
LABEL_9:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[3 * v2];
    }
    do
    {
      *v3 = -4096;
      v3 += 3;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_9;
  }
  return result;
}

uint64_t llvm::MDNode::decrementUnresolvedOperandCount(uint64_t this)
{
  int v1;

  if ((*(_BYTE *)(this + 1) & 0x7F) != 2)
  {
    v1 = *(_DWORD *)(this + 12) - 1;
    *(_DWORD *)(this + 12) = v1;
    if (!v1)
      return llvm::MDNode::dropReplaceableUses(this);
  }
  return this;
}

unint64_t sub_1C540D54C(uint64_t *a1)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if ((*a1 & 4) == 0)
  {
    v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
    v4 = (_QWORD *)operator new();
    *v4 = v3;
    v4[1] = 0;
    v4[2] = 1;
    for (i = 3; i != 15; i += 3)
      v4[i] = -4096;
    v8 = v4;
    sub_1C5416DF8(a1, &v8);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      v7 = v6;
      if ((v6[2] & 1) == 0)
        MEMORY[0x1CAA32FB4](v6[3], 8);
      MEMORY[0x1CAA32FC0](v7, 0x1020C408B843D01);
    }
  }
  return *a1 & (*a1 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8;
}

_QWORD *llvm::ValueAsMetadata::get(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  llvm::ValueAsMetadata *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  _QWORD *result;
  unsigned int v16;
  uint64_t j;
  uint64_t i;
  llvm::ValueAsMetadata *v19;

  v19 = this;
  v3 = ***(_QWORD ***)this;
  v4 = *(_DWORD *)(v3 + 408);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 392);
    v6 = v4 - 1;
    v7 = v6 & ((this >> 4) ^ (this >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = (llvm::ValueAsMetadata *)*v8;
    if ((llvm::ValueAsMetadata *)*v8 == this)
      goto LABEL_16;
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm::ValueAsMetadata *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (llvm::ValueAsMetadata *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (uint64_t *)(v5 + 16 * v7);
      v9 = (llvm::ValueAsMetadata *)*v8;
      if ((llvm::ValueAsMetadata *)*v8 == this)
        goto LABEL_16;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  v8 = sub_1C50F5E68(v3 + 392, (uint64_t *)&v19, v14);
  *v8 = (uint64_t)this;
  v8[1] = 0;
LABEL_16:
  result = (_QWORD *)v8[1];
  if (!result)
  {
    *((_DWORD *)this + 5) |= 0x8000000u;
    v16 = *((unsigned __int8 *)this + 16);
    result = (_QWORD *)operator new();
    if (v16 <= 0x14)
    {
      *result = 1;
      result[1] = **(_QWORD **)this;
      result[2] = 0;
      result[3] = 1;
      for (i = 4; i != 16; i += 3)
        result[i] = -4096;
    }
    else
    {
      *result = 2;
      result[1] = **(_QWORD **)this;
      result[2] = 0;
      result[3] = 1;
      for (j = 4; j != 16; j += 3)
        result[j] = -4096;
    }
    result[16] = this;
    v8[1] = (uint64_t)result;
  }
  return result;
}

uint64_t llvm::ValueAsMetadata::getIfExists(uint64_t ***a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t ***v6;
  int v8;
  int v9;

  v1 = ***a1;
  v2 = *(_DWORD *)(v1 + 408);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 392);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v6 = *(uint64_t ****)(v3 + 16 * v5);
    if (v6 == a1)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v8 = 1;
    while (v6 != (uint64_t ***)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(uint64_t ****)(v3 + 16 * v5);
      if (v6 == a1)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

void llvm::ValueAsMetadata::handleDeletion(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ValueAsMetadata *v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = ***(int32x2_t ****)this;
  v3 = v2[49];
  v4 = v2[51].u32[0];
  if (!(_DWORD)v4)
  {
LABEL_12:
    v6 = *(_QWORD *)&v3 + 16 * v4;
    goto LABEL_3;
  }
  LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = *(_QWORD *)&v3 + 16 * v5;
  v7 = *(llvm::ValueAsMetadata **)v6;
  if (*(llvm::ValueAsMetadata **)v6 != this)
  {
    v9 = 1;
    while (v7 != (llvm::ValueAsMetadata *)-4096)
    {
      v10 = v5 + v9++;
      v5 = v10 & (v4 - 1);
      v7 = *(llvm::ValueAsMetadata **)(*(_QWORD *)&v3 + 16 * v5);
      if (v7 == this)
      {
        v6 = *(_QWORD *)&v3 + 16 * v5;
        goto LABEL_3;
      }
    }
    goto LABEL_12;
  }
LABEL_3:
  if (v6 != *(_QWORD *)&v3 + 16 * v4)
  {
    v8 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)v6 = -8192;
    v2[50] = vadd_s32(v2[50], (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v8 + 8), 0);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 24) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v8 + 32), 8);
      JUMPOUT(0x1CAA32FC0);
    }
  }
}

uint64_t *llvm::ValueAsMetadata::handleRAUW(uint64_t *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v4;
  int32x2_t *v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t **v15;
  llvm::ReplaceableMetadataImpl *v16;
  llvm::Metadata *v17;
  __int32 v18;
  int32x2_t v19;
  __int32 v20;
  unsigned int v21;
  int32x2_t ***v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t *v27;
  llvm::Value *v28;

  v4 = this;
  v28 = a2;
  v5 = **(int32x2_t ***)*this;
  v6 = v5[49];
  v7 = v5[51].u32[0];
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
    v9 = (uint64_t **)(*(_QWORD *)&v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == this)
      goto LABEL_7;
    v11 = 1;
    while (v10 != (uint64_t *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t **)(*(_QWORD *)&v6 + 16 * v8);
      if (v10 == this)
      {
        v9 = (uint64_t **)(*(_QWORD *)&v6 + 16 * v8);
        goto LABEL_7;
      }
    }
  }
  v9 = (uint64_t **)(*(_QWORD *)&v6 + 16 * v7);
LABEL_7:
  if (v9 == (uint64_t **)(*(_QWORD *)&v6 + 16 * v7))
    return this;
  *((_DWORD *)this + 5) &= ~0x8000000u;
  v13 = (uint64_t)v9[1];
  *v9 = (uint64_t *)-8192;
  v5[50] = vadd_s32(v5[50], (int32x2_t)0x1FFFFFFFFLL);
  v14 = *((unsigned __int8 *)a2 + 16);
  if (*(_BYTE *)v13 == 2)
  {
    if (v14 <= 0x14)
    {
      v17 = (llvm::Metadata *)llvm::ValueAsMetadata::get(a2, a2);
      goto LABEL_34;
    }
    if (sub_1C540DB44((uint64_t)this))
    {
      if (sub_1C540DB44((uint64_t)a2))
      {
        v15 = sub_1C540DB44((uint64_t)v4);
        if (v15 != sub_1C540DB44((uint64_t)a2))
          goto LABEL_13;
      }
    }
  }
  else if (v14 >= 0x15)
  {
LABEL_13:
    v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
    v17 = 0;
    goto LABEL_35;
  }
  v18 = v5[51].i32[0];
  if (v18)
  {
    v19 = v5[49];
    v20 = v18 - 1;
    v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
    this = (uint64_t *)(*(_QWORD *)&v19 + 16 * v21);
    v22 = (int32x2_t ***)*this;
    if ((llvm::Value *)*this == a2)
      goto LABEL_30;
    v23 = 0;
    v24 = 1;
    while (v22 != (int32x2_t ***)-4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v22 == (int32x2_t ***)-8192;
      if (v25)
        v23 = this;
      v26 = v21 + v24++;
      v21 = v26 & v20;
      this = (uint64_t *)(*(_QWORD *)&v19 + 16 * v21);
      v22 = (int32x2_t ***)*this;
      if ((llvm::Value *)*this == a2)
        goto LABEL_30;
    }
    if (v23)
      v27 = v23;
    else
      v27 = this;
  }
  else
  {
    v27 = 0;
  }
  this = sub_1C50F5E68((uint64_t)&v5[49], (uint64_t *)&v28, v27);
  *this = (uint64_t)a2;
  this[1] = 0;
LABEL_30:
  v17 = (llvm::Metadata *)this[1];
  if (v17)
  {
LABEL_34:
    v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
LABEL_35:
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v16, v17);
    if ((*(_BYTE *)(v13 + 24) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v13 + 32), 8);
    JUMPOUT(0x1CAA32FC0);
  }
  *((_DWORD *)a2 + 5) |= 0x8000000u;
  *(_QWORD *)(v13 + 128) = a2;
  this[1] = v13;
  return this;
}

uint64_t **sub_1C540DB44(uint64_t a1)
{
  uint64_t ***v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t ****v7;
  uint64_t ***v8;
  uint64_t ****v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t **result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  if (!a1 || *(_BYTE *)(a1 + 16) != 21)
  {
    v17 = *(_QWORD *)(a1 + 40);
    if (!v17)
      return 0;
    v18 = *(_QWORD *)(v17 + 56);
    if (!v18 || (*(_BYTE *)(v18 + 23) & 0x20) == 0)
      return 0;
    v19 = ***(_QWORD ***)v18;
    v36 = v18;
    v20 = *(_DWORD *)(v19 + 2496);
    if (v20)
    {
      v21 = *(_QWORD *)(v19 + 2480);
      v22 = v20 - 1;
      v23 = v22 & ((v18 >> 4) ^ (v18 >> 9));
      v24 = (_QWORD *)(v21 + 40 * v23);
      v25 = *v24;
      if (*v24 == v18)
        goto LABEL_33;
      v26 = 0;
      v27 = 1;
      while (v25 != -4096)
      {
        if (v26)
          v28 = 0;
        else
          v28 = v25 == -8192;
        if (v28)
          v26 = v24;
        v29 = v23 + v27++;
        v23 = v29 & v22;
        v24 = (_QWORD *)(v21 + 40 * v23);
        v25 = *v24;
        if (*v24 == v18)
          goto LABEL_33;
      }
      if (v26)
        v34 = v26;
      else
        v34 = v24;
    }
    else
    {
      v34 = 0;
    }
    v24 = sub_1C541AB24(v19 + 2480, (uint64_t)&v36, &v36, v34);
    v35 = v36;
    v24[3] = 0;
    v24[4] = 0;
    *v24 = v35;
    v24[1] = v24 + 3;
    v24[2] = 0x100000000;
LABEL_33:
    v30 = *((unsigned int *)v24 + 4);
    if ((_DWORD)v30)
    {
      v14 = (uint64_t ***)v24[1];
      v31 = 16 * v30;
      result = 0;
      while (*(_DWORD *)v14)
      {
        v14 += 2;
        v31 -= 16;
        if (!v31)
          return result;
      }
      return v14[1];
    }
    return 0;
  }
  v1 = *(uint64_t ****)(a1 + 24);
  if (!v1 || (*((_BYTE *)v1 + 23) & 0x20) == 0)
    return 0;
  v2 = ***v1;
  v36 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2480);
    v5 = v3 - 1;
    v6 = v5 & ((v1 >> 4) ^ (v1 >> 9));
    v7 = (uint64_t ****)(v4 + 40 * v6);
    v8 = *v7;
    if (*v7 == v1)
      goto LABEL_15;
    v9 = 0;
    v10 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (uint64_t ***)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (uint64_t ****)(v4 + 40 * v6);
      v8 = *v7;
      if (*v7 == v1)
        goto LABEL_15;
    }
    if (v9)
      v32 = v9;
    else
      v32 = v7;
  }
  else
  {
    v32 = 0;
  }
  v7 = (uint64_t ****)sub_1C541AB24(v2 + 2480, (uint64_t)&v36, &v36, v32);
  v33 = v36;
  v7[3] = 0;
  v7[4] = 0;
  *v7 = (uint64_t ***)v33;
  v7[1] = (uint64_t ***)(v7 + 3);
  v7[2] = (uint64_t ***)0x100000000;
LABEL_15:
  v13 = *((unsigned int *)v7 + 4);
  if (!(_DWORD)v13)
    return 0;
  v14 = v7[1];
  v15 = 16 * v13;
  result = 0;
  while (*(_DWORD *)v14)
  {
    v14 += 2;
    v15 -= 16;
    if (!v15)
      return result;
  }
  return v14[1];
}

_QWORD *llvm::MDString::get(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD **i;
  _QWORD *v25;

  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 280);
  if (!v5)
  {
    *(_QWORD *)(v4 + 284) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)(v4 + 272) = v25;
    v5 = 16;
    *(_DWORD *)(v4 + 280) = 16;
  }
  v6 = 0;
  if (a3)
  {
    v7 = a3;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(v4 + 272);
  v11 = v5 - 1;
  v12 = v10 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && a3 == *v17
           && (!a3 || !memcmp(a2, (char *)v17 + *(unsigned int *)(v4 + 292), a3)))
    {
      goto LABEL_17;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_17:
  if (v17)
  {
    if (v17 != (_QWORD *)-8)
      return v17 + 1;
    --*(_DWORD *)(v4 + 288);
  }
  v19 = sub_1C484358C(v4 + 296, a3 + 25, 3);
  v20 = (_QWORD *)v19;
  v21 = v19 + 24;
  if (a3)
    memcpy((void *)(v19 + 24), a2, a3);
  *(_BYTE *)(v21 + a3) = 0;
  v20[1] = 0;
  v20[2] = 0;
  *v20 = a3;
  *(_QWORD *)(v10 + 8 * v16) = v20;
  ++*(_DWORD *)(v4 + 284);
  for (i = (_QWORD **)(*(_QWORD *)(v4 + 272)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 272), v16)); ; ++i)
  {
    v17 = *i;
    if (*i && v17 + 1 != 0)
      break;
  }
  v17[2] = v17;
  return v17 + 1;
}

_QWORD *sub_1C540DF88(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_17:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v20 = sub_1C484358C((uint64_t)a1 + 24, __n + 25, 3);
  v21 = (_QWORD *)v20;
  v22 = v20 + 24;
  if (__n)
    memcpy((void *)(v20 + 24), a2, __n);
  *(_BYTE *)(v22 + __n) = 0;
  v21[1] = 0;
  v21[2] = 0;
  *v21 = __n;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return *((_QWORD *)this + 1) + 24;
}

uint64_t llvm::MDNode::operator new(llvm::MDNode *this, unsigned int a2)
{
  size_t v3;
  void *v4;
  void *v5;

  v3 = 8 * a2;
  v4 = operator new((size_t)this + v3);
  v5 = v4;
  if (a2)
    bzero(v4, v3);
  return (uint64_t)v5 + v3;
}

void llvm::MDNode::operator delete(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned int *v7;

  v1 = a1[2];
  if ((_DWORD)v1)
  {
    v2 = -8 * v1;
    v3 = (unsigned __int8 **)(a1 - 2);
    do
    {
      if (*v3)
      {
        v7 = a1;
        v4 = v1;
        v5 = v3;
        v6 = v2;
        llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
        v3 = v5;
        v2 = v6;
        v1 = v4;
        a1 = v7;
      }
      --v3;
      v2 += 8;
    }
    while (v2);
  }
  operator delete(&a1[-2 * v1]);
}

uint64_t llvm::MDNode::MDNode(uint64_t this, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  char *v14;
  unsigned __int8 **v15;
  char v16;
  unint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;

  *(_BYTE *)this = a3;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = (a8 + a6);
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v11 = 0;
    v12 = 8 * a6;
    do
    {
      v13 = *(unsigned __int8 **)(a5 + 8 * v11);
      v14 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v15 = (unsigned __int8 **)&v14[8 * v11];
      v16 = *(_BYTE *)(this + 1);
      if (*v15)
        llvm::MetadataTracking::untrack((uint64_t)&v14[8 * v11], *v15);
      *v15 = v13;
      if (v13)
      {
        if ((v16 & 0x7F) != 0)
          v17 = 2;
        else
          v17 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v15, v13, v17);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if (a8)
  {
    v19 = 8 * a8;
    do
    {
      v20 = *a7++;
      llvm::MDNode::setOperand(this, v11, v20);
      LODWORD(v11) = v11 + 1;
      v19 -= 8;
    }
    while (v19);
  }
  if ((*(_BYTE *)(this + 1) & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands(this);
  return this;
}

{
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  char *v14;
  unsigned __int8 **v15;
  char v16;
  unint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  unsigned __int8 **v22;
  char v23;
  unint64_t v24;

  *(_BYTE *)this = a3;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = (a8 + a6);
  *(_QWORD *)(this + 16) = a2;
  if (!a6)
  {
    LODWORD(v11) = 0;
    if (!a8)
      goto LABEL_14;
    goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * a6;
  do
  {
    v13 = *(unsigned __int8 **)(a5 + 8 * v11);
    v14 = (char *)(this - 8 * *(unsigned int *)(this + 8));
    v15 = (unsigned __int8 **)&v14[8 * v11];
    v16 = *(_BYTE *)(this + 1);
    if (*v15)
      llvm::MetadataTracking::untrack((uint64_t)&v14[8 * v11], *v15);
    *v15 = v13;
    if (v13)
    {
      if ((v16 & 0x7F) != 0)
        v17 = 2;
      else
        v17 = this | 2;
      llvm::MetadataTracking::track((uint64_t)v15, v13, v17);
    }
    ++v11;
    v12 -= 8;
  }
  while (v12);
  if (a8)
  {
LABEL_17:
    v19 = 8 * a8;
    do
    {
      v20 = *a7;
      v21 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v22 = (unsigned __int8 **)&v21[8 * v11];
      v23 = *(_BYTE *)(this + 1);
      if (*v22)
        llvm::MetadataTracking::untrack((uint64_t)&v21[8 * v11], *v22);
      *v22 = v20;
      if (v20)
      {
        if ((v23 & 0x7F) != 0)
          v24 = 2;
        else
          v24 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v22, v20, v24);
      }
      ++a7;
      LODWORD(v11) = v11 + 1;
      v19 -= 8;
    }
    while (v19);
  }
LABEL_14:
  if ((*(_BYTE *)(this + 1) & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands(this);
  return this;
}

uint64_t llvm::MDNode::setOperand(uint64_t result, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  char v6;
  uint64_t v7;

  v4 = result;
  v5 = (unsigned __int8 **)(result - 8 * *(unsigned int *)(result + 8) + 8 * a2);
  v6 = *(_BYTE *)(result + 1);
  if (*v5)
    result = llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
  *v5 = a3;
  if (a3)
  {
    if ((v6 & 0x7F) != 0)
      v7 = 2;
    else
      v7 = v4 | 2;
    return llvm::MetadataTracking::track((uint64_t)v5, a3, v7);
  }
  return result;
}

uint64_t llvm::MDNode::countUnresolvedOperands(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v1 = *(unsigned int *)(this + 8);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = -8 * v1;
    do
    {
      v4 = *(unsigned __int8 **)(this + v3);
      if (v4)
      {
        if (*v4 - 4 > 0x1E)
          LODWORD(v4) = 0;
        else
          LODWORD(v4) = (v4[1] & 0x7F) == 2 || *((_DWORD *)v4 + 3) != 0;
      }
      v2 += (int)v4;
      v3 += 8;
    }
    while (v3);
  }
  else
  {
    v2 = 0;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

void llvm::MDNode::clone(llvm::MDNode *this)
{
  __asm { BR              X11 }
}

void sub_1C540E610()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t Impl;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v8[5616];

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (uint64_t *)*v3;
  v4 = (char *)(v0 - 8 * *(unsigned int *)(v0 + 8));
  v6 = v8;
  v7 = 0x400000000;
  sub_1C485BB4C((unsigned int *)&v6, v4, (char *)v0);
  Impl = llvm::MDTuple::getImpl(v3, v6, v7, 2, 1);
  if (v6 != v8)
    free(v6);
  *v1 = Impl;
}

uint64_t llvm::MDNode::makeUniqued(uint64_t this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t result;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = -8 * v2;
    do
    {
      v4 = (unsigned __int8 **)(this + v3);
      v5 = *(unsigned __int8 **)(this + v3);
      if (v5)
      {
        llvm::MetadataTracking::untrack(this + v3, *(unsigned __int8 **)(this + v3));
        *v4 = v5;
        llvm::MetadataTracking::track(this + v3, v5, this | 2);
      }
      else
      {
        *v4 = 0;
      }
      v3 += 8;
    }
    while (v3);
  }
  *(_BYTE *)(this + 1) &= 0x80u;
  result = llvm::MDNode::countUnresolvedOperands(this);
  if (!*(_DWORD *)(this + 12))
    return llvm::MDNode::dropReplaceableUses(this);
  return result;
}

uint64_t llvm::MDNode::dropReplaceableUses(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((v1 & 4) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(this + 16) = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v1 & 0xFFFFFFFFFFFFFFF8), 1);
    if ((*(_BYTE *)(v2 + 16) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 24), 8);
    JUMPOUT(0x1CAA32FC0);
  }
  return this;
}

void llvm::MDNode::makeDistinct(llvm::MDNode *this)
{
  llvm::MDNode::dropReplaceableUses((uint64_t)this);
  llvm::MDNode::storeDistinctInContext(this);
}

void llvm::MDNode::storeDistinctInContext(llvm::MDNode *this)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *((_BYTE *)this + 1) = *((_BYTE *)this + 1) & 0x80 | 1;
  v2 = *(unsigned __int8 *)this;
  if (v2 == 4 || ((1 << v2) & 0x7FFFFFEE0) == 0)
    *((_DWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 2);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(*(_QWORD *)v4 + 1200);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 1208);
  if ((unint64_t)v6 >= v7)
  {
    v9 = (_QWORD *)v5[149];
    v10 = v6 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v7 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_1C4764EE4();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = this;
    v8 = v15 + 8;
    if (v6 != v9)
    {
      do
      {
        v16 = *--v6;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v6 != v9);
      v6 = (_QWORD *)v5[149];
    }
    v5[149] = v15;
    v5[150] = v8;
    v5[151] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = this;
    v8 = v6 + 1;
  }
  v5[150] = v8;
}

uint64_t llvm::MDNode::resolveAfterOperandChange(uint64_t this, llvm::Metadata *a2, llvm::Metadata *a3)
{
  int v3;

  if (a2
    && *(unsigned __int8 *)a2 - 4 <= 0x1E
    && ((*((_BYTE *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 + 3)))
  {
    if ((!a3
       || *(unsigned __int8 *)a3 - 4 > 0x1E
       || (*((_BYTE *)a3 + 1) & 0x7F) != 2 && !*((_DWORD *)a3 + 3))
      && (*(_BYTE *)(this + 1) & 0x7F) != 2)
    {
      v3 = *(_DWORD *)(this + 12) - 1;
      *(_DWORD *)(this + 12) = v3;
      if (!v3)
        return llvm::MDNode::dropReplaceableUses(this);
    }
  }
  else if (a3
         && *(unsigned __int8 *)a3 - 4 <= 0x1E
         && ((*((_BYTE *)a3 + 1) & 0x7F) == 2 || *((_DWORD *)a3 + 3)))
  {
    ++*(_DWORD *)(this + 12);
  }
  return this;
}

unsigned __int8 *llvm::MDNode::resolveCycles(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if ((this[1] & 0x7F) == 2 || *((_DWORD *)this + 3))
  {
    *((_DWORD *)this + 3) = 0;
    this = (unsigned __int8 *)llvm::MDNode::dropReplaceableUses((uint64_t)this);
    v2 = *((unsigned int *)v1 + 2);
    if ((_DWORD)v2)
    {
      v3 = -8 * v2;
      do
      {
        this = *(unsigned __int8 **)&v1[v3];
        if (this && *this - 4 <= 0x1E && ((this[1] & 0x7F) == 2 || *((_DWORD *)this + 3)))
          this = (unsigned __int8 *)llvm::MDNode::resolveCycles((llvm::MDNode *)this);
        v3 += 8;
      }
      while (v3);
    }
  }
  return this;
}

llvm::MDNode *llvm::MDNode::replaceWithDistinctImpl(llvm::MDNode *this)
{
  llvm::MDNode::dropReplaceableUses((uint64_t)this);
  llvm::MDNode::storeDistinctInContext(this);
  return this;
}

llvm::MDNode *llvm::MDNode::replaceWithUniquedImpl(llvm::MDNode *this)
{
  llvm::Metadata *v2;
  uint64_t v4;
  llvm::Metadata *v5;

  llvm::MDNode::uniquify(this);
  if (v2 == this)
  {
    llvm::MDNode::makeUniqued((uint64_t)this);
    return this;
  }
  else
  {
    v5 = v2;
    v4 = *((_QWORD *)this + 2);
    if ((v4 & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v4 & 0xFFFFFFFFFFFFFFF8), v2);
    llvm::MDNode::deleteAsSubclass(this);
    return v5;
  }
}

void llvm::MDNode::uniquify(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

uint64_t sub_1C540F4AC()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v22;
  uint64_t v23;

  v1 = sub_1C53FF16C(v0 - 8 * *(unsigned int *)(v0 + 8), v0);
  *(_DWORD *)(v0 + 4) = v1;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  v4 = (_QWORD *)*v3;
  v23 = v0;
  v5 = *((_DWORD *)v4 + 114);
  if (v5)
  {
    v6 = *(unsigned int *)(v0 + 8);
    v7 = v4[55];
    v8 = v5 - 1;
    v9 = 1;
    for (i = v1; ; i = v11 + v9++)
    {
      v11 = i & v8;
      v12 = *(_QWORD *)(v7 + 8 * v11);
      if (v12 == -4096)
        break;
      if (v12 != -8192 && __PAIR64__(v6, v1) == *(_QWORD *)(v12 + 4))
      {
        if (!(_DWORD)v6)
        {
LABEL_13:
          if (v11 != v5 && v12)
            return v12;
          break;
        }
        v13 = -8 * v6;
        while (*(_QWORD *)(v0 + v13) == *(_QWORD *)(v12 + v13))
        {
          v13 += 8;
          if (!v13)
            goto LABEL_13;
        }
      }
    }
    v14 = v8 & v1;
    v15 = (_QWORD *)(v7 + 8 * (v8 & v1));
    v16 = *v15;
    if (*v15 == v0)
      return v0;
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v8;
      v15 = (_QWORD *)(v7 + 8 * v14);
      v16 = *v15;
      if (*v15 == v0)
        return v0;
    }
    if (v17)
      v22 = v17;
    else
      v22 = v15;
  }
  else
  {
    v22 = 0;
  }
  *sub_1C5419C10((uint64_t)(v4 + 55), &v23, v22) = v0;
  return v0;
}

void llvm::MDNode::deleteAsSubclass(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

void sub_1C5410A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;

  llvm::MDNode::dropAllReferences(v16);
  sub_1C53FED30((uint64_t *)(v16 + 16));
  v17 = *(unsigned int *)(v16 + 8);
  if ((_DWORD)v17)
  {
    v18 = -8 * v17;
    v19 = (unsigned __int8 **)(v16 - 8);
    do
    {
      if (*v19)
      {
        v21 = v19;
        v22 = v17;
        v20 = v18;
        llvm::MetadataTracking::untrack((uint64_t)v19, *v19);
        v18 = v20;
        v19 = v21;
        v17 = v22;
      }
      --v19;
      v18 += 8;
    }
    while (v18);
  }
  else
  {
    v17 = 0;
  }
  operator delete((void *)(v16 - 8 * v17));
}

unint64_t llvm::MDTuple::recalculateHash(llvm::MDTuple *this)
{
  unint64_t result;

  result = sub_1C53FF16C((uint64_t)this - 8 * *((unsigned int *)this + 2), (uint64_t)this);
  *((_DWORD *)this + 1) = result;
  return result;
}

uint64_t llvm::MDNode::dropAllReferences(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unint64_t v7;

  v1 = this;
  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = this;
    do
    {
      v4 = *(unsigned int *)(v1 + 8);
      v5 = (unsigned __int8 **)(v3 - 8 * v4);
      if (*v5)
        this = llvm::MetadataTracking::untrack(v3 - 8 * v4, *v5);
      *v5 = 0;
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  v6 = *(_QWORD *)(v1 + 16);
  if ((v6 & 4) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u)
    {
      sub_1C540D4A4((_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16));
      v7 = *(_QWORD *)(v1 + 16) & ((uint64_t)(*(_QWORD *)(v1 + 16) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v1 + 16) = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFFBLL;
    if ((*(_BYTE *)(v7 + 16) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v7 + 24), 8);
    JUMPOUT(0x1CAA32FC0);
  }
  return this;
}

unsigned __int8 *llvm::MDNode::eraseFromStore(unsigned __int8 *this)
{
  int v1;
  uint64_t v2;
  int32x2_t **v3;
  int32x2_t *v4;
  __int32 v5;
  int32x2_t v6;
  __int32 v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  int v12;

  v1 = *this;
  if (v1 != 4)
    __asm { BR              X10 }
  v2 = *((_QWORD *)this + 2);
  v3 = (int32x2_t **)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (int32x2_t **)*v3;
  v4 = *v3;
  v5 = v4[57].i32[0];
  if (v5)
  {
    v6 = v4[55];
    v7 = v5 - 1;
    LODWORD(v8) = *((_DWORD *)this + 1) & (v5 - 1);
    v9 = (unsigned __int8 **)(*(_QWORD *)&v6 + 8 * v8);
    v10 = *v9;
    if (*v9 == this)
    {
LABEL_6:
      *v9 = (unsigned __int8 *)-8192;
      v4[56] = vadd_s32(v4[56], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v11 = 1;
      while (v10 != (unsigned __int8 *)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v10 = *(unsigned __int8 **)(*(_QWORD *)&v6 + 8 * v8);
        if (v10 == this)
        {
          v9 = (unsigned __int8 **)(*(_QWORD *)&v6 + 8 * v8);
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

void sub_1C54115BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[58];
  a9 = a1;
  a10 = 0;
  if (sub_1C53A75A0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[59] = vadd_s32(v12[59], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[61];
  a9 = a1;
  a10 = 0;
  if (sub_1C6234180(v13, (uint64_t)&a9, &a10))
  {
    *a10 = -8192;
    v12[62] = vadd_s32(v12[62], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[64];
  a9 = a1;
  a10 = 0;
  if (sub_1C623450C(v13, (uint64_t)&a9, &a10))
  {
    *a10 = -8192;
    v12[65] = vadd_s32(v12[65], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C54116B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[67];
  a9 = a1;
  a10 = 0;
  if (sub_1C62302E8(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[68] = vadd_s32(v12[68], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C541170C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[70];
  a9 = a1;
  a10 = 0;
  if (sub_1C62308AC(v13, (uint64_t)&a9, &a10))
  {
    *a10 = -8192;
    v12[71] = vadd_s32(v12[71], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[94];
  a9 = a1;
  a10 = 0;
  if (sub_1C6232358(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[95] = vadd_s32(v12[95], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C54117B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[139];
  a9 = a1;
  a10 = 0;
  if (sub_1C62319E0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[140] = vadd_s32(v12[140], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[73];
  a9 = a1;
  a10 = 0;
  if (sub_1C53A8474(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[74] = vadd_s32(v12[74], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C541185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[76];
  a9 = a1;
  a10 = 0;
  if (sub_1C62314E8(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[77] = vadd_s32(v12[77], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C54118B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[79];
  a9 = a1;
  a10 = 0;
  if (sub_1C6231C4C(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[80] = vadd_s32(v12[80], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[82];
  a9 = a1;
  a10 = 0;
  if (sub_1C6231EE0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[83] = vadd_s32(v12[83], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[85];
  a9 = a1;
  a10 = 0;
  if (sub_1C53A9A88(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[86] = vadd_s32(v12[86], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C54119AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[88];
  a9 = a1;
  a10 = 0;
  if (sub_1C53AA1C4(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[89] = vadd_s32(v12[89], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[97];
  a9 = a1;
  a10 = 0;
  if (sub_1C53AB520(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[98] = vadd_s32(v12[98], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[103];
  a9 = a1;
  a10 = 0;
  if (sub_1C53ABED0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[104] = vadd_s32(v12[104], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[109];
  a9 = a1;
  a10 = 0;
  if (sub_1C623327C(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[110] = vadd_s32(v12[110], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[112];
  a9 = a1;
  a10 = 0;
  if (sub_1C6233ACC(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[113] = vadd_s32(v12[113], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[118];
  a9 = a1;
  a10 = 0;
  if (sub_1C6233EAC(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[119] = vadd_s32(v12[119], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int **a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[121];
  a9 = (unsigned int *)a1;
  a10 = 0;
  if (sub_1C6234B50(v13, &a9, &a10))
  {
    *a10 = (unsigned int *)-8192;
    v12[122] = vadd_s32(v12[122], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[130];
  a9 = a1;
  a10 = 0;
  if (sub_1C62351E0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[131] = vadd_s32(v12[131], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[133];
  a9 = a1;
  a10 = 0;
  if (sub_1C6232A90(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[134] = vadd_s32(v12[134], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[91];
  a9 = a1;
  a10 = 0;
  if (sub_1C53AAD14(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[92] = vadd_s32(v12[92], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[100];
  a9 = a1;
  a10 = 0;
  if (sub_1C62326F4(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[101] = vadd_s32(v12[101], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[106];
  a9 = a1;
  a10 = 0;
  if (sub_1C6232F1C(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[107] = vadd_s32(v12[107], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[115];
  a9 = a1;
  a10 = 0;
  if (sub_1C53ACBDC(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[116] = vadd_s32(v12[116], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[124];
  a9 = a1;
  a10 = 0;
  if (sub_1C53ADA64(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[125] = vadd_s32(v12[125], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[127];
  a9 = a1;
  a10 = 0;
  if (sub_1C62351E0(v13, &a9, &a10))
  {
    *a10 = -8192;
    v12[128] = vadd_s32(v12[128], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[136];
  a9 = a1;
  a10 = 0;
  if (sub_1C62354B4(v13, (uint64_t)&a9, &a10))
  {
    *a10 = -8192;
    v12[137] = vadd_s32(v12[137], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

void sub_1C5411EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  uint64_t *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int32x2_t **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (int32x2_t **)*v11;
  v12 = *v11;
  v13 = (uint64_t *)&(*v11)[142];
  a9 = a1;
  a10 = 0;
  if (sub_1C6230BF4(v13, (uint64_t)&a9, &a10))
  {
    *a10 = -8192;
    v12[143] = vadd_s32(v12[143], (int32x2_t)0x1FFFFFFFFLL);
  }
  JUMPOUT(0x1C541155CLL);
}

uint64_t llvm::MDTuple::getImpl(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v9;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 **v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _QWORD *v44;
  int v46;
  uint64_t v47;

  v5 = a4;
  if (a4)
  {
    v9 = 0;
  }
  else
  {
    v11 = sub_1C53831BC(a2, (uint64_t)&a2[a3]);
    v9 = v11;
    v12 = *(_DWORD *)(*a1 + 456);
    if (v12)
    {
      v13 = *(_QWORD *)(*a1 + 440);
      v14 = 1;
      for (i = v11; ; i = v16 + v14++)
      {
        v16 = i & (v12 - 1);
        v17 = *(_QWORD *)(v13 + 8 * v16);
        if (v17 == -4096)
          break;
        if (v17 != -8192 && *(_DWORD *)(v17 + 4) == v11)
        {
          v18 = *(unsigned int *)(v17 + 8);
          if (a3)
          {
            if (a3 == v18)
            {
              v19 = -8 * a3;
              v20 = a2;
              while (*v20 == *(_QWORD *)(v17 + v19))
              {
                ++v20;
                v19 += 8;
                if (!v19)
                  goto LABEL_16;
              }
            }
          }
          else if (!(_DWORD)v18)
          {
LABEL_16:
            if (v16 == v12)
              v21 = 0;
            else
              v21 = *(_QWORD *)(v13 + 8 * v16);
            goto LABEL_20;
          }
        }
      }
    }
    v21 = 0;
LABEL_20:
    if (v21 || !a5)
      return v21;
  }
  v22 = operator new(8 * a3 + 24);
  v21 = (uint64_t)v22 + 8 * a3;
  if ((_DWORD)a3)
    bzero(v22, 8 * a3);
  *(_BYTE *)v21 = 4;
  v23 = v5 & 0x7F;
  *(_BYTE *)(v21 + 1) = v5 & 0x7F;
  *(_WORD *)(v21 + 2) = 0;
  *(_DWORD *)(v21 + 4) = 0;
  *(_DWORD *)(v21 + 8) = a3;
  *(_DWORD *)(v21 + 12) = 0;
  *(_QWORD *)(v21 + 16) = a1;
  if (a3)
  {
    v46 = v5;
    v24 = v9;
    v25 = a1;
    v26 = 0;
    v27 = 8 * a3;
    do
    {
      v28 = (unsigned __int8 *)a2[v26];
      v29 = v21 - 8 * *(unsigned int *)(v21 + 8);
      v30 = (unsigned __int8 **)(v29 + 8 * v26);
      v31 = *(_BYTE *)(v21 + 1);
      if (*v30)
        llvm::MetadataTracking::untrack(v29 + 8 * v26, *v30);
      *v30 = v28;
      if (v28)
      {
        if ((v31 & 0x7F) != 0)
          v32 = 2;
        else
          v32 = v21 | 2;
        llvm::MetadataTracking::track((uint64_t)v30, v28, v32);
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
    v23 = *(_BYTE *)(v21 + 1) & 0x7F;
    a1 = v25;
    v9 = v24;
    v5 = v46;
  }
  if (!v23)
    llvm::MDNode::countUnresolvedOperands(v21);
  *(_DWORD *)(v21 + 4) = v9;
  v33 = *a1;
  v47 = v21;
  if (v5)
  {
    if (v5 == 1)
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v21);
  }
  else
  {
    v34 = *(_DWORD *)(v33 + 456);
    if (!v34)
    {
      v44 = 0;
LABEL_52:
      *sub_1C5419C10(v33 + 440, &v47, v44) = v21;
      return v21;
    }
    v35 = *(_QWORD *)(v33 + 440);
    v36 = v34 - 1;
    v37 = v36 & v9;
    v38 = (_QWORD *)(v35 + 8 * (v36 & v9));
    v39 = *v38;
    if (*v38 != v21)
    {
      v40 = 0;
      v41 = 1;
      while (v39 != -4096)
      {
        if (v40)
          v42 = 0;
        else
          v42 = v39 == -8192;
        if (v42)
          v40 = v38;
        v43 = v37 + v41++;
        v37 = v43 & v36;
        v38 = (_QWORD *)(v35 + 8 * v37);
        v39 = *v38;
        if (*v38 == v21)
          return v21;
      }
      if (v40)
        v44 = v40;
      else
        v44 = v38;
      goto LABEL_52;
    }
  }
  return v21;
}

void llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if ((v3 & 4) != 0)
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v3 & 0xFFFFFFFFFFFFFFF8), 0);
  llvm::MDNode::deleteAsSubclass(this);
}

void llvm::MDNode::replaceOperandWith(llvm::MDNode *this, int a2, llvm::Metadata *a3)
{
  char *v3;
  unsigned __int8 *v4;

  v3 = (char *)this + 8 * a2 + -8 * *((unsigned int *)this + 2);
  v4 = *(unsigned __int8 **)v3;
  if (*(llvm::Metadata **)v3 != a3)
  {
    if ((*((_BYTE *)this + 1) & 0x7F) != 0)
    {
      if (v4)
        llvm::MetadataTracking::untrack((uint64_t)v3, v4);
      *(_QWORD *)v3 = a3;
      if (a3)
        llvm::MetadataTracking::track((uint64_t)v3, (unsigned __int8 *)a3, 2);
    }
    else
    {
      llvm::MDNode::handleChangedOperand((uint64_t)this, v3, a3);
    }
  }
}

llvm::MDNode *llvm::MDNode::concatenate(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  llvm::MDNode *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v3 = a2;
  v14[4] = *MEMORY[0x1E0C80C00];
  if (this)
  {
    if (a2)
    {
      v5 = *((unsigned int *)this + 2);
      v9 = 1;
      v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v11 = v10;
      v12 = v14;
      v13 = 0x400000000;
      sub_1C541239C(&v9, (uint64_t *)this - v5, (uint64_t *)this);
      sub_1C541239C(&v9, (uint64_t *)v3 - *((unsigned int *)v3 + 2), (uint64_t *)v3);
      v6 = *((_QWORD *)this + 2);
      v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0)
        v7 = (uint64_t *)*v7;
      v3 = (llvm::MDNode *)sub_1C54124F4(v7, (unsigned __int8 **)v12, v13);
      if (v12 != v14)
        free(v12);
      if ((v9 & 1) == 0)
        MEMORY[0x1CAA32FB4](v10.i64[0], 8);
    }
    else
    {
      return this;
    }
  }
  return v3;
}

_QWORD *sub_1C541239C(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[11];

  if (a2 != a3)
  {
    v25[9] = v3;
    v25[10] = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = result + 1;
    v9 = (uint64_t)(result + 5);
    v10 = (uint64_t)(result + 7);
    do
    {
      v11 = *v6;
      v25[0] = *v6;
      if ((*(_BYTE *)v7 & 1) != 0)
      {
        v12 = 4;
        v13 = v8;
      }
      else
      {
        v12 = *(_DWORD *)(v7 + 16);
        if (!v12)
        {
          v22 = 0;
LABEL_19:
          result = sub_1C4FAA200(v7, (uint64_t)v25, v25, v22);
          *result = v25[0];
          v23 = *v6;
          v24 = *(unsigned int *)(v7 + 48);
          if (v24 >= *(unsigned int *)(v7 + 52))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v10, v24 + 1, 8);
            v24 = *(unsigned int *)(v7 + 48);
          }
          *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v24) = v23;
          ++*(_DWORD *)(v7 + 48);
          goto LABEL_22;
        }
        v13 = *(_QWORD **)(v7 + 8);
      }
      v14 = v12 - 1;
      v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
      v16 = &v13[v15];
      v17 = *v16;
      if (v11 != *v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -4096)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -8192;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v13[v15];
          v17 = *v16;
          if (v11 == *v16)
            goto LABEL_22;
        }
        if (v18)
          v22 = v18;
        else
          v22 = v16;
        goto LABEL_19;
      }
LABEL_22:
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1C54124F4(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  unsigned int v6;

  if (!a3)
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  v3 = *a2;
  if (!*a2)
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  if (*v3 - 4 > 0x1E)
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  if (a3 != *((_DWORD *)v3 + 2))
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  v4 = (unsigned __int8 **)&v3[-8 * a3];
  if (v3 != *v4)
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  if ((_DWORD)a3 != 1)
  {
    v6 = 1;
    while (a2[v6] == v4[v6])
    {
      if ((_DWORD)a3 == ++v6)
        return (uint64_t)*a2;
    }
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  return (uint64_t)*a2;
}

uint64_t llvm::MDNode::intersect(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[32];
  uint64_t v22[2];
  uint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[5];

  v3 = 0;
  v28[4] = *MEMORY[0x1E0C80C00];
  if (this && a2)
  {
    v6 = *((unsigned int *)this + 2);
    v23 = 1;
    v24 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v25 = v24;
    v26 = v28;
    v27 = 0x400000000;
    sub_1C541239C(&v23, (uint64_t *)this - v6, (uint64_t *)this);
    v7 = *((unsigned int *)a2 + 2);
    v17 = v21;
    v18 = v21;
    v19 = 4;
    v20 = 0;
    if ((_DWORD)v7)
    {
      v8 = -8 * v7;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v17, *(_QWORD *)((char *)a2 + v8));
        v8 += 8;
      }
      while (v8);
    }
    v9 = (uint64_t *)v26;
    v22[0] = (uint64_t)&v17;
    v22[1] = (uint64_t)&v23;
    if ((_DWORD)v27)
    {
      v10 = (uint64_t *)((char *)v26 + 8 * v27);
      v11 = 8 * v27 - 8;
      while (1)
      {
        v12 = v9 + 1;
        if (sub_1C5419EE8(v22, v9))
          break;
        v11 -= 8;
        ++v9;
        if (v11 == -8)
        {
          v9 = v10;
          goto LABEL_15;
        }
      }
      for (; v11; v11 -= 8)
      {
        if (!sub_1C5419EE8(v22, v12))
          *v9++ = *v12;
        ++v12;
      }
    }
LABEL_15:
    LODWORD(v13) = v27;
    if (v9 != (uint64_t *)((char *)v26 + 8 * v27))
    {
      v13 = (unint64_t)((char *)v9 - (_BYTE *)v26) >> 3;
      LODWORD(v27) = v13;
    }
    v14 = *((_QWORD *)this + 2);
    v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((v14 & 4) != 0)
      v15 = (uint64_t *)*v15;
    v3 = sub_1C54124F4(v15, (unsigned __int8 **)v26, v13);
    if (v18 != v17)
      free(v18);
    if (v26 != v28)
      free(v26);
    if ((v23 & 1) == 0)
      MEMORY[0x1CAA32FB4](v24.i64[0], 8);
  }
  return v3;
}

uint64_t llvm::MDNode::getMostGenericAliasScope(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  _BYTE v33[128];
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[128];
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  _QWORD v44[5];

  v3 = 0;
  v44[4] = *MEMORY[0x1E0C80C00];
  if (this && a2)
  {
    v34 = v38;
    v35 = v38;
    v36 = 16;
    v37 = 0;
    v29 = v33;
    v30 = v33;
    v31 = 16;
    v32 = 0;
    v39 = 1;
    v40 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v41 = v40;
    v42 = (unsigned __int8 **)v44;
    v43 = 0x400000000;
    v6 = *((unsigned int *)this + 2);
    if ((_DWORD)v6)
    {
      v7 = -8 * v6;
      do
      {
        v8 = *(unsigned __int8 **)((char *)this + v7);
        if (*v8 - 4 <= 0x1E)
        {
          v9 = *((unsigned int *)v8 + 2);
          if (v9 >= 2)
          {
            v10 = *(unsigned __int8 **)&v8[-8 * v9 + 8];
            if (v10)
            {
              if (*v10 - 4 <= 0x1E)
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v34, (uint64_t)v10);
            }
          }
        }
        v7 += 8;
      }
      while (v7);
    }
    v11 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v11)
    {
      v12 = -8 * v11;
      do
      {
        v13 = *(unsigned __int8 **)((char *)a2 + v12);
        if (*v13 - 4 <= 0x1E)
        {
          v14 = *((unsigned int *)v13 + 2);
          if (v14 >= 2)
          {
            v15 = *(unsigned __int8 **)&v13[-8 * v14 + 8];
            if (v15)
            {
              if (*v15 - 4 <= 0x1E)
              {
                v16 = (char *)sub_1C477672C((uint64_t)&v34, (uint64_t)v15);
                v17 = v35 == v34 ? (uint64_t *)((char *)&v36 + 4) : &v36;
                if (v16 != &v35[8 * *(unsigned int *)v17])
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v29, (uint64_t)v15);
                  v28 = *(_QWORD *)((char *)a2 + v12);
                  sub_1C4FA9FAC((uint64_t)&v39, &v28);
                }
              }
            }
          }
        }
        v12 += 8;
      }
      while (v12);
    }
    v18 = *((unsigned int *)this + 2);
    if ((_DWORD)v18)
    {
      v19 = -8 * v18;
      do
      {
        v20 = *(unsigned __int8 **)((char *)this + v19);
        if (*v20 - 4 <= 0x1E)
        {
          v21 = *((unsigned int *)v20 + 2);
          if (v21 >= 2)
          {
            v22 = *(unsigned __int8 **)&v20[-8 * v21 + 8];
            if (v22)
            {
              if (*v22 - 4 <= 0x1E)
              {
                v23 = (char *)sub_1C477672C((uint64_t)&v29, (uint64_t)v22);
                v24 = v30 == v29 ? (uint64_t *)((char *)&v31 + 4) : &v31;
                if (v23 != &v30[8 * *(unsigned int *)v24])
                {
                  v28 = *(_QWORD *)((char *)this + v19);
                  sub_1C4FA9FAC((uint64_t)&v39, &v28);
                }
              }
            }
          }
        }
        v19 += 8;
      }
      while (v19);
    }
    if ((_DWORD)v43)
    {
      v25 = *((_QWORD *)this + 2);
      v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF8);
      if ((v25 & 4) != 0)
        v26 = (uint64_t *)*v26;
      v3 = sub_1C54124F4(v26, v42, v43);
    }
    else
    {
      v3 = 0;
    }
    if (v42 != v44)
      free(v42);
    if ((v39 & 1) == 0)
      MEMORY[0x1CAA32FB4](v40.i64[0], 8);
    if (v30 != v29)
      free(v30);
    if (v35 != v34)
      free(v35);
  }
  return v3;
}

llvm::MDNode *llvm::MDNode::getMostGenericFPMath(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  llvm::MDNode *result;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  int v11;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  _BOOL4 v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::MDNode *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::detail::DoubleAPFloat *v44;
  llvm::detail::DoubleAPFloat *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  char v53;
  uint64_t v54;

  result = 0;
  v54 = *MEMORY[0x1E0C80C00];
  if (!this || !a2)
    return result;
  v6 = *(_QWORD *)(*((_QWORD *)this - *((unsigned int *)this + 2)) + 128);
  v7 = (llvm::detail::DoubleAPFloat *)&v50;
  v8 = *(_QWORD *)(v6 + 32);
  if ((_UNKNOWN *)v8 == &unk_1C866F1C0)
  {
    v7 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v50, (const llvm::detail::DoubleAPFloat *)(v6 + 32));
  }
  else
  {
    v50 = *(_QWORD *)(v6 + 32);
    v9 = (uint64_t *)*(unsigned int *)(v8 + 8);
    if (((_DWORD)v9 + 64) >= 0x80)
    {
      v43 = v6;
      v41 = v8;
      v36 = operator new[]();
      v8 = v41;
      v6 = v43;
      v9 = (uint64_t *)v36;
      v7 = (llvm::detail::DoubleAPFloat *)&v50;
      v51 = v9;
    }
    v10 = *(_BYTE *)(v6 + 52);
    v11 = v10 & 7;
    v53 = v10 & 0xF;
    v52 = *(_DWORD *)(v6 + 48);
    v13 = (v10 & 6) != 0 && v11 != 3;
    if (v11 == 1 || v13)
    {
      v15 = *(unsigned int *)(v8 + 8);
      if ((v15 - 64) > 0xFFFFFF7F)
        v9 = (uint64_t *)&v51;
      v18 = *(uint64_t **)(v6 + 40);
      v16 = (uint64_t *)(v6 + 40);
      v17 = v18;
      if ((*(_DWORD *)(*(v16 - 1) + 8) - 64) < 0xFFFFFF80)
        v16 = v17;
      if (v15 <= 0xFFFFFFBF)
      {
        v19 = (unint64_t)(v15 + 64) >> 6;
        do
        {
          v20 = *v16++;
          *v9++ = v20;
          --v19;
        }
        while (v19);
      }
    }
  }
  v21 = *(_QWORD *)(*((_QWORD *)a2 - *((unsigned int *)a2 + 2)) + 128);
  v22 = *(_QWORD *)(v21 + 32);
  if ((_UNKNOWN *)v22 == &unk_1C866F1C0)
  {
    v44 = v7;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v46, (const llvm::detail::DoubleAPFloat *)(v21 + 32));
    v7 = v44;
  }
  else
  {
    v46 = *(_QWORD *)(v21 + 32);
    if ((*(_DWORD *)(v22 + 8) + 64) >= 0x80)
    {
      v45 = v7;
      v42 = v21;
      v37 = operator new[]();
      v21 = v42;
      v38 = v37;
      v7 = v45;
      v47 = (uint64_t *)v38;
    }
    v23 = *(_BYTE *)(v21 + 52);
    v24 = v23 & 7;
    v49 = v49 & 0xF0 | v23 & 0xF;
    v48 = *(_DWORD *)(v21 + 48);
    v26 = (v23 & 6) != 0 && v24 != 3;
    if (v24 == 1 || v26)
    {
      v28 = *(unsigned int *)(v46 + 8);
      if ((v28 - 64) <= 0xFFFFFF7F)
        v29 = v47;
      else
        v29 = (uint64_t *)&v47;
      v32 = *(uint64_t **)(v21 + 40);
      v30 = (uint64_t *)(v21 + 40);
      v31 = v32;
      if ((*(_DWORD *)(*(v30 - 1) + 8) - 64) < 0xFFFFFF80)
        v30 = v31;
      if (v28 <= 0xFFFFFFBF)
      {
        v33 = (unint64_t)(v28 + 64) >> 6;
        do
        {
          v34 = *v30++;
          *v29++ = v34;
          --v33;
        }
        while (v33);
      }
    }
  }
  if ((_UNKNOWN *)v50 == &unk_1C866F1C0)
    v35 = llvm::detail::DoubleAPFloat::compare(v7, (const llvm::detail::DoubleAPFloat *)&v46);
  else
    llvm::detail::IEEEFloat::compare(v7, (const llvm::detail::IEEEFloat *)&v46);
  if (v35)
    result = a2;
  else
    result = this;
  if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
  {
    v39 = (uint64_t)result;
    sub_1C4773C74((uint64_t *)&v47);
  }
  else
  {
    if ((*(_DWORD *)(v46 + 8) - 64) > 0xFFFFFF7F || !v47)
      goto LABEL_50;
    v39 = (uint64_t)result;
    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  }
  result = (llvm::MDNode *)v39;
LABEL_50:
  if ((_UNKNOWN *)v50 == &unk_1C866F1C0)
  {
    v40 = result;
    sub_1C4773C74((uint64_t *)&v51);
    return v40;
  }
  if ((*(_DWORD *)(v50 + 8) - 64) <= 0xFFFFFF7F && v51)
  {
    v40 = result;
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    return v40;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::getMostGenericRange(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t Impl;
  unsigned int v6;
  signed int v7;
  unsigned int v8;
  signed int v9;
  signed int v11;
  signed int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  BOOL v45;
  BOOL v46;
  uint64_t v49;
  llvm::ValueAsMetadata **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  void *v57;
  uint64_t v58;
  void *v59;
  int v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[5];

  Impl = 0;
  v63[4] = *MEMORY[0x1E0C80C00];
  if (!this || !a2)
    return (llvm::MDNode *)Impl;
  if (this == a2)
    return this;
  v61 = v63;
  v62 = 0x400000000;
  v6 = *((_DWORD *)this + 2);
  v7 = v6 >> 1;
  v8 = *((_DWORD *)a2 + 2);
  v9 = v8 >> 1;
  if (v6 >= 2 && v8 >= 2)
  {
    v12 = 0;
    v11 = 0;
    while (1)
    {
      v25 = (char *)this - 8 * *((unsigned int *)this + 2);
      v26 = *(_QWORD *)(*(_QWORD *)&v25[16 * v12] + 128);
      v27 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
      v28 = *(_QWORD *)(*(_QWORD *)&v27[16 * v11] + 128);
      v29 = (_QWORD *)(v28 + 24);
      v30 = *(unsigned int *)(v26 + 32);
      if (v30 > 0x40)
      {
        v31 = *(_QWORD *)(v26 + 24);
        v32 = *(_QWORD *)(v31 + 8 * ((v30 - 1) >> 6)) & (1 << (v30 - 1));
        v33 = *(_DWORD *)(v28 + 32);
        v34 = v33 - 1;
        v35 = *(_QWORD *)(v28 + 24);
        if (v33 >= 0x41)
          v29 = (_QWORD *)(v35 + 8 * (v34 >> 6));
        if ((v32 != 0) == ((*v29 >> v34) & 1))
        {
          v36 = v30 + 63;
          v37 = v35 - 8;
          v38 = (v36 >> 3) & 0x3FFFFFF8;
          v39 = v31 - 8;
          while (v38)
          {
            v40 = *(_QWORD *)(v39 + v38);
            v41 = *(_QWORD *)(v37 + v38);
            v38 -= 8;
            if (v40 != v41)
            {
              if (v40 <= v41)
                goto LABEL_25;
              break;
            }
          }
        }
        else if (v32)
        {
LABEL_25:
          sub_1C54132D0((uint64_t)&v61, v26, *(_QWORD *)(*(_QWORD *)&v25[8 * ((2 * v12++) | 1)] + 128));
          goto LABEL_31;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v26 + 24) << -(char)v30) >> -(char)v30 < (uint64_t)(*v29 << -(char)v30) >> -(char)v30)
      {
        goto LABEL_25;
      }
      sub_1C54132D0((uint64_t)&v61, *(_QWORD *)(*(_QWORD *)&v27[16 * v11] + 128), *(_QWORD *)(*(_QWORD *)&v27[8 * ((2 * v11) | 1)] + 128));
      ++v11;
LABEL_31:
      if (v12 >= v7 || v11 >= v9)
        goto LABEL_9;
    }
  }
  v11 = 0;
  v12 = 0;
LABEL_9:
  v13 = __OFSUB__(v7, v12);
  v14 = v7 - v12;
  if (!((v14 < 0) ^ v13 | (v14 == 0)))
  {
    v15 = 2 * v12;
    do
    {
      v16 = (char *)this - 8 * *((unsigned int *)this + 2);
      sub_1C54132D0((uint64_t)&v61, *(_QWORD *)(*(_QWORD *)&v16[8 * v15] + 128), *(_QWORD *)(*(_QWORD *)&v16[8 * v15 + 8] + 128));
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  v13 = __OFSUB__(v9, v11);
  v17 = v9 - v11;
  if (!((v17 < 0) ^ v13 | (v17 == 0)))
  {
    v18 = 2 * v11;
    do
    {
      v19 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
      sub_1C54132D0((uint64_t)&v61, *(_QWORD *)(*(_QWORD *)&v19[8 * v18] + 128), *(_QWORD *)(*(_QWORD *)&v19[8 * v18 + 8] + 128));
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  v20 = v62;
  if (v62 >= 5)
  {
    if (sub_1C5413394((uint64_t *)&v61, *(_QWORD *)v61, *((_QWORD *)v61 + 1)))
    {
      v49 = 0;
      do
      {
        *(_QWORD *)((char *)v61 + v49) = *(_QWORD *)((char *)v61 + v49 + 16);
        v49 += 8;
      }
      while (8 * (v20 - 2) != v49);
      sub_1C6154790((uint64_t)&v61, v20 - 2);
    }
    v20 = v62;
  }
  if (v20 != 2)
    goto LABEL_69;
  v21 = v61;
  v22 = *(_QWORD *)v61;
  v23 = *(unsigned int *)(*(_QWORD *)v61 + 32);
  if (v23 > 0x40)
  {
    v24 = (void *)operator new[]();
    memcpy(v24, *(const void **)(v22 + 24), ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
    v21 = v61;
  }
  else
  {
    v24 = *(void **)(v22 + 24);
  }
  v42 = v21[1];
  v43 = *(unsigned int *)(v42 + 32);
  if (v43 > 0x40)
  {
    v44 = (void *)operator new[]();
    memcpy(v44, *(const void **)(v42 + 24), ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v44 = *(void **)(v42 + 24);
  }
  LODWORD(v58) = v23;
  v57 = v24;
  v60 = v43;
  v59 = v44;
  if (v23 > 0x40)
  {
    v46 = !memcmp(v24, v44, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8)
       && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v57) == (_DWORD)v23;
  }
  else
  {
    if ((_DWORD)v23)
      v45 = v24 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v23);
    else
      v45 = 1;
    v46 = v24 == v44 && v45;
  }
  if (v43 >= 0x41 && v44 != 0)
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  if (v23 < 0x41 || v24 == 0)
  {
    if (!v46)
    {
LABEL_68:
      v20 = v62;
LABEL_69:
      v57 = &v59;
      v58 = 0x400000000;
      if (v20 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)&v59, v20, 8);
        v20 = v62;
      }
      if (v20)
      {
        v50 = (llvm::ValueAsMetadata **)v61;
        v51 = 8 * v20;
        do
        {
          v52 = llvm::ValueAsMetadata::get(*v50, a2);
          v53 = v58;
          if (v58 >= (unint64_t)HIDWORD(v58))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)&v59, v58 + 1, 8);
            v53 = v58;
          }
          *((_QWORD *)v57 + v53) = v52;
          LODWORD(v58) = v58 + 1;
          ++v50;
          v51 -= 8;
        }
        while (v51);
      }
      v54 = *((_QWORD *)this + 2);
      v55 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFF8);
      if ((v54 & 4) != 0)
        v55 = (uint64_t *)*v55;
      Impl = llvm::MDTuple::getImpl(v55, v57, v58, 0, 1);
      if (v57 != &v59)
        free(v57);
      goto LABEL_80;
    }
  }
  else
  {
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    if (!v46)
      goto LABEL_68;
  }
  Impl = 0;
LABEL_80:
  if (v61 != v63)
    free(v61);
  return (llvm::MDNode *)Impl;
}

uint64_t sub_1C54132D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6)
  {
    result = sub_1C5413394((uint64_t *)result, a2, a3);
    if ((result & 1) != 0)
      return result;
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 8);
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
  v7 = *(_DWORD *)(v5 + 12);
  v8 = (*(_DWORD *)(v5 + 8) + 1);
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t sub_1C5413394(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  BOOL v30;
  llvm::ConstantInt **v32;
  const llvm::APInt *v33;
  const llvm::APInt *v34;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  void *v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  void *__s1;
  unsigned int v47;
  void *__s2;
  unsigned int v49;

  v6 = *(unsigned int *)(a2 + 32);
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)(a2 + 24), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v7 = *(void **)(a2 + 24);
  }
  v8 = *(unsigned int *)(a3 + 32);
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    memcpy(v9, *(const void **)(a3 + 24), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = *(void **)(a3 + 24);
  }
  v43 = v6;
  v42 = v7;
  v45 = v8;
  v44 = v9;
  v10 = *((_DWORD *)a1 + 2);
  v11 = *a1;
  v37 = (v10 - 2);
  v12 = *(_QWORD *)(*a1 + 8 * v37);
  v13 = *(unsigned int *)(v12 + 32);
  if (v13 > 0x40)
  {
    v14 = (void *)operator new[]();
    memcpy(v14, *(const void **)(v12 + 24), ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
    v11 = *a1;
  }
  else
  {
    v14 = *(void **)(v12 + 24);
  }
  v15 = (v10 - 1);
  v16 = *(_QWORD *)(v11 + 8 * v15);
  v17 = *(unsigned int *)(v16 + 32);
  if (v17 > 0x40)
  {
    v18 = (void *)operator new[]();
    memcpy(v18, *(const void **)(v16 + 24), ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v18 = *(void **)(v16 + 24);
  }
  v19 = v14;
  if (v13 >= 0x41)
  {
    v19 = (void *)operator new[]();
    memcpy(v19, v14, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
  }
  v20 = v18;
  if (v17 >= 0x41)
  {
    v20 = (void *)operator new[]();
    memcpy(v20, v18, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
  }
  v39 = v13;
  v38 = v19;
  v41 = v17;
  v40 = v20;
  llvm::ConstantRange::intersectWith((uint64_t)&v42, (llvm::ConstantRange *)&v38, 0, (uint64_t)&__s1);
  v21 = v47;
  if (v47 >= 0x41)
  {
    v24 = __s1;
    v22 = __s2;
    v36 = v47 + 63;
    if (memcmp(__s1, __s2, (v36 >> 3) & 0x3FFFFFF8))
      goto LABEL_19;
    v25 = 0;
    v26 = v36 >> 6;
    do
    {
      if (v26-- < 1)
        break;
      v28 = v24[v26];
      v25 += __clz(v28);
    }
    while (!v28);
    v29 = v21 | 0xFFFFFFC0;
    if ((v21 & 0x3F) == 0)
      v29 = 0;
    if (v25 + v29 != v21)
      goto LABEL_19;
  }
  else
  {
    v22 = __s2;
    if ((unint64_t)__s2 | (unint64_t)__s1)
    {
LABEL_19:
      v23 = 1;
      goto LABEL_37;
    }
  }
  if (v45 > 0x40)
  {
    if (!memcmp(v44, v38, (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_19;
  }
  else if (v44 == v38)
  {
    goto LABEL_19;
  }
  if (v43 > 0x40)
    v30 = memcmp(v42, v40, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v30 = v42 == v40;
  v23 = v30;
LABEL_37:
  if (v49 >= 0x41 && v22 != 0)
  {
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    v21 = v47;
  }
  if (v21 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if ((_DWORD)v23)
  {
    llvm::ConstantRange::unionWith((uint64_t)&v38, (unsigned int *)&v42, 0, (uint64_t)&__s1);
    v32 = *(llvm::ConstantInt ***)a3;
    *(_QWORD *)(*a1 + 8 * v37) = llvm::ConstantInt::get(v32, (llvm::Type *)&__s1, v33);
    *(_QWORD *)(*a1 + 8 * v15) = llvm::ConstantInt::get(v32, (llvm::Type *)&__s2, v34);
    if (v49 >= 0x41 && __s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    if (v47 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  if (v41 >= 0x41 && v40)
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  if (v17 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v13 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v45 >= 0x41 && v44)
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  return v23;
}

llvm::MDNode *llvm::MDNode::getMostGenericAlignmentOrDereferenceable(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = 0;
  if (this && a2)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this - *((unsigned int *)this + 2)) + 128);
    v5 = *(_QWORD *)(*((_QWORD *)a2 - *((unsigned int *)a2 + 2)) + 128);
    v6 = (_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u)
      v6 = (_QWORD *)*v6;
    v7 = (_QWORD *)*v6;
    v8 = (_QWORD *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    if ((unint64_t)v7 >= *v8)
      return a2;
    else
      return this;
  }
  return (llvm::MDNode *)v3;
}

_QWORD *llvm::NamedMDNode::NamedMDNode(_QWORD *a1, llvm::Twine *a2)
{
  _QWORD *v3;

  *a1 = 0;
  a1[1] = 0;
  llvm::Twine::str(a2, a1 + 2);
  a1[5] = 0;
  v3 = (_QWORD *)operator new();
  *v3 = v3 + 2;
  v3[1] = 0x400000000;
  a1[6] = v3;
  return a1;
}

{
  _QWORD *v3;

  *a1 = 0;
  a1[1] = 0;
  llvm::Twine::str(a2, a1 + 2);
  a1[5] = 0;
  v3 = (_QWORD *)operator new();
  *v3 = v3 + 2;
  v3[1] = 0x400000000;
  a1[6] = v3;
  return a1;
}

void llvm::NamedMDNode::~NamedMDNode(llvm::NamedMDNode *this)
{
  char **v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;

  v2 = (char **)*((_QWORD *)this + 6);
  v3 = *v2;
  v4 = *((unsigned int *)v2 + 2);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = v3 - 8;
    do
    {
      v7 = *(unsigned __int8 **)&v6[v5];
      if (v7)
        llvm::MetadataTracking::untrack((uint64_t)&v6[v5], v7);
      v5 -= 8;
    }
    while (v5);
    v8 = (char **)*((_QWORD *)this + 6);
    v3 = *v8;
  }
  else
  {
    v8 = v2;
  }
  *((_DWORD *)v2 + 2) = 0;
  v9 = *((unsigned int *)v8 + 2);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = v3 - 8;
    do
    {
      v12 = *(unsigned __int8 **)&v11[v10];
      if (v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[v10], v12);
      v10 -= 8;
    }
    while (v10);
    v3 = *v8;
  }
  if (v3 != (char *)(v8 + 2))
    free(v3);
  MEMORY[0x1CAA32FC0](v8, 0x1080C40ED926357);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 6) + 8);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this, unsigned int a2)
{
  return *(_QWORD *)(**((_QWORD **)this + 6) + 8 * a2);
}

_QWORD *llvm::NamedMDNode::addOperand(llvm::NamedMDNode *this, llvm::MDNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  unsigned __int8 *v5;

  v5 = (unsigned __int8 *)a2;
  v2 = *((_QWORD *)this + 6);
  v3 = *(unsigned int *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12))
    return (_QWORD *)sub_1C5419FD8(*((_QWORD *)this + 6), &v5);
  result = (_QWORD *)(*(_QWORD *)v2 + 8 * v3);
  *result = a2;
  if (a2)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, (unsigned __int8 *)a2, 2);
    LODWORD(v3) = *(_DWORD *)(v2 + 8);
  }
  *(_DWORD *)(v2 + 8) = v3 + 1;
  return result;
}

unsigned __int8 **llvm::NamedMDNode::setOperand(llvm::NamedMDNode *this, unsigned int a2, llvm::MDNode *a3)
{
  return sub_1C4FCE378((unsigned __int8 **)(**((_QWORD **)this + 6) + 8 * a2), (unsigned __int8 *)a3);
}

void llvm::NamedMDNode::eraseFromParent(llvm::Module **this)
{
  llvm::Module::eraseNamedMetadata(this[5], (llvm::NamedMDNode *)this);
}

uint64_t llvm::NamedMDNode::clearOperands(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v1 = *(_QWORD *)(this + 48);
  v2 = *(unsigned int *)(v1 + 8);
  if ((_DWORD)v2)
  {
    v3 = 8 * v2;
    v4 = *(_QWORD *)v1 - 8;
    do
    {
      this = v4 + v3;
      v5 = *(unsigned __int8 **)(v4 + v3);
      if (v5)
        this = llvm::MetadataTracking::untrack(this, v5);
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return this;
}

char *llvm::NamedMDNode::getName(llvm::NamedMDNode *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  v1 = (char *)this + 16;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

uint64_t llvm::MDAttachments::lookup(llvm::MDAttachments *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)this + 8;
  v4 = 16 * v2;
  while (*(_DWORD *)(v3 - 8) != a2)
  {
    v3 += 16;
    v4 -= 16;
    if (!v4)
      return 0;
  }
  return *(_QWORD *)v3;
}

unsigned int *llvm::MDAttachments::get(unsigned int *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = result[2];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) == a2)
      {
        v6 = *v5;
        v7 = *(unsigned int *)(a3 + 8);
        if (v7 >= *(unsigned int *)(a3 + 12))
        {
          v11 = v5;
          v12 = v4;
          v10 = a2;
          v8 = *v5;
          v9 = a3;
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v7 + 1, 8);
          v6 = v8;
          a3 = v9;
          v5 = v11;
          v4 = v12;
          a2 = v10;
          v7 = *(unsigned int *)(v9 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v6;
        ++*(_DWORD *)(a3 + 8);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  return result;
}

void llvm::MDAttachments::getAll(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 *v9;
  const std::nothrow_t *v10;
  unint64_t i;
  __n128 *v12;
  __n128 v13;
  __n128 *v15;
  uint64_t v16;
  char v17;

  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v5 = *(unsigned int *)(a2 + 8);
      if (v5 >= *(_DWORD *)(a2 + 12))
      {
        v16 = a2;
        sub_1C4775004(a2, (unsigned int *)v4 - 2, v4);
        a2 = v16;
      }
      else
      {
        v6 = *(_QWORD *)a2 + 16 * v5;
        *(_DWORD *)v6 = *((_DWORD *)v4 - 2);
        *(_QWORD *)(v6 + 8) = *v4;
        *(_DWORD *)(a2 + 8) = v5 + 1;
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (v7 > 1)
  {
    v8 = *(__n128 **)a2;
    v9 = (__n128 *)(*(_QWORD *)a2 + 16 * v7);
    v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    for (i = *(unsigned int *)(a2 + 8); ; i >>= 1)
    {
      v12 = (__n128 *)operator new(16 * i, v10);
      if (v12)
        break;
      if (i <= 1)
      {
        sub_1C541A078(v8, v9, (uint64_t)&v17, v7, 0, 0, v13);
        return;
      }
    }
    v15 = v12;
    sub_1C541A078(v8, v9, (uint64_t)&v17, v7, v12, i, v13);
    operator delete(v15);
  }
}

void llvm::MDAttachments::set(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  int v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;

  v6 = *((unsigned int *)this + 2);
  if ((_DWORD)v6 == 1)
  {
    v7 = *(_QWORD *)this;
    if (**(_DWORD **)this == a2)
    {
      *((_DWORD *)this + 2) = 0;
      v14 = *(unsigned __int8 **)(v7 + 8);
      v12 = v7 + 8;
      v13 = v14;
      if (v14)
        llvm::MetadataTracking::untrack(v12, v13);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)v6)
      goto LABEL_9;
    v7 = *(_QWORD *)this;
  }
  v8 = 0;
  v9 = (_DWORD *)(v7 + 16 * v6);
  v10 = 16 * v6;
  while (*(_DWORD *)(v7 + v8) != a2)
  {
    v8 += 16;
    if (v10 == v8)
      goto LABEL_6;
  }
  v9 = (_DWORD *)(v7 + v8);
  if (16 * v6 - 16 != v8)
  {
    v15 = (unsigned __int8 **)(v9 + 6);
    v16 = v10 - v8 - 16;
    do
    {
      v17 = *((_DWORD *)v15 - 2);
      if (v17 != a2)
      {
        v18 = (unsigned __int8 **)(v9 + 2);
        *v9 = v17;
        v9 += 4;
        sub_1C49264C4(v18, v15);
      }
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    v7 = *(_QWORD *)this;
    v6 = *((unsigned int *)this + 2);
  }
LABEL_6:
  v11 = (_DWORD *)(v7 + 16 * v6);
  if (v11 != v9)
  {
    v19 = (unsigned __int8 **)(v11 - 2);
    do
    {
      if (*v19)
        llvm::MetadataTracking::untrack((uint64_t)v19, *v19);
      v20 = v19 - 1;
      v19 -= 2;
    }
    while (v20 != (unsigned __int8 **)v9);
    v7 = *(_QWORD *)this;
  }
  *((_DWORD *)this + 2) = ((unint64_t)v9 - v7) >> 4;
LABEL_9:
  if (a3)
  {
    v21 = a2;
    v22 = (unsigned __int8 *)a3;
    llvm::MetadataTracking::track((uint64_t)&v22, (unsigned __int8 *)a3, 2);
    sub_1C5414128((uint64_t)this, (unint64_t)&v21);
    if (v22)
      llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  }
}

BOOL llvm::MDAttachments::erase(llvm::MDAttachments *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;

  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 == 1)
  {
    v5 = *(_QWORD *)this;
    if (**(_DWORD **)this == a2)
    {
      *((_DWORD *)this + 2) = 0;
      v15 = *(unsigned __int8 **)(v5 + 8);
      v13 = v5 + 8;
      v14 = v15;
      if (v15)
        llvm::MetadataTracking::untrack(v13, v14);
      return 1;
    }
  }
  else
  {
    if (!(_DWORD)v4)
      return 0;
    v5 = *(_QWORD *)this;
  }
  v6 = 0;
  v7 = (_DWORD *)(v5 + 16 * v4);
  v8 = 16 * v4;
  while (*(_DWORD *)(v5 + v6) != a2)
  {
    v6 += 16;
    if (v8 == v6)
      goto LABEL_6;
  }
  v7 = (_DWORD *)(v5 + v6);
  if (16 * v4 - 16 == v6)
  {
LABEL_6:
    v9 = v4;
    goto LABEL_7;
  }
  v16 = (unsigned __int8 **)(v7 + 6);
  v17 = v8 - v6 - 16;
  do
  {
    v18 = *((_DWORD *)v16 - 2);
    if (v18 != a2)
    {
      v19 = (unsigned __int8 **)(v7 + 2);
      *v7 = v18;
      v7 += 4;
      sub_1C49264C4(v19, v16);
    }
    v16 += 2;
    v17 -= 16;
  }
  while (v17);
  v5 = *(_QWORD *)this;
  v9 = *((unsigned int *)this + 2);
LABEL_7:
  v10 = (_DWORD *)(v5 + 16 * v9);
  if (v10 != v7)
  {
    v20 = (unsigned __int8 **)(v10 - 2);
    do
    {
      if (*v20)
        llvm::MetadataTracking::untrack((uint64_t)v20, *v20);
      v21 = v20 - 1;
      v20 -= 2;
    }
    while (v21 != (unsigned __int8 **)v7);
    v5 = *(_QWORD *)this;
  }
  v11 = ((unint64_t)v7 - v5) >> 4;
  *((_DWORD *)this + 2) = v11;
  return (_DWORD)v4 != (_DWORD)v11;
}

void llvm::MDAttachments::insert(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  int v4;
  unsigned __int8 *v5;

  v4 = a2;
  v5 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v5, (unsigned __int8 *)a3, 2);
  sub_1C5414128((uint64_t)this, (unint64_t)&v4);
  if (v5)
    llvm::MetadataTracking::untrack((uint64_t)&v5, v5);
}

void sub_1C5414128(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 16 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C541A948(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C541A948(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 16 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v6 = *(_DWORD *)a2;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
  sub_1C5417198(v6 + 8, (unsigned __int8 **)(a2 + 8));
  ++*(_DWORD *)(a1 + 8);
}

uint64_t llvm::Value::getMetadata(llvm::Value *this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::Value **v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  llvm::Value **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::Value **v18;
  llvm::Value *v19;
  llvm::Value *v20;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = ***(_QWORD ***)this;
  v20 = this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2480);
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v8 = (llvm::Value **)(v5 + 40 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_4;
    v14 = 0;
    v15 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v9 == (llvm::Value *)-8192;
      if (v16)
        v14 = v8;
      v17 = v7 + v15++;
      v7 = v17 & v6;
      v8 = (llvm::Value **)(v5 + 40 * (v17 & v6));
      v9 = *v8;
      if (*v8 == this)
        goto LABEL_4;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v8;
  }
  else
  {
    v18 = 0;
  }
  v8 = (llvm::Value **)sub_1C541AB24(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
  v19 = v20;
  v8[3] = 0;
  v8[4] = 0;
  *v8 = v19;
  v8[1] = (llvm::Value *)(v8 + 3);
  v8[2] = (llvm::Value *)0x100000000;
LABEL_4:
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    return 0;
  v11 = (uint64_t)v8[1] + 8;
  v12 = 16 * v10;
  while (*(_DWORD *)(v11 - 8) != a2)
  {
    result = 0;
    v11 += 16;
    v12 -= 16;
    if (!v12)
      return result;
  }
  return *(_QWORD *)v11;
}

uint64_t llvm::Value::getMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  int MDKindID;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return 0;
  v8 = *(uint64_t ***)a1;
  v9 = ***(_QWORD ***)a1;
  v26 = a1;
  v10 = *(_DWORD *)(v9 + 2496);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 2480);
    v12 = v10 - 1;
    v13 = v12 & ((a1 >> 4) ^ (a1 >> 9));
    v14 = (_QWORD *)(v11 + 40 * v13);
    v15 = *v14;
    if (*v14 == a1)
      goto LABEL_6;
    v20 = 0;
    v21 = 1;
    while (v15 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v15 == -8192;
      if (v22)
        v20 = v14;
      v23 = v13 + v21++;
      v13 = v23 & v12;
      v14 = (_QWORD *)(v11 + 40 * v13);
      v15 = *v14;
      if (*v14 == a1)
        goto LABEL_6;
    }
    if (v20)
      v24 = v20;
    else
      v24 = v14;
  }
  else
  {
    v24 = 0;
  }
  v14 = sub_1C541AB24(v9 + 2480, (uint64_t)&v26, &v26, v24);
  v25 = v26;
  v14[4] = 0;
  v14[3] = 0;
  *v14 = v25;
  v14[1] = v14 + 3;
  v14[2] = 0x100000000;
  v8 = *(uint64_t ***)a1;
LABEL_6:
  MDKindID = llvm::LLVMContext::getMDKindID(*v8, a2, a3);
  v17 = *((unsigned int *)v14 + 4);
  if (!(_DWORD)v17)
    return 0;
  v18 = v14[1] + 8;
  v19 = 16 * v17;
  while (*(_DWORD *)(v18 - 8) != MDKindID)
  {
    v3 = 0;
    v18 += 16;
    v19 -= 16;
    if (!v19)
      return v3;
  }
  return *(_QWORD *)v18;
}

unsigned int *llvm::Value::getMetadata(unsigned int *result, int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;

  if ((*((_BYTE *)result + 23) & 0x20) != 0)
  {
    v5 = ***(_QWORD ***)result;
    v18 = result;
    v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 2480);
      v8 = v6 - 1;
      v9 = (v6 - 1) & ((result >> 4) ^ (result >> 9));
      v10 = (unsigned int *)(v7 + 40 * v9);
      v11 = *(_QWORD *)v10;
      if (*(unsigned int **)v10 == result)
        return llvm::MDAttachments::get(v10 + 2, a2, a3);
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (unsigned int *)(v7 + 40 * (v15 & v8));
        v11 = *(_QWORD *)v10;
        if (*(unsigned int **)v10 == result)
          return llvm::MDAttachments::get(v10 + 2, a2, a3);
      }
      if (v12)
        v16 = v12;
      else
        v16 = v10;
    }
    else
    {
      v16 = 0;
    }
    v10 = (unsigned int *)sub_1C541AB24(v5 + 2480, (uint64_t)&v18, (uint64_t *)&v18, v16);
    v17 = (uint64_t)v18;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = 0;
    *(_QWORD *)v10 = v17;
    *((_QWORD *)v10 + 1) = v10 + 6;
    *((_QWORD *)v10 + 2) = 0x100000000;
    return llvm::MDAttachments::get(v10 + 2, a2, a3);
  }
  return result;
}

unsigned int *llvm::Value::getMetadata(unsigned int *result, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  unsigned int *v5;
  int MDKindID;

  if ((*((_BYTE *)result + 23) & 0x20) != 0)
  {
    v5 = result;
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)result, a2, a3);
    return llvm::Value::getMetadata(v5, MDKindID, a4);
  }
  return result;
}

void llvm::Value::getAllMetadata(_BYTE *a1, uint64_t a2)
{
  uint64_t *v3;

  if ((a1[23] & 0x20) != 0)
  {
    v3 = sub_1C54145FC((uint64_t *)(***(_QWORD ***)a1 + 2480), (uint64_t)a1);
    llvm::MDAttachments::getAll((unsigned int *)v3 + 2, a2);
  }
}

uint64_t *sub_1C54145FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
    return (uint64_t *)(v2 + 40 * v3);
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (uint64_t *)(v2 + 40 * v4);
  v6 = *result;
  if (*result != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      result = (uint64_t *)(v2 + 40 * v4);
      v6 = *result;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 40 * v3);
  }
  return result;
}

void llvm::Value::setMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  llvm::Value **v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  llvm::Value *v26;
  unsigned int v27;
  _QWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  int32x2_t **v35;
  int32x2_t *v36;
  __int32 v37;
  int32x2_t v38;
  __int32 v39;
  unsigned int v40;
  uint64_t v41;
  llvm::Value *v42;
  char *v43;
  uint64_t v44;
  llvm::Value **v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  _QWORD *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  llvm::Value **v58;
  llvm::Value *v59;
  _QWORD *v60;
  llvm::Value *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 **v68;
  uint64_t v69;
  int v70;
  unsigned __int8 **v71;
  unsigned __int8 **v72;
  uint64_t v73;
  int v74;
  unsigned __int8 **v75;
  unsigned __int8 **v76;
  unsigned __int8 **v77;
  unsigned __int8 **v78;
  unsigned __int8 **v79;
  llvm::Value *v80;
  unsigned __int8 *v81;

  if (a3)
  {
    v20 = ***(_QWORD ***)this;
    v80 = this;
    v21 = *(_DWORD *)(v20 + 2496);
    if (v21)
    {
      v22 = *(_QWORD *)(v20 + 2480);
      v23 = v21 - 1;
      v24 = v23 & ((this >> 4) ^ (this >> 9));
      v25 = (_QWORD *)(v22 + 40 * v24);
      v26 = (llvm::Value *)*v25;
      if ((llvm::Value *)*v25 == this)
        goto LABEL_16;
      v49 = 0;
      v50 = 1;
      while (v26 != (llvm::Value *)-4096)
      {
        if (v49)
          v51 = 0;
        else
          v51 = v26 == (llvm::Value *)-8192;
        if (v51)
          v49 = v25;
        v52 = v24 + v50++;
        v24 = v52 & v23;
        v25 = (_QWORD *)(v22 + 40 * v24);
        v26 = (llvm::Value *)*v25;
        if ((llvm::Value *)*v25 == this)
          goto LABEL_16;
      }
      if (v49)
        v60 = v49;
      else
        v60 = v25;
    }
    else
    {
      v60 = 0;
    }
    v25 = sub_1C541AB24(v20 + 2480, (uint64_t)&v80, (uint64_t *)&v80, v60);
    v61 = v80;
    v25[3] = 0;
    v25[4] = 0;
    *v25 = v61;
    v25[1] = v25 + 3;
    v25[2] = 0x100000000;
LABEL_16:
    v27 = *((_DWORD *)v25 + 4);
    if (!v27)
    {
      *((_DWORD *)this + 5) |= 0x20000000u;
      v27 = *((_DWORD *)v25 + 4);
    }
    v28 = v25 + 1;
    if (v27 == 1)
    {
      v29 = (_DWORD *)*v28;
      if (*(_DWORD *)*v28 != a2)
        goto LABEL_20;
      *((_DWORD *)v25 + 4) = 0;
      v67 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      v65 = (uint64_t)(v29 + 2);
      v66 = v67;
      if (v67)
        llvm::MetadataTracking::untrack(v65, v66);
    }
    else if (v27)
    {
      v29 = (_DWORD *)*v28;
LABEL_20:
      v30 = 0;
      v31 = v27;
      v32 = 16 * v27;
      v33 = &v29[(unint64_t)v32 / 4];
      while (v29[v30 / 4] != a2)
      {
        v30 += 16;
        if (v32 == v30)
          goto LABEL_23;
      }
      v33 = &v29[v30 / 4];
      if (v32 - 16 != v30)
      {
        v72 = (unsigned __int8 **)(v33 + 6);
        v73 = v32 - v30 - 16;
        do
        {
          v74 = *((_DWORD *)v72 - 2);
          if (v74 != a2)
          {
            v75 = (unsigned __int8 **)(v33 + 2);
            *v33 = v74;
            v33 += 4;
            sub_1C49264C4(v75, v72);
          }
          v72 += 2;
          v73 -= 16;
        }
        while (v73);
        v29 = (_DWORD *)v25[1];
        v31 = *((unsigned int *)v25 + 4);
      }
LABEL_23:
      v34 = &v29[4 * v31];
      if (v34 != v33)
      {
        v78 = (unsigned __int8 **)(v34 - 2);
        do
        {
          if (*v78)
            llvm::MetadataTracking::untrack((uint64_t)v78, *v78);
          v79 = v78 - 1;
          v78 -= 2;
        }
        while (v79 != (unsigned __int8 **)v33);
        v29 = (_DWORD *)*v28;
      }
      *((_DWORD *)v25 + 4) = (unint64_t)((char *)v33 - (char *)v29) >> 4;
    }
    LODWORD(v80) = a2;
    v81 = (unsigned __int8 *)a3;
    llvm::MetadataTracking::track((uint64_t)&v81, (unsigned __int8 *)a3, 2);
    sub_1C5414128((uint64_t)(v25 + 1), (unint64_t)&v80);
    if (v81)
      llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
    return;
  }
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return;
  v5 = ***(_QWORD ***)this;
  v80 = this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = v8 & ((this >> 4) ^ (this >> 9));
    v10 = (llvm::Value **)(v7 + 40 * v9);
    v11 = *v10;
    if (*v10 == this)
      goto LABEL_5;
    v45 = 0;
    v46 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      if (v45)
        v47 = 0;
      else
        v47 = v11 == (llvm::Value *)-8192;
      if (v47)
        v45 = v10;
      v48 = v9 + v46++;
      v9 = v48 & v8;
      v10 = (llvm::Value **)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == this)
        goto LABEL_5;
    }
    if (v45)
      v58 = v45;
    else
      v58 = v10;
  }
  else
  {
    v58 = 0;
  }
  v10 = (llvm::Value **)sub_1C541AB24(v5 + 2480, (uint64_t)&v80, (uint64_t *)&v80, v58);
  v59 = v80;
  v10[3] = 0;
  v10[4] = 0;
  *v10 = v59;
  v10[1] = (llvm::Value *)(v10 + 3);
  v10[2] = (llvm::Value *)0x100000000;
LABEL_5:
  v12 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v12 == 1)
  {
    v13 = v10[1];
    if (*(_DWORD *)v13 != a2)
      goto LABEL_7;
    *((_DWORD *)v10 + 4) = 0;
    v64 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v62 = (uint64_t)v13 + 8;
    v63 = v64;
    if (v64)
    {
      llvm::MetadataTracking::untrack(v62, v63);
      LODWORD(v18) = *((_DWORD *)v10 + 4);
      goto LABEL_12;
    }
  }
  else if ((_DWORD)v12)
  {
    v13 = v10[1];
LABEL_7:
    v14 = 0;
    v15 = (_DWORD *)((char *)v13 + 16 * v12);
    v16 = 16 * v12;
    while (*(_DWORD *)((char *)v13 + v14) != a2)
    {
      v14 += 16;
      if (v16 == v14)
        goto LABEL_10;
    }
    v15 = (_DWORD *)((char *)v13 + v14);
    if (16 * v12 - 16 != v14)
    {
      v68 = (unsigned __int8 **)(v15 + 6);
      v69 = v16 - v14 - 16;
      do
      {
        v70 = *((_DWORD *)v68 - 2);
        if (v70 != a2)
        {
          v71 = (unsigned __int8 **)(v15 + 2);
          *v15 = v70;
          v15 += 4;
          sub_1C49264C4(v71, v68);
        }
        v68 += 2;
        v69 -= 16;
      }
      while (v69);
      v13 = v10[1];
      v12 = *((unsigned int *)v10 + 4);
    }
LABEL_10:
    v17 = (_DWORD *)((char *)v13 + 16 * v12);
    if (v17 != v15)
    {
      v76 = (unsigned __int8 **)(v17 - 2);
      do
      {
        if (*v76)
          llvm::MetadataTracking::untrack((uint64_t)v76, *v76);
        v77 = v76 - 1;
        v76 -= 2;
      }
      while (v77 != (unsigned __int8 **)v15);
      v13 = v10[1];
    }
    v18 = (unint64_t)((char *)v15 - (char *)v13) >> 4;
    *((_DWORD *)v10 + 4) = v18;
LABEL_12:
    if ((_DWORD)v18)
      return;
  }
  v35 = **(int32x2_t ****)this;
  v36 = *v35;
  v37 = (*v35)[312].i32[0];
  if (v37)
  {
    v38 = v36[310];
    v39 = v37 - 1;
    v40 = v39 & ((this >> 4) ^ (this >> 9));
    v41 = *(_QWORD *)&v38 + 40 * v40;
    v42 = *(llvm::Value **)v41;
    if (*(llvm::Value **)v41 == this)
    {
LABEL_30:
      v43 = *(char **)(v41 + 8);
      v44 = *(unsigned int *)(v41 + 16);
      if ((_DWORD)v44)
      {
        v55 = v43 - 8;
        v56 = 16 * v44;
        do
        {
          v57 = *(unsigned __int8 **)&v55[v56];
          if (v57)
            llvm::MetadataTracking::untrack((uint64_t)&v55[v56], v57);
          v56 -= 16;
        }
        while (v56);
        v43 = *(char **)(v41 + 8);
      }
      if (v43 != (char *)(v41 + 24))
        free(v43);
      *(_QWORD *)v41 = -8192;
      v36[311] = vadd_s32(v36[311], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v53 = 1;
      while (v42 != (llvm::Value *)-4096)
      {
        v54 = v40 + v53++;
        v40 = v54 & v39;
        v41 = *(_QWORD *)&v38 + 40 * v40;
        v42 = *(llvm::Value **)v41;
        if (*(llvm::Value **)v41 == this)
          goto LABEL_30;
      }
    }
  }
  *((_DWORD *)this + 5) &= ~0x20000000u;
}

void llvm::Value::addMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  llvm::Value *v8;
  int v9;
  unsigned __int8 *v10;

  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x20000000) == 0)
    *((_DWORD *)this + 5) = v5 | 0x20000000;
  v6 = ***(_QWORD ***)this + 2480;
  v8 = this;
  v7 = sub_1C541AA4C(v6, (uint64_t *)&v8) + 1;
  v9 = a2;
  v10 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v10, (unsigned __int8 *)a3, 2);
  sub_1C5414128((uint64_t)v7, (unint64_t)&v9);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
}

void llvm::Value::addMetadata(uint64_t ***a1, unsigned __int8 *a2, size_t a3, llvm::MDNode *a4)
{
  int MDKindID;

  MDKindID = llvm::LLVMContext::getMDKindID(**a1, a2, a3);
  llvm::Value::addMetadata((llvm::Value *)a1, MDKindID, a4);
}

BOOL llvm::Value::eraseMetadata(llvm::Value *this, int a2)
{
  uint64_t v3;
  _QWORD *v5;
  _BOOL4 v7;
  llvm::Value *v8;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = ***(_QWORD ***)this + 2480;
  v8 = this;
  v5 = sub_1C541AA4C(v3, (uint64_t *)&v8);
  v7 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v5 + 1), a2);
  if (!*((_DWORD *)v5 + 4))
    llvm::Value::clearMetadata(this);
  return v7;
}

void llvm::Value::clearMetadata(llvm::Value *this)
{
  int v1;
  int32x2_t **v3;
  int32x2_t *v4;
  __int32 v5;
  int32x2_t v6;
  __int32 v7;
  unsigned int v8;
  uint64_t v9;
  llvm::Value *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x20000000) != 0)
  {
    v3 = **(int32x2_t ****)this;
    v4 = *v3;
    v5 = (*v3)[312].i32[0];
    if (v5)
    {
      v6 = v4[310];
      v7 = v5 - 1;
      v8 = v7 & ((this >> 4) ^ (this >> 9));
      v9 = *(_QWORD *)&v6 + 40 * v8;
      v10 = *(llvm::Value **)v9;
      if (*(llvm::Value **)v9 == this)
      {
LABEL_4:
        v11 = *(char **)(v9 + 8);
        v12 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v12)
        {
          v15 = v11 - 8;
          v16 = 16 * v12;
          do
          {
            v17 = *(unsigned __int8 **)&v15[v16];
            if (v17)
              llvm::MetadataTracking::untrack((uint64_t)&v15[v16], v17);
            v16 -= 16;
          }
          while (v16);
          v11 = *(char **)(v9 + 8);
        }
        if (v11 != (char *)(v9 + 24))
          free(v11);
        *(_QWORD *)v9 = -8192;
        v4[311] = vadd_s32(v4[311], (int32x2_t)0x1FFFFFFFFLL);
        v1 = *((_DWORD *)this + 5);
      }
      else
      {
        v13 = 1;
        while (v10 != (llvm::Value *)-4096)
        {
          v14 = v8 + v13++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)&v6 + 40 * v8;
          v10 = *(llvm::Value **)v9;
          if (*(llvm::Value **)v9 == this)
            goto LABEL_4;
        }
      }
    }
    *((_DWORD *)this + 5) = v1 & 0xDFFFFFFF;
  }
}

BOOL llvm::Value::eraseMetadata(uint64_t ***a1, unsigned __int8 *a2, size_t a3)
{
  int MDKindID;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  int32x2_t **v10;
  int32x2_t *v11;
  __int32 v12;
  int32x2_t v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t ***v17;
  int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _BOOL4 v25;
  uint64_t ***v26;

  MDKindID = llvm::LLVMContext::getMDKindID(**a1, a2, a3);
  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    return 0;
  v6 = ***a1 + 2480;
  v26 = a1;
  v7 = MDKindID;
  v8 = sub_1C541AA4C(v6, (uint64_t *)&v26);
  v25 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v8 + 1), v7);
  if (!*((_DWORD *)v8 + 4))
  {
    v9 = *((_DWORD *)a1 + 5);
    if ((v9 & 0x20000000) != 0)
    {
      v10 = (int32x2_t **)**a1;
      v11 = *v10;
      v12 = (*v10)[312].i32[0];
      if (v12)
      {
        v13 = v11[310];
        v14 = v12 - 1;
        v15 = v14 & ((a1 >> 4) ^ (a1 >> 9));
        v16 = *(_QWORD *)&v13 + 40 * v15;
        v17 = *(uint64_t ****)v16;
        if (*(uint64_t ****)v16 == a1)
        {
LABEL_10:
          v20 = *(char **)(v16 + 8);
          v21 = *(unsigned int *)(v16 + 16);
          if ((_DWORD)v21)
          {
            v22 = v20 - 8;
            v23 = 16 * v21;
            do
            {
              v24 = *(unsigned __int8 **)&v22[v23];
              if (v24)
                llvm::MetadataTracking::untrack((uint64_t)&v22[v23], v24);
              v23 -= 16;
            }
            while (v23);
            v20 = *(char **)(v16 + 8);
          }
          if (v20 != (char *)(v16 + 24))
            free(v20);
          *(_QWORD *)v16 = -8192;
          v11[311] = vadd_s32(v11[311], (int32x2_t)0x1FFFFFFFFLL);
          v9 = *((_DWORD *)a1 + 5);
        }
        else
        {
          v18 = 1;
          while (v17 != (uint64_t ***)-4096)
          {
            v19 = v15 + v18++;
            v15 = v19 & v14;
            v16 = *(_QWORD *)&v13 + 40 * v15;
            v17 = *(uint64_t ****)v16;
            if (*(uint64_t ****)v16 == a1)
              goto LABEL_10;
          }
        }
      }
      *((_DWORD *)a1 + 5) = v9 & 0xDFFFFFFF;
    }
  }
  return v25;
}

void llvm::Instruction::setMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4)
{
  int v6;
  int MDKindID;
  unsigned __int8 *v8;

  if (a4)
  {
    MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a1, a2, a3);
    if (MDKindID)
      goto LABEL_8;
    v8 = a4;
    llvm::MetadataTracking::track((uint64_t)&v8, a4, 2);
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
  {
    v6 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a1, a2, a3);
    MDKindID = v6;
    if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
    {
      if (v6)
      {
LABEL_8:
        llvm::Value::setMetadata((llvm::Value *)a1, MDKindID, (llvm::MDNode *)a4);
        return;
      }
      v8 = 0;
LABEL_12:
      sub_1C49264C4((unsigned __int8 **)(a1 + 48), &v8);
      if (v8)
        llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
    }
  }
}

void llvm::Instruction::setMetadata(unsigned __int8 **this, int a2, llvm::MDNode *a3)
{
  unsigned __int8 *v4;

  if (a3)
  {
    if (!a2)
    {
      v4 = (unsigned __int8 *)a3;
      llvm::MetadataTracking::track((uint64_t)&v4, (unsigned __int8 *)a3, 2);
LABEL_10:
      sub_1C49264C4(this + 6, &v4);
      if (v4)
        llvm::MetadataTracking::untrack((uint64_t)&v4, v4);
      return;
    }
LABEL_6:
    llvm::Value::setMetadata((llvm::Value *)this, a2, a3);
    return;
  }
  if (this[6] || (*((_BYTE *)this + 23) & 0x20) != 0)
  {
    if (!a2)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
}

uint64_t llvm::Instruction::getMetadataImpl(uint64_t ***a1, unsigned __int8 *a2, size_t a3)
{
  int MDKindID;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t ****v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t ****v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t ****v21;
  uint64_t v22;
  uint64_t ***v23;

  MDKindID = llvm::LLVMContext::getMDKindID(**a1, a2, a3);
  if (MDKindID)
  {
    if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      return 0;
    v5 = MDKindID;
    v6 = ***a1;
    v23 = a1;
    v7 = *(_DWORD *)(v6 + 2496);
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 2480);
      v9 = v7 - 1;
      v10 = v9 & ((a1 >> 4) ^ (a1 >> 9));
      v11 = (uint64_t ****)(v8 + 40 * v10);
      v12 = *v11;
      if (*v11 == a1)
        goto LABEL_5;
      v17 = 0;
      v18 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v12 == (uint64_t ***)-8192;
        if (v19)
          v17 = v11;
        v20 = v10 + v18++;
        v10 = v20 & v9;
        v11 = (uint64_t ****)(v8 + 40 * v10);
        v12 = *v11;
        if (*v11 == a1)
          goto LABEL_5;
      }
      if (v17)
        v21 = v17;
      else
        v21 = v11;
    }
    else
    {
      v21 = 0;
    }
    v11 = (uint64_t ****)sub_1C541AB24(v6 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    v22 = (uint64_t)v23;
    v11[3] = 0;
    v11[4] = 0;
    *v11 = (uint64_t ***)v22;
    v11[1] = (uint64_t ***)(v11 + 3);
    v11[2] = (uint64_t ***)0x100000000;
LABEL_5:
    v13 = *((unsigned int *)v11 + 4);
    if ((_DWORD)v13)
    {
      v14 = (uint64_t)(v11[1] + 1);
      v15 = 16 * v13;
      while (*(_DWORD *)(v14 - 8) != v5)
      {
        result = 0;
        v14 += 16;
        v15 -= 16;
        if (!v15)
          return result;
      }
      return *(_QWORD *)v14;
    }
    return 0;
  }
  v14 = (uint64_t)(a1 + 6);
  return *(_QWORD *)v14;
}

uint64_t llvm::Instruction::getMetadataImpl(llvm::Instruction *this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::Instruction **v8;
  llvm::Instruction *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  llvm::Instruction **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::Instruction **v18;
  llvm::Instruction *v19;
  llvm::Instruction *v20;

  if (a2)
  {
    if ((*((_BYTE *)this + 23) & 0x20) == 0)
      return 0;
    v3 = ***(_QWORD ***)this;
    v20 = this;
    v4 = *(_DWORD *)(v3 + 2496);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 + 2480);
      v6 = v4 - 1;
      v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
      v8 = (llvm::Instruction **)(v5 + 40 * v7);
      v9 = *v8;
      if (*v8 == this)
        goto LABEL_5;
      v14 = 0;
      v15 = 1;
      while (v9 != (llvm::Instruction *)-4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v9 == (llvm::Instruction *)-8192;
        if (v16)
          v14 = v8;
        v17 = v7 + v15++;
        v7 = v17 & v6;
        v8 = (llvm::Instruction **)(v5 + 40 * (v17 & v6));
        v9 = *v8;
        if (*v8 == this)
          goto LABEL_5;
      }
      if (v14)
        v18 = v14;
      else
        v18 = v8;
    }
    else
    {
      v18 = 0;
    }
    v8 = (llvm::Instruction **)sub_1C541AB24(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
    v19 = v20;
    v8[3] = 0;
    v8[4] = 0;
    *v8 = v19;
    v8[1] = (llvm::Instruction *)(v8 + 3);
    v8[2] = (llvm::Instruction *)0x100000000;
LABEL_5:
    v10 = *((unsigned int *)v8 + 4);
    if ((_DWORD)v10)
    {
      v11 = (char *)v8[1] + 8;
      v12 = 16 * v10;
      while (*((_DWORD *)v11 - 2) != a2)
      {
        result = 0;
        v11 += 16;
        v12 -= 16;
        if (!v12)
          return result;
      }
      return *(_QWORD *)v11;
    }
    return 0;
  }
  v11 = (char *)this + 48;
  return *(_QWORD *)v11;
}

void llvm::Instruction::dropUnknownNonDebugMetadata(_QWORD **a1, unsigned int *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  int32x2_t **v28;
  int32x2_t *v29;
  __int32 v30;
  int32x2_t v31;
  __int32 v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD **v35;
  int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  int v44;
  int32x2_t **v45;
  int32x2_t *v46;
  __int32 v47;
  int32x2_t v48;
  __int32 v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD **v52;
  int v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 **v60;
  unsigned __int8 **v61;
  unsigned __int8 **v62;
  _QWORD **v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[16];
  _QWORD **v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a1 + 5);
  if ((v3 & 0x20000000) != 0)
  {
    if (a3)
    {
      v64 = v66;
      v65 = 0x400000000;
      v68 = 0;
      v69 = 0;
      v67 = &v68;
      v6 = 4 * a3;
      do
      {
        sub_1C4854E58((uint64_t)&v64, a2++);
        v6 -= 4;
      }
      while (v6);
      v7 = *(_QWORD *)**a1 + 2480;
      v63 = a1;
      v8 = sub_1C541AA4C(v7, (uint64_t *)&v63);
      v9 = v8;
      v10 = v8[1];
      v11 = *((unsigned int *)v8 + 4);
      if ((_DWORD)v11)
      {
        v12 = (unsigned int *)(v10 + 16 * v11);
        v13 = (unsigned int *)v8[1];
        while (!v69)
        {
          if (!(_DWORD)v65)
            goto LABEL_23;
          v17 = 4 * v65;
          v18 = v64;
          while (*v18 != *v13)
          {
            ++v18;
            v17 -= 4;
            if (!v17)
              goto LABEL_23;
          }
          if (!v17)
            goto LABEL_23;
LABEL_21:
          v13 += 4;
          if (v13 == v12)
          {
            v19 = (unsigned int *)(v10 + 16 * v11);
            goto LABEL_59;
          }
        }
        if (v68)
        {
          v14 = *v13;
          v15 = v68;
          do
          {
            v16 = *((_DWORD *)v15 + 7);
            if (v14 >= v16)
            {
              if (v16 >= v14)
                goto LABEL_21;
              ++v15;
            }
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
LABEL_23:
        v20 = v13 + 4;
        if (v13 + 4 == v12)
        {
          v19 = v13;
        }
        else
        {
          v19 = v13;
          do
          {
            v21 = (unsigned __int8 **)v13;
            v13 = v20;
            if (v69)
            {
              v22 = v68;
              if (v68)
              {
                v23 = *v13;
                do
                {
                  v24 = *((_DWORD *)v22 + 7);
                  if (v23 >= v24)
                  {
                    if (v24 >= v23)
                      goto LABEL_39;
                    ++v22;
                  }
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
            }
            else if ((_DWORD)v65)
            {
              v25 = v64;
              v23 = *v13;
              v26 = 4 * v65;
              while (*v25 != v23)
              {
                ++v25;
                v26 -= 4;
                if (!v26)
                  goto LABEL_40;
              }
              if (v26)
              {
LABEL_39:
                v27 = (unsigned __int8 **)(v19 + 2);
                *v19 = v23;
                v19 += 4;
                sub_1C49264C4(v27, v21 + 3);
              }
            }
LABEL_40:
            v20 = v13 + 4;
          }
          while (v13 + 4 != v12);
          v10 = v9[1];
          LODWORD(v11) = *((_DWORD *)v9 + 4);
        }
      }
      else
      {
        v19 = (unsigned int *)v8[1];
      }
LABEL_59:
      if ((unsigned int *)(v10 + 16 * v11) != v19)
      {
        v60 = (unsigned __int8 **)(v10 + 16 * v11 - 8);
        do
        {
          if (*v60)
          {
            v62 = v60;
            llvm::MetadataTracking::untrack((uint64_t)v60, *v60);
            v60 = v62;
          }
          v61 = v60 - 1;
          v60 -= 2;
        }
        while (v61 != (unsigned __int8 **)v19);
        v10 = v9[1];
      }
      v43 = ((unint64_t)v19 - v10) >> 4;
      *((_DWORD *)v9 + 4) = v43;
      if (!(_DWORD)v43)
      {
        v44 = *((_DWORD *)a1 + 5);
        if ((v44 & 0x20000000) != 0)
        {
          v45 = (int32x2_t **)**a1;
          v46 = *v45;
          v47 = (*v45)[312].i32[0];
          if (v47)
          {
            v48 = v46[310];
            v49 = v47 - 1;
            v50 = v49 & ((a1 >> 4) ^ (a1 >> 9));
            v51 = *(_QWORD *)&v48 + 40 * v50;
            v52 = *(_QWORD ***)v51;
            if (*(_QWORD ***)v51 == a1)
            {
LABEL_67:
              v55 = *(char **)(v51 + 8);
              v56 = *(unsigned int *)(v51 + 16);
              if ((_DWORD)v56)
              {
                v57 = v55 - 8;
                v58 = 16 * v56;
                do
                {
                  v59 = *(unsigned __int8 **)&v57[v58];
                  if (v59)
                    llvm::MetadataTracking::untrack((uint64_t)&v57[v58], v59);
                  v58 -= 16;
                }
                while (v58);
                v55 = *(char **)(v51 + 8);
              }
              if (v55 != (char *)(v51 + 24))
                free(v55);
              *(_QWORD *)v51 = -8192;
              v46[311] = vadd_s32(v46[311], (int32x2_t)0x1FFFFFFFFLL);
              v44 = *((_DWORD *)a1 + 5);
            }
            else
            {
              v53 = 1;
              while (v52 != (_QWORD **)-4096)
              {
                v54 = v50 + v53++;
                v50 = v54 & v49;
                v51 = *(_QWORD *)&v48 + 40 * v50;
                v52 = *(_QWORD ***)v51;
                if (*(_QWORD ***)v51 == a1)
                  goto LABEL_67;
              }
            }
          }
          *((_DWORD *)a1 + 5) = v44 & 0xDFFFFFFF;
        }
      }
      sub_1C47655E8((uint64_t)&v67, v68);
      if (v64 != v66)
        free(v64);
    }
    else
    {
      v28 = (int32x2_t **)**a1;
      v29 = *v28;
      v30 = (*v28)[312].i32[0];
      if (v30)
      {
        v31 = v29[310];
        v32 = v30 - 1;
        v33 = v32 & ((a1 >> 4) ^ (a1 >> 9));
        v34 = *(_QWORD *)&v31 + 40 * v33;
        v35 = *(_QWORD ***)v34;
        if (*(_QWORD ***)v34 == a1)
        {
LABEL_47:
          v38 = *(char **)(v34 + 8);
          v39 = *(unsigned int *)(v34 + 16);
          if ((_DWORD)v39)
          {
            v40 = v38 - 8;
            v41 = 16 * v39;
            do
            {
              v42 = *(unsigned __int8 **)&v40[v41];
              if (v42)
                llvm::MetadataTracking::untrack((uint64_t)&v40[v41], v42);
              v41 -= 16;
            }
            while (v41);
            v38 = *(char **)(v34 + 8);
          }
          if (v38 != (char *)(v34 + 24))
            free(v38);
          *(_QWORD *)v34 = -8192;
          v29[311] = vadd_s32(v29[311], (int32x2_t)0x1FFFFFFFFLL);
          v3 = *((_DWORD *)a1 + 5);
        }
        else
        {
          v36 = 1;
          while (v35 != (_QWORD **)-4096)
          {
            v37 = v33 + v36++;
            v33 = v37 & v32;
            v34 = *(_QWORD *)&v31 + 40 * v33;
            v35 = *(_QWORD ***)v34;
            if (*(_QWORD ***)v34 == a1)
              goto LABEL_47;
          }
        }
      }
      *((_DWORD *)a1 + 5) = v3 & 0xDFFFFFFF;
    }
  }
}

void llvm::Instruction::addAnnotationMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  llvm::MDNode *Impl;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  const void *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  v6 = **(uint64_t ***)a1;
  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    goto LABEL_16;
  v7 = *v6;
  v35 = (void *)a1;
  v8 = *(_DWORD *)(v7 + 2496);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 2480);
    v10 = v8 - 1;
    v11 = v10 & ((a1 >> 4) ^ (a1 >> 9));
    v12 = (_QWORD *)(v9 + 40 * v11);
    v13 = *v12;
    if (*v12 == a1)
      goto LABEL_12;
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (_QWORD *)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == a1)
        goto LABEL_12;
    }
    if (v14)
      v33 = v14;
    else
      v33 = v12;
  }
  else
  {
    v33 = 0;
  }
  v12 = sub_1C541AB24(v7 + 2480, (uint64_t)&v35, (uint64_t *)&v35, v33);
  v34 = v35;
  v12[3] = 0;
  v12[4] = 0;
  *v12 = v34;
  v12[1] = v12 + 3;
  v12[2] = 0x100000000;
LABEL_12:
  v18 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v18)
  {
LABEL_16:
    v35 = v37;
    v36 = 0x400000000;
LABEL_17:
    v21 = llvm::MDString::get(v6, a2, a3);
    v22 = v36;
    if (v36 >= HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v36 + 1, 8);
      v22 = v36;
    }
    *((_QWORD *)v35 + v22) = v21;
    v23 = v36 + 1;
    LODWORD(v36) = v36 + 1;
    goto LABEL_20;
  }
  v19 = (_QWORD *)(v12[1] + 8);
  v20 = 16 * v18;
  while (*((_DWORD *)v19 - 2) != 30)
  {
    v19 += 2;
    v20 -= 16;
    if (!v20)
      goto LABEL_16;
  }
  v25 = *v19;
  v35 = v37;
  v36 = 0x400000000;
  if (!v25)
    goto LABEL_17;
  v26 = *(unsigned int *)(v25 + 8);
  if (!(_DWORD)v26)
    goto LABEL_17;
  v23 = 0;
  v27 = -8 * v26;
  v28 = 1;
  do
  {
    v29 = *(_QWORD *)(v25 + v27);
    v30 = *(uint64_t **)(v29 + 8);
    v32 = *v30;
    v31 = v30 + 3;
    if (v32 == a3 && (!a3 || !memcmp(v31, a2, a3)))
      v28 = 0;
    if (v23 >= HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v23 + 1, 8);
      v23 = v36;
    }
    *((_QWORD *)v35 + v23) = v29;
    v23 = v36 + 1;
    LODWORD(v36) = v36 + 1;
    v27 += 8;
  }
  while (v27);
  if ((v28 & 1) != 0)
    goto LABEL_17;
LABEL_20:
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(**(uint64_t ***)a1, v35, v23, 0, 1);
  if (Impl || *(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
    llvm::Value::setMetadata((llvm::Value *)a1, 30, Impl);
  if (v35 != v37)
    free(v35);
}

uint64_t ***llvm::Instruction::getAAMetadata@<X0>(uint64_t ***this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t ***v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t ***v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t ***v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t ***v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t ***v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t ***v60;
  uint64_t **v61;
  uint64_t ***v62;
  uint64_t **v63;
  uint64_t ***v64;
  uint64_t **v65;
  uint64_t ***v66;
  uint64_t **v67;
  uint64_t ***v68;

  v2 = this;
  v4 = 0;
  a2[2] = 0;
  a2[3] = 0;
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_2;
  v8 = ***this;
  v68 = this;
  v9 = *(_DWORD *)(v8 + 2496);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 2480);
    v11 = v9 - 1;
    v12 = v11 & ((this >> 4) ^ (this >> 9));
    this = (uint64_t ***)(v10 + 40 * v12);
    v13 = *this;
    if (*this == (uint64_t **)v2)
      goto LABEL_11;
    v44 = 0;
    v45 = 1;
    while (v13 != (uint64_t **)-4096)
    {
      if (v44)
        v46 = 0;
      else
        v46 = v13 == (uint64_t **)-8192;
      if (v46)
        v44 = this;
      v47 = v12 + v45++;
      v12 = v47 & v11;
      this = (uint64_t ***)(v10 + 40 * v12);
      v13 = *this;
      if (*this == (uint64_t **)v2)
        goto LABEL_11;
    }
    if (v44)
      v60 = v44;
    else
      v60 = this;
  }
  else
  {
    v60 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v8 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v60);
  v61 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v61;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_11:
  v14 = *((unsigned int *)this + 4);
  if ((_DWORD)v14)
  {
    v15 = this[1] + 1;
    v16 = 16 * v14;
    while (*((_DWORD *)v15 - 2) != 1)
    {
      v4 = 0;
      v15 += 2;
      v16 -= 16;
      if (!v16)
        goto LABEL_2;
    }
    v4 = *v15;
  }
  else
  {
    v4 = 0;
  }
LABEL_2:
  *a2 = v4;
  if ((*((_BYTE *)v2 + 23) & 0x20) == 0)
  {
LABEL_3:
    v5 = 0;
    goto LABEL_4;
  }
  v17 = ***v2;
  v68 = v2;
  v18 = *(_DWORD *)(v17 + 2496);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 2480);
    v20 = v18 - 1;
    v21 = v20 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v19 + 40 * v21);
    v22 = *this;
    if (*this == (uint64_t **)v2)
      goto LABEL_18;
    v48 = 0;
    v49 = 1;
    while (v22 != (uint64_t **)-4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v22 == (uint64_t **)-8192;
      if (v50)
        v48 = this;
      v51 = v21 + v49++;
      v21 = v51 & v20;
      this = (uint64_t ***)(v19 + 40 * v21);
      v22 = *this;
      if (*this == (uint64_t **)v2)
        goto LABEL_18;
    }
    if (v48)
      v62 = v48;
    else
      v62 = this;
  }
  else
  {
    v62 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v17 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v62);
  v63 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v63;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_18:
  v23 = *((unsigned int *)this + 4);
  if (!(_DWORD)v23)
    goto LABEL_3;
  v24 = this[1] + 1;
  v25 = 16 * v23;
  while (*((_DWORD *)v24 - 2) != 5)
  {
    v5 = 0;
    v24 += 2;
    v25 -= 16;
    if (!v25)
      goto LABEL_4;
  }
  v5 = *v24;
LABEL_4:
  a2[1] = v5;
  if ((*((_BYTE *)v2 + 23) & 0x20) == 0)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v26 = ***v2;
  v68 = v2;
  v27 = *(_DWORD *)(v26 + 2496);
  if (v27)
  {
    v28 = *(_QWORD *)(v26 + 2480);
    v29 = v27 - 1;
    v30 = v29 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v28 + 40 * v30);
    v31 = *this;
    if (*this == (uint64_t **)v2)
      goto LABEL_25;
    v52 = 0;
    v53 = 1;
    while (v31 != (uint64_t **)-4096)
    {
      if (v52)
        v54 = 0;
      else
        v54 = v31 == (uint64_t **)-8192;
      if (v54)
        v52 = this;
      v55 = v30 + v53++;
      v30 = v55 & v29;
      this = (uint64_t ***)(v28 + 40 * v30);
      v31 = *this;
      if (*this == (uint64_t **)v2)
        goto LABEL_25;
    }
    if (v52)
      v64 = v52;
    else
      v64 = this;
  }
  else
  {
    v64 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v26 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v64);
  v65 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v65;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_25:
  v32 = *((unsigned int *)this + 4);
  if (!(_DWORD)v32)
    goto LABEL_5;
  v33 = this[1] + 1;
  v34 = 16 * v32;
  while (*((_DWORD *)v33 - 2) != 7)
  {
    v6 = 0;
    v33 += 2;
    v34 -= 16;
    if (!v34)
      goto LABEL_6;
  }
  v6 = *v33;
LABEL_6:
  a2[2] = v6;
  if ((*((_BYTE *)v2 + 23) & 0x20) == 0)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v35 = ***v2;
  v68 = v2;
  v36 = *(_DWORD *)(v35 + 2496);
  if (v36)
  {
    v37 = *(_QWORD *)(v35 + 2480);
    v38 = v36 - 1;
    v39 = v38 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v37 + 40 * v39);
    v40 = *this;
    if (*this == (uint64_t **)v2)
      goto LABEL_32;
    v56 = 0;
    v57 = 1;
    while (v40 != (uint64_t **)-4096)
    {
      if (v56)
        v58 = 0;
      else
        v58 = v40 == (uint64_t **)-8192;
      if (v58)
        v56 = this;
      v59 = v39 + v57++;
      v39 = v59 & v38;
      this = (uint64_t ***)(v37 + 40 * v39);
      v40 = *this;
      if (*this == (uint64_t **)v2)
        goto LABEL_32;
    }
    if (v56)
      v66 = v56;
    else
      v66 = this;
  }
  else
  {
    v66 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v35 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v66);
  v67 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v67;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_32:
  v41 = *((unsigned int *)this + 4);
  if (!(_DWORD)v41)
    goto LABEL_7;
  v42 = this[1] + 1;
  v43 = 16 * v41;
  while (*((_DWORD *)v42 - 2) != 8)
  {
    v7 = 0;
    v42 += 2;
    v43 -= 16;
    if (!v43)
      goto LABEL_8;
  }
  v7 = *v42;
LABEL_8:
  a2[3] = v7;
  return this;
}

void llvm::Instruction::setAAMetadata(llvm::Instruction *this, llvm::MDNode **a2)
{
  llvm::MDNode *v4;
  llvm::MDNode *v5;
  llvm::MDNode *v6;

  if (*a2 || *((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    llvm::Value::setMetadata(this, 1, *a2);
  v4 = a2[1];
  if (v4 || *((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    llvm::Value::setMetadata(this, 5, v4);
  v5 = a2[2];
  if (v5 || *((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    llvm::Value::setMetadata(this, 7, v5);
  v6 = a2[3];
  if (v6 || *((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    llvm::Value::setMetadata(this, 8, v6);
}

void llvm::Instruction::getAllMetadataImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, 1uLL, 16);
      v5 = *(unsigned int *)(a2 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v5);
    *v6 = 0;
    v6[1] = v4;
    ++*(_DWORD *)(a2 + 8);
  }
  llvm::Value::getAllMetadata((_BYTE *)a1, a2);
}

uint64_t llvm::Instruction::extractProfMetadata(llvm::Instruction *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  llvm::Instruction **v10;
  llvm::Instruction *v11;
  llvm::Instruction **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  llvm::Instruction **v28;
  llvm::Instruction *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  llvm::Instruction *v34;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v5 = ***(_QWORD ***)this;
  v34 = this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v28 = 0;
LABEL_33:
    v10 = (llvm::Instruction **)sub_1C541AB24(v5 + 2480, (uint64_t)&v34, (uint64_t *)&v34, v28);
    v29 = v34;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v29;
    v10[1] = (llvm::Instruction *)(v10 + 3);
    v10[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
  v10 = (llvm::Instruction **)(v7 + 40 * v9);
  v11 = *v10;
  if (*v10 != this)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::Instruction *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::Instruction *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (llvm::Instruction **)(v7 + 40 * (v15 & v8));
      v11 = *v10;
      if (*v10 == this)
        goto LABEL_12;
    }
    if (v12)
      v28 = v12;
    else
      v28 = v10;
    goto LABEL_33;
  }
LABEL_12:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    return 0;
  v17 = (_QWORD *)((char *)v10[1] + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 2)
  {
    result = 0;
    v17 += 2;
    v18 -= 16;
    if (!v18)
      return result;
  }
  v20 = *v17;
  if (!v20)
    return 0;
  if (*(_DWORD *)(v20 + 8) != 3)
    return 0;
  v21 = *(_QWORD *)(v20 - 24);
  if (*(_BYTE *)v21)
    return 0;
  v22 = *(_QWORD **)(v21 + 8);
  if (*v22 != 14)
    return 0;
  v23 = v22[3];
  v24 = *(_QWORD *)((char *)v22 + 30);
  if (v23 != 0x775F68636E617262 || v24 != 0x737468676965775FLL)
    return 0;
  v26 = *(_QWORD *)(v20 - 16);
  if (*(_BYTE *)v26 == 1)
  {
    v27 = *(_QWORD *)(v26 + 128);
    if (*(_BYTE *)(v27 + 16) != 16)
      v27 = 0;
  }
  else
  {
    v27 = 0;
  }
  v30 = *(_QWORD *)(v20 - 8);
  if (*(_BYTE *)v30 != 1)
    return 0;
  result = 0;
  v31 = *(_QWORD *)(v30 + 128);
  if (*(_BYTE *)(v31 + 16) != 16)
    v31 = 0;
  if (v27 && v31)
  {
    v32 = (_QWORD *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u)
      v32 = (_QWORD *)*v32;
    *a2 = *v32;
    v33 = (_QWORD *)(v31 + 24);
    if (*(_DWORD *)(v31 + 32) >= 0x41u)
      v33 = (_QWORD *)*v33;
    *a3 = *v33;
    return 1;
  }
  return result;
}

uint64_t llvm::Instruction::extractProfTotalWeight(llvm::Instruction *this, unint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::Instruction **v8;
  llvm::Instruction *v9;
  llvm::Instruction **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::Instruction **v31;
  llvm::Instruction *v32;
  uint64_t v33;
  _QWORD *v34;
  llvm::Instruction *v35;

  *a2 = 0;
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = ***(_QWORD ***)this;
  v35 = this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    v31 = 0;
LABEL_39:
    v8 = (llvm::Instruction **)sub_1C541AB24(v3 + 2480, (uint64_t)&v35, (uint64_t *)&v35, v31);
    v32 = v35;
    v8[3] = 0;
    v8[4] = 0;
    *v8 = v32;
    v8[1] = (llvm::Instruction *)(v8 + 3);
    v8[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v3 + 2480);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::Instruction **)(v5 + 40 * v7);
  v9 = *v8;
  if (*v8 != this)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm::Instruction *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (llvm::Instruction *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (llvm::Instruction **)(v5 + 40 * (v13 & v6));
      v9 = *v8;
      if (*v8 == this)
        goto LABEL_12;
    }
    if (v10)
      v31 = v10;
    else
      v31 = v8;
    goto LABEL_39;
  }
LABEL_12:
  v14 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v14)
    return 0;
  v15 = (_QWORD *)((char *)v8[1] + 8);
  v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 2)
  {
    result = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16)
      return result;
  }
  v18 = *v15;
  if (!*v15)
    return 0;
  v19 = v18 + 8;
  v20 = *(unsigned int *)(v18 + 8);
  v21 = (_QWORD *)(v18 - 8 * v20);
  if (*(_BYTE *)*v21)
    return 0;
  v22 = *(_QWORD **)(*v21 + 8);
  if (*v22 != 2)
  {
    if (*v22 != 14)
      return 0;
    v23 = v22[3];
    v24 = *(_QWORD *)((char *)v22 + 30);
    if (v23 != 0x775F68636E617262 || v24 != 0x737468676965775FLL)
      return 0;
    *a2 = 0;
    if (v20 >= 2)
    {
      v26 = 0;
      v27 = -8 * v20;
      result = 1;
      while (1)
      {
        v28 = *(_QWORD *)(v19 + v27);
        if (*(_BYTE *)v28 != 1)
          break;
        v29 = *(_QWORD *)(v28 + 128);
        if (*(_BYTE *)(v29 + 16) != 16)
          break;
        v30 = (_QWORD *)(v29 + 24);
        if (*(_DWORD *)(v29 + 32) >= 0x41u)
          v30 = (_QWORD *)*v30;
        v26 += *v30;
        *a2 = v26;
        v27 += 8;
        if (v27 == -8)
          return result;
      }
      return 0;
    }
    return 1;
  }
  result = 0;
  if (v20 >= 4 && *((_WORD *)v22 + 12) == 20566)
  {
    if (*(_BYTE *)(*(_QWORD *)(v21[2] + 128) + 16) == 16)
      v33 = *(_QWORD *)(v21[2] + 128);
    else
      v33 = 0;
    v34 = (_QWORD *)(v33 + 24);
    if (*(_DWORD *)(v33 + 32) >= 0x41u)
      v34 = (_QWORD *)*v34;
    *a2 = *v34;
    return 1;
  }
  return result;
}

void llvm::GlobalObject::copyMetadata(llvm::GlobalObject *this, const llvm::GlobalObject *a2, unsigned int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::MDNode **v8;
  llvm::MDNode *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ConstantInt **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  llvm::MDNode *Impl;
  llvm::MDNode *v21;
  const llvm::APInt *v22;
  llvm::Value **v23;
  llvm::Value *v24;
  _QWORD *v25;
  uint64_t *v26;
  llvm::MDNode *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::MDNode **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[17];

  v40[16] = *MEMORY[0x1E0C80C00];
  v5 = v40;
  v38 = v40;
  v39 = 0x800000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v38);
  v6 = v38;
  if (!(_DWORD)v39)
    goto LABEL_2;
  v7 = 16 * v39;
  v8 = (llvm::MDNode **)((char *)v38 + 8);
  do
  {
    if (!a3)
    {
      v9 = *v8;
LABEL_8:
      llvm::Value::addMetadata(this, *((_DWORD *)v8 - 2), v9);
      goto LABEL_9;
    }
    v31 = v8;
    v32 = v7;
    v30 = v5;
    v10 = *((_DWORD *)v8 - 2);
    v33 = (uint64_t)*v8;
    if (!v10)
    {
      if (*(_BYTE *)v33 == 24
        || (v28 = (uint64_t *)(v33 - 8 * *(unsigned int *)(v33 + 8)), v33 = *v28, (v29 = v28[1]) == 0))
      {
        v15 = 0;
        v16 = 0;
        v17 = 2;
      }
      else
      {
        v15 = *(const void **)(v29 + 24);
        v16 = (uint64_t)(*(_QWORD *)(v29 + 32) - (_QWORD)v15) >> 3;
        v17 = v16 + 2;
        if ((unint64_t)(v16 + 2) >> 61)
          abort();
      }
      v18 = 8 * v17;
      v19 = operator new(8 * v17);
      bzero(v19, v18);
      *v19 = 35;
      v19[1] = a3;
      if (v16)
        memmove(v19 + 2, v15, 8 * v16);
      Impl = llvm::DIExpression::getImpl(**(_QWORD ***)this, v19, v18 >> 3, 0, 1);
      v21 = llvm::DIGlobalVariableExpression::getImpl(**(_QWORD ***)this, v33, (uint64_t)Impl, 0, 1);
      operator delete(v19);
      v9 = v21;
      goto LABEL_21;
    }
    if (v10 != 19)
    {
      v9 = *v8;
LABEL_21:
      v5 = v30;
      v8 = v31;
      v7 = v32;
      goto LABEL_8;
    }
    v11 = (_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8));
    v12 = v11[1];
    v13 = *(_QWORD *)(*v11 + 128);
    v14 = *(llvm::ConstantInt ***)v13;
    v35 = *(_DWORD *)(v13 + 32);
    if (v35 > 0x40)
    {
      v34 = (void *)operator new[]();
      memcpy(v34, *(const void **)(v13 + 24), (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v34 = *(void **)(v13 + 24);
    }
    llvm::APInt::operator+=((uint64_t)&v34, a3);
    LODWORD(v37) = v35;
    v36 = v34;
    v35 = 0;
    v23 = llvm::ConstantInt::get(v14, (llvm::Type *)&v36, v22);
    v25 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v23, v24);
    if (v37 >= 0x41 && v36)
      MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    if (v35 >= 0x41 && v34)
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    v26 = **(uint64_t ***)this;
    v36 = v25;
    v37 = v12;
    v27 = (llvm::MDNode *)llvm::MDTuple::getImpl(v26, &v36, 2, 0, 1);
    llvm::Value::addMetadata(this, 19, v27);
    v5 = v30;
    v8 = v31;
    v7 = v32;
LABEL_9:
    v8 += 2;
    v7 -= 16;
  }
  while (v7);
  v6 = v38;
LABEL_2:
  if (v6 != v5)
    free(v6);
}

uint64_t llvm::GlobalObject::getVCallVisibility(llvm::GlobalObject *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::GlobalObject **v6;
  llvm::GlobalObject *v7;
  llvm::GlobalObject **v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  llvm::GlobalObject **v19;
  llvm::GlobalObject *v20;
  llvm::GlobalObject *v21;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v1 = ***(_QWORD ***)this;
  v21 = this;
  v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    v19 = 0;
LABEL_25:
    v6 = (llvm::GlobalObject **)sub_1C541AB24(v1 + 2480, (uint64_t)&v21, (uint64_t *)&v21, v19);
    v20 = v21;
    v6[3] = 0;
    v6[4] = 0;
    *v6 = v20;
    v6[1] = (llvm::GlobalObject *)(v6 + 3);
    v6[2] = (llvm::GlobalObject *)0x100000000;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v1 + 2480);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = (llvm::GlobalObject **)(v3 + 40 * v5);
  v7 = *v6;
  if (*v6 != this)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != (llvm::GlobalObject *)-4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == (llvm::GlobalObject *)-8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (llvm::GlobalObject **)(v3 + 40 * (v11 & v4));
      v7 = *v6;
      if (*v6 == this)
        goto LABEL_12;
    }
    if (v8)
      v19 = v8;
    else
      v19 = v6;
    goto LABEL_25;
  }
LABEL_12:
  v12 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v12)
    return 0;
  v13 = (_QWORD *)((char *)v6[1] + 8);
  v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 28)
  {
    result = 0;
    v13 += 2;
    v14 -= 16;
    if (!v14)
      return result;
  }
  v16 = *v13;
  if (!v16)
    return 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8)) + 128);
  v18 = (unsigned int *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = *(unsigned int **)v18;
  return *v18;
}

uint64_t *llvm::GlobalObject::getVTableOffsetRange(llvm::GlobalObject *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::GlobalObject **v6;
  llvm::GlobalObject *v7;
  llvm::GlobalObject **v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::GlobalObject **v21;
  llvm::GlobalObject *v22;
  llvm::GlobalObject *v23;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v1 = ***(_QWORD ***)this;
  v23 = this;
  v2 = *(_DWORD *)(v1 + 2496);
  if (!v2)
  {
    v21 = 0;
LABEL_26:
    v6 = (llvm::GlobalObject **)sub_1C541AB24(v1 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    v22 = v23;
    v6[3] = 0;
    v6[4] = 0;
    *v6 = v22;
    v6[1] = (llvm::GlobalObject *)(v6 + 3);
    v6[2] = (llvm::GlobalObject *)0x100000000;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v1 + 2480);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = (llvm::GlobalObject **)(v3 + 40 * v5);
  v7 = *v6;
  if (*v6 != this)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != (llvm::GlobalObject *)-4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == (llvm::GlobalObject *)-8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (llvm::GlobalObject **)(v3 + 40 * (v11 & v4));
      v7 = *v6;
      if (*v6 == this)
        goto LABEL_12;
    }
    if (v8)
      v21 = v8;
    else
      v21 = v6;
    goto LABEL_26;
  }
LABEL_12:
  v12 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v12)
    return 0;
  v13 = (_QWORD *)((char *)v6[1] + 8);
  v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 28)
  {
    result = 0;
    v13 += 2;
    v14 -= 16;
    if (!v14)
      return result;
  }
  v16 = *v13;
  if (!v16)
    return 0;
  v17 = *(unsigned int *)(v16 + 8);
  if (v17 < 3)
    return 0;
  v18 = v16 - 8 * v17;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 128);
  v20 = (uint64_t *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u)
    v20 = (uint64_t *)*v20;
  return (uint64_t *)*v20;
}

void llvm::Function::setSubprogram(llvm::Function *this, llvm::DISubprogram *a2)
{
  llvm::Value::setMetadata(this, 0, a2);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::Function **v6;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  llvm::Function **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  llvm::Function **v16;
  llvm::Function *v17;
  llvm::Function *v18;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v1 = ***(_QWORD ***)this;
  v18 = this;
  v2 = *(_DWORD *)(v1 + 2496);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 2480);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
    v6 = (llvm::Function **)(v3 + 40 * v5);
    v7 = *v6;
    if (*v6 == this)
      goto LABEL_4;
    v12 = 0;
    v13 = 1;
    while (v7 != (llvm::Function *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v7 == (llvm::Function *)-8192;
      if (v14)
        v12 = v6;
      v15 = v5 + v13++;
      v5 = v15 & v4;
      v6 = (llvm::Function **)(v3 + 40 * (v15 & v4));
      v7 = *v6;
      if (*v6 == this)
        goto LABEL_4;
    }
    if (v12)
      v16 = v12;
    else
      v16 = v6;
  }
  else
  {
    v16 = 0;
  }
  v6 = (llvm::Function **)sub_1C541AB24(v1 + 2480, (uint64_t)&v18, (uint64_t *)&v18, v16);
  v17 = v18;
  v6[3] = 0;
  v6[4] = 0;
  *v6 = v17;
  v6[1] = (llvm::Function *)(v6 + 3);
  v6[2] = (llvm::Function *)0x100000000;
LABEL_4:
  v8 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v8)
    return 0;
  v9 = (uint64_t)v6[1] + 8;
  v10 = 16 * v8;
  result = 0;
  while (*(_DWORD *)(v9 - 8))
  {
    v9 += 16;
    v10 -= 16;
    if (!v10)
      return result;
  }
  return *(_QWORD *)v9;
}

uint64_t llvm::Function::isDebugInfoForProfiling(llvm::Function *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::Function **v7;
  llvm::Function *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Function **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  llvm::Function **v17;
  llvm::Function *v18;
  llvm::Function *v19;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_9;
  v2 = ***(_QWORD ***)this;
  v19 = this;
  v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2480);
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((this >> 4) ^ (this >> 9));
    v7 = (llvm::Function **)(v4 + 40 * v6);
    v8 = *v7;
    if (*v7 == this)
      goto LABEL_4;
    v13 = 0;
    v14 = 1;
    while (v8 != (llvm::Function *)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v8 == (llvm::Function *)-8192;
      if (v15)
        v13 = v7;
      v16 = v6 + v14++;
      v6 = v16 & v5;
      v7 = (llvm::Function **)(v4 + 40 * (v16 & v5));
      v8 = *v7;
      if (*v7 == this)
        goto LABEL_4;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v7;
  }
  else
  {
    v17 = 0;
  }
  v7 = (llvm::Function **)sub_1C541AB24(v2 + 2480, (uint64_t)&v19, (uint64_t *)&v19, v17);
  v18 = v19;
  v7[3] = 0;
  v7[4] = 0;
  *v7 = v18;
  v7[1] = (llvm::Function *)(v7 + 3);
  v7[2] = (llvm::Function *)0x100000000;
LABEL_4:
  v1 = *((unsigned int *)v7 + 4);
  if (!(_DWORD)v1)
  {
LABEL_9:
    LODWORD(v11) = 0;
    return v1 & v11;
  }
  v9 = (_QWORD *)((char *)v7[1] + 8);
  v10 = 16 * v1;
  while (*((_DWORD *)v9 - 2))
  {
    LODWORD(v11) = 0;
    v9 += 2;
    v10 -= 16;
    if (!v10)
      return v1 & v11;
  }
  v11 = *v9;
  if (*v9)
  {
    v11 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 40);
    if (v11)
    {
      LODWORD(v1) = *(unsigned __int8 *)(v11 + 49) != 0;
      LODWORD(v11) = 1;
    }
  }
  return v1 & v11;
}

void llvm::GlobalVariable::getDebugInfo(unsigned int *a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x100000000;
  llvm::Value::getMetadata(a1, 0, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = 8 * v10;
    do
    {
      v7 = v3;
      v8 = v5;
      v6 = *v3;
      if (v4 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4 + 1, 8);
        v4 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = v6;
      v4 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v4;
      v3 = v7 + 1;
      v5 = v8 - 8;
    }
    while (v8 != 8);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
}

uint64_t *sub_1C5416DF8(uint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;

  if ((*result & 4) != 0)
  {
    v2 = *result & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v4 = result;
      v5 = a2;
      v6 = *result & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)(v2 + 16) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 24), 8);
      MEMORY[0x1CAA32FC0](v6, 0x1020C408B843D01);
      result = v4;
      a2 = v5;
    }
  }
  v3 = *a2;
  *a2 = 0;
  *result = v3 | 4;
  return result;
}

_QWORD *sub_1C5416E70(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 13;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(24 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[3 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 3;
  }
  while (result != v4);
  return result;
}

llvm::MDNode *sub_1C5416EFC(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *__s1, size_t __n, uint64_t a9)
{
  uint64_t v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  v14 = a9;
  if (__n)
  {
    v36 = a1;
    v17 = *a1;
    v18 = *(_DWORD *)(*a1 + 280);
    if (!v18)
    {
      *(_QWORD *)(v17 + 284) = 0;
      v33 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v33)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v33[16] = 2;
      *(_QWORD *)(v17 + 272) = v33;
      v18 = 16;
      *(_DWORD *)(v17 + 280) = 16;
    }
    v37 = a2;
    v38 = a3;
    v39 = a4;
    v19 = 0;
    v20 = 0;
    do
      v20 = 33 * v20 + __s1[v19++];
    while (__n != v19);
    v40 = a5;
    v41 = a6;
    v21 = *(_QWORD *)(v17 + 272);
    v22 = v18 - 1;
    v23 = v21 + 8 * v18 + 8;
    v42 = -1;
    v24 = 1;
    v25 = v20;
    while (1)
    {
      v26 = v25 & v22;
      v27 = *(_QWORD **)(v21 + 8 * v26);
      if (!v27)
        break;
      if (v27 == (_QWORD *)-8)
      {
        if (v42 == -1)
          v28 = v25 & v22;
        else
          v28 = v42;
        v42 = v28;
      }
      else if (*(_DWORD *)(v23 + 4 * v26) == v20
             && __n == *v27
             && !memcmp(__s1, (char *)v27 + *(unsigned int *)(v17 + 292), __n))
      {
        goto LABEL_20;
      }
      v25 = v24 + v26;
      ++v24;
    }
    v29 = v42;
    if (v42 == -1)
    {
      v29 = v26;
      v26 = v26;
    }
    else
    {
      v26 = v42;
    }
    *(_DWORD *)(v23 + 4 * v29) = v20;
    v27 = *(_QWORD **)(v21 + 8 * v26);
LABEL_20:
    v14 = a9;
    a4 = v39;
    a3 = v38;
    if (v27)
    {
      a2 = v37;
      a1 = v36;
      if (v27 != (_QWORD *)-8)
      {
LABEL_33:
        v32 = (uint64_t)(v27 + 1);
        a6 = v41;
        a5 = v40;
        return llvm::DIImportedEntity::getImpl(a1, a2, a3, a4, a5, a6, v32, v14, 2, 1);
      }
      --*(_DWORD *)(v17 + 288);
    }
    v30 = (_QWORD *)sub_1C484358C(v17 + 296, __n + 25, 3);
    memcpy(v30 + 3, __s1, __n);
    *((_BYTE *)v30 + __n + 24) = 0;
    *v30 = __n;
    v30[1] = 0;
    v30[2] = 0;
    *(_QWORD *)(v21 + 8 * v26) = v30;
    ++*(_DWORD *)(v17 + 284);
    v31 = (_QWORD **)(*(_QWORD *)(v17 + 272)
                    + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v17 + 272), v26));
    a2 = v37;
    a1 = v36;
    while (1)
    {
      v27 = *v31;
      if (*v31 && v27 + 1 != 0)
        break;
      ++v31;
    }
    v27[2] = v27;
    goto LABEL_33;
  }
  v32 = 0;
  return llvm::DIImportedEntity::getImpl(a1, a2, a3, a4, a5, a6, v32, v14, 2, 1);
}

void sub_1C5417198(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *a2;
  if (*a2)
  {
    v5 = *v2;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) < 0xFFFFFFFE)
      {
LABEL_5:
        *a2 = 0;
        return;
      }
      v6 = (unint64_t)(v2 + 8);
    }
    else
    {
      if ((v2[1] & 0x7F) != 2 && !*((_DWORD *)v2 + 3))
        goto LABEL_5;
      v7 = *((_QWORD *)v2 + 2);
      if ((v7 & 4) == 0)
        goto LABEL_5;
      v6 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_5;
    }
    llvm::ReplaceableMetadataImpl::moveRef(v6, (uint64_t)a2, a1);
    goto LABEL_5;
  }
}

_QWORD *sub_1C5417220(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C48BF0C0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C541727C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C541727C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C541732C(a1, v7);
  v9 = 0;
  sub_1C48BF0C0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C541732C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C54173E4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C54173E4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C48BF0C0((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5417490(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5417540(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1C541771C(a1, v8);
    v20 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v21 = 4;
LABEL_26:
      v9 = *(_DWORD *)a1 & 1;
      v22 = v21 - 1;
      v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (_QWORD *)(v20 + 24 * v23);
      v24 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
      v16 = 0;
      v25 = 1;
      while (v24 != -4096)
      {
        if (v16)
          v26 = 0;
        else
          v26 = v24 == -8192;
        if (v26)
          v16 = a4;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        a4 = (_QWORD *)(v20 + 24 * v23);
        v24 = *a4;
        if (*a3 == *a4)
          goto LABEL_6;
      }
      goto LABEL_36;
    }
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v20 = *(_QWORD *)(a1 + 8);
      goto LABEL_26;
    }
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1C541771C(a1, 2 * v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_41;
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (_QWORD *)(v11 + 24 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v15 == -8192;
    if (v18)
      v16 = a4;
    v19 = v14 + v17++;
    v14 = v19 & v13;
    a4 = (_QWORD *)(v11 + 24 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_36:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

uint64_t sub_1C541771C(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v42;
  int v43;
  _BYTE v44[96];
  uint64_t v45;

  v2 = result;
  v45 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v6 = *(uint64_t **)(result + 8);
    v7 = *(_DWORD *)(result + 16);
    if (a2 > 4)
    {
      v19 = a2;
      v10 = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = v10;
      *(_QWORD *)(v2 + 16) = v19;
      v20 = *(_DWORD *)v2;
      v8 = &v6[3 * v7];
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v20 & 1) == 0)
      {
        v9 = &v10[3 * v19];
        do
        {
LABEL_20:
          *v10 = -4096;
          v10 += 3;
        }
        while (v10 != v9);
        if (v7)
        {
          v21 = v6;
          do
          {
            v22 = *v21;
            if ((*v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              if ((*(_BYTE *)v2 & 1) != 0)
              {
                v23 = 4;
                v24 = v2 + 8;
              }
              else
              {
                v24 = *(_QWORD *)(v2 + 8);
                v23 = *(_DWORD *)(v2 + 16);
              }
              v25 = v23 - 1;
              v26 = (v23 - 1) & ((v22 >> 4) ^ (v22 >> 9));
              v27 = (uint64_t *)(v24 + 24 * v26);
              v28 = *v27;
              if (v22 != *v27)
              {
                v29 = 0;
                v30 = 1;
                while (v28 != -4096)
                {
                  if (v29)
                    v31 = 0;
                  else
                    v31 = v28 == -8192;
                  if (v31)
                    v29 = v27;
                  v32 = v26 + v30++;
                  v26 = v32 & v25;
                  v27 = (uint64_t *)(v24 + 24 * (v32 & v25));
                  v28 = *v27;
                  if (v22 == *v27)
                    goto LABEL_39;
                }
                if (v29)
                  v27 = v29;
              }
LABEL_39:
              *v27 = v22;
              *(_OWORD *)(v27 + 1) = *(_OWORD *)(v21 + 1);
              *(_DWORD *)v2 += 2;
            }
            v21 += 3;
          }
          while (v21 != v8);
        }
        JUMPOUT(0x1CAA32FB4);
      }
    }
    else
    {
      v8 = &v6[3 * v7];
      *(_QWORD *)result = 1;
    }
    v9 = (_QWORD *)(v2 + 104);
    v10 = (_QWORD *)(v2 + 8);
    goto LABEL_20;
  }
  v11 = 0;
  v12 = v44;
  do
  {
    v13 = *(_QWORD *)(result + v11 + 8);
    if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v12 = v13;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(result + v11 + 16);
      v12 += 24;
    }
    v11 += 24;
  }
  while (v11 != 96);
  v14 = *(_DWORD *)result;
  if (a2 > 4)
  {
    *(_DWORD *)result = v14 & 0xFFFFFFFE;
    v15 = a2;
    result = (uint64_t)operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(v2 + 8) = result;
    *(_QWORD *)(v2 + 16) = v15;
    v14 = *(_DWORD *)v2;
  }
  *(_QWORD *)v2 = v14 & 1;
  if ((v14 & 1) != 0)
  {
    v18 = (_QWORD *)(v2 + 104);
    v17 = (_QWORD *)(v2 + 8);
  }
  else
  {
    v16 = *(_DWORD *)(v2 + 16);
    if (!v16)
      goto LABEL_44;
    v17 = *(_QWORD **)(v2 + 8);
    v18 = &v17[3 * v16];
  }
  do
  {
    *v17 = -4096;
    v17 += 3;
  }
  while (v17 != v18);
LABEL_44:
  if (v44 != v12)
  {
    v33 = v44;
    do
    {
      v34 = *(_QWORD *)v33;
      if ((*(_QWORD *)v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)v2 & 1) != 0)
        {
          v35 = 4;
          v36 = v2 + 8;
        }
        else
        {
          v36 = *(_QWORD *)(v2 + 8);
          v35 = *(_DWORD *)(v2 + 16);
        }
        v37 = v35 - 1;
        v38 = (v35 - 1) & ((v34 >> 4) ^ (v34 >> 9));
        v39 = (uint64_t *)(v36 + 24 * v38);
        v40 = *v39;
        if (v34 != *v39)
        {
          v41 = 0;
          result = 1;
          while (v40 != -4096)
          {
            if (v41)
              v42 = 0;
            else
              v42 = v40 == -8192;
            if (v42)
              v41 = v39;
            v43 = v38 + result;
            result = (result + 1);
            v38 = v43 & v37;
            v39 = (uint64_t *)(v36 + 24 * (v43 & v37));
            v40 = *v39;
            if (v34 == *v39)
              goto LABEL_62;
          }
          if (v41)
            v39 = v41;
        }
LABEL_62:
        *v39 = v34;
        *(_OWORD *)(v39 + 1) = *(_OWORD *)(v33 + 8);
        *(_DWORD *)v2 += 2;
      }
      v33 += 24;
    }
    while (v33 != v12);
  }
  return result;
}

uint64_t *sub_1C5417AB0(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_QWORD *)(v37 + 8) < *(_QWORD *)(*v8 + 8))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C5418198(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C5418408(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C5418408(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_QWORD *)(v42 + 8) < *(_QWORD *)(v43 + 8))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_QWORD *)(*v41 + 8);
          if (v46 < *(_QWORD *)(*v40 + 8))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_QWORD *)(*v39 + 8))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_QWORD *)(*v8 + 8))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_QWORD *)(v54 + 8);
                if (v56 < *(_QWORD *)(v55 + 8))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_QWORD *)(v55 + 8))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_QWORD *)(v88 + 8);
              if (v90 < *(_QWORD *)(v89 + 8))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_QWORD *)(v89 + 8));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_QWORD *)(v65 + 8) < *(_QWORD *)(v64[1] + 8))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_QWORD *)(*result + 8);
                if (*(_QWORD *)(v65 + 8) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_QWORD *)(v65 + 8) < *(_QWORD *)(v64[1] + 8))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_QWORD *)(v65 + 8) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = *(uint64_t **)(v76 + 8);
                  if ((unint64_t)result < *(_QWORD *)(v75[1] + 8))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_QWORD *)(*v75 + 8);
                  if (*(_QWORD *)(*v82 + 8) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_QWORD *)(*v82 + 8) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C5418198(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C5418198(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C5418198(v7 + 1, v12 - 1, a2 - 2);
          sub_1C5418198(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C5418198(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (*(_QWORD *)(*(v7 - 1) + 8) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 8))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_QWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v28 + 8));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_QWORD *)(v31 + 8));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_QWORD *)(v34 + 8));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_QWORD *)(v35 + 8));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 8) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 8) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 8) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_QWORD *)(v24 + 8) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_QWORD *)(v25 + 8) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C5417AB0(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C5418220(v7, v8 - 1);
        result = (uint64_t *)sub_1C5418220(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5418198(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 8);
  v6 = *(_QWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 8) < *(_QWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 8) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C5418220(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 8) < *(_QWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C5418198(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C5418408(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C5418408(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 8) < *(_QWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 8);
        if (v25 < *(_QWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C5418198(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 8);
    if (v14 < *(_QWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C5418408(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C5418198(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 8) < *(_QWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 8) < *(_QWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 8) < *(_QWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C541849C(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < (unint64_t)v8[2])
        {
          v48 = *v8;
          *v8 = *(a2 - 3);
          *(a2 - 3) = v48;
          v49 = v8[1];
          v8[1] = *(a2 - 2);
          *(a2 - 2) = v49;
          v50 = v8[2];
          v8[2] = *(a2 - 1);
          *(a2 - 1) = v50;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C5418D08(v8, v8 + 3, a2 - 3);
      case 4:
        return (uint64_t)sub_1C5419070(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5:
        result = (uint64_t)sub_1C5419070(v8, v8 + 3, v8 + 6, v8 + 9);
        if (*(a2 - 1) < (unint64_t)v8[11])
        {
          v51 = v8[9];
          v8[9] = *(a2 - 3);
          *(a2 - 3) = v51;
          v52 = v8[10];
          v8[10] = *(a2 - 2);
          *(a2 - 2) = v52;
          v53 = v8[11];
          v8[11] = *(a2 - 1);
          *(a2 - 1) = v53;
          v54 = v8[11];
          v55 = v8[8];
          if (v54 < v55)
          {
            v57 = v8[6];
            v56 = v8[7];
            v58 = v8[9];
            v59 = v8[10];
            v60 = v8[5];
            v8[6] = v58;
            v8[7] = v59;
            v8[8] = v54;
            v8[9] = v57;
            v8[10] = v56;
            v8[11] = v55;
            if (v54 < v60)
            {
              v62 = v8[3];
              v61 = v8[4];
              v63 = v8[2];
              v8[3] = v58;
              v8[4] = v59;
              v8[5] = v54;
              v8[6] = v62;
              v8[7] = v61;
              v8[8] = v60;
              if (v54 < v63)
              {
                v64 = *v8;
                v65 = v8[1];
                *v8 = v58;
                v8[1] = v59;
                v8[2] = v54;
                v8[3] = v64;
                v8[4] = v65;
                v8[5] = v63;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 575)
        {
          v66 = v8 + 3;
          v68 = v8 == a2 || v66 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v68)
            {
              v69 = 0;
              v70 = v8;
              do
              {
                v71 = v66;
                v72 = v70[5];
                if (v72 < v70[2])
                {
                  v73 = *v71;
                  v74 = v70[4];
                  v75 = v69;
                  while (1)
                  {
                    v76 = (char *)v8 + v75;
                    *(_OWORD *)(v76 + 24) = *(_OWORD *)((char *)v8 + v75);
                    *((_QWORD *)v76 + 5) = *(uint64_t *)((char *)v8 + v75 + 16);
                    if (!v75)
                      break;
                    v75 -= 24;
                    if (v72 >= *((_QWORD *)v76 - 1))
                    {
                      v77 = (uint64_t *)((char *)v8 + v75 + 24);
                      goto LABEL_80;
                    }
                  }
                  v77 = v8;
LABEL_80:
                  *v77 = v73;
                  v77[1] = v74;
                  v77[2] = v72;
                }
                v66 = v71 + 3;
                v69 += 24;
                v70 = v71;
              }
              while (v71 + 3 != a2);
            }
          }
          else if (!v68)
          {
            v111 = v8 + 5;
            do
            {
              v112 = v66;
              v113 = v7[5];
              if (v113 < v7[2])
              {
                v114 = *v112;
                v115 = v7[4];
                v116 = v111;
                do
                {
                  v117 = v116;
                  *((_OWORD *)v116 - 1) = *(_OWORD *)(v116 - 5);
                  v118 = *(v116 - 3);
                  v116 -= 3;
                  *v117 = v118;
                }
                while (v113 < *(v117 - 6));
                *(v116 - 2) = v114;
                *(v116 - 1) = v115;
                *v116 = v113;
              }
              v66 = v112 + 3;
              v111 += 3;
              v7 = v112;
            }
            while (v112 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v78 = (unint64_t)(v10 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v8[3 * v81];
                if (2 * v80 + 2 < v10)
                {
                  v83 = v8[3 * v81 + 2];
                  v84 = v82[5];
                  v82 += 3 * (v83 < v84);
                  if (v83 < v84)
                    v81 = 2 * v80 + 2;
                }
                v85 = v8[3 * v80 + 2];
                if (v82[2] >= v85)
                {
                  v86 = &v8[3 * v80];
                  v87 = *v86;
                  v88 = v86[1];
                  do
                  {
                    v89 = v86;
                    v86 = v82;
                    *v89 = *v82;
                    v89[1] = v82[1];
                    v89[2] = v82[2];
                    if (v78 < v81)
                      break;
                    v90 = (2 * v81) | 1;
                    v82 = &v8[3 * v90];
                    v91 = 2 * v81 + 2;
                    if (v91 < v10)
                    {
                      v92 = v8[3 * v90 + 2];
                      v93 = v82[5];
                      v82 += 3 * (v92 < v93);
                      if (v92 < v93)
                        v90 = v91;
                    }
                    v81 = v90;
                  }
                  while (v82[2] >= v85);
                  *v86 = v87;
                  v86[1] = v88;
                  v86[2] = v85;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            do
            {
              result = 0;
              v94 = *v8;
              v95 = v8[1];
              v96 = v8[2];
              v97 = v8;
              do
              {
                v98 = (char *)(result + 1);
                v99 = &v97[3 * result + 3];
                v100 = (2 * result) | 1;
                v101 = 2 * result + 2;
                if (v101 < v10)
                {
                  v102 = v97[3 * (_QWORD)v98 + 2];
                  v103 = v99[5];
                  v99 += 3 * (v102 < v103);
                  if (v102 < v103)
                    v100 = v101;
                }
                *v97 = *v99;
                v97[1] = v99[1];
                v97[2] = v99[2];
                v97 = v99;
                result = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v99 == a2 - 3)
              {
                *v99 = v94;
                v99[1] = v95;
                v99[2] = v96;
              }
              else
              {
                *v99 = *(a2 - 3);
                v99[1] = *(a2 - 2);
                v99[2] = *(a2 - 1);
                *(a2 - 3) = v94;
                *(a2 - 2) = v95;
                *(a2 - 1) = v96;
                v104 = (char *)v99 - (char *)v8 + 24;
                if (v104 >= 25)
                {
                  v105 = (v104 / 0x18uLL - 2) >> 1;
                  v106 = v99[2];
                  if (v8[3 * v105 + 2] < v106)
                  {
                    v107 = *v99;
                    v108 = v99[1];
                    do
                    {
                      v109 = v99;
                      v99 = &v8[3 * v105];
                      *v109 = *v99;
                      v109[1] = v99[1];
                      result = (uint64_t)(v99 + 2);
                      v109[2] = v99[2];
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                    }
                    while (v8[3 * v105 + 2] < v106);
                    *v99 = v107;
                    v99[1] = v108;
                    *(_QWORD *)result = v106;
                  }
                }
              }
              a2 -= 3;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)sub_1C5418D08(&v7[3 * ((unint64_t)v10 >> 1)], v7, a2 - 3);
        }
        else
        {
          sub_1C5418D08(v7, &v7[3 * ((unint64_t)v10 >> 1)], a2 - 3);
          v13 = &v7[3 * v11];
          sub_1C5418D08(v7 + 3, v13 - 3, a2 - 6);
          sub_1C5418D08(v7 + 6, &v7[3 * v11 + 3], a2 - 9);
          result = (uint64_t)sub_1C5418D08(v13 - 3, v12, &v7[3 * v11 + 3]);
          v14 = *v7;
          *v7 = *v12;
          *v12 = v14;
          v15 = *(_OWORD *)(v7 + 1);
          *(_OWORD *)(v7 + 1) = *(_OWORD *)(v13 + 1);
          *(_OWORD *)(v13 + 1) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = v7[2];
          if (*(v7 - 1) < v16)
            goto LABEL_12;
          if (v16 >= *(a2 - 1))
          {
            v36 = v7 + 3;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = v36[2];
              v36 += 3;
            }
            while (v16 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 3;
              v35 = v34[5];
              v34 += 3;
            }
            while (v16 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 3;
              v40 = *(v39 - 1);
              v39 -= 3;
            }
            while (v16 < v40);
          }
          v41 = *v7;
          v42 = v7[1];
          while (v8 < v38)
          {
            v43 = *v8;
            *v8 = *v38;
            *v38 = v43;
            v44 = v8[1];
            v8[1] = v38[1];
            v38[1] = v44;
            v45 = v8[2];
            v8[2] = v38[2];
            v38[2] = v45;
            do
            {
              v46 = v8[5];
              v8 += 3;
            }
            while (v16 >= v46);
            do
            {
              v47 = *(v38 - 1);
              v38 -= 3;
            }
            while (v16 < v47);
          }
          if (v8 - 3 != v7)
          {
            *v7 = *(v8 - 3);
            v7[1] = *(v8 - 2);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 3) = v41;
          *(v8 - 2) = v42;
          *(v8 - 1) = v16;
          continue;
        }
        v16 = v7[2];
LABEL_12:
        v17 = 0;
        v18 = *v7;
        v19 = v7[1];
        do
        {
          v20 = v7[v17 + 5];
          v17 += 3;
        }
        while (v20 < v16);
        v21 = &v7[v17];
        v22 = a2;
        if (v17 == 3)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 3;
            v26 = *(v25 - 1);
            v25 -= 3;
            if (v26 < v16)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 3;
            v24 = *(v22 - 1);
            v22 -= 3;
          }
          while (v24 >= v16);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *v8;
            *v8 = *v27;
            *v27 = v28;
            v29 = v8[1];
            v8[1] = v27[1];
            v27[1] = v29;
            v30 = v8[2];
            v8[2] = v27[2];
            v27[2] = v30;
            do
            {
              v31 = v8[5];
              v8 += 3;
            }
            while (v31 < v16);
            do
            {
              v32 = *(v27 - 1);
              v27 -= 3;
            }
            while (v32 >= v16);
          }
          while (v8 < v27);
        }
        if (v8 - 3 != v7)
        {
          *v7 = *(v8 - 3);
          v7[1] = *(v8 - 2);
          v7[2] = *(v8 - 1);
        }
        *(v8 - 3) = v18;
        *(v8 - 2) = v19;
        *(v8 - 1) = v16;
        if (v21 < v23)
        {
LABEL_33:
          result = sub_1C541849C(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C5418E30(v7, v8 - 3);
        result = sub_1C5418E30(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 3;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5418D08(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2 + 2;
  v4 = a2[2];
  v5 = result + 2;
  v6 = a3[2];
  if (v4 < result[2])
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      v13 = result[1];
      result[1] = a2[1];
      a2[1] = v13;
      v14 = result[2];
      result[2] = a2[2];
      a2[2] = v14;
      if (a3[2] >= v14)
        return result;
      v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      result = a2 + 1;
      v8 = a3 + 1;
      v5 = a2 + 2;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      ++result;
      v8 = a3 + 1;
    }
    v3 = a3 + 2;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    v8 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    if (a2[2] < (unint64_t)*v5)
    {
      v12 = *result;
      *result++ = *a2;
      *a2 = v12;
LABEL_10:
      v16 = *result;
      *result = *v8;
      *v8 = v16;
      v17 = *v5;
      *v5 = *v3;
      *v3 = v17;
    }
  }
  return result;
}

BOOL sub_1C5418E30(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      sub_1C5418D08(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1C5419070(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1C5419070(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        v22 = a1[11];
        v23 = a1[8];
        if (v22 < v23)
        {
          v25 = a1[6];
          v24 = a1[7];
          v26 = a1[9];
          v27 = a1[10];
          v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            v30 = a1[3];
            v29 = a1[4];
            v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              v32 = *a1;
              v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 6;
      sub_1C5418D08(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[2];
    if (v13 < v9[2])
    {
      v14 = *v10;
      v15 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((_QWORD *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *((_QWORD *)v17 + 5))
        {
          v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8)
        return v10 + 3 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *sub_1C5419070(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1C5418D08(a1, a2, a3);
  if (a4[2] < (unint64_t)a3[2])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    if (a3[2] < (unint64_t)a2[2])
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      if (a2[2] < (unint64_t)a1[2])
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1C5419164(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < (unint64_t)v8[2])
        {
          v48 = *v8;
          *v8 = *(a2 - 3);
          *(a2 - 3) = v48;
          v49 = v8[1];
          v8[1] = *(a2 - 2);
          *(a2 - 2) = v49;
          v50 = v8[2];
          v8[2] = *(a2 - 1);
          *(a2 - 1) = v50;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C5418D08(v8, v8 + 3, a2 - 3);
      case 4:
        return (uint64_t)sub_1C5419070(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5:
        result = (uint64_t)sub_1C5419070(v8, v8 + 3, v8 + 6, v8 + 9);
        if (*(a2 - 1) < (unint64_t)v8[11])
        {
          v51 = v8[9];
          v8[9] = *(a2 - 3);
          *(a2 - 3) = v51;
          v52 = v8[10];
          v8[10] = *(a2 - 2);
          *(a2 - 2) = v52;
          v53 = v8[11];
          v8[11] = *(a2 - 1);
          *(a2 - 1) = v53;
          v54 = v8[11];
          v55 = v8[8];
          if (v54 < v55)
          {
            v57 = v8[6];
            v56 = v8[7];
            v58 = v8[9];
            v59 = v8[10];
            v60 = v8[5];
            v8[6] = v58;
            v8[7] = v59;
            v8[8] = v54;
            v8[9] = v57;
            v8[10] = v56;
            v8[11] = v55;
            if (v54 < v60)
            {
              v62 = v8[3];
              v61 = v8[4];
              v63 = v8[2];
              v8[3] = v58;
              v8[4] = v59;
              v8[5] = v54;
              v8[6] = v62;
              v8[7] = v61;
              v8[8] = v60;
              if (v54 < v63)
              {
                v64 = *v8;
                v65 = v8[1];
                *v8 = v58;
                v8[1] = v59;
                v8[2] = v54;
                v8[3] = v64;
                v8[4] = v65;
                v8[5] = v63;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 575)
        {
          v66 = v8 + 3;
          v68 = v8 == a2 || v66 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v68)
            {
              v69 = 0;
              v70 = v8;
              do
              {
                v71 = v66;
                v72 = v70[5];
                if (v72 < v70[2])
                {
                  v73 = *v71;
                  v74 = v70[4];
                  v75 = v69;
                  while (1)
                  {
                    v76 = (char *)v8 + v75;
                    *(_OWORD *)(v76 + 24) = *(_OWORD *)((char *)v8 + v75);
                    *((_QWORD *)v76 + 5) = *(uint64_t *)((char *)v8 + v75 + 16);
                    if (!v75)
                      break;
                    v75 -= 24;
                    if (v72 >= *((_QWORD *)v76 - 1))
                    {
                      v77 = (uint64_t *)((char *)v8 + v75 + 24);
                      goto LABEL_80;
                    }
                  }
                  v77 = v8;
LABEL_80:
                  *v77 = v73;
                  v77[1] = v74;
                  v77[2] = v72;
                }
                v66 = v71 + 3;
                v69 += 24;
                v70 = v71;
              }
              while (v71 + 3 != a2);
            }
          }
          else if (!v68)
          {
            v111 = v8 + 5;
            do
            {
              v112 = v66;
              v113 = v7[5];
              if (v113 < v7[2])
              {
                v114 = *v112;
                v115 = v7[4];
                v116 = v111;
                do
                {
                  v117 = v116;
                  *((_OWORD *)v116 - 1) = *(_OWORD *)(v116 - 5);
                  v118 = *(v116 - 3);
                  v116 -= 3;
                  *v117 = v118;
                }
                while (v113 < *(v117 - 6));
                *(v116 - 2) = v114;
                *(v116 - 1) = v115;
                *v116 = v113;
              }
              v66 = v112 + 3;
              v111 += 3;
              v7 = v112;
            }
            while (v112 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v78 = (unint64_t)(v10 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v8[3 * v81];
                if (2 * v80 + 2 < v10)
                {
                  v83 = v8[3 * v81 + 2];
                  v84 = v82[5];
                  v82 += 3 * (v83 < v84);
                  if (v83 < v84)
                    v81 = 2 * v80 + 2;
                }
                v85 = v8[3 * v80 + 2];
                if (v82[2] >= v85)
                {
                  v86 = &v8[3 * v80];
                  v87 = *v86;
                  v88 = v86[1];
                  do
                  {
                    v89 = v86;
                    v86 = v82;
                    *v89 = *v82;
                    v89[1] = v82[1];
                    v89[2] = v82[2];
                    if (v78 < v81)
                      break;
                    v90 = (2 * v81) | 1;
                    v82 = &v8[3 * v90];
                    v91 = 2 * v81 + 2;
                    if (v91 < v10)
                    {
                      v92 = v8[3 * v90 + 2];
                      v93 = v82[5];
                      v82 += 3 * (v92 < v93);
                      if (v92 < v93)
                        v90 = v91;
                    }
                    v81 = v90;
                  }
                  while (v82[2] >= v85);
                  *v86 = v87;
                  v86[1] = v88;
                  v86[2] = v85;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            do
            {
              result = 0;
              v94 = *v8;
              v95 = v8[1];
              v96 = v8[2];
              v97 = v8;
              do
              {
                v98 = (char *)(result + 1);
                v99 = &v97[3 * result + 3];
                v100 = (2 * result) | 1;
                v101 = 2 * result + 2;
                if (v101 < v10)
                {
                  v102 = v97[3 * (_QWORD)v98 + 2];
                  v103 = v99[5];
                  v99 += 3 * (v102 < v103);
                  if (v102 < v103)
                    v100 = v101;
                }
                *v97 = *v99;
                v97[1] = v99[1];
                v97[2] = v99[2];
                v97 = v99;
                result = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v99 == a2 - 3)
              {
                *v99 = v94;
                v99[1] = v95;
                v99[2] = v96;
              }
              else
              {
                *v99 = *(a2 - 3);
                v99[1] = *(a2 - 2);
                v99[2] = *(a2 - 1);
                *(a2 - 3) = v94;
                *(a2 - 2) = v95;
                *(a2 - 1) = v96;
                v104 = (char *)v99 - (char *)v8 + 24;
                if (v104 >= 25)
                {
                  v105 = (v104 / 0x18uLL - 2) >> 1;
                  v106 = v99[2];
                  if (v8[3 * v105 + 2] < v106)
                  {
                    v107 = *v99;
                    v108 = v99[1];
                    do
                    {
                      v109 = v99;
                      v99 = &v8[3 * v105];
                      *v109 = *v99;
                      v109[1] = v99[1];
                      result = (uint64_t)(v99 + 2);
                      v109[2] = v99[2];
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                    }
                    while (v8[3 * v105 + 2] < v106);
                    *v99 = v107;
                    v99[1] = v108;
                    *(_QWORD *)result = v106;
                  }
                }
              }
              a2 -= 3;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)sub_1C5418D08(&v7[3 * ((unint64_t)v10 >> 1)], v7, a2 - 3);
        }
        else
        {
          sub_1C5418D08(v7, &v7[3 * ((unint64_t)v10 >> 1)], a2 - 3);
          v13 = &v7[3 * v11];
          sub_1C5418D08(v7 + 3, v13 - 3, a2 - 6);
          sub_1C5418D08(v7 + 6, &v7[3 * v11 + 3], a2 - 9);
          result = (uint64_t)sub_1C5418D08(v13 - 3, v12, &v7[3 * v11 + 3]);
          v14 = *v7;
          *v7 = *v12;
          *v12 = v14;
          v15 = *(_OWORD *)(v7 + 1);
          *(_OWORD *)(v7 + 1) = *(_OWORD *)(v13 + 1);
          *(_OWORD *)(v13 + 1) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = v7[2];
          if (*(v7 - 1) < v16)
            goto LABEL_12;
          if (v16 >= *(a2 - 1))
          {
            v36 = v7 + 3;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = v36[2];
              v36 += 3;
            }
            while (v16 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 3;
              v35 = v34[5];
              v34 += 3;
            }
            while (v16 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 3;
              v40 = *(v39 - 1);
              v39 -= 3;
            }
            while (v16 < v40);
          }
          v41 = *v7;
          v42 = v7[1];
          while (v8 < v38)
          {
            v43 = *v8;
            *v8 = *v38;
            *v38 = v43;
            v44 = v8[1];
            v8[1] = v38[1];
            v38[1] = v44;
            v45 = v8[2];
            v8[2] = v38[2];
            v38[2] = v45;
            do
            {
              v46 = v8[5];
              v8 += 3;
            }
            while (v16 >= v46);
            do
            {
              v47 = *(v38 - 1);
              v38 -= 3;
            }
            while (v16 < v47);
          }
          if (v8 - 3 != v7)
          {
            *v7 = *(v8 - 3);
            v7[1] = *(v8 - 2);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 3) = v41;
          *(v8 - 2) = v42;
          *(v8 - 1) = v16;
          continue;
        }
        v16 = v7[2];
LABEL_12:
        v17 = 0;
        v18 = *v7;
        v19 = v7[1];
        do
        {
          v20 = v7[v17 + 5];
          v17 += 3;
        }
        while (v20 < v16);
        v21 = &v7[v17];
        v22 = a2;
        if (v17 == 3)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 3;
            v26 = *(v25 - 1);
            v25 -= 3;
            if (v26 < v16)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 3;
            v24 = *(v22 - 1);
            v22 -= 3;
          }
          while (v24 >= v16);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *v8;
            *v8 = *v27;
            *v27 = v28;
            v29 = v8[1];
            v8[1] = v27[1];
            v27[1] = v29;
            v30 = v8[2];
            v8[2] = v27[2];
            v27[2] = v30;
            do
            {
              v31 = v8[5];
              v8 += 3;
            }
            while (v31 < v16);
            do
            {
              v32 = *(v27 - 1);
              v27 -= 3;
            }
            while (v32 >= v16);
          }
          while (v8 < v27);
        }
        if (v8 - 3 != v7)
        {
          *v7 = *(v8 - 3);
          v7[1] = *(v8 - 2);
          v7[2] = *(v8 - 1);
        }
        *(v8 - 3) = v18;
        *(v8 - 2) = v19;
        *(v8 - 1) = v16;
        if (v21 < v23)
        {
LABEL_33:
          result = sub_1C5419164(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C54199D0(v7, v8 - 3);
        result = sub_1C54199D0(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 3;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C54199D0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      sub_1C5418D08(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1C5419070(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1C5419070(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        v22 = a1[11];
        v23 = a1[8];
        if (v22 < v23)
        {
          v25 = a1[6];
          v24 = a1[7];
          v26 = a1[9];
          v27 = a1[10];
          v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            v30 = a1[3];
            v29 = a1[4];
            v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              v32 = *a1;
              v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 6;
      sub_1C5418D08(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[2];
    if (v13 < v9[2])
    {
      v14 = *v10;
      v15 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((_QWORD *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *((_QWORD *)v17 + 5))
        {
          v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8)
        return v10 + 3 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *sub_1C5419C10(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5419D80(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = *(_DWORD *)(*a2 + 4) & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C5419D80(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = *(_DWORD *)(*a2 + 4) & v16;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -4096)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -8192;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 8 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5419D80(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = *(_DWORD *)(v15 + 4) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v22 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v15;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        ++v14;
      }
      while (v14 != &v4[v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v23 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    do
    {
      *result++ = -4096;
      v24 -= 8;
    }
    while (v24);
  }
  return result;
}

BOOL sub_1C5419EE8(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  v4 = (_QWORD *)*a1;
  v5 = sub_1C477672C(*a1, *a2);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  v8 = (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7));
  if (v5 == v8)
  {
    v10 = a1[1];
    v11 = *a2;
    v12 = v10 + 8;
    if ((*(_BYTE *)v10 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v13 = *(_DWORD *)(v10 + 16);
      if (!v13)
        return v5 == v8;
      v12 = *(_QWORD *)(v10 + 8);
    }
    v14 = v13 - 1;
    LODWORD(v15) = (v13 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v16 = (uint64_t *)(v12 + 8 * v15);
    v17 = *v16;
    if (*v16 == v11)
    {
LABEL_14:
      *v16 = -8192;
      v20 = *(_DWORD *)(v10 + 4) + 1;
      *(_DWORD *)v10 -= 2;
      *(_DWORD *)(v10 + 4) = v20;
    }
    else
    {
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & v14;
        v17 = *(_QWORD *)(v12 + 8 * v15);
        if (v17 == v11)
        {
          v16 = (uint64_t *)(v12 + 8 * v15);
          goto LABEL_14;
        }
      }
    }
  }
  return v5 == v8;
}

uint64_t sub_1C5419FD8(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unint64_t v10;

  v10 = 0;
  v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 8, &v10);
  v5 = &v4[*(unsigned int *)(a1 + 8)];
  v6 = *a2;
  *v5 = *a2;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)v5, v6, 2);
  sub_1C50205A4(a1, v4);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)&v4[v8 - 1];
}

void sub_1C541A078(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  __n128 *v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unint64_t v11;
  char *v14;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  unsigned __int32 v23;
  unsigned __int32 v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  __n128 *v30;
  char *v31;
  __n128 *v32;
  unsigned __int32 v33;
  __n128 *v34;
  unint64_t v35;
  uint64_t v36;
  __n128 *v37;
  __n128 *v38;
  unint64_t v39;
  __n128 *v40;
  __n128 *v41;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = a2[-1].n128_u32[0];
      v10 = a1->n128_u32[0];
      if (v9 < a1->n128_u32[0])
      {
        a1->n128_u32[0] = v9;
        a2[-1].n128_u32[0] = v10;
        v11 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v19 = a1 + 1;
        if (&a1[1] != a2)
        {
          v20 = 0;
          v21 = a1;
          do
          {
            v22 = v19;
            v23 = v21[1].n128_u32[0];
            v24 = v21->n128_u32[0];
            if (v23 < v21->n128_u32[0])
            {
              v25 = v21[1].n128_u64[1];
              v26 = v20;
              while (1)
              {
                v27 = (char *)a1 + v26;
                *((_DWORD *)v27 + 4) = v24;
                *((_QWORD *)v27 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v26);
                if (!v26)
                  break;
                v24 = *((_DWORD *)v27 - 4);
                v26 -= 16;
                if (v23 >= v24)
                {
                  v28 = (uint64_t)&a1[1] + v26;
                  goto LABEL_18;
                }
              }
              v28 = (uint64_t)a1;
LABEL_18:
              *(_DWORD *)v28 = v23;
              *(_QWORD *)(v28 + 8) = v25;
            }
            v19 = v22 + 1;
            v20 += 16;
            v21 = v22;
          }
          while (&v22[1] != a2);
        }
      }
    }
    else
    {
      v14 = (char *)a5;
      v16 = a4 >> 1;
      v17 = &a1[a4 >> 1];
      v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v29 = sub_1C541A2EC(a1, v17, a3, v18, a5, a7);
        v30 = (__n128 *)&v14[16 * v16];
        sub_1C541A2EC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v30, v29);
        v31 = &v14[16 * a4];
        v32 = v30;
        while (v32 != (__n128 *)v31)
        {
          v33 = v32->n128_u32[0];
          if (v32->n128_u32[0] < *(_DWORD *)v14)
          {
            v34 = v32;
          }
          else
          {
            v33 = *(_DWORD *)v14;
            v34 = (__n128 *)v14;
          }
          v35 = v34->n128_u64[1];
          if (v32->n128_u32[0] < *(_DWORD *)v14)
            ++v32;
          else
            v14 += 16;
          v8->n128_u32[0] = v33;
          v8->n128_u64[1] = v35;
          ++v8;
          if (v14 == (char *)v30)
          {
            if (v32 != (__n128 *)v31)
            {
              v36 = 0;
              do
              {
                v37 = &v32[v36];
                v38 = &v8[v36];
                v38->n128_u32[0] = v32[v36].n128_u32[0];
                v38->n128_u64[1] = v32[v36++].n128_u64[1];
              }
              while (&v37[1] != (__n128 *)v31);
            }
            return;
          }
        }
        if (v14 != (char *)v30)
        {
          v39 = 0;
          do
          {
            v40 = &v8[v39 / 0x10];
            v41 = (__n128 *)&v14[v39];
            v40->n128_u32[0] = *(_DWORD *)&v14[v39];
            v40->n128_u64[1] = *(_QWORD *)&v14[v39 + 8];
            v39 += 16;
          }
          while (&v41[1] != v30);
        }
      }
      else
      {
        sub_1C541A078(a1, v17, a3, v18, a5, a6);
        sub_1C541A078(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v14, a6);
        sub_1C541A504((char *)v8, (char *)&v8[a4 >> 1], (char *)a2, a4 >> 1, a4 - (a4 >> 1), v14, a6);
      }
    }
  }
}

__n128 sub_1C541A2EC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unsigned __int32 v16;
  __n128 *v17;
  uint64_t v18;
  unsigned __int32 v19;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  if (a4)
  {
    v6 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_u32[0] >= a1->n128_u32[0])
      {
        *a5 = *a1;
        result = *v10;
      }
      else
      {
        *a5 = *v10;
        result = *a1;
      }
      a5[1] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      v21 = &a1[a4 >> 1];
      sub_1C541A078(a1, v21, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C541A078(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      v22 = &v9[a4 >> 1];
      while (v22 != a2)
      {
        if (v22->n128_u32[0] >= v9->n128_u32[0])
        {
          v24 = *v9++;
          result = v24;
        }
        else
        {
          v23 = *v22++;
          result = v23;
        }
        *v6++ = result;
        if (v9 == v21)
        {
          if (v22 != a2)
          {
            v25 = 0;
            do
            {
              result = v22[v25];
              v6[v25++] = result;
            }
            while (&v22[v25] != a2);
          }
          return result;
        }
      }
      if (v9 != v21)
      {
        v26 = 0;
        do
        {
          result = v9[v26];
          v6[v26++] = result;
        }
        while (&v9[v26] != v21);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a5 = *a1;
      v11 = a1 + 1;
      if (&a1[1] != a2)
      {
        v12 = 0;
        v13 = a5;
        v14 = a5;
        do
        {
          v15 = v11;
          v16 = v14->n128_u32[0];
          ++v14;
          if (v9[1].n128_u32[0] >= v16)
          {
            result = *v11;
            *v14 = *v11;
          }
          else
          {
            result = *v13;
            *v14 = *v13;
            v17 = a5;
            if (v13 != a5)
            {
              v18 = v12;
              while (1)
              {
                v17 = (__n128 *)((char *)a5 + v18);
                v19 = *(unsigned __int32 *)((char *)a5[-1].n128_u32 + v18);
                if (v15->n128_u32[0] >= v19)
                  break;
                v17->n128_u32[0] = v19;
                v17->n128_u64[1] = v17[-1].n128_u64[1];
                v18 -= 16;
                if (!v18)
                {
                  v17 = a5;
                  break;
                }
              }
            }
            v17->n128_u32[0] = v15->n128_u32[0];
            v17->n128_u64[1] = v9[1].n128_u64[1];
          }
          v11 = v15 + 1;
          v12 += 16;
          v13 = v14;
          v9 = v15;
        }
        while (&v15[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1C541A504(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unsigned int v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *i;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = *(_DWORD *)a2;
      v11 = -a4;
      while (1)
      {
        v12 = *(_DWORD *)&result[v9];
        if (v10 < v12)
          break;
        v9 += 16;
        v52 = __CFADD__(v11++, 1);
        if (v52)
          return result;
      }
      v13 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v61 = &result[v9];
          *(_DWORD *)v61 = v10;
          *(_DWORD *)a2 = v12;
          v62 = *(_QWORD *)&result[v9 + 8];
          *((_QWORD *)v61 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v62;
          return result;
        }
        if (v11 <= 0)
          v24 = -v11;
        else
          v24 = 1 - v11;
        v23 = v24 >> 1;
        v17 = &result[16 * (v24 >> 1) + v9];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 4;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[16 * (v25 >> 1)];
            v29 = *(_DWORD *)v27;
            v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[16 * (v14 >> 1)];
        v17 = a2;
        if (v13 != a2)
        {
          v18 = (a2 - result - v9) >> 4;
          v17 = &result[v9];
          do
          {
            v19 = v18 >> 1;
            v20 = (unsigned int *)&v17[16 * (v18 >> 1)];
            v22 = *v20;
            v21 = (char *)(v20 + 4);
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = (v17 - result - v9) >> 4;
      }
      v30 = v16;
      if (v17 != a2)
      {
        v30 = v17;
        if (a2 != v16)
        {
          v31 = *(_DWORD *)v17;
          *(_DWORD *)v17 = v10;
          *(_DWORD *)a2 = v31;
          v32 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v32;
          v30 = v17 + 16;
          for (i = a2 + 16; i != v16; i += 16)
          {
            if (v30 == a2)
              a2 = i;
            v34 = *(_DWORD *)v30;
            *(_DWORD *)v30 = *(_DWORD *)i;
            *(_DWORD *)i = v34;
            v35 = *((_QWORD *)v30 + 1);
            *((_QWORD *)v30 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v35;
            v30 += 16;
          }
          if (v30 == a2)
          {
            v30 = a2;
          }
          else
          {
            v36 = v30;
            v37 = a2;
            do
            {
              while (1)
              {
                v38 = *(_DWORD *)v36;
                *(_DWORD *)v36 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v38;
                v39 = *((_QWORD *)v36 + 1);
                *((_QWORD *)v36 + 1) = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = v39;
                v36 += 16;
                a2 += 16;
                if (a2 == v16)
                  break;
                if (v36 == v37)
                  v37 = a2;
              }
              a2 = v37;
            }
            while (v36 != v37);
          }
        }
      }
      a4 = -(v23 + v11);
      v40 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v11)
      {
        v45 = v16;
        v46 = a6;
        sub_1C541A504(v30, v45, a3, a4, a5 - v15, a6, a7);
        a6 = v46;
        v16 = v17;
        v40 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        v41 = v13;
        v42 = a3;
        v43 = v15;
        v44 = a6;
        sub_1C541A504(v41, v17, v30, v23, v43, a6, a7);
        a3 = v42;
        a6 = v44;
        v13 = v30;
      }
      a5 = v40;
      result = v13;
      a2 = v16;
      if (!v40)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v55 = 0;
        do
        {
          *(_OWORD *)&a6[v55] = *(_OWORD *)&result[v55];
          v55 += 16;
        }
        while (&result[v55] != a2);
        if (v55)
        {
          v56 = &a6[v55];
          v57 = (uint64_t)&a6[v55 - 16];
          while (a2 != a3)
          {
            v58 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              v59 = a2;
            }
            else
            {
              v58 = *(_DWORD *)a6;
              v59 = a6;
            }
            v60 = *((_QWORD *)v59 + 1);
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
              a2 += 16;
            else
              a6 += 16;
            *(_DWORD *)result = v58;
            *((_QWORD *)result + 1) = v60;
            result += 16;
            if (v56 == a6)
              return result;
          }
          if (v56 != a6)
          {
            v65 = 0;
            do
            {
              v66 = &result[v65];
              v67 = &a6[v65];
              *(_DWORD *)v66 = *(_DWORD *)&a6[v65];
              *((_QWORD *)v66 + 1) = *(_QWORD *)&a6[v65 + 8];
              v65 += 16;
            }
            while ((char *)v57 != v67);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v47 = 0;
      do
      {
        *(_OWORD *)&a6[v47] = *(_OWORD *)&a2[v47];
        v47 += 16;
      }
      while (&a2[v47] != a3);
      if (v47)
      {
        v48 = &a6[v47];
        v49 = a3 - 8;
        while (a2 != result)
        {
          v50 = *((_DWORD *)a2 - 4);
          v51 = *((_DWORD *)v48 - 4);
          v52 = v51 >= v50;
          if (v51 < v50)
          {
            v53 = a2;
          }
          else
          {
            v50 = *((_DWORD *)v48 - 4);
            v53 = v48;
          }
          if (!v52)
            a2 -= 16;
          v54 = *((_QWORD *)v53 - 1);
          if (v52)
            v48 -= 16;
          *((_DWORD *)v49 - 2) = v50;
          *(_QWORD *)v49 = v54;
          v49 -= 16;
          if (v48 == a6)
            return result;
        }
        if (v48 != a6)
        {
          v63 = 0;
          do
          {
            v64 = &v49[v63];
            *((_DWORD *)v64 - 2) = *(_DWORD *)&v48[v63 - 16];
            *(_QWORD *)v64 = *(_QWORD *)&v48[v63 - 8];
            v63 -= 16;
          }
          while (&v48[v63] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1C541A948(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 16, &v5);
  sub_1C541A9B8(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C541A9B8(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_DWORD **)a1;
    v6 = *(_QWORD *)a1 + 16 * v2;
    v7 = *(_DWORD **)a1;
    v8 = a2;
    do
    {
      v9 = *v7;
      v7 += 4;
      *v8 = v9;
      v8 += 4;
      *((_QWORD *)a2 + 1) = *((_QWORD *)v5 + 1);
      sub_1C5417198((uint64_t)(a2 + 2), (unsigned __int8 **)v5 + 1);
      a2 = v8;
      v5 = v7;
    }
    while (v7 != (_DWORD *)v6);
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)a1 - 8;
      v12 = 16 * v10;
      do
      {
        v13 = *(unsigned __int8 **)(v11 + v12);
        if (v13)
          llvm::MetadataTracking::untrack(v11 + v12, v13);
        v12 -= 16;
      }
      while (v12);
    }
  }
}

_QWORD *sub_1C541AA4C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_16:
    v6 = sub_1C541AB24(a1, (uint64_t)a2, a2, v13);
    v14 = *a2;
    v6[3] = 0;
    v6[4] = 0;
    *v6 = v14;
    v6[1] = v6 + 3;
    v6[2] = 0x100000000;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 40 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 40 * (v12 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6;
}

_QWORD *sub_1C541AB24(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C541ACA4(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 40 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 40 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C541ACA4(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 40 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 40 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C541ACA4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C541AD68(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C541AD68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 **v25;
  _DWORD *v26;
  unsigned __int8 **v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  unsigned __int8 *v33;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    while (1)
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_14:
      v4 += 5;
      if (v4 == a3)
        return;
    }
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
    v12 = *(_QWORD *)a1 + 40 * v11;
    v13 = *(_QWORD *)v12;
    if (v9 != *(_QWORD *)v12)
    {
      v17 = 0;
      v18 = 1;
      while (v13 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v13 == -8192;
        if (v19)
          v17 = v12;
        v20 = v11 + v18++;
        v11 = v20 & v10;
        v12 = *(_QWORD *)a1 + 40 * v11;
        v13 = *(_QWORD *)v12;
        if (v9 == *(_QWORD *)v12)
          goto LABEL_7;
      }
      if (v17)
        v12 = v17;
    }
LABEL_7:
    *(_QWORD *)v12 = v9;
    *(_QWORD *)(v12 + 8) = v12 + 24;
    *(_QWORD *)(v12 + 16) = 0x100000000;
    v14 = *((unsigned int *)v4 + 4);
    if ((_DWORD)v14)
    {
      if ((uint64_t *)v12 != v4)
      {
        v15 = (unsigned __int8 **)v4[1];
        if (v15 != (unsigned __int8 **)(v4 + 3))
        {
          *(_QWORD *)(v12 + 8) = v15;
          v16 = *((_DWORD *)v4 + 5);
          *(_DWORD *)(v12 + 16) = v14;
          *(_DWORD *)(v12 + 20) = v16;
          v4[1] = (uint64_t)(v4 + 3);
          *((_DWORD *)v4 + 5) = 0;
          v15 = (unsigned __int8 **)(v4 + 3);
LABEL_11:
          *((_DWORD *)v4 + 4) = 0;
          ++*(_DWORD *)(a1 + 8);
          goto LABEL_12;
        }
        if (v14 <= 1)
        {
          v25 = &v15[2 * v14];
        }
        else
        {
          sub_1C541A948(v12 + 8, *((unsigned int *)v4 + 4));
          v15 = (unsigned __int8 **)v4[1];
          v24 = *((unsigned int *)v4 + 4);
          if (!(_DWORD)v24)
            goto LABEL_37;
          v25 = &v15[2 * v24];
        }
        v26 = *(_DWORD **)(v12 + 8);
        v27 = v15;
        v28 = v26;
        do
        {
          v29 = *(_DWORD *)v27;
          v27 += 2;
          *v28 = v29;
          v28 += 4;
          *((_QWORD *)v26 + 1) = v15[1];
          sub_1C5417198((uint64_t)(v26 + 2), v15 + 1);
          v26 = v28;
          v15 = v27;
        }
        while (v27 != v25);
        v15 = (unsigned __int8 **)v4[1];
LABEL_37:
        *(_DWORD *)(v12 + 16) = v14;
        v30 = *((unsigned int *)v4 + 4);
        if ((_DWORD)v30)
        {
          v31 = v15 - 1;
          v32 = 2 * v30;
          do
          {
            v33 = v31[v32];
            if (v33)
              llvm::MetadataTracking::untrack((uint64_t)&v31[v32], v33);
            v32 -= 2;
          }
          while (v32 * 8);
          v15 = (unsigned __int8 **)v4[1];
        }
        goto LABEL_11;
      }
      ++*(_DWORD *)(a1 + 8);
      v21 = v4[1] - 8;
      v22 = 16 * v14;
      do
      {
        v23 = *(unsigned __int8 **)(v21 + v22);
        if (v23)
          llvm::MetadataTracking::untrack(v21 + v22, v23);
        v22 -= 16;
      }
      while (v22);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
    }
    v15 = (unsigned __int8 **)v4[1];
LABEL_12:
    if (v15 != (unsigned __int8 **)(v4 + 3))
      free(v15);
    goto LABEL_14;
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getListOwner(uint64_t a1)
{
  return a1 - 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getList(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getSymTab(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

void llvm::SymbolTableListTraits<llvm::Function>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::ValueSymbolTable *v2;

  *(_QWORD *)(a2 + 40) = a1 - 24;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(llvm::ValueSymbolTable **)(a1 + 88);
    if (v2)
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
  }
}

{
  __ZN4llvm21SymbolTableListTraitsINS_8FunctionEE13addNodeToListEPS1_(a1, a2);
}

void llvm::SymbolTableListTraits<llvm::Function>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v31;
  uint64_t **v32;
  uint64_t v33;
  int v34;
  llvm::ValueSymbolTable *v35;

  if (a1 != a2)
  {
    v4 = a3;
    v31 = *(llvm::ValueSymbolTable **)(a1 + 88);
    v32 = (uint64_t **)(a1 - 24);
    v35 = *(llvm::ValueSymbolTable **)(a2 + 88);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          v29 = v4 - 56;
          if (!v4)
            v29 = 0;
          *(_QWORD *)(v29 + 40) = v32;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        v5 = v4 ? (uint64_t ***)(v4 - 56) : 0;
        v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34)
            break;
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34)
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
        }
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == a4)
          return;
      }
      v6 = ***v5;
      v7 = *(_QWORD *)(v6 + 152);
      v8 = *(unsigned int *)(v6 + 168);
      if ((_DWORD)v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        v10 = (uint64_t ****)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == v5)
          goto LABEL_16;
        v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          v13 = v9 + v12++;
          v9 = v13 & (v8 - 1);
          v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      v14 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v14)
      {
        v15 = (size_t *)v10[1];
        v33 = *((unsigned int *)v35 + 5);
        v16 = (unsigned __int8 *)v15 + v33;
        v17 = *v15;
        if (*v15)
        {
          v18 = 0;
          v19 = *v15;
          v20 = v16;
          do
          {
            v21 = *v20++;
            v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          v18 = 0;
        }
        v22 = v14 - 1;
        v23 = *(_QWORD *)v35;
        v24 = *(_QWORD *)v35 + 8 * v14 + 8;
        v25 = 1;
        v26 = v18;
        while (1)
        {
          v27 = v26 & v22;
          v28 = *(_QWORD **)(v23 + 8 * v27);
          if (v28 != (_QWORD *)-8)
          {
            if (!v28)
              goto LABEL_29;
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17)))
              break;
          }
          v26 = v25 + v27;
          ++v25;
        }
        *(_QWORD *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getListOwner(uint64_t a1)
{
  return a1 - 8;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getList(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getSymTab(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::ValueSymbolTable *v2;

  *(_QWORD *)(a2 + 40) = a1 - 8;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(llvm::ValueSymbolTable **)(a1 + 104);
    if (v2)
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
  }
}

int32x2_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  int v16;
  size_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int32x2_t result;

  a2[5] = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return result;
  v2 = *(uint64_t **)(a1 + 104);
  if (!v2)
    return result;
  v3 = ***a2;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t ****)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_9:
  v11 = *((unsigned int *)v2 + 2);
  if ((_DWORD)v11)
  {
    v12 = (size_t *)v7[1];
    v13 = *((unsigned int *)v2 + 5);
    v14 = (unsigned __int8 *)v12 + v13;
    v15 = *v12;
    if (*v12)
    {
      v16 = 0;
      v17 = *v12;
      v18 = v14;
      do
      {
        v19 = *v18++;
        v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    v20 = v11 - 1;
    v21 = *v2;
    v22 = *v2 + 8 * v11 + 8;
    v23 = 1;
    v24 = v16;
    while (1)
    {
      v25 = v24 & v20;
      v26 = *(_QWORD **)(v21 + 8 * v25);
      if (v26 != (_QWORD *)-8)
      {
        if (!v26)
          return result;
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15)))
          break;
      }
      v24 = v23 + v25;
      ++v23;
    }
    *(_QWORD *)(v21 + 8 * (int)v25) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)v2 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v2 + 12) = (uint64_t)result;
  }
  return result;
}

{
  return __ZN4llvm21SymbolTableListTraitsINS_14GlobalVariableEE18removeNodeFromListEPS1_(a1, a2);
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getListOwner(uint64_t a1)
{
  return a1 - 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getList(uint64_t a1)
{
  return a1 + 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getSymTab(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalAlias>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v31;
  uint64_t **v32;
  uint64_t v33;
  int v34;
  llvm::ValueSymbolTable *v35;

  if (a1 != a2)
  {
    v4 = a3;
    v31 = *(llvm::ValueSymbolTable **)(a1 + 72);
    v32 = (uint64_t **)(a1 - 40);
    v35 = *(llvm::ValueSymbolTable **)(a2 + 72);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          v29 = v4 - 48;
          if (!v4)
            v29 = 0;
          *(_QWORD *)(v29 + 40) = v32;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        v5 = v4 ? (uint64_t ***)(v4 - 48) : 0;
        v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34)
            break;
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34)
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
        }
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == a4)
          return;
      }
      v6 = ***v5;
      v7 = *(_QWORD *)(v6 + 152);
      v8 = *(unsigned int *)(v6 + 168);
      if ((_DWORD)v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        v10 = (uint64_t ****)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == v5)
          goto LABEL_16;
        v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          v13 = v9 + v12++;
          v9 = v13 & (v8 - 1);
          v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      v14 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v14)
      {
        v15 = (size_t *)v10[1];
        v33 = *((unsigned int *)v35 + 5);
        v16 = (unsigned __int8 *)v15 + v33;
        v17 = *v15;
        if (*v15)
        {
          v18 = 0;
          v19 = *v15;
          v20 = v16;
          do
          {
            v21 = *v20++;
            v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          v18 = 0;
        }
        v22 = v14 - 1;
        v23 = *(_QWORD *)v35;
        v24 = *(_QWORD *)v35 + 8 * v14 + 8;
        v25 = 1;
        v26 = v18;
        while (1)
        {
          v27 = v26 & v22;
          v28 = *(_QWORD **)(v23 + 8 * v27);
          if (v28 != (_QWORD *)-8)
          {
            if (!v28)
              goto LABEL_29;
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17)))
              break;
          }
          v26 = v25 + v27;
          ++v25;
        }
        *(_QWORD *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getListOwner(uint64_t a1)
{
  return a1 - 56;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getList(uint64_t a1)
{
  return a1 + 56;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getSymTab(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalIFunc>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::ValueSymbolTable *v31;
  uint64_t **v32;
  uint64_t v33;
  int v34;
  llvm::ValueSymbolTable *v35;

  if (a1 != a2)
  {
    v4 = a3;
    v31 = *(llvm::ValueSymbolTable **)(a1 + 56);
    v32 = (uint64_t **)(a1 - 56);
    v35 = *(llvm::ValueSymbolTable **)(a2 + 56);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          v29 = v4 - 56;
          if (!v4)
            v29 = 0;
          *(_QWORD *)(v29 + 40) = v32;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        v5 = v4 ? (uint64_t ***)(v4 - 56) : 0;
        v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34)
            break;
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34)
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
        }
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == a4)
          return;
      }
      v6 = ***v5;
      v7 = *(_QWORD *)(v6 + 152);
      v8 = *(unsigned int *)(v6 + 168);
      if ((_DWORD)v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        v10 = (uint64_t ****)(v7 + 16 * v9);
        v11 = *v10;
        if (*v10 == v5)
          goto LABEL_16;
        v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          v13 = v9 + v12++;
          v9 = v13 & (v8 - 1);
          v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      v14 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v14)
      {
        v15 = (size_t *)v10[1];
        v33 = *((unsigned int *)v35 + 5);
        v16 = (unsigned __int8 *)v15 + v33;
        v17 = *v15;
        if (*v15)
        {
          v18 = 0;
          v19 = *v15;
          v20 = v16;
          do
          {
            v21 = *v20++;
            v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          v18 = 0;
        }
        v22 = v14 - 1;
        v23 = *(_QWORD *)v35;
        v24 = *(_QWORD *)v35 + 8 * v14 + 8;
        v25 = 1;
        v26 = v18;
        while (1)
        {
          v27 = v26 & v22;
          v28 = *(_QWORD **)(v23 + 8 * v27);
          if (v28 != (_QWORD *)-8)
          {
            if (!v28)
              goto LABEL_29;
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17)))
              break;
          }
          v26 = v25 + v27;
          ++v25;
        }
        *(_QWORD *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

uint64_t llvm::Module::Module(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v7[2] = 0x1000000000;
  *v7 = 0;
  v7[4] = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x4800000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 > 0x16)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 176) = a3;
    *(_QWORD *)(a1 + 184) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 168) = v11;
    memmove(v11, a2, a3);
    *((_BYTE *)v11 + a3) = 0;
    v8 = operator new(v10);
    *(_QWORD *)(a1 + 200) = a3;
    *(_QWORD *)(a1 + 208) = v12;
    *(_QWORD *)(a1 + 192) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 191) = a3;
    if (!a3)
    {
      *(_BYTE *)(a1 + 168) = 0;
      v8 = (void *)(a1 + 192);
      *(_BYTE *)(a1 + 215) = 0;
      goto LABEL_9;
    }
    memmove((void *)(a1 + 168), a2, a3);
    *(_BYTE *)(a1 + 168 + a3) = 0;
    v8 = (void *)(a1 + 192);
    *(_BYTE *)(a1 + 215) = a3;
  }
  memmove(v8, a2, a3);
LABEL_9:
  *((_BYTE *)v8 + a3) = 0;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 260) = 16;
  *(_WORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 328;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 8;
  *(_QWORD *)(a1 + 336) = a1 + 352;
  *(_QWORD *)(a1 + 344) = 0x1000000000;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 504) = a1 + 520;
  *(_QWORD *)(a1 + 512) = 0x800000000;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 656) = a1 + 672;
  *(_QWORD *)(a1 + 664) = 0x800000000;
  llvm::DataLayout::reset(a1 + 272, "", 0);
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 0x1000000000;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  sub_1C4774094(**(llvm::SmallPtrSetImplBase ***)a1, a1);
  return a1;
}

void llvm::Module::~Module(llvm::Module *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Module *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  llvm::Module *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  llvm::Module *v59;
  uint64_t v60;
  llvm::NamedMDNode *v61;
  llvm::NamedMDNode *v62;
  uint64_t v63;
  llvm::NamedMDNode *v64;
  uint64_t i;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  size_t *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  size_t v80;
  int v81;
  size_t v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v111;
  llvm::Function *v112;
  llvm::Function *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  llvm::Module *v119;
  uint64_t *v120;
  uint64_t *v121;

  llvm::LLVMContext::removeModule(*(uint64_t **)this, (uint64_t)this);
  llvm::Module::dropAllReferences(this);
  v111 = (char *)this + 8;
  sub_1C541FACC((uint64_t)this + 8, *((_QWORD *)this + 2), (uint64_t)this + 8);
  v118 = (char *)this + 24;
  v119 = this;
  v2 = (char *)*((_QWORD *)this + 4);
  if ((char *)this + 24 != v2)
  {
    while (1)
    {
      v114 = v2;
      v116 = (char *)*((_QWORD *)v2 + 1);
      v112 = (llvm::Function *)(v2 - 56);
      v3 = v2 ? (uint64_t)(v2 - 56) : 0;
      *(_QWORD *)(v3 + 40) = 0;
      if ((*(_BYTE *)(v3 + 23) & 0x10) != 0)
      {
        v120 = (uint64_t *)*((_QWORD *)v119 + 14);
        if (v120)
          break;
      }
LABEL_27:
      v28 = *(_QWORD *)(v3 + 56);
      v29 = *(_QWORD **)(v3 + 64);
      *v29 = v28;
      *(_QWORD *)(v28 + 8) = v29;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      llvm::Function::~Function(v112);
      v31 = *((_DWORD *)v114 - 9);
      if ((v31 & 0x40000000) != 0)
      {
        v36 = v114 - 64;
        v37 = (char *)*((_QWORD *)v114 - 8);
        v38 = v31 & 0x7FFFFFF;
        if ((_DWORD)v38)
        {
          v39 = 32 * v38;
          do
          {
            v40 = &v37[v39];
            if (*(_QWORD *)&v37[v39 - 32])
            {
              **((_QWORD **)v40 - 2) = *((_QWORD *)v40 - 3);
              v41 = *((_QWORD *)v40 - 3);
              if (v41)
                *(_QWORD *)(v41 + 16) = *((_QWORD *)v40 - 2);
            }
            v39 -= 32;
          }
          while (v39);
        }
        operator delete(v37);
      }
      else
      {
        v32 = v31 & 0x7FFFFFF;
        if ((_DWORD)v32)
        {
          v33 = v114 - 88;
          v34 = -32 * v32;
          do
          {
            if (*(_QWORD *)v33)
            {
              **((_QWORD **)v33 + 2) = *((_QWORD *)v33 + 1);
              v35 = *((_QWORD *)v33 + 1);
              if (v35)
                *(_QWORD *)(v35 + 16) = *((_QWORD *)v33 + 2);
            }
            v33 -= 32;
            v34 += 32;
          }
          while (v34);
        }
        v36 = (char *)(v30 - 32 * v32);
        if (v31 < 0)
          v36 = &v36[-*((_QWORD *)v36 - 1) - 8];
      }
      operator delete(v36);
      v2 = v116;
      if (v118 == v116)
        goto LABEL_46;
    }
    v4 = ***(_QWORD ***)v3;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v8 = (uint64_t *)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == v3)
        goto LABEL_14;
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(_QWORD *)(v5 + 16 * v7);
        if (v9 == v3)
        {
          v8 = (uint64_t *)(v5 + 16 * v7);
          goto LABEL_14;
        }
      }
    }
    v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_14:
    v12 = *((unsigned int *)v120 + 2);
    if ((_DWORD)v12)
    {
      v13 = (size_t *)v8[1];
      v14 = *((unsigned int *)v120 + 5);
      v15 = (unsigned __int8 *)v13 + v14;
      v16 = *v13;
      if (*v13)
      {
        v17 = 0;
        v18 = *v13;
        v19 = v15;
        do
        {
          v20 = *v19++;
          v17 = 33 * v17 + v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        v17 = 0;
      }
      v21 = v12 - 1;
      v22 = *v120;
      v23 = *v120 + 8 * v12 + 8;
      v24 = 1;
      v25 = v17;
      while (1)
      {
        v26 = v25 & v21;
        v27 = *(_QWORD **)(v22 + 8 * v26);
        if (v27 != (_QWORD *)-8)
        {
          if (!v27)
            goto LABEL_27;
          if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16)))
            break;
        }
        v25 = v24 + v26;
        ++v24;
      }
      *(_QWORD *)(v22 + 8 * (int)v26) = -8;
      *(uint64_t *)((char *)v120 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v120 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_27;
  }
LABEL_46:
  sub_1C541FD80((uint64_t)v119 + 40, *((_QWORD *)v119 + 6), (uint64_t)v119 + 40);
  v42 = (uint64_t)v119 + 56;
  v43 = *((_QWORD *)v119 + 8);
  if ((llvm::Module *)((char *)v119 + 56) != (llvm::Module *)v43)
  {
    do
      v43 = sub_1C6239CEC((uint64_t)v119 + 56, v43);
    while (v42 != v43);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)v119 + 92), 8);
  sub_1C51838C8((uint64_t)v119 + 704);
  llvm::DataLayout::~DataLayout((llvm::Module *)((char *)v119 + 272));
  v44 = v119;
  if (*((_DWORD *)v119 + 63))
  {
    v45 = *((unsigned int *)v119 + 62);
    if ((_DWORD)v45)
    {
      v46 = 0;
      v47 = 8 * v45;
      do
      {
        v48 = *(_QWORD *)(*((_QWORD *)v44 + 30) + v46);
        if (v48)
          v49 = v48 == -8;
        else
          v49 = 1;
        if (!v49)
        {
          MEMORY[0x1CAA32FB4]();
          v44 = v119;
        }
        v46 += 8;
      }
      while (v47 != v46);
    }
  }
  free(*((void **)v44 + 30));
  v50 = v119;
  if (*((char *)v119 + 239) < 0)
  {
    operator delete(*((void **)v119 + 27));
    v50 = v119;
  }
  if (*((char *)v50 + 215) < 0)
  {
    operator delete(*((void **)v50 + 24));
    v50 = v119;
  }
  if (*((char *)v50 + 191) < 0)
  {
    operator delete(*((void **)v50 + 21));
    v50 = v119;
  }
  v51 = *((_QWORD *)v50 + 20);
  *((_QWORD *)v50 + 20) = 0;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v50 = v119;
  }
  v52 = *((_QWORD *)v50 + 19);
  *((_QWORD *)v50 + 19) = 0;
  if (v52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v50 = v119;
  }
  if (*((_DWORD *)v50 + 33))
  {
    v53 = *((unsigned int *)v50 + 32);
    if ((_DWORD)v53)
    {
      v54 = 0;
      v55 = 8 * v53;
      do
      {
        v56 = *(_QWORD *)(*((_QWORD *)v50 + 15) + v54);
        if (v56 != -8 && v56 != 0)
        {
          v58 = *(void **)(v56 + 32);
          if (v58 != *(void **)(v56 + 24))
            free(v58);
          MEMORY[0x1CAA32FB4](v56, 8);
          v50 = v119;
        }
        v54 += 8;
      }
      while (v55 != v54);
    }
  }
  free(*((void **)v50 + 15));
  v59 = v119;
  v60 = *((_QWORD *)v119 + 14);
  *((_QWORD *)v119 + 14) = 0;
  if (v60)
  {
    if (*(_DWORD *)(v60 + 12))
    {
      v106 = *(unsigned int *)(v60 + 8);
      if ((_DWORD)v106)
      {
        v107 = 0;
        v108 = 8 * v106;
        do
        {
          v109 = *(_QWORD *)(*(_QWORD *)v60 + v107);
          if (v109 != -8 && v109 != 0)
            MEMORY[0x1CAA32FB4]();
          v107 += 8;
        }
        while (v108 != v107);
      }
    }
    free(*(void **)v60);
    MEMORY[0x1CAA32FC0](v60, 0x1080C402C9B36C6);
    v59 = v119;
  }
  if (*((char *)v59 + 111) < 0)
  {
    operator delete(*((void **)v59 + 11));
    v59 = v119;
  }
  v61 = (llvm::Module *)((char *)v59 + 72);
  v62 = (llvm::NamedMDNode *)*((_QWORD *)v59 + 10);
  if (v62 != (llvm::Module *)((char *)v59 + 72))
  {
    do
    {
      v63 = *(_QWORD *)v62;
      v64 = (llvm::NamedMDNode *)*((_QWORD *)v62 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v62;
      *(_QWORD *)(v63 + 8) = v64;
      *(_QWORD *)v62 = 0;
      *((_QWORD *)v62 + 1) = 0;
      llvm::NamedMDNode::~NamedMDNode(v62);
      MEMORY[0x1CAA32FC0]();
      v62 = v64;
    }
    while (v64 != v61);
  }
  for (i = *((_QWORD *)v119 + 8); v42 != i; i = sub_1C6239CEC(v42, i))
    ;
  sub_1C541FD80((uint64_t)v119 + 40, *((_QWORD *)v119 + 6), (uint64_t)v119 + 40);
  v66 = (char *)*((_QWORD *)v119 + 4);
  if (v118 != v66)
  {
    while (1)
    {
      v115 = v66;
      v117 = (char *)*((_QWORD *)v66 + 1);
      v113 = (llvm::Function *)(v66 - 56);
      v67 = v66 ? (uint64_t)(v66 - 56) : 0;
      *(_QWORD *)(v67 + 40) = 0;
      if ((*(_BYTE *)(v67 + 23) & 0x10) != 0)
      {
        v121 = (uint64_t *)*((_QWORD *)v119 + 14);
        if (v121)
          break;
      }
LABEL_113:
      v92 = *(_QWORD *)(v67 + 56);
      v93 = *(_QWORD **)(v67 + 64);
      *v93 = v92;
      *(_QWORD *)(v92 + 8) = v93;
      *(_QWORD *)(v67 + 56) = 0;
      *(_QWORD *)(v67 + 64) = 0;
      llvm::Function::~Function(v113);
      v95 = *((_DWORD *)v115 - 9);
      if ((v95 & 0x40000000) != 0)
      {
        v100 = v115 - 64;
        v101 = (char *)*((_QWORD *)v115 - 8);
        v102 = v95 & 0x7FFFFFF;
        if ((_DWORD)v102)
        {
          v103 = 32 * v102;
          do
          {
            v104 = &v101[v103];
            if (*(_QWORD *)&v101[v103 - 32])
            {
              **((_QWORD **)v104 - 2) = *((_QWORD *)v104 - 3);
              v105 = *((_QWORD *)v104 - 3);
              if (v105)
                *(_QWORD *)(v105 + 16) = *((_QWORD *)v104 - 2);
            }
            v103 -= 32;
          }
          while (v103);
        }
        operator delete(v101);
      }
      else
      {
        v96 = v95 & 0x7FFFFFF;
        if ((_DWORD)v96)
        {
          v97 = v115 - 88;
          v98 = -32 * v96;
          do
          {
            if (*(_QWORD *)v97)
            {
              **((_QWORD **)v97 + 2) = *((_QWORD *)v97 + 1);
              v99 = *((_QWORD *)v97 + 1);
              if (v99)
                *(_QWORD *)(v99 + 16) = *((_QWORD *)v97 + 2);
            }
            v97 -= 32;
            v98 += 32;
          }
          while (v98);
        }
        v100 = (char *)(v94 - 32 * v96);
        if (v95 < 0)
          v100 = &v100[-*((_QWORD *)v100 - 1) - 8];
      }
      operator delete(v100);
      v66 = v117;
      if (v118 == v117)
        goto LABEL_132;
    }
    v68 = ***(_QWORD ***)v67;
    v69 = *(_QWORD *)(v68 + 152);
    v70 = *(unsigned int *)(v68 + 168);
    if ((_DWORD)v70)
    {
      LODWORD(v71) = (v70 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      v72 = (uint64_t *)(v69 + 16 * v71);
      v73 = *v72;
      if (*v72 == v67)
        goto LABEL_100;
      v74 = 1;
      while (v73 != -4096)
      {
        v75 = v71 + v74++;
        v71 = v75 & (v70 - 1);
        v73 = *(_QWORD *)(v69 + 16 * v71);
        if (v73 == v67)
        {
          v72 = (uint64_t *)(v69 + 16 * v71);
          goto LABEL_100;
        }
      }
    }
    v72 = (uint64_t *)(v69 + 16 * v70);
LABEL_100:
    v76 = *((unsigned int *)v121 + 2);
    if ((_DWORD)v76)
    {
      v77 = (size_t *)v72[1];
      v78 = *((unsigned int *)v121 + 5);
      v79 = (unsigned __int8 *)v77 + v78;
      v80 = *v77;
      if (*v77)
      {
        v81 = 0;
        v82 = *v77;
        v83 = v79;
        do
        {
          v84 = *v83++;
          v81 = 33 * v81 + v84;
          --v82;
        }
        while (v82);
      }
      else
      {
        v81 = 0;
      }
      v85 = v76 - 1;
      v86 = *v121;
      v87 = *v121 + 8 * v76 + 8;
      v88 = 1;
      v89 = v81;
      while (1)
      {
        v90 = v89 & v85;
        v91 = *(_QWORD **)(v86 + 8 * v90);
        if (v91 != (_QWORD *)-8)
        {
          if (!v91)
            goto LABEL_113;
          if (*(_DWORD *)(v87 + 4 * v90) == v81 && v80 == *v91 && (!v80 || !memcmp(v79, (char *)v91 + v78, v80)))
            break;
        }
        v89 = v88 + v90;
        ++v88;
      }
      *(_QWORD *)(v86 + 8 * (int)v90) = -8;
      *(uint64_t *)((char *)v121 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v121 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_113;
  }
LABEL_132:
  sub_1C541FACC((uint64_t)v111, *((_QWORD *)v119 + 2), (uint64_t)v111);
}

void llvm::Module::dropAllReferences(llvm::Module *this)
{
  char *v2;
  uint64_t i;
  llvm::Function *v4;
  _QWORD *j;
  llvm::GlobalVariable *v6;
  _QWORD *k;
  char *v8;
  uint64_t m;
  uint64_t v10;
  uint64_t v11;

  v2 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v4 = (llvm::Function *)(i - 56);
    else
      v4 = 0;
    llvm::Function::dropAllReferences(v4);
  }
  for (j = (_QWORD *)*((_QWORD *)this + 2); j != (_QWORD *)((char *)this + 8); j = (_QWORD *)j[1])
  {
    if (j)
      v6 = (llvm::GlobalVariable *)(j - 7);
    else
      v6 = 0;
    llvm::GlobalVariable::dropAllReferences(v6);
  }
  for (k = (_QWORD *)*((_QWORD *)this + 6); k != (_QWORD *)((char *)this + 40); k = (_QWORD *)k[1])
  {
    if (k)
      v10 = (uint64_t)(k - 6);
    else
      v10 = 0;
    sub_1C541DB24(v10);
  }
  v8 = (char *)this + 56;
  for (m = *((_QWORD *)this + 8); (char *)m != v8; m = *(_QWORD *)(m + 8))
  {
    if (m)
      v11 = m - 56;
    else
      v11 = 0;
    sub_1C541DB24(v11);
  }
}

void llvm::Module::createRNG(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  size_t v15;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  const void *v20;
  size_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int128 v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = xmmword_1C677F680;
  if (a3 < 0x21)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, a3, 1);
  v8 = v25;
  if (a3)
  {
LABEL_3:
    memcpy((char *)v24 + v8, a2, a3);
    v8 = v25;
  }
LABEL_4:
  *(_QWORD *)&v25 = v8 + a3;
  v11 = *(_QWORD *)(a1 + 168);
  v10 = a1 + 168;
  v9 = v11;
  v12 = *(_BYTE *)(v10 + 23);
  v13 = v12;
  if (v12 >= 0)
    v9 = v10;
  v14 = v12 & 0x7F;
  if (v13 < 0)
    v14 = *(_QWORD *)(v10 + 8);
  v20 = 0;
  v21 = 0;
  v19[0] = v9;
  v19[1] = v14;
  v22 = v14;
  v23 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v19);
  v16 = v20;
  v15 = v21;
  v17 = v25;
  if (*((_QWORD *)&v25 + 1) >= v21 + (unint64_t)v25)
  {
    if (!v21)
      goto LABEL_11;
    goto LABEL_10;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, v21 + v25, 1);
  v17 = v25;
  if (v15)
  {
LABEL_10:
    memcpy((char *)v24 + v17, v16, v15);
    v17 = v25;
  }
LABEL_11:
  *(_QWORD *)&v25 = v17 + v15;
  v18 = (_QWORD *)operator new();
  *a4 = llvm::RandomNumberGenerator::RandomNumberGenerator(v18, (char *)v24, v25);
  if (v24 != v26)
    free(v24);
}

uint64_t llvm::Module::getNamedValue(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  return sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
}

uint64_t llvm::Module::getNumNamedValues(llvm::Module *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 14) + 12);
}

uint64_t llvm::Module::getMDKindID(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  return llvm::LLVMContext::getMDKindID(*a1, a2, a3);
}

void llvm::Module::getMDKindNames(uint64_t *a1, _QWORD *a2)
{
  llvm::LLVMContext::getMDKindNames(*a1, a2);
}

void llvm::Module::getOperandBundleTags(uint64_t **a1, _QWORD *a2)
{
  llvm::LLVMContextImpl::getOperandBundleTags(**a1, a2);
}

llvm::PointerType *llvm::Module::getOrInsertFunction(uint64_t a1, unsigned __int8 *a2, unint64_t a3, llvm::PointerType *a4, uint64_t a5)
{
  uint64_t v10;
  llvm::Constant **v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  char *v14;
  uint64_t *v15;
  llvm::ValueSymbolTable *v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[4];
  __int16 v21;

  v10 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (v10)
  {
    v11 = (llvm::Constant **)v10;
    v12 = (llvm::Constant *)llvm::PointerType::get(a4, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v10 + 8) >> 8));
    if (*v11 != v12)
      sub_1C537D3B8((llvm *)0x31, (uint64_t)v11, v12, 0);
  }
  else
  {
    v13 = (llvm::Type *)*(unsigned int *)(a1 + 284);
    v21 = 261;
    v20[0] = a2;
    v20[1] = a3;
    v14 = (char *)operator new(0x80uLL);
    *((_DWORD *)v14 + 7) = *((_DWORD *)v14 + 7) & 0x38000000 | 0x40000000;
    *(_QWORD *)v14 = 0;
    llvm::Function::Function((uint64_t *)v14 + 1, a4, 0, v13, (uint64_t)v20, 0);
    if ((v14[41] & 0x20) == 0)
      *((_QWORD *)v14 + 15) = a5;
    v15 = (uint64_t *)(a1 + 24);
    *((_QWORD *)v14 + 6) = a1;
    if ((v14[31] & 0x10) != 0)
    {
      v16 = *(llvm::ValueSymbolTable **)(a1 + 112);
      if (v16)
        llvm::ValueSymbolTable::reinsertValue(v16, (llvm::Value *)(v14 + 8));
    }
    v17 = *v15;
    *((_QWORD *)v14 + 8) = *v15;
    *((_QWORD *)v14 + 9) = v15;
    v18 = v14 + 64;
    *(_QWORD *)(v17 + 8) = v18;
    *v15 = (uint64_t)v18;
  }
  return a4;
}

llvm::PointerType *llvm::Module::getOrInsertFunction(uint64_t a1, unsigned __int8 *a2, unint64_t a3, llvm::PointerType *a4)
{
  return llvm::Module::getOrInsertFunction(a1, a2, a3, a4, 0);
}

uint64_t llvm::Module::getFunction(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
  }
  return result;
}

uint64_t llvm::Module::getGlobalVariable(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char a4)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (!result || *(_BYTE *)(result + 16) != 3 || (a4 & 1) == 0 && (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1)
    return 0;
  return result;
}

llvm::UndefValue *llvm::Module::getOrInsertGlobal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, llvm::PointerType *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  llvm::Constant *v11;
  unsigned int v12;
  llvm::Constant *v13;

  v9 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (!v9 || (v10 = v9, *(_BYTE *)(v9 + 16) != 3))
    v10 = a5(a6);
  v11 = *(llvm::Constant **)v10;
  v12 = *(_DWORD *)(*(_QWORD *)v10 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**((_QWORD **)v11 + 2) + 8);
  v13 = (llvm::Constant *)llvm::PointerType::get(a4, (llvm::Type *)(v12 >> 8));
  if (v11 == v13 || *(llvm::Constant **)v10 == v13)
    return (llvm::UndefValue *)v10;
  else
    return sub_1C537D3B8((llvm *)0x31, v10, v13, 0);
}

uint64_t llvm::Module::getNamedIFunc(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 2)
      return 0;
  }
  return result;
}

uint64_t llvm::Module::getNamedMetadata(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  _QWORD v23[34];

  v23[32] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = xmmword_1C64638F0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v23;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *(const char **)a2;
        if (*(_QWORD *)a2)
          v3 = strlen(*(const char **)a2);
        else
          v3 = 0;
        goto LABEL_6;
      case 4:
        v18 = *(const char **)a2;
        v19 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v19 >= 0)
          v4 = *(const char **)a2;
        else
          v4 = *(const char **)v18;
        if (v19 >= 0)
          v3 = v19 & 0x7F;
        else
          v3 = *((_QWORD *)v18 + 1);
        goto LABEL_6;
      case 5:
        v4 = *(const char **)a2;
        v3 = *(_QWORD *)(a2 + 8);
LABEL_6:
        v5 = v23;
        break;
      default:
        goto LABEL_23;
    }
  }
  else
  {
LABEL_23:
    llvm::Twine::toVector(a2, (uint64_t)&v21);
    v5 = v21;
    v3 = v22;
    v4 = (const char *)v21;
  }
  v6 = *(unsigned int *)(a1 + 248);
  v20 = v5;
  if ((_DWORD)v6)
  {
    v7 = 0;
    if (v3)
    {
      v8 = v3;
      v9 = v4;
      do
      {
        v10 = *v9++;
        v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    v11 = *(_QWORD *)(a1 + 240);
    v12 = 1;
    v13 = v7;
    while (1)
    {
      v14 = v13 & (v6 - 1);
      v15 = *(_QWORD **)(v11 + 8 * v14);
      if (v15 != (_QWORD *)-8)
      {
        if (!v15)
          goto LABEL_19;
        if (*(_DWORD *)(v11 + 8 * v6 + 8 + 4 * v14) == v7
          && v3 == *v15
          && (!v3 || !memcmp(v4, (char *)v15 + *(unsigned int *)(a1 + 260), v3)))
        {
          break;
        }
      }
      v13 = v12 + v14;
      ++v12;
    }
    if ((_DWORD)v14 != -1 && (int)v14 != v6 || (v16 = 0, (int)v14 != v6) && (_DWORD)v14 != -1)
      v16 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * (int)v14) + 8);
  }
  else
  {
LABEL_19:
    v16 = 0;
  }
  if (v20 != v23)
    free(v20);
  return v16;
}

uint64_t llvm::Module::getOrInsertNamedMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  size_t *v20;
  char *v21;
  _QWORD **i;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v32[4];
  __int16 v33;

  v5 = *(_DWORD *)(a1 + 248);
  if (!v5)
  {
    *(_DWORD *)(a1 + 252) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    v30 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v30)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v30[16] = 2;
    *(_QWORD *)(a1 + 240) = v30;
    v5 = 16;
    *(_DWORD *)(a1 + 248) = 16;
  }
  v6 = 0;
  if (a3)
  {
    v7 = a3;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(a1 + 240);
  v11 = v5 - 1;
  v12 = v10 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && a3 == *v17
           && (!a3 || !memcmp(a2, (char *)v17 + *(unsigned int *)(a1 + 260), a3)))
    {
      goto LABEL_17;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_17:
  if (v17)
  {
    if (v17 != (_QWORD *)-8)
      goto LABEL_25;
    --*(_DWORD *)(a1 + 256);
  }
  v19 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v20 = v19;
  v21 = (char *)(v19 + 2);
  if (a3)
    memcpy(v19 + 2, a2, a3);
  v21[a3] = 0;
  *v20 = a3;
  v20[1] = 0;
  *(_QWORD *)(v10 + 8 * v16) = v20;
  ++*(_DWORD *)(a1 + 252);
  for (i = (_QWORD **)(*(_QWORD *)(a1 + 240)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 240), v16)); ; ++i)
  {
    v17 = *i;
    if (*i && v17 + 1 != 0)
      break;
  }
LABEL_25:
  result = v17[1];
  if (!result)
  {
    v25 = (_QWORD *)operator new();
    v33 = 261;
    v32[0] = a2;
    v32[1] = a3;
    *v25 = 0;
    v25[1] = 0;
    llvm::Twine::str((llvm::Twine *)v32, v25 + 2);
    v25[5] = 0;
    v26 = (_QWORD *)operator new();
    *v26 = v26 + 2;
    v26[1] = 0x400000000;
    v25[6] = v26;
    v17[1] = v25;
    v25[5] = a1;
    v28 = *(_QWORD *)(a1 + 72);
    v27 = (_QWORD *)(a1 + 72);
    v29 = (_QWORD *)v17[1];
    *v29 = v28;
    v29[1] = v27;
    *(_QWORD *)(v28 + 8) = v29;
    *v27 = v29;
    return v17[1];
  }
  return result;
}

void llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  uint64_t *v3;
  char v4;
  int v5;
  unsigned __int8 *v6;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = (uint64_t *)((char *)this + 240);
  v4 = *((_BYTE *)a2 + 39);
  v5 = v4;
  if (v4 >= 0)
    v6 = (unsigned __int8 *)a2 + 16;
  else
    v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *((_QWORD *)a2 + 3);
  sub_1C541CD44(v3, v6, v8);
  v10 = *(_QWORD *)a2;
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  *v9 = *(_QWORD *)a2;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  llvm::NamedMDNode::~NamedMDNode(a2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C541CD44(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  size_t *v19;
  size_t v20;
  int v21;
  size_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;

  v3 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v3)
    return 0;
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = __s1;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = v3 - 1;
  v11 = *a1;
  v12 = *a1 + 8 * v3 + 8;
  v13 = 1;
  v14 = v6;
  while (1)
  {
    v15 = v14 & v10;
    v16 = *(_QWORD **)(v11 + 8 * v15);
    if (v16 != (_QWORD *)-8)
    {
      if (!v16)
        return 0;
      if (*(_DWORD *)(v12 + 4 * v15) == v6 && __n == *v16)
      {
        v17 = *((unsigned int *)a1 + 5);
        if (!__n || !memcmp(__s1, (char *)v16 + v17, __n))
          break;
      }
    }
    v14 = v13 + v15;
    ++v13;
  }
  if ((_DWORD)v15 == -1 || (int)v15 == v3)
    return 0;
  v19 = *(size_t **)(v11 + 8 * (int)v15);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = *v19;
    v23 = (unsigned __int8 *)v19 + v17;
    do
    {
      v24 = *v23++;
      v21 = 33 * v21 + v24;
      --v22;
    }
    while (v22);
  }
  else
  {
    v21 = 0;
  }
  v25 = 1;
  v26 = v21;
  while (1)
  {
    v27 = v26 & v10;
    v28 = *(_QWORD **)(v11 + 8 * v27);
    if (v28 != (_QWORD *)-8)
    {
      if (!v28)
        goto LABEL_28;
      if (*(_DWORD *)(v12 + 4 * v27) == v21
        && v20 == *v28
        && (!v20 || !memcmp((char *)v19 + v17, (char *)v28 + v17, v20)))
      {
        break;
      }
    }
    v26 = v25 + v27;
    ++v25;
  }
  *(_QWORD *)(v11 + 8 * (int)v27) = -8;
  *(uint64_t *)((char *)a1 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
LABEL_28:
  MEMORY[0x1CAA32FB4](v19, 8);
  return 1;
}

uint64_t llvm::Module::isValidModFlagBehavior(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;

  if (result)
  {
    if (*(_BYTE *)result == 1)
    {
      v2 = *(_QWORD *)(result + 128);
      if (*(_BYTE *)(v2 + 16) == 16)
      {
        v4 = (_QWORD *)(v2 + 24);
        v5 = *(_DWORD *)(v2 + 32);
        if (v5 < 0x41)
          goto LABEL_7;
        if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v2 + 24)) <= 0x40)
        {
          v4 = (_QWORD *)*v4;
LABEL_7:
          if ((unint64_t)(*v4 - 9) >= 0xFFFFFFFFFFFFFFF8)
          {
            *a2 = *v4;
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::Module::isValidModuleFlag(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < 3)
    return 0;
  result = llvm::Module::isValidModFlagBehavior(*(_QWORD *)(a1 - 8 * v4), a2);
  if ((_DWORD)result)
  {
    v9 = a1 - 8 * *(unsigned int *)(a1 + 8);
    v10 = *(_BYTE **)(v9 + 8);
    if (!v10 || *v10)
      return 0;
    *a3 = v10;
    *a4 = *(_QWORD *)(v9 + 16);
    return 1;
  }
  return result;
}

unint64_t llvm::Module::getModuleFlagsMetadata(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];
  __int16 v15;

  v14[0] = "llvm.module.flags";
  v15 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)v14);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6);
        v13 = 0;
        v11 = 0;
        v12 = 0;
        result = llvm::Module::isValidModuleFlag(v8, &v13, &v12, &v11);
        if ((_DWORD)result)
        {
          LODWORD(v14[0]) = v13;
          v14[1] = v12;
          v14[2] = v11;
          result = sub_1C4926708(a2, (unint64_t)v14, 1);
          v9 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v10 = *(_OWORD *)result;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + 16);
          *(_OWORD *)v9 = v10;
          ++*(_DWORD *)(a2 + 8);
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *this)
{
  const char *v2;
  __int16 v3;

  v2 = "llvm.module.flags";
  v3 = 259;
  return llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v2);
}

uint64_t llvm::Module::getModuleFlag(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[4];
  __int16 v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[25];

  v29[24] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = 0x800000000;
  v25[0] = "llvm.module.flags";
  v26 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v25);
  if (NamedMetadata)
  {
    v6 = NamedMetadata;
    v7 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)(**(_QWORD **)(v6 + 48) + v8);
        v24 = 0;
        v22 = 0;
        v23 = 0;
        if (llvm::Module::isValidModuleFlag(v10, &v24, &v23, &v22))
        {
          LODWORD(v25[0]) = v24;
          v25[1] = v23;
          v25[2] = v22;
          v11 = sub_1C4926708((uint64_t)&v27, (unint64_t)v25, 1);
          v12 = (char *)v27 + 24 * v28;
          v13 = *(_OWORD *)v11;
          *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
          *(_OWORD *)v12 = v13;
          LODWORD(v28) = v28 + 1;
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  v14 = v27;
  if ((_DWORD)v28)
  {
    v15 = (uint64_t *)((char *)v27 + 16);
    v16 = 24 * v28;
    while (1)
    {
      v17 = *(uint64_t **)(*(v15 - 1) + 8);
      v19 = *v17;
      v18 = v17 + 3;
      if (a3 == v19 && (!a3 || !memcmp(a2, v18, a3)))
        break;
      v15 += 3;
      v16 -= 24;
      if (!v16)
        goto LABEL_11;
    }
    v20 = *v15;
  }
  else
  {
LABEL_11:
    v20 = 0;
  }
  if (v14 != v29)
    free(v14);
  return v20;
}

_QWORD *llvm::Module::addModuleFlag(uint64_t **a1, llvm::Type *a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  llvm::Value **v9;
  llvm::Value *v10;
  uint64_t inserted;
  unsigned __int8 *Impl;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *result;
  unsigned __int8 *v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v9 = llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1960), a2, 0);
  v18[0] = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v9, v10);
  v18[1] = llvm::MDString::get(*a1, a3, a4);
  v18[2] = a5;
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, "llvm.module.flags", 0x11uLL);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*a1, v18, 3, 0, 1);
  v17 = Impl;
  v13 = *(_QWORD *)(inserted + 48);
  v14 = *(unsigned int *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
    return (_QWORD *)sub_1C5419FD8(v13, &v17);
  v15 = Impl;
  result = (_QWORD *)(*(_QWORD *)v13 + 8 * v14);
  *result = v15;
  if (v15)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v15, 2);
    LODWORD(v14) = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(v13 + 8) = v14 + 1;
  return result;
}

_QWORD *llvm::Module::addModuleFlag(uint64_t **a1, llvm::Type *a2, unsigned __int8 *a3, size_t a4, llvm::Type *a5)
{
  llvm::Value **v9;
  llvm::Value *v10;
  _QWORD *v11;

  v9 = llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1960), a5, 0);
  v11 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v9, v10);
  return llvm::Module::addModuleFlag(a1, a2, a3, a4, (uint64_t)v11);
}

_QWORD *llvm::Module::addModuleFlag(llvm::Module *this, llvm::MDNode *a2)
{
  uint64_t inserted;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  unsigned __int8 *v7;

  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)this, "llvm.module.flags", 0x11uLL);
  v7 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(inserted + 48);
  v5 = *(unsigned int *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
    return (_QWORD *)sub_1C5419FD8(*(_QWORD *)(inserted + 48), &v7);
  result = (_QWORD *)(*(_QWORD *)v4 + 8 * v5);
  *result = a2;
  if (a2)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, (unsigned __int8 *)a2, 2);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(v4 + 8) = v5 + 1;
  return result;
}

void llvm::Module::setDataLayout(uint64_t a1, const void *a2, unint64_t a3)
{
  llvm::DataLayout::reset(a1 + 272, a2, a3);
}

uint64_t llvm::Module::setDataLayout(llvm::Module *this, const llvm::DataLayout *a2)
{
  return sub_1C48815D8((uint64_t)this + 272, (uint64_t)a2);
}

uint64_t llvm::Module::getDataLayout(llvm::Module *this)
{
  return (uint64_t)this + 272;
}

uint64_t llvm::Module::debug_compile_units_iterator::operator*(unsigned int *a1)
{
  return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 48) + 8 * a1[2]);
}

uint64_t llvm::Module::debug_compile_units_iterator::operator->(unsigned int *a1)
{
  return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 48) + 8 * a1[2]);
}

unsigned int *llvm::Module::debug_compile_units_iterator::SkipNoDebugCUs(unsigned int *this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;

  if (*(_QWORD *)this)
  {
    v1 = this[2];
    v2 = *(uint64_t **)(*(_QWORD *)this + 48);
    v3 = *((_DWORD *)v2 + 2);
    if (v1 < v3)
    {
      v4 = *v2;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(v4 + 8 * v1) + 36))
          break;
        this[2] = ++v1;
      }
      while (v1 < v3);
    }
  }
  return this;
}

uint64_t llvm::Module::global_objects@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 32);
  a2[1] = v2;
  a2[2] = this + 24;
  a2[3] = this + 8;
  a2[4] = this + 24;
  a2[5] = this + 8;
  a2[6] = this + 24;
  a2[7] = this + 8;
  return this;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 32);
  a2[1] = v2;
  a2[2] = this + 24;
  a2[3] = this + 8;
  a2[4] = this + 24;
  a2[5] = this + 8;
  a2[6] = this + 24;
  a2[7] = this + 8;
  return this;
}

_QWORD *llvm::Module::global_values@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this[2];
  v3 = this[6];
  v4 = this[8];
  *a2 = this[4];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = this + 3;
  a2[5] = this + 1;
  a2[6] = this + 5;
  a2[7] = this + 7;
  a2[8] = this + 3;
  a2[9] = this + 1;
  a2[10] = this + 5;
  a2[11] = this + 7;
  a2[12] = this + 3;
  a2[13] = this + 1;
  a2[14] = this + 5;
  a2[15] = this + 7;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this[2];
  v3 = this[6];
  v4 = this[8];
  *a2 = this[4];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = this + 3;
  a2[5] = this + 1;
  a2[6] = this + 5;
  a2[7] = this + 7;
  a2[8] = this + 3;
  a2[9] = this + 1;
  a2[10] = this + 5;
  a2[11] = this + 7;
  a2[12] = this + 3;
  a2[13] = this + 1;
  a2[14] = this + 5;
  a2[15] = this + 7;
  return this;
}

uint64_t llvm::Module::setMaterializer(llvm::Module *this, llvm::GVMaterializer *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = a2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::Module::materializeAll@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 160);
  if (v2)
  {
    *(_QWORD *)(this + 160) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t llvm::Module::materializeMetadata@<X0>(llvm::Module *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *a2 = 0;
  return result;
}

_QWORD *llvm::Module::getIdentifiedStructTypes@<X0>(llvm::Module *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *__p;
  char *v18;
  uint64_t v19;
  char v20;

  v4 = *((_QWORD *)this + 20);
  if (v4)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 48))(a2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v18 = 0;
  v19 = 0;
  __p = 0;
  v20 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v6, this, 1);
  sub_1C541FE8C(a2, (char *)__p, v18, (v18 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v18 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v14, 8);
  MEMORY[0x1CAA32FB4](v11, 8);
  MEMORY[0x1CAA32FB4](v8, 8);
  return (_QWORD *)MEMORY[0x1CAA32FB4](v6[0], 8);
}

void llvm::Module::getUniqueIntrinsicName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, int a4@<W3>, size_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  int v12;
  size_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  size_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  _QWORD *i;
  unsigned int v33;
  const char *j;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  llvm::StringMapImpl *v44;
  _QWORD *v45;
  size_t v46;
  uint64_t v47;
  unsigned __int8 *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  unsigned __int8 *v53;
  size_t v54;
  const char *v55;
  __int16 v56;
  unsigned __int8 **v57;
  size_t v58;
  unint64_t v59;
  __int16 v60;

  LODWORD(v57) = a4;
  v58 = a5;
  LODWORD(v59) = 0;
  v47 = a1 + 736;
  sub_1C6244944((uint64_t)&v51, a1 + 736, (uint64_t)&v57, &v59);
  if (!(_BYTE)v52)
  {
    v27 = *(unsigned int *)(v51 + 16);
    v53 = a2;
    v54 = a3;
    v55 = ".";
    v56 = 773;
    v57 = &v53;
    v58 = a3;
    v59 = v27;
    v60 = 2050;
    llvm::Twine::str((llvm::Twine *)&v57, (_QWORD *)a6);
    return;
  }
  v11 = *(_DWORD *)(a1 + 712);
  if (!v11)
  {
    *(_QWORD *)(a1 + 716) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *(_QWORD *)(a1 + 704) = v28;
    v11 = 16;
    *(_DWORD *)(a1 + 712) = 16;
  }
  v49 = a2;
  v44 = (llvm::StringMapImpl *)(a1 + 704);
  v46 = a5;
  v12 = 0;
  if (a3)
  {
    v13 = a3;
    do
    {
      v14 = *a2++;
      v12 = 33 * v12 + v14;
      --v13;
    }
    while (v13);
  }
  v50 = a1;
  v15 = *(_QWORD *)(a1 + 704);
  v16 = v11 - 1;
  v17 = v15 + 8 * v11 + 8;
  v18 = -1;
  v19 = 1;
  v20 = v12;
  while (1)
  {
    v21 = v20 & v16;
    v22 = *(_QWORD *)(v15 + 8 * v21);
    if (!v22)
      break;
    if (v22 == -8)
    {
      if (v18 == -1)
        v18 = v20 & v16;
    }
    else if (*(_DWORD *)(v17 + 4 * v21) == v12
           && a3 == *(_QWORD *)v22
           && (!a3 || !memcmp(v49, (const void *)(v22 + *(unsigned int *)(v50 + 724)), a3)))
    {
      goto LABEL_21;
    }
    v20 = v19 + v21;
    ++v19;
  }
  v23 = v18;
  if (v18 == -1)
  {
    v23 = v21;
    v21 = v21;
  }
  else
  {
    v21 = v18;
  }
  *(_DWORD *)(v17 + 4 * v23) = v12;
  v22 = *(_QWORD *)(v15 + 8 * v21);
LABEL_21:
  v24 = (unint64_t *)(v15 + 8 * v21);
  if (v22)
  {
    v25 = v46;
    v26 = v49;
    if (v22 != -8)
    {
      v45 = (_QWORD *)(v15 + 8 * v21);
      goto LABEL_37;
    }
    --*(_DWORD *)(v50 + 720);
  }
  v29 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v15 = (unint64_t)v29;
  v30 = v29 + 16;
  v25 = v46;
  v26 = v49;
  if (a3)
    memcpy(v29 + 16, v49, a3);
  v30[a3] = 0;
  *(_QWORD *)v15 = a3;
  *(_DWORD *)(v15 + 8) = 0;
  *v24 = v15;
  ++*(_DWORD *)(v50 + 716);
  for (i = (_QWORD *)(*(_QWORD *)(v50 + 704) + 8 * llvm::StringMapImpl::RehashTable(v44, v21)); ; ++i)
  {
    v22 = *i;
    if (*i && v22 != -8)
      break;
  }
  v45 = i;
LABEL_37:
  v33 = *(_DWORD *)(v22 + 8);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  for (j = "."; ; j = v35)
  {
    v53 = v26;
    v54 = a3;
    v35 = j;
    v55 = j;
    v56 = 773;
    v15 = v15 & 0xFFFFFFFF00000000 | v33;
    v57 = &v53;
    v58 = a3;
    v59 = v15;
    v60 = 2050;
    llvm::Twine::str((llvm::Twine *)&v57, &v51);
    if (*(char *)(a6 + 23) < 0)
      operator delete(*(void **)a6);
    *(_OWORD *)a6 = v51;
    v36 = v52;
    *(_QWORD *)(a6 + 16) = v52;
    v37 = HIBYTE(v36);
    v38 = (v37 & 0x80u) != 0;
    v39 = (v37 & 0x80u) == 0 ? (unsigned __int8 *)a6 : *(unsigned __int8 **)a6;
    v40 = v37 & 0x7F;
    v41 = v38 ? *(_QWORD *)(a6 + 8) : v40;
    v42 = sub_1C4FB7E80(*(uint64_t **)(v50 + 112), v39, v41);
    if (!v42)
      break;
    if (*(_BYTE *)(*(_QWORD *)(v42 + 24) + 8) == 14)
      v43 = *(_QWORD *)(v42 + 24);
    else
      v43 = 0;
    LODWORD(v53) = a4;
    v54 = v43;
    LODWORD(v55) = v33;
    sub_1C6244944((uint64_t)&v57, v47, (uint64_t)&v53, &v55);
    if (v43 == v25)
    {
      *((_DWORD *)v57 + 4) = v33;
      goto LABEL_53;
    }
    ++v33;
    v26 = v49;
  }
  LODWORD(v57) = a4;
  v58 = v25;
  *(_DWORD *)(sub_1C6244C84(v47, (uint64_t)&v57) + 16) = v33;
LABEL_53:
  *(_DWORD *)(*v45 + 8) = v33 + 1;
}

uint64_t sub_1C541DB24(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;

  v1 = *(_DWORD *)(result + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(_QWORD *)(result - 8);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      return result;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = result - 32 * v2;
    if (!v2)
      return result;
  }
  v4 = 32 * v2;
  v5 = (_QWORD **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **v5 = *(v5 - 1);
      v6 = (uint64_t)*(v5 - 1);
      if (v6)
        *(_QWORD *)(v6 + 16) = *v5;
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return result;
}

uint64_t llvm::Module::getNumberRegisterParameters(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 21)
      {
        v4 = v3[3];
        v5 = v3[4];
        v6 = *(_QWORD *)((char *)v3 + 37);
        v7 = v4 == 0x73696765526D754ELL && v5 == 0x6D61726150726574;
        if (v7 && v6 == 0x73726574656D6172)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_15;
    }
    v9 = *v1;
  }
  else
  {
LABEL_15:
    v9 = 0;
  }
  if (v13 != v15)
  {
    free(v13);
    if (v9)
      goto LABEL_18;
    return 0;
  }
  if (!v9)
    return 0;
LABEL_18:
  v10 = *(_QWORD *)(v9 + 128);
  v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = *(unsigned int **)v11;
  return *v11;
}

uint64_t llvm::Module::getDwarfVersion(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 13)
      {
        v4 = v3[3];
        v5 = *(_QWORD *)((char *)v3 + 29);
        if (v4 == 0x6556206672617744 && v5 == 0x6E6F697372655620)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9;
}

BOOL llvm::Module::isDwarf64(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 7)
      {
        v6 = *(_DWORD *)(v3 + 24);
        v7 = *(_DWORD *)(v3 + 27);
        if (v6 == 1380013892 && v7 == 875972178)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_5;
    }
    v4 = *v1;
  }
  else
  {
LABEL_5:
    v4 = 0;
  }
  if (v13 != v15)
    free(v13);
  if (!v4)
    return 0;
  v9 = *(_QWORD *)(v4 + 128);
  v10 = (llvm::APInt *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 32);
  if (v11 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v10) == v11 - 1;
  else
    return *(_QWORD *)v10 == 1;
}

uint64_t llvm::Module::getCodeViewFlag(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  void *v8;
  uint64_t v9;
  _QWORD v10[25];

  v10[24] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v8);
  if ((_DWORD)v9)
  {
    v1 = (uint64_t *)((char *)v8 + 16);
    v2 = 24 * v9;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 8 && v3[3] == 0x7765695665646F43)
        break;
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_8;
    }
    v4 = *v1;
  }
  else
  {
LABEL_8:
    v4 = 0;
  }
  if (v8 != v10)
  {
    free(v8);
    if (v4)
      goto LABEL_11;
    return 0;
  }
  if (!v4)
    return 0;
LABEL_11:
  v5 = *(_QWORD *)(v4 + 128);
  v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(unsigned int **)v6;
  return *v6;
}

uint64_t llvm::Module::getPICLevel(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 9)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(unsigned __int8 *)(v3 + 32);
        if (v4 == 0x6576654C20434950 && v5 == 108)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9;
}

uint64_t llvm::Module::getPIELevel(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 9)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(unsigned __int8 *)(v3 + 32);
        if (v4 == 0x6576654C20454950 && v5 == 108)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9;
}

uint64_t llvm::Module::getCodeModel(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 10)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(unsigned __int16 *)(v3 + 32);
        if (v4 == 0x646F4D2065646F43 && v5 == 27749)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9 | 0x100000000;
}

uint64_t llvm::Module::getProfileSummary(llvm::Module *this, int a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[25];

  v18[24] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v16 = v18;
    v17 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v16);
    v2 = v16;
    if ((_DWORD)v17)
    {
      v3 = (uint64_t *)((char *)v16 + 16);
      v6 = 24 * v17;
      do
      {
        v7 = *(_QWORD **)(*(v3 - 1) + 8);
        if (*v7 == 16)
        {
          v14 = v7[3];
          v13 = v7[4];
          if (v14 == 0x6C69666F72505343 && v13 == 0x7972616D6D755365)
            goto LABEL_26;
        }
        v3 += 3;
        v6 -= 24;
      }
      while (v6);
    }
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  v16 = v18;
  v17 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v16);
  v2 = v16;
  if (!(_DWORD)v17)
    goto LABEL_11;
  v3 = (uint64_t *)((char *)v16 + 16);
  v4 = 24 * v17;
  while (1)
  {
    v5 = *(_QWORD **)(*(v3 - 1) + 8);
    if (*v5 == 14)
    {
      v10 = v5[3];
      v11 = *(_QWORD *)((char *)v5 + 30);
      if (v10 == 0x53656C69666F7250 && v11 == 0x7972616D6D755365)
        break;
    }
    v3 += 3;
    v4 -= 24;
    if (!v4)
      goto LABEL_11;
  }
LABEL_26:
  v8 = *v3;
LABEL_12:
  if (v2 != v18)
    free(v2);
  return v8;
}

BOOL llvm::Module::getSemanticInterposition(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 21)
      {
        v4 = v3[3];
        v5 = v3[4];
        v6 = *(_QWORD *)((char *)v3 + 37);
        v7 = v4 == 0x6369746E616D6553 && v5 == 0x736F707265746E49;
        if (v7 && v6 == 0x6E6F697469736F70)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_15;
    }
    v9 = *v1;
  }
  else
  {
LABEL_15:
    v9 = 0;
  }
  if (v13 != v15)
  {
    free(v13);
    if (v9)
      goto LABEL_18;
    return 0;
  }
  if (!v9)
    return 0;
LABEL_18:
  v10 = *(_QWORD *)(v9 + 128);
  v11 = (_QWORD *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = (_QWORD *)*v11;
  return *v11 != 0;
}

BOOL llvm::Module::getRtLibUseGOT(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 11)
      {
        v4 = v3[3];
        v5 = *(_QWORD *)((char *)v3 + 27);
        if (v4 == 0x65735562694C7452 && v5 == 0x544F476573556269)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (_QWORD *)*v9;
  return *v9 != 0;
}

uint64_t llvm::Module::getUwtable(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 7)
      {
        v4 = *(_DWORD *)(v3 + 24);
        v5 = *(_DWORD *)(v3 + 27);
        if (v4 == 1635022709 && v5 == 1701601889)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9;
}

uint64_t llvm::Module::getFramePointer(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v11);
  if ((_DWORD)v12)
  {
    v1 = (uint64_t *)((char *)v11 + 16);
    v2 = 24 * v12;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 13)
      {
        v4 = v3[3];
        v5 = *(_QWORD *)((char *)v3 + 29);
        if (v4 == 0x6F702D656D617266 && v5 == 0x7265746E696F702DLL)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_12;
    }
    v7 = *v1;
  }
  else
  {
LABEL_12:
    v7 = 0;
  }
  if (v11 != v13)
  {
    free(v11);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  if (!v7)
    return 0;
LABEL_15:
  v8 = *(_QWORD *)(v7 + 128);
  v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  return *v9;
}

uint64_t llvm::Module::getStackProtectorGuardReg(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 25)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(_QWORD *)(v3 + 32);
        v6 = *(_QWORD *)(v3 + 40);
        v7 = *(unsigned __int8 *)(v3 + 48);
        v8 = v4 == 0x72702D6B63617473 && v5 == 0x2D726F746365746FLL;
        v9 = v8 && v6 == 0x65722D6472617567;
        if (v9 && v7 == 103)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_18;
    }
    v11 = *v1;
  }
  else
  {
LABEL_18:
    v11 = 0;
  }
  if (v13 == v15)
  {
    if (!v11)
      return 0;
  }
  else
  {
    free(v13);
    if (!v11)
      return 0;
  }
  if (*(_BYTE *)v11)
    return 0;
  return *(_QWORD *)(v11 + 8) + 24;
}

uint64_t llvm::Module::getStackProtectorGuardOffset(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[25];

  v17[24] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v15);
  if ((_DWORD)v16)
  {
    v1 = (uint64_t *)((char *)v15 + 16);
    v2 = 24 * v16;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 28)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(_QWORD *)(v3 + 32);
        v6 = *(_QWORD *)(v3 + 40);
        v7 = *(_DWORD *)(v3 + 48);
        v8 = v4 == 0x72702D6B63617473 && v5 == 0x2D726F746365746FLL;
        v9 = v8 && v6 == 0x666F2D6472617567;
        if (v9 && v7 == 1952805734)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_18;
    }
    v11 = *v1;
  }
  else
  {
LABEL_18:
    v11 = 0;
  }
  if (v15 != v17)
  {
    free(v15);
    if (v11)
      goto LABEL_21;
    return 0x7FFFFFFFLL;
  }
  if (!v11)
    return 0x7FFFFFFFLL;
LABEL_21:
  if (*(_BYTE *)v11 != 1)
    return 0x7FFFFFFFLL;
  v12 = *(_QWORD *)(v11 + 128);
  if (*(_BYTE *)(v12 + 16) != 16)
    return 0x7FFFFFFFLL;
  v13 = *(_DWORD *)(v12 + 32);
  if (v13 > 0x40)
    return **(_QWORD **)(v12 + 24);
  else
    return (uint64_t)(*(_QWORD *)(v12 + 24) << -(char)v13) >> -(char)v13;
}

uint64_t llvm::Module::getOverrideStackAlignment(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 24)
      {
        v4 = v3[3];
        v5 = v3[4];
        v6 = v3[5];
        v7 = v4 == 0x656469727265766FLL && v5 == 0x612D6B636174732DLL;
        if (v7 && v6 == 0x746E656D6E67696CLL)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_15;
    }
    v9 = *v1;
  }
  else
  {
LABEL_15:
    v9 = 0;
  }
  if (v13 != v15)
  {
    free(v13);
    if (v9)
      goto LABEL_18;
    return 0;
  }
  if (!v9)
    return 0;
LABEL_18:
  if (*(_BYTE *)v9 != 1)
    return 0;
  v10 = *(_QWORD *)(v9 + 128);
  if (*(_BYTE *)(v10 + 16) != 16)
    return 0;
  v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = *(unsigned int **)v11;
  return *v11;
}

void sub_1C541EDC8(uint64_t a1, int a2, uint64_t **a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t v8;
  llvm::Type *v9;
  llvm::ConstantAggregateZero *v10;
  llvm::Value **Impl;
  llvm::Value *v12;
  _QWORD *v13;
  _DWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14[0] = a1;
  if (a1 < 0)
  {
    v8 = 2;
    v14[1] = HIDWORD(a1) & 0x7FFFFFFF;
    if (a2 < 0)
    {
      v8 = 3;
      v14[2] = a2 & 0x7FFFFFFF;
    }
  }
  else
  {
    v8 = 1;
  }
  v9 = (llvm::Type *)(4 * v8);
  llvm::ArrayType::get((llvm::ArrayType *)(**a3 + 1960), (llvm::Type *)v8);
  Impl = llvm::ConstantDataSequential::getImpl(v14, v9, v10);
  v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)Impl, v12);
  llvm::Module::addModuleFlag(a3, (llvm::Type *)2, a4, a5, (uint64_t)v13);
}

unint64_t llvm::Module::getSDKVersion(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[25];

  v11[24] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v9);
  if ((_DWORD)v10)
  {
    v1 = (uint64_t *)((char *)v9 + 16);
    v2 = 24 * v10;
    while (1)
    {
      v3 = *(_QWORD **)(*(v1 - 1) + 8);
      if (*v3 == 11)
      {
        v6 = v3[3];
        v7 = *(_QWORD *)((char *)v3 + 27);
        if (v6 == 0x73726556204B4453 && v7 == 0x6E6F697372655620)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_5;
    }
    v4 = *v1;
  }
  else
  {
LABEL_5:
    v4 = 0;
  }
  if (v9 != v11)
    free(v9);
  return sub_1C541EFD4(v4);
}

unint64_t sub_1C541EFD4(uint64_t a1)
{
  llvm::ConstantDataSequential *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  if (*(_BYTE *)a1 != 1)
    return 0;
  v1 = *(llvm::ConstantDataSequential **)(a1 + 128);
  if (!v1 || *((_BYTE *)v1 + 16) != 14 || !*(_DWORD *)(*(_QWORD *)v1 + 32))
    return 0;
  llvm::ConstantDataSequential::getElementAsInteger(*(llvm::ConstantDataSequential **)(a1 + 128));
  v3 = v2;
  if (*(_DWORD *)(*(_QWORD *)v1 + 32) >= 2u)
  {
    llvm::ConstantDataSequential::getElementAsInteger(v1);
    v5 = v3 | (v4 << 32);
    if (*(_DWORD *)(*(_QWORD *)v1 + 32) >= 3u)
      llvm::ConstantDataSequential::getElementAsInteger(v1);
    return v5 | 0x8000000000000000;
  }
  return v3;
}

void llvm::Module::getPtrAuthABIVersions(llvm::Module *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  void *__src;
  uint64_t v40;
  _BYTE v41[16];
  void *v42;
  uint64_t v43;
  _QWORD v44[25];

  v44[24] = *MEMORY[0x1E0C80C00];
  __src = v41;
  v40 = 0x200000000;
  v42 = v44;
  v43 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v42);
  if ((_DWORD)v43)
  {
    v3 = (uint64_t *)((char *)v42 + 16);
    v4 = 24 * v43;
    while (1)
    {
      v5 = *(_QWORD **)(*(v3 - 1) + 8);
      if (*v5 == 19)
      {
        v6 = v5[3];
        v7 = v5[4];
        v8 = *(_QWORD *)((char *)v5 + 35);
        v9 = v6 == 0x2E68747561727470 && v7 == 0x737265762D696261;
        if (v9 && v8 == 0x6E6F69737265762DLL)
          break;
      }
      v3 += 3;
      v4 -= 24;
      if (!v4)
        goto LABEL_15;
    }
    v11 = *v3;
  }
  else
  {
LABEL_15:
    v11 = 0;
  }
  if (v42 == v44)
  {
    if (!v11)
      goto LABEL_25;
  }
  else
  {
    free(v42);
    if (!v11)
      goto LABEL_25;
  }
  v12 = *(unsigned int *)(v11 + 8);
  if ((_DWORD)v12 == 1)
  {
    v13 = (_QWORD *)(*(_QWORD *)(v11 - 8) - 8 * *(unsigned int *)(*(_QWORD *)(v11 - 8) + 8));
    v14 = *(_QWORD *)(*v13 + 128);
    v15 = *(_DWORD *)(v14 + 32);
    if (v15 > 0x40)
      LODWORD(v14) = **(_DWORD **)(v14 + 24);
    else
      v14 = (uint64_t)(*(_QWORD *)(v14 + 24) << -(char)v15) >> -(char)v15;
    if (v14 == 0xFFFFFFFFLL)
    {
LABEL_25:
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 0x200000000;
      v19 = v40;
      v20 = &__src == (void **)a2;
      if (!(_DWORD)v40)
        goto LABEL_55;
      goto LABEL_47;
    }
    v24 = *(_QWORD *)(v13[1] + 128);
    v25 = *(_DWORD *)(v24 + 32);
    if (v25 > 0x40)
      v26 = **(_QWORD **)(v24 + 24);
    else
      v26 = (uint64_t)(*(_QWORD *)(v24 + 24) << -(char)v25) >> -(char)v25;
    v35 = v14 | ((unint64_t)(v26 != 0) << 32);
    v27 = v40;
  }
  else
  {
    v16 = (_QWORD *)(*(_QWORD *)(v11 - 8 * v12) - 8 * *(unsigned int *)(*(_QWORD *)(v11 - 8 * v12) + 8));
    v17 = *(_QWORD *)(*v16 + 128);
    v18 = *(_DWORD *)(v17 + 32);
    if (v18 > 0x40)
      LODWORD(v17) = **(_DWORD **)(v17 + 24);
    else
      v17 = (uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v18) >> -(char)v18;
    v21 = *(_QWORD *)(v16[1] + 128);
    v22 = *(_DWORD *)(v21 + 32);
    if (v22 > 0x40)
      v23 = **(_QWORD **)(v21 + 24);
    else
      v23 = (uint64_t)(*(_QWORD *)(v21 + 24) << -(char)v22) >> -(char)v22;
    *((_QWORD *)__src + v40) = v17 | ((unint64_t)(v23 != 0) << 32);
    v27 = (v40 + 1);
    LODWORD(v40) = v40 + 1;
    v28 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    v29 = (_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8));
    v30 = *(_QWORD *)(*v29 + 128);
    v31 = *(_DWORD *)(v30 + 32);
    if (v31 > 0x40)
      LODWORD(v30) = **(_DWORD **)(v30 + 24);
    else
      v30 = (uint64_t)(*(_QWORD *)(v30 + 24) << -(char)v31) >> -(char)v31;
    v32 = *(_QWORD *)(v29[1] + 128);
    v33 = *(_DWORD *)(v32 + 32);
    if (v33 > 0x40)
      v34 = **(_QWORD **)(v32 + 24);
    else
      v34 = (uint64_t)(*(_QWORD *)(v32 + 24) << -(char)v33) >> -(char)v33;
    v35 = v30 | ((unint64_t)(v34 != 0) << 32);
  }
  if (v27 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v41, v27 + 1, 8);
    LODWORD(v27) = v40;
  }
  *((_QWORD *)__src + v27) = v35;
  v19 = v40 + 1;
  v36 = (_DWORD)v40 == -1;
  LODWORD(v40) = v40 + 1;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x200000000;
  v20 = &__src == (void **)a2;
  if (!v36)
  {
LABEL_47:
    if (!v20)
    {
      if (__src == v41)
      {
        v38 = v19;
        if (v19 < 3
          || (*(_DWORD *)(a2 + 8) = 0,
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19, 8),
              v38 = v40,
              (_DWORD)v40))
        {
          memcpy(*(void **)a2, __src, 8 * v38);
        }
        *(_DWORD *)(a2 + 8) = v19;
      }
      else
      {
        *(_QWORD *)a2 = __src;
        v37 = HIDWORD(v40);
        *(_DWORD *)(a2 + 8) = v19;
        *(_DWORD *)(a2 + 12) = v37;
        __src = v41;
        HIDWORD(v40) = 0;
      }
      LODWORD(v40) = 0;
    }
  }
LABEL_55:
  if (__src != v41)
    free(__src);
}

unint64_t llvm::Module::getPtrAuthABIVersion(llvm::Module *this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  void *v5;
  unsigned int v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  llvm::Module::getPtrAuthABIVersions(this, (uint64_t)&v5);
  v1 = v6;
  if (v6)
  {
    if (v6 == 1)
    {
      v2 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 == -1)
      {
        v1 = 0;
        v3 = 0;
      }
      else
      {
        if (v2 >= 64)
          v2 = 64;
        v3 = v2 & 0xFFFFFF00 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32);
        v1 = v2;
      }
    }
    else
    {
      v3 = 0;
      v1 = 64;
    }
  }
  else
  {
    v3 = 0;
  }
  if (v5 != v7)
    free(v5);
  return v3 | v1;
}

uint64_t llvm::collectUsedGlobalVariables(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  llvm::Value **v13;
  uint64_t v14;
  llvm::Value *v15;
  unint64_t v16;

  v4 = a3 == 0;
  if (a3)
    v5 = 18;
  else
    v5 = 9;
  if (v4)
    v6 = "llvm.used";
  else
    v6 = "llvm.compiler.used";
  v7 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), (unsigned __int8 *)v6, v5);
  v8 = v7;
  if (v7)
  {
    if (*(_BYTE *)(v7 + 16) == 3 && (*(_DWORD *)(v7 + 32) & 0xFu) - 7 >= 2)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
      {
        v10 = *(_QWORD *)(v7 - 32);
        v11 = *(_DWORD *)(v10 + 20);
        if ((v11 & 0x40000000) != 0)
        {
          v13 = *(llvm::Value ***)(v10 - 8);
          v12 = v11 & 0x7FFFFFF;
        }
        else
        {
          v12 = v11 & 0x7FFFFFF;
          v13 = (llvm::Value **)(v10 - 32 * v12);
        }
        if (v12)
        {
          v14 = 32 * v12;
          do
          {
            v15 = llvm::Value::stripPointerCasts(*v13);
            v16 = *(unsigned int *)(a2 + 8);
            if (v16 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 8);
              v16 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v15;
            ++*(_DWORD *)(a2 + 8);
            v13 += 4;
            v14 -= 32;
          }
          while (v14);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void llvm::Module::setPartialSampleProfileRatio(llvm::LLVMContext **this, const llvm::ModuleSummaryIndex *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  void *v13;
  llvm::Metadata *MD;
  void *v15;
  uint64_t v16;
  _QWORD v17[25];

  v17[24] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v15);
  if ((_DWORD)v16)
  {
    v4 = (unsigned __int8 **)((char *)v15 + 16);
    v5 = 24 * v16;
    while (1)
    {
      v6 = (_QWORD *)*((_QWORD *)*(v4 - 1) + 1);
      if (*v6 == 14)
      {
        v7 = v6[3];
        v8 = *(_QWORD *)((char *)v6 + 30);
        if (v7 == 0x53656C69666F7250 && v8 == 0x7972616D6D755365)
          break;
      }
      v4 += 3;
      v5 -= 24;
      if (!v5)
        goto LABEL_12;
    }
    v10 = *v4;
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  if (v15 == v17)
  {
    if (!v10)
      return;
  }
  else
  {
    free(v15);
    if (!v10)
      return;
  }
  v11 = llvm::ProfileSummary::getFromMD(v10);
  v15 = v11;
  if (!v11)
    return;
  if (*(_DWORD *)v11 != 2 || !v11[72] || (v12 = *((_DWORD *)v11 + 16)) == 0)
  {
    v15 = 0;
    v13 = v11;
LABEL_20:
    sub_1C4E5DDC4((uint64_t)&v15, (uint64_t)v13);
    return;
  }
  *((double *)v11 + 10) = (double)*((unint64_t *)a2 + 37) / (double)v12;
  MD = (llvm::Metadata *)llvm::ProfileSummary::getMD((llvm::ProfileSummary *)v11, *this, 1, 1);
  llvm::Module::setModuleFlag((uint64_t **)this, (llvm::Type *)1, "ProfileSummary", 0xEuLL, MD);
  v13 = v15;
  v15 = 0;
  if (v13)
    goto LABEL_20;
}

const char *llvm::Module::getDarwinTargetVariantTriple(llvm::Module *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v13);
  if ((_DWORD)v14)
  {
    v1 = (uint64_t *)((char *)v13 + 16);
    v2 = 24 * v14;
    while (1)
    {
      v3 = *(_QWORD *)(*(v1 - 1) + 8);
      if (*(_QWORD *)v3 == 28)
      {
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(_QWORD *)(v3 + 32);
        v6 = *(_QWORD *)(v3 + 40);
        v7 = *(_DWORD *)(v3 + 48);
        v8 = v4 == 0x742E6E6977726164 && v5 == 0x61765F7465677261;
        v9 = v8 && v6 == 0x72742E746E616972;
        if (v9 && v7 == 1701605481)
          break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2)
        goto LABEL_18;
    }
    v11 = *v1;
  }
  else
  {
LABEL_18:
    v11 = 0;
  }
  if (v13 == v15)
  {
    if (v11)
      return (const char *)(*(_QWORD *)(v11 + 8) + 24);
  }
  else
  {
    free(v13);
    if (v11)
      return (const char *)(*(_QWORD *)(v11 + 8) + 24);
  }
  return "";
}

unint64_t llvm::Module::getDarwinTargetVariantSDKVersion(llvm::Module *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  _QWORD v9[25];

  v9[24] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata((uint64_t)this, (uint64_t)&v7);
  v1 = v7;
  if ((_DWORD)v8)
  {
    v2 = (uint64_t *)((char *)v7 + 16);
    v3 = 24 * v8;
    while (1)
    {
      v4 = *(_QWORD **)(*(v2 - 1) + 8);
      if (*v4 == 33 && !memcmp("darwin.target_variant.SDK Version", v4 + 3, 0x21uLL))
        break;
      v2 += 3;
      v3 -= 24;
      if (!v3)
        goto LABEL_5;
    }
    v5 = *v2;
  }
  else
  {
LABEL_5:
    v5 = 0;
  }
  if (v1 != v9)
    free(v1);
  return sub_1C541EFD4(v5);
}

uint64_t sub_1C541FACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  llvm::Value *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t ***v35;
  uint64_t v36;
  uint64_t ***v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;

  if (a2 != a3)
  {
    while (1)
    {
      v44 = a2;
      v45 = *(_QWORD *)(a2 + 8);
      v3 = a2 ? (uint64_t ***)(a2 - 56) : 0;
      v3[5] = 0;
      if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
      {
        v46 = *(uint64_t **)(a1 + 104);
        if (v46)
          break;
      }
LABEL_27:
      v28 = v3[7];
      v29 = v3[8];
      *v29 = (uint64_t *)v28;
      v28[1] = (uint64_t *)v29;
      v3[7] = 0;
      v3[8] = 0;
      llvm::GlobalVariable::dropAllReferences((llvm::GlobalVariable *)v3);
      v30 = (uint64_t)v3[6];
      if (v30)
        llvm::Comdat::removeUser(v30, (uint64_t)v3);
      v3[6] = 0;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v3);
      llvm::Value::~Value((llvm::Value *)v3, v31);
      v32 = *((_DWORD *)v3 + 5);
      v33 = v32 & 0xF8000000 | 1;
      *((_DWORD *)v3 + 5) = v33;
      if ((v32 & 0x40000000) != 0)
      {
        v39 = *(v3 - 1);
        v37 = v3 - 1;
        v38 = v39;
        v34 = v45;
        if (*v39)
        {
          *(_QWORD *)v38[2] = v38[1];
          v40 = v38[1];
          if (v40)
            *(_QWORD *)(v40 + 16) = v38[2];
        }
        operator delete(v38);
      }
      else
      {
        v34 = v45;
        v35 = (uint64_t ***)(v44 - 24);
        do
        {
          if (*(v35 - 8))
          {
            **(v35 - 6) = (uint64_t *)*(v35 - 7);
            v36 = (uint64_t)*(v35 - 7);
            if (v36)
              *(_QWORD *)(v36 + 16) = *(v35 - 6);
          }
          v35 -= 4;
        }
        while (v35 != v3);
        if ((v33 & 0x80000000) != 0)
          v37 = (uint64_t ***)((char *)(v3 - 5) - (char *)*(v3 - 5));
        else
          v37 = v3 - 4;
      }
      operator delete(v37);
      a2 = v34;
      if (v34 == a3)
        return a3;
    }
    v4 = ***v3;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v8 = (uint64_t ****)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == v3)
        goto LABEL_14;
      v10 = 1;
      while (v9 != (uint64_t ***)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(uint64_t ****)(v5 + 16 * v7);
        if (v9 == v3)
        {
          v8 = (uint64_t ****)(v5 + 16 * v7);
          goto LABEL_14;
        }
      }
    }
    v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_14:
    v12 = *((unsigned int *)v46 + 2);
    if ((_DWORD)v12)
    {
      v13 = (size_t *)v8[1];
      v14 = *((unsigned int *)v46 + 5);
      v15 = (unsigned __int8 *)v13 + v14;
      v16 = *v13;
      if (*v13)
      {
        v17 = 0;
        v18 = *v13;
        v19 = v15;
        do
        {
          v20 = *v19++;
          v17 = 33 * v17 + v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        v17 = 0;
      }
      v21 = v12 - 1;
      v22 = *v46;
      v23 = *v46 + 8 * v12 + 8;
      v24 = 1;
      v25 = v17;
      while (1)
      {
        v26 = v25 & v21;
        v27 = *(_QWORD **)(v22 + 8 * v26);
        if (v27 != (_QWORD *)-8)
        {
          if (!v27)
            goto LABEL_27;
          if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16)))
            break;
        }
        v25 = v24 + v26;
        ++v24;
      }
      *(_QWORD *)(v22 + 8 * (int)v26) = -8;
      *(uint64_t *)((char *)v46 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v46 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_27;
  }
  return a3;
}

uint64_t sub_1C541FD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (a2)
        v6 = (llvm::Value *)(a2 - 48);
      else
        v6 = 0;
      llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(a1, v6);
      v7 = *((_QWORD *)v6 + 6);
      v8 = (_QWORD *)*((_QWORD *)v6 + 7);
      *v8 = v7;
      *(_QWORD *)(v7 + 8) = v8;
      *((_QWORD *)v6 + 6) = 0;
      *((_QWORD *)v6 + 7) = 0;
      sub_1C6239D9C(v6);
      a2 = v5;
    }
    while (v5 != a3);
  }
  return a3;
}

uint64_t sub_1C541FDF4(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  llvm::PointerType *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;

  v2 = *(_QWORD *)a1;
  v3 = operator new(0x78uLL);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  v4 = *(uint64_t **)(a1 + 16);
  v5 = **(llvm::PointerType ***)(a1 + 8);
  v10 = 261;
  v6 = *v4;
  v7 = v4[1];
  v9[0] = v6;
  v9[1] = v7;
  return llvm::GlobalVariable::GlobalVariable((uint64_t)(v3 + 8), v2, v5, 0, 0, 0, (uint64_t)v9, 0, 0, 0, 0);
}

_QWORD *sub_1C541FE8C(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memmove(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, 8 * v15);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

_OWORD *sub_1C541FFCC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6244BA8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C8650FB0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::ValueInfo::getELFVisibility(llvm::ValueInfo *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;

  v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = v3 - v2;
  if (v3 == v2)
    return 0;
  v5 = 0;
  v6 = 8 * (v4 >> 3);
  do
  {
    v7 = (*(unsigned __int16 *)(*(_QWORD *)v2 + 12) >> 4) & 3;
    if (v7 == 1)
      return 1;
    v5 |= v7 == 2;
    v2 += 8;
    v6 -= 8;
  }
  while (v6);
  if ((v5 & 1) != 0)
    return 2;
  else
    return 0;
}

uint64_t llvm::ValueInfo::canAutoHide(llvm::ValueInfo *this)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  v2 = *(uint64_t **)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32) - (_QWORD)v2;
  if (!v3)
    return 0;
  v4 = (v3 & 0xFFFFFFFFFFFFFFF8) - 8;
  do
  {
    v5 = *v2++;
    v6 = *(unsigned __int16 *)(v5 + 12);
    result = (v6 >> 9) & 1;
    if ((v6 & 0x200) == 0)
      break;
    v8 = v4;
    v4 -= 8;
  }
  while (v8);
  return result;
}

uint64_t llvm::ModuleSummaryIndex::collectDefinedFunctionsForModule(uint64_t result, void *__s2, size_t __n, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;

  v4 = (_QWORD *)(result + 8);
  v5 = *(_QWORD **)result;
  if (*(_QWORD *)result != result + 8)
  {
    do
    {
      v15 = v5[4];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t *)v5[8];
      while (v9 != v10)
      {
        v11 = *v9;
        if (*v9)
        {
          if (*(_DWORD *)(v11 + 8) == 1 && *(_QWORD *)(v11 + 32) == __n)
          {
            if (!__n || (result = memcmp(*(const void **)(v11 + 24), __s2, __n), !(_DWORD)result))
            {
              result = (uint64_t)sub_1C5422F44(a4, &v15);
              *(_QWORD *)(result + 8) = v11;
            }
          }
        }
        ++v9;
      }
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v14 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return result;
}

uint64_t llvm::ModuleSummaryIndex::isGUIDLive(llvm::ModuleSummaryIndex *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;

  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v3)
    goto LABEL_12;
  v4 = (char *)this + 8;
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = (char *)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((_QWORD *)v4 + 4) > a2)
LABEL_12:
    v4 = (char *)this + 8;
  if (v4 == v2)
    v8 = 0;
  else
    v8 = (unint64_t)(v4 + 32);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0)
    return 1;
  v10 = *(uint64_t **)(v9 + 24);
  v11 = *(_QWORD *)(v9 + 32) - (_QWORD)v10;
  if (!v11 || !*((_BYTE *)this + 128))
    return 1;
  v12 = 8 * (v11 >> 3) - 8;
  do
  {
    v13 = *v10++;
    v14 = *(unsigned __int16 *)(v13 + 12);
    result = (v14 >> 7) & 1;
    if ((v14 & 0x80) != 0)
      break;
    v16 = v12;
    v12 -= 8;
  }
  while (v16);
  return result;
}

_QWORD *llvm::ModuleSummaryIndex::propagateAttributes(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD v45[2];
  int v46;
  _BYTE v47[31];

  if (!byte_1ED804940)
    return result;
  v2 = result;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v3 = (_QWORD *)*result;
  v44 = result + 1;
  if ((_QWORD *)*result != result + 1)
  {
    while (1)
    {
      v5 = (uint64_t *)v3[7];
      v6 = (uint64_t *)v3[8];
      if (v5 != v6)
        break;
LABEL_58:
      v36 = (_QWORD *)v3[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v3[2];
          v10 = *v37 == (_QWORD)v3;
          v3 = v37;
        }
        while (!v10);
      }
      v3 = v37;
      if (v37 == v44)
        goto LABEL_68;
    }
    LOBYTE(v7) = 1;
    while (1)
    {
      v8 = *v5;
      if (*((_BYTE *)v2 + 128) && (*(_WORD *)(v8 + 12) & 0x80) == 0)
      {
LABEL_57:
        if ((v7 & 1) == 0)
        {
          v38 = (uint64_t *)v3[7];
          v39 = (uint64_t *)v3[8];
          while (v38 != v39)
          {
            v40 = *v38++;
            *(_WORD *)(v40 + 12) &= ~0x100u;
          }
        }
        goto LABEL_58;
      }
      v9 = *(_DWORD *)(v8 + 8);
      if (v8)
        v10 = v9 == 0;
      else
        v10 = 0;
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 72);
        if (v11)
          v12 = *(_DWORD *)(v11 + 8) == 2;
        else
          v12 = 0;
        if (!v12)
          goto LABEL_23;
      }
      else
      {
        v11 = *v5;
        if (v9 != 2)
          goto LABEL_23;
      }
      v13 = *(_WORD *)(v8 + 12);
      if (((1 << (v13 & 0xF)) & 0x1EB) == 0 || (v13 & 0x40) != 0)
        goto LABEL_22;
      v14 = *(_DWORD *)(a2 + 16);
      if (!v14)
        goto LABEL_23;
      v15 = v3[4];
      v16 = v14 - 1;
      v17 = (37 * v15) & v16;
      v18 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v17);
      if (v15 == v18)
      {
LABEL_22:
        *(_BYTE *)(v11 + 72) &= 0xFCu;
        v8 = *v5;
      }
      else
      {
        v34 = 1;
        while (v18 != -1)
        {
          v35 = v17 + v34++;
          v17 = v35 & v16;
          v18 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v17);
          if (v15 == v18)
            goto LABEL_22;
        }
      }
LABEL_23:
      v19 = *(uint64_t **)(v8 + 40);
      v20 = *(uint64_t **)(v8 + 48);
      if (v20 != v19)
      {
        while (1)
        {
          v21 = *v19;
          if ((*v19 & 6) != 0)
          {
            if (!v46)
              goto LABEL_35;
            v24 = v21 & (v46 - 1) & 0xFFFFFFF8;
            v25 = *(_QWORD *)(v45[0] + 8 * v24) & 0xFFFFFFFFFFFFFFF8;
            if ((v21 & 0xFFFFFFFFFFFFFFF8) != v25)
            {
              v22 = 1;
              while (v25 != -8)
              {
                v23 = v24 + v22++;
                v24 = v23 & (v46 - 1);
                v25 = *(_QWORD *)(v45[0] + 8 * v24) & 0xFFFFFFFFFFFFFFF8;
                if ((v21 & 0xFFFFFFFFFFFFFFF8) == v25)
                  goto LABEL_34;
              }
              goto LABEL_35;
            }
LABEL_34:
            if (v24 == v46)
              goto LABEL_35;
          }
          else
          {
            sub_1C61A75D0((uint64_t)v45, v19, (uint64_t)v47);
            if (v47[16])
            {
              v21 = *v19;
LABEL_35:
              v26 = v21 & 0xFFFFFFFFFFFFFFF8;
              v27 = *(uint64_t **)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
              v28 = *(_QWORD *)(v26 + 32) - (_QWORD)v27;
              if (v28)
              {
                v29 = 8 * (v28 >> 3);
                do
                {
                  v30 = *v27;
                  v31 = *(_DWORD *)(*v27 + 8);
                  if (*v27)
                    v32 = v31 == 0;
                  else
                    v32 = 0;
                  if (v32)
                  {
                    v30 = *(_QWORD *)(v30 + 72);
                    v31 = *(_DWORD *)(v30 + 8);
                  }
                  if (v31 == 2)
                  {
                    v33 = *v19;
                    if ((*v19 & 2) == 0)
                    {
                      *(_BYTE *)(v30 + 72) &= ~1u;
                      v33 = *v19;
                    }
                    if ((v33 & 4) == 0)
                      *(_BYTE *)(v30 + 72) &= ~2u;
                  }
                  ++v27;
                  v29 -= 8;
                }
                while (v29);
              }
            }
          }
          if (++v19 == v20)
          {
            v8 = *v5;
            break;
          }
        }
      }
      v7 &= (unsigned __int16)(*(_WORD *)(v8 + 12) & 0x100) >> 8;
      if (++v5 == v6)
        goto LABEL_57;
    }
  }
LABEL_68:
  *(_WORD *)((char *)v2 + 129) = 257;
  if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
  {
    v41 = (_QWORD *)*v2;
    if ((_QWORD *)*v2 != v44)
    {
      do
      {
        v42 = (_QWORD *)v41[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (_QWORD *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v41[2];
            v10 = *v43 == (_QWORD)v41;
            v41 = v43;
          }
          while (!v10);
        }
        v41 = v43;
      }
      while (v43 != v44);
    }
  }
  return (_QWORD *)MEMORY[0x1CAA32FB4](v45[0], 8);
}

BOOL llvm::ModuleSummaryIndex::canImportGlobalVar(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  __int16 v4;
  _BOOL8 v5;

  v3 = a2;
  if (a2)
  {
    v3 = a2;
    if (!*(_DWORD *)(a2 + 8))
      v3 = *(_QWORD *)(a2 + 72);
  }
  v4 = *(_WORD *)(a2 + 12);
  v5 = 0;
  if (((1 << (v4 & 0xF)) & 0x1EB) != 0)
  {
    v5 = (v4 & 0x40) == 0;
    if ((v4 & 0x40) == 0 && (a3 & 1) != 0)
      return byte_1ED830AF0 && (*(_BYTE *)(v3 + 72) & 4) != 0
          || *(_BYTE *)(a1 + 129) && (*(_BYTE *)(v3 + 72) & 3) != 0
          || *(_QWORD *)(v3 + 48) == *(_QWORD *)(v3 + 40);
  }
  return v5;
}

_QWORD *llvm::ModuleSummaryIndex::dumpSCCs(llvm::ModuleSummaryIndex *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  unint64_t v6;
  char *v7;
  BOOL v8;
  const char *p_p;
  size_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _DWORD *v14;
  int64_t v15;
  _BOOL8 v16;
  const char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _QWORD *v25;
  size_t v26;
  const char *v27;
  unint64_t v28;
  char *v29;
  const char *v30;
  size_t v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  _WORD *v43;
  void *__p;
  size_t v45;
  char v46;
  _QWORD v47[7];
  char *v48;
  char *v49;
  char v50;
  char v51[16];

  *(_QWORD *)v51 = *MEMORY[0x1E0C80C00];
  __p = this;
  sub_1C4F7678C((uint64_t *)&__p, (uint64_t)v47);
  if (v48 == v49)
    return sub_1C617D7D4(v47);
  do
  {
    v4 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 4)
    {
      *(_BYTE *)(v4 + 4) = 40;
      *(_DWORD *)v4 = 541279059;
      *((_QWORD *)a2 + 4) += 5;
      v5 = a2;
    }
    else
    {
      v5 = llvm::raw_ostream::write(a2, "SCC (", 5uLL);
    }
    if (v49 == v48)
    {
      v50 = 48;
      v7 = &v50;
    }
    else
    {
      v6 = (v49 - v48) >> 3;
      v7 = v51;
      do
      {
        *--v7 = (v6 % 0xA) | 0x30;
        v8 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v8);
    }
    sub_1C4E61270(&__p, v7, v51, v51 - v7);
    if (v46 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    if (v46 >= 0)
      v10 = v46 & 0x7F;
    else
      v10 = v45;
    v11 = llvm::raw_ostream::write(v5, p_p, v10);
    v12 = v11;
    v13 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v13) > 4)
    {
      *(_BYTE *)(v13 + 4) = 101;
      *(_DWORD *)v13 = 1685024288;
      v14 = (_DWORD *)(*((_QWORD *)v11 + 4) + 5);
      *((_QWORD *)v12 + 4) = v14;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v11, " node", 5uLL);
      v14 = (_DWORD *)*((_QWORD *)v12 + 4);
    }
    v15 = v49 - v48;
    v16 = v49 - v48 != 8;
    if (*((_QWORD *)v12 + 3) - (_QWORD)v14 >= (unint64_t)v16)
    {
      if (v15 != 8)
      {
        memcpy(v14, "s", v49 - v48 != 8);
        v14 = (_DWORD *)(*((_QWORD *)v12 + 4) + v16);
        *((_QWORD *)v12 + 4) = v14;
      }
    }
    else
    {
      if (v15 == 8)
        v17 = "";
      else
        v17 = "s";
      v12 = llvm::raw_ostream::write(v12, v17, v49 - v48 != 8);
      v14 = (_DWORD *)*((_QWORD *)v12 + 4);
    }
    if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 3uLL)
    {
      *v14 = 175841321;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v12, ") {\n", 4uLL);
    }
    if (v46 < 0)
      operator delete(__p);
    v18 = v48;
    v19 = v49;
    while (v18 != v19)
    {
      v20 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
      v21 = *(uint64_t **)(v20 + 24);
      if (*(uint64_t **)(v20 + 32) == v21)
        v22 = 0;
      else
        v22 = *v21;
      v23 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v23)
      {
        v24 = llvm::raw_ostream::write(a2, " ", 1uLL);
        v25 = (_QWORD *)*((_QWORD *)v24 + 4);
      }
      else
      {
        *v23 = 32;
        v25 = (_QWORD *)(*((_QWORD *)a2 + 4) + 1);
        *((_QWORD *)a2 + 4) = v25;
        v24 = a2;
      }
      v26 = 8 * (v22 == 0);
      if (v26 <= *((_QWORD *)v24 + 3) - (_QWORD)v25)
      {
        if (!v22)
        {
          *v25 = 0x6C616E7265747845;
          v25 = (_QWORD *)(*((_QWORD *)v24 + 4) + 8);
          *((_QWORD *)v24 + 4) = v25;
        }
      }
      else
      {
        if (v22)
          v27 = "";
        else
          v27 = "External";
        v24 = llvm::raw_ostream::write(v24, v27, v26);
        v25 = (_QWORD *)*((_QWORD *)v24 + 4);
      }
      if (*((_QWORD **)v24 + 3) == v25)
      {
        v24 = llvm::raw_ostream::write(v24, " ", 1uLL);
      }
      else
      {
        *(_BYTE *)v25 = 32;
        ++*((_QWORD *)v24 + 4);
      }
      v28 = *(_QWORD *)(*(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8);
      v29 = v51;
      if (v28)
      {
        do
        {
          *--v29 = (v28 % 0xA) | 0x30;
          v8 = v28 > 9;
          v28 /= 0xAuLL;
        }
        while (v8);
      }
      else
      {
        v50 = 48;
        v29 = &v50;
      }
      sub_1C4E61270(&__p, v29, v51, v51 - v29);
      if (v46 >= 0)
        v30 = (const char *)&__p;
      else
        v30 = (const char *)__p;
      if (v46 >= 0)
        v31 = v46 & 0x7F;
      else
        v31 = v45;
      v32 = llvm::raw_ostream::write(v24, v30, v31);
      if ((unint64_t)(v49 - v48) <= 8)
      {
        v35 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8;
        v36 = *(uint64_t **)(v35 + 24);
        if (*(uint64_t **)(v35 + 32) == v36)
        {
          v39 = &qword_1ED830B80;
          v40 = &qword_1ED830B88;
        }
        else
        {
          v37 = *v36;
          if (v37)
            v38 = *(_DWORD *)(v37 + 8) == 0;
          else
            v38 = 0;
          if (v38)
            v37 = *(_QWORD *)(v37 + 72);
          v39 = (uint64_t *)(v37 + 80);
          v40 = (uint64_t *)(v37 + 88);
        }
        v41 = (_QWORD *)*v39;
        v42 = (_QWORD *)*v40;
        while (v41 != v42)
        {
          if ((*v41 & 0xFFFFFFFFFFFFFFF8) == v35)
            goto LABEL_52;
          v41 += 2;
        }
        goto LABEL_54;
      }
LABEL_52:
      v33 = *((_QWORD *)v32 + 4);
      if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) <= 0xB)
      {
        v32 = llvm::raw_ostream::write(v32, " (has cycle)", 0xCuLL);
LABEL_54:
        v34 = (_BYTE *)*((_QWORD *)v32 + 4);
        goto LABEL_55;
      }
      *(_DWORD *)(v33 + 8) = 694512739;
      *(_QWORD *)v33 = *(_QWORD *)" (has cycle)";
      v34 = (_BYTE *)(*((_QWORD *)v32 + 4) + 12);
      *((_QWORD *)v32 + 4) = v34;
LABEL_55:
      if (*((_BYTE **)v32 + 3) == v34)
      {
        llvm::raw_ostream::write(v32, "\n", 1uLL);
      }
      else
      {
        *v34 = 10;
        ++*((_QWORD *)v32 + 4);
      }
      if (v46 < 0)
        operator delete(__p);
      v18 += 8;
    }
    v43 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v43 > 1uLL)
    {
      *v43 = 2685;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "}\n", 2uLL);
    }
    sub_1C4F76FF0(v47);
  }
  while (v48 != v49);
  return sub_1C617D7D4(v47);
}

void llvm::ModuleSummaryIndex::exportToDot(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  llvm::raw_ostream *v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  const void *v45;
  unint64_t v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  const char *v49;
  size_t v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  llvm::raw_ostream *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t *v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  BOOL v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  std::string *v99;
  std::string::size_type size;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  unsigned int v105;
  char v106;
  char v107;
  size_t v108;
  size_t v109;
  void **p_dst;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  std::string::size_type v119;
  __int16 v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  char *v126;
  std::string *v127;
  std::string::size_type v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  const char *v133;
  _DWORD *v134;
  llvm::raw_ostream *v135;
  std::string *v136;
  size_t v137;
  llvm::raw_ostream *v138;
  llvm::raw_ostream *v139;
  _BYTE *v140;
  const void **v141;
  const void **v142;
  char v143;
  int v144;
  size_t v145;
  size_t v146;
  std::string *v147;
  const void *v148;
  std::string *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  std::string *v152;
  std::string::size_type v153;
  char v154;
  const std::string::value_type *v155;
  std::string::size_type v156;
  BOOL v157;
  std::string *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  llvm::raw_ostream *v161;
  _BYTE *v162;
  _QWORD *v163;
  _QWORD *v164;
  int v165;
  unsigned int v166;
  void *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t i;
  _QWORD *v181;
  _QWORD *v182;
  _DWORD *v183;
  _QWORD **v184;
  _QWORD *v185;
  _QWORD **v186;
  uint64_t *v187;
  unint64_t *v188;
  unint64_t *v189;
  uint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  BOOL v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  llvm::raw_ostream *v200;
  _WORD *v201;
  const char *v202;
  size_t v203;
  llvm::raw_ostream *v204;
  uint64_t v205;
  unint64_t v206;
  std::string *v207;
  size_t v208;
  void *v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t *v227;
  std::string v228;
  __int16 v229;
  std::string v230;
  __int16 v231;
  std::string v232;
  __int16 v233;
  _QWORD v234[4];
  unint64_t __val;
  int v236[2];
  char *v237;
  char v238;
  _QWORD **v239;
  _QWORD *v240[2];
  uint64_t v241[2];
  unsigned int v242;
  void *__p;
  char *v244;
  uint64_t v245;
  void **__dst;
  std::string::size_type v247;
  int64_t v248;
  std::string v249;
  std::string v250;
  _BYTE v251[32];
  __int128 v252;
  char __s[16];
  uint64_t v254;
  uint64_t v255;

  v3 = this;
  v255 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v244 = 0;
  v245 = 0;
  v241[0] = 0;
  v241[1] = 0;
  v242 = 0;
  v240[0] = 0;
  v240[1] = 0;
  v239 = v240;
  v4 = *(_QWORD **)a1;
  v224 = (_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v5 = (uint64_t **)v4[7];
      v6 = (uint64_t **)v4[8];
      if (v5 != v6)
      {
        v7 = (uint64_t *)v4[4];
        do
        {
          v8 = *v5;
          *(_OWORD *)v251 = *(_OWORD *)(*v5 + 3);
          v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
          v9 = sub_1C62450A8((uint64_t)&v239, (uint64_t)v251, &v232);
          v10 = v9;
          v12 = (uint64_t **)v9 + 7;
          v11 = (uint64_t *)*((_QWORD *)v9 + 7);
          if (v11)
          {
            while (1)
            {
              while (1)
              {
                v13 = (uint64_t **)v11;
                v14 = v11[4];
                if (v14 <= (unint64_t)v7)
                  break;
                v11 = *v13;
                v12 = v13;
                if (!*v13)
                  goto LABEL_12;
              }
              if (v14 >= (unint64_t)v7)
                break;
              v11 = v13[1];
              if (!v11)
              {
                v12 = v13 + 1;
                goto LABEL_12;
              }
            }
          }
          else
          {
            v13 = (uint64_t **)v9 + 7;
LABEL_12:
            v15 = (uint64_t *)v13;
            v13 = (uint64_t **)operator new(0x30uLL);
            v13[4] = v7;
            v13[5] = 0;
            *v13 = 0;
            v13[1] = 0;
            v13[2] = v15;
            *v12 = (uint64_t *)v13;
            v16 = **((_QWORD **)v10 + 6);
            v17 = (uint64_t *)v13;
            if (v16)
            {
              *((_QWORD *)v10 + 6) = v16;
              v17 = *v12;
            }
            sub_1C4768E74(*((uint64_t **)v10 + 7), v17);
            ++*((_QWORD *)v10 + 8);
            v3 = this;
          }
          v13[5] = v8;
          ++v5;
        }
        while (v5 != v6);
      }
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v20 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v20);
      }
      v4 = v19;
    }
    while (v19 != v224);
  }
  *(_QWORD *)v236 = v3;
  v237 = &v238;
  v21 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v21) > 0x11)
  {
    *(_WORD *)(v21 + 16) = 2683;
    *(_OWORD *)v21 = *(_OWORD *)"digraph Summary {\n";
    *((_QWORD *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "digraph Summary {\n", 0x12uLL);
  }
  v22 = v239;
  if (v239 != v240)
  {
    while (1)
    {
      __val = 0;
      v28 = *(unsigned int *)(a1 + 32);
      v221 = v22;
      if ((_DWORD)v28)
      {
        v29 = (const void *)v22[4];
        v30 = v22[5];
        v31 = 0;
        if (v30)
        {
          v32 = v22[5];
          v33 = (unsigned __int8 *)v22[4];
          do
          {
            v34 = *v33++;
            v31 = 33 * v31 + v34;
            --v32;
          }
          while (v32);
        }
        v35 = v28 - 1;
        v36 = *(_QWORD *)(a1 + 24);
        v227 = (unint64_t *)*(unsigned int *)(a1 + 32);
        v37 = v36 + 8 * v28 + 8;
        v38 = 1;
        v39 = v31;
        while (1)
        {
          v40 = v39 & v35;
          v41 = *(_QWORD **)(v36 + 8 * v40);
          if (v41 != (_QWORD *)-8)
          {
            if (!v41)
              goto LABEL_49;
            if (*(_DWORD *)(v37 + 4 * v40) == v31
              && v30 == *v41
              && (!v30 || !memcmp(v29, (char *)v41 + *(unsigned int *)(a1 + 44), v30)))
            {
              break;
            }
          }
          v39 = v38 + v40;
          ++v38;
        }
        if ((_DWORD)v40 == -1)
        {
          v41 = 0;
LABEL_49:
          v3 = this;
          v22 = v221;
          goto LABEL_50;
        }
        v22 = v221;
        v41 = (unint64_t *)(int)v40 == v227 ? 0 : *(_QWORD **)(*(_QWORD *)(v36 + 8 * (int)v40) + 8);
        v3 = this;
      }
      else
      {
        v41 = 0;
      }
LABEL_50:
      __val = (unint64_t)v41;
      v42 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v42 > 0xCuLL)
      {
        qmemcpy(v42, "  // Module: ", 13);
        v44 = (_BYTE *)(*((_QWORD *)v3 + 4) + 13);
        *((_QWORD *)v3 + 4) = v44;
        v43 = v3;
      }
      else
      {
        v43 = llvm::raw_ostream::write(v3, "  // Module: ", 0xDuLL);
        v44 = (_BYTE *)*((_QWORD *)v43 + 4);
      }
      v45 = (const void *)v22[4];
      v46 = v22[5];
      if (v46 <= *((_QWORD *)v43 + 3) - (_QWORD)v44)
      {
        if (v46)
        {
          memcpy(v44, v45, v22[5]);
          v44 = (_BYTE *)(*((_QWORD *)v43 + 4) + v46);
          *((_QWORD *)v43 + 4) = v44;
        }
      }
      else
      {
        v43 = llvm::raw_ostream::write(v43, (const char *)v45, v22[5]);
        v44 = (_BYTE *)*((_QWORD *)v43 + 4);
      }
      if (*((_BYTE **)v43 + 3) == v44)
      {
        llvm::raw_ostream::write(v43, "\n", 1uLL);
      }
      else
      {
        *v44 = 10;
        ++*((_QWORD *)v43 + 4);
      }
      v47 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v47) > 0x12)
      {
        *(_DWORD *)(v47 + 15) = 1601332596;
        *(_OWORD *)v47 = *(_OWORD *)"  subgraph cluster_";
        *((_QWORD *)v3 + 4) += 19;
        v48 = v3;
      }
      else
      {
        v48 = llvm::raw_ostream::write(v3, "  subgraph cluster_", 0x13uLL);
      }
      std::to_string((std::string *)v251, __val);
      if (v251[23] >= 0)
        v49 = v251;
      else
        v49 = *(const char **)v251;
      if (v251[23] >= 0)
        v50 = v251[23] & 0x7F;
      else
        v50 = *(_QWORD *)&v251[8];
      v51 = llvm::raw_ostream::write(v48, v49, v50);
      v52 = *((_QWORD *)v51 + 4);
      if ((unint64_t)(*((_QWORD *)v51 + 3) - v52) > 2)
      {
        *(_BYTE *)(v52 + 2) = 10;
        *(_WORD *)v52 = 31520;
        *((_QWORD *)v51 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v51, " {\n", 3uLL);
      }
      if ((v251[23] & 0x80000000) != 0)
        operator delete(*(void **)v251);
      v53 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v53) > 0x13)
      {
        *(_DWORD *)(v53 + 16) = 171664485;
        *(_OWORD *)v53 = *(_OWORD *)"    style = filled;\n";
        v54 = (void *)(*((_QWORD *)v3 + 4) + 20);
        *((_QWORD *)v3 + 4) = v54;
      }
      else
      {
        llvm::raw_ostream::write(v3, "    style = filled;\n", 0x14uLL);
        v54 = (void *)*((_QWORD *)v3 + 4);
      }
      if (*((_QWORD *)v3 + 3) - (_QWORD)v54 > 0x16uLL)
      {
        qmemcpy(v54, "    color = lightgrey;\n", 23);
        v55 = (void *)(*((_QWORD *)v3 + 4) + 23);
        *((_QWORD *)v3 + 4) = v55;
      }
      else
      {
        llvm::raw_ostream::write(v3, "    color = lightgrey;\n", 0x17uLL);
        v55 = (void *)*((_QWORD *)v3 + 4);
      }
      if (*((_QWORD *)v3 + 3) - (_QWORD)v55 > 0xCuLL)
      {
        qmemcpy(v55, "    label = \"", 13);
        *((_QWORD *)v3 + 4) += 13;
        v56 = v3;
      }
      else
      {
        v56 = llvm::raw_ostream::write(v3, "    label = \"", 0xDuLL);
      }
      v57 = v22[4];
      v58 = v22[5];
      *(_QWORD *)&v251[24] = 0;
      *(_QWORD *)v251 = v57;
      *(_OWORD *)&v251[8] = v58;
      *(_QWORD *)&v252 = v58;
      DWORD2(v252) = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)v251);
      v59 = *(_QWORD *)&v251[24];
      v60 = (_BYTE *)*((_QWORD *)v56 + 4);
      if (*(_QWORD *)&v251[24] <= *((_QWORD *)v56 + 3) - (_QWORD)v60)
      {
        if (*(_QWORD *)&v251[24])
        {
          memcpy(v60, *(const void **)&v251[16], *(size_t *)&v251[24]);
          v60 = (_BYTE *)(*((_QWORD *)v56 + 4) + v59);
          *((_QWORD *)v56 + 4) = v60;
        }
      }
      else
      {
        v56 = llvm::raw_ostream::write(v56, *(const char **)&v251[16], *(size_t *)&v251[24]);
        v60 = (_BYTE *)*((_QWORD *)v56 + 4);
      }
      if (*((_QWORD *)v56 + 3) - (_QWORD)v60 > 2uLL)
      {
        v60[2] = 10;
        *(_WORD *)v60 = 15138;
        *((_QWORD *)v56 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v56, "\";\n", 3uLL);
      }
      v61 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v61 > 0x2CuLL)
      {
        qmemcpy(v61, "    node [style=filled,fillcolor=lightblue];\n", 45);
        *((_QWORD *)v3 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(v3, "    node [style=filled,fillcolor=lightblue];\n", 0x2DuLL);
      }
      v62 = (_QWORD *)v22[6];
      v234[0] = v22 + 6;
      v234[1] = &__p;
      v234[2] = &__val;
      v234[3] = v236;
      v220 = v22 + 6;
      v63 = v22 + 7;
      v223 = v22 + 7;
      if (v62 != v22 + 7)
        break;
LABEL_307:
      v167 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v167 > 0xDuLL)
      {
        qmemcpy(v167, "    // Edges:\n", 14);
        *((_QWORD *)v3 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v3, "    // Edges:\n", 0xEuLL);
      }
      v168 = (_QWORD *)*v220;
      if ((_QWORD *)*v220 != v63)
      {
        do
        {
          v169 = v168[5];
          v170 = *(uint64_t **)(v169 + 40);
          v171 = *(_QWORD *)(v169 + 48) - (_QWORD)v170;
          if (!v171)
            goto LABEL_320;
          v172 = 8 * (v171 >> 3);
          do
          {
            v174 = *v170++;
            v173 = v174;
            v175 = *(_QWORD *)(v174 & 0xFFFFFFFFFFFFFFF8);
            if ((v174 & 2) != 0)
              v176 = -2;
            else
              v176 = -3;
            if ((v173 & 4) != 0)
              v177 = -1;
            else
              v177 = v176;
            sub_1C5422948((uint64_t)v234, v168[4], v175, v177);
            v172 -= 8;
          }
          while (v172);
          v169 = v168[5];
          if (v169)
          {
LABEL_320:
            v178 = *(_DWORD *)(v169 + 8);
            if (v178)
            {
              if (v178 == 1)
              {
                v179 = *(_QWORD *)(v169 + 80);
                for (i = *(_QWORD *)(v169 + 88); v179 != i; v179 += 16)
                  sub_1C5422948((uint64_t)v234, v168[4], *(_QWORD *)(*(_QWORD *)v179 & 0xFFFFFFFFFFFFFFF8), *(_DWORD *)(v179 + 8) & 7);
              }
            }
            else
            {
              sub_1C5422948((uint64_t)v234, v168[4], *(_QWORD *)(*(_QWORD *)(v169 + 64) & 0xFFFFFFFFFFFFFFF8), -4);
            }
          }
          v181 = (_QWORD *)v168[1];
          if (v181)
          {
            do
            {
              v182 = v181;
              v181 = (_QWORD *)*v181;
            }
            while (v181);
          }
          else
          {
            do
            {
              v182 = (_QWORD *)v168[2];
              v20 = *v182 == (_QWORD)v168;
              v168 = v182;
            }
            while (!v20);
          }
          v168 = v182;
        }
        while (v182 != v63);
      }
      v183 = (_DWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v183 > 3uLL)
      {
        *v183 = 175972384;
        *((_QWORD *)v3 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v3, "  }\n", 4uLL);
      }
      v184 = (_QWORD **)v221;
      v185 = (_QWORD *)v221[1];
      if (v185)
      {
        do
        {
          v186 = (_QWORD **)v185;
          v185 = (_QWORD *)*v185;
        }
        while (v185);
      }
      else
      {
        do
        {
          v186 = (_QWORD **)v184[2];
          v20 = *v186 == v184;
          v184 = v186;
        }
        while (!v20);
      }
      v22 = v186;
      if (v186 == v240)
        goto LABEL_25;
    }
    while (1)
    {
      v227 = v62 + 4;
      v64 = sub_1C5423394((uint64_t)v241, v62 + 4);
      v65 = v64;
      v67 = (unint64_t *)v64[2];
      v66 = v64[3];
      if ((unint64_t)v67 >= v66)
      {
        v70 = (unint64_t *)v64[1];
        v71 = v67 - v70;
        v72 = v71 + 1;
        v69 = v224;
        if ((unint64_t)(v71 + 1) >> 61)
          goto LABEL_426;
        v73 = v66 - (_QWORD)v70;
        if (v73 >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          if (v74 >> 61)
LABEL_427:
            sub_1C4764EE4();
          v75 = (char *)operator new(8 * v74);
        }
        else
        {
          v75 = 0;
        }
        v76 = (unint64_t *)&v75[8 * v71];
        *v76 = __val;
        v68 = v76 + 1;
        while (v67 != v70)
        {
          v77 = *--v67;
          *--v76 = v77;
        }
        v65[1] = (uint64_t)v76;
        v65[2] = (uint64_t)v68;
        v65[3] = (uint64_t)&v75[8 * v74];
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v67 = __val;
        v68 = v67 + 1;
        v69 = v224;
      }
      v65[2] = (uint64_t)v68;
      v78 = *(_DWORD *)(v62[5] + 12);
      v252 = 0u;
      memset(v251, 0, sizeof(v251));
      v79 = *(_DWORD *)(v62[5] + 8);
      if (!v79)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"style";
        v233 = 259;
        v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"dotted,filled";
        v231 = 259;
        v228.__r_.__value_.__r.__words[0] = (std::string::size_type)"alias";
        v229 = 259;
        sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
        v233 = 259;
        v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"box";
        v231 = 259;
        v229 = 257;
        sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
        v80 = v227;
        goto LABEL_119;
      }
      v80 = v227;
      if (v79 == 1)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
        v233 = 259;
        v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"record";
        v231 = 259;
        v228.__r_.__value_.__r.__words[0] = (std::string::size_type)"function";
        v229 = 259;
        sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
        goto LABEL_119;
      }
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
      v233 = 259;
      v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"Mrecord";
      v231 = 259;
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)"variable";
      v229 = 259;
      sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
      if ((v78 & 0x80) == 0)
        goto LABEL_119;
      v81 = v62[5];
      v82 = *(_DWORD *)(v81 + 8);
      if (!v81 || v82 != 2)
        goto LABEL_112;
      v83 = *(_BYTE *)(v81 + 72);
      if ((v83 & 1) != 0)
        break;
LABEL_114:
      if ((v83 & 2) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"writeOnly";
        v233 = 259;
        sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
        v84 = v62[5];
        if (*(_DWORD *)(v84 + 8) != 2)
          goto LABEL_119;
        v83 = *(_BYTE *)(v84 + 72);
      }
      if ((v83 & 4) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"constant";
        v233 = 259;
        sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
      }
LABEL_119:
      if ((v78 & 0x30) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"visibility";
        v233 = 259;
        sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
      }
      if ((v78 & 0x100) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"dsoLocal";
        v233 = 259;
        sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
      }
      if ((v78 & 0x200) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"canAutoHide";
        v233 = 259;
        sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
      }
      v85 = *(_DWORD *)(a3 + 16);
      v86 = *v80;
      if (v85)
      {
        v87 = v85 - 1;
        v88 = (37 * v86) & v87;
        v89 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v88);
        if (v86 == v89)
        {
LABEL_127:
          v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"preserved";
          v233 = 259;
          sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
          v86 = *v80;
        }
        else
        {
          v165 = 1;
          while (v89 != -1)
          {
            v166 = v88 + v165++;
            v88 = v166 & v87;
            v89 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v88);
            if (v86 == v89)
              goto LABEL_127;
          }
        }
      }
      v90 = (_QWORD *)*v69;
      if (!*v69)
        goto LABEL_139;
      v91 = v69;
      do
      {
        v92 = v90[4];
        v93 = v92 >= v86;
        if (v92 >= v86)
          v94 = v90;
        else
          v94 = v90 + 1;
        if (v93)
          v91 = v90;
        v90 = (_QWORD *)*v94;
      }
      while (*v94);
      if (v91 == v69 || v91[4] > v86)
LABEL_139:
        v91 = v69;
      if (v91 == v69)
        v95 = 0;
      else
        v95 = (unint64_t)(v91 + 4);
      v96 = v95 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133);
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"label";
      v233 = 259;
      v97 = v62[5];
      v98 = *(_DWORD *)(v97 + 8);
      if (!v98)
      {
        sub_1C5422CEC((uint64_t)&v249, v96);
        v3 = this;
        goto LABEL_225;
      }
      if (v98 == 1)
      {
        *((_BYTE *)&v250.__r_.__value_.__s + 23) = 6;
        strcpy((char *)&v250, "inst: ");
        std::to_string(&v249, *(_DWORD *)(v97 + 64));
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v99 = &v249;
        else
          v99 = (std::string *)v249.__r_.__value_.__r.__words[0];
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v249.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v249.__r_.__value_.__l.__size_;
        v101 = std::string::append(&v250, (const std::string::value_type *)v99, size);
        v102 = v101->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v228.__r_.__value_.__l.__data_ = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
        v228.__r_.__value_.__r.__words[2] = v102;
        v101->__r_.__value_.__l.__size_ = 0;
        v101->__r_.__value_.__r.__words[2] = 0;
        v101->__r_.__value_.__r.__words[0] = 0;
        v103 = std::string::append(&v228, ", ffl: ");
        v104 = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v230.__r_.__value_.__l.__data_ = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v230.__r_.__value_.__r.__words[2] = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        v105 = *(unsigned __int16 *)(v97 + 68);
        *(int8x8_t *)__s = vbsl_s8(vmovn_s16(vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v105), (int8x16_t)xmmword_1C8650FD0))), (int8x8_t)0x3030303030303030, (int8x8_t)0x3131313131313131);
        if ((v105 & 0x100) != 0)
          v106 = 49;
        else
          v106 = 48;
        __s[8] = v106;
        if ((v105 & 0x200) != 0)
          v107 = 49;
        else
          v107 = 48;
        __s[9] = v107;
        __s[10] = 0;
        v108 = strlen(__s);
        if (v108 >= 0x7FFFFFFFFFFFFFF8)
LABEL_426:
          abort();
        v109 = v108;
        if (v108 >= 0x17)
        {
          v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v108 | 7) != 0x17)
            v111 = v108 | 7;
          v112 = v111 + 1;
          p_dst = (void **)operator new(v111 + 1);
          v113 = v112 | 0x8000000000000000;
          v80 = v227;
          v247 = v109;
          v248 = v113;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v248) = v108;
          p_dst = (void **)&__dst;
          if (!v108)
            goto LABEL_167;
        }
        memcpy(p_dst, __s, v109);
LABEL_167:
        *((_BYTE *)p_dst + v109) = 0;
        if (v248 >= 0)
          v114 = (const std::string::value_type *)&__dst;
        else
          v114 = (const std::string::value_type *)__dst;
        if (v248 >= 0)
          v115 = HIBYTE(v248) & 0x7F;
        else
          v115 = v247;
        v116 = std::string::append(&v230, v114, v115);
        v117 = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)__s = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v254 = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v248) < 0)
          operator delete(__dst);
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v230.__r_.__value_.__l.__data_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v249.__r_.__value_.__l.__data_);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v250.__r_.__value_.__l.__data_);
        goto LABEL_183;
      }
      HIBYTE(v254) = 0;
      __s[0] = 0;
LABEL_183:
      sub_1C5422CEC((uint64_t)&v228, v96);
      v118 = std::string::append(&v228, "|");
      v119 = v118->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v230.__r_.__value_.__l.__data_ = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v230.__r_.__value_.__r.__words[2] = v119;
      v118->__r_.__value_.__l.__size_ = 0;
      v118->__r_.__value_.__r.__words[2] = 0;
      v118->__r_.__value_.__r.__words[0] = 0;
      LODWORD(v119) = *(_WORD *)(v97 + 12) & 0xF;
      v3 = this;
      switch((int)v119)
      {
        case 0:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 6;
          LODWORD(v250.__r_.__value_.__l.__data_) = 1702131813;
          v120 = 28274;
          goto LABEL_196;
        case 1:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 6;
          LODWORD(v250.__r_.__value_.__l.__data_) = 1700755041;
          v120 = 29816;
          goto LABEL_196;
        case 2:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 8;
          v122 = 0x65636E6F6B6E696CLL;
          goto LABEL_192;
        case 3:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v250, "linkonce_odr");
          v121 = 12;
          break;
        case 4:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v250, "weak");
          v121 = 4;
          break;
        case 5:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 8;
          v122 = 0x72646F5F6B616577;
          goto LABEL_192;
        case 6:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 9;
          strcpy((char *)&v250, "appending");
          v121 = 9;
          break;
        case 7:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 8;
          v122 = 0x6C616E7265746E69;
LABEL_192:
          v250.__r_.__value_.__r.__words[0] = v122;
          v121 = 8;
          v250.__r_.__value_.__s.__data_[8] = 0;
          break;
        case 8:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v250, "private");
          v121 = 7;
          break;
        case 9:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&v250, "extern_weak");
          v121 = 11;
          break;
        case 10:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 6;
          LODWORD(v250.__r_.__value_.__l.__data_) = 1835888483;
          v120 = 28271;
LABEL_196:
          WORD2(v250.__r_.__value_.__r.__words[0]) = v120;
          v121 = 6;
          v250.__r_.__value_.__s.__data_[6] = 0;
          break;
        default:
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 9;
          strcpy((char *)&v250, "<unknown>");
          v121 = 9;
          v3 = this;
          break;
      }
      v123 = std::string::append(&v230, (const std::string::value_type *)&v250, v121);
      v124 = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v249.__r_.__value_.__l.__data_ = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v249.__r_.__value_.__r.__words[2] = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      if (v254 >= 0)
        v125 = HIBYTE(v254) & 0x7F;
      else
        v125 = *(_QWORD *)&__s[8];
      if (v125)
      {
        *((_BYTE *)&v250.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v250, " (");
        if (v254 >= 0)
          v126 = __s;
        else
          v126 = *(char **)__s;
        v127 = std::string::append(&v250, v126, v125);
        v128 = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v228.__r_.__value_.__l.__data_ = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v228.__r_.__value_.__r.__words[2] = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        v129 = std::string::append(&v228, ")");
        v130 = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v230.__r_.__value_.__l.__data_ = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v230.__r_.__value_.__r.__words[2] = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = &v230;
        else
          v131 = (std::string *)v230.__r_.__value_.__r.__words[0];
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v132 = *((_BYTE *)&v230.__r_.__value_.__s + 23) & 0x7F;
        else
          v132 = v230.__r_.__value_.__l.__size_;
        std::string::append(&v249, (const std::string::value_type *)v131, v132);
        if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v230.__r_.__value_.__l.__data_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v250.__r_.__value_.__l.__data_);
      }
      std::string::append(&v249, "}");
      if (SHIBYTE(v254) < 0)
        operator delete(*(void **)__s);
LABEL_225:
      v231 = 260;
      v230.__r_.__value_.__r.__words[0] = (std::string::size_type)&v249;
      v229 = 257;
      sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v249.__r_.__value_.__l.__data_);
        if ((v78 & 0x80) == 0)
        {
LABEL_227:
          v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"fillcolor";
          v233 = 259;
          v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"red";
          v231 = 259;
          v133 = "dead";
LABEL_231:
          v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
          v229 = 259;
          sub_1C542260C((unint64_t *)v251, (llvm::Twine *)&v232, (llvm::Twine *)&v230, (unsigned __int8 *)&v228);
          goto LABEL_232;
        }
      }
      else if ((v78 & 0x80) == 0)
      {
        goto LABEL_227;
      }
      if ((v78 & 0x40) != 0)
      {
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"fillcolor";
        v233 = 259;
        v230.__r_.__value_.__r.__words[0] = (std::string::size_type)"yellow";
        v231 = 259;
        v133 = "not eligible to import";
        goto LABEL_231;
      }
LABEL_232:
      v134 = (_DWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v134 > 3uLL)
      {
        *v134 = 538976288;
        *((_QWORD *)v3 + 4) += 4;
        v135 = v3;
      }
      else
      {
        v135 = llvm::raw_ostream::write(v3, "    ", 4uLL);
      }
      sub_1C54227D4(&v230, __val, *v80);
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v230;
      else
        v136 = (std::string *)v230.__r_.__value_.__r.__words[0];
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = *((_BYTE *)&v230.__r_.__value_.__s + 23) & 0x7F;
      else
        v137 = v230.__r_.__value_.__l.__size_;
      v138 = llvm::raw_ostream::write(v135, (const char *)v136, v137);
      v139 = v138;
      v140 = (_BYTE *)*((_QWORD *)v138 + 4);
      if (*((_BYTE **)v138 + 3) == v140)
      {
        v139 = llvm::raw_ostream::write(v138, " ", 1uLL);
      }
      else
      {
        *v140 = 32;
        ++*((_QWORD *)v138 + 4);
      }
      v142 = *(const void ***)&v251[8];
      v141 = *(const void ***)v251;
      if (*(_QWORD *)v251 == *(_QWORD *)&v251[8])
      {
        v154 = 0;
        *((_BYTE *)&v228.__r_.__value_.__s + 23) = 0;
        v228.__r_.__value_.__s.__data_[0] = 0;
        v63 = v223;
      }
      else
      {
        *((_BYTE *)&v228.__r_.__value_.__s + 23) = 1;
        LOWORD(v228.__r_.__value_.__l.__data_) = 91;
        do
        {
          v143 = *((_BYTE *)v141 + 23);
          v144 = v143;
          v145 = v143 & 0x7F;
          if (v144 >= 0)
            v146 = v145;
          else
            v146 = (size_t)v141[1];
          sub_1C484371C((uint64_t)&v232, v146 + 1);
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = &v232;
          else
            v147 = (std::string *)v232.__r_.__value_.__r.__words[0];
          if (v146)
          {
            if (*((char *)v141 + 23) >= 0)
              v148 = v141;
            else
              v148 = *v141;
            memmove(v147, v148, v146);
          }
          *(_WORD *)((char *)&v147->__r_.__value_.__l.__data_ + v146) = 44;
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v149 = &v232;
          else
            v149 = (std::string *)v232.__r_.__value_.__r.__words[0];
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v150 = *((_BYTE *)&v232.__r_.__value_.__s + 23) & 0x7F;
          else
            v150 = v232.__r_.__value_.__l.__size_;
          std::string::append(&v228, (const std::string::value_type *)v149, v150);
          if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v232.__r_.__value_.__l.__data_);
          v141 += 3;
        }
        while (v141 != v142);
        v151 = v228.__r_.__value_.__l.__size_;
        if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v151 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
        v152 = &v228;
        if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v152 = (std::string *)v228.__r_.__value_.__r.__words[0];
        v153 = v151 - 1;
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          v228.__r_.__value_.__l.__size_ = v153;
        else
          *((_BYTE *)&v228.__r_.__value_.__s + 23) = v153 & 0x7F;
        v63 = v223;
        v152->__r_.__value_.__s.__data_[v153] = 0;
        std::string::append(&v228, "];");
        if (v252 >= 0)
          v155 = &v251[24];
        else
          v155 = *(const std::string::value_type **)&v251[24];
        if (v252 >= 0)
          v156 = HIBYTE(v252) & 0x7F;
        else
          v156 = v252;
        std::string::append(&v228, v155, v156);
        v154 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
      }
      v157 = v154 < 0;
      if (v154 >= 0)
        v158 = &v228;
      else
        v158 = (std::string *)v228.__r_.__value_.__r.__words[0];
      v159 = v154 & 0x7F;
      if (v157)
        v160 = v228.__r_.__value_.__l.__size_;
      else
        v160 = v159;
      v161 = llvm::raw_ostream::write(v139, (const char *)v158, v160);
      v162 = (_BYTE *)*((_QWORD *)v161 + 4);
      if (*((_BYTE **)v161 + 3) == v162)
      {
        llvm::raw_ostream::write(v161, "\n", 1uLL);
      }
      else
      {
        *v162 = 10;
        ++*((_QWORD *)v161 + 4);
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      if (SHIBYTE(v252) < 0)
        operator delete(*(void **)&v251[24]);
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
      sub_1C4765410((void ***)&v232);
      v163 = (_QWORD *)v62[1];
      if (v163)
      {
        do
        {
          v164 = v163;
          v163 = (_QWORD *)*v163;
        }
        while (v163);
      }
      else
      {
        do
        {
          v164 = (_QWORD *)v62[2];
          v20 = *v164 == (_QWORD)v62;
          v62 = v164;
        }
        while (!v20);
      }
      v62 = v164;
      if (v164 == v63)
        goto LABEL_307;
    }
    v232.__r_.__value_.__r.__words[0] = (std::string::size_type)"immutable";
    v233 = 259;
    sub_1C5422718((uint64_t)v251, (unsigned __int8 *)&v232);
    v81 = v62[5];
    v82 = *(_DWORD *)(v81 + 8);
LABEL_112:
    if (v82 != 2)
      goto LABEL_119;
    v83 = *(_BYTE *)(v81 + 72);
    goto LABEL_114;
  }
LABEL_25:
  v23 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v23 > 0x18uLL)
  {
    qmemcpy(v23, "  // Cross-module edges:\n", 25);
    *((_QWORD *)v3 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v3, "  // Cross-module edges:\n", 0x19uLL);
  }
  v24 = (char *)__p;
  v25 = v244;
  if (__p != v244)
  {
    do
    {
      v187 = sub_1C5423394((uint64_t)v241, (uint64_t *)v24 + 3);
      v188 = (unint64_t *)v187[1];
      v189 = (unint64_t *)v187[2];
      if (v188 == v189)
      {
        v190 = v187;
        v191 = *((_QWORD *)v24 + 3);
        v192 = v224;
        v193 = (_QWORD *)*v224;
        if (!*v224)
          goto LABEL_367;
        v194 = v224;
        do
        {
          v195 = v193[4];
          v196 = v195 >= v191;
          if (v195 >= v191)
            v197 = v193;
          else
            v197 = v193 + 1;
          if (v196)
            v194 = v193;
          v193 = (_QWORD *)*v197;
        }
        while (*v197);
        v192 = v224;
        if (v194 == v224 || v194[4] > v191)
LABEL_367:
          v194 = v192;
        v198 = *(unsigned __int8 *)(a1 + 133);
        if (v194 == v192)
          v199 = 0;
        else
          v199 = (unint64_t)(v194 + 4);
        std::to_string((std::string *)v251, *((_QWORD *)v24 + 3));
        v200 = this;
        v201 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v201 > 1uLL)
        {
          *v201 = 8224;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          v200 = llvm::raw_ostream::write(this, "  ", 2uLL);
        }
        if (v251[23] >= 0)
          v202 = v251;
        else
          v202 = *(const char **)v251;
        if (v251[23] >= 0)
          v203 = v251[23] & 0x7F;
        else
          v203 = *(_QWORD *)&v251[8];
        v204 = llvm::raw_ostream::write(v200, v202, v203);
        v205 = *((_QWORD *)v204 + 4);
        if ((unint64_t)(*((_QWORD *)v204 + 3) - v205) > 8)
        {
          *(_BYTE *)(v205 + 8) = 34;
          *(_QWORD *)v205 = *(_QWORD *)" [label=\"";
          *((_QWORD *)v204 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v204, " [label=\"", 9uLL);
        }
        v206 = v199 & 0xFFFFFFFFFFFFFFF8 | v198;
        if (v206 < 8)
          sub_1C5422EA4(&v232, v191);
        else
          sub_1C5422CEC((uint64_t)&v232, v206);
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v207 = &v232;
        else
          v207 = (std::string *)v232.__r_.__value_.__r.__words[0];
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v208 = *((_BYTE *)&v232.__r_.__value_.__s + 23) & 0x7F;
        else
          v208 = v232.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(this, (const char *)v207, v208);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        v209 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v209 > 0x19uLL)
        {
          qmemcpy(v209, "\"];
          *((_QWORD *)this + 4) += 26;
        }
        else
        {
          llvm::raw_ostream::write(this, "\"];
        }
        if ((v251[23] & 0x80000000) != 0)
          operator delete(*(void **)v251);
        v211 = (char *)v190[2];
        v210 = v190[3];
        if ((unint64_t)v211 >= v210)
        {
          v212 = (char *)v190[1];
          v213 = (v211 - v212) >> 3;
          v214 = v213 + 1;
          if ((unint64_t)(v213 + 1) >> 61)
            goto LABEL_426;
          v215 = v210 - (_QWORD)v212;
          if (v215 >> 2 > v214)
            v214 = v215 >> 2;
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v214;
          if (v216)
          {
            if (v216 >> 61)
              goto LABEL_427;
            v217 = (char *)operator new(8 * v216);
          }
          else
          {
            v217 = 0;
          }
          v218 = &v217[8 * v213];
          *(_QWORD *)v218 = -1;
          v189 = (unint64_t *)(v218 + 8);
          while (v211 != v212)
          {
            v219 = *((_QWORD *)v211 - 1);
            v211 -= 8;
            *((_QWORD *)v218 - 1) = v219;
            v218 -= 8;
          }
          v190[1] = (uint64_t)v218;
          v190[2] = (uint64_t)v189;
          v190[3] = (uint64_t)&v217[8 * v216];
          if (v212)
            operator delete(v212);
        }
        else
        {
          *(_QWORD *)v211 = -1;
          v189 = (unint64_t *)(v211 + 8);
        }
        v190[2] = (uint64_t)v189;
        v188 = (unint64_t *)v190[1];
      }
      while (v188 != v189)
      {
        if (*v188 != *(_QWORD *)v24)
          sub_1C5422ACC(*(llvm::raw_ostream **)v236, "  ", *(_QWORD *)v24, *((_QWORD *)v24 + 2), *v188, *((_QWORD *)v24 + 3), *((_DWORD *)v24 + 2));
        ++v188;
      }
      v24 += 32;
    }
    while (v24 != v25);
  }
  v26 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v26)
  {
    llvm::raw_ostream::write(this, "}", 1uLL);
  }
  else
  {
    *v26 = 125;
    ++*((_QWORD *)this + 4);
  }
  sub_1C6245068(v240[0]);
  v27 = v241[0];
  sub_1C624501C(v241[0], v242);
  MEMORY[0x1CAA32FB4](v27, 8);
  if (__p)
  {
    v244 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1C542260C(unint64_t *a1, llvm::Twine *a2, llvm::Twine *a3, unsigned __int8 *a4)
{
  void **v7;
  std::string::size_type v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  std::string v14;

  llvm::Twine::str(a2, &v14);
  std::string::append(&v14, "=\"");
  llvm::Twine::str(a3, __p);
  if (v13 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v13 >= 0)
    v8 = v13 & 0x7F;
  else
    v8 = (std::string::size_type)__p[1];
  std::string::append(&v14, (const std::string::value_type *)v7, v8);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::append(&v14, "\"");
  v9 = a1[1];
  if (v9 >= a1[2])
  {
    v11 = sub_1C4D9AEFC(a1, (uint64_t)&v14);
  }
  else
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1C47EBC30((_BYTE *)a1[1], v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
      *(_OWORD *)v9 = v10;
    }
    v11 = v9 + 24;
  }
  a1[1] = v11;
  sub_1C5422718((uint64_t)a1, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1C5422718(uint64_t a1, unsigned __int8 *a2)
{
  std::string *v3;
  void **v4;
  std::string::size_type v5;
  void *__p[2];
  char v7;

  if (a2[32] < 2u)
    return;
  v3 = (std::string *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_4;
LABEL_6:
    MEMORY[0x1CAA32ABC](a1 + 24, " // ");
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 47))
    goto LABEL_6;
LABEL_4:
  std::string::append((std::string *)(a1 + 24), ", ");
LABEL_7:
  llvm::Twine::str((llvm::Twine *)a2, __p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v7 >= 0)
    v5 = v7 & 0x7F;
  else
    v5 = (std::string::size_type)__p[1];
  std::string::append(v3, (const std::string::value_type *)v4, v5);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1C54227D4(std::string *retstr, unint64_t __val, unint64_t a3)
{
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;

  if (__val == -1)
  {
    std::to_string(retstr, a3);
  }
  else
  {
    *((_BYTE *)&v17.__r_.__value_.__s + 23) = 1;
    LOWORD(v17.__r_.__value_.__l.__data_) = 77;
    std::to_string(&v16, __val);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v16;
    else
      v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v16.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v17, (const std::string::value_type *)v5, size);
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v18, "_");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, a3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v15;
    else
      v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = *((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x7F;
    else
      v12 = v15.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v19, (const std::string::value_type *)v11, v12);
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    retstr->__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1C5422948(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  _QWORD *i;
  unint64_t v8;
  char **v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;

  for (i = *(_QWORD **)(*(_QWORD *)a1 + 8); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a3)
    {
      if (v8 >= a3)
      {
        sub_1C5422ACC(**(llvm::raw_ostream ***)(a1 + 24), "    ", **(_QWORD **)(a1 + 16), a2, **(_QWORD **)(a1 + 16), a3, a4);
        return;
      }
      ++i;
    }
  }
  v9 = *(char ***)(a1 + 8);
  v10 = **(_QWORD **)(a1 + 16);
  v12 = v9[1];
  v11 = (unint64_t)v9[2];
  if ((unint64_t)v12 >= v11)
  {
    v14 = *v9;
    v15 = (v12 - *v9) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      abort();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 59)
        sub_1C4764EE4();
      v19 = (char *)operator new(32 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[32 * v15];
    *(_QWORD *)v20 = v10;
    *((_DWORD *)v20 + 2) = a4;
    *((_QWORD *)v20 + 2) = a2;
    *((_QWORD *)v20 + 3) = a3;
    v13 = v20 + 32;
    if (v12 != v14)
    {
      do
      {
        v21 = *((_OWORD *)v12 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 32;
        v12 -= 32;
      }
      while (v12 != v14);
      v12 = *v9;
    }
    *v9 = v20;
    v9[1] = v13;
    v9[2] = &v19[32 * v18];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = v10;
    *((_DWORD *)v12 + 2) = a4;
    v13 = v12 + 32;
    *((_QWORD *)v12 + 2) = a2;
    *((_QWORD *)v12 + 3) = a3;
  }
  v9[1] = v13;
}

void sub_1C5422ACC(llvm::raw_ostream *a1, char *__s, unint64_t __val, unint64_t a4, unint64_t a5, unint64_t a6, int a7)
{
  uint64_t v12;
  size_t v14;
  void *v15;
  std::string *v16;
  size_t size;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  std::string *p_p;
  size_t v22;
  llvm::raw_ostream *v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  std::string __p;
  std::string v28;

  v12 = a7 + 4;
  if (__s)
  {
    v14 = strlen(__s);
    v15 = (void *)*((_QWORD *)a1 + 4);
    if (v14 <= *((_QWORD *)a1 + 3) - (_QWORD)v15)
    {
      if (v14)
      {
        memcpy(v15, __s, v14);
        *((_QWORD *)a1 + 4) += v14;
      }
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, __s, v14);
    }
  }
  sub_1C54227D4(&v28, __val, a4);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v28;
  else
    v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v28.__r_.__value_.__l.__size_;
  v18 = llvm::raw_ostream::write(a1, (const char *)v16, size);
  v19 = v18;
  v20 = (_DWORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v20 > 3uLL)
  {
    *v20 = 540945696;
    *((_QWORD *)v18 + 4) += 4;
  }
  else
  {
    v19 = llvm::raw_ostream::write(v18, " -> ", 4uLL);
  }
  sub_1C54227D4(&__p, a5, a6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = llvm::raw_ostream::write(v19, (const char *)p_p, v22);
  v24 = off_1E81688A0[v12];
  v25 = strlen(v24);
  v26 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (v25 <= *((_QWORD *)v23 + 3) - (_QWORD)v26)
  {
    if (v25)
    {
      memcpy(v26, v24, v25);
      v26 = (_BYTE *)(*((_QWORD *)v23 + 4) + v25);
      *((_QWORD *)v23 + 4) = v26;
    }
  }
  else
  {
    v23 = llvm::raw_ostream::write(v23, v24, v25);
    v26 = (_BYTE *)*((_QWORD *)v23 + 4);
  }
  if (*((_BYTE **)v23 + 3) == v26)
  {
    llvm::raw_ostream::write(v23, "\n", 1uLL);
  }
  else
  {
    *v26 = 10;
    ++*((_QWORD *)v23 + 4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1C5422CEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  size_t v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = (_QWORD *)a1;
  v3 = (unint64_t *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((a2 & 1) != 0)
  {
    v6 = v3[1];
    if ((*(_BYTE *)(v6 + 23) & 0x10) == 0)
      goto LABEL_22;
    v7 = ***(_QWORD ***)v6;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    v10 = v6 >> 4;
    if ((_DWORD)v9)
    {
      LODWORD(v11) = (v9 - 1) & (v10 ^ (v6 >> 9));
      v12 = (uint64_t *)(v8 + 16 * v11);
      v13 = *v12;
      if (*v12 == v6)
      {
        if (!*(_QWORD *)v12[1])
          goto LABEL_22;
LABEL_17:
        LODWORD(v16) = (v9 - 1) & (v10 ^ (v6 >> 9));
        v17 = (uint64_t *)(v8 + 16 * v16);
        v18 = *v17;
        if (*v17 == v6)
        {
LABEL_24:
          v21 = (size_t *)v17[1];
          v22 = *v21;
          v5 = v21 + 2;
          v4 = v22;
          goto LABEL_25;
        }
        v19 = 1;
        while (v18 != -4096)
        {
          v20 = v16 + v19++;
          v16 = v20 & (v9 - 1);
          v18 = *(_QWORD *)(v8 + 16 * v16);
          if (v18 == v6)
          {
            v17 = (uint64_t *)(v8 + 16 * v16);
            goto LABEL_24;
          }
        }
LABEL_23:
        v17 = (uint64_t *)(v8 + 16 * v9);
        goto LABEL_24;
      }
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v9 - 1);
        v13 = *(_QWORD *)(v8 + 16 * v11);
        if (v13 == v6)
          goto LABEL_15;
      }
    }
    v11 = v9;
LABEL_15:
    if (!**(_QWORD **)(v8 + 16 * v11 + 8))
      goto LABEL_22;
    if (!(_DWORD)v9)
      goto LABEL_23;
    goto LABEL_17;
  }
  v4 = v3[2];
  if (!v4)
  {
LABEL_22:
    sub_1C5422EA4((std::string *)a1, *v3);
    return;
  }
  v5 = (const void *)v3[1];
  if (!v5)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return;
  }
LABEL_25:
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v23 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v23 = v4 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    v2[1] = v4;
    v2[2] = v24 | 0x8000000000000000;
    *v2 = v25;
    v2 = v25;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v4;
    if (!v4)
      goto LABEL_33;
  }
  memmove(v2, v5, v4);
LABEL_33:
  *((_BYTE *)v2 + v4) = 0;
}

void sub_1C5422EA4(std::string *a1, unint64_t __val)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v5;
  std::string __p;
  std::string v7;

  *((_BYTE *)&v7.__r_.__value_.__s + 23) = 1;
  LOWORD(v7.__r_.__value_.__l.__data_) = 64;
  std::to_string(&__p, __val);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = std::string::append(&v7, (const std::string::value_type *)p_p, size);
  *a1 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

_QWORD *sub_1C5422F44(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C5422FFC(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_1C5422FFC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5423170(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C5423170(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5423170(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5423228(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5423228(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -1;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v9 = (37 * v8) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v13 = 0;
          v14 = 1;
          while (v11 != -1)
          {
            if (v13)
              v15 = 0;
            else
              v15 = v11 == -2;
            if (v15)
              v13 = v10;
            v16 = v9 + v14++;
            v9 = v16 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v16 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_8;
          }
          if (v13)
            v10 = v13;
        }
LABEL_8:
        v12 = a2[1];
        *v10 = v8;
        v10[1] = v12;
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

_QWORD *sub_1C54232F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_1C4E4FA7C(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1C4E4FA7C(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_1C5423394(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = (uint64_t *)(*(_QWORD *)a1 + 32 * v5);
    v7 = *result;
    if (*a2 == *result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = (uint64_t *)(*(_QWORD *)a1 + 32 * v5);
      v7 = *result;
      if (*a2 == *result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C542358C((uint64_t *)a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = (37 * *a2) & v14;
    result = (uint64_t *)(*(_QWORD *)a1 + 32 * v15);
    v16 = *result;
    if (*a2 == *result)
      goto LABEL_16;
    v17 = 0;
    v18 = 1;
    while (v16 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -2;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = (uint64_t *)(*(_QWORD *)a1 + 32 * v15);
      v16 = *result;
      if (v13 == *result)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C542358C((uint64_t *)a1, v4);
    v13 = *a2;
    v21 = *(_DWORD *)(a1 + 16) - 1;
    v22 = (37 * *a2) & v21;
    result = (uint64_t *)(*(_QWORD *)a1 + 32 * v22);
    v23 = *result;
    if (*a2 == *result)
      goto LABEL_16;
    v17 = 0;
    v24 = 1;
    while (v23 != -1)
    {
      if (v17)
        v25 = 0;
      else
        v25 = v23 == -2;
      if (v25)
        v17 = result;
      v26 = v22 + v24++;
      v22 = v26 & v21;
      result = (uint64_t *)(*(_QWORD *)a1 + 32 * v22);
      v23 = *result;
      if (v13 == *result)
        goto LABEL_16;
    }
LABEL_43:
    if (v17)
      result = v17;
  }
  v13 = *result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *sub_1C542358C(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((unint64_t)*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v16 = (37 * (_DWORD)v15) & v13;
          v17 = (unint64_t *)(*a1 + 32 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -1)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -2;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (unint64_t *)(*a1 + 32 * v16);
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v19)
              v17 = v19;
          }
LABEL_12:
          *v17 = v15;
          v17[1] = 0;
          v17[2] = 0;
          v17[3] = 0;
          *(_OWORD *)(v17 + 1) = *(_OWORD *)(v14 + 1);
          v17[3] = v14[3];
          ++v12;
          v14[1] = 0;
          v14[2] = 0;
          v14[3] = 0;
          *((_DWORD *)a1 + 2) = v12;
        }
        v14 += 4;
      }
      while (v14 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v23 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v23)
  {
    v24 = 32 * v23;
    do
    {
      *result = -1;
      result += 4;
      v24 -= 32;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C5423718()
{
  int v1;
  char v2;
  char *v3;
  __n128 __p;
  uint64_t v5;

  v2 = 1;
  v1 = 1;
  v3 = &v2;
  __p.n128_u64[0] = (unint64_t)"Propagate attributes in index";
  __p.n128_u64[1] = 29;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8048C0, "propagate-attrs", &v3, &v1, &__p);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8048C0, &dword_1C475E000);
  v2 = 1;
  v1 = 1;
  v3 = &v2;
  __p.n128_u64[0] = (unint64_t)"Import constant global variables with references";
  __p.n128_u64[1] = 48;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED830A70, "import-constants-with-refs", &v3, &v1, &__p);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830A70, &dword_1C475E000);
  __p = 0uLL;
  v5 = 0;
  sub_1C61B8460((__int128 *)&__p, (uint64_t)&llvm::FunctionSummary::ExternalNode);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1C61A847C, &llvm::FunctionSummary::ExternalNode, &dword_1C475E000);
}

BOOL llvm::Operator::hasPoisonGeneratingFlags(llvm::Operator *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  unsigned int v8;

  if (this && (v2 = *((unsigned __int8 *)this + 16), v2 > 0x1B))
    v3 = v2 - 28;
  else
    v3 = *((unsigned __int16 *)this + 9);
  if (v3 <= 0x22)
  {
    if (((1 << v3) & 0x202A000) != 0)
    {
      v5 = *((unsigned __int8 *)this + 17);
      if ((v5 & 2) != 0)
        return 1;
      else
        return (v5 >> 2) & 1;
    }
    if (((1 << v3) & 0xC180000) != 0)
      return (*((unsigned __int8 *)this + 17) >> 1) & 1;
    if (v3 == 34)
      return *((unsigned __int8 *)this + 17) > 1u;
  }
  v6 = sub_1C4774A9C((uint64_t)this);
  if (v6)
  {
    v8 = *((unsigned __int8 *)this + 17);
    if ((v8 & 4) != 0)
      v7 = 1;
    else
      v7 = (v8 >> 3) & 1;
  }
  return v6 & v7;
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  BOOL v1;
  uint64_t v2;

  v1 = *((_BYTE *)this + 16) != 62 || this == 0;
  v2 = 64;
  if (v1)
    v2 = 24;
  return *(_QWORD *)((char *)this + v2);
}

uint64_t llvm::GEPOperator::getResultElementType(llvm::GEPOperator *this)
{
  BOOL v1;
  uint64_t v2;

  v1 = *((_BYTE *)this + 16) != 62 || this == 0;
  v2 = 72;
  if (v1)
    v2 = 32;
  return *(_QWORD *)((char *)this + v2);
}

uint64_t llvm::GEPOperator::getMaxPreservedAlignment(llvm::GEPOperator *this, const llvm::DataLayout *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  llvm::UndefValue **v10;
  uint64_t v11;
  char *v13;
  llvm::UndefValue *AggregateElement;
  int v15;
  llvm::UndefValue *v16;
  unint64_t v17;
  llvm::StructLayout *StructLayout;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  const char *v30;
  char v31;
  char *v32;
  uint64_t v33;

  v3 = *((_BYTE *)this + 16) != 62 || this == 0;
  v4 = 64;
  if (v3)
    v4 = 24;
  v5 = *(_QWORD *)((char *)this + v4);
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (char *)*((_QWORD *)this - 1);
    v7 = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (char *)this - 32 * v7;
  }
  v9 = v5 | 4;
  v10 = (llvm::UndefValue **)(v8 + 32);
  v32 = v8 + 32;
  v33 = v9;
  if (v7 != 1)
  {
    v13 = &v8[32 * v7];
    LOBYTE(v11) = 32;
    while (1)
    {
      AggregateElement = *v10;
      v15 = *((unsigned __int8 *)*v10 + 16);
      v16 = v15 == 16 ? AggregateElement : 0;
      v17 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0 || !v17)
        break;
      StructLayout = llvm::DataLayout::getStructLayout(a2, (llvm::StructType *)(v33 & 0xFFFFFFFFFFFFFFF8));
      v19 = (unsigned int *)((char *)v16 + 24);
      if (*((_DWORD *)v16 + 8) >= 0x41u)
        v19 = *(unsigned int **)v19;
      v20 = *((_QWORD *)StructLayout + *v19 + 2);
LABEL_35:
      v11 = 63 - __clz((v20 | (1 << v11)) & -(v20 | (1 << v11)));
      sub_1C4774E38((uint64_t)&v32);
      v10 = (llvm::UndefValue **)v32;
      if (v32 == v13)
        return v11;
    }
    if (v16)
    {
      v21 = (uint64_t *)((char *)v16 + 24);
      if (*((_DWORD *)v16 + 8) >= 0x41u)
        v21 = (uint64_t *)*v21;
      v22 = *v21;
      if ((v33 & 4) == 0)
        goto LABEL_28;
    }
    else
    {
      v22 = 1;
      if ((v33 & 4) == 0)
        goto LABEL_28;
    }
    if (v17)
    {
LABEL_33:
      sub_1C4768AD0((uint64_t)a2, v17);
      v27 = (unint64_t)(v26 + 7) >> 3;
      v29 = v28 == 1;
      llvm::DataLayout::getAlignment((uint64_t)a2, v17);
      v20 = (((1 << v31) + v27 - 1) & -(1 << v31)) * v22;
      if (v29)
      goto LABEL_35;
    }
LABEL_28:
    if (v15 != 16)
      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
    v25 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
    v23 = (unsigned int *)((char *)AggregateElement + 24);
    v24 = v25;
    if (v23[2] < 0x41)
      v24 = v23;
    v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v24);
    goto LABEL_33;
  }
  return 32;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  llvm::UndefValue **v16;
  llvm::UndefValue **v17;
  llvm::UndefValue **v18;
  uint64_t v19;
  llvm::UndefValue *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(_QWORD *)(a1 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = a1 - 32 * v11;
  }
  v26 = v28;
  v27 = 0x600000000;
  v13 = 32 * v11 - 32;
  if (v13 >= 0xC1)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, (uint64_t)v13 >> 5, 8);
    v14 = v27;
    v16 = (llvm::UndefValue **)v26;
    v15 = v27;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = (llvm::UndefValue **)v28;
  }
  if (v11 != 1)
  {
    v17 = (llvm::UndefValue **)(v12 + 32);
    v18 = &v16[v14];
    v19 = 32 * v11 - 32;
    do
    {
      v20 = *v17;
      v17 += 4;
      *v18++ = v20;
      v19 -= 32;
    }
    while (v19);
    v16 = (llvm::UndefValue **)v26;
  }
  v21 = v15 + (v13 >> 5);
  LODWORD(v27) = v15 + (v13 >> 5);
  v22 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
  v23 = 64;
  if (v22)
    v23 = 24;
  v24 = llvm::GEPOperator::accumulateConstantOffset(*(_QWORD *)(a1 + v23), v16, v21, a2, a3, a4, a5);
  if (v26 != v28)
    free(v26);
  return v24;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::UndefValue **a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  llvm::UndefValue **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::UndefValue *AggregateElement;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  llvm::UndefValue *v19;
  llvm::StructType *v20;
  int v23;
  const void **v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  llvm::StructLayout *StructLayout;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *v34;
  unint64_t v35;
  llvm::UndefValue *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  const char *v44;
  char v45;
  char v46;
  int v47;
  llvm::UndefValue *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  const char *v56;
  char v57;
  char v58;
  void *v63;
  unsigned int v64;
  void *__src;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  llvm::UndefValue **v71;
  uint64_t v72;
  const void **v73[2];
  char v74;

  v74 = 0;
  v73[0] = (const void **)a5;
  v73[1] = (const void **)&v74;
  v71 = a2;
  v72 = a1 | 4;
  if (!a3)
    return 1;
  v8 = &a2[a3];
  while (1)
  {
    v9 = v72 & 4;
    v10 = v72 & 0xFFFFFFFFFFFFFFF8;
    if ((v72 & 4) != 0 && v10)
    {
      v11 = v72 & 0xFFFFFFFFFFFFFFF8;
      v12 = v72 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      AggregateElement = *a2;
      if (*a2)
        v14 = *((_BYTE *)*a2 + 16) == 16;
      else
        v14 = 0;
      if (!v14)
      {
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
        a2 = v71;
        v9 = v72 & 4;
      }
      v11 = v72 & 0xFFFFFFFFFFFFFFF8;
      v17 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v15 = (unsigned int *)((char *)AggregateElement + 24);
      v16 = v17;
      if (v15[2] < 0x41)
        v16 = v15;
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * *v16);
      v10 = v72 & 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *(unsigned __int8 *)(v12 + 8);
    v19 = *a2;
    v20 = v9 ? 0 : (llvm::StructType *)v10;
    if (!v19 || *((_BYTE *)v19 + 16) != 16)
      break;
    v24 = (const void **)((char *)v19 + 24);
    v25 = *((_DWORD *)v19 + 8);
    if (v25 > 0x40)
      v26 = llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v19 + 24)) == v25;
    else
      v26 = *v24 == 0;
    v27 = v26;
    if (v27)
      v23 = 4;
    else
      v23 = 1;
    if ((v27 & 1) != 0 || v18 == 19)
      goto LABEL_68;
    if (v20)
    {
      if (v25 >= 0x41)
        v24 = (const void **)*v24;
      v28 = *(unsigned int *)v24;
      StructLayout = llvm::DataLayout::getStructLayout(a4, v20);
      v30 = *(_DWORD *)(a5 + 8);
      v31 = *((_QWORD *)StructLayout + v28 + 2);
      v70 = v30;
      if (v30 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v69, v31, 0);
      }
      else
      {
        if (v30)
          v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
        else
          v32 = 0;
        v69 = (void *)(v32 & v31);
      }
      v33 = sub_1C54241A0(v73, (llvm::APInt *)&v69, 1);
      if (v70 >= 0x41)
      {
        v34 = v69;
        if (v69)
          goto LABEL_84;
      }
      goto LABEL_85;
    }
    v68 = v25;
    if (v25 > 0x40)
    {
      v67 = (void *)operator new[]();
      memcpy(v67, *v24, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8);
      v9 = v72 & 4;
      v10 = v72 & 0xFFFFFFFFFFFFFFF8;
      if ((v72 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
LABEL_74:
        if (v9)
          goto LABEL_80;
      }
    }
    else
    {
      v67 = (void *)*v24;
      if (v11)
        goto LABEL_74;
    }
    v48 = *v71;
    if (!*v71 || *((_BYTE *)v48 + 16) != 16)
      v48 = llvm::Constant::getAggregateElement(v48, 0);
    v51 = (unsigned int *)*((_QWORD *)v48 + 3);
    v49 = (unsigned int *)((char *)v48 + 24);
    v50 = v51;
    if (v49[2] < 0x41)
      v50 = v49;
    v10 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * *v50);
LABEL_80:
    sub_1C4768AD0((uint64_t)a4, v10);
    v53 = v52;
    v55 = v54 == 1;
    llvm::DataLayout::getAlignment((uint64_t)a4, v10);
    v58 = v57;
    if (v55)
    v33 = sub_1C54241A0(v73, (llvm::APInt *)&v67, ((1 << v58) + ((unint64_t)(v53 + 7) >> 3) - 1) & -(1 << v58));
    if (v68 >= 0x41)
    {
      v34 = v67;
      if (v67)
LABEL_84:
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    }
LABEL_85:
    if ((v33 & 1) == 0)
      return 0;
LABEL_86:
    sub_1C4843D7C((uint64_t)&v71);
    a2 = v71;
    if (v71 == v8)
      return 1;
  }
  if (a6)
  {
    if (!v20 && v18 != 19)
    {
      v23 = 1;
      v66 = 1;
      __src = 0;
      if (a6(a7))
      {
        v74 = 1;
        v64 = v66;
        if (v66 > 0x40)
        {
          v63 = (void *)operator new[]();
          memcpy(v63, __src, (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v63 = __src;
        }
        v35 = v72 & 0xFFFFFFFFFFFFFFF8;
        if ((v72 & 4) == 0 || !v35)
        {
          v36 = *v71;
          if (!*v71 || *((_BYTE *)v36 + 16) != 16)
            v36 = llvm::Constant::getAggregateElement(v36, 0);
          v39 = (unsigned int *)*((_QWORD *)v36 + 3);
          v37 = (unsigned int *)((char *)v36 + 24);
          v38 = v39;
          if (v37[2] < 0x41)
            v38 = v37;
          v35 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 8 * *v38);
        }
        sub_1C4768AD0((uint64_t)a4, v35);
        v41 = v40;
        v43 = v42 == 1;
        llvm::DataLayout::getAlignment((uint64_t)a4, v35);
        v46 = v45;
        if (v43)
        v47 = sub_1C54241A0(v73, (llvm::APInt *)&v63, ((1 << v46) + ((unint64_t)(v41 + 7) >> 3) - 1) & -(1 << v46));
        if (v64 >= 0x41 && v63)
          MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
        v23 = v47 ^ 1;
      }
      if (v66 >= 0x41)
      {
        if (__src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
LABEL_68:
      if ((v23 | 4) != 4)
        return 0;
      goto LABEL_86;
    }
  }
  return 0;
}

uint64_t sub_1C54241A0(const void ***a1, llvm::APInt *this, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void **v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  const void *v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;

  v6 = *((_DWORD *)*a1 + 2);
  v7 = *((_DWORD *)this + 2);
  if (v7 < v6)
  {
    llvm::APInt::sext(this, v6, (llvm::APInt *)&v31);
  }
  else if (v7 > v6)
  {
    llvm::APInt::trunc(this, v6, (llvm::APInt *)&v31);
  }
  else
  {
    sub_1C5DD14E0((uint64_t)&v31, (uint64_t)this);
  }
  if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
  *(_QWORD *)this = v31;
  *((_DWORD *)this + 2) = v32;
  v8 = *((_DWORD *)*a1 + 2);
  v32 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, a3, 0);
  }
  else
  {
    if (v8)
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    else
      v9 = 0;
    v31 = v9 & a3;
  }
  if (!*(_BYTE *)a1[1])
  {
    llvm::APInt::operator*((uint64_t)this, &v31, (uint64_t)&v29);
    v10 = (uint64_t *)*a1;
    v11 = *((unsigned int *)*a1 + 2);
    if (v11 >= 0x41)
    {
      v18 = 0;
      v19 = 0;
      v20 = *v10;
      v12 = v29;
      v21 = (unint64_t)(v11 + 63) >> 6;
      do
      {
        v22 = *(_QWORD *)(v20 + v18);
        v23 = *(_QWORD *)(v12 + v18) + v22;
        v24 = v23 < v22;
        v25 = v23 + 1 <= v22;
        if (v19)
        {
          ++v23;
          v19 = v25;
        }
        else
        {
          v19 = v24;
        }
        *(_QWORD *)(v20 + v18) = v23;
        v18 += 8;
      }
      while (8 * v21 != v18);
      *(_QWORD *)(*v10 + 8 * (v21 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
    else
    {
      v12 = v29;
      if ((_DWORD)v11)
        v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      else
        v13 = 0;
      *v10 = v13 & (*v10 + v29);
    }
    if (v30 >= 0x41 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    goto LABEL_33;
  }
  v28 = 0;
  llvm::APInt::smul_ov((const void **)this, (const llvm::APInt *)&v31, &v28, (llvm::APInt *)&v29);
  if (!v28)
  {
    llvm::APInt::sadd_ov(*a1, (const llvm::APInt *)&v29, &v28, (uint64_t)&v26);
    v14 = *a1;
    if (*((_DWORD *)v14 + 2) >= 0x41u && *v14)
      MEMORY[0x1CAA32F9C](*v14, 0x1000C8000313F17);
    *v14 = v26;
    *((_DWORD *)v14 + 2) = v27;
    v15 = v28;
    if (v30 >= 0x41 && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    if (v15)
      goto LABEL_32;
LABEL_33:
    v16 = 1;
    goto LABEL_34;
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
LABEL_32:
  v16 = 0;
LABEL_34:
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  return v16;
}

uint64_t llvm::GEPOperator::collectOffset(uint64_t a1, llvm::DataLayout *this, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::UndefValue **v13;
  llvm::UndefValue **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  llvm::UndefValue *AggregateElement;
  BOOL v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  int v25;
  llvm::UndefValue *v26;
  llvm::StructType *v27;
  BOOL v29;
  unsigned int v30;
  llvm::UndefValue *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  const char *v39;
  char v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  const void **v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  llvm::UndefValue *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  const char *v66;
  char v67;
  char v68;
  int v69;
  int64_t v70;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BOOL4 v81;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  void *v90;
  unsigned int v91;
  uint64_t *v92;
  unsigned int v93;
  llvm::UndefValue *v94;
  llvm::UndefValue **v95;
  uint64_t v96;
  unsigned int *v97[2];
  unsigned int v98;

  v98 = a3;
  v97[0] = &v98;
  v97[1] = a5;
  v6 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
  v7 = 64;
  if (v6)
    v7 = 24;
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0)
  {
    v11 = *(_QWORD *)(a1 - 8);
    v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    v10 = v9 & 0x7FFFFFF;
    v11 = a1 - 32 * v10;
  }
  v12 = v8 | 4;
  v13 = (llvm::UndefValue **)(v11 + 32);
  v95 = (llvm::UndefValue **)(v11 + 32);
  v96 = v12;
  if (v10 == 1)
    return 1;
  v15 = (llvm::UndefValue **)(v11 + 32 * v10);
  while (1)
  {
    v16 = v96 & 4;
    v17 = v96 & 0xFFFFFFFFFFFFFFF8;
    if ((v96 & 4) != 0 && v17)
    {
      v18 = v96 & 0xFFFFFFFFFFFFFFF8;
      v19 = v96 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      AggregateElement = *v13;
      if (*v13)
        v21 = *((_BYTE *)*v13 + 16) == 16;
      else
        v21 = 0;
      if (!v21)
      {
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
        v13 = v95;
        v16 = v96 & 4;
      }
      v18 = v96 & 0xFFFFFFFFFFFFFFF8;
      v24 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v22 = (unsigned int *)((char *)AggregateElement + 24);
      v23 = v24;
      if (v22[2] < 0x41)
        v23 = v22;
      v19 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v23);
      v17 = v96 & 0xFFFFFFFFFFFFFFF8;
    }
    v25 = *(unsigned __int8 *)(v19 + 8);
    v94 = 0;
    v26 = *v13;
    v94 = *v13;
    v27 = v16 ? 0 : (llvm::StructType *)v17;
    if (!v26 || *((_BYTE *)v26 + 16) != 16)
      break;
    v51 = (const void **)((char *)v26 + 24);
    v52 = *((_DWORD *)v26 + 8);
    if (v52 > 0x40)
      v53 = llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v26 + 24)) == v52;
    else
      v53 = *v51 == 0;
    v54 = v53;
    if ((v54 & 1) == 0 && v25 != 19)
    {
      if (v27)
      {
        if (v52 >= 0x41)
          v51 = (const void **)*v51;
        v55 = *(unsigned int *)v51;
        v56 = *((_QWORD *)llvm::DataLayout::getStructLayout(this, v27) + v55 + 2);
        v93 = v98;
        if (v98 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v92, v56, 0);
        }
        else
        {
          if (v98)
            v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v98;
          else
            v57 = 0;
          v92 = (uint64_t *)(v57 & v56);
        }
        sub_1C5424A6C(v97, (llvm::APInt *)&v92, 1);
        if (v93 < 0x41)
          goto LABEL_97;
        v50 = v92;
        if (!v92)
          goto LABEL_97;
        goto LABEL_96;
      }
      v91 = v52;
      if (v52 > 0x40)
      {
        v90 = (void *)operator new[]();
        memcpy(v90, *v51, (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8);
        v16 = v96 & 4;
        v17 = v96 & 0xFFFFFFFFFFFFFFF8;
        if ((v96 & 0xFFFFFFFFFFFFFFF8) != 0)
          goto LABEL_86;
        goto LABEL_87;
      }
      v90 = (void *)*v51;
      if (!v18)
        goto LABEL_87;
LABEL_86:
      if (!v16)
      {
LABEL_87:
        v58 = *v95;
        if (!*v95 || *((_BYTE *)v58 + 16) != 16)
          v58 = llvm::Constant::getAggregateElement(v58, 0);
        v61 = (unsigned int *)*((_QWORD *)v58 + 3);
        v59 = (unsigned int *)((char *)v58 + 24);
        v60 = v61;
        if (v59[2] < 0x41)
          v60 = v59;
        v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v60);
      }
      sub_1C4768AD0((uint64_t)this, v17);
      v63 = v62;
      v65 = v64 == 1;
      llvm::DataLayout::getAlignment((uint64_t)this, v17);
      v68 = v67;
      if (v65)
      sub_1C5424A6C(v97, (llvm::APInt *)&v90, ((1 << v68) + ((unint64_t)(v63 + 7) >> 3) - 1) & -(1 << v68));
      if (v91 < 0x41)
        goto LABEL_97;
      v50 = (uint64_t *)v90;
      if (!v90)
        goto LABEL_97;
LABEL_96:
      MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
      goto LABEL_97;
    }
    if (!v54)
      return 0;
LABEL_97:
    sub_1C4774E38((uint64_t)&v95);
    v13 = v95;
    if (v95 == v15)
      return 1;
  }
  if (v27)
    v29 = 1;
  else
    v29 = v25 == 19;
  if (!v29)
  {
    v30 = v98;
    if (!v18 || !v16)
    {
      v31 = *v13;
      if (!*v13 || *((_BYTE *)v31 + 16) != 16)
        v31 = llvm::Constant::getAggregateElement(v31, 0);
      v34 = (unsigned int *)*((_QWORD *)v31 + 3);
      v32 = (unsigned int *)((char *)v31 + 24);
      v33 = v34;
      if (v32[2] < 0x41)
        v33 = v32;
      v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v33);
    }
    sub_1C4768AD0((uint64_t)this, v17);
    v36 = v35;
    v38 = v37 == 1;
    llvm::DataLayout::getAlignment((uint64_t)this, v17);
    v41 = v40;
    if (v38)
    v42 = ((1 << v41) + ((unint64_t)(v36 + 7) >> 3) - 1) & -(1 << v41);
    v89 = v30;
    if (v30 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v88, v42, 0);
      v30 = v89;
      if (v89 > 0x40)
      {
        v69 = 0;
        v70 = ((unint64_t)v89 + 63) >> 6;
        v44 = (uint64_t *)v88;
        do
        {
          if (v70-- < 1)
            break;
          v72 = *(_QWORD *)(v88 + 8 * v70);
          v69 += __clz(v72);
        }
        while (!v72);
        v73 = v89 | 0xFFFFFFC0;
        if ((v89 & 0x3F) == 0)
          v73 = 0;
        if (v69 + v73 == v89)
          goto LABEL_59;
        goto LABEL_48;
      }
      v44 = (uint64_t *)v88;
    }
    else
    {
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
      if (!v30)
        v43 = 0;
      v44 = (uint64_t *)(v43 & v42);
      v88 = v43 & v42;
    }
    if (!v44)
      goto LABEL_97;
LABEL_48:
    v45 = v98;
    v84 = v98;
    if (v98 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
      v45 = v84;
      v46 = v83;
    }
    else
    {
      v46 = 0;
    }
    v87 = v45;
    v85 = (uint64_t)v94;
    v86 = v46;
    sub_1C624515C(a4, (uint64_t)&v85);
    if (v87 >= 0x41 && v86)
      MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
    v47 = sub_1C6245218(a4, (uint64_t *)&v94);
    v48 = *(unsigned int *)(v47 + 8);
    if (v48 >= 0x41)
    {
      v74 = 0;
      v75 = *(unint64_t **)v47;
      v76 = (unint64_t)(v48 + 63) >> 6;
      v77 = v44;
      v78 = v76;
      do
      {
        v79 = *v77++;
        v80 = v79 + *v75;
        v81 = v80 + 1 <= *v75;
        if (v74)
        {
          ++v80;
          v74 = v81;
        }
        else
        {
          v74 = v80 < *v75;
        }
        *v75++ = v80;
        --v78;
      }
      while (v78);
      *(_QWORD *)(*(_QWORD *)v47 + 8 * (v76 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
    }
    else
    {
      if ((_DWORD)v48)
        v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
      else
        v49 = 0;
      *(_QWORD *)v47 = v49 & ((unint64_t)v44 + *(_QWORD *)v47);
    }
    if (v30 < 0x41)
      goto LABEL_97;
LABEL_59:
    if (v44)
    {
      v50 = v44;
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  return 0;
}

uint64_t sub_1C5424A6C(unsigned int **a1, llvm::APInt *this, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;

  v6 = **a1;
  v7 = *((_DWORD *)this + 2);
  if (v7 < v6)
  {
    llvm::APInt::sext(this, v6, (llvm::APInt *)&v24);
  }
  else if (v7 > v6)
  {
    llvm::APInt::trunc(this, v6, (llvm::APInt *)&v24);
  }
  else
  {
    sub_1C5DD14E0((uint64_t)&v24, (uint64_t)this);
  }
  if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
  *(_QWORD *)this = v24;
  *((_DWORD *)this + 2) = v25;
  v8 = **a1;
  v25 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, a3, 0);
  }
  else
  {
    if (v8)
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    else
      v9 = 0;
    v24 = v9 & a3;
  }
  llvm::APInt::operator*((uint64_t)this, &v24, (uint64_t)&v22);
  v10 = a1[1];
  v11 = v10[2];
  if (v11 >= 0x41)
  {
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)v10;
    result = v22;
    v17 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      v18 = *(_QWORD *)(v16 + v14);
      v19 = *(_QWORD *)(result + v14) + v18;
      v20 = v19 < v18;
      v21 = v19 + 1 <= v18;
      if (v15)
      {
        ++v19;
        v15 = v21;
      }
      else
      {
        v15 = v20;
      }
      *(_QWORD *)(v16 + v14) = v19;
      v14 += 8;
    }
    while (8 * v17 != v14);
    *(_QWORD *)(*(_QWORD *)v10 + 8 * (v17 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  }
  else
  {
    result = v22;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    *(_QWORD *)v10 = v13 & (*(_QWORD *)v10 + v22);
  }
  if (v23 >= 0x41 && result)
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  if (v25 >= 0x41)
  {
    result = v24;
    if (v24)
      return MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  }
  return result;
}

llvm::raw_ostream *llvm::FastMathFlags::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  const char *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;

  if (*(_DWORD *)this == -1)
  {
    v3 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v3) <= 4)
    {
      v4 = " fast";
      v5 = a2;
      v6 = 5;
      return llvm::raw_ostream::write(v5, v4, v6);
    }
    *(_BYTE *)(v3 + 4) = 116;
    *(_DWORD *)v3 = 1935762976;
    v13 = *((_QWORD *)a2 + 4) + 5;
LABEL_24:
    *((_QWORD *)a2 + 4) = v13;
    return this;
  }
  v7 = this;
  if ((*(_DWORD *)this & 1) != 0)
  {
    v15 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0x636F737361657220;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " reassoc", 8uLL);
    }
  }
  if ((*(_BYTE *)v7 & 2) != 0)
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 110;
      *(_DWORD *)v9 = 1634627104;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " nnan", 5uLL);
    }
  }
  if ((*(_BYTE *)v7 & 4) != 0)
  {
    v10 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 4)
    {
      *(_BYTE *)(v10 + 4) = 102;
      *(_DWORD *)v10 = 1852403232;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " ninf", 5uLL);
    }
  }
  if ((*(_BYTE *)v7 & 8) != 0)
  {
    v11 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 3uLL)
    {
      *v11 = 2054385184;
      *((_QWORD *)a2 + 4) += 4;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " nsz", 4uLL);
    }
  }
  if ((*(_BYTE *)v7 & 0x10) != 0)
  {
    v8 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 4)
    {
      *(_BYTE *)(v8 + 4) = 112;
      *(_DWORD *)v8 = 1668440352;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " arcp", 5uLL);
    }
  }
  if ((*(_BYTE *)v7 & 0x20) != 0)
  {
    v12 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 116;
      *(_QWORD *)v12 = *(_QWORD *)" contract";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " contract", 9uLL);
    }
  }
  if ((*(_BYTE *)v7 & 0x40) != 0)
  {
    v14 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 3uLL)
    {
      v4 = " afn";
      v5 = a2;
      v6 = 4;
      return llvm::raw_ostream::write(v5, v4, v6);
    }
    *v14 = 1852203296;
    v13 = *((_QWORD *)a2 + 4) + 4;
    goto LABEL_24;
  }
  return this;
}

char *sub_1C5424F20(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  unint64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v18[5];

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v7 = a1[2];
  if (0x5555555555555556 * ((v7 - v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((v7 - v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v2) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  v18[4] = a1 + 2;
  if (v8 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v10 = (char *)operator new(24 * v8);
  v11 = &v10[24 * v4];
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = v12;
  *(_DWORD *)(a2 + 16) = 0;
  v13 = v11;
  if (v3 != v2)
  {
    v14 = 0;
    do
    {
      v15 = &v11[v14];
      *((_QWORD *)v15 - 3) = *(_QWORD *)&v3[v14 - 24];
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v3[v14 - 8];
      *((_QWORD *)v15 - 2) = *(_QWORD *)&v3[v14 - 16];
      *(_DWORD *)&v3[v14 - 8] = 0;
      v14 -= 24;
    }
    while (&v3[v14] != v2);
    v13 = &v11[v14];
  }
  v16 = v11 + 24;
  *a1 = v13;
  a1[1] = v11 + 24;
  a1[2] = &v10[24 * v8];
  v18[2] = v3;
  v18[3] = v7;
  v18[0] = v2;
  v18[1] = v2;
  sub_1C62453B0((uint64_t)v18);
  return v16;
}

BOOL sub_1C5425068(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0x7FFFFFFF;
}

void sub_1C5425080()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5425094()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8168928;
  return result;
}

void sub_1C54250B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8168928;
}

void sub_1C54250D0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v4;

  v2 = *a2;
  if (!atomic_load((unint64_t *)&llvm::OptBisector))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
  v4 = llvm::OptBisector;
  *(_DWORD *)(llvm::OptBisector + 8) = v2;
  *(_DWORD *)(v4 + 12) = 0;
}

uint64_t sub_1C5425124(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (**v5)(void);
  uint64_t result;
  uint64_t (**v7)(void);
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)a1[3];
  if (v1)
  {
    if (v1 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      v2 = v9;
    }
    else
    {
      v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v1 + 16))(a1[3]);
      v9 = v2;
    }
    v11 = 0;
    if (v2)
    {
      v3 = operator new(0x28uLL);
      v4 = v3;
      *v3 = &off_1E8168970;
      if (v2 == v8)
      {
        v3[4] = v3 + 1;
        (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
      }
      else
      {
        v3[4] = v2;
        v9 = 0;
      }
      v11 = v4;
    }
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  sub_1C624578C(qword_1ED804A20, v10);
  if (v11 == v10)
  {
    v5 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v5 = (void (**)(void))(*v11 + 40);
  }
  (*v5)();
LABEL_16:
  result = (uint64_t)v9;
  if (v9 == v8)
  {
    v7 = (uint64_t (**)(void))(v8[0] + 32);
  }
  else
  {
    if (!v9)
      return result;
    v7 = (uint64_t (**)(void))(*v9 + 40);
  }
  return (*v7)();
}

uint64_t sub_1C5425290()
{
  _QWORD *v0;
  void (**v1)(_QWORD *);
  void (**v2)(void);
  __n128 v4;
  int v5;
  int *v6;
  int v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 1;
  v6 = (int *)&llvm::OptBisect::Disabled;
  v5 = 0;
  v8[0] = &off_1E8168928;
  v9 = v8;
  v11 = v10;
  v10[0] = &off_1E8168928;
  v4.n128_u64[0] = (unint64_t)"Maximum optimization to perform";
  v4.n128_u64[1] = 31;
  sub_1C6245638(&v7, &v6, &v5, v10, &v4);
  v0 = v11;
  if (v11 == v10)
  {
    v1 = (void (**)(_QWORD *))(v10[0] + 32);
    v0 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v1 = (void (**)(_QWORD *))(*v11 + 40);
  }
  (*v1)(v0);
LABEL_6:
  if (v9 == v8)
  {
    v2 = (void (**)(void))(v8[0] + 32);
    goto LABEL_10;
  }
  if (v9)
  {
    v2 = (void (**)(void))(*v9 + 40);
LABEL_10:
    (*v2)();
  }
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED804980, &dword_1C475E000);
}

void llvm::Pass::~Pass(llvm::Pass *this)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)this = off_1E8168CF0;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x1CAA32FC0](v1, 0x20C40DC1BFBCFLL);
  }
}

uint64_t llvm::ModulePass::getPotentialPassManagerType(llvm::ModulePass *this)
{
  return 1;
}

uint64_t llvm::ModulePass::skipModule(llvm::ModulePass *this, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  void **v19;
  void *v20;
  void *__p[2];
  uint64_t v24;
  std::string __dst;
  std::string v26;

  v4 = **a2;
  v5 = *(_QWORD *)(v4 + 2672);
  if (!v5)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
    v5 = llvm::OptBisector;
    *(_QWORD *)(v4 + 2672) = llvm::OptBisector;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
    return 0;
  v6 = *((_BYTE *)a2 + 191);
  if (v6 >= 0)
    v7 = (char *)(a2 + 21);
  else
    v7 = (char *)a2[21];
  if (v7)
  {
    v8 = v6;
    v9 = v6 & 0x7F;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = (std::string::size_type)a2[22];
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (!v10)
        goto LABEL_20;
    }
    memmove(p_dst, v7, v10);
LABEL_20:
    p_dst->__r_.__value_.__s.__data_[v10] = 0;
    goto LABEL_21;
  }
  memset(&__dst, 0, sizeof(__dst));
LABEL_21:
  v15 = std::string::insert(&__dst, 0, "module (");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v26, ")");
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v24 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v24 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if (v24 >= 0)
    v20 = (void *)(HIBYTE(v24) & 0x7F);
  else
    v20 = __p[1];
  v12 = (*(unsigned int (**)(uint64_t, llvm::ModulePass *, void **, void *))(*(_QWORD *)v5 + 16))(v5, this, v19, v20) ^ 1;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  return v12;
}

BOOL llvm::Pass::mustPreserveAnalysisID(llvm::Pass *this, char *a2)
{
  return llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), a2, 1) != 0;
}

const char *llvm::Pass::getPassName(llvm::Pass *this)
{
  uint64_t v1;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 2);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v3 = qword_1ED830BC0[0];
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
  v4 = *(_DWORD *)(v3 + 192);
  if (!v4)
  {
LABEL_10:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v3);
    return "Unnamed pass: implement Pass::getPassName()";
  }
  v5 = *(_QWORD *)(v3 + 176);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((v1 >> 4) ^ (v1 >> 9));
  v8 = *(_QWORD *)(v5 + 16 * v7);
  if (v8 != v1)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v8 == v1)
        goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_8:
  v11 = *(_QWORD *)(v5 + 16 * v7 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v3);
  if (v11)
    return *(const char **)v11;
  return "Unnamed pass: implement Pass::getPassName()";
}

uint64_t llvm::Pass::getAsImmutablePass(llvm::Pass *this)
{
  return 0;
}

uint64_t llvm::Pass::getAsPMDataManager(llvm::Pass *this)
{
  return 0;
}

uint64_t llvm::Pass::setResolver(uint64_t this, llvm::AnalysisResolver *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

void llvm::ImmutablePass::~ImmutablePass(llvm::ImmutablePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::FunctionPass::getPotentialPassManagerType(llvm::FunctionPass *this)
{
  return 3;
}

uint64_t llvm::FunctionPass::skipFunction(llvm::FunctionPass *this, const llvm::Function *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::Function *v12;
  int v13;
  int v14;
  unint64_t *v15;
  std::string::size_type v16;
  const void *v17;
  unint64_t v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  void **v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v34;
  std::string __dst;
  std::string v36;

  v4 = **(uint64_t ***)a2;
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 2672);
  if (!v6)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
    v6 = llvm::OptBisector;
    *(_QWORD *)(v5 + 2672) = llvm::OptBisector;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
    goto LABEL_31;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_19;
  }
  v7 = ***(_QWORD ***)a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v11 = v8 + 16 * v10;
    v12 = *(const llvm::Function **)v11;
    if (*(const llvm::Function **)v11 == a2)
      goto LABEL_11;
    v13 = 1;
    while (v12 != (const llvm::Function *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(const llvm::Function **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = v8 + 16 * v10;
        goto LABEL_11;
      }
    }
  }
  v11 = v8 + 16 * v9;
LABEL_11:
  v15 = *(unint64_t **)(v11 + 8);
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_18;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_18:
    memmove(p_dst, v17, v16);
LABEL_19:
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  v22 = std::string::insert(&__dst, 0, "function (");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v36, ")");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v34 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v34 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if (v34 >= 0)
    v27 = (void *)(HIBYTE(v34) & 0x7F);
  else
    v27 = __p[1];
  v28 = (*(uint64_t (**)(uint64_t, llvm::FunctionPass *, void **, void *))(*(_QWORD *)v6 + 16))(v6, this, v26, v27);
  v29 = v28;
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if (v28)
      goto LABEL_31;
    return 1;
  }
  operator delete(__p[0]);
  if (!v29)
    return 1;
LABEL_31:
  v30 = *((_QWORD *)a2 + 14);
  if (v30)
    return (*(unsigned __int8 *)(v30 + 17) >> 3) & 1;
  else
    return 0;
}

uint64_t llvm::Pass::lookupPassInfo(unsigned __int8 *a1, size_t a2)
{
  size_t v2;
  unsigned __int8 *v3;

  v2 = a2;
  v3 = a1;
  if (!atomic_load(qword_1ED830BC0))
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v2 = a2;
    v3 = a1;
  }
  return llvm::PassRegistry::getPassInfo(qword_1ED830BC0[0], v3, v2);
}

uint64_t llvm::Pass::createPass(llvm::Pass *this, const void *a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Pass *v9;
  int v10;
  int v11;
  uint64_t v12;

  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)qword_1ED830BC0[0]);
  v5 = *(_DWORD *)(v4 + 192);
  if (!v5)
  {
LABEL_10:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v4);
    return 0;
  }
  v6 = *(_QWORD *)(v4 + 176);
  v7 = v5 - 1;
  v8 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
  v9 = *(llvm::Pass **)(v6 + 16 * v8);
  if (v9 != this)
  {
    v10 = 1;
    while (v9 != (llvm::Pass *)-4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(llvm::Pass **)(v6 + 16 * v8);
      if (v9 == this)
        goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_8:
  v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v4);
  if (v12)
    return (*(uint64_t (**)(void))(v12 + 72))();
  return 0;
}

uint64_t llvm::RegisterAGBase::RegisterAGBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (!atomic_load(qword_1ED830BC0))
  {
    v11 = a6;
    v9 = a5;
    v10 = a4;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    a5 = v9;
    a4 = v10;
    a6 = v11;
  }
  llvm::PassRegistry::registerAnalysisGroup(qword_1ED830BC0[0], a4, a5, (_QWORD *)a1, a6, 0);
  return a1;
}

{
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (!atomic_load(qword_1ED830BC0))
  {
    v11 = a6;
    v9 = a5;
    v10 = a4;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    a5 = v9;
    a4 = v10;
    a6 = v11;
  }
  llvm::PassRegistry::registerAnalysisGroup(qword_1ED830BC0[0], a4, a5, (_QWORD *)a1, a6, 0);
  return a1;
}

void llvm::PassRegistrationListener::enumeratePasses(llvm::PassRegistrationListener *this)
{
  llvm::PassRegistrationListener *v1;

  v1 = this;
  if (!atomic_load(qword_1ED830BC0))
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    v1 = this;
  }
  llvm::PassRegistry::enumerateWith(qword_1ED830BC0[0], (uint64_t)v1);
}

llvm::PassNameParser *llvm::PassNameParser::PassNameParser(llvm::PassNameParser *this, llvm::cl::Option *a2)
{
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x800000000;
  *(_QWORD *)this = &off_1E81689B8;
  *((_QWORD *)this + 1) = &unk_1E81689F8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::addRegistrationListener(qword_1ED830BC0[0], (uint64_t)this);
  return this;
}

{
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x800000000;
  *(_QWORD *)this = &off_1E81689B8;
  *((_QWORD *)this + 1) = &unk_1E81689F8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::addRegistrationListener(qword_1ED830BC0[0], (uint64_t)this);
  return this;
}

void llvm::PassNameParser::~PassNameParser(llvm::PassNameParser *this)
{
  char *v2;

  *((_QWORD *)this + 1) = &off_1E8168C30;
  v2 = (char *)*((_QWORD *)this + 3);
  if (v2 != (char *)this + 40)
    free(v2);
}

{
  char *v2;

  *((_QWORD *)this + 1) = &off_1E8168C30;
  v2 = (char *)*((_QWORD *)this + 3);
  if (v2 != (char *)this + 40)
    free(v2);
}

{
  char *v2;

  *((_QWORD *)this + 1) = &off_1E8168C30;
  v2 = (char *)*((_QWORD *)this + 3);
  if (v2 != (char *)this + 40)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void `non-virtual thunk to'llvm::PassNameParser::~PassNameParser(llvm::PassNameParser *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E8168C30;
  v2 = (char *)*((_QWORD *)this + 2);
  if (v2 != (char *)this + 32)
    free(v2);
}

{
  llvm::PassNameParser::~PassNameParser((llvm::PassNameParser *)((char *)this - 8));
}

void llvm::AnalysisUsage::setPreservesCFG(llvm::AnalysisUsage *this)
{
  _QWORD v2[2];

  v2[0] = &off_1E8168C80;
  v2[1] = (char *)this + 112;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::PassRegistry::enumerateWith(qword_1ED830BC0[0], (uint64_t)v2);
}

uint64_t llvm::AnalysisUsage::addPreserved(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t PassInfo;
  size_t v7;
  unsigned __int8 *v8;

  if (!atomic_load(qword_1ED830BC0))
  {
    v7 = a3;
    v8 = a2;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    a3 = v7;
    a2 = v8;
  }
  PassInfo = llvm::PassRegistry::getPassInfo(qword_1ED830BC0[0], a2, a3);
  if (PassInfo)
    sub_1C4771E64(a1, a1 + 112, *(_QWORD *)(PassInfo + 32));
  return a1;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredID(llvm::AnalysisUsage *this, uint64_t a2)
{
  sub_1C4771E64((uint64_t)this, (uint64_t)this, a2);
  return this;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredID(llvm::AnalysisUsage *this, char *a2)
{
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)a2);
  return this;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredTransitiveID(llvm::AnalysisUsage *this, char *a2)
{
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)a2);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 80, (uint64_t)a2);
  return this;
}

void sub_1C54260A4(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  int Option;
  llvm *v7;
  unsigned __int8 *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  _QWORD v24[6];
  char v25;

  if (*(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a2 + 72)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2) & 1) == 0)
  {
    v4 = *(const void **)(a2 + 16);
    if (v4)
      v5 = strlen(*(const char **)(a2 + 16));
    else
      v5 = 0;
    Option = llvm::cl::generic_parser_base::findOption(a1 + 8, v4, v5);
    v7 = (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
    if (Option == (_DWORD)v7)
    {
      v8 = *(unsigned __int8 **)(a2 + 16);
      if (v8)
        v9 = strlen(*(const char **)(a2 + 16));
      else
        v9 = 0;
      v10 = *(const char **)a2;
      if (*(_QWORD *)a2)
        v11 = strlen(*(const char **)a2);
      else
        v11 = 0;
      v24[0] = *(_QWORD *)(a2 + 16);
      v24[1] = v9;
      v24[2] = v10;
      v24[3] = v11;
      v25 = 1;
      v24[4] = &off_1E8168CB0;
      v24[5] = a2;
      v13 = (unint64_t *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 24);
      v14 = *(unsigned int *)(a1 + 32);
      v15 = (char *)v24;
      if (v14 >= *(_DWORD *)(a1 + 36))
      {
        v19 = v14 + 1;
        if (v12 <= (unint64_t)v24 && v12 + 56 * v14 > (unint64_t)v24)
        {
          v20 = (char *)v24 - v12;
          sub_1C54264B8(a1 + 24, v19);
          v12 = *v13;
          v15 = &v20[*v13];
        }
        else
        {
          sub_1C54264B8(a1 + 24, v19);
          v12 = *v13;
          v15 = (char *)v24;
        }
      }
      v16 = v12 + 56 * *(unsigned int *)(a1 + 32);
      v17 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v15;
      *(_OWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v16 + 32) = &off_1E8168CD0;
      v18 = *((_QWORD *)v15 + 5);
      *(_BYTE *)(v16 + 48) = v15[48];
      *(_QWORD *)(v16 + 32) = &off_1E8168CB0;
      *(_QWORD *)(v16 + 40) = v18;
      ++*(_DWORD *)(a1 + 32);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 16), v8, v9);
    }
    else
    {
      v21 = (llvm::raw_ostream *)llvm::errs(v7);
      v22 = sub_1C4816AD8(v21, "Two passes with the same argument (-");
      v23 = sub_1C6245B98(v22, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24));
      sub_1C4816AD8(v23, ") attempted to be registered!\n");
      __break(1u);
    }
  }
}

uint64_t sub_1C542627C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_1C5426288()
{
  return 0;
}

uint64_t sub_1C5426290(uint64_t a1, const llvm::cl::Option *a2, unsigned int a3)
{
  size_t v6;

  v6 = *(unsigned int *)(a1 + 32);
  if (v6 >= 2)
    qsort(*(void **)(a1 + 24), v6, 0x38uLL, (int (__cdecl *)(const void *, const void *))sub_1C542656C);
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 8), a2, a3);
}

uint64_t sub_1C54262E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C54262F0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2);
}

uint64_t sub_1C5426304(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * a2 + 16);
}

uint64_t sub_1C5426318(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 56 * a2 + 32;
}

uint64_t sub_1C542632C(uint64_t a1, const llvm::cl::Option *a2, unsigned int a3)
{
  size_t v6;

  v6 = *(unsigned int *)(a1 + 24);
  if (v6 >= 2)
    qsort(*(void **)(a1 + 16), v6, 0x38uLL, (int (__cdecl *)(const void *, const void *))sub_1C542656C);
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)a1, a2, a3);
}

_QWORD *sub_1C5426384(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8168C30;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C54263C4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8168C30;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5426414()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5426428(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 40))
  {
    v2 = result[1];
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(unsigned int *)(v2 + 8);
    if (v4 >= *(_DWORD *)(v2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v2 + 16, v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
    ++*(_DWORD *)(v2 + 8);
  }
  return result;
}

BOOL sub_1C542648C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

void sub_1C54264B8(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &off_1E8168CD0;
      v9 = *((_QWORD *)v4 + 5);
      *((_BYTE *)v7 + 48) = v4[48];
      *((_QWORD *)v7 + 4) = &off_1E8168CB0;
      *((_QWORD *)v7 + 5) = v9;
      v4 += 56;
      v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

uint64_t sub_1C542656C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  unsigned int v7;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 >= v3)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v5)
      return (v5 >> 31) | 1u;
  }
  if (v3 < v2)
    v7 = -1;
  else
    v7 = 1;
  if (v3 == v2)
    return 0;
  else
    return v7;
}

double llvm::PassInstrumentationCallbacks::addClassToPassName(uint64_t a1, unsigned __int8 *a2, size_t a3, const void *a4, size_t a5)
{
  llvm::StringMapImpl *v9;
  _QWORD *v10;
  double result;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 __dst;
  unint64_t v18;

  v9 = (llvm::StringMapImpl *)(a1 + 1296);
  v10 = sub_1C5426790((llvm::StringMapImpl *)(a1 + 1296), a2, a3);
  if (*(char *)(*v10 + 31) < 0)
  {
    if (*(_QWORD *)(*v10 + 16))
      return result;
  }
  else if (*(_BYTE *)(*v10 + 31))
  {
    return result;
  }
  if (a4)
  {
    if (a5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a5 >= 0x17)
    {
      v13 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v13 = a5 | 7;
      v14 = v13 + 1;
      p_dst = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&__dst + 1) = a5;
      v18 = v14 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v18) = a5;
      p_dst = &__dst;
      if (!a5)
        goto LABEL_15;
    }
    memmove(p_dst, a4, a5);
LABEL_15:
    *((_BYTE *)p_dst + a5) = 0;
    goto LABEL_16;
  }
  __dst = 0uLL;
  v18 = 0;
LABEL_16:
  v15 = sub_1C5426790(v9, a2, a3);
  v16 = *v15 + 8;
  if (*(char *)(*v15 + 31) < 0)
    operator delete(*(void **)v16);
  result = *(double *)&__dst;
  *(_OWORD *)v16 = __dst;
  *(_QWORD *)(v16 + 16) = v18;
  return result;
}

uint64_t llvm::isSpecialPass(char *__s, size_t __n, uint64_t *a3)
{
  size_t v4;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v4 = __n;
  if (__n)
  {
    v6 = memchr(__s, 60, __n);
    if (v6)
    {
      if (v4 >= v6 - __s)
        v7 = v6 - __s;
      else
        v7 = v4;
      if (v6 - __s != -1)
        v4 = v7;
    }
  }
  v9 = *a3;
  v8 = a3[1];
  if (v9 == v8)
    return 0;
  v10 = &__s[v4];
  while (1)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v4 >= v11 && (!v11 || !memcmp(&v10[-v11], *(const void **)v9, v11)))
      break;
    v9 += 16;
    if (v9 == v8)
      return 0;
  }
  return 1;
}

_QWORD *sub_1C5426790(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v20 = operator new(__n + 33, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = (char *)(v20 + 4);
  if (__n)
    memcpy(v20 + 4, a2, __n);
  v22[__n] = 0;
  *v21 = __n;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = 0;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

void *llvm::AllAnalysesOn<llvm::Module>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Module>::SetKey;
}

void *llvm::AllAnalysesOn<llvm::Function>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Function>::SetKey;
}

__n128 llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::PassManager(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)*a1;
  if (*a1)
  {
    v5 = (_QWORD *)a1[1];
    v6 = (_QWORD *)*a1;
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (_QWORD *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

_QWORD *llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  void *v16;
  void *v17;
  llvm *v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  void *__dst;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[16];
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[16];
  uint64_t v41[2];

  v8 = a4 + 32;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v41[0] = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2)+ 8);
  v9 = a1[1] - *a1;
  if ((v9 & 0x7FFFFFFF8) != 0)
  {
    v10 = (v9 >> 3);
    v11 = (_QWORD *)off_1EF8EEB50();
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*a1 + 8 * v12);
      if (sub_1C5426D68(v41, v13, a2))
      {
        __dst = v35;
        v32 = v35;
        v33 = 2;
        v34 = 0;
        v36 = v40;
        v37 = v40;
        v38 = 2;
        v39 = 0;
        v14 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
        if (*v11)
        {
          v20 = *(_BYTE *)(a2 + 191);
          if (v20 >= 0)
            v21 = a2 + 168;
          else
            v21 = *(_QWORD *)(a2 + 168);
          if (v20 >= 0)
            v22 = v20 & 0x7F;
          else
            v22 = *(_QWORD *)(a2 + 176);
          llvm::timeTraceProfilerBegin(v14, v15, v21, v22);
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(&v23, v13, a2, a3);
        if (v32 != __dst)
          free(v32);
        if (v24 == v23)
        {
          v32 = __dst;
          if (HIDWORD(v25))
            memmove(__dst, v24, 8 * HIDWORD(v25));
        }
        else
        {
          v32 = v24;
          v24 = v23;
        }
        v33 = v25;
        v34 = v26;
        v25 = 2;
        v26 = 0;
        if (v37 != v36)
          free(v37);
        v16 = v27;
        v17 = v28;
        if (v28 == v27)
        {
          v37 = v36;
          if (HIDWORD(v29))
          {
            memmove(v36, v28, 8 * HIDWORD(v29));
            v17 = v27;
          }
          v16 = v28;
        }
        else
        {
          v37 = v28;
          v28 = v27;
          v17 = v27;
        }
        v38 = v29;
        v39 = v30;
        v29 = 2;
        v30 = 0;
        if (v16 != v17)
          free(v16);
        v18 = (llvm *)v24;
        if (v24 != v23)
          free(v24);
        if (*v11)
          llvm::timeTraceProfilerEnd(v18);
        sub_1C5427020((uint64_t)v41, v13, a2, (uint64_t)&__dst);
        llvm::AnalysisManager<llvm::Module>::invalidate(a3, a2, (uint64_t)&__dst);
        sub_1C4DD4444(a4, (uint64_t)&__dst);
        if (v37 != v36)
          free(v37);
        if (v32 != __dst)
          free(v32);
      }
      ++v12;
    }
    while (v10 != v12);
  }
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Module>::SetKey);
}

{
  return __ZN4llvm11PassManagerINS_6ModuleENS_15AnalysisManagerIS1_JEEEJEE3runERS1_RS3_(a1, a2, a3, a4);
}

uint64_t sub_1C5426D68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;

  if (!*a1)
    return 1;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = *a1;
  if ((v6 & 1) != 0)
    goto LABEL_13;
  v8 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = *(_QWORD **)v7;
  v10 = 32 * v8;
  v11 = 1;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v14 = v13;
    v46 = 0;
    v15 = (_QWORD *)operator new();
    *v15 = &unk_1E81353B8;
    v15[1] = a3;
    v16 = v46;
    v46 = v15;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    v17 = v9[3];
    v18 = v9;
    if ((v17 & 2) == 0)
      v18 = (_QWORD *)*v9;
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v17 & 0xFFFFFFFFFFFFFFF8))(v18, v12, v14, &v46);
    v20 = v46;
    v46 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v11 &= v19;
    v9 += 4;
    v10 -= 32;
  }
  while (v10);
  v7 = *a1;
  if (v11)
  {
LABEL_13:
    v21 = *(unsigned int *)(v7 + 296);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v7 + 288);
      v23 = 32 * v21;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v26 = v25;
        v45 = 0;
        v27 = (_QWORD *)operator new();
        *v27 = &unk_1E81353B8;
        v27[1] = a3;
        v28 = v45;
        v45 = v27;
        if (v28)
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
        v29 = v22[3];
        v30 = v22;
        if ((v29 & 2) == 0)
          v30 = (_QWORD *)*v22;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(v30, v24, v26, &v45);
        v31 = v45;
        v45 = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    return 1;
  }
  v33 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD **)(v7 + 144);
    v35 = 32 * v33;
    do
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v38 = v37;
      v44 = 0;
      v39 = (_QWORD *)operator new();
      *v39 = &unk_1E81353B8;
      v39[1] = a3;
      v40 = v44;
      v44 = v39;
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      v41 = v34[3];
      v42 = v34;
      if ((v41 & 2) == 0)
        v42 = (_QWORD *)*v34;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v41 & 0xFFFFFFFFFFFFFFF8))(v42, v36, v38, &v44);
      v43 = v44;
      v44 = 0;
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      v34 += 4;
      v35 -= 32;
    }
    while (v35);
  }
  return 0;
}

uint64_t sub_1C5427020(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = *(unsigned int *)(v4 + 440);
    if ((_DWORD)v5)
    {
      v9 = *(_QWORD **)(v4 + 432);
      v10 = 32 * v5;
      do
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v13 = v12;
        v18 = 0;
        v14 = (_QWORD *)operator new();
        *v14 = &unk_1E81353B8;
        v14[1] = a3;
        v15 = v18;
        v18 = v14;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        v16 = v9[3];
        v17 = v9;
        if ((v16 & 2) == 0)
          v17 = (_QWORD *)*v9;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, uint64_t))(v16 & 0xFFFFFFFFFFFFFFF8))(v17, v11, v13, &v18, a4);
        result = (uint64_t)v18;
        v18 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v9 += 4;
        v10 -= 32;
      }
      while (v10);
    }
  }
  return result;
}

void llvm::AnalysisManager<llvm::Module>::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t CachedResultImpl;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43[8];
  uint64_t v44[3];
  _QWORD v45[2];
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!sub_1C4DDA07C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Module>::SetKey))
  {
    v46 = 1;
    for (i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v46 + i) = -4096;
    v45[0] = &v46;
    v45[1] = a1 + 48;
    v40 = (uint64_t *)(a1 + 48);
    v44[0] = a2;
    v38 = a1 + 24;
    v7 = sub_1C4DD9AC8((uint64_t *)(a1 + 24), v44);
    v8 = v7 + 1;
    v41 = v7;
    v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        v10 = v9[2];
        v11 = v9[3];
        v12 = sub_1C4D91F84((uint64_t)&v46, v10);
        if ((v46 & 1) != 0)
          v13 = &v47;
        else
          v13 = v47;
        v14 = v48;
        if ((v46 & 1) != 0)
          v14 = 8;
        if (&v13[2 * v14] == (_QWORD *)v12)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, a2, a3, v45);
          v42 = v10;
          v43[0] = v15;
          sub_1C4D921A4((uint64_t)&v46, &v42, v43, (uint64_t)v44);
        }
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != v8);
    }
    if (v46 >= 2)
    {
      v16 = (uint64_t *)v41[2];
      if (v16 != v8)
      {
        v39 = a1;
        do
        {
          v17 = v16[2];
          v44[0] = v17;
          v42 = 0;
          if (sub_1C4D92000((uint64_t)&v46, v44, &v42) && *(_BYTE *)(v42 + 8))
          {
            CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
            if (CachedResultImpl)
            {
              v19 = CachedResultImpl;
              v42 = v17;
              v44[0] = 0;
              if ((sub_1C4DD8A9C((uint64_t *)a1, &v42, v44) & 1) != 0)
                v20 = v44[0];
              else
                v20 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
              v21 = *(_QWORD *)(v19 + 8);
              if (v21)
              {
                v22 = *(unsigned int *)(v21 + 1016);
                if ((_DWORD)v22)
                {
                  v23 = *(_QWORD *)(v20 + 8);
                  v24 = *(_QWORD **)(v21 + 1008);
                  v25 = 32 * v22;
                  do
                  {
                    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
                    v28 = v27;
                    v44[0] = 0;
                    v29 = (_QWORD *)operator new();
                    *v29 = &unk_1E81353B8;
                    v29[1] = a2;
                    v30 = v44[0];
                    v44[0] = (uint64_t)v29;
                    if (v30)
                      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
                    v31 = v24[3];
                    v32 = v24;
                    if ((v31 & 2) == 0)
                      v32 = (_QWORD *)*v24;
                    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(v31 & 0xFFFFFFFFFFFFFFF8))(v32, v26, v28, v44);
                    v33 = v44[0];
                    v44[0] = 0;
                    if (v33)
                      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
                    v24 += 4;
                    v25 -= 32;
                  }
                  while (v25);
                }
              }
              a1 = v39;
            }
            v34 = *v16;
            v35 = (uint64_t *)v16[1];
            *(_QWORD *)(v34 + 8) = v35;
            *(_QWORD *)v16[1] = v34;
            --v41[3];
            v36 = v16[3];
            v16[3] = 0;
            if (v36)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            operator delete(v16);
            v44[0] = v17;
            v44[1] = a2;
            v42 = 0;
            if (sub_1C4DD97E0(v40, v44, &v42))
            {
              v37 = v42;
              *(_QWORD *)v42 = -8192;
              *(_QWORD *)(v37 + 8) = -8192;
              *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
            }
            v16 = v35;
          }
          else
          {
            v16 = (uint64_t *)v16[1];
          }
        }
        while (v16 != v8);
      }
    }
    if (!v41[3])
    {
      v44[0] = a2;
      sub_1C6245EC8(v38, v44);
    }
    if ((v46 & 1) == 0)
      MEMORY[0x1CAA32FB4](v47, 8);
  }
}

{
  __ZN4llvm15AnalysisManagerINS_6ModuleEJEE10invalidateERS1_RKNS_17PreservedAnalysesE(a1, a2, a3);
}

BOOL llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::isEmpty(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::isRequired()
{
  return 1;
}

__n128 llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::PassManager(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)*a1;
  if (*a1)
  {
    v5 = (_QWORD *)a1[1];
    v6 = (_QWORD *)*a1;
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (_QWORD *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

_QWORD *llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  llvm *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  void *__dst;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[16];
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[16];
  uint64_t v50[2];

  v8 = a4 + 32;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v50[0] = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2)+ 8);
  v9 = a1[1] - *a1;
  if ((v9 & 0x7FFFFFFF8) != 0)
  {
    v10 = (v9 >> 3);
    v11 = (_QWORD *)off_1EF8EEB50(&off_1EF8EEB50);
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(*a1 + 8 * v12);
      if (sub_1C4DD69BC(v50, v13, a2))
        break;
LABEL_35:
      if (++v12 == v10)
        return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    }
    __dst = v44;
    v41 = v44;
    v42 = 2;
    v43 = 0;
    v45 = v49;
    v46 = v49;
    v47 = 2;
    v48 = 0;
    v14 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
    {
      v26 = 0;
      v25 = &byte_1C871356D;
      goto LABEL_12;
    }
    v16 = ***(_QWORD ***)a2;
    v17 = *(_QWORD *)(v16 + 152);
    v18 = *(unsigned int *)(v16 + 168);
    if ((_DWORD)v18)
    {
      LODWORD(v19) = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v20 = (uint64_t *)(v17 + 16 * v19);
      v21 = *v20;
      if (*v20 == a2)
      {
LABEL_11:
        v24 = (_QWORD *)v20[1];
        v27 = *v24;
        v25 = (char *)(v24 + 2);
        v26 = v27;
LABEL_12:
        if (*v11)
          llvm::timeTraceProfilerBegin(v14, v15, (uint64_t)v25, v26);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(&v32, v13, a2, a3, v26);
        if (v41 != __dst)
          free(v41);
        if (v33 == v32)
        {
          v41 = __dst;
          if (HIDWORD(v34))
            memmove(__dst, v33, 8 * HIDWORD(v34));
        }
        else
        {
          v41 = v33;
          v33 = v32;
        }
        v42 = v34;
        v43 = v35;
        v34 = 2;
        v35 = 0;
        if (v46 != v45)
          free(v46);
        v28 = v36;
        v29 = v37;
        if (v37 == v36)
        {
          v46 = v45;
          if (HIDWORD(v38))
          {
            memmove(v45, v37, 8 * HIDWORD(v38));
            v29 = v36;
          }
          v28 = v37;
        }
        else
        {
          v46 = v37;
          v37 = v36;
          v29 = v36;
        }
        v47 = v38;
        v48 = v39;
        v38 = 2;
        v39 = 0;
        if (v28 != v29)
          free(v28);
        v30 = (llvm *)v33;
        if (v33 != v32)
          free(v33);
        if (*v11)
          llvm::timeTraceProfilerEnd(v30);
        sub_1C4DD6C74((uint64_t)v50, v13, a2, (uint64_t)&__dst);
        llvm::AnalysisManager<llvm::Function>::invalidate(a3, a2, (uint64_t)&__dst);
        sub_1C4DD4444(a4, (uint64_t)&__dst);
        if (v46 != v45)
          free(v46);
        if (v41 != __dst)
          free(v41);
        goto LABEL_35;
      }
      v22 = 1;
      while (v21 != -4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & (v18 - 1);
        v21 = *(_QWORD *)(v17 + 16 * v19);
        if (v21 == a2)
        {
          v20 = (uint64_t *)(v17 + 16 * v19);
          goto LABEL_11;
        }
      }
    }
    v20 = (uint64_t *)(v17 + 16 * v18);
    goto LABEL_11;
  }
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
}

{
  return __ZN4llvm11PassManagerINS_8FunctionENS_15AnalysisManagerIS1_JEEEJEE3runERS1_RS3_(a1, a2, a3, a4);
}

uint64_t llvm::AnalysisManager<llvm::Function>::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t CachedResultImpl;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[8];
  uint64_t v24[3];
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = sub_1C4DDA07C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  if ((result & 1) == 0)
  {
    v26 = 1;
    for (i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v26 + i) = -4096;
    v25[0] = &v26;
    v25[1] = a1 + 48;
    v24[0] = a2;
    result = (uint64_t)sub_1C4DDB828((uint64_t *)(a1 + 24), v24);
    v8 = result + 8;
    v21 = result;
    v9 = *(_QWORD **)(result + 16);
    if (v9 != (_QWORD *)(result + 8))
    {
      do
      {
        v10 = v9[2];
        v11 = v9[3];
        result = sub_1C4D91F84((uint64_t)&v26, v10);
        if ((v26 & 1) != 0)
          v12 = &v27;
        else
          v12 = v27;
        v13 = v28;
        if ((v26 & 1) != 0)
          v13 = 8;
        if (&v12[2 * v13] == (_QWORD *)result)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, a2, a3, v25);
          v22 = v10;
          v23[0] = v14;
          result = sub_1C4D921A4((uint64_t)&v26, &v22, v23, (uint64_t)v24);
        }
        v9 = (_QWORD *)v9[1];
      }
      while (v9 != (_QWORD *)v8);
    }
    if (v26 >= 2)
    {
      v15 = *(uint64_t **)(v21 + 16);
      while (v15 != (uint64_t *)v8)
      {
        v16 = v15[2];
        v24[0] = v16;
        v22 = 0;
        result = sub_1C4D92000((uint64_t)&v26, v24, &v22);
        if ((_DWORD)result && *(_BYTE *)(v22 + 8))
        {
          CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
          if (CachedResultImpl)
          {
            v18 = CachedResultImpl;
            v22 = v16;
            v24[0] = 0;
            if ((sub_1C4DD8A9C((uint64_t *)a1, &v22, v24) & 1) != 0)
              v19 = v24[0];
            else
              v19 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
            sub_1C4DDBAE8(v18 + 8, *(_QWORD *)(v19 + 8), a2);
          }
          v15 = (uint64_t *)sub_1C618472C(v8, v15);
          v24[0] = v16;
          v24[1] = a2;
          v22 = 0;
          result = sub_1C4D920B0((uint64_t *)(a1 + 48), v24, &v22);
          if ((_DWORD)result)
          {
            v20 = v22;
            *(_QWORD *)v22 = -8192;
            *(_QWORD *)(v20 + 8) = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        else
        {
          v15 = (uint64_t *)v15[1];
        }
      }
    }
    if (!*(_QWORD *)(v21 + 24))
    {
      v24[0] = a2;
      result = sub_1C4DDBBEC(a1 + 24, v24);
    }
    if ((v26 & 1) == 0)
      return MEMORY[0x1CAA32FB4](v27, 8);
  }
  return result;
}

{
  return __ZN4llvm15AnalysisManagerINS_8FunctionEJEE10invalidateERS1_RKNS_17PreservedAnalysesE(a1, a2, a3);
}

BOOL llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::isEmpty(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::isRequired()
{
  return 1;
}

_QWORD *llvm::AnalysisManager<llvm::Module>::Invalidator::Invalidator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Module>::AnalysisManager(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Module>::AnalysisManager(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::Module>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(v5 + 8);
    v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v10 = a1 + 3;
  v9 = a1[3];
  v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v9 + 8);
    v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v9 = *v10;
  }
  MEMORY[0x1CAA32FB4](v9, 8);
  *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Module>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Module>::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *i;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24[2];
  _QWORD *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
  if (CachedResultImpl)
  {
    v9 = *(_QWORD *)(CachedResultImpl + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 1160);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 1152);
        v12 = 32 * v10;
        do
        {
          v13 = v11[3];
          v14 = v11;
          if ((v13 & 2) == 0)
            v14 = (_QWORD *)*v11;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, a3, a4);
          v11 += 4;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v16 + 32 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_10:
      if (v18 != (uint64_t *)(v16 + 32 * v15))
      {
        for (i = (uint64_t *)v18[2]; i != v18 + 1; i = (uint64_t *)i[1])
        {
          v24[0] = i[2];
          v24[1] = a2;
          v25 = 0;
          if (sub_1C4DD97E0((uint64_t *)(a1 + 48), v24, &v25))
          {
            v21 = v25;
            *v25 = -8192;
            v21[1] = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        sub_1C4D8B4AC(v18 + 1);
        *v18 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v22 = 1;
      while (v19 != -4096)
      {
        v23 = v17 + v22++;
        v17 = v23 & (v15 - 1);
        v19 = *(_QWORD *)(v16 + 32 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t *)(v16 + 32 * v17);
          goto LABEL_10;
        }
      }
    }
  }
}

void llvm::AnalysisManager<llvm::Module>::clear(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int64x2_t *v15;
  uint64_t v16;
  int64x2_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = a1 + 48;
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 64);
    if (v4 <= 4 * v3 || v4 < 0x41)
    {
LABEL_4:
      if (v4)
      {
        v5 = *(_QWORD **)v2;
        v6 = *(_QWORD *)v2 + 24 * v4;
        do
        {
          *v5 = -4096;
          v5[1] = -4096;
          v5 += 3;
        }
        while (v5 != (_QWORD *)v6);
      }
      *(_QWORD *)(a1 + 56) = 0;
      goto LABEL_8;
    }
    v14 = 1 << (33 - __clz(v3 - 1));
    if (v14 <= 64)
      v13 = 64;
    else
      v13 = v14;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 60))
      goto LABEL_8;
    v4 = *(_DWORD *)(a1 + 64);
    if (v4 <= 0x40)
      goto LABEL_4;
    v13 = 0;
  }
  if (v13 == v4)
  {
    *(_QWORD *)(a1 + 56) = 0;
    v15 = *(int64x2_t **)(a1 + 48);
    v16 = 24 * v4;
    v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v15 = v17;
      v15 = (int64x2_t *)((char *)v15 + 24);
      v16 -= 24;
    }
    while (v16);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v2, 8);
    if (v13)
    {
      v25 = (4 * v13 / 3u + 1) | ((unint64_t)(4 * v13 / 3u + 1) >> 1);
      v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
      LODWORD(v26) = (((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8)) + 1;
      *(_DWORD *)(a1 + 64) = v26;
      v27 = operator new(24 * v26, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = 0;
      v28 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v28)
      {
        v29 = 24 * v28;
        v30 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *v27 = v30;
          v27 = (_OWORD *)((char *)v27 + 24);
          v29 -= 24;
        }
        while (v29);
      }
    }
    else
    {
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
    }
  }
LABEL_8:
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 || *(_DWORD *)(a1 + 36))
  {
    v8 = *(unsigned int *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 24);
    if (v8 <= 4 * v7 || v8 < 0x41)
    {
      if ((_DWORD)v8)
      {
        v10 = (uint64_t *)(v9 + 8);
        v11 = 32 * v8;
        do
        {
          v12 = *(v10 - 1);
          if (v12 != -4096)
          {
            if (v12 != -8192)
              sub_1C4D8B4AC(v10);
            *(v10 - 1) = -4096;
          }
          v10 += 4;
          v11 -= 32;
        }
        while (v11);
      }
LABEL_50:
      *(_QWORD *)(a1 + 32) = 0;
      return;
    }
    v18 = (_QWORD *)(a1 + 24);
    v19 = (uint64_t *)(v9 + 8);
    v20 = 32 * v8;
    do
    {
      if ((*(v19 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v19);
      v19 += 4;
      v20 -= 32;
    }
    while (v20);
    if (!v7)
    {
      if (*(_DWORD *)(a1 + 40))
      {
        MEMORY[0x1CAA32FB4](*v18, 8);
        *v18 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return;
      }
      goto LABEL_50;
    }
    v21 = 1 << (33 - __clz(v7 - 1));
    if (v21 <= 64)
      v22 = 64;
    else
      v22 = v21;
    if (v22 == *(_DWORD *)(a1 + 40))
    {
      *(_QWORD *)(a1 + 32) = 0;
      v23 = 32 * v22;
      v24 = *(_QWORD **)(a1 + 24);
      do
      {
        *v24 = -4096;
        v24 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
      v31 = (4 * v22 / 3 + 1) | ((unint64_t)(4 * v22 / 3 + 1) >> 1);
      v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
      LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
      *(_DWORD *)(a1 + 40) = v32;
      v33 = operator new(32 * v32, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = 0;
      v34 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v34)
      {
        v35 = 32 * v34;
        do
        {
          *v33 = -4096;
          v33 += 4;
          v35 -= 32;
        }
        while (v35);
      }
    }
  }
}

uint64_t llvm::AnalysisManager<llvm::Module>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  if ((sub_1C4DD8A9C((uint64_t *)a1, &v5, &v6) & 1) != 0)
    v3 = v6;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = a2;
  if (sub_1C4DD8A9C((uint64_t *)a1, &v6, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Module>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20[2];
  char v21;

  v6 = (uint64_t *)(a1 + 48);
  v18[0] = (uint64_t)a2;
  v18[1] = a3;
  v19 = 0;
  sub_1C4DD9744(a1 + 48, v18, &v19, (uint64_t)v20);
  if (v21)
  {
    v18[0] = (uint64_t)a2;
    v20[0] = 0;
    if ((sub_1C4DD8A9C((uint64_t *)a1, v18, v20) & 1) != 0)
      v9 = v20[0];
    else
      v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
    v10 = *(_QWORD *)(v9 + 8);
    v17 = 0;
    if (a2 != &llvm::PassInstrumentationAnalysis::Key)
    {
      v17 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
      sub_1C4DD953C((uint64_t)&v17, v10, a3);
    }
    v20[0] = a3;
    v11 = sub_1C4DD9AC8((uint64_t *)(a1 + 24), v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v20, v10, a3, a1);
    v12 = operator new(0x20uLL);
    v14 = v11[1];
    v13 = v11 + 1;
    v15 = v20[0];
    v12[2] = a2;
    v12[3] = v15;
    *v12 = v14;
    v12[1] = v13;
    *(_QWORD *)(v14 + 8) = v12;
    *v13 = (uint64_t)v12;
    ++v13[2];
    sub_1C4DD9640((uint64_t)&v17, v10, a3);
    v20[0] = (uint64_t)a2;
    v20[1] = a3;
    v18[0] = 0;
    if ((sub_1C4DD97E0(v6, v20, v18) & 1) != 0)
      v16 = v18[0];
    else
      v16 = *(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
    v7 = *v13;
    *(_QWORD *)(v16 + 16) = *v13;
  }
  else
  {
    v7 = *(_QWORD *)(v20[0] + 16);
  }
  return *(_QWORD *)(v7 + 24);
}

{
  return __ZN4llvm15AnalysisManagerINS_6ModuleEJEE13getResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8[2];
  uint64_t v9;

  v8[0] = a2;
  v8[1] = a3;
  v9 = 0;
  if (sub_1C4DD97E0((uint64_t *)(a1 + 48), v8, &v9))
  {
    v4 = v9;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
    v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
}

{
  return __ZNK4llvm15AnalysisManagerINS_6ModuleEJEE19getCachedResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

_QWORD *llvm::AnalysisManager<llvm::Function>::Invalidator::Invalidator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Function>::AnalysisManager(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Function>::AnalysisManager(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::Function>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(v5 + 8);
    v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v10 = a1 + 3;
  v9 = a1[3];
  v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v9 + 8);
    v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v9 = *v10;
  }
  MEMORY[0x1CAA32FB4](v9, 8);
  *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Function>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Function>::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *i;
  _QWORD *v23;
  uint64_t v24[2];
  _QWORD *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
  if (CachedResultImpl)
  {
    v9 = *(_QWORD *)(CachedResultImpl + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 1160);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 1152);
        v12 = 32 * v10;
        do
        {
          v13 = v11[3];
          v14 = v11;
          if ((v13 & 2) == 0)
            v14 = (_QWORD *)*v11;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, a3, a4);
          v11 += 4;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v16 + 32 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_14:
      if (v18 != (uint64_t *)(v16 + 32 * v15))
      {
        for (i = (uint64_t *)v18[2]; i != v18 + 1; i = (uint64_t *)i[1])
        {
          v24[0] = i[2];
          v24[1] = a2;
          v25 = 0;
          if (sub_1C4D920B0((uint64_t *)(a1 + 48), v24, &v25))
          {
            v23 = v25;
            *v25 = -8192;
            v23[1] = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        sub_1C4D8B4AC(v18 + 1);
        *v18 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v15 - 1);
        v19 = *(_QWORD *)(v16 + 32 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t *)(v16 + 32 * v17);
          goto LABEL_14;
        }
      }
    }
  }
}

{
  __ZN4llvm15AnalysisManagerINS_8FunctionEJEE5clearERS1_NS_9StringRefE(a1, a2, a3, a4);
}

void llvm::AnalysisManager<llvm::Function>::clear(uint64_t a1)
{
  sub_1C4EA4BEC((_DWORD *)(a1 + 48));
  sub_1C5428BE0((_DWORD *)(a1 + 24));
}

void sub_1C5428BE0(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C4EA5FD0(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 32 * v3;
        v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192)
              sub_1C4D8B4AC(v5);
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

uint64_t llvm::AnalysisManager<llvm::Function>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  if ((sub_1C4DD8A9C((uint64_t *)a1, &v5, &v6) & 1) != 0)
    v3 = v6;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = a2;
  if (sub_1C4DD8A9C((uint64_t *)a1, &v6, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Function>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20[2];
  char v21;

  v6 = (uint64_t *)(a1 + 48);
  v18[0] = (uint64_t)a2;
  v18[1] = a3;
  v19 = 0;
  sub_1C4DDB4C8(a1 + 48, v18, &v19, (uint64_t)v20);
  if (v21)
  {
    v18[0] = (uint64_t)a2;
    v20[0] = 0;
    if ((sub_1C4DD8A9C((uint64_t *)a1, v18, v20) & 1) != 0)
      v9 = v20[0];
    else
      v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
    v10 = *(_QWORD *)(v9 + 8);
    v17 = 0;
    if (a2 != &llvm::PassInstrumentationAnalysis::Key)
    {
      v17 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
      sub_1C4DDB2C0((uint64_t)&v17, v10, a3);
    }
    v20[0] = a3;
    v11 = sub_1C4DDB828((uint64_t *)(a1 + 24), v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v20, v10, a3, a1);
    v12 = operator new(0x20uLL);
    v14 = v11[1];
    v13 = v11 + 1;
    v15 = v20[0];
    v12[2] = a2;
    v12[3] = v15;
    *v12 = v14;
    v12[1] = v13;
    *(_QWORD *)(v14 + 8) = v12;
    *v13 = (uint64_t)v12;
    ++v13[2];
    sub_1C4DDB3C4((uint64_t)&v17, v10, a3);
    v20[0] = (uint64_t)a2;
    v20[1] = a3;
    v18[0] = 0;
    if ((sub_1C4D920B0(v6, v20, v18) & 1) != 0)
      v16 = v18[0];
    else
      v16 = *(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
    v7 = *v13;
    *(_QWORD *)(v16 + 16) = *v13;
  }
  else
  {
    v7 = *(_QWORD *)(v20[0] + 16);
  }
  return *(_QWORD *)(v7 + 24);
}

{
  return __ZN4llvm15AnalysisManagerINS_8FunctionEJEE13getResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8[2];
  uint64_t v9;

  v8[0] = a2;
  v8[1] = a3;
  v9 = 0;
  if (sub_1C4D920B0((uint64_t *)(a1 + 48), v8, &v9))
  {
    v4 = v9;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
    v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
}

{
  return __ZNK4llvm15AnalysisManagerINS_8FunctionEJEE19getCachedResultImplEPNS_11AnalysisKeyERS1_(a1, a2, a3);
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::Result(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::Result(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::~Result(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    sub_1C4EA4BEC((_DWORD *)(v2 + 48));
    sub_1C5428BE0((_DWORD *)(v2 + 24));
  }
  return a1;
}

{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    sub_1C4EA4BEC((_DWORD *)(v2 + 48));
    sub_1C5428BE0((_DWORD *)(v2 + 24));
  }
  return a1;
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::operator=(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::getManager(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::InnerAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::run@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::Result(_QWORD *result, uint64_t a2)
{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  v8 = (_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 1)
  {
    if ((v7 & 1) != 0)
    {
      v15 = (_QWORD *)(a1 + 16);
      v12 = (_QWORD *)(a1 + 48);
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 16);
      v26 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v26)
      {
        v14 = 0;
        v11 = *(_QWORD **)(a1 + 16);
        v13 = v11;
        goto LABEL_9;
      }
      v12 = &v15[2 * v26];
    }
    v7 = *(_DWORD *)(a1 + 8) & 1;
    v11 = v15;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      v9 = a1 + 16;
      v10 = 2;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(unsigned int *)(a1 + 24);
    }
    v11 = (_QWORD *)(v9 + 16 * v10);
    v12 = v11;
  }
  if (v7)
  {
    v13 = (_QWORD *)(a1 + 16);
    v14 = 2;
  }
  else
  {
    v13 = *(_QWORD **)(a1 + 16);
    v14 = *(unsigned int *)(a1 + 24);
  }
  v15 = v12;
LABEL_9:
  v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      v17 = *v11;
      v28[0] = a4;
      v28[1] = a2;
      v28[2] = a3;
      sub_1C4DD3BCC(v11 + 1, (uint64_t)v28);
      v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (v20 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v20 + 8))
      {
        v19 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
          v19 = v30;
        }
        *((_QWORD *)v29 + v19) = v17;
        LODWORD(v30) = v30 + 1;
      }
      v21 = v11 + 2;
      v11 = v15;
      if (v21 != v15)
      {
        v11 = v21;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v15)
          {
            v11 = v15;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    v22 = (uint64_t *)v29;
    if ((_DWORD)v30)
    {
      v23 = 8 * v30;
      do
      {
        v24 = *v22++;
        v27 = v24;
        sub_1C4DD3880(v8, &v27);
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)v29;
    }
    if (v22 != v31)
      free(v22);
  }
  return 0;
}

{
  return __ZN4llvm25OuterAnalysisManagerProxyINS_15AnalysisManagerINS_6ModuleEJEEENS_8FunctionEJEE6Result10invalidateERS4_RKNS_17PreservedAnalysesERNS1_IS4_JEE11InvalidatorE(a1, a2, a3, a4);
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::OuterAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::run@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::invalidate(uint64_t *a1, uint64_t a2, void **a3, uint64_t *a4)
{
  char *v7;
  char *v8;
  unsigned int *v9;
  char *v11;
  char *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t CachedResultImpl;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  BOOL v33;
  const void **v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  _QWORD v44[2];
  BOOL v45;

  if (*((_DWORD *)a3 + 17) == *((_DWORD *)a3 + 18))
  {
    v7 = (char *)sub_1C477672C((uint64_t)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    v8 = (char *)a3[1];
    v9 = v8 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
    if (v7 != &v8[8 * *v9])
      return 0;
  }
  v44[0] = a3;
  v44[1] = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
  v11 = (char *)sub_1C477672C((uint64_t)(a3 + 6), (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key);
  v12 = (char *)a3[7];
  if (v12 == a3[6])
    v13 = (unsigned int *)a3 + 17;
  else
    v13 = (unsigned int *)(a3 + 8);
  v45 = v11 != &v12[8 * *v13];
  if (sub_1C4DAA35C((uint64_t)v44) || sub_1C4DD6D80((uint64_t)v44))
  {
    v37 = sub_1C4DDA07C((uint64_t)a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    v14 = a2 + 24;
    v15 = *(_QWORD *)(a2 + 32);
    while (1)
    {
      if (v15 == v14)
        return 0;
      v16 = v15 ? v15 - 56 : 0;
      LOBYTE(v39) = 0;
      v43 = 0;
      CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*a1, (uint64_t)&llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, v16);
      if (CachedResultImpl)
        break;
LABEL_40:
      v33 = v37;
      if (v43)
        v33 = 0;
      if (!v33)
      {
        v34 = (const void **)(v43 ? &v39 : a3);
        llvm::AnalysisManager<llvm::Function>::invalidate(*a1, v16, (uint64_t)v34);
        if (v43)
        {
          if (v42 != v41)
            free(v42);
          if (v40 != v39)
            free(v40);
        }
      }
      v15 = *(_QWORD *)(v15 + 8);
      v14 = a2 + 24;
    }
    v18 = *(_DWORD *)(CachedResultImpl + 16);
    if (v18 > 1)
    {
      if ((v18 & 1) != 0)
      {
        v24 = (uint64_t *)(CachedResultImpl + 24);
        v22 = (uint64_t *)(CachedResultImpl + 56);
      }
      else
      {
        v24 = *(uint64_t **)(CachedResultImpl + 24);
        v35 = *(unsigned int *)(CachedResultImpl + 32);
        if (!(_DWORD)v35)
        {
          v25 = 0;
          v21 = *(uint64_t **)(CachedResultImpl + 24);
          v23 = v21;
          goto LABEL_25;
        }
        v22 = &v24[2 * v35];
      }
      v18 = *(_DWORD *)(CachedResultImpl + 16) & 1;
      v21 = v24;
      while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v21 += 2;
        if (v21 == v22)
        {
          v21 = v22;
          break;
        }
      }
    }
    else
    {
      if (v18)
      {
        v19 = CachedResultImpl + 24;
        v20 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(CachedResultImpl + 24);
        v20 = *(unsigned int *)(CachedResultImpl + 32);
      }
      v21 = (uint64_t *)(v19 + 16 * v20);
      v22 = v21;
    }
    if (v18)
    {
      v23 = (uint64_t *)(CachedResultImpl + 24);
      v24 = v22;
      v25 = 2;
    }
    else
    {
      v23 = *(uint64_t **)(CachedResultImpl + 24);
      v25 = *(unsigned int *)(CachedResultImpl + 32);
      v24 = v22;
    }
LABEL_25:
    v26 = &v23[2 * v25];
LABEL_26:
    while (v21 != v26)
    {
      v27 = v21 + 1;
      if (llvm::AnalysisManager<llvm::Module>::Invalidator::invalidate(a4, *v21, a2, (uint64_t)a3))
      {
        if (!v43)
          sub_1C6185870((const void **)&v39, (const void **)a3);
        v28 = *v27;
        if ((*v27 & 4) != 0)
        {
          v30 = v28 & 0xFFFFFFFFFFFFFFF8;
          v27 = *(uint64_t **)v30;
          v29 = *(_QWORD *)v30 + 8 * *(unsigned int *)(v30 + 8);
        }
        else
        {
          v29 = (uint64_t)&v27[v28 > 7];
        }
        while (v27 != (uint64_t *)v29)
        {
          v31 = *v27++;
          sub_1C4DD7214((uint64_t)&v39, v31);
        }
      }
      v32 = v21 + 2;
      v21 = v24;
      if (v32 != v24)
      {
        v21 = v32;
        while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v21 += 2;
          if (v21 == v24)
          {
            v21 = v24;
            goto LABEL_26;
          }
        }
      }
    }
    goto LABEL_40;
  }
  v36 = *a1;
  sub_1C4EA4BEC((_DWORD *)(*a1 + 48));
  sub_1C5428BE0((_DWORD *)(v36 + 24));
  return 1;
}

_QWORD *llvm::ModuleToFunctionPassAdaptor::run@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  llvm *v28;
  const void *v29;
  char *v30;
  void *v31;
  int v32;
  unsigned int v33;
  const void *v34;
  char *v35;
  void *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  void *__dst;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[16];
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[16];
  uint64_t v63[2];

  v8 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v63[0] = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2)+ 8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v9 = *(_QWORD *)(a2 + 32);
  v43 = a2 + 24;
  if (v9 != a2 + 24)
  {
    v10 = (_QWORD *)off_1EF8EEB50(&off_1EF8EEB50);
    while (1)
    {
      if (v9)
        v11 = v9 - 56;
      else
        v11 = 0;
      if (v9 && *(_BYTE *)(v11 + 16) == 3)
      {
        if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_63;
      }
      else if (!*(_BYTE *)(v11 + 16) && *(_QWORD *)(v11 + 72) == v11 + 72 && (*(_BYTE *)(v11 + 34) & 0x80) == 0)
      {
        goto LABEL_63;
      }
      if (!sub_1C4DD69BC(v63, *a1, v11))
        goto LABEL_63;
      __dst = v57;
      v54 = v57;
      v55 = 2;
      v56 = 0;
      v58 = v62;
      v59 = v62;
      v60 = 2;
      v61 = 0;
      v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
      if ((*(_BYTE *)(v11 + 23) & 0x10) == 0)
      {
        v24 = 0;
        v23 = &byte_1C871356D;
        goto LABEL_20;
      }
      v14 = ***(_QWORD ***)v11;
      v15 = *(_QWORD *)(v14 + 152);
      v16 = *(unsigned int *)(v14 + 168);
      if (!(_DWORD)v16)
        goto LABEL_69;
      LODWORD(v17) = (v16 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 != v11)
        break;
LABEL_19:
      v22 = (_QWORD *)v18[1];
      v25 = *v22;
      v23 = (char *)(v22 + 2);
      v24 = v25;
LABEL_20:
      if (*v10)
        llvm::timeTraceProfilerBegin(v12, v13, (uint64_t)v23, v24);
      (*(void (**)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(&v44, *a1, v11, v8, v24);
      if (v54 != __dst)
        free(v54);
      if (v45 == v44)
      {
        v54 = __dst;
        if (HIDWORD(v46))
          memmove(__dst, v45, 8 * HIDWORD(v46));
      }
      else
      {
        v54 = v45;
        v45 = v44;
      }
      v55 = v46;
      v56 = v47;
      v46 = 2;
      LODWORD(v47) = 0;
      if (v59 != v58)
        free(v59);
      v26 = v49;
      v27 = (char *)v50;
      if ((char *)v50 == v49)
      {
        v59 = v58;
        if (HIDWORD(v50))
        {
          memmove(v58, (const void *)v50, 8 * HIDWORD(v50));
          v27 = v49;
        }
        v26 = (char *)v50;
      }
      else
      {
        v59 = (_BYTE *)v50;
        *(_QWORD *)&v50 = v49;
        v27 = v49;
      }
      v60 = *((_QWORD *)&v50 + 1);
      v61 = v51;
      *((_QWORD *)&v50 + 1) = 2;
      LODWORD(v51) = 0;
      if (v26 != v27)
        free(v26);
      v28 = (llvm *)v45;
      if (v45 != v44)
        free(v45);
      if (*v10)
        llvm::timeTraceProfilerEnd(v28);
      sub_1C4DD6C74((uint64_t)v63, *a1, v11, (uint64_t)&__dst);
      if (*((_BYTE *)a1 + 8))
      {
        v39 = 0;
        v52 = 0;
        v50 = 0u;
        v51 = 0u;
        v47 = 0u;
        v48 = 0;
        v44 = (char *)&v47 + 8;
        v45 = (char *)&v47 + 8;
        v46 = 2;
        v49 = (char *)&v51 + 8;
        *(_QWORD *)&v50 = (char *)&v51 + 8;
        DWORD2(v50) = 2;
      }
      else
      {
        v44 = (char *)&v47 + 8;
        v29 = v54;
        if (v54 == __dst)
        {
          v45 = (char *)&v47 + 8;
          v30 = (char *)&v47 + 8;
          v31 = v54;
        }
        else
        {
          v41 = v55;
          v30 = (char *)malloc_type_malloc(8 * v55, 0x4065EBACuLL);
          if (!v30 && (v41 || (v30 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_83:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v45 = v30;
          v31 = __dst;
          v29 = v54;
        }
        v32 = HIDWORD(v55);
        LODWORD(v46) = v55;
        if (v29 == v31)
          v33 = HIDWORD(v55);
        else
          v33 = v55;
        if (v33)
        {
          memmove(v30, v29, 8 * v33);
          v32 = HIDWORD(v55);
        }
        HIDWORD(v46) = v32;
        LODWORD(v47) = v56;
        v49 = (char *)&v51 + 8;
        v34 = v59;
        if (v59 == v58)
        {
          *(_QWORD *)&v50 = (char *)&v51 + 8;
          v35 = (char *)&v51 + 8;
          v36 = v59;
        }
        else
        {
          v42 = v60;
          v35 = (char *)malloc_type_malloc(8 * v60, 0x4065EBACuLL);
          if (!v35)
          {
            if (v42)
              goto LABEL_83;
            v35 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
            if (!v35)
              goto LABEL_83;
          }
          *(_QWORD *)&v50 = v35;
          v36 = v58;
          v34 = v59;
        }
        v37 = HIDWORD(v60);
        DWORD2(v50) = v60;
        if (v34 == v36)
          v38 = HIDWORD(v60);
        else
          v38 = v60;
        if (v38)
        {
          memmove(v35, v34, 8 * v38);
          v37 = HIDWORD(v60);
        }
        HIDWORD(v50) = v37;
        v39 = v61;
      }
      LODWORD(v51) = v39;
      llvm::AnalysisManager<llvm::Function>::invalidate(v8, v11, (uint64_t)&v44);
      if ((char *)v50 != v49)
        free((void *)v50);
      if (v45 != v44)
        free(v45);
      sub_1C4DD4444(a4, (uint64_t)&__dst);
      if (v59 != v58)
        free(v59);
      if (v54 != __dst)
        free(v54);
LABEL_63:
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v43)
        goto LABEL_77;
    }
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v19 == v11)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_19;
      }
    }
LABEL_69:
    v18 = (uint64_t *)(v15 + 16 * v16);
    goto LABEL_19;
  }
LABEL_77:
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  return sub_1C4DDB144(a4, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key);
}

unint64_t llvm::PassRegistry::getPassRegistry(llvm::PassRegistry *this)
{
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  return qword_1ED830BC0[0];
}

void llvm::PassRegistry::~PassRegistry(llvm::PassRegistry *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 232);
  sub_1C542A5F4(&v3);
  sub_1C51838C8((uint64_t)this + 200);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 22), 8);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

uint64_t llvm::PassRegistry::getPassInfo(std::__shared_mutex_base *this, const void *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const void *v8;
  int v9;
  int v10;
  uint64_t v11;

  std::__shared_mutex_base::lock_shared(this);
  v4 = *(_DWORD *)&this[1].__mut_.__m_.__opaque[16];
  if (!v4)
  {
LABEL_8:
    v11 = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)this[1].__mut_.__m_.__opaque;
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = *(const void **)(v5 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8 != (const void *)-4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(const void **)(v5 + 16 * v7);
      if (v8 == a2)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  v11 = *(_QWORD *)(v5 + 16 * v7 + 8);
LABEL_7:
  std::__shared_mutex_base::unlock_shared(this);
  return v11;
}

void llvm::PassRegistry::registerPass(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  size_t v17;
  unsigned int v18;
  int v19;
  size_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t *v33;
  char *v34;
  uint64_t v35;
  _QWORD **i;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int64x2_t v55;
  llvm::StringMapImpl *v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *__src;
  uint64_t v60;
  int64x2_t v61;
  char *v62;
  uint64_t v63;

  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = a2[4];
  v60 = v7;
  v61.i64[0] = (uint64_t)a2;
  v8 = *(_DWORD *)(a1 + 192);
  if (!v8)
  {
    v37 = 0;
LABEL_37:
    v38 = sub_1C47AD254((_DWORD *)(a1 + 176), (uint64_t)&v60, &v60, v37);
    *v38 = v60;
    v38[1] = v61.i64[0];
    goto LABEL_11;
  }
  v9 = v8 - 1;
  v10 = ((v7 >> 4) ^ (v7 >> 9)) & v9;
  v11 = (_QWORD *)(v6 + 16 * v10);
  v12 = *v11;
  if (v7 != *v11)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v6 + 16 * v10);
      v12 = *v11;
      if (v7 == *v11)
        goto LABEL_11;
    }
    if (v13)
      v37 = v13;
    else
      v37 = v11;
    goto LABEL_37;
  }
LABEL_11:
  v17 = a2[3];
  __src = (unsigned __int8 *)a2[2];
  v18 = *(_DWORD *)(a1 + 208);
  if (!v18)
  {
    *(_DWORD *)(a1 + 212) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    v39 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v39)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v39[16] = 2;
    *(_QWORD *)(a1 + 200) = v39;
    v18 = 16;
    *(_DWORD *)(a1 + 208) = 16;
  }
  v56 = (llvm::StringMapImpl *)(a1 + 200);
  v57 = a3;
  v19 = 0;
  if (v17)
  {
    v20 = v17;
    v21 = __src;
    do
    {
      v22 = *v21++;
      v19 = 33 * v19 + v22;
      --v20;
    }
    while (v20);
  }
  v58 = a1;
  v23 = *(_QWORD *)(a1 + 200);
  v24 = v18 - 1;
  v25 = v23 + 8 * v18 + 8;
  v26 = -1;
  v27 = 1;
  v28 = v19;
  while (1)
  {
    v29 = v28 & v24;
    v30 = *(_QWORD **)(v23 + 8 * v29);
    if (!v30)
      break;
    if (v30 == (_QWORD *)-8)
    {
      if (v26 == -1)
        v26 = v28 & v24;
    }
    else if (*(_DWORD *)(v25 + 4 * v29) == v19
           && v17 == *v30
           && (!v17 || !memcmp(__src, (char *)v30 + *(unsigned int *)(v58 + 220), v17)))
    {
      goto LABEL_30;
    }
    v28 = v27 + v29;
    ++v27;
  }
  v31 = v26;
  if (v26 == -1)
  {
    v31 = v29;
    v29 = v29;
  }
  else
  {
    v29 = v26;
  }
  *(_DWORD *)(v25 + 4 * v31) = v19;
  v30 = *(_QWORD **)(v23 + 8 * v29);
LABEL_30:
  if (v30)
  {
    if (v30 != (_QWORD *)-8)
    {
      v35 = v58;
      goto LABEL_48;
    }
    --*(_DWORD *)(v58 + 216);
  }
  v32 = operator new(v17 + 17, (std::align_val_t)8uLL);
  v33 = v32;
  v34 = (char *)(v32 + 2);
  if (v17)
    memcpy(v32 + 2, __src, v17);
  v34[v17] = 0;
  *v33 = v17;
  v33[1] = 0;
  *(_QWORD *)(v23 + 8 * v29) = v33;
  v35 = v58;
  ++*(_DWORD *)(v58 + 212);
  for (i = (_QWORD **)(*(_QWORD *)(v58 + 200) + 8 * llvm::StringMapImpl::RehashTable(v56, v29)); ; ++i)
  {
    v30 = *i;
    if (*i && v30 + 1 != 0)
      break;
  }
LABEL_48:
  v30[1] = a2;
  v41 = *(uint64_t **)(v35 + 256);
  v42 = *(uint64_t **)(v35 + 264);
  while (v41 != v42)
  {
    v43 = *v41++;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v43 + 16))(v43, a2);
  }
  if ((v57 & 1) != 0)
  {
    v44 = *(_QWORD *)(v35 + 248);
    v45 = *(_QWORD **)(v35 + 240);
    if ((unint64_t)v45 >= v44)
    {
      v47 = *(_QWORD **)(v35 + 232);
      v48 = v45 - v47;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61)
        abort();
      if ((uint64_t)(v44 - (_QWORD)v47) >> 2 > v49)
        v49 = (uint64_t)(v44 - (_QWORD)v47) >> 2;
      if (v44 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      v63 = v35 + 248;
      if (v50)
      {
        if (v50 >> 61)
          sub_1C4764EE4();
        v51 = (char *)operator new(8 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[8 * v48];
      *(_QWORD *)v52 = a2;
      v53 = &v51[8 * v50];
      v61.i64[1] = (uint64_t)(v52 + 8);
      v62 = v53;
      if (v45 == v47)
      {
        v55 = vdupq_n_s64((unint64_t)v45);
        v46 = v52 + 8;
      }
      else
      {
        do
        {
          v54 = *--v45;
          *v45 = 0;
          *((_QWORD *)v52 - 1) = v54;
          v52 -= 8;
        }
        while (v45 != v47);
        v55 = *(int64x2_t *)(v35 + 232);
        v46 = (_QWORD *)v61.i64[1];
        v53 = v62;
        v44 = *(_QWORD *)(v35 + 248);
      }
      *(_QWORD *)(v35 + 232) = v52;
      *(_QWORD *)(v35 + 240) = v46;
      v61 = v55;
      *(_QWORD *)(v35 + 248) = v53;
      v62 = (char *)v44;
      v60 = v55.i64[0];
      sub_1C542A6A8((uint64_t)&v60);
    }
    else
    {
      *v45 = a2;
      v46 = v45 + 1;
    }
    *(_QWORD *)(v35 + 240) = v46;
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)v35);
}

void llvm::PassRegistry::enumerateWith(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(unsigned int *)(a1 + 192);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (*(_DWORD *)(a1 + 184))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *(_QWORD **)(a1 + 176);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD **)(a1 + 176);
    }
  }
  else
  {
LABEL_6:
    v8 = (_QWORD *)(v4 + 16 * v5);
  }
  v9 = (_QWORD *)(v4 + 16 * v5);
LABEL_9:
  while (v8 != v9)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v8[1]);
    v10 = v8 + 2;
    v8 = v6;
    if (v10 != v6)
    {
      v8 = v10;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        if (v8 == v6)
        {
          v8 = v6;
          goto LABEL_9;
        }
      }
    }
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
}

void llvm::PassRegistry::registerAnalysisGroup(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, int a6)
{
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int64x2_t v50;
  uint64_t v51;
  int64x2_t v52;
  char *v53;
  uint64_t v54;

  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  v12 = *(_DWORD *)(a1 + 192);
  if (!v12)
  {
LABEL_10:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a1 + 176);
  v14 = v12 - 1;
  v15 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v16 = *(_QWORD *)(v13 + 16 * v15);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v13 + 16 * v15);
      if (v16 == a2)
        goto LABEL_6;
    }
    goto LABEL_10;
  }
LABEL_6:
  v19 = *(_QWORD **)(v13 + 16 * v15 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  if (v19)
  {
    if (a3)
      goto LABEL_12;
LABEL_8:
    if (!a6)
      return;
    goto LABEL_38;
  }
LABEL_11:
  llvm::PassRegistry::registerPass(a1, a4, 0);
  v19 = a4;
  if (!a3)
    goto LABEL_8;
LABEL_12:
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  v20 = *(_DWORD *)(a1 + 192);
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 176);
    v22 = v20 - 1;
    v23 = (v20 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v24 = *(_QWORD *)(v21 + 16 * v23);
    if (v24 == a3)
    {
LABEL_17:
      v27 = *(_QWORD **)(v21 + 16 * v23 + 8);
      goto LABEL_18;
    }
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v23 + v25++;
      v23 = v26 & v22;
      v24 = *(_QWORD *)(v21 + 16 * v23);
      if (v24 == a3)
        goto LABEL_17;
    }
  }
  v27 = 0;
LABEL_18:
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v29 = (_QWORD *)v27[7];
  v28 = v27[8];
  if ((unint64_t)v29 >= v28)
  {
    v31 = (_QWORD *)v27[6];
    v32 = v29 - v31;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      goto LABEL_58;
    v34 = v28 - (_QWORD)v31;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_59;
      v36 = (char *)operator new(8 * v35);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    *(_QWORD *)v37 = v19;
    v30 = v37 + 8;
    if (v29 != v31)
    {
      do
      {
        v38 = *--v29;
        *((_QWORD *)v37 - 1) = v38;
        v37 -= 8;
      }
      while (v29 != v31);
      v29 = (_QWORD *)v27[6];
    }
    v27[6] = v37;
    v27[7] = v30;
    v27[8] = &v36[8 * v35];
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v29 = v19;
    v30 = v29 + 1;
  }
  v27[7] = v30;
  if (a5)
    v19[9] = v27[9];
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  if (a6)
  {
LABEL_38:
    v39 = *(_QWORD *)(a1 + 248);
    v40 = *(_QWORD **)(a1 + 240);
    if ((unint64_t)v40 < v39)
    {
      *v40 = a4;
      v41 = v40 + 1;
LABEL_55:
      *(_QWORD *)(a1 + 240) = v41;
      return;
    }
    v42 = *(_QWORD **)(a1 + 232);
    v43 = v40 - v42;
    v44 = v43 + 1;
    if (!((unint64_t)(v43 + 1) >> 61))
    {
      if ((uint64_t)(v39 - (_QWORD)v42) >> 2 > v44)
        v44 = (uint64_t)(v39 - (_QWORD)v42) >> 2;
      if (v39 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      v54 = a1 + 248;
      if (!v45)
      {
        v46 = 0;
        goto LABEL_50;
      }
      if (!(v45 >> 61))
      {
        v46 = (char *)operator new(8 * v45);
LABEL_50:
        v47 = &v46[8 * v43];
        *(_QWORD *)v47 = a4;
        v48 = &v46[8 * v45];
        v52.i64[1] = (uint64_t)(v47 + 8);
        v53 = v48;
        if (v40 == v42)
        {
          v50 = vdupq_n_s64((unint64_t)v40);
          v41 = v47 + 8;
        }
        else
        {
          do
          {
            v49 = *--v40;
            *v40 = 0;
            *((_QWORD *)v47 - 1) = v49;
            v47 -= 8;
          }
          while (v40 != v42);
          v50 = *(int64x2_t *)(a1 + 232);
          v41 = (_QWORD *)v52.i64[1];
          v48 = v53;
          v39 = *(_QWORD *)(a1 + 248);
        }
        *(_QWORD *)(a1 + 232) = v47;
        *(_QWORD *)(a1 + 240) = v41;
        v52 = v50;
        *(_QWORD *)(a1 + 248) = v48;
        v53 = (char *)v39;
        v51 = v50.i64[0];
        sub_1C542A6A8((uint64_t)&v51);
        goto LABEL_55;
      }
LABEL_59:
      sub_1C4764EE4();
    }
LABEL_58:
    abort();
  }
}

void llvm::PassRegistry::addRegistrationListener(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v5 = *(_QWORD **)(a1 + 264);
  v4 = *(_QWORD *)(a1 + 272);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)(a1 + 256);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = *(_QWORD **)(a1 + 256);
    }
    *(_QWORD *)(a1 + 256) = v13;
    *(_QWORD *)(a1 + 264) = v6;
    *(_QWORD *)(a1 + 272) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 264) = v6;
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void llvm::PassRegistry::removeRegistrationListener(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;

  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v5 = *(char **)(a1 + 256);
  v4 = *(char **)(a1 + 264);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 264);
        break;
      }
    }
  }
  v6 = v4 - (v5 + 8);
  if (v4 != v5 + 8)
    memmove(v5, v5 + 8, v4 - (v5 + 8));
  *(_QWORD *)(a1 + 264) = &v5[v6];
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void sub_1C542A5F4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          sub_1C542A668(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C542A668(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C542A6A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      sub_1C542A668(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::getPassTimer(llvm *this, llvm::Pass *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  std::recursive_mutex *v10;
  _QWORD *v11;
  _QWORD *v12;
  llvm::PassRegistry *v13;
  size_t v14;
  size_t v15;
  const void *v16;
  std::__shared_mutex_base *PassRegistry;
  uint64_t PassInfo;
  size_t v19;
  llvm::PassRegistry *v20;
  llvm::PassRegistry *v21;
  size_t v22;
  unsigned int v23;
  int v24;
  llvm::PassRegistry *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  char *v41;
  uint64_t *i;
  _QWORD *v43;
  _DWORD *v45;
  int v46;
  llvm::PassRegistry *v47;
  size_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::value_type *p_dst;
  std::string::size_type v54;
  llvm::Timer *v55;
  size_t __len;
  llvm::PassRegistry *v57;
  int v58;
  llvm::PassRegistry *__s1;
  size_t __n;
  llvm *v61;
  _QWORD v62[4];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  void **__dst;
  std::string::size_type v67;
  int64_t v68;
  _QWORD v69[3];

  v3 = qword_1ED830BE0;
  if (llvm::TimePassesIsEnabled)
    v4 = qword_1ED830BE0 == 0;
  else
    v4 = 0;
  if (v4)
  {
    if (!atomic_load((unint64_t *)&qword_1ED830BE8))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED830BE8, (void *(*)(void))sub_1C542B648, (void (*)(void *))sub_1C542B6B4);
    v3 = qword_1ED830BE8;
    qword_1ED830BE0 = qword_1ED830BE8;
  }
  if (v3)
  {
    v61 = this;
    if (!(*(uint64_t (**)(llvm *, llvm::Pass *))(*(_QWORD *)this + 112))(this, a2))
    {
      if (llvm::TimePassesIsEnabled && !qword_1ED830BE0)
      {
        if (!atomic_load((unint64_t *)&qword_1ED830BE8))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED830BE8, (void *(*)(void))sub_1C542B648, (void (*)(void *))sub_1C542B6B4);
        qword_1ED830BE0 = qword_1ED830BE8;
      }
      if (!atomic_load(qword_1ED830C00))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830C00, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
      v10 = (std::recursive_mutex *)qword_1ED830C00[0];
      std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED830C00[0]);
      v11 = sub_1C62468FC((uint64_t *)(v3 + 32), &v61);
      v6 = v11[1];
      if (v6)
        goto LABEL_21;
      v12 = v11;
      v13 = (llvm::PassRegistry *)(*(uint64_t (**)(llvm *))(*(_QWORD *)this + 16))(this);
      v15 = v14;
      v16 = (const void *)*((_QWORD *)this + 2);
      PassRegistry = (std::__shared_mutex_base *)llvm::PassRegistry::getPassRegistry(v13);
      PassInfo = llvm::PassRegistry::getPassInfo(PassRegistry, v16);
      if (PassInfo)
      {
        v20 = *(llvm::PassRegistry **)(PassInfo + 16);
        v19 = *(_QWORD *)(PassInfo + 24);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      if (v19)
        v21 = v20;
      else
        v21 = v13;
      if (v19)
        v22 = v19;
      else
        v22 = v15;
      v69[0] = v13;
      v69[1] = v15;
      v23 = *(_DWORD *)(v3 + 8);
      __s1 = v21;
      __n = v22;
      __len = v15;
      v57 = v13;
      if (!v23)
      {
        *(_DWORD *)(v3 + 12) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v43 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v43)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v43[16] = 2;
        *(_QWORD *)v3 = v43;
        v23 = 16;
        *(_DWORD *)(v3 + 8) = 16;
        v22 = __n;
      }
      v24 = 0;
      if (v22)
      {
        v25 = __s1;
        do
        {
          v26 = *(unsigned __int8 *)v25;
          v25 = (llvm::PassRegistry *)((char *)v25 + 1);
          v24 = 33 * v24 + v26;
          --v22;
        }
        while (v22);
      }
      v27 = *(_QWORD *)v3;
      v28 = v23 - 1;
      v29 = *(_QWORD *)v3 + 8 * v23 + 8;
      v58 = -1;
      v30 = 1;
      v31 = v24;
      v32 = __n;
      while (1)
      {
        v33 = v31 & v28;
        v34 = *(_QWORD *)(v27 + 8 * v33);
        if (!v34)
          break;
        if (v34 == -8)
        {
          if (v58 == -1)
            v36 = v31 & v28;
          else
            v36 = v58;
          v58 = v36;
        }
        else if (*(_DWORD *)(v29 + 4 * v33) == v24 && v32 == *(_QWORD *)v34)
        {
          if (!v32)
            goto LABEL_51;
          v35 = memcmp(__s1, (const void *)(v34 + *(unsigned int *)(v3 + 20)), v32);
          v32 = __n;
          if (!v35)
            goto LABEL_51;
        }
        v31 = v30 + v33;
        ++v30;
      }
      v37 = v58;
      if (v58 == -1)
      {
        v37 = v33;
        v33 = v33;
      }
      else
      {
        v33 = v58;
      }
      *(_DWORD *)(v29 + 4 * v37) = v24;
      v34 = *(_QWORD *)(v27 + 8 * v33);
LABEL_51:
      if (v34)
      {
        if (v34 != -8)
          goto LABEL_64;
        --*(_DWORD *)(v3 + 16);
        v32 = __n;
      }
      v38 = (char *)operator new(v32 + 17, (std::align_val_t)8uLL);
      v39 = __n;
      v40 = v38;
      v41 = v38 + 16;
      if (__n)
      {
        memcpy(v38 + 16, __s1, __n);
        v39 = __n;
      }
      v41[v39] = 0;
      *(_QWORD *)v40 = v39;
      *((_DWORD *)v40 + 2) = 0;
      *(_QWORD *)(v27 + 8 * v33) = v40;
      ++*(_DWORD *)(v3 + 12);
      for (i = (uint64_t *)(*(_QWORD *)v3
                          + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v3, v33)); ; ++i)
      {
        v34 = *i;
        if (*i && v34 != -8)
          break;
      }
LABEL_64:
      v46 = *(_DWORD *)(v34 + 8);
      v45 = (_DWORD *)(v34 + 8);
      *v45 = v46 + 1;
      if ((v46 + 1) > 1)
      {
        v62[0] = "{0} #{1}";
        v62[1] = 8;
        v62[2] = v65;
        v62[3] = 2;
        v63[0] = &unk_1E8168E00;
        v63[1] = v69;
        v64[0] = &unk_1E8168E30;
        v64[1] = v45;
        v65[0] = v63;
        v65[1] = v64;
        sub_1C4DCAF2C((uint64_t)v62, &__dst);
LABEL_77:
        v52 = operator new();
        v6 = v52;
        if (v68 >= 0)
          p_dst = (std::string::value_type *)&__dst;
        else
          p_dst = (std::string::value_type *)__dst;
        if (v68 >= 0)
          v54 = HIBYTE(v68) & 0x7F;
        else
          v54 = v67;
        *(_OWORD *)v52 = 0u;
        *(_OWORD *)(v52 + 16) = 0u;
        *(_OWORD *)(v52 + 32) = 0u;
        *(_OWORD *)(v52 + 48) = 0u;
        *(_OWORD *)(v52 + 64) = 0u;
        *(_OWORD *)(v52 + 80) = 0u;
        *(_OWORD *)(v52 + 96) = 0u;
        *(_OWORD *)(v52 + 112) = 0u;
        *(_WORD *)(v52 + 128) = 0;
        *(_QWORD *)(v52 + 144) = 0;
        *(_QWORD *)(v52 + 152) = 0;
        *(_QWORD *)(v52 + 136) = 0;
        llvm::Timer::init(v52, (std::string::value_type *)__s1, __n, p_dst, v54, (llvm::TimerGroup *)(v3 + 56));
        if (SHIBYTE(v68) < 0)
          operator delete(__dst);
        v55 = (llvm::Timer *)v12[1];
        v12[1] = v6;
        if (v55)
        {
          llvm::Timer::~Timer(v55);
          MEMORY[0x1CAA32FC0]();
          v6 = v12[1];
        }
LABEL_21:
        std::recursive_mutex::unlock(v10);
        return v6;
      }
      v47 = v57;
      if (!v57)
      {
        __dst = 0;
        v67 = 0;
        v68 = 0;
        goto LABEL_77;
      }
      v48 = __len;
      if (__len >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (__len >= 0x17)
      {
        v50 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v50 = __len | 7;
        v51 = v50 + 1;
        v49 = (void **)operator new(v50 + 1);
        v48 = __len;
        v47 = v57;
        v67 = __len;
        v68 = v51 | 0x8000000000000000;
        __dst = v49;
      }
      else
      {
        HIBYTE(v68) = __len;
        v49 = (void **)&__dst;
        if (!__len)
          goto LABEL_76;
      }
      memmove(v49, v47, v48);
LABEL_76:
      *((_BYTE *)v49 + v48) = 0;
      goto LABEL_77;
    }
  }
  return 0;
}

void llvm::reportAndResetTimings(llvm *this, llvm::raw_ostream *a2)
{
  llvm::TimerGroup *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;

  if (qword_1ED830BE0)
  {
    v2 = (llvm::TimerGroup *)(qword_1ED830BE0 + 56);
    if (this)
    {
      llvm::TimerGroup::print((llvm::TimerGroup *)(qword_1ED830BE0 + 56), this, 1);
    }
    else
    {
      llvm::CreateInfoOutputFile((uint64_t *)&v4);
      v3 = v4;
      llvm::TimerGroup::print(v2, v4, 1);
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

void llvm::enableTimePasses(llvm *this)
{
  llvm::TimePassesIsEnabled = 1;
}

uint64_t llvm::TimePassesHandler::getPassTimer(unsigned __int8 *a1, unsigned __int8 *a2, size_t a3)
{
  int v6;
  size_t *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  std::string::value_type *v12;
  std::string::size_type v13;
  void **v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  void *__p[2];
  char v24;
  int v25;
  unsigned __int8 *v26;
  std::string::size_type v27;

  v26 = a2;
  v27 = a3;
  v6 = a1[217];
  v7 = *sub_1C6246E54((uint64_t)(a1 + 96), a2, a3);
  v8 = (unsigned int *)(v7 + 1);
  if (v6)
  {
    v25 = *((_DWORD *)v7 + 4) + 1;
    v19[0] = "{0} #{1}";
    v19[1] = 8;
    v19[2] = v22;
    v19[3] = 2;
    v20[0] = &unk_1E8168E00;
    v20[1] = &v26;
    v21[0] = &unk_1E8168E30;
    v21[1] = &v25;
    v22[0] = v20;
    v22[1] = v21;
    sub_1C4DCAF2C((uint64_t)v19, __p);
    v11 = operator new();
    v9 = v11;
    v12 = (std::string::value_type *)v26;
    v13 = v27;
    if (v24 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v24 >= 0)
      v15 = v24 & 0x7F;
    else
      v15 = (std::string::size_type)__p[1];
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_WORD *)(v11 + 128) = 0;
    *(_QWORD *)(v11 + 144) = 0;
    *(_QWORD *)(v11 + 152) = 0;
    *(_QWORD *)(v11 + 136) = 0;
    llvm::Timer::init(v11, v12, v13, (std::string::value_type *)v14, v15, (llvm::TimerGroup *)a1);
    v19[0] = v9;
    v16 = *((unsigned int *)v7 + 4);
    if (v16 >= *((_DWORD *)v7 + 5))
    {
      sub_1C6246F50(v8, v19);
    }
    else
    {
      *(_QWORD *)(v7[1] + 8 * v16) = v9;
      *((_DWORD *)v7 + 4) = v16 + 1;
    }
    if (v24 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (!*((_DWORD *)v7 + 4))
    {
      v17 = operator new();
      *(_OWORD *)v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_WORD *)(v17 + 128) = 0;
      *(_QWORD *)(v17 + 144) = 0;
      *(_QWORD *)(v17 + 152) = 0;
      *(_QWORD *)(v17 + 136) = 0;
      llvm::Timer::init(v17, (std::string::value_type *)a2, a3, (std::string::value_type *)a2, a3, (llvm::TimerGroup *)a1);
      v19[0] = v17;
      v18 = *((unsigned int *)v7 + 4);
      if (v18 >= *((_DWORD *)v7 + 5))
      {
        sub_1C6246F50(v8, v19);
      }
      else
      {
        *(_QWORD *)(v7[1] + 8 * v18) = v17;
        *((_DWORD *)v7 + 4) = v18 + 1;
      }
    }
    return **(_QWORD **)v8;
  }
  return v9;
}

double llvm::TimePassesHandler::TimePassesHandler(llvm::TimePassesHandler *this, char a2, char a3)
{
  uint64_t v5;
  double result;

  v5 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0x3800000000;
  *(_QWORD *)(v5 + 128) = v5 + 144;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v5 + 136) = 0x800000000;
  *(_QWORD *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 216) = a2;
  *(_BYTE *)(v5 + 217) = a3;
  return result;
}

{
  uint64_t v5;
  double result;

  v5 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0x3800000000;
  *(_QWORD *)(v5 + 128) = v5 + 144;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v5 + 136) = 0x800000000;
  *(_QWORD *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 216) = a2;
  *(_BYTE *)(v5 + 217) = a3;
  return result;
}

double llvm::TimePassesHandler::TimePassesHandler(llvm::TimePassesHandler *this)
{
  char v1;
  char v2;
  uint64_t v3;
  double result;

  v1 = llvm::TimePassesIsEnabled;
  v2 = llvm::TimePassesPerRun;
  v3 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0x3800000000;
  *(_QWORD *)(v3 + 128) = v3 + 144;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v3 + 136) = 0x800000000;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = v1;
  *(_BYTE *)(v3 + 217) = v2;
  return result;
}

{
  char v1;
  char v2;
  uint64_t v3;
  double result;

  v1 = llvm::TimePassesIsEnabled;
  v2 = llvm::TimePassesPerRun;
  v3 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0x3800000000;
  *(_QWORD *)(v3 + 128) = v3 + 144;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v3 + 136) = 0x800000000;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = v1;
  *(_BYTE *)(v3 + 217) = v2;
  return result;
}

uint64_t llvm::TimePassesHandler::setOutStream(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 208) = a2;
  return result;
}

llvm::Timer *llvm::TimePassesHandler::stopTimer(uint64_t a1)
{
  uint64_t v2;
  llvm::Timer *result;

  v2 = *(unsigned int *)(a1 + 136);
  result = *(llvm::Timer **)(*(_QWORD *)(a1 + 128) + 8 * v2 - 8);
  *(_DWORD *)(a1 + 136) = v2 - 1;
  if (*((_BYTE *)result + 128))
    return (llvm::Timer *)llvm::Timer::stopTimer(result);
  return result;
}

void llvm::TimePassesHandler::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  unint64_t v84;

  if (*(_BYTE *)(a1 + 216))
  {
    v4 = *(unsigned int *)(a2 + 296);
    if (v4 >= *(_DWORD *)(a2 + 300))
    {
      v84 = 0;
      v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, &v84);
      v20 = v19;
      v21 = *(unsigned int *)(a2 + 296);
      v22 = &v19[32 * v21];
      *(_QWORD *)v22 = a1;
      *((_QWORD *)v22 + 3) = (char *)off_1EF8EB2D0 + 2;
      v23 = *(_QWORD **)(a2 + 288);
      if ((_DWORD)v21)
      {
        v24 = 32 * v21;
        v25 = v19;
        do
        {
          *((_QWORD *)v25 + 3) = 0;
          v26 = v23[3];
          *((_QWORD *)v25 + 3) = v26;
          if (v23[3] >= 8uLL)
          {
            if ((v26 & 2) != 0 && (v26 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(v25, v23);
            }
            else
            {
              v27 = *(_OWORD *)v23;
              *((_QWORD *)v25 + 2) = v23[2];
              *(_OWORD *)v25 = v27;
            }
            v23[3] = 0;
          }
          v23 += 4;
          v25 += 32;
          v24 -= 32;
        }
        while (v24);
        v23 = *(_QWORD **)(a2 + 288);
        v28 = *(unsigned int *)(a2 + 296);
        if ((_DWORD)v28)
        {
          v29 = 32 * v28;
          v30 = (char *)(v23 - 4);
          do
          {
            sub_1C5052E10(&v30[v29]);
            v29 -= 32;
          }
          while (v29);
          v23 = *(_QWORD **)(a2 + 288);
        }
      }
      v31 = v84;
      if (v23 != (_QWORD *)(a2 + 304))
        free(v23);
      *(_QWORD *)(a2 + 288) = v20;
      *(_DWORD *)(a2 + 300) = v31;
      v6 = *(_DWORD *)(a2 + 296) + 1;
    }
    else
    {
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 288) + 32 * v4);
      *v5 = a1;
      v5[3] = (char *)off_1EF8EB2D0 + 2;
      v6 = v4 + 1;
    }
    *(_DWORD *)(a2 + 296) = v6;
    v7 = *(unsigned int *)(a2 + 440);
    if (v7 >= *(_DWORD *)(a2 + 444))
    {
      v84 = 0;
      v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v84);
      v33 = v32;
      v34 = *(unsigned int *)(a2 + 440);
      v35 = &v32[32 * v34];
      *(_QWORD *)v35 = a1;
      *((_QWORD *)v35 + 3) = (char *)off_1EF8EB2D8 + 2;
      v36 = *(_QWORD **)(a2 + 432);
      if ((_DWORD)v34)
      {
        v37 = 32 * v34;
        v38 = v32;
        do
        {
          *((_QWORD *)v38 + 3) = 0;
          v39 = v36[3];
          *((_QWORD *)v38 + 3) = v39;
          if (v36[3] >= 8uLL)
          {
            if ((v39 & 2) != 0 && (v39 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v39 & 0xFFFFFFFFFFFFFFF8) + 8))(v38, v36);
            }
            else
            {
              v40 = *(_OWORD *)v36;
              *((_QWORD *)v38 + 2) = v36[2];
              *(_OWORD *)v38 = v40;
            }
            v36[3] = 0;
          }
          v36 += 4;
          v38 += 32;
          v37 -= 32;
        }
        while (v37);
        v36 = *(_QWORD **)(a2 + 432);
        v41 = *(unsigned int *)(a2 + 440);
        if ((_DWORD)v41)
        {
          v42 = 32 * v41;
          v43 = (char *)(v36 - 4);
          do
          {
            sub_1C5052E10(&v43[v42]);
            v42 -= 32;
          }
          while (v42);
          v36 = *(_QWORD **)(a2 + 432);
        }
      }
      v44 = v84;
      if (v36 != (_QWORD *)(a2 + 448))
        free(v36);
      *(_QWORD *)(a2 + 432) = v33;
      *(_DWORD *)(a2 + 444) = v44;
      v9 = *(_DWORD *)(a2 + 440) + 1;
    }
    else
    {
      v8 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v7);
      *v8 = a1;
      v8[3] = (char *)off_1EF8EB2D8 + 2;
      v9 = v7 + 1;
    }
    *(_DWORD *)(a2 + 440) = v9;
    v10 = *(unsigned int *)(a2 + 584);
    if (v10 >= *(_DWORD *)(a2 + 588))
    {
      v84 = 0;
      v45 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 576, 0, 32, &v84);
      v46 = v45;
      v47 = *(unsigned int *)(a2 + 584);
      v48 = &v45[32 * v47];
      *(_QWORD *)v48 = a1;
      *((_QWORD *)v48 + 3) = (char *)off_1EF8EB2E0 + 2;
      v49 = *(_QWORD **)(a2 + 576);
      if ((_DWORD)v47)
      {
        v50 = 32 * v47;
        v51 = v45;
        do
        {
          *((_QWORD *)v51 + 3) = 0;
          v52 = v49[3];
          *((_QWORD *)v51 + 3) = v52;
          if (v49[3] >= 8uLL)
          {
            if ((v52 & 2) != 0 && (v52 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v52 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, v49);
            }
            else
            {
              v53 = *(_OWORD *)v49;
              *((_QWORD *)v51 + 2) = v49[2];
              *(_OWORD *)v51 = v53;
            }
            v49[3] = 0;
          }
          v49 += 4;
          v51 += 32;
          v50 -= 32;
        }
        while (v50);
        v49 = *(_QWORD **)(a2 + 576);
        v54 = *(unsigned int *)(a2 + 584);
        if ((_DWORD)v54)
        {
          v55 = 32 * v54;
          v56 = (char *)(v49 - 4);
          do
          {
            sub_1C5052E10(&v56[v55]);
            v55 -= 32;
          }
          while (v55);
          v49 = *(_QWORD **)(a2 + 576);
        }
      }
      v57 = v84;
      if (v49 != (_QWORD *)(a2 + 592))
        free(v49);
      *(_QWORD *)(a2 + 576) = v46;
      *(_DWORD *)(a2 + 588) = v57;
      v12 = *(_DWORD *)(a2 + 584) + 1;
    }
    else
    {
      v11 = (_QWORD *)(*(_QWORD *)(a2 + 576) + 32 * v10);
      *v11 = a1;
      v11[3] = (char *)off_1EF8EB2E0 + 2;
      v12 = v10 + 1;
    }
    *(_DWORD *)(a2 + 584) = v12;
    v13 = *(unsigned int *)(a2 + 728);
    if (v13 >= *(_DWORD *)(a2 + 732))
    {
      v84 = 0;
      v58 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 720, 0, 32, &v84);
      v59 = v58;
      v60 = *(unsigned int *)(a2 + 728);
      v61 = &v58[32 * v60];
      *(_QWORD *)v61 = a1;
      *((_QWORD *)v61 + 3) = (char *)off_1EF8EB2E8 + 2;
      v62 = *(_QWORD **)(a2 + 720);
      if ((_DWORD)v60)
      {
        v63 = 32 * v60;
        v64 = v58;
        do
        {
          *((_QWORD *)v64 + 3) = 0;
          v65 = v62[3];
          *((_QWORD *)v64 + 3) = v65;
          if (v62[3] >= 8uLL)
          {
            if ((v65 & 2) != 0 && (v65 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v65 & 0xFFFFFFFFFFFFFFF8) + 8))(v64, v62);
            }
            else
            {
              v66 = *(_OWORD *)v62;
              *((_QWORD *)v64 + 2) = v62[2];
              *(_OWORD *)v64 = v66;
            }
            v62[3] = 0;
          }
          v62 += 4;
          v64 += 32;
          v63 -= 32;
        }
        while (v63);
        v62 = *(_QWORD **)(a2 + 720);
        v67 = *(unsigned int *)(a2 + 728);
        if ((_DWORD)v67)
        {
          v68 = 32 * v67;
          v69 = (char *)(v62 - 4);
          do
          {
            sub_1C5052E10(&v69[v68]);
            v68 -= 32;
          }
          while (v68);
          v62 = *(_QWORD **)(a2 + 720);
        }
      }
      v70 = v84;
      if (v62 != (_QWORD *)(a2 + 736))
        free(v62);
      *(_QWORD *)(a2 + 720) = v59;
      *(_DWORD *)(a2 + 732) = v70;
      v15 = *(_DWORD *)(a2 + 728) + 1;
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(a2 + 720) + 32 * v13);
      *v14 = a1;
      v14[3] = (char *)off_1EF8EB2E8 + 2;
      v15 = v13 + 1;
    }
    *(_DWORD *)(a2 + 728) = v15;
    v16 = *(unsigned int *)(a2 + 872);
    if (v16 >= *(_DWORD *)(a2 + 876))
    {
      v84 = 0;
      v71 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 864, 0, 32, &v84);
      v72 = v71;
      v73 = *(unsigned int *)(a2 + 872);
      v74 = &v71[32 * v73];
      *(_QWORD *)v74 = a1;
      *((_QWORD *)v74 + 3) = (char *)&off_1EF8EB2F0 + 2;
      v75 = *(_QWORD **)(a2 + 864);
      if ((_DWORD)v73)
      {
        v76 = 32 * v73;
        v77 = v71;
        do
        {
          *((_QWORD *)v77 + 3) = 0;
          v78 = v75[3];
          *((_QWORD *)v77 + 3) = v78;
          if (v75[3] >= 8uLL)
          {
            if ((v78 & 2) != 0 && (v78 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v78 & 0xFFFFFFFFFFFFFFF8) + 8))(v77, v75);
            }
            else
            {
              v79 = *(_OWORD *)v75;
              *((_QWORD *)v77 + 2) = v75[2];
              *(_OWORD *)v77 = v79;
            }
            v75[3] = 0;
          }
          v75 += 4;
          v77 += 32;
          v76 -= 32;
        }
        while (v76);
        v75 = *(_QWORD **)(a2 + 864);
        v80 = *(unsigned int *)(a2 + 872);
        if ((_DWORD)v80)
        {
          v81 = 32 * v80;
          v82 = (char *)(v75 - 4);
          do
          {
            sub_1C5052E10(&v82[v81]);
            v81 -= 32;
          }
          while (v81);
          v75 = *(_QWORD **)(a2 + 864);
        }
      }
      v83 = v84;
      if (v75 != (_QWORD *)(a2 + 880))
        free(v75);
      *(_QWORD *)(a2 + 864) = v72;
      *(_DWORD *)(a2 + 876) = v83;
      v18 = *(_DWORD *)(a2 + 872) + 1;
    }
    else
    {
      v17 = (_QWORD *)(*(_QWORD *)(a2 + 864) + 32 * v16);
      *v17 = a1;
      v17[3] = (char *)&off_1EF8EB2F0 + 2;
      v18 = v16 + 1;
    }
    *(_DWORD *)(a2 + 872) = v18;
  }
}

uint64_t sub_1C542B648()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0x1000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  llvm::TimerGroup::TimerGroup(v0 + 56, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  return v0;
}

uint64_t sub_1C542B6B4(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;

  if (result)
  {
    v1 = result;
    v2 = (unsigned int *)(result + 32);
    sub_1C624675C((unsigned int *)(result + 32));
    llvm::TimerGroup::~TimerGroup((llvm::TimerGroup *)(v1 + 56));
    sub_1C624681C(v2);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v1 + 32), 8);
    sub_1C51838C8(v1);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C542B718(unsigned int *a1)
{
  unsigned int v2;
  _QWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  result = sub_1C624681C(a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v6 = 16 * v5;
      v7 = *(_QWORD **)a1;
      do
      {
        *v7 = -4096;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      a1[4] = v9;
      result = operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = result;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *result = -4096;
          result += 2;
          v11 -= 16;
        }
        while (v11);
      }
    }
  }
  else if (a1[4])
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return result;
}

_QWORD *sub_1C542B828(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6246A08(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C542B8E4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C542B8F8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8168DB8;
  return result;
}

void sub_1C542B91C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8168DB8;
}

void sub_1C542B934()
{
  llvm::TimePassesIsEnabled = 1;
}

llvm::raw_ostream *sub_1C542B944(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  if (a4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *a3;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 97) >= 0x1A)
        {
          if ((v6 - 65) > 0x19)
            break;
          v7 = -55;
        }
        else
        {
          v7 = -87;
        }
      }
      else
      {
        v7 = -48;
      }
      v8 = v7 + v6;
      if (v8 > 9)
        break;
      v9 = 10 * v5 + v8;
      if (v5 > v9 / 0xA)
        break;
      ++a3;
      v5 = v9;
      if (!--a4)
        goto LABEL_14;
    }
  }
  v9 = -1;
LABEL_14:
  v10 = *(const char **)a1;
  if (*(_QWORD *)(a1 + 8) >= v9)
    v11 = v9;
  else
    v11 = *(_QWORD *)(a1 + 8);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v11 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v10, v11);
  if (v11)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v11);
    *((_QWORD *)this + 4) += v11;
  }
  return result;
}

_QWORD *sub_1C542BA30(_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      abort();
    v6 = 16 * a3;
    v7 = (char *)operator new(16 * a3);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[16 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_1C542BAA0(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;
  double v5;

  v4 = *a4;
  *a4 = 0;
  v5 = llvm::TimePassesHandler::runBeforePass(*a1, a2, a3);
  if (v4)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 8))(v4, v5);
}

void sub_1C542BAE4(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  llvm::TimePassesHandler::runAfterPass(*a1, a2, a3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1C542BB28(uint64_t *a1, char *a2, size_t a3)
{
  llvm::TimePassesHandler::runAfterPass(*a1, a2, a3);
}

void sub_1C542BB30(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;
  double v5;

  v4 = *a4;
  *a4 = 0;
  v5 = llvm::TimePassesHandler::runBeforePass(*a1, a2, a3);
  if (v4)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 8))(v4, v5);
}

void sub_1C542BB74(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  llvm::TimePassesHandler::runAfterPass(*a1, a2, a3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t sub_1C542BBB8()
{
  void (**v0)(void);
  __int128 v2;
  int v3;
  char *v4;
  __n128 v5;
  __n128 *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = &llvm::TimePassesIsEnabled;
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Time each pass, printing elapsed time for each on exit";
  v5.n128_u64[1] = 54;
  sub_1C6246AEC((_BYTE **)&v2, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED804A40, &dword_1C475E000);
  v3 = 1;
  *(_QWORD *)&v2 = "Time each pass run, printing elapsed time for each run on exit";
  *((_QWORD *)&v2 + 1) = 62;
  v6 = &v5;
  v4 = &llvm::TimePassesPerRun;
  v5.n128_u64[0] = (unint64_t)&off_1E8168DB8;
  sub_1C6246C08(&v4, &v3, &v2, &v5);
  if (v6 == &v5)
  {
    v0 = (void (**)(void))(v5.n128_u64[0] + 32);
    goto LABEL_5;
  }
  if (v6)
  {
    v0 = (void (**)(void))(v6->n128_u64[0] + 40);
LABEL_5:
    (*v0)();
  }
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED804B00, &dword_1C475E000);
}

BOOL llvm::shouldPrintBeforePass(void *a1, size_t a2)
{
  return byte_1ED830E48
      || sub_1C542BD1C(a1, a2, qword_1ED830C98, 0xAAAAAAAAAAAAAAABLL * ((unk_1ED830CA0 - qword_1ED830C98) >> 3));
}

BOOL sub_1C542BD1C(void *__s2, size_t __n, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  const void *v12;
  uint64_t v13;

  if (a4)
  {
    v8 = 24 * a4;
    v9 = a3;
    while (1)
    {
      v10 = *(_BYTE *)(v9 + 23);
      v11 = v10 < 0;
      v12 = v10 >= 0 ? (const void *)v9 : *(const void **)v9;
      v13 = v10 & 0x7F;
      if (v11)
        v13 = *(_QWORD *)(v9 + 8);
      if (v13 == __n && (!__n || !memcmp(v12, __s2, __n)))
        break;
      v9 += 24;
      v8 -= 24;
      if (!v8)
      {
        v9 = a3 + 24 * a4;
        return 0xAAAAAAAAAAAAAAABLL * ((v9 - a3) >> 3) != a4;
      }
    }
  }
  else
  {
    v9 = a3;
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v9 - a3) >> 3) != a4;
}

BOOL llvm::shouldPrintAfterPass(void *a1, size_t a2)
{
  return byte_1ED830F08
      || sub_1C542BD1C(a1, a2, qword_1ED830D70, 0xAAAAAAAAAAAAAAABLL * ((unk_1ED830D78 - qword_1ED830D70) >> 3));
}

uint64_t llvm::isFunctionInPrintList(const void *a1, size_t a2)
{
  unsigned __int8 v4;
  void **v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *__dst[2];
  unint64_t v13;

  v4 = atomic_load((unsigned __int8 *)&qword_1EF8F70F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8F70F0))
  {
    v10 = qword_1ED831088;
    v11 = unk_1ED831090;
    xmmword_1EF8F70C8 = 0u;
    *(_OWORD *)algn_1EF8F70D8 = 0u;
    for (dword_1EF8F70E8 = 1065353216; v10 != v11; v10 += 24)
      sub_1C542BF9C((uint64_t)&xmmword_1EF8F70C8, v10, v10);
    __cxa_atexit((void (*)(void *))sub_1C542BF98, &xmmword_1EF8F70C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1EF8F70F0);
  }
  if (!qword_1EF8F70E0)
    return 1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v7 = a2 | 7;
    v8 = v7 + 1;
    v5 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)a2;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_11;
  }
  HIBYTE(v13) = a2;
  v5 = __dst;
  if (a2)
LABEL_11:
    memmove(v5, a1, a2);
  *((_BYTE *)v5 + a2) = 0;
  v6 = sub_1C542C56C(&xmmword_1EF8F70C8, (uint64_t)__dst) != 0;
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v6;
}

uint64_t *sub_1C542BF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  char v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[3];

  v5 = (_BYTE *)a2;
  v7 = *(_BYTE *)(a2 + 23);
  v8 = v7 < 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v7 < 0)
    a2 = *(_QWORD *)a2;
  v10 = v7 & 0x7F;
  if (v8)
    v11 = v9;
  else
    v11 = v10;
  v12 = sub_1C4D8463C((uint64_t)v37, (uint64_t *)a2, v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v3 = v12;
      if (v12 >= v14)
        v3 = v12 % v14;
    }
    else
    {
      v3 = (v14 - 1) & v12;
    }
    v17 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        v19 = v5[23];
        v20 = v19;
        v21 = v19 & 0x7F;
        if (v20 >= 0)
          v22 = v21;
        else
          v22 = *((_QWORD *)v5 + 1);
        if (v20 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v23 = v18[1];
          if (v23 == v13)
          {
            v24 = *((_BYTE *)v18 + 39);
            v25 = v24 & 0x7F;
            if (v24 >= 0)
              v26 = v24 & 0x7F;
            else
              v26 = v18[3];
            if (v26 == v22)
            {
              if ((*((_BYTE *)v18 + 39) & 0x80) != 0)
              {
                if (!memcmp((const void *)v18[2], v5, v18[3]))
                  return v18;
              }
              else
              {
                if ((v24 & 0x7F) == 0)
                  return v18;
                v27 = 0;
                while (*((unsigned __int8 *)v18 + v27 + 16) == v5[v27])
                {
                  if (v25 == ++v27)
                    return v18;
                }
              }
            }
          }
          else
          {
            if (v16 > 1)
            {
              if (v23 >= v14)
                v23 %= v14;
            }
            else
            {
              v23 &= v14 - 1;
            }
            if (v23 != v3)
              break;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
  sub_1C542C268(a1, v13, a3, (uint64_t)v37);
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v14 || (float)(v29 * (float)v14) < v28)
  {
    v30 = 1;
    if (v14 >= 3)
      v30 = (v14 & (v14 - 1)) != 0;
    v31 = v30 | (2 * v14);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      v33 = v32;
    else
      v33 = v31;
    sub_1C542C2D4(a1, v33);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v3 = v13 % v14;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v14 - 1) & v13;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
    *v34 = v37[0];
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v37[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v37[0])
    {
      v35 = *(_QWORD *)(*(_QWORD *)v37[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v35 >= v14)
          v35 %= v14;
      }
      else
      {
        v35 &= v14 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v37[0];
    }
  }
  v18 = (uint64_t *)v37[0];
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

_QWORD *sub_1C542C268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    result[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1C542C2D4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1C542C3B0(a1, prime);
  }
}

void sub_1C542C3B0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1C4764EE4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_1C542C508(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

unsigned __int8 *sub_1C542C56C(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  char v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unsigned __int8 *result;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  unint64_t v18;
  char v19;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_BYTE *)(a2 + 23);
  v5 = v4 < 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 < 0)
    a2 = *(_QWORD *)a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = v6;
  else
    v8 = v7;
  v9 = sub_1C4D8463C((uint64_t)&v19, (uint64_t *)a2, v8);
  v10 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v10)
    return 0;
  v12 = v9;
  v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] <= 1uLL)
    v15 = (*(_QWORD *)&v10 - 1) & v9;
  else
    v15 = v9 < *(_QWORD *)&v10 ? v9 : v9 % *(_QWORD *)&v10;
  v16 = *(unsigned __int8 ***)(*a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = *v16;
  if (!*v16)
    return 0;
  while (1)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v12 == v18)
      break;
    if (v14 <= 1)
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    else if (v18 >= *(_QWORD *)&v10)
    {
      v18 %= *(_QWORD *)&v10;
    }
    if (v18 != v15)
      return 0;
LABEL_18:
    result = 0;
    v17 = *(unsigned __int8 **)v17;
    if (!v17)
      return result;
  }
  if (!sub_1C49C7600(v17 + 16, v2))
    goto LABEL_18;
  return v17;
}

uint64_t sub_1C542C688()
{
  int v1;
  int v2;
  __n128 v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Print IR before specified passes";
  v4.n128_u64[1] = 32;
  v2 = 1;
  v3.n128_u32[0] = 1;
  sub_1C6247118((__int128 *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED830C18, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Print IR after specified passes";
  v4.n128_u64[1] = 31;
  v2 = 1;
  v3.n128_u32[0] = 1;
  sub_1C62471E4((__int128 *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED830CF0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Print IR before each pass";
  v4.n128_u64[1] = 25;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED830DC8, "print-before-all", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830DC8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Print IR after each pass";
  v4.n128_u64[1] = 24;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED830E88, "print-after-all", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830E88, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"When printing IR for print-[before|after]{-all} always print a module IR";
  v4.n128_u64[1] = 72;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED830F48, "print-module-scope", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830F48, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"function names";
  v4.n128_u64[1] = 14;
  v3.n128_u64[0] = (unint64_t)"Only print IR for functions whose name match this for all print-[before|after][-all] options";
  v3.n128_u64[1] = 92;
  v1 = 1;
  v2 = 1;
  sub_1C62472B0((__int128 *)&v4, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED831008, &dword_1C475E000);
}

void sub_1C542C884(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  int64x2_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  char v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64x2_t v74;
  int64x2_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD v82[6];

  v4 = a1;
  v82[4] = *MEMORY[0x1E0C80C00];
  *a1 = a3;
  v5 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 80);
  if (v6 != a2 + 72)
  {
    do
    {
      if (v6)
        v8 = v6 - 24;
      else
        v8 = 0;
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a3, v8))
      {
        v73 = v8;
        sub_1C542EA40(v4 + 1, &v73);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  v73 = a2;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  sub_1C4DC1ECC(&v64, (uint64_t)&v73);
  v10 = v64;
  v9 = v65;
  if (v65 != v64)
  {
    v11 = v4 + 7;
    v12 = v82;
    v13 = &v78;
    v63 = v4 + 1;
    v14 = (char *)&v72;
    v60 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v15 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      v16 = *(_QWORD *)(v15 + 40);
      if (v16 != v15 + 40)
      {
        v17 = v16 - 24;
        if (!v16)
          v17 = 0;
        v18 = *(unsigned __int8 *)(v17 + 16) - 40;
        if (v18 < 0xFFFFFFF5)
          v17 = 0;
        if (v16)
        {
          if (*(_BYTE *)(v17 + 16) == 30 && v18 >= 0xFFFFFFF5)
          {
            v20 = *(_DWORD *)(v17 + 20);
            if ((v20 & 0x7FFFFFF) == 3)
            {
              v21 = v17 - 96;
              v22 = *(_QWORD *)(v17 - 96);
              v23 = *(unsigned __int8 *)(v22 + 16);
              if (v23 <= 0x14 && v23 == 16 && *(_QWORD *)(v17 - 32) != *(_QWORD *)(v17 - 64))
              {
                v25 = (_QWORD *)(v22 + 24);
                if (*(_DWORD *)(v22 + 32) >= 0x41u)
                  v25 = (_QWORD *)*v25;
                if ((v20 & 0x40000000) != 0)
                  v21 = *(_QWORD *)(v17 - 8);
                v26 = 64;
                if (*v25)
                  v26 = 32;
                v27 = (uint64_t *)(v21 + v26);
                v73 = v21 + v26;
                if (sub_1C542EB4C(v11, &v73))
                {
                  v28 = *v27;
                  if ((sub_1C542EC68((uint64_t)v4, *(_QWORD *)(v28 + 8)) & 1) == 0)
                  {
                    v57 = v11;
                    v58 = v12;
                    v79 = v12;
                    v81 = 4;
                    v73 = 1;
                    v74 = v60;
                    v75 = v60;
                    v56 = v13;
                    v76 = v13;
                    v77 = 0x400000000;
                    v29 = 1;
                    v82[0] = v28;
                    v62 = (uint64_t)v4;
                    v59 = v14;
                    do
                    {
                      v30 = (void *)v79[v29 - 1];
                      v80 = v29 - 1;
                      v70 = v30;
                      v68[0] = 0;
                      if ((sub_1C614F7B0(v63, &v70, v68) & 1) == 0)
                      {
                        v70 = v14;
                        v71 = 0x800000000;
                        llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants(*v4, (uint64_t)v30, (uint64_t)&v70);
                        v31 = (char *)v70;
                        if ((_DWORD)v71)
                        {
                          v32 = (char *)v70 + 8 * v71;
                          do
                          {
                            sub_1C614F72C((uint64_t)v63, v31, (uint64_t)v68);
                            if (v69)
                            {
                              v34 = (_QWORD *)v4[5];
                              v33 = v4[6];
                              if ((unint64_t)v34 >= v33)
                              {
                                v36 = (_QWORD *)v4[4];
                                v37 = v34 - v36;
                                v38 = v37 + 1;
                                if ((unint64_t)(v37 + 1) >> 61)
                                  abort();
                                v39 = v33 - (_QWORD)v36;
                                if (v39 >> 2 > v38)
                                  v38 = v39 >> 2;
                                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                                  v40 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v40 = v38;
                                if (v40)
                                {
                                  if (v40 >> 61)
                                    sub_1C4764EE4();
                                  v41 = (char *)operator new(8 * v40);
                                }
                                else
                                {
                                  v41 = 0;
                                }
                                v42 = &v41[8 * v37];
                                *(_QWORD *)v42 = *(_QWORD *)v31;
                                v35 = v42 + 8;
                                if (v34 != v36)
                                {
                                  do
                                  {
                                    v43 = *--v34;
                                    *((_QWORD *)v42 - 1) = v43;
                                    v42 -= 8;
                                  }
                                  while (v34 != v36);
                                  v34 = (_QWORD *)v4[4];
                                }
                                v4[4] = (uint64_t)v42;
                                v4[5] = (uint64_t)v35;
                                v4[6] = (uint64_t)&v41[8 * v40];
                                if (v34)
                                  operator delete(v34);
                              }
                              else
                              {
                                *v34 = *(_QWORD *)v31;
                                v35 = v34 + 1;
                              }
                              v4[5] = (uint64_t)v35;
                            }
                            v31 += 8;
                          }
                          while (v31 != v32);
                          v31 = (char *)v70;
                          v61 = (char *)v70 + 8 * v71;
                          if ((_DWORD)v71)
                          {
                            do
                            {
                              v44 = *(_QWORD *)(*(_QWORD *)v31 + 40);
                              if (v44 != *(_QWORD *)v31 + 40)
                              {
                                if (v44)
                                  v45 = v44 - 24;
                                else
                                  v45 = 0;
                                v46 = *(unsigned __int8 *)(v45 + 16);
                                v47 = v46 - 29;
                                if (v46 != 30)
                                {
                                  v48 = 2;
                                  switch(v47)
                                  {
                                    case 1:
                                      __break(1u);
                                      return;
                                    case 2:
                                      v48 = (*(_DWORD *)(v45 + 20) >> 1) & 0x3FFFFFF;
                                      goto LABEL_82;
                                    case 3:
                                    case 9:
                                      v48 = (*(_DWORD *)(v45 + 20) & 0x7FFFFFF) - 1;
                                      goto LABEL_82;
                                    case 4:
                                      goto LABEL_68;
                                    case 7:
                                      v48 = *(_WORD *)(v45 + 18) & 1;
                                      goto LABEL_82;
                                    case 8:
                                      v48 = 1;
                                      goto LABEL_68;
                                    case 10:
                                      v48 = *(_DWORD *)(v45 + 80) + 1;
LABEL_82:
                                      if (!v48)
                                        goto LABEL_79;
                                      goto LABEL_68;
                                    default:
                                      goto LABEL_79;
                                  }
                                }
                                if ((*(_DWORD *)(v45 + 20) & 0x7FFFFFF) == 3)
                                  v48 = 2;
                                else
                                  v48 = 1;
LABEL_68:
                                v49 = 0;
                                v50 = 0;
                                v51 = v45 - 64;
                                v52 = v48;
                                do
                                {
                                  v53 = *(unsigned __int8 *)(v45 + 16);
                                  if (v53 != 30)
                                    __asm { BR              X9 }
                                  v54 = *(_QWORD *)(v45 - 32 - 32 * v50);
                                  v67 = 0;
                                  v68[0] = v54;
                                  if ((sub_1C614F7B0(v63, v68, &v67) & 1) == 0
                                    && (sub_1C542EC68(v62, *(_QWORD *)(v54 + 8)) & 1) == 0)
                                  {
                                    v55 = v80;
                                    if (v80 >= (unint64_t)v81)
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, (uint64_t)v58, v80 + 1, 8);
                                      v55 = v80;
                                    }
                                    v79[v55] = v54;
                                    ++v80;
                                  }
                                  ++v50;
                                  v49 += 2;
                                  v51 += 32;
                                }
                                while (v52 != v50);
                              }
LABEL_79:
                              v31 += 8;
                            }
                            while (v31 != v61);
                            v31 = (char *)v70;
                          }
                        }
                        v14 = v59;
                        if (v31 != v59)
                          free(v31);
                        v4 = (uint64_t *)v62;
                      }
                      v29 = v80;
                    }
                    while (v80);
                    v13 = v56;
                    if (v76 != v56)
                      free(v76);
                    v12 = v58;
                    if ((v73 & 1) == 0)
                      MEMORY[0x1CAA32FB4](v74.i64[0], 8);
                    v11 = v57;
                    if (v79 != v58)
                      free(v79);
                  }
                }
              }
            }
          }
        }
      }
    }
    while (v9 != v10);
    v9 = v64;
  }
  if (v9)
  {
    v65 = v9;
    operator delete(v9);
  }
}

_BYTE *sub_1C542CEE0(llvm *a1, uint64_t a2, uint64_t a3)
{
  llvm *v5;
  llvm::raw_ostream *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm **v12;
  llvm *v13;
  int v14;
  int v15;
  size_t *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  _QWORD ***v21;
  _QWORD **v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  unint64_t v27;
  char *i;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  llvm *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t j;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  llvm::Value *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  llvm::Value *v107;
  llvm::Value *v108;
  int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  llvm::Value *v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t **v122;
  llvm::Value *v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t *v132;
  int v133;
  unsigned int v134;
  uint64_t **v135;
  uint64_t *v136;
  int v137;
  int v138;
  unsigned int v139;
  uint64_t *v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  llvm::Value *v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  uint64_t *v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  llvm::Value *v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  uint64_t *v159;
  unsigned int v160;
  llvm::Value *v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  char *v177;
  _QWORD *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  _BYTE *result;
  _QWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  int32x2_t *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  BOOL v192;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  BOOL v200;
  int v202;
  uint64_t v203;
  __int32 v204;
  int32x2_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  int v210;
  int v211;
  unsigned int v212;
  __int32 v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  int v229;
  _QWORD *v230;
  _QWORD *v231;
  __int32 v232;
  _QWORD *v233;
  uint64_t v234;
  llvm::Instruction *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  _BOOL4 v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  int v267;
  uint64_t v268;
  uint64_t **v269;
  __int32 v270;
  int32x2_t v271;
  __int32 v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t **v278;
  uint64_t *v279;
  unsigned int v280;
  uint64_t *v281;
  int v282;
  unsigned int v283;
  __int32 v284;
  int32x2_t v285;
  __int32 v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t *v296;
  int v297;
  unsigned int v298;
  int v299;
  int v300;
  llvm::Instruction *v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  uint64_t v308;
  llvm *v309;
  llvm::raw_ostream *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  llvm **v316;
  llvm *v317;
  int v318;
  int v319;
  size_t *v320;
  const void *v321;
  size_t v322;
  size_t v323;
  _BYTE *v324;
  llvm *v325;
  __int32 v326;
  __int32 v327;
  uint64_t *v328;
  char *v330;
  char v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD v339[2];
  int v340;
  uint64_t v341[3];
  uint64_t v342;
  uint64_t v343;
  _QWORD v344[2];
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  _OWORD v349[3];
  _QWORD v350[2];
  int v351;
  uint64_t v352;
  int32x2_t v353;
  int v354;
  uint64_t v355;

  v355 = *MEMORY[0x1E0C80C00];
  if (byte_1ED804C40)
  {
    v5 = llvm::dbgs(a1);
    v6 = v5;
    v7 = (void *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v7 > 0x22uLL)
    {
      qmemcpy(v7, "Verifying gc pointers in function: ", 35);
      *((_QWORD *)v5 + 4) += 35;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v5, "Verifying gc pointers in function: ", 0x23uLL);
    }
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v20 = (_BYTE *)*((_QWORD *)v6 + 4);
LABEL_16:
      if (*((_BYTE **)v6 + 3) == v20)
      {
        llvm::raw_ostream::write(v6, "\n", 1uLL);
      }
      else
      {
        *v20 = 10;
        ++*((_QWORD *)v6 + 4);
      }
      goto LABEL_18;
    }
    v8 = ***(_QWORD ***)a1;
    v9 = *(_QWORD *)(v8 + 152);
    v10 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v12 = (llvm **)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == a1)
        goto LABEL_12;
      v14 = 1;
      while (v13 != (llvm *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(llvm **)(v9 + 16 * v11);
        if (v13 == a1)
        {
          v12 = (llvm **)(v9 + 16 * v11);
          goto LABEL_12;
        }
      }
    }
    v12 = (llvm **)(v9 + 16 * v10);
LABEL_12:
    v16 = (size_t *)v12[1];
    v19 = *v16;
    v17 = v16 + 2;
    v18 = v19;
    v20 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (v19 <= *((_QWORD *)v6 + 3) - (_QWORD)v20)
    {
      if (v18)
      {
        memcpy(v20, v17, v18);
        v20 = (_BYTE *)(*((_QWORD *)v6 + 4) + v18);
        *((_QWORD *)v6 + 4) = v20;
      }
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, (const char *)v17, v18);
      v20 = (_BYTE *)*((_QWORD *)v6 + 4);
    }
    goto LABEL_16;
  }
LABEL_18:
  v342 = (uint64_t)a1;
  v343 = a3;
  v344[0] = 0;
  v344[1] = 0;
  v345 = (char *)&v347;
  v346 = 0x400000000;
  v21 = (_QWORD ***)((char *)a1 + 72);
  memset(v349, 0, 44);
  v350[0] = 0;
  v350[1] = 0;
  v348 = (char *)v349 + 8;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  v354 = 0;
  v325 = a1;
  v22 = (_QWORD **)*((_QWORD *)a1 + 10);
  if (v22 == v21)
  {
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v25 = (uint64_t *)(a3 + 8);
    do
    {
      if (v22)
        v26 = (char *)(v22 - 3);
      else
        v26 = 0;
      v332 = v26;
      v341[0] = 0;
      if ((sub_1C614F7B0(v25, &v332, v341) & 1) == 0)
      {
        v27 = sub_1C484358C((uint64_t)v344, 80, 3);
        *(_QWORD *)(v27 + 48) = 0;
        *(_BYTE *)(v27 + 72) = 0;
        *(_QWORD *)v27 = 0;
        *(_QWORD *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 16) = 0;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        for (i = (char *)*((_QWORD *)v26 + 6); i != v26 + 40; i = (char *)*((_QWORD *)i + 1))
        {
          if (i)
            v29 = (uint64_t *)(i - 24);
          else
            v29 = 0;
          sub_1C542EDE8(v29, (_BYTE *)(v27 + 72), (_DWORD *)(v27 + 48));
        }
        v332 = v26;
        sub_1C6180A54((uint64_t)&v349[1] + 8, (uint64_t *)&v332)[1] = v27;
      }
      v22 = (_QWORD **)v22[1];
    }
    while (v22 != v21);
    v24 = (_QWORD *)*((_QWORD *)&v349[1] + 1);
    v30 = v349[2];
    v23 = DWORD2(v349[2]);
    if (LODWORD(v349[2]))
    {
      v32 = *((_QWORD *)&v349[1] + 1) + 16 * DWORD2(v349[2]);
      if (DWORD2(v349[2]))
      {
        v308 = 0;
        while ((*(_QWORD *)(*((_QWORD *)&v349[1] + 1) + v308) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v308 += 16;
          if (16 * DWORD2(v349[2]) == v308)
          {
            v31 = (uint64_t *)(*((_QWORD *)&v349[1] + 1) + 16 * DWORD2(v349[2]));
            goto LABEL_35;
          }
        }
        v31 = (uint64_t *)(*((_QWORD *)&v349[1] + 1) + v308);
      }
      else
      {
        v31 = (uint64_t *)*((_QWORD *)&v349[1] + 1);
      }
      goto LABEL_35;
    }
  }
  v30 = 0;
  v31 = &v24[2 * v23];
  v32 = (uint64_t)v31;
LABEL_35:
  v328 = &v24[2 * v23];
  if (v31 == v328)
  {
    v33 = v23;
    goto LABEL_97;
  }
  v34 = a2;
  do
  {
    v35 = *v31;
    v36 = *(unsigned int *)(v34 + 40);
    if (!(_DWORD)v36)
      goto LABEL_46;
    v37 = *(_QWORD *)(v34 + 24);
    LODWORD(v38) = ((v35 >> 4) ^ (v35 >> 9)) & (v36 - 1);
    v39 = (uint64_t *)(v37 + 16 * v38);
    v40 = *v39;
    if (v35 != *v39)
    {
      v41 = 1;
      while (v40 != -4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v36 - 1);
        v40 = *(_QWORD *)(v37 + 16 * v38);
        if (v35 == v40)
        {
          v39 = (uint64_t *)(v37 + 16 * v38);
          goto LABEL_44;
        }
      }
LABEL_46:
      v43 = 0;
      goto LABEL_47;
    }
LABEL_44:
    if (v39 == (uint64_t *)(v37 + 16 * v36))
      goto LABEL_46;
    v43 = (_QWORD *)v39[1];
LABEL_47:
    v44 = v31[1];
    while (1)
    {
      v43 = (_QWORD *)v43[1];
      if (!v43)
        break;
      v45 = ((*v43 >> 4) ^ (*v43 >> 9)) & (DWORD2(v349[2]) - 1);
      if (*v43 != *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v45))
      {
        v64 = 1;
        do
        {
          v65 = v45 + v64++;
          v45 = v65 & (DWORD2(v349[2]) - 1);
        }
        while (*v43 != *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v45));
      }
      v46 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v45 + 8);
      v47 = *(_QWORD *)(v46 + 48);
      v48 = *(unsigned int *)(v46 + 64);
      v49 = (_QWORD *)(v47 + 8 * v48);
      if (*(_DWORD *)(v46 + 56))
      {
        if (*(_DWORD *)(v46 + 64))
        {
          v50 = 8 * v48;
          v51 = *(_QWORD **)(v46 + 48);
          while ((*v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            ++v51;
            v50 -= 8;
            if (!v50)
              goto LABEL_55;
          }
        }
        else
        {
          v51 = *(_QWORD **)(v46 + 48);
        }
      }
      else
      {
LABEL_55:
        v51 = (_QWORD *)(v47 + 8 * v48);
      }
      v52 = (_QWORD *)(v47 + 8 * v48);
LABEL_58:
      while (v51 != v52)
      {
        v53 = *(_DWORD *)(v44 + 16);
        if (!v53)
        {
          v62 = 0;
LABEL_73:
          *sub_1C4E1CBB4(v44, (uint64_t)v51, v51, v62) = *v51;
          goto LABEL_74;
        }
        v54 = v53 - 1;
        v55 = ((*v51 >> 4) ^ (*v51 >> 9)) & v54;
        v56 = (_QWORD *)(*(_QWORD *)v44 + 8 * v55);
        v57 = *v56;
        if (*v51 != *v56)
        {
          v58 = 0;
          v59 = 1;
          while (v57 != -4096)
          {
            if (v58)
              v60 = 0;
            else
              v60 = v57 == -8192;
            if (v60)
              v58 = v56;
            v61 = v55 + v59++;
            v55 = v61 & v54;
            v56 = (_QWORD *)(*(_QWORD *)v44 + 8 * v55);
            v57 = *v56;
            if (*v51 == *v56)
              goto LABEL_74;
          }
          if (v58)
            v62 = v58;
          else
            v62 = v56;
          goto LABEL_73;
        }
LABEL_74:
        v63 = v51 + 1;
        v51 = v49;
        if (v63 != v49)
        {
          v51 = v63;
          while ((*v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v51 == v49)
            {
              v51 = v49;
              goto LABEL_58;
            }
          }
        }
      }
      if (*(_BYTE *)(v46 + 72))
        goto LABEL_90;
    }
    v66 = sub_1C485F330(*(_QWORD *)(v35 + 56));
    if ((uint64_t *)v66 != v67)
    {
      v68 = (uint64_t *)v66;
      v69 = v67;
      do
      {
        if (sub_1C542F044(*v68))
        {
          v341[0] = (uint64_t)v68;
          sub_1C61904FC(v44, v341, (uint64_t)&v332);
        }
        v68 += 5;
      }
      while (v68 != v69);
    }
LABEL_90:
    sub_1C542EE6C((_BYTE *)v31[1], 1);
    v70 = v31 + 2;
    v31 = (uint64_t *)v32;
    v34 = a2;
    if (v70 != (uint64_t *)v32)
    {
      v31 = v70;
      while ((*v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v31 += 2;
        if (v31 == (uint64_t *)v32)
        {
          v31 = (uint64_t *)v32;
          break;
        }
      }
    }
  }
  while (v31 != v328);
  v24 = (_QWORD *)*((_QWORD *)&v349[1] + 1);
  v30 = v349[2];
  v33 = DWORD2(v349[2]);
  v23 = DWORD2(v349[2]);
LABEL_97:
  v332 = 0;
  v333 = 0;
  LODWORD(v334) = 0;
  v336 = 0;
  v337 = 0;
  v71 = &v24[2 * v33];
  v335 = 0;
  if (v30)
  {
    if (v23)
    {
      v73 = 16 * v33;
      v72 = v24;
      while ((*v72 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v72 += 2;
        v73 -= 16;
        if (!v73)
          goto LABEL_105;
      }
    }
    else
    {
      v72 = v24;
    }
  }
  else
  {
LABEL_105:
    v72 = &v24[2 * v33];
  }
  v74 = &v24[2 * v23];
  if (v72 == v74)
    goto LABEL_114;
  do
  {
    sub_1C542EA40(&v332, v72);
    v75 = v72 + 2;
    v72 = v71;
    if (v75 != v71)
    {
      v72 = v75;
      while ((*v72 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v72 += 2;
        if (v72 == v71)
        {
          v72 = v71;
          break;
        }
      }
    }
  }
  while (v72 != v74);
  v76 = v336;
  if (v335 == v336)
  {
LABEL_114:
    sub_1C6176BF8(&v332);
    LOBYTE(v339[0]) = 0;
    v341[0] = v342;
    v333 = 0;
    v334 = 0;
    v332 = 0;
    sub_1C4DC1ECC(&v332, (uint64_t)v341);
    v78 = v333;
    v330 = v332;
    if (v333 == v332)
      goto LABEL_240;
    while (1)
    {
      v80 = *((_QWORD *)v78 - 1);
      v78 -= 8;
      v79 = v80;
      if (DWORD2(v349[2]))
      {
        v81 = ((v79 >> 4) ^ (v79 >> 9)) & (DWORD2(v349[2]) - 1);
        v82 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v81);
        if (v79 == v82)
        {
LABEL_117:
          v83 = *(_DWORD **)(*((_QWORD *)&v349[1] + 1) + 16 * v81 + 8);
          if (v83)
          {
            v84 = v79 + 40;
            for (j = *(_QWORD *)(v79 + 48); ; j = *(_QWORD *)(j + 8))
            {
              if (j == v84)
                goto LABEL_238;
              if (j)
                v86 = j - 24;
              else
                v86 = 0;
              if (v351)
              {
                v87 = ((v86 >> 4) ^ (v86 >> 9)) & (v351 - 1);
                v88 = *(_QWORD *)(v350[0] + 8 * v87);
                if (v86 == v88)
                  continue;
                v89 = 1;
                while (v88 != -4096)
                {
                  v90 = v87 + v89++;
                  v87 = v90 & (v351 - 1);
                  v88 = *(_QWORD *)(v350[0] + 8 * v87);
                  if (v86 == v88)
                    goto LABEL_193;
                }
              }
              if (v354)
              {
                v91 = (v354 - 1) & ((v86 >> 4) ^ (v86 >> 9));
                v92 = *(_QWORD *)(v352 + 8 * v91);
                if (v86 == v92)
                  continue;
                v93 = 1;
                while (v92 != -4096)
                {
                  v94 = v91 + v93++;
                  v91 = v94 & (v354 - 1);
                  v92 = *(_QWORD *)(v352 + 8 * v91);
                  if (v86 == v92)
                    goto LABEL_193;
                }
              }
              v95 = *(unsigned __int8 *)(v86 + 16);
              if (v95 == 83)
                v96 = (llvm::Value *)v86;
              else
                v96 = 0;
              if (v95 == 83)
              {
                if (sub_1C542F044(*(_QWORD *)v86))
                {
                  v97 = *(_DWORD *)(v86 + 20);
                  v98 = v97 & 0x7FFFFFF;
                  if ((v97 & 0x7FFFFFF) != 0)
                  {
                    v99 = 0;
                    while (2)
                    {
                      v100 = *(_DWORD *)(v86 + 20);
                      if ((v100 & 0x40000000) != 0)
                        v101 = *(char **)(v86 - 8);
                      else
                        v101 = (char *)v96 - 32 * (v100 & 0x7FFFFFF);
                      if (DWORD2(v349[2]))
                      {
                        v102 = *(_QWORD *)&v101[32 * *(unsigned int *)(v86 + 60) + 8 * v99];
                        v103 = ((v102 >> 4) ^ (v102 >> 9)) & (DWORD2(v349[2]) - 1);
                        v104 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v103);
                        if (v102 != v104)
                        {
                          v116 = 1;
                          while (v104 != -4096)
                          {
                            v117 = v103 + v116++;
                            v103 = v117 & (DWORD2(v349[2]) - 1);
                            v104 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v103);
                            if (v102 == v104)
                              goto LABEL_147;
                          }
                          goto LABEL_160;
                        }
LABEL_147:
                        v105 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v103 + 8);
                        if (v105 && sub_1C542F10C(v343, *(_QWORD *)(*(_QWORD *)(v86 + 40) + 8), v102))
                        {
                          v106 = *(_DWORD *)(v86 + 20);
                          v107 = (v106 & 0x40000000) != 0
                               ? *(llvm::Value **)(v86 - 8)
                               : (llvm::Value *)((char *)v96 - 32 * (v106 & 0x7FFFFFF));
                          v108 = (llvm::Value *)*((_QWORD *)v107 + 4 * v99);
                          if (sub_1C542F1F0((uint64_t)v108) == 1)
                          {
                            v109 = *(_DWORD *)(v105 + 40);
                            if (!v109)
                              goto LABEL_159;
                            v110 = *(_QWORD *)(v105 + 24);
                            v111 = v109 - 1;
                            v112 = v111 & ((v108 >> 4) ^ (v108 >> 9));
                            v113 = *(llvm::Value **)(v110 + 8 * v112);
                            if (v108 != v113)
                            {
                              v114 = 1;
                              while (v113 != (llvm::Value *)-4096)
                              {
                                v115 = v112 + v114++;
                                v112 = v115 & v111;
                                v113 = *(llvm::Value **)(v110 + 8 * v112);
                                if (v108 == v113)
                                  goto LABEL_160;
                              }
LABEL_159:
                              sub_1C542F4F0((llvm *)v339, v108, v96);
                            }
                          }
                        }
                      }
LABEL_160:
                      if (++v99 == v98)
                        goto LABEL_192;
                      continue;
                    }
                  }
                }
                goto LABEL_192;
              }
              v118 = *(_DWORD *)(v86 + 20);
              if ((v95 - 81) > 1)
              {
                if ((v118 & 0x40000000) == 0)
                {
LABEL_171:
                  v121 = v118 & 0x7FFFFFF;
                  v122 = (uint64_t **)(v86 - 32 * v121);
                  if ((v118 & 0x7FFFFFF) != 0)
                    goto LABEL_181;
                  goto LABEL_192;
                }
LABEL_180:
                v122 = *(uint64_t ***)(v86 - 8);
                v121 = v118 & 0x7FFFFFF;
                if ((v118 & 0x7FFFFFF) == 0)
                  goto LABEL_192;
LABEL_181:
                v135 = &v122[4 * v121];
                while (2)
                {
                  v136 = *v122;
                  if (sub_1C542F044(**v122) && sub_1C542F1F0((uint64_t)v136) == 1)
                  {
                    v137 = v83[4];
                    if (!v137)
                      goto LABEL_190;
                    v138 = v137 - 1;
                    v139 = v138 & ((v136 >> 4) ^ (v136 >> 9));
                    v140 = *(uint64_t **)(*(_QWORD *)v83 + 8 * v139);
                    if (v136 != v140)
                    {
                      v141 = 1;
                      while (v140 != (uint64_t *)-4096)
                      {
                        v142 = v139 + v141++;
                        v139 = v142 & v138;
                        v140 = *(uint64_t **)(*(_QWORD *)v83 + 8 * v139);
                        if (v136 == v140)
                          goto LABEL_191;
                      }
LABEL_190:
                      sub_1C542F4F0((llvm *)v339, (llvm::Value *)v136, (llvm::Value *)v86);
                    }
                  }
LABEL_191:
                  v122 += 4;
                  if (v122 == v135)
                    goto LABEL_192;
                  continue;
                }
              }
              if ((v118 & 0x40000000) != 0)
              {
                v119 = *(_QWORD *)(v86 - 8);
                v120 = *(uint64_t **)v119;
                if (!sub_1C542F044(**(_QWORD **)v119))
                  goto LABEL_180;
              }
              else
              {
                v119 = v86 - 32 * (v118 & 0x7FFFFFF);
                v120 = *(uint64_t **)v119;
                if ((sub_1C542F044(**(_QWORD **)v119) & 1) == 0)
                  goto LABEL_171;
              }
              v123 = *(llvm::Value **)(v119 + 32);
              v124 = sub_1C542F1F0((uint64_t)v120);
              v125 = sub_1C542F1F0((uint64_t)v123);
              v126 = v125;
              v127 = *(_QWORD *)v83;
              v128 = v83[4];
              v129 = v120 >> 4;
              if (v128)
              {
                v130 = v128 - 1;
                v131 = (v128 - 1) & (v129 ^ (v120 >> 9));
                v132 = *(uint64_t **)(v127 + 8 * v131);
                if (v120 == v132)
                  goto LABEL_198;
                v133 = 1;
                while (v132 != (uint64_t *)-4096)
                {
                  v134 = v131 + v133++;
                  v131 = v134 & v130;
                  v132 = *(uint64_t **)(v127 + 8 * v131);
                  if (v120 == v132)
                    goto LABEL_198;
                }
                v143 = v130 & ((v123 >> 4) ^ (v123 >> 9));
                v144 = *(llvm::Value **)(v127 + 8 * v143);
                if (v123 == v144)
                  goto LABEL_198;
                v145 = 1;
                while (v144 != (llvm::Value *)-4096)
                {
                  v146 = v143 + v145++;
                  v143 = v146 & v130;
                  v144 = *(llvm::Value **)(v127 + 8 * v143);
                  if (v123 == v144)
                    goto LABEL_198;
                }
              }
              if (v124 != 3 || v125 != 1)
                break;
LABEL_208:
              if (!v128)
                goto LABEL_214;
              v152 = v128 - 1;
              v153 = v152 & ((v123 >> 4) ^ (v123 >> 9));
              v154 = *(llvm::Value **)(v127 + 8 * v153);
              if (v123 != v154)
              {
                v155 = 1;
                while (v154 != (llvm::Value *)-4096)
                {
                  v156 = v153 + v155++;
                  v153 = v156 & v152;
                  v154 = *(llvm::Value **)(v127 + 8 * v153);
                  if (v123 == v154)
                    goto LABEL_192;
                }
LABEL_214:
                sub_1C542F4F0((llvm *)v339, v123, (llvm::Value *)v86);
              }
LABEL_192:
              LOBYTE(v341[0]) = 0;
              v77 = (llvm *)sub_1C542EDE8((uint64_t *)v86, v341, v83);
LABEL_193:
              ;
            }
            if (v124 == 1 && v125 == 3)
              goto LABEL_199;
            if (!v354)
              goto LABEL_192;
            v157 = v354 - 1;
            v158 = (v354 - 1) & (v129 ^ (v120 >> 9));
            v159 = *(uint64_t **)(v352 + 8 * v158);
            if (v120 == v159)
            {
LABEL_221:
              if (v125 == 2)
                goto LABEL_222;
LABEL_198:
              if (v124 == 1)
                goto LABEL_199;
LABEL_206:
              if (v126 != 1)
                goto LABEL_192;
              v127 = *(_QWORD *)v83;
              v128 = v83[4];
              goto LABEL_208;
            }
            v162 = 1;
            while (v159 != (uint64_t *)-4096)
            {
              v163 = v158 + v162++;
              v158 = v163 & v157;
              v159 = *(uint64_t **)(v352 + 8 * v158);
              if (v120 == v159)
                goto LABEL_221;
            }
LABEL_222:
            v160 = v157 & ((v123 >> 4) ^ (v123 >> 9));
            v161 = *(llvm::Value **)(v352 + 8 * v160);
            if (v123 != v161)
            {
              v164 = 1;
              while (v161 != (llvm::Value *)-4096)
              {
                v165 = v160 + v164++;
                v160 = v165 & v157;
                v161 = *(llvm::Value **)(v352 + 8 * v160);
                if (v123 == v161)
                  goto LABEL_223;
              }
              goto LABEL_192;
            }
LABEL_223:
            if (v124 != 1)
            {
              if (v124 == 2)
                goto LABEL_192;
              goto LABEL_206;
            }
LABEL_199:
            if (v128)
            {
              v147 = v128 - 1;
              v148 = v147 & (v129 ^ (v120 >> 9));
              v149 = *(uint64_t **)(v127 + 8 * v148);
              if (v120 == v149)
                goto LABEL_206;
              v150 = 1;
              while (v149 != (uint64_t *)-4096)
              {
                v151 = v148 + v150++;
                v148 = v151 & v147;
                v149 = *(uint64_t **)(v127 + 8 * v148);
                if (v120 == v149)
                  goto LABEL_206;
              }
            }
            sub_1C542F4F0((llvm *)v339, (llvm::Value *)v120, (llvm::Value *)v86);
            goto LABEL_206;
          }
        }
        else
        {
          v166 = 1;
          while (v82 != -4096)
          {
            v167 = v81 + v166++;
            v81 = v167 & (DWORD2(v349[2]) - 1);
            v82 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v81);
            if (v79 == v82)
              goto LABEL_117;
          }
        }
      }
LABEL_238:
      if (v78 == v330)
      {
        v78 = v332;
LABEL_240:
        if (v78)
        {
          v333 = v78;
          operator delete(v78);
        }
        if (!byte_1ED804C40 || LOBYTE(v339[0]))
        {
LABEL_244:
          MEMORY[0x1CAA32FB4](v352, 8);
          MEMORY[0x1CAA32FB4](v350[0], 8);
          MEMORY[0x1CAA32FB4](*((_QWORD *)&v349[1] + 1), 8);
          if ((_DWORD)v346)
          {
            v168 = v345;
            v169 = &v345[8 * v346];
            do
            {
              v170 = *(_QWORD *)v168;
              if (*(_QWORD *)v168 == *(_QWORD *)&v345[8 * v346 - 8])
              {
                v172 = v344[0];
              }
              else
              {
                v171 = ((unint64_t)(v168 - v345) >> 10) & 0x1FFFFFF;
                if (v171 >= 0x1E)
                  LOBYTE(v171) = 30;
                v172 = v170 + (4096 << v171);
              }
              v173 = (_QWORD *)((v170 + 7) & 0xFFFFFFFFFFFFFFF8);
              v174 = v173 + 10;
              while ((unint64_t)v174 <= v172)
              {
                v175 = sub_1C62475B0(v173);
                v174 = v175 + 20;
                v173 = v175 + 10;
              }
              v168 += 8;
            }
            while (v168 != v169);
          }
          if (LODWORD(v349[0]))
          {
            v176 = v348;
            v177 = &v348[16 * LODWORD(v349[0])];
            do
            {
              v178 = (_QWORD *)((*(_QWORD *)v176 + 7) & 0xFFFFFFFFFFFFFFF8);
              v179 = *(_QWORD *)v176 + *((_QWORD *)v176 + 1);
              v180 = v178 + 10;
              while ((unint64_t)v180 <= v179)
              {
                v181 = sub_1C62475B0(v178);
                v180 = v181 + 20;
                v178 = v181 + 10;
              }
              v176 += 16;
            }
            while (v176 != v177);
          }
          sub_1C4926A50((uint64_t)v344);
          return (_BYTE *)sub_1C4926AE8((uint64_t)v344);
        }
        v309 = llvm::dbgs(v77);
        v310 = v309;
        v311 = (void *)*((_QWORD *)v309 + 4);
        if (*((_QWORD *)v309 + 3) - (_QWORD)v311 > 0x30uLL)
        {
          qmemcpy(v311, "No illegal uses found by SafepointIRVerifier in: ", 49);
          *((_QWORD *)v309 + 4) += 49;
        }
        else
        {
          v310 = llvm::raw_ostream::write(v309, "No illegal uses found by SafepointIRVerifier in: ", 0x31uLL);
        }
        if ((*((_BYTE *)v325 + 23) & 0x10) != 0)
        {
          v312 = ***(_QWORD ***)v325;
          v313 = *(_QWORD *)(v312 + 152);
          v314 = *(unsigned int *)(v312 + 168);
          if (!(_DWORD)v314)
            goto LABEL_473;
          LODWORD(v315) = (v314 - 1) & ((v325 >> 4) ^ (v325 >> 9));
          v316 = (llvm **)(v313 + 16 * v315);
          v317 = *v316;
          if (*v316 != v325)
          {
            v318 = 1;
            while (v317 != (llvm *)-4096)
            {
              v319 = v315 + v318++;
              v315 = v319 & (v314 - 1);
              v317 = *(llvm **)(v313 + 16 * v315);
              if (v317 == v325)
              {
                v316 = (llvm **)(v313 + 16 * v315);
                goto LABEL_474;
              }
            }
LABEL_473:
            v316 = (llvm **)(v313 + 16 * v314);
          }
LABEL_474:
          v320 = (size_t *)v316[1];
          v323 = *v320;
          v321 = v320 + 2;
          v322 = v323;
          v324 = (_BYTE *)*((_QWORD *)v310 + 4);
          if (v323 <= *((_QWORD *)v310 + 3) - (_QWORD)v324)
          {
            if (v322)
            {
              memcpy(v324, v321, v322);
              v324 = (_BYTE *)(*((_QWORD *)v310 + 4) + v322);
              *((_QWORD *)v310 + 4) = v324;
            }
          }
          else
          {
            v310 = llvm::raw_ostream::write(v310, (const char *)v321, v322);
            v324 = (_BYTE *)*((_QWORD *)v310 + 4);
          }
        }
        else
        {
          v324 = (_BYTE *)*((_QWORD *)v310 + 4);
        }
        if (*((_BYTE **)v310 + 3) == v324)
        {
          llvm::raw_ostream::write(v310, "\n", 1uLL);
        }
        else
        {
          *v324 = 10;
          ++*((_QWORD *)v310 + 4);
        }
        goto LABEL_244;
      }
    }
  }
  while (2)
  {
    v183 = *(_QWORD **)(v76 - 8);
    v341[0] = 0;
    if (sub_1C614F7B0((uint64_t *)&v332, (_QWORD *)(v76 - 8), v341))
    {
      *(_QWORD *)v341[0] = -8192;
      v333 = (char *)vadd_s32((int32x2_t)v333, (int32x2_t)0x1FFFFFFFFLL);
    }
    v336 -= 8;
    v184 = DWORD2(v349[2]);
    if (!DWORD2(v349[2]))
      goto LABEL_445;
    v185 = *((_QWORD *)&v349[1] + 1);
    v186 = (DWORD2(v349[2]) - 1) & ((v183 >> 4) ^ (v183 >> 9));
    v187 = *(_QWORD **)(*((_QWORD *)&v349[1] + 1) + 16 * v186);
    if (v183 != v187)
    {
      v306 = 1;
      while (v187 != (_QWORD *)-4096)
      {
        v307 = v186 + v306++;
        v186 = v307 & (DWORD2(v349[2]) - 1);
        v187 = *(_QWORD **)(*((_QWORD *)&v349[1] + 1) + 16 * v186);
        if (v183 == v187)
          goto LABEL_266;
      }
      goto LABEL_445;
    }
LABEL_266:
    v188 = *(int32x2_t **)(*((_QWORD *)&v349[1] + 1) + 16 * v186 + 8);
    if (!v188)
      goto LABEL_445;
    v189 = v183[1];
    v327 = v188[1].i32[0];
    if (v189)
    {
      while (1)
      {
        v190 = *(_QWORD *)(v189 + 24);
        v191 = *(unsigned __int8 *)(v190 + 16);
        v192 = v190 && v191 >= 0x1C;
        if (v192 && v191 - 29 <= 0xA)
          break;
        v189 = *(_QWORD *)(v189 + 8);
        if (!v189)
          goto LABEL_277;
      }
LABEL_278:
      if (!v184)
        goto LABEL_281;
      v194 = *(_QWORD *)(v190 + 40);
      v195 = v184 - 1;
      v196 = ((v194 >> 4) ^ (v194 >> 9)) & (v184 - 1);
      v197 = *(_QWORD *)(v185 + 16 * v196);
      if (v194 != v197)
      {
        v228 = 1;
        do
        {
          if (v197 == -4096)
            goto LABEL_281;
          v229 = v196 + v228++;
          v196 = v229 & v195;
          v197 = *(_QWORD *)(v185 + 16 * v196);
        }
        while (v194 != v197);
      }
      v198 = *(_QWORD *)(v185 + 16 * v196 + 8);
      if (v198)
      {
        v202 = *(_DWORD *)(v190 + 20);
        v203 = (v202 & 0x40000000) != 0 ? *(_QWORD *)(v190 - 8) : v190 - 32 * (v202 & 0x7FFFFFF);
        v341[0] = v203 + ((v189 - v203) & 0x1FFFFFFFE0);
        v339[0] = 0;
        if ((sub_1C614F7B0((uint64_t *)(v343 + 56), v341, v339) & 1) == 0)
        {
          v204 = v188[1].i32[0];
          v205 = *v188;
          v206 = v188[2].u32[0];
          v207 = *(_QWORD *)v188 + 8 * v206;
          if (v204)
          {
            if ((_DWORD)v206)
            {
              v208 = 8 * v206;
              v209 = (uint64_t *)*v188;
              while ((*v209 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                ++v209;
                v208 -= 8;
                if (!v208)
                  goto LABEL_298;
              }
            }
            else
            {
              v209 = (uint64_t *)*v188;
            }
          }
          else
          {
LABEL_298:
            v209 = (uint64_t *)(*(_QWORD *)v188 + 8 * v206);
          }
          if (v209 == (uint64_t *)(*(_QWORD *)&v205 + 8 * v206))
            goto LABEL_281;
          v210 = *(_DWORD *)(v198 + 40);
          v211 = v210 - 1;
          v212 = v206 - 1;
          v213 = v188[1].i32[1];
          while (2)
          {
            v214 = v209;
            v215 = v209 + 1;
            v209 = (uint64_t *)v207;
            if (v215 != (uint64_t *)v207)
            {
              v209 = v215;
              do
              {
                if ((*v209 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_307;
                ++v209;
              }
              while (v209 != (uint64_t *)v207);
              v209 = (uint64_t *)v207;
            }
LABEL_307:
            v216 = *v214;
            v217 = v216 >> 4;
            if (v210)
            {
              v218 = *(_QWORD *)(v198 + 24);
              v219 = (v217 ^ (v216 >> 9)) & v211;
              v220 = *(_QWORD *)(v218 + 8 * v219);
              if (v216 != v220)
              {
                v221 = 1;
                while (v220 != -4096)
                {
                  v222 = v219 + v221++;
                  v219 = v222 & v211;
                  v220 = *(_QWORD *)(v218 + 8 * v219);
                  if (v216 == v220)
                    goto LABEL_320;
                }
                goto LABEL_313;
              }
            }
            else
            {
LABEL_313:
              if ((_DWORD)v206)
              {
                LODWORD(v223) = (v217 ^ (v216 >> 9)) & v212;
                v224 = (uint64_t *)(*(_QWORD *)&v205 + 8 * v223);
                v225 = *v224;
                if (v216 != *v224)
                {
                  v226 = 1;
                  do
                  {
                    if (v225 == -4096)
                      goto LABEL_320;
                    v227 = v223 + v226++;
                    v223 = v227 & v212;
                    v225 = *(_QWORD *)(*(_QWORD *)&v205 + 8 * v223);
                  }
                  while (v216 != v225);
                  v224 = (uint64_t *)(*(_QWORD *)&v205 + 8 * v223);
                }
                *v224 = -8192;
                --v204;
                ++v213;
                v188[1].i32[0] = v204;
                v188[1].i32[1] = v213;
                v205 = *v188;
              }
            }
LABEL_320:
            if (v209 == (uint64_t *)(*(_QWORD *)&v205 + 8 * v206))
              break;
            continue;
          }
        }
      }
LABEL_281:
      while (1)
      {
        v189 = *(_QWORD *)(v189 + 8);
        if (!v189)
          break;
        v190 = *(_QWORD *)(v189 + 24);
        v199 = *(unsigned __int8 *)(v190 + 16);
        if (v190)
          v200 = v199 >= 0x1C;
        else
          v200 = 0;
        if (v200 && v199 - 29 <= 0xA)
        {
          v185 = *((_QWORD *)&v349[1] + 1);
          v184 = DWORD2(v349[2]);
          goto LABEL_278;
        }
      }
      v326 = v188[1].i32[0];
    }
    else
    {
LABEL_277:
      v326 = v188[1].i32[0];
    }
    v339[0] = 0;
    v339[1] = 0;
    v340 = 0;
    sub_1C4DFE328((uint64_t)v339, (uint64_t)v188);
    v331 = 0;
    v230 = v183 + 5;
    v231 = (_QWORD *)v183[6];
    if (v231 != v230)
    {
      v331 = 0;
      do
      {
        if (v231)
          v236 = (uint64_t)(v231 - 3);
        else
          v236 = 0;
        v237 = *(unsigned __int8 *)(v236 + 16);
        if (v237 == 83)
          v238 = v236;
        else
          v238 = 0;
        if (v231 && v237 == 83)
        {
          if (sub_1C542F044(*(_QWORD *)v238))
          {
            v239 = *(_DWORD *)(v238 + 20);
            v240 = v239 & 0x7FFFFFF;
            if ((v239 & 0x7FFFFFF) != 0)
            {
              v241 = 0;
              v242 = 0;
              v243 = 0;
              do
              {
                v341[0] = 0;
                v244 = *(_DWORD *)(v238 + 20);
                if ((v244 & 0x40000000) != 0)
                  v245 = *(_QWORD *)(v238 - 8);
                else
                  v245 = v238 - 32 * (v244 & 0x7FFFFFF);
                v246 = *(_QWORD *)(v245 + 32 * *(unsigned int *)(v238 + 60) + 8 * v241);
                v341[0] = v246;
                if (DWORD2(v349[2]))
                {
                  v247 = ((v246 >> 4) ^ (v246 >> 9)) & (DWORD2(v349[2]) - 1);
                  v248 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v247);
                  if (v246 == v248)
                  {
LABEL_351:
                    if (v247 != DWORD2(v349[2])
                      && sub_1C542F10C(v343, *(_QWORD *)(*(_QWORD *)(v238 + 40) + 8), v246))
                    {
                      v249 = *(_DWORD *)(v238 + 20);
                      v250 = (v249 & 0x40000000) != 0 ? *(_QWORD *)(v238 - 8) : v238 - 32 * (v249 & 0x7FFFFFF);
                      v251 = *(_QWORD *)(v250 + 32 * v241);
                      if (sub_1C542F1F0(v251) == 1)
                      {
                        if (v354)
                        {
                          v261 = (v354 - 1) & ((v251 >> 4) ^ (v251 >> 9));
                          v262 = *(_QWORD *)(v352 + 8 * v261);
                          if (v251 == v262)
                            goto LABEL_386;
                          v263 = 1;
                          while (v262 != -4096)
                          {
                            v264 = v261 + v263++;
                            v261 = v264 & (v354 - 1);
                            v262 = *(_QWORD *)(v352 + 8 * v261);
                            if (v251 == v262)
                              goto LABEL_386;
                          }
                        }
                        v252 = sub_1C6180A54((uint64_t)&v349[1] + 8, v341)[1];
                        v253 = *(_DWORD *)(v252 + 40);
                        if (v253)
                        {
                          v254 = *(_QWORD *)(v252 + 24);
                          v255 = v253 - 1;
                          v256 = v255 & ((v251 >> 4) ^ (v251 >> 9));
                          v257 = *(_QWORD *)(v254 + 8 * v256);
                          if (v251 == v257)
                          {
                            v259 = 1;
                          }
                          else
                          {
                            v258 = 1;
                            do
                            {
                              v259 = v257 != -4096;
                              if (v257 == -4096)
                                break;
                              v260 = v256 + v258++;
                              v256 = v260 & v255;
                              v257 = *(_QWORD *)(v254 + 8 * v256);
                            }
                            while (v251 != v257);
                          }
                        }
                        else
                        {
                          v259 = 0;
                        }
                        v243 |= v259;
                        v242 |= !v259;
                      }
                    }
                  }
                  else
                  {
                    v265 = 1;
                    while (v248 != -4096)
                    {
                      v266 = v247 + v265++;
                      v247 = v266 & (DWORD2(v349[2]) - 1);
                      v248 = *(_QWORD *)(*((_QWORD *)&v349[1] + 1) + 16 * v247);
                      if (v246 == v248)
                        goto LABEL_351;
                    }
                  }
                }
                ++v241;
              }
              while (v241 != v240);
              if (!(v243 & 1 | ((v242 & 1) == 0)))
                goto LABEL_410;
              if ((v242 & v243 & 1) != 0)
                goto LABEL_386;
            }
          }
        }
        else if ((v237 == 77 || v237 == 62) && sub_1C542F044(*(_QWORD *)v236))
        {
          v267 = *(_DWORD *)(v236 + 20);
          if ((v267 & 0x40000000) != 0)
          {
            v269 = *(uint64_t ***)(v236 - 8);
            v268 = v267 & 0x7FFFFFF;
            if (v268)
            {
LABEL_395:
              v278 = &v269[4 * v268];
              while (1)
              {
                v279 = *v269;
                if (sub_1C542F044(**v269) && sub_1C542F1F0((uint64_t)v279) == 1)
                {
                  if (!v340)
                    goto LABEL_409;
                  v280 = (v340 - 1) & ((v279 >> 4) ^ (v279 >> 9));
                  v281 = *(uint64_t **)(v339[0] + 8 * v280);
                  if (v279 != v281)
                    break;
                }
LABEL_400:
                v269 += 4;
                if (v269 == v278)
                  goto LABEL_406;
              }
              v282 = 1;
              while (v281 != (uint64_t *)-4096)
              {
                v283 = v280 + v282++;
                v280 = v283 & (v340 - 1);
                v281 = *(uint64_t **)(v339[0] + 8 * v280);
                if (v279 == v281)
                  goto LABEL_400;
              }
LABEL_409:
              if (v354)
              {
                v295 = (v354 - 1) & ((v279 >> 4) ^ (v279 >> 9));
                v296 = *(uint64_t **)(v352 + 8 * v295);
                if (v279 != v296)
                {
                  v297 = 1;
                  while (v296 != (uint64_t *)-4096)
                  {
                    v298 = v295 + v297++;
                    v295 = v298 & (v354 - 1);
                    v296 = *(uint64_t **)(v352 + 8 * v295);
                    if (v279 == v296)
                      goto LABEL_386;
                  }
                  goto LABEL_410;
                }
LABEL_386:
                v270 = v188[8].i32[0];
                if (v270)
                {
                  v271 = v188[6];
                  v272 = v270 - 1;
                  LODWORD(v273) = (v270 - 1) & ((v236 >> 4) ^ (v236 >> 9));
                  v274 = (uint64_t *)(*(_QWORD *)&v271 + 8 * v273);
                  v275 = *v274;
                  if (v236 == *v274)
                  {
LABEL_392:
                    *v274 = -8192;
                    v188[7] = vadd_s32(v188[7], (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    v276 = 1;
                    while (v275 != -4096)
                    {
                      v277 = v273 + v276++;
                      v273 = v277 & v272;
                      v275 = *(_QWORD *)(*(_QWORD *)&v271 + 8 * v273);
                      if (v236 == v275)
                      {
                        v274 = (uint64_t *)(*(_QWORD *)&v271 + 8 * v273);
                        goto LABEL_392;
                      }
                    }
                  }
                }
                v338 = v236;
                sub_1C61904FC((uint64_t)&v352, &v338, (uint64_t)v341);
              }
              else
              {
LABEL_410:
                v284 = v188[8].i32[0];
                if (v284)
                {
                  v285 = v188[6];
                  v286 = v284 - 1;
                  LODWORD(v287) = (v284 - 1) & ((v236 >> 4) ^ (v236 >> 9));
                  v288 = (uint64_t *)(*(_QWORD *)&v285 + 8 * v287);
                  v289 = *v288;
                  if (v236 == *v288)
                  {
LABEL_416:
                    *v288 = -8192;
                    v188[7] = vadd_s32(v188[7], (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    v290 = 1;
                    while (v289 != -4096)
                    {
                      v291 = v287 + v290++;
                      v287 = v291 & v286;
                      v289 = *(_QWORD *)(*(_QWORD *)&v285 + 8 * v287);
                      if (v236 == v289)
                      {
                        v288 = (uint64_t *)(*(_QWORD *)&v285 + 8 * v287);
                        goto LABEL_416;
                      }
                    }
                  }
                }
                if (v354)
                {
                  LODWORD(v292) = (v354 - 1) & ((v236 >> 4) ^ (v236 >> 9));
                  v293 = (uint64_t *)(v352 + 8 * v292);
                  v294 = *v293;
                  if (v236 == *v293)
                  {
LABEL_419:
                    *v293 = -8192;
                    v353 = vadd_s32(v353, (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    v299 = 1;
                    while (v294 != -4096)
                    {
                      v300 = v292 + v299++;
                      v292 = v300 & (v354 - 1);
                      v294 = *(_QWORD *)(v352 + 8 * v292);
                      if (v236 == v294)
                      {
                        v293 = (uint64_t *)(v352 + 8 * v292);
                        goto LABEL_419;
                      }
                    }
                  }
                }
                v338 = v236;
                sub_1C6190580((uint64_t)v341, (uint64_t)v350, &v338);
              }
              v331 = 1;
              goto LABEL_407;
            }
          }
          else
          {
            v268 = v267 & 0x7FFFFFF;
            v269 = (uint64_t **)(v236 - 32 * v268);
            if (v268)
              goto LABEL_395;
          }
        }
LABEL_406:
        LOBYTE(v341[0]) = 0;
        sub_1C542EDE8((uint64_t *)v236, v341, v339);
LABEL_407:
        v231 = (_QWORD *)v231[1];
      }
      while (v231 != v230);
    }
    MEMORY[0x1CAA32FB4](v339[0], 8);
    if (v327 == v326 && (v331 & 1) == 0)
      goto LABEL_445;
    v232 = v188[4].i32[0];
    result = sub_1C542EE6C(v188, v331 & 1);
    if (v232 == v188[4].i32[0])
      goto LABEL_445;
    v233 = (_QWORD *)*v230;
    if ((_QWORD *)*v230 == v230)
    {
      v234 = 0;
      v235 = 0;
LABEL_443:
      v305 = 0;
      goto LABEL_444;
    }
    v234 = (uint64_t)(v233 - 3);
    if (v233)
      v301 = (llvm::Instruction *)(v233 - 3);
    else
      v301 = 0;
    v302 = *((unsigned __int8 *)v301 + 16);
    v303 = v302 - 29;
    if ((v302 - 29) >= 0xB)
      v235 = 0;
    else
      v235 = v301;
    if (v302 == 30)
    {
      if ((*((_DWORD *)v301 + 5) & 0x7FFFFFF) == 3)
        v304 = 2;
      else
        v304 = 1;
LABEL_441:
      v305 = v304;
LABEL_444:
      sub_1C6247500(&v332, v235, 0, v234, v305);
LABEL_445:
      v76 = v336;
      if (v335 == v336)
        goto LABEL_114;
      continue;
    }
    break;
  }
  v304 = 0;
  switch(v303)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_441;
    case 1:
      __break(1u);
      break;
    case 2:
      v304 = (*((_DWORD *)v301 + 5) >> 1) & 0x3FFFFFF;
      goto LABEL_441;
    case 3:
    case 9:
      v304 = (*((_DWORD *)v301 + 5) & 0x7FFFFFF) - 1;
      goto LABEL_441;
    case 4:
      v304 = 2;
      goto LABEL_441;
    case 7:
      v304 = *((_WORD *)v301 + 9) & 1;
      goto LABEL_441;
    case 8:
      v304 = 1;
      goto LABEL_441;
    case 10:
      v304 = *((_DWORD *)v301 + 20) + 1;
      goto LABEL_441;
    default:
      v234 = 0;
      goto LABEL_443;
  }
  return result;
}

void llvm::verifySafepointIR(llvm *this, llvm::Function *a2)
{
  _BYTE v3[32];

  sub_1C542E7F0((uint64_t)v3);
  sub_1C542E8B8((uint64_t)v3, this);
  llvm::Pass::~Pass((llvm::Pass *)v3);
}

uint64_t sub_1C542E7F0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED804C80;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8168E60;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED804C88);
  if (v3 != -1)
  {
    v7[0] = sub_1C542E9AC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED804C88, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C542E8B8(uint64_t a1, llvm *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  _QWORD v11[7];

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::DominatorTreeWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
  v7 = 0;
  v8[0] = 0;
  v9 = 0;
  v8[1] = 0;
  v10 = 0u;
  memset(v11, 0, 28);
  memset(&v11[4], 0, 24);
  sub_1C542C884(&v7, (uint64_t)a2, v5);
  sub_1C542CEE0(a2, v5, (uint64_t)&v7);
  sub_1C6176BF8(&v11[1]);
  sub_1C6176BF8(v8);
  return 0;
}

uint64_t llvm::createSafepointIRVerifierPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C542E7F0(v1);
}

uint64_t sub_1C542E9AC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Safepoint IR Verifier";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "verify-safepoint-ir";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED804C80;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C542EDC0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C542EA40(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[31];

  sub_1C614F72C((uint64_t)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    v5 = (_QWORD *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_1C4764EE4();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = *a2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = (_QWORD *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

BOOL sub_1C542EB4C(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C614F72C((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

uint64_t sub_1C542EC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  v8 = (uint64_t *)(a1 + 8);
  v9 = (uint64_t *)(a1 + 56);
LABEL_15:
  v10 = *(_DWORD *)(v3 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(v3 - 8);
  else
    v11 = v3 - 32 * (v10 & 0x7FFFFFF);
  v12 = *(_QWORD *)(v3 + 40);
  v16 = 0;
  v17 = v12;
  if ((sub_1C614F7B0(v8, &v17, &v16) & 1) != 0
    || (v16 = 0, v17 = v11 + ((v2 - v11) & 0x1FFFFFFFE0), sub_1C614F7B0(v9, &v17, &v16)))
  {
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return 0;
      v3 = *(_QWORD *)(v2 + 24);
      v13 = *(unsigned __int8 *)(v3 + 16);
      if (v3)
        v14 = v13 >= 0x1C;
      else
        v14 = 0;
      if (v14 && v13 - 29 < 0xB)
        goto LABEL_15;
    }
  }
  return 1;
}

void sub_1C542ED58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C542ED7C()
{
  return "safepoint verifier";
}

void *sub_1C542ED8C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C542EDC0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C542E7F0(v0);
}

_DWORD *sub_1C542EDE8(uint64_t *a1, _BYTE *a2, _DWORD *a3)
{
  _DWORD *result;
  uint64_t *v7;
  _BYTE v8[31];

  if (sub_1C50A011C((uint64_t)a1))
  {
    *a2 = 1;
    return sub_1C619D588(a3);
  }
  else
  {
    result = (_DWORD *)sub_1C542F044(*a1);
    if ((_DWORD)result)
    {
      v7 = a1;
      return (_DWORD *)sub_1C61904FC((uint64_t)a3, (uint64_t *)&v7, (uint64_t)v8);
    }
  }
  return result;
}

_BYTE *sub_1C542EE6C(_BYTE *result, int a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v2 = result;
  if (!result[72])
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_1C4DFE328((uint64_t)&v17, (uint64_t)(result + 48));
    v3 = *((unsigned int *)v2 + 4);
    v4 = *(_QWORD *)v2 + 8 * v3;
    if (*((_DWORD *)v2 + 2))
    {
      if ((_DWORD)v3)
      {
        v5 = 8 * v3;
        v6 = *(_QWORD **)v2;
        while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v6;
          v5 -= 8;
          if (!v5)
            goto LABEL_9;
        }
      }
      else
      {
        v6 = *(_QWORD **)v2;
      }
    }
    else
    {
LABEL_9:
      v6 = (_QWORD *)(*(_QWORD *)v2 + 8 * v3);
    }
    v7 = *(_QWORD *)v2 + 8 * v3;
    if (v6 == (_QWORD *)v7)
    {
LABEL_35:
      MEMORY[0x1CAA32FB4](*((_QWORD *)v2 + 3), 8);
      *((_QWORD *)v2 + 3) = v17;
      *((_QWORD *)v2 + 4) = v18;
      v17 = 0;
      v18 = 0;
      *((_DWORD *)v2 + 10) = v19;
      v19 = 0;
      return (_BYTE *)MEMORY[0x1CAA32FB4](0, 8);
    }
    while (v19)
    {
      v8 = ((*v6 >> 4) ^ (*v6 >> 9)) & (v19 - 1);
      v9 = (_QWORD *)(v17 + 8 * v8);
      v10 = *v9;
      if (*v6 != *v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & (v19 - 1);
          v9 = (_QWORD *)(v17 + 8 * v8);
          v10 = *v9;
          if (*v6 == *v9)
            goto LABEL_27;
        }
        if (v11)
          v15 = v11;
        else
          v15 = v9;
        goto LABEL_26;
      }
LABEL_27:
      v16 = v6 + 1;
      v6 = (_QWORD *)v4;
      if (v16 != (_QWORD *)v4)
      {
        v6 = v16;
        while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v6 == (_QWORD *)v4)
          {
            v6 = (_QWORD *)v4;
            break;
          }
        }
      }
      if (v6 == (_QWORD *)v7)
        goto LABEL_35;
    }
    v15 = 0;
LABEL_26:
    *sub_1C4E1CBB4((uint64_t)&v17, (uint64_t)v6, v6, v15) = *v6;
    goto LABEL_27;
  }
  if (a2)
    return sub_1C4DFE328((uint64_t)(result + 24), (uint64_t)(result + 48));
  return result;
}

uint64_t sub_1C542F044(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  while (1)
  {
    if (a1 && *(_DWORD *)(a1 + 8) == 271)
      return 1;
    if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    {
      v3 = **(_QWORD **)(a1 + 16);
      if (v3)
        v4 = *(_DWORD *)(v3 + 8) == 15;
      else
        v4 = 0;
      if (v4)
        return (*(_DWORD *)(v3 + 8) & 0xFFFFFF00) == 256;
      return 0;
    }
    v1 = *(_DWORD *)(a1 + 8);
    if (v1 != 17)
      break;
    a1 = *(_QWORD *)(a1 + 24);
  }
  if (v1 != 16 || a1 == 0)
    return 0;
  v5 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(uint64_t **)(a1 + 16);
  v7 = 8 * v5 - 8;
  do
  {
    v8 = *v6++;
    result = sub_1C542F044(v8);
    if ((result & 1) != 0)
      break;
    v9 = v7;
    v7 -= 8;
  }
  while (v9);
  return result;
}

uint64_t sub_1C542F10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 24);
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v5 && v6 >= 0x1C;
    if (v7 && v6 - 29 < 0xB)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      return 0;
  }
  v10 = (uint64_t *)(a1 + 56);
LABEL_15:
  if (*(_QWORD *)(v5 + 40) != a3
    || ((v14 = *(_DWORD *)(v5 + 20), (v14 & 0x40000000) != 0)
      ? (v15 = *(_QWORD *)(v5 - 8))
      : (v15 = v5 - 32 * (v14 & 0x7FFFFFF)),
        v16 = 0,
        v17 = v15 + ((v4 - v15) & 0x1FFFFFFFE0),
        sub_1C614F7B0(v10, &v17, &v16)))
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return 0;
      v5 = *(_QWORD *)(v4 + 24);
      v11 = *(unsigned __int8 *)(v5 + 16);
      if (v5)
        v12 = v11 >= 0x1C;
      else
        v12 = 0;
      if (v12 && v11 - 29 < 0xB)
        goto LABEL_15;
    }
  }
  return 1;
}

uint64_t sub_1C542F1F0(uint64_t a1)
{
  char v1;
  unsigned int v2;
  llvm::Value *v3;
  unsigned int v4;
  llvm::Value **v5;
  llvm::Value *v6;
  llvm::Value **v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  llvm::Value **v11;
  _QWORD *v12;
  llvm::GCRelocateInst *v13;
  unsigned int v14;
  llvm::Value *DerivedPtr;
  llvm::Value *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::Value **v27;
  uint64_t v28;
  llvm::Value *v30;
  _QWORD v31[2];
  int v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD v36[33];

  v36[32] = *MEMORY[0x1E0C80C00];
  v33 = v36;
  v35 = 32;
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  v36[0] = a1;
  v1 = 1;
  v2 = 1;
  do
  {
    while (1)
    {
      v30 = 0;
      v3 = (llvm::Value *)*((_QWORD *)v33 + v2 - 1);
      v34 = v2 - 1;
      v30 = v3;
      if (!v32)
      {
        v11 = 0;
        goto LABEL_17;
      }
      v4 = (v32 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v5 = (llvm::Value **)(v31[0] + 8 * v4);
      v6 = *v5;
      if (v3 != *v5)
        break;
LABEL_12:
      v2 = v34;
      if (!v34)
        goto LABEL_51;
    }
    v7 = 0;
    v8 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      if (v7)
        v9 = 0;
      else
        v9 = v6 == (llvm::Value *)-8192;
      if (v9)
        v7 = v5;
      v10 = v4 + v8++;
      v4 = v10 & (v32 - 1);
      v5 = (llvm::Value **)(v31[0] + 8 * v4);
      v6 = *v5;
      if (v3 == *v5)
        goto LABEL_12;
    }
    if (v7)
      v11 = v7;
    else
      v11 = v5;
LABEL_17:
    v12 = sub_1C4E1CBB4((uint64_t)v31, (uint64_t)&v30, (uint64_t *)&v30, v11);
    *v12 = v30;
    v13 = v30;
    v14 = *((unsigned __int8 *)v30 + 16);
    if (v30)
    {
      if (v14 >= 0x1C && v14 - 79 >= 0xFFFFFFF3)
      {
        DerivedPtr = llvm::Value::stripPointerCasts(v30);
        goto LABEL_24;
      }
    }
    if (v30 && v14 == 62)
    {
      v17 = (llvm::Value *)*((_QWORD *)v30 - 4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
      goto LABEL_28;
    }
    if (v30 && v14 == 83)
    {
      v19 = *((_DWORD *)v30 + 5);
      if ((v19 & 0x40000000) != 0)
      {
        v21 = (char *)*((_QWORD *)v30 - 1);
        v20 = v19 & 0x7FFFFFF;
      }
      else
      {
        v20 = v19 & 0x7FFFFFF;
        v21 = (char *)v30 - 32 * v20;
      }
      sub_1C4DA9878((unsigned int *)&v33, (uint64_t)v33 + 8 * v34, v21, &v21[32 * v20]);
      goto LABEL_12;
    }
    if (!v30 || v14 != 85)
    {
      if (!sub_1C4E9AE24((uint64_t)v30))
      {
        v27 = (llvm::Value **)v30;
        if (*((unsigned __int8 *)v30 + 16) > 0x14u)
        {
          v28 = 1;
          goto LABEL_54;
        }
        v1 &= v27 == llvm::Constant::getNullValue(*(llvm::Constant **)v30, v26);
        goto LABEL_12;
      }
      DerivedPtr = (llvm::Value *)llvm::GCRelocateInst::getDerivedPtr(v13);
LABEL_24:
      v17 = DerivedPtr;
LABEL_28:
      v18 = v34;
      if (v34 >= (unint64_t)v35)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v36, v34 + 1, 8);
        v18 = v34;
      }
      *((_QWORD *)v33 + v18) = v17;
      goto LABEL_31;
    }
    v22 = *((_QWORD *)v30 - 8);
    v23 = v34;
    if (v34 >= (unint64_t)v35)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v36, v34 + 1, 8);
      v23 = v34;
    }
    *((_QWORD *)v33 + v23) = v22;
    v24 = v34 + 1;
    v34 = v24;
    v25 = *((_QWORD *)v13 - 4);
    if (v24 >= v35)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v36, v24 + 1, 8);
      LODWORD(v24) = v34;
    }
    *((_QWORD *)v33 + v24) = v25;
LABEL_31:
    v2 = v34 + 1;
    v34 = v2;
  }
  while (v2);
LABEL_51:
  if ((v1 & 1) != 0)
    v28 = 2;
  else
    v28 = 3;
LABEL_54:
  MEMORY[0x1CAA32FB4](v31[0], 8);
  if (v33 != v36)
    free(v33);
  return v28;
}

void sub_1C542F4F0(llvm *a1, llvm::Value *a2, llvm::Value *a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  _BYTE *v16;

  v6 = (llvm::raw_ostream *)llvm::errs(a1);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x27uLL)
  {
    qmemcpy(v7, "Illegal use of unrelocated value found!\n", 40);
    *((_QWORD *)v6 + 4) += 40;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, "Illegal use of unrelocated value found!\n", 0x28uLL);
  }
  v8 = (llvm::raw_ostream *)llvm::errs(v6);
  v9 = v8;
  v10 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v10) > 4)
  {
    *(_BYTE *)(v10 + 4) = 32;
    *(_DWORD *)v10 = 979789124;
    *((_QWORD *)v8 + 4) += 5;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v8, "Def: ", 5uLL);
  }
  llvm::Value::print(a2, v9, 0);
  v12 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v12)
  {
    v11 = llvm::raw_ostream::write(v9, "\n", 1uLL);
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)v9 + 4);
  }
  v13 = (llvm::raw_ostream *)llvm::errs(v11);
  v14 = v13;
  v15 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v15) > 4)
  {
    *(_BYTE *)(v15 + 4) = 32;
    *(_DWORD *)v15 = 979727189;
    *((_QWORD *)v13 + 4) += 5;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v13, "Use: ", 5uLL);
  }
  llvm::Value::print(a3, v14, 0);
  v16 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v16)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *v16 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  if (!byte_1ED804C40)
    abort();
  *(_BYTE *)a1 = 1;
}

uint64_t sub_1C542F6B8()
{
  char v1;
  char *v2;

  v1 = 0;
  v2 = &v1;
  sub_1C62475F4(&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED804BC0, &dword_1C475E000);
}

uint64_t sub_1C542F700(uint64_t *a1, char *__s, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  llvm::Value **v8;
  llvm::Value *v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (__s)
    v7 = strlen(__s);
  else
    v7 = 0;
  v11[0] = llvm::MDString::get(a1, (unsigned __int8 *)__s, v7);
  v8 = llvm::ConstantInt::get((llvm::ConstantInt *)(v6 + 1984), a3, 0);
  v11[1] = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v8, v9);
  return llvm::MDTuple::getImpl(a1, v11, 2, 0, 1);
}

unsigned __int8 *llvm::ProfileSummary::getFromMD(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  BOOL v60;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  _QWORD *v82;
  double v83;
  _QWORD *v84;
  int v85;
  int v86;

  if (!result)
    return result;
  v1 = result;
  if (*result != 4)
    return 0;
  v2 = *((unsigned int *)result + 2);
  if ((v2 - 11) < 0xFFFFFFFD)
    return 0;
  v3 = &result[-8 * v2];
  if (!*(_QWORD *)v3)
  {
    if (!sub_1C542FDB8(0, "SampleProfile"))
    {
      v4 = 0;
      if (sub_1C542FDB8(0, "InstrProf"))
        goto LABEL_12;
      goto LABEL_60;
    }
LABEL_14:
    v5 = 2;
    goto LABEL_15;
  }
  if (**(_BYTE **)v3 == 4)
    v4 = *(_QWORD *)v3;
  else
    v4 = 0;
  if (sub_1C542FDB8(v4, "SampleProfile"))
    goto LABEL_14;
  if (sub_1C542FDB8(v4, "InstrProf"))
  {
LABEL_12:
    v5 = 0;
    goto LABEL_15;
  }
LABEL_60:
  if (!sub_1C542FDB8(v4, "CSInstrProf"))
    return 0;
  v5 = 1;
LABEL_15:
  if (**((_BYTE **)v3 + 1) == 4)
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  else
    v6 = 0;
  result = sub_1C5430418(v6, "TotalCount");
  if (!result)
    return result;
  v7 = *((_QWORD *)result + 16);
  v8 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = (_QWORD *)*v8;
  v10 = **((_BYTE **)v3 + 2) == 4 ? (unsigned __int8 *)*((_QWORD *)v3 + 2) : 0;
  result = sub_1C5430418(v10, "MaxCount");
  if (!result)
    return result;
  v11 = *((_QWORD *)result + 16);
  v12 = (_QWORD *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  v13 = (_QWORD *)*v12;
  v14 = **((_BYTE **)v3 + 3) == 4 ? (unsigned __int8 *)*((_QWORD *)v3 + 3) : 0;
  result = sub_1C5430418(v14, "MaxInternalCount");
  if (!result)
    return result;
  v15 = *((_QWORD *)result + 16);
  v16 = (_QWORD *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u)
    v16 = (_QWORD *)*v16;
  v17 = (_QWORD *)*v16;
  v18 = **((_BYTE **)v3 + 4) == 4 ? (unsigned __int8 *)*((_QWORD *)v3 + 4) : 0;
  result = sub_1C5430418(v18, "MaxFunctionCount");
  if (!result)
    return result;
  v19 = *((_QWORD *)result + 16);
  v20 = (_QWORD *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u)
    v20 = (_QWORD *)*v20;
  v21 = (_QWORD *)*v20;
  v22 = **((_BYTE **)v3 + 5) == 4 ? (unsigned __int8 *)*((_QWORD *)v3 + 5) : 0;
  result = sub_1C5430418(v22, "NumCounts");
  if (!result)
    return result;
  v23 = *((_QWORD *)result + 16);
  v24 = (_QWORD *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u)
    v24 = (_QWORD *)*v24;
  v25 = *(_DWORD *)v24;
  v26 = **((_BYTE **)v3 + 6) == 4 ? (unsigned __int8 *)*((_QWORD *)v3 + 6) : 0;
  result = sub_1C5430418(v26, "NumFunctions");
  if (!result)
    return result;
  v27 = *((_QWORD *)result + 16);
  v28 = (_QWORD *)(v27 + 24);
  v85 = v25;
  if (*(_DWORD *)(v27 + 32) >= 0x41u)
    v28 = (_QWORD *)*v28;
  v86 = *(_DWORD *)v28;
  v29 = (unsigned __int8 *)*((_QWORD *)v3 + 7);
  v30 = *v29;
  if (v30 == 4)
    v31 = (unsigned __int8 *)*((_QWORD *)v3 + 7);
  else
    v31 = 0;
  v32 = sub_1C5430418(v31, "IsPartialProfile");
  if (v32)
  {
    v33 = *((_QWORD *)v32 + 16);
    v34 = (_QWORD *)(v33 + 24);
    if (*(_DWORD *)(v33 + 32) >= 0x41u)
      v34 = (_QWORD *)*v34;
    if (v2 < 9)
      return 0;
    v84 = (_QWORD *)*v34;
    v29 = (unsigned __int8 *)*((_QWORD *)v3 + 8);
    v30 = *v29;
    v35 = 8;
  }
  else
  {
    v84 = 0;
    v35 = 7;
  }
  if (v30 == 4)
    v36 = v29;
  else
    v36 = 0;
  v37 = sub_1C5430418(v36, "PartialProfileRatio");
  if (!v37)
  {
    v40 = -v2;
    v38 = 0.0;
    goto LABEL_70;
  }
  v38 = llvm::APFloat::convertToDouble((llvm::APFloat *)(*((_QWORD *)v37 + 16) + 24));
  ++v35;
  v39 = *((unsigned int *)v1 + 2);
  if (v35 >= v39)
    return 0;
  v40 = -v39;
LABEL_70:
  v41 = *(_QWORD *)&v1[8 * v40 + 8 * v35];
  if (*(_BYTE *)v41 != 4)
    return 0;
  if (*(_DWORD *)(v41 + 8) != 2)
    return 0;
  v42 = *(_QWORD *)(v41 - 16);
  if (*(_BYTE *)v42)
    return 0;
  v43 = *(_QWORD **)(v42 + 8);
  if (*v43 != 15)
    return 0;
  v44 = v43[3];
  v45 = *(_QWORD *)((char *)v43 + 31);
  if (v44 != 0x64656C6961746544 || v45 != 0x7972616D6D755364)
    return 0;
  v82 = v21;
  v80 = v13;
  v81 = v5;
  v83 = v38;
  v47 = *(_QWORD *)(v41 - 8);
  if (*(_BYTE *)v47 != 4)
    return 0;
  v48 = *(unsigned int *)(v47 + 8);
  if ((_DWORD)v48)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = (_QWORD *)(v47 - 8 * v48);
    while (1)
    {
      v53 = (_BYTE *)*v52;
      if (*(_BYTE *)*v52 != 4 || *((_DWORD *)v53 + 2) != 3)
        break;
      v54 = *((_QWORD *)v53 - 3);
      v55 = **((unsigned __int8 **)v53 - 2);
      v56 = v55 == 1 ? *((_QWORD *)v53 - 2) : 0;
      v57 = (unsigned __int8 *)*((_QWORD *)v53 - 1);
      v58 = *v57;
      v59 = v58 == 1 ? v57 : 0;
      v60 = *(_BYTE *)v54 == 1 && v55 == 1;
      if (!v60 || v58 != 1)
        break;
      v62 = *(_QWORD *)(v54 + 128);
      v63 = (_QWORD *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u)
        v63 = (_QWORD *)*v63;
      v64 = *(_QWORD *)(v56 + 128);
      v65 = (_QWORD *)(v64 + 24);
      if (*(_DWORD *)(v64 + 32) >= 0x41u)
        v65 = (_QWORD *)*v65;
      v66 = *((_QWORD *)v59 + 16);
      v67 = (_QWORD *)(v66 + 24);
      if (*(_DWORD *)(v66 + 32) >= 0x41u)
        v67 = (_QWORD *)*v67;
      v68 = (_QWORD *)*v63;
      v69 = (_QWORD *)*v65;
      v70 = (_QWORD *)*v67;
      if (v50 >= v49)
      {
        v71 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 3) + 1;
        if (v71 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v49 - v51) >> 3) > v71)
          v71 = 0x5555555555555556 * ((v49 - v51) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v49 - v51) >> 3) >= 0x555555555555555)
          v71 = 0xAAAAAAAAAAAAAAALL;
        if (v71 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v72 = 3 * v71;
        v73 = (char *)operator new(24 * v71);
        v74 = &v73[8 * ((v50 - v51) >> 3)];
        *(_DWORD *)v74 = (_DWORD)v68;
        *((_QWORD *)v74 + 1) = v69;
        *((_QWORD *)v74 + 2) = v70;
        if (v50 == v51)
        {
          v76 = &v73[8 * ((v50 - v51) >> 3)];
        }
        else
        {
          v75 = &v73[8 * ((v50 - v51) >> 3)];
          do
          {
            v76 = v75 - 24;
            v77 = *(_OWORD *)(v50 - 24);
            *((_QWORD *)v75 - 1) = *((_QWORD *)v50 - 1);
            *(_OWORD *)(v75 - 24) = v77;
            v50 -= 24;
            v75 -= 24;
          }
          while (v50 != v51);
        }
        v49 = &v73[8 * v72];
        v50 = v74 + 24;
        if (v51)
          operator delete(v51);
        v51 = v76;
      }
      else
      {
        *(_DWORD *)v50 = (_DWORD)v68;
        *((_QWORD *)v50 + 1) = v69;
        *((_QWORD *)v50 + 2) = v70;
        v50 += 24;
      }
      if (++v52 == (_QWORD *)v47)
        goto LABEL_124;
    }
    v78 = 0;
  }
  else
  {
    v50 = 0;
    v51 = 0;
LABEL_124:
    v79 = operator new();
    *(_DWORD *)v79 = v81;
    *(_QWORD *)(v79 + 16) = 0;
    *(_QWORD *)(v79 + 24) = 0;
    *(_QWORD *)(v79 + 8) = 0;
    sub_1C4D6CDA0((_QWORD *)(v79 + 8), v51, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 3));
    *(_QWORD *)(v79 + 32) = v9;
    *(_QWORD *)(v79 + 40) = v80;
    *(_QWORD *)(v79 + 48) = v17;
    *(_QWORD *)(v79 + 56) = v82;
    *(_DWORD *)(v79 + 64) = v85;
    *(_DWORD *)(v79 + 68) = v86;
    *(_BYTE *)(v79 + 72) = v84 != 0;
    v78 = v79;
    *(double *)(v79 + 80) = v83;
  }
  if (v51)
    operator delete(v51);
  return (unsigned __int8 *)v78;
}

BOOL sub_1C542FDB8(_BOOL8 result, char *__s)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t *v10;
  size_t v11;
  const void *v12;
  size_t v13;

  if (result)
  {
    if (*(_DWORD *)(result + 8) != 2)
      return 0;
    v3 = *(_QWORD *)(result - 16);
    v2 = *(_QWORD *)(result - 8);
    v4 = *(_BYTE *)v3 | *(_BYTE *)v2;
    if (*(_BYTE *)v2)
      v2 = 0;
    if (v4)
      return 0;
    v5 = *(_QWORD **)(v3 + 8);
    if (*v5 != 13)
      return 0;
    v6 = v5[3];
    v7 = *(_QWORD *)((char *)v5 + 29);
    if (v6 != 0x46656C69666F7250 || v7 != 0x74616D726F46656CLL)
      return 0;
    v10 = *(size_t **)(v2 + 8);
    v13 = *v10;
    v12 = v10 + 3;
    v11 = v13;
    if (__s)
    {
      if (v11 != strlen(__s))
        return 0;
      if (!v11)
        return 1;
      return memcmp(v12, __s, v11) == 0;
    }
    else
    {
      return v11 == 0;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::ProfileSummary::printSummary(llvm::ProfileSummary *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  void *v16;
  llvm::raw_ostream *result;
  _BYTE *v18;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 32;
    *(_OWORD *)v4 = *(_OWORD *)"Total functions: ";
    *((_QWORD *)a2 + 4) += 17;
    v5 = a2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(a2, "Total functions: ", 0x11uLL);
  }
  sub_1C5E21910(v5, *((unsigned int *)this + 17), 0, 0, 0);
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v6 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v7 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v7 > 0x17uLL)
  {
    qmemcpy(v7, "Maximum function count: ", 24);
    *((_QWORD *)v2 + 4) += 24;
    v8 = v2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v2, "Maximum function count: ", 0x18uLL);
  }
  sub_1C5E21910(v8, *((_QWORD *)this + 7), 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v10 > 0x14uLL)
  {
    qmemcpy(v10, "Maximum block count: ", 21);
    *((_QWORD *)v2 + 4) += 21;
    v11 = v2;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v2, "Maximum block count: ", 0x15uLL);
  }
  sub_1C5E21910(v11, *((_QWORD *)this + 5), 0, 0, 0);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, "\n", 1uLL);
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)v11 + 4);
  }
  v13 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v13 > 0x17uLL)
  {
    qmemcpy(v13, "Total number of blocks: ", 24);
    *((_QWORD *)v2 + 4) += 24;
    v14 = v2;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v2, "Total number of blocks: ", 0x18uLL);
  }
  sub_1C5E21910(v14, *((unsigned int *)this + 16), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v16 > 0xCuLL)
  {
    qmemcpy(v16, "Total count: ", 13);
    *((_QWORD *)v2 + 4) += 13;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "Total count: ", 0xDuLL);
  }
  result = sub_1C5E21910(v2, *((_QWORD *)this + 4), 0, 0, 0);
  v18 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v18)
    return llvm::raw_ostream::write(v2, "\n", 1uLL);
  *v18 = 10;
  ++*((_QWORD *)v2 + 4);
  return result;
}

llvm::raw_ostream *llvm::ProfileSummary::printDetailedSummary(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  llvm::raw_ostream *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  _QWORD v12[3];

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 2618;
    *(_OWORD *)v4 = *(_OWORD *)"Detailed summary:\n";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Detailed summary:\n", 0x12uLL);
  }
  v5 = *(_QWORD *)(v3 + 8);
  for (i = *(_QWORD *)(v3 + 16); v5 != i; v5 += 24)
  {
    sub_1C5E21910(a2, *(_QWORD *)(v5 + 16), 0, 0, 0);
    v7 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0x15uLL)
    {
      qmemcpy(v7, " blocks with count >= ", 22);
      *((_QWORD *)a2 + 4) += 22;
      v8 = a2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(a2, " blocks with count >= ", 0x16uLL);
    }
    sub_1C5E21910(v8, *(_QWORD *)(v5 + 8), 0, 0, 0);
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xCuLL)
    {
      qmemcpy(v9, " account for ", 13);
      *((_QWORD *)v8 + 4) += 13;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, " account for ", 0xDuLL);
    }
    *(float *)&v10 = (float)((float)*(unsigned int *)v5 / 1000000.0) * 100.0;
    v12[0] = &unk_1E8168F18;
    v12[1] = "%0.6g";
    v12[2] = v10;
    this = llvm::raw_ostream::operator<<(v8, (uint64_t)v12);
    v11 = (void *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v11 > 0x20uLL)
    {
      qmemcpy(v11, " percentage of the total counts.\n", 33);
      *((_QWORD *)v8 + 4) += 33;
    }
    else
    {
      this = llvm::raw_ostream::write(v8, " percentage of the total counts.\n", 0x21uLL);
    }
  }
  return this;
}

unsigned __int8 *sub_1C5430418(unsigned __int8 *result, char *__s)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  BOOL v7;
  size_t *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  BOOL v13;

  if (!result)
    return result;
  v2 = (uint64_t)result;
  if (*((_DWORD *)result + 2) != 2)
    return 0;
  result = 0;
  v4 = *(_QWORD *)(v2 - 16);
  v3 = *(unsigned __int8 **)(v2 - 8);
  v5 = *v3;
  if (v5 == 1)
    v6 = v3;
  else
    v6 = 0;
  if (*(_BYTE *)v4)
    v7 = 0;
  else
    v7 = v5 == 1;
  if (v7)
  {
    v9 = *(size_t **)(v4 + 8);
    v12 = *v9;
    v11 = v9 + 3;
    v10 = v12;
    if (!__s)
    {
      v13 = v10 == 0;
LABEL_18:
      if (v13)
        return v6;
      else
        return 0;
    }
    if (v10 == strlen(__s))
    {
      if (!v10)
        return v6;
      v13 = memcmp(v11, __s, v10) == 0;
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::extractProbeFromDiscriminator@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  char v7;

  v3 = *(_QWORD *)(this + 48);
  if (v3
    && (v4 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8)), *(_BYTE *)v4 == 19)
    && ((v5 = *(_DWORD *)(v4 + 24), v5 >= 8) ? (v6 = (v5 & 7) == 7) : (v6 = 0), v6))
  {
    *(int8x8_t *)a2 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFE6FFFFFFFDLL), (int8x8_t)0x70000FFFFLL);
    *(_DWORD *)(a2 + 8) = v5 >> 29;
    *(float *)(a2 + 12) = (float)((v5 >> 19) & 0x7F) / 100.0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v7;
  return this;
}

uint64_t llvm::extractProbe@<X0>(llvm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  int v16;
  uint64_t v17;

  result = sub_1C509DDB0((uint64_t)this);
  if ((_DWORD)result)
  {
    v6 = (_QWORD *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v7 = v6[4];
    v8 = (_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    v9 = v6[8];
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    v11 = *(_DWORD *)v8;
    v12 = *(_DWORD *)v10;
    v13 = v6[12];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = (float)(unint64_t)*v14 * 5.421e-20;
    *(_DWORD *)a2 = v11;
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 8) = v12;
    *(float *)(a2 + 12) = v15;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    v16 = *((unsigned __int8 *)this + 16);
    if (v16 == 33)
      return llvm::extractProbeFromDiscriminator((uint64_t)this, a2);
    if (v16 == 39)
      return llvm::extractProbeFromDiscriminator((uint64_t)this, a2);
    if (v16 == 84
      && ((v17 = *((_QWORD *)this - 4)) == 0
       || *(_BYTE *)(v17 + 16)
       || *(_QWORD *)(v17 + 24) != *((_QWORD *)this + 9)
       || (*(_BYTE *)(v17 + 33) & 0x20) == 0))
    {
      return llvm::extractProbeFromDiscriminator((uint64_t)this, a2);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  return result;
}

void llvm::setProbeDistributionFactor(llvm *this, llvm::Instruction *a2, float a3)
{
  const llvm::APInt *v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  llvm::ConstantInt *v10;
  unsigned int v11;
  unint64_t v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  llvm::MDNode *Impl;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  llvm::ConstantInt *v34;
  llvm::Value *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (sub_1C509DDB0((uint64_t)this))
  {
    sub_1C4773D54((uint64_t)&v39, (uint64_t)this, 0, 0, 0);
    v6 = vcvts_n_u32_f32(a3, 0x40uLL);
    if (a3 >= 1.0)
      v7 = -1;
    else
      v7 = v6;
    v8 = (_DWORD *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
    v9 = v8 + 6;
    if (v8[8] >= 0x41u)
      v9 = (_QWORD *)*v9;
    if (v7 != *v9)
    {
      v10 = *(llvm::ConstantInt **)(*(_QWORD *)v41 + 1984);
      v11 = *(_DWORD *)(*(_QWORD *)v41 + 1992);
      v38 = v11 >> 8;
      if (v11 >> 8 > 0x40)
      {
        v34 = v10;
        llvm::APInt::initSlowCase((llvm::APInt *)&v37, v7, 0);
        v10 = v34;
      }
      else
      {
        if (v11 <= 0xFF)
          v12 = 0;
        else
          v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
        v37 = v12 & v7;
      }
      v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v37, v5);
      if (v38 >= 0x41 && v37)
      {
        v35 = v13;
        MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
        v13 = v35;
      }
      llvm::User::replaceUsesOfWith(this, (llvm::Value *)v8, v13);
    }
    if (v39 != &v40)
      free(v39);
  }
  else
  {
    v14 = *((unsigned __int8 *)this + 16);
    if (v14 == 33
      || v14 == 39
      || v14 == 84
      && ((v15 = *((_QWORD *)this - 4)) == 0
       || *(_BYTE *)(v15 + 16)
       || *(_QWORD *)(v15 + 24) != *((_QWORD *)this + 9)
       || (*(_BYTE *)(v15 + 33) & 0x20) == 0))
    {
      v18 = *((_QWORD *)this + 6);
      v16 = (unsigned __int8 **)((char *)this + 48);
      v17 = v18;
      if (v18)
      {
        v19 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8));
        if (*(_BYTE *)v19 == 19)
        {
          v20 = *(_DWORD *)(v19 + 24);
          if (v20 >= 8 && (*(_DWORD *)(v19 + 24) & 7) == 7)
          {
            v22 = ((float)(a3 * 100.0) << 19) | 7;
            v23 = v20 & 0x1C07FFF8;
            if (a3 >= 1.0)
              v22 = 52428807;
            v24 = v23 | v22;
            v25 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8));
            do
            {
              if (!*(_DWORD *)(v25 + 24))
                break;
              v25 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8) + 8);
            }
            while (*(_BYTE *)v25 == 19);
            v26 = *(_QWORD *)(v17 + 16);
            v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
            if ((v26 & 4) != 0)
              v27 = (_QWORD *)*v27;
            Impl = llvm::DILexicalBlockFile::getImpl(v27, v25, *(_QWORD *)(v19 - 8 * *(unsigned int *)(v19 + 8)), v24, 0, 1);
            v29 = *(_QWORD *)(v17 + 16);
            v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFF8);
            if ((v29 & 4) != 0)
              v30 = (uint64_t *)*v30;
            if (*(_DWORD *)(v17 + 8) == 2)
              v31 = *(_QWORD *)(v17 - 8);
            else
              v31 = 0;
            v32 = (unsigned __int8 *)llvm::DILocation::getImpl(v30, *(_DWORD *)(v17 + 4), *(unsigned __int16 *)(v17 + 2), (uint64_t)Impl, v31, 0, 0, 1);
            v36 = v32;
            if (v32)
              llvm::MetadataTracking::track((uint64_t)&v36, v32, 2);
            if (&v36 == v16)
            {
              if (v36)
                llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
            }
            else
            {
              if (*v16)
                llvm::MetadataTracking::untrack((uint64_t)v16, *v16);
              v33 = v36;
              *v16 = v36;
              if (v33)
                llvm::MetadataTracking::retrack((uint64_t)&v36, v33, (uint64_t)v16);
            }
          }
        }
      }
    }
  }
}

void llvm::convertConstantExprsToInstructions(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  char **v5;
  char *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  llvm::collectConstantExprPaths(a1, a2, (uint64_t **)&v5);
  llvm::convertConstantExprsToInstructions(a1, (uint64_t)&v5, a3);
  sub_1C543256C(v6[0]);
}

void llvm::collectConstantExprPaths(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  _BYTE *v13;
  void **v14;
  _BYTE *v15;
  int64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  const void **v22;
  const void **v23;
  size_t v24;
  uint64_t i;
  uint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  const void **v42;
  const void **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  const void *v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t *v61;
  const void *v62;
  uint64_t v63;
  char **v64;
  char **v65;
  char **v66;
  char *v67;
  char *v68;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v73;
  const void ***v74;
  char *v75;
  char *v76;
  const void **v77;
  const void **v78;
  unint64_t v79;
  char **v80;

  v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(uint64_t **)(a1 - 8);
    v4 = v3 & 0x7FFFFFF;
    if (!v4)
      return;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (uint64_t *)(a1 - 32 * v4);
    if (!v4)
      return;
  }
  v6 = &v5[4 * v4];
  v70 = v6;
  do
  {
    v7 = *v5;
    if (*v5)
      v8 = *(_BYTE *)(*v5 + 16) == 5;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_97;
    v71 = v5;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v9 = (char *)operator new(0x18uLL);
    v10 = v9 + 24;
    v74 = (const void ***)v9;
    v76 = v9 + 24;
    v11 = (uint64_t *)operator new(8uLL);
    *(_QWORD *)v9 = v11;
    *v11++ = v7;
    *((_QWORD *)v9 + 1) = v11;
    *((_QWORD *)v9 + 2) = v11;
    v75 = v9 + 24;
    v12 = (char *)v74;
    while (v12 != v10)
    {
      v15 = (_BYTE *)*((_QWORD *)v10 - 3);
      v13 = (_BYTE *)*((_QWORD *)v10 - 2);
      v14 = (void **)(v10 - 24);
      v16 = v13 - v15;
      if (v13 == v15)
      {
        v17 = 0;
        v73 = 0;
        if (v15)
          goto LABEL_16;
      }
      else
      {
        if (v16 < 0)
          goto LABEL_99;
        v17 = operator new(v13 - v15);
        v73 = (uint64_t)v17 + 8 * (v16 >> 3);
        memmove(v17, v15, v16);
        v15 = *v14;
        if (*v14)
        {
LABEL_16:
          *((_QWORD *)v10 - 2) = v15;
          operator delete(v15);
        }
      }
      v75 = v10 - 24;
      v18 = *(_QWORD *)(v73 - 8);
      if (v18 == a2)
      {
        v22 = v78;
        if ((unint64_t)v78 >= v79)
        {
          v23 = (const void **)sub_1C54325BC((char **)&v77, v17, v73);
        }
        else
        {
          *v78 = 0;
          v22[1] = 0;
          v22[2] = 0;
          sub_1C4DFE394(v22, v17, v73, (v73 - (uint64_t)v17) >> 3);
          v23 = v22 + 3;
        }
        v78 = v23;
        if (v17)
          goto LABEL_55;
      }
      else
      {
        v19 = *(_DWORD *)(v18 + 20);
        if ((v19 & 0x40000000) != 0)
        {
          v21 = *(uint64_t **)(v18 - 8);
          v20 = v19 & 0x7FFFFFF;
          if (v20)
          {
LABEL_26:
            v24 = v73 - (_QWORD)v17;
            for (i = 32 * v20; i; i -= 32)
            {
              v26 = *v21;
              if (*v21)
                v27 = *(_BYTE *)(*v21 + 16) == 5;
              else
                v27 = 0;
              if (v27)
              {
                if ((void *)v73 == v17)
                {
                  v28 = 0;
                  v29 = 0;
                }
                else
                {
                  if ((v24 & 0x8000000000000000) != 0)
                    goto LABEL_99;
                  v28 = (char *)operator new(v24);
                  v29 = &v28[8 * ((v73 - (uint64_t)v17) >> 3)];
                  memcpy(v28, v17, v24);
                }
                v30 = v29 - v28;
                v31 = (v29 - v28) >> 3;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61)
                  goto LABEL_99;
                if (v30 >> 2 > v32)
                  v32 = v30 >> 2;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                  v32 = 0x1FFFFFFFFFFFFFFFLL;
                if (v32)
                {
                  if (v32 >> 61)
                    sub_1C4764EE4();
                  v33 = (char *)operator new(8 * v32);
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[8 * v31];
                *(_QWORD *)v34 = v26;
                v35 = (uint64_t)(v34 + 8);
                if (v29 != v28)
                {
                  v36 = (v29 - 8 - v28) & 0xFFFFFFFFFFFFFFF8;
                  v34 = &v33[v30 - v36 - 8];
                  memcpy(v34, &v29[-v36 - 8], v36 + 8);
                }
                if (v28)
                  operator delete(v28);
                v37 = v75;
                if (v75 >= v76)
                {
                  v38 = (char *)sub_1C54325BC((char **)&v74, v34, v35);
                }
                else
                {
                  *(_QWORD *)v75 = 0;
                  *((_QWORD *)v37 + 1) = 0;
                  *((_QWORD *)v37 + 2) = 0;
                  sub_1C4DFE394(v37, v34, v35, (v35 - (uint64_t)v34) >> 3);
                  v38 = v37 + 24;
                }
                v75 = v38;
                operator delete(v34);
              }
              v21 += 4;
            }
          }
        }
        else
        {
          v20 = v19 & 0x7FFFFFF;
          v21 = (uint64_t *)(v18 - 32 * v20);
          if (v20)
            goto LABEL_26;
        }
        if (v17)
LABEL_55:
          operator delete(v17);
      }
      v12 = (char *)v74;
      v10 = v75;
    }
    v5 = v71;
    if (v77 != v78)
    {
      v80 = (char **)v71;
      v39 = sub_1C4FCE454(a3, (unint64_t)v71, (uint64_t **)&v80);
      v40 = v39 + 5;
      if (v39 + 5 != (uint64_t **)&v77)
      {
        v41 = v39;
        v43 = v77;
        v42 = v78;
        v44 = 0xAAAAAAAAAAAAAAABLL * (v78 - v77);
        v45 = (uint64_t)v39[7];
        v46 = (uint64_t)v39[5];
        if (0xAAAAAAAAAAAAAAABLL * ((v45 - v46) >> 3) >= v44)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39[6] - v46) >> 3) >= v44)
          {
            v64 = sub_1C543272C(v77, v78, v46);
            v65 = (char **)v41[6];
            if (v65 != v64)
            {
              v66 = (char **)v41[6];
              do
              {
                v68 = *(v66 - 3);
                v66 -= 3;
                v67 = v68;
                if (v68)
                {
                  *(v65 - 2) = v67;
                  operator delete(v67);
                }
                v65 = v66;
              }
              while (v66 != v64);
            }
            v41[6] = (uint64_t *)v64;
          }
          else
          {
            v59 = (char *)&v77[((uint64_t)v39[6] - v46) >> 3];
            sub_1C543272C(v77, (const void **)v59, v46);
            v60 = v41[6];
            if (v59 != (char *)v42)
            {
              v61 = v41[6];
              do
              {
                *v61 = 0;
                v61[1] = 0;
                v61[2] = 0;
                v62 = *(const void **)v59;
                v63 = *((_QWORD *)v59 + 1);
                v59 += 24;
                sub_1C4DFE394(v61, v62, v63, (v63 - (uint64_t)v62) >> 3);
                v61 += 3;
                v60 += 3;
              }
              while (v59 != (char *)v42);
            }
            v41[6] = v60;
          }
          v5 = v71;
        }
        else
        {
          if (v46)
          {
            v47 = v39[6];
            v48 = v39[5];
            if (v47 != (uint64_t *)v46)
            {
              v49 = v41[6];
              do
              {
                v51 = (void *)*(v49 - 3);
                v49 -= 3;
                v50 = v51;
                if (v51)
                {
                  *(v47 - 2) = (uint64_t)v50;
                  operator delete(v50);
                }
                v47 = v49;
              }
              while (v49 != (uint64_t *)v46);
              v48 = *v40;
            }
            v41[6] = (uint64_t *)v46;
            operator delete(v48);
            v45 = 0;
            *v40 = 0;
            v40[1] = 0;
            v40[2] = 0;
          }
          if (v44 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_99;
          v52 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
          v53 = 2 * v52;
          if (2 * v52 <= v44)
            v53 = v44;
          v54 = v52 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v53;
          if (v54 > 0xAAAAAAAAAAAAAAALL)
LABEL_99:
            abort();
          v55 = 3 * v54;
          v56 = (uint64_t *)operator new(24 * v54);
          v41[5] = v56;
          v41[6] = v56;
          v41[7] = &v56[v55];
          if (v43 == v42)
          {
            v5 = v71;
          }
          else
          {
            v5 = v71;
            do
            {
              *v56 = 0;
              v56[1] = 0;
              v56[2] = 0;
              v57 = *v43;
              v58 = (uint64_t)v43[1];
              v43 += 3;
              sub_1C4DFE394(v56, v57, v58, (v58 - (uint64_t)v57) >> 3);
              v56 += 3;
            }
            while (v43 != v42);
          }
          v41[6] = v56;
        }
      }
    }
    v80 = (char **)&v74;
    sub_1C4DB60AC((void ***)&v80);
    v74 = &v77;
    sub_1C4DB60AC((void ***)&v74);
    v6 = v70;
LABEL_97:
    v5 += 4;
  }
  while (v5 != v6);
}

uint64_t llvm::convertConstantExprsToInstructions(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  char *v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  char *AsInstruction;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  llvm::User *v27;
  int32x2_t *****v28;
  int32x2_t *****v29;
  int32x2_t ****v30;
  unsigned int v31;
  int32x2_t *****v32;
  int32x2_t ****v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66[3];
  char v67;

  v65 = 128;
  v5 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  v63 = v5;
  v64 = 0;
  v6 = -6144;
  do
  {
    v7 = &v5[v6];
    *((_QWORD *)v7 + 769) = 2;
    *((_QWORD *)v7 + 770) = 0;
    *((_QWORD *)v7 + 771) = -4096;
    *((_QWORD *)v7 + 768) = &off_1E8168F38;
    *((_QWORD *)v7 + 772) = 0;
    v6 += 48;
  }
  while (v6);
  LOBYTE(v66[0]) = 0;
  v67 = 0;
  v8 = *(_DWORD *)(a1 + 20);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = *(uint64_t **)(a1 - 8);
    v9 = v8 & 0x7FFFFFF;
    if (v9)
      goto LABEL_5;
LABEL_56:
    v36 = 128;
    goto LABEL_57;
  }
  v9 = v8 & 0x7FFFFFF;
  v10 = (uint64_t *)(a1 - 32 * v9);
  if (!v9)
    goto LABEL_56;
LABEL_5:
  v59 = a1;
  v60 = &v10[4 * v9];
  do
  {
    v11 = *(_QWORD **)(a2 + 8);
    if (!v11)
      goto LABEL_46;
    do
    {
      v12 = v11[4];
      if ((unint64_t)v10 < v12)
        goto LABEL_10;
      if (v12 >= (unint64_t)v10)
      {
        AsInstruction = (char *)v59;
        if (*(_BYTE *)(v59 + 16) == 83)
        {
          v14 = *(_DWORD *)(v59 + 20);
          if ((v14 & 0x40000000) != 0)
            v15 = *(_QWORD *)(v59 - 8);
          else
            v15 = v59 - 32 * (v14 & 0x7FFFFFF);
          v16 = *(_QWORD *)(v15
                          + 32 * *(unsigned int *)(v59 + 60)
                          + 8 * (((unint64_t)v10 - v15) >> 5));
          v17 = v16 + 40;
          for (i = *(_QWORD *)(v16 + 48); ; i = *(_QWORD *)(i + 8))
          {
            if (i == v17)
              goto LABEL_27;
            v19 = i - 24;
            if (!i)
              v19 = 0;
            if (*(_BYTE *)(v19 + 16) != 83)
              break;
          }
          v20 = *(unsigned __int8 *)(i - 8) - 38;
          v21 = v20 > 0x38;
          v22 = (1 << v20) & 0x100060000000001;
          if (v21 || v22 == 0)
            v17 = i;
          else
            v17 = *(_QWORD *)(i + 8);
LABEL_27:
          if (v17)
            AsInstruction = (char *)(v17 - 24);
          else
            AsInstruction = 0;
        }
        v62 = v10;
        v24 = sub_1C4FCE454((uint64_t **)a2, (unint64_t)v10, &v62);
        v26 = v24[5];
        v25 = v24[6];
        if (v26 == v25)
          break;
        v27 = (llvm::User *)v59;
LABEL_32:
        v28 = (int32x2_t *****)*v26;
        v29 = (int32x2_t *****)v26[1];
        while (1)
        {
          if (v28 == v29)
          {
            v26 += 3;
            if (v26 == v25)
              goto LABEL_46;
            goto LABEL_32;
          }
          v30 = *v28;
          if (v65)
          {
            v31 = ((v30 >> 4) ^ (v30 >> 9)) & (v65 - 1);
            v32 = (int32x2_t *****)&v63[48 * v31];
            v33 = v32[3];
            if (v33 == v30)
            {
LABEL_36:
              if (v32 != (int32x2_t *****)&v63[48 * v65])
              {
                AsInstruction = *(char **)sub_1C5431404((uint64_t)&v63, *v28);
                goto LABEL_44;
              }
            }
            else
            {
              v34 = 1;
              while (v33 != (int32x2_t ****)-4096)
              {
                v35 = v31 + v34++;
                v31 = v35 & (v65 - 1);
                v32 = (int32x2_t *****)&v63[48 * v31];
                v33 = v32[3];
                if (v33 == v30)
                  goto LABEL_36;
              }
            }
          }
          AsInstruction = llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)*v28, (llvm::Instruction *)AsInstruction);
          *(_QWORD *)sub_1C5431404((uint64_t)&v63, v30) = AsInstruction;
          if (a3)
            sub_1C4774094(a3, (uint64_t)AsInstruction);
LABEL_44:
          llvm::User::replaceUsesOfWith(v27, (llvm::Value *)v30, (llvm::Value *)AsInstruction);
          ++v28;
          v27 = (llvm::User *)AsInstruction;
        }
      }
      ++v11;
LABEL_10:
      v11 = (_QWORD *)*v11;
    }
    while (v11);
LABEL_46:
    v10 += 4;
  }
  while (v10 != v60);
  v5 = v63;
  v36 = v65;
  if (!(_DWORD)v64)
  {
LABEL_57:
    v39 = &v5[48 * v36];
    v37 = v39;
    goto LABEL_58;
  }
  v37 = &v63[48 * v65];
  if (v65)
  {
    v38 = 0;
    while (1)
    {
      v39 = &v63[v38];
      if ((*(_QWORD *)&v63[v38 + 24] | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
      v38 += 48;
      if (48 * v65 == v38)
      {
        v39 = &v63[48 * v65];
        break;
      }
    }
  }
  else
  {
    v39 = v63;
  }
LABEL_58:
  v40 = &v5[48 * v36];
LABEL_59:
  while (v39 != v40)
  {
    llvm::Constant::removeDeadConstantUsers(*((_QWORD *)v39 + 3));
    v41 = v39 + 48;
    v39 = v37;
    if (v41 != v37)
    {
      v39 = v41;
      while ((*((_QWORD *)v39 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v39 += 48;
        if (v39 == v37)
        {
          v39 = v37;
          goto LABEL_59;
        }
      }
    }
  }
  if (v67)
  {
    sub_1C4E43068((uint64_t)v66);
    MEMORY[0x1CAA32FB4](v66[0], 8);
    v67 = 0;
  }
  v42 = v63;
  if (v65)
  {
    v43 = &v63[48 * v65];
    do
    {
      v44 = *((_QWORD *)v42 + 3);
      if (v44 != -8192 && v44 != -4096 && v44 != 0)
      {
        v46 = *((_QWORD *)v42 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v46 = *((_QWORD *)v42 + 2);
        v47 = (unint64_t *)*((_QWORD *)v42 + 2);
        if (v47)
        {
          *v47 = *v47 & 7 | v46;
        }
        else
        {
          v48 = *((_QWORD *)v42 + 3);
          v49 = ***(int32x2_t ****)v48;
          v50 = (unint64_t)v49[303];
          if (v50 <= v46)
          {
            v51 = v49[305].u32[0];
            if (v50 + 16 * v51 > v46)
            {
              v52 = v51 - 1;
              LODWORD(v53) = v52 & ((v48 >> 4) ^ (v48 >> 9));
              v54 = (uint64_t *)(v50 + 16 * v53);
              v55 = *v54;
              if (v48 == *v54)
              {
LABEL_85:
                *v54 = -8192;
                v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
                v48 = *((_QWORD *)v42 + 3);
              }
              else
              {
                v56 = 1;
                while (v55 != -4096)
                {
                  v57 = v53 + v56++;
                  v53 = v57 & v52;
                  v55 = *(_QWORD *)(v50 + 16 * v53);
                  if (v48 == v55)
                  {
                    v54 = (uint64_t *)(v50 + 16 * v53);
                    goto LABEL_85;
                  }
                }
              }
              *(_BYTE *)(v48 + 17) &= ~1u;
            }
          }
        }
      }
      v42 += 48;
    }
    while (v42 != v43);
    v42 = v63;
  }
  return MEMORY[0x1CAA32FB4](v42, 8);
}

uint64_t sub_1C5431404(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  int32x2_t ****v7;
  int32x2_t ****v8;
  BOOL v9;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t ****v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t *****v21;
  int32x2_t ****v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t (**v38)(llvm::CallbackVH *__hidden);
  uint64_t v39;
  unint64_t *v40;
  int32x2_t ****v41;
  uint64_t v42;
  uint64_t v43;

  v2 = (uint64_t)a2;
  v39 = 2;
  v40 = 0;
  v41 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v39);
    v2 = (uint64_t)v41;
  }
  v38 = &off_1E8168F38;
  v42 = a1;
  v43 = 0;
  v4 = sub_1C5432064(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v2, &v43);
  v5 = v43;
  if ((v4 & 1) == 0)
  {
    v6 = (_QWORD *)sub_1C54320FC(a1, (uint64_t)&v38, v43);
    v5 = (uint64_t)v6;
    v7 = (int32x2_t ****)v6[3];
    v8 = v41;
    if (v7 != v41)
    {
      v9 = v7 == (int32x2_t ****)-4096 || v7 == 0;
      if (!v9 && v7 != (int32x2_t ****)-8192)
      {
        v25 = v6[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v25 = v6[2];
        v26 = (unint64_t *)v6[2];
        if (v26)
        {
          *v26 = *v26 & 7 | v25;
        }
        else
        {
          v27 = v6[3];
          v28 = ***(int32x2_t ****)v27;
          v29 = (unint64_t)v28[303];
          if (v29 <= v25)
          {
            v30 = v28[305].u32[0];
            if (v29 + 16 * v30 > v25)
            {
              v31 = v30 - 1;
              LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
              v33 = (uint64_t *)(v29 + 16 * v32);
              v34 = *v33;
              if (v27 == *v33)
              {
LABEL_42:
                *v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                v27 = v6[3];
              }
              else
              {
                v35 = 1;
                while (v34 != -4096)
                {
                  v36 = v32 + v35++;
                  v32 = v36 & v31;
                  v34 = *(_QWORD *)(v29 + 16 * v32);
                  if (v27 == v34)
                  {
                    v33 = (uint64_t *)(v29 + 16 * v32);
                    goto LABEL_42;
                  }
                }
              }
              *(_BYTE *)(v27 + 17) &= ~1u;
            }
          }
        }
        v8 = v41;
      }
      v6[3] = v8;
      if (v8 != (int32x2_t ****)-4096 && v8 != (int32x2_t ****)-8192 && v8 != 0)
      {
        v11 = v39;
        v12 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
        v6[2] = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
        *v12 = v6 + 1;
        v6[1] = v11 & 0xFFFFFFFFFFFFFFF8 | v6[1] & 7;
        v13 = (unint64_t *)v6[2];
        if (v13)
          *v13 = *v13 & 7 | (unint64_t)(v6 + 2);
      }
    }
    v6[4] = v42;
    v6[5] = 0;
  }
  if (v41 != (int32x2_t ****)-8192 && v41 != (int32x2_t ****)-4096 && v41)
  {
    v14 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      *v40 = *v40 & 7 | v14;
    }
    else
    {
      v15 = v41;
      v16 = ***v41;
      v17 = (unint64_t)v16[303];
      if (v17 <= v14)
      {
        v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v14)
        {
          v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v41 >> 4) ^ (v41 >> 9));
          v21 = (int32x2_t *****)(v17 + 16 * v20);
          v22 = *v21;
          if (v41 == *v21)
          {
LABEL_31:
            *v21 = (int32x2_t ****)-8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            v15 = v41;
          }
          else
          {
            v23 = 1;
            while (v22 != (int32x2_t ****)-4096)
            {
              v24 = v20 + v23++;
              v20 = v24 & v19;
              v22 = *(int32x2_t *****)(v17 + 16 * v20);
              if (v41 == v22)
              {
                v21 = (int32x2_t *****)(v17 + 16 * v20);
                goto LABEL_31;
              }
            }
          }
          *((_BYTE *)v15 + 17) &= ~1u;
        }
      }
    }
  }
  return v5 + 40;
}

uint64_t sub_1C54316D8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD ***v2;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v10;
  _QWORD ***v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD ***v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD ***v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = a1[1];
  v33 = v1 & 6;
  v34 = 0;
  v2 = (_QWORD ***)a1[3];
  v35 = v2;
  if (v2 != (_QWORD ***)-8192 && v2 != (_QWORD ***)-4096 && v2 != 0)
  {
    v34 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v33;
    v33 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v34)
      *v34 = *v34 & 7 | (unint64_t)&v34;
  }
  v4 = a1[4];
  v36 = v4;
  v37 = 0;
  result = sub_1C5432064(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), (uint64_t)v35, &v37);
  if ((_DWORD)result)
  {
    v6 = v37;
    v7 = v37[3];
    if (v7 != -8192)
    {
      if (v7 != -4096 && v7 != 0)
      {
        v21 = v37[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v21 = v37[2];
        v22 = (unint64_t *)v6[2];
        if (v22)
        {
          *v22 = *v22 & 7 | v21;
        }
        else
        {
          v23 = v6[3];
          v24 = ***(int32x2_t ****)v23;
          v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              v29 = (uint64_t *)(v25 + 16 * v28);
              v30 = *v29;
              if (v23 == *v29)
              {
LABEL_42:
                *v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                v23 = v6[3];
              }
              else
              {
                v31 = 1;
                while (v30 != -4096)
                {
                  v32 = v28 + v31++;
                  v28 = v32 & v27;
                  v30 = *(_QWORD *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_42;
                  }
                }
              }
              *(_BYTE *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      v6[3] = -8192;
    }
    v6[4] = 0;
    *(int32x2_t *)(v4 + 8) = vadd_s32(*(int32x2_t *)(v4 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v35 != (_QWORD ***)-8192 && v35 != (_QWORD ***)-4096 && v35 != 0)
  {
    v10 = v33 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
    if (v34)
    {
      *v34 = *v34 & 7 | v10;
    }
    else
    {
      v11 = v35;
      v12 = (int32x2_t *)***v35;
      v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v35 >> 4) ^ (v35 >> 9));
          v17 = (_QWORD *)(v13 + 16 * v16);
          v18 = (_QWORD ***)*v17;
          if (v35 == (_QWORD ***)*v17)
          {
LABEL_32:
            *v17 = -8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            v11 = v35;
          }
          else
          {
            v19 = 1;
            while (v18 != (_QWORD ***)-4096)
            {
              v20 = v16 + v19++;
              v16 = v20 & v15;
              v18 = *(_QWORD ****)(v13 + 16 * v16);
              if (v35 == v18)
              {
                v17 = (_QWORD *)(v13 + 16 * v16);
                goto LABEL_32;
              }
            }
          }
          *((_BYTE *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5431980(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD ***v4;
  int32x2_t *v6;
  uint64_t result;
  uint64_t (**v8)(llvm::CallbackVH *__hidden);
  int32x2_t *v9;
  uint64_t (*v10)(llvm::CallbackVH *__hidden);
  uint64_t (*v11)(llvm::CallbackVH *__hidden);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t ****v16;
  int32x2_t ****v17;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v25;
  _QWORD ***v26;
  int32x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD ***v33;
  int v34;
  int v35;
  unint64_t v36;
  int32x2_t ****v37;
  int32x2_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int32x2_t *****v43;
  int32x2_t ****v44;
  int v45;
  int v46;
  unint64_t v47;
  int32x2_t ****v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int32x2_t *****v54;
  int32x2_t ****v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t (*v60)(llvm::CallbackVH *__hidden);
  int32x2_t *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t (**v66)(llvm::CallbackVH *__hidden);
  uint64_t (*v67)(llvm::CallbackVH *__hidden);
  int v68;
  int v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  int32x2_t *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD ***v84;
  int32x2_t *v85;
  uint64_t (**v86)(llvm::CallbackVH *__hidden);
  uint64_t v87;
  unint64_t *v88;
  int32x2_t ****v89;
  uint64_t v90;
  uint64_t (**v91)(llvm::CallbackVH *__hidden);
  unint64_t v92;
  unint64_t *v93;
  int32x2_t ****v94;
  uint64_t v95;
  uint64_t (*v96)(llvm::CallbackVH *__hidden);
  uint64_t v97;

  v3 = a1[1];
  v82 = v3 & 6;
  v83 = 0;
  v4 = (_QWORD ***)a1[3];
  v84 = v4;
  if (v4 != (_QWORD ***)-8192 && v4 != (_QWORD ***)-4096 && v4 != 0)
  {
    v83 = *(unint64_t **)(v3 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) = &v82;
    v82 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v83)
      *v83 = *v83 & 7 | (unint64_t)&v83;
  }
  v6 = (int32x2_t *)a1[4];
  v85 = v6;
  v91 = 0;
  result = sub_1C5432064((uint64_t)*v6, v6[2].i32[0], (uint64_t)v84, &v91);
  v8 = (uint64_t (**)(llvm::CallbackVH *__hidden))(*(_QWORD *)v6 + 48 * v6[2].u32[0]);
  if ((_DWORD)result)
    v8 = v91;
  v9 = v85;
  if ((uint64_t (**)(llvm::CallbackVH *__hidden))(*(_QWORD *)v85 + 48 * v85[2].u32[0]) != v8)
  {
    v10 = v8[5];
    v11 = v8[3];
    if (v11 != (uint64_t (*)(llvm::CallbackVH *__hidden))-8192)
    {
      if (v11 != (uint64_t (*)(llvm::CallbackVH *__hidden))-4096 && v11 != 0)
      {
        v58 = (unint64_t)v8[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v58 = v8[2];
        v59 = (unint64_t *)v8[2];
        if (v59)
        {
          *v59 = *v59 & 7 | v58;
        }
        else
        {
          v60 = v8[3];
          v61 = ***(int32x2_t ****)v60;
          v62 = (unint64_t)v61[303];
          if (v62 <= v58)
          {
            v63 = v61[305].u32[0];
            if (v62 + 16 * v63 > v58)
            {
              v64 = v63 - 1;
              LODWORD(v65) = v64 & ((v60 >> 4) ^ (v60 >> 9));
              v66 = (uint64_t (**)(llvm::CallbackVH *__hidden))(v62 + 16 * v65);
              v67 = *v66;
              if (v60 == *v66)
              {
LABEL_97:
                *v66 = (uint64_t (*)(llvm::CallbackVH *__hidden))-8192;
                v61[304] = vadd_s32(v61[304], (int32x2_t)0x1FFFFFFFFLL);
                v60 = v8[3];
              }
              else
              {
                v68 = 1;
                while (v67 != (uint64_t (*)(llvm::CallbackVH *__hidden))-4096)
                {
                  v69 = v65 + v68++;
                  v65 = v69 & v64;
                  v67 = *(uint64_t (**)(llvm::CallbackVH *__hidden))(v62 + 16 * v65);
                  if (v60 == v67)
                  {
                    v66 = (uint64_t (**)(llvm::CallbackVH *__hidden))(v62 + 16 * v65);
                    goto LABEL_97;
                  }
                }
              }
              *((_BYTE *)v60 + 17) &= ~1u;
            }
          }
        }
      }
      v8[3] = (uint64_t (*)(llvm::CallbackVH *__hidden))-8192;
    }
    v8[4] = 0;
    v9[1] = vadd_s32(v9[1], (int32x2_t)0x1FFFFFFFFLL);
    v13 = (uint64_t)v85;
    v14 = 2;
    v87 = 2;
    v88 = 0;
    v89 = (int32x2_t ****)a2;
    if (a2 != -8192 && a2 != -4096 && a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v87);
      v14 = v87;
      a2 = (uint64_t)v89;
    }
    v86 = &off_1E8168F38;
    v90 = v13;
    v92 = v14 & 6;
    v93 = 0;
    v94 = (int32x2_t ****)a2;
    if (a2 == -8192 || a2 == -4096)
    {
      v15 = v13;
    }
    else
    {
      v15 = v13;
      if (a2)
      {
        v93 = *(unint64_t **)(v14 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = &v92;
        v92 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v93)
          *v93 = *v93 & 7 | (unint64_t)&v93;
        v15 = v90;
        a2 = (uint64_t)v94;
      }
    }
    v91 = &off_1E8168F38;
    v95 = v15;
    v96 = v10;
    v97 = 0;
    result = sub_1C5432064(*(_QWORD *)v13, *(_DWORD *)(v13 + 16), a2, &v97);
    if ((result & 1) == 0)
    {
      result = sub_1C54320FC(v13, (uint64_t)&v91, v97);
      v16 = *(int32x2_t *****)(result + 24);
      v17 = v94;
      if (v16 != v94)
      {
        if (v16 != (int32x2_t ****)-4096 && v16 && v16 != (int32x2_t ****)-8192)
        {
          v70 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v70 = *(_QWORD *)(result + 16);
          v71 = *(unint64_t **)(result + 16);
          if (v71)
          {
            *v71 = *v71 & 7 | v70;
          }
          else
          {
            v72 = *(_QWORD *)(result + 24);
            v73 = ***(int32x2_t ****)v72;
            v74 = (unint64_t)v73[303];
            if (v74 <= v70)
            {
              v75 = v73[305].u32[0];
              if (v74 + 16 * v75 > v70)
              {
                v76 = v75 - 1;
                LODWORD(v77) = v76 & ((v72 >> 4) ^ (v72 >> 9));
                v78 = (uint64_t *)(v74 + 16 * v77);
                v79 = *v78;
                if (v72 == *v78)
                {
LABEL_110:
                  *v78 = -8192;
                  v73[304] = vadd_s32(v73[304], (int32x2_t)0x1FFFFFFFFLL);
                  v72 = *(_QWORD *)(result + 24);
                }
                else
                {
                  v80 = 1;
                  while (v79 != -4096)
                  {
                    v81 = v77 + v80++;
                    v77 = v81 & v76;
                    v79 = *(_QWORD *)(v74 + 16 * v77);
                    if (v72 == v79)
                    {
                      v78 = (uint64_t *)(v74 + 16 * v77);
                      goto LABEL_110;
                    }
                  }
                }
                *(_BYTE *)(v72 + 17) &= ~1u;
              }
            }
          }
          v17 = v94;
        }
        *(_QWORD *)(result + 24) = v17;
        if (v17 != (int32x2_t ****)-4096 && v17 != (int32x2_t ****)-8192 && v17 != 0)
        {
          v19 = v92;
          v20 = (_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(result + 16) = *(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF8);
          *v20 = result + 8;
          *(_QWORD *)(result + 8) = v19 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)(result + 8) & 7;
          v21 = *(uint64_t **)(result + 16);
          if (v21)
            *v21 = *v21 & 7 | (result + 16);
        }
      }
      *(_QWORD *)(result + 32) = v95;
      *(_QWORD *)(result + 40) = v96;
    }
    if (v94 != (int32x2_t ****)-8192 && v94 != (int32x2_t ****)-4096 && v94 != 0)
    {
      v36 = v92 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF8) = v93;
      if (v93)
      {
        *v93 = *v93 & 7 | v36;
      }
      else
      {
        v37 = v94;
        v38 = ***v94;
        v39 = (unint64_t)v38[303];
        if (v39 <= v36)
        {
          v40 = v38[305].u32[0];
          if (v39 + 16 * v40 > v36)
          {
            v41 = v40 - 1;
            LODWORD(v42) = v41 & ((v94 >> 4) ^ (v94 >> 9));
            v43 = (int32x2_t *****)(v39 + 16 * v42);
            v44 = *v43;
            if (v94 == *v43)
            {
LABEL_77:
              *v43 = (int32x2_t ****)-8192;
              v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
              v37 = v94;
            }
            else
            {
              v45 = 1;
              while (v44 != (int32x2_t ****)-4096)
              {
                v46 = v42 + v45++;
                v42 = v46 & v41;
                v44 = *(int32x2_t *****)(v39 + 16 * v42);
                if (v94 == v44)
                {
                  v43 = (int32x2_t *****)(v39 + 16 * v42);
                  goto LABEL_77;
                }
              }
            }
            *((_BYTE *)v37 + 17) &= ~1u;
          }
        }
      }
    }
    if (v89 != (int32x2_t ****)-8192 && v89 != (int32x2_t ****)-4096 && v89 != 0)
    {
      v47 = v87 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF8) = v88;
      if (v88)
      {
        *v88 = *v88 & 7 | v47;
      }
      else
      {
        v48 = v89;
        v49 = ***v89;
        v50 = (unint64_t)v49[303];
        if (v50 <= v47)
        {
          v51 = v49[305].u32[0];
          if (v50 + 16 * v51 > v47)
          {
            v52 = v51 - 1;
            LODWORD(v53) = v52 & ((v89 >> 4) ^ (v89 >> 9));
            v54 = (int32x2_t *****)(v50 + 16 * v53);
            v55 = *v54;
            if (v89 == *v54)
            {
LABEL_87:
              *v54 = (int32x2_t ****)-8192;
              v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
              v48 = v89;
            }
            else
            {
              v56 = 1;
              while (v55 != (int32x2_t ****)-4096)
              {
                v57 = v53 + v56++;
                v53 = v57 & v52;
                v55 = *(int32x2_t *****)(v50 + 16 * v53);
                if (v89 == v55)
                {
                  v54 = (int32x2_t *****)(v50 + 16 * v53);
                  goto LABEL_87;
                }
              }
            }
            *((_BYTE *)v48 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v84 != (_QWORD ***)-8192 && v84 != (_QWORD ***)-4096 && v84 != 0)
  {
    v25 = v82 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF8) = v83;
    if (v83)
    {
      *v83 = *v83 & 7 | v25;
    }
    else
    {
      v26 = v84;
      v27 = (int32x2_t *)***v84;
      v28 = (unint64_t)v27[303];
      if (v28 <= v25)
      {
        v29 = v27[305].u32[0];
        if (v28 + 16 * v29 > v25)
        {
          v30 = v29 - 1;
          LODWORD(v31) = v30 & ((v84 >> 4) ^ (v84 >> 9));
          v32 = (_QWORD *)(v28 + 16 * v31);
          v33 = (_QWORD ***)*v32;
          if (v84 == (_QWORD ***)*v32)
          {
LABEL_67:
            *v32 = -8192;
            v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
            v26 = v84;
          }
          else
          {
            v34 = 1;
            while (v33 != (_QWORD ***)-4096)
            {
              v35 = v31 + v34++;
              v31 = v35 & v30;
              v33 = *(_QWORD ****)(v28 + 16 * v31);
              if (v84 == v33)
              {
                v32 = (_QWORD *)(v28 + 16 * v31);
                goto LABEL_67;
              }
            }
          }
          *((_BYTE *)v26 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5432064(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 48 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C54320FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C54321AC(a1, v6);
  v8 = 0;
  sub_1C5432064(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char *sub_1C54321AC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  int32x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = &off_1E8168F38;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = (_QWORD *)(v4 + 48 * v3);
      v14 = (_QWORD *)v4;
      do
      {
        v15 = v14[3];
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v51 = 0;
          sub_1C5432064(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v51);
          v16 = v51;
          v17 = v51[3];
          v18 = v14[3];
          if (v17 != v18)
          {
            v19 = v17 == -4096 || v17 == 0;
            if (!v19 && v17 != -8192)
            {
              v36 = v51[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v36 = v51[2];
              v37 = (unint64_t *)v16[2];
              if (v37)
              {
                *v37 = *v37 & 7 | v36;
              }
              else
              {
                v38 = v16[3];
                v39 = ***(int32x2_t ****)v38;
                v40 = (unint64_t)v39[303];
                if (v40 <= v36)
                {
                  v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v36)
                  {
                    v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v38 >> 4) ^ (v38 >> 9));
                    v44 = (uint64_t *)(v40 + 16 * v43);
                    v45 = *v44;
                    if (v38 != *v44)
                    {
                      v46 = 1;
                      do
                      {
                        if (v45 == -4096)
                          goto LABEL_54;
                        v47 = v43 + v46++;
                        v43 = v47 & v42;
                        v45 = *(_QWORD *)(v40 + 16 * v43);
                      }
                      while (v38 != v45);
                      v44 = (uint64_t *)(v40 + 16 * v43);
                    }
                    *v44 = -8192;
                    v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                    v38 = v16[3];
LABEL_54:
                    *(_BYTE *)(v38 + 17) &= ~1u;
                  }
                }
              }
              v18 = v14[3];
            }
            v16[3] = v18;
            if (v18 != -4096 && v18 != -8192 && v18 != 0)
            {
              v21 = v14[1];
              v16[2] = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) = v16 + 1;
              v16[1] = v21 & 0xFFFFFFFFFFFFFFF8 | v16[1] & 7;
              v22 = (unint64_t *)v16[2];
              if (v22)
                *v22 = *v22 & 7 | (unint64_t)(v16 + 2);
            }
          }
          v16[4] = v14[4];
          v16[5] = v14[5];
          ++*(_DWORD *)(a1 + 8);
          v15 = v14[3];
        }
        if (v15 != -8192 && v15 != -4096 && v15 != 0)
        {
          v24 = v14[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v24 = v14[2];
          v25 = (unint64_t *)v14[2];
          if (v25)
          {
            *v25 = *v25 & 7 | v24;
          }
          else
          {
            v26 = v14[3];
            v27 = ***(int32x2_t ****)v26;
            v28 = (unint64_t)v27[303];
            if (v28 <= v24)
            {
              v29 = v27[305].u32[0];
              if (v28 + 16 * v29 > v24)
              {
                v30 = v29 - 1;
                LODWORD(v31) = v30 & ((v26 >> 4) ^ (v26 >> 9));
                v32 = (uint64_t *)(v28 + 16 * v31);
                v33 = *v32;
                if (v26 != *v32)
                {
                  v34 = 1;
                  do
                  {
                    if (v33 == -4096)
                      goto LABEL_42;
                    v35 = v31 + v34++;
                    v31 = v35 & v30;
                    v33 = *(_QWORD *)(v28 + 16 * v31);
                  }
                  while (v26 != v33);
                  v32 = (uint64_t *)(v28 + 16 * v31);
                }
                *v32 = -8192;
                v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
                v26 = v14[3];
LABEL_42:
                *(_BYTE *)(v26 + 17) &= ~1u;
              }
            }
          }
        }
        v14 += 6;
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v48 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v48)
  {
    v49 = 48 * v48;
    v50 = result + 16;
    do
    {
      *v50 = 0;
      v50[1] = -4096;
      *(v50 - 2) = &off_1E8168F38;
      *(v50 - 1) = 2;
      v50[2] = 0;
      v50 += 6;
      v49 -= 48;
    }
    while (v49);
  }
  return result;
}

void sub_1C543256C(char *a1)
{
  void **v2;

  if (a1)
  {
    sub_1C543256C(*(_QWORD *)a1);
    sub_1C543256C(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    sub_1C4DB60AC(&v2);
    operator delete(a1);
  }
}

_QWORD *sub_1C54325BC(char **a1, const void *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  void *v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v9 = (char *)operator new(24 * v6);
  v10 = &v9[24 * v3];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  sub_1C4DFE394(v10, a2, a3, (a3 - (uint64_t)a2) >> 3);
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    v16 = v10 + 24;
    *a1 = v10;
    a1[1] = v10 + 24;
    a1[2] = &v9[24 * v6];
    if (!v12)
      return v16;
    goto LABEL_17;
  }
  v13 = v10;
  do
  {
    v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v13 - 24) = v14;
    v13 -= 24;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v12 + 2);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
  }
  while (v12 != v11);
  v12 = *a1;
  v15 = a1[1];
  v16 = v10 + 24;
  *a1 = v13;
  a1[1] = v10 + 24;
  a1[2] = &v9[24 * v6];
  if (v15 != v12)
  {
    v17 = v15;
    do
    {
      v19 = (void *)*((_QWORD *)v17 - 3);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *((_QWORD *)v15 - 2) = v18;
        operator delete(v18);
      }
      v15 = v17;
    }
    while (v17 != v12);
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v16;
}

char **sub_1C543272C(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  const void **v4;
  char **v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char **v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a1;
    v5 = (char **)(a3 + 8);
    while (v4 == (const void **)(v5 - 1))
    {
LABEL_26:
      v4 += 3;
      v3 += 24;
      v5 += 3;
      if (v4 == a2)
        return v5 - 1;
    }
    v6 = (char *)*v4;
    v7 = (char *)v4[1];
    v8 = v7 - (_BYTE *)*v4;
    v9 = v8 >> 3;
    v10 = (uint64_t)v5[1];
    v11 = *(v5 - 1);
    if (v8 >> 3 > (unint64_t)((v10 - (uint64_t)v11) >> 3))
    {
      if (v11)
      {
        *v5 = v11;
        operator delete(v11);
        v10 = 0;
        *(v5 - 1) = 0;
        *v5 = 0;
        v5[1] = 0;
      }
      if (v8 < 0)
        goto LABEL_29;
      v12 = v10 >> 2;
      if (v10 >> 2 <= v9)
        v12 = v8 >> 3;
      v13 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v12;
      if (v13 >> 61)
LABEL_29:
        abort();
      v14 = (char *)operator new(8 * v13);
      v11 = v14;
      *(v5 - 1) = v14;
      *v5 = v14;
      v5[1] = &v14[8 * v13];
      if (v7 != v6)
        memcpy(v14, v6, v8);
      v15 = v5;
      goto LABEL_25;
    }
    v15 = (char **)(v3 + 8);
    v16 = *v5 - v11;
    v17 = v16 >> 3;
    if (v16 >> 3 >= v9)
    {
      if (v7 == v6)
      {
LABEL_25:
        *v15 = &v11[v8];
        goto LABEL_26;
      }
      v19 = *(v5 - 1);
      v18 = (char *)*v4;
    }
    else
    {
      if (*v5 != v11)
      {
        memmove(*(v5 - 1), *v4, v16);
        v11 = *v5;
      }
      v18 = &v6[8 * v17];
      v8 = v7 - v18;
      if (v7 == v18)
        goto LABEL_25;
      v19 = v11;
    }
    memmove(v19, v18, v8);
    goto LABEL_25;
  }
  return (char **)v3;
}

uint64_t llvm::parseStatepointDirectivesFromAttrs@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;

  *a2 = 0;
  a2[4] = 0;
  a2[8] = 0;
  a2[16] = 0;
  if (!result || !*(_DWORD *)(result + 8))
    return result;
  v2 = *(_QWORD *)(result + 40);
  v3 = &unk_1ED7EA000;
  if (!v2)
    goto LABEL_34;
  v4 = *(_DWORD *)(v2 + 40);
  if (!v4)
    goto LABEL_34;
  v5 = *(_QWORD *)(v2 + 24);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v6 & 1) == 0)
  {
    v53 = result;
    v57 = a2;
    v52 = v5;
    v55 = v4;
    v47 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v4 = v55;
    v3 = &unk_1ED7EA000;
    a2 = v57;
    v48 = v47;
    v5 = v52;
    result = v53;
    if (v48)
    {
      v49 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v49 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v49;
      __cxa_guard_release(&qword_1ED7EAC88);
      v4 = v55;
      v5 = v52;
      result = v53;
      v3 = (_QWORD *)&unk_1ED7EA000;
      a2 = v57;
    }
  }
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3[400] ^ 0x1284532C1FC20738)) ^ ((0x9DDFEA08EB382D69
                                                                    * (v3[400] ^ 0x1284532C1FC20738)) >> 47) ^ 0x7BEB23496BA3734BLL);
  v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x6E696F70;
  v9 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v9;
    v12 = v5 + 24 * v11;
    v13 = *(_QWORD **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      if ("statepoint-id" == (char *)-1)
        goto LABEL_20;
      goto LABEL_9;
    }
    if (v13 != (_QWORD *)-2)
      break;
    if ("statepoint-id" == (char *)-2)
      goto LABEL_20;
LABEL_9:
    if (v13 == (_QWORD *)-1)
      goto LABEL_34;
    v8 = i + v11;
  }
  if (*(_QWORD *)(v12 + 8) != 13)
    goto LABEL_9;
  if (*v13 != 0x696F706574617473 || *(_QWORD *)((char *)v13 + 5) != 0x64692D746E696F70)
    goto LABEL_9;
LABEL_20:
  v15 = *(_QWORD *)(v12 + 16);
  if (v15)
  {
    if (*(_BYTE *)(v15 + 8) == 2)
    {
      v16 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (unsigned __int8 *)(*(unsigned int *)(v15 + 12) + v15 + 25);
        while (1)
        {
          v20 = *v18++;
          v19 = v20;
          if ((v20 - 48) >= 0xA)
          {
            if ((v19 - 97) >= 0x1A)
            {
              if ((v19 - 65) > 0x19)
                break;
              v21 = -55;
            }
            else
            {
              v21 = -87;
            }
          }
          else
          {
            v21 = -48;
          }
          v22 = v21 + v19;
          if (v22 > 9)
            break;
          v23 = 10 * v17 + v22;
          if (v17 > v23 / 0xA)
            break;
          v17 = v23;
          if (!--v16)
          {
            *((_QWORD *)a2 + 1) = v23;
            a2[16] = 1;
            break;
          }
        }
      }
    }
  }
LABEL_34:
  if (!*(_DWORD *)(result + 8))
    return result;
  v24 = *(_QWORD *)(result + 40);
  if (!v24)
    return result;
  v25 = *(_DWORD *)(v24 + 40);
  if (!v25)
    return result;
  v26 = *(_QWORD *)(v24 + 24);
  v27 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v27 & 1) == 0)
  {
    v58 = a2;
    v56 = v26;
    v54 = v25;
    v50 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v25 = v54;
    v26 = v56;
    v3 = &unk_1ED7EA000;
    a2 = v58;
    if (v50)
    {
      v51 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v51 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v51;
      __cxa_guard_release(&qword_1ED7EAC88);
      v25 = v54;
      v26 = v56;
      v3 = (_QWORD *)&unk_1ED7EA000;
      a2 = v58;
    }
  }
  v28 = v3[400];
  v29 = __ROR8__(v28 ^ 0x816DE6868ACBF68DLL, 30);
  v30 = 0x9DDFEA08EB382D69
      * ((v28 + 0x7233C8CEA7033321) ^ ((0x9DDFEA08EB382D69
                                        * ((v29 + 0x485D97F83713B1EFLL) ^ (v28 + 0x7233C8CEA7033321))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v29 + 0x485D97F83713B1EFLL) ^ (v28 + 0x7233C8CEA7033321))));
  v31 = -348639895 * ((v30 >> 47) ^ v30);
  v32 = 1;
  while (2)
  {
    result = v31 & (v25 - 1);
    v33 = (uint64_t *)(v26 + 24 * result);
    v34 = *v33;
    if (*v33 == -1)
    {
      if ("statepoint-num-patch-bytes" == (char *)-1)
        break;
      goto LABEL_41;
    }
    if (v34 == -2)
    {
      if ("statepoint-num-patch-bytes" == (char *)-2)
        break;
      goto LABEL_41;
    }
    if (v33[1] != 26
      || (*(_QWORD *)v34 == 0x696F706574617473 ? (v35 = *(_QWORD *)(v34 + 8) == 0x702D6D756E2D746ELL) : (v35 = 0),
          v35 ? (v36 = *(_QWORD *)(v34 + 16) == 0x7479622D68637461) : (v36 = 0),
          v36 ? (v37 = *(unsigned __int16 *)(v34 + 24) == 29541) : (v37 = 0),
          !v37))
    {
LABEL_41:
      if (v34 == -1)
        return result;
      v31 = v32 + result;
      ++v32;
      continue;
    }
    break;
  }
  v38 = v33[2];
  if (v38)
  {
    if (*(_BYTE *)(v38 + 8) == 2)
    {
      v39 = *(unsigned int *)(v38 + 16);
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = (unsigned __int8 *)(*(unsigned int *)(v38 + 12) + v38 + 25);
        while (1)
        {
          v43 = *v41++;
          v42 = v43;
          if ((v43 - 48) >= 0xA)
          {
            if ((v42 - 97) >= 0x1A)
            {
              if ((v42 - 65) > 0x19)
                return result;
              v44 = -55;
            }
            else
            {
              v44 = -87;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v44 + v42;
          if (v45 > 9)
            break;
          v46 = 10 * v40 + v45;
          if (v40 > v46 / 0xA)
            break;
          v40 = v46;
          if (!--v39)
          {
            if (!HIDWORD(v46))
            {
              *(_DWORD *)a2 = v46;
              a2[4] = 1;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Type::getPrimitiveType(_QWORD *a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = *a1 + 1624;
      break;
    case 1:
      result = *a1 + 1648;
      break;
    case 2:
      result = *a1 + 1672;
      break;
    case 3:
      result = *a1 + 1696;
      break;
    case 4:
      result = *a1 + 1768;
      break;
    case 5:
      result = *a1 + 1792;
      break;
    case 6:
      result = *a1 + 1816;
      break;
    case 7:
      result = *a1 + 1576;
      break;
    case 8:
      result = *a1 + 1600;
      break;
    case 9:
      result = *a1 + 1720;
      break;
    case 10:
      result = *a1 + 1840;
      break;
    case 11:
      result = *a1 + 1864;
      break;
    case 12:
      result = *a1 + 1744;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1576;
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1624;
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1672;
}

uint64_t llvm::Type::getPPC_FP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1816;
}

uint64_t llvm::Type::getLabelTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1600;
}

uint64_t llvm::Type::getMetadataTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1720;
}

BOOL llvm::Type::isIntegerTy(llvm::Type *this, int a2)
{
  return *((_DWORD *)this + 2) == 13 && a2 == *((_DWORD *)this + 2) >> 8;
}

BOOL llvm::Type::isOpaquePointerTy(llvm::Type *this)
{
  _BOOL8 result;

  result = 0;
  if (this)
  {
    if (*((_BYTE *)this + 8) == 15)
      return *((_QWORD *)this + 3) == 0;
  }
  return result;
}

void *llvm::Type::getFltSemantics(llvm::Type *this)
{
  uint64_t v1;

  v1 = *((unsigned __int8 *)this + 8);
  if ((_DWORD)v1 == 2)
    return &unk_1C866F184;
  else
    return (void *)((uint64_t (*)(void *))((char *)nullsub_860 + 4 * byte_1C8651035[v1]))(&unk_1C866F15C);
}

uint64_t sub_1C5432FDC()
{
  return nullsub_860(&unk_1C866F170);
}

void *sub_1C5432FF8()
{
  return &unk_1C866F1C0;
}

uint64_t llvm::Type::getFloatingPointTy(llvm::APFloatBase *a1, void *a2)
{
  llvm::APFloatBase *v4;
  llvm::APFloatBase *v5;

  if (a2 == &unk_1C866F15C)
    return *(_QWORD *)a1 + 1624;
  if (a2 == &unk_1C866F170)
    return *(_QWORD *)a1 + 1648;
  if (a2 == &unk_1C866F184)
    return *(_QWORD *)a1 + 1672;
  v4 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(a1);
  if (v4 == a2)
    return *(_QWORD *)a1 + 1696;
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v4);
  if (v5 == a2)
    return *(_QWORD *)a1 + 1768;
  if (llvm::APFloatBase::IEEEquad(v5) == a2)
    return *(_QWORD *)a1 + 1792;
  return *(_QWORD *)a1 + 1816;
}

BOOL llvm::Type::canLosslesslyBitCastTo(llvm::Type *this, llvm::Type *a2)
{
  unsigned int v2;
  int v5;
  uint64_t v7;
  unint64_t PrimitiveSizeInBits;
  int v10;
  int v11;
  int v12;
  _BOOL4 v14;

  if (this == a2)
    return 1;
  v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 14)
    return 0;
  v5 = *((_DWORD *)a2 + 2);
  if (v5 == 7 || v5 == 14)
    return 0;
  if ((v2 & 0xFE) != 0x12 || (v5 & 0xFE) != 18)
  {
    v7 = 0;
    switch((char)v2)
    {
      case 10:
        if (v5 != 18)
          return 0;
        this = a2;
        goto LABEL_32;
      case 11:
        if (v5 != 18)
          return 0;
        this = a2;
        goto LABEL_34;
      case 15:
        v14 = (v5 ^ v2) < 0x100;
        return *((_DWORD *)a2 + 2) == 15 && v14;
      case 18:
        if (v5 == 11)
        {
LABEL_34:
          if (llvm::Type::getPrimitiveSizeInBits(this) != 0x2000)
            return 0;
        }
        else
        {
          if (v5 != 10)
            return 0;
LABEL_32:
          if (llvm::Type::getPrimitiveSizeInBits(this) != 64)
            return 0;
        }
        break;
      default:
        return v7;
    }
    return 1;
  }
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  v11 = v10;
  return PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(a2) && v11 == v12;
}

unint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  int v1;
  unint64_t result;
  uint64_t v4;

  v1 = *((_DWORD *)this + 2);
  if (v1 == 13)
    return (unint64_t)*((unsigned int *)this + 2) >> 8;
  result = 16;
  switch(v1)
  {
    case 0:
    case 1:
      return result;
    case 2:
      result = 32;
      break;
    case 3:
    case 10:
      result = 64;
      break;
    case 4:
      result = 80;
      break;
    case 5:
    case 6:
      result = 128;
      break;
    case 11:
      result = 0x2000;
      break;
    case 18:
    case 19:
      v4 = *((unsigned int *)this + 8);
      result = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type **)this + 3)) * v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::isEmptyTy(llvm::Type *this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  llvm::Type **v4;
  uint64_t v5;
  llvm::Type *v6;
  uint64_t result;
  BOOL v9;

  v1 = *((unsigned __int8 *)this + 8);
  if (this && v1 == 17)
  {
    while (*((_DWORD *)this + 8))
    {
      this = (llvm::Type *)*((_QWORD *)this + 3);
      v1 = *((unsigned __int8 *)this + 8);
      if (this)
        v2 = v1 == 17;
      else
        v2 = 0;
      if (!v2)
        goto LABEL_8;
    }
    return 1;
  }
LABEL_8:
  if (v1 != 16)
    return 0;
  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
    return 1;
  v4 = (llvm::Type **)*((_QWORD *)this + 2);
  v5 = v3 - 1;
  do
  {
    v6 = *v4++;
    result = llvm::Type::isEmptyTy(v6);
    v9 = v5-- != 0;
  }
  while ((_DWORD)result && v9);
  return result;
}

unint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    this = (llvm::Type *)**((_QWORD **)this + 2);
  return llvm::Type::getPrimitiveSizeInBits(this);
}

uint64_t llvm::Type::getFPMantissaWidth(llvm::Type *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;

  v1 = *((_DWORD *)this + 2);
  v2 = v1;
  if (this && (v1 & 0xFE) == 0x12)
  {
    do
    {
      this = (llvm::Type *)*((_QWORD *)this + 3);
      if (this)
        v3 = (*((_DWORD *)this + 2) & 0xFE) == 18;
      else
        v3 = 0;
    }
    while (v3);
    v2 = *((_DWORD *)this + 2);
  }
  if (v2 < 5)
    return dword_1C865105C[(char)v2];
  if (v2 == 5)
    return 113;
  return 0xFFFFFFFFLL;
}

uint64_t llvm::Type::isSizedDerivedType(uint64_t LayoutType, llvm::SmallPtrSetImplBase *a2)
{
  int v3;
  unsigned int v4;

  while (1)
  {
    v3 = *(unsigned __int8 *)(LayoutType + 8);
    if (LayoutType && v3 == 17 || LayoutType && (v3 & 0xFE) == 0x12)
    {
      LayoutType = *(_QWORD *)(LayoutType + 24);
      goto LABEL_9;
    }
    if (!LayoutType || v3 != 21)
      return llvm::StructType::isSized(LayoutType, a2);
    LayoutType = llvm::TargetExtType::getLayoutType((llvm::TargetExtType *)LayoutType);
LABEL_9:
    v4 = *(unsigned __int8 *)(LayoutType + 8);
    if (v4 <= 0x11)
    {
      if (((1 << v4) & 0xAC7F) != 0)
        return 1;
      if (((1 << v4) & 0x30000) != 0)
        continue;
    }
    if ((v4 & 0xFE) != 0x12 && v4 != 21)
      return 0;
  }
}

uint64_t llvm::StructType::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *this)
{
  int v2;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x800) == 0)
  {
    if ((v2 & 0x100) == 0)
      return 0;
    if (this)
    {
      sub_1C4774094(this, a1);
      if (!v5)
        return 0;
    }
    v6 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = 8 * v6;
      while (1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 8);
        if (v9 == 19)
          return 0;
        if (v9 > 0x11)
          goto LABEL_12;
        if (((1 << v9) & 0xAC7F) == 0)
          break;
LABEL_18:
        v7 += 8;
        v8 -= 8;
        if (!v8)
          goto LABEL_19;
      }
      if (((1 << v9) & 0x30000) == 0)
      {
LABEL_12:
        if ((v9 & 0xFE) != 0x12 && v9 != 21)
          return 0;
      }
      result = llvm::Type::isSizedDerivedType();
      if (!(_DWORD)result)
        return result;
      goto LABEL_18;
    }
LABEL_19:
    *(_DWORD *)(a1 + 8) |= 0x800u;
  }
  return 1;
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1888;
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1912;
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1936;
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1960;
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1984;
}

_QWORD *llvm::Type::getIntNTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  _QWORD *result;
  _DWORD *v4;
  int v5;
  int v6;

  v6 = (int)a2;
  if ((int)a2 <= 63)
  {
    if ((int)a2 <= 31)
    {
      switch((_DWORD)a2)
      {
        case 0x10:
          return (_QWORD *)(*(_QWORD *)this + 1936);
        case 8:
          return (_QWORD *)(*(_QWORD *)this + 1912);
        case 1:
          return (_QWORD *)(*(_QWORD *)this + 1888);
      }
    }
    else if ((_DWORD)a2 == 32)
    {
      return (_QWORD *)(*(_QWORD *)this + 1960);
    }
  }
  else
  {
    if ((_DWORD)a2 == 64)
      return (_QWORD *)(*(_QWORD *)this + 1984);
    if ((_DWORD)a2 == 128)
      return (_QWORD *)(*(_QWORD *)this + 2008);
  }
  v4 = sub_1C5270984(*(_QWORD *)this + 2168, &v6);
  result = (_QWORD *)*((_QWORD *)v4 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*(_QWORD *)this + 2040, 24, 3);
    v5 = v6;
    *result = this;
    result[2] = 0;
    result[1] = (v5 << 8) | 0xDu;
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

_QWORD *llvm::IntegerType::get(llvm::IntegerType *this, llvm::LLVMContext *a2)
{
  _QWORD *result;
  _DWORD *v4;
  int v5;
  int v6;

  v6 = (int)a2;
  if ((int)a2 <= 63)
  {
    if ((int)a2 <= 31)
    {
      switch((_DWORD)a2)
      {
        case 0x10:
          return (_QWORD *)(*(_QWORD *)this + 1936);
        case 8:
          return (_QWORD *)(*(_QWORD *)this + 1912);
        case 1:
          return (_QWORD *)(*(_QWORD *)this + 1888);
      }
    }
    else if ((_DWORD)a2 == 32)
    {
      return (_QWORD *)(*(_QWORD *)this + 1960);
    }
  }
  else
  {
    if ((_DWORD)a2 == 64)
      return (_QWORD *)(*(_QWORD *)this + 1984);
    if ((_DWORD)a2 == 128)
      return (_QWORD *)(*(_QWORD *)this + 2008);
  }
  v4 = sub_1C5270984(*(_QWORD *)this + 2168, &v6);
  result = (_QWORD *)*((_QWORD *)v4 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*(_QWORD *)this + 2040, 24, 3);
    v5 = v6;
    *result = this;
    result[2] = 0;
    result[1] = (v5 << 8) | 0xDu;
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

uint64_t llvm::Type::getHalfPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1624), a2);
}

uint64_t llvm::Type::getBFloatPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1648), a2);
}

uint64_t llvm::Type::getFloatPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1672), a2);
}

uint64_t llvm::Type::getDoublePtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1696), a2);
}

uint64_t llvm::Type::getX86_FP80PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1768), a2);
}

uint64_t llvm::Type::getFP128PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1792), a2);
}

uint64_t llvm::Type::getPPC_FP128PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1816), a2);
}

uint64_t llvm::Type::getX86_MMXPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1840), a2);
}

uint64_t llvm::Type::getX86_AMXPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1864), a2);
}

uint64_t llvm::Type::getInt1PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1888), a2);
}

uint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1912), a2);
}

uint64_t llvm::Type::getInt32PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)this + 1960), a2);
}

void llvm::IntegerType::getMask(llvm::IntegerType *this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v2;
  unint64_t v3;

  v2 = *((_DWORD *)this + 2);
  *((_DWORD *)a2 + 2) = v2 >> 8;
  if (v2 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
  }
  else
  {
    if (v2 <= 0xFF)
      v3 = 0;
    else
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v2);
    *(_QWORD *)a2 = v3;
  }
}

uint64_t llvm::FunctionType::FunctionType(uint64_t result, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 16) = 0;
  if (a5)
    v5 = 270;
  else
    v5 = 14;
  *(_DWORD *)(result + 8) = v5;
  if (a4)
  {
    v6 = a4;
    v7 = (_QWORD *)(result + 32);
    do
    {
      v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a4 + 1;
  return result;
}

{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 16) = 0;
  if (a5)
    v5 = 270;
  else
    v5 = 14;
  *(_DWORD *)(result + 8) = v5;
  if (a4)
  {
    v6 = a4;
    v7 = (_QWORD *)(result + 32);
    do
    {
      v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a4 + 1;
  return result;
}

unint64_t llvm::FunctionType::get(uint64_t **a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  unint64_t result;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  char v19;
  uint64_t *v20;

  v6 = a2;
  v8 = **a1;
  v18[0] = a1;
  v18[1] = a2;
  v18[2] = a3;
  v19 = a4;
  v20 = 0;
  v9 = sub_1C5434D8C((uint64_t *)(v8 + 2192), (uint64_t)v18, &v20);
  v10 = v20;
  if ((v9 & 1) != 0)
    return *v20;
  v12 = *(_DWORD *)(v8 + 2200);
  v13 = *(_DWORD *)(v8 + 2208);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_15;
  }
  if (v13 + ~v12 - *(_DWORD *)(v8 + 2204) <= v13 >> 3)
  {
LABEL_15:
    sub_1C5435070(v8 + 2192, v13);
    v20 = 0;
    sub_1C5434D8C((uint64_t *)(v8 + 2192), (uint64_t)v18, &v20);
    v10 = v20;
  }
  ++*(_DWORD *)(v8 + 2200);
  if (*v10 != -4096)
    --*(_DWORD *)(v8 + 2204);
  *v10 = 0;
  result = sub_1C484358C(v8 + 2040, 8 * a3 + 32, 3);
  *(_QWORD *)result = *a1;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 16) = 0;
  if (a4)
    v14 = 270;
  else
    v14 = 14;
  *(_DWORD *)(result + 8) = v14;
  if ((_DWORD)a3)
  {
    v15 = a3;
    v16 = (_QWORD *)(result + 32);
    do
    {
      v17 = *v6++;
      *v16++ = v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a3 + 1;
  *v10 = result;
  return result;
}

unint64_t llvm::FunctionType::get(uint64_t **this, llvm::Type *a2)
{
  return llvm::FunctionType::get(this, 0, 0, (int)a2);
}

BOOL llvm::FunctionType::isValidArgumentType(llvm::FunctionType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 8);
  return v2 != 14 && v2 != 7;
}

unint64_t llvm::StructType::get(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  unint64_t *v15;
  char v16;

  v8 = *a1;
  v12[0] = a2;
  v12[1] = a3;
  v13 = a4;
  v14 = 0;
  sub_1C5435438(v8 + 2216, &v14, (uint64_t)v12, (uint64_t)&v15);
  v9 = v15;
  if (!v16)
    return *v15;
  v10 = sub_1C484358C(*a1 + 2040, 32, 3);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 12) = 0;
  *(_DWORD *)(v10 + 28) = 0;
  *(_DWORD *)(v10 + 8) = 1040;
  llvm::StructType::setBody(v10, a2, a3, a4);
  *v9 = v10;
  return v10;
}

unint64_t llvm::StructType::setBody(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;

  if (a4)
    v5 = 768;
  else
    v5 = 256;
  *(_DWORD *)(a1 + 8) |= v5;
  *(_DWORD *)(a1 + 12) = a3;
  if (a3)
  {
    v7 = 8 * a3;
    result = sub_1C484358C(**(_QWORD **)a1 + 2040, 8 * a3, 3);
    v9 = 0;
    do
    {
      *(_QWORD *)(result + v9) = *(_QWORD *)(a2 + v9);
      v9 += 8;
    }
    while (v7 != v9);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t llvm::StructType::containsScalableVectorType(llvm::StructType *this)
{
  uint64_t v1;
  llvm::StructType **v2;
  uint64_t v3;
  int v4;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = (llvm::StructType **)*((_QWORD *)this + 2);
  v3 = 8 * v1;
  while (1)
  {
    v4 = *((unsigned __int8 *)*v2 + 8);
    if (v4 == 16)
      break;
    if (v4 == 19)
      return 1;
LABEL_7:
    ++v2;
    v3 -= 8;
    if (!v3)
      return 0;
  }
  if ((llvm::StructType::containsScalableVectorType(*v2) & 1) == 0)
    goto LABEL_7;
  return 1;
}

uint64_t llvm::StructType::setName(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  size_t v3;
  unsigned __int8 *v4;
  uint64_t **v5;
  size_t *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  size_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  llvm::StringMapImpl *v22;
  uint64_t **v23;
  char v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  llvm::StringMapImpl *v34;
  uint64_t **v35;
  char v36;
  unsigned __int8 *v37;
  size_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  size_t v41;
  uint64_t **v42;
  _QWORD v43[2];
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  size_t v48;
  uint64_t **v49;
  void *v50;
  __int128 v51;
  _QWORD v52[10];

  v3 = a3;
  v4 = a2;
  v5 = (uint64_t **)result;
  v52[8] = *MEMORY[0x1E0C80C00];
  v6 = *(size_t **)(result + 24);
  if (!v6)
  {
    if (!a3)
      return result;
    goto LABEL_21;
  }
  v7 = *v6;
  if (a3 != *v6 || a3 && (result = memcmp(a2, v6 + 2, a3), (_DWORD)result))
  {
    v37 = v4;
    v38 = v3;
    v39 = **v5;
    v8 = *(unsigned int *)(v39 + 2248);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int *)(v39 + 2260);
      v10 = (char *)v6 + v9;
      v11 = 0;
      if (v7)
      {
        v12 = v7;
        v13 = (unsigned __int8 *)v6 + v9;
        do
        {
          v14 = *v13++;
          v11 = 33 * v11 + v14;
          --v12;
        }
        while (v12);
      }
      v15 = v8 - 1;
      v16 = *(_QWORD *)(v39 + 2240);
      v17 = v16 + 8 * v8 + 8;
      v18 = 1;
      v19 = v11;
      while (1)
      {
        v20 = v19 & v15;
        v21 = *(_QWORD **)(v16 + 8 * v20);
        if (v21 != (_QWORD *)-8)
        {
          if (!v21)
            goto LABEL_20;
          if (*(_DWORD *)(v17 + 4 * v20) == v11 && v7 == *v21 && (!v7 || !memcmp(v10, (char *)v21 + v9, v7)))
            break;
        }
        v19 = v18 + v20;
        ++v18;
      }
      *(_QWORD *)(v16 + 8 * (int)v20) = -8;
      *(int32x2_t *)(v39 + 2252) = vadd_s32(*(int32x2_t *)(v39 + 2252), (int32x2_t)0x1FFFFFFFFLL);
    }
LABEL_20:
    v4 = v37;
    v3 = v38;
    if (v38)
    {
LABEL_21:
      v22 = (llvm::StringMapImpl *)(**v5 + 2240);
      v47 = v4;
      v48 = v3;
      v49 = v5;
      v23 = (uint64_t **)sub_1C54358FC(v22, v4, v3, (uint64_t *)&v49);
      if (v24)
      {
        v25 = v23;
      }
      else
      {
        v50 = v52;
        v51 = xmmword_1C64638C0;
        if (v3 >= 0x41)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v3, 1);
          v28 = v50;
          v27 = v51;
        }
        else
        {
          v27 = 0;
          v28 = v52;
        }
        memcpy((char *)v28 + v27, v4, v3);
        v29 = v51 + v3;
        *(_QWORD *)&v51 = v29;
        if ((unint64_t)(v29 + 1) > *((_QWORD *)&v51 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v29 + 1, 1);
          v29 = v51;
        }
        *((_BYTE *)v50 + v29) = 46;
        *(_QWORD *)&v51 = v51 + 1;
        sub_1C613932C((uint64_t)v43, (uint64_t)&v50);
        v30 = (v3 + 1);
        do
        {
          v31 = v51;
          if ((_QWORD)v51 != v30)
          {
            if ((unint64_t)v51 <= v30)
            {
              if (*((_QWORD *)&v51 + 1) < v30)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v30, 1);
                v31 = v51;
              }
              if (v30 != v31)
                bzero((char *)v50 + v31, v30 - v31);
            }
            *(_QWORD *)&v51 = (v3 + 1);
          }
          v32 = **v5;
          v33 = *(unsigned int *)(v32 + 2272);
          *(_DWORD *)(v32 + 2272) = v33 + 1;
          sub_1C5E21910((llvm::raw_ostream *)v43, v33, 0, 0, 0);
          v34 = (llvm::StringMapImpl *)(**v5 + 2240);
          v40 = *(unsigned __int8 **)v46;
          v41 = *(_QWORD *)(v46 + 8);
          v42 = v5;
          v35 = (uint64_t **)sub_1C54358FC(v34, v40, v41, (uint64_t *)&v42);
        }
        while (!v36);
        v25 = v35;
        v43[0] = off_1E81A6E70;
        if (v45 == 1 && v44)
          MEMORY[0x1CAA32F9C](v44, 0x1000C8077774924);
        if (v50 != v52)
          free(v50);
      }
      result = (uint64_t)v5[3];
      if (result)
        result = MEMORY[0x1CAA32FB4](result, 8);
      v26 = *v25;
      goto LABEL_26;
    }
    result = (uint64_t)v5[3];
    if (result)
    {
      result = MEMORY[0x1CAA32FB4](result, 8);
      v26 = 0;
LABEL_26:
      v5[3] = v26;
    }
  }
  return result;
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result += 16;
  return result;
}

unint64_t llvm::StructType::create(_QWORD *a1, unsigned __int8 *a2, size_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_1C484358C(*a1 + 2040, 32, 3);
  v7 = v6;
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = 16;
  *(_QWORD *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  if (a3)
    llvm::StructType::setName(v6, a2, a3);
  return v7;
}

unint64_t llvm::StructType::create(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C484358C(*a1 + 2040, 32, 3);
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = 16;
  *(_QWORD *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  llvm::StructType::setBody(v6, a2, a3, 0);
  return v6;
}

unint64_t llvm::StructType::create(llvm::StructType *this, llvm::LLVMContext *a2)
{
  unint64_t result;

  result = sub_1C484358C(*(_QWORD *)this + 2040, 32, 3);
  *(_QWORD *)result = this;
  *(_DWORD *)(result + 8) = 16;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

unint64_t llvm::StructType::create(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;

  v4 = (_QWORD *)**a1;
  v5 = sub_1C484358C(*v4 + 2040, 32, 3);
  *(_QWORD *)v5 = v4;
  *(_DWORD *)(v5 + 8) = 16;
  *(_QWORD *)(v5 + 20) = 0;
  *(_QWORD *)(v5 + 12) = 0;
  *(_DWORD *)(v5 + 28) = 0;
  llvm::StructType::setBody(v5, (uint64_t)a1, a2, 0);
  return v5;
}

BOOL llvm::StructType::isLayoutIdentical(const void **this, const void **a2)
{
  uint64_t v2;

  if (this == a2)
    return 1;
  if (((*((unsigned __int8 *)this + 9) ^ *((unsigned __int8 *)a2 + 9)) & 2) != 0)
    return 0;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 3))
    return 0;
  return memcmp(this[2], a2[2], 8 * v2) == 0;
}

uint64_t llvm::StructType::getTypeAtIndex(llvm::StructType *this, const llvm::Value *AggregateElement)
{
  char *v2;
  unsigned int *v3;
  unsigned int *v4;
  llvm::StructType *v6;

  if (!AggregateElement || *((_BYTE *)AggregateElement + 16) != 16)
  {
    v6 = this;
    AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
    this = v6;
  }
  v4 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
  v2 = (char *)AggregateElement + 24;
  v3 = v4;
  if (*((_DWORD *)v2 + 2) < 0x41u)
    v3 = (unsigned int *)v2;
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *v3);
}

unsigned __int8 *llvm::StructType::indexValid(llvm::StructType *this, const llvm::Value *a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v7;
  unsigned __int8 *result;
  _QWORD *v9;

  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v4 = v3 & 0xFE;
  v5 = v3;
  if (v4 == 18)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v3 == 19 || v5 != 8205)
    return 0;
  v7 = *((unsigned __int8 *)a2 + 16);
  if (v7 > 0x14)
    return 0;
  if (v4 == 18)
  {
    result = (unsigned __int8 *)llvm::Constant::getSplatValue(a2, 0);
    if (!result)
      return result;
    a2 = (const llvm::Value *)result;
    v7 = result[16];
  }
  if (v7 != 16)
    return 0;
  v9 = (_QWORD *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u)
    v9 = (_QWORD *)*v9;
  return (unsigned __int8 *)(*v9 < (unint64_t)*((unsigned int *)this + 3));
}

uint64_t llvm::StructType::getTypeByName(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 2248);
  if (!(_DWORD)v4)
    return 0;
  v7 = 0;
  if (__n)
  {
    v8 = __n;
    v9 = __s1;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(v3 + 2240);
  v12 = 1;
  v13 = v7;
  while (1)
  {
    v14 = v13 & (v4 - 1);
    v15 = *(_QWORD **)(v11 + 8 * v14);
    if (v15 != (_QWORD *)-8)
    {
      if (!v15)
        return 0;
      if (*(_DWORD *)(v11 + 8 * v4 + 8 + 4 * v14) == v7
        && __n == *v15
        && (!__n || !memcmp(__s1, (char *)v15 + *(unsigned int *)(v3 + 2260), __n)))
      {
        break;
      }
    }
    v13 = v12 + v14;
    ++v12;
  }
  if ((_DWORD)v14 == -1 || (int)v14 == v4)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v11 + 8 * (int)v14) + 8);
}

double llvm::ArrayType::ArrayType(llvm::ArrayType *this, llvm::Type *a2, uint64_t a3)
{
  double result;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *(_QWORD *)&result = 0x100000011;
  *((_QWORD *)this + 1) = 0x100000011;
  return result;
}

{
  double result;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *(_QWORD *)&result = 0x100000011;
  *((_QWORD *)this + 1) = 0x100000011;
  return result;
}

double llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  llvm::ArrayType **v12;
  llvm::ArrayType *v13;
  llvm::Type *v14;
  llvm::ArrayType **v16;
  int v17;
  uint64_t v18;
  int v19;
  llvm::ArrayType *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  llvm::ArrayType *v29;
  llvm::Type *v30;
  llvm::ArrayType **v32;
  int v33;
  BOOL v34;
  unsigned int v36;
  BOOL v38;
  unsigned int v40;
  double result;
  llvm::ArrayType **v43;

  v4 = **(_QWORD **)this;
  v5 = *(_DWORD *)(v4 + 2320);
  v6 = this >> 4;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 2304);
    v8 = (37 * (_DWORD)a2)
       + ~((unint64_t)(37 * (_DWORD)a2) << 32)
       + ((unint64_t)(v6 ^ (this >> 9)) << 32);
    v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    v11 = (v5 - 1) & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
    v12 = (llvm::ArrayType **)(v7 + 24 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 == this && v14 == a2)
      goto LABEL_20;
    v16 = 0;
    v17 = 1;
    while (v13 != (llvm::ArrayType *)-4096 || v14 != (llvm::Type *)-1)
    {
      if (v16)
        v34 = 0;
      else
        v34 = v14 == (llvm::Type *)-2;
      if (v34 && v13 == (llvm::ArrayType *)-8192)
        v16 = v12;
      v36 = v11 + v17++;
      v11 = v36 & (v5 - 1);
      v12 = (llvm::ArrayType **)(v7 + 24 * v11);
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == this && v14 == a2)
        goto LABEL_20;
    }
    if (v16)
      v12 = v16;
  }
  else
  {
    v12 = 0;
  }
  v18 = v4 + 2304;
  v19 = *(_DWORD *)(v4 + 2312);
  if (4 * v19 + 4 >= 3 * v5)
  {
    sub_1C5435BE4(v18, 2 * v5);
    v22 = *(_DWORD *)(v4 + 2320);
    if (v22)
    {
      v23 = *(_QWORD *)(v4 + 2304);
      v24 = (37 * (_DWORD)a2)
          + ~((unint64_t)(37 * (_DWORD)a2) << 32)
          + ((unint64_t)(v6 ^ (this >> 9)) << 32);
      v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
      v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
      v27 = v22 - 1;
      v28 = v27 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
      v12 = (llvm::ArrayType **)(v23 + 24 * v28);
      v29 = *v12;
      v30 = v12[1];
      if (*v12 != this || v30 != a2)
      {
        v32 = 0;
        v33 = 1;
        while (v29 != (llvm::ArrayType *)-4096 || v30 != (llvm::Type *)-1)
        {
          if (v32)
            v38 = 0;
          else
            v38 = v30 == (llvm::Type *)-2;
          if (v38 && v29 == (llvm::ArrayType *)-8192)
            v32 = v12;
          v40 = v28 + v33++;
          v28 = v40 & v27;
          v12 = (llvm::ArrayType **)(v23 + 24 * v28);
          v29 = *v12;
          v30 = v12[1];
          if (*v12 == this && v30 == a2)
            goto LABEL_14;
        }
        if (v32)
          v12 = v32;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else if (v5 + ~v19 - *(_DWORD *)(v4 + 2316) <= v5 >> 3)
  {
    sub_1C5435BE4(v18, v5);
    v43 = 0;
    sub_1C5435B0C(*(_QWORD *)(v4 + 2304), *(_DWORD *)(v4 + 2320), (uint64_t)this, (uint64_t)a2, &v43);
    v12 = v43;
  }
LABEL_14:
  ++*(_DWORD *)(v4 + 2312);
  if (*v12 != (llvm::ArrayType *)-4096 || (llvm::ArrayType *)((char *)v12[1] + 1) != 0)
    --*(_DWORD *)(v4 + 2316);
  *v12 = this;
  v12[1] = a2;
  v12[2] = 0;
LABEL_20:
  if (!v12[2])
  {
    v21 = (llvm::ArrayType *)sub_1C484358C(v4 + 2040, 40, 3);
    *(_QWORD *)v21 = *(_QWORD *)this;
    *((_QWORD *)v21 + 3) = this;
    *((_QWORD *)v21 + 4) = a2;
    *((_QWORD *)v21 + 2) = (char *)v21 + 24;
    *(_QWORD *)&result = 0x100000011;
    *((_QWORD *)v21 + 1) = 0x100000011;
    v12[2] = v21;
  }
  return result;
}

BOOL llvm::ArrayType::isValidElementType(llvm::ArrayType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 8u || ((0xB7u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 19;
}

uint64_t llvm::VectorType::VectorType(uint64_t result, _QWORD *a2, int a3, unsigned __int8 a4)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = 1;
  return result;
}

{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = 1;
  return result;
}

double llvm::VectorType::get(llvm::FixedVectorType *this, llvm::Type *a2)
{
  if ((unint64_t)a2 >> 32 == 1)
    return llvm::ScalableVectorType::get((uint64_t **)this, a2);
  else
    return llvm::FixedVectorType::get(this, a2);
}

double llvm::FixedVectorType::get(llvm::FixedVectorType *this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  llvm::FixedVectorType *v15;
  BOOL v17;
  unsigned int v18;
  uint64_t v20;
  unint64_t v21;
  double result;
  llvm::FixedVectorType *v24;
  uint64_t v25;

  v2 = (int)a2;
  v4 = **(_QWORD **)this;
  v24 = this;
  v25 = a2;
  v5 = *(_DWORD *)(v4 + 2344);
  if (v5)
  {
    v6 = 0;
    v8 = ~((unint64_t)(37 * (_DWORD)a2) << 32)
       + (37 * (_DWORD)a2)
       + ((unint64_t)((this >> 4) ^ (this >> 9)) << 32);
    v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    v11 = v5 - 1;
    v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
    for (i = 1; ; ++i)
    {
      v7 = *(_QWORD *)(v4 + 2328);
      v14 = v7 + 24 * v12;
      v15 = *(llvm::FixedVectorType **)v14;
      if (*(llvm::FixedVectorType **)v14 == this && *(_DWORD *)(v14 + 8) == (_DWORD)a2 && *(_DWORD *)(v14 + 12) == 0)
      {
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
        return result;
      }
      if (v15 == (llvm::FixedVectorType *)-4096)
        break;
      if (v15 != (llvm::FixedVectorType *)-8192)
        goto LABEL_13;
      v17 = *(_DWORD *)(v14 + 8) == -2 && *(_DWORD *)(v14 + 12) == 0;
LABEL_14:
      if (v17 && v6 == 0)
        v6 = v7 + 24 * v12;
      v18 = v12 + i;
      v12 = v18 & v11;
    }
    if (*(_DWORD *)(v14 + 8) == -1 && *(_DWORD *)(v14 + 12) == 1)
    {
      if (v6)
        v20 = v6;
      else
        v20 = v7 + 24 * v12;
      goto LABEL_25;
    }
LABEL_13:
    v17 = 0;
    goto LABEL_14;
  }
  v20 = 0;
LABEL_25:
  v14 = sub_1C5435EF0(v4 + 2328, (uint64_t)&v24, (uint64_t)&v24, v20);
  *(_QWORD *)v14 = v24;
  *(_QWORD *)(v14 + 8) = v25;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_26:
  v21 = sub_1C484358C(v4 + 2040, 40, 3);
  *(_QWORD *)v21 = *(_QWORD *)this;
  *(_QWORD *)(v21 + 24) = this;
  *(_DWORD *)(v21 + 32) = v2;
  *(_QWORD *)(v21 + 16) = v21 + 24;
  *(_QWORD *)&result = 0x100000012;
  *(_QWORD *)(v21 + 8) = 0x100000012;
  *(_QWORD *)(v14 + 16) = v21;
  return result;
}

uint64_t llvm::VectorType::isValidElementType(llvm::VectorType *this, llvm::Type *a2)
{
  return (*((unsigned __int8 *)this + 8) < 0x15u) & (0x10A07Fu >> *((_BYTE *)this + 8));
}

uint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::Type *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  llvm::PointerType *v13;
  int v14;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v22;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  llvm::PointerType *v29;
  llvm::PointerType *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  llvm::PointerType *v37;
  uint64_t v38;
  llvm::PointerType *v39;

  v39 = this;
  v4 = **(_QWORD **)this;
  if (llvm::LLVMContextImpl::getOpaquePointers((llvm::LLVMContextImpl *)v4))
    return llvm::PointerType::get(*(llvm::PointerType **)this, a2);
  if ((_DWORD)a2)
  {
    v37 = this;
    v38 = a2;
    v5 = *(_DWORD *)(v4 + 2392);
    if (v5)
    {
      v6 = *(_QWORD *)(v4 + 2376);
      v7 = ~((unint64_t)(37 * (_DWORD)a2) << 32)
         + (37 * (_DWORD)a2)
         + ((unint64_t)((this >> 4) ^ (this >> 9)) << 32);
      v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
      v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
      v10 = v5 - 1;
      v11 = v10 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
      v12 = v6 + 24 * v11;
      v13 = *(llvm::PointerType **)v12;
      v14 = *(_DWORD *)(v12 + 8);
      if (*(llvm::PointerType **)v12 == this && v14 == (_DWORD)a2)
        goto LABEL_9;
      v18 = 0;
      v19 = 1;
      while (v13 != (llvm::PointerType *)-4096 || v14 != -1)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v14 == -2;
        if (v20 && v13 == (llvm::PointerType *)-8192)
          v18 = v12;
        v22 = v11 + v19++;
        v11 = v22 & v10;
        v12 = v6 + 24 * v11;
        v13 = *(llvm::PointerType **)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (*(llvm::PointerType **)v12 == this && v14 == (_DWORD)a2)
          goto LABEL_9;
      }
      if (v18)
        v31 = v18;
      else
        v31 = v12;
    }
    else
    {
      v31 = 0;
    }
    v12 = sub_1C54365CC(v4 + 2376, (uint64_t)&v37, (uint64_t)&v37, v31);
    *(_QWORD *)v12 = v37;
    *(_DWORD *)(v12 + 8) = v38;
    *(_QWORD *)(v12 + 16) = 0;
LABEL_9:
    v16 = (uint64_t *)(v12 + 16);
    goto LABEL_10;
  }
  v24 = *(_DWORD *)(v4 + 2368);
  if (!v24)
  {
    v36 = 0;
LABEL_47:
    v28 = sub_1C543632C(v4 + 2352, (uint64_t)&v39, (uint64_t *)&v39, v36);
    *v28 = v39;
    v28[1] = 0;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v4 + 2352);
  v26 = v24 - 1;
  v27 = v26 & ((this >> 4) ^ (this >> 9));
  v28 = (_QWORD *)(v25 + 16 * v27);
  v29 = (llvm::PointerType *)*v28;
  if ((llvm::PointerType *)*v28 != this)
  {
    v32 = 0;
    v33 = 1;
    while (v29 != (llvm::PointerType *)-4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v29 == (llvm::PointerType *)-8192;
      if (v34)
        v32 = v28;
      v35 = v27 + v33++;
      v27 = v35 & v26;
      v28 = (_QWORD *)(v25 + 16 * v27);
      v29 = (llvm::PointerType *)*v28;
      if ((llvm::PointerType *)*v28 == this)
        goto LABEL_30;
    }
    if (v32)
      v36 = v32;
    else
      v36 = v28;
    goto LABEL_47;
  }
LABEL_30:
  v16 = v28 + 1;
LABEL_10:
  result = *v16;
  if (!*v16)
  {
    result = sub_1C484358C(v4 + 2040, 32, 3);
    v30 = v39;
    *(_QWORD *)result = *(_QWORD *)v39;
    *(_QWORD *)(result + 24) = v30;
    *(_QWORD *)(result + 16) = result + 24;
    *(_DWORD *)(result + 8) = ((_DWORD)a2 << 8) | 0xF;
    *(_DWORD *)(result + 12) = 1;
    *v16 = result;
  }
  return result;
}

uint64_t llvm::PointerType::PointerType(uint64_t this, llvm::Type *a2, int a3)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

{
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

uint64_t llvm::PointerType::PointerType(uint64_t this, llvm::LLVMContext *a2, int a3)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  return this;
}

BOOL llvm::PointerType::isValidElementType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 6u || ((0x27u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

BOOL llvm::PointerType::isLoadableOrStorableType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 2);
  if ((v2 - 7) < 6u && ((0x27u >> (v2 - 7)) & 1) != 0)
    return 0;
  v3 = *((_DWORD *)this + 2);
  return v3 != 11 && v3 != 14;
}

uint64_t llvm::TargetExtType::getLayoutType(llvm::TargetExtType *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  int v4;
  BOOL v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 4) >= 6uLL
    && ((v2 = (int *)*((_QWORD *)this + 3), v3 = *v2, v4 = *((unsigned __int16 *)v2 + 2), v3 == 1919512691)
      ? (v5 = v4 == 11894)
      : (v5 = 0),
        v5))
  {
    return llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v1 + 1912), 0);
  }
  else
  {
    return *(_QWORD *)v1 + 1576;
  }
}

uint64_t sub_1C5434D8C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t *v16;
  int v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  _BYTE v24[17];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C4F5AB38(*(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 8) + 8 * *(_QWORD *)(a2 + 16));
    v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v8 & 1) == 0)
    {
      v21 = v7;
      v22 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v7 = v21;
      if (v22)
      {
        v23 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v23 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v23;
        __cxa_guard_release(&qword_1ED7EAC88);
        v7 = v21;
      }
    }
    *(_QWORD *)v24 = *(_QWORD *)a2;
    *(_QWORD *)&v24[8] = v7;
    v24[16] = *(_BYTE *)(a2 + 24);
    v9 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)a2 - v7, 43)
       - 0x3C5A37A36834CED9 * *(_QWORD *)&v24[1]
       + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v24[9]) ^ qword_1ED7EAC80, 30);
    v10 = __ROR8__(v7 ^ 0xC949D7C7509E6557, 20)
        + qword_1ED7EAC80
        - 0x4B6D499041670D8DLL * *(_QWORD *)a2
        - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v24[9]
        + 17;
    v11 = 0x9DDFEA08EB382D69
        * (v10 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v10)));
    v12 = v4 - 1;
    v13 = (-348639895 * ((v11 >> 47) ^ v11)) & (v4 - 1);
    v14 = (uint64_t *)(v6 + 8 * v13);
    if (sub_1C5434FF0(a2, *v14))
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (*v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = *v14 == -8192;
        if (v18)
          v16 = v14;
        v19 = v17 + 1;
        v13 = (v13 + v17) & v12;
        v14 = (uint64_t *)(v6 + 8 * v13);
        v20 = sub_1C5434FF0(a2, *v14);
        result = 1;
        v17 = v19;
        if (v20)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v14 = v16;
    }
  }
  else
  {
    v14 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v14;
  return result;
}

BOOL sub_1C5434FF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  const void *v5;
  uint64_t v6;
  BOOL v7;
  int64_t v8;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v4 = *(uint64_t **)(a2 + 16);
  v6 = *v4;
  v5 = v4 + 1;
  v7 = *(_QWORD *)a1 == v6 && *(_BYTE *)(a1 + 24) == *(_DWORD *)(a2 + 8) > 0xFFu;
  if (v7 && (v8 = 8 * *(unsigned int *)(a2 + 12) - 8, *(_QWORD *)(a1 + 16) == v8 >> 3))
    return memcmp(*(const void **)(a1 + 8), v5, v8) == 0;
  else
    return 0;
}

_QWORD *sub_1C5435070(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5435128(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5435128(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C54351CC((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C54351CC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C5435284(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v15 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_11;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a3 = v10;
  return result;
}

unint64_t sub_1C5435284(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v16[17];

  v1 = *(uint64_t **)(a1 + 16);
  v2 = *v1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = sub_1C4F5AB38(v1 + 1, (uint64_t)&v1[*(unsigned int *)(a1 + 12)]);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v15 = v4;
    v12 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v13 = v12;
    v4 = v15;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v14;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v4 = v15;
    }
  }
  v7 = v6[400];
  *(_QWORD *)v16 = v2;
  *(_QWORD *)&v16[8] = v4;
  v16[16] = v3 > 0xFF;
  v8 = __ROR8__(0xB492B66FBE98F273 * v2 - v4, 43)
     - 0x3C5A37A36834CED9 * *(_QWORD *)&v16[1]
     + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v16[9]) ^ v7, 30);
  v9 = 0xB492B66FBE98F273 * v2
     + __ROR8__(v4 ^ 0xC949D7C7509E6557, 20)
     + v7
     - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v16[9]
     + 17;
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v9)));
  return -348639895 * ((v10 >> 47) ^ v10);
}

uint64_t sub_1C5435438@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C54354C4((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C543573C(a1, (uint64_t)a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C54354C4(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t *v17;
  unint64_t v18;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v18 = sub_1C4F5AB38(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
    v7 = v4 - 1;
    v8 = (v4 - 1) & sub_1C5435634(&v18, (_BYTE *)(a2 + 16));
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C54355CC(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v15 = sub_1C54355CC(a2, *v9);
        v11 = v17;
        v16 = v15;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL sub_1C54355CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*(_BYTE *)(a1 + 16) == ((*(_DWORD *)(a2 + 8) >> 9) & 1))
  {
    v3 = *(unsigned int *)(a2 + 12);
    if (*(_QWORD *)(a1 + 8) == v3)
      return memcmp(*(const void **)a1, *(const void **)(a2 + 16), 8 * v3) == 0;
  }
  return 0;
}

unint64_t sub_1C5435634(_QWORD *a1, _BYTE *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _OWORD __src[4];
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(__src, 0, sizeof(__src));
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v3 = &unk_1ED7EA000;
  if ((v2 & 1) == 0)
  {
    v8 = a2;
    v9 = a1;
    v5 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v3 = &unk_1ED7EA000;
    v6 = v5;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v7;
      __cxa_guard_release(&qword_1ED7EAC88);
      v3 = (_QWORD *)&unk_1ED7EA000;
      a2 = v8;
      a1 = v9;
    }
  }
  v13 = v3[400];
  *(_QWORD *)&__src[0] = *a1;
  BYTE8(__src[0]) = *a2;
  return sub_1C4E37BA0((char *)__src, 0, (char *)((unint64_t)__src | 9), (char *)v11);
}

uint64_t *sub_1C543573C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C54357EC(a1, v7);
    v9 = 0;
    sub_1C54354C4((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C54357EC(unint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6248280(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C54358A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4[8];
  unint64_t v5;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 12);
  v4[0] = (*(_DWORD *)(a1 + 8) & 0x200) != 0;
  v5 = sub_1C4F5AB38(v2, (uint64_t)&v2[v3]);
  return sub_1C5435634(&v5, v4);
}

_QWORD *sub_1C54358FC(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, uint64_t *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *i;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v28;
  uint64_t *v29;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *(_QWORD *)a1 = v28;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v29 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_17:
  i = (_QWORD *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v22 = operator new(__n + 17, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = (char *)(v22 + 2);
  if (__n)
    memcpy(v22 + 2, a2, __n);
  v24[__n] = 0;
  v25 = *v29;
  *v23 = __n;
  v23[1] = v25;
  *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C5435B0C(uint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(result + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16 && v11 == -8192)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_QWORD *)(result + 24 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_11;
      }
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_11:
  *a5 = v10;
  return result;
}

_OWORD *sub_1C5435BE4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5435CAC(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C8651090;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5435CAC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C8651090;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v15 = 0;
      result = sub_1C5435B0C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
      v13 = v15;
      v14 = a2[1];
      *v15 = *a2;
      v13[1] = v14;
      v13[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

_QWORD *sub_1C5435D6C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5435DD4(a1, (uint64_t)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = (_QWORD *)sub_1C5435EF0((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v7);
    *v5 = *a2;
    v5[1] = a2[1];
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1C5435DD4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  BOOL v18;
  unsigned int v19;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    v14 = 0;
    result = 0;
    goto LABEL_10;
  }
  v4 = 0;
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 12);
  v8 = ((37 * v6 - (v7 == 1)) | ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32))
     + ~((unint64_t)(37 * v6 - (v7 == 1)) << 32);
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = v3 - 1;
  v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
  for (i = 1; ; ++i)
  {
    v14 = (uint64_t *)(v5 + 24 * v12);
    v15 = *v14;
    if (*(_QWORD *)a2 == *v14 && v6 == *((_DWORD *)v14 + 2) && v7 == *((_DWORD *)v14 + 3))
    {
      result = 1;
      goto LABEL_10;
    }
    if (v15 == -4096)
      break;
    if (v15 != -8192)
      goto LABEL_13;
    v18 = *((_DWORD *)v14 + 2) == -2 && *((_DWORD *)v14 + 3) == 0;
LABEL_14:
    if (v18 && v4 == 0)
      v4 = (uint64_t *)(v5 + 24 * v12);
    v19 = v12 + i;
    v12 = v19 & v11;
  }
  if (*((_DWORD *)v14 + 2) != -1 || *((_DWORD *)v14 + 3) != 1)
  {
LABEL_13:
    v18 = 0;
    goto LABEL_14;
  }
  result = 0;
  if (v4)
    v14 = v4;
LABEL_10:
  *a3 = v14;
  return result;
}

uint64_t sub_1C5435EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  BOOL v21;
  unsigned int v22;
  uint64_t v25;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C54360C8(a1, 2 * v7);
    v9 = *(_DWORD *)(a1 + 16);
    if (!v9)
    {
      a4 = 0;
      goto LABEL_4;
    }
    v10 = 0;
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_DWORD *)(a3 + 12);
    v13 = ((37 * v11 - (v12 == 1)) | ((unint64_t)((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) << 32))
        + ~((unint64_t)(37 * v11 - (v12 == 1)) << 32);
    v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
    v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
    v16 = v9 - 1;
    v17 = v16 & (((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27)));
    for (i = 1; ; ++i)
    {
      a4 = *(_QWORD *)a1 + 24 * v17;
      v19 = *(_QWORD *)a4;
      if (*(_QWORD *)a3 == *(_QWORD *)a4 && v11 == *(_DWORD *)(a4 + 8) && v12 == *(_DWORD *)(a4 + 12))
        goto LABEL_4;
      if (v19 == -4096)
        break;
      if (v19 != -8192)
        goto LABEL_17;
      v21 = *(_DWORD *)(a4 + 8) == -2 && *(_DWORD *)(a4 + 12) == 0;
LABEL_18:
      if (v21 && v10 == 0)
        v10 = *(_QWORD *)a1 + 24 * v17;
      v22 = v17 + i;
      v17 = v22 & v16;
    }
    if (*(_DWORD *)(a4 + 8) == -1 && *(_DWORD *)(a4 + 12) == 1)
    {
      if (v10)
        a4 = v10;
      goto LABEL_4;
    }
LABEL_17:
    v21 = 0;
    goto LABEL_18;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C54360C8(a1, v7);
    v25 = 0;
    sub_1C5435DD4((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1 || *(_DWORD *)(a4 + 12) != 1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C54360C8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5436190(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C86510A0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5436190(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v20;
  unsigned int v21;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_OWORD **)result;
    v5 = 24 * v3;
    do
    {
      *v4 = xmmword_1C86510A0;
      v4 = (_OWORD *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    v6 = *a2;
    if (*a2 == -4096)
    {
      v7 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      if (v7 != -1 || v8 != 1)
        goto LABEL_8;
    }
    else
    {
      if (v6 != -8192)
      {
        v7 = *((_DWORD *)a2 + 2);
        v8 = *((_DWORD *)a2 + 3);
LABEL_8:
        v9 = 0;
        v10 = ((37 * v7 - (v8 == 1)) | ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32))
            + ~((unint64_t)(37 * v7 - (v8 == 1)) << 32);
        v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
        v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
        v13 = *(_DWORD *)(result + 16) - 1;
        v14 = v13 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
        v15 = 1;
LABEL_9:
        v16 = *(_QWORD *)result + 24 * v14;
        v17 = *(_QWORD *)v16;
        if (v6 == *(_QWORD *)v16 && v7 == *(_DWORD *)(v16 + 8) && v8 == *(_DWORD *)(v16 + 12))
        {
LABEL_15:
          *(_QWORD *)v16 = v6;
          *(_QWORD *)(v16 + 8) = a2[1];
          *(_QWORD *)(v16 + 16) = a2[2];
          ++*(_DWORD *)(result + 8);
          continue;
        }
        if (v17 == -4096)
        {
          if (*(_DWORD *)(v16 + 8) == -1 && *(_DWORD *)(v16 + 12) == 1)
          {
            if (v9)
              v16 = v9;
            goto LABEL_15;
          }
LABEL_25:
          v20 = 0;
        }
        else
        {
          if (v17 != -8192)
            goto LABEL_25;
          v20 = *(_DWORD *)(v16 + 8) == -2 && *(_DWORD *)(v16 + 12) == 0;
        }
        if (v20 && v9 == 0)
          v9 = *(_QWORD *)result + 24 * v14;
        v21 = v14 + v15++;
        v14 = v21 & v13;
        goto LABEL_9;
      }
      v7 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      if (v7 != -2 || v8 != 0)
        goto LABEL_8;
    }
  }
  return result;
}

_QWORD *sub_1C543632C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4ECA920(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4ECA920(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C543645C(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C54364C8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C54365CC((uint64_t)a1, a2, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1C54364C8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -2;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

uint64_t sub_1C54365CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v24;
  uint64_t v26;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5436778(a1, 2 * v7);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(_DWORD *)(a3 + 8);
      v12 = ~((unint64_t)(37 * v11) << 32)
          + (37 * v11)
          + ((unint64_t)((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) << 32);
      v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
      v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
      v15 = v10 - 1;
      v16 = v15 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
      a4 = *(_QWORD *)a1 + 24 * v16;
      v17 = *(_QWORD *)a4;
      v18 = *(_DWORD *)(a4 + 8);
      if (*(_QWORD *)a3 != *(_QWORD *)a4 || v11 != v18)
      {
        v20 = 0;
        v21 = 1;
        while (v17 != -4096 || v18 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v18 == -2;
          if (v22 && v17 == -8192)
            v20 = a4;
          v24 = v16 + v21++;
          v16 = v24 & v15;
          a4 = *(_QWORD *)a1 + 24 * v16;
          v17 = *(_QWORD *)a4;
          v18 = *(_DWORD *)(a4 + 8);
          if (*(_QWORD *)a3 == *(_QWORD *)a4 && v11 == v18)
            goto LABEL_4;
        }
        if (v20)
          a4 = v20;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C5436778(a1, v7);
    v26 = 0;
    sub_1C54364C8((uint64_t *)a1, a3, &v26);
    a4 = v26;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C5436778(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5436840(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5436840(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v24;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_OWORD **)result;
    v5 = 24 * v3;
    do
    {
      *v4 = xmmword_1C85F22C0;
      v4 = (_OWORD *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 2);
    if ((*a2 != -4096 || v7 != -1) && (v6 != -8192 || v7 != -2))
    {
      v10 = ~((unint64_t)(37 * v7) << 32)
          + (37 * v7)
          + ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
      v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      v13 = ((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27));
      v14 = *(_DWORD *)(result + 16) - 1;
      v15 = v14 & v13;
      v16 = *(_QWORD *)result + 24 * v15;
      v17 = *(_QWORD *)v16;
      v18 = *(_DWORD *)(v16 + 8);
      if (v6 != *(_QWORD *)v16 || v7 != v18)
      {
        v20 = 0;
        v21 = 1;
        while (v17 != -4096 || v18 != -1)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v18 == -2;
          if (v22 && v17 == -8192)
            v20 = v16;
          v24 = v15 + v21++;
          v15 = v24 & v14;
          v16 = *(_QWORD *)result + 24 * (v24 & v14);
          v17 = *(_QWORD *)v16;
          v18 = *(_DWORD *)(v16 + 8);
          if (v6 == *(_QWORD *)v16 && v7 == v18)
            goto LABEL_18;
        }
        if (v20)
          v16 = v20;
      }
LABEL_18:
      *(_QWORD *)v16 = v6;
      *(_DWORD *)(v16 + 8) = v7;
      *(_QWORD *)(v16 + 16) = a2[2];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

BOOL sub_1C543699C(uint64_t a1, uint64_t a2)
{
  size_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8)
    && (!v2 || !memcmp(*(const void **)a1, *(const void **)a2, v2))
    && (v5 = *(_QWORD *)(a1 + 24), v5 == *(_QWORD *)(a2 + 24))
    && !memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v5)
    && (v6 = *(_QWORD *)(a1 + 40), v6 == *(_QWORD *)(a2 + 40)))
  {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * v6) == 0;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1C5436A34(unint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C624883C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::TypedPointerType::TypedPointerType(uint64_t this, llvm::Type *a2, int a3)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0x14;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

{
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0x14;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

BOOL llvm::TypedPointerType::isValidElementType(llvm::TypedPointerType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 6u || ((0x27u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

_OWORD *sub_1C5436B74(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6248B88(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void llvm::TypeFinder::run(llvm::TypeFinder *this, const llvm::Module *a2, char a3)
{
  char *v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *j;
  _QWORD *v9;
  const llvm::Value *v10;
  _QWORD *k;
  _QWORD *v12;
  const llvm::Module *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const llvm::Value **v17;
  uint64_t v18;
  const llvm::Value *v19;
  uint64_t v20;
  const llvm::Value *v21;
  const llvm::Value *v22;
  const llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v40;
  const llvm::MDNode **v41;
  const llvm::MDNode *v42;
  _QWORD *m;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const llvm::Module *v47;
  const llvm::Module *v48;
  const llvm::Module *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[9];

  v52[8] = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 120) = a3;
  v5 = (char *)a2 + 8;
  for (i = *((_QWORD *)a2 + 2); (char *)i != v5; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v7 = i - 56;
    else
      v7 = 0;
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v7 + 24));
    if (i && *(_BYTE *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_13;
    }
    else if (*(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 72) != v7 + 72 || (*(_BYTE *)(v7 + 34) & 0x80) != 0)
    {
LABEL_13:
      llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v7 - 32));
      continue;
    }
  }
  for (j = (_QWORD *)*((_QWORD *)a2 + 6); j != (_QWORD *)((char *)a2 + 40); j = (_QWORD *)j[1])
  {
    if (j)
      v9 = j - 6;
    else
      v9 = 0;
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v9[3]);
    v10 = (const llvm::Value *)*(v9 - 4);
    if (v10)
      llvm::TypeFinder::incorporateValue(this, v10);
  }
  for (k = (_QWORD *)*((_QWORD *)a2 + 8); k != (_QWORD *)((char *)a2 + 56); k = (_QWORD *)k[1])
  {
    v12 = k - 7;
    if (!k)
      v12 = 0;
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v12[3]);
  }
  v50 = v52;
  v51 = 0x400000000;
  v47 = a2;
  v48 = (const llvm::Module *)((char *)a2 + 24);
  v13 = (const llvm::Module *)*((_QWORD *)a2 + 4);
  if (v13 != (const llvm::Module *)((char *)a2 + 24))
  {
    do
    {
      if (v13)
        v14 = (uint64_t)v13 - 56;
      else
        v14 = 0;
      llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v14 + 24));
      llvm::TypeFinder::incorporateAttributes((uint64_t)this, *(_QWORD *)(v14 + 112));
      v15 = *(_DWORD *)(v14 + 20);
      v49 = v13;
      if ((v15 & 0x40000000) != 0)
      {
        v17 = *(const llvm::Value ***)(v14 - 8);
        v16 = v15 & 0x7FFFFFF;
        if (v16)
        {
LABEL_36:
          v18 = 32 * v16;
          do
          {
            v19 = *v17;
            v17 += 4;
            llvm::TypeFinder::incorporateValue(this, v19);
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v16 = v15 & 0x7FFFFFF;
        v17 = (const llvm::Value **)(v14 - 32 * v16);
        if (v16)
          goto LABEL_36;
      }
      v20 = sub_1C485F330(v14);
      if ((const llvm::Value *)v20 != v21)
      {
        v22 = (const llvm::Value *)v20;
        v23 = v21;
        do
        {
          llvm::TypeFinder::incorporateValue(this, v22);
          v22 = (const llvm::Value *)((char *)v22 + 40);
        }
        while (v22 != v23);
      }
      v24 = v14 + 72;
      v25 = *(_QWORD *)(v14 + 80);
      while (2)
      {
        if (v25 != v24)
        {
          v26 = v25 - 24;
          if (!v25)
            v26 = 0;
          v27 = v26 + 40;
          v28 = *(_QWORD *)(v26 + 48);
LABEL_46:
          if (v28 == v27)
          {
            v25 = *(_QWORD *)(v25 + 8);
            continue;
          }
          if (v28)
            v29 = v28 - 24;
          else
            v29 = 0;
          llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v29);
          v30 = *(_DWORD *)(v29 + 20);
          if ((v30 & 0x40000000) != 0)
          {
            v32 = *(unsigned __int8 ***)(v29 - 8);
            v31 = v30 & 0x7FFFFFF;
            if (!v31)
              goto LABEL_59;
          }
          else
          {
            v31 = v30 & 0x7FFFFFF;
            v32 = (unsigned __int8 **)(v29 - 32 * v31);
            if (!v31)
            {
LABEL_59:
              v35 = *(unsigned __int8 *)(v29 + 16);
              if (v28 && v35 == 62)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                v35 = *(unsigned __int8 *)(v29 + 16);
              }
              if (v28 && v35 == 59)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                v35 = *(unsigned __int8 *)(v29 + 16);
              }
              v36 = v35 - 33;
              v37 = v36 > 0x33;
              v38 = (1 << v36) & 0x8000000000041;
              if (!v37 && v38 != 0)
                llvm::TypeFinder::incorporateAttributes((uint64_t)this, *(_QWORD *)(v28 + 40));
              llvm::Value::getAllMetadata((_BYTE *)v29, (uint64_t)&v50);
              if ((_DWORD)v51)
              {
                v40 = 16 * v51;
                v41 = (const llvm::MDNode **)((char *)v50 + 8);
                do
                {
                  v42 = *v41;
                  v41 += 2;
                  llvm::TypeFinder::incorporateMDNode(this, v42);
                  v40 -= 16;
                }
                while (v40);
              }
              LODWORD(v51) = 0;
              v28 = *(_QWORD *)(v28 + 8);
              goto LABEL_46;
            }
          }
          v33 = 32 * v31;
          do
          {
            v34 = *v32;
            if (*v32 && v34[16] <= 0x1Bu)
              llvm::TypeFinder::incorporateValue(this, (const llvm::Value *)v34);
            v32 += 4;
            v33 -= 32;
          }
          while (v33);
          goto LABEL_59;
        }
        break;
      }
      v13 = (const llvm::Module *)*((_QWORD *)v49 + 1);
    }
    while (v13 != v48);
  }
  for (m = (_QWORD *)*((_QWORD *)v47 + 10); m != (_QWORD *)((char *)v47 + 72); m = (_QWORD *)m[1])
  {
    v44 = *(unsigned int *)(m[6] + 8);
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = 8 * v44;
      do
      {
        llvm::TypeFinder::incorporateMDNode(this, *(const llvm::MDNode **)(*(_QWORD *)m[6] + v45));
        v45 += 8;
      }
      while (v46 != v45);
    }
  }
  if (v50 != v52)
    free(v50);
}

void llvm::TypeFinder::incorporateType(llvm::TypeFinder *this, llvm::Type *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  unsigned int v8;
  llvm::Type **v9;
  llvm::Type *v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Type *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v48 = a2;
  v5 = (char *)this + 72;
  v4 = *((_QWORD *)this + 9);
  v6 = *((_DWORD *)this + 22);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (llvm::Type **)(v4 + 8 * v8);
    v10 = *v9;
    if (*v9 == a2)
      return;
    v11 = 0;
    v12 = 1;
    while (v10 != (llvm::Type *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (llvm::Type *)-8192;
      if (v13)
        v11 = (uint64_t *)v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (llvm::Type **)(v4 + 8 * v8);
      v10 = *v9;
      if (*v9 == a2)
        return;
    }
    if (v11)
      v15 = v11;
    else
      v15 = (uint64_t *)v9;
  }
  else
  {
    v15 = 0;
  }
  *sub_1C5437984((uint64_t)this + 72, (uint64_t *)&v48, v15) = (uint64_t)a2;
  v49 = v52;
  v51 = 4;
  v52[0] = a2;
  v16 = 1;
  do
  {
    v17 = *((_QWORD *)v49 + v16 - 1);
    v50 = v16 - 1;
    v48 = (llvm::Type *)v17;
    if (v17)
      v18 = *(_BYTE *)(v17 + 8) == 16;
    else
      v18 = 0;
    if (v18 && (!*((_BYTE *)this + 120) || *(_QWORD *)(v17 + 24)))
    {
      v20 = (uint64_t *)*((_QWORD *)this + 13);
      v19 = *((_QWORD *)this + 14);
      if ((unint64_t)v20 >= v19)
      {
        v22 = (_QWORD *)*((_QWORD *)this + 12);
        v23 = v20 - v22;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          abort();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 >> 61)
            sub_1C4764EE4();
          v27 = (char *)operator new(8 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = (uint64_t *)&v27[8 * v23];
        *v28 = v17;
        v21 = v28 + 1;
        if (v20 != v22)
        {
          do
          {
            v29 = *--v20;
            *--v28 = v29;
          }
          while (v20 != v22);
          v20 = (uint64_t *)*((_QWORD *)this + 12);
        }
        *((_QWORD *)this + 12) = v28;
        *((_QWORD *)this + 13) = v21;
        *((_QWORD *)this + 14) = &v27[8 * v26];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v20 = v17;
        v21 = v20 + 1;
      }
      *((_QWORD *)this + 13) = v21;
      v17 = (uint64_t)v48;
    }
    v30 = *(unsigned int *)(v17 + 12);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD *)(v17 + 16);
      v32 = v31 + 8 * v30;
      while (1)
      {
        v34 = *(_QWORD *)(v32 - 8);
        v32 -= 8;
        v33 = v34;
        v47 = v34;
        v35 = *((_DWORD *)this + 22);
        if (!v35)
          break;
        v36 = *((_QWORD *)this + 9);
        v37 = v35 - 1;
        v38 = ((v33 >> 4) ^ (v33 >> 9)) & v37;
        v39 = (uint64_t *)(v36 + 8 * v38);
        v40 = *v39;
        if (v33 != *v39)
        {
          v41 = 0;
          v42 = 1;
          while (v40 != -4096)
          {
            if (v41)
              v43 = 0;
            else
              v43 = v40 == -8192;
            if (v43)
              v41 = v39;
            v44 = v38 + v42++;
            v38 = v44 & v37;
            v39 = (uint64_t *)(v36 + 8 * v38);
            v40 = *v39;
            if (v33 == *v39)
              goto LABEL_60;
          }
          if (v41)
            v45 = v41;
          else
            v45 = v39;
          goto LABEL_57;
        }
LABEL_60:
        if (v32 == v31)
          goto LABEL_63;
      }
      v45 = 0;
LABEL_57:
      *sub_1C5437984((uint64_t)v5, &v47, v45) = v33;
      v46 = v50;
      if (v50 >= (unint64_t)v51)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v52, v50 + 1, 8);
        v46 = v50;
      }
      *((_QWORD *)v49 + v46) = v33;
      ++v50;
      goto LABEL_60;
    }
LABEL_63:
    v16 = v50;
  }
  while (v50);
  if (v49 != v52)
    free(v49);
}

void llvm::TypeFinder::incorporateValue(llvm::TypeFinder *this, const llvm::Value *a2)
{
  int v3;
  const llvm::MDNode *v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  const llvm::Value **v10;
  const llvm::Value *v11;
  const llvm::Value **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  const llvm::Value **v16;
  _QWORD *v17;
  const llvm::Value *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const llvm::Value **v22;
  uint64_t v23;
  const llvm::Value *v24;
  const llvm::Value *v25;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 23)
  {
    while (1)
    {
      v4 = (const llvm::MDNode *)*((_QWORD *)a2 + 3);
      v5 = *(unsigned __int8 *)v4;
      if ((v5 - 4) <= 0x1E)
        break;
      if ((v5 - 3) < 0xFFFFFFFE)
        return;
      a2 = (const llvm::Value *)*((_QWORD *)v4 + 16);
      v3 = *((unsigned __int8 *)a2 + 16);
      if (a2)
        v6 = v3 == 23;
      else
        v6 = 0;
      if (!v6)
        goto LABEL_9;
    }
    llvm::TypeFinder::incorporateMDNode(this, v4);
  }
  else
  {
LABEL_9:
    v25 = a2;
    if ((v3 - 21) < 0xFFFFFFEF)
      return;
    v7 = *((_DWORD *)this + 4);
    if (v7)
    {
      v8 = v7 - 1;
      v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (const llvm::Value **)(*(_QWORD *)this + 8 * v9);
      v11 = *v10;
      if (a2 == *v10)
        return;
      v12 = 0;
      v13 = 1;
      while (v11 != (const llvm::Value *)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == (const llvm::Value *)-8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (const llvm::Value **)(*(_QWORD *)this + 8 * v9);
        v11 = *v10;
        if (a2 == *v10)
          return;
      }
      if (v12)
        v16 = v12;
      else
        v16 = v10;
    }
    else
    {
      v16 = 0;
    }
    v17 = sub_1C4E1CBB4((uint64_t)this, (uint64_t)&v25, (uint64_t *)&v25, v16);
    *v17 = v25;
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v25);
    v18 = v25;
    v19 = *((unsigned __int8 *)v25 + 16);
    if (v19 <= 0x1B)
    {
      if (v19 == 5 && *((_WORD *)v25 + 9) == 34)
      {
        llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v25 + 3));
        v18 = v25;
      }
      v20 = *((_DWORD *)v18 + 5);
      if ((v20 & 0x40000000) != 0)
      {
        v22 = (const llvm::Value **)*((_QWORD *)v18 - 1);
        v21 = v20 & 0x7FFFFFF;
      }
      else
      {
        v21 = v20 & 0x7FFFFFF;
        v22 = (const llvm::Value **)((char *)v18 - 32 * v21);
      }
      if (v21)
      {
        v23 = 32 * v21;
        do
        {
          v24 = *v22;
          v22 += 4;
          llvm::TypeFinder::incorporateValue(this, v24);
          v23 -= 32;
        }
        while (v23);
      }
    }
  }
}

void llvm::TypeFinder::incorporateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *ValueAsType;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;

  v2 = a2;
  v5 = a1 + 48;
  v4 = *(_QWORD *)(a1 + 48);
  v17 = 0;
  if ((sub_1C5437C24(v4, *(_DWORD *)(v5 + 16), a2, &v17) & 1) != 0)
    return;
  v6 = *(_DWORD *)(v5 + 16);
  v7 = *(_DWORD *)(a1 + 56);
  if (4 * v7 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_26;
  }
  if (v6 + ~v7 - *(_DWORD *)(a1 + 60) <= v6 >> 3)
  {
LABEL_26:
    sub_1C5437CB8(v5, v6);
    v17 = 0;
    sub_1C5437C24(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v2, &v17);
  }
  v8 = v17;
  ++*(_DWORD *)(a1 + 56);
  if (*v8 != -4)
    --*(_DWORD *)(a1 + 60);
  *v8 = v2;
  if (v2)
    v9 = (_QWORD *)(v2 + 40);
  else
    v9 = 0;
  if (v2)
    v2 += 40 + 8 * *(unsigned int *)(v2 + 8);
  while (v9 != (_QWORD *)v2)
  {
    v10 = *v9;
    if (*v9)
      v11 = (_QWORD *)(*v9 + 48);
    else
      v11 = 0;
    if (v10)
      v12 = *v9 + 48 + 8 * *(unsigned int *)(v10 + 8);
    else
      v12 = 0;
    while (v11 != (_QWORD *)v12)
    {
      v13 = *v11;
      v17 = (uint64_t *)v13;
      if (v13)
      {
        if (*(_BYTE *)(v13 + 8) == 3)
        {
          v15 = v12;
          v16 = v11;
          ValueAsType = (llvm::Type *)llvm::Attribute::getValueAsType((llvm::Attribute *)&v17);
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)a1, ValueAsType);
          v12 = v15;
          v11 = v16;
        }
      }
      ++v11;
    }
    ++v9;
  }
}

_QWORD *llvm::TypeFinder::incorporateMDNode(llvm::TypeFinder *this, const llvm::MDNode *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  const llvm::MDNode **v9;
  const llvm::MDNode *v10;
  const llvm::MDNode **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  const llvm::MDNode **v15;
  const llvm::MDNode *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const llvm::Value **v23;
  int v24;
  const llvm::MDNode *v25;

  v25 = a2;
  v5 = *((_QWORD *)this + 3);
  result = (_QWORD *)((char *)this + 24);
  v4 = v5;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (const llvm::MDNode **)(v4 + 8 * v8);
    v10 = *v9;
    if (*v9 == a2)
      return result;
    v11 = 0;
    v12 = 1;
    while (v10 != (const llvm::MDNode *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (const llvm::MDNode *)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (const llvm::MDNode **)(v4 + 8 * v8);
      v10 = *v9;
      if (*v9 == a2)
        return result;
    }
    if (v11)
      v15 = v11;
    else
      v15 = v9;
  }
  else
  {
    v15 = 0;
  }
  result = sub_1C4A07FEC((uint64_t)result, (uint64_t)&v25, (uint64_t *)&v25, v15);
  *result = v25;
  v16 = v25;
  if (*(_BYTE *)v25 == 32)
  {
    v17 = *((unsigned int *)v25 + 8);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)v25 + 3);
      v19 = 8 * v17;
      do
      {
        v20 = *v18++;
        result = (_QWORD *)llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v20 + 128));
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    v21 = *((unsigned int *)v25 + 2);
    if ((_DWORD)v21)
    {
      v22 = -8 * v21;
      do
      {
        v23 = *(const llvm::Value ***)((char *)v16 + v22);
        if (v23)
        {
          v24 = *(unsigned __int8 *)v23;
          if ((v24 - 4) > 0x1E)
          {
            if (v24 == 1)
              result = (_QWORD *)llvm::TypeFinder::incorporateValue(this, v23[16]);
          }
          else
          {
            result = (_QWORD *)llvm::TypeFinder::incorporateMDNode(this, (const llvm::MDNode *)v23);
          }
        }
        v22 += 8;
      }
      while (v22);
    }
  }
  return result;
}

_QWORD *llvm::TypeFinder::clear(llvm::TypeFinder *this)
{
  _QWORD *result;
  _QWORD *v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1C619D588(this);
  v3 = (_QWORD *)((char *)this + 72);
  v4 = *((_DWORD *)this + 20);
  if (v4)
  {
    v5 = *((_DWORD *)this + 22);
    if (v5 > 4 * v4 && v5 >= 0x41)
    {
      v6 = 1 << (33 - __clz(v4 - 1));
      if (v6 <= 64)
        v7 = 64;
      else
        v7 = v6;
LABEL_10:
      if (v7 == v5)
      {
        *((_QWORD *)this + 10) = 0;
        v8 = 8 * v5;
        v9 = (_QWORD *)*((_QWORD *)this + 9);
        do
        {
          *v9++ = -4096;
          v8 -= 8;
        }
        while (v8);
      }
      else
      {
        result = (_QWORD *)MEMORY[0x1CAA32FB4](*v3, 8);
        if (v7)
        {
          v12 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
          v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
          LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
          *((_DWORD *)this + 22) = v13;
          result = operator new(8 * v13, (std::align_val_t)8uLL);
          *((_QWORD *)this + 9) = result;
          *((_QWORD *)this + 10) = 0;
          v14 = *((unsigned int *)this + 22);
          if ((_DWORD)v14)
          {
            v15 = 8 * v14;
            do
            {
              *result++ = -4096;
              v15 -= 8;
            }
            while (v15);
          }
        }
        else
        {
          *v3 = 0;
          *((_QWORD *)this + 10) = 0;
          *((_DWORD *)this + 22) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 21))
      goto LABEL_18;
    v5 = *((_DWORD *)this + 22);
    if (v5 > 0x40)
    {
      v7 = 0;
      goto LABEL_10;
    }
  }
  if (v5)
  {
    v10 = (_QWORD *)*v3;
    v11 = 8 * v5;
    do
    {
      *v10++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  *((_QWORD *)this + 10) = 0;
LABEL_18:
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  return result;
}

uint64_t sub_1C5437904(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 8 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 8 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C5437984(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C5437AB8(a1, v6);
      v16 = 0;
      sub_1C5437904(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C5437AB8(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 8 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 8 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5437AB8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v22 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *v17 = v15;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        ++v14;
      }
      while (v14 != &v4[v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v23 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    do
    {
      *result++ = -4096;
      v24 -= 8;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C5437C24(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5437CB8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5437D70(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5437D70(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 4) != 0xFFFFFFFFFFFFFFFCLL)
    {
      v10 = 0;
      result = sub_1C5437C24(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t *llvm::Use::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  if (*result != *a2)
  {
    *result = *a2;
    *a2 = v2;
    v3 = result[1];
    result[1] = a2[1];
    a2[1] = v3;
    v4 = result[2];
    result[2] = a2[2];
    a2[2] = v4;
    *(_QWORD *)result[2] = result;
    v5 = result[1];
    if (v5)
      *(_QWORD *)(v5 + 16) = result + 1;
    *(_QWORD *)a2[2] = a2;
    v6 = a2[1];
    if (v6)
      *(_QWORD *)(v6 + 16) = a2 + 1;
  }
  return result;
}

unint64_t llvm::Use::getOperandNo(llvm::Use *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_DWORD *)(v1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(v1 - 8);
  else
    v3 = v1 - 32 * (v2 & 0x7FFFFFF);
  return ((unint64_t)this - v3) >> 5;
}

void llvm::Use::zap(void *this, llvm::Use *a2, const llvm::Use *a3)
{
  llvm::Use *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != this)
  {
    v3 = a2;
    do
    {
      v4 = *((_QWORD *)v3 - 4);
      v3 = (llvm::Use *)((char *)v3 - 32);
      if (v4)
      {
        **((_QWORD **)a2 - 2) = *((_QWORD *)a2 - 3);
        v5 = *((_QWORD *)a2 - 3);
        if (v5)
          *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 - 2);
      }
      a2 = v3;
    }
    while (v3 != this);
  }
  if ((_DWORD)a3)
    operator delete(this);
}

void llvm::User::replaceUsesOfWith(llvm::User *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (a2 != a3)
  {
    v6 = *((_DWORD *)this + 5);
    v7 = v6 & 0x7FFFFFF;
    if ((v6 & 0x7FFFFFF) != 0)
    {
      v8 = 0;
      v9 = (char **)((char *)a3 + 8);
      v10 = 32 * v7;
      do
      {
        v11 = *((_DWORD *)this + 5);
        if ((v11 & 0x40000000) != 0)
          v12 = (char *)*((_QWORD *)this - 1);
        else
          v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
        if (*(llvm::Value **)&v12[v8] == a2)
        {
          v13 = &v12[v8];
          if (a2)
          {
            **((_QWORD **)v13 + 2) = *((_QWORD *)v13 + 1);
            v14 = *((_QWORD *)v13 + 1);
            if (v14)
              *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
          }
          *(_QWORD *)v13 = a3;
          if (a3)
          {
            v15 = *v9;
            v16 = &v12[v8];
            *((_QWORD *)v16 + 1) = *v9;
            if (v15)
              *((_QWORD *)v15 + 2) = v16 + 8;
            *((_QWORD *)v16 + 2) = v9;
            *v9 = v13;
          }
        }
        v8 += 32;
      }
      while (v10 != v8);
    }
    if ((sub_1C53923FC((uint64_t)this) & 1) != 0)
    {
      llvm::DbgVariableIntrinsic::location_ops((uint64_t)this, v22);
      v17 = v22[0];
      while (v17 != v22[1])
      {
        v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
        v19 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v19 = *v18;
        if (*(llvm::Value **)(v19 + 128) == a2)
        {
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp(this, a2, a3);
          return;
        }
        v20 = (unint64_t)(v18 + 1) | 4;
        v21 = v18 + 17;
        if ((v17 & 4) != 0)
          v17 = v20;
        else
          v17 = (uint64_t)v21;
      }
    }
  }
}

_QWORD *llvm::User::allocHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  size_t v5;
  _QWORD *result;
  _QWORD *v7;

  if (a3)
    v5 = 40 * a2;
  else
    v5 = 32 * a2;
  result = operator new(v5);
  *((_QWORD *)this - 1) = result;
  if (a2)
  {
    v7 = &result[4 * a2];
    do
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = this;
      result += 4;
    }
    while (result != v7);
  }
  return result;
}

void llvm::User::growHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x40000000) != 0)
    v8 = (uint64_t *)*((_QWORD *)this - 1);
  else
    v8 = (uint64_t *)((char *)this - 32 * v7);
  if (a3)
    v9 = 40 * a2;
  else
    v9 = 32 * a2;
  v10 = operator new(v9);
  *((_QWORD *)this - 1) = v10;
  if (a2)
  {
    v11 = v10;
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = this;
      v11 += 4;
    }
    while (v11 != &v10[4 * a2]);
  }
  v12 = *((_DWORD *)this + 5);
  if ((v12 & 0x40000000) != 0)
    v13 = (char *)v10;
  else
    v13 = (char *)this - 32 * (v12 & 0x7FFFFFF);
  sub_1C53F5EAC((uint64_t)&v17, v8, &v8[4 * v7], (uint64_t)v13);
  if ((_DWORD)v7 && a3)
  {
    memmove(&v13[32 * a2], &v8[4 * v7], 8 * v7);
  }
  else if (!(_DWORD)v7)
  {
    goto LABEL_22;
  }
  v14 = 4 * v7;
  do
  {
    v15 = &v8[v14];
    if (v8[v14 - 4])
    {
      *(_QWORD *)*(v15 - 2) = *(v15 - 3);
      v16 = *(v15 - 3);
      if (v16)
        *(_QWORD *)(v16 + 16) = *(v15 - 2);
    }
    v14 -= 4;
  }
  while (v14 * 8);
LABEL_22:
  operator delete(v8);
}

char *llvm::User::getDescriptor(llvm::User *this)
{
  char *v1;

  v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  return &v1[-*((_QWORD *)v1 - 1) - 8];
}

{
  char *v1;

  v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  return &v1[-*((_QWORD *)v1 - 1) - 8];
}

BOOL llvm::User::isDroppable(llvm::User *this)
{
  return sub_1C4D9F8B4((uint64_t)this) || sub_1C509DDB0((uint64_t)this);
}

_QWORD *llvm::User::operator new(llvm::User *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = a2;
  v4 = operator new((size_t)this + 32 * a2);
  result = &v4[4 * v3];
  *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
  if (a2)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = result;
      v4 += 4;
    }
    while (v4 != result);
  }
  return result;
}

char *llvm::User::operator new(llvm::User *this, unsigned int a2, unsigned int a3)
{
  char *v4;
  char *result;
  uint64_t v6;
  char *v7;
  char *v8;

  if (a3)
  {
    v6 = a3 + 8;
    v7 = (char *)operator new((size_t)this + 32 * a2 + v6);
    v8 = &v7[v6];
    result = &v7[32 * a2 + v6];
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF | 0x80000000;
    if (a2)
    {
      do
      {
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        *((_QWORD *)v8 + 3) = result;
        v8 += 32;
      }
      while (v8 != result);
    }
    *(_QWORD *)&v7[a3] = a3;
  }
  else
  {
    v4 = (char *)operator new((size_t)this + 32 * a2);
    result = &v4[32 * a2];
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
    if (a2)
    {
      do
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = result;
        v4 += 32;
      }
      while (v4 != result);
    }
  }
  return result;
}

_DWORD *llvm::User::operator new(llvm::User *this)
{
  _DWORD *v1;

  v1 = operator new((size_t)this + 8);
  v1[7] = v1[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v1 = 0;
  return v1 + 2;
}

void llvm::User::operator delete(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = a1[5];
  if ((v2 & 0x40000000) != 0)
  {
    v9 = (char *)(a1 - 2);
    v8 = (char *)*((_QWORD *)a1 - 1);
    v10 = v2 & 0x7FFFFFF;
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        v12 = &v8[v11];
        if (*(_QWORD *)&v8[v11 - 32])
        {
          **((_QWORD **)v12 - 2) = *((_QWORD *)v12 - 3);
          v13 = *((_QWORD *)v12 - 3);
          if (v13)
            *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 - 2);
        }
        v11 -= 32;
      }
      while (v11);
    }
    operator delete(v8);
    v4 = v9;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = (char *)&a1[-8 * v3];
    if ((_DWORD)v3)
    {
      v5 = (_QWORD **)(a1 - 4);
      v6 = -32 * v3;
      do
      {
        if (*(v5 - 2))
        {
          **v5 = *(v5 - 1);
          v7 = (uint64_t)*(v5 - 1);
          if (v7)
            *(_QWORD *)(v7 + 16) = *v5;
        }
        v5 -= 4;
        v6 += 32;
      }
      while (v6);
    }
    if (v2 < 0)
      v4 = &v4[-*((_QWORD *)v4 - 1) - 8];
  }
  operator delete(v4);
}

uint64_t llvm::Value::Value(uint64_t this, llvm::Type *a2, char a3)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = a3;
  *(_BYTE *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) &= 0xC0000000;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = a3;
  *(_BYTE *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) &= 0xC0000000;
  return this;
}

void llvm::Value::~Value(llvm::Value *this, llvm::Value *a2)
{
  int v3;
  int32x2_t **v4;
  int32x2_t *v5;
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  unsigned int v9;
  uint64_t v10;
  llvm::Value *v11;
  char *v12;
  uint64_t v13;
  int32x2_t *v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;

  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
  {
    v14 = ***(int32x2_t ****)this;
    v15 = v14[49];
    v16 = v14[51].u32[0];
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((this >> 4) ^ (this >> 9));
      v18 = *(_QWORD *)&v15 + 16 * v17;
      v19 = *(llvm::Value **)v18;
      if (*(llvm::Value **)v18 == this)
        goto LABEL_15;
      v26 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        v27 = v17 + v26++;
        v17 = v27 & (v16 - 1);
        v19 = *(llvm::Value **)(*(_QWORD *)&v15 + 16 * v17);
        if (v19 == this)
        {
          v18 = *(_QWORD *)&v15 + 16 * v17;
          goto LABEL_15;
        }
      }
    }
    v18 = *(_QWORD *)&v15 + 16 * v16;
LABEL_15:
    if (v18 != *(_QWORD *)&v15 + 16 * v16)
    {
      v20 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v18 = -8192;
      v14[50] = vadd_s32(v14[50], (int32x2_t)0x1FFFFFFFFLL);
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v20 + 8), 0);
      if (v20)
      {
        if ((*(_BYTE *)(v20 + 24) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v20 + 32), 8);
        MEMORY[0x1CAA32FC0](v20, 0x1020C4072C728BCLL);
      }
    }
    v3 = *((_DWORD *)this + 5);
  }
  if ((v3 & 0x20000000) != 0)
  {
    v4 = **(int32x2_t ****)this;
    v5 = *v4;
    v6 = (*v4)[312].i32[0];
    if (v6)
    {
      v7 = v5[310];
      v8 = v6 - 1;
      v9 = v8 & ((this >> 4) ^ (this >> 9));
      v10 = *(_QWORD *)&v7 + 40 * v9;
      v11 = *(llvm::Value **)v10;
      if (*(llvm::Value **)v10 == this)
      {
LABEL_8:
        v12 = *(char **)(v10 + 8);
        v13 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v13)
        {
          v23 = v12 - 8;
          v24 = 16 * v13;
          do
          {
            v25 = *(unsigned __int8 **)&v23[v24];
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v23[v24], v25);
            v24 -= 16;
          }
          while (v24);
          v12 = *(char **)(v10 + 8);
        }
        if (v12 != (char *)(v10 + 24))
          free(v12);
        *(_QWORD *)v10 = -8192;
        v5[311] = vadd_s32(v5[311], (int32x2_t)0x1FFFFFFFFLL);
        v3 = *((_DWORD *)this + 5);
      }
      else
      {
        v21 = 1;
        while (v11 != (llvm::Value *)-4096)
        {
          v22 = v9 + v21++;
          v9 = v22 & v8;
          v10 = *(_QWORD *)&v7 + 40 * v9;
          v11 = *(llvm::Value **)v10;
          if (*(llvm::Value **)v10 == this)
            goto LABEL_8;
        }
      }
    }
    *((_DWORD *)this + 5) = v3 & 0xDFFFFFFF;
  }
  llvm::Value::destroyValueName((uint64_t)this);
}

{
  int v3;
  int32x2_t *v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  int v11;
  uint64_t v12;
  int32x2_t **v13;
  int32x2_t *v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  unsigned int v18;
  uint64_t v19;
  llvm::Value *v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 *v27;

  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
  {
    v4 = ***(int32x2_t ****)this;
    v5 = v4[49];
    v6 = v4[51].u32[0];
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((this >> 4) ^ (this >> 9));
      v8 = *(_QWORD *)&v5 + 16 * v7;
      v9 = *(llvm::Value **)v8;
      if (*(llvm::Value **)v8 == this)
      {
LABEL_12:
        if (v8 != *(_QWORD *)&v5 + 16 * v6)
        {
          v12 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)v8 = -8192;
          v4[50] = vadd_s32(v4[50], (int32x2_t)0x1FFFFFFFFLL);
          llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v12 + 8), 0);
          if (v12)
          {
            if ((*(_BYTE *)(v12 + 24) & 1) == 0)
              MEMORY[0x1CAA32FB4](*(_QWORD *)(v12 + 32), 8);
            MEMORY[0x1CAA32FC0](v12, 0x1020C4072C728BCLL);
          }
        }
        v3 = *((_DWORD *)this + 5);
        if ((v3 & 0x20000000) == 0)
          goto LABEL_5;
        goto LABEL_18;
      }
      v10 = 1;
      while (v9 != (llvm::Value *)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(llvm::Value **)(*(_QWORD *)&v5 + 16 * v7);
        if (v9 == this)
        {
          v8 = *(_QWORD *)&v5 + 16 * v7;
          goto LABEL_12;
        }
      }
    }
    v8 = *(_QWORD *)&v5 + 16 * v6;
    goto LABEL_12;
  }
  if ((v3 & 0x20000000) == 0)
    goto LABEL_5;
LABEL_18:
  v13 = **(int32x2_t ****)this;
  v14 = *v13;
  v15 = (*v13)[312].i32[0];
  if (v15)
  {
    v16 = v14[310];
    v17 = v15 - 1;
    v18 = v17 & ((this >> 4) ^ (this >> 9));
    v19 = *(_QWORD *)&v16 + 40 * v18;
    v20 = *(llvm::Value **)v19;
    if (*(llvm::Value **)v19 == this)
    {
LABEL_23:
      v23 = *(char **)(v19 + 8);
      v24 = *(unsigned int *)(v19 + 16);
      if ((_DWORD)v24)
      {
        v25 = v23 - 8;
        v26 = 16 * v24;
        do
        {
          v27 = *(unsigned __int8 **)&v25[v26];
          if (v27)
            llvm::MetadataTracking::untrack((uint64_t)&v25[v26], v27);
          v26 -= 16;
        }
        while (v26);
        v23 = *(char **)(v19 + 8);
      }
      if (v23 != (char *)(v19 + 24))
        free(v23);
      *(_QWORD *)v19 = -8192;
      v14[311] = vadd_s32(v14[311], (int32x2_t)0x1FFFFFFFFLL);
      v3 = *((_DWORD *)this + 5);
    }
    else
    {
      v21 = 1;
      while (v20 != (llvm::Value *)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & v17;
        v19 = *(_QWORD *)&v16 + 40 * v18;
        v20 = *(llvm::Value **)v19;
        if (*(llvm::Value **)v19 == this)
          goto LABEL_23;
      }
    }
  }
  *((_DWORD *)this + 5) = v3 & 0xDFFFFFFF;
LABEL_5:
  llvm::Value::destroyValueName((uint64_t)this);
}

